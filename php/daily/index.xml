<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:33:05Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielmiessler/SecLists</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/danielmiessler/SecLists</id>
    <link href="https://github.com/danielmiessler/SecLists" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SecLists is the security tester&#39;s companion. It&#39;s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://danielmiessler.com/images/seclists-long.png&#34; alt=&#34;seclists.png&#34; title=&#34;seclists.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About SecLists&lt;/h3&gt; &#xA;&lt;p&gt;SecLists is the security tester&#39;s companion. It&#39;s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more. The goal is to enable a security tester to pull this repository onto a new testing box and have access to every type of list that may be needed.&lt;/p&gt; &#xA;&lt;p&gt;This project is maintained by &lt;a href=&#34;https://danielmiessler.com/&#34;&gt;Daniel Miessler&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Jhaddix&#34;&gt;Jason Haddix&lt;/a&gt;, and &lt;a href=&#34;https://blog.g0tmi1k.com/&#34;&gt;g0tmi1k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O SecList.zip \&#xA;  &amp;amp;&amp;amp; unzip SecList.zip \&#xA;  &amp;amp;&amp;amp; rm -f SecList.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Git (Small)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 \&#xA;  https://github.com/danielmiessler/SecLists.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Git (Complete)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/danielmiessler/SecLists.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kali Linux&lt;/strong&gt; (&lt;a href=&#34;https://www.kali.org/tools/seclists/&#34;&gt;Tool Page&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt -y install seclists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Attribution&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Similar Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wordlists.assetnote.io/&#34;&gt;Assetnote Wordlists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bo0oM/fuzz.txt&#34;&gt;fuzz.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fuzzdb-project/fuzzdb&#34;&gt;FuzzDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;PayloadsAllTheThings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Licensing&lt;/h3&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://danielmiessler.com/images/mitlicense.png&#34; alt=&#34;MIT License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;—&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;NOTE: Downloading this repository is likely to cause a false-positive alarm by your anti-virus or anti-malware software, the filepath should be whitelisted. There is nothing in SecLists that can harm your computer as-is, however it&#39;s not recommended to store these files on a server or other important system due to the risk of local file include attacks.&lt;/sup&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel/framework</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/laravel/framework</id>
    <link href="https://github.com/laravel/framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Laravel Framework.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://laravel.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg?sanitize=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel/framework/actions&#34;&gt;&lt;img src=&#34;https://github.com/laravel/framework/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/laravel/framework&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laravel/framework&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laravel/framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laravel/framework&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About Laravel&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository contains the core code of the Laravel framework. If you want to build an application using Laravel, visit the main &lt;a href=&#34;https://github.com/laravel/laravel&#34;&gt;Laravel repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/docs/routing&#34;&gt;Simple, fast routing engine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/docs/container&#34;&gt;Powerful dependency injection container&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Multiple back-ends for &lt;a href=&#34;https://laravel.com/docs/session&#34;&gt;session&lt;/a&gt; and &lt;a href=&#34;https://laravel.com/docs/cache&#34;&gt;cache&lt;/a&gt; storage.&lt;/li&gt; &#xA; &lt;li&gt;Database agnostic &lt;a href=&#34;https://laravel.com/docs/migrations&#34;&gt;schema migrations&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/docs/queues&#34;&gt;Robust background job processing&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://laravel.com/docs/broadcasting&#34;&gt;Real-time event broadcasting&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Laravel is accessible, yet powerful, providing tools needed for large, robust applications. A superb combination of simplicity, elegance, and innovation gives you a complete toolset required to build any application with which you are tasked.&lt;/p&gt; &#xA;&lt;h2&gt;Learning Laravel&lt;/h2&gt; &#xA;&lt;p&gt;Laravel has the most extensive and thorough documentation and video tutorial library of any modern web application framework. The &lt;a href=&#34;https://laravel.com/docs&#34;&gt;Laravel documentation&lt;/a&gt; is in-depth and complete, making it a breeze to get started learning the framework.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not in the mood to read, &lt;a href=&#34;https://laracasts.com&#34;&gt;Laracasts&lt;/a&gt; contains over 1100 video tutorials covering a range of topics including Laravel, modern PHP, unit testing, JavaScript, and more. Boost the skill level of yourself and your entire team by digging into our comprehensive video library.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the &lt;a href=&#34;https://laravel.com/docs/contributions&#34;&gt;Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/framework/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Laravel framework is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/framework/9.x/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magento/magento2</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/magento/magento2</id>
    <link href="https://github.com/magento/magento2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All Submissions you make to Magento Inc. (&#34;Magento&#34;) through GitHub are subject to the following terms and conditions: (1) You grant Magento a perpetual, worldwide, non-exclusive, no charge, royalty free, irrevocable license under your applicable copyrights and patents to reproduce, prepare derivative works of, display, publically perform, subli…&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.codetriage.com/magento/magento2&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/magento/magento2/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/magento/magento2?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/magento-2&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/magento-2/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://magento.com/products/magento-open-source&#34;&gt; &lt;img alt=&#34;Adobe logo&#34; height=&#34;50px&#34; src=&#34;https://www.adobe.com/content/dam/cc/icons/Adobe_Corporate_Horizontal_Red_HEX.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Magento Open Source&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Magento Open Source project! &lt;a href=&#34;https://magento.com/products/magento-open-source&#34;&gt;Magento Open Source&lt;/a&gt; software delivers basic eCommerce capabilities to build a unique online store from the ground up.&lt;/p&gt; &#xA;&lt;p&gt;However, for those who need a full-featured eCommerce solution, we recommend &lt;a href=&#34;https://magento.com/products/magento-commerce&#34;&gt;Adobe Commerce&lt;/a&gt;, which includes our optimized cloud architecture and hosting as well as AI-powered merchandising and analytics.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/guides/v2.4/install-gde/composer.html&#34;&gt;Quick start install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/guides/v2.4/install-gde/system-requirements.html&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/guides/v2.4/install-gde/prereq/prereq-overview.html&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/guides/v2.4/install-gde/bk-install-guide.html&#34;&gt;More installation options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.magento.com/hc/en-us&#34;&gt;Help center&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://opensource.magento.com/&#34;&gt;Community&lt;/a&gt; is large and diverse, and our project is enormous. As a contributor, you have countless opportunities to impact product development and delivery by introducing new features or improving existing ones, enhancing test coverage, updating documentation for &lt;a href=&#34;https://devdocs.magento.com/&#34;&gt;developers&lt;/a&gt; and &lt;a href=&#34;https://docs.magento.com/user-guide/&#34;&gt;end-users&lt;/a&gt;, catching and fixing code bugs, suggesting points for optimization, and sharing your great ideas.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/contributor-guide/contributing.html&#34;&gt;Contribute to the code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/contributor-guide/contributing.html#report&#34;&gt;Report an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magento/devdocs&#34;&gt;Improve the developer documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magento/merchdocs&#34;&gt;Improve the end-user documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.adobe.com/open/magento&#34;&gt;Shape the future of Magento Open Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Maintainers&lt;/h3&gt; &#xA;&lt;p&gt;We encourage experts from the Community to help us with GitHub routines such as accepting, merging, or rejecting pull requests and reviewing issues. Adobe has granted the Community Maintainers permission to accept, merge, and reject pull requests, as well as review issues. Thanks to invaluable input from the Community Maintainers team, we can significantly improve contribution quality and accelerate the time to deliver your updates to production.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/contributor-guide/maintainers.html&#34;&gt;Learn more about the Maintainer role&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/contributor-guide/maintainer-handbook.html&#34;&gt;Maintainer&#39;s Handbook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://magento.com/magento-contributors#maintainers&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/magento/magento2/images/maintainers.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Leaders&lt;/h3&gt; &#xA;&lt;p&gt;Adobe highly appreciates contributions that help us to improve the code, clarify the documentation, and increase test coverage. Check out our Community leaders, superstars, and superheroes on the &lt;a href=&#34;https://magento.biterg.io/app/kibana#/dashboard/41dc0c60-fa06-11eb-bbaa-dd6ca6f8fda8?_g=()&#34;&gt;leaderboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://magento.com/magento-contributors&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/magento/magento2/images/contributors.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Labeling&lt;/h3&gt; &#xA;&lt;p&gt;We use labels in the GitHub issues and pull requests to help the participants retrieve additional information such as progress, component assignments, or release lines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devdocs.magento.com/contributor-guide/contributing.html#labels&#34;&gt;Labels applied by the Community Engineering team&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devdocs.magento.com/guides/v2.4/architecture/security_intro.html&#34;&gt;Security&lt;/a&gt; is one of the highest priorities at Adobe. To learn more about reporting security concerns, visit the &lt;a href=&#34;https://hackerone.com/adobe&#34;&gt;Adobe Bug Bounty Program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stay up-to-date on the latest security news and patches by signing up for &lt;a href=&#34;https://magento.com/security/sign-up&#34;&gt;Security Alert Notifications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Each Magento source file included in this distribution is licensed under OSL 3.0 or the terms and conditions of the applicable ordering document between Licensee/Customer and Adobe (or Magento).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/osl-3.0.php&#34;&gt;Open Software License (OSL 3.0)&lt;/a&gt; – Please see &lt;a href=&#34;https://raw.githubusercontent.com/magento/magento2/2.4-develop/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; for the full text of the OSL 3.0 license.&lt;/p&gt; &#xA;&lt;p&gt;Subject to Licensee&#39;s/Customer&#39;s payment of fees and compliance with the terms and conditions of the applicable ordering document between Licensee/Customer and Adobe (or Magento), the terms and conditions of the applicable ordering between Licensee/Customer and Adobe (or Magento) supersede the OSL 3.0 license for each source file.&lt;/p&gt; &#xA;&lt;h2&gt;Communications&lt;/h2&gt; &#xA;&lt;p&gt;We are dedicated to our Community and encourage your contributions and welcome feedback through &lt;a href=&#34;https://www.adobe.io/open/magento/calendar&#34;&gt;events&lt;/a&gt;, our &lt;a href=&#34;https://community.magento.com/t5/Magento-DevBlog/bg-p/devblog&#34;&gt;DevBlog&lt;/a&gt;, Twitter and YouTube channels, and &lt;a href=&#34;https://devdocs.magento.com/community/resources.html&#34;&gt;other Community resources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To connect with people from the Community and Adobe engineering, &lt;a href=&#34;https://magentocommeng.slack.com&#34;&gt;join us in Slack&lt;/a&gt;. We have a channel for every project. To join a particular channel, send us a request at &lt;a href=&#34;mailto:engcom@adobe.com&#34;&gt;engcom@adobe.com&lt;/a&gt;, or &lt;a href=&#34;https://opensource.magento.com/slack&#34;&gt;sign up&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adobe.io/open/magento/slack&#34;&gt;Popular Slack channels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are a new Community member, check out the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://magentocommeng.slack.com/archives/C4YS78WE6&#34;&gt;general&lt;/a&gt; is an open chat for introductions and Magento 2 questions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://magentocommeng.slack.com/archives/C7KB93M32&#34;&gt;github&lt;/a&gt; is a support channel for GitHub issues, pull requests, and processes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://magentocommeng.slack.com/archives/CCV3J3RV5&#34;&gt;public-backlog&lt;/a&gt; for discussions of the backlog&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>composer/composer</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/composer/composer</id>
    <link href="https://github.com/composer/composer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dependency Manager for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Composer - Dependency Management for PHP&lt;/h1&gt; &#xA;&lt;p&gt;Composer helps you declare, manage, and install dependencies of PHP projects.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://getcomposer.org/&#34;&gt;https://getcomposer.org/&lt;/a&gt; for more information and documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/composer/composer/actions&#34;&gt;&lt;img src=&#34;https://github.com/composer/composer/workflows/Continuous%20Integration/badge.svg?branch=main&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation / Usage&lt;/h2&gt; &#xA;&lt;p&gt;Download and install Composer by following the &lt;a href=&#34;https://getcomposer.org/download/&#34;&gt;official instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For usage, see &lt;a href=&#34;https://getcomposer.org/doc/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;Find public packages on &lt;a href=&#34;https://packagist.org&#34;&gt;Packagist.org&lt;/a&gt;. For private package hosting take a look at &lt;a href=&#34;https://packagist.com&#34;&gt;Private Packagist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/packagist&#34;&gt;@packagist&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/seldaek&#34;&gt;@seldaek&lt;/a&gt; on Twitter for announcements, or check the &lt;a href=&#34;https://twitter.com/search?q=%23composerphp&amp;amp;src=typed_query&amp;amp;f=live&#34;&gt;#composerphp&lt;/a&gt; hashtag.&lt;/p&gt; &#xA;&lt;p&gt;For support, Stack Overflow offers a good collection of &lt;a href=&#34;https://stackoverflow.com/questions/tagged/composer-php&#34;&gt;Composer related questions&lt;/a&gt;, or you can use the &lt;a href=&#34;https://github.com/composer/composer/discussions&#34;&gt;GitHub discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://www.contributor-covenant.org/version/1/4/code-of-conduct/&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project and its community you agree to abide by those terms.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h4&gt;Latest Composer&lt;/h4&gt; &#xA;&lt;p&gt;PHP 7.2.5 or above for the latest version.&lt;/p&gt; &#xA;&lt;h4&gt;Composer 2.2 LTS (Long Term Support)&lt;/h4&gt; &#xA;&lt;p&gt;PHP versions 5.3.2 - 8.1 are still supported via the LTS releases of Composer (2.2.x). If you run the installer or the &lt;code&gt;self-update&lt;/code&gt; command the appropriate Composer version for your PHP should be automatically selected.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nils Adermann | &lt;a href=&#34;https://github.com/naderman&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/naderman&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;mailto:naderman@naderman.de&#34;&gt;naderman@naderman.de&lt;/a&gt; | &lt;a href=&#34;https://naderman.de&#34;&gt;naderman.de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jordi Boggiano | &lt;a href=&#34;https://github.com/Seldaek&#34;&gt;GitHub&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/seldaek&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;mailto:j.boggiano@seld.be&#34;&gt;j.boggiano@seld.be&lt;/a&gt; | &lt;a href=&#34;https://seld.be&#34;&gt;seld.be&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/composer/composer/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h2&gt;Security Reports&lt;/h2&gt; &#xA;&lt;p&gt;Please send any sensitive issue to &lt;a href=&#34;mailto:security@packagist.org&#34;&gt;security@packagist.org&lt;/a&gt;. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Composer is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/composer/composer/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project&#39;s Solver started out as a PHP port of openSUSE&#39;s &lt;a href=&#34;https://en.opensuse.org/openSUSE:Libzypp_satsolver&#34;&gt;Libzypp satsolver&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Seldaek/monolog</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/Seldaek/monolog</id>
    <link href="https://github.com/Seldaek/monolog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sends your logs to files, sockets, inboxes, databases and various web services&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monolog - Logging for PHP &lt;a href=&#34;https://github.com/Seldaek/monolog/actions&#34;&gt;&lt;img src=&#34;https://github.com/Seldaek/monolog/workflows/Continuous%20Integration/badge.svg?branch=main&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/monolog/monolog&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/monolog/monolog.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/monolog/monolog&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/monolog/monolog.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Monolog sends your logs to files, sockets, inboxes, databases and various web services. See the complete list of handlers below. Special handlers allow you to build advanced logging strategies.&lt;/p&gt; &#xA;&lt;p&gt;This library implements the &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-3-logger-interface.md&#34;&gt;PSR-3&lt;/a&gt; interface that you can type-hint against in your own libraries to keep a maximum of interoperability. You can also use it in your applications to make sure you can always use another compatible logger at a later time. As of 1.11.0 Monolog public APIs will also accept PSR-3 log levels. Internally Monolog still uses its own level scheme since it predates PSR-3.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the latest version with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require monolog/monolog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Monolog\Level;&#xA;use Monolog\Logger;&#xA;use Monolog\Handler\StreamHandler;&#xA;&#xA;// create a log channel&#xA;$log = new Logger(&#39;name&#39;);&#xA;$log-&amp;gt;pushHandler(new StreamHandler(&#39;path/to/your.log&#39;, Level::Warning));&#xA;&#xA;// add records to the log&#xA;$log-&amp;gt;warning(&#39;Foo&#39;);&#xA;$log-&amp;gt;error(&#39;Bar&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Seldaek/monolog/main/doc/01-usage.md&#34;&gt;Usage Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Seldaek/monolog/main/doc/02-handlers-formatters-processors.md&#34;&gt;Handlers, Formatters and Processors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Seldaek/monolog/main/doc/03-utilities.md&#34;&gt;Utility Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Seldaek/monolog/main/doc/04-extending.md&#34;&gt;Extending Monolog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Seldaek/monolog/main/doc/message-structure.md&#34;&gt;Log Record Structure&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Monolog Financially&lt;/h2&gt; &#xA;&lt;p&gt;Get supported Monolog and help fund the project with the &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-monolog-monolog?utm_source=packagist-monolog-monolog&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&#34;&gt;Tidelift Subscription&lt;/a&gt; or via &lt;a href=&#34;https://github.com/sponsors/Seldaek&#34;&gt;GitHub sponsorship&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tidelift delivers commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Packages&lt;/h2&gt; &#xA;&lt;p&gt;Third party handlers, formatters and processors are &lt;a href=&#34;https://github.com/Seldaek/monolog/wiki/Third-Party-Packages&#34;&gt;listed in the wiki&lt;/a&gt;. You can also add your own there if you publish one.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monolog &lt;code&gt;^3.0&lt;/code&gt; works with PHP 8.1 or above.&lt;/li&gt; &#xA; &lt;li&gt;Monolog &lt;code&gt;^2.5&lt;/code&gt; works with PHP 7.2 or above.&lt;/li&gt; &#xA; &lt;li&gt;Monolog &lt;code&gt;^1.25&lt;/code&gt; works with PHP 5.3 up to 8.1, but is not very maintained anymore and will not receive PHP support fixes anymore.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;Monolog 1.x support is somewhat limited at this point and only important fixes will be done. You should migrate to Monolog 2 or 3 where possible to benefit from all the latest features and fixes.&lt;/p&gt; &#xA;&lt;h3&gt;Submitting bugs and feature requests&lt;/h3&gt; &#xA;&lt;p&gt;Bugs and feature request are tracked on &lt;a href=&#34;https://github.com/Seldaek/monolog/issues&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Framework Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Frameworks and libraries using &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-3-logger-interface.md&#34;&gt;PSR-3&lt;/a&gt; can be used very easily with Monolog since it implements the interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://symfony.com&#34;&gt;Symfony&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://laravel.com/&#34;&gt;Laravel&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lumen.laravel.com/&#34;&gt;Lumen&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ppi/framework&#34;&gt;PPI&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cakephp.org/&#34;&gt;CakePHP&lt;/a&gt; is usable with Monolog via the &lt;a href=&#34;https://github.com/jadb/cakephp-monolog&#34;&gt;cakephp-monolog&lt;/a&gt; plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.slimframework.com/&#34;&gt;Slim&lt;/a&gt; is usable with Monolog via the &lt;a href=&#34;https://github.com/Flynsarmy/Slim-Monolog&#34;&gt;Slim-Monolog&lt;/a&gt; log writer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xoops.org/&#34;&gt;XOOPS 2.6&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auraphp/Aura.Web_Project&#34;&gt;Aura.Web_Project&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nette.org/en/&#34;&gt;Nette Framework&lt;/a&gt; is usable with Monolog via the &lt;a href=&#34;https://github.com/contributte/monolog&#34;&gt;contributte/monolog&lt;/a&gt; or &lt;a href=&#34;https://github.com/orisai/nette-monolog&#34;&gt;orisai/nette-monolog&lt;/a&gt; extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexbilbie/Proton&#34;&gt;Proton Micro Framework&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fuelphp.com/&#34;&gt;FuelPHP&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/equip/framework&#34;&gt;Equip Framework&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.yiiframework.com/&#34;&gt;Yii 2&lt;/a&gt; is usable with Monolog via the &lt;a href=&#34;https://github.com/merorafael/yii2-monolog&#34;&gt;yii2-monolog&lt;/a&gt; or &lt;a href=&#34;https://github.com/samdark/yii2-psr-log-target&#34;&gt;yii2-psr-log-target&lt;/a&gt; plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HawkBitPhp/hawkbit&#34;&gt;Hawkbit Micro Framework&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.silverstripe.org/&#34;&gt;SilverStripe 4&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.drupal.org/&#34;&gt;Drupal&lt;/a&gt; is usable with Monolog via the &lt;a href=&#34;https://www.drupal.org/project/monolog&#34;&gt;monolog&lt;/a&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aimeos.org/&#34;&gt;Aimeos ecommerce framework&lt;/a&gt; is usable with Monolog via the &lt;a href=&#34;https://github.com/aimeos/ai-monolog&#34;&gt;ai-monolog&lt;/a&gt; extension.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://magento.com/&#34;&gt;Magento&lt;/a&gt; comes out of the box with Monolog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;Jordi Boggiano - &lt;a href=&#34;mailto:j.boggiano@seld.be&#34;&gt;j.boggiano@seld.be&lt;/a&gt; - &lt;a href=&#34;http://twitter.com/seldaek&#34;&gt;http://twitter.com/seldaek&lt;/a&gt;&lt;br&gt; See also the list of &lt;a href=&#34;https://github.com/Seldaek/monolog/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Monolog is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/Seldaek/monolog/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt; &#xA;&lt;p&gt;This library is heavily inspired by Python&#39;s &lt;a href=&#34;https://logbook.readthedocs.io/en/stable/&#34;&gt;Logbook&lt;/a&gt; library, although most concepts have been adjusted to fit to the PHP world.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laravel-filament/filament</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/laravel-filament/filament</id>
    <link href="https://github.com/laravel-filament/filament" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Admin panel, form builder and table builder for the TALL stack. Designed for humans.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41773797/131910226-676cb28a-332d-4162-a6a8-136a93d5a70f.png&#34; alt=&#34;Banner&#34; style=&#34;width: 100%; max-width: 800px;&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laravel-filament/filament/actions&#34;&gt;&lt;img alt=&#34;Tests passing&#34; src=&#34;https://img.shields.io/badge/Tests-passing-green?style=for-the-badge&amp;amp;logo=github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://laravel.com&#34;&gt;&lt;img alt=&#34;Laravel v8.x&#34; src=&#34;https://img.shields.io/badge/Laravel-v8.x-FF2D20?style=for-the-badge&amp;amp;logo=laravel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://laravel-livewire.com&#34;&gt;&lt;img alt=&#34;Livewire v2.x&#34; src=&#34;https://img.shields.io/badge/Livewire-v2.x-FB70A9?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://php.net&#34;&gt;&lt;img alt=&#34;PHP 8.0&#34; src=&#34;https://img.shields.io/badge/PHP-8.0-777BB4?style=for-the-badge&amp;amp;logo=php&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Filament is a collection of tools for rapidly building beautiful TALL stack apps, designed for humans.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;h3&gt;Admin Panel • &lt;a href=&#34;https://filamentphp.com/docs/admin&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://demo.filamentphp.com&#34;&gt;Demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/filament&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Form Builder • &lt;a href=&#34;https://filamentphp.com/docs/forms&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/forms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Table Builder • &lt;a href=&#34;https://filamentphp.com/docs/tables&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/tables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spatie Media Library Plugin • &lt;a href=&#34;https://filamentphp.com/docs/spatie-laravel-media-library-plugin&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/spatie-laravel-media-library-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spatie Settings Plugin • &lt;a href=&#34;https://filamentphp.com/docs/spatie-laravel-settings-plugin&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/spatie-laravel-settings-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spatie Tags Plugin • &lt;a href=&#34;https://filamentphp.com/docs/spatie-laravel-tags-plugin&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/spatie-laravel-tags-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spatie Translatable Plugin • &lt;a href=&#34;https://filamentphp.com/docs/spatie-laravel-translatable-plugin&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require filament/spatie-laravel-translatable-plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to Filament packages, you may want to test it in a real Laravel project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repository to your GitHub account.&lt;/li&gt; &#xA; &lt;li&gt;Create a Laravel app locally.&lt;/li&gt; &#xA; &lt;li&gt;Clone your fork in your Laravel app&#39;s root directory.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;/filament&lt;/code&gt; directory, create a branch for your fix, e.g. &lt;code&gt;fix/error-message&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install the packages in your app&#39;s &lt;code&gt;composer.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    ...&#xA;    &#34;require&#34;: {&#xA;        &#34;filament/filament&#34;: &#34;dev-fix/error-message as 2.x-dev&#34;,&#xA;        &#34;filament/forms&#34;: &#34;dev-fix/error-message as 2.x-dev&#34;,&#xA;        &#34;filament/support&#34;: &#34;dev-fix/error-message as 2.x-dev&#34;,&#xA;        &#34;filament/tables&#34;: &#34;dev-fix/error-message as 2.x-dev&#34;&#xA;    },&#xA;    &#34;repositories&#34;: [&#xA;        {&#xA;            &#34;type&#34;: &#34;path&#34;,&#xA;            &#34;url&#34;: &#34;filament/packages/*&#34;&#xA;        }&#xA;    ],&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, run &lt;code&gt;composer update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;p&gt;🐞 If you spot a bug, please &lt;a href=&#34;https://github.com/laravel-filament/filament/issues/new&#34;&gt;submit a detailed issue&lt;/a&gt;, and wait for assistance.&lt;/p&gt; &#xA;&lt;p&gt;🤔 If you have a question or feature request, please &lt;a href=&#34;https://github.com/laravel-filament/filament/discussions/new&#34;&gt;start a new discussion&lt;/a&gt;. We also have a &lt;a href=&#34;https://discord.gg/cpqnMTHZja&#34;&gt;Discord community&lt;/a&gt;. For quick help, ask questions in the appropriate package help channel.&lt;/p&gt; &#xA;&lt;p&gt;🔐 If you discover a vulnerability, please review our &lt;a href=&#34;https://github.com/laravel-filament/filament/raw/2.x/SECURITY.md&#34;&gt;security policy&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rectorphp/rector</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/rectorphp/rector</id>
    <link href="https://github.com/rectorphp/rector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Instant Upgrades and Automated Refactoring of any PHP 5.3+ code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rector - Instant Upgrades and Automated Refactoring&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/rector/rector&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/rector/rector.svg?style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Rector instantly upgrades and refactors the PHP code of your application. It can help you in 2 major areas:&lt;/p&gt; &#xA;&lt;h3&gt;1. Instant Upgrades&lt;/h3&gt; &#xA;&lt;p&gt;Rector now supports upgrades from PHP 5.3 to 8.1 and major open-source projects like &lt;a href=&#34;https://github.com/rectorphp/rector-symfony&#34;&gt;Symfony&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-phpunit&#34;&gt;PHPUnit&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-nette&#34;&gt;Nette&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-laravel&#34;&gt;Laravel&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-cakephp&#34;&gt;CakePHP&lt;/a&gt;, &lt;a href=&#34;https://github.com/rectorphp/rector-doctrine&#34;&gt;Doctrine&lt;/a&gt; and &lt;a href=&#34;https://github.com/sabbelasichon/typo3-rector&#34;&gt;TYPO3&lt;/a&gt; out of the box. Do you want to &lt;strong&gt;be constantly on the latest PHP and Framework without effort&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Use Rector to handle &lt;strong&gt;instant upgrades&lt;/strong&gt; for you.&lt;/p&gt; &#xA;&lt;h3&gt;2. Automated Refactoring&lt;/h3&gt; &#xA;&lt;p&gt;Do you have code quality you need, but struggle to keep it with new developers in your team? Do you want to see smart code-reviews even when every senior developers sleeps?&lt;/p&gt; &#xA;&lt;p&gt;Add Rector to your CI and let it &lt;strong&gt;continuously refactor your code&lt;/strong&gt; and keep the code quality high.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Read a First Book About Rector&lt;/h2&gt; &#xA;&lt;p&gt;Are you curious, how Rector works internally, how to create your own rules and test them and why Rector was born? In May 2021 we&#39;ve released the very first book: &lt;em&gt;Rector - The Power of Automated Refactoring&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://leanpub.com/rector-the-power-of-automated-refactoring&#34;&gt; &lt;img src=&#34;https://github.com/rectorphp/the-power-of-automated-refactoring-feedback/raw/main/images/book_title.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://leanpub.com/rector-the-power-of-automated-refactoring&#34;&gt;buying a book&lt;/a&gt; you directly support maintainers who are working on Rector.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/rector_rules_overview.md&#34;&gt;Explore 500+ Rector Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_ignore_rule_or_paths.md&#34;&gt;How to Ignore Rule or Paths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/static_reflection_and_autoload.md&#34;&gt;Static Reflection and Autoload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_configure_rules.md&#34;&gt;How to Configure Rule&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/auto_import_names.md&#34;&gt;Auto Import Names&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Rule Developers and Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_add_test_for_rector_rule.md&#34;&gt;How to add Test for Rector Rule&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_it_works.md&#34;&gt;How Does Rector Work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rectorphp/php-parser-nodes-docs/&#34;&gt;PHP Parser Nodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/how_to_work_with_doc_block_and_comments.md&#34;&gt;How to Work with Doc Block and Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs/create_own_rule.md&#34;&gt;How to Generate New Rector Rule&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/docs&#34;&gt;the full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require rector/rector --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Running Rector&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 main ways to use Rector:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;em&gt;single rule&lt;/em&gt;, to have the change under control&lt;/li&gt; &#xA; &lt;li&gt;or group of rules called &lt;em&gt;sets&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use them, create a &lt;code&gt;rector.php&lt;/code&gt; in your root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And modify it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Rector\Php74\Rector\Property\TypedPropertyRector;&#xA;use Rector\Set\ValueObject\SetList;&#xA;use Rector\Config\RectorConfig;&#xA;&#xA;return static function (RectorConfig $rectorConfig): void {&#xA;    // here we can define, what sets of rules will be applied&#xA;    // tip: use &#34;SetList&#34; class to autocomplete sets&#xA;    $rectorConfig-&amp;gt;sets([&#xA;        SetList::CODE_QUALITY&#xA;    ]);&#xA;&#xA;    // register single rule&#xA;    $rectorConfig-&amp;gt;rule(TypedPropertyRector::class);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then dry run Rector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src --dry-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rector will show you diff of files that it &lt;em&gt;would&lt;/em&gt; change. To &lt;em&gt;make&lt;/em&gt; the changes, drop &lt;code&gt;--dry-run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;rector.php&lt;/code&gt; is loaded by default. For different location, use &lt;code&gt;--config&lt;/code&gt; option.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Rector will only update legacy code to utilize new features which are supported by the PHP version defined in your &lt;code&gt;composer.json&lt;/code&gt; file. For instance, if require.php is &lt;code&gt;&amp;gt;=7.2.5&lt;/code&gt;, Rector will not make changes which are only available for PHP versions after 7.2.5.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// rector.php&#xA;use Rector\Core\ValueObject\PhpVersion;&#xA;use Rector\Config\RectorConfig;&#xA;&#xA;return static function (RectorConfig $rectorConfig): void {&#xA;    // paths to refactor; solid alternative to CLI arguments&#xA;    $rectorConfig-&amp;gt;paths([__DIR__ . &#39;/src&#39;, __DIR__ . &#39;/tests&#39;]);&#xA;&#xA;    // is your PHP version different from the one you refactor to? [default: your PHP version], uses PHP_VERSION_ID format&#xA;    $rectorConfig-&amp;gt;phpVersion(PhpVersion::PHP_72);&#xA;&#xA;    // Path to PHPStan with extensions, that PHPStan in Rector uses to determine types&#xA;    $rectorConfig-&amp;gt;phpstanConfig(__DIR__ . &#39;/phpstan-for-config.neon&#39;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Rector is a tool that &lt;a href=&#34;https://getrector.org/&#34;&gt;we develop&lt;/a&gt; and share for free, so anyone can automate their refactoring. But not everyone has dozens of hours to understand complexity of abstract-syntax-tree in their own time. &lt;strong&gt;That&#39;s why we provide commercial support - to save your time&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Would you like to apply Rector on your code base but don&#39;t have time for the struggle with your project? &lt;a href=&#34;https://getrector.org/contact&#34;&gt;Hire us&lt;/a&gt; to get there faster.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rectorphp/rector/main/CONTRIBUTING.md&#34;&gt;the contribution guide&lt;/a&gt; or go to development repository &lt;a href=&#34;https://github.com/rectorphp/rector-src&#34;&gt;rector/rector-src&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Projects using Rector&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/codito/rector-money&#34;&gt;&lt;code&gt;codito/rector-money&lt;/code&gt;&lt;/a&gt;: set of rules related to &lt;code&gt;moneyphp/money&lt;/code&gt; library. It can help you with upgrading to v4.0 or make your codebase compatible for future upgrade.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/laminas/laminas-servicemanager-migration&#34;&gt;&lt;code&gt;laminas/laminas-servicemanager-migration&lt;/code&gt;&lt;/a&gt;: set of rules related to &lt;code&gt;laminas-servicemanager&lt;/code&gt; library. It can help migrate your code to laminas-servicemanager 4.x compatibility.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;--debug&lt;/code&gt; option, that will print nested exceptions output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src/Controller --dry-run --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with Xdebug:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://xdebug.org/&#34;&gt;Xdebug&lt;/a&gt; is installed and configured&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;--xdebug&lt;/code&gt; option when running Rector&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/rector process src/Controller --dry-run --xdebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To assist with simple debugging Rector provides 2 helpers to pretty-print AST-nodes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use PhpParser\Node\Scalar\String_;&#xA;&#xA;$node = new String_(&#39;hello world!&#39;);&#xA;&#xA;// prints node to string, as PHP code displays it&#xA;print_node($node);&#xA;&#xA;// dump nested node object with nested properties&#xA;dump_node($node);&#xA;// 2nd argument is how deep the nesting is - this makes sure the dump is short and useful&#xA;dump_node($node, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Known Drawbacks&lt;/h2&gt; &#xA;&lt;h3&gt;How to Apply Coding Standards?&lt;/h3&gt; &#xA;&lt;p&gt;Rector uses &lt;a href=&#34;https://github.com/nikic/PHP-Parser/&#34;&gt;nikic/php-parser&lt;/a&gt;, built on technology called an &lt;em&gt;abstract syntax tree&lt;/em&gt; (AST). An AST doesn&#39;t know about spaces and when written to a file it produces poorly formatted code in both PHP and docblock annotations. &lt;strong&gt;That&#39;s why your project needs to have a coding standard tool&lt;/strong&gt; and a set of formatting rules, so it can make Rector&#39;s output code nice and shiny again.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re using &lt;a href=&#34;https://github.com/symplify/easy-coding-standard&#34;&gt;ECS&lt;/a&gt; with &lt;a href=&#34;https://github.com/rectorphp/rector-src/raw/main/ecs.php&#34;&gt;this setup&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symfony/console</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/symfony/console</id>
    <link href="https://github.com/symfony/console" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Console component eases the creation of beautiful and testable command line interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Console Component&lt;/h1&gt; &#xA;&lt;p&gt;The Console component eases the creation of beautiful and testable command line interfaces.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/components/console.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symfony/symfony/issues&#34;&gt;Report issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/symfony/symfony/pulls&#34;&gt;send Pull Requests&lt;/a&gt; in the &lt;a href=&#34;https://github.com/symfony/symfony&#34;&gt;main Symfony repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Resources/bin/hiddeninput.exe&lt;/code&gt; is a third party binary provided within this component. Find sources and license at &lt;a href=&#34;https://github.com/Seldaek/hidden-input&#34;&gt;https://github.com/Seldaek/hidden-input&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deployphp/deployer</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/deployphp/deployer</id>
    <link href="https://github.com/deployphp/deployer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A deployment tool written in PHP with support for popular frameworks out of the box&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://deployer.org&#34;&gt;&lt;img src=&#34;https://medv.io/assets/deployer/logo.png&#34; alt=&#34;Deployer Logo&#34; height=&#34;30&#34;&gt;&lt;/a&gt; Deployer&lt;/h1&gt; &#xA;&lt;p&gt;A deployment tool written in PHP with support for popular frameworks out of the box.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&#34;https://deployer.org&#34;&gt;&lt;img src=&#34;https://medv.io/assets/deployer/deployer.gif&#34; alt=&#34;Deployer Screenshot&#34; width=&#34;530&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deployphp/deployer/actions?query=workflow%3Atest&#34;&gt;&lt;img src=&#34;https://github.com/deployphp/deployer/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/deployer/deployer&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/deployer/deployer.svg?style=flat&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/deployer/deployer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://deployer.org&#34;&gt;deployer.org&lt;/a&gt; for more information and documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic server &lt;strong&gt;provisioning&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero downtime&lt;/strong&gt; deployments.&lt;/li&gt; &#xA; &lt;li&gt;Ready to use recipes for &lt;strong&gt;most frameworks&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deployphp/action&#34;&gt;GitHub Action for Deployer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deployphp/deployer/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PHPMailer/PHPMailer</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/PHPMailer/PHPMailer</id>
    <link href="https://github.com/PHPMailer/PHPMailer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The classic email sending library for PHP&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PHPMailer/PHPMailer/master/examples/images/phpmailer.png&#34; alt=&#34;PHPMailer&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PHPMailer – A full-featured email creation and transfer class for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/actions&#34;&gt;&lt;img src=&#34;https://github.com/PHPMailer/PHPMailer/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/PHPMailer/PHPMailer&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/PHPMailer/PHPMailer/branch/master/graph/badge.svg?token=iORZpwmYmM&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpmailer/phpmailer/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpmailer/phpmailer/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpmailer/phpmailer/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://phpmailer.github.io/PHPMailer/&#34;&gt;&lt;img src=&#34;https://github.com/phpmailer/phpmailer/workflows/Docs/badge.svg?sanitize=true&#34; alt=&#34;API Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Probably the world&#39;s most popular code for sending email from PHP!&lt;/li&gt; &#xA; &lt;li&gt;Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more&lt;/li&gt; &#xA; &lt;li&gt;Integrated SMTP support – send without a local mail server&lt;/li&gt; &#xA; &lt;li&gt;Send emails with multiple To, CC, BCC and Reply-to addresses&lt;/li&gt; &#xA; &lt;li&gt;Multipart/alternative emails for mail clients that do not read HTML email&lt;/li&gt; &#xA; &lt;li&gt;Add attachments, including inline&lt;/li&gt; &#xA; &lt;li&gt;Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings&lt;/li&gt; &#xA; &lt;li&gt;SMTP authentication with LOGIN, PLAIN, CRAM-MD5, and XOAUTH2 mechanisms over SMTPS and SMTP+STARTTLS transports&lt;/li&gt; &#xA; &lt;li&gt;Validates email addresses automatically&lt;/li&gt; &#xA; &lt;li&gt;Protects against header injection attacks&lt;/li&gt; &#xA; &lt;li&gt;Error messages in over 50 languages!&lt;/li&gt; &#xA; &lt;li&gt;DKIM and S/MIME signing support&lt;/li&gt; &#xA; &lt;li&gt;Compatible with PHP 5.5 and later, including PHP 8.1&lt;/li&gt; &#xA; &lt;li&gt;Namespaced to prevent name clashes&lt;/li&gt; &#xA; &lt;li&gt;Much more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why you might need it&lt;/h2&gt; &#xA;&lt;p&gt;Many PHP developers need to send email from their code. The only PHP function that supports this directly is &lt;a href=&#34;https://www.php.net/manual/en/function.mail.php&#34;&gt;&lt;code&gt;mail()&lt;/code&gt;&lt;/a&gt;. However, it does not provide any assistance for making use of popular features such as encryption, authentication, HTML messages, and attachments.&lt;/p&gt; &#xA;&lt;p&gt;Formatting email correctly is surprisingly difficult. There are myriad overlapping (and conflicting) standards, requiring tight adherence to horribly complicated formatting and encoding rules – the vast majority of code that you&#39;ll find online that uses the &lt;code&gt;mail()&lt;/code&gt; function directly is just plain wrong, if not unsafe!&lt;/p&gt; &#xA;&lt;p&gt;The PHP &lt;code&gt;mail()&lt;/code&gt; function usually sends via a local mail server, typically fronted by a &lt;code&gt;sendmail&lt;/code&gt; binary on Linux, BSD, and macOS platforms, however, Windows usually doesn&#39;t include a local mail server; PHPMailer&#39;s integrated SMTP client allows email sending on all platforms without needing a local mail server. Be aware though, that the &lt;code&gt;mail()&lt;/code&gt; function should be avoided when possible; it&#39;s both faster and &lt;a href=&#34;https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html&#34;&gt;safer&lt;/a&gt; to use SMTP to localhost.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please&lt;/em&gt; don&#39;t be tempted to do it yourself – if you don&#39;t use PHPMailer, there are many other excellent libraries that you should look at before rolling your own. Try &lt;a href=&#34;https://swiftmailer.symfony.com/&#34;&gt;SwiftMailer&lt;/a&gt; , &lt;a href=&#34;https://docs.laminas.dev/laminas-mail/&#34;&gt;Laminas/Mail&lt;/a&gt;, &lt;a href=&#34;https://github.com/zetacomponents/Mail&#34;&gt;ZetaComponents&lt;/a&gt; etc.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is distributed under the &lt;a href=&#34;http://www.gnu.org/licenses/lgpl-2.1.html&#34;&gt;LGPL 2.1&lt;/a&gt; license, along with the &lt;a href=&#34;https://gplcc.github.io/gplcc/&#34;&gt;GPL Cooperation Commitment&lt;/a&gt;. Please read &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for information on the software availability and distribution.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; loading&lt;/h2&gt; &#xA;&lt;p&gt;PHPMailer is available on &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;Packagist&lt;/a&gt; (using semantic versioning), and installation via &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; is the recommended way to install PHPMailer. Just add this line to your &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;phpmailer/phpmailer&#34;: &#34;^6.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require phpmailer/phpmailer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;vendor&lt;/code&gt; folder and the &lt;code&gt;vendor/autoload.php&lt;/code&gt; script are generated by Composer; they are not part of PHPMailer.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the Gmail XOAUTH2 authentication class, you will also need to add a dependency on the &lt;code&gt;league/oauth2-client&lt;/code&gt; package in your &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;re not using Composer, you can &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/archive/master.zip&#34;&gt;download PHPMailer as a zip file&lt;/a&gt;, (note that docs and examples are not included in the zip file), then copy the contents of the PHPMailer folder into one of the &lt;code&gt;include_path&lt;/code&gt; directories specified in your PHP configuration and load each class file manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;use PHPMailer\PHPMailer\PHPMailer;&#xA;use PHPMailer\PHPMailer\Exception;&#xA;&#xA;require &#39;path/to/PHPMailer/src/Exception.php&#39;;&#xA;require &#39;path/to/PHPMailer/src/PHPMailer.php&#39;;&#xA;require &#39;path/to/PHPMailer/src/SMTP.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using the &lt;code&gt;SMTP&lt;/code&gt; class explicitly (you&#39;re probably not), you don&#39;t need a &lt;code&gt;use&lt;/code&gt; line for the SMTP class. Even if you&#39;re not using exceptions, you do still need to load the &lt;code&gt;Exception&lt;/code&gt; class as it is used internally.&lt;/p&gt; &#xA;&lt;h2&gt;Legacy versions&lt;/h2&gt; &#xA;&lt;p&gt;PHPMailer 5.2 (which is compatible with PHP 5.0 — 7.0) is no longer supported, even for security updates. You will find the latest version of 5.2 in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/5.2-stable&#34;&gt;5.2-stable branch&lt;/a&gt;. If you&#39;re using PHP 5.5 or later (which you should be), switch to the 6.x releases.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading from 5.2&lt;/h3&gt; &#xA;&lt;p&gt;The biggest changes are that source files are now in the &lt;code&gt;src/&lt;/code&gt; folder, and PHPMailer now declares the namespace &lt;code&gt;PHPMailer\PHPMailer&lt;/code&gt;. This has several important effects – &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/UPGRADING.md&#34;&gt;read the upgrade guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Minimal installation&lt;/h3&gt; &#xA;&lt;p&gt;While installing the entire package manually or with Composer is simple, convenient, and reliable, you may want to include only vital files in your project. At the very least you will need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/PHPMailer.php&#34;&gt;src/PHPMailer.php&lt;/a&gt;. If you&#39;re using SMTP, you&#39;ll need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/SMTP.php&#34;&gt;src/SMTP.php&lt;/a&gt;, and if you&#39;re using POP-before SMTP (&lt;em&gt;very&lt;/em&gt; unlikely!), you&#39;ll need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/POP3.php&#34;&gt;src/POP3.php&lt;/a&gt;. You can skip the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/language/&#34;&gt;language&lt;/a&gt; folder if you&#39;re not showing errors to users and can make do with English-only errors. If you&#39;re using XOAUTH2 you will need &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/src/OAuth.php&#34;&gt;src/OAuth.php&lt;/a&gt; as well as the Composer dependencies for the services you wish to authenticate with. Really, it&#39;s much easier to use Composer!&lt;/p&gt; &#xA;&lt;h2&gt;A Simple Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;//Import PHPMailer classes into the global namespace&#xA;//These must be at the top of your script, not inside a function&#xA;use PHPMailer\PHPMailer\PHPMailer;&#xA;use PHPMailer\PHPMailer\SMTP;&#xA;use PHPMailer\PHPMailer\Exception;&#xA;&#xA;//Load Composer&#39;s autoloader&#xA;require &#39;vendor/autoload.php&#39;;&#xA;&#xA;//Create an instance; passing `true` enables exceptions&#xA;$mail = new PHPMailer(true);&#xA;&#xA;try {&#xA;    //Server settings&#xA;    $mail-&amp;gt;SMTPDebug = SMTP::DEBUG_SERVER;                      //Enable verbose debug output&#xA;    $mail-&amp;gt;isSMTP();                                            //Send using SMTP&#xA;    $mail-&amp;gt;Host       = &#39;smtp.example.com&#39;;                     //Set the SMTP server to send through&#xA;    $mail-&amp;gt;SMTPAuth   = true;                                   //Enable SMTP authentication&#xA;    $mail-&amp;gt;Username   = &#39;user@example.com&#39;;                     //SMTP username&#xA;    $mail-&amp;gt;Password   = &#39;secret&#39;;                               //SMTP password&#xA;    $mail-&amp;gt;SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;            //Enable implicit TLS encryption&#xA;    $mail-&amp;gt;Port       = 465;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`&#xA;&#xA;    //Recipients&#xA;    $mail-&amp;gt;setFrom(&#39;from@example.com&#39;, &#39;Mailer&#39;);&#xA;    $mail-&amp;gt;addAddress(&#39;joe@example.net&#39;, &#39;Joe User&#39;);     //Add a recipient&#xA;    $mail-&amp;gt;addAddress(&#39;ellen@example.com&#39;);               //Name is optional&#xA;    $mail-&amp;gt;addReplyTo(&#39;info@example.com&#39;, &#39;Information&#39;);&#xA;    $mail-&amp;gt;addCC(&#39;cc@example.com&#39;);&#xA;    $mail-&amp;gt;addBCC(&#39;bcc@example.com&#39;);&#xA;&#xA;    //Attachments&#xA;    $mail-&amp;gt;addAttachment(&#39;/var/tmp/file.tar.gz&#39;);         //Add attachments&#xA;    $mail-&amp;gt;addAttachment(&#39;/tmp/image.jpg&#39;, &#39;new.jpg&#39;);    //Optional name&#xA;&#xA;    //Content&#xA;    $mail-&amp;gt;isHTML(true);                                  //Set email format to HTML&#xA;    $mail-&amp;gt;Subject = &#39;Here is the subject&#39;;&#xA;    $mail-&amp;gt;Body    = &#39;This is the HTML message body &amp;lt;b&amp;gt;in bold!&amp;lt;/b&amp;gt;&#39;;&#xA;    $mail-&amp;gt;AltBody = &#39;This is the body in plain text for non-HTML mail clients&#39;;&#xA;&#xA;    $mail-&amp;gt;send();&#xA;    echo &#39;Message has been sent&#39;;&#xA;} catch (Exception $e) {&#xA;    echo &#34;Message could not be sent. Mailer Error: {$mail-&amp;gt;ErrorInfo}&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll find plenty to play with in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/examples&#34;&gt;examples&lt;/a&gt; folder, which covers many common scenarios including sending through gmail, building contact forms, sending to mailing lists, and more.&lt;/p&gt; &#xA;&lt;p&gt;If you are re-using the instance (e.g. when sending to a mailing list), you may need to clear the recipient list to avoid sending duplicate messages. See &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/raw/master/examples/mailing_list.phps&#34;&gt;the mailing list example&lt;/a&gt; for further guidance.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. You should now be ready to use PHPMailer!&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;PHPMailer defaults to English, but in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/language/&#34;&gt;language&lt;/a&gt; folder you&#39;ll find many translations for PHPMailer error messages that you may encounter. Their filenames contain &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_639-1&#34;&gt;ISO 639-1&lt;/a&gt; language code for the translations, for example &lt;code&gt;fr&lt;/code&gt; for French. To specify a language, you need to tell PHPMailer which one to use, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//To load the French version&#xA;$mail-&amp;gt;setLanguage(&#39;fr&#39;, &#39;/optional/path/to/language/directory/&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We welcome corrections and new languages – if you&#39;re looking for corrections, run the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/test/PHPMailerLangTest.php&#34;&gt;PHPMailerLangTest.php&lt;/a&gt; script in the tests folder and it will show any missing translations.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Start reading at the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/wiki&#34;&gt;GitHub wiki&lt;/a&gt;. If you&#39;re having trouble, head for &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting&#34;&gt;the troubleshooting guide&lt;/a&gt; as it&#39;s frequently updated.&lt;/p&gt; &#xA;&lt;p&gt;Examples of how to use PHPMailer for common scenarios can be found in the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/examples&#34;&gt;examples&lt;/a&gt; folder. If you&#39;re looking for a good starting point, we recommend you start with &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/examples/gmail.phps&#34;&gt;the Gmail example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To reduce PHPMailer&#39;s deployed code footprint, examples are not included if you load PHPMailer via Composer or via &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/archive/master.zip&#34;&gt;GitHub&#39;s zip file download&lt;/a&gt;, so you&#39;ll need to either clone the git repository or use the above links to get to the examples directly.&lt;/p&gt; &#xA;&lt;p&gt;Complete generated API documentation is &lt;a href=&#34;https://phpmailer.github.io/PHPMailer/&#34;&gt;available online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can generate complete API-level documentation by running &lt;code&gt;phpdoc&lt;/code&gt; in the top-level folder, and documentation will appear in the &lt;code&gt;docs&lt;/code&gt; folder, though you&#39;ll need to have &lt;a href=&#34;http://www.phpdoc.org&#34;&gt;PHPDocumentor&lt;/a&gt; installed. You may find &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/raw/master/test/PHPMailerTest.php&#34;&gt;the unit tests&lt;/a&gt; a good reference for how to do various operations such as encryption.&lt;/p&gt; &#xA;&lt;p&gt;If the documentation doesn&#39;t cover what you need, search the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/phpmailer&#34;&gt;many questions on Stack Overflow&lt;/a&gt;, and before you ask a question about &#34;SMTP Error: Could not connect to SMTP host.&#34;, &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting&#34;&gt;read the troubleshooting guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/test/&#34;&gt;PHPMailer tests&lt;/a&gt; use PHPUnit 9, with &lt;a href=&#34;https://github.com/Yoast/PHPUnit-Polyfills&#34;&gt;a polyfill&lt;/a&gt; to let 9-style tests run on older PHPUnit and PHP versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/actions&#34;&gt;&lt;img src=&#34;https://github.com/PHPMailer/PHPMailer/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If this isn&#39;t passing, is there something you can do to help?&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please disclose any vulnerabilities found responsibly – report security issues to the maintainers privately.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/tree/master/SECURITY.md&#34;&gt;SECURITY&lt;/a&gt; and &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/security&#34;&gt;PHPMailer&#39;s security advisories on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit bug reports, suggestions and pull requests to the &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re particularly interested in fixing edge-cases, expanding test coverage and updating translations.&lt;/p&gt; &#xA;&lt;p&gt;If you found a mistake in the docs, or want to add something, go ahead and amend the wiki – anyone can edit it.&lt;/p&gt; &#xA;&lt;p&gt;If you have git clones from prior to the move to the PHPMailer GitHub organisation, you&#39;ll need to update any remote URLs referencing the old GitHub location with a command like this from within your clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote set-url upstream https://github.com/PHPMailer/PHPMailer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please &lt;em&gt;don&#39;t&lt;/em&gt; use the SourceForge or Google Code projects any more; they are obsolete and no longer maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Development time and resources for PHPMailer are provided by &lt;a href=&#34;https://info.smartmessages.net/&#34;&gt;Smartmessages.net&lt;/a&gt;, the world&#39;s only privacy-first email marketing system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://info.smartmessages.net/&#34;&gt;&lt;img src=&#34;https://www.smartmessages.net/img/smartmessages-logo.svg?sanitize=true&#34; width=&#34;550&#34; alt=&#34;Smartmessages.net privacy-first email marketing logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Donations are very welcome, whether in beer 🍺, T-shirts 👕, or cold, hard cash 💰. Sponsorship through GitHub is a simple and convenient way to say &#34;thank you&#34; to PHPMailer&#39;s maintainers and contributors – just click the &#34;Sponsor&#34; button &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer&#34;&gt;on the project page&lt;/a&gt;. If your company uses PHPMailer, consider taking part in Tidelift&#39;s enterprise support programme.&lt;/p&gt; &#xA;&lt;h2&gt;PHPMailer For Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of PHPMailer and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-phpmailer-phpmailer?utm_source=packagist-phpmailer-phpmailer&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PHPMailer/PHPMailer/master/changelog.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHPMailer was originally written in 2001 by Brent R. Matzelle as a &lt;a href=&#34;http://sourceforge.net/projects/phpmailer/&#34;&gt;SourceForge project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Synchro&#34;&gt;Marcus Bointon&lt;/a&gt; (&lt;code&gt;coolbru&lt;/code&gt; on SF) and Andy Prevost (&lt;code&gt;codeworxtech&lt;/code&gt;) took over the project in 2004.&lt;/li&gt; &#xA; &lt;li&gt;Became an Apache incubator project on Google Code in 2010, managed by Jim Jagielski.&lt;/li&gt; &#xA; &lt;li&gt;Marcus created &lt;a href=&#34;https://github.com/Synchro/PHPMailer&#34;&gt;his fork on GitHub&lt;/a&gt; in 2008.&lt;/li&gt; &#xA; &lt;li&gt;Jim and Marcus decide to join forces and use GitHub as the canonical and official repo for PHPMailer in 2013.&lt;/li&gt; &#xA; &lt;li&gt;PHPMailer moves to &lt;a href=&#34;https://github.com/PHPMailer&#34;&gt;the PHPMailer organisation&lt;/a&gt; on GitHub in 2013.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s changed since moving from SourceForge?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official successor to the SourceForge and Google Code projects.&lt;/li&gt; &#xA; &lt;li&gt;Test suite.&lt;/li&gt; &#xA; &lt;li&gt;Continuous integration with Github Actions.&lt;/li&gt; &#xA; &lt;li&gt;Composer support.&lt;/li&gt; &#xA; &lt;li&gt;Public development.&lt;/li&gt; &#xA; &lt;li&gt;Additional languages and language strings.&lt;/li&gt; &#xA; &lt;li&gt;CRAM-MD5 authentication support.&lt;/li&gt; &#xA; &lt;li&gt;Preserves full repo history of authors, commits and branches from the original SourceForge project.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jupeter/clean-code-php</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/jupeter/clean-code-php</id>
    <link href="https://github.com/jupeter/clean-code-php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛁 Clean Code concepts adapted for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Code PHP&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#variables&#34;&gt;Variables&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-meaningful-and-pronounceable-variable-names&#34;&gt;Use meaningful and pronounceable variable names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-the-same-vocabulary-for-the-same-type-of-variable&#34;&gt;Use the same vocabulary for the same type of variable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-searchable-names-part-1&#34;&gt;Use searchable names (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-searchable-names-part-2&#34;&gt;Use searchable names (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-explanatory-variables&#34;&gt;Use explanatory variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-nesting-too-deeply-and-return-early-part-1&#34;&gt;Avoid nesting too deeply and return early (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-nesting-too-deeply-and-return-early-part-2&#34;&gt;Avoid nesting too deeply and return early (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-mental-mapping&#34;&gt;Avoid Mental Mapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-add-unneeded-context&#34;&gt;Don&#39;t add unneeded context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#comparison&#34;&gt;Comparison&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-identical-comparison&#34;&gt;Use identical comparison&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#null-coalescing-operator&#34;&gt;Null coalescing operator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#functions&#34;&gt;Functions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-default-arguments-instead-of-short-circuiting-or-conditionals&#34;&gt;Use default arguments instead of short circuiting or conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#function-arguments-2-or-fewer-ideally&#34;&gt;Function arguments (2 or fewer ideally)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#function-names-should-say-what-they-do&#34;&gt;Function names should say what they do&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#functions-should-only-be-one-level-of-abstraction&#34;&gt;Functions should only be one level of abstraction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-use-flags-as-function-parameters&#34;&gt;Don&#39;t use flags as function parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-side-effects&#34;&gt;Avoid Side Effects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-write-to-global-functions&#34;&gt;Don&#39;t write to global functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-use-a-singleton-pattern&#34;&gt;Don&#39;t use a Singleton pattern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#encapsulate-conditionals&#34;&gt;Encapsulate conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-negative-conditionals&#34;&gt;Avoid negative conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-conditionals&#34;&gt;Avoid conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-type-checking-part-1&#34;&gt;Avoid type-checking (part 1)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-type-checking-part-2&#34;&gt;Avoid type-checking (part 2)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#remove-dead-code&#34;&gt;Remove dead code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#use-object-encapsulation&#34;&gt;Use object encapsulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#make-objects-have-privateprotected-members&#34;&gt;Make objects have private/protected members&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#classes&#34;&gt;Classes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-composition-over-inheritance&#34;&gt;Prefer composition over inheritance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#avoid-fluent-interfaces&#34;&gt;Avoid fluent interfaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-final-classes&#34;&gt;Prefer final classes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#solid&#34;&gt;SOLID&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#liskov-substitution-principle-lsp&#34;&gt;Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#interface-segregation-principle-isp&#34;&gt;Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dependency-inversion-principle-dip&#34;&gt;Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dont-repeat-yourself-dry&#34;&gt;Don’t repeat yourself (DRY)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for PHP. This is not a style guide. It&#39;s a guide to producing readable, reusable, and refactorable software in PHP.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inspired from &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;clean-code-javascript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Although many developers still use PHP 5, most of the examples in this article only work with PHP 7.1+.&lt;/p&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ymdstr = $moment-&amp;gt;format(&#39;y-m-d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$currentDate = $moment-&amp;gt;format(&#39;y-m-d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;getUserInfo();&#xA;getUserData();&#xA;getUserRecord();&#xA;getUserProfile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// What the heck is 448 for?&#xA;$result = $serializer-&amp;gt;serialize($data, 448);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$json = $serializer-&amp;gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use searchable names (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User&#xA;{&#xA;    // What the heck is 7 for?&#xA;    public $access = 7;&#xA;}&#xA;&#xA;// What the heck is 4 for?&#xA;if ($user-&amp;gt;access &amp;amp; 4) {&#xA;    // ...&#xA;}&#xA;&#xA;// What&#39;s going on here?&#xA;$user-&amp;gt;access ^= 2;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class User&#xA;{&#xA;    public const ACCESS_READ = 1;&#xA;&#xA;    public const ACCESS_CREATE = 2;&#xA;&#xA;    public const ACCESS_UPDATE = 4;&#xA;&#xA;    public const ACCESS_DELETE = 8;&#xA;&#xA;    // User as default can read, create and update something&#xA;    public $access = self::ACCESS_READ | self::ACCESS_CREATE | self::ACCESS_UPDATE;&#xA;}&#xA;&#xA;if ($user-&amp;gt;access &amp;amp; User::ACCESS_UPDATE) {&#xA;    // do edit ...&#xA;}&#xA;&#xA;// Deny access rights to create something&#xA;$user-&amp;gt;access ^= User::ACCESS_CREATE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(.+?)\s*(\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;saveCityZipCode($matches[1], $matches[2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s better, but we are still heavily dependent on regex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(.+?)\s*(\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;[, $city, $zipCode] = $matches;&#xA;saveCityZipCode($city, $zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Decrease dependence on regex by naming subpatterns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$address = &#39;One Infinite Loop, Cupertino 95014&#39;;&#xA;$cityZipCodeRegex = &#39;/^[^,]+,\s*(?&amp;lt;city&amp;gt;.+?)\s*(?&amp;lt;zipCode&amp;gt;\d{5})$/&#39;;&#xA;preg_match($cityZipCodeRegex, $address, $matches);&#xA;&#xA;saveCityZipCode($matches[&#39;city&#39;], $matches[&#39;zipCode&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid nesting too deeply and return early (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;Too many if-else statements can make your code hard to follow. Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isShopOpen($day): bool&#xA;{&#xA;    if ($day) {&#xA;        if (is_string($day)) {&#xA;            $day = strtolower($day);&#xA;            if ($day === &#39;friday&#39;) {&#xA;                return true;&#xA;            } elseif ($day === &#39;saturday&#39;) {&#xA;                return true;&#xA;            } elseif ($day === &#39;sunday&#39;) {&#xA;                return true;&#xA;            }&#xA;            return false;&#xA;        }&#xA;        return false;&#xA;    }&#xA;    return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isShopOpen(string $day): bool&#xA;{&#xA;    if (empty($day)) {&#xA;        return false;&#xA;    }&#xA;&#xA;    $openingDays = [&#39;friday&#39;, &#39;saturday&#39;, &#39;sunday&#39;];&#xA;&#xA;    return in_array(strtolower($day), $openingDays, true);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid nesting too deeply and return early (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function fibonacci(int $n)&#xA;{&#xA;    if ($n &amp;lt; 50) {&#xA;        if ($n !== 0) {&#xA;            if ($n !== 1) {&#xA;                return fibonacci($n - 1) + fibonacci($n - 2);&#xA;            }&#xA;            return 1;&#xA;        }&#xA;        return 0;&#xA;    }&#xA;    return &#39;Not supported&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function fibonacci(int $n): int&#xA;{&#xA;    if ($n === 0 || $n === 1) {&#xA;        return $n;&#xA;    }&#xA;&#xA;    if ($n &amp;gt;= 50) {&#xA;        throw new Exception(&#39;Not supported&#39;);&#xA;    }&#xA;&#xA;    return fibonacci($n - 1) + fibonacci($n - 2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Don’t force the reader of your code to translate what the variable means. Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$l = [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;&#xA;for ($i = 0; $i &amp;lt; count($l); $i++) {&#xA;    $li = $l[$i];&#xA;    doStuff();&#xA;    doSomeOtherStuff();&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    // Wait, what is `$li` for again?&#xA;    dispatch($li);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$locations = [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;&#xA;foreach ($locations as $location) {&#xA;    doStuff();&#xA;    doSomeOtherStuff();&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    dispatch($location);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    public $carMake;&#xA;&#xA;    public $carModel;&#xA;&#xA;    public $carColor;&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    public $make;&#xA;&#xA;    public $model;&#xA;&#xA;    public $color;&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison&lt;/h2&gt; &#xA;&lt;h3&gt;Use &lt;a href=&#34;http://php.net/manual/en/language.operators.comparison.php&#34;&gt;identical comparison&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simple comparison will convert the string in an integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = &#39;42&#39;;&#xA;$b = 42;&#xA;&#xA;if ($a != $b) {&#xA;    // The expression will always pass&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comparison &lt;code&gt;$a != $b&lt;/code&gt; returns &lt;code&gt;FALSE&lt;/code&gt; but in fact it&#39;s &lt;code&gt;TRUE&lt;/code&gt;! The string &lt;code&gt;42&lt;/code&gt; is different than the integer &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The identical comparison will compare type and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = &#39;42&#39;;&#xA;$b = 42;&#xA;&#xA;if ($a !== $b) {&#xA;    // The expression is verified&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comparison &lt;code&gt;$a !== $b&lt;/code&gt; returns &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Null coalescing operator&lt;/h3&gt; &#xA;&lt;p&gt;Null coalescing is a new operator &lt;a href=&#34;https://www.php.net/manual/en/migration70.new-features.php&#34;&gt;introduced in PHP 7&lt;/a&gt;. The null coalescing operator &lt;code&gt;??&lt;/code&gt; has been added as syntactic sugar for the common case of needing to use a ternary in conjunction with &lt;code&gt;isset()&lt;/code&gt;. It returns its first operand if it exists and is not &lt;code&gt;null&lt;/code&gt;; otherwise it returns its second operand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if (isset($_GET[&#39;name&#39;])) {&#xA;    $name = $_GET[&#39;name&#39;];&#xA;} elseif (isset($_POST[&#39;name&#39;])) {&#xA;    $name = $_POST[&#39;name&#39;];&#xA;} else {&#xA;    $name = &#39;nobody&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$name = $_GET[&#39;name&#39;] ?? $_POST[&#39;name&#39;] ?? &#39;nobody&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is not good because &lt;code&gt;$breweryName&lt;/code&gt; can be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery($breweryName = &#39;Hipster Brew Co.&#39;): void&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This opinion is more understandable than the previous version, but it better controls the value of the variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery($name = null): void&#xA;{&#xA;    $breweryName = $name ?: &#39;Hipster Brew Co.&#39;;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;&gt;type hinting&lt;/a&gt; and be sure that the &lt;code&gt;$breweryName&lt;/code&gt; will not be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createMicrobrewery(string $breweryName = &#39;Hipster Brew Co.&#39;): void&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;Zero arguments is the ideal case. One or two arguments is ok, and three should be avoided. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Questionnaire&#xA;{&#xA;    public function __construct(&#xA;        string $firstname,&#xA;        string $lastname,&#xA;        string $patronymic,&#xA;        string $region,&#xA;        string $district,&#xA;        string $city,&#xA;        string $phone,&#xA;        string $email&#xA;    ) {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Name&#xA;{&#xA;    private $firstname;&#xA;&#xA;    private $lastname;&#xA;&#xA;    private $patronymic;&#xA;&#xA;    public function __construct(string $firstname, string $lastname, string $patronymic)&#xA;    {&#xA;        $this-&amp;gt;firstname = $firstname;&#xA;        $this-&amp;gt;lastname = $lastname;&#xA;        $this-&amp;gt;patronymic = $patronymic;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class City&#xA;{&#xA;    private $region;&#xA;&#xA;    private $district;&#xA;&#xA;    private $city;&#xA;&#xA;    public function __construct(string $region, string $district, string $city)&#xA;    {&#xA;        $this-&amp;gt;region = $region;&#xA;        $this-&amp;gt;district = $district;&#xA;        $this-&amp;gt;city = $city;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class Contact&#xA;{&#xA;    private $phone;&#xA;&#xA;    private $email;&#xA;&#xA;    public function __construct(string $phone, string $email)&#xA;    {&#xA;        $this-&amp;gt;phone = $phone;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    // getters ...&#xA;}&#xA;&#xA;class Questionnaire&#xA;{&#xA;    public function __construct(Name $name, City $city, Contact $contact)&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Email&#xA;{&#xA;    //...&#xA;&#xA;    public function handle(): void&#xA;    {&#xA;        mail($this-&amp;gt;to, $this-&amp;gt;subject, $this-&amp;gt;body);&#xA;    }&#xA;}&#xA;&#xA;$message = new Email(...);&#xA;// What is this? A handle for the message? Are we writing to a file now?&#xA;$message-&amp;gt;handle();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Email&#xA;{&#xA;    //...&#xA;&#xA;    public function send(): void&#xA;    {&#xA;        mail($this-&amp;gt;to, $this-&amp;gt;subject, $this-&amp;gt;body);&#xA;    }&#xA;}&#xA;&#xA;$message = new Email(...);&#xA;// Clear and obvious&#xA;$message-&amp;gt;send();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function parseBetterPHPAlternative(string $code): void&#xA;{&#xA;    $regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    $statements = explode(&#39; &#39;, $code);&#xA;    $tokens = [];&#xA;    foreach ($regexes as $regex) {&#xA;        foreach ($statements as $statement) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    $ast = [];&#xA;    foreach ($tokens as $token) {&#xA;        // lex...&#xA;    }&#xA;&#xA;    foreach ($ast as $node) {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad too:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have carried out some of the functionality, but the &lt;code&gt;parseBetterPHPAlternative()&lt;/code&gt; function is still very complex and not testable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function tokenize(string $code): array&#xA;{&#xA;    $regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    $statements = explode(&#39; &#39;, $code);&#xA;    $tokens = [];&#xA;    foreach ($regexes as $regex) {&#xA;        foreach ($statements as $statement) {&#xA;            $tokens[] = /* ... */;&#xA;        }&#xA;    }&#xA;&#xA;    return $tokens;&#xA;}&#xA;&#xA;function lexer(array $tokens): array&#xA;{&#xA;    $ast = [];&#xA;    foreach ($tokens as $token) {&#xA;        $ast[] = /* ... */;&#xA;    }&#xA;&#xA;    return $ast;&#xA;}&#xA;&#xA;function parseBetterPHPAlternative(string $code): void&#xA;{&#xA;    $tokens = tokenize($code);&#xA;    $ast = lexer($tokens);&#xA;    foreach ($ast as $node) {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best solution is move out the dependencies of &lt;code&gt;parseBetterPHPAlternative()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Tokenizer&#xA;{&#xA;    public function tokenize(string $code): array&#xA;    {&#xA;        $regexes = [&#xA;            // ...&#xA;        ];&#xA;&#xA;        $statements = explode(&#39; &#39;, $code);&#xA;        $tokens = [];&#xA;        foreach ($regexes as $regex) {&#xA;            foreach ($statements as $statement) {&#xA;                $tokens[] = /* ... */;&#xA;            }&#xA;        }&#xA;&#xA;        return $tokens;&#xA;    }&#xA;}&#xA;&#xA;class Lexer&#xA;{&#xA;    public function lexify(array $tokens): array&#xA;    {&#xA;        $ast = [];&#xA;        foreach ($tokens as $token) {&#xA;            $ast[] = /* ... */;&#xA;        }&#xA;&#xA;        return $ast;&#xA;    }&#xA;}&#xA;&#xA;class BetterPHPAlternative&#xA;{&#xA;    private $tokenizer;&#xA;    private $lexer;&#xA;&#xA;    public function __construct(Tokenizer $tokenizer, Lexer $lexer)&#xA;    {&#xA;        $this-&amp;gt;tokenizer = $tokenizer;&#xA;        $this-&amp;gt;lexer = $lexer;&#xA;    }&#xA;&#xA;    public function parse(string $code): void&#xA;    {&#xA;        $tokens = $this-&amp;gt;tokenizer-&amp;gt;tokenize($code);&#xA;        $ast = $this-&amp;gt;lexer-&amp;gt;lexify($tokens);&#xA;        foreach ($ast as $node) {&#xA;            // parse...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createFile(string $name, bool $temp = false): void&#xA;{&#xA;    if ($temp) {&#xA;        touch(&#39;./temp/&#39; . $name);&#xA;    } else {&#xA;        touch($name);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function createFile(string $name): void&#xA;{&#xA;    touch($name);&#xA;}&#xA;&#xA;function createTempFile(string $name): void&#xA;{&#xA;    touch(&#39;./temp/&#39; . $name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;$name = &#39;Ryan McDermott&#39;;&#xA;&#xA;function splitIntoFirstAndLastName(): void&#xA;{&#xA;    global $name;&#xA;&#xA;    $name = explode(&#39; &#39;, $name);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;var_dump($name);&#xA;// [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function splitIntoFirstAndLastName(string $name): array&#xA;{&#xA;    return explode(&#39; &#39;, $name);&#xA;}&#xA;&#xA;$name = &#39;Ryan McDermott&#39;;&#xA;$newName = splitIntoFirstAndLastName($name);&#xA;&#xA;var_dump($name);&#xA;// &#39;Ryan McDermott&#39;;&#xA;&#xA;var_dump($newName);&#xA;// [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in many languages because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to have configuration array? You could write global function like &lt;code&gt;config()&lt;/code&gt;, but it could clash with another library that tried to do the same thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function config(): array&#xA;{&#xA;    return [&#xA;        &#39;foo&#39; =&amp;gt; &#39;bar&#39;,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Configuration&#xA;{&#xA;    private $configuration = [];&#xA;&#xA;    public function __construct(array $configuration)&#xA;    {&#xA;        $this-&amp;gt;configuration = $configuration;&#xA;    }&#xA;&#xA;    public function get(string $key): ?string&#xA;    {&#xA;        // null coalescing operator&#xA;        return $this-&amp;gt;configuration[$key] ?? null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load configuration and create instance of &lt;code&gt;Configuration&lt;/code&gt; class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$configuration = new Configuration([&#xA;    &#39;foo&#39; =&amp;gt; &#39;bar&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you must use instance of &lt;code&gt;Configuration&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use a Singleton pattern&lt;/h3&gt; &#xA;&lt;p&gt;Singleton is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton_pattern&#34;&gt;anti-pattern&lt;/a&gt;. Paraphrased from Brian Button:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;They are generally used as a &lt;strong&gt;global instance&lt;/strong&gt;, why is that so bad? Because &lt;strong&gt;you hide the dependencies&lt;/strong&gt; of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34;&gt;code smell&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They violate the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that &lt;strong&gt;they control their own creation and lifecycle&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They inherently cause code to be tightly &lt;a href=&#34;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&#34;&gt;coupled&lt;/a&gt;. This makes faking them out under &lt;strong&gt;test rather difficult&lt;/strong&gt; in many cases.&lt;/li&gt; &#xA; &lt;li&gt;They carry state around for the lifetime of the application. Another hit to testing since &lt;strong&gt;you can end up with a situation where tests need to be ordered&lt;/strong&gt; which is a big no for unit tests. Why? Because each unit test should be independent from the other.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is also very good thoughts by &lt;a href=&#34;http://misko.hevery.com/about/&#34;&gt;Misko Hevery&lt;/a&gt; about the &lt;a href=&#34;http://misko.hevery.com/2008/08/25/root-cause-of-singletons/&#34;&gt;root of problem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class DBConnection&#xA;{&#xA;    private static $instance;&#xA;&#xA;    private function __construct(string $dsn)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    public static function getInstance(): self&#xA;    {&#xA;        if (self::$instance === null) {&#xA;            self::$instance = new self();&#xA;        }&#xA;&#xA;        return self::$instance;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;$singleton = DBConnection::getInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class DBConnection&#xA;{&#xA;    public function __construct(string $dsn)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create instance of &lt;code&gt;DBConnection&lt;/code&gt; class and configure it with &lt;a href=&#34;http://php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters&#34;&gt;DSN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$connection = new DBConnection($dsn);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you must use instance of &lt;code&gt;DBConnection&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($article-&amp;gt;state === &#39;published&#39;) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if ($article-&amp;gt;isPublished()) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDOMNodeNotPresent(DOMNode $node): bool&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (! isDOMNodeNotPresent($node)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDOMNodePresent(DOMNode $node): bool&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (isDOMNodePresent($node)) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        switch ($this-&amp;gt;type) {&#xA;            case &#39;777&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getPassengerCount();&#xA;            case &#39;Air Force One&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude();&#xA;            case &#39;Cessna&#39;:&#xA;                return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getFuelExpenditure();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int;&#xA;}&#xA;&#xA;class Boeing777 implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getPassengerCount();&#xA;    }&#xA;}&#xA;&#xA;class AirForceOne implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude();&#xA;    }&#xA;}&#xA;&#xA;class Cessna implements Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public function getCruisingAltitude(): int&#xA;    {&#xA;        return $this-&amp;gt;getMaxAltitude() - $this-&amp;gt;getFuelExpenditure();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;PHP is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function travelToTexas($vehicle): void&#xA;{&#xA;    if ($vehicle instanceof Bicycle) {&#xA;        $vehicle-&amp;gt;pedalTo(new Location(&#39;texas&#39;));&#xA;    } elseif ($vehicle instanceof Car) {&#xA;        $vehicle-&amp;gt;driveTo(new Location(&#39;texas&#39;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function travelToTexas(Vehicle $vehicle): void&#xA;{&#xA;    $vehicle-&amp;gt;travelTo(new Location(&#39;texas&#39;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with basic primitive values like strings, integers, and arrays, and you use PHP 7+ and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider &lt;a href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;&gt;type declaration&lt;/a&gt; or strict mode. It provides you with static typing on top of standard PHP syntax. The problem with manually type-checking is that doing it will require so much extra verbiage that the faux &#34;type-safety&#34; you get doesn&#39;t make up for the lost readability. Keep your PHP clean, write good tests, and have good code reviews. Otherwise, do all of that but with PHP strict type declaration or strict mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function combine($val1, $val2): int&#xA;{&#xA;    if (! is_numeric($val1) || ! is_numeric($val2)) {&#xA;        throw new Exception(&#39;Must be of type Number&#39;);&#xA;    }&#xA;&#xA;    return $val1 + $val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function combine(int $val1, int $val2): int&#xA;{&#xA;    return $val1 + $val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function oldRequestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;function newRequestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;$request = newRequestModule($requestUrl);&#xA;inventoryTracker(&#39;apples&#39;, $request, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function requestModule(string $url): void&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;$request = requestModule($requestUrl);&#xA;inventoryTracker(&#39;apples&#39;, $request, &#39;www.inventory-awesome.io&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Objects and Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Use object encapsulation&lt;/h3&gt; &#xA;&lt;p&gt;In PHP you can set &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keywords for methods. Using it, you can control properties modification on an object.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;Inheriting this class, you can override default functionality.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, this is part of &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;Open/Closed&lt;/a&gt; principle.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BankAccount&#xA;{&#xA;    public $balance = 1000;&#xA;}&#xA;&#xA;$bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;$bankAccount-&amp;gt;balance -= 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BankAccount&#xA;{&#xA;    private $balance;&#xA;&#xA;    public function __construct(int $balance = 1000)&#xA;    {&#xA;      $this-&amp;gt;balance = $balance;&#xA;    }&#xA;&#xA;    public function withdraw(int $amount): void&#xA;    {&#xA;        if ($amount &amp;gt; $this-&amp;gt;balance) {&#xA;            throw new \Exception(&#39;Amount greater than available balance.&#39;);&#xA;        }&#xA;&#xA;        $this-&amp;gt;balance -= $amount;&#xA;    }&#xA;&#xA;    public function deposit(int $amount): void&#xA;    {&#xA;        $this-&amp;gt;balance += $amount;&#xA;    }&#xA;&#xA; &amp;nbsp; &amp;nbsp;public function getBalance(): int&#xA;    {&#xA;        return $this-&amp;gt;balance;&#xA;    }&#xA;}&#xA;&#xA;$bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;$bankAccount-&amp;gt;withdraw($shoesPrice);&#xA;&#xA;// Get balance&#xA;$balance = $bankAccount-&amp;gt;getBalance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private/protected members&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;public&lt;/code&gt; methods and properties are most dangerous for changes, because some outside code may easily rely on them and you can&#39;t control what code relies on them. &lt;strong&gt;Modifications in class are dangerous for all users of class.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected&lt;/code&gt; modifier are as dangerous as public, because they are available in scope of any child class. This effectively means that difference between public and protected is only in access mechanism, but encapsulation guarantee remains the same. &lt;strong&gt;Modifications in class are dangerous for all descendant classes.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;private&lt;/code&gt; modifier guarantees that code is &lt;strong&gt;dangerous to modify only in boundaries of single class&lt;/strong&gt; (you are safe for modifications and you won&#39;t have &lt;a href=&#34;http://www.urbandictionary.com/define.php?term=Jengaphobia&amp;amp;defid=2494196&#34;&gt;Jenga effect&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Therefore, use &lt;code&gt;private&lt;/code&gt; by default and &lt;code&gt;public/protected&lt;/code&gt; when you need to provide access for external classes.&lt;/p&gt; &#xA;&lt;p&gt;For more information you can read the &lt;a href=&#34;http://fabien.potencier.org/pragmatism-over-theory-protected-vs-private.html&#34;&gt;blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://github.com/fabpot&#34;&gt;Fabien Potencier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    public $name;&#xA;&#xA;    public function __construct(string $name)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;    }&#xA;}&#xA;&#xA;$employee = new Employee(&#39;John Doe&#39;);&#xA;// Employee name: John Doe&#xA;echo &#39;Employee name: &#39; . $employee-&amp;gt;name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    public function __construct(string $name)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;    }&#xA;&#xA;    public function getName(): string&#xA;    {&#xA;        return $this-&amp;gt;name;&#xA;    }&#xA;}&#xA;&#xA;$employee = new Employee(&#39;John Doe&#39;);&#xA;// Employee name: John Doe&#xA;echo &#39;Employee name: &#39; . $employee-&amp;gt;getName();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    private $email;&#xA;&#xA;    public function __construct(string $name, string $email)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data.&#xA;// EmployeeTaxData is not a type of Employee&#xA;&#xA;class EmployeeTaxData extends Employee&#xA;{&#xA;    private $ssn;&#xA;&#xA;    private $salary;&#xA;&#xA;    public function __construct(string $name, string $email, string $ssn, string $salary)&#xA;    {&#xA;        parent::__construct($name, $email);&#xA;&#xA;        $this-&amp;gt;ssn = $ssn;&#xA;        $this-&amp;gt;salary = $salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class EmployeeTaxData&#xA;{&#xA;    private $ssn;&#xA;&#xA;    private $salary;&#xA;&#xA;    public function __construct(string $ssn, string $salary)&#xA;    {&#xA;        $this-&amp;gt;ssn = $ssn;&#xA;        $this-&amp;gt;salary = $salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;class Employee&#xA;{&#xA;    private $name;&#xA;&#xA;    private $email;&#xA;&#xA;    private $taxData;&#xA;&#xA;    public function __construct(string $name, string $email)&#xA;    {&#xA;        $this-&amp;gt;name = $name;&#xA;        $this-&amp;gt;email = $email;&#xA;    }&#xA;&#xA;    public function setTaxData(EmployeeTaxData $taxData): void&#xA;    {&#xA;        $this-&amp;gt;taxData = $taxData;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid fluent interfaces&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;Fluent interface&lt;/a&gt; is an object oriented API that aims to improve the readability of the source code by using &lt;a href=&#34;https://en.wikipedia.org/wiki/Method_chaining&#34;&gt;Method chaining&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While there can be some contexts, frequently builder objects, where this pattern reduces the verbosity of the code (for example the &lt;a href=&#34;https://phpunit.de/manual/current/en/test-doubles.html&#34;&gt;PHPUnit Mock Builder&lt;/a&gt; or the &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html&#34;&gt;Doctrine Query Builder&lt;/a&gt;), more often it comes at some costs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Breaks &lt;a href=&#34;https://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29&#34;&gt;Encapsulation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Breaks &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorators&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Is harder to &lt;a href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34;&gt;mock&lt;/a&gt; in a test suite.&lt;/li&gt; &#xA; &lt;li&gt;Makes diffs of commits harder to read.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information you can read the full &lt;a href=&#34;https://ocramius.github.io/blog/fluent-interfaces-are-evil/&#34;&gt;blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://github.com/Ocramius&#34;&gt;Marco Pivetta&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    private $make = &#39;Honda&#39;;&#xA;&#xA;    private $model = &#39;Accord&#39;;&#xA;&#xA;    private $color = &#39;white&#39;;&#xA;&#xA;    public function setMake(string $make): self&#xA;    {&#xA;        $this-&amp;gt;make = $make;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function setModel(string $model): self&#xA;    {&#xA;        $this-&amp;gt;model = $model;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function setColor(string $color): self&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;&#xA;        // NOTE: Returning this for chaining&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function dump(): void&#xA;    {&#xA;        var_dump($this-&amp;gt;make, $this-&amp;gt;model, $this-&amp;gt;color);&#xA;    }&#xA;}&#xA;&#xA;$car = (new Car())&#xA;    -&amp;gt;setColor(&#39;pink&#39;)&#xA;    -&amp;gt;setMake(&#39;Ford&#39;)&#xA;    -&amp;gt;setModel(&#39;F-150&#39;)&#xA;    -&amp;gt;dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Car&#xA;{&#xA;    private $make = &#39;Honda&#39;;&#xA;&#xA;    private $model = &#39;Accord&#39;;&#xA;&#xA;    private $color = &#39;white&#39;;&#xA;&#xA;    public function setMake(string $make): void&#xA;    {&#xA;        $this-&amp;gt;make = $make;&#xA;    }&#xA;&#xA;    public function setModel(string $model): void&#xA;    {&#xA;        $this-&amp;gt;model = $model;&#xA;    }&#xA;&#xA;    public function setColor(string $color): void&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    public function dump(): void&#xA;    {&#xA;        var_dump($this-&amp;gt;make, $this-&amp;gt;model, $this-&amp;gt;color);&#xA;    }&#xA;}&#xA;&#xA;$car = new Car();&#xA;$car-&amp;gt;setColor(&#39;pink&#39;);&#xA;$car-&amp;gt;setMake(&#39;Ford&#39;);&#xA;$car-&amp;gt;setModel(&#39;F-150&#39;);&#xA;$car-&amp;gt;dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer final classes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;final&lt;/code&gt; keyword should be used whenever possible:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It prevents an uncontrolled inheritance chain.&lt;/li&gt; &#xA; &lt;li&gt;It encourages &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#prefer-composition-over-inheritance&#34;&gt;composition&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It encourages the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It encourages developers to use your public methods instead of extending the class to get access to protected ones.&lt;/li&gt; &#xA; &lt;li&gt;It allows you to change your code without breaking applications that use your class.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The only condition is that your class should implement an interface and no other public methods are defined.&lt;/p&gt; &#xA;&lt;p&gt;For more informations you can read &lt;a href=&#34;https://ocramius.github.io/blog/when-to-declare-classes-final/&#34;&gt;the blog post&lt;/a&gt; on this topic written by &lt;a href=&#34;https://ocramius.github.io/&#34;&gt;Marco Pivetta (Ocramius)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class Car&#xA;{&#xA;    private $color;&#xA;&#xA;    public function __construct($color)&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return string The color of the vehicle&#xA;     */&#xA;    public function getColor()&#xA;    {&#xA;        return $this-&amp;gt;color;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Vehicle&#xA;{&#xA;    /**&#xA;     * @return string The color of the vehicle&#xA;     */&#xA;    public function getColor();&#xA;}&#xA;&#xA;final class Car implements Vehicle&#xA;{&#xA;    private $color;&#xA;&#xA;    public function __construct($color)&#xA;    {&#xA;        $this-&amp;gt;color = $color;&#xA;    }&#xA;&#xA;    public function getColor()&#xA;    {&#xA;        return $this-&amp;gt;color;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SOLID&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt; is the mnemonic acronym introduced by Michael Feathers for the first five principles named by Robert Martin, which meant five basic principles of object-oriented programming and design.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#single-responsibility-principle-srp&#34;&gt;S: Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#openclosed-principle-ocp&#34;&gt;O: Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#liskov-substitution-principle-lsp&#34;&gt;L: Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#interface-segregation-principle-isp&#34;&gt;I: Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#dependency-inversion-principle-dip&#34;&gt;D: Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserSettings&#xA;{&#xA;    private $user;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;    }&#xA;&#xA;    public function changeSettings(array $settings): void&#xA;    {&#xA;        if ($this-&amp;gt;verifyCredentials()) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    private function verifyCredentials(): bool&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserAuth&#xA;{&#xA;    private $user;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;    }&#xA;&#xA;    public function verifyCredentials(): bool&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;class UserSettings&#xA;{&#xA;    private $user;&#xA;&#xA;    private $auth;&#xA;&#xA;    public function __construct(User $user)&#xA;    {&#xA;        $this-&amp;gt;user = $user;&#xA;        $this-&amp;gt;auth = new UserAuth($user);&#xA;    }&#xA;&#xA;    public function changeSettings(array $settings): void&#xA;    {&#xA;        if ($this-&amp;gt;auth-&amp;gt;verifyCredentials()) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;abstract class Adapter&#xA;{&#xA;    protected $name;&#xA;&#xA;    public function getName(): string&#xA;    {&#xA;        return $this-&amp;gt;name;&#xA;    }&#xA;}&#xA;&#xA;class AjaxAdapter extends Adapter&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        parent::__construct();&#xA;&#xA;        $this-&amp;gt;name = &#39;ajaxAdapter&#39;;&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter&#xA;{&#xA;    public function __construct()&#xA;    {&#xA;        parent::__construct();&#xA;&#xA;        $this-&amp;gt;name = &#39;nodeAdapter&#39;;&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private $adapter;&#xA;&#xA;    public function __construct(Adapter $adapter)&#xA;    {&#xA;        $this-&amp;gt;adapter = $adapter;&#xA;    }&#xA;&#xA;    public function fetch(string $url): Promise&#xA;    {&#xA;        $adapterName = $this-&amp;gt;adapter-&amp;gt;getName();&#xA;&#xA;        if ($adapterName === &#39;ajaxAdapter&#39;) {&#xA;            return $this-&amp;gt;makeAjaxCall($url);&#xA;        } elseif ($adapterName === &#39;httpNodeAdapter&#39;) {&#xA;            return $this-&amp;gt;makeHttpCall($url);&#xA;        }&#xA;    }&#xA;&#xA;    private function makeAjaxCall(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;&#xA;    private function makeHttpCall(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Adapter&#xA;{&#xA;    public function request(string $url): Promise;&#xA;}&#xA;&#xA;class AjaxAdapter implements Adapter&#xA;{&#xA;    public function request(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter implements Adapter&#xA;{&#xA;    public function request(string $url): Promise&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private $adapter;&#xA;&#xA;    public function __construct(Adapter $adapter)&#xA;    {&#xA;        $this-&amp;gt;adapter = $adapter;&#xA;    }&#xA;&#xA;    public function fetch(string $url): Promise&#xA;    {&#xA;        return $this-&amp;gt;adapter-&amp;gt;request($url);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Rectangle&#xA;{&#xA;    protected $width = 0;&#xA;&#xA;    protected $height = 0;&#xA;&#xA;    public function setWidth(int $width): void&#xA;    {&#xA;        $this-&amp;gt;width = $width;&#xA;    }&#xA;&#xA;    public function setHeight(int $height): void&#xA;    {&#xA;        $this-&amp;gt;height = $height;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA;        return $this-&amp;gt;width * $this-&amp;gt;height;&#xA;    }&#xA;}&#xA;&#xA;class Square extends Rectangle&#xA;{&#xA;    public function setWidth(int $width): void&#xA;    {&#xA;        $this-&amp;gt;width = $this-&amp;gt;height = $width;&#xA;    }&#xA;&#xA;    public function setHeight(int $height): void&#xA;    {&#xA;        $this-&amp;gt;width = $this-&amp;gt;height = $height;&#xA;    }&#xA;}&#xA;&#xA;function printArea(Rectangle $rectangle): void&#xA;{&#xA;    $rectangle-&amp;gt;setWidth(4);&#xA;    $rectangle-&amp;gt;setHeight(5);&#xA;&#xA;    // BAD: Will return 25 for Square. Should be 20.&#xA;    echo sprintf(&#39;%s has area %d.&#39;, get_class($rectangle), $rectangle-&amp;gt;getArea()) . PHP_EOL;&#xA;}&#xA;&#xA;$rectangles = [new Rectangle(), new Square()];&#xA;&#xA;foreach ($rectangles as $rectangle) {&#xA;    printArea($rectangle);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way is separate the quadrangles and allocation of a more general subtype for both shapes.&lt;/p&gt; &#xA;&lt;p&gt;Despite the apparent similarity of the square and the rectangle, they are different. A square has much in common with a rhombus, and a rectangle with a parallelogram, but they are not subtypes. A square, a rectangle, a rhombus and a parallelogram are separate shapes with their own properties, albeit similar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Shape&#xA;{&#xA;    public function getArea(): int;&#xA;}&#xA;&#xA;class Rectangle implements Shape&#xA;{&#xA;    private $width = 0;&#xA;    private $height = 0;&#xA;&#xA;    public function __construct(int $width, int $height)&#xA;    {&#xA;        $this-&amp;gt;width = $width;&#xA;        $this-&amp;gt;height = $height;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA;        return $this-&amp;gt;width * $this-&amp;gt;height;&#xA;    }&#xA;}&#xA;&#xA;class Square implements Shape&#xA;{&#xA;    private $length = 0;&#xA;&#xA;    public function __construct(int $length)&#xA;    {&#xA;        $this-&amp;gt;length = $length;&#xA;    }&#xA;&#xA;    public function getArea(): int&#xA;    {&#xA; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return $this-&amp;gt;length ** 2;&#xA; &amp;nbsp; &amp;nbsp;}&#xA;}&#xA;&#xA;function printArea(Shape $shape): void&#xA;{&#xA;    echo sprintf(&#39;%s has area %d.&#39;, get_class($shape), $shape-&amp;gt;getArea()).PHP_EOL;&#xA;}&#xA;&#xA;$shapes = [new Rectangle(4, 5), new Square(5)];&#xA;&#xA;foreach ($shapes as $shape) {&#xA;    printArea($shape);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34;&lt;/p&gt; &#xA;&lt;p&gt;A good example to look at that demonstrates this principle is for classes that require large settings objects. Not requiring clients to set up huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Employee&#xA;{&#xA;    public function work(): void;&#xA;&#xA;    public function eat(): void;&#xA;}&#xA;&#xA;class HumanEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        // ...... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;class RobotEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        //.... robot can&#39;t eat, but it must implement this method&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not every worker is an employee, but every employee is a worker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Workable&#xA;{&#xA;    public function work(): void;&#xA;}&#xA;&#xA;interface Feedable&#xA;{&#xA;    public function eat(): void;&#xA;}&#xA;&#xA;interface Employee extends Feedable, Workable&#xA;{&#xA;}&#xA;&#xA;class HumanEmployee implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public function eat(): void&#xA;    {&#xA;        //.... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;// robot can only work&#xA;class RobotEmployee implements Workable&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with PHP frameworks (like Symfony), you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;class Robot extends Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;class Manager&#xA;{&#xA;    private $employee;&#xA;&#xA;    public function __construct(Employee $employee)&#xA;    {&#xA;        $this-&amp;gt;employee = $employee;&#xA;    }&#xA;&#xA;    public function manage(): void&#xA;    {&#xA;        $this-&amp;gt;employee-&amp;gt;work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;interface Employee&#xA;{&#xA;    public function work(): void;&#xA;}&#xA;&#xA;class Human implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;class Robot implements Employee&#xA;{&#xA;    public function work(): void&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;class Manager&#xA;{&#xA;    private $employee;&#xA;&#xA;    public function __construct(Employee $employee)&#xA;    {&#xA;        $this-&amp;gt;employee = $employee;&#xA;    }&#xA;&#xA;    public function manage(): void&#xA;    {&#xA;        $this-&amp;gt;employee-&amp;gt;work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Don’t repeat yourself (DRY)&lt;/h2&gt; &#xA;&lt;p&gt;Try to observe the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; principle.&lt;/p&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Often you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#classes&#34;&gt;Classes&lt;/a&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places any time you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showDeveloperList(array $developers): void&#xA;{&#xA;    foreach ($developers as $developer) {&#xA;        $expectedSalary = $developer-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $developer-&amp;gt;getExperience();&#xA;        $githubLink = $developer-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&#xA;function showManagerList(array $managers): void&#xA;{&#xA;    foreach ($managers as $manager) {&#xA;        $expectedSalary = $manager-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $manager-&amp;gt;getExperience();&#xA;        $githubLink = $manager-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showList(array $employees): void&#xA;{&#xA;    foreach ($employees as $employee) {&#xA;        $expectedSalary = $employee-&amp;gt;calculateExpectedSalary();&#xA;        $experience = $employee-&amp;gt;getExperience();&#xA;        $githubLink = $employee-&amp;gt;getGithubLink();&#xA;        $data = [$expectedSalary, $experience, $githubLink];&#xA;&#xA;        render($data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Very good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is better to use a compact version of the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function showList(array $employees): void&#xA;{&#xA;    foreach ($employees as $employee) {&#xA;        render([$employee-&amp;gt;calculateExpectedSalary(), $employee-&amp;gt;getExperience(), $employee-&amp;gt;getGithubLink()]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🇨🇳&lt;/span&gt; &lt;strong&gt;Chinese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/php-cpm/clean-code-php&#34;&gt;php-cpm/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇷🇺&lt;/span&gt; &lt;strong&gt;Russian:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/peter-gribanov/clean-code-php&#34;&gt;peter-gribanov/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇪🇸&lt;/span&gt; &lt;strong&gt;Spanish:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fikoborquez/clean-code-php&#34;&gt;fikoborquez/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇧🇷&lt;/span&gt; &lt;strong&gt;Portuguese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fabioars/clean-code-php&#34;&gt;fabioars/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jeanjar/clean-code-php/tree/pt-br&#34;&gt;jeanjar/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇹🇭&lt;/span&gt; &lt;strong&gt;Thai:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/panuwizzle/clean-code-php&#34;&gt;panuwizzle/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇫🇷&lt;/span&gt; &lt;strong&gt;French:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/errorname/clean-code-php&#34;&gt;errorname/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇻🇳&lt;/span&gt; &lt;strong&gt;Vietnamese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/viethuongdev/clean-code-php&#34;&gt;viethuongdev/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇰🇷&lt;/span&gt; &lt;strong&gt;Korean:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yujineeee/clean-code-php&#34;&gt;yujineeee/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇹🇷&lt;/span&gt; &lt;strong&gt;Turkish:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/anilozmen/clean-code-php&#34;&gt;anilozmen/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇮🇷&lt;/span&gt; &lt;strong&gt;Persian:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/amirshnll/clean-code-php&#34;&gt;amirshnll/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇧🇩&lt;/span&gt; &lt;strong&gt;Bangla:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nayeemdev/clean-code-php&#34;&gt;nayeemdev/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇪🇬&lt;/span&gt; &lt;strong&gt;Arabic:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ahmedjoda/clean-code-php&#34;&gt;ahmedjoda/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🇯🇵&lt;/span&gt; &lt;strong&gt;Japanese:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hayato07/clean-code-php&#34;&gt;hayato07/clean-code-php&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jupeter/clean-code-php/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flarum/framework</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/flarum/framework</id>
    <link href="https://github.com/flarum/framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple forum software for building great communities.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://flarum.org/assets/img/logo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/flarum/core/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/flarum/core/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;PHP Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/flarum/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/flarum/core&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/flarum/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/flarum/core?sort=semver&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/flarum/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/flarum/core&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huntr.dev/bounties/disclose/?target=https://github.com/flarum/core&#34;&gt;&lt;img src=&#34;https://cdn.huntr.dev/huntr_security_badge_mono.svg?sanitize=true&#34; alt=&#34;huntr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.styleci.io/repos/28257573&#34;&gt;&lt;img src=&#34;https://github.styleci.io/repos/28257573/shield?style=flat&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About Flarum&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://flarum.org/&#34;&gt;Flarum&lt;/a&gt; is a delightfully simple discussion platform for your website.&lt;/strong&gt; It&#39;s fast and easy to use, with all the features you need to run a successful community. It is designed to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast and simple.&lt;/strong&gt; No clutter, no bloat, no complex dependencies. Flarum is built with PHP so it’s quick and easy to deploy. The interface is powered by Mithril, a performant JavaScript framework with a tiny footprint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Beautiful and responsive.&lt;/strong&gt; This is forum software for humans. Flarum is carefully designed to be consistent and intuitive across platforms, out-of-the-box.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Powerful and extensible.&lt;/strong&gt; Customize, extend, and integrate Flarum to suit your community. Flarum’s architecture is amazingly flexible, with a powerful Extension API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://flarum.org/assets/img/home-screenshot.png&#34; alt=&#34;Screenshot of a Flarum instance, showing multiple discussions and tags.&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains Flarum&#39;s core code. If you want to set up a forum, visit the &lt;a href=&#34;https://github.com/flarum/flarum&#34;&gt;Flarum skeleton repository&lt;/a&gt;. For support, refer to the &lt;a href=&#34;https://docs.flarum.org/&#34;&gt;documentation&lt;/a&gt;, and ask questions on &lt;a href=&#34;https://discuss.flarum.org/&#34;&gt;Flarum Discuss&lt;/a&gt; (our community forum) or &lt;a href=&#34;https://flarum.org/discord/&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Flarum! Please read the &lt;strong&gt;&lt;a href=&#34;https://docs.flarum.org/contributing&#34;&gt;Contributing guide&lt;/a&gt;&lt;/strong&gt; to learn how you can help.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within Flarum, please send an e-mail to &lt;a href=&#34;mailto:security@flarum.org&#34;&gt;security@flarum.org&lt;/a&gt;. All security vulnerabilities will be promptly addressed. More details can be found in our &lt;a href=&#34;https://github.com/flarum/core/security/policy&#34;&gt;security policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Flarum is open-source software licensed under the &lt;a href=&#34;https://github.com/flarum/flarum/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>seatonjiang/kratos</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/seatonjiang/kratos</id>
    <link href="https://github.com/seatonjiang/kratos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📖 WordPress theme that focus on reading experience&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/seatonjiang/kratos/main/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/seatonjiang/kratos/main/assets/img/options/about.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PHP-%3E7.4-777BB4?style=flat-square&amp;amp;logo=php&amp;amp;logoColor=#777BB4&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/WordPress-v6.0%20tested-21759B?style=flat-square&amp;amp;logo=wordpress&#34;&gt; &lt;a href=&#34;https://github.com/seatonjiang/kratos/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/seatonjiang/kratos?style=flat-square&amp;amp;color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/seatonjiang/kratos/pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/seatonjiang/kratos?style=flat-square&amp;amp;color=brightgreen&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/seatonjiang/kratos/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/seatonjiang/kratos?&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/seatonjiang/kratos/issues&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/seatonjiang/kratos/issues&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;WordPress theme that focus on reading experience&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First download the theme&#39;s .zip file from the source file to your local computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From your WordPress Administration area, head to Appearance &amp;gt; Themes and click &lt;code&gt;Add New&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Add New theme screen has a new option, &lt;code&gt;Upload Theme&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The theme upload form is now open, click &lt;code&gt;Choose File&lt;/code&gt;, select the theme zip file on your computer and click &lt;code&gt;Install Now&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The theme can now be activated from the administrator. Select the &lt;code&gt;Appearance&lt;/code&gt; tab, then open the theme catalog, find the theme, and click the &lt;code&gt;Activate link&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all contributions. You can submit any ideas as pull requests or as issues, have a good time! :)&lt;/p&gt; &#xA;&lt;h2&gt;📃 License&lt;/h2&gt; &#xA;&lt;p&gt;The project is released under the GNU General Public License v3.0, see the &lt;a href=&#34;https://github.com/seatonjiang/kratos/raw/main/LICENSE&#34;&gt;LICENCE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PHPOffice/PhpSpreadsheet</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/PHPOffice/PhpSpreadsheet</id>
    <link href="https://github.com/PHPOffice/PhpSpreadsheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure PHP library for reading and writing spreadsheet files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PhpSpreadsheet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PHPOffice/PhpSpreadsheet/actions&#34;&gt;&lt;img src=&#34;https://github.com/PHPOffice/PhpSpreadsheet/workflows/main/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/badges/quality-score.png?b=master&#34; alt=&#34;Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/PHPOffice/PhpSpreadsheet/badges/coverage.png?b=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpspreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/PHPOffice/PhpSpreadsheet&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpspreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/PHPOffice/PhpSpreadsheet&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpoffice/phpspreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/PHPOffice/PhpSpreadsheet&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/PHPOffice/PhpSpreadsheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GITTER-join%20chat-green.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/PHPOffice/PhpSpreadsheet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PhpSpreadsheet is a library written in pure PHP and offers a set of classes that allow you to read and write various spreadsheet file formats such as Excel and LibreOffice Calc.&lt;/p&gt; &#xA;&lt;h2&gt;PHP version support&lt;/h2&gt; &#xA;&lt;p&gt;LTS: Support for PHP versions will only be maintained for a period of six months beyond the &lt;a href=&#34;https://www.php.net/eol.php&#34;&gt;end of life of that PHP version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently the required PHP minimum version is PHP &lt;strong&gt;7.3&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;composer.json&lt;/code&gt; for other requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://getcomposer.org&#34;&gt;composer&lt;/a&gt; to install PhpSpreadsheet into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require phpoffice/phpspreadsheet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are building your installation on a development machine that is on a different PHP version to the server where it will be deployed, or if your PHP CLI version is not the same as your run-time such as &lt;code&gt;php-fpm&lt;/code&gt; or Apache&#39;s &lt;code&gt;mod_php&lt;/code&gt;, then you might want to add the following to your &lt;code&gt;composer.json&lt;/code&gt; before installing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;require&#34;: {&#xA;        &#34;phpoffice/phpspreadsheet&#34;: &#34;^1.23&#34;&#xA;    },&#xA;    &#34;config&#34;: {&#xA;        &#34;platform&#34;: {&#xA;            &#34;php&#34;: &#34;7.3&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to ensure that the correct dependencies are retrieved to match your deployment environment.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://php.watch/articles/composer-platform-check&#34;&gt;CLI vs Application run-time&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read more about it, including install instructions, in the &lt;a href=&#34;https://phpspreadsheet.readthedocs.io&#34;&gt;official documentation&lt;/a&gt;. Or check out the &lt;a href=&#34;https://phpoffice.github.io/PhpSpreadsheet&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please ask your support questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/phpspreadsheet&#34;&gt;StackOverflow&lt;/a&gt;, or have a quick chat on &lt;a href=&#34;https://gitter.im/PHPOffice/PhpSpreadsheet&#34;&gt;Gitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PHPExcel vs PhpSpreadsheet ?&lt;/h2&gt; &#xA;&lt;p&gt;PhpSpreadsheet is the next version of PHPExcel. It breaks compatibility to dramatically improve the code base quality (namespaces, PSR compliance, use of latest PHP language features, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Because all efforts have shifted to PhpSpreadsheet, PHPExcel will no longer be maintained. All contributions for PHPExcel, patches and new features, should target PhpSpreadsheet &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;Do you need to migrate? There is &lt;a href=&#34;https://raw.githubusercontent.com/PHPOffice/PhpSpreadsheet/master/docs/topics/migration-from-PHPExcel.md&#34;&gt;an automated tool&lt;/a&gt; for that.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PhpSpreadsheet is licensed under &lt;a href=&#34;https://github.com/PHPOffice/PhpSpreadsheet/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>predis/predis</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/predis/predis</id>
    <link href="https://github.com/predis/predis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flexible and feature-complete Redis client for PHP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Predis&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/predis/predis.svg?style=flat-square&#34; alt=&#34;Software license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/predis/predis&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/predis/predis.svg?style=flat-square&#34; alt=&#34;Latest stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/predis/predis&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/vpre/predis/predis.svg?style=flat-square&#34; alt=&#34;Latest development&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/predis/predis/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dm/predis/predis.svg?style=flat-square&#34; alt=&#34;Monthly installs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/predis/predis/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/predis/predis/Tests/main?style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A flexible and feature-complete &lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt; client for PHP 7.2 and newer.&lt;/p&gt; &#xA;&lt;p&gt;More details about this project can be found on the &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/FAQ.md&#34;&gt;frequently asked questions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Redis from &lt;strong&gt;3.0&lt;/strong&gt; to &lt;strong&gt;7.0&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for clustering using client-side sharding and pluggable keyspace distributors.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;http://redis.io/topics/cluster-tutorial&#34;&gt;redis-cluster&lt;/a&gt; (Redis &amp;gt;= 3.0).&lt;/li&gt; &#xA; &lt;li&gt;Support for master-slave replication setups and &lt;a href=&#34;http://redis.io/topics/sentinel&#34;&gt;redis-sentinel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Transparent key prefixing of keys using a customizable prefix strategy.&lt;/li&gt; &#xA; &lt;li&gt;Command pipelining on both single nodes and clusters (client-side sharding only).&lt;/li&gt; &#xA; &lt;li&gt;Abstraction for Redis transactions (Redis &amp;gt;= 2.0) and CAS operations (Redis &amp;gt;= 2.2).&lt;/li&gt; &#xA; &lt;li&gt;Abstraction for Lua scripting (Redis &amp;gt;= 2.6) and automatic switching between &lt;code&gt;EVALSHA&lt;/code&gt; or &lt;code&gt;EVAL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Abstraction for &lt;code&gt;SCAN&lt;/code&gt;, &lt;code&gt;SSCAN&lt;/code&gt;, &lt;code&gt;ZSCAN&lt;/code&gt; and &lt;code&gt;HSCAN&lt;/code&gt; (Redis &amp;gt;= 2.8) based on PHP iterators.&lt;/li&gt; &#xA; &lt;li&gt;Connections are established lazily by the client upon the first command and can be persisted.&lt;/li&gt; &#xA; &lt;li&gt;Connections can be established via TCP/IP (also TLS/SSL-encrypted) or UNIX domain sockets.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;http://webd.is&#34;&gt;Webdis&lt;/a&gt; (requires both &lt;code&gt;ext-curl&lt;/code&gt; and &lt;code&gt;ext-phpiredis&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support for custom connection classes for providing different network or protocol backends.&lt;/li&gt; &#xA; &lt;li&gt;Flexible system for defining custom commands and override the default ones.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to &lt;em&gt;install&lt;/em&gt; and use Predis&lt;/h2&gt; &#xA;&lt;p&gt;This library can be found on &lt;a href=&#34;http://packagist.org/packages/predis/predis&#34;&gt;Packagist&lt;/a&gt; for an easier management of projects dependencies using &lt;a href=&#34;http://packagist.org/about-composer&#34;&gt;Composer&lt;/a&gt;. Compressed archives of each release are &lt;a href=&#34;https://github.com/predis/predis/releases&#34;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Loading the library&lt;/h3&gt; &#xA;&lt;p&gt;Predis relies on the autoloading features of PHP to load its files when needed and complies with the &lt;a href=&#34;https://github.com/php-fig/fig-standards/raw/master/accepted/PSR-4-autoloader.md&#34;&gt;PSR-4 standard&lt;/a&gt;. Autoloading is handled automatically when dependencies are managed through Composer, but it is also possible to leverage its own autoloader in projects or scripts lacking any autoload facility:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Prepend a base path if Predis is not available in your &#34;include_path&#34;.&#xA;require &#39;Predis/Autoloader.php&#39;;&#xA;&#xA;Predis\Autoloader::register();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting to Redis&lt;/h3&gt; &#xA;&lt;p&gt;When creating a client instance without passing any connection parameter, Predis assumes &lt;code&gt;127.0.0.1&lt;/code&gt; and &lt;code&gt;6379&lt;/code&gt; as default host and port. The default timeout for the &lt;code&gt;connect()&lt;/code&gt; operation is 5 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client();&#xA;$client-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;);&#xA;$value = $client-&amp;gt;get(&#39;foo&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connection parameters can be supplied either in the form of URI strings or named arrays. The latter is the preferred way to supply parameters, but URI strings can be useful when parameters are read from non-structured or partially-structured sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Parameters passed using a named array:&#xA;$client = new Predis\Client([&#xA;    &#39;scheme&#39; =&amp;gt; &#39;tcp&#39;,&#xA;    &#39;host&#39;   =&amp;gt; &#39;10.0.0.1&#39;,&#xA;    &#39;port&#39;   =&amp;gt; 6379,&#xA;]);&#xA;&#xA;// Same set of parameters, passed using an URI string:&#xA;$client = new Predis\Client(&#39;tcp://10.0.0.1:6379&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Password protected servers can be accessed by adding &lt;code&gt;password&lt;/code&gt; to the parameters set. When ACLs are enabled on Redis &amp;gt;= 6.0, both &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; are required for user authentication.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to connect to local instances of Redis using UNIX domain sockets, in this case the parameters must use the &lt;code&gt;unix&lt;/code&gt; scheme and specify a path for the socket file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client([&#39;scheme&#39; =&amp;gt; &#39;unix&#39;, &#39;path&#39; =&amp;gt; &#39;/path/to/redis.sock&#39;]);&#xA;$client = new Predis\Client(&#39;unix:/path/to/redis.sock&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client can leverage TLS/SSL encryption to connect to secured remote Redis instances without the need to configure an SSL proxy like stunnel. This can be useful when connecting to nodes running on various cloud hosting providers. Encryption can be enabled with using the &lt;code&gt;tls&lt;/code&gt; scheme and an array of suitable &lt;a href=&#34;http://php.net/manual/context.ssl.php&#34;&gt;options&lt;/a&gt; passed via the &lt;code&gt;ssl&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Named array of connection parameters:&#xA;$client = new Predis\Client([&#xA;  &#39;scheme&#39; =&amp;gt; &#39;tls&#39;,&#xA;  &#39;ssl&#39;    =&amp;gt; [&#39;cafile&#39; =&amp;gt; &#39;private.pem&#39;, &#39;verify_peer&#39; =&amp;gt; true],&#xA;]);&#xA;&#xA;// Same set of parameters, but using an URI string:&#xA;$client = new Predis\Client(&#39;tls://127.0.0.1?ssl[cafile]=private.pem&amp;amp;ssl[verify_peer]=1&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The connection schemes &lt;a href=&#34;http://www.iana.org/assignments/uri-schemes/prov/redis&#34;&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/a&gt; (alias of &lt;code&gt;tcp&lt;/code&gt;) and &lt;a href=&#34;http://www.iana.org/assignments/uri-schemes/prov/rediss&#34;&gt;&lt;code&gt;rediss&lt;/code&gt;&lt;/a&gt; (alias of &lt;code&gt;tls&lt;/code&gt;) are also supported, with the difference that URI strings containing these schemes are parsed following the rules described on their respective IANA provisional registration documents.&lt;/p&gt; &#xA;&lt;p&gt;The actual list of supported connection parameters can vary depending on each connection backend so it is recommended to refer to their specific documentation or implementation for details.&lt;/p&gt; &#xA;&lt;p&gt;Predis can aggregate multiple connections when providing an array of connection parameters and the appropriate option to instruct the client about how to aggregate them (clustering, replication or a custom aggregation logic). Named arrays and URI strings can be mixed when providing configurations for each node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client([&#xA;    &#39;tcp://10.0.0.1?alias=first-node&#39;, [&#39;host&#39; =&amp;gt; &#39;10.0.0.2&#39;, &#39;alias&#39; =&amp;gt; &#39;second-node&#39;],&#xA;], [&#xA;    &#39;cluster&#39; =&amp;gt; &#39;predis&#39;,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/#aggregate-connections&#34;&gt;aggregate connections&lt;/a&gt; section of this document for more details.&lt;/p&gt; &#xA;&lt;p&gt;Connections to Redis are lazy meaning that the client connects to a server only if and when needed. While it is recommended to let the client do its own stuff under the hood, there may be times when it is still desired to have control of when the connection is opened or closed: this can easily be achieved by invoking &lt;code&gt;$client-&amp;gt;connect()&lt;/code&gt; and &lt;code&gt;$client-&amp;gt;disconnect()&lt;/code&gt;. Please note that the effect of these methods on aggregate connections may differ depending on each specific implementation.&lt;/p&gt; &#xA;&lt;h3&gt;Client configuration&lt;/h3&gt; &#xA;&lt;p&gt;Many aspects and behaviors of the client can be configured by passing specific client options to the second argument of &lt;code&gt;Predis\Client::__construct()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client($parameters, [&#39;prefix&#39; =&amp;gt; &#39;sample:&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Options are managed using a mini DI-alike container and their values can be lazily initialized only when needed. The client options supported by default in Predis are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;: prefix string applied to every key found in commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exceptions&lt;/code&gt;: whether the client should throw or return responses upon Redis errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connections&lt;/code&gt;: list of connection backends or a connection factory instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cluster&lt;/code&gt;: specifies a cluster backend (&lt;code&gt;predis&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt; or callable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replication&lt;/code&gt;: specifies a replication backend (&lt;code&gt;predis&lt;/code&gt;, &lt;code&gt;sentinel&lt;/code&gt; or callable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aggregate&lt;/code&gt;: configures the client with a custom aggregate connection (callable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parameters&lt;/code&gt;: list of default connection parameters for aggregate connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commands&lt;/code&gt;: specifies a command factory instance to use through the library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Users can also provide custom options with values or callable objects (for lazy initialization) that are stored in the options container for later use through the library.&lt;/p&gt; &#xA;&lt;h3&gt;Aggregate connections&lt;/h3&gt; &#xA;&lt;p&gt;Aggregate connections are the foundation upon which Predis implements clustering and replication and they are used to group multiple connections to single Redis nodes and hide the specific logic needed to handle them properly depending on the context. Aggregate connections usually require an array of connection parameters along with the appropriate client option when creating a new client instance.&lt;/p&gt; &#xA;&lt;h4&gt;Cluster&lt;/h4&gt; &#xA;&lt;p&gt;Predis can be configured to work in clustering mode with a traditional client-side sharding approach to create a cluster of independent nodes and distribute the keyspace among them. This approach needs some sort of external health monitoring of nodes and requires the keyspace to be rebalanced manually when nodes are added or removed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;cluster&#39; =&amp;gt; &#39;predis&#39;];&#xA;&#xA;$client = new Predis\Client($parameters);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Along with Redis 3.0, a new supervised and coordinated type of clustering was introduced in the form of &lt;a href=&#34;http://redis.io/topics/cluster-tutorial&#34;&gt;redis-cluster&lt;/a&gt;. This kind of approach uses a different algorithm to distribute the keyspaces, with Redis nodes coordinating themselves by communicating via a gossip protocol to handle health status, rebalancing, nodes discovery and request redirection. In order to connect to a cluster managed by redis-cluster, the client requires a list of its nodes (not necessarily complete since it will automatically discover new nodes if necessary) and the &lt;code&gt;cluster&lt;/code&gt; client options set to &lt;code&gt;redis&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;cluster&#39; =&amp;gt; &#39;redis&#39;];&#xA;&#xA;$client = new Predis\Client($parameters, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Replication&lt;/h4&gt; &#xA;&lt;p&gt;The client can be configured to operate in a single master / multiple slaves setup to provide better service availability. When using replication, Predis recognizes read-only commands and sends them to a random slave in order to provide some sort of load-balancing and switches to the master as soon as it detects a command that performs any kind of operation that would end up modifying the keyspace or the value of a key. Instead of raising a connection error when a slave fails, the client attempts to fall back to a different slave among the ones provided in the configuration.&lt;/p&gt; &#xA;&lt;p&gt;The basic configuration needed to use the client in replication mode requires one Redis server to be identified as the master (this can be done via connection parameters by setting the &lt;code&gt;role&lt;/code&gt; parameter to &lt;code&gt;master&lt;/code&gt;) and one or more slaves (in this case setting &lt;code&gt;role&lt;/code&gt; to &lt;code&gt;slave&lt;/code&gt; for slaves is optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1?role=master&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;replication&#39; =&amp;gt; &#39;predis&#39;];&#xA;&#xA;$client = new Predis\Client($parameters, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above configuration has a static list of servers and relies entirely on the client&#39;s logic, but it is possible to rely on &lt;a href=&#34;http://redis.io/topics/sentinel&#34;&gt;&lt;code&gt;redis-sentinel&lt;/code&gt;&lt;/a&gt; for a more robust HA environment with sentinel servers acting as a source of authority for clients for service discovery. The minimum configuration required by the client to work with redis-sentinel is a list of connection parameters pointing to a bunch of sentinel instances, the &lt;code&gt;replication&lt;/code&gt; option set to &lt;code&gt;sentinel&lt;/code&gt; and the &lt;code&gt;service&lt;/code&gt; option set to the name of the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$sentinels = [&#39;tcp://10.0.0.1&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options   = [&#39;replication&#39; =&amp;gt; &#39;sentinel&#39;, &#39;service&#39; =&amp;gt; &#39;mymaster&#39;];&#xA;&#xA;$client = new Predis\Client($sentinels, $options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the master and slave nodes are configured to require an authentication from clients, a password must be provided via the global &lt;code&gt;parameters&lt;/code&gt; client option. This option can also be used to specify a different database index. The client options array would then look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$options = [&#xA;    &#39;replication&#39; =&amp;gt; &#39;sentinel&#39;,&#xA;    &#39;service&#39; =&amp;gt; &#39;mymaster&#39;,&#xA;    &#39;parameters&#39; =&amp;gt; [&#xA;        &#39;password&#39; =&amp;gt; $secretpassword,&#xA;        &#39;database&#39; =&amp;gt; 10,&#xA;    ],&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While Predis is able to distinguish commands performing write and read-only operations, &lt;code&gt;EVAL&lt;/code&gt; and &lt;code&gt;EVALSHA&lt;/code&gt; represent a corner case in which the client switches to the master node because it cannot tell when a Lua script is safe to be executed on slaves. While this is indeed the default behavior, when certain Lua scripts do not perform write operations it is possible to provide an hint to tell the client to stick with slaves for their execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$parameters = [&#39;tcp://10.0.0.1?role=master&#39;, &#39;tcp://10.0.0.2&#39;, &#39;tcp://10.0.0.3&#39;];&#xA;$options    = [&#39;replication&#39; =&amp;gt; function () {&#xA;    // Set scripts that won&#39;t trigger a switch from a slave to the master node.&#xA;    $strategy = new Predis\Replication\ReplicationStrategy();&#xA;    $strategy-&amp;gt;setScriptReadOnly($LUA_SCRIPT);&#xA;&#xA;    return new Predis\Connection\Replication\MasterSlaveReplication($strategy);&#xA;}];&#xA;&#xA;$client = new Predis\Client($parameters, $options);&#xA;$client-&amp;gt;eval($LUA_SCRIPT, 0);             // Sticks to slave using `eval`...&#xA;$client-&amp;gt;evalsha(sha1($LUA_SCRIPT), 0);    // ... and `evalsha`, too.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/examples/&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; directory contains a few scripts that demonstrate how the client can be configured and used to leverage replication in both basic and complex scenarios.&lt;/p&gt; &#xA;&lt;h3&gt;Command pipelines&lt;/h3&gt; &#xA;&lt;p&gt;Pipelining can help with performances when many commands need to be sent to a server by reducing the latency introduced by network round-trip timings. Pipelining also works with aggregate connections. The client can execute the pipeline inside a callable block or return a pipeline instance with the ability to chain commands thanks to its fluent interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Executes a pipeline inside the given callable block:&#xA;$responses = $client-&amp;gt;pipeline(function ($pipe) {&#xA;    for ($i = 0; $i &amp;lt; 1000; $i++) {&#xA;        $pipe-&amp;gt;set(&#34;key:$i&#34;, str_pad($i, 4, &#39;0&#39;, 0));&#xA;        $pipe-&amp;gt;get(&#34;key:$i&#34;);&#xA;    }&#xA;});&#xA;&#xA;// Returns a pipeline that can be chained thanks to its fluent interface:&#xA;$responses = $client-&amp;gt;pipeline()-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;)-&amp;gt;get(&#39;foo&#39;)-&amp;gt;execute();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transactions&lt;/h3&gt; &#xA;&lt;p&gt;The client provides an abstraction for Redis transactions based on &lt;code&gt;MULTI&lt;/code&gt; and &lt;code&gt;EXEC&lt;/code&gt; with a similar interface to command pipelines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Executes a transaction inside the given callable block:&#xA;$responses = $client-&amp;gt;transaction(function ($tx) {&#xA;    $tx-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;);&#xA;    $tx-&amp;gt;get(&#39;foo&#39;);&#xA;});&#xA;&#xA;// Returns a transaction that can be chained thanks to its fluent interface:&#xA;$responses = $client-&amp;gt;transaction()-&amp;gt;set(&#39;foo&#39;, &#39;bar&#39;)-&amp;gt;get(&#39;foo&#39;)-&amp;gt;execute();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This abstraction can perform check-and-set operations thanks to &lt;code&gt;WATCH&lt;/code&gt; and &lt;code&gt;UNWATCH&lt;/code&gt; and provides automatic retries of transactions aborted by Redis when &lt;code&gt;WATCH&lt;/code&gt;ed keys are touched. For an example of a transaction using CAS you can see &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/examples/transaction_using_cas.php&#34;&gt;the following example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new commands&lt;/h3&gt; &#xA;&lt;p&gt;While we try to update Predis to stay up to date with all the commands available in Redis, you might prefer to stick with an old version of the library or provide a different way to filter arguments or parse responses for specific commands. To achieve that, Predis provides the ability to implement new command classes to define or override commands in the default command factory used by the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Define a new command by extending Predis\Command\Command:&#xA;class BrandNewRedisCommand extends Predis\Command\Command&#xA;{&#xA;    public function getId()&#xA;    {&#xA;        return &#39;NEWCMD&#39;;&#xA;    }&#xA;}&#xA;&#xA;// Inject your command in the current command factory:&#xA;$client = new Predis\Client($parameters, [&#xA;    &#39;commands&#39; =&amp;gt; [&#xA;        &#39;newcmd&#39; =&amp;gt; &#39;BrandNewRedisCommand&#39;,&#xA;    ],&#xA;]);&#xA;&#xA;$response = $client-&amp;gt;newcmd();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a method to send raw commands without filtering their arguments or parsing responses. Users must provide the list of arguments for the command as an array, following the signatures as defined by the &lt;a href=&#34;http://redis.io/commands&#34;&gt;Redis documentation for commands&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$response = $client-&amp;gt;executeRaw([&#39;SET&#39;, &#39;foo&#39;, &#39;bar&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script commands&lt;/h3&gt; &#xA;&lt;p&gt;While it is possible to leverage &lt;a href=&#34;http://redis.io/commands/eval&#34;&gt;Lua scripting&lt;/a&gt; on Redis 2.6+ using directly &lt;a href=&#34;http://redis.io/commands/eval&#34;&gt;&lt;code&gt;EVAL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://redis.io/commands/evalsha&#34;&gt;&lt;code&gt;EVALSHA&lt;/code&gt;&lt;/a&gt;, Predis offers script commands as an higher level abstraction built upon them to make things simple. Script commands can be registered in the command factory used by the client and are accessible as if they were plain Redis commands, but they define Lua scripts that get transmitted to the server for remote execution. Internally they use &lt;a href=&#34;http://redis.io/commands/evalsha&#34;&gt;&lt;code&gt;EVALSHA&lt;/code&gt;&lt;/a&gt; by default and identify a script by its SHA1 hash to save bandwidth, but &lt;a href=&#34;http://redis.io/commands/eval&#34;&gt;&lt;code&gt;EVAL&lt;/code&gt;&lt;/a&gt; is used as a fall back when needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Define a new script command by extending Predis\Command\ScriptCommand:&#xA;class ListPushRandomValue extends Predis\Command\ScriptCommand&#xA;{&#xA;    public function getKeysCount()&#xA;    {&#xA;        return 1;&#xA;    }&#xA;&#xA;    public function getScript()&#xA;    {&#xA;        return &amp;lt;&amp;lt;&amp;lt;LUA&#xA;math.randomseed(ARGV[1])&#xA;local rnd = tostring(math.random())&#xA;redis.call(&#39;lpush&#39;, KEYS[1], rnd)&#xA;return rnd&#xA;LUA;&#xA;    }&#xA;}&#xA;&#xA;// Inject the script command in the current command factory:&#xA;$client = new Predis\Client($parameters, [&#xA;    &#39;commands&#39; =&amp;gt; [&#xA;        &#39;lpushrand&#39; =&amp;gt; &#39;ListPushRandomValue&#39;,&#xA;    ],&#xA;]);&#xA;&#xA;$response = $client-&amp;gt;lpushrand(&#39;random_values&#39;, $seed = mt_rand());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizable connection backends&lt;/h3&gt; &#xA;&lt;p&gt;Predis can use different connection backends to connect to Redis. Two of them leverage a third party extension such as &lt;a href=&#34;https://github.com/nrk/phpiredis&#34;&gt;phpiredis&lt;/a&gt; resulting in major performance gains especially when dealing with big multibulk responses. While one is based on PHP streams, the other is based on socket resources provided by &lt;code&gt;ext-socket&lt;/code&gt;. Both support TCP/IP and UNIX domain sockets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client(&#39;tcp://127.0.0.1&#39;, [&#xA;    &#39;connections&#39; =&amp;gt; [&#xA;        &#39;tcp&#39;  =&amp;gt; &#39;Predis\Connection\PhpiredisStreamConnection&#39;,  // PHP stream resources&#xA;        &#39;unix&#39; =&amp;gt; &#39;Predis\Connection\PhpiredisSocketConnection&#39;,  // ext-socket resources&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client can also be configured to rely on a &lt;a href=&#34;https://github.com/nrk/phpiredis&#34;&gt;phpiredis&lt;/a&gt;-backend by specifying a descriptive string for the &lt;code&gt;connections&lt;/code&gt; client option. Supported string values are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;phpiredis-stream&lt;/code&gt; maps &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt; and &lt;code&gt;unix&lt;/code&gt; to &lt;code&gt;Predis\Connection\PhpiredisStreamConnection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpiredis-socket&lt;/code&gt; maps &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt; and &lt;code&gt;unix&lt;/code&gt; to &lt;code&gt;Predis\Connection\PhpiredisSocketConnection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpiredis&lt;/code&gt; is simply an alias of &lt;code&gt;phpiredis-stream&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new Predis\Client(&#39;tcp://127.0.0.1&#39;, [&#39;connections&#39; =&amp;gt; &#39;phpiredis&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers can create their own connection classes to support whole new network backends, extend existing classes or provide completely different implementations. Connection classes must implement &lt;code&gt;Predis\Connection\NodeConnectionInterface&lt;/code&gt; or extend &lt;code&gt;Predis\Connection\AbstractConnection&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MyConnectionClass implements Predis\Connection\NodeConnectionInterface&#xA;{&#xA;    // Implementation goes here...&#xA;}&#xA;&#xA;// Use MyConnectionClass to handle connections for the `tcp` scheme:&#xA;$client = new Predis\Client(&#39;tcp://127.0.0.1&#39;, [&#xA;    &#39;connections&#39; =&amp;gt; [&#39;tcp&#39; =&amp;gt; &#39;MyConnectionClass&#39;],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more in-depth insight on how to create new connection backends you can refer to the actual implementation of the standard connection classes available in the &lt;code&gt;Predis\Connection&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Reporting bugs and contributing code&lt;/h3&gt; &#xA;&lt;p&gt;Contributions to Predis are highly appreciated either in the form of pull requests for new features, bug fixes, or just bug reports. We only ask you to adhere to a &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/CONTRIBUTING.md&#34;&gt;basic set of rules&lt;/a&gt; before submitting your changes or filing bugs on the issue tracker to make it easier for everyone to stay consistent while working on the project.&lt;/p&gt; &#xA;&lt;h3&gt;Test suite&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;: Do not ever run the test suite shipped with Predis against instances of Redis running in production environments or containing data you are interested in!&lt;/p&gt; &#xA;&lt;p&gt;Predis has a comprehensive test suite covering every aspect of the library and that can optionally perform integration tests against a running instance of Redis (required &amp;gt;= 2.4.0 in order to verify the correct behavior of the implementation of each command. Integration tests for unsupported Redis commands are automatically skipped. If you do not have Redis up and running, integration tests can be disabled. See &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/tests/README.md&#34;&gt;the tests README&lt;/a&gt; for more details about testing this library.&lt;/p&gt; &#xA;&lt;p&gt;Predis uses GitHub Actions for continuous integration and the history for past and current builds can be found &lt;a href=&#34;https://github.com/predis/predis/actions&#34;&gt;on its actions page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Project related links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predis/predis&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predis/predis/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/predis/predis/issues&#34;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:suppakilla@gmail.com&#34;&gt;Daniele Alessandri&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/JoL1hAHN&#34;&gt;twitter&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://till.im&#34;&gt;Till Krüss&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/tillkruss&#34;&gt;Twitter&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;The code for Predis is distributed under the terms of the MIT license (see &lt;a href=&#34;https://raw.githubusercontent.com/predis/predis/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symfony/symfony</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/symfony/symfony</id>
    <link href="https://github.com/symfony/symfony" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Symfony PHP framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://symfony.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://symfony.com/logos/symfony_black_02.svg?sanitize=true&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://symfony.com&#34;&gt;Symfony&lt;/a&gt; is a &lt;strong&gt;PHP framework&lt;/strong&gt; for web and console applications and a set of reusable &lt;strong&gt;PHP components&lt;/strong&gt;. Symfony is used by thousands of web applications and most of the &lt;a href=&#34;https://symfony.com/projects&#34;&gt;popular PHP projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/setup.html&#34;&gt;Install Symfony&lt;/a&gt; with Composer (see &lt;a href=&#34;https://symfony.com/doc/current/reference/requirements.html&#34;&gt;requirements details&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Symfony follows the &lt;a href=&#34;https://semver.org&#34;&gt;semantic versioning&lt;/a&gt; strictly, publishes &#34;Long Term Support&#34; (LTS) versions and has a &lt;a href=&#34;https://symfony.com/doc/current/contributing/community/releases.html&#34;&gt;release process&lt;/a&gt; that is predictable and business-friendly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;Symfony 6.2 is &lt;a href=&#34;https://symfony.com/backers&#34;&gt;backed&lt;/a&gt; by &lt;a href=&#34;https://les-tilleuls.coop/&#34;&gt;Les-Tilleuls.coop&lt;/a&gt; and &lt;a href=&#34;https://sulu.io/&#34;&gt;Sulu&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Les-Tilleuls.coop&lt;/strong&gt; is a team of 50+ Symfony experts who can help you design, develop and fix your projects. We provide a wide range of professional services including development, consulting, coaching, training and audits. We also are highly skilled in JS, Go and DevOps. We are a worker cooperative!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sulu&lt;/strong&gt; is the CMS for Symfony developers. It provides pre-built content-management features while giving developers the freedom to build, deploy, and maintain custom solutions using full-stack Symfony. Sulu is ideal for creating complex websites, integrating external tools, and building custom-built solutions.&lt;/p&gt; &#xA;&lt;p&gt;Help Symfony by &lt;a href=&#34;https://symfony.com/sponsor&#34;&gt;sponsoring&lt;/a&gt; its development!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://symfony.com/doc/current/page_creation.html&#34;&gt;Getting Started guide&lt;/a&gt; if you are new to Symfony.&lt;/li&gt; &#xA; &lt;li&gt;Try the &lt;a href=&#34;https://github.com/symfony/symfony-demo&#34;&gt;Symfony Demo application&lt;/a&gt; to learn Symfony in practice.&lt;/li&gt; &#xA; &lt;li&gt;Discover Symfony ecosystem in detail with &lt;a href=&#34;https://symfony.com/book&#34;&gt;Symfony The Fast Track&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Master Symfony with the &lt;a href=&#34;https://symfony.com/doc/current/index.html&#34;&gt;Guides and Tutorials&lt;/a&gt;, the &lt;a href=&#34;https://symfony.com/doc/current/components/index.html&#34;&gt;Components docs&lt;/a&gt; and the &lt;a href=&#34;https://symfony.com/doc/current/best_practices/index.html&#34;&gt;Best Practices&lt;/a&gt; reference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/community&#34;&gt;Join the Symfony Community&lt;/a&gt; and meet other members at the &lt;a href=&#34;https://symfony.com/events/&#34;&gt;Symfony events&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/support&#34;&gt;Get Symfony support&lt;/a&gt; on Stack Overflow, Slack, IRC, etc.&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://github.com/symfony&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/symfony&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://www.facebook.com/SymfonyFramework/&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read our &lt;a href=&#34;https://symfony.com/coc&#34;&gt;Code of Conduct&lt;/a&gt; and meet the &lt;a href=&#34;https://symfony.com/doc/current/contributing/code_of_conduct/care_team.html&#34;&gt;CARE Team&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Symfony is an Open Source, community-driven project with thousands of &lt;a href=&#34;https://symfony.com/contributors&#34;&gt;contributors&lt;/a&gt;. Join them &lt;a href=&#34;https://symfony.com/doc/current/contributing/code/index.html&#34;&gt;contributing code&lt;/a&gt; or &lt;a href=&#34;https://symfony.com/doc/current/contributing/documentation/index.html&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within Symfony, please follow our &lt;a href=&#34;https://symfony.com/security&#34;&gt;disclosure procedure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Us&lt;/h2&gt; &#xA;&lt;p&gt;Symfony development is led by the &lt;a href=&#34;https://symfony.com/doc/current/contributing/code/core_team.html&#34;&gt;Symfony Core Team&lt;/a&gt; and supported by &lt;a href=&#34;https://symfony.com/contributors&#34;&gt;Symfony contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doctrine/deprecations</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/doctrine/deprecations</id>
    <link href="https://github.com/doctrine/deprecations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Thin library around different deprecation strategies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doctrine Deprecations&lt;/h1&gt; &#xA;&lt;p&gt;A small (side-effect free by default) layer on top of &lt;code&gt;trigger_error(E_USER_DEPRECATED)&lt;/code&gt; or PSR-3 logging.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no side-effects by default, making it a perfect fit for libraries that don&#39;t know how the error handler works they operate under&lt;/li&gt; &#xA; &lt;li&gt;options to avoid having to rely on error handlers global state by using PSR-3 logging&lt;/li&gt; &#xA; &lt;li&gt;deduplicate deprecation messages to avoid excessive triggering and reduce overhead&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend to collect Deprecations using a PSR logger instead of relying on the global error handler.&lt;/p&gt; &#xA;&lt;h2&gt;Usage from consumer perspective:&lt;/h2&gt; &#xA;&lt;p&gt;Enable Doctrine deprecations to be sent to a PSR3 logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::enableWithPsrLogger($logger);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable Doctrine deprecations to be sent as &lt;code&gt;@trigger_error($message, E_USER_DEPRECATED)&lt;/code&gt; messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::enableWithTriggerError();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only want to enable deprecation tracking, without logging or calling &lt;code&gt;trigger_error&lt;/code&gt; then call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::enableTrackingDeprecations();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tracking is enabled with all three modes and provides access to all triggered deprecations and their individual count:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$deprecations = \Doctrine\Deprecations\Deprecation::getTriggeredDeprecations();&#xA;&#xA;foreach ($deprecations as $identifier =&amp;gt; $count) {&#xA;    echo $identifier . &#34; was triggered &#34; . $count . &#34; times\n&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Suppressing Specific Deprecations&lt;/h3&gt; &#xA;&lt;p&gt;Disable triggering about specific deprecations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::ignoreDeprecations(&#34;https://link/to/deprecations-description-identifier&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disable all deprecations from a package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::ignorePackage(&#34;doctrine/orm&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Operations&lt;/h3&gt; &#xA;&lt;p&gt;When used within PHPUnit or other tools that could collect multiple instances of the same deprecations the deduplication can be disabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::withoutDeduplication();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disable deprecation tracking again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::disable();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage from a library/producer perspective:&lt;/h2&gt; &#xA;&lt;p&gt;When you want to unconditionally trigger a deprecation even when called from the library itself then the &lt;code&gt;trigger&lt;/code&gt; method is the way to go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::trigger(&#xA;    &#34;doctrine/orm&#34;,&#xA;    &#34;https://link/to/deprecations-description&#34;,&#xA;    &#34;message&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If variable arguments are provided at the end, they are used with &lt;code&gt;sprintf&lt;/code&gt; on the message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::trigger(&#xA;    &#34;doctrine/orm&#34;,&#xA;    &#34;https://github.com/doctrine/orm/issue/1234&#34;,&#xA;    &#34;message %s %d&#34;,&#xA;    &#34;foo&#34;,&#xA;    1234&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to trigger a deprecation only when it is called by a function outside of the current package, but not trigger when the package itself is the cause, then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Doctrine\Deprecations\Deprecation::triggerIfCalledFromOutside(&#xA;    &#34;doctrine/orm&#34;,&#xA;    &#34;https://link/to/deprecations-description&#34;,&#xA;    &#34;message&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Based on the issue link each deprecation message is only triggered once per request.&lt;/p&gt; &#xA;&lt;p&gt;A limited stacktrace is included in the deprecation message to find the offending location.&lt;/p&gt; &#xA;&lt;p&gt;Note: A producer/library should never call &lt;code&gt;Deprecation::enableWith&lt;/code&gt; methods and leave the decision how to handle deprecations to application and frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Usage in PHPUnit tests&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;VerifyDeprecations&lt;/code&gt; trait that you can use to make assertions on the occurrence of deprecations within a test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Doctrine\Deprecations\PHPUnit\VerifyDeprecations;&#xA;&#xA;class MyTest extends TestCase&#xA;{&#xA;    use VerifyDeprecations;&#xA;&#xA;    public function testSomethingDeprecation()&#xA;    {&#xA;        $this-&amp;gt;expectDeprecationWithIdentifier(&#39;https://github.com/doctrine/orm/issue/1234&#39;);&#xA;&#xA;        triggerTheCodeWithDeprecation();&#xA;    }&#xA;&#xA;    public function testSomethingDeprecationFixed()&#xA;    {&#xA;        $this-&amp;gt;expectNoDeprecationWithIdentifier(&#39;https://github.com/doctrine/orm/issue/1234&#39;);&#xA;&#xA;        triggerTheCodeWithoutDeprecation();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is a deprecation identifier?&lt;/h2&gt; &#xA;&lt;p&gt;An identifier for deprecations is just a link to any resource, most often a Github Issue or Pull Request explaining the deprecation and potentially its alternative.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symfony/http-foundation</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/symfony/http-foundation</id>
    <link href="https://github.com/symfony/http-foundation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The HttpFoundation component defines an object-oriented layer for the HTTP specification.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HttpFoundation Component&lt;/h1&gt; &#xA;&lt;p&gt;The HttpFoundation component defines an object-oriented layer for the HTTP specification.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/components/http_foundation.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symfony/symfony/issues&#34;&gt;Report issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/symfony/symfony/pulls&#34;&gt;send Pull Requests&lt;/a&gt; in the &lt;a href=&#34;https://github.com/symfony/symfony&#34;&gt;main Symfony repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Automattic/jetpack</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/Automattic/jetpack</id>
    <link href="https://github.com/Automattic/jetpack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Security, performance, marketing, and design tools — Jetpack is made by WordPress experts to make WP sites safer and faster, and help you grow your traffic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jetpack Monorepo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/automattic/jetpack/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Automattic/jetpack&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Automattic/jetpack/branch/master/graph/badge.svg?token=GmiI6Xl10U&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the Jetpack Monorepo. It contains source code for the Jetpack plugin, the Jetpack composer packages, and other things.&lt;/p&gt; &#xA;&lt;h2&gt;How to install Jetpack plugin on your site&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are not planning on developing with Jetpack, you should install Jetpack from pre-built sources.&lt;/strong&gt; Details on that may be found &lt;a href=&#34;https://github.com/Automattic/jetpack-production#jetpack&#34;&gt;on this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developing from the Monorepo&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in developing with the Jetpack monorepo, you can check out the &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/quick-start.md&#34;&gt;Quick Start Guide here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation From Git Monorepo&lt;/h3&gt; &#xA;&lt;p&gt;To run the Jetpack plugin from the monorepo, you&#39;ll first need to build the JS and CSS. To do so, &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/development-environment.md&#34;&gt;follow the instructions here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using the &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/development-environment.md#docker-supported-recommended&#34;&gt;Docker development environment&lt;/a&gt;, you should then be all set.&lt;/p&gt; &#xA;&lt;p&gt;If not, you&#39;ll need to create a link to the Jetpack plugin from your WordPress &lt;code&gt;wp-content/plugins&lt;/code&gt; folder. You&#39;ll need to know the filesystem path to the monorepo checkout and to your WordPress installation. Then, on Linux or Mac OS X, open a terminal and use &lt;code&gt;ln -s&lt;/code&gt; to create the link, something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s /path/to/jetpack-monorepo/projects/plugins/jetpack /path/to/wordpress/wp-content/plugins/jetpack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (Vista and later), open an Administrator Command Prompt window and use &lt;code&gt;mklink /D&lt;/code&gt; similarly.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for thinking about contributing to Jetpack! If you&#39;re unsure of anything, feel free to submit an issue or pull request on any topic. The worst that can happen is that you&#39;ll be politely directed to the best location to ask your question or to change something in your pull request. There are a variety of options for how you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/CONTRIBUTING.md#write-and-submit-a-patch&#34;&gt;Write and submit patches&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you found a bug, &lt;a href=&#34;https://github.com/Automattic/jetpack/issues/new?assignees=&amp;amp;labels=%5BType%5D+Bug&amp;amp;template=bug-report.yml&#34;&gt;file a report here&lt;/a&gt;. You can &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/guides/report-bugs.md&#34;&gt;check our recommendations to create great bug reports here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/testing/beta-testing.md&#34;&gt;Join our Jetpack Beta program&lt;/a&gt; and help us test new releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/docs/translations.md&#34;&gt;Translate Jetpack in your language&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To clarify these expectations, Jetpack has adopted the code of conduct defined by the Contributor Covenant. It can be read in full &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/CODE-OF-CONDUCT.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Need to report a security vulnerability? Go to &lt;a href=&#34;https://automattic.com/security/&#34;&gt;https://automattic.com/security/&lt;/a&gt; or directly to our security bug bounty site &lt;a href=&#34;https://hackerone.com/automattic&#34;&gt;https://hackerone.com/automattic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Jetpack is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/jetpack/master/LICENSE.txt&#34;&gt;GNU General Public License v2 (or later)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- end sync section --&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;Jetpack is developed and maintained by various teams at Automattic. The Jetpack Crew responsible for coordinating everything is comprised of @adimoldovan, @anomiex, @bindlegirl, @bisko, @brbrr, @briancolinger, @coder-karen, @dereksmart, @fgiannar, @jeherve, @kbrown9, @kraftbj, @leogermani, @mdbitz, @samiff, @sdixon194, @sergeymitr and @zinigor.&lt;/p&gt; &#xA;&lt;p&gt;Contributions have been and continue to be made by dozens of other Automatticians, like:&lt;/p&gt; &#xA;&lt;p&gt;@aldavigdis, @allendav, @apeatling, @azaozz, @bazza, @beaulebens, @cfinke, @daniloercoli, @chaosexanima, @ebinnion, @enejb, @eoigal, @georgestephanis, @gibrown, @gititon, @gravityrail, @jasmussen, @jblz, @jeffgolenski, @jessefriedman, @joanrho, @justinshreve, @keoshi, @koke, @kovshenin, @lancewillett, @lezama, @martinremy, @mdawaffe, @MichaelArestad, @mtias, @mcsf, @mdawaffe, @nickmomrik, @obenland, @oskosk, @pento, @roccotripaldi, @stephdau, @Viper007Bond, @xyu and @yoavf.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;em&gt;awesome&lt;/em&gt; happiness engineers are @a8ck3n, @aicee, @bizanimesh, @brucea8c, @cena, @danjjohnson, @dericleeyy, @dkmyta, @gaurav1984, @jenhooks, @JenSwish, @julsyd, @kristinaplauche, @lizthefair, @madhattermattic, @mbhthompson, @mzakariya, @pranali333, @rcowles, @snowmads, @stefmattana, and @tmmbecker.&lt;/p&gt; &#xA;&lt;p&gt;Interested in working on awesome open-source code all day? &lt;a href=&#34;https://automattic.com/work-with-us/&#34;&gt;Join us&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dompdf/dompdf</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/dompdf/dompdf</id>
    <link href="https://github.com/dompdf/dompdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTML to PDF converter for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dompdf&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dompdf/dompdf/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/dompdf/dompdf/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/dompdf/dompdf&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/dompdf/dompdf/v/stable.png&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/dompdf/dompdf&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/dompdf/dompdf/downloads.png&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/dompdf/dompdf&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/dompdf/dompdf/license.png&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dompdf is an HTML to PDF converter&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;At its heart, dompdf is (mostly) a &lt;a href=&#34;http://www.w3.org/TR/CSS2/&#34;&gt;CSS 2.1&lt;/a&gt; compliant HTML layout and rendering engine written in PHP. It is a style-driven renderer: it will download and read external stylesheets, inline style tags, and the style attributes of individual HTML elements. It also supports most presentational HTML attributes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This document applies to the latest stable code which may not reflect the current release. For released code please &lt;a href=&#34;https://github.com/dompdf/dompdf/tags&#34;&gt;navigate to the appropriate tag&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check out the &lt;a href=&#34;http://eclecticgeek.com/dompdf/debug.php&#34;&gt;demo&lt;/a&gt; and ask any question on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/dompdf&#34;&gt;StackOverflow&lt;/a&gt; or in &lt;a href=&#34;https://github.com/dompdf/dompdf/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow us on &lt;a href=&#34;http://www.twitter.com/dompdf&#34;&gt;&lt;img src=&#34;http://twitter-badges.s3.amazonaws.com/twitter-a.png&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handles most CSS 2.1 and a few CSS3 properties, including @import, @media &amp;amp; @page rules&lt;/li&gt; &#xA; &lt;li&gt;Supports most presentational HTML 4.0 attributes&lt;/li&gt; &#xA; &lt;li&gt;Supports external stylesheets, either local or through http/ftp (via fopen-wrappers)&lt;/li&gt; &#xA; &lt;li&gt;Supports complex tables, including row &amp;amp; column spans, separate &amp;amp; collapsed border models, individual cell styling&lt;/li&gt; &#xA; &lt;li&gt;Image support (gif, png (8, 24 and 32 bit with alpha channel), bmp &amp;amp; jpeg)&lt;/li&gt; &#xA; &lt;li&gt;No dependencies on external PDF libraries, thanks to the R&amp;amp;OS PDF class&lt;/li&gt; &#xA; &lt;li&gt;Inline PHP support&lt;/li&gt; &#xA; &lt;li&gt;Basic SVG support (see &#34;Limitations&#34; below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP version 7.1 or higher&lt;/li&gt; &#xA; &lt;li&gt;DOM extension&lt;/li&gt; &#xA; &lt;li&gt;MBString extension&lt;/li&gt; &#xA; &lt;li&gt;php-font-lib&lt;/li&gt; &#xA; &lt;li&gt;php-svg-lib&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that some required dependencies may have further dependencies (notably php-svg-lib requires sabberworm/php-css-parser).&lt;/p&gt; &#xA;&lt;h3&gt;Recommendations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OPcache (OPcache, XCache, APC, etc.): improves performance&lt;/li&gt; &#xA; &lt;li&gt;GD (for image processing)&lt;/li&gt; &#xA; &lt;li&gt;IMagick or GMagick extension: improves image processing performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visit the wiki for more information: &lt;a href=&#34;https://github.com/dompdf/dompdf/wiki/Requirements&#34;&gt;https://github.com/dompdf/dompdf/wiki/Requirements&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Fonts &amp;amp; Character Encoding&lt;/h2&gt; &#xA;&lt;p&gt;PDF documents internally support the following fonts: Helvetica, Times-Roman, Courier, Zapf-Dingbats, &amp;amp; Symbol. These fonts only support Windows ANSI encoding. In order for a PDF to display characters that are not available in Windows ANSI, you must supply an external font. Dompdf will embed any referenced font in the PDF so long as it has been pre-loaded or is accessible to dompdf and reference in CSS @font-face rules. See the &lt;a href=&#34;https://github.com/dompdf/dompdf/wiki/About-Fonts-and-Character-Encoding&#34;&gt;font overview&lt;/a&gt; for more information on how to use fonts.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://dejavu-fonts.github.io/&#34;&gt;DejaVu TrueType fonts&lt;/a&gt; have been pre-installed to give dompdf decent Unicode character coverage by default. To use the DejaVu fonts reference the font in your stylesheet, e.g. &lt;code&gt;body { font-family: DejaVu Sans; }&lt;/code&gt; (for DejaVu Sans). The following DejaVu 2.34 fonts are available: DejaVu Sans, DejaVu Serif, and DejaVu Sans Mono.&lt;/p&gt; &#xA;&lt;h2&gt;Easy Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install with composer&lt;/h3&gt; &#xA;&lt;p&gt;To install with &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, simply require the latest version of this package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require dompdf/dompdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that the autoload file from Composer is loaded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// somewhere early in your project&#39;s loading, require the Composer autoloader&#xA;// see: http://getcomposer.org/doc/00-intro.md&#xA;require &#39;vendor/autoload.php&#39;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download and install&lt;/h3&gt; &#xA;&lt;p&gt;Download a packaged archive of dompdf and extract it into the directory where dompdf will reside&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can download stable copies of dompdf from &lt;a href=&#34;https://github.com/dompdf/dompdf/releases&#34;&gt;https://github.com/dompdf/dompdf/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or download a nightly (the latest, unreleased code) from &lt;a href=&#34;http://eclecticgeek.com/dompdf&#34;&gt;http://eclecticgeek.com/dompdf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the packaged release autoloader to load dompdf, libraries, and helper functions in your PHP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// include autoloader&#xA;require_once &#39;dompdf/autoload.inc.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: packaged releases are named according using semantic versioning (&lt;em&gt;dompdf_MAJOR-MINOR-PATCH.zip&lt;/em&gt;). So the 1.0.0 release would be dompdf_1-0-0.zip. This is the only download that includes the autoloader for Dompdf and all its dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Install with git&lt;/h3&gt; &#xA;&lt;p&gt;From the command line, switch to the directory where dompdf will reside and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/dompdf/dompdf.git&#xA;cd dompdf/lib&#xA;&#xA;git clone https://github.com/PhenX/php-font-lib.git php-font-lib&#xA;cd php-font-lib&#xA;git checkout 0.5.1&#xA;cd ..&#xA;&#xA;git clone https://github.com/PhenX/php-svg-lib.git php-svg-lib&#xA;cd php-svg-lib&#xA;git checkout v0.3.2&#xA;cd ..&#xA;&#xA;git clone https://github.com/sabberworm/PHP-CSS-Parser.git php-css-parser&#xA;cd php-css-parser&#xA;git checkout 8.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Require dompdf and it&#39;s dependencies in your PHP. For details see the &lt;a href=&#34;https://github.com/dompdf/utils/raw/master/autoload.inc.php&#34;&gt;autoloader in the utils project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Just pass your HTML in to dompdf and stream the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// reference the Dompdf namespace&#xA;use Dompdf\Dompdf;&#xA;&#xA;// instantiate and use the dompdf class&#xA;$dompdf = new Dompdf();&#xA;$dompdf-&amp;gt;loadHtml(&#39;hello world&#39;);&#xA;&#xA;// (Optional) Setup the paper size and orientation&#xA;$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;landscape&#39;);&#xA;&#xA;// Render the HTML as PDF&#xA;$dompdf-&amp;gt;render();&#xA;&#xA;// Output the generated PDF to Browser&#xA;$dompdf-&amp;gt;stream();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Options&lt;/h3&gt; &#xA;&lt;p&gt;Set options during dompdf instantiation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Dompdf\Dompdf;&#xA;use Dompdf\Options;&#xA;&#xA;$options = new Options();&#xA;$options-&amp;gt;set(&#39;defaultFont&#39;, &#39;Courier&#39;);&#xA;$dompdf = new Dompdf($options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or at run time&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Dompdf\Dompdf;&#xA;&#xA;$dompdf = new Dompdf();&#xA;$options = $dompdf-&amp;gt;getOptions();&#xA;$options-&amp;gt;setDefaultFont(&#39;Courier&#39;);&#xA;$dompdf-&amp;gt;setOptions($options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dompdf/dompdf/master/src/Options.php&#34;&gt;Dompdf\Options&lt;/a&gt; for a list of available options.&lt;/p&gt; &#xA;&lt;h3&gt;Resource Reference Requirements&lt;/h3&gt; &#xA;&lt;p&gt;In order to protect potentially sensitive information Dompdf imposes restrictions on files referenced from the local file system or the web.&lt;/p&gt; &#xA;&lt;p&gt;Files accessed through web-based protocols have the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Dompdf option &#34;isRemoteEnabled&#34; must be set to &#34;true&#34;&lt;/li&gt; &#xA; &lt;li&gt;PHP must either have the curl extension enabled or the allow_url_fopen setting set to true&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Files accessed through the local file system have the following requirement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The file must fall within the path(s) specified for the Dompdf &#34;chroot&#34; option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations (Known Issues)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table cells are not pageable, meaning a table row must fit on a single page.&lt;/li&gt; &#xA; &lt;li&gt;Elements are rendered on the active page when they are parsed.&lt;/li&gt; &#xA; &lt;li&gt;Embedding &#34;raw&#34; SVG&#39;s (&lt;code&gt;&amp;lt;svg&amp;gt;&amp;lt;path...&amp;gt;&amp;lt;/svg&amp;gt;&lt;/code&gt;) isn&#39;t working yet, you need to either link to an external SVG file, or use a DataURI like this: &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$html = &#39;&amp;lt;img src=&#34;data:image/svg+xml;base64,&#39; . base64_encode($svg) . &#39;&#34; ...&amp;gt;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; Watch &lt;a href=&#34;https://github.com/dompdf/dompdf/issues/320&#34;&gt;https://github.com/dompdf/dompdf/issues/320&lt;/a&gt; for progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://goo.gl/DSvWf&#34;&gt;&lt;img src=&#34;https://www.paypal.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;Donate button&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you find this project useful, please consider making a donation. Any funds donated will be used to help further development on this project.)&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GoogleCloudPlatform/php-docs-samples</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/GoogleCloudPlatform/php-docs-samples</id>
    <link href="https://github.com/GoogleCloudPlatform/php-docs-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of samples that demonstrate how to call Google Cloud services from PHP.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;PHP Docs Samples&lt;/h2&gt; &#xA;&lt;p&gt;A collection of samples that demonstrate how to call Google Cloud services from PHP.&lt;/p&gt; &#xA;&lt;p&gt;See our other &lt;a href=&#34;https://github.com/GoogleCloudPlatform&#34;&gt;Google Cloud Platform github repos&lt;/a&gt; for sample applications and scaffolding for other frameworks and use cases.&lt;/p&gt; &#xA;&lt;h2&gt;Google Cloud Samples&lt;/h2&gt; &#xA;&lt;p&gt;To browse ready to use code samples check &lt;a href=&#34;https://cloud.google.com/docs/samples?l=php&#34;&gt;Google Cloud Samples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/php-docs-samples/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/php-docs-samples/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Sylius/Sylius</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/Sylius/Sylius</id>
    <link href="https://github.com/Sylius/Sylius" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source eCommerce Platform on Symfony&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://sylius.com/github-readme/link/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://sylius.com/assets/github-readme.png?v111&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;Sylius is an Open Source eCommerce platform on top of &lt;a href=&#34;https://symfony.com&#34;&gt;&lt;strong&gt;Symfony&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The highest quality of code, strong testing culture, built-in Agile (BDD) workflow and exceptional flexibility make it the best solution for applications tailored to your business requirements. Powerful REST API allows for easy integrations and creating unique customer experience on any device.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re using full-stack Behavior-Driven-Development, with &lt;a href=&#34;https://phpspec.net&#34;&gt;phpspec&lt;/a&gt; and &lt;a href=&#34;http://behat.org&#34;&gt;Behat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy being an eCommerce Developer again!&lt;/p&gt; &#xA;&lt;img src=&#34;https://sylius.com/assets/readme/readme-main.png&#34;&gt; &#xA;&lt;h2&gt;⚙️ Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.sylius.com/en/latest/book/installation/installation.html&#34;&gt;Install Sylius&lt;/a&gt; with Composer (see &lt;a href=&#34;https://docs.sylius.com/en/latest/book/installation/requirements.html&#34;&gt;requirements details&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.sylius.com/en/latest/getting-started-with-sylius/index.html&#34;&gt;Getting started with Sylius tutorial&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://docs.sylius.com&#34;&gt;docs.sylius.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Community&lt;/h2&gt; &#xA;&lt;p&gt;Get Sylius support on &lt;a href=&#34;https://sylius.com/slack&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://forum.sylius.com/&#34;&gt;Forum&lt;/a&gt; or &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sylius&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stay updated by following our &lt;a href=&#34;https://twitter.com/Sylius&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://www.facebook.com/SyliusEcommerce/&#34;&gt;Facebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Would like to help us and build the most developer-friendly eCommerce platform? Start from reading our &lt;a href=&#34;https://docs.sylius.com/en/latest/book/index.html#contributing&#34;&gt;Contributing Guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;👮 Security issues&lt;/h2&gt; &#xA;&lt;p&gt;If you think that you have found a security issue in Sylius, please do not use the issue tracker and do not post it publicly. Instead, all security issues must be sent to &lt;code&gt;security@sylius.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📦 Plugins and Extensions: Sylius Store&lt;/h2&gt; &#xA;&lt;a href=&#34;https://store.sylius.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://sylius.com/assets/readme/readme-store.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You can find Sylius plugins on &lt;a href=&#34;https://sylius.com/plugins/&#34;&gt;our Sylius Store&lt;/a&gt; which is a Marketplace with Sylius extensions.&lt;/p&gt; &#xA;&lt;p&gt;Or search for &lt;a href=&#34;https://packagist.org/explore/?type=sylius-plugin&#34;&gt;packages marked as &lt;em&gt;sylius-plugin&lt;/em&gt;&lt;/a&gt; on Packagist.&lt;/p&gt; &#xA;&lt;h2&gt;➕ Sylius Plus&lt;/h2&gt; &#xA;&lt;a href=&#34;https://sylius.com/plus/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://sylius.com/assets/readme/readme-plus.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Sylius Plus gives you all the power of Open Source and much more. It comes with the following set of enterprise-grade features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced Multi-store&lt;/li&gt; &#xA; &lt;li&gt;Returns Management&lt;/li&gt; &#xA; &lt;li&gt;Multi-source Inventory&lt;/li&gt; &#xA; &lt;li&gt;Advanced Users Permissions&lt;/li&gt; &#xA; &lt;li&gt;Partial Order Fulfillment&lt;/li&gt; &#xA; &lt;li&gt;Loyalty&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What is more, Sylius Plus means SLA-backed support and Project Success Assistance from its creators. &lt;a href=&#34;https://sylius.com/plus/&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📃 License&lt;/h2&gt; &#xA;&lt;p&gt;Sylius is completely free and released under the &lt;a href=&#34;https://github.com/Sylius/Sylius/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;✍️ Authors&lt;/h2&gt; &#xA;&lt;p&gt;Sylius was originally created by &lt;a href=&#34;https://pjedrzejewski.com&#34;&gt;Paweł Jędrzejewski&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Kudos to all Sylius contributors 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pamil&#34;&gt;&lt;img src=&#34;https://github.com/pamil.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pjedrzejewski&#34;&gt;&lt;img src=&#34;https://github.com/pjedrzejewski.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Zales0123&#34;&gt;&lt;img src=&#34;https://github.com/Zales0123.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GSadee&#34;&gt;&lt;img src=&#34;https://github.com/GSadee.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lchrusciel&#34;&gt;&lt;img src=&#34;https://github.com/lchrusciel.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CoderMaggie&#34;&gt;&lt;img src=&#34;https://github.com/CoderMaggie.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Arminek&#34;&gt;&lt;img src=&#34;https://github.com/Arminek.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tuka217&#34;&gt;&lt;img src=&#34;https://github.com/tuka217.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NoResponseMate&#34;&gt;&lt;img src=&#34;https://github.com/NoResponseMate.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stloyd&#34;&gt;&lt;img src=&#34;https://github.com/stloyd.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/umpirsky&#34;&gt;&lt;img src=&#34;https://github.com/umpirsky.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/winzou&#34;&gt;&lt;img src=&#34;https://github.com/winzou.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tomanhez&#34;&gt;&lt;img src=&#34;https://github.com/Tomanhez.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/michalmarcinkowski&#34;&gt;&lt;img src=&#34;https://github.com/michalmarcinkowski.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AdamKasp&#34;&gt;&lt;img src=&#34;https://github.com/AdamKasp.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arnolanglade&#34;&gt;&lt;img src=&#34;https://github.com/arnolanglade.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jjanvier&#34;&gt;&lt;img src=&#34;https://github.com/jjanvier.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kayue&#34;&gt;&lt;img src=&#34;https://github.com/kayue.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stefandoorn&#34;&gt;&lt;img src=&#34;https://github.com/stefandoorn.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/piotrantosik&#34;&gt;&lt;img src=&#34;https://github.com/piotrantosik.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Richtermeister&#34;&gt;&lt;img src=&#34;https://github.com/Richtermeister.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kulczy&#34;&gt;&lt;img src=&#34;https://github.com/kulczy.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/koemeet&#34;&gt;&lt;img src=&#34;https://github.com/koemeet.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oallain&#34;&gt;&lt;img src=&#34;https://github.com/oallain.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/loic425&#34;&gt;&lt;img src=&#34;https://github.com/loic425.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bendavies&#34;&gt;&lt;img src=&#34;https://github.com/bendavies.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aramalipoor&#34;&gt;&lt;img src=&#34;https://github.com/aramalipoor.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amenophis&#34;&gt;&lt;img src=&#34;https://github.com/amenophis.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/loicmobizel&#34;&gt;&lt;img src=&#34;https://github.com/loicmobizel.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mamazu&#34;&gt;&lt;img src=&#34;https://github.com/mamazu.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/loevgaard&#34;&gt;&lt;img src=&#34;https://github.com/loevgaard.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/makasim&#34;&gt;&lt;img src=&#34;https://github.com/makasim.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gperdomor&#34;&gt;&lt;img src=&#34;https://github.com/gperdomor.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arti0090&#34;&gt;&lt;img src=&#34;https://github.com/arti0090.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/liverbool&#34;&gt;&lt;img src=&#34;https://github.com/liverbool.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mmenozzi&#34;&gt;&lt;img src=&#34;https://github.com/mmenozzi.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psyray&#34;&gt;&lt;img src=&#34;https://github.com/psyray.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mbabker&#34;&gt;&lt;img src=&#34;https://github.com/mbabker.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/peteward&#34;&gt;&lt;img src=&#34;https://github.com/peteward.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/adamelso&#34;&gt;&lt;img src=&#34;https://github.com/adamelso.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/igormukhingmailcom&#34;&gt;&lt;img src=&#34;https://github.com/igormukhingmailcom.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/antonioperic&#34;&gt;&lt;img src=&#34;https://github.com/antonioperic.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elliot&#34;&gt;&lt;img src=&#34;https://github.com/elliot.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agounaris&#34;&gt;&lt;img src=&#34;https://github.com/agounaris.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Prometee&#34;&gt;&lt;img src=&#34;https://github.com/Prometee.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/l3l0&#34;&gt;&lt;img src=&#34;https://github.com/l3l0.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/inssein&#34;&gt;&lt;img src=&#34;https://github.com/inssein.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/loevstroem&#34;&gt;&lt;img src=&#34;https://github.com/loevstroem.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pborreli&#34;&gt;&lt;img src=&#34;https://github.com/pborreli.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gorkalaucirica&#34;&gt;&lt;img src=&#34;https://github.com/gorkalaucirica.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gabiudrescu&#34;&gt;&lt;img src=&#34;https://github.com/gabiudrescu.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cordoval&#34;&gt;&lt;img src=&#34;https://github.com/cordoval.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/EmiiKhaos&#34;&gt;&lt;img src=&#34;https://github.com/EmiiKhaos.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/venyii&#34;&gt;&lt;img src=&#34;https://github.com/venyii.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nakashu&#34;&gt;&lt;img src=&#34;https://github.com/nakashu.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LucaGallinari&#34;&gt;&lt;img src=&#34;https://github.com/LucaGallinari.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vvasiloi&#34;&gt;&lt;img src=&#34;https://github.com/vvasiloi.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/teohhanhui&#34;&gt;&lt;img src=&#34;https://github.com/teohhanhui.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jacquesbh&#34;&gt;&lt;img src=&#34;https://github.com/jacquesbh.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/diimpp&#34;&gt;&lt;img src=&#34;https://github.com/diimpp.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sweoggy&#34;&gt;&lt;img src=&#34;https://github.com/sweoggy.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bartoszpietrzak1994&#34;&gt;&lt;img src=&#34;https://github.com/bartoszpietrzak1994.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psihius&#34;&gt;&lt;img src=&#34;https://github.com/psihius.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/okwinza&#34;&gt;&lt;img src=&#34;https://github.com/okwinza.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bitbager&#34;&gt;&lt;img src=&#34;https://github.com/bitbager.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alcaeus&#34;&gt;&lt;img src=&#34;https://github.com/alcaeus.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ahmadrabie&#34;&gt;&lt;img src=&#34;https://github.com/ahmadrabie.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/coudenysj&#34;&gt;&lt;img src=&#34;https://github.com/coudenysj.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mykehsd&#34;&gt;&lt;img src=&#34;https://github.com/mykehsd.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gonzalovilaseca&#34;&gt;&lt;img src=&#34;https://github.com/gonzalovilaseca.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/4c0n&#34;&gt;&lt;img src=&#34;https://github.com/4c0n.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tvlooy&#34;&gt;&lt;img src=&#34;https://github.com/tvlooy.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dantleech&#34;&gt;&lt;img src=&#34;https://github.com/dantleech.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cdaguerre&#34;&gt;&lt;img src=&#34;https://github.com/cdaguerre.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Strontium-90&#34;&gt;&lt;img src=&#34;https://github.com/Strontium-90.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JaisDK&#34;&gt;&lt;img src=&#34;https://github.com/JaisDK.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pix-art&#34;&gt;&lt;img src=&#34;https://github.com/pix-art.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dunglas&#34;&gt;&lt;img src=&#34;https://github.com/dunglas.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SirDomin&#34;&gt;&lt;img src=&#34;https://github.com/SirDomin.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/peterukena&#34;&gt;&lt;img src=&#34;https://github.com/peterukena.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tchapi&#34;&gt;&lt;img src=&#34;https://github.com/tchapi.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/laurent35240&#34;&gt;&lt;img src=&#34;https://github.com/laurent35240.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jdeveloper&#34;&gt;&lt;img src=&#34;https://github.com/jdeveloper.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TomasVotruba&#34;&gt;&lt;img src=&#34;https://github.com/TomasVotruba.png?size=40&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;... and others!&lt;/p&gt; &#xA;&lt;p&gt;See the full list of &lt;a href=&#34;https://github.com/Sylius/Sylius/contributors&#34;&gt;contributors from our awesome community&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symfony/http-kernel</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/symfony/http-kernel</id>
    <link href="https://github.com/symfony/http-kernel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The HttpKernel component provides a structured process for converting a Request into a Response.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HttpKernel Component&lt;/h1&gt; &#xA;&lt;p&gt;The HttpKernel component provides a structured process for converting a Request into a Response by making use of the EventDispatcher component. It&#39;s flexible enough to create full-stack frameworks, micro-frameworks or advanced CMS systems like Drupal.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/components/http_kernel.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/doc/current/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symfony/symfony/issues&#34;&gt;Report issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/symfony/symfony/pulls&#34;&gt;send Pull Requests&lt;/a&gt; in the &lt;a href=&#34;https://github.com/symfony/symfony&#34;&gt;main Symfony repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>symfony/polyfill-intl-idn</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/symfony/polyfill-intl-idn</id>
    <link href="https://github.com/symfony/polyfill-intl-idn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This component provides a partial, native PHP implementation for the Intl extension (IDN features).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony Polyfill / Intl: Idn&lt;/h1&gt; &#xA;&lt;p&gt;This component provides &lt;a href=&#34;https://php.net/idn-to-ascii&#34;&gt;&lt;code&gt;idn_to_ascii&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://php.net/idn-to-utf8&#34;&gt;&lt;code&gt;idn_to_utf8&lt;/code&gt;&lt;/a&gt; functions to users who run php versions without the &lt;a href=&#34;https://php.net/intl&#34;&gt;Intl&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;More information can be found in the &lt;a href=&#34;https://github.com/symfony/polyfill/raw/main/README.md&#34;&gt;main Polyfill README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This library is released under the &lt;a href=&#34;https://raw.githubusercontent.com/symfony/polyfill-intl-idn/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>guzzle/guzzle</title>
    <updated>2022-05-29T01:33:05Z</updated>
    <id>tag:github.com,2022-05-29:/guzzle/guzzle</id>
    <link href="https://github.com/guzzle/guzzle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Guzzle, an extensible PHP HTTP client&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/guzzle/guzzle/master/.github/logo.png?raw=true&#34; alt=&#34;Guzzle&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Guzzle, PHP HTTP client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/guzzle/guzzle/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/guzzle/guzzle.svg?style=flat-square&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/guzzle/guzzle/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/guzzle/guzzle/CI?label=ci%20build&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/guzzlehttp/guzzle&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/guzzlehttp/guzzle.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guzzle is a PHP HTTP client that makes it easy to send HTTP requests and trivial to integrate with web services.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple interface for building query strings, POST requests, streaming large uploads, streaming large downloads, using HTTP cookies, uploading JSON data, etc...&lt;/li&gt; &#xA; &lt;li&gt;Can send both synchronous and asynchronous requests using the same interface.&lt;/li&gt; &#xA; &lt;li&gt;Uses PSR-7 interfaces for requests, responses, and streams. This allows you to utilize other PSR-7 compatible libraries with Guzzle.&lt;/li&gt; &#xA; &lt;li&gt;Supports PSR-18 allowing interoperability between other PSR-18 HTTP Clients.&lt;/li&gt; &#xA; &lt;li&gt;Abstracts away the underlying HTTP transport, allowing you to write environment and transport agnostic code; i.e., no hard dependency on cURL, PHP streams, sockets, or non-blocking event loops.&lt;/li&gt; &#xA; &lt;li&gt;Middleware system allows you to augment and compose client behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$client = new \GuzzleHttp\Client();&#xA;$response = $client-&amp;gt;request(&#39;GET&#39;, &#39;https://api.github.com/repos/guzzle/guzzle&#39;);&#xA;&#xA;echo $response-&amp;gt;getStatusCode(); // 200&#xA;echo $response-&amp;gt;getHeaderLine(&#39;content-type&#39;); // &#39;application/json; charset=utf8&#39;&#xA;echo $response-&amp;gt;getBody(); // &#39;{&#34;id&#34;: 1420053, &#34;name&#34;: &#34;guzzle&#34;, ...}&#39;&#xA;&#xA;// Send an asynchronous request.&#xA;$request = new \GuzzleHttp\Psr7\Request(&#39;GET&#39;, &#39;http://httpbin.org&#39;);&#xA;$promise = $client-&amp;gt;sendAsync($request)-&amp;gt;then(function ($response) {&#xA;    echo &#39;I completed! &#39; . $response-&amp;gt;getBody();&#xA;});&#xA;&#xA;$promise-&amp;gt;wait();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help and docs&lt;/h2&gt; &#xA;&lt;p&gt;We use GitHub issues only to discuss bugs and new features. For support please refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.guzzlephp.org&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/guzzle&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.slack.com/client/T0D2S9JCT/CE6UAAKL4&#34;&gt;#guzzle&lt;/a&gt; channel on &lt;a href=&#34;http://slack.httplug.io/&#34;&gt;PHP-HTTP Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/guzzle/guzzle&#34;&gt;Gitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing Guzzle&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install Guzzle is through &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require guzzlehttp/guzzle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Version Guidance&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Packagist&lt;/th&gt; &#xA;   &lt;th&gt;Namespace&lt;/th&gt; &#xA;   &lt;th&gt;Repo&lt;/th&gt; &#xA;   &lt;th&gt;Docs&lt;/th&gt; &#xA;   &lt;th&gt;PSR-7&lt;/th&gt; &#xA;   &lt;th&gt;PHP Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.x&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;guzzle/guzzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Guzzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/guzzle/guzzle3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://guzzle3.readthedocs.org&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;=5.3.3,&amp;lt;7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.x&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GuzzleHttp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/guzzle/guzzle/tree/4.x&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;=5.4,&amp;lt;7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.x&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GuzzleHttp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/guzzle/guzzle/tree/5.3&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://docs.guzzlephp.org/en/5.3/&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;=5.4,&amp;lt;7.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6.x&lt;/td&gt; &#xA;   &lt;td&gt;Security fixes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GuzzleHttp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/guzzle/guzzle/tree/6.5&#34;&gt;v6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://docs.guzzlephp.org/en/6.5/&#34;&gt;v6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;=5.5,&amp;lt;8.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7.x&lt;/td&gt; &#xA;   &lt;td&gt;Latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GuzzleHttp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/guzzle/guzzle&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://docs.guzzlephp.org/en/latest/&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;=7.2.5,&amp;lt;8.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within this package, please send an email to &lt;a href=&#34;mailto:security@tidelift.com&#34;&gt;security@tidelift.com&lt;/a&gt;. All security vulnerabilities will be promptly addressed. Please do not disclose security-related issues publicly until a fix has been announced. Please see &lt;a href=&#34;https://github.com/guzzle/guzzle/security/policy&#34;&gt;Security Policy&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Guzzle is made available under the MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/guzzle/guzzle/master/LICENSE&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;For Enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of Guzzle and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/packagist-guzzlehttp-guzzle?utm_source=packagist-guzzlehttp-guzzle&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>