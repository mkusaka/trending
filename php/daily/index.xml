<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-10T01:41:46Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>djurovicigoor/lara-files</title>
    <updated>2023-08-10T01:41:46Z</updated>
    <id>tag:github.com,2023-08-10:/djurovicigoor/lara-files</id>
    <link href="https://github.com/djurovicigoor/lara-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lara-files is a package which will make it easier to work with files. Package has built-in support for DigitalOcean spaces and Amazon S3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LaraFiles&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/djurovicigoor/lara-files&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/djurovicigoor/lara-files.svg?style=for-the-badge&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/packagist/dt/djurovicigoor/lara-files.svg?style=for-the-badge&#34; alt=&#34;Total Downloads&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/scrutinizer/quality/g/djurovicigoor/lara-files/master.svg?style=for-the-badge&#34; alt=&#34;Scrutinizer code quality (GitHub/Bitbucket)&#34;&gt; &lt;img src=&#34;https://img.shields.io/scrutinizer/build/g/djurovicigoor/lara-files/master.svg?style=for-the-badge&#34; alt=&#34;Scrutinizer build (GitHub/Bitbucket)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lara-files is a package which will make it easier to work with files. Package has built-in support for DigitalOcean spaces and Amazon S3. This package can be used in Laravel 5.5 or higher.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; src=&#34;https://cdn-images-1.medium.com/max/2600/1*eNfoy3KrItKc9avrgKyKPQ.jpeg&#34; alt=&#34;lara-files preview&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require djurovicigoor/lara-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The service provider will automatically get registered. Or you may manually add the service provider in your &lt;code&gt;config/app.php&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;providers&#39; =&amp;gt; [&#xA;    // ...&#xA;    DjurovicIgoor\LaraFiles\LaraFilesProvider::class,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can publish a service provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --provider=&#34;DjurovicIgoor\LaraFiles\LaraFilesProvider&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the config file and migration has been published, you can change default visibility in &lt;code&gt;config/lara-files.php&lt;/code&gt; config file if you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/*&#xA;|--------------------------------------------------------------------------&#xA;| Default visibility&#xA;|--------------------------------------------------------------------------&#xA;|&#xA;| public  =&amp;gt; Files are accessible through a browser&#xA;| private =&amp;gt; Files are not accessible through a browser&#xA;*/&#xA;&#39;visibility&#39;   =&amp;gt; &#39;public&#39;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that you can create the lara-files table by running the migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LaraFile model and Database schema&lt;/h2&gt; &#xA;&lt;p&gt;The LaraFile model provides one MorphToMany relation by default. If you want to use more than default &lt;code&gt;laraFile()&lt;/code&gt; relation, you should modify types array in &lt;code&gt;config/lara-files.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/*&#xA;|--------------------------------------------------------------------------&#xA;| Type of files - relations&#xA;|--------------------------------------------------------------------------&#xA;|&#xA;*/&#xA;&#39;types&#39; =&amp;gt; [&#xA;    &#39;file&#39;,&#xA;    &#39;avatar&#39;,&#xA;    &#39;thumbnail&#39;,&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify this array as you want, add or remove an item. In this example, I have 3 types. For each of those types, package created for you relations between your model and LaraFile model, by default.&lt;/p&gt; &#xA;&lt;p&gt;If I use an avatar for this example, you have the next relations and properties on your model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;avatar()&lt;/code&gt; - Return Morph to One relations query builder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;avatars()&lt;/code&gt; - Return Morph to Many relations query builder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getAvatar()&lt;/code&gt; - Return single model of related LaraFile model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getAvatars()&lt;/code&gt; - Return Collection of related LaraFile models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, you have lazy loaded relations &lt;code&gt;avatar&lt;/code&gt; and &lt;code&gt;avatars&lt;/code&gt; that are doing the same thing as &lt;code&gt;getAvatar()&lt;/code&gt; and &lt;code&gt;getAvatars()&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$avatar  = $post-&amp;gt;avatar&#xA;$avatars = $post-&amp;gt;avatars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of those methods and properties are applicable for any type in this types array.&lt;/p&gt; &#xA;&lt;p&gt;Database schema:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;disk - (string) Disk driver of stored file.&lt;/li&gt; &#xA; &lt;li&gt;path - (string) Relative file path.&lt;/li&gt; &#xA; &lt;li&gt;hash_name - (string) Hashed name of the file.&lt;/li&gt; &#xA; &lt;li&gt;extension - (string) Original extension of the file.&lt;/li&gt; &#xA; &lt;li&gt;name - (string) Original name of the file.&lt;/li&gt; &#xA; &lt;li&gt;type - (string) Category of file. I.e. avatar, thumbnail, documents, etc.&lt;/li&gt; &#xA; &lt;li&gt;visibility - (string) Browser visibility of the file.&lt;/li&gt; &#xA; &lt;li&gt;description - (text) Description of the file.&lt;/li&gt; &#xA; &lt;li&gt;author_id - (integer) Author of the file.&lt;/li&gt; &#xA; &lt;li&gt;larafilesable_type - (string) Name of the belonging model.&lt;/li&gt; &#xA; &lt;li&gt;larafilesable_id - (integer) Id of the belonging model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Before you start using the package, you have to check your &lt;code&gt;config/filesystems.php&lt;/code&gt; file and set correct disk drivers. Package support next drivers: &#39;local&#39; , &#39;public&#39; , &#39;DOSpaces&#39; , &#39;Amazon S3&#39;. Below is an example of correct disk drivers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;disks&#39; =&amp;gt; [&#xA;     &#39;local&#39; =&amp;gt; [&#xA;        &#39;driver&#39;    =&amp;gt; &#39;local&#39;,&#xA;        &#39;root&#39;      =&amp;gt; storage_path(&#39;app&#39;),&#xA;     ],&#xA;    &#39;public&#39; =&amp;gt; [&#xA;        &#39;driver&#39;        =&amp;gt; &#39;local&#39;,&#xA;        &#39;root&#39;          =&amp;gt; storage_path(&#39;app/public&#39;),&#xA;        &#39;url&#39;           =&amp;gt; env(&#39;APP_URL&#39;).&#39;/storage&#39;,&#xA;        &#39;visibility&#39;    =&amp;gt; &#39;public&#39;,&#xA;    ],&#xA;    &#39;DOSpaces&#39; =&amp;gt; [&#xA;        &#39;driver&#39;   =&amp;gt; &#39;s3&#39;,&#xA;        &#39;key&#39;      =&amp;gt; env(&#39;DO_SPACES_KEY&#39; , &#39;Your spaces key goes here&#39;),&#xA;        &#39;secret&#39;   =&amp;gt; env(&#39;DO_SPACES_SECRET&#39; , &#39;Your spaces secret goes here&#39;),&#xA;        &#39;endpoint&#39; =&amp;gt; env(&#39;DO_SPACES_ENDPOINT&#39; , &#39;Your spaces endpoint goes here&#39;),&#xA;        &#39;region&#39;   =&amp;gt; env(&#39;DO_SPACES_REGION&#39; , &#39;Your spaces region goes here&#39;),&#xA;        &#39;bucket&#39;   =&amp;gt; env(&#39;DO_SPACES_BUCKET&#39; , &#39;Your spaces bucket goes here&#39;),&#xA;        &#39;url&#39;      =&amp;gt; env(&#39;AWS_URL&#39; , &#39;https://{BUCKET}.{REGION}.digitaloceanspaces.com/&#39;),&#xA;    ],&#xA;    &#39;s3&#39; =&amp;gt; [&#xA;        &#39;driver&#39; =&amp;gt; &#39;s3&#39;,&#xA;        &#39;key&#39;       =&amp;gt; env(&#39;AWS_ACCESS_KEY_ID&#39; , &#39;Your aws acces key goes here&#39;),&#xA;        &#39;secret&#39;    =&amp;gt; env(&#39;AWS_SECRET_ACCESS_KEY&#39; , &#39;Your aws secret key goes here&#39;),&#xA;        &#39;region&#39;    =&amp;gt; env(&#39;AWS_DEFAULT_REGION&#39; , &#39;Your aws default region goes here&#39;),&#xA;        &#39;bucket&#39;    =&amp;gt; env(&#39;AWS_BUCKET&#39; , &#39;Your aws bucket name goes here&#39;),&#xA;        &#39;url&#39;       =&amp;gt; env(&#39;AWS_URL&#39; , &#39;https://s3.{REGION}.amazonaws.com/{BUCKET}/&#39;),&#xA;    ]&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you setup disk drivers, add the &lt;code&gt;DjurovicIgoor\LaraFiles\Traits\LaraFileTrait&lt;/code&gt; trait to your model(s):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use DjurovicIgoor\LaraFiles\Traits\LaraFileTrait;&#xA;use Illuminate\Database\Eloquent\Model;&#xA;&#xA;class Post extends Model {&#xA;    &#xA;    use LaraFileTrait;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you successfully set disk drivers you have to run &lt;code&gt;php artisan storage:link&lt;/code&gt; to link your &lt;code&gt;storage/app/public&lt;/code&gt; with &lt;code&gt;public/storage&lt;/code&gt; folder if you want to access files through browser who has &#39;public&#39; driver or visibility. Now, you have prepared Eloquent Model for using Trait function:&lt;/p&gt; &#xA;&lt;h2&gt;Trait functions&lt;/h2&gt; &#xA;&lt;p&gt;All functions can be called on an already stored model in the database. The first parameter of all functions is disk adapter one of which you already have defined in your &lt;code&gt;config/filesistems.php&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The second parameter is explained for each function in the section below.&lt;/p&gt; &#xA;&lt;p&gt;The third parameter of all functions is a type of file, that is some kind of category. You can pass anything for this parameter only has to be in string format. Later, all files can be categorized by these parameters.&lt;/p&gt; &#xA;&lt;p&gt;The fourth parameter of all functions is &lt;code&gt;$additionalParameters&lt;/code&gt; variable, and should be key =&amp;gt; value array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$additionalParameters = [&#xA;    &#39;visibility&#39;    =&amp;gt; &#39;public&#39;,&#xA;    &#39;description&#39;   =&amp;gt; &#39;Lorem ipsum dolor sit amet . . .&#39;,&#xA;    &#39;author_id&#39;     =&amp;gt; $user-&amp;gt;id&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every item of the above array is optional. If you want, you can pass an empty array.&lt;/p&gt; &#xA;&lt;h4&gt;uploadHttpFile()&lt;/h4&gt; &#xA;&lt;p&gt;With this function, you can upload a single HttpUploadedFile file and associate it with your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post = Post::find($id);&#xA;$post-&amp;gt;uploadHttpFile(&#39;local&#39;, $request-&amp;gt;file(&#39;image&#39;), &#39;thumbnail&#39;, $additionalParameters = [])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;uploadHttpFiles()&lt;/h4&gt; &#xA;&lt;p&gt;With this function, you can upload the array of HttpUploadedFile files and associate them with your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post = Post::find($id);&#xA;$post-&amp;gt;uploadHttpFiles(&#39;local&#39;, $arrayOfHttpUploadedFiles, &#39;thumbnail&#39;, $additionalParameters = [])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;uploadBase64File()&lt;/h4&gt; &#xA;&lt;p&gt;With this function, you can upload a single base64 file and associate it with your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post = Post::find($id);&#xA;$post-&amp;gt;uploadBase64File(&#39;local&#39;, $base64String, &#39;thumbnail&#39;, $additionalParameters = [])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;uploadBase64Files()&lt;/h4&gt; &#xA;&lt;p&gt;With this function, you can upload the array of base64 files and associate them with your model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$post = Post::find($id);&#xA;$post-&amp;gt;uploadBase64Files(&#39;local&#39;, $arrayOfBase64String, &#39;thumbnail&#39;, $additionalParameters = [])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/djurovicigoor/lara-files/master/changelog.md&#34;&gt;changelog.md&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/djurovicigoor/lara-files/master/contributing.md&#34;&gt;contributing.md&lt;/a&gt; for details and a todolist.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any security related issues, please email &lt;a href=&#34;mailto:djurovic.igoor@gmail.com&#34;&gt;djurovic.igoor@gmail.com&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you found this project helpful or you learned something from the source code and want to appreciate&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/djurovicigoor?locale.x=en_US&#34;&gt;PayPal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/djurovicigoor&#34;&gt;Djurovic Igor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Changes&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Date&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/niladam&#34;&gt;@niladam&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Refactor to PSR2 and simplify accessor &lt;a href=&#34;https://github.com/djurovicigoor/lara-files/pull/2&#34;&gt;pull request #2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2019-05-18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/djurovicigoor/lara-files/master/license.md&#34;&gt;license file&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>benjamincrozat/benjamincrozat.com</title>
    <updated>2023-08-10T01:41:46Z</updated>
    <id>tag:github.com,2023-08-10:/benjamincrozat/benjamincrozat.com</id>
    <link href="https://github.com/benjamincrozat/benjamincrozat.com" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for Benjamin Crozat&#39;s blog built using the TALL stack and getting more than 20K monthly visitors.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://forge.laravel.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fforge.laravel.com%2Fsite-badges%2F853f706f-237e-49ce-9812-7d452d57c0bb%3Fdate%3D1%26commit%3D1&amp;amp;style=for-the-badge&#34; alt=&#34;Laravel Forge Site Deployment Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/benjamincrozat/benjamincrozat.com/assets/3613731/d80fbb79-7de6-4b2d-ab62-602890c6aa82&#34; width=&#34;64&#34; height=&#34;64&#34; alt=&#34;The logo of the blog of Benjamin Crozat.&#34;&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://benjamincrozat.com&#34;&gt;benjamincrozat.com&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the source code of my blog, &lt;a href=&#34;https://benjamincrozat.com&#34;&gt;benjamincrozat.com&lt;/a&gt;. This blog was built with the TALL stack and gets more than &lt;strong&gt;20K visitors per month&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://github.com/benjamincrozat/benjamincrozat.com/assets/3613731/0d631e69-131b-49c9-b015-5820fa02a459&#34; alt=&#34;My Pirsch Analytics Dashboard.&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;  My &#xA;  &lt;a href=&#34;https://benjamincrozat.com/recommends/pirsch&#34;&gt;Pirsch Analytics&lt;/a&gt; dashboard that is &#xA;  &lt;a href=&#34;https://benjamincrozat.pirsch.io/?domain=benjamincrozat.com&amp;amp;interval=30d&amp;amp;scale=day&#34;&gt;publicly accessible&lt;/a&gt;.&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://github.com/benjamincrozat/benjamincrozat.com/assets/3613731/452bea4e-e9e5-47bc-8624-31d56deb6c49&#34; alt=&#34;My Google Search Console.&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;  My Google Search Console. You can see the growth since I launched in September 2022.&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;I feel obligated to mention that my relative success is not correlated to my tech stack. I just want to own my piece of real estate online and do whatever I want with it. If you also want to create your blog, I don&#39;t recommend to copy and paste anything I did. While the code works for my specific needs, it might not be the ideal solution for everyone. But if you&#39;re curious, there you go, enjoy!&lt;/p&gt; &#xA;&lt;h2&gt;Before you proceed&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I don&#39;t need pull requests.&lt;/strong&gt; This is a project I&#39;m working on alone, and I only have time for the bad code I write myself. 😅&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;This isn&#39;t an opportunity for mentoring.&lt;/strong&gt; Please try to resolve your issues on your own. If you tried your hardest, then you can &lt;a href=&#34;https://github.com/benjamincrozat/benjamincrozat.com/discussions/new/choose&#34;&gt;open a new discussion&lt;/a&gt;! Also, feedback is welcome (but useful feedback, not something like &#34;whAt aBoUt SrP DudE?&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;This isn&#39;t a reference for SEO.&lt;/strong&gt; If you want to rank on Google, &lt;strong&gt;write content people search for&lt;/strong&gt; and &lt;strong&gt;BE PATIENT&lt;/strong&gt;. &lt;a href=&#34;https://benjamincrozat.com/seo-case-study&#34;&gt;I actually wrote about my journey on the blog.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;p&gt;This is a small project. It certainly won&#39;t teach you how to maintain apps at huge scales. That being said, you can learn about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplicity. Most developers underestimate its benefits.&lt;/li&gt; &#xA; &lt;li&gt;Using the GPT API from OpenAI to create features that were unthinkable not so long ago.&lt;/li&gt; &#xA; &lt;li&gt;Creating admin pages based on Laravel Nova. (I&#39;m working on Filament&#39;s integration in the &lt;em&gt;feature/filament&lt;/em&gt; branch.)&lt;/li&gt; &#xA; &lt;li&gt;Testing. A crucial part of ensuring everything stays stable. Because I can be forgetful, distracted and overconfident sometimes. These are flaws of human beings that can easily be mitigated by machines.&lt;/li&gt; &#xA; &lt;li&gt;How to use various frontend technologies such as Livewire v3 + Volt, Alpine.js, and Tailwind CSS.&lt;/li&gt; &#xA; &lt;li&gt;But you will also learn what you should avoid. This codebase is far from what I consider perfect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project requires Laravel Nova, which is a paid package. For now, I don&#39;t know how to make it optional, but meanwhile, you can switch to the &lt;em&gt;feature/filament&lt;/em&gt; branch.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8.2+&lt;/li&gt; &#xA; &lt;li&gt;MySQL 8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The instructions below have been written assuming that you are using Laravel Valet. But you can run the project in whichever environment you want (Herd, Docker with Laravel Sail, Laragon, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository and cd into it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:benjamincrozat/benjamincrozat.com.git&#xA;&#xA;cd benjamincrozat.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file and generate the app key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&#xA;php artisan key:generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies (if you don&#39;t have a Laravel Nova license, switch to the &lt;em&gt;feature/filament&lt;/em&gt; branch):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -u root -e &#34;CREATE DATABASE benjamincrozat&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Migrate the database with some fake data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan migrate --seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the frontend dependencies and build the assets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn &amp;amp;&amp;amp; yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests, execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Once the tests are green in the CI environment, a webhook from Laravel Forge is called, which triggers the deployment.&lt;/p&gt; &#xA;&lt;p&gt;Some details about the production environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I host the blog on a &lt;a href=&#34;https://benjamincrozat.com/recommends/digitalocean&#34;&gt;$6 DigitalOcean VPS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I could have stopped here, but I&#39;m also using &lt;a href=&#34;https://benjamincrozat.com/recommends/digitalocean-managed-mysql-database&#34;&gt;a managed MySQL database&lt;/a&gt; for frequent automatic backups and not having to deal with anything related to the configuration.&lt;/li&gt; &#xA; &lt;li&gt;I use Sentry to monitor errors in the production environment only.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>phpgl/flappyphpant</title>
    <updated>2023-08-10T01:41:46Z</updated>
    <id>tag:github.com,2023-08-10:/phpgl/flappyphpant</id>
    <link href="https://github.com/phpgl/flappyphpant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very simple Flappy Bird-like game written in PHP, built on PHP-GLFW and the VISU framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlappyPHPant&lt;/h1&gt; &#xA;&lt;p&gt;A very simple Flappy Bird-like game written in PHP, built on &lt;a href=&#34;http://github.com/mario-deluna/php-glfw&#34;&gt;PHP-GLFW&lt;/a&gt; and the &lt;a href=&#34;https://github.com/phpgl/visu&#34;&gt;VISU&lt;/a&gt; framework.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;640&#34; src=&#34;https://github.com/phpgl/flappyphpant/assets/956212/9d32a533-73cb-40e6-b940-7976b765d658&#34; alt=&#34;FlappyPHPant 2D PHP Game&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure the php-glfw extension is installed and enabled.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you havent done so already follow the instructions for your operating system here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/getting-started/installation/install-macos.html&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/getting-started/installation/install-linux.html&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpgl.net/getting-started/installation/install-windows.html&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then you can simply clone the project and install the dependencies with composer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/phpgl/flappyphpant.git&#xA;cd flappyphpant&#xA;composer install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash bin/play&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;code&gt;space&lt;/code&gt; to jump.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;R&lt;/code&gt; to reset.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;F1&lt;/code&gt; to disable the profiler and the debug overlay. &lt;em&gt;Note: the profiler takes a huge toll on performance as it forces the GPU to sync with the CPU after each render pass.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I really suck at this game, so if you surpass my score, please refrain from tweeting at me and making me feel ashamed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phpgl/flappyphpant/assets/956212/2f2a13e1-702f-416c-b060-9aa51f1fbe0c&#34;&gt;https://github.com/phpgl/flappyphpant/assets/956212/2f2a13e1-702f-416c-b060-9aa51f1fbe0c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;A lot of this is complete overkill for a simple Flappy Bird game, but I see this as an example project to demonstrate how you could build a 2D game with PHP-GLFW and VISU.&lt;/p&gt; &#xA;&lt;p&gt;Also, for time&#39;s sake, I cut a few corners, so the code is not as clean as I would like it to be.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Decoupled Simulation from Rendering&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; functions are decoupled. This means the game simulation (aka &lt;code&gt;update()&lt;/code&gt;) runs at a fixed rate, while the rendering (aka &lt;code&gt;render()&lt;/code&gt;) runs as fast as possible. (Or, when vsync is enabled, at the refresh rate of the monitor.) The player movement is interpolated between the last and the current simulation step, allowing smooth movement even when the simulation is running significantly slower than the rendering.&lt;/p&gt; &lt;img width=&#34;634&#34; alt=&#34;s&#34; src=&#34;https://github.com/phpgl/flappyphpant/assets/956212/eb7c1d03-a1bc-497f-806a-a95da00d7f43&#34;&gt; &lt;p&gt;FlappyPHPant specifically has a tick rate of &lt;code&gt;60ups&lt;/code&gt; but can render at about &lt;code&gt;3000fps&lt;/code&gt; with a resolution of &lt;code&gt;2560x1440&lt;/code&gt; on an M1 MacBook Pro.&lt;/p&gt; &lt;p&gt;&lt;em&gt;I was honestly really surprised at how good the frametimes are, considering the entire framework is written in PHP.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Proper 2D Camera&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The camera, unlike the real Flappy Bird, is not fixed to a vertical resolution. The window can be resized to any resolution and aspect ratio you want, and the game should scale properly.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for High DPI displays means that on retina displays, the game will be rendered at a higher internal resolution.&lt;/li&gt; &#xA;   &lt;li&gt;The number of pipes rendered is based on the viewport and automatically adjusts to the window size.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Vertical&lt;/th&gt; &#xA;     &lt;th&gt;Horizontal&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;img width=&#34;400&#34; src=&#34;https://github.com/phpgl/flappyphpant/assets/956212/10238007-f2ce-4e87-9e8c-c307e3f53a13&#34;&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;img src=&#34;https://github.com/phpgl/flappyphpant/assets/956212/b72cd792-927a-438d-839a-030653cfc34e&#34; width=&#34;400&#34;&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Abstracted Input Handling&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Input handling can get messy quickly; this example utilizes Input and Action maps to abstract the input handling and, theoretically, allow for easy remapping of the controls.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; // apply jump&#xA;if ($this-&amp;gt;inputContext-&amp;gt;actions-&amp;gt;didButtonPress(&#39;jump&#39;)) {&#xA;    $playerComponent-&amp;gt;velocity = $playerComponent-&amp;gt;jumpForce;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(I do understand how silly this is in a game where you basically just press one button.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Entity Component System&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This example uses an Entity Component System to manage the game objects and share state between the different systems.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$playerEntity = $entities-&amp;gt;create();&#xA;$entities-&amp;gt;attach($playerEntity, new SpriteComponent(&#39;visuphpant2.png&#39;));&#xA;$entities-&amp;gt;attach($playerEntity, new PlayerComponent());&#xA;$entities-&amp;gt;attach($playerEntity, new Transform());&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This kind of game is unfortunately not the best example for an ECS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple Sprite Renderer&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This project showcases a simple sprite renderer that can render individual sprites from a sprite sheet. This is used to render the animated player elephant as well as the pipes. It&#39;s nothing complex but should give you a starting point if you want to build a 2D game with VISU.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Very Basic AABB Collision Detection&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The collision detection is very basic and only checks for collisions between the player AABB and the pipe AABBs. It can be infuriating at times, as the elephant will collide with the pipes even if it looks like it should not.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Text Rendering&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Showcasing a simple example of how to render text labels. I know this might sound underwhelming, but text handling can be pretty darn annoying.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>