<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-22T01:37:10Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aliyun/aliyun-oss-php-sdk</title>
    <updated>2023-08-22T01:37:10Z</updated>
    <id>tag:github.com,2023-08-22:/aliyun/aliyun-oss-php-sdk</id>
    <link href="https://github.com/aliyun/aliyun-oss-php-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Aliyun OSS SDK for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alibaba Cloud OSS SDK for PHP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/aliyuncs/oss-sdk-php&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/aliyuncs/oss-sdk-php/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/aliyun/aliyun-oss-php-sdk&#34;&gt;&lt;img src=&#34;https://travis-ci.org/aliyun/aliyun-oss-php-sdk.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/aliyun/aliyun-oss-php-sdk?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/aliyun/aliyun-oss-php-sdk/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/aliyun/aliyun-oss-php-sdk/raw/master/README-CN.md&#34;&gt;README of Chinese&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Alibaba Cloud Object Storage Service (OSS) is a cloud storage service provided by Alibaba Cloud, featuring a massive capacity, security, a low cost, and high reliability. You can upload and download data on any application anytime and anywhere by calling APIs, and perform simple management of data through the web console. The OSS can store any type of files and therefore applies to various websites, development enterprises and developers.&lt;/p&gt; &#xA;&lt;h2&gt;Run environment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 5.3+.&lt;/li&gt; &#xA; &lt;li&gt;cURL extension.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Ubuntu, you can use the &lt;em&gt;&lt;strong&gt;apt-get&lt;/strong&gt;&lt;/em&gt; package manager to install the &lt;em&gt;PHP cURL extension&lt;/em&gt;: &lt;code&gt;sudo apt-get install php5-curl&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install OSS PHP SDK&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use the &lt;em&gt;&lt;strong&gt;composer&lt;/strong&gt;&lt;/em&gt; to manage project dependencies, run the following command in your project&#39;s root directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  composer require aliyuncs/oss-sdk-php&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also declare the dependency on Alibaba Cloud OSS SDK for PHP in the &lt;code&gt;composer.json&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &#34;require&#34;: {&#xA;      &#34;aliyuncs/oss-sdk-php&#34;: &#34;~2.0&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then run &lt;code&gt;composer install&lt;/code&gt; to install the dependency. After the Composer Dependency Manager is installed, import the dependency in your PHP code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  require_once __DIR__ . &#39;/vendor/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also directly download the packaged &lt;a href=&#34;https://github.com/aliyun/aliyun-oss-php-sdk/releases&#34;&gt;PHAR File&lt;/a&gt;, and introduce the file to your code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  require_once &#39;/path/to/oss-sdk-php.phar&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the SDK source code, and introduce the &lt;code&gt;autoload.php&lt;/code&gt; file under the SDK directory to your code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  require_once &#39;/path/to/oss-sdk/autoload.php&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick use&lt;/h2&gt; &#xA;&lt;h3&gt;Common classes&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Class&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OSS\OssClient&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OSS client class. An OssClient instance can be used to call the interface.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OSS\Core\OssException&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OSS Exception class . You only need to pay attention to this exception when you use the OssClient.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Initialize an OssClient&lt;/h3&gt; &#xA;&lt;p&gt;The SDK&#39;s operations for the OSS are performed through the OssClient class. The code below creates an OssClient object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;$accessKeyId = &#34;&amp;lt;AccessKeyID that you obtain from OSS&amp;gt;&#34;;&#xA;$accessKeySecret = &#34;&amp;lt;AccessKeySecret that you obtain from OSS&amp;gt;&#34;;&#xA;$endpoint = &#34;&amp;lt;Domain that you select to access an OSS data center, such as &#34;oss-cn-hangzhou.aliyuncs.com&amp;gt;&#34;;&#xA;try {&#xA;    $ossClient = new OssClient($accessKeyId, $accessKeySecret, $endpoint);&#xA;} catch (OssException $e) {&#xA;    print $e-&amp;gt;getMessage();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Operations on objects&lt;/h3&gt; &#xA;&lt;p&gt;Objects are the most basic data units on the OSS. You can simply consider objects as files. The following code uploads an object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;$bucket= &#34;&amp;lt;Name of the bucket in use. Pay attention to naming conventions&amp;gt;&#34;;&#xA;$object = &#34;&amp;lt;Name of the object in use. Pay attention to naming conventions&amp;gt;&#34;;&#xA;$content = &#34;Hello, OSS!&#34;; // Content of the uploaded file&#xA;try {&#xA;    $ossClient-&amp;gt;putObject($bucket, $object, $content);&#xA;} catch (OssException $e) {&#xA;    print $e-&amp;gt;getMessage();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Operations on buckets&lt;/h3&gt; &#xA;&lt;p&gt;Buckets are the space that you use to manage the stored objects. It is an object management unit for users. Each object must belong to a bucket. You can create a bucket with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;$bucket= &#34;&amp;lt;Name of the bucket in use. Pay attention to naming conventions&amp;gt;&#34;;&#xA;try {&#xA;    $ossClient-&amp;gt;createBucket($bucket);&#xA;} catch (OssException $e) {&#xA;    print $e-&amp;gt;getMessage();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handle returned results&lt;/h3&gt; &#xA;&lt;p&gt;The OssClient provides the following two types of returned data from interfaces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Put and Delete interfaces: The &lt;em&gt;PUT&lt;/em&gt; and &lt;em&gt;DELETE&lt;/em&gt; operations are deemed successful if &lt;em&gt;null&lt;/em&gt; is returned by the interfaces without &lt;em&gt;OSSException&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get and List interfaces: The &lt;em&gt;GET&lt;/em&gt; and &lt;em&gt;LIST&lt;/em&gt; operations are deemed successful if the desired data is returned by the interfaces without &lt;em&gt;OSSException&lt;/em&gt;. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;$bucketListInfo = $ossClient-&amp;gt;listBuckets();&#xA;$bucketList = $bucketListInfo-&amp;gt;getBucketList();&#xA;foreach($bucketList as $bucket) {&#xA;    print($bucket-&amp;gt;getLocation() . &#34;\t&#34; . $bucket-&amp;gt;getName() . &#34;\t&#34; . $bucket-&amp;gt;getCreateDate() . &#34;\n&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the above code, $bucketListInfo falls into the &#39;OSS\Model\BucketListInfo&#39; data type.&lt;/p&gt; &#xA;&lt;h3&gt;Run a sample project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;samples/Config.php&lt;/code&gt; to complete the configuration information.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd samples/ &amp;amp;&amp;amp; php RunAll.php&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run a unit test&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;composer install&lt;/code&gt; to download the dependent libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the environment variable.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  export OSS_ACCESS_KEY_ID=access-key-id&#xA;  export OSS_ACCESS_KEY_SECRET=access-key-secret&#xA;  export OSS_ENDPOINT=endpoint&#xA;  export OSS_BUCKET=bucket-name&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;php vendor/bin/phpunit&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://oss.aliyun.com&#34;&gt;Alibaba Cloud OSS official website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bbs.aliyun.com&#34;&gt;Alibaba Cloud OSS official forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.aliyun.com/product/oss#Docs&#34;&gt;Alibaba Cloud OSS official documentation center&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alibaba Cloud official technical support: &lt;a href=&#34;https://workorder.console.aliyun.com/#/ticket/createIndex&#34;&gt;Submit a ticket&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>JakubOnderka/PHP-Console-Color</title>
    <updated>2023-08-22T01:37:10Z</updated>
    <id>tag:github.com,2023-08-22:/JakubOnderka/PHP-Console-Color</id>
    <link href="https://github.com/JakubOnderka/PHP-Console-Color" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple library for creating colored console ouput&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PHP Console Color&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This repository is abandoned.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suggested alternative: &lt;a href=&#34;https://github.com/php-parallel-lint/PHP-Console-Color&#34;&gt;https://github.com/php-parallel-lint/PHP-Console-Color&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/JakubOnderka/PHP-Console-Color&#34;&gt;&lt;img src=&#34;https://travis-ci.org/JakubOnderka/PHP-Console-Color.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple library for creating colored console ouput.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;example.php&lt;/code&gt; how to use this library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/89590/40762008-687f909a-646c-11e8-88d6-e268a064be4c.png&#34; alt=&#34;Example from Windows 10&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Part-DB/Part-DB-server</title>
    <updated>2023-08-22T01:37:10Z</updated>
    <id>tag:github.com,2023-08-22:/Part-DB/Part-DB-server</id>
    <link href="https://github.com/Part-DB/Part-DB-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Part-DB is an Open source inventory management system for your electronic components&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://scrutinizer-ci.com/g/Part-DB/Part-DB-symfony/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/Part-DB/Part-DB-symfony/badges/quality-score.png?b=master&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Part-DB/Part-DB-symfony/workflows/PHPUnit%20Tests/badge.svg?sanitize=true&#34; alt=&#34;PHPUnit Tests&#34;&gt; &lt;img src=&#34;https://github.com/Part-DB/Part-DB-symfony/workflows/Static%20analysis/badge.svg?sanitize=true&#34; alt=&#34;Static analysis&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/Part-DB/Part-DB-server&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Part-DB/Part-DB-symfony/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/Part-DB/Part-DB-symfony&#34; alt=&#34;GitHub License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PHP-%3E%3D%208.1-green&#34; alt=&#34;PHP Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/jbtronics/part-db1&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://github.com/Part-DB/Part-DB-symfony/workflows/Docker%20Image%20Build/badge.svg?sanitize=true&#34; alt=&#34;Docker Build Status&#34;&gt; &lt;a href=&#34;https://part-db.crowdin.com/part-db&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/e/8325196085d4bee8c04b75f7c915452a/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.part-db.de/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://part-db.herokuapp.com&#34;&gt;Demo&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://hub.docker.com/r/jbtronics/part-db1&#34;&gt;Docker Image&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Part-DB&lt;/h1&gt; &#xA;&lt;p&gt;Part-DB is an Open-Source inventory managment system for your electronic components. It is installed on a web server and so can be accessed with any browser without the need to install additional software.&lt;/p&gt; &#xA;&lt;p&gt;The version in this Repository is a complete rewrite of the legacy &lt;a href=&#34;https://github.com/Part-DB/Part-DB&#34;&gt;Part-DB&lt;/a&gt; (Version &amp;lt; 1.0) based on a modern framework. Currently, it is still missing some (minor) features from the old version (see &lt;a href=&#34;https://docs.part-db.de/upgrade_legacy.html&#34;&gt;UPGRADE.md&lt;/a&gt;) for more details, but also many huge improvements and advantages compared to the old version. If you start completely new with Part-DB it is recommended that you use the version from this repository, as it is actively developed.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug, please open an &lt;a href=&#34;https://github.com/Part-DB/Part-DB-server/issues&#34;&gt;Issue on Github&lt;/a&gt; so it can be fixed for everybody.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;If you want to test Part-DB without installing it, you can use &lt;a href=&#34;https://part-db.herokuapp.com&#34;&gt;this&lt;/a&gt; Heroku instance. (Or this link for the &lt;a href=&#34;https://part-db.herokuapp.com/de/&#34;&gt;German Version&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can log in with username: &lt;em&gt;user&lt;/em&gt; and password: &lt;em&gt;user&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every change to the master branch gets automatically deployed, so it represents the current development progress and is maybe not completely stable. Please mind, that the free Heroku instance is used, so it can take some time when loading the page for the first time.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/Part-DB/Part-DB-server/raw/master/docs/assets/readme/part_info.png&#34;&gt; &#xA;&lt;img src=&#34;https://github.com/Part-DB/Part-DB-server/raw/master/docs/assets/readme/parts_list.png&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inventory management of your electronic parts. Each part can be assigned to a category, footprint, manufacturer and multiple store locations and price information. Parts can be grouped using tags. You can associate various files like datasheets or pictures with the parts.&lt;/li&gt; &#xA; &lt;li&gt;Multi-Language support (currently German, English, Russian, Japanese and French (experimental))&lt;/li&gt; &#xA; &lt;li&gt;Barcodes/Labels generator for parts and storage locations, scan barcodes via webcam using the builtin barcode scanner&lt;/li&gt; &#xA; &lt;li&gt;User system with groups and detailed (fine granular) permissions. Two-factor authentication is supported (Google Authenticator and Webauthn/U2F keys) and can be enforced for groups. Password reset via email can be setuped.&lt;/li&gt; &#xA; &lt;li&gt;Optional support for single sign-on (SSO) via SAML (using an intermediate service like &lt;a href=&#34;https://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; you can connect Part-DB to an existing LDAP or Active Directory server)&lt;/li&gt; &#xA; &lt;li&gt;Import/Export system for parts and datastructure. BOM import for projects from KiCAD is supported.&lt;/li&gt; &#xA; &lt;li&gt;Project management: Create projects and assign parts to the bill of material (BOM), to show how often you could build this project and directly withdraw all components needed from DB&lt;/li&gt; &#xA; &lt;li&gt;Event log: Track what changes happens to your inventory, track which user does what. Revert your parts to older versions.&lt;/li&gt; &#xA; &lt;li&gt;Responsive design: You can use Part-DB on your PC, your tablet and your smartphone using the same interface.&lt;/li&gt; &#xA; &lt;li&gt;MySQL and SQLite supported as database backends&lt;/li&gt; &#xA; &lt;li&gt;Support for rich text descriptions and comments in parts&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple currencies and automatic update of exchange rates supported&lt;/li&gt; &#xA; &lt;li&gt;Powerful search and filter function, including parametric search (search for parts according to some specifications)&lt;/li&gt; &#xA; &lt;li&gt;Automatic thumbnail generation for pictures&lt;/li&gt; &#xA; &lt;li&gt;Use cloud providers (like Octopart, Digikey, farnell or TME) to automatically get part information, datasheets and prices for parts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With these features Part-DB is useful to hobbyists, who want to keep track of their private electronic parts inventory, or makerspaces, where many users have should have (controlled) access to the shared inventory.&lt;/p&gt; &#xA;&lt;p&gt;Part-DB is also used by small companies and universities for managing their inventory.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;strong&gt;web server&lt;/strong&gt; (like Apache2 or nginx) that is capable of running &lt;a href=&#34;https://symfony.com/doc/current/reference/requirements.html&#34;&gt;Symfony 5&lt;/a&gt;, this includes a minimum PHP version of &lt;strong&gt;PHP 8.1&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;MySQL&lt;/strong&gt; (at least 5.7) /&lt;strong&gt;MariaDB&lt;/strong&gt; (at least 10.2.2) database server if you do not want to use SQLite.&lt;/li&gt; &#xA; &lt;li&gt;Shell access to your server is highly suggested!&lt;/li&gt; &#xA; &lt;li&gt;For building the client side assets &lt;strong&gt;yarn&lt;/strong&gt; and &lt;strong&gt;nodejs&lt;/strong&gt; (&amp;gt;= 18.0) is needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to upgrade your legacy (&amp;lt; 1.0.0) version of Part-DB to this version, please read &lt;a href=&#34;https://docs.part-db.de/upgrade_legacy.html&#34;&gt;this&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; A docker image is available under &lt;a href=&#34;https://hub.docker.com/r/jbtronics/part-db1&#34;&gt;jbtronics/part-db1&lt;/a&gt;. How to set up Part-DB via docker is described &lt;a href=&#34;https://docs.part-db.de/installation/installation_docker.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Below you find some very rough outline of the installation process, see &lt;a href=&#34;https://docs.part-db.de/installation/&#34;&gt;here&lt;/a&gt; for a detailed guide how to install Part-DB.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy or clone this repository into a folder on your server.&lt;/li&gt; &#xA; &lt;li&gt;Configure your webserver to serve from the &lt;code&gt;public/&lt;/code&gt; folder. See &lt;a href=&#34;https://symfony.com/doc/current/setup/web_server_configuration.html&#34;&gt;here&lt;/a&gt; for additional information.&lt;/li&gt; &#xA; &lt;li&gt;Copy the global config file &lt;code&gt;cp .env .env.local&lt;/code&gt; and edit &lt;code&gt;.env.local&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change the line &lt;code&gt;APP_ENV=dev&lt;/code&gt; to &lt;code&gt;APP_ENV=prod&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you do not want to use SQLite, change the value of &lt;code&gt;DATABASE_URL=&lt;/code&gt; to your needs (see &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url&#34;&gt;here&lt;/a&gt;) for the format. In bigger instances with concurrent accesses, MySQL is more performant. This can not be changed easily later, so choose wisely.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install composer dependencies and generate autoload files: &lt;code&gt;composer install -o --no-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you have put Part-DB into a sub-directory on your server (like &lt;code&gt;part-db/&lt;/code&gt;), you have to edit the file &lt;code&gt;webpack.config.js&lt;/code&gt; and uncomment the lines (remove the &lt;code&gt;//&lt;/code&gt; before the lines) &lt;code&gt;.setPublicPath(&#39;/part-db/build&#39;)&lt;/code&gt; (line 43) and &lt;code&gt;.setManifestKeyPrefix(&#39;build/&#39;)&lt;/code&gt; (line 44). You have to replace &lt;code&gt;/part-db&lt;/code&gt; with your own path on line 44.&lt;/li&gt; &#xA; &lt;li&gt;Install client side dependencies and build it: &lt;code&gt;yarn install&lt;/code&gt; and &lt;code&gt;yarn build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optional&lt;/em&gt; (speeds up first load): Warmup cache: &lt;code&gt;php bin/console cache:warmup&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upgrade database to new scheme (or create it, when it was empty): &lt;code&gt;php bin/console doctrine:migrations:migrate&lt;/code&gt; and follow the instructions given. During the process the password for the admin is user is shown. Copy it. &lt;strong&gt;Caution&lt;/strong&gt;: This steps tamper with your database and could potentially destroy it. So make sure to make a backup of your database.&lt;/li&gt; &#xA; &lt;li&gt;You can configure Part-DB via &lt;code&gt;config/parameters.yaml&lt;/code&gt;. You should check if settings match your expectations, after you installed/upgraded Part-DB. Check if &lt;code&gt;partdb.default_currency&lt;/code&gt; matches your mainly used currency (this can not be changed after creating price informations). Run &lt;code&gt;php bin/console cache:clear&lt;/code&gt; when you changed something.&lt;/li&gt; &#xA; &lt;li&gt;Access Part-DB in your browser (under the URL you put it) and login with user &lt;em&gt;admin&lt;/em&gt;. Password is the one outputted during DB setup. If you can not remember the password, set a new one with &lt;code&gt;php bin/console app:set-password admin&lt;/code&gt;. You can create new users with the admin user and start using Part-DB.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you want to upgrade to a newer version, then just copy the new files into the folder and repeat the steps 4. to 7.&lt;/p&gt; &#xA;&lt;p&gt;Normally a random password is generated when the admin user is created during inital database creation, however you can set the inital admin password, by setting the &lt;code&gt;INITIAL_ADMIN_PW&lt;/code&gt; env var.&lt;/p&gt; &#xA;&lt;p&gt;You can configure Part-DB to your needs by changing environment variables in the &lt;code&gt;.env.local&lt;/code&gt; file. See &lt;a href=&#34;https://docs.part-db.de/configuration.html&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Reverse proxy&lt;/h3&gt; &#xA;&lt;p&gt;If you are using a reverse proxy, you have to ensure that the proxies sets the &lt;code&gt;X-Forwarded-*&lt;/code&gt; headers correctly, or you will get HTTP/HTTPS mixup and wrong hostnames. If the reverse proxy is on a different server (or it cannot access Part-DB via localhost) you have to set the &lt;code&gt;TRUSTED_PROXIES&lt;/code&gt; env variable to match your reverse proxies IP-address (or IP block). You can do this in your &lt;code&gt;.env.local&lt;/code&gt; or (when using docker) in your &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Donate for development&lt;/h2&gt; &#xA;&lt;p&gt;If you want to donate to the Part-DB developer, see the sponsor button in the top bar (next to the repo name). There you will find various methods to support development on a monthly or a one time base.&lt;/p&gt; &#xA;&lt;h2&gt;Built with&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symfony.com/&#34;&gt;Symfony 5&lt;/a&gt;: The main framework used for the serverside PHP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap 5&lt;/a&gt; and &lt;a href=&#34;https://bootswatch.com/&#34;&gt;Bootswatch&lt;/a&gt;: Used as website theme&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fontawesome.com/&#34;&gt;Fontawesome&lt;/a&gt;: Used as icon set&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stimulus.hotwired.dev/&#34;&gt;Hotwire Stimulus&lt;/a&gt; and &lt;a href=&#34;https://turbo.hotwired.dev/&#34;&gt;Hotwire Turbo&lt;/a&gt;: Frontend Javascript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jan Böhmer&lt;/strong&gt; - &lt;em&gt;Inital work&lt;/em&gt; - &lt;a href=&#34;https://github.com/jbtronics/&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/Part-DB/Part-DB-server/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;p&gt;Based on the original Part-DB by Christoph Lechner and K. Jacobs&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Part-DB is licensed under the GNU Affero General Public License v3.0 (or at your opinion any later). This mostly means that you can use Part-DB for whatever you want (even use it commercially) as long as you publish the source code for every change you make under the AGPL, too.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Part-DB/Part-DB-server/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>