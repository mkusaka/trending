<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:34:12Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BenSampo/laravel-enum</title>
    <updated>2022-08-17T01:34:12Z</updated>
    <id>tag:github.com,2022-08-17:/BenSampo/laravel-enum</id>
    <link href="https://github.com/BenSampo/laravel-enum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, extensible and powerful enumeration implementation for Laravel.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/BenSampo/laravel-enum/raw/master/branding/logo.svg?sanitize=true&#34; alt=&#34;Laravel Enum&#34; width=&#34;250&#34; style=&#34;margin-bottom: 20px&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/BenSampo/laravel-enum&#34;&gt;&lt;img src=&#34;https://travis-ci.org/BenSampo/laravel-enum.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/bensampo/laravel-enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/bensampo/laravel-enum.svg?style=flat-square&amp;amp;label=stable&#34; alt=&#34;Packagist Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/bensampo/laravel-enum&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/bensampo/laravel-enum.svg?style=flat-square&#34; alt=&#34;Packagist downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34; alt=&#34;MIT Software License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About Laravel Enum&lt;/h2&gt; &#xA;&lt;p&gt;Simple, extensible and powerful enumeration implementation for Laravel.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enum key value pairs as class constants&lt;/li&gt; &#xA; &lt;li&gt;Full-featured suite of methods&lt;/li&gt; &#xA; &lt;li&gt;Enum instantiation&lt;/li&gt; &#xA; &lt;li&gt;Flagged/Bitwise enums&lt;/li&gt; &#xA; &lt;li&gt;Type hinting&lt;/li&gt; &#xA; &lt;li&gt;Attribute casting&lt;/li&gt; &#xA; &lt;li&gt;Enum artisan generator&lt;/li&gt; &#xA; &lt;li&gt;Validation rules for passing enum key or values as input parameters&lt;/li&gt; &#xA; &lt;li&gt;Localization support&lt;/li&gt; &#xA; &lt;li&gt;Extendable via Macros&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://sampo.co.uk&#34;&gt;Ben Sampson&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Jump To&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#guide&#34;&gt;Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/enum-library.md&#34;&gt;Enum Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#basic-usage&#34;&gt;Basic Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#enum-definition&#34;&gt;Enum definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instantiation&#34;&gt;Instantiation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instance-properties&#34;&gt;Instance Properties&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instance-equality&#34;&gt;Instance Equality&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instance-equality&#34;&gt;Type Hinting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#flaggedbitwise-enum&#34;&gt;Flagged/Bitwise Enum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#attribute-casting&#34;&gt;Attribute Casting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#migrations&#34;&gt;Migrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#validation&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#localization&#34;&gt;Localization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#customizing-descriptions&#34;&gt;Customizing descriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#extending-the-enum-base-class&#34;&gt;Extending the Enum Base Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#laravel-nova-integration&#34;&gt;Laravel Nova Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#phpstan-integration&#34;&gt;PHPStan Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#artisan-command-list&#34;&gt;Artisan Command List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#enum-class-reference&#34;&gt;Enum Class Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#stubs&#34;&gt;Stubs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation for older versions&lt;/h2&gt; &#xA;&lt;p&gt;You are reading the documentation for &lt;code&gt;6.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using &lt;strong&gt;Laravel 8&lt;/strong&gt; please see the &lt;a href=&#34;https://github.com/BenSampo/laravel-enum/raw/v4.2.0/README.md&#34;&gt;docs for &lt;code&gt;4.x&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using &lt;strong&gt;Laravel 7&lt;/strong&gt; please see the &lt;a href=&#34;https://github.com/BenSampo/laravel-enum/raw/v2.2.0/README.md&#34;&gt;docs for &lt;code&gt;2.x&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using &lt;strong&gt;Laravel 6&lt;/strong&gt; or below, please see the &lt;a href=&#34;https://github.com/BenSampo/laravel-enum/raw/v1.38.0/README.md&#34;&gt;docs for &lt;code&gt;1.x&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/UPGRADE.md&#34;&gt;upgrade guide&lt;/a&gt; for information on how to upgrade to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Guide&lt;/h2&gt; &#xA;&lt;p&gt;I wrote a blog post about using laravel-enum: &lt;a href=&#34;https://sampo.co.uk/blog/using-enums-in-laravel&#34;&gt;https://sampo.co.uk/blog/using-enums-in-laravel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Laravel &lt;code&gt;9&lt;/code&gt; or higher&lt;/li&gt; &#xA; &lt;li&gt;PHP &lt;code&gt;8.0&lt;/code&gt; or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Via Composer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require bensampo/laravel-enum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enum Library&lt;/h2&gt; &#xA;&lt;p&gt;Browse and download from a list of commonly used, community contributed enums.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/enum-library.md&#34;&gt;Enum library →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Enum Definition&lt;/h3&gt; &#xA;&lt;p&gt;You can use the following Artisan command to generate a new enum class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;php artisan make:enum UserType&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you just need to add the possible values your enum can have as constants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php declare(strict_types=1);&#xA;&#xA;namespace App\Enums;&#xA;&#xA;use BenSampo\Enum\Enum;&#xA;&#xA;final class UserType extends Enum&#xA;{&#xA;    const Administrator = 0;&#xA;    const Moderator = 1;&#xA;    const Subscriber = 2;&#xA;    const SuperAdministrator = 3;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Note that because the enum values are defined as plain constants, you can simply access them like any other class constant.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::Administrator // Has a value of 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instantiation&lt;/h3&gt; &#xA;&lt;p&gt;It can be useful to instantiate enums in order to pass them between functions with the benefit of type hinting.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, it&#39;s impossible to instantiate an enum with an invalid value, therefore you can be certain that the passed value is always valid.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, enums can be instantiated in multiple ways:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Standard new PHP class, passing the desired enum value as a parameter&#xA;$enumInstance = new UserType(UserType::Administrator);&#xA;&#xA;// Same as the constructor, instantiate by value&#xA;$enumInstance = UserType::fromValue(UserType::Administrator);&#xA;&#xA;// Use an enum key instead of its value&#xA;$enumInstance = UserType::fromKey(&#39;Administrator&#39;);&#xA;&#xA;// Statically calling the key name as a method, utilizing __callStatic magic&#xA;$enumInstance = UserType::Administrator();&#xA;&#xA;// Attempt to instantiate a new Enum using the given key or value. Returns null if the Enum cannot be instantiated.&#xA;$enumInstance = UserType::coerce($someValue);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want your IDE to autocomplete the static instantiation helpers, you can generate PHPDoc annotations through an artisan command.&lt;/p&gt; &#xA;&lt;p&gt;By default all Enums in &lt;code&gt;app/Enums&lt;/code&gt; will be annotated (you can change the folder by passing a path to &lt;code&gt;--folder&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan enum:annotate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can annotate a single class by specifying the class name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan enum:annotate &#34;App\Enums\UserType&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instance Properties&lt;/h3&gt; &#xA;&lt;p&gt;Once you have an enum instance, you can access the &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; as properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$userType = UserType::fromValue(UserType::SuperAdministrator);&#xA;&#xA;$userType-&amp;gt;key; // SuperAdministrator&#xA;$userType-&amp;gt;value; // 0&#xA;$userType-&amp;gt;description; // Super Administrator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is particularly useful if you&#39;re passing an enum instance to a blade view.&lt;/p&gt; &#xA;&lt;h3&gt;Instance Casting&lt;/h3&gt; &#xA;&lt;p&gt;Enum instances can be cast to strings as they implement the &lt;code&gt;__toString()&lt;/code&gt; magic method.&lt;br&gt; This also means they can be echoed in blade views, for example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$userType = UserType::fromValue(UserType::SuperAdministrator);&#xA;&#xA;(string) $userType // &#39;0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instance Equality&lt;/h3&gt; &#xA;&lt;p&gt;You can check the equality of an instance against any value by passing it to the &lt;code&gt;is&lt;/code&gt; method. For convenience, there is also an &lt;code&gt;isNot&lt;/code&gt; method which is the exact reverse of the &lt;code&gt;is&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$admin = UserType::fromValue(UserType::Administrator);&#xA;&#xA;$admin-&amp;gt;is(UserType::Administrator);   // true&#xA;$admin-&amp;gt;is($admin);                    // true&#xA;$admin-&amp;gt;is(UserType::Administrator()); // true&#xA;&#xA;$admin-&amp;gt;is(UserType::Moderator);       // false&#xA;$admin-&amp;gt;is(UserType::Moderator());     // false&#xA;$admin-&amp;gt;is(&#39;random-value&#39;);            // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also check to see if the instance&#39;s value matches against an array of possible values using the &lt;code&gt;in&lt;/code&gt; method, and use &lt;code&gt;notIn&lt;/code&gt; to check if instance value is not in an array of values. Iterables can also be checked against.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$admin = UserType::fromValue(UserType::Administrator);&#xA;&#xA;$admin-&amp;gt;in([UserType::Moderator, UserType::Administrator]);     // true&#xA;$admin-&amp;gt;in([UserType::Moderator(), UserType::Administrator()]); // true&#xA;&#xA;$admin-&amp;gt;in([UserType::Moderator, UserType::Subscriber]);        // false&#xA;$admin-&amp;gt;in([&#39;random-value&#39;]);                                   // false&#xA;&#xA;$admin-&amp;gt;notIn([UserType::Moderator, UserType::Administrator]);     // false&#xA;$admin-&amp;gt;notIn([UserType::Moderator(), UserType::Administrator()]); // false&#xA;&#xA;$admin-&amp;gt;notIn([UserType::Moderator, UserType::Subscriber]);        // true&#xA;$admin-&amp;gt;notIn([&#39;random-value&#39;]);                                   // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type Hinting&lt;/h3&gt; &#xA;&lt;p&gt;One of the benefits of enum instances is that it enables you to use type hinting, as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function canPerformAction(UserType $userType)&#xA;{&#xA;    if ($userType-&amp;gt;is(UserType::SuperAdministrator)) {&#xA;        return true;&#xA;    }&#xA;&#xA;    return false;&#xA;}&#xA;&#xA;$userType1 = UserType::fromValue(UserType::SuperAdministrator);&#xA;$userType2 = UserType::fromValue(UserType::Moderator);&#xA;&#xA;canPerformAction($userType1); // Returns true&#xA;canPerformAction($userType2); // Returns false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flagged/Bitwise Enum&lt;/h2&gt; &#xA;&lt;p&gt;Standard enums represent a single value at a time, but flagged or bitwise enums are capable of of representing multiple values simultaneously. This makes them perfect for when you want to express multiple selections of a limited set of options. A good example of this would be user permissions where there are a limited number of possible permissions but a user can have none, some or all of them.&lt;/p&gt; &#xA;&lt;p&gt;You can create a flagged enum using the following artisan command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;php artisan make:enum UserPermissions --flagged&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Defining values&lt;/h3&gt; &#xA;&lt;p&gt;When defining values you must use powers of 2, the easiest way to do this is by using the &lt;em&gt;shift left&lt;/em&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class UserPermissions extends FlaggedEnum&#xA;{&#xA;    const ReadComments      = 1 &amp;lt;&amp;lt; 0;&#xA;    const WriteComments     = 1 &amp;lt;&amp;lt; 1;&#xA;    const EditComments      = 1 &amp;lt;&amp;lt; 2;&#xA;    const DeleteComments    = 1 &amp;lt;&amp;lt; 3;&#xA;    // The next one would be `1 &amp;lt;&amp;lt; 4` and so on...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;You can use the bitwise &lt;em&gt;or&lt;/em&gt; &lt;code&gt;|&lt;/code&gt; to set a shortcut value which represents a given set of values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class UserPermissions extends FlaggedEnum&#xA;{&#xA;    const ReadComments      = 1 &amp;lt;&amp;lt; 0;&#xA;    const WriteComments     = 1 &amp;lt;&amp;lt; 1;&#xA;    const EditComments      = 1 &amp;lt;&amp;lt; 2;&#xA;    const DeleteComments    = 1 &amp;lt;&amp;lt; 3;&#xA;&#xA;    // Shortcuts&#xA;    const Member = self::ReadComments | self::WriteComments; // Read and write.&#xA;    const Moderator = self::Member | self::EditComments; // All the permissions a Member has, plus Edit.&#xA;    const Admin = self::Moderator | self::DeleteComments; // All the permissions a Moderator has, plus Delete.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instantiating a flagged enum&lt;/h3&gt; &#xA;&lt;p&gt;There are couple of ways to instantiate a flagged enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Standard new PHP class, passing the desired enum values as an array of values or array of enum instances&#xA;$permissions = new UserPermissions([UserPermissions::ReadComments, UserPermissions::EditComments]);&#xA;$permissions = new UserPermissions([UserPermissions::ReadComments(), UserPermissions::EditComments()]);&#xA;&#xA;// Static flags method, again passing the desired enum values as an array of values or array of enum instances&#xA;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::EditComments]);&#xA;$permissions = UserPermissions::flags([UserPermissions::ReadComments(), UserPermissions::EditComments()]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#attribute-casting&#34;&gt;Attribute casting&lt;/a&gt; works in the same way as single value enums.&lt;/p&gt; &#xA;&lt;h3&gt;Empty flagged enums&lt;/h3&gt; &#xA;&lt;p&gt;Flagged enums can contain no value at all. Every flagged enum has a pre-defined constant of &lt;code&gt;None&lt;/code&gt; which is comparable to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserPermissions::flags([])-&amp;gt;value === UserPermissions::None; // True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flagged enum methods&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the standard enum methods, there are a suite of helpful methods available on flagged enums.&lt;/p&gt; &#xA;&lt;p&gt;Note: Anywhere where a static property is passed, you can also pass an enum instance.&lt;/p&gt; &#xA;&lt;h4&gt;setFlags(array $flags): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Set the flags for the enum to the given array of flags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments]);&#xA;$permissions-&amp;gt;flags([UserPermissions::EditComments, UserPermissions::DeleteComments]); // Flags are now: EditComments, DeleteComments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;addFlag($flag): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Add the given flag to the enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments]);&#xA;$permissions-&amp;gt;addFlag(UserPermissions::EditComments); // Flags are now: ReadComments, EditComments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;addFlags(array $flags): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Add the given flags to the enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments]);&#xA;$permissions-&amp;gt;addFlags([UserPermissions::EditComments, UserPermissions::WriteComments]); // Flags are now: ReadComments, EditComments, WriteComments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;addAllFlags(): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Add all flags to the enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments]);&#xA;$permissions-&amp;gt;addAllFlags(); // Enum now has all flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;removeFlag($flag): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Remove the given flag from the enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;removeFlag(UserPermissions::ReadComments); // Flags are now: WriteComments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;removeFlags(array $flags): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Remove the given flags from the enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments, UserPermissions::EditComments]);&#xA;$permissions-&amp;gt;removeFlags([UserPermissions::ReadComments, UserPermissions::WriteComments]); // Flags are now: EditComments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;removeAllFlags(): Enum&lt;/h4&gt; &#xA;&lt;p&gt;Remove all flags from the enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;removeAllFlags();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;hasFlag($flag): bool&lt;/h4&gt; &#xA;&lt;p&gt;Check if the enum has the specified flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;hasFlag(UserPermissions::ReadComments); // True&#xA;$permissions-&amp;gt;hasFlag(UserPermissions::EditComments); // False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;hasFlags(array $flags): bool&lt;/h4&gt; &#xA;&lt;p&gt;Check if the enum has all of the specified flags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;hasFlags([UserPermissions::ReadComments, UserPermissions::WriteComments]); // True&#xA;$permissions-&amp;gt;hasFlags([UserPermissions::ReadComments, UserPermissions::EditComments]); // False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;notHasFlag($flag): bool&lt;/h4&gt; &#xA;&lt;p&gt;Check if the enum does not have the specified flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;notHasFlag(UserPermissions::EditComments); // True&#xA;$permissions-&amp;gt;notHasFlag(UserPermissions::ReadComments); // False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;notHasFlags(array $flags): bool&lt;/h4&gt; &#xA;&lt;p&gt;Check if the enum doesn&#39;t have any of the specified flags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;notHasFlags([UserPermissions::ReadComments, UserPermissions::EditComments]); // True&#xA;$permissions-&amp;gt;notHasFlags([UserPermissions::ReadComments, UserPermissions::WriteComments]); // False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;getFlags(): Enum[]&lt;/h4&gt; &#xA;&lt;p&gt;Return the flags as an array of instances.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;getFlags(); // [UserPermissions::ReadComments(), UserPermissions::WriteComments()];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;hasMultipleFlags(): bool&lt;/h4&gt; &#xA;&lt;p&gt;Check if there are multiple flags set on the enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);&#xA;$permissions-&amp;gt;hasMultipleFlags(); // True;&#xA;$permissions-&amp;gt;removeFlag(UserPermissions::ReadComments)-&amp;gt;hasMultipleFlags(); // False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;getBitmask(): int&lt;/h4&gt; &#xA;&lt;p&gt;Get the bitmask for the enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserPermissions::Member()-&amp;gt;getBitmask(); // 11;&#xA;UserPermissions::Moderator()-&amp;gt;getBitmask(); // 111;&#xA;UserPermissions::Admin()-&amp;gt;getBitmask(); // 1111;&#xA;UserPermissions::DeleteComments()-&amp;gt;getBitmask(); // 1000;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flagged enums in Eloquent queries&lt;/h3&gt; &#xA;&lt;p&gt;To use flagged enums directly in your Eloquent queries, you may use the &lt;code&gt;QueriesFlaggedEnums&lt;/code&gt; trait on your model which provides you with the following methods:&lt;/p&gt; &#xA;&lt;h4&gt;hasFlag($column, $flag): Builder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::hasFlag(&#39;permissions&#39;, UserPermissions::DeleteComments())-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;notHasFlag($column, $flag): Builder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::notHasFlag(&#39;permissions&#39;, UserPermissions::DeleteComments())-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;hasAllFlags($column, $flags): Builder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::hasAllFlags(&#39;permissions&#39;, [UserPermissions::EditComment(), UserPermissions::ReadComment()])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;hasAnyFlags($column, $flags): Builder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::hasAnyFlags(&#39;permissions&#39;, [UserPermissions::DeleteComments(), UserPermissions::EditComments()])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Attribute Casting&lt;/h2&gt; &#xA;&lt;p&gt;You may cast model attributes to enums using Laravel&#39;s built in custom casting. This will cast the attribute to an enum instance when getting and back to the enum value when setting. Since &lt;code&gt;Enum::class&lt;/code&gt; implements the &lt;code&gt;Castable&lt;/code&gt; contract, you just need to specify the classname of the enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Tests\Enums\UserType;&#xA;use Illuminate\Database\Eloquent\Model;&#xA;&#xA;class Example extends Model&#xA;{&#xA;    protected $casts = [&#xA;        &#39;random_flag&#39; =&amp;gt; &#39;boolean&#39;,     // Example standard laravel cast&#xA;        &#39;user_type&#39; =&amp;gt; UserType::class, // Example enum cast&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, when you access the &lt;code&gt;user_type&lt;/code&gt; attribute of your &lt;code&gt;Example&lt;/code&gt; model, the underlying value will be returned as a &lt;code&gt;UserType&lt;/code&gt; enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$example = Example::first();&#xA;$example-&amp;gt;user_type // Instance of UserType&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review the &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instantiation&#34;&gt;methods and properties available on enum instances&lt;/a&gt; to get the most out of attribute casting.&lt;/p&gt; &#xA;&lt;p&gt;You can set the value by either passing the enum value or another enum instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$example = Example::first();&#xA;&#xA;// Set using enum value&#xA;$example-&amp;gt;user_type = UserType::Moderator;&#xA;&#xA;// Set using enum instance&#xA;$example-&amp;gt;user_type = UserType::Moderator();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customising &lt;code&gt;$model-&amp;gt;toArray()&lt;/code&gt; behaviour&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;toArray&lt;/code&gt; (or returning model/models from your controller as a response) Laravel will call the &lt;code&gt;toArray&lt;/code&gt; method on the enum instance.&lt;/p&gt; &#xA;&lt;p&gt;By default, this will return only the value in its native type. You may want to also have access to the other properties (key, description), for example to return to javascript app.&lt;/p&gt; &#xA;&lt;p&gt;To customise this behaviour, you can override the &lt;code&gt;toArray&lt;/code&gt; method on the enum instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Example Enum&#xA;final class UserType extends Enum&#xA;{&#xA;    const ADMINISTRATOR = 0;&#xA;    const MODERATOR = 1;&#xA;}&#xA;&#xA;$instance = UserType::Moderator();&#xA;&#xA;// Default&#xA;public function toArray()&#xA;{&#xA;    return $this-&amp;gt;value;&#xA;}&#xA;// Returns int(1)&#xA;&#xA;// Return all properties&#xA;public function toArray()&#xA;{&#xA;    return $this;&#xA;}&#xA;// Returns an array of all the properties&#xA;// array(3) {&#xA;//  [&#34;value&#34;]=&amp;gt;&#xA;//  int(1)&#34;&#xA;//  [&#34;key&#34;]=&amp;gt;&#xA;//  string(9) &#34;MODERATOR&#34;&#xA;//  [&#34;description&#34;]=&amp;gt;&#xA;//  string(9) &#34;Moderator&#34;&#xA;// }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Casting underlying native types&lt;/h3&gt; &#xA;&lt;p&gt;Many databases return everything as strings (for example, an integer may be returned as the string &lt;code&gt;&#39;1&#39;&lt;/code&gt;). To reduce friction for users of the library, we use type coercion to figure out the intended value. If you&#39;d prefer to control this, you can override the &lt;code&gt;parseDatabase&lt;/code&gt; static method on your enum class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;final class UserType extends Enum&#xA;{&#xA;    const Administrator = 0;&#xA;    const Moderator = 1;&#xA;&#xA;    public static function parseDatabase($value)&#xA;    {&#xA;        return (int) $value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returning &lt;code&gt;null&lt;/code&gt; from the &lt;code&gt;parseDatabase&lt;/code&gt; method will cause the attribute on the model to also be &lt;code&gt;null&lt;/code&gt;. This can be useful if your database stores inconsistent blank values such as empty strings instead of &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Model Annotation&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re casting attributes on your model to enums, the &lt;a href=&#34;https://github.com/barryvdh/laravel-ide-helper&#34;&gt;laravel-ide-helper&lt;/a&gt; package can be used to automatically generate property docblocks for you.&lt;/p&gt; &#xA;&lt;h2&gt;Migrations&lt;/h2&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;p&gt;Because enums enforce consistency at the code level it&#39;s not necessary to do so again at the database level, therefore the recommended type for database columns is &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; depending on your enum values. This means you can add/remove enum values in your code without worrying about your database layer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Enums\UserType;&#xA;use Illuminate\Support\Facades\Schema;&#xA;use Illuminate\Database\Schema\Blueprint;&#xA;use Illuminate\Database\Migrations\Migration;&#xA;&#xA;class CreateUsersTable extends Migration&#xA;{&#xA;    /**&#xA;     * Run the migrations.&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public function up(): void&#xA;    {&#xA;        Schema::table(&#39;users&#39;, function (Blueprint $table): void {&#xA;            $table-&amp;gt;bigIncrements(&#39;id&#39;);&#xA;            $table-&amp;gt;timestamps();&#xA;            $table-&amp;gt;string(&#39;type&#39;)&#xA;                -&amp;gt;default(UserType::Moderator);&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;enum&lt;/code&gt; column type&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively you may use &lt;code&gt;Enum&lt;/code&gt; classes in your migrations to define enum columns. The enum values must be defined as strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use App\Enums\UserType;&#xA;use Illuminate\Support\Facades\Schema;&#xA;use Illuminate\Database\Schema\Blueprint;&#xA;use Illuminate\Database\Migrations\Migration;&#xA;&#xA;class CreateUsersTable extends Migration&#xA;{&#xA;    /**&#xA;     * Run the migrations.&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public function up(): void&#xA;    {&#xA;        Schema::table(&#39;users&#39;, function (Blueprint $table): void {&#xA;            $table-&amp;gt;bigIncrements(&#39;id&#39;);&#xA;            $table-&amp;gt;timestamps();&#xA;            $table-&amp;gt;enum(&#39;type&#39;, UserType::getValues())&#xA;                -&amp;gt;default(UserType::Moderator);&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validation&lt;/h2&gt; &#xA;&lt;h3&gt;Array Validation&lt;/h3&gt; &#xA;&lt;h4&gt;Enum value&lt;/h4&gt; &#xA;&lt;p&gt;You may validate that an enum value passed to a controller is a valid value for a given enum by using the &lt;code&gt;EnumValue&lt;/code&gt; rule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Rules\EnumValue;&#xA;&#xA;public function store(Request $request)&#xA;{&#xA;    $this-&amp;gt;validate($request, [&#xA;        &#39;user_type&#39; =&amp;gt; [&#39;required&#39;, new EnumValue(UserType::class)],&#xA;    ]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, type checking is set to strict, but you can bypass this by passing &lt;code&gt;false&lt;/code&gt; to the optional second parameter of the EnumValue class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;new EnumValue(UserType::class, false) // Turn off strict type checking.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enum key&lt;/h4&gt; &#xA;&lt;p&gt;You can also validate on keys using the &lt;code&gt;EnumKey&lt;/code&gt; rule. This is useful if you&#39;re taking the enum key as a URL parameter for sorting or filtering for example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Rules\EnumKey;&#xA;&#xA;public function store(Request $request)&#xA;{&#xA;    $this-&amp;gt;validate($request, [&#xA;        &#39;user_type&#39; =&amp;gt; [&#39;required&#39;, new EnumKey(UserType::class)],&#xA;    ]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enum instance&lt;/h4&gt; &#xA;&lt;p&gt;Additionally you can validate that a parameter is an instance of a given enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Rules\Enum;&#xA;&#xA;public function store(Request $request)&#xA;{&#xA;    $this-&amp;gt;validate($request, [&#xA;        &#39;user_type&#39; =&amp;gt; [&#39;required&#39;, new Enum(UserType::class)],&#xA;    ]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pipe Validation&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the &#39;pipe&#39; syntax for rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;enum_value&lt;/strong&gt;&lt;em&gt;:enum_class,[strict]&lt;/em&gt;&lt;br&gt; &lt;strong&gt;enum_key&lt;/strong&gt;&lt;em&gt;:enum_class&lt;/em&gt;&lt;br&gt; &lt;strong&gt;enum&lt;/strong&gt;&lt;em&gt;:enum_class&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;user_type&#39; =&amp;gt; &#39;required|enum_value:&#39; . UserType::class,&#xA;&#39;user_type&#39; =&amp;gt; &#39;required|enum_key:&#39; . UserType::class,&#xA;&#39;user_type&#39; =&amp;gt; &#39;required|enum:&#39; . UserType::class,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;h3&gt;Validation messages&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to publish the language files to your &lt;code&gt;resources/lang&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan vendor:publish --provider=&#34;BenSampo\Enum\EnumServiceProvider&#34; --tag=&#34;translations&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enum descriptions&lt;/h3&gt; &#xA;&lt;p&gt;You can translate the strings returned by the &lt;code&gt;getDescription&lt;/code&gt; method using Laravel&#39;s built-in &lt;a href=&#34;https://laravel.com/docs/localization&#34;&gt;localization&lt;/a&gt; features.&lt;/p&gt; &#xA;&lt;p&gt;Add a new &lt;code&gt;enums.php&lt;/code&gt; keys file for each of your supported languages. In this example there is one for English and one for Spanish.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// resources/lang/en/enums.php&#xA;&amp;lt;?php declare(strict_types=1);&#xA;&#xA;use App\Enums\UserType;&#xA;&#xA;return [&#xA;&#xA;    UserType::class =&amp;gt; [&#xA;        UserType::Administrator =&amp;gt; &#39;Administrator&#39;,&#xA;        UserType::SuperAdministrator =&amp;gt; &#39;Super administrator&#39;,&#xA;    ],&#xA;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// resources/lang/es/enums.php&#xA;&amp;lt;?php declare(strict_types=1);&#xA;&#xA;use App\Enums\UserType;&#xA;&#xA;return [&#xA;&#xA;    UserType::class =&amp;gt; [&#xA;        UserType::Administrator =&amp;gt; &#39;Administrador&#39;,&#xA;        UserType::SuperAdministrator =&amp;gt; &#39;Súper administrador&#39;,&#xA;    ],&#xA;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you just need to make sure that your enum implements the &lt;code&gt;LocalizedEnum&lt;/code&gt; interface as demonstrated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Enum;&#xA;use BenSampo\Enum\Contracts\LocalizedEnum;&#xA;&#xA;final class UserType extends Enum implements LocalizedEnum&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;getDescription&lt;/code&gt; method will now look for the value in your localization files. If a value doesn&#39;t exist for a given key, the default description is returned instead.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing enum class description&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to return a custom description for your enum class, add a &lt;code&gt;Description&lt;/code&gt; attribute to your Enum class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Enum;&#xA;use BenSampo\Enum\Attributes\Description;&#xA;&#xA;#[Description(&#39;List of available User types&#39;)]&#xA;final class UserType extends Enum&#xA;{&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;UserType::getClassDescription()&lt;/code&gt; now returns &lt;code&gt;List of available User types&lt;/code&gt; instead of &lt;code&gt;User type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also override the &lt;code&gt;getClassDescription&lt;/code&gt; method on the base Enum class if you wish to have more control of the description.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing value descriptions&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to return a custom description for your enum values, add a &lt;code&gt;Description&lt;/code&gt; attribute to your Enum constants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use BenSampo\Enum\Enum;&#xA;use BenSampo\Enum\Attributes\Description;&#xA;&#xA;final class UserType extends Enum&#xA;{&#xA;    const Administrator = &#39;Administrator&#39;;&#xA;&#xA;    #[Description(&#39;Super admin&#39;)]&#xA;    const SuperAdministrator = &#39;SuperAdministrator&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;UserType::SuperAdministrator()-&amp;gt;description&lt;/code&gt; now returns &lt;code&gt;Super admin&lt;/code&gt; instead of &lt;code&gt;Super administrator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also override the &lt;code&gt;getDescription&lt;/code&gt; method on the base Enum class if you wish to have more control of the description.&lt;/p&gt; &#xA;&lt;h2&gt;Extending the Enum Base Class&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Enum&lt;/code&gt; base class implements the &lt;a href=&#34;https://laravel.com/api/9.x/Illuminate/Support/Traits/Macroable.html&#34;&gt;Laravel &lt;code&gt;Macroable&lt;/code&gt;&lt;/a&gt; trait, meaning it&#39;s easy to extend it with your own functions. If you have a function that you often add to each of your enums, you can use a macro.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say we want to be able to get a flipped version of the enum &lt;code&gt;asArray&lt;/code&gt; method, we can do this using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Enum::macro(&#39;asFlippedArray&#39;, function() {&#xA;    return array_flip(self::asArray());&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, on each of my enums, I can call it using &lt;code&gt;UserType::asFlippedArray()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s best to register the macro inside a service providers&#39; boot method.&lt;/p&gt; &#xA;&lt;h2&gt;Laravel Nova Integration&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/simplesquid/nova-enum-field&#34;&gt;nova-enum-field&lt;/a&gt; package by Simple Squid to easily create fields for your Enums in Nova. See their readme for usage.&lt;/p&gt; &#xA;&lt;h2&gt;PHPStan integration&lt;/h2&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/phpstan/phpstan&#34;&gt;PHPStan&lt;/a&gt; for static analysis, you can enable the extension for proper recognition of the magic instantiation methods.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your projects &lt;code&gt;phpstan.neon&lt;/code&gt; includes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-neon&#34;&gt;includes:&#xA;- vendor/bensampo/laravel-enum/extension.neon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Artisan Command List&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;php artisan make:enum&lt;/code&gt;&lt;br&gt; Create a new enum class. Pass &lt;code&gt;--flagged&lt;/code&gt; as an option to create a flagged enum.&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#enum-definition&#34;&gt;Find out more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;php artisan enum:annotate&lt;/code&gt;&lt;br&gt; Generate DocBlock annotations for enum classes.&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instantiation&#34;&gt;Find out more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Enum Class Reference&lt;/h2&gt; &#xA;&lt;h3&gt;static getKeys(mixed $values = null): array&lt;/h3&gt; &#xA;&lt;p&gt;Returns an array of all or a custom set of the keys for an enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getKeys(); // Returns [&#39;Administrator&#39;, &#39;Moderator&#39;, &#39;Subscriber&#39;, &#39;SuperAdministrator&#39;]&#xA;UserType::getKeys(UserType::Administrator); // Returns [&#39;Administrator&#39;]&#xA;UserType::getKeys(UserType::Administrator, UserType::Moderator); // Returns [&#39;Administrator&#39;, &#39;Moderator&#39;]&#xA;UserType::getKeys([UserType::Administrator, UserType::Moderator]); // Returns [&#39;Administrator&#39;, &#39;Moderator&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getValues(mixed $keys = null): array&lt;/h3&gt; &#xA;&lt;p&gt;Returns an array of all or a custom set of the values for an enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getValues(); // Returns [0, 1, 2, 3]&#xA;UserType::getValues(&#39;Administrator&#39;); // Returns [0]&#xA;UserType::getValues(&#39;Administrator&#39;, &#39;Moderator&#39;); // Returns [0, 1]&#xA;UserType::getValues([&#39;Administrator&#39;, &#39;Moderator&#39;]); // Returns [0, 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getKey(mixed $value): string&lt;/h3&gt; &#xA;&lt;p&gt;Returns the key for the given enum value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getKey(1); // Returns &#39;Moderator&#39;&#xA;UserType::getKey(UserType::Moderator); // Returns &#39;Moderator&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getValue(string $key): mixed&lt;/h3&gt; &#xA;&lt;p&gt;Returns the value for the given enum key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getValue(&#39;Moderator&#39;); // Returns 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static hasKey(string $key): bool&lt;/h3&gt; &#xA;&lt;p&gt;Check if the enum contains a given key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::hasKey(&#39;Moderator&#39;); // Returns &#39;True&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static hasValue(mixed $value, bool $strict = true): bool&lt;/h3&gt; &#xA;&lt;p&gt;Check if the enum contains a given value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::hasValue(1); // Returns &#39;True&#39;&#xA;&#xA;// It&#39;s possible to disable the strict type checking:&#xA;UserType::hasValue(&#39;1&#39;); // Returns &#39;False&#39;&#xA;UserType::hasValue(&#39;1&#39;, false); // Returns &#39;True&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getClassDescription(): string&lt;/h3&gt; &#xA;&lt;p&gt;Returns the class name in sentence case for the enum class. It&#39;s possible to &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#customizing-descriptions&#34;&gt;customize the description&lt;/a&gt; if the guessed description is not appropriate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getClassDescription(); // Returns &#39;User type&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getDescription(mixed $value): string&lt;/h3&gt; &#xA;&lt;p&gt;Returns the key in sentence case for the enum value. It&#39;s possible to &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#customizing-descriptions&#34;&gt;customize the description&lt;/a&gt; if the guessed description is not appropriate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getDescription(3); // Returns &#39;Super administrator&#39;&#xA;UserType::getDescription(UserType::SuperAdministrator); // Returns &#39;Super administrator&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getRandomKey(): string&lt;/h3&gt; &#xA;&lt;p&gt;Returns a random key from the enum. Useful for factories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getRandomKey(); // Returns &#39;Administrator&#39;, &#39;Moderator&#39;, &#39;Subscriber&#39; or &#39;SuperAdministrator&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getRandomValue(): mixed&lt;/h3&gt; &#xA;&lt;p&gt;Returns a random value from the enum. Useful for factories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getRandomValue(); // Returns 0, 1, 2 or 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getRandomInstance(): mixed&lt;/h3&gt; &#xA;&lt;p&gt;Returns a random instance of the enum. Useful for factories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::getRandomInstance(); // Returns an instance of UserType with a random value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static asArray(): array&lt;/h3&gt; &#xA;&lt;p&gt;Returns the enum key value pairs as an associative array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::asArray(); // Returns [&#39;Administrator&#39; =&amp;gt; 0, &#39;Moderator&#39; =&amp;gt; 1, &#39;Subscriber&#39; =&amp;gt; 2, &#39;SuperAdministrator&#39; =&amp;gt; 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static asSelectArray(): array&lt;/h3&gt; &#xA;&lt;p&gt;Returns the enum for use in a select as value =&amp;gt; description.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::asSelectArray(); // Returns [0 =&amp;gt; &#39;Administrator&#39;, 1 =&amp;gt; &#39;Moderator&#39;, 2 =&amp;gt; &#39;Subscriber&#39;, 3 =&amp;gt; &#39;Super administrator&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static fromValue(mixed $enumValue): Enum&lt;/h3&gt; &#xA;&lt;p&gt;Returns an instance of the called enum. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/BenSampo/laravel-enum/master/#instantiation&#34;&gt;enum instantiation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::fromValue(UserType::Administrator); // Returns instance of Enum with the value set to UserType::Administrator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static getInstances(): array&lt;/h3&gt; &#xA;&lt;p&gt;Returns an array of all possible instances of the called enum, keyed by the constant names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;var_dump(UserType::getInstances());&#xA;&#xA;array(4) {&#xA;  &#39;Administrator&#39; =&amp;gt;&#xA;  class BenSampo\Enum\Tests\Enums\UserType#415 (3) {&#xA;    public $key =&amp;gt;&#xA;    string(13) &#34;Administrator&#34;&#xA;    public $value =&amp;gt;&#xA;    int(0)&#xA;    public $description =&amp;gt;&#xA;    string(13) &#34;Administrator&#34;&#xA;  }&#xA;  &#39;Moderator&#39; =&amp;gt;&#xA;  class BenSampo\Enum\Tests\Enums\UserType#396 (3) {&#xA;    public $key =&amp;gt;&#xA;    string(9) &#34;Moderator&#34;&#xA;    public $value =&amp;gt;&#xA;    int(1)&#xA;    public $description =&amp;gt;&#xA;    string(9) &#34;Moderator&#34;&#xA;  }&#xA;  &#39;Subscriber&#39; =&amp;gt;&#xA;  class BenSampo\Enum\Tests\Enums\UserType#393 (3) {&#xA;    public $key =&amp;gt;&#xA;    string(10) &#34;Subscriber&#34;&#xA;    public $value =&amp;gt;&#xA;    int(2)&#xA;    public $description =&amp;gt;&#xA;    string(10) &#34;Subscriber&#34;&#xA;  }&#xA;  &#39;SuperAdministrator&#39; =&amp;gt;&#xA;  class BenSampo\Enum\Tests\Enums\UserType#102 (3) {&#xA;    public $key =&amp;gt;&#xA;    string(18) &#34;SuperAdministrator&#34;&#xA;    public $value =&amp;gt;&#xA;    int(3)&#xA;    public $description =&amp;gt;&#xA;    string(19) &#34;Super administrator&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;static coerce(mixed $enumKeyOrValue): ?Enum&lt;/h3&gt; &#xA;&lt;p&gt;Attempt to instantiate a new Enum using the given key or value. Returns null if the Enum cannot be instantiated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;UserType::coerce(0); // Returns instance of UserType with the value set to UserType::Administrator&#xA;UserType::coerce(&#39;Administrator&#39;); // Returns instance of UserType with the value set to UserType::Administrator&#xA;UserType::coerce(99); // Returns null (not a valid enum value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stubs&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to publish the stub files to the &lt;code&gt;stubs&lt;/code&gt; folder in the root of your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;php artisan vendor:publish --provider=&#34;BenSampo\Enum\EnumServiceProvider&#34; --tag=&#34;stubs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>owen0o0/WebStack</title>
    <updated>2022-08-17T01:34:12Z</updated>
    <id>tag:github.com,2022-08-17:/owen0o0/WebStack</id>
    <link href="https://github.com/owen0o0/WebStack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WordPress 版 WebStack 导航主题 https://nav.iowen.cn&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebStack&lt;/h1&gt; &#xA;&lt;p&gt;WordPress 版 WebStack 主题。&lt;a href=&#34;http://webstack.iotheme.cn/&#34;&gt;前往演示站&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;首页截图&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/01.png&#34; alt=&#34;Thumbnail_index&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;环境要求&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WordPress 4.4+&lt;/li&gt; &#xA; &lt;li&gt;WordPress 伪静态&lt;/li&gt; &#xA; &lt;li&gt;PHP 5.7+ 7.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;安装指南&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装 WordPress ，教程百度&lt;/li&gt; &#xA; &lt;li&gt;设置伪静态（下方规则按自己服务器环境二选一）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Nginx规则&#xA;location /&#xA;{&#xA;    try_files $uri $uri/ /index.php?$args;&#xA;}&#xA;rewrite /wp-admin$ $scheme://$host$uri/ permanent;&#xA;&#xA;# Apache 规则&#xA;&amp;lt;IfModule mod_rewrite.c&amp;gt;&#xA;RewriteEngine On&#xA;RewriteBase /&#xA;RewriteRule ^index\.php$ - [L]&#xA;RewriteCond %{REQUEST_FILENAME} !-f&#xA;RewriteCond %{REQUEST_FILENAME} !-d&#xA;RewriteRule . /index.php [L]&#xA;&amp;lt;/IfModule&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WordPress 后台「主题」栏目 -&amp;gt; 上传主题 -&amp;gt; 启用主题，或者在 /wp-content/themes 文件夹新建webstack文件夹，并上传所有文件&lt;/li&gt; &#xA; &lt;li&gt;果然点击地址出现404，请到WordPress 后台「设置」栏目 -&amp;gt; 固定链接 -&amp;gt; 保存更改&lt;/li&gt; &#xA; &lt;li&gt;反馈交♂流：&lt;a href=&#34;https://www.iowen.cn&#34; target=&#34;_blank&#34;&gt;一为忆&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;主题使用&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在 WordPress 后台“网址”文章类型下添加内容&lt;/li&gt; &#xA; &lt;li&gt;分类最多两级，且父级不要添加内容&lt;/li&gt; &#xA; &lt;li&gt;可以不添加网址图片，主题会自动获取目标网址的 favicon 图标&lt;/li&gt; &#xA; &lt;li&gt;导航菜单栏标题前面的图标请在分类图像描述中填入（参考下图），图标样式请参考fontawesome &lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/02.png&#34; alt=&#34;Thumbnail_index&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;增加分类快速添加图标的方法 &lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/07.png&#34; alt=&#34;Thumbnail_index&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;导航菜单栏下方可以添加自定义菜单，在后台的外观--&amp;gt;菜单里设置，在菜单的css类添加图标（参考下图），图标样式请参考fontawesome &lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/03.png&#34; alt=&#34;Thumbnail_index&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果菜单里没有css类，请按下图添加 &lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/04.jpg&#34; alt=&#34;Thumbnail_index&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iotheme.cn/store/onenav.html&#34; target=&#34;_blank&#34;&gt;如果你有更多功能需求，点我-&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;后台截图&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/05.jpg&#34; alt=&#34;Thumbnail_index&#34;&gt; &lt;img src=&#34;https://owen0o0.github.io/ioStaticResources/webstack/06.png&#34; alt=&#34;Thumbnail_index&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/WebStackPage/WebStackPage.github.io&#34; target=&#34;_blank&#34;&gt;Viggo&lt;/a&gt; 的前台设计 &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;更新&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/owen0o0/WebStack/releases&#34; target=&#34;_blank&#34;&gt;更新日志&lt;/a&gt; 更新方法为替换源文件，或者在wordpress后台删除主题，然后重新安装主题&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fruitcake/laravel-cors</title>
    <updated>2022-08-17T01:34:12Z</updated>
    <id>tag:github.com,2022-08-17:/fruitcake/laravel-cors</id>
    <link href="https://github.com/fruitcake/laravel-cors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adds CORS (Cross-Origin Resource Sharing) headers support in your Laravel application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CORS Middleware for Laravel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fruitcake/laravel-cors/actions&#34;&gt;&lt;img src=&#34;https://github.com/fruitcake/laravel-cors/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/fruitcake/laravel-cors&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/fruitcake/laravel-cors/version.png&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/fruitcake/laravel-cors/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/fruitcake/laravel-cors&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/fruitcake/laravel-cors.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fruitcake.nl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20By-Fruitcake-b2bc35.svg?sanitize=true&#34; alt=&#34;Fruitcake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://github.com/fruitcake/php-cors&#34;&gt;https://github.com/fruitcake/php-cors&lt;/a&gt; for Laravel&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Since Laravel 9.2, this Middleware is included in laravel/framework. You can use the provided middleware, which should be compatible with the Middleware and config provided in this package. See &lt;a href=&#34;https://github.com/laravel/laravel/pull/5825/files&#34;&gt;https://github.com/laravel/laravel/pull/5825/files&lt;/a&gt; for the changes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;laravel-cors&lt;/code&gt; package allows you to send &lt;a href=&#34;http://enable-cors.org/&#34;&gt;Cross-Origin Resource Sharing&lt;/a&gt; headers with Laravel middleware configuration.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a global overview of CORS workflow, you can browse this &lt;a href=&#34;http://www.html5rocks.com/static/images/cors_server_flowchart.png&#34;&gt;image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading from 0.x (barryvdh/laravel-cors)&lt;/h2&gt; &#xA;&lt;p&gt;When upgrading from 0.x versions, there are some breaking changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A new &#39;paths&#39; property is used to enable/disable CORS on certain routes. This is empty by default, so fill it correctly!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Group middleware is no longer supported, use the global middleware&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;The vendor name has changed (see installation/usage)&lt;/li&gt; &#xA; &lt;li&gt;The casing on the props in &lt;code&gt;cors.php&lt;/code&gt; has changed from camelCase to snake_case, so if you already have a &lt;code&gt;cors.php&lt;/code&gt; file you will need to update the props in there to match the new casing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handles CORS pre-flight OPTIONS requests&lt;/li&gt; &#xA; &lt;li&gt;Adds CORS headers to your responses&lt;/li&gt; &#xA; &lt;li&gt;Match routes to only add CORS to certain Requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Require the &lt;code&gt;fruitcake/laravel-cors&lt;/code&gt; package in your &lt;code&gt;composer.json&lt;/code&gt; and update your dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require fruitcake/laravel-cors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get a conflict, this could be because an older version of barryvdh/laravel-cors or fruitcake/laravel-cors is installed. Remove the conflicting package first, then try install again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer remove barryvdh/laravel-cors fruitcake/laravel-cors&#xA;composer require fruitcake/laravel-cors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global usage&lt;/h2&gt; &#xA;&lt;p&gt;To allow CORS for all your routes, add the &lt;code&gt;HandleCors&lt;/code&gt; middleware at the top of the &lt;code&gt;$middleware&lt;/code&gt; property of &lt;code&gt;app/Http/Kernel.php&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $middleware = [&#xA;  \Fruitcake\Cors\HandleCors::class,&#xA;    // ...&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now update the config to define the paths you want to run the CORS service on, (see Configuration below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;paths&#39; =&amp;gt; [&#39;api/*&#39;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The defaults are set in &lt;code&gt;config/cors.php&lt;/code&gt;. Publish the config to copy the file to your own config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;php artisan vendor:publish --tag=&#34;cors&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using custom headers, like &lt;code&gt;X-Auth-Token&lt;/code&gt; or &lt;code&gt;X-Requested-With&lt;/code&gt;, you must set the &lt;code&gt;allowed_headers&lt;/code&gt; to include those headers. You can also set it to &lt;code&gt;[&#39;*&#39;]&lt;/code&gt; to allow all custom headers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are explicitly whitelisting headers, you must include &lt;code&gt;Origin&lt;/code&gt; or requests will fail to be recognized as CORS.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paths&lt;/td&gt; &#xA;   &lt;td&gt;You can enable CORS for 1 or multiple paths, eg. &lt;code&gt;[&#39;api/*&#39;] &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;allowed_origins&lt;/td&gt; &#xA;   &lt;td&gt;Matches the request origin. Wildcards can be used, eg. &lt;code&gt;*.mydomain.com&lt;/code&gt; or &lt;code&gt;mydomain.com:*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#39;*&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;allowed_origins_patterns&lt;/td&gt; &#xA;   &lt;td&gt;Matches the request origin with &lt;code&gt;preg_match&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;allowed_methods&lt;/td&gt; &#xA;   &lt;td&gt;Matches the request method.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#39;*&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;allowed_headers&lt;/td&gt; &#xA;   &lt;td&gt;Sets the Access-Control-Allow-Headers response header.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#39;*&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exposed_headers&lt;/td&gt; &#xA;   &lt;td&gt;Sets the Access-Control-Expose-Headers response header.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max_age&lt;/td&gt; &#xA;   &lt;td&gt;Sets the Access-Control-Max-Age response header.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;supports_credentials&lt;/td&gt; &#xA;   &lt;td&gt;Sets the Access-Control-Allow-Credentials header.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;allowed_origins&lt;/code&gt;, &lt;code&gt;allowed_headers&lt;/code&gt; and &lt;code&gt;allowed_methods&lt;/code&gt; can be set to &lt;code&gt;[&#39;*&#39;]&lt;/code&gt; to accept any value.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For &lt;code&gt;allowed_origins&lt;/code&gt; you must include the scheme when not using a wildcard, eg. &lt;code&gt;[&#39;http://example.com&#39;, &#39;https://example.com&#39;]&lt;/code&gt;. You must also take into account that the scheme will be present when using &lt;code&gt;allowed_origins_patterns&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Try to be a specific as possible. You can start developing with loose constraints, but it&#39;s better to be as strict as possible!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Because of &lt;a href=&#34;http://symfony.com/doc/current/reference/configuration/framework.html#http-method-override&#34;&gt;http method overriding&lt;/a&gt; in Laravel, allowing POST methods will also enable the API users to perform PUT and DELETE requests as well.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sometimes it&#39;s necessary to specify the port &lt;em&gt;(when you&#39;re coding your app in a local environment for example)&lt;/em&gt;. You can specify the port or using a wildcard here too, eg. &lt;code&gt;localhost:3000&lt;/code&gt;, &lt;code&gt;localhost:*&lt;/code&gt; or even using a FQDN &lt;code&gt;app.mydomain.com:8080&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Lumen&lt;/h3&gt; &#xA;&lt;p&gt;On Lumen, just register the ServiceProvider manually in your &lt;code&gt;bootstrap/app.php&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$app-&amp;gt;register(Fruitcake\Cors\CorsServiceProvider::class);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also copy the &lt;a href=&#34;https://github.com/fruitcake/laravel-cors/raw/master/config/cors.php&#34;&gt;cors.php&lt;/a&gt; config file to &lt;code&gt;config/cors.php&lt;/code&gt; and put it into action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$app-&amp;gt;configure(&#39;cors&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global usage for Lumen&lt;/h2&gt; &#xA;&lt;p&gt;To allow CORS for all your routes, add the &lt;code&gt;HandleCors&lt;/code&gt; middleware to the global middleware and set the &lt;code&gt;paths&lt;/code&gt; property in the config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$app-&amp;gt;middleware([&#xA;    // ...&#xA;    Fruitcake\Cors\HandleCors::class,&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common problems&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong config&lt;/h3&gt; &#xA;&lt;p&gt;Make sure the &lt;code&gt;path&lt;/code&gt; option in the config is correct and actually matches the route you are using. Remember to clear the config cache as well.&lt;/p&gt; &#xA;&lt;h3&gt;Error handling, Middleware order&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes errors/middleware that return own responses can prevent the CORS Middleware from being run. Try changing the order of the Middleware and make sure it&#39;s the first entry in the global middleware, not a route group. Also check your logs for actual errors, because without CORS, the errors will be swallowed by the browser, only showing CORS errors. Also try running it without CORS to make sure it actually works.&lt;/p&gt; &#xA;&lt;h3&gt;Authorization headers / Credentials&lt;/h3&gt; &#xA;&lt;p&gt;If your Request includes an Authorization header or uses Credentials mode, set the &lt;code&gt;supports_credentials&lt;/code&gt; value in the config to true. This will set the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials&#34;&gt;Access-Control-Allow-Credentials&lt;/a&gt; Header to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Echo/die&lt;/h3&gt; &#xA;&lt;p&gt;If you &lt;code&gt;echo()&lt;/code&gt;, &lt;code&gt;dd()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, &lt;code&gt;exit()&lt;/code&gt;, &lt;code&gt;dump()&lt;/code&gt; etc in your code, you will break the Middleware flow. When output is sent before headers, CORS cannot be added. When the scripts exits before the CORS middleware finished, CORS headers will not be added. Always return a proper response or throw an Exception.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling CSRF protection for your API&lt;/h3&gt; &#xA;&lt;p&gt;If possible, use a route group with CSRF protection disabled. Otherwise you can disable CSRF for certain requests in &lt;code&gt;App\Http\Middleware\VerifyCsrfToken&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $except = [&#xA;    &#39;api/*&#39;,&#xA;    &#39;sub.domain.zone&#39; =&amp;gt; [&#xA;      &#39;prefix/*&#39;&#xA;    ],&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Duplicate headers&lt;/h3&gt; &#xA;&lt;p&gt;The CORS Middleware should be the only place you add these headers. If you also add headers in .htaccess, nginx or your index.php file, you will get duplicate headers and unexpected results.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the MIT License, see &lt;a href=&#34;https://raw.githubusercontent.com/fruitcake/laravel-cors/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>