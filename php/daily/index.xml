<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-06T01:37:45Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gherkins/regexpbuilderphp</title>
    <updated>2023-12-06T01:37:45Z</updated>
    <id>tag:github.com,2023-12-06:/gherkins/regexpbuilderphp</id>
    <link href="https://github.com/gherkins/regexpbuilderphp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶â human-readable regular expressions&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt; ____            _____            ____        _ _     _           ____  _   _ ____  &#xA;|  _ \ ___  __ _| ____|_  ___ __ | __ ) _   _(_) | __| | ___ _ __|  _ \| | | |  _ \ &#xA;| |_) / _ \/ _` |  _| \ \/ / &#39;_ \|  _ \| | | | | |/ _` |/ _ \ &#39;__| |_) | |_| | |_) |&#xA;|  _ &amp;lt;  __/ (_| | |___ &amp;gt;  &amp;lt;| |_) | |_) | |_| | | | (_| |  __/ |  |  __/|  _  |  __/ &#xA;|_| \_\___|\__, |_____/_/\_\ .__/|____/ \__,_|_|_|\__,_|\___|_|  |_|   |_| |_|_|    &#xA;           |___/           |_|                                                      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;human-readable regular expressions for PHP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gherkins/regexpbuilderphp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/gherkins/regexpbuilderphp.svg?style=flat-square&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/php-%5E8.0-blue?style=flat-square&#34; alt=&#34;release&#34;&gt; &lt;a href=&#34;https://github.com/gherkins/regexpbuilderphp/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/gherkins/regexpbuilderphp/main.yml?style=flat-square&amp;amp;color=lightgreen&#34; alt=&#34;phpunit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gherkins/regexpbuilderphp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/coverage-100%25-lightgreen?style=flat-square&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/much-wow-lightgreen?style=flat-square&#34; alt=&#34;release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP port of &lt;code&gt;regexpbuilderjs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;RegExpBuilder integrates regular expressions into the programming language, thereby making them easy to read and maintain. Regular Expressions are created by using chained methods and variables such as arrays or strings.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer req gherkins/regexpbuilderphp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download &lt;a href=&#34;https://github.com/gherkins/regexpbuilderphp/releases/latest&#34;&gt;the appropriate release&lt;/a&gt; and require &lt;code&gt;RegExpBuilder.php&lt;/code&gt; and &lt;code&gt;RegExp.php&lt;/code&gt; from &lt;code&gt;/src&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gherkins/regexpbuilderphp/wiki&#34;&gt;https://github.com/gherkins/regexpbuilderphp/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Gherkins\RegExpBuilderPHP;&#xA;$builder = new RegExpBuilder();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$regExp = $builder&#xA;    -&amp;gt;startOfInput()&#xA;    -&amp;gt;exactly(4)-&amp;gt;digits()&#xA;    -&amp;gt;then(&#34;_&#34;)&#xA;    -&amp;gt;exactly(2)-&amp;gt;digits()&#xA;    -&amp;gt;then(&#34;_&#34;)&#xA;    -&amp;gt;min(3)-&amp;gt;max(10)-&amp;gt;letters()&#xA;    -&amp;gt;then(&#34;.&#34;)&#xA;    -&amp;gt;anyOf(array(&#34;png&#34;, &#34;jpg&#34;, &#34;gif&#34;))&#xA;    -&amp;gt;endOfInput()&#xA;    -&amp;gt;getRegExp();&#xA;&#xA;//true&#xA;$regExp-&amp;gt;matches(&#34;2020_10_hund.jpg&#34;);&#xA;$regExp-&amp;gt;matches(&#34;2030_11_katze.png&#34;);&#xA;$regExp-&amp;gt;matches(&#34;4000_99_maus.gif&#34;);&#xA;&#xA;//false&#xA;$regExp-&amp;gt;matches(&#34;123_00_nein.gif&#34;);&#xA;$regExp-&amp;gt;matches(&#34;4000_0_nein.pdf&#34;);&#xA;$regExp-&amp;gt;matches(&#34;201505_nein.jpg&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$regExp = $builder&#xA;    -&amp;gt;multiLine()&#xA;    -&amp;gt;globalMatch()&#xA;    -&amp;gt;min(1)-&amp;gt;max(10)-&amp;gt;anythingBut(&#34; &#34;)&#xA;    -&amp;gt;anyOf(array(&#34;.pdf&#34;, &#34;.doc&#34;))&#xA;    -&amp;gt;getRegExp();&#xA;&#xA;$text = &#39;Lorem ipsum dolor sit amet, consetetur sadipscing elitr,&#xA;sed diam nonumy SomeFile.pdf eirmod tempor invidunt ut labore et dolore&#xA;magna aliquyam erat, sed diam voluptua. At vero eos et accusam&#xA;et justo duo dolores et ea rebum. doc_04.pdf Stet clita kasd File.doc.&#39;&#xA;&#xA;$matches = $regExp-&amp;gt;findIn($text);&#xA;&#xA;//true&#xA;($matches[0] === &#34;SomeFile.pdf&#34;);&#xA;($matches[1] === &#34;doc_04.pdf&#34;);&#xA;($matches[2] === &#34;File.doc&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Replace&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$regExp = $builder&#xA;    -&amp;gt;min(1)&#xA;    -&amp;gt;max(10)&#xA;    -&amp;gt;digits()&#xA;    -&amp;gt;getRegExp();&#xA;&#xA;$text = &#34;98 bottles of beer on the wall&#34;;&#xA;&#xA;$text = $regExp-&amp;gt;replace(&#xA;    $text,&#xA;    function ($match) {&#xA;        return (int)$match + 1;&#xA;    }&#xA;);&#xA;&#xA;//true&#xA;(&#34;99 bottles of beer on the wall&#34; === $text);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validation with multiple patterns&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = $builder&#xA;    -&amp;gt;startOfInput()&#xA;    -&amp;gt;exactly(3)-&amp;gt;digits()&#xA;    -&amp;gt;anyOf(array(&#34;.pdf&#34;, &#34;.doc&#34;))&#xA;    -&amp;gt;endOfInput();&#xA;&#xA;$b = $builder&#xA;    -&amp;gt;getNew()&#xA;    -&amp;gt;startOfInput()&#xA;    -&amp;gt;exactly(4)-&amp;gt;letters()&#xA;    -&amp;gt;then(&#34;.jpg&#34;)&#xA;    -&amp;gt;endOfInput();&#xA;&#xA;$regExp = $builder&#xA;    -&amp;gt;getNew()&#xA;    -&amp;gt;eitherFind($a)&#xA;    -&amp;gt;orFind($b)&#xA;    -&amp;gt;getRegExp();&#xA;&#xA;//true&#xA;$regExp-&amp;gt;matches(&#34;123.pdf&#34;);&#xA;$regExp-&amp;gt;matches(&#34;456.doc&#34;);&#xA;$regExp-&amp;gt;matches(&#34;bbbb.jpg&#34;);&#xA;$regExp-&amp;gt;matches(&#34;aaaa.jpg&#34;);&#xA;&#xA;//false&#xA;$regExp-&amp;gt;matches(&#34;1234.pdf&#34;);&#xA;$regExp-&amp;gt;matches(&#34;123.gif&#34;);&#xA;$regExp-&amp;gt;matches(&#34;aaaaa.jpg&#34;);&#xA;$regExp-&amp;gt;matches(&#34;456.docx&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/gherkins/regexpbuilderphp/main/tests/RegExpBuilderTest.php&#34;&gt;tests&lt;/a&gt; for more examples&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>larastan/larastan</title>
    <updated>2023-12-06T01:37:45Z</updated>
    <id>tag:github.com,2023-12-06:/larastan/larastan</id>
    <link href="https://github.com/larastan/larastan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öóÔ∏è Adds code analysis to Laravel improving developer productivity and code quality.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/larastan/larastan/master/docs/logo.png&#34; alt=&#34;Larastan Logo&#34; width=&#34;300&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/larastan/larastan/master/docs/example.png&#34; alt=&#34;Larastan Example&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/larastan/larastan/actions&#34;&gt;&lt;img src=&#34;https://github.com/larastan/larastan/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/nunomaduro/larastan/stats&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/larastan/larastan/d/total.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/larastan/larastan&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/larastan/larastan/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/larastan/larastan/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/larastan/larastan/license.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚öóÔ∏è About Larastan&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using a Laravel version older than 9.x, please refer to &lt;a href=&#34;https://github.com/larastan/larastan/tree/1.x&#34;&gt;Larastan v1.x&lt;/a&gt; with &lt;a href=&#34;https://github.com/larastan/larastan/pull/1431#issuecomment-1303332293&#34;&gt;PHPStan 1.8.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Larastan was created by &lt;a href=&#34;https://github.com/canvural&#34;&gt;Can Vural&lt;/a&gt; and &lt;a href=&#34;https://github.com/nunomaduro&#34;&gt;Nuno Maduro&lt;/a&gt;, got artwork designed by &lt;a href=&#34;http://github.com/caneco&#34;&gt;@Caneco&lt;/a&gt;, is maintained by &lt;a href=&#34;https://github.com/canvural&#34;&gt;Can Vural&lt;/a&gt;, &lt;a href=&#34;https://github.com/nunomaduro&#34;&gt;Nuno Maduro&lt;/a&gt;, and &lt;a href=&#34;https://github.com/szepeviktor&#34;&gt;Viktor Sz√©pe&lt;/a&gt;, and is a &lt;a href=&#34;https://phpstan.org/&#34;&gt;PHPStan&lt;/a&gt; wrapper for Laravel. Larastan focuses on &lt;strong&gt;finding errors in your code&lt;/strong&gt;. It catches whole classes of bugs even &lt;strong&gt;before you write tests&lt;/strong&gt; for the code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds static typing to Laravel to improve developer productivity and &lt;strong&gt;code quality&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports most of &lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt;&#39;s &lt;strong&gt;beautiful magic&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discovers bugs in your code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;While by definition, &#34;static analysis&#34; doesn&#39;t load any of your application&#39;s code. Larastan boots your application&#39;s container, so it can resolve types that are only possible to compute at runtime. That&#39;s why we use the term &#34;code analysis&#34; instead of &#34;static analysis&#34;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ú® Getting Started In 3 Steps&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://php.net/releases/&#34;&gt;PHP 8.0+&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/laravel/laravel&#34;&gt;Laravel 9.0+&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;: First, you may use &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; to install Larastan as a development dependency into your Laravel project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require larastan/larastan:^2.0 --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Using Larastan for analysing Laravel packages? You may need to install &lt;code&gt;orchestra/testbench&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;: Then, create a &lt;code&gt;phpstan.neon&lt;/code&gt; or &lt;code&gt;phpstan.neon.dist&lt;/code&gt; file in the root of your application. It might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;includes:&#xA;    - ./vendor/larastan/larastan/extension.neon&#xA;&#xA;parameters:&#xA;&#xA;    paths:&#xA;        - app/&#xA;&#xA;    # Level 9 is the highest level&#xA;    level: 5&#xA;&#xA;#    ignoreErrors:&#xA;#        - &#39;#PHPDoc tag @var#&#39;&#xA;#&#xA;#    excludePaths:&#xA;#        - ./*/*/FileToBeExcluded.php&#xA;#&#xA;#    checkMissingIterableValueType: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For all available options, please take a look at the PHPStan documentation: &lt;strong&gt;&lt;a href=&#34;https://phpstan.org/config-reference&#34;&gt;https://phpstan.org/config-reference&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;: Finally, you may start analyzing your code using the phpstan console command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpstan analyse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are getting the error &lt;code&gt;Allowed memory size exhausted&lt;/code&gt;, then you can use the &lt;code&gt;--memory-limit&lt;/code&gt; option fix the problem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpstan analyse --memory-limit=2G&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignoring errors&lt;/h2&gt; &#xA;&lt;p&gt;Ignoring a specific error can be done either with a php comment or in the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// @phpstan-ignore-next-line&#xA;$test-&amp;gt;badMethod();&#xA;&#xA;$test-&amp;gt;badMethod(); // @phpstan-ignore-line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When ignoring errors in PHPStan&#39;s configuration file, they are ignored by writing a regex based on error messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parameters:&#xA;    ignoreErrors:&#xA;        - &#39;#Call to an undefined method .*badMethod\(\)#&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Baseline file&lt;/h3&gt; &#xA;&lt;p&gt;In older codebases it might be hard to spend the time fixing all the code to pass a high PHPStan Level.&lt;/p&gt; &#xA;&lt;p&gt;To get around this a baseline file can be generated. The baseline file will create a configuration file with all of the current errors, so new code can be written following a higher standard than the old code. (&lt;a href=&#34;https://phpstan.org/user-guide/baseline&#34;&gt;PHPStan Docs&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/phpstan analyse --generate-baseline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;A list of configurable rules specific to Laravel can be found &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/docs/rules.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;A list of Larastan features can be found &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/docs/features.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom PHPDoc types&lt;/h2&gt; &#xA;&lt;p&gt;A list of PHPDoc types specific to Larastan can be found &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/docs/custom-types.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom PHPStan config parameters&lt;/h2&gt; &#xA;&lt;p&gt;A list of custom config parameters that you can use in your PHPStan config file can be found &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/docs/custom-config-parameters.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Errors To Ignore&lt;/h2&gt; &#xA;&lt;p&gt;Some parts of Laravel are currently too magical for Larastan/PHPStan to understand. We listed common &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/docs/errors-to-ignore.md&#34;&gt;errors to ignore&lt;/a&gt;, add them as needed&lt;/p&gt; &#xA;&lt;h2&gt;üëäüèª Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Larastan. All the contribution guidelines are mentioned &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for constant updates &amp;amp; detailed information about the changes. You can also follow the Twitter account for the latest announcements or just come say hi!: &lt;a href=&#34;https://twitter.com/enunomaduro&#34;&gt;@enunomaduro&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/can__vural&#34;&gt;@can__vural&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìñ License&lt;/h2&gt; &#xA;&lt;p&gt;Larastan is an open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/larastan/larastan/2.x/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>