<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-18T01:31:18Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paragonie/typed-arrays</title>
    <updated>2024-05-18T01:31:18Z</updated>
    <id>tag:github.com,2024-05-18:/paragonie/typed-arrays</id>
    <link href="https://github.com/paragonie/typed-arrays" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Userland typed array implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Strictly Typed Arrays in PHP 8&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paragonie/typed-arrays/actions&#34;&gt;&lt;img src=&#34;https://github.com/paragonie/typed-arrays/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/paragonie/typed-arrays&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/paragonie/typed-arrays/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/paragonie/typed-arrays&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/paragonie/typed-arrays/v/unstable&#34; alt=&#34;Latest Unstable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/paragonie/typed-arrays&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/paragonie/typed-arrays/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/paragonie/typed-arrays&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/paragonie/typed-arrays.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requires PHP 8.3&lt;/strong&gt;. This is best described through example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;require_once &#39;vendor/autoload.php&#39;;&#xA;&#xA;class Foo&#xA;{&#xA;    public function __construct(&#xA;        public readonly string⟦⟧ $foo,&#xA;        public readonly int⟦⟧ $bar&#xA;    ) {}&#xA;}&#xA;&#xA;$x = new Foo(&#xA;    string⟦⟧(&#39;apple&#39;, &#39;bee&#39;),&#xA;    int⟦⟧(4, 5, 120000),&#xA;);&#xA;var_dump($x-&amp;gt;foo, $x-&amp;gt;bar);&#xA;var_dump($x-&amp;gt;foo[1]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should output the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;object(string⟦⟧)#5 (2) {&#xA;  [0]=&amp;gt;&#xA;  string(5) &#34;apple&#34;&#xA;  [1]=&amp;gt;&#xA;  string(3) &#34;bee&#34;&#xA;}&#xA;object(int⟦⟧)#6 (3) {&#xA;  [0]=&amp;gt;&#xA;  int(4)&#xA;  [1]=&amp;gt;&#xA;  int(5)&#xA;  [2]=&amp;gt;&#xA;  int(120000)&#xA;}&#xA;string(3) &#34;bee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you try to pass an incorrect type, you&#39;ll get a &lt;code&gt;TypeError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;require_once &#39;vendor/autoload.php&#39;;&#xA;&#xA;class Foo&#xA;{&#xA;    public function __construct(&#xA;        public readonly string⟦⟧ $foo&#xA;    ) {}&#xA;}&#xA;&#xA;$x = new Foo(&#xA;    string⟦⟧(&#39;apple&#39;, &#39;bee&#39;, 25)&#xA;);&#xA;var_dump($x-&amp;gt;foo, $x-&amp;gt;bar);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should produce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;Fatal error: Uncaught TypeError: string⟦⟧(): Argument #3 must be of type string, int given&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What Is This Package Doing?&lt;/h2&gt; &#xA;&lt;p&gt;We are using Unicode characters (&lt;code&gt;⟦&lt;/code&gt; and &lt;code&gt;⟧&lt;/code&gt;) to create a class that implements &lt;code&gt;ArrayAccess&lt;/code&gt;. All arguments to these types are then strictly typed.&lt;/p&gt; &#xA;&lt;p&gt;In effect, we have turned a class into a typed array that your IDE will not complain about.&lt;/p&gt; &#xA;&lt;h2&gt;Does It Support Multi-Level Types? e.g. &lt;code&gt;string⟦⟧⟦⟧&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You betcha.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;require_once &#39;vendor/autoload.php&#39;;&#xA;&#xA;class Bar&#xA;{&#xA;    public function __construct(&#xA;        public readonly string⟦⟧⟦⟧ $double,&#xA;    ) {}&#xA;}&#xA;&#xA;$test = new Bar(string⟦⟧⟦⟧(&#xA;    string⟦⟧(&#39;test&#39;),&#xA;    string⟦⟧(&#39;example&#39;),&#xA;));&#xA;var_dump($test-&amp;gt;double);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;object(string⟦⟧⟦⟧)#7 (2) {&#xA;  [0]=&amp;gt;&#xA;  object(string⟦⟧)#5 (1) {&#xA;    [0]=&amp;gt;&#xA;    string(4) &#34;test&#34;&#xA;  }&#xA;  [1]=&amp;gt;&#xA;  object(string⟦⟧)#6 (1) {&#xA;    [0]=&amp;gt;&#xA;    string(7) &#34;example&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Does This Support Arrays of Classes?&lt;/h2&gt; &#xA;&lt;p&gt;Of course!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;declare(strict_types=1);&#xA;require_once &#39;vendor/autoload.php&#39;;&#xA;&#xA;class Foo {}&#xA;&#xA;class Bar&#xA;{&#xA;    public function __construct(&#xA;        public readonly Foo⟦⟧ $example&#xA;    ) {}&#xA;}&#xA;&#xA;$test = new Bar(new Foo⟦⟧(new Foo));&#xA;var_dump($test);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;object(Bar)#2 (1) {&#xA;  [&#34;example&#34;]=&amp;gt;&#xA;  object(Foo⟦⟧)#5 (1) {&#xA;    [0]=&amp;gt;&#xA;    object(Foo)#6 (0) {&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How Does This Create Types for My Classes?&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/paragonie/typed-arrays/main/global/autoloader.php&#34;&gt;the autoloader&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>