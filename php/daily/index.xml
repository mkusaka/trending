<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-07T01:40:20Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WendellAdriel/laravel-validated-dto</title>
    <updated>2023-04-07T01:40:20Z</updated>
    <id>tag:github.com,2023-04-07:/WendellAdriel/laravel-validated-dto</id>
    <link href="https://github.com/WendellAdriel/laravel-validated-dto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data Transfer Objects with validation for Laravel applications&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;h1&gt;Laravel Validated DTO&lt;/h1&gt; Data Transfer Objects with validation for Laravel applications &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/WendellAdriel/laravel-validated-dto&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/WendellAdriel/laravel-validated-dto.svg?style=flat-square&#34; alt=&#34;Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/WendellAdriel/laravel-validated-dto&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/WendellAdriel/laravel-validated-dto.svg?style=flat-square&#34; alt=&#34;PHP from Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/WendellAdriel/laravel-validated-dto&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Laravel-9.x,%2010.x-brightgreen.svg?style=flat-square&#34; alt=&#34;Laravel Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WendellAdriel/laravel-validated-dto/actions&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (main)&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/WendellAdriel/laravel-validated-dto/tests.yml?branch=main&amp;amp;label=Tests&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/#documentation&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/#generating-dtos&#34;&gt;Generating DTOs&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/#credits&#34;&gt;Credits&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/art/validated_dto.png&#34; alt=&#34;Validated DTO class example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wendell-adriel.gitbook.io/laravel-validated-dto/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-40CA00?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=GitBook&#34; alt=&#34;Docs Button&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily integrate it with your current project&lt;/li&gt; &#xA; &lt;li&gt;Data validation the same way you validate a &lt;strong&gt;Request&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily define &lt;strong&gt;custom validation messages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;typed properties&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Casting&lt;/strong&gt; out-of-the-box for your DTOs properties&lt;/li&gt; &#xA; &lt;li&gt;Support casting of &lt;strong&gt;nested data&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily create &lt;strong&gt;custom Type Casters&lt;/strong&gt; for your own needs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require wendelladriel/laravel-validated-dto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Publish the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan vendor:publish --provider=&#34;WendellAdriel\ValidatedDTO\Providers\ValidatedDTOServiceProvider&#34; --tag=config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configuration file will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;return [&#xA;    /*&#xA;    |--------------------------------------------------------------------------&#xA;    | REQUIRE CASTING&#xA;    |--------------------------------------------------------------------------&#xA;    |&#xA;    | If this is set to true, you must configure a cast type for all properties of your DTOs.&#xA;    | If a property doesn&#39;t have a cast type configured it will throw a&#xA;    | \WendellAdriel\ValidatedDTO\Exceptions\MissingCastTypeException exception&#xA;    |&#xA;    */&#xA;    &#39;require_casting&#39; =&amp;gt; false,&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why use this package&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data Transfer Objects (DTOs)&lt;/strong&gt; are objects that are used to transfer data between systems. &lt;strong&gt;DTOs&lt;/strong&gt; are typically used in applications to provide a simple, consistent format for transferring data between different parts of the application, such as &lt;strong&gt;between the user interface and the business logic&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package provides a base &lt;strong&gt;DTO Class&lt;/strong&gt; that can &lt;strong&gt;validate&lt;/strong&gt; the data when creating a &lt;strong&gt;DTO&lt;/strong&gt;. But why should we do this instead of using the standard &lt;strong&gt;Request&lt;/strong&gt; validation?&lt;/p&gt; &#xA;&lt;p&gt;Imagine that now you want to do the same action that you do in an endpoint on a &lt;strong&gt;CLI&lt;/strong&gt; command for example. If your validation is linked to the Request you&#39;ll have to implement the same validation again.&lt;/p&gt; &#xA;&lt;p&gt;With this package you &lt;strong&gt;define the validation once&lt;/strong&gt; and can &lt;strong&gt;reuse it where you need&lt;/strong&gt;, making your application more &lt;strong&gt;maintainable&lt;/strong&gt; and &lt;strong&gt;decoupled&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Generating DTOs&lt;/h2&gt; &#xA;&lt;p&gt;You can create &lt;code&gt;DTOs&lt;/code&gt; using the &lt;code&gt;make:dto&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan make:dto UserDTO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;DTOs&lt;/code&gt; are going to be created inside &lt;code&gt;app/DTOs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Defining DTO Properties&lt;/h2&gt; &#xA;&lt;p&gt;You can define typed properties in your &lt;code&gt;DTO&lt;/code&gt; outside the constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserDTO extends ValidatedDTO&#xA;{&#xA;    public string $name;&#xA;&#xA;    public string $email;&#xA;&#xA;    public string $password;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember that the property types must be compatible with the &lt;strong&gt;Cast Type&lt;/strong&gt; you define for them.&lt;/p&gt; &#xA;&lt;h2&gt;Defining Validation Rules&lt;/h2&gt; &#xA;&lt;p&gt;You can validate data in the same way you validate &lt;code&gt;Request&lt;/code&gt; data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserDTO extends ValidatedDTO&#xA;{&#xA;    /**&#xA;     * @return array&#xA;     */&#xA;    protected function rules(): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39;     =&amp;gt; [&#39;required&#39;, &#39;string&#39;],&#xA;            &#39;email&#39;    =&amp;gt; [&#39;required&#39;, &#39;email&#39;],&#xA;            &#39;password&#39; =&amp;gt; [&#xA;                &#39;required&#39;,&#xA;                Password::min(8)&#xA;                    -&amp;gt;mixedCase()&#xA;                    -&amp;gt;letters()&#xA;                    -&amp;gt;numbers()&#xA;                    -&amp;gt;symbols()&#xA;                    -&amp;gt;uncompromised(),&#xA;            ],&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating DTO instances&lt;/h2&gt; &#xA;&lt;p&gt;You can create a &lt;code&gt;DTO&lt;/code&gt; instance on many ways:&lt;/p&gt; &#xA;&lt;h3&gt;From arrays&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;fromArray&lt;/code&gt; static method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = UserDTO::fromArray([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From JSON strings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = UserDTO::fromJson(&#39;{&#34;name&#34;: &#34;John Doe&#34;, &#34;email&#34;: &#34;john.doe@example.com&#34;, &#34;password&#34;: &#34;s3CreT!@1a2B&#34;}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Request objects&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function store(Request $request): JsonResponse&#xA;{&#xA;    $dto = UserDTO::fromRequest($request);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Eloquent Models&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$user = new User([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;&#xA;]);&#xA;&#xA;$dto = UserDTO::fromModel($user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beware that the fields in the &lt;code&gt;$hidden&lt;/code&gt; property of the &lt;code&gt;Model&lt;/code&gt; won&#39;t be used for the &lt;code&gt;DTO&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From Artisan Commands&lt;/h3&gt; &#xA;&lt;p&gt;You have three ways of creating a &lt;code&gt;DTO&lt;/code&gt; instance from an &lt;code&gt;Artisan Command&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;From the Command Arguments&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use App\DTOs\UserDTO;&#xA;use Illuminate\Console\Command;&#xA;&#xA;class CreateUserCommand extends Command&#xA;{&#xA;    protected $signature = &#39;create:user {name} {email} {password}&#39;;&#xA;&#xA;    protected $description = &#39;Create a new User&#39;;&#xA;&#xA;    /**&#xA;     * Execute the console command.&#xA;     *&#xA;     * @return int&#xA;     *&#xA;     * @throws ValidationException&#xA;     */&#xA;    public function handle()&#xA;    {&#xA;        $dto = UserDTO::fromCommandArguments($this);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From the Command Options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use App\DTOs\UserDTO;&#xA;use Illuminate\Console\Command;&#xA;&#xA;class CreateUserCommand extends Command&#xA;{&#xA;    protected $signature = &#39;create:user { --name= : The user name }&#xA;                                        { --email= : The user email }&#xA;                                        { --password= : The user password }&#39;;&#xA;&#xA;    protected $description = &#39;Create a new User&#39;;&#xA;&#xA;    /**&#xA;     * Execute the console command.&#xA;     *&#xA;     * @return int&#xA;     *&#xA;     * @throws ValidationException&#xA;     */&#xA;    public function handle()&#xA;    {&#xA;        $dto = UserDTO::fromCommandOptions($this);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From the Command Arguments and Options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use App\DTOs\UserDTO;&#xA;use Illuminate\Console\Command;&#xA;&#xA;class CreateUserCommand extends Command&#xA;{&#xA;    protected $signature = &#39;create:user {name}&#xA;                                        { --email= : The user email }&#xA;                                        { --password= : The user password }&#39;;&#xA;&#xA;    protected $description = &#39;Create a new User&#39;;&#xA;&#xA;    /**&#xA;     * Execute the console command.&#xA;     *&#xA;     * @return int&#xA;     *&#xA;     * @throws ValidationException&#xA;     */&#xA;    public function handle()&#xA;    {&#xA;        $dto = UserDTO::fromCommand($this);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing DTO data&lt;/h2&gt; &#xA;&lt;p&gt;After you create your &lt;code&gt;DTO&lt;/code&gt; instance, you can access any properties like an &lt;code&gt;object&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;&#xA;]);&#xA;&#xA;$dto-&amp;gt;name; // &#39;John Doe&#39;&#xA;$dto-&amp;gt;email; // &#39;john.doe@example.com&#39;&#xA;$dto-&amp;gt;password; // &#39;s3CreT!@1a2B&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you pass properties that are not listed in the &lt;code&gt;rules&lt;/code&gt; method of your &lt;code&gt;DTO&lt;/code&gt;, this data will be ignored and won&#39;t be available in your &lt;code&gt;DTO&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;,&#xA;    &#39;username&#39; =&amp;gt; &#39;john_doe&#39;, &#xA;]);&#xA;&#xA;$dto-&amp;gt;username; // THIS WON&#39;T BE AVAILABLE IN YOUR DTO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Defining Default Values&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes we can have properties that are optional and that can have default values. You can define the default values for your &lt;code&gt;DTO&lt;/code&gt; properties in the &lt;code&gt;defaults&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class UserDTO extends ValidatedDTO&#xA;{&#xA;    /**&#xA;     * @return array&#xA;     */&#xA;    protected function rules(): array&#xA;    {&#xA;        return [&#xA;            &#39;name&#39;     =&amp;gt; [&#39;required&#39;, &#39;string&#39;],&#xA;            &#39;email&#39;    =&amp;gt; [&#39;required&#39;, &#39;email&#39;],&#xA;            &#39;username&#39; =&amp;gt; [&#39;sometimes&#39;, &#39;string&#39;],&#xA;            &#39;password&#39; =&amp;gt; [&#xA;                &#39;required&#39;,&#xA;                Password::min(8)&#xA;                    -&amp;gt;mixedCase()&#xA;                    -&amp;gt;letters()&#xA;                    -&amp;gt;numbers()&#xA;                    -&amp;gt;symbols()&#xA;                    -&amp;gt;uncompromised(),&#xA;            ],&#xA;        ];&#xA;    }&#xA;    &#xA;    /**&#xA;     * Defines the default values for the properties of the DTO.&#xA;     *&#xA;     * @return array&#xA;     */&#xA;    protected function defaults(): array&#xA;    {&#xA;        return [&#xA;            &#39;username&#39; =&amp;gt; Str::snake($this-&amp;gt;name),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;DTO&lt;/code&gt; definition above you could run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;&#xA;]);&#xA;&#xA;$dto-&amp;gt;username; // &#39;john_doe&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Converting DTO data&lt;/h2&gt; &#xA;&lt;p&gt;You can convert your DTO to some formats:&lt;/p&gt; &#xA;&lt;h3&gt;To array&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;,&#xA;]);&#xA;&#xA;$dto-&amp;gt;toArray();&#xA;// [&#xA;//     &#34;name&#34; =&amp;gt; &#34;John Doe&#34;,&#xA;//     &#34;email&#34; =&amp;gt; &#34;john.doe@example.com&#34;,&#xA;//     &#34;password&#34; =&amp;gt; &#34;s3CreT!@1a2B&#34;,&#xA;// ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To JSON string&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;,&#xA;]);&#xA;&#xA;$dto-&amp;gt;toJson();&#xA;// &#39;{&#34;name&#34;:&#34;John Doe&#34;,&#34;email&#34;:&#34;john.doe@example.com&#34;,&#34;password&#34;:&#34;s3CreT!@1a2B&#34;}&#39;&#xA;&#xA;$dto-&amp;gt;toJson(true); // YOU CAN CALL IT LIKE THIS TO PRETTY PRINT YOUR JSON&#xA;// {&#xA;//     &#34;name&#34;: &#34;John Doe&#34;,&#xA;//     &#34;email&#34;: &#34;john.doe@example.com&#34;,&#xA;//     &#34;password&#34;: &#34;s3CreT!@1a2B&#34;&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To Eloquent Model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$dto = new UserDTO([&#xA;    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,&#xA;    &#39;email&#39; =&amp;gt; &#39;john.doe@example.com&#39;,&#xA;    &#39;password&#39; =&amp;gt; &#39;s3CreT!@1a2B&#39;,&#xA;]);&#xA;&#xA;$dto-&amp;gt;toModel(\App\Models\User::class);&#xA;// App\Models\User {#3776&#xA;//     name: &#34;John Doe&#34;,&#xA;//     email: &#34;john.doe@example.com&#34;,&#xA;//     password: &#34;s3CreT!@1a2B&#34;,&#xA;// }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing Error Messages, Attributes and Exceptions&lt;/h2&gt; &#xA;&lt;p&gt;You can define custom messages and attributes implementing the &lt;code&gt;messages&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * Defines the custom messages for validator errors.&#xA; *&#xA; * @return array&#xA; */&#xA;public function messages(): array&#xA;{&#xA;    return [];&#xA;}&#xA;&#xA;/**&#xA; * Defines the custom attributes for validator errors.&#xA; *&#xA; * @return array&#xA; */&#xA;public function attributes(): array&#xA;{&#xA;    return [];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define custom &lt;code&gt;Exceptions&lt;/code&gt; implementing the &lt;code&gt;failedValidation&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * Handles a failed validation attempt.&#xA; *&#xA; * @return void&#xA; *&#xA; * @throws ValidationException&#xA; */&#xA;protected function failedValidation(): void&#xA;{&#xA;    throw new ValidationException($this-&amp;gt;validator);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Type Casting&lt;/h2&gt; &#xA;&lt;p&gt;You can easily cast your DTO properties by defining a casts method in your DTO:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * Defines the type casting for the properties of the DTO.&#xA; *&#xA; * @return array&#xA; */&#xA;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;name&#39; =&amp;gt; new StringCast(),&#xA;        &#39;age&#39;  =&amp;gt; new IntegerCast(),&#xA;        &#39;created_at&#39; =&amp;gt; new CarbonImmutableCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Types&lt;/h2&gt; &#xA;&lt;h3&gt;Array&lt;/h3&gt; &#xA;&lt;p&gt;For JSON strings, it will convert into an array, for other types, it will wrap them in an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new ArrayCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Boolean&lt;/h3&gt; &#xA;&lt;p&gt;For string values, this uses the &lt;code&gt;filter_var&lt;/code&gt; function with the &lt;code&gt;FILTER_VALIDATE_BOOLEAN&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new BooleanCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carbon&lt;/h3&gt; &#xA;&lt;p&gt;This accepts any value accepted by the &lt;code&gt;Carbon&lt;/code&gt; constructor. If an invalid value is found it will throw a &lt;code&gt;\WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CarbonCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a timezone when defining the cast if you need that will be used when casting the value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CarbonCast(&#39;Europe/Lisbon&#39;),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a format when defining the cast to be used to cast the value. If the property has a different format than the specified it will throw a &lt;code&gt;\WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CarbonCast(&#39;Europe/Lisbon&#39;, &#39;Y-m-d&#39;),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CarbonImmutable&lt;/h3&gt; &#xA;&lt;p&gt;This accepts any value accepted by the &lt;code&gt;CarbonImmutable&lt;/code&gt; constructor. If an invalid value is found it will throw a &lt;code&gt;\WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CarbonImmutableCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a timezone when defining the cast if you need that will be used when casting the value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CarbonImmutableCast(&#39;Europe/Lisbon&#39;),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a format when defining the cast to be used to cast the value. If the property has a different format than the specified it will throw a &lt;code&gt;\WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CarbonImmutableCast(&#39;Europe/Lisbon&#39;, &#39;Y-m-d&#39;),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection&lt;/h3&gt; &#xA;&lt;p&gt;For JSON strings, it will convert into an array first, before wrapping it into a &lt;code&gt;Collection&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CollectionCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to cast all the elements inside the &lt;code&gt;Collection&lt;/code&gt;, you can pass a &lt;code&gt;Castable&lt;/code&gt; to the &lt;code&gt;CollectionCast&lt;/code&gt; constructor. Let&#39;s say that you want to convert all the items inside the &lt;code&gt;Collection&lt;/code&gt; into integers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new CollectionCast(new IntegerCast()),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works with all &lt;code&gt;Castable&lt;/code&gt;, including &lt;code&gt;DTOCast&lt;/code&gt; and &lt;code&gt;ModelCast&lt;/code&gt; for nested data.&lt;/p&gt; &#xA;&lt;h3&gt;DTO&lt;/h3&gt; &#xA;&lt;p&gt;This works with arrays and JSON strings. This will validate the data and also cast the data for the given DTO.&lt;/p&gt; &#xA;&lt;p&gt;This will throw a &lt;code&gt;Illuminate\Validation\ValidationException&lt;/code&gt; exception if the data is not valid for the DTO.&lt;/p&gt; &#xA;&lt;p&gt;This will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception if the property is not a valid array or valid JSON string.&lt;/p&gt; &#xA;&lt;p&gt;This will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastTargetException&lt;/code&gt; exception if the class passed to the &lt;code&gt;DTOCast&lt;/code&gt; constructor is not a &lt;code&gt;ValidatedDTO&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new DTOCast(UserDTO::class),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Float&lt;/h3&gt; &#xA;&lt;p&gt;If a not numeric value is found, it will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new FloatCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integer&lt;/h3&gt; &#xA;&lt;p&gt;If a not numeric value is found, it will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new IntegerCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model&lt;/h3&gt; &#xA;&lt;p&gt;This works with arrays and JSON strings.&lt;/p&gt; &#xA;&lt;p&gt;This will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception if the property is not a valid array or valid JSON string.&lt;/p&gt; &#xA;&lt;p&gt;This will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastTargetException&lt;/code&gt; exception if the class passed to the &lt;code&gt;ModelCast&lt;/code&gt; constructor is not a &lt;code&gt;Model&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new ModelCast(User::class),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Object&lt;/h3&gt; &#xA;&lt;p&gt;This works with arrays and JSON strings.&lt;/p&gt; &#xA;&lt;p&gt;This will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception if the property is not a valid array or valid JSON string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new ObjectCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String&lt;/h3&gt; &#xA;&lt;p&gt;If the data can&#39;t be converted into a string, this will throw a &lt;code&gt;WendellAdriel\ValidatedDTO\Exceptions\CastException&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function casts(): array&#xA;{&#xA;    return [&#xA;        &#39;property&#39; =&amp;gt; new StringCast(),&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create Your Own Type Cast&lt;/h2&gt; &#xA;&lt;p&gt;You can easily create new &lt;code&gt;Castable&lt;/code&gt; types for your project by implementing the &lt;code&gt;WendellAdriel\ValidatedDTO\Casting\Castable&lt;/code&gt; interface. This interface has a single method that must be implemented:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * Casts the given value.&#xA; *&#xA; * @param  string  $property&#xA; * @param  mixed  $value&#xA; * @return mixed&#xA; */&#xA;public function cast(string $property, mixed $value): mixed;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say that you have a &lt;code&gt;URLWrapper&lt;/code&gt; class in your project, and you want that when passing a URL into your &lt;code&gt;DTO&lt;/code&gt; it will always return a &lt;code&gt;URLWrapper&lt;/code&gt; instance instead of a simple string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class URLCast implements Castable&#xA;{&#xA;    /**&#xA;     * @param  string  $property&#xA;     * @param  mixed  $value&#xA;     * @return URLWrapper&#xA;     */&#xA;    public function cast(string $property, mixed $value): URLWrapper&#xA;    {&#xA;        return new URLWrapper($value);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you could apply this to your DTO:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class CustomDTO extends ValidatedDTO&#xA;{&#xA;    protected function rules(): array&#xA;    {&#xA;        return [&#xA;            &#39;url&#39; =&amp;gt; [&#39;required&#39;, &#39;url&#39;],&#xA;        ];&#xA;    }&#xA;&#xA;    protected function defaults(): array&#xA;    {&#xA;        return [];&#xA;    }&#xA;&#xA;    protected function casts(): array&#xA;    {&#xA;        return [&#xA;            &#39;url&#39; =&amp;gt; new URLCast(),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Casting Eloquent Model properties to DTOs&lt;/h2&gt; &#xA;&lt;p&gt;You can easily cast any &lt;strong&gt;Eloquent Model&lt;/strong&gt; properties to your &lt;strong&gt;DTOs&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class MyModel extends Model&#xA;{&#xA;    protected $fillable = [&#39;name&#39;, &#39;metadata&#39;];&#xA;&#xA;    protected $casts = [&#xA;        &#39;metadata&#39; =&amp;gt; AttributesDTO::class,&#xA;    ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;strong&gt;DTO&lt;/strong&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class AttributesDTO extends ValidatedDTO&#xA;{&#xA;    public int $age;&#xA;&#xA;    public string $doc;&#xA;&#xA;    protected function rules(): array&#xA;    {&#xA;        return [&#xA;            &#39;age&#39; =&amp;gt; [&#39;required&#39;, &#39;integer&#39;],&#xA;            &#39;doc&#39; =&amp;gt; [&#39;required&#39;, &#39;string&#39;],&#xA;        ];&#xA;    }&#xA;&#xA;    protected function defaults(): array&#xA;    {&#xA;        return [];&#xA;    }&#xA;&#xA;    protected function casts(): array&#xA;    {&#xA;        return [&#xA;            &#39;age&#39; =&amp;gt; new IntegerCast(),&#xA;            &#39;doc&#39; =&amp;gt; new StringCast(),&#xA;        ];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WendellAdriel&#34;&gt;Wendell Adriel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WendellAdriel/laravel-validated-dto/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;!----&gt;</summary>
  </entry>
</feed>