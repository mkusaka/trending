<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-29T01:35:47Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maths/moodle-qtype_stack</title>
    <updated>2024-02-29T01:35:47Z</updated>
    <id>tag:github.com,2024-02-29:/maths/moodle-qtype_stack</id>
    <link href="https://github.com/maths/moodle-qtype_stack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stack question type for Moodle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;STACK 4.5.0&lt;/h1&gt; &#xA;&lt;p&gt;STACK is an assessment system for mathematics, science and related disciplines. STACK is a question type for the Moodle learning management system, and also the ILIAS learning management system.&lt;/p&gt; &#xA;&lt;p&gt;The mains STACK project website is &lt;a href=&#34;https://stack-assessment.org/&#34;&gt;https://stack-assessment.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;STACK was created by &lt;a href=&#34;http://www.maths.ed.ac.uk/~csangwin/&#34;&gt;Chris Sangwin&lt;/a&gt; of the University of Edinburgh, and includes the work of many &lt;a href=&#34;https://github.com/maths/moodle-qtype_stack/raw/master/doc/en/About/Credits.md&#34;&gt;other contributors&lt;/a&gt;. STACK is based on continuing research and use at the University of Edinburgh, the Open University, Aalto, Loughborough University, the University of Birmingham and others.&lt;/p&gt; &#xA;&lt;h2&gt;Current state of development&lt;/h2&gt; &#xA;&lt;p&gt;For general authoring support please see the Zulip chat &lt;a href=&#34;https://stack-assessment.zulipchat.com/&#34;&gt;https://stack-assessment.zulipchat.com/&lt;/a&gt;. Please continue to report any bugs you find at &lt;a href=&#34;https://github.com/maths/moodle-qtype_stack/issues&#34;&gt;https://github.com/maths/moodle-qtype_stack/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The STACK project has been running since 2005, and we are committed to long term support within Moodle. We aim to maintain this plugin to work with versions of Moodle, both currently supported and current security releases, see &lt;a href=&#34;https://docs.moodle.org/dev/Releases#Version_support&#34;&gt;Moodle versions&lt;/a&gt; for more details. We are also committed to support STACK within ILIAS. If your version of Moodle or ILIAS is not listed as supported please do contact the developers for more information.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/maths/moodle-qtype_stack/raw/master/doc/en/Developer/Development_track.md&#34;&gt;current state of development&lt;/a&gt; is explained more fully in the &lt;a href=&#34;https://github.com/maths/moodle-qtype_stack/raw/master/doc/en/Developer/index.md&#34;&gt;developer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.stack-assessment.org/en/&#34;&gt;documentation is here&lt;/a&gt;, including the &lt;a href=&#34;https://docs.stack-assessment.org/en/Installation/&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The STACK source code is Licensed under the &lt;a href=&#34;https://github.com/maths/moodle-qtype_stack/raw/master/COPYING.txt&#34;&gt;GNU General Public, License Version 3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The STACK documentation, contained in the subdirectories of &lt;tt&gt;doc/&lt;/tt&gt;, is Licensed under the &lt;a href=&#34;https://github.com/maths/moodle-qtype_stack/raw/master/doc/COPYING.txt&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google-gemini-php/laravel</title>
    <updated>2024-02-29T01:35:47Z</updated>
    <id>tag:github.com,2024-02-29:/google-gemini-php/laravel</id>
    <link href="https://github.com/google-gemini-php/laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡️ Gemini PHP for Laravel is a community-maintained PHP API client that allows you to interact with the Gemini AI API.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/art/example.png&#34; width=&#34;600&#34; alt=&#34;Google Gemini PHP for Laravel&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/google-gemini-php/laravel&#34;&gt;&lt;img alt=&#34;Latest Version&#34; src=&#34;https://img.shields.io/packagist/v/google-gemini-php/laravel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/google-gemini-php/laravel&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/google-gemini-php/laravel&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gemini PHP&lt;/strong&gt; for Laravel is a community-maintained PHP API client that allows you to interact with the Gemini AI API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fatih AYDIN &lt;a href=&#34;https://github.com/aydinfatih&#34;&gt;github.com/aydinfatih&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, take a look at the &lt;a href=&#34;https://github.com/google-gemini-php/client&#34;&gt;google-gemini-php/client&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#setup-your-api-key&#34;&gt;Setup your API key&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#chat-resource&#34;&gt;Chat Resource&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#text-only-input&#34;&gt;Text-only Input&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#text-and-image-input&#34;&gt;Text-and-image Input&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#multi-turn-conversations-chat&#34;&gt;Multi-turn Conversations (Chat)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#stream-generate-content&#34;&gt;Stream Generate Content&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#count-tokens&#34;&gt;Count tokens&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#embedding-resource&#34;&gt;Embedding Resource&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#models&#34;&gt;Models&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#list-models&#34;&gt;List Models&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#get-model&#34;&gt;Get Model&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini-php/laravel/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To complete this quickstart, make sure that your development environment meets the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires &lt;a href=&#34;https://php.net/releases/&#34;&gt;PHP 8.1+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel 9,10,11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;First, install Gemini via the &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require google-gemini-php/laravel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, execute the install command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan gemini:install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a config/gemini.php configuration file in your project, which you can modify to your needs using environment variables. Blank environment variables for the Gemini API key is already appended to your .env file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GEMINI_API_KEY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define the following environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GEMINI_BASE_URL=&#xA;GEMINI_REQUEST_TIMEOUT=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup your API key&lt;/h3&gt; &#xA;&lt;p&gt;To use the Gemini API, you&#39;ll need an API key. If you don&#39;t already have one, create a key in Google AI Studio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Get an API key&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Interact with Gemini&#39;s API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Gemini\Laravel\Facades\Gemini;&#xA;&#xA;$result = Gemini::geminiPro()-&amp;gt;generateContent(&#39;Hello&#39;);&#xA;&#xA;$result-&amp;gt;text(); // Hello! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chat Resource&lt;/h3&gt; &#xA;&lt;h4&gt;Text-only Input&lt;/h4&gt; &#xA;&lt;p&gt;Generate a response from the model given an input message. If the input contains only text, use the &lt;code&gt;gemini-pro&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$result = Gemini::geminiPro()-&amp;gt;generateContent(&#39;Hello&#39;);&#xA;&#xA;$result-&amp;gt;text(); // Hello! How can I assist you today?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Text-and-image Input&lt;/h4&gt; &#xA;&lt;p&gt;If the input contains both text and image, use the &lt;code&gt;gemini-pro-vision&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$result = Gemini::geminiProVision()&#xA; -&amp;gt;generateContent([&#xA;  &#39;What is this picture?&#39;,&#xA;  new Blob(&#xA;   mimeType: MimeType::IMAGE_JPEG,&#xA;   data: base64_encode(&#xA;    file_get_contents(&#39;https://storage.googleapis.com/generativeai-downloads/images/scones.jpg&#39;)&#xA;   )&#xA;  )&#xA; ]);&#xA; &#xA;$result-&amp;gt;text(); //  The picture shows a table with a white tablecloth. On the table are two cups of coffee, a bowl of blueberries, a silver spoon, and some flowers. There are also some blueberry scones on the table.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-turn Conversations (Chat)&lt;/h4&gt; &#xA;&lt;p&gt;Using Gemini, you can build freeform conversations across multiple turns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$chat = Gemini::chat()&#xA; -&amp;gt;startChat(history: [&#xA;   Content::parse(part: &#39;The stories you write about what I have to say should be one line. Is that clear?&#39;),&#xA;   Content::parse(part: &#39;Yes, I understand. The stories I write about your input should be one line long.&#39;, role: Role::MODEL)&#xA; ]);&#xA;&#xA;$response = $chat-&amp;gt;sendMessage(&#39;Create a story set in a quiet village in 1600s France&#39;);&#xA;echo $response-&amp;gt;text(); // Amidst rolling hills and winding cobblestone streets, the tranquil village of Beausoleil whispered tales of love, intrigue, and the magic of everyday life in 17th century France.&#xA;&#xA;$response = $chat-&amp;gt;sendMessage(&#39;Rewrite the same story in 1600s England&#39;);&#xA;echo $response-&amp;gt;text(); // In the heart of England&#39;s lush countryside, amidst emerald fields and thatched-roof cottages, the village of Willowbrook unfolded a tapestry of love, mystery, and the enchantment of ordinary days in the 17th century.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;gemini-pro-vision&lt;/code&gt; model (for text-and-image input) is not yet optimized for multi-turn conversations. Make sure to use gemini-pro and text-only input for chat use cases.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Stream Generate Content&lt;/h4&gt; &#xA;&lt;p&gt;By default, the model returns a response after completing the entire generation process. You can achieve faster interactions by not waiting for the entire result, and instead use streaming to handle partial results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$stream = Gemini::geminiPro()&#xA; -&amp;gt;streamGenerateContent(&#39;Write long a story about a magic backpack.&#39;);&#xA;&#xA;foreach ($stream as $response) {&#xA; echo $response-&amp;gt;text();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Count tokens&lt;/h4&gt; &#xA;&lt;p&gt;When using long prompts, it might be useful to count tokens before sending any content to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$response = Gemini::geminiPro()&#xA; -&amp;gt;countTokens(&#39;Write a story about a magic backpack.&#39;);&#xA;&#xA;echo $response-&amp;gt;totalTokens; // 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;Every prompt you send to the model includes parameter values that control how the model generates a response. The model can generate different results for different parameter values. Learn more about &lt;a href=&#34;https://ai.google.dev/docs/concepts#model_parameters&#34;&gt;model parameters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, you can use safety settings to adjust the likelihood of getting responses that may be considered harmful. By default, safety settings block content with medium and/or high probability of being unsafe content across all dimensions. Learn more about &lt;a href=&#34;https://ai.google.dev/docs/concepts#safety_setting&#34;&gt;safety settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Gemini\Data\GenerationConfig;&#xA;use Gemini\Enums\HarmBlockThreshold;&#xA;use Gemini\Data\SafetySetting;&#xA;use Gemini\Enums\HarmCategory;&#xA;&#xA;$safetySettingDangerousContent = new SafetySetting(&#xA;    category: HarmCategory::HARM_CATEGORY_DANGEROUS_CONTENT,&#xA;    threshold: HarmBlockThreshold::BLOCK_ONLY_HIGH&#xA;);&#xA;&#xA;$safetySettingHateSpeech = new SafetySetting(&#xA;    category: HarmCategory::HARM_CATEGORY_HATE_SPEECH,&#xA;    threshold: HarmBlockThreshold::BLOCK_ONLY_HIGH&#xA;);&#xA;&#xA;$generationConfig = new GenerationConfig(&#xA;    stopSequences: [&#xA;        &#39;Title&#39;,&#xA;    ],&#xA;    maxOutputTokens: 800,&#xA;    temperature: 1,&#xA;    topP: 0.8,&#xA;    topK: 10&#xA;);&#xA;&#xA;$generativeModel = Gemini::geminiPro()&#xA; -&amp;gt;withSafetySetting($safetySettingDangerousContent)&#xA; -&amp;gt;withSafetySetting($safetySettingHateSpeech)&#xA; -&amp;gt;withGenerationConfig($generationConfig)&#xA; -&amp;gt;generateContent(&#34;Write a story about a magic backpack.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embedding Resource&lt;/h3&gt; &#xA;&lt;p&gt;Embedding is a technique used to represent information as a list of floating point numbers in an array. With Gemini, you can represent text (words, sentences, and blocks of text) in a vectorized form, making it easier to compare and contrast embeddings. For example, two texts that share a similar subject matter or sentiment should have similar embeddings, which can be identified through mathematical comparison techniques such as cosine similarity.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;embedding-001&lt;/code&gt; model with either &lt;code&gt;embedContents&lt;/code&gt; or &lt;code&gt;batchEmbedContents&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$response = Gemini::embeddingModel()&#xA; -&amp;gt;embedContent(&#34;Write a story about a magic backpack.&#34;);&#xA;&#xA;print_r($response-&amp;gt;embedding-&amp;gt;values);&#xA;//[&#xA;//    [0] =&amp;gt; 0.008624583&#xA;//    [1] =&amp;gt; -0.030451821&#xA;//    [2] =&amp;gt; -0.042496547&#xA;//    [3] =&amp;gt; -0.029230341&#xA;//    [4] =&amp;gt; 0.05486475&#xA;//    [5] =&amp;gt; 0.006694871&#xA;//    [6] =&amp;gt; 0.004025645&#xA;//    [7] =&amp;gt; -0.007294857&#xA;//    [8] =&amp;gt; 0.0057651913&#xA;//    ...&#xA;//]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;h4&gt;List Models&lt;/h4&gt; &#xA;&lt;p&gt;Use list models to see the available Gemini models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$response = Gemini::models()-&amp;gt;list();&#xA;&#xA;$response-&amp;gt;models;&#xA;//[&#xA;//    [0] =&amp;gt; Gemini\Data\Model Object&#xA;//        (&#xA;//            [name] =&amp;gt; models/gemini-pro&#xA;//            [version] =&amp;gt; 001&#xA;//            [displayName] =&amp;gt; Gemini Pro&#xA;//            [description] =&amp;gt; The best model for scaling across a wide range of tasks&#xA;//            ...&#xA;//        )&#xA;//    [1] =&amp;gt; Gemini\Data\Model Object&#xA;//        (&#xA;//            [name] =&amp;gt; models/gemini-pro-vision&#xA;//            [version] =&amp;gt; 001&#xA;//            [displayName] =&amp;gt; Gemini Pro Vision&#xA;//            [description] =&amp;gt; The best image understanding model to handle a broad range of applications&#xA;//            ...&#xA;//        )&#xA;//    [2] =&amp;gt; Gemini\Data\Model Object&#xA;//        (&#xA;//            [name] =&amp;gt; models/embedding-001&#xA;//            [version] =&amp;gt; 001&#xA;//            [displayName] =&amp;gt; Embedding 001&#xA;//            [description] =&amp;gt; Obtain a distributed representation of a text.&#xA;//            ...&#xA;//        )&#xA;//]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get Model&lt;/h4&gt; &#xA;&lt;p&gt;Get information about a model, such as version, display name, input token limit, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#xA;$response = Gemini::models()-&amp;gt;retrieve(ModelType::GEMINI_PRO);&#xA;&#xA;$response-&amp;gt;model;&#xA;//Gemini\Data\Model Object&#xA;//(&#xA;//    [name] =&amp;gt; models/gemini-pro&#xA;//    [version] =&amp;gt; 001&#xA;//    [displayName] =&amp;gt; Gemini Pro&#xA;//    [description] =&amp;gt; The best model for scaling across a wide range of tasks&#xA;//    ...&#xA;//)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The package provides a fake implementation of the &lt;code&gt;Gemini\Client&lt;/code&gt; class that allows you to fake the API responses.&lt;/p&gt; &#xA;&lt;p&gt;To test your code ensure you swap the &lt;code&gt;Gemini\Client&lt;/code&gt; class with the &lt;code&gt;Gemini\Testing\ClientFake&lt;/code&gt; class in your test case.&lt;/p&gt; &#xA;&lt;p&gt;The fake responses are returned in the order they are provided while creating the fake client.&lt;/p&gt; &#xA;&lt;p&gt;All responses are having a &lt;code&gt;fake()&lt;/code&gt; method that allows you to easily create a response object by only providing the parameters relevant for your test case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Gemini\Testing\ClientFake;&#xA;use Gemini\Responses\GenerativeModel\GenerateContentResponse;&#xA;&#xA;Gemini::fake([&#xA;  GenerateContentResponse::fake([&#xA;    &#39;candidates&#39; =&amp;gt; [&#xA;      [&#xA;        &#39;content&#39; =&amp;gt; [&#xA;          &#39;parts&#39; =&amp;gt; [&#xA;            [&#xA;              &#39;text&#39; =&amp;gt; &#39;success&#39;,&#xA;            ],&#xA;          ],&#xA;        ],&#xA;      ],&#xA;    ],&#xA;  ]),&#xA;]);&#xA;&#xA;$result = Gemini::geminiPro()-&amp;gt;generateContent(&#39;test&#39;);&#xA;&#xA;expect($result-&amp;gt;text())-&amp;gt;toBe(&#39;success&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of a streamed response you can optionally provide a resource holding the fake response data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Gemini\Testing\ClientFake;&#xA;use Gemini\Responses\GenerativeModel\GenerateContentResponse;&#xA;&#xA;Gemini::fake([&#xA;    GenerateContentResponse::fakeStream(),&#xA;]);&#xA;&#xA;$result = Gemini::geminiPro()-&amp;gt;streamGenerateContent(&#39;Hello&#39;);&#xA;&#xA;expect($response-&amp;gt;getIterator()-&amp;gt;current())&#xA;    -&amp;gt;text()-&amp;gt;toBe(&#39;In the bustling city of Aethelwood, where the cobblestone streets whispered&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the requests have been sent there are various methods to ensure that the expected requests were sent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// assert list models request was sent&#xA;Gemini::models()-&amp;gt;assertSent(callback: function ($method) {&#xA;    return $method === &#39;list&#39;;&#xA;});&#xA;// or&#xA;Gemini::assertSent(resource: Models::class, callback: function ($method) {&#xA;    return $method === &#39;list&#39;;&#xA;});&#xA;&#xA;Gemini::geminiPro()-&amp;gt;assertSent(function (string $method, array $parameters) {&#xA;    return $method === &#39;generateContent&#39; &amp;amp;&amp;amp;&#xA;        $parameters[0] === &#39;Hello&#39;;&#xA;});&#xA;// or&#xA;Gemini::assertSent(resource: GenerativeModel::class, model: ModelType::GEMINI_PRO, callback: function (string $method, array $parameters) {&#xA;    return $method === &#39;generateContent&#39; &amp;amp;&amp;amp;&#xA;        $parameters[0] === &#39;Hello&#39;;&#xA;});&#xA;&#xA;&#xA;// assert 2 generative model requests were sent&#xA;Gemini::assertSent(resource: GenerativeModel::class, model: ModelType::GEMINI_PRO, callback: 2);&#xA;// or&#xA;Gemini::geminiPro()-&amp;gt;assertSent(2);&#xA;&#xA;// assert no generative model requests were sent&#xA;Gemini::assertNotSent(resource: GenerativeModel::class, model: ModelType::GEMINI_PRO);&#xA;// or&#xA;Gemini::geminiPro()-&amp;gt;assertNotSent();&#xA;&#xA;// assert no requests were sent&#xA;Gemini::assertNothingSent();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To write tests expecting the API request to fail you can provide a &lt;code&gt;Throwable&lt;/code&gt; object as the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Gemini::fake([&#xA;    new ErrorException([&#xA;        &#39;message&#39; =&amp;gt; &#39;The model `gemini-basic` does not exist&#39;,&#xA;        &#39;status&#39; =&amp;gt; &#39;INVALID_ARGUMENT&#39;,&#xA;        &#39;code&#39; =&amp;gt; 400,&#xA;    ]),&#xA;]);&#xA;&#xA;// the `ErrorException` will be thrown&#xA;Gemini::geminiPro()-&amp;gt;generateContent(&#39;test&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>