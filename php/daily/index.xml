<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-13T01:36:14Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brendt/rfc-vote</title>
    <updated>2023-08-13T01:36:14Z</updated>
    <id>tag:github.com,2023-08-13:/brendt/rfc-vote</id>
    <link href="https://github.com/brendt/rfc-vote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community project for voting on PHP RFCs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a small app meant to gather feedback on how RFCs are received in the PHP community.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Broodco/workshop-classicmodels-hamilton-8-live-coding</title>
    <updated>2023-08-13T01:36:14Z</updated>
    <id>tag:github.com,2023-08-13:/Broodco/workshop-classicmodels-hamilton-8-live-coding</id>
    <link href="https://github.com/Broodco/workshop-classicmodels-hamilton-8-live-coding" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A workshop about creating a clean website with PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Workshop ClassicModels&lt;/h1&gt; &#xA;&lt;h2&gt;What ? Why ?&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial is about how we can build a simple application in PHP containing the following features :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display a list of products&lt;/li&gt; &#xA; &lt;li&gt;Display a single product&lt;/li&gt; &#xA; &lt;li&gt;Register a new user&lt;/li&gt; &#xA; &lt;li&gt;Login a user&lt;/li&gt; &#xA; &lt;li&gt;Logout a user&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More importantly, you will also see in this tutorial some examples of form usage, proper PDO statements and database transactions in PHP. It can serve as a point of reference for future exercises and projects.&lt;/p&gt; &#xA;&lt;h2&gt;What are the different steps ?&lt;/h2&gt; &#xA;&lt;p&gt;This project will happen in multiple steps :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First, we will create a basic PHP application with the features mentioned above.&lt;/li&gt; &#xA; &lt;li&gt;Then, we will refactor this to OOP.&lt;/li&gt; &#xA; &lt;li&gt;Then, we will implement a routing system.&lt;/li&gt; &#xA; &lt;li&gt;Finally, we will use the MVC architecture to organize the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where to start ?&lt;/h2&gt; &#xA;&lt;p&gt;This repository makes use of our usual Docker environment, but with an added bonus : the &lt;em&gt;classicmodels.sql&lt;/em&gt; script gets executed whenever we build our container (see line 10 of the &lt;a href=&#34;https://raw.githubusercontent.com/Broodco/workshop-classicmodels-hamilton-8-live-coding/main/docker-compose.yml&#34;&gt;docker-compose file&lt;/a&gt;). It will seed our starting database and allow us to start working on the new features right away.&lt;/p&gt; &#xA;&lt;p&gt;First, you will need to create a .env file (an example is provided with &lt;em&gt;.env.example&lt;/em&gt;) where you will put your future database credentials.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that you will need to also update the mysql user in the /scripts/init.sql file, using the same one as the DB_USERNAME of your env file.&lt;/p&gt; &#xA;&lt;p&gt;Then, just start the containers using the following command :&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;docker compose up --build&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And that should do it !&lt;/p&gt;</summary>
  </entry>
</feed>