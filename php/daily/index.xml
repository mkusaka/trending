<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-13T01:34:44Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phpstan/phpstan-deprecation-rules</title>
    <updated>2024-12-13T01:34:44Z</updated>
    <id>tag:github.com,2024-12-13:/phpstan/phpstan-deprecation-rules</id>
    <link href="https://github.com/phpstan/phpstan-deprecation-rules" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHPStan rules for detecting usage of deprecated classes, methods, properties, constants and traits.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rules for detecting usage of deprecated classes, methods, properties, constants and traits.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phpstan/phpstan-deprecation-rules/actions&#34;&gt;&lt;img src=&#34;https://github.com/phpstan/phpstan-deprecation-rules/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpstan/phpstan-deprecation-rules&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpstan/phpstan-deprecation-rules/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/phpstan/phpstan-deprecation-rules&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/phpstan/phpstan-deprecation-rules/license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpstan.org/&#34;&gt;PHPStan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use this extension, require it in &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require --dev phpstan/phpstan-deprecation-rules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also install &lt;a href=&#34;https://github.com/phpstan/extension-installer&#34;&gt;phpstan/extension-installer&lt;/a&gt; then you&#39;re all set!&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manual installation&lt;/summary&gt; &#xA; &lt;p&gt;If you don&#39;t want to use &lt;code&gt;phpstan/extension-installer&lt;/code&gt;, include rules.neon in your project&#39;s PHPStan config:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;includes:&#xA;    - vendor/phpstan/phpstan-deprecation-rules/rules.neon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Deprecating code you don&#39;t own&lt;/h2&gt; &#xA;&lt;p&gt;This extension emits deprecation warnings on code, which uses properties/functions/methods/classes which are annotated as &lt;code&gt;@deprecated&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case you don&#39;t own the code which you want to be considered deprecated, use &lt;a href=&#34;https://phpstan.org/user-guide/stub-files&#34;&gt;PHPStan Stub Files&lt;/a&gt; to declare deprecations for vendor files like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/** @deprecated */&#xA;class ThirdPartyClass {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom deprecated scopes&lt;/h2&gt; &#xA;&lt;p&gt;Usage of deprecated code is not reported in code that is also deprecated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/** @deprecated */&#xA;function doFoo(): void&#xA;{&#xA;    // not reported:&#xA;    anotherDeprecatedFunction();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/phpstan/phpstan-deprecation-rules/issues/64&#34;&gt;a different way&lt;/a&gt; of marking code that calls deprecated symbols on purpose and you don&#39;t want these calls to be reported either, you can write an extension by implementing the &lt;a href=&#34;https://github.com/phpstan/phpstan-deprecation-rules/raw/1.1.x/src/Rules/Deprecations/DeprecatedScopeResolver.php&#34;&gt;&lt;code&gt;DeprecatedScopeResolver&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;For example if you mark your PHPUnit tests that test deprecated code with &lt;code&gt;@group legacy&lt;/code&gt;, you can implement the extension this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class GroupLegacyScopeResolver implements DeprecatedScopeResolver&#xA;{&#xA;&#xA;&#x9;public function isScopeDeprecated(Scope $scope): bool&#xA;&#x9;{&#xA;&#x9;&#x9;$function = $scope-&amp;gt;getFunction();&#xA;&#x9;&#x9;return $function !== null&#xA;&#x9;&#x9;&#x9;&amp;amp;&amp;amp; $function-&amp;gt;getDocComment() !== null&#xA;&#x9;&#x9;&#x9;&amp;amp;&amp;amp; strpos($function-&amp;gt;getDocComment(), &#39;@group legacy&#39;) !== false;&#xA;&#x9;}&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And register it in your &lt;a href=&#34;https://phpstan.org/config-reference&#34;&gt;configuration file&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-neon&#34;&gt;services:&#xA;&#x9;-&#xA;&#x9;&#x9;class: GroupLegacyScopeResolver&#xA;&#x9;&#x9;tags:&#xA;&#x9;&#x9;&#x9;- phpstan.deprecations.deprecatedScopeResolver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://phpstan.org/developing-extensions/scope&#34;&gt;Learn more about Scope&lt;/a&gt;, a core concept for implementing custom PHPStan extensions.&lt;/p&gt;</summary>
  </entry>
</feed>