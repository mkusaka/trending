<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-09T01:36:35Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phayes/geoPHP</title>
    <updated>2023-10-09T01:36:35Z</updated>
    <id>tag:github.com,2023-10-09:/phayes/geoPHP</id>
    <link href="https://github.com/phayes/geoPHP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced geometry operations in PHP&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/phayes/geoPHP&#34;&gt;&lt;img src=&#34;https://travis-ci.org/phayes/geoPHP.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://geophp.net&#34; title=&#34;GeoPHP homepage&#34;&gt;geophp.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GeoPHP is a open-source native PHP library for doing geometry operations. It is written entirely in PHP and can therefore run on shared hosts. It can read and write a wide variety of formats: WKT (including EWKT), WKB (including EWKB), GeoJSON, KML, GPX, and GeoRSS. It works with all Simple-Feature geometries (Point, LineString, Polygon, GeometryCollection etc.) and can be used to get centroids, bounding-boxes, area, and a wide variety of other useful information.&lt;/p&gt; &#xA;&lt;p&gt;geoPHP also helpfully wraps the GEOS php extension so that applications can get a transparent performance increase when GEOS is installed on the server. When GEOS is installed, geoPHP also becomes fully compliant with the OpenGISÂ® Implementation Standard for Geographic information. With GEOS you get the full-set of openGIS functions in PHP like Union, IsWithin, Touches etc. This means that applications get a useful &#34;core-set&#34; of geometry operations that work in all environments, and an &#34;extended-set&#34;of operations for environments that have GEOS installed.&lt;/p&gt; &#xA;&lt;p&gt;See the &#39;getting started&#39; section below for references and examples of everything that geoPHP can do.&lt;/p&gt; &#xA;&lt;p&gt;This project is currently looking for co-maintainers. If you think you can help out, please send me a message. Forks are also welcome, please issue pull requests and I will merge them into the main branch.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The lastest stable version can always be downloaded at: &lt;a href=&#34;https://phayes.github.io/bin/current/geoPHP/geoPHP.tar.gz&#34;&gt;https://phayes.github.io/bin/current/geoPHP/geoPHP.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the API Reference at: &lt;a href=&#34;https://geophp.net/api.html&#34;&gt;https://geophp.net/api.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Examples &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using geoPHP as a GIS format converter: &lt;a href=&#34;http://github.com/phayes/geoPHP/wiki/Example-format-converter&#34;&gt;http://github.com/phayes/geoPHP/wiki/Example-format-converter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other Interesting Links: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Learn about GEOS integration at: &lt;a href=&#34;https://geophp.net/geos.html&#34;&gt;https://geophp.net/geos.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;include_once(&#39;geoPHP.inc&#39;);&#xA;&#xA;// Polygon WKT example&#xA;$polygon = geoPHP::load(&#39;POLYGON((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2))&#39;,&#39;wkt&#39;);&#xA;$area = $polygon-&amp;gt;getArea();&#xA;$centroid = $polygon-&amp;gt;getCentroid();&#xA;$centX = $centroid-&amp;gt;getX();&#xA;$centY = $centroid-&amp;gt;getY();&#xA;&#xA;print &#34;This polygon has an area of &#34;.$area.&#34; and a centroid with X=&#34;.$centX.&#34; and Y=&#34;.$centY;&#xA;&#xA;// MultiPoint json example&#xA;print &#34;&amp;lt;br/&amp;gt;&#34;;&#xA;$json = &#xA;&#39;{&#xA;   &#34;type&#34;: &#34;MultiPoint&#34;,&#xA;   &#34;coordinates&#34;: [&#xA;       [100.0, 0.0], [101.0, 1.0]&#xA;   ]&#xA;}&#39;;&#xA;&#xA;$multipoint = geoPHP::load($json, &#39;json&#39;);&#xA;$multipoint_points = $multipoint-&amp;gt;getComponents();&#xA;$first_wkt = $multipoint_points[0]-&amp;gt;out(&#39;wkt&#39;);&#xA;&#xA;print &#34;This multipoint has &#34;.$multipoint-&amp;gt;numGeometries().&#34; points. The first point has a wkt representation of &#34;.$first_wkt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;=======&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;p&gt;The Well Known Text (WKT) and Well Known Binary (WKB) support is ideal for integrating with MySQL&#39;s or PostGIS&#39;s spatial capability. Once you have SELECTed your data with &lt;code&gt;&#39;AsText(&#39;geo_field&#39;)&#39;&lt;/code&gt; or &lt;code&gt;&#39;AsBinary(&#39;geo_field&#39;)&#39;&lt;/code&gt;, you can put it straight into geoPHP (can be wkt or wkb, but must be the same as how you extracted it from your database):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$geom = geoPHP::load($dbRow,&#39;wkt&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can collect multiple geometries into one (note that you must use wkt for this):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$geom = geoPHP::load(&#34;GEOMETRYCOLLECTION(&#34;.$dbString1.&#34;,&#34;.$dbString2.&#34;)&#34;,&#39;wkt&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling get components returns the sub-geometries within a geometry as an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$geom2 = geoPHP::load(&#34;GEOMETRYCOLLECTION(LINESTRING(1 1,5 1,5 5,1 5,1 1),LINESTRING(2 2,2 3,3 3,3 2,2 2))&#34;);&#xA;$geomComponents = $geom2-&amp;gt;getComponents();    //an array of the two linestring geometries&#xA;$linestring1 = $geomComponents[0]-&amp;gt;getComponents();&#x9;//an array of the first linestring&#39;s point geometries&#xA;$linestring2 = $geomComponents[1]-&amp;gt;getComponents();&#xA;echo $linestring1[0]-&amp;gt;x() . &#34;, &#34; . $linestring1[0]-&amp;gt;y();    //outputs &#39;1, 1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An alternative is to use the &lt;code&gt;asArray()&lt;/code&gt; method. Using the above geometry collection of two linestrings,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$geometryArray = $geom2-&amp;gt;asArray();&#xA;echo $geometryArray[0][0][0] . &#34;, &#34; . $geometryArray[0][0][1];    //outputs &#39;1, 1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clearly, more complex analysis is possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo $geom2-&amp;gt;envelope()-&amp;gt;area();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working with PostGIS&lt;/h2&gt; &#xA;&lt;p&gt;geoPHP, through it&#39;s EWKB adapter, has good integration with postGIS. Here&#39;s an example of reading and writing postGIS geometries&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;include_once(&#39;geoPHP.inc&#39;);&#xA;$host =     &#39;localhost&#39;;&#xA;$database = &#39;phayes&#39;;&#xA;$table =    &#39;test&#39;;&#xA;$column =   &#39;geom&#39;;&#xA;$user =     &#39;phayes&#39;;&#xA;$pass =     &#39;supersecret&#39;;&#xA;&#xA;$connection = pg_connect(&#34;host=$host dbname=$database user=$user password=$pass&#34;);&#xA;&#xA;// Working with PostGIS and Extended-WKB&#xA;// ----------------------------&#xA;&#xA;// Using asBinary and GeomFromWKB in PostGIS&#xA;$result = pg_fetch_all(pg_query($connection, &#34;SELECT asBinary($column) as geom FROM $table&#34;));&#xA;foreach ($result as $item) {&#xA;  $wkb = pg_unescape_bytea($item[&#39;geom&#39;]); // Make sure to unescape the hex blob&#xA;  $geom = geoPHP::load($wkb, &#39;ewkb&#39;); // We now a full geoPHP Geometry object&#xA;  &#xA;  // Let&#39;s insert it back into the database&#xA;  $insert_string = pg_escape_bytea($geom-&amp;gt;out(&#39;ewkb&#39;));&#xA;  pg_query($connection, &#34;INSERT INTO $table ($column) values (GeomFromWKB(&#39;$insert_string&#39;))&#34;);&#xA;}&#xA;&#xA;// Using a direct SELECT and INSERTs in PostGIS without using wrapping functions&#xA;$result = pg_fetch_all(pg_query($connection, &#34;SELECT $column as geom FROM $table&#34;));&#xA;foreach ($result as $item) {&#xA;  $wkb = pack(&#39;H*&#39;,$item[&#39;geom&#39;]);   // Unpacking the hex blob&#xA;  $geom = geoPHP::load($wkb, &#39;ewkb&#39;); // We now have a geoPHP Geometry&#xA;  &#xA;  // To insert directly into postGIS we need to unpack the WKB&#xA;  $unpacked = unpack(&#39;H*&#39;, $geom-&amp;gt;out(&#39;ewkb&#39;));&#xA;  $insert_string = $unpacked[1];&#xA;  pg_query($connection, &#34;INSERT INTO $table ($column) values (&#39;$insert_string&#39;)&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Maintainer: Patrick Hayes&lt;/p&gt; &#xA;&lt;p&gt;Additional Contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GeoMemes Research (&lt;a href=&#34;http://www.geomemes.com&#34;&gt;http://www.geomemes.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;HighWire Press (&lt;a href=&#34;http://www.highwire.org&#34;&gt;http://www.highwire.org&lt;/a&gt;) and GeoScienceWorld (&lt;a href=&#34;http://www.geoscienceworld.org&#34;&gt;http://www.geoscienceworld.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Arnaud Renevier (gisconverter.php) &lt;a href=&#34;https://github.com/arenevier/gisconverter.php&#34;&gt;https://github.com/arenevier/gisconverter.php&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dave Tarc &lt;a href=&#34;https://github.com/dtarc&#34;&gt;https://github.com/dtarc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elliott Hunston (documentation) &lt;a href=&#34;https://github.com/ejh&#34;&gt;https://github.com/ejh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library is open-source and dual-licensed under both the Modified BSD License and GPLv2. Either license may be used at your option.&lt;/p&gt;</summary>
  </entry>
</feed>