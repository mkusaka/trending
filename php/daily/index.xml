<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-23T01:37:45Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>beerandcodeteam/olw-1</title>
    <updated>2022-10-23T01:37:45Z</updated>
    <id>tag:github.com,2022-10-23:/beerandcodeteam/olw-1</id>
    <link href="https://github.com/beerandcodeteam/olw-1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project from first Open Laravel Week - 02/2022&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://laravel.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://banners.beyondco.de/OLW.png?theme=light&amp;amp;packageManager=&amp;amp;packageName=by+Beer+%26+Code&amp;amp;pattern=brickWall&amp;amp;style=style_1&amp;amp;description=Sample+project+for+Open+Laravel+Week&amp;amp;md=1&amp;amp;showWatermark=0&amp;amp;fontSize=100px&amp;amp;images=https%3A%2F%2Flaravel.com%2Fimg%2Flogomark.min.svg?sanitize=true&#34; width=&#34;650&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>knuckleswtf/scribe</title>
    <updated>2022-10-23T01:37:45Z</updated>
    <id>tag:github.com,2022-10-23:/knuckleswtf/scribe</id>
    <link href="https://github.com/knuckleswtf/scribe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate API documentation for humans from your Laravel codebase.‚úç&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scribe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/knuckleswtf/scribe&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/knuckleswtf/scribe/v/stable&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/knuckleswtf/scribe&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/knuckleswtf/scribe/downloads&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/knuckleswtf/scribe/master/logo-scribe.png&#34;&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://scribe.knuckles.wtf/blog/laravel-v4&#34;&gt;v4 is out now&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Scribe helps you generate API documentation for humans from your Laravel/Lumen/&lt;a href=&#34;https://github.com/dingo/api&#34;&gt;Dingo&lt;/a&gt; codebase. See a live example at &lt;a href=&#34;https://demo.scribe.knuckles.wtf&#34;&gt;demo.scribe.knuckles.wtf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pretty single-page HTML doc, with human-friendly text, code samples, and included in-browser API tester (&#34;Try It Out&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Extracts body parameters details from FormRequests or validation rules&lt;/li&gt; &#xA; &lt;li&gt;Safely calls API endpoints to get sample responses&lt;/li&gt; &#xA; &lt;li&gt;Supports generating responses from Transformers or Eloquent API Resources&lt;/li&gt; &#xA; &lt;li&gt;Generates Postman collection and OpenAPI spec&lt;/li&gt; &#xA; &lt;li&gt;Easily customisable with custom views and included UI components&lt;/li&gt; &#xA; &lt;li&gt;Easily extensible with custom strategies&lt;/li&gt; &#xA; &lt;li&gt;Statically define extra endpoints that aren&#39;t in your codebase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üëã Scribe helps you generate docs automatically, but if you really want to make friendly, maintainable and testable API docs, there&#39;s some more things you need to know. So I made &lt;a href=&#34;https://apidocsfordevs.com?utm_source=scribe-laravel&amp;amp;utm_medium=referral&amp;amp;utm_campaign=none&#34;&gt;a course&lt;/a&gt; for you.ü§ó&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out the documentation at &lt;a href=&#34;http://scribe.knuckles.wtf/laravel&#34;&gt;scribe.knuckles.wtf/laravel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re coming from &lt;code&gt;mpociot/laravel-apidoc-generator&lt;/code&gt;, first &lt;a href=&#34;http://scribe.knuckles.wtf/blog/laravel/3.x/migrating-apidoc&#34;&gt;migrate to v3&lt;/a&gt;`, then &lt;a href=&#34;http://scribe.knuckles.wtf/blog/laravel/migrating-v4&#34;&gt;to v4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributing is easy! See our &lt;a href=&#34;https://scribe.knuckles.wtf/laravel/contributing&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opnsense/core</title>
    <updated>2022-10-23T01:37:45Z</updated>
    <id>tag:github.com,2022-10-23:/opnsense/core</id>
    <link href="https://github.com/opnsense/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OPNsense GUI, API and systems backend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OPNsense GUI and system management&lt;/h1&gt; &#xA;&lt;p&gt;The OPNsense project invites developers to start contributing to the code base. For your own purposes or ‚Äì even better ‚Äì to join us in creating the best open source firewall available.&lt;/p&gt; &#xA;&lt;p&gt;The build process has been designed to make it easy for anyone to build and write code. The main outline of the new codebase is available at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.opnsense.org/development/architecture.html&#34;&gt;https://docs.opnsense.org/development/architecture.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our aim is to gradually evolve to a new codebase instead of using a big bang approach into something new.&lt;/p&gt; &#xA;&lt;h1&gt;Build tools&lt;/h1&gt; &#xA;&lt;p&gt;To create working software like OPNsense you need the sources and the tools to build it. The build tools for OPNsense are freely available.&lt;/p&gt; &#xA;&lt;p&gt;Notes on how to build OPNsense can be found in the tools repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opnsense/tools&#34;&gt;https://github.com/opnsense/tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;You can contribute to the project in many ways, e.g. testing functionality, sending in bug reports or creating pull requests directly via GitHub. Any help is always very welcome!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;OPNsense is and will always be available under the 2-Clause BSD license:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-2-Clause&#34;&gt;https://opensource.org/licenses/BSD-2-Clause&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Every contribution made to the project must be licensed under the same conditions in order to keep OPNsense truly free and accessible for everybody.&lt;/p&gt; &#xA;&lt;h1&gt;Makefile targets&lt;/h1&gt; &#xA;&lt;p&gt;The repository offers a couple of targets that either tie into tools.git build processes or are aimed at fast development.&lt;/p&gt; &#xA;&lt;h2&gt;make package&lt;/h2&gt; &#xA;&lt;p&gt;A package of the current state of the repository can be created using this target. It may require several packages to be installed. The target will try to assist in case of failure, e.g. when a missing file needs to be fetched from an external location.&lt;/p&gt; &#xA;&lt;p&gt;Several OPTIONS exist to customise the package, e.g.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CORE_DEPENDS: a list of required dependencies for the package&lt;/li&gt; &#xA; &lt;li&gt;CORE_DEPENDS_ARCH: a list of special &#xA;  &lt;arch&gt;&#xA;   -required packages&#xA;  &lt;/arch&gt;&lt;/li&gt; &#xA; &lt;li&gt;CORE_ORIGIN: sets a FreeBSD compatible package/ports origin&lt;/li&gt; &#xA; &lt;li&gt;CORE_FLAVOUR: can be set to &#34;OpenSSL&#34; or &#34;LibreSSL&#34;&lt;/li&gt; &#xA; &lt;li&gt;CORE_COMMENT: a short description of the package&lt;/li&gt; &#xA; &lt;li&gt;CORE_MAINTAINER: email of the package maintainer&lt;/li&gt; &#xA; &lt;li&gt;CORE_WWW: web url of the package&lt;/li&gt; &#xA; &lt;li&gt;CORE_NAME: sets a package name&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Options are passed in the following form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# make package CORE_NAME=my_new_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In general, options are either set to sane defaults or automatically detected at runtime.&lt;/p&gt; &#xA;&lt;h2&gt;make update&lt;/h2&gt; &#xA;&lt;p&gt;Update will pull the latest commits from the current branch from the upstream repository.&lt;/p&gt; &#xA;&lt;h2&gt;make upgrade&lt;/h2&gt; &#xA;&lt;p&gt;Upgrade will run the package build and replace the currently installed package in the system.&lt;/p&gt; &#xA;&lt;h2&gt;make collect&lt;/h2&gt; &#xA;&lt;p&gt;Fetch changes from the running system for all known files.&lt;/p&gt; &#xA;&lt;h2&gt;make lint&lt;/h2&gt; &#xA;&lt;p&gt;Run several syntax checks on the repository. This is recommended before issuing a pull request on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;make style&lt;/h2&gt; &#xA;&lt;p&gt;Run the PSR2 and PEP8 style checks on MVC PHP code and Python, respectively.&lt;/p&gt; &#xA;&lt;h2&gt;make sweep&lt;/h2&gt; &#xA;&lt;p&gt;Run Linux Kernel cleanfile whitespace sanitiser on all files.&lt;/p&gt;</summary>
  </entry>
</feed>