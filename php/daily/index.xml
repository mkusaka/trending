<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-19T01:36:40Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rectorphp/swiss-knife</title>
    <updated>2024-02-19T01:36:40Z</updated>
    <id>tag:github.com,2024-02-19:/rectorphp/swiss-knife</id>
    <link href="https://github.com/rectorphp/swiss-knife" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swiss knife in pocket of every upgrade architect!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swiss Knife for Upgrades&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/rector/swiss-knife/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/rector/swiss-knife.svg?style=flat-square&#34; alt=&#34;Downloads total&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swiss knife in pocket of every upgrade architect!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require rector/swiss-knife --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Check your Code for Git Merge Conflicts&lt;/h3&gt; &#xA;&lt;p&gt;Do you use Git? Then merge conflicts is not what you want in your code ever to see in pushed code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this command to CI to spot these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/swiss-knife check-conflicts .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;/vendor&lt;/code&gt; directory is excluded by default.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;2. Detect Commented Code&lt;/h3&gt; &#xA;&lt;p&gt;Have you ever forgot commented code in your code?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//      foreach ($matches as $match) {&#xA;//           $content = str_replace($match[0], $match[2], $content);&#xA;//      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more! Add this command to CI to spot these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/swiss-knife check-commented-code &amp;lt;directory&amp;gt;&#xA;vendor/bin/swiss-knife check-commented-code packages --line-limit 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;3. Reach full PSR-4&lt;/h3&gt; &#xA;&lt;h4&gt;Find multiple classes in single file&lt;/h4&gt; &#xA;&lt;p&gt;To make PSR-4 work properly, each class must be in its own file. This command makes it easy to spot multiple classes in single file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/swiss-knife find-multi-classes src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Update Namespace to match PSR-4 Root&lt;/h4&gt; &#xA;&lt;p&gt;Is your class in wrong namespace? Make it match your PSR-4 root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/swiss-knife namespace-to-psr-4 src --namespace-root &#34;App\\&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will update all files in your &lt;code&gt;/src&lt;/code&gt; directory, to starts with &lt;code&gt;App\\&lt;/code&gt; and follow full PSR-4 path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; # file path: src/Repository/TalkRepository.php&#xA;&#xA;-namespace Model;&#xA;+namespace App\Repository;&#xA;&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;4. Finalize classes without children&lt;/h3&gt; &#xA;&lt;p&gt;Do you want to finalize all classes that don&#39;t have children?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/swiss-knife finalize-classes src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;5. Dependency tools speed testing&lt;/h3&gt; &#xA;&lt;p&gt;Do you want to test speed of your dependency tools? E.g. if PHPStan or Rector got slower after upgrade?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prepare a script in &lt;code&gt;composer.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;scripts&#34;: {&#xA;        &#34;phpstan&#34;: &#34;vendor/bin/phpstan analyse src --level 8&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run past X versions and measure time and memory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/swiss-knife speed-run-tool phpstan/phpstan --script-name phpstan --run-count 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Happy coding!&lt;/p&gt;</summary>
  </entry>
</feed>