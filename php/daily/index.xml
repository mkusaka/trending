<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-08T01:42:40Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>404labfr/laravel-impersonate</title>
    <updated>2023-02-08T01:42:40Z</updated>
    <id>tag:github.com,2023-02-08:/404labfr/laravel-impersonate</id>
    <link href="https://github.com/404labfr/laravel-impersonate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laravel Impersonate is a plugin that allows you to authenticate as your users.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Impersonate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/404labfr/laravel-impersonate&#34;&gt;&lt;img src=&#34;https://travis-ci.org/404labfr/laravel-impersonate.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/404labfr/laravel-impersonate/?branch=master&#34;&gt;&lt;img src=&#34;https://scrutinizer-ci.com/g/404labfr/laravel-impersonate/badges/quality-score.png?b=master&#34; alt=&#34;Scrutinizer Code Quality&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Laravel Impersonate&lt;/strong&gt; makes it easy to &lt;strong&gt;authenticate as your users&lt;/strong&gt;. Add a simple &lt;strong&gt;trait&lt;/strong&gt; to your &lt;strong&gt;user model&lt;/strong&gt; and impersonate as one of your users in one click.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#simple-usage&#34;&gt;Simple usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#using-the-built-in-controller&#34;&gt;Using the built-in controller&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#defining-impersonation-authorization&#34;&gt;Defining impersonation authorization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#using-your-own-strategy&#34;&gt;Using your own strategy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#middleware&#34;&gt;Middleware&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#blade&#34;&gt;Blade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/404labfr/laravel-impersonate/master/#rationale&#34;&gt;Why Not Just Use loginAsId()?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Laravel 6.x to 9.x&lt;/li&gt; &#xA; &lt;li&gt;PHP &amp;gt;= 7.2 or &amp;gt;= 8.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Laravel support&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Release&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6.x to 10.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6.x, 7.x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.7, 5.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.5, 5.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Require it with Composer:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require lab404/laravel-impersonate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the service provider at the end of your &lt;code&gt;config/app.php&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;providers&#39; =&amp;gt; [&#xA;    // ...&#xA;    Lab404\Impersonate\ImpersonateServiceProvider::class,&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the trait &lt;code&gt;Lab404\Impersonate\Models\Impersonate&lt;/code&gt; to your &lt;strong&gt;User&lt;/strong&gt; model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Simple usage&lt;/h2&gt; &#xA;&lt;p&gt;Impersonate a user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Auth::user()-&amp;gt;impersonate($other_user);&#xA;// You&#39;re now logged as the $other_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leave impersonation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Auth::user()-&amp;gt;leaveImpersonation();&#xA;// You&#39;re now logged as your original user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the built-in controller&lt;/h3&gt; &#xA;&lt;p&gt;In your routes file, under web middleware, you must call the &lt;code&gt;impersonate&lt;/code&gt; route macro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::impersonate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can execute this macro with your &lt;code&gt;RouteServiceProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace App\Providers;&#xA;&#xA;class RouteServiceProvider extends ServiceProvider&#xA;{&#xA;    public function map() {&#xA;        Route::middleware(&#39;web&#39;)-&amp;gt;group(function (Router $router) {&#xA;            $router-&amp;gt;impersonate();&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Where $id is the ID of the user you want impersonate&#xA;route(&#39;impersonate&#39;, $id)&#xA;&#xA;// Or in case of multi guards, you should also add `guardName` (defaults to `web`)&#xA;route(&#39;impersonate&#39;, [&#39;id&#39; =&amp;gt; $id, &#39;guardName&#39; =&amp;gt; &#39;admin&#39;])&#xA;&#xA;// Generate an URL to leave current impersonation&#xA;route(&#39;impersonate.leave&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Defining impersonation authorization&lt;/h3&gt; &#xA;&lt;p&gt;By default all users can &lt;strong&gt;impersonate&lt;/strong&gt; an user.&lt;br&gt; You need to add the method &lt;code&gt;canImpersonate()&lt;/code&gt; to your user model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    /**&#xA;     * @return bool&#xA;     */&#xA;    public function canImpersonate()&#xA;    {&#xA;        // For example&#xA;        return $this-&amp;gt;is_admin == 1;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default all users can &lt;strong&gt;be impersonated&lt;/strong&gt;.&lt;br&gt; You need to add the method &lt;code&gt;canBeImpersonated()&lt;/code&gt; to your user model to extend this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    /**&#xA;     * @return bool&#xA;     */&#xA;    public function canBeImpersonated()&#xA;    {&#xA;        // For example&#xA;        return $this-&amp;gt;can_be_impersonated == 1;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using your own strategy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting the manager:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// With the app helper&#xA;app(&#39;impersonate&#39;)&#xA;// Dependency Injection&#xA;public function impersonate(ImpersonateManager $manager, $user_id) { /* ... */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working with the manager:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$manager = app(&#39;impersonate&#39;);&#xA;&#xA;// Find an user by its ID&#xA;$manager-&amp;gt;findUserById($id);&#xA;&#xA;// TRUE if your are impersonating an user.&#xA;$manager-&amp;gt;isImpersonating();&#xA;&#xA;// Impersonate an user. Pass the original user and the user you want to impersonate&#xA;$manager-&amp;gt;take($from, $to);&#xA;&#xA;// Leave current impersonation&#xA;$manager-&amp;gt;leave();&#xA;&#xA;// Get the impersonator ID&#xA;$manager-&amp;gt;getImpersonatorId();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Protect From Impersonation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the middleware &lt;code&gt;impersonate.protect&lt;/code&gt; to protect your routes against user impersonation.&lt;br&gt; This middleware can be useful when you want to protect specific pages like users subscriptions, users credit cards, ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Router::get(&#39;/my-credit-card&#39;, function() {&#xA;    echo &#34;Can&#39;t be accessed by an impersonator&#34;;&#xA;})-&amp;gt;middleware(&#39;impersonate.protect&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;There are two events available that can be used to improve your workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TakeImpersonation&lt;/code&gt; is fired when an impersonation is taken.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LeaveImpersonation&lt;/code&gt; is fired when an impersonation is leaved.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each events returns two properties &lt;code&gt;$event-&amp;gt;impersonator&lt;/code&gt; and &lt;code&gt;$event-&amp;gt;impersonated&lt;/code&gt; containing User model instance.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The package comes with a configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Publish it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=impersonate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    // The session key used to store the original user id.&#xA;    &#39;session_key&#39; =&amp;gt; &#39;impersonated_by&#39;,&#xA;    // Where to redirect after taking an impersonation.&#xA;    // Only used in the built-in controller.&#xA;    // You can use: an URI, the keyword back (to redirect back) or a route name&#xA;    &#39;take_redirect_to&#39; =&amp;gt; &#39;/&#39;,&#xA;    // Where to redirect after leaving an impersonation.&#xA;    // Only used in the built-in controller.&#xA;    // You can use: an URI, the keyword back (to redirect back) or a route name&#xA;    &#39;leave_redirect_to&#39; =&amp;gt; &#39;/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blade&lt;/h2&gt; &#xA;&lt;p&gt;There are three Blade directives available.&lt;/p&gt; &#xA;&lt;h3&gt;When the user can impersonate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;@canImpersonate($guard = null)&#xA;    &amp;lt;a href=&#34;{{ route(&#39;impersonate&#39;, $user-&amp;gt;id) }}&#34;&amp;gt;Impersonate this user&amp;lt;/a&amp;gt;&#xA;@endCanImpersonate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When the user can be impersonated&lt;/h3&gt; &#xA;&lt;p&gt;This comes in handy when you have a user list and want to show an &#34;Impersonate&#34; button next to all the users. But you don&#39;t want that button next to the current authenticated user neither to that users which should not be able to impersonated according your implementation of &lt;code&gt;canBeImpersonated()&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;@canBeImpersonated($user, $guard = null)&#xA;    &amp;lt;a href=&#34;{{ route(&#39;impersonate&#39;, $user-&amp;gt;id) }}&#34;&amp;gt;Impersonate this user&amp;lt;/a&amp;gt;&#xA;@endCanBeImpersonated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When the user is impersonated&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-blade&#34;&gt;@impersonating($guard = null)&#xA;    &amp;lt;a href=&#34;{{ route(&#39;impersonate.leave&#39;) }}&#34;&amp;gt;Leave impersonation&amp;lt;/a&amp;gt;&#xA;@endImpersonating&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vendor/bin/phpunit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This package was created by &lt;a href=&#34;https://github.com/MarceauKa&#34;&gt;MarceauKa&lt;/a&gt; and &lt;a href=&#34;https://github.com/tghpow&#34;&gt;tghpow&lt;/a&gt;. Many thanks to all of our &lt;a href=&#34;https://github.com/404labfr/laravel-impersonate/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;h3&gt;Why not just use &lt;code&gt;loginAsId()&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;This package adds broader functionality, including Blade directives to allow you to override analytics and other tracking events when impersonating, fire events based on impersonation status, and more. Brief discussion at &lt;a href=&#34;https://github.com/404labfr/laravel-impersonate/issues/5&#34;&gt;issues/5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>