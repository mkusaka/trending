<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-05T01:36:12Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spatie/opening-hours</title>
    <updated>2023-10-05T01:36:12Z</updated>
    <id>tag:github.com,2023-10-05:/spatie/opening-hours</id>
    <link href="https://github.com/spatie/opening-hours" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Query and format a set of opening hours&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://supportukrainenow.org&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A helper to query and format a set of opening hours&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/spatie/opening-hours&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/spatie/opening-hours.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/spatie/opening-hours/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/spatie/opening-hours/goto&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fspatie%2Fopening-hours%2Fbadge&amp;amp;style=flat-square&amp;amp;label=Build&amp;amp;logo=none&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/spatie/opening-hours?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/spatie/opening-hours.svg?style=flat-square&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/spatie/opening-hours&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/spatie/opening-hours.svg?style=flat-square&#34; alt=&#34;Quality Score&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://styleci.io/repos/69368104&#34;&gt;&lt;img src=&#34;https://styleci.io/repos/69368104/shield?branch=master&#34; alt=&#34;StyleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/spatie/opening-hours&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/spatie/opening-hours.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;spatie/opening-hours&lt;/code&gt; you create an object that describes a business&#39; opening hours, which you can query for &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; on days or specific dates, or use to present the times per day.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;spatie/opening-hours&lt;/code&gt; can be used directly on &lt;a href=&#34;https://carbon.nesbot.com/&#34;&gt;Carbon&lt;/a&gt; thanks to &lt;a href=&#34;https://github.com/kylekatarnls/business-time&#34;&gt;cmixin/business-time&lt;/a&gt; so you can benefit opening hours features directly on your enhanced date objects.&lt;/p&gt; &#xA;&lt;p&gt;A set of opening hours is created by passing in a regular schedule, and a list of exceptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Add the use at the top of each file where you want to use the OpeningHours class:&#xA;use Spatie\OpeningHours\OpeningHours;&#xA;&#xA;$openingHours = OpeningHours::create([&#xA;    &#39;monday&#39;     =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-18:00&#39;],&#xA;    &#39;tuesday&#39;    =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-18:00&#39;],&#xA;    &#39;wednesday&#39;  =&amp;gt; [&#39;09:00-12:00&#39;],&#xA;    &#39;thursday&#39;   =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-18:00&#39;],&#xA;    &#39;friday&#39;     =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-20:00&#39;],&#xA;    &#39;saturday&#39;   =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-16:00&#39;],&#xA;    &#39;sunday&#39;     =&amp;gt; [],&#xA;    &#39;exceptions&#39; =&amp;gt; [&#xA;        &#39;2016-11-11&#39; =&amp;gt; [&#39;09:00-12:00&#39;],&#xA;        &#39;2016-12-25&#39; =&amp;gt; [],&#xA;        &#39;01-01&#39;      =&amp;gt; [],                // Recurring on each 1st of January&#xA;        &#39;12-25&#39;      =&amp;gt; [&#39;09:00-12:00&#39;],   // Recurring on each 25th of December&#xA;    ],&#xA;]);&#xA;&#xA;// This will allow you to display things like:&#xA;&#xA;$now = new DateTime(&#39;now&#39;);&#xA;$range = $openingHours-&amp;gt;currentOpenRange($now);&#xA;&#xA;if ($range) {&#xA;    echo &#34;It&#39;s open since &#34;.$range-&amp;gt;start().&#34;\n&#34;;&#xA;    echo &#34;It will close at &#34;.$range-&amp;gt;end().&#34;\n&#34;;&#xA;} else {&#xA;    echo &#34;It&#39;s closed since &#34;.$openingHours-&amp;gt;previousClose($now)-&amp;gt;format(&#39;l H:i&#39;).&#34;\n&#34;;&#xA;    echo &#34;It will re-open at &#34;.$openingHours-&amp;gt;nextOpen($now)-&amp;gt;format(&#39;l H:i&#39;).&#34;\n&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The object can be queried for a day in the week, which will return a result based on the regular schedule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Open on Mondays:&#xA;$openingHours-&amp;gt;isOpenOn(&#39;monday&#39;); // true&#xA;&#xA;// Closed on Sundays:&#xA;$openingHours-&amp;gt;isOpenOn(&#39;sunday&#39;); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also be queried for a specific date and time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Closed because it&#39;s after hours:&#xA;$openingHours-&amp;gt;isOpenAt(new DateTime(&#39;2016-09-26 19:00:00&#39;)); // false&#xA;&#xA;// Closed because Christmas was set as an exception&#xA;$openingHours-&amp;gt;isOpenOn(&#39;2016-12-25&#39;); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also return arrays of opening hours for a week or a day:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// OpeningHoursForDay object for the regular schedule&#xA;$openingHours-&amp;gt;forDay(&#39;monday&#39;);&#xA;&#xA;// OpeningHoursForDay[] for the regular schedule, keyed by day name&#xA;$openingHours-&amp;gt;forWeek();&#xA;&#xA;// Array of day with same schedule for the regular schedule, keyed by day name, days combined by working hours&#xA;$openingHours-&amp;gt;forWeekCombined();&#xA;&#xA;// OpeningHoursForDay object for a specific day&#xA;$openingHours-&amp;gt;forDate(new DateTime(&#39;2016-12-25&#39;));&#xA;&#xA;// OpeningHoursForDay[] of all exceptions, keyed by date&#xA;$openingHours-&amp;gt;exceptions();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On construction you can set a flag for overflowing times across days. For example, for a night club opens until 3am on Friday and Saturday:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = \Spatie\OpeningHours\OpeningHours::create([&#xA;    &#39;overflow&#39; =&amp;gt; true,&#xA;    &#39;friday&#39;   =&amp;gt; [&#39;20:00-03:00&#39;],&#xA;    &#39;saturday&#39; =&amp;gt; [&#39;20:00-03:00&#39;],&#xA;], null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows the API to further at yesterdays data to check if the opening hours are open from yesterdays time range.&lt;/p&gt; &#xA;&lt;p&gt;You can add data in definitions then retrieve them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = OpeningHours::create([&#xA;    &#39;monday&#39; =&amp;gt; [&#xA;        &#39;data&#39; =&amp;gt; &#39;Typical Monday&#39;,&#xA;        &#39;09:00-12:00&#39;,&#xA;        &#39;13:00-18:00&#39;,&#xA;    ],&#xA;    &#39;tuesday&#39; =&amp;gt; [&#xA;        &#39;09:00-12:00&#39;,&#xA;        &#39;13:00-18:00&#39;,&#xA;        [&#xA;            &#39;19:00-21:00&#39;,&#xA;            &#39;data&#39; =&amp;gt; &#39;Extra on Tuesday evening&#39;,&#xA;        ],&#xA;    ],&#xA;    &#39;exceptions&#39; =&amp;gt; [&#xA;        &#39;2016-12-25&#39; =&amp;gt; [&#xA;            &#39;data&#39; =&amp;gt; &#39;Closed for Christmas&#39;,&#xA;        ],&#xA;    ],&#xA;]);&#xA;&#xA;echo $openingHours-&amp;gt;forDay(&#39;monday&#39;)-&amp;gt;getData(); // Typical Monday&#xA;echo $openingHours-&amp;gt;forDate(new DateTime(&#39;2016-12-25&#39;))-&amp;gt;getData(); // Closed for Christmas&#xA;echo $openingHours-&amp;gt;forDay(&#39;tuesday&#39;)[2]-&amp;gt;getData(); // Extra on Tuesday evening&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, data are strings but it can be any kind of value. So you can embed multiple properties in an array.&lt;/p&gt; &#xA;&lt;p&gt;For structure convenience, the data-hours couple can be a fully-associative array, so the example above is strictly equivalent to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = OpeningHours::create([&#xA;    &#39;monday&#39; =&amp;gt; [&#xA;        &#39;hours&#39; =&amp;gt; [&#xA;            &#39;09:00-12:00&#39;,&#xA;            &#39;13:00-18:00&#39;,&#xA;        ],&#xA;        &#39;data&#39; =&amp;gt; &#39;Typical Monday&#39;,&#xA;    ],&#xA;    &#39;tuesday&#39; =&amp;gt; [&#xA;        [&#39;hours&#39; =&amp;gt; &#39;09:00-12:00&#39;],&#xA;        [&#39;hours&#39; =&amp;gt; &#39;13:00-18:00&#39;],&#xA;        [&#39;hours&#39; =&amp;gt; &#39;19:00-21:00&#39;, &#39;data&#39; =&amp;gt; &#39;Extra on Tuesday evening&#39;],&#xA;    ],&#xA;    // Open by night from Wednesday 22h to Thursday 7h:&#xA;    &#39;wednesday&#39; =&amp;gt; [&#39;22:00-24:00&#39;], // use the special &#34;24:00&#34; to reach midnight included&#xA;    &#39;thursday&#39; =&amp;gt; [&#39;00:00-07:00&#39;],&#xA;    &#39;exceptions&#39; =&amp;gt; [&#xA;        &#39;2016-12-25&#39; =&amp;gt; [&#xA;            &#39;hours&#39; =&amp;gt; [],&#xA;            &#39;data&#39;  =&amp;gt; &#39;Closed for Christmas&#39;,&#xA;        ],&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last structure tool is the filter, it allows you to pass closures (or callable function/method reference) that take a date as a parameter and returns the settings for the given date.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = OpeningHours::create([&#xA;    &#39;monday&#39; =&amp;gt; [&#xA;       &#39;09:00-12:00&#39;,&#xA;    ],&#xA;    &#39;filters&#39; =&amp;gt; [&#xA;        function ($date) {&#xA;            $year         = intval($date-&amp;gt;format(&#39;Y&#39;));&#xA;            $easterMonday = new DateTimeImmutable(&#39;2018-03-21 +&#39;.(easter_days($year) + 1).&#39;days&#39;);&#xA;            if ($date-&amp;gt;format(&#39;m-d&#39;) === $easterMonday-&amp;gt;format(&#39;m-d&#39;)) {&#xA;                return []; // Closed on Easter Monday&#xA;                // Any valid exception-array can be returned here (range of hours, with or without data)&#xA;            }&#xA;            // Else the filter does not apply to the given date&#xA;        },&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a callable is found in the &lt;code&gt;&#34;exceptions&#34;&lt;/code&gt; property, it will be added automatically to filters so you can mix filters and exceptions both in the &lt;strong&gt;exceptions&lt;/strong&gt; array. The first filter that returns a non-null value will have precedence over the next filters and the &lt;strong&gt;filters&lt;/strong&gt; array has precedence over the filters inside the &lt;strong&gt;exceptions&lt;/strong&gt; array.&lt;/p&gt; &#xA;&lt;p&gt;Warning: We will loop on all filters for each date from which we need to retrieve opening hours and can neither predicate nor cache the result (can be a random function) so you must be careful with filters, too many filters or long process inside filters can have a significant impact on the performance.&lt;/p&gt; &#xA;&lt;p&gt;It can also return the next open or close &lt;code&gt;DateTime&lt;/code&gt; from a given &lt;code&gt;DateTime&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// The next open datetime is tomorrow morning, because we’re closed on 25th of December.&#xA;$nextOpen = $openingHours-&amp;gt;nextOpen(new DateTime(&#39;2016-12-25 10:00:00&#39;)); // 2016-12-26 09:00:00&#xA;&#xA;// The next open datetime is this afternoon, after the lunch break.&#xA;$nextOpen = $openingHours-&amp;gt;nextOpen(new DateTime(&#39;2016-12-24 11:00:00&#39;)); // 2016-12-24 13:00:00&#xA;&#xA;&#xA;// The next close datetime is at noon.&#xA;$nextClose = $openingHours-&amp;gt;nextClose(new DateTime(&#39;2016-12-24 10:00:00&#39;)); // 2016-12-24 12:00:00&#xA;&#xA;// The next close datetime is tomorrow at noon, because we’re closed on 25th of December.&#xA;$nextClose = $openingHours-&amp;gt;nextClose(new DateTime(&#39;2016-12-25 15:00:00&#39;)); // 2016-12-26 12:00:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the usage section for the full api.&lt;/p&gt; &#xA;&lt;p&gt;Spatie is a webdesign agency based in Antwerp, Belgium. You&#39;ll find an overview of all our open source projects &lt;a href=&#34;https://spatie.be/opensource&#34;&gt;on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spatie.be/github-ad-click/opening-hours&#34;&gt;&lt;img src=&#34;https://github-ads.s3.eu-central-1.amazonaws.com/opening-hours.jpg?t=1&#34; width=&#34;419px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We invest a lot of resources into creating &lt;a href=&#34;https://spatie.be/open-source&#34;&gt;best in class open source packages&lt;/a&gt;. You can support us by &lt;a href=&#34;https://spatie.be/open-source/support-us&#34;&gt;buying one of our paid products&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You&#39;ll find our address on &lt;a href=&#34;https://spatie.be/about-us&#34;&gt;our contact page&lt;/a&gt;. We publish all received postcards on &lt;a href=&#34;https://spatie.be/open-source/postcards&#34;&gt;our virtual postcard wall&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require spatie/opening-hours&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The package should only be used through the &lt;code&gt;OpeningHours&lt;/code&gt; class. There are also three value object classes used throughout, &lt;code&gt;Time&lt;/code&gt;, which represents a single time, &lt;code&gt;TimeRange&lt;/code&gt;, which represents a period with a start and an end, and &lt;code&gt;openingHoursForDay&lt;/code&gt;, which represents a set of &lt;code&gt;TimeRange&lt;/code&gt;s which can&#39;t overlap.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Spatie\OpeningHours\OpeningHours&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::create(array $data, $timezone = null, $toutputTimezone = null): Spatie\OpeningHours\OpeningHours&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Static factory method to fill the set of opening hours.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = OpeningHours::create([&#xA;    &#39;monday&#39; =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-18:00&#39;],&#xA;    // ...&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no timezone is specified, &lt;code&gt;OpeningHours&lt;/code&gt; will just assume you always pass &lt;code&gt;DateTime&lt;/code&gt; objects that have already the timezone matching your schedule.&lt;/p&gt; &#xA;&lt;p&gt;If you pass a &lt;code&gt;$timezone&lt;/code&gt; as a second argument or via the array-key &lt;code&gt;&#39;timezone&#39;&lt;/code&gt; (it can be either a &lt;code&gt;DateTimeZone&lt;/code&gt; object or a &lt;code&gt;string&lt;/code&gt;), then passed dates will be converted to this timezone at the beginning of each method, then if the method return a date object (such as &lt;code&gt;nextOpen&lt;/code&gt;, &lt;code&gt;nextClose&lt;/code&gt;, &lt;code&gt;previousOpen&lt;/code&gt;, &lt;code&gt;previousClose&lt;/code&gt;, &lt;code&gt;currentOpenRangeStart&lt;/code&gt; or &lt;code&gt;currentOpenRangeEnd&lt;/code&gt;), then it&#39;s converted back to original timezone before output so the object can reflect a moment in user local time while &lt;code&gt;OpeningHours&lt;/code&gt; can stick in its own business timezone.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can also specify both input and output timezone (using second and third argument) or using an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = OpeningHours::create([&#xA;    &#39;monday&#39; =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-18:00&#39;],&#xA;    &#39;timezone&#39; =&amp;gt; [&#xA;        &#39;input&#39; =&amp;gt; &#39;America/New_York&#39;,&#xA;        &#39;output&#39; =&amp;gt; &#39;Europe/Oslo&#39;,&#xA;    ],&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::mergeOverlappingRanges(array $schedule) : array&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For safety sake, creating &lt;code&gt;OpeningHours&lt;/code&gt; object with overlapping ranges will throw an exception unless you pass explicitly &lt;code&gt;&#39;overflow&#39; =&amp;gt; true,&lt;/code&gt; in the opening hours array definition. You can also explicitly merge them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$ranges = [&#xA;  &#39;monday&#39; =&amp;gt; [&#39;08:00-11:00&#39;, &#39;10:00-12:00&#39;],&#xA;];&#xA;$mergedRanges = OpeningHours::mergeOverlappingRanges($ranges); // Monday becomes [&#39;08:00-12:00&#39;]&#xA;&#xA;OpeningHours::create($mergedRanges);&#xA;// Or use the following shortcut to create from ranges that possibly overlap:&#xA;OpeningHours::createAndMergeOverlappingRanges($ranges);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Not all days are mandatory, if a day is missing, it will be set as closed.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::fill(array $data): Spatie\OpeningHours\OpeningHours&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The same as &lt;code&gt;create&lt;/code&gt;, but non-static.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours = (new OpeningHours)-&amp;gt;fill([&#xA;    &#39;monday&#39; =&amp;gt; [&#39;09:00-12:00&#39;, &#39;13:00-18:00&#39;],&#xA;    // ...&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::forWeek(): Spatie\OpeningHours\OpeningHoursForDay[]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns an array of &lt;code&gt;OpeningHoursForDay&lt;/code&gt; objects for a regular week.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;forWeek();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::forWeekCombined(): array&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns an array of days. Array key is first day with same hours, array values are days that have the same working hours and &lt;code&gt;OpeningHoursForDay&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;forWeekCombined();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::forWeekConsecutiveDays(): array&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns an array of concatenated days, adjacent days with the same hours. Array key is first day with same hours, array values are days that have the same working hours and &lt;code&gt;OpeningHoursForDay&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: consecutive days are considered from Monday to Sunday without looping (Monday is not consecutive to Sunday) no matter the days order in initial data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;forWeekConsecutiveDays();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::forDay(string $day): Spatie\OpeningHours\OpeningHoursForDay&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns an &lt;code&gt;OpeningHoursForDay&lt;/code&gt; object for a regular day. A day is lowercase string of the english day name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;forDay(&#39;monday&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::forDate(DateTimeInterface $dateTime): Spatie\OpeningHours\OpeningHoursForDay&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns an &lt;code&gt;OpeningHoursForDay&lt;/code&gt; object for a specific date. It looks for an exception on that day, and otherwise it returns the opening hours based on the regular schedule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;forDate(new DateTime(&#39;2016-12-25&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::exceptions(): Spatie\OpeningHours\OpeningHoursForDay[]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns an array of all &lt;code&gt;OpeningHoursForDay&lt;/code&gt; objects for exceptions, keyed by a &lt;code&gt;Y-m-d&lt;/code&gt; date string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;exceptions();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::isOpenOn(string $day): bool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks if the business is open (contains at least 1 range of open hours) on a day in the regular schedule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isOpenOn(&#39;saturday&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the given string is a date, it will check if it&#39;s open (contains at least 1 range of open hours) considering both regular day schedule and possible exceptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isOpenOn(&#39;2020-09-03&#39;);&#xA;$openingHours-&amp;gt;isOpenOn(&#39;09-03&#39;); // If year is omitted, current year is used instead&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::isClosedOn(string $day): bool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks if the business is closed on a day in the regular schedule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isClosedOn(&#39;sunday&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::isOpenAt(DateTimeInterface $dateTime): bool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks if the business is open on a specific day, at a specific time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isOpenAt(new DateTime(&#39;2016-26-09 20:00&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::isClosedAt(DateTimeInterface $dateTime): bool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks if the business is closed on a specific day, at a specific time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isClosedAt(new DateTime(&#39;2016-26-09 20:00&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::isOpen(): bool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks if the business is open right now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isOpen();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::isClosed(): bool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks if the business is closed right now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;isClosed();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::nextOpen&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;OpeningHours::nextOpen(&#xA;    ?DateTimeInterface $dateTime = null,&#xA;    ?DateTimeInterface $searchUntil = null,&#xA;    ?DateTimeInterface $cap = null,&#xA;) : DateTimeInterface`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns next open &lt;code&gt;DateTime&lt;/code&gt; from the given &lt;code&gt;DateTime&lt;/code&gt; (&lt;code&gt;$dateTime&lt;/code&gt; or from now if this parameter is null or omitted).&lt;/p&gt; &#xA;&lt;p&gt;If a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is passed, a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is returned.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$searchUntil&lt;/code&gt; to a date to throw an exception if no open time can be found before this moment.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$cap&lt;/code&gt; to a date so if no open time can be found before this moment, &lt;code&gt;$cap&lt;/code&gt; is returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;nextOpen(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;`&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::nextClose&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;OpeningHours::nextClose(&#xA;    ?DateTimeInterface $dateTime = null,&#xA;    ?DateTimeInterface $searchUntil = null,&#xA;    ?DateTimeInterface $cap = null,&#xA;) : DateTimeInterface`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns next close &lt;code&gt;DateTime&lt;/code&gt; from the given &lt;code&gt;DateTime&lt;/code&gt; (&lt;code&gt;$dateTime&lt;/code&gt; or from now if this parameter is null or omitted).&lt;/p&gt; &#xA;&lt;p&gt;If a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is passed, a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is returned.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$searchUntil&lt;/code&gt; to a date to throw an exception if no closed time can be found before this moment.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$cap&lt;/code&gt; to a date so if no closed time can be found before this moment, &lt;code&gt;$cap&lt;/code&gt; is returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;nextClose(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::previousOpen&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;OpeningHours::previousOpen(&#xA;    ?DateTimeInterface $dateTime = null,&#xA;    ?DateTimeInterface $searchUntil = null,&#xA;    ?DateTimeInterface $cap = null,&#xA;) : DateTimeInterface`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns previous open &lt;code&gt;DateTime&lt;/code&gt; from the given &lt;code&gt;DateTime&lt;/code&gt; (&lt;code&gt;$dateTime&lt;/code&gt; or from now if this parameter is null or omitted).&lt;/p&gt; &#xA;&lt;p&gt;If a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is passed, a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is returned.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$searchUntil&lt;/code&gt; to a date to throw an exception if no open time can be found after this moment.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$cap&lt;/code&gt; to a date so if no open time can be found after this moment, &lt;code&gt;$cap&lt;/code&gt; is returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;previousOpen(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::previousClose&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;OpeningHours::previousClose(&#xA;    ?DateTimeInterface $dateTime = null,&#xA;    ?DateTimeInterface $searchUntil = null,&#xA;    ?DateTimeInterface $cap = null,&#xA;) : DateTimeInterface`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns previous close &lt;code&gt;DateTime&lt;/code&gt; from the given &lt;code&gt;DateTime&lt;/code&gt; (&lt;code&gt;$dateTime&lt;/code&gt; or from now if this parameter is null or omitted).&lt;/p&gt; &#xA;&lt;p&gt;If a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is passed, a &lt;code&gt;DateTimeImmutable&lt;/code&gt; object is returned.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$searchUntil&lt;/code&gt; to a date to throw an exception if no closed time can be found after this moment.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$cap&lt;/code&gt; to a date so if no closed time can be found after this moment, &lt;code&gt;$cap&lt;/code&gt; is returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;nextClose(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::diffInOpenHours(DateTimeInterface $startDate, DateTimeInterface $endDate) : float&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the amount of open time (number of hours as a floating number) between 2 dates/times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;diffInOpenHours(new DateTime(&#39;2016-12-24 11:00:00&#39;), new DateTime(&#39;2016-12-24 16:34:25&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::diffInOpenMinutes(DateTimeInterface $startDate, DateTimeInterface $endDate) : float&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the amount of open time (number of minutes as a floating number) between 2 dates/times.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::diffInOpenSeconds(DateTimeInterface $startDate, DateTimeInterface $endDate) : float&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the amount of open time (number of seconds as a floating number) between 2 dates/times.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::diffInClosedHours(DateTimeInterface $startDate, DateTimeInterface $endDate) : float&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the amount of closed time (number of hours as a floating number) between 2 dates/times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;diffInClosedHours(new DateTime(&#39;2016-12-24 11:00:00&#39;), new DateTime(&#39;2016-12-24 16:34:25&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::diffInClosedMinutes(DateTimeInterface $startDate, DateTimeInterface $endDate) : float&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the amount of closed time (number of minutes as a floating number) between 2 dates/times.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::diffInClosedSeconds(DateTimeInterface $startDate, DateTimeInterface $endDate) : float&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Return the amount of closed time (number of seconds as a floating number) between 2 dates/times.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::currentOpenRange(DateTimeInterface $dateTime) : false | TimeRange&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns a &lt;code&gt;Spatie\OpeningHours\TimeRange&lt;/code&gt; instance of the current open range if the business is open, false if the business is closed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$range = $openingHours-&amp;gt;currentOpenRange(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&#xA;if ($range) {&#xA;    echo &#34;It&#39;s open since &#34;.$range-&amp;gt;start().&#34;\n&#34;;&#xA;    echo &#34;It will close at &#34;.$range-&amp;gt;end().&#34;\n&#34;;&#xA;} else {&#xA;    echo &#34;It&#39;s closed&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::currentOpenRangeStart(DateTimeInterface $dateTime) : false | DateTime&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns a &lt;code&gt;DateTime&lt;/code&gt; instance of the date and time since when the business is open if the business is open, false if the business is closed.&lt;/p&gt; &#xA;&lt;p&gt;Note: date can be the previous day if you use night ranges.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$date = $openingHours-&amp;gt;currentOpenRangeStart(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&#xA;if ($date) {&#xA;    echo &#34;It&#39;s open since &#34;.$date-&amp;gt;format(&#39;H:i&#39;);&#xA;} else {&#xA;    echo &#34;It&#39;s closed&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::currentOpenRangeEnd(DateTimeInterface $dateTime) : false | DateTime&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns a &lt;code&gt;DateTime&lt;/code&gt; instance of the date and time until when the business will be open if the business is open, false if the business is closed.&lt;/p&gt; &#xA;&lt;p&gt;Note: date can be the next day if you use night ranges.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$date = $openingHours-&amp;gt;currentOpenRangeEnd(new DateTime(&#39;2016-12-24 11:00:00&#39;));&#xA;&#xA;if ($date) {&#xA;    echo &#34;It will close at &#34;.$date-&amp;gt;format(&#39;H:i&#39;);&#xA;} else {&#xA;    echo &#34;It&#39;s closed&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;OpeningHours::asStructuredData(strinf $format = &#39;H:i&#39;, string|DateTimeZone $timezone) : array&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns a &lt;a href=&#34;https://schema.org/openingHoursSpecification&#34;&gt;OpeningHoursSpecification&lt;/a&gt; as an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$openingHours-&amp;gt;asStructuredData();&#xA;$openingHours-&amp;gt;asStructuredData(&#39;H:i:s&#39;); // Customize time format, could be &#39;h:i a&#39;, &#39;G:i&#39;, etc.&#xA;$openingHours-&amp;gt;asStructuredData(&#39;H:iP&#39;, &#39;-05:00&#39;); // Add a timezone&#xA;// Timezone can be numeric or string like &#34;America/Toronto&#34; or a DateTimeZone instance&#xA;// But be careful, the time is arbitrary applied on 1970-01-01, so it does not handle daylight&#xA;// saving time, meaning Europe/Paris is always +01:00 even in summer time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;Spatie\OpeningHours\OpeningHoursForDay&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This class is meant as read-only. It implements &lt;code&gt;ArrayAccess&lt;/code&gt;, &lt;code&gt;Countable&lt;/code&gt; and &lt;code&gt;IteratorAggregate&lt;/code&gt; so you can process the list of &lt;code&gt;TimeRange&lt;/code&gt;s in an array-like way.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Spatie\OpeningHours\TimeRange&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Value object describing a period with a start and an end time. Can be cast to a string in a &lt;code&gt;H:i-H:i&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Spatie\OpeningHours\Time&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Value object describing a single time. Can be cast to a string in a &lt;code&gt;H:i&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;h3&gt;OpenStreetMap&lt;/h3&gt; &#xA;&lt;p&gt;You can convert OpenStreetMap format to &lt;code&gt;OpeningHours&lt;/code&gt; object using &lt;a href=&#34;https://github.com/ujamii/osm-opening-hours&#34;&gt;osm-opening-hours&lt;/a&gt; (thanks to &lt;a href=&#34;https://github.com/mgrundkoetter&#34;&gt;mgrundkoetter&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/opening-hours/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information about what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/spatie/.github/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug regarding security please mail &lt;a href=&#34;mailto:security@spatie.be&#34;&gt;security@spatie.be&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Postcardware&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.&lt;/p&gt; &#xA;&lt;p&gt;Our address is: Spatie, Kruikstraat 22, 2018 Antwerp, Belgium.&lt;/p&gt; &#xA;&lt;p&gt;We publish all received postcards &lt;a href=&#34;https://spatie.be/en/opensource/postcards&#34;&gt;on our company website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastiandedeyne&#34;&gt;Sebastian De Deyne&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spatie/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/spatie/opening-hours/master/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>