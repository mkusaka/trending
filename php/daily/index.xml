<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-04T01:35:50Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YahnisElsts/plugin-update-checker</title>
    <updated>2024-11-04T01:35:50Z</updated>
    <id>tag:github.com,2024-11-04:/YahnisElsts/plugin-update-checker</id>
    <link href="https://github.com/YahnisElsts/plugin-update-checker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A custom update checker for WordPress plugins. Useful if you don&#39;t want to host your project in the official WP repository, but would still like it to support automatic updates. Despite the name, it also works with themes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plugin Update Checker&lt;/h1&gt; &#xA;&lt;p&gt;This is a custom update checker library for WordPress plugins and themes. It lets you add automatic update notifications and one-click upgrades to your commercial plugins, private themes, and so on. All you need to do is put your plugin/theme details in a JSON file, place the file on your server, and pass the URL to the library. The library periodically checks the URL to see if there&#39;s a new version available and displays an update notification to the user if necessary.&lt;/p&gt; &#xA;&lt;p&gt;From the users&#39; perspective, it works just like with plugins and themes hosted on WordPress.org. The update checker uses the default upgrade UI that is familiar to most WordPress users.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#self-hosted-plugins-and-themes&#34;&gt;Self-hosted Plugins and Themes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#how-to-release-an-update&#34;&gt;How to Release an Update&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#github-integration&#34;&gt;GitHub Integration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#how-to-release-an-update-1&#34;&gt;How to Release an Update&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#notes-1&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#bitbucket-integration&#34;&gt;BitBucket Integration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#how-to-release-an-update-2&#34;&gt;How to Release an Update&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#gitlab-integration&#34;&gt;GitLab Integration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#how-to-release-a-gitlab-update&#34;&gt;How to Release a GitLab Update&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#migrating-from-4x&#34;&gt;Migrating from 4.x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#license-management&#34;&gt;License Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In each of the below examples, part of the instructions is to create an instance of the update checker class. It&#39;s recommended to do this either during the &lt;code&gt;plugins_loaded&lt;/code&gt; action or outside of any hooks. If you do it only during an &lt;code&gt;admin_*&lt;/code&gt; action, then updates will not be visible to a wide variety of WordPress management tools; they will only be visible to logged-in users on dashboard pages.&lt;/p&gt; &#xA;&lt;h3&gt;Self-hosted Plugins and Themes&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://github.com/YahnisElsts/plugin-update-checker/releases/latest&#34;&gt;the latest release&lt;/a&gt; and copy the &lt;code&gt;plugin-update-checker&lt;/code&gt; directory to your plugin or theme.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to the &lt;code&gt;examples&lt;/code&gt; subdirectory and open the .json file that fits your project type. Replace the placeholder data with your plugin/theme details.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Plugin example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {&#xA; &#x9;&#34;name&#34; : &#34;Plugin Name&#34;,&#xA; &#x9;&#34;version&#34; : &#34;2.0&#34;,&#xA; &#x9;&#34;download_url&#34; : &#34;https://example.com/plugin-name-2.0.zip&#34;,&#xA; &#x9;&#34;sections&#34; : {&#xA; &#x9;&#x9;&#34;description&#34; : &#34;Plugin description here. You can use HTML.&#34;&#xA; &#x9;}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is a minimal example that leaves out optional fields. See &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1eOBbW7Go2qEQXReOOCdidMTf_tDYRq4JfegcO1CBPIs/edit?usp=sharing&#34;&gt;this table&lt;/a&gt; for a full list of supported fields and their descriptions.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Theme example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {&#xA; &#x9;&#34;version&#34;: &#34;2.0&#34;,&#xA; &#x9;&#34;details_url&#34;: &#34;https://example.com/version-2.0-details.html&#34;,&#xA; &#x9;&#34;download_url&#34;: &#34;https://example.com/example-theme-2.0.zip&#34;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is actually a complete example that shows all theme-related fields. &lt;code&gt;version&lt;/code&gt; and &lt;code&gt;download_url&lt;/code&gt; should be self-explanatory. The &lt;code&gt;details_url&lt;/code&gt; key specifies the page that the user will see if they click the &#34;View version 1.2.3 details&#34; link in an update notification.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Upload the JSON file to a publicly accessible location.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following code to the main plugin file or to the &lt;code&gt;functions.php&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;path/to/plugin-update-checker/plugin-update-checker.php&#39;;&#xA;use YahnisElsts\PluginUpdateChecker\v5\PucFactory;&#xA;&#xA;$myUpdateChecker = PucFactory::buildUpdateChecker(&#xA;&#x9;&#39;https://example.com/path/to/details.json&#39;,&#xA;&#x9;__FILE__, //Full path to the main plugin file or functions.php.&#xA;&#x9;&#39;unique-plugin-or-theme-slug&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: If you&#39;re using the Composer autoloader, you don&#39;t need to explicitly &lt;code&gt;require&lt;/code&gt; the library.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How to Release an Update&lt;/h4&gt; &#xA;&lt;p&gt;Change the &lt;code&gt;version&lt;/code&gt; number in the JSON file and make sure that &lt;code&gt;download_url&lt;/code&gt; points to the latest version. Update the other fields if necessary. Tip: You can use &lt;a href=&#34;https://github.com/YahnisElsts/wp-update-server&#34;&gt;wp-update-server&lt;/a&gt; to automate this process.&lt;/p&gt; &#xA;&lt;p&gt;By default, the library will check the specified URL for changes every 12 hours. You can force it to check immediately by clicking the &#34;Check for updates&#34; link on the &#34;Plugins&#34; page (it&#39;s next to the &#34;Visit plugin site&#34; link). Themes don&#39;t have that link, but you can also trigger an update check like this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://srd.wordpress.org/plugins/debug-bar/&#34;&gt;Debug Bar&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click the &#34;Debug&#34; menu in the Admin Bar (a.k.a Toolbar).&lt;/li&gt; &#xA; &lt;li&gt;Open the &#34;PUC (your-slug)&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Click the &#34;Check Now&#34; button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The second argument passed to &lt;code&gt;buildUpdateChecker&lt;/code&gt; must be the absolute path to the main plugin file or any file in the theme directory. If you followed the &#34;getting started&#34; instructions, you can just use the &lt;code&gt;__FILE__&lt;/code&gt; constant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The third argument - i.e. the slug - is optional but recommended. In most cases, the slug should be the same as the name of your plugin directory. For example, if your plugin lives in &lt;code&gt;/wp-content/plugins/my-plugin&lt;/code&gt;, set the slug to &lt;code&gt;my-plugin&lt;/code&gt;. If the slug is omitted, the update checker will use the name of the main plugin file as the slug (e.g. &lt;code&gt;my-cool-plugin.php&lt;/code&gt; → &lt;code&gt;my-cool-plugin&lt;/code&gt;). This can lead to conflicts if your plugin has a generic file name like &lt;code&gt;plugin.php&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This doesn&#39;t affect themes because PUC uses the theme directory name as the default slug. Still, if you&#39;re planning to use the slug in your own code - e.g. to filter updates or override update checker behaviour - it can be a good idea to set it explicitly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GitHub Integration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://github.com/YahnisElsts/plugin-update-checker/releases/latest&#34;&gt;the latest release&lt;/a&gt; and copy the &lt;code&gt;plugin-update-checker&lt;/code&gt; directory to your plugin or theme.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following code to the main plugin file or &lt;code&gt;functions.php&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;plugin-update-checker/plugin-update-checker.php&#39;;&#xA;use YahnisElsts\PluginUpdateChecker\v5\PucFactory;&#xA;&#xA;$myUpdateChecker = PucFactory::buildUpdateChecker(&#xA;&#x9;&#39;https://github.com/user-name/repo-name/&#39;,&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;unique-plugin-or-theme-slug&#39;&#xA;);&#xA;&#xA;//Set the branch that contains the stable release.&#xA;$myUpdateChecker-&amp;gt;setBranch(&#39;stable-branch-name&#39;);&#xA;&#xA;//Optional: If you&#39;re using a private repository, specify the access token like this:&#xA;$myUpdateChecker-&amp;gt;setAuthentication(&#39;your-token-here&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins only: Add a &lt;code&gt;readme.txt&lt;/code&gt; file formatted according to the &lt;a href=&#34;https://wordpress.org/plugins/readme.txt&#34;&gt;WordPress.org plugin readme standard&lt;/a&gt; to your repository. The contents of this file will be shown when the user clicks the &#34;View version 1.2.3 details&#34; link.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How to Release an Update&lt;/h4&gt; &#xA;&lt;p&gt;This library supports a couple of different ways to release updates on GitHub. Pick the one that best fits your workflow.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GitHub releases&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a new release using the &#34;Releases&#34; feature on GitHub. The tag name and release title don&#39;t matter. The description is optional, but if you do provide one, it will be displayed when the user clicks the &#34;View version x.y.z details&#34; link on the &#34;Plugins&#34; page. Note that PUC ignores releases marked as &#34;This is a pre-release&#34;.&lt;/p&gt; &lt;p&gt;If you want to use release assets, call the &lt;code&gt;enableReleaseAssets()&lt;/code&gt; method after creating the update checker instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; $myUpdateChecker-&amp;gt;getVcsApi()-&amp;gt;enableReleaseAssets();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To release version 1.2.3, create a new Git tag named &lt;code&gt;v1.2.3&lt;/code&gt; or &lt;code&gt;1.2.3&lt;/code&gt;. That&#39;s it.&lt;/p&gt; &lt;p&gt;PUC doesn&#39;t require strict adherence to &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;. These are all valid tag names: &lt;code&gt;v1.2.3&lt;/code&gt;, &lt;code&gt;v1.2-foo&lt;/code&gt;, &lt;code&gt;1.2.3_rc1-ABC&lt;/code&gt;, &lt;code&gt;1.2.3.4.5&lt;/code&gt;. However, be warned that it&#39;s not smart enough to filter out alpha/beta/RC versions. If that&#39;s a problem, you might want to use GitHub releases or branches instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stable branch&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Point the update checker at a stable, production-ready branch:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; $updateChecker-&amp;gt;setBranch(&#39;branch-name&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;PUC will periodically check the &lt;code&gt;Version&lt;/code&gt; header in the main plugin file or &lt;code&gt;style.css&lt;/code&gt; and display a notification if it&#39;s greater than the installed version.&lt;/p&gt; &lt;p&gt;Caveat: If you set the branch to &lt;code&gt;master&lt;/code&gt; (the default), the update checker will look for recent releases and tags first. It&#39;ll only use the &lt;code&gt;master&lt;/code&gt; branch if it doesn&#39;t find anything else suitable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;p&gt;The library will pull update details from the following parts of a release/tag/branch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &#34;Version&#34; plugin header.&lt;/li&gt; &#xA;   &lt;li&gt;The latest GitHub release or tag name.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Changelog &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &#34;Changelog&#34; section of &lt;code&gt;readme.txt&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;One of the following files: CHANGES.md, CHANGELOG.md, changes.md, changelog.md&lt;/li&gt; &#xA;   &lt;li&gt;GitHub release notes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Required and tested WordPress versions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &#34;Requires at least&#34; and &#34;Tested up to&#34; fields in &lt;code&gt;readme.txt&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The following plugin headers: &lt;code&gt;Required WP&lt;/code&gt;, &lt;code&gt;Tested WP&lt;/code&gt;, &lt;code&gt;Requires at least&lt;/code&gt;, &lt;code&gt;Tested up to&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&#34;Last updated&#34; timestamp &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The creation timestamp of the latest GitHub release.&lt;/li&gt; &#xA;   &lt;li&gt;The latest commit in the selected tag or branch.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Number of downloads &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;download_count&lt;/code&gt; statistic of the latest release.&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re not using GitHub releases, there will be no download stats.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other plugin details - author, homepage URL, description &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &#34;Description&#34; section of &lt;code&gt;readme.txt&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Remote plugin headers (i.e. the latest version on GitHub).&lt;/li&gt; &#xA;   &lt;li&gt;Local plugin headers (i.e. the currently installed version).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ratings, banners, screenshots &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Not supported.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BitBucket Integration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://github.com/YahnisElsts/plugin-update-checker/releases/latest&#34;&gt;the latest release&lt;/a&gt; and copy the &lt;code&gt;plugin-update-checker&lt;/code&gt; directory to your plugin or theme.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following code to the main plugin file or &lt;code&gt;functions.php&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;plugin-update-checker/plugin-update-checker.php&#39;;&#xA;use YahnisElsts\PluginUpdateChecker\v5\PucFactory;&#xA;&#xA;$myUpdateChecker = PucFactory::buildUpdateChecker(&#xA;&#x9;&#39;https://bitbucket.org/user-name/repo-name&#39;,&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;unique-plugin-or-theme-slug&#39;&#xA;);&#xA;&#xA;//Optional: If you&#39;re using a private repository, create an OAuth consumer&#xA;//and set the authentication credentials like this:&#xA;//Note: For now you need to check &#34;This is a private consumer&#34; when&#xA;//creating the consumer to work around #134:&#xA;// https://github.com/YahnisElsts/plugin-update-checker/issues/134&#xA;$myUpdateChecker-&amp;gt;setAuthentication(array(&#xA;&#x9;&#39;consumer_key&#39; =&amp;gt; &#39;...&#39;,&#xA;&#x9;&#39;consumer_secret&#39; =&amp;gt; &#39;...&#39;,&#xA;));&#xA;&#xA;//Optional: Set the branch that contains the stable release.&#xA;$myUpdateChecker-&amp;gt;setBranch(&#39;stable-branch-name&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Add a &lt;code&gt;readme.txt&lt;/code&gt; file formatted according to the &lt;a href=&#34;https://wordpress.org/plugins/readme.txt&#34;&gt;WordPress.org plugin readme standard&lt;/a&gt; to your repository. For plugins, the contents of this file will be shown when the user clicks the &#34;View version 1.2.3 details&#34; link.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How to Release an Update&lt;/h4&gt; &#xA;&lt;p&gt;BitBucket doesn&#39;t have an equivalent to GitHub&#39;s releases, so the process is slightly different. You can use any of the following approaches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Stable tag&lt;/code&gt; header&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is the recommended approach if you&#39;re using tags to mark each version. Add a &lt;code&gt;readme.txt&lt;/code&gt; file formatted according to the &lt;a href=&#34;https://wordpress.org/plugins/readme.txt&#34;&gt;WordPress.org plugin readme standard&lt;/a&gt; to your repository. Set the &#34;stable tag&#34; header to the tag that represents the latest release. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; Stable tag: v1.2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The tag doesn&#39;t have to start with a &#34;v&#34; or follow any particular format. You can use any name you like as long as it&#39;s a valid Git tag.&lt;/p&gt; &lt;p&gt;Tip: If you explicitly set a stable branch, the update checker will look for a &lt;code&gt;readme.txt&lt;/code&gt; in that branch. Otherwise it will only look at the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can skip the &#34;stable tag&#34; bit and just create a new Git tag named &lt;code&gt;v1.2.3&lt;/code&gt; or &lt;code&gt;1.2.3&lt;/code&gt;. The update checker will look at the most recent tags and pick the one that looks like the highest version number.&lt;/p&gt; &lt;p&gt;PUC doesn&#39;t require strict adherence to &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;. These are all valid tag names: &lt;code&gt;v1.2.3&lt;/code&gt;, &lt;code&gt;v1.2-foo&lt;/code&gt;, &lt;code&gt;1.2.3_rc1-ABC&lt;/code&gt;, &lt;code&gt;1.2.3.4.5&lt;/code&gt;. However, be warned that it&#39;s not smart enough to filter out alpha/beta/RC versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stable branch&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Point the update checker at a stable, production-ready branch:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; $updateChecker-&amp;gt;setBranch(&#39;branch-name&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;PUC will periodically check the &lt;code&gt;Version&lt;/code&gt; header in the main plugin file or &lt;code&gt;style.css&lt;/code&gt; and display a notification if it&#39;s greater than the installed version. Caveat: If you set the branch to &lt;code&gt;master&lt;/code&gt;, the update checker will still look for tags first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GitLab Integration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://github.com/YahnisElsts/plugin-update-checker/releases/latest&#34;&gt;the latest release&lt;/a&gt; and copy the &lt;code&gt;plugin-update-checker&lt;/code&gt; directory to your plugin or theme.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following code to the main plugin file or &lt;code&gt;functions.php&lt;/code&gt; and define how you want to check for updates from Gitlab (refer to: &lt;a href=&#34;https://raw.githubusercontent.com/YahnisElsts/plugin-update-checker/master/#how-to-release-a-gitlab-update&#34;&gt;Gitlab: How to Release an Update&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require &#39;plugin-update-checker/plugin-update-checker.php&#39;;&#xA;use YahnisElsts\PluginUpdateChecker\v5\PucFactory;&#xA;&#xA;$myUpdateChecker = PucFactory::buildUpdateChecker(&#xA;&#x9;&#39;https://gitlab.com/user-name/repo-name/&#39;,&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;unique-plugin-or-theme-slug&#39;&#xA;);&#xA;&#xA;//Optional: If you&#39;re using a private repository, specify the access token like this:&#xA;$myUpdateChecker-&amp;gt;setAuthentication(&#39;your-token-here&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively, if you&#39;re using a self-hosted GitLab instance, initialize the update checker like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use YahnisElsts\PluginUpdateChecker\v5p5\Vcs\PluginUpdateChecker;&#xA;use YahnisElsts\PluginUpdateChecker\v5p5\Vcs\GitLabApi;&#xA;&#xA;$myUpdateChecker = new PluginUpdateChecker(&#xA;&#x9;new GitLabApi(&#39;https://myserver.com/user-name/repo-name/&#39;),&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;unique-plugin-or-theme-slug&#39;&#xA;);&#xA;//Optional: Add setAuthentication(...) and setBranch(...) as shown above.  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re using a self-hosted GitLab instance and &lt;a href=&#34;https://docs.gitlab.com/ce/user/group/subgroups/index.html&#34;&gt;subgroups or nested groups&lt;/a&gt;, you have to tell the update checker which parts of the URL are subgroups:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use YahnisElsts\PluginUpdateChecker\v5p5\Vcs\PluginUpdateChecker;&#xA;use YahnisElsts\PluginUpdateChecker\v5p5\Vcs\GitLabApi;&#xA;&#xA;$myUpdateChecker = new PluginUpdateChecker(&#xA;&#x9;new GitLabApi(&#xA;&#x9;&#x9;&#39;https://myserver.com/group-name/subgroup-level1/subgroup-level2/subgroup-level3/repo-name/&#39;, &#xA;&#x9;&#x9;null, &#xA;&#x9;&#x9;&#39;subgroup-level1/subgroup-level2/subgroup-level3&#39;&#xA;&#x9;),&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;unique-plugin-or-theme-slug&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins only: Add a &lt;code&gt;readme.txt&lt;/code&gt; file formatted according to the &lt;a href=&#34;https://wordpress.org/plugins/readme.txt&#34;&gt;WordPress.org plugin readme standard&lt;/a&gt; to your repository. The contents of this file will be shown when the user clicks the &#34;View version 1.2.3 details&#34; link.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;How to Release a GitLab Update&lt;/h4&gt; &#xA;&lt;p&gt;A GitLab repository can be checked for updates in 3 different ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GitLab releases&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a new release using the &#34;Releases&#34; feature on GitLab. The tag name should match the version number. You can add a &lt;code&gt;v&lt;/code&gt; prefix to the tag, like &lt;code&gt;v1.2.3&lt;/code&gt;. Releases that are marked as &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/releases/index.html#upcoming-releases&#34;&gt;&#34;Upcoming Release&#34;&lt;/a&gt; will be automatically ignored.&lt;/p&gt; &lt;p&gt;If you want to use custom release assets, call the &lt;code&gt;enableReleaseAssets()&lt;/code&gt; method after creating the update checker instance:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; $myUpdateChecker-&amp;gt;getVcsApi()-&amp;gt;enableReleaseAssets();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, PUC will use the first available asset link, regardless of type. You can pass a regular expression to &lt;code&gt;enableReleaseAssets()&lt;/code&gt; to make it pick the first link where the URL matches the regex. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; $myUpdateChecker-&amp;gt;getVcsApi()-&amp;gt;enableReleaseAssets(&#39;/\.zip($|[?&amp;amp;#])/i&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; You can use a Gitlab CI/CD Pipeline to automatically generate your update on release using a Generic Package. For more information about generic packages, refer to the following links: - &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/releases/#create-release-from-gitlab-ci&#34;&gt;Gitlab CI/CD Release Documentation&lt;/a&gt; - &lt;a href=&#34;https://gitlab.com/gitlab-org/release-cli/-/tree/master/docs/examples/release-assets-as-generic-package/&#34;&gt;Gitlab Release Assets as Generic Package Documentation&lt;/a&gt; - &lt;a href=&#34;https://gist.github.com/timwiel/9dfd3526c768efad4973254085e065ce&#34;&gt;Example .gitlab-ci.yml file using Release Generic Packages for generating a update package from the Sensei-LMS wordpress plugin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;To release version 1.2.3, create a new Git tag named &lt;code&gt;v1.2.3&lt;/code&gt; or &lt;code&gt;1.2.3&lt;/code&gt;. The update checker will look at recent tags and use the one that looks like the highest version number.&lt;/p&gt; &lt;p&gt;PUC doesn&#39;t require strict adherence to &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;. However, be warned that it&#39;s not smart enough to filter out alpha/beta/RC versions. If that&#39;s a problem, you might want to use GitLab branches instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stable branch&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Point the update checker at any stable, production-ready branch:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; $myUpdateChecker-&amp;gt;setBranch(&#39;stable-branch-name&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;PUC will periodically check the &lt;code&gt;Version&lt;/code&gt; header in the main plugin file or &lt;code&gt;style.css&lt;/code&gt; and display a notification if it&#39;s greater than the installed version. Caveat: Even if you set the branch to &lt;code&gt;main&lt;/code&gt; (the default) or &lt;code&gt;master&lt;/code&gt; (the historical default), the update checker will still look for recent releases and tags first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migrating from 4.x&lt;/h2&gt; &#xA;&lt;p&gt;Older versions of the library didn&#39;t use namespaces. Code that was written for those versions will need to be updated to work with the current version. At a minimum, you&#39;ll need to change the factory class name.&lt;/p&gt; &#xA;&lt;p&gt;Old code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$myUpdateChecker = Puc_v4_Factory::buildUpdateChecker(&#xA;&#x9;&#39;https://example.com/info.json&#39;,&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;my-slug&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;New code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use YahnisElsts\PluginUpdateChecker\v5\PucFactory;&#xA;&#xA;$myUpdateChecker = PucFactory::buildUpdateChecker(&#xA;&#x9;&#39;https://example.com/info.json&#39;,&#xA;&#x9;__FILE__,&#xA;&#x9;&#39;my-slug&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other classes have also been renamed, usually by simply removing the &lt;code&gt;Puc_vXpY_&lt;/code&gt; prefix and converting &lt;code&gt;Category_Thing&lt;/code&gt; to &lt;code&gt;Category\Thing&lt;/code&gt;. Here&#39;s a table of the most commonly used classes and their new names:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Old class name&lt;/th&gt; &#xA;   &lt;th&gt;New class name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4_Factory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5\PucFactory&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Factory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\PucFactory&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Plugin_UpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Plugin\UpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Theme_UpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Theme\UpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Vcs_PluginUpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Vcs\PluginUpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Vcs_ThemeUpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Vcs\ThemeUpdateChecker&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Vcs_GitHubApi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Vcs\GitHubApi&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Vcs_GitLabApi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Vcs\GitLabApi&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Puc_v4p13_Vcs_BitBucketApi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YahnisElsts\PluginUpdateChecker\v5p5\Vcs\BitBucketApi&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License Management&lt;/h2&gt; &#xA;&lt;p&gt;Currently, the update checker doesn&#39;t have any built-in license management features. It only provides some hooks that you can use to, for example, append license keys to update requests (&lt;code&gt;$updateChecker-&amp;gt;addQueryArgFilter()&lt;/code&gt;). If you&#39;re looking for ways to manage and verify licenses, please post your feedback in &lt;a href=&#34;https://github.com/YahnisElsts/plugin-update-checker/issues/222&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://w-shadow.com/blog/2010/09/02/automatic-updates-for-any-plugin/&#34;&gt;This blog post&lt;/a&gt; has more information about the update checker API. &lt;em&gt;Slightly out of date.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wordpress.org/plugins/debug-bar/&#34;&gt;Debug Bar&lt;/a&gt; - useful for testing and debugging the update checker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1eOBbW7Go2qEQXReOOCdidMTf_tDYRq4JfegcO1CBPIs/edit?usp=sharing&#34;&gt;Update format reference&lt;/a&gt; - describes all fields supported by the JSON-based update information format used by the update checker. Only covers plugins. Themes use a similar but more limited format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://w-shadow.com/blog/2013/03/19/plugin-updates-securing-download-links/&#34;&gt;Securing download links&lt;/a&gt; - a general overview.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open-tools.net/documentation/tutorial-automatic-updates.html#wordpress&#34;&gt;A GUI for entering download credentials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://w-shadow.com/blog/2011/06/02/automatic-updates-for-commercial-themes/&#34;&gt;Theme Update Checker&lt;/a&gt; - an older, theme-only variant of this update checker.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>