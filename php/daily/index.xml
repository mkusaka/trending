<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:31:34Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LDZ-27/rabbit_list</title>
    <updated>2023-04-12T02:31:34Z</updated>
    <id>tag:github.com,2023-04-12:/LDZ-27/rabbit_list</id>
    <link href="https://github.com/LDZ-27/rabbit_list" rel="alternate"></link>
    <summary type="html">&lt;p&gt;针对中国开发者，黑客的开源情报工具：名单，主要使用社交ID追踪，枚举，画像等手段，锁定潜在攻击者&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rabbit_list&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43908812/227708265-8259a756-90b9-4b8b-92b8-777054266f19.jpg&#34; alt=&#34;mmexport1679735326978&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;by 某不愿透露姓名的画师小姐姐&lt;/p&gt; &#xA;&lt;h1&gt;它能做什么？&lt;/h1&gt; &#xA;&lt;p&gt;主要用于社交ID追踪，它是一个为国内的安全人员定制的信息收集工具，可以通过枚举，找回，反查等等获取信息，建立一张关系网，辅助分析可能的目标隐藏的信息。&lt;/p&gt; &#xA;&lt;h1&gt;缺陷&lt;/h1&gt; &#xA;&lt;p&gt;（1）它UI丑&lt;/p&gt; &#xA;&lt;p&gt;（2）它没办法对10^4以上的节点的量级的数据进行处理，因为它运行在浏览器上。&lt;/p&gt; &#xA;&lt;p&gt;（3）它代码安全性不高，别部署在公网服务器上&lt;/p&gt; &#xA;&lt;p&gt;（4）它代码很垃圾&lt;/p&gt; &#xA;&lt;h1&gt;当前版本&lt;/h1&gt; &#xA;&lt;p&gt;初步覆盖国内开发者常去的一些平台的信息收集，具备了一定的对开发者的手机号和邮箱的信息收集能力 目前：&lt;/p&gt; &#xA;&lt;p&gt;用户名: 支持从 CSDN,Github,bilibili,Niuke,Leetcode等平台搜索用户名&lt;/p&gt; &#xA;&lt;p&gt;主页信息: 支持从 CSDN，Github,Exploit-db,zhihu,aiqicha,gitte,niuke,leetcode等等爬取基本信息&lt;/p&gt; &#xA;&lt;p&gt;自动找回: 支持从 godaddy,csdn,88mail找回部分信息&lt;/p&gt; &#xA;&lt;p&gt;用户名枚举邮箱: 支持通过用户名枚举 网易，gmail等等&lt;/p&gt; &#xA;&lt;p&gt;手机号画像: 支持从 手机号枚举学习，开发，工具，威胁情报等网站注册枚举&lt;/p&gt; &#xA;&lt;p&gt;邮箱画像: 支持 部分黑客可能会使用的工具类网站枚举注册（积极收集接口和开发中）&lt;/p&gt; &#xA;&lt;p&gt;信息反查: 支持 whois，备案反查等&lt;/p&gt; &#xA;&lt;p&gt;地理位置开源情报: 支持 ip POI反查等&lt;/p&gt; &#xA;&lt;p&gt;其它信息的收集: ......&lt;/p&gt; &#xA;&lt;p&gt;目前依旧在积极维护，主要是增加有效的数据来源。&lt;/p&gt; &#xA;&lt;h1&gt;优势&lt;/h1&gt; &#xA;&lt;p&gt;（1）部署简单&lt;/p&gt; &#xA;&lt;p&gt;（2）免费，几乎不使用任何付费api&lt;/p&gt; &#xA;&lt;p&gt;（3）社交ID追踪黑客，针对性强。&lt;/p&gt; &#xA;&lt;p&gt;（4）代码垃圾，所以模块开发简单，而且模块较多，比多数同类型信息收集工具收集的更多，又有许多别的图形化开源情报工具不具备的数据来源&lt;/p&gt; &#xA;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;针对中国开发者，黑客的最佳开源情报工具。&lt;/p&gt; &#xA;&lt;h1&gt;关于更新时间&lt;/h1&gt; &#xA;&lt;p&gt;大概每周一都会更新一次，因为我只有周末和周一有空闲时间写代码，其它时间可能也会写一些小模块，一并在周一前上传。&lt;/p&gt; &#xA;&lt;h1&gt;名单新版本介绍&lt;/h1&gt; &#xA;&lt;p&gt;目前是图形化版本的第一个演示版本，原shell写的部分会单独存放在 main 分支 里面，一些没办法集成在图形化版本的功能，我会单独写个项目的。&lt;/p&gt; &#xA;&lt;h1&gt;它能做啥？&lt;/h1&gt; &#xA;&lt;p&gt;1,对国内开发者常去的网站社交ID检索，爬取信息 2,获取IP，email，phone等信息，获取学校，地理位置信息 3,枚举画像邮箱和手机号，比如adobe最近爆的接口，国内外开发者平台，国内安全厂商，论坛，学习平台，常用平台（相当于白嫖空号检测），境外国人常用社交媒体 4,数据清洗，各种别的数据获取模块，POI查询，找回信息等等 5,更多请自己探索&lt;/p&gt; &#xA;&lt;p&gt;新版本使用php7.4开发，泄漏数据库使用clickhouse，前端使用了vis.js等等。安全性方面：不要部署在公网，我只是个大学生，我知道自己php水平不高，大学根本不教php，所以它只是能用的状态，并非是很安全的。&lt;/p&gt; &#xA;&lt;h1&gt;部署&lt;/h1&gt; &#xA;&lt;p&gt;我这里直接用phpstudy部署了，ngnix或者apache都是可以的。&lt;/p&gt; &#xA;&lt;h1&gt;配置&lt;/h1&gt; &#xA;&lt;p&gt;因为目前它还只是半成品，主要是数据来源方面，大部分是爬虫和部分接口，一些数据需要使用api，其中一些数据少量爬取网站的接口，比如站长之家，后续我买些付费api再写，目前可能需要手动写cookie值。fofa，微步，github等可能需要免费或者付费api，除此之外的数据都是不需要api的。&lt;/p&gt; &#xA;&lt;h1&gt;使用教程&lt;/h1&gt; &#xA;&lt;p&gt;视频&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Vo4y1H777&#34;&gt;https://www.bilibili.com/video/BV1Vo4y1H777&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;文章&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://x.threatbook.com/v5/article?threatInfoID=43718&#34;&gt;https://x.threatbook.com/v5/article?threatInfoID=43718&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;提示&lt;/h1&gt; &#xA;&lt;p&gt;本人前端垃圾，有一些还没有修复的bug，比如浏览器出现等待按钮时，不要管它，加载完就会消失的～&lt;/p&gt; &#xA;&lt;p&gt;使用php开发的后端，后端执行爬取，所以可能需要你为php手动配置证书&lt;/p&gt; &#xA;&lt;h1&gt;开发&lt;/h1&gt; &#xA;&lt;p&gt;目前还是我一个人在写，如果有大佬愿意为这份拙劣的代码贡献一份力量，主要是写数据来源模块啦，我很感激你，但是这个项目是完全开源，而且不盈利的，我从中没有获得任何利益，仅仅提供给大家免费使用&lt;/p&gt; &#xA;&lt;p&gt;下一个模块是用户名枚举的。接下来开发重点和邮箱用户名相关。&lt;/p&gt; &#xA;&lt;h1&gt;支持&lt;/h1&gt; &#xA;&lt;p&gt;最大的支持是提供数据来源和思路。虽然很厚颜无耻，如果赞助我一点api或者够买api的钱，也会对这个项目很有帮助的，目前的api大都是免费的，因为我真没钱买付费api，学生党。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laracraft-tech/laravel-date-scopes</title>
    <updated>2023-04-12T02:31:34Z</updated>
    <id>tag:github.com,2023-04-12:/laracraft-tech/laravel-date-scopes</id>
    <link href="https://github.com/laracraft-tech/laravel-date-scopes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some useful date scopes for your Laravel Eloquent models!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Date Scopes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/laracraft-tech/laravel-date-scopes&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/laracraft-tech/laravel-date-scopes.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/laracraft-tech/laravel-date-scopes/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/laracraft-tech/laravel-date-scopes/actions/workflows/run-tests.yml/badge.svg?branch=main&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/laracraft-tech/laravel-date-scopes&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/l/laracraft-tech/laravel-date-scopes.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--[![Total Downloads](https://img.shields.io/packagist/dt/laracraft-tech/laravel-date-scopes.svg?style=flat-square)](https://packagist.org/packages/laracraft-tech/laravel-date-scopes)--&gt; &#xA;&lt;p&gt;The package provides a big range of useful date scopes for your Laravel Eloquent models!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require laracraft-tech/laravel-date-scopes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Inclusive/Exclusive&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;strong&gt;statistics&lt;/strong&gt;, when asking for &#34;the last 7 days&#34;, the current day may or may not be included in the calculation depending on the context and the specific requirements of the analysis.&lt;/p&gt; &#xA;&lt;p&gt;If you want to &lt;strong&gt;include&lt;/strong&gt; the current day in the calculation, you would generally use an &lt;strong&gt;inclusive&lt;/strong&gt; range, meaning that you would include records created on the &lt;strong&gt;current day&lt;/strong&gt; as well as records created in the previous 6 days.&lt;/p&gt; &#xA;&lt;p&gt;If you want to &lt;strong&gt;exclude&lt;/strong&gt; the current day in the calculation, you would generally use an &lt;strong&gt;exclusive&lt;/strong&gt; range, meaning that you would include records created in the previous 7 days, but not records created on the &lt;strong&gt;current day&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, it &lt;strong&gt;depends&lt;/strong&gt; on the context and what you&#39;re trying to achieve with your data. It&#39;s always a good idea to clarify the requirements and expectations with stakeholders to ensure that you&#39;re including or excluding the correct records.&lt;/p&gt; &#xA;&lt;p&gt;The same &lt;strong&gt;concept&lt;/strong&gt; applies to other time intervals like weeks, months, quarters, and years etc.&lt;/p&gt; &#xA;&lt;p&gt;The default for this package is &lt;strong&gt;exclusive&lt;/strong&gt; approach, which means when you for instance query for the last 7 days it will &lt;strong&gt;not include&lt;/strong&gt; the current day! You can change the default if you need in the published config file.&lt;/p&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;p&gt;You can publish the config file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan vendor:publish --tag=&#34;date-scopes-config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the contents of the published config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    /**&#xA;     * If you want to include the current day/week/month/year etc. in the range,&#xA;     * you could use the inclusive range here as a default.&#xA;     * Note that you can also optionally specify it for quite every scope we offer&#xA;     * directly when using the scope:&#xA;     * Transaction::ofLast7Days(DateRange::INCLUSIVE); (this works for all but the singular &#34;ofLast&#34;-scopes)&#xA;     * This will do an inclusive query, even though the global default range here is set to exclusive.&#xA;     */&#xA;    &#39;default_range&#39; =&amp;gt; env(&#39;DATE_SCOPES_DEFAULT_RANGE&#39;, DateRange::EXCLUSIVE-&amp;gt;value),&#xA;&#xA;    /**&#xA;     * If you have a custom created_at column name, change it here.&#xA;     */&#xA;    &#39;created_column&#39; =&amp;gt; env(&#39;DATE_SCOPES_CREATED_COLUMN&#39;, &#39;created_at&#39;),&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change the default range to inclusive set &lt;code&gt;DATE_SCOPES_DEFAULT_RANGE=inclusive&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scopes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#seconds&#34;&gt;&lt;code&gt;seconds&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#minutes&#34;&gt;&lt;code&gt;minutes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#hours&#34;&gt;&lt;code&gt;hours&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#days&#34;&gt;&lt;code&gt;days&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#weeks&#34;&gt;&lt;code&gt;weeks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#months&#34;&gt;&lt;code&gt;months&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#quarters&#34;&gt;&lt;code&gt;quarters&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#years&#34;&gt;&lt;code&gt;years&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#decades&#34;&gt;&lt;code&gt;decades&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#millenniums&#34;&gt;&lt;code&gt;millenniums&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/#toNowtoDate&#34;&gt;&lt;code&gt;toNow/toDate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s assume you have an &lt;code&gt;Transaction&lt;/code&gt; model class. Now when you give it the &lt;code&gt;DateScopes&lt;/code&gt; trait, you can use the following scopes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use LaracraftTech\LaravelDateScopes\DateScopes;&#xA;&#xA;class Transaction extends Model&#xA;{&#xA;    use DateScopes;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seconds&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by SECONDS&#xA;Transaction::ofLastSecond(); // query transactions created during the last second&#xA;Transaction::ofLast15Seconds(); // query transactions created during the last 15 seconds&#xA;Transaction::ofLast30Seconds(); // query transactions created during the last 30 seconds&#xA;Transaction::ofLast45Seconds(); // query transactions created during the last 45 seconds&#xA;Transaction::ofLast60Seconds(); // query transactions created during the last 60 seconds&#xA;Transaction::ofLastSeconds(120); // query transactions created during the last N seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minutes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by MINUTES&#xA;Transaction::ofLastMinute(); // query transactions created during the last minute&#xA;Transaction::ofLast15Minutes(); // query transactions created during the last 15 minutes&#xA;Transaction::ofLast30Minutes(); // query transactions created during the last 30 minutes&#xA;Transaction::ofLast45Minutes(); // query transactions created during the last 45 minutes&#xA;Transaction::ofLast60Minutes(); // query transactions created during the last 60 minutes&#xA;Transaction::ofLastMinutes(120); // query transactions created during the last N minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hours&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by HOURS&#xA;Transaction::ofLastHour(); // query transactions created during the last hour&#xA;Transaction::ofLast6Hours(); // query transactions created during the last 6 hours&#xA;Transaction::ofLast12Hours(); // query transactions created during the last 12 hours&#xA;Transaction::ofLast18Hours(); // query transactions created during the last 18 hours&#xA;Transaction::ofLast24Hours(); // query transactions created during the last 24 hours&#xA;Transaction::ofLastHours(48); // query transactions created during the last N hours&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Days&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by DAYS&#xA;Transaction::ofToday(); // query transactions created today&#xA;Transaction::ofYesterday(); // query transactions created yesterday&#xA;Transaction::ofLast7Days(); // query transactions created during the last 7 days&#xA;Transaction::ofLast21Days(); // query transactions created during the last 21 days&#xA;Transaction::ofLast30Days(); // query transactions created during the last 30 days&#xA;Transaction::ofLastDays(60); // query transactions created during the last N days&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Weeks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by WEEKS&#xA;Transaction::ofLastWeek(); // query transactions created during the last week&#xA;Transaction::ofLast2Weeks(); // query transactions created during the last 2 weeks&#xA;Transaction::ofLast3Weeks(); // query transactions created during the last 3 weeks&#xA;Transaction::ofLast4Weeks(); // query transactions created during the last 4 weeks&#xA;Transaction::ofLastWeeks(8); // query transactions created during the last N weeks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Months&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by MONTHS&#xA;Transaction::ofLastMonth(); // query transactions created during the last month&#xA;Transaction::ofLast3Months(); // query transactions created during the last 3 months&#xA;Transaction::ofLast6Months(); // query transactions created during the last 6 months&#xA;Transaction::ofLast9Months(); // query transactions created during the last 9 months&#xA;Transaction::ofLast12Months(); // query transactions created during the last 12 months&#xA;Transaction::ofLastMonths(24); // query transactions created during the last N months&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quarters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by QUARTERS&#xA;Transaction::ofLastQuarter(); // query transactions created during the last quarter&#xA;Transaction::ofLast2Quarters(); // query transactions created during the last 2 quarters&#xA;Transaction::ofLast3Quarters(); // query transactions created during the last 3 quarters&#xA;Transaction::ofLast4Quarters(); // query transactions created during the last 4 quarters&#xA;Transaction::ofLastQuarters(8); // query transactions created during the last N quarters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Years&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by YEARS&#xA;Transaction::ofLastYear(); // query transactions created during the last year&#xA;Transaction::ofLastYears(2); // query transactions created during the last N years&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decades&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by DECADES&#xA;Transaction::ofLastDecade(); // query transactions created during the last decade&#xA;Transaction::ofLastDecades(2); // query transactions created during the last N decades&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Millenniums&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by MILLENNIUMS&#xA;Transaction::ofLastMillennium(); // query transactions created during the last millennium&#xA;Transaction::ofLastMillenniums(2); // query transactions created during the last N millenniums&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;toNow/toDate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// query by toNow/toDate&#xA;Transaction::secondToNow(); // query transactions created during the start of the current second to now (not really usefull I guess)&#xA;Transaction::minuteToNow(); // query transactions created during the start of the current minute to now&#xA;Transaction::hourToNow(); // query transactions created during the start of the current hour to now&#xA;Transaction::dayToNow(); // query transactions created during the start of the current day to now&#xA;Transaction::weekToDate(); // query transactions created during the start of the current week to now&#xA;Transaction::monthToDate(); // query transactions created during the start of the current month to now&#xA;Transaction::quarterToDate(); // query transactions created during the start of the current quarter to now&#xA;Transaction::yearToDate(); // query transactions created during the start of the current year to now&#xA;Transaction::decadeToDate(); // query transactions created during the start of the current decade to now&#xA;Transaction::millenniumToDate(); // query transactions created during the start of the current millennium to now&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for more information on what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/laracraft-tech&#34;&gt;Zacharias Creutznacher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/laracraft-tech/laravel-date-scopes/main/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>