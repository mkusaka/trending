<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:33:15Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>webmozarts/assert</title>
    <updated>2022-08-02T01:33:15Z</updated>
    <id>tag:github.com,2022-08-02:/webmozarts/assert</id>
    <link href="https://github.com/webmozarts/assert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assertions to validate method input/output with nice error messages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Webmozart Assert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/webmozart/assert&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/webmozart/assert/v/stable.svg?sanitize=true&#34; alt=&#34;Latest Stable Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/webmozart/assert&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/webmozart/assert/downloads.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library contains efficient assertions to test the input and output of your methods. With these assertions, you can greatly reduce the amount of coding needed to write a safe implementation.&lt;/p&gt; &#xA;&lt;p&gt;All assertions in the &lt;a href=&#34;https://raw.githubusercontent.com/webmozarts/assert/master/src/Assert.php&#34;&gt;&lt;code&gt;Assert&lt;/code&gt;&lt;/a&gt; class throw an &lt;code&gt;Webmozart\Assert\InvalidArgumentException&lt;/code&gt; if they fail.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;What&#39;s the difference to &lt;a href=&#34;https://github.com/beberlei/assert&#34;&gt;beberlei/assert&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is heavily inspired by Benjamin Eberlei&#39;s wonderful &lt;a href=&#34;https://github.com/beberlei/assert&#34;&gt;assert package&lt;/a&gt;, but fixes a usability issue with error messages that can&#39;t be fixed there without breaking backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;This package features usable error messages by default. However, you can also easily write custom error messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Assert::string($path, &#39;The path is expected to be a string. Got: %s&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://github.com/beberlei/assert&#34;&gt;beberlei/assert&lt;/a&gt;, the ordering of the &lt;code&gt;%s&lt;/code&gt; placeholders is different for every assertion. This package, on the contrary, provides consistent placeholder ordering for all assertions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%s&lt;/code&gt;: The tested value as string, e.g. &lt;code&gt;&#34;/foo/bar&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%2$s&lt;/code&gt;, &lt;code&gt;%3$s&lt;/code&gt;, ...: Additional assertion-specific values, e.g. the minimum/maximum length, allowed values, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check the source code of the assertions to find out details about the additional available placeholders.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://getcomposer.org&#34;&gt;Composer&lt;/a&gt; to install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require webmozart/assert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Webmozart\Assert\Assert;&#xA;&#xA;class Employee&#xA;{&#xA;    public function __construct($id)&#xA;    {&#xA;        Assert::integer($id, &#39;The employee ID must be an integer. Got: %s&#39;);&#xA;        Assert::greaterThan($id, 0, &#39;The employee ID must be a positive integer. Got: %s&#39;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you create an employee with an invalid ID, an exception is thrown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;new Employee(&#39;foobar&#39;);&#xA;// =&amp;gt; Webmozart\Assert\InvalidArgumentException:&#xA;//    The employee ID must be an integer. Got: string&#xA;&#xA;new Employee(-10);&#xA;// =&amp;gt; Webmozart\Assert\InvalidArgumentException:&#xA;//    The employee ID must be a positive integer. Got: -10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Assertions&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/webmozarts/assert/master/src/Assert.php&#34;&gt;&lt;code&gt;Assert&lt;/code&gt;&lt;/a&gt; class provides the following assertions:&lt;/p&gt; &#xA;&lt;h3&gt;Type Assertions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stringNotEmpty($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a non-empty string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integerish($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value casts to an integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;positiveInteger($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a positive (non-zero) integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;numeric($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is numeric&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;natural($value, $message= &#39;&#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a non-negative integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scalar($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a scalar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;object($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resource($value, $type = null, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a resource&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isCallable($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a callable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isArray($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isTraversable($value, $message = &#39;&#39;)&lt;/code&gt; (deprecated)&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an array or a &lt;code&gt;\Traversable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isIterable($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an array or a &lt;code&gt;\Traversable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isCountable($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an array or a &lt;code&gt;\Countable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isInstanceOf($value, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an &lt;code&gt;instanceof&lt;/code&gt; a class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isInstanceOfAny($value, array $classes, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an &lt;code&gt;instanceof&lt;/code&gt; at least one class on the array of classes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notInstanceOf($value, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is not an &lt;code&gt;instanceof&lt;/code&gt; a class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isAOf($value, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is of the class or has one of its parents&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isAnyOf($value, array $classes, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is of at least one of the classes or has one of its parents&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isNotA($value, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is not of the class or has not one of its parents&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isArrayAccessible($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value can be accessed as an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uniqueValues($values, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the given array contains unique values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Comparison Assertions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;true($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;false($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notFalse($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is not &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;null($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is &lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notNull($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is not &lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isEmpty($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is &lt;code&gt;empty()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notEmpty($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is not &lt;code&gt;empty()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;eq($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value equals another (&lt;code&gt;==&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notEq($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value does not equal another (&lt;code&gt;!=&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;same($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is identical to another (&lt;code&gt;===&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notSame($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is not identical to another (&lt;code&gt;!==&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;greaterThan($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is greater than another&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;greaterThanEq($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is greater than or equal to another&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lessThan($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is less than another&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lessThanEq($value, $value2, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is less than or equal to another&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range($value, $min, $max, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is within a range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;inArray($value, array $values, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is one of a list of values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;oneOf($value, array $values, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is one of a list of values (alias of &lt;code&gt;inArray&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;String Assertions&lt;/h3&gt; &#xA;&lt;p&gt;You should check that a value is a string with &lt;code&gt;Assert::string()&lt;/code&gt; before making any of the following assertions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contains($value, $subString, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains a substring&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notContains($value, $subString, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string does not contain a substring&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;startsWith($value, $prefix, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string has a prefix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notStartsWith($value, $prefix, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string does not have a prefix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;startsWithLetter($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string starts with a letter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;endsWith($value, $suffix, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string has a suffix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notEndsWith($value, $suffix, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string does not have a suffix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;regex($value, $pattern, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string matches a regular expression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notRegex($value, $pattern, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string does not match a regular expression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unicodeLetters($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains Unicode letters only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alpha($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains letters only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;digits($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains digits only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alnum($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains letters and digits only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lower($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains lowercase characters only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;upper($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains uppercase characters only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;length($value, $length, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string has a certain number of characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;minLength($value, $min, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string has at least a certain number of characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;maxLength($value, $max, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string has at most a certain number of characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lengthBetween($value, $min, $max, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string has a length in the given range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string is a valid UUID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ip($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string is a valid IP (either IPv4 or IPv6)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ipv4($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string is a valid IPv4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ipv6($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string is a valid IPv6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;email($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string is a valid e-mail address&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notWhitespaceOnly($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a string contains at least one non-whitespace character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;File Assertions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fileExists($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an existing path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an existing file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;directory($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an existing directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;readable($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a readable path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;writable($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a writable path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Object Assertions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;classExists($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an existing class name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;subclassOf($value, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a class is a subclass of another&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interfaceExists($value, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is an existing interface name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;implementsInterface($value, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a class implements an interface&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;propertyExists($value, $property, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a property exists in a class/object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;propertyNotExists($value, $property, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a property does not exist in a class/object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;methodExists($value, $method, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a method exists in a class/object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;methodNotExists($value, $method, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a method does not exist in a class/object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Array Assertions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keyExists($array, $key, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a key exists in an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;keyNotExists($array, $key, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a key does not exist in an array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;validArrayKey($key, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a value is a valid array key (int or string)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;count($array, $number, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array contains a specific number of elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;minCount($array, $min, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array contains at least a certain number of elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;maxCount($array, $max, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array contains at most a certain number of elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;countBetween($array, $min, $max, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array has a count in the given range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isList($array, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array is a non-associative list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isNonEmptyList($array, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array is a non-associative list, and not empty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isMap($array, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array is associative and has strings as keys&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isNonEmptyMap($array, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that an array is associative and has strings as keys, and is not empty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Function Assertions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;throws($closure, $class, $message = &#39;&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that a function throws a certain exception. Subclasses of the exception class will be accepted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Collection Assertions&lt;/h3&gt; &#xA;&lt;p&gt;All of the above assertions can be prefixed with &lt;code&gt;all*()&lt;/code&gt; to test the contents of an array or a &lt;code&gt;\Traversable&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Assert::allIsInstanceOf($employees, &#39;Acme\Employee&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nullable Assertions&lt;/h3&gt; &#xA;&lt;p&gt;All of the above assertions can be prefixed with &lt;code&gt;nullOr*()&lt;/code&gt; to run the assertion only if it the value is not &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Assert::nullOrString($middleName, &#39;The middle name must be a string or null. Got: %s&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extending Assert&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Assert&lt;/code&gt; class comes with a few methods, which can be overridden to change the class behaviour. You can also extend it to add your own assertions.&lt;/p&gt; &#xA;&lt;h4&gt;Overriding methods&lt;/h4&gt; &#xA;&lt;p&gt;Overriding the following methods in your assertion class allows you to change the behaviour of the assertions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;public static function __callStatic($name, $arguments)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This method is used to &#39;create&#39; the &lt;code&gt;nullOr&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt; versions of the assertions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected static function valueToString($value)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This method is used for error messages, to convert the value to a string value for displaying. You could use this for representing a value object with a &lt;code&gt;__toString&lt;/code&gt; method for example.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected static function typeToString($value)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This method is used for error messages, to convert the a value to a string representing its type.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected static function strlen($value)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This method is used to calculate string length for relevant methods, using the &lt;code&gt;mb_strlen&lt;/code&gt; if available and useful.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected static function reportInvalidArgument($message)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This method is called when an assertion fails, with the specified error message. Here you can throw your own exception, or log something.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Static analysis support&lt;/h2&gt; &#xA;&lt;p&gt;Where applicable, assertion functions are annotated to support Psalm&#39;s &lt;a href=&#34;https://psalm.dev/docs/annotating_code/assertion_syntax/&#34;&gt;Assertion syntax&lt;/a&gt;. A dedicated &lt;a href=&#34;https://github.com/phpstan/phpstan-webmozart-assert&#34;&gt;PHPStan Plugin&lt;/a&gt; is required for proper type support.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webmozarts.com&#34;&gt;Bernhard Schussek&lt;/a&gt; a.k.a. &lt;a href=&#34;https://twitter.com/webmozart&#34;&gt;@webmozart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webmozart/assert/graphs/contributors&#34;&gt;The Community Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to the package are always welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report any bugs or issues you find on the &lt;a href=&#34;https://github.com/webmozart/assert/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can grab the source code at the package&#39;s &lt;a href=&#34;https://github.com/webmozart/assert&#34;&gt;Git repository&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All contents of this package are licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/webmozarts/assert/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>symfony/polyfill-mbstring</title>
    <updated>2022-08-02T01:33:15Z</updated>
    <id>tag:github.com,2022-08-02:/symfony/polyfill-mbstring</id>
    <link href="https://github.com/symfony/polyfill-mbstring" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This component provides a partial, native PHP implementation for the Mbstring extension.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony Polyfill / Mbstring&lt;/h1&gt; &#xA;&lt;p&gt;This component provides a partial, native PHP implementation for the &lt;a href=&#34;https://php.net/mbstring&#34;&gt;Mbstring&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;More information can be found in the &lt;a href=&#34;https://github.com/symfony/polyfill/raw/main/README.md&#34;&gt;main Polyfill README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This library is released under the &lt;a href=&#34;https://raw.githubusercontent.com/symfony/polyfill-mbstring/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>owncloud/core</title>
    <updated>2022-08-02T01:33:15Z</updated>
    <id>tag:github.com,2022-08-02:/owncloud/core</id>
    <link href="https://github.com/owncloud/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;☁️ ownCloud web server core (Files, DAV, etc.)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ownCloud Core&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drone.owncloud.com/owncloud/core&#34;&gt;&lt;img src=&#34;https://drone.owncloud.com/api/badges/owncloud/core/status.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owncloud_core&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owncloud_core&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owncloud_core&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owncloud_core&amp;amp;metric=security_rating&#34; alt=&#34;Security Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owncloud_core&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owncloud_core&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://ownCloud.com&#34;&gt;ownCloud&lt;/a&gt; gives you freedom and control over your own data. A personal cloud which runs on your own server.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/owncloud/screenshots/raw/master/files/sidebar_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Is This so Awesome?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;📁&lt;/span&gt; &lt;strong&gt;Access your Data&lt;/strong&gt; You can store your files, contacts, calendars and more on a server of your choosing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📦&lt;/span&gt; &lt;strong&gt;Sync your Data&lt;/strong&gt; You keep your files, contacts, calendars and more synchronized amongst your devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🔄&lt;/span&gt; &lt;strong&gt;Share your Data&lt;/strong&gt; You share your data with others, and give them access to your latest photo galleries, your calendar or anything else you want them to see.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;Expandable with dozens of Apps&lt;/strong&gt; ...like Calendar, Contacts, Mail or News.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;☁&lt;/span&gt; &lt;strong&gt;All Benefits of the Cloud&lt;/strong&gt; ...on your own Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🔒&lt;/span&gt; &lt;strong&gt;Encryption&lt;/strong&gt; You can encrypt data in transit with secure https connections. You can enable the encryption app to encrypt data on storage for improved security and privacy.&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;For installing ownCloud, see the official &lt;a href=&#34;https://doc.owncloud.com/server/latest/admin_manual/installation/&#34;&gt;ownCloud 10&lt;/a&gt; installation manual.&lt;/p&gt; &#xA;&lt;h2&gt;Development Build Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Note that when doing a local development build, you need to have &lt;strong&gt;Composer v2&lt;/strong&gt; installed. If your OS provides a lower version than v2, you can install Composer v2 manually. As an example, which may be valid for other releases/distros too, see &lt;a href=&#34;https://www.how2shout.com/linux/how-to-install-composer-on-ubuntu-22-04-20-04-lts/&#34;&gt;How to install Composer on Ubuntu 22.04 | 20.04 LTS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You also must have installed &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt; (v14 or higher).&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://owncloud.com/contribute/&#34;&gt;https://owncloud.com/contribute/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Learn about the different ways you can get support for ownCloud: &lt;a href=&#34;https://owncloud.com/support/&#34;&gt;https://owncloud.com/support/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get in Touch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;📋&lt;/span&gt; &lt;a href=&#34;https://central.owncloud.org&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;#⃣&lt;/span&gt; &lt;a href=&#34;https://web.libera.chat/?channels=#owncloud&#34;&gt;IRC channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;👥&lt;/span&gt; &lt;a href=&#34;https://facebook.com/ownclouders&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🐣&lt;/span&gt; &lt;a href=&#34;https://twitter.com/ownCloud&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important Notice on Translations&lt;/h2&gt; &#xA;&lt;p&gt;Please submit translations via Transifex: &lt;a href=&#34;https://www.transifex.com/projects/p/owncloud/&#34;&gt;https://www.transifex.com/projects/p/owncloud/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the detailed information about &lt;a href=&#34;https://doc.owncloud.com/server/latest/developer_manual/core/translation.html&#34;&gt;translations&lt;/a&gt; here.&lt;/p&gt;</summary>
  </entry>
</feed>