<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PHP Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-09T01:32:00Z</updated>
  <subtitle>Daily Trending of PHP in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kanboard/kanboard</title>
    <updated>2022-07-09T01:32:00Z</updated>
    <id>tag:github.com,2022-07-09:/kanboard/kanboard</id>
    <link href="https://github.com/kanboard/kanboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kanban project management software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kanboard&lt;/h1&gt; &#xA;&lt;p&gt;Kanboard is project management software that focuses on the Kanban methodology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This software is in maintenance mode&lt;/strong&gt;. It doesn&#39;t mean it&#39;s abandoned, but there is no significant feature development. Pull-requests are still accepted as long as the &lt;a href=&#34;https://raw.githubusercontent.com/kanboard/kanboard/master/.github/pull_request_template.md&#34;&gt;guidelines&lt;/a&gt; are followed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official website: &lt;a href=&#34;https://kanboard.org/&#34;&gt;https://kanboard.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kanboard.org/#features&#34;&gt;List of features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kanboard/kanboard/raw/master/ChangeLog&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kanboard.discourse.group/&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Official documentation: &lt;a href=&#34;https://docs.kanboard.org/&#34;&gt;https://docs.kanboard.org/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.kanboard.org/en/latest/admin_guide/requirements.html&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.kanboard.org/en/latest/admin_guide/installation.html&#34;&gt;Installation instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.kanboard.org/en/latest/admin_guide/upgrade.html&#34;&gt;Upgrade to a new version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.kanboard.org/en/latest/admin_guide/docker.html&#34;&gt;Use Kanboard with Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main developer: Frédéric Guillot&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kanboard/kanboard/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Distributed under &lt;a href=&#34;https://github.com/kanboard/kanboard/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>imanghafoori1/laravel-microscope</title>
    <updated>2022-07-09T01:32:00Z</updated>
    <id>tag:github.com,2022-07-09:/imanghafoori1/laravel-microscope</id>
    <link href="https://github.com/imanghafoori1/laravel-microscope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fearless refactoring, it does a lot of smart checks to find certain errors.&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt; Find Bugs Before They Bite &lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300px&#34; src=&#34;https://user-images.githubusercontent.com/6961695/78522127-920e9e80-77e1-11ea-869a-05a29466e6b0.png&#34; alt=&#34;widgetize_header&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; Built with &lt;span&gt;❤️&lt;/span&gt; for lazy laravel developers ;) &lt;/h4&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Why repeat the old errors, if there are so many new errors to commit. &lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; (Bertrand Russel) &lt;/h3&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt; Give your eyes a rest, we will detect and fix them for you. &lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Laravel-%E2%89%A5%205.4-ff2d20?style=flat-square&amp;amp;logo=laravel&#34; alt=&#34;Required Laravel Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/php-v/imanghafoori/laravel-microscope?color=%238892BF&amp;amp;style=flat-square&amp;amp;logo=php&#34; alt=&#34;Required PHP Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/imanghafoori/laravel-microscope.svg?style=flat-square&#34; alt=&#34;Latest Version on Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scrutinizer-ci.com/g/imanghafoori1/laravel-microscope&#34;&gt;&lt;img src=&#34;https://img.shields.io/scrutinizer/g/imanghafoori1/laravel-microscope.svg?style=flat-square&amp;amp;logo=scrutinizer&#34; alt=&#34;Quality Score&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dt/imanghafoori/laravel-microscope.svg?style=flat-square&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope/stats&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dd/imanghafoori/laravel-microscope.svg?style=flat-square&#34; alt=&#34;Today Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;&lt;p align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/8d75e05f4b67de65b51e10772b054f506aa8cfab/68747470733a2f2f696d672e736869656c64732e696f2f7061636b61676973742f762f696d616e676861666f6f72692f6c61726176656c2d6d6963726f73636f70652e7376673f7374796c653d666c61742d737175617265&#34; alt=&#34;Latest Version on Packagist&#34; data-canonical-src=&#34;https://img.shields.io/packagist/v/imanghafoori/laravel-microscope.svg?style=round-square&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://travis-ci.org/imanghafoori1/laravel-self-test&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/63b18ae839896de4604ede21595326389fed0b1f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f696d616e676861666f6f7269312f6c61726176656c2d73656c662d746573742f6d61737465722e7376673f7374796c653d666c61742d737175617265&#34; alt=&#34;Build Status&#34; data-canonical-src=&#34;https://img.shields.io/travis/imanghafoori1/laravel-self-test/master.svg?style=round-square&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://scrutinizer-ci.com/g/imanghafoori1/laravel-microscope&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/ee6d1b9eee22268201b7e253867c6bb64838651e/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f696d616e676861666f6f7269312f6c61726176656c2d6d6963726f73636f70652e7376673f7374796c653d666c61742d737175617265&#34; alt=&#34;Quality Score&#34; data-canonical-src=&#34;https://img.shields.io/scrutinizer/g/imanghafoori1/laravel-microscope.svg?style=round-square&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/5441e915afbdb81de92b808965f294b0c7d18c52/68747470733a2f2f706f7365722e707567782e6f72672f696d616e676861666f6f72692f6c61726176656c2d6d6963726f73636f70652f642f6461696c79&#34; alt=&#34;Daily Downloads&#34; data-canonical-src=&#34;https://poser.pugx.org/imanghafoori/laravel-microscope/d/daily&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://packagist.org/packages/imanghafoori/laravel-microscope&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/7f10826df8cf3fb52525fd2494554c0e587b8bb7/68747470733a2f2f696d672e736869656c64732e696f2f7061636b61676973742f64742f696d616e676861666f6f72692f6c61726176656c2d6d6963726f73636f70652e7376673f7374796c653d666c61742d737175617265&#34; alt=&#34;Total Downloads&#34; data-canonical-src=&#34;https://img.shields.io/packagist/dt/imanghafoori/laravel-microscope.svg?style=round-square&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;/imanghafoori1/laravel-microscope/blob/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/d885b3999bb863974fb67118174bb0402d089a89/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d726f756e642d737175617265&#34; alt=&#34;Software License&#34; data-canonical-src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=round-square&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Table Of Contents&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#key-things-to-know&#34;&gt;Key Things To Know&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#usefull-commands&#34;&gt;Usefull Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#less-use-commands&#34;&gt;Less Use Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#global-helper-functions&#34;&gt;Gloabl Helper Functions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#what-the-commands-do&#34;&gt;What The Commands Do?&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;show commands&lt;/summary&gt; &#xA;     &lt;ol&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#search_replace&#34;&gt;&lt;code&gt;php artisan search_replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#defining-patterns&#34;&gt;Defining Patterns&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#placeholders&#34;&gt;Placeholders&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#mutator&#34;&gt;Mutator&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#filters&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#capturing-php-statements&#34;&gt;Capturing Php &#34;statements&#34;&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#capturing-global&#34;&gt;Capturing Global Function Calls&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#repeating-patterns&#34;&gt;Repeating Patterns&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#early_returns&#34;&gt;&lt;code&gt;php artisan check:early_returns&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#psr4&#34;&gt;&lt;code&gt;php artisan check:psr4&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#generate&#34;&gt;&lt;code&gt;php artisan check:generate&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#imports&#34;&gt;&lt;code&gt;php artisan check:imports&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#bad_practices&#34;&gt;&lt;code&gt;php artisan check:bad_practices&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#routes&#34;&gt;&lt;code&gt;php artisan check:routes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#compact&#34;&gt;&lt;code&gt;php artisan check:compact&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#blade_queries&#34;&gt;&lt;code&gt;php artisan check:blade_queries&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#extract_blades&#34;&gt;&lt;code&gt;php artisan check:extract_blades&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#action_comments&#34;&gt;&lt;code&gt;php artisan check:action_comments&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#route&#34;&gt;&lt;code&gt;php artisan pp:route&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#views&#34;&gt;&lt;code&gt;php artisan check:views&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#events&#34;&gt;&lt;code&gt;php artisan check:events&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#gates&#34;&gt;&lt;code&gt;php artisan check:gates&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ol&gt; &#xA;    &lt;/details&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt;  &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#more-from-author&#34;&gt;More From The Author&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;key-things-to-know&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key things to know:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is created to be &lt;strong&gt;smarter than phpstorm&lt;/strong&gt; and other IDEs in finding errors.&lt;/li&gt; &#xA; &lt;li&gt;It is created to &lt;strong&gt;understand laravel run-time&lt;/strong&gt; and magic.&lt;/li&gt; &#xA; &lt;li&gt;It does &lt;strong&gt;not show you stupid false errors&lt;/strong&gt;, all the errors are really errors.&lt;/li&gt; &#xA; &lt;li&gt;Even If you have written a lot of tests for your app, &lt;strong&gt;you may still need this&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It can refactor your code&lt;/strong&gt;, by applying &lt;code&gt;early returns&lt;/code&gt; automatically.&lt;/li&gt; &#xA; &lt;li&gt;It is written from scratch to yield the &lt;strong&gt;maximum performance&lt;/strong&gt; possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;🎞&lt;/span&gt; Video tutorial &lt;a href=&#34;https://youtu.be/aEkiE30wNKk&#34;&gt;here&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;span&gt;⭐&lt;/span&gt; Your Stars Make Us Do More&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you found this package useful, and you want to encourage the maintainer to work on it, just press the star button to declare your willingness.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/imanghafoori1/microscope/stargazers&#34;&gt;Stargazers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&#xA; &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;arrow_down&#34; fallback-src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/2b07.png&#34;&gt;&#xA;  ⬇️&#xA; &lt;/g-emoji&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;install&lt;/strong&gt; the package via composer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require imanghafoori/laravel-microscope --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also &lt;strong&gt;publish&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php artisan vendor:publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;usage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&#xA; &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;gem&#34; fallback-src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png&#34;&gt;&#xA;  💎&#xA; &lt;/g-emoji&gt; Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Usefull Commands:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can run &lt;span&gt;👇&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;Artisan Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan search_replace&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:early_returns&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:all&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;less-use-commands&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Less Use Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;Artisan Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:views&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:routes&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:psr4 {-s|--nofix} &lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:imports {-s|--nofix}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:stringy_classes&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:dd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:bad_practices&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:compact&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:blade_queries&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:action_comments&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:extract_blades&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan pp:route&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:generate&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:endif&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:events&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;php artisan check:gates&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;global-helper-functions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Global Helper Functions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Also You will have access to some global helper functions&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;microscope_dd_listeners($event);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you wonder what the listeners are and where they are, you can call &lt;code&gt;microscope_dd_listeners(MyEvent::class);&lt;/code&gt; within either the &lt;code&gt;boot&lt;/code&gt; or &lt;code&gt;register&lt;/code&gt; methods. It works like a normal &lt;code&gt;dd(...);&lt;/code&gt; meaning that the program stops running at that point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;what-the-commands-do&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&#xA; &lt;g-emoji class=&#34;g-emoji&#34; alias=&#34;book&#34; fallback-src=&#34;https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png&#34;&gt;&#xA;  📖&#xA; &lt;/g-emoji&gt; What the Commands do?&lt;/h2&gt; &#xA;&lt;p&gt;Lets start with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;search_replace&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan search_replace {--name=pattern_name} {--tag=some_tag}&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is a smart and very powerful search/replace functionality that can be a real &#34;time saver&#34; for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;defining-patterns&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;span&gt;1⃣&lt;/span&gt; Defining patterns:&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you run the command &lt;code&gt;artisan search_replace&lt;/code&gt; for the first time, it will create a &lt;code&gt;search_replace.php&lt;/code&gt; file in the project&#39;s root. Then, you can define your patterns, within that file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lets define a pattern to replace the &lt;code&gt;optional()&lt;/code&gt; global helper with the &lt;code&gt;?-&amp;gt;&lt;/code&gt; php 8 null safe operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;optional_to_nullsafe&#39; =&amp;gt; [&#xA;        &#39;search&#39; =&amp;gt; &#39;&#34;&amp;lt;global_func_call:optional&amp;gt;&#34;(&#34;&amp;lt;in_between&amp;gt;&#34;)-&amp;gt;&#39;,&#xA;        &#39;replace&#39; =&amp;gt; &#39;&#34;&amp;lt;2&amp;gt;&#34;?-&amp;gt;&#39;,&#xA;        // &#39;tag&#39; =&amp;gt; &#39;php8,refactor&#39;,&#xA;        // &#39;predicate&#39; =&amp;gt; function($matches, $tokens) {...},&#xA;        // &#39;mutator&#39; =&amp;gt; function($matches) {...},&#xA;        // &#39;post_replace&#39; =&amp;gt; [...],&#xA;        // &#39;avoid_result_in&#39; =&amp;gt; [...],&#xA;        // &#39;avoid_syntax_errors&#39; =&amp;gt; false,&#xA;        // &#39;filters&#39; =&amp;gt; [...],&#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here the key &lt;code&gt;optional_to_nullsafe&lt;/code&gt; is the &#34;unique name&#34; of your pattern. (You can target your pattern by running &lt;code&gt;php artisan search_replace --name=optional_to_nullsafe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The search pattern has &lt;code&gt;&#34;&amp;lt;in_between&amp;gt;&#34;&lt;/code&gt; placeholder which captures everything in between the pair of parenthesis.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;replace&lt;/code&gt; block we substitute what we have captured by the first placeholder with the &lt;code&gt;&#34;&amp;lt;1&amp;gt;&#34;&lt;/code&gt;. If we have more placeholders, we could have had &lt;code&gt;&#34;&amp;lt;2&amp;gt;&#34;&lt;/code&gt; and etc.&lt;/li&gt; &#xA; &lt;li&gt;In the tag block we can mention some tags as an array of strings or a string separated by commas and target them by &lt;code&gt;--tag&lt;/code&gt; flag: &lt;code&gt;php artisan search_replace --tag=php8&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;placeholders&#34;&gt;&lt;/a&gt; &lt;span&gt;2⃣&lt;/span&gt; &lt;strong&gt;Placeholders:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a comprehensive list of placeholders you can use:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;Placeholders&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for variables like: &lt;code&gt;$user&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;str&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for hard coded strings: &lt;code&gt;&#39;hello&#39;&lt;/code&gt; or &#34;hello&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;class_ref&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for class references: &lt;code&gt;\App\User::where(...&lt;/code&gt; , &lt;code&gt;User::where&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;full_class_ref&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;only for full references: &lt;code&gt;\App\User::&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;until&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;to capture all the code until you reach a certain character.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;comment&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for comments (it does not capture doc-blocks beginning with: /** )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;doc_block&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for php doc-blocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;to capture a whole php statement.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;name:nam1,nam2&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for method or function names. &lt;code&gt;-&amp;gt;where&lt;/code&gt; or &lt;code&gt;::where&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;white_space&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for whitespace blocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;boolean&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for true or false (acts case-insensetive)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for numeric values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;cast&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for type-casts like: &lt;code&gt;(array) $a;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; or &lt;code&gt;&#34;&amp;lt;integer&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for integer values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;visibility&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for public, protected, private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for floating point number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;&amp;lt;global_func_call:func1,func2&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;to detect global function calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;in_between&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;to capture code within a pair of &lt;code&gt;{...}&lt;/code&gt; or &lt;code&gt;(...)&lt;/code&gt; or &lt;code&gt;[...]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;captures any token.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can also define your own keywords if needed!&lt;/p&gt; &#xA; &lt;p&gt;You just define a class for your new keyword and append the class path to the end of the &lt;code&gt;Finder::$keywords[] = MyKeyword::class&lt;/code&gt; property. Just like the default keywords.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;1⃣&lt;/span&gt; Lets say you want to find only the &#34;comments&#34; which contain the word &#34;todo:&#34; in them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; &#39;todo_comments&#39; =&amp;gt; [&#xA;        &#39;search&#39; =&amp;gt; &#39;&amp;lt;comment&amp;gt;&#39;,&#xA;        &#39;predicate&#39; =&amp;gt; function($matches) {    //   &amp;lt;====  here we check comment has &#34;todo:&#34;&#xA;            $comment = $matches[0]; // first placehoder value&#xA;            $content = $comment[1]; // get its content&#xA;            &#xA;            return Str::contains($content, &#39;todo:&#39;) ? true : false;&#xA;        },&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; If you do not mention the &lt;code&gt;&#39;replace&#39;&lt;/code&gt; key it only searches and reports them to you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;2⃣&lt;/span&gt; Ok, now lets say you want to remove the &#34;todo:&#34; word from your comments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; &#39;remove_todo_comments&#39; =&amp;gt; [&#xA;    &#39;search&#39; =&amp;gt; &#39;&amp;lt;comment&amp;gt;&#39;,      //   &amp;lt;=== we capture any comment&#xA;    &#39;replace&#39; =&amp;gt; &#39;&amp;lt;1&amp;gt;&#39;,&#xA;&#xA;    &#39;predicate&#39; =&amp;gt; function($matches) {&#xA;        $comment = $matches[0]; // first matched placehoder&#xA;        $content = $comment[1];&#xA;&#xA;        return Str::contains($content, &#39;todo:&#39;) ? true : false;&#xA;    },&#xA;&#xA;    &#39;mutator&#39; =&amp;gt; function ($matches) {       //  &amp;lt;=== here we remove &#34;todo:&#34;&#xA;        $matches[0][1] = str_replace(&#39;todo:&#39;, &#39;&#39;, $matches[0][1]);&#xA;&#xA;        return $matches;&#xA;    }&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Converts: &lt;code&gt; // todo: refactor code&lt;/code&gt; Into: &lt;code&gt; // refactor code&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;mutator&#34;&gt;&lt;/a&gt; &lt;span&gt;3⃣&lt;/span&gt; &lt;strong&gt;Mutator:&lt;/strong&gt; In mutators you are free to manipulate the &lt;code&gt;$matched&lt;/code&gt; values as much as you need to before replacing them in the results. You can also mention a static method instead of a function, like this: &lt;code&gt;[MyClass::class, &#39;myStaticMethod&#39;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;3⃣&lt;/span&gt; Lets say you want to put the optional comma for the last elements in the arrays if they are missing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    &#39;enforce_optional_comma&#39; =&amp;gt; [&#xA;        &#39;search&#39; =&amp;gt; &#39;&amp;lt;white_space&amp;gt;?]&#39;,&#xA;        &#39;replace&#39; =&amp;gt; &#39;,&#34;&amp;lt;1&amp;gt;&#34;]&#39;,&#xA;        &#39;avoid_syntax_errors&#39; =&amp;gt; true,&#xA;        &#39;avoid_result_in&#39; =&amp;gt; [&#xA;           &#39;,,]&#39;,&#xA;           &#39;[,]&#39;,&#xA;           &#39;&amp;lt;var&amp;gt;[,]&#39;&#xA;       ],&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case our pattern is not very accurate and in some cases it may result in syntax errors. Because of that we turn on php syntax validator to check the end result, but that costs us a performance penalty!!! In order to exclude the usage of php, to validate the end results we have mentioned the &lt;code&gt;avoid_result_in&lt;/code&gt; so that if they happen in the end result it skips.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;?&lt;/code&gt; in the &#34;&amp;lt;white_space&amp;gt;?&#34; notes this is an &lt;code&gt;optional&lt;/code&gt; placeholder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are curious to see a better pattern which does not need any syntax checking, try this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;enforce_optional_comma&#39; =&amp;gt; [&#xA;       &#39;search&#39; =&amp;gt; &#39;&amp;lt;1:any&amp;gt;&amp;lt;2:white_space&amp;gt;?[&amp;lt;3:until_match&amp;gt;]&#39;,&#xA;       &#39;replace&#39; =&amp;gt; &#39;&amp;lt;1&amp;gt;&amp;lt;2&amp;gt;[&amp;lt;3&amp;gt;,]&#39;,&#xA;       &#39;avoid_result_in&#39; =&amp;gt; [&#xA;           &#39;,,]&#39;,&#xA;           &#39;[,]&#39;&#xA;       ],&#xA;       &#39;predicate&#39; =&amp;gt; function ($matches) {&#xA;           $type = $matches[&#39;values&#39;][0][0];&#xA;&#xA;           return $type !== T_VARIABLE &amp;amp;&amp;amp; $type !== &#39;]&#39;;&#xA;       },&#xA;       &#39;post_replace&#39; =&amp;gt; [&#xA;           &#39;&amp;lt;1:white_space&amp;gt;,]&#39; =&amp;gt; &#39;,&amp;lt;1&amp;gt;]&#39;&#xA;       ]&#xA;],&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is more complex but works much faster. (since it does not need the php syntax validator)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Here &lt;code&gt;&#39;post_replace&#39;&lt;/code&gt; is a pattern which is applied only and only on the resulting code to refine it, and NOT on the entire file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can optionally comment your placeholders (as above &lt;code&gt;&amp;lt;1:any&amp;gt;&lt;/code&gt;) with numbers, so that you know which one corresponds to which when replaced.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;filters&#34;&gt;&lt;/a&gt; &lt;span&gt;4⃣&lt;/span&gt; &lt;strong&gt;Filters:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently the microscope offers only two built-in filters: &lt;code&gt;is_sub_class_of&lt;/code&gt; and &lt;code&gt;in_array&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Can you guess what the heck this pattern is doing?!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt; &#39;mention_query&#39; =&amp;gt; [&#xA;      &#39;search&#39; =&amp;gt; &#39;&amp;lt;1:class_ref&amp;gt;::&amp;lt;2:name&amp;gt;&#39;&#xA;      &#39;replace&#39; =&amp;gt; &#39;&amp;lt;1&amp;gt;::query()-&amp;gt;&amp;lt;2&amp;gt;&#39;,&#xA;      &#39;filters&#39; =&amp;gt; [&#xA;          1 =&amp;gt; [&#xA;              &#39;is_sub_class_of&#39; =&amp;gt; \Illuminate\Database\Eloquent\Model::class&#xA;          ],&#xA;          2 =&amp;gt; [&#xA;              &#39;in_array&#39; =&amp;gt; &#39;where,count,find,findOrFail,findOrNew&#39;&#xA;          ]&#xA;      ]&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It converts these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::where(...)-&amp;gt;get();&#xA;&#xA;\App\Models\User::find(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Into these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::query()-&amp;gt;where(...)-&amp;gt;get();&#xA;&#xA;\App\Models\User::query()-&amp;gt;find(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The filters here ensure that the captured class reference is a laravel Model and the mathod name is one of the names mentioned in the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So it does not tamper with something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User::all();            // The `all` method can not be preceded with `query`&#xA;&#xA;UserRepo::where(...);   /// UserRepo is not a model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is something which you can never do by regex.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;capturing-php-statements&#34;&gt;&lt;/a&gt; &lt;span&gt;5⃣&lt;/span&gt; &lt;strong&gt;Capturing php &#34;statements&#34;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lets say we want to opt-into php 7.4 arrow functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;fn&#39; =&amp;gt; [&#xA;    &#39;search&#39; =&amp;gt; &#39;function (&amp;lt;in_between&amp;gt;)&amp;lt;until&amp;gt;{ &amp;lt;statement&amp;gt; }&#39;,&#xA;    &#39;replace&#39; =&amp;gt; &#39;fn (&amp;lt;1&amp;gt;) =&amp;gt; &amp;lt;3&amp;gt;&#39;,&#xA;    &#39;tags&#39; =&amp;gt; &#39;php74,refactor&#39;,&#xA;    &#39;mutator&#39; =&amp;gt; function ($matches) {&#xA;      $matches[2][1] = str_replace([&#39;return &#39;, &#39;;&#39;], &#39;&#39;, $matches[2][1]);&#xA;&#xA;      return $matches;&#xA;    }&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, we have mentioned one single &#34;statement&#34; in the body of the function. So if it encounters a function with two or more statements it will ignore that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$closure = function ($a) use ($b) {&#xA;    return $a + $b;&#xA;};&#xA;&#xA;// will become:&#xA;$closure = fn($a) =&amp;gt; $a + $hello;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But this is not captured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$closure = function ($a) {&#xA;    $a++;&#xA;    return $a + $b;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;6⃣&lt;/span&gt; &lt;strong&gt;Difference between &lt;code&gt;&amp;lt;statement&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;until&amp;gt;;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They seem to be very similar but there is an important case which you can not use &lt;code&gt;&amp;lt;until&amp;gt;;&lt;/code&gt; in order to cover it properly!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$first = $a + $b;&#xA;&#xA;$second = function ($a) {&#xA;    $a++;&#xA;&#xA;    return $a;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we define our pattern like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;staty&#39; =&amp;gt; [&#xA;        &#39;search&#39; =&amp;gt; &#39;&amp;lt;var&amp;gt; = &amp;lt;until&amp;gt;;&#39;,   &#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;$c = $a + $b;&lt;/code&gt; they act the same way, but for the second one &lt;code&gt;&#34;&amp;lt;until&amp;gt;&#34;;&lt;/code&gt; will not capture the whole closure and will stop as soon as it reaches &lt;code&gt;$a++;&lt;/code&gt; and that is a problem.&lt;/p&gt; &#xA;&lt;p&gt;But if you define your pattern as: &lt;code&gt;&#39;&amp;lt;var&amp;gt; = &amp;lt;statement&amp;gt;&#39;&lt;/code&gt; it would be smart enough to capture the correct semi-colon at the end of closure definition and whole close would be captured.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;capturing-global&#34;&gt;&lt;/a&gt; &lt;span&gt;7⃣&lt;/span&gt; &lt;strong&gt;Capturing global function calls:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lets say you want to eliminate all the &lt;code&gt;dd(...)&lt;/code&gt; or &lt;code&gt;dump(...)&lt;/code&gt; before pushing to production.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;return [&#xA;    &#39;remove_dd&#39; =&amp;gt; [&#xA;        &#39;search&#39; =&amp;gt;  &#34;&#39;&amp;lt;global_func_call:dd,dump&amp;gt;&#39;(&#39;&amp;lt;in_between&amp;gt;&#39;);&#34;, &#xA;        &#39;replace&#39; =&amp;gt; &#39;&#39;&#xA;    ]&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will NOT capture cases like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;  dd(&#39;hello&#39;);          // is technically a method call&#xA;User::   dd(&#39;I am static&#39;);    // is technically a static method call&#xA;new      dd(&#39;I am a classs&#39;);  // here &#34;dd&#34; is the name of a class.&#xA;   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But will detect and remove real global &lt;code&gt;dd()&lt;/code&gt; calls with whatever parameters they have recieved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dd(                // &amp;lt;=== will be detected, even the pattern above is written all in one line.&#xA;   auth(&#39;admin&#39;)&#xA;        -&amp;gt;user()-&amp;gt;id   &#xA;);&#xA;    &#xA;    &#xA;\dd(1);&#xA;dd(1);&#xA;dump(1);&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;repeating-patterns&#34;&gt;&lt;/a&gt; &lt;span&gt;8⃣&lt;/span&gt; &lt;strong&gt;Repeating patterns:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lets say we want to refactor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User:where(&#39;name&#39;, &#39;John&#39;)-&amp;gt;where(&#39;family&#39;, &#39;Dou&#39;)-&amp;gt;where(&#39;age&#39;, 20)-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;User:where([&#xA;    &#39;name&#39; =&amp;gt; &#39;John&#39;,&#xA;    &#39;family&#39; =&amp;gt; &#39;Dou&#39;,&#xA;    &#39;age&#39;=&amp;gt; 20,&#xA;])-&amp;gt;get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ok, how the pattern would look like then?!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#34;group_wheres&#34; =&amp;gt; [&#xA;       &#xA;       &#39;search&#39; =&amp;gt; &#39;&amp;lt;1:class_ref&amp;gt;::where(&#39;&amp;lt;2:str&amp;gt;&#39;, &#39;&amp;lt;3:str&amp;gt;&#39;)&#39;&amp;lt;repeating:wheres&amp;gt;&#39;-&amp;gt;get();&#39;&#xA;       &#xA;       &#39;replace&#39; =&amp;gt; &#39;&amp;lt;1&amp;gt;::where([&#xA;           &amp;lt;2&amp;gt; =&amp;gt; &amp;lt;3&amp;gt;,&#xA;           &#34;&amp;lt;repeating:1:key_values&amp;gt;&#34;])-&amp;gt;get();&#39;,&#xA;&#xA;       &#39;named_patterns&#39; =&amp;gt; [&#xA;           &#39;wheres&#39; =&amp;gt; &#39;-&amp;gt;where(&amp;lt;str&amp;gt;, &amp;lt;str&amp;gt;)&amp;lt;white_space&amp;gt;?&#39;,&#xA;           &#39;key_values&#39; =&amp;gt; &#39;&amp;lt;1&amp;gt; =&amp;gt; &amp;lt;2&amp;gt;,&amp;lt;3&amp;gt;&#39;,&#xA;       ]&#xA;   ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nice yeah??!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Possibilities are endless and the sky is the limit...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;early_returns&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:early_returns&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This will scan all your Psr-4 loaded classes and flattens your functions and loops by applying the early return rule. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;foreach ($products as $product) {&#xA;    if ($someCond) {&#xA;        // A lot of code 1&#xA;        // A lot of code 1&#xA;        // A lot of code 1&#xA;        // A lot of code 1&#xA;        // A lot of code 1&#xA;        if ($someOtherCond) {&#xA;            // A lot more code 2&#xA;            // A lot more code 2&#xA;            // A lot more code 2&#xA;            // A lot more code 2 &#xA;            // A lot more code 2&#xA;            //&#xA;        } // &amp;lt;--- closes second if&#xA;    } // &amp;lt;--- closes first if&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will be discovered and converted into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;foreach ($products as $product) {&#xA;    if (! $someCond) {&#xA;        continue;&#xA;    }&#xA;    &#xA;    // A lot of code 1&#xA;    // A lot of code 1&#xA;    // A lot of code 1&#xA;    // A lot of code 1&#xA;    // A lot of code 1&#xA;&#xA;    if (! $someOtherCond) {&#xA;        continue;&#xA;    }&#xA; &#xA;    // A lot more code 2&#xA;    // A lot more code 2&#xA;    // A lot more code 2&#xA;    // A lot more code 2 &#xA;    // A lot more code 2&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same thing will apply for functions and methods, but with &lt;code&gt;return&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;if ($cond1) {&#xA;    if ($cond2) {&#xA;        ....       &#xA;    }&#xA;}&#xA;&#xA;// merge into:&#xA;&#xA;if ($cond1 &amp;amp;&amp;amp; $cond2) { &#xA;    ...  &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It also supports the ruby-like if():/endif; syntax;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;if ($var1 &amp;gt; 1):&#xA;    if ($var2 &amp;gt; 2):&#xA;        echo &#39;Hey Man&#39;;&#xA;    endif;&#xA;endif;&#xA;&#xA;// or if you avoid putting curly braces...&#xA;if ($var1 &amp;gt; 1)&#xA;    if ($var2 &amp;gt; 2)&#xA;        echo &#39;Hey Man&#39;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Although this type of refactoring is totally safe and is guaranteed to do the same thing as before, but be careful to commit everything before trying this feature, in case of a weird bug or something.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;psr4&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:psr4&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It checks for all the psr4 autoloads defined in the composer.json file and goes through all the classes to have the right namespace, according to PSR-4 standard.&lt;/li&gt; &#xA; &lt;li&gt;It automatically corrects namespaces (according to PSR-4 rules)&lt;/li&gt; &#xA; &lt;li&gt;It also checks for references to the old namespace with the system and replaces them with the new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;generate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:generate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You make an empty file, we fill it, based on naming conventions.&lt;/p&gt; &#xA;&lt;p&gt;If you create an empty &lt;code&gt;.php&lt;/code&gt; file which ends with &lt;code&gt;ServiceProvider.php&lt;/code&gt; after running this command: 1 - It will be filled with a boilerplate and correct Psr-4 namespace. 2 - It will be appended to the &lt;code&gt;providers&lt;/code&gt; array in the &lt;code&gt;config/app.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;imports&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:imports&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It checks all the imports (&lt;code&gt;use&lt;/code&gt; statements) to be valid and reports invalid ones.&lt;/li&gt; &#xA; &lt;li&gt;It auto-corrects some of the references, it no ambiguity is around the class name.&lt;/li&gt; &#xA; &lt;li&gt;It can understand the laravel aliased classes so &lt;code&gt;use Request;&lt;/code&gt; would be valid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;bad_practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:bad_practices&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It detects bad practices like &lt;code&gt;env()&lt;/code&gt; calls outside of the config files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;routes&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:routes&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It checks that your routes refer to valid controller classes and methods.&lt;/li&gt; &#xA; &lt;li&gt;It checks all the controller methods to have valid type-hints.&lt;/li&gt; &#xA; &lt;li&gt;It scans for &lt;code&gt;route()&lt;/code&gt;, &lt;code&gt;redirect()-&amp;gt;route()&lt;/code&gt;, &lt;code&gt;\Redirect::route()&lt;/code&gt; to refer to valid routes.&lt;/li&gt; &#xA; &lt;li&gt;It will report the public methods of controllers, which have no routes pointing to them. In other words &lt;code&gt;dead controllers&lt;/code&gt; are detected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;compact&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:compact&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In php 7.3 if you &#34;compact&#34; a non-existent variable you will get an error, so this command checks the entire project for wrong &lt;code&gt;compact()&lt;/code&gt; calls and reports to you, which parameters should be removed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;blade_queries&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:blade_queries&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blade files should not contain DB queries. we should move them back into controllers and pass variables. This command searches all the blade files for &lt;code&gt;Eloquent models&lt;/code&gt; and &lt;code&gt;DB&lt;/code&gt; query builder and shows them if any.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;extract_blades&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:extract_blades&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to extract a blade partial out and make it included like: &lt;code&gt;@include(&#39;myPartials.someFile&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;you can use &lt;code&gt;{!! extractBlade(&#39;myPartials.someFile&#39;) !!}&lt;/code&gt; in your blade files to indicate &lt;code&gt;start/end line&lt;/code&gt; and the &lt;code&gt;path/name&lt;/code&gt; of the partial you intend to be made.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;html&amp;gt;&#xA;      &#xA;      {!! extractBlade(&#39;myPartials.head&#39;) !!}&#xA;          &amp;lt;head&amp;gt;...&amp;lt;/head&amp;gt;&#xA;      {!! extractBlade() !!}&#xA;&#xA;      &#xA;      {!! extractBlade(&#39;myPartials.body&#39;) !!}&#xA;          &amp;lt;body&amp;gt;...&amp;lt;/body&amp;gt;&#xA;      {!! extractBlade() !!}&#xA;      &#xA; &amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you execute &lt;code&gt;php artisan check:extract_blades&lt;/code&gt; it will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;    @include(&#39;myPartials.head&#39;)&#xA;    @include(&#39;myPartials.body&#39;)&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, it will create:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;resources/views/myPartials/head.blade.php&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resources/views/myPartials/body.blade.php&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and put the corresponding content in them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is also compatible with namespaced views in modular laravel applications. So this syntax will work: &lt;code&gt;&#39;MyMod::myPartials.body&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;action_comments&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:action_comments&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This adds annotations in the controller actions so that you know which route is pointing to the current controller action.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;route&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan pp:route&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First you have to put this in your route file: &lt;code&gt;microscope_pretty_print_route(&#39;my.route.name&#39;);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can also pass the Controller@method syntax to the function.&lt;/li&gt; &#xA; &lt;li&gt;You can call it multiple times in order to pretty-print multiple routes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;views&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:views&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It scans your code and find the &lt;code&gt;view()&lt;/code&gt; and &lt;code&gt;View::make()&lt;/code&gt; and reports if they refer to the wrong files.&lt;/li&gt; &#xA; &lt;li&gt;It scans your blade files for &lt;code&gt;@include()&lt;/code&gt; and &lt;code&gt;@extends()&lt;/code&gt; and reports if they refer to the wrong files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, it can detect &lt;code&gt;unused variables&lt;/code&gt; which are passed into your view from the controller like this: &lt;code&gt;view(&#39;hello&#39;, [...]);&lt;/code&gt; For that you must open up the page in the browser and then visit the log file to see a message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;local.INFO: Laravel Microscope: The view file: welcome.index-1 at App\Http\Controllers\HomeController@index has some unused variables passed to it:   &#xA;local.INFO: array (&#39;$var1&#39; , &#39;$var2&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember some variables are passed into your view from a &lt;code&gt;view composer&lt;/code&gt; and not the controller. Those variables are also taken into consideration when detecting unused variables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;events&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:events&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For example consider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Event::listen(MyEvent::class, &#39;\App\Listeners\MyListener@myMethod&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1 - It checks the &lt;code&gt;\App\Listeners\MyListener&lt;/code&gt; classpath to be valid.&lt;/p&gt; &#xA;&lt;p&gt;2 - It checks the &lt;code&gt;myMethod&lt;/code&gt; method to exist on the &lt;code&gt;MyListener&lt;/code&gt; class&lt;/p&gt; &#xA;&lt;p&gt;3 - It checks the &lt;code&gt;myMethod&lt;/code&gt; method to have the right type-hint (if any) in its signature, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function myMethod(OtherEvent $e) // &amp;lt;---- notice type-hint here&#xA;{&#xA;    //&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a valid but wrong type-hint, and will be reported to you. Very cool, isn&#39;t it ??!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note that it does not matter how you are setting your event listener,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1- in the &lt;code&gt;EventServiceProvider&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;p&gt;2- By &lt;code&gt;Event::listen&lt;/code&gt; facade,&lt;/p&gt; &#xA;&lt;p&gt;3- By Subscriber class... or any other way. The error would be found. :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;gates&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;php artisan check:gates&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It checks the validity of all the gates you have defined, making sure that they refer to a valid class and method.&lt;/p&gt; &#xA;&lt;p&gt;It also checks for the policy definitions to be valid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Gate::policy(User::class, &#39;UserPolicy@someMethod&#39;);&#xA;Gate::define(&#39;someAbility&#39;, &#39;UserGate@someMethod&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1 - It checks the &lt;code&gt;User&lt;/code&gt; classpath to be valid.&lt;/p&gt; &#xA;&lt;p&gt;2 - It checks the &lt;code&gt;UserPolicy&lt;/code&gt; classpath to be valid.&lt;/p&gt; &#xA;&lt;p&gt;3 - It checks the &lt;code&gt;someMethod&lt;/code&gt; method to exist.&lt;/p&gt; &#xA;&lt;p&gt;and more features will be added soon. ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;credits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imanghafoori1&#34;&gt;Iman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/imanghafoori1/laravel-microscope/master/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🙋&lt;/span&gt; Contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you find an issue or have a better way to do something, feel free to open an issue, or a pull request. If you use laravel-microscope in your open source project, create a pull request to provide its URL as a sample application in the README.md file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;security&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;❗&lt;/span&gt; Security&lt;/h3&gt; &#xA;&lt;p&gt;If you discover any security-related issues, please email &lt;code&gt;imanghafoori1@gmail.com&lt;/code&gt; instead of using the issue tracker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;more-from-author&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More from the author:&lt;/h2&gt; &#xA;&lt;h3&gt;Laravel HeyMan&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;💎&lt;/span&gt; It allows us to write expressive code to authorize, validate and authenticate.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imanghafoori1/laravel-heyman&#34;&gt;https://github.com/imanghafoori1/laravel-heyman&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Laravel Terminator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;💎&lt;/span&gt; A minimal yet powerful package to give you the opportunity to refactor your controllers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imanghafoori1/laravel-terminator&#34;&gt;https://github.com/imanghafoori1/laravel-terminator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Laravel AnyPass&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;💎&lt;/span&gt; It allows you to login with any password in the local environment only.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imanghafoori1/laravel-anypass&#34;&gt;https://github.com/imanghafoori1/laravel-anypass&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;A man will never fail unless he stops trying.&#xA;&#xA;Albert einstein&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;❤️ Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://github.com/imanghafoori1/laravel-microscope/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;]. &lt;a href=&#34;https://github.com/imanghafoori1/laravel-microscope/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/laravel-microscope/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>osTicket/osTicket</title>
    <updated>2022-07-09T01:32:00Z</updated>
    <id>tag:github.com,2022-07-09:/osTicket/osTicket</id>
    <link href="https://github.com/osTicket/osTicket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The osTicket open source ticketing system official project repository, for versions 1.8 and later&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;osTicket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://osticket.com&#34;&gt;&lt;img height=&#34;80px&#34; width=&#34;80px&#34; src=&#34;https://raw.githubusercontent.com/osTicket/osTicket/develop/images/favicon.png&#34; align=&#34;left&#34; hspace=&#34;10&#34; vspace=&#34;6&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;osTicket&lt;/strong&gt; is a widely-used open source support ticket system. It seamlessly integrates inquiries created via email, phone and web-based forms into a simple easy-to-use multi-user web interface. Manage, organize and archive all your support requests and responses in one place while providing your customers with accountability and responsiveness they deserve.&lt;/p&gt; &#xA;&lt;h2&gt;How osTicket works for you&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Users create tickets via your website, email, or phone&lt;/li&gt; &#xA; &lt;li&gt;Incoming tickets are saved and assigned to agents&lt;/li&gt; &#xA; &lt;li&gt;Agents help your users resolve their issues&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;osTicket is an attractive alternative to higher-cost and complex customer support systems; simple, lightweight, reliable, open source, web-based and easy to setup and use. The best part is, it&#39;s completely free.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP server running Microsoft® IIS or Apache&lt;/li&gt; &#xA; &lt;li&gt;PHP version 8.0&lt;/li&gt; &#xA; &lt;li&gt;mysqli extension for PHP&lt;/li&gt; &#xA; &lt;li&gt;MySQL database version 5.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Recommendations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gd, gettext, imap, json, mbstring, and xml extensions for PHP&lt;/li&gt; &#xA; &lt;li&gt;APC module enabled and configured for PHP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;osTicket now supports bleeding-edge installations. The easiest way to install the software and track updates is to clone the public repository. Create a folder on you web server (using whatever method makes sense for you) and cd into it. Then clone the repository (the folder must be empty!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/osTicket/osTicket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And deploy the code into somewhere in your server&#39;s www root folder, for instance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd osTicket&#xA;php manage.php deploy --setup /var/www/htdocs/osticket/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can configure your server if necessary to serve that folder, and visit the page and install osTicket as usual. Go ahead and even delete setup/ folder out of the deployment location when you’re finished. Then, later, you can fetch updates and deploy them (from the folder where you cloned the git repo into)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;php manage.php deploy -v /var/www/htdocs/osticket/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;osTicket supports upgrading from 1.6-rc1 and later versions. As with any upgrade, strongly consider a backup of your attachment files, database, and osTicket codebase before embarking on an upgrade.&lt;/p&gt; &#xA;&lt;p&gt;To trigger the update process, fetch the osTicket tarball from either the osTicket &lt;a href=&#34;http://github.com/osTicket/osTicket/releases&#34;&gt;github&lt;/a&gt; page or from the &lt;a href=&#34;https://osticket.com&#34;&gt;osTicket website&lt;/a&gt;. Extract the tarball into the folder of your osTicket codebase. This can also be accomplished with the zip file, and a FTP client can of course be used to upload the new source code to your server.&lt;/p&gt; &#xA;&lt;p&gt;Any way you choose your adventure, when you have your codebase upgraded to osTicket-1.7, visit the /scp page of you ticketing system. The upgrader will be presented and will walk you through the rest of the process. (The couple clicks needed to go through the process are pretty boring to describe).&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading from v1.6&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: If you are upgrading from osTicket 1.6, please ensure that all your files in your upload folder are both readable and writable to your http server software. Unreadable files will not be migrated to the database during the upgrade and will be effectively lost.&lt;/p&gt; &#xA;&lt;p&gt;After upgrading, we recommend migrating your attachments to the database or to the new filesystem plugin. Use the &lt;code&gt;file&lt;/code&gt; command-line applet to perform the migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php manage.php file migrate --backend=6 --to=D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View the UPGRADING.txt file for other todo items to complete your upgrade.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.osticket.com/&#34;&gt;Documentation&lt;/a&gt; or the &lt;a href=&#34;https://forum.osticket.com/&#34;&gt;forum&lt;/a&gt;. And if you&#39;d like professional help managing your osTicket installation, &lt;a href=&#34;https://osticket.com/support/&#34;&gt;commercial support&lt;/a&gt; is available.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Create your own fork of the project and use &lt;a href=&#34;https://github.com/nvie/gitflow&#34;&gt;git-flow&lt;/a&gt; to create a new feature. Once the feature is published in your fork, send a pull request to begin the conversation of integrating your new feature into osTicket.&lt;/p&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i18n.osticket.com/project/osticket-official&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/osticket-official/localized.png&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The interface for osTicket is now completely translatable. Language packs are available on the &lt;a href=&#34;https://osticket.com/download&#34;&gt;download page&lt;/a&gt;. If you do not see your language there, join the &lt;a href=&#34;https://crowdin.com/project/osticket-official&#34;&gt;Crowdin&lt;/a&gt; project and request to have your language added. Languages which reach 100% translated are are significantly reviewed will be made available on the osTicket download page.&lt;/p&gt; &#xA;&lt;p&gt;The software can also be translated in place in our &lt;a href=&#34;http://jipt.i18n.osticket.com&#34;&gt;JIPT site&lt;/a&gt;. Once you have a Crowdin account, login and translate the software in your browser!&lt;/p&gt; &#xA;&lt;p&gt;Localizing strings in new code requires usage of a &lt;a href=&#34;https://raw.githubusercontent.com/osTicket/osTicket/develop/setup/doc/i18n.md&#34;&gt;few rules&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;osTicket is released under the GPL2 license. See the included LICENSE.txt file for the gory details of the General Public License.&lt;/p&gt; &#xA;&lt;p&gt;osTicket is supported by several magical open source projects including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fortawesome.github.com/Font-Awesome/&#34;&gt;Font-Awesome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed&#34;&gt;HTMLawed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://labs.abeautifulsite.net/jquery-dropdown/&#34;&gt;jQuery dropdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pellepim.bitbucket.org/jstz/&#34;&gt;jsTimezoneDetect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mpdf1.com/&#34;&gt;mPDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openwall.com/phpass/&#34;&gt;PasswordHash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pear.php.net/package/PEAR&#34;&gt;PEAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pear.php.net/package/Auth_SASL&#34;&gt;PEAR/Auth_SASL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pear.php.net/package/mail&#34;&gt;PEAR/Mail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pear.php.net/package/Net_SMTP&#34;&gt;PEAR/Net_SMTP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pear.php.net/package/Net_Socket&#34;&gt;PEAR/Net_Socket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pear.php.net/package/Services_JSON&#34;&gt;PEAR/Serivces_JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://launchpad.net/php-gettext/&#34;&gt;php-gettext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://phpseclib.sourceforge.net/&#34;&gt;phpseclib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/mustangostang/spyc&#34;&gt;Spyc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>