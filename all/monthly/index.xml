<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T01:57:24Z</updated>
  <subtitle>Monthly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>localsend/localsend</title>
    <updated>2023-11-01T01:57:24Z</updated>
    <id>tag:github.com,2023-11-01:/localsend/localsend</id>
    <link href="https://github.com/localsend/localsend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source cross-platform alternative to AirDrop&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LocalSend&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/localsend/localsend/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/localsend/localsend/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://localsend.org&#34;&gt;Homepage&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/GSRWmQNP87&#34;&gt;Discord&lt;/a&gt; • &lt;a href=&#34;https://github.com/localsend/localsend&#34;&gt;GitHub&lt;/a&gt; • &lt;a href=&#34;https://codeberg.org/localsend/localsend&#34;&gt;Codeberg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LocalSend is a free, open-source app that allows you to securely share files and messages with nearby devices over your local network without needing an internet connection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#bug-fixes-and-improvements&#34;&gt;Bug fixes and improvements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#building&#34;&gt;Building&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;LocalSend is a cross-platform app that enables secure communication between devices using a REST API and HTTPS encryption. Unlike other messaging apps that rely on external servers, LocalSend doesn&#39;t require an internet connection or third-party servers, making it a fast and reliable solution for local communication.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://localsend.org/img/screenshot-iphone.webp&#34; alt=&#34;iPhone screenshot&#34; height=&#34;300&#34;&gt; &lt;img src=&#34;https://localsend.org/img/screenshot-pc.webp&#34; alt=&#34;PC screenshot&#34; height=&#34;300&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended to download the app either from an app store or from a package manager because the app does not have an auto-update.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Fire OS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/winget-pkgs/tree/master/manifests/l/LocalSend/LocalSend&#34;&gt;Winget&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/us/app/localsend/id1661733229&#34;&gt;App Store&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flathub.org/apps/details/org.localsend.localsend_app&#34;&gt;Flathub&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.localsend.localsend_app&#34;&gt;Play Store&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/us/app/localsend/id1661733229&#34;&gt;App Store&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.amazon.com/dp/B0BW6MP732&#34;&gt;Amazon&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://scoop.sh/#/apps?s=0&amp;amp;d=1&amp;amp;o=true&amp;amp;q=localsend&amp;amp;id=fb88113be361ca32c0dcac423cb4afdeda0b0c66&#34;&gt;Scoop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/homebrew-localsend&#34;&gt;Homebrew&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/localsend-bin&#34;&gt;AUR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://f-droid.org/packages/org.localsend.localsend_app&#34;&gt;F-Droid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://community.chocolatey.org/packages/localsend&#34;&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;DMG Installer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.nixos.org/packages?show=localsend&#34;&gt;NixOS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;APK&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;MSIX Installer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;TAR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;Portable ZIP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;DEB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/localsend/localsend/releases/latest&#34;&gt;AppImage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://github.com/localsend/localsend/raw/main/CONTRIBUTING.md#distribution&#34;&gt;distribution channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;LocalSend uses a secure communication protocol that allows devices to communicate with each other using a REST API. All data is sent securely over HTTPS, and the TLS/SSL certificate is generated on the fly on each device, ensuring maximum security.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the LocalSend Protocol, see the &lt;a href=&#34;https://github.com/localsend/protocol&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To compile LocalSend from source code, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone the LocalSend repository.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd app&lt;/code&gt; to enter the app directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter pub get&lt;/code&gt; to download dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter run&lt;/code&gt; to start the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It&#39;s possible that the issue is caused by a mismatch between the required Flutter version and the installed Flutter version.&lt;/p&gt; &#xA;&lt;p&gt;LocalSend uses &lt;a href=&#34;https://fvm.app&#34;&gt;fvm&lt;/a&gt; to manage the project Flutter version (specified in &lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/.fvm/fvm_config.json&#34;&gt;.fvm/fvm_config.json&lt;/a&gt;). After you installed it, run &lt;code&gt;fvm flutter&lt;/code&gt; instead of &lt;code&gt;flutter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from anyone interested in helping improve LocalSend. If you&#39;d like to contribute, there are a few ways to get involved:&lt;/p&gt; &#xA;&lt;h3&gt;Translation&lt;/h3&gt; &#xA;&lt;p&gt;You can help translate this app to other languages!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository&lt;/li&gt; &#xA; &lt;li&gt;Choose one &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add missing translations in existing languages: Only update &lt;code&gt;_missing_translations_&amp;lt;locale&amp;gt;.json&lt;/code&gt; in &lt;a href=&#34;https://github.com/localsend/localsend/tree/main/app/assets/i18n&#34;&gt;app/assets/i18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Fix existing translations: Update &lt;code&gt;strings_&amp;lt;locale&amp;gt;.i18n.json&lt;/code&gt; in &lt;a href=&#34;https://github.com/localsend/localsend/tree/main/app/assets/i18n&#34;&gt;app/assets/i18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add new languages: Create a new file; see also: &lt;a href=&#34;https://saimana.com/list-of-country-locale-code/&#34;&gt;locale codes&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional: Re-run this app &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Make sure you have &lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#getting-started&#34;&gt;run&lt;/a&gt; this app once.&lt;/li&gt; &#xA;   &lt;li&gt;Update translations via &lt;code&gt;flutter pub run slang&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Run the app via &lt;code&gt;flutter run&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;&lt;em&gt;Take note:&lt;/em&gt; Fields decorated with &lt;code&gt;@&lt;/code&gt; are not meant to be translated; they are not used in the app in any way, being merely informative text about the file or to give context to the translator.&lt;/h4&gt; &#xA;&lt;h3&gt;Bug fixes and improvements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bug Fixes:&lt;/strong&gt; If you find a bug, please create a pull request with a clear description of the issue and how to fix it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Improvements:&lt;/strong&gt; Have an idea for how to improve LocalSend? Please create an issue first to discuss why the improvement is needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://github.com/localsend/localsend/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;These commands are intended for maintainers only.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Traditional APK&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter build apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AppBundle for Google Play&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter build appbundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter build ipa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter build macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Traditional&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter build windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Local MSIX App&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub run msix:create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Store ready&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub run msix:create --store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Traditional&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter build linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;AppImage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;appimage-builder --recipe AppImageBuilder.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Snap&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to open a pull request. There is a &lt;code&gt;snap&lt;/code&gt; branch to play with.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/localsend/localsend/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=localsend/localsend&#34; alt=&#34;Localsend Contributors&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>zhile-io/pandora</title>
    <updated>2023-11-01T01:57:24Z</updated>
    <id>tag:github.com,2023-11-01:/zhile-io/pandora</id>
    <link href="https://github.com/zhile-io/pandora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;潘多拉，一个让你呼吸顺畅的ChatGPT。Pandora, a ChatGPT client that lets you breathe freely.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandora&lt;/h1&gt; &#xA;&lt;p&gt;潘多拉 (Pandora)，一个让你呼吸顺畅的 ChatGPT。&lt;/p&gt; &#xA;&lt;p&gt;潘多拉实现了网页版 ChatGPT 的主要操作。后端优化，绕过 Cloudflare，速度喜人。&lt;/p&gt; &#xA;&lt;!-- PROJECT SHIELDS --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/python-%3E%3D3.7-green&#34; alt=&#34;Python version&#34;&gt; &lt;a href=&#34;https://github.com/zhile-io/pandora/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/zhile-io/pandora&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zhile-io/pandora/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/zhile-io/pandora/master&#34; alt=&#34;Commits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/pandora-chatgpt&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pandora-chatgpt.svg?sanitize=true&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/pandora-chatgpt&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/pandora-chatgpt&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zhile-io/pandora/actions/workflows/python-publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/actions/workflows/python-publish.yml/badge.svg?sanitize=true&#34; alt=&#34;PyPi workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zhile-io/pandora/actions/workflows/docker-publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/actions/workflows/docker-publish.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/QBkd9JAaWa&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1098772912242163795?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;体验地址&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;点击 &lt;a href=&#34;https://chat1.zhile.io&#34; target=&#34;_blank&#34; title=&#34;Pandora Cloud体验地址&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://chat1.zhile.io&#34;&gt;https://chat1.zhile.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;最新拿 &lt;code&gt;Access Token&lt;/code&gt; 的技术原理，我记录在&lt;a href=&#34;https://zhile.io/2023/05/19/how-to-get-chatgpt-access-token-via-pkce.html&#34;&gt;这里&lt;/a&gt;了。&lt;/li&gt; &#xA; &lt;li&gt;可以访问 &lt;a href=&#34;http://ai-20230626.fakeopen.com/auth&#34;&gt;这里&lt;/a&gt; 拿 &lt;code&gt;Access Token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;也可以官方登录，然后访问 &lt;a href=&#34;http://chat.openai.com/api/auth/session&#34;&gt;这里&lt;/a&gt; 拿 &lt;code&gt;Access Token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Access Token&lt;/code&gt; 有效期 &lt;code&gt;14&lt;/code&gt; 天，期间访问&lt;strong&gt;不需要梯子&lt;/strong&gt;。这意味着你在手机上也可随意使用。&lt;/li&gt; &#xA; &lt;li&gt;这个页面上还包含一个共享账号的链接，&lt;strong&gt;没有账号&lt;/strong&gt;的可以点进去体验一下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ChatGPT使用时可能会遇到：&lt;/h2&gt; &#xA;&lt;h3&gt;1. Please stand by, while we are checking your browser...&lt;/h3&gt; &#xA;&lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;动不动来一下，有时候还不动或者出人机验证。痛！&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/t0.png&#34; alt=&#34;t0&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Access denied. Sorry, you have been blocked&lt;/h3&gt; &#xA;&lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;经典问题，只能到处找可用VPN，费时费力，更费钱。移动端访问更难。痛！&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/t1.1.png&#34; alt=&#34;t1.1&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. ChatGPT is at capacity right now&lt;/h3&gt; &#xA;&lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;系统负载高，白嫖用户不给用。痛！&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/t2.png&#34; alt=&#34;t2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. This content may violate our &lt;u&gt;content policy&lt;/u&gt;.&lt;/h3&gt; &#xA;&lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;道德审查，多触发几次可能就封号了。痛！！！&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/t3.png&#34; alt=&#34;t3&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5. Something went wrong.&lt;/h3&gt; &#xA;&lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;吃着火锅唱着歌，突然就出故障了。痛！&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/t4.png&#34; alt=&#34;t4&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6. 手机和电脑的模型不通用，顾这个就顾不到那个，痛！&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/t7.png&#34; alt=&#34;t7&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7. 蹦字慢吞吞，卡顿不流畅，不知道的甚至想换电脑。痛！&lt;/h3&gt; &#xA;&lt;h3&gt;8. 想把 &lt;code&gt;ChatGPT&lt;/code&gt; 接到其他系统，结果只能接个差强人意的 &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;。痛！&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;em&gt;一次看完上面的噩梦，血压上来了，拳头硬了！太痛了！！！以上痛点，&lt;code&gt;Pandora&lt;/code&gt; 一次全部解决。&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;界面截图&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s05.png&#34; alt=&#34;alt Screenshot5&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s12.jpeg&#34; alt=&#34;alt Screenshot10&#34;&gt;&lt;/p&gt; &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s01.png&#34; alt=&#34;alt Screenshot1&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s02.png&#34; alt=&#34;alt Screenshot2&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s03.png&#34; alt=&#34;alt Screenshot3&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s04.png&#34; alt=&#34;alt Screenshot4&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s06.png&#34; alt=&#34;alt Screenshot6&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/zhile-io/pandora/raw/master/doc/images/s11.jpeg&#34; alt=&#34;alt Screenshot11&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;如何搭建运行&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;访问 &lt;a href=&#34;https://github.com/zhile-io/pandora/raw/master/doc/wiki.md&#34;&gt;doc/wiki.md&lt;/a&gt; 获得详细指导。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;开源项目可以魔改，但请保留原作者信息。确需去除，请联系作者，以免失去技术支持。&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;项目是站在其他巨人的肩膀上，感谢！&lt;/li&gt; &#xA; &lt;li&gt;报错、BUG之类的提出&lt;code&gt;Issue&lt;/code&gt;，我会修复。&lt;/li&gt; &#xA; &lt;li&gt;因为之后&lt;code&gt;ChatGPT&lt;/code&gt;的API变动，我可能不会跟进修复。&lt;/li&gt; &#xA; &lt;li&gt;喜欢的可以给颗星，都是老朋友了。&lt;/li&gt; &#xA; &lt;li&gt;不影响&lt;code&gt;PHP是世界上最好的编程语言！&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献者们&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢所有让这个项目变得更好的贡献者们！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhile-io/pandora/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=zhile-io/pandora&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star历史&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=zhile-io/pandora&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haotian-liu/LLaVA</title>
    <updated>2023-11-01T01:57:24Z</updated>
    <id>tag:github.com,2023-11-01:/haotian-liu/LLaVA</id>
    <link href="https://github.com/haotian-liu/LLaVA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[NeurIPS&#39;23 Oral] Visual Instruction Tuning: LLaVA (Large Language-and-Vision Assistant) built towards GPT-4V level capabilities.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🌋 LLaVA: Large Language and Vision Assistant&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Visual instruction tuning towards large language and vision models with GPT-4 level capabilities.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://llava-vl.github.io/&#34;&gt;Project Page&lt;/a&gt;] [&lt;a href=&#34;https://llava.hliu.cc/&#34;&gt;Demo&lt;/a&gt;] [&lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Data.md&#34;&gt;Data&lt;/a&gt;] [&lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;Model Zoo&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;🤝Community Contributions: [&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3436&#34;&gt;llama.cpp&lt;/a&gt;] [&lt;a href=&#34;https://github.com/camenduru/LLaVA-colab&#34;&gt;Colab&lt;/a&gt;] [&lt;a href=&#34;https://huggingface.co/spaces/badayvedat/LLaVA&#34;&gt;🤗Space&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Improved Baselines with Visual Instruction Tuning&lt;/strong&gt; [&lt;a href=&#34;https://arxiv.org/abs/2310.03744&#34;&gt;Paper&lt;/a&gt;] &lt;br&gt; &lt;a href=&#34;https://hliu.cc&#34;&gt;Haotian Liu&lt;/a&gt;, &lt;a href=&#34;https://chunyuan.li/&#34;&gt;Chunyuan Li&lt;/a&gt;, &lt;a href=&#34;https://yuheng-li.github.io/&#34;&gt;Yuheng Li&lt;/a&gt;, &lt;a href=&#34;https://pages.cs.wisc.edu/~yongjaelee/&#34;&gt;Yong Jae Lee&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Visual Instruction Tuning&lt;/strong&gt; (NeurIPS 2023, &lt;strong&gt;Oral&lt;/strong&gt;) [&lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;Paper&lt;/a&gt;]&lt;br&gt; &lt;a href=&#34;https://hliu.cc&#34;&gt;Haotian Liu*&lt;/a&gt;, &lt;a href=&#34;https://chunyuan.li/&#34;&gt;Chunyuan Li*&lt;/a&gt;, &lt;a href=&#34;https://scholar.google.ca/citations?user=HDiw-TsAAAAJ&amp;amp;hl=en/&#34;&gt;Qingyang Wu&lt;/a&gt;, &lt;a href=&#34;https://pages.cs.wisc.edu/~yongjaelee/&#34;&gt;Yong Jae Lee&lt;/a&gt; (*Equal Contribution)&lt;/p&gt; &#xA;&lt;!--p align=&#34;center&#34;&gt;&#xA;    &lt;a href=&#34;https://llava.hliu.cc/&#34;&gt;&lt;img src=&#34;images/llava_logo.png&#34; width=&#34;50%&#34;&gt;&lt;/a&gt; &lt;br&gt;&#xA;    Generated by &lt;a href=&#34;https://gligen.github.io/&#34;&gt;GLIGEN&lt;/a&gt; via &#34;a cute lava llama with glasses&#34; and box prompt&#xA;&lt;/p--&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[10/26] 🔥 LLaVA-1.5 with LoRA achieves comparable performance as full-model finetuning, with a reduced GPU RAM requirement (&lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md#llava-v15&#34;&gt;ckpts&lt;/a&gt;, &lt;a href=&#34;https://github.com/haotian-liu/LLaVA#train&#34;&gt;script&lt;/a&gt;). We also provide a &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Finetune_Custom_Data.md&#34;&gt;doc&lt;/a&gt; on how to finetune LLaVA-1.5 on your own dataset with LoRA.&lt;/li&gt; &#xA; &lt;li&gt;[10/12] Check out the Korean LLaVA (Ko-LLaVA), created by ETRI, who has generously supported our research! [&lt;a href=&#34;https://huggingface.co/spaces/etri-vilab/Ko-LLaVA&#34;&gt;🤗 Demo&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[10/12] LLaVA is now supported in &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/3436&#34;&gt;llama.cpp&lt;/a&gt; with 4-bit / 5-bit quantization support!&lt;/li&gt; &#xA; &lt;li&gt;[10/11] The training data and scripts of LLaVA-1.5 are released &lt;a href=&#34;https://github.com/haotian-liu/LLaVA#train&#34;&gt;here&lt;/a&gt;, and evaluation scripts are released &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Evaluation.md&#34;&gt;here&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;[10/5] 🔥 LLaVA-1.5 is out! Achieving SoTA on 11 benchmarks, with just simple modifications to the original LLaVA, utilizes all public data, completes training in ~1 day on a single 8-A100 node, and surpasses methods like Qwen-VL-Chat that use billion-scale data. Check out the &lt;a href=&#34;https://arxiv.org/abs/2310.03744&#34;&gt;technical report&lt;/a&gt;, and explore the &lt;a href=&#34;https://llava.hliu.cc/&#34;&gt;demo&lt;/a&gt;! Models are available in &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;Model Zoo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[9/26] LLaVA is improved with reinforcement learning from human feedback (RLHF) to improve fact grounding and reduce hallucination. Check out the new SFT and RLHF checkpoints at project &lt;a href=&#34;https://llava-rlhf.github.io/&#34;&gt;[LLavA-RLHF]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[9/22] &lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;LLaVA&lt;/a&gt; is accepted by NeurIPS 2023 as &lt;strong&gt;oral presentation&lt;/strong&gt;, and &lt;a href=&#34;https://arxiv.org/abs/2306.00890&#34;&gt;LLaVA-Med&lt;/a&gt; is accepted by NeurIPS 2023 Datasets and Benchmarks Track as &lt;strong&gt;spotlight presentation&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[9/20] We summarize our empirical study of training 33B and 65B LLaVA models in a &lt;a href=&#34;https://arxiv.org/abs/2309.09958&#34;&gt;note&lt;/a&gt;. Further, if you are interested in the comprehensive review, evolution and trend of multimodal foundation models, please check out our recent survey paper &lt;a href=&#34;https://arxiv.org/abs/2309.10020&#34;&gt;``Multimodal Foundation Models: From Specialists to General-Purpose Assistants&#39;&#39;.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Computer-Vision-in-the-Wild/CVinW_Readings/raw/main/images/mfm_evolution.jpeg?raw=true&#34; width=&#34;50%/&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[7/19] 🔥 We release a major upgrade, including support for LLaMA-2, LoRA training, 4-/8-bit inference, higher resolution (336x336), and a lot more. We release &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/LLaVA_Bench.md&#34;&gt;LLaVA Bench&lt;/a&gt; for benchmarking open-ended visual chat with results from Bard and Bing-Chat. We also support and verify training with RTX 3090 and RTX A6000. Check out &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/LLaVA_from_LLaMA2.md&#34;&gt;LLaVA-from-LLaMA-2&lt;/a&gt;, and our &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;model zoo&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;[6/26] &lt;a href=&#34;https://vlp-tutorial.github.io/&#34;&gt;CVPR 2023 Tutorial&lt;/a&gt; on &lt;strong&gt;Large Multimodal Models: Towards Building and Surpassing Multimodal GPT-4&lt;/strong&gt;! Please check out [&lt;a href=&#34;https://datarelease.blob.core.windows.net/tutorial/vision_foundation_models_2023/slides/Chunyuan_cvpr2023_tutorial_lmm.pdf&#34;&gt;Slides&lt;/a&gt;] [&lt;a href=&#34;https://arxiv.org/abs/2306.14895&#34;&gt;Notes&lt;/a&gt;] [&lt;a href=&#34;https://youtu.be/mkI7EPD1vp8&#34;&gt;YouTube&lt;/a&gt;] [&lt;a href=&#34;https://www.bilibili.com/video/BV1Ng4y1T7v3/&#34;&gt;Bilibli&lt;/a&gt;].&lt;/li&gt; &#xA; &lt;li&gt;[6/11] We released the preview for the most requested feature: DeepSpeed and LoRA support! Please see documentations &lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/docs/LoRA.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[6/1] We released &lt;strong&gt;LLaVA-Med: Large Language and Vision Assistant for Biomedicine&lt;/strong&gt;, a step towards building biomedical domain large language and vision models with GPT-4 level capabilities. Checkout the &lt;a href=&#34;https://arxiv.org/abs/2306.00890&#34;&gt;paper&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/LLaVA-Med&#34;&gt;page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[5/6] We are releasing &lt;a href=&#34;https://huggingface.co/liuhaotian/LLaVA-Lightning-MPT-7B-preview&#34;&gt;LLaVA-Lighting-MPT-7B-preview&lt;/a&gt;, based on MPT-7B-Chat! See &lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#LLaVA-MPT-7b&#34;&gt;here&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;[5/2] 🔥 We are releasing LLaVA-Lighting! Train a lite, multimodal GPT-4 with just $40 in 3 hours! See &lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#train-llava-lightning&#34;&gt;here&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;[4/27] Thanks to the community effort, LLaVA-13B with 4-bit quantization allows you to run on a GPU with as few as 12GB VRAM! Try it out &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/tree/main/extensions/llava&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[4/17] 🔥 We released &lt;strong&gt;LLaVA: Large Language and Vision Assistant&lt;/strong&gt;. We propose visual instruction tuning, towards building large language and vision models with GPT-4 level capabilities. Checkout the &lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;paper&lt;/a&gt; and &lt;a href=&#34;https://llava.hliu.cc/&#34;&gt;demo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- &lt;a href=&#34;https://llava.hliu.cc/&#34;&gt;&lt;img src=&#34;assets/demo.gif&#34; width=&#34;70%&#34;&gt;&lt;/a&gt; --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Code%20License-Apache_2.0-green.svg?sanitize=true&#34; alt=&#34;Code License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/DATA_LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Data%20License-CC%20By%20NC%204.0-red.svg?sanitize=true&#34; alt=&#34;Data License&#34;&gt;&lt;/a&gt; &lt;strong&gt;Usage and License Notices&lt;/strong&gt;: The data and checkpoint is intended and licensed for research use only. They are also restricted to uses that follow the license agreement of LLaMA, Vicuna and GPT-4. The dataset is CC BY NC 4.0 (allowing only non-commercial use) and models trained using the dataset should not be used outside of research purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#llava-weights&#34;&gt;LLaVA Weights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#Demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;Model Zoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Data.md&#34;&gt;Dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#train&#34;&gt;Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#evaluation&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;If you are not using Linux, do &lt;em&gt;NOT&lt;/em&gt; proceed, see instructions for &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/macOS.md&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Windows.md&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository and navigate to LLaVA folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/haotian-liu/LLaVA.git&#xA;cd LLaVA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;conda create -n llava python=3.10 -y&#xA;conda activate llava&#xA;pip install --upgrade pip  # enable PEP 660 support&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install additional packages for training cases&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -e &#34;.[train]&#34;&#xA;pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrade to latest code base&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;git pull&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LLaVA Weights&lt;/h2&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;Model Zoo&lt;/a&gt; for all public LLaVA checkpoints, and the instructions of how to use the weights.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;To run our demo, you need to prepare LLaVA checkpoints locally. Please follow the instructions &lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/#llava-weights&#34;&gt;here&lt;/a&gt; to download the checkpoints.&lt;/p&gt; &#xA;&lt;h3&gt;Gradio Web UI&lt;/h3&gt; &#xA;&lt;p&gt;To launch a Gradio demo locally, please run the following commands one by one. If you plan to launch multiple model workers to compare between different checkpoints, you only need to launch the controller and the web server &lt;em&gt;ONCE&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart BT&#xA;    %% Declare Nodes&#xA;    gws(&#34;Gradio (UI Server)&#34;)&#xA;    c(&#34;Controller (API Server):&amp;lt;br/&amp;gt;PORT: 10000&#34;)&#xA;    mw7b(&#34;Model Worker:&amp;lt;br/&amp;gt;llava-v1.5-7b&amp;lt;br/&amp;gt;PORT: 40000&#34;)&#xA;    mw13b(&#34;Model Worker:&amp;lt;br/&amp;gt;llava-v1.5-13b&amp;lt;br/&amp;gt;PORT: 40001&#34;)&#xA;&#xA;    %% Declare Styles&#xA;    classDef data fill:#3af,stroke:#48a,stroke-width:2px,color:#444&#xA;    classDef success fill:#8f8,stroke:#0a0,stroke-width:2px,color:#444&#xA;    classDef failure fill:#f88,stroke:#f00,stroke-width:2px,color:#444&#xA;&#xA;    %% Assign Styles&#xA;    class id,od data;&#xA;    class cimg,cs_s,scsim_s success;&#xA;    class ncimg,cs_f,scsim_f failure;&#xA;&#xA;    subgraph Demo Connections&#xA;        direction BT&#xA;        c&amp;lt;--&amp;gt;gws&#xA;        &#xA;        mw7b&amp;lt;--&amp;gt;c&#xA;        mw13b&amp;lt;--&amp;gt;c&#xA;    end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a controller&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.controller --host 0.0.0.0 --port 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a gradio web server.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.gradio_web_server --controller http://localhost:10000 --model-list-mode reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You just launched the Gradio web interface. Now, you can open the web interface with the URL printed on the screen. You may notice that there is no model in the model list. Do not worry, as we have not launched any model worker yet. It will be automatically updated when you launch a model worker.&lt;/p&gt; &#xA;&lt;h4&gt;Launch a model worker&lt;/h4&gt; &#xA;&lt;p&gt;This is the actual &lt;em&gt;worker&lt;/em&gt; that performs the inference on the GPU. Each worker is responsible for a single model specified in &lt;code&gt;--model-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path liuhaotian/llava-v1.5-13b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait until the process finishes loading the model and you see &#34;Uvicorn running on ...&#34;. Now, refresh your Gradio web UI, and you will see the model you just launched in the model list.&lt;/p&gt; &#xA;&lt;p&gt;You can launch as many workers as you want, and compare between different model checkpoints in the same Gradio interface. Please keep the &lt;code&gt;--controller&lt;/code&gt; the same, and modify the &lt;code&gt;--port&lt;/code&gt; and &lt;code&gt;--worker&lt;/code&gt; to a different port number for each worker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port &amp;lt;different from 40000, say 40001&amp;gt; --worker http://localhost:&amp;lt;change accordingly, i.e. 40001&amp;gt; --model-path &amp;lt;ckpt2&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using an Apple device with an M1 or M2 chip, you can specify the mps device by using the &lt;code&gt;--device&lt;/code&gt; flag: &lt;code&gt;--device mps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Launch a model worker (Multiple GPUs, when GPU VRAM &amp;lt;= 24GB)&lt;/h4&gt; &#xA;&lt;p&gt;If the VRAM of your GPU is less than 24GB (e.g., RTX 3090, RTX 4090, etc.), you may try running it with multiple GPUs. Our latest code base will automatically try to use multiple GPUs if you have more than one GPU. You can specify which GPUs to use with &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;. Below is an example of running with the first two GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;CUDA_VISIBLE_DEVICES=0,1 python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path liuhaotian/llava-v1.5-13b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a model worker (4-bit, 8-bit inference, quantized)&lt;/h4&gt; &#xA;&lt;p&gt;You can launch the model worker with quantized bits (4-bit, 8-bit), which allows you to run the inference with reduced GPU memory footprint, potentially allowing you to run on a GPU with as few as 12GB VRAM. Note that inference with quantized bits may not be as accurate as the full-precision model. Simply append &lt;code&gt;--load-4bit&lt;/code&gt; or &lt;code&gt;--load-8bit&lt;/code&gt; to the &lt;strong&gt;model worker&lt;/strong&gt; command that you are executing. Below is an example of running with 4-bit quantization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path liuhaotian/llava-v1.5-13b --load-4bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a model worker (LoRA weights, unmerged)&lt;/h4&gt; &#xA;&lt;p&gt;You can launch the model worker with LoRA weights, without merging them with the base checkpoint, to save disk space. There will be additional loading time, while the inference speed is the same as the merged checkpoints. Unmerged LoRA checkpoints do not have &lt;code&gt;lora-merge&lt;/code&gt; in the model name, and are usually much smaller (less than 1GB) than the merged checkpoints (13G for 7B, and 25G for 13B).&lt;/p&gt; &#xA;&lt;p&gt;To load unmerged LoRA weights, you simply need to pass an additional argument &lt;code&gt;--model-base&lt;/code&gt;, which is the base LLM that is used to train the LoRA weights. You can check the base LLM of each LoRA weights in the &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;model zoo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path liuhaotian/llava-v1-0719-336px-lora-vicuna-13b-v1.3 --model-base lmsys/vicuna-13b-v1.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI Inference&lt;/h3&gt; &#xA;&lt;p&gt;Chat about images using LLaVA without the need of Gradio interface. It also supports multiple GPUs, 4-bit and 8-bit quantized inference. With 4-bit quantization, for our LLaVA-1.5-7B, it uses less than 8GB VRAM on a single GPU.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.cli \&#xA;    --model-path liuhaotian/llava-v1.5-7b \&#xA;    --image-file &#34;https://llava-vl.github.io/static/images/view.jpg&#34; \&#xA;    --load-4bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/images/demo_cli.gif&#34; width=&#34;70%&#34;&gt; &#xA;&lt;h2&gt;Train&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Below is the latest training configuration for LLaVA v1.5. For legacy models, please refer to README of &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/tree/v1.0.1&#34;&gt;this&lt;/a&gt; version for now. We&#39;ll add them in a separate doc later.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;LLaVA training consists of two stages: (1) feature alignment stage: use our 558K subset of the LAION-CC-SBU dataset to connect a &lt;em&gt;frozen pretrained&lt;/em&gt; vision encoder to a &lt;em&gt;frozen LLM&lt;/em&gt;; (2) visual instruction tuning stage: use 150K GPT-generated multimodal instruction-following data, plus around 515K VQA data from academic-oriented tasks, to teach the model to follow multimodal instructions.&lt;/p&gt; &#xA;&lt;p&gt;LLaVA is trained on 8 A100 GPUs with 80GB memory. To train on fewer GPUs, you can reduce the &lt;code&gt;per_device_train_batch_size&lt;/code&gt; and increase the &lt;code&gt;gradient_accumulation_steps&lt;/code&gt; accordingly. Always keep the global batch size the same: &lt;code&gt;per_device_train_batch_size&lt;/code&gt; x &lt;code&gt;gradient_accumulation_steps&lt;/code&gt; x &lt;code&gt;num_gpus&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hyperparameters&lt;/h3&gt; &#xA;&lt;p&gt;We use a similar set of hyperparameters as Vicuna in finetuning. Both hyperparameters used in pretraining and finetuning are provided below.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pretraining&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hyperparameter&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Global Batch Size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Learning rate&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Epochs&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Max length&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Weight decay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaVA-v1.5-13B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;256&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1e-3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2048&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Finetuning&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hyperparameter&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Global Batch Size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Learning rate&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Epochs&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Max length&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Weight decay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaVA-v1.5-13B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2e-5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2048&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Download Vicuna checkpoints (automatically)&lt;/h3&gt; &#xA;&lt;p&gt;Our base model Vicuna v1.5, which is an instruction-tuned chatbot, will be downloaded automatically when you run our provided training scripts. No action is needed.&lt;/p&gt; &#xA;&lt;h3&gt;Pretrain (feature alignment)&lt;/h3&gt; &#xA;&lt;p&gt;Please download the 558K subset of the LAION-CC-SBU dataset with BLIP captions we use in the paper &lt;a href=&#34;https://huggingface.co/datasets/liuhaotian/LLaVA-Pretrain&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pretrain takes around 5.5 hours for LLaVA-v1.5-13B on 8x A100 (80G), due to the increased resolution to 336px. It takes around 3.5 hours for LLaVA-v1.5-7B.&lt;/p&gt; &#xA;&lt;p&gt;Training script with DeepSpeed ZeRO-2: &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/scripts/v1_5/pretrain.sh&#34;&gt;&lt;code&gt;pretrain.sh&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--mm_projector_type mlp2x_gelu&lt;/code&gt;: the two-layer MLP vision-language connector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--vision_tower openai/clip-vit-large-patch14-336&lt;/code&gt;: CLIP ViT-L/14 336px.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Visual Instruction Tuning&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prepare data&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please download the annotation of the final mixture our instruction tuning data &lt;a href=&#34;https://huggingface.co/datasets/liuhaotian/LLaVA-Instruct-150K/blob/main/llava_v1_5_mix665k.json&#34;&gt;llava_v1_5_mix665k.json&lt;/a&gt;, and download the images from constituting datasets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COCO: &lt;a href=&#34;http://images.cocodataset.org/zips/train2017.zip&#34;&gt;train2017&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GQA: &lt;a href=&#34;https://downloads.cs.stanford.edu/nlp/data/gqa/images.zip&#34;&gt;images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OCR-VQA: &lt;a href=&#34;https://drive.google.com/drive/folders/1_GYPY5UkUy7HIcR0zq3ZCFgeZN7BAfm_?usp=sharing&#34;&gt;download script&lt;/a&gt;, &lt;strong&gt;we save all files as &lt;code&gt;.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;TextVQA: &lt;a href=&#34;https://dl.fbaipublicfiles.com/textvqa/images/train_val_images.zip&#34;&gt;train_val_images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VisualGenome: &lt;a href=&#34;https://cs.stanford.edu/people/rak248/VG_100K_2/images.zip&#34;&gt;part1&lt;/a&gt;, &lt;a href=&#34;https://cs.stanford.edu/people/rak248/VG_100K_2/images2.zip&#34;&gt;part2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After downloading all of them, organize the data as follows in &lt;code&gt;./playground/data&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── coco&#xA;│   └── train2017&#xA;├── gqa&#xA;│   └── images&#xA;├── ocr_vqa&#xA;│   └── images&#xA;├── textvqa&#xA;│   └── train_images&#xA;└── vg&#xA;    ├── VG_100K&#xA;    └── VG_100K_2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start training!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You may download our pretrained projectors in &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md&#34;&gt;Model Zoo&lt;/a&gt;. It is not recommended to use legacy projectors, as they may be trained with a different version of the codebase, and if any option is off, the model will not function/train as we expected.&lt;/p&gt; &#xA;&lt;p&gt;Visual instruction tuning takes around 20 hours for LLaVA-v1.5-13B on 8x A100 (80G), due to the increased resolution to 336px. It takes around 10 hours for LLaVA-v1.5-7B on 8x A100 (40G).&lt;/p&gt; &#xA;&lt;p&gt;Training script with DeepSpeed ZeRO-3: &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/scripts/v1_5/finetune.sh&#34;&gt;&lt;code&gt;finetune.sh&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are do not have enough GPU memory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use LoRA: &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/scripts/v1_5/finetune_lora.sh&#34;&gt;&lt;code&gt;finetune_lora.sh&lt;/code&gt;&lt;/a&gt;. We are able to fit 13B training in 8-A100-40G/8-A6000, and 7B training in 8-RTX3090. Make sure &lt;code&gt;per_device_train_batch_size*gradient_accumulation_steps&lt;/code&gt; is the same as the provided script for best reproducibility.&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;zero3.json&lt;/code&gt; with &lt;code&gt;zero3_offload.json&lt;/code&gt; which offloads some parameters to CPU RAM. This slows down the training speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in finetuning LLaVA model to your own task/data, please check out &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Finetune_Custom_Data.md&#34;&gt;&lt;code&gt;Finetune_Custom_Data.md&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;New options to note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--mm_projector_type mlp2x_gelu&lt;/code&gt;: the two-layer MLP vision-language connector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--vision_tower openai/clip-vit-large-patch14-336&lt;/code&gt;: CLIP ViT-L/14 336px.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--image_aspect_ratio pad&lt;/code&gt;: this pads the non-square images to square, instead of cropping them; it slightly reduces hallucination.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--group_by_modality_length True&lt;/code&gt;: this should only be used when your instruction tuning dataset contains both language (e.g. ShareGPT) and multimodal (e.g. LLaVA-Instruct). It makes the training sampler only sample a single modality (either image or language) during training, which we observe to speed up training by ~25%, and does not affect the final outcome.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;In LLaVA-1.5, we evaluate models on a diverse set of 12 benchmarks. To ensure the reproducibility, we evaluate the models with greedy decoding. We do not evaluate using beam search to make the inference process consistent with the chat demo of real-time outputs.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Evaluation.md&#34;&gt;Evaluation.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GPT-assisted Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Our GPT-assisted evaluation pipeline for multimodal modeling is provided for a comprehensive understanding of the capabilities of vision-language models. Please see our paper for more details.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate LLaVA responses&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python model_vqa.py \&#xA;    --model-path ./checkpoints/LLaVA-13B-v0 \&#xA;    --question-file \&#xA;    playground/data/coco2014_val_qa_eval/qa90_questions.jsonl \&#xA;    --image-folder \&#xA;    /path/to/coco2014_val \&#xA;    --answers-file \&#xA;    /path/to/answer-file-our.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Evaluate the generated responses. In our case, &lt;a href=&#34;https://raw.githubusercontent.com/haotian-liu/LLaVA/main/playground/data/coco2014_val_qa_eval/qa90_gpt4_answer.jsonl&#34;&gt;&lt;code&gt;answer-file-ref.jsonl&lt;/code&gt;&lt;/a&gt; is the response generated by text-only GPT-4 (0314), with the context captions/boxes provided.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;OPENAI_API_KEY=&#34;sk-***********************************&#34; python llava/eval/eval_gpt_review_visual.py \&#xA;    --question playground/data/coco2014_val_qa_eval/qa90_questions.jsonl \&#xA;    --context llava/eval/table/caps_boxes_coco2014_val_80.jsonl \&#xA;    --answer-list \&#xA;    /path/to/answer-file-ref.jsonl \&#xA;    /path/to/answer-file-our.jsonl \&#xA;    --rule llava/eval/table/rule.json \&#xA;    --output /path/to/review.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Summarize the evaluation results&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python summarize_gpt_review.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find LLaVA useful for your research and applications, please cite using this BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;&#xA;@misc{liu2023improvedllava,&#xA;      title={Improved Baselines with Visual Instruction Tuning}, &#xA;      author={Liu, Haotian and Li, Chunyuan and Li, Yuheng and Lee, Yong Jae},&#xA;      publisher={arXiv:2310.03744},&#xA;      year={2023},&#xA;}&#xA;&#xA;@misc{liu2023llava,&#xA;      title={Visual Instruction Tuning}, &#xA;      author={Liu, Haotian and Li, Chunyuan and Wu, Qingyang and Lee, Yong Jae},&#xA;      publisher={arXiv:2304.08485},&#xA;      year={2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;Vicuna&lt;/a&gt;: the codebase we built upon, and our base model Vicuna-13B that has the amazing language capabilities!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Instruction-Tuning-with-GPT-4/GPT-4-LLM&#34;&gt;Instruction Tuning with GPT-4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/LLaVA-Med&#34;&gt;LLaVA-Med: Training a Large Language-and-Vision Assistant for Biomedicine in One Day&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Luodian/Otter&#34;&gt;Otter: In-Context Multi-Modal Instruction Tuning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For future project ideas, please check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UX-Decoder/Segment-Everything-Everywhere-All-At-Once&#34;&gt;SEEM: Segment Everything Everywhere All at Once&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/Grounded-Segment-Anything&#34;&gt;Grounded-Segment-Anything&lt;/a&gt; to detect, segment, and generate anything by marrying &lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO&#34;&gt;Grounding DINO&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;Segment-Anything&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>