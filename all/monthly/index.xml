<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-01T02:09:56Z</updated>
  <subtitle>Monthly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hwchase17/langchain</title>
    <updated>2023-05-01T02:09:56Z</updated>
    <id>tag:github.com,2023-05-01:/hwchase17/langchain</id>
    <link href="https://github.com/hwchase17/langchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö° Building applications with LLMs through composability ‚ö°&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ü¶úÔ∏èüîó LangChain&lt;/h1&gt; &#xA;&lt;p&gt;‚ö° Building applications with LLMs through composability ‚ö°&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/linkcheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/linkcheck.yml/badge.svg?sanitize=true&#34; alt=&#34;linkcheck&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/langchain&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/langchain/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/langchainai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/langchainai.svg?style=social&amp;amp;label=Follow%20%40LangChainAI&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6adMQxSpJS&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/6adMQxSpJS?compact=true&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looking for the JS/TS version? Check out &lt;a href=&#34;https://github.com/hwchase17/langchainjs&#34;&gt;LangChain.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production Support:&lt;/strong&gt; As you move your LangChains into production, we&#39;d love to offer more comprehensive support. Please fill out &lt;a href=&#34;https://forms.gle/57d8AmXBYp8PP8tZA&#34;&gt;this form&lt;/a&gt; and we&#39;ll set up a dedicated support Slack channel.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install langchain&lt;/code&gt; or &lt;code&gt;conda install langchain -c conda-forge&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§î What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.&lt;/p&gt; &#xA;&lt;p&gt;This library aims to assist in the development of those types of applications. Common examples of these applications include:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ùì Question Answering over specific documents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://langchain.readthedocs.io/en/latest/use_cases/question_answering.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end Example: &lt;a href=&#34;https://github.com/hwchase17/notion-qa&#34;&gt;Question Answering over Notion Database&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;üí¨ Chatbots&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://langchain.readthedocs.io/en/latest/use_cases/chatbots.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end Example: &lt;a href=&#34;https://github.com/hwchase17/chat-langchain&#34;&gt;Chat-LangChain&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü§ñ Agents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://langchain.readthedocs.io/en/latest/modules/agents.html&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end Example: &lt;a href=&#34;https://huggingface.co/spaces/JavaFXpert/Chat-GPT-LangChain&#34;&gt;GPT+WolframAlpha&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/?&#34;&gt;here&lt;/a&gt; for full documentation on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started (installation, setting up the environment, simple examples)&lt;/li&gt; &#xA; &lt;li&gt;How-To examples (demos, integrations, helper functions)&lt;/li&gt; &#xA; &lt;li&gt;Reference (full API docs)&lt;/li&gt; &#xA; &lt;li&gt;Resources (high-level explanation of core concepts)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ What can this help with?&lt;/h2&gt; &#xA;&lt;p&gt;There are six main areas that LangChain is designed to help with. These are, in increasing order of complexity:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üìÉ LLMs and Prompts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This includes prompt management, prompt optimization, a generic interface for all LLMs, and common utilities for working with LLMs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üîó Chains:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chains go beyond a single LLM call and involve sequences of calls (whether to an LLM or a different utility). LangChain provides a standard interface for chains, lots of integrations with other tools, and end-to-end chains for common applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üìö Data Augmented Generation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data Augmented Generation involves specific types of chains that first interact with an external data source to fetch data for use in the generation step. Examples include summarization of long pieces of text and question/answering over specific data sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü§ñ Agents:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Agents involve an LLM making decisions about which Actions to take, taking that Action, seeing an Observation, and repeating that until done. LangChain provides a standard interface for agents, a selection of agents to choose from, and examples of end-to-end agents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üß† Memory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memory refers to persisting state between calls of a chain/agent. LangChain provides a standard interface for memory, a collection of memory implementations, and examples of chains/agents that use memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üßê Evaluation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;[BETA] Generative models are notoriously hard to evaluate with traditional metrics. One new way of evaluating them is using language models themselves to do the evaluation. LangChain provides some prompts/chains for assisting in this.&lt;/p&gt; &#xA;&lt;p&gt;For more information on these concepts, please see our &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üíÅ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;As an open-source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infrastructure, or better documentation.&lt;/p&gt; &#xA;&lt;p&gt;For detailed information on how to contribute, see &lt;a href=&#34;https://raw.githubusercontent.com/hwchase17/langchain/master/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>databrickslabs/dolly</title>
    <updated>2023-05-01T02:09:56Z</updated>
    <id>tag:github.com,2023-05-01:/databrickslabs/dolly</id>
    <link href="https://github.com/databrickslabs/dolly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Databricks‚Äô Dolly, a large language model trained on the Databricks Machine Learning Platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dolly&lt;/h1&gt; &#xA;&lt;p&gt;Databricks‚Äô &lt;a href=&#34;https://huggingface.co/databricks/dolly-v2-12b&#34;&gt;Dolly&lt;/a&gt; is an instruction-following large language model trained on the Databricks machine learning platform that is licensed for commercial use. Based on &lt;code&gt;pythia-12b&lt;/code&gt;, Dolly is trained on ~15k instruction/response fine tuning records &lt;a href=&#34;https://huggingface.co/datasets/databricks/databricks-dolly-15k&#34;&gt;&lt;code&gt;databricks-dolly-15k&lt;/code&gt;&lt;/a&gt; generated by Databricks employees in capability domains from the InstructGPT paper, including brainstorming, classification, closed QA, generation, information extraction, open QA and summarization. &lt;code&gt;dolly-v2-12b&lt;/code&gt; is not a state-of-the-art model, but does exhibit surprisingly high quality instruction following behavior not characteristic of the foundation model on which it is based.&lt;/p&gt; &#xA;&lt;p&gt;Databricks is committed to ensuring that every organization and individual benefits from the transformative power of artificial intelligence. The Dolly model family represents our first steps along this journey, and we‚Äôre excited to share this technology with the world.&lt;/p&gt; &#xA;&lt;p&gt;The model is available on Hugging Face as &lt;a href=&#34;https://huggingface.co/databricks/dolly-v2-12b&#34;&gt;databricks/dolly-v2-12b&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Model Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dolly-v2-12b&lt;/code&gt; is a 12 billion parameter causal language model created by &lt;a href=&#34;https://databricks.com/&#34;&gt;Databricks&lt;/a&gt; that is derived from &lt;a href=&#34;https://www.eleuther.ai/&#34;&gt;EleutherAI‚Äôs&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/EleutherAI/pythia-12b&#34;&gt;Pythia-12b&lt;/a&gt; and fine-tuned on a &lt;a href=&#34;https://github.com/databrickslabs/dolly/tree/master/data&#34;&gt;~15K record instruction corpus&lt;/a&gt; generated by Databricks employees and released under a permissive license (CC-BY-SA)&lt;/p&gt; &#xA;&lt;h2&gt;Known Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;Performance Limitations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dolly-v2-12b&lt;/code&gt; is not a state-of-the-art generative language model&lt;/strong&gt; and, though quantitative benchmarking is ongoing, is not designed to perform competitively with more modern model architectures or models subject to larger pretraining corpuses.&lt;/p&gt; &#xA;&lt;p&gt;The Dolly model family is under active development, and so any list of shortcomings is unlikely to be exhaustive, but we include known limitations and misfires here as a means to document and share our preliminary findings with the community. In particular, &lt;code&gt;dolly-v2-12b&lt;/code&gt; struggles with: syntactically complex prompts, programming problems, mathematical operations, factual errors, dates and times, open-ended question answering, hallucination, enumerating lists of specific length, stylistic mimicry, having a sense of humor, etc. Moreover, we find that &lt;code&gt;dolly-v2-12b&lt;/code&gt; does not have some capabilities, such as well-formatted letter writing, present in the original model.&lt;/p&gt; &#xA;&lt;h3&gt;Dataset Limitations&lt;/h3&gt; &#xA;&lt;p&gt;Like all language models, &lt;code&gt;dolly-v2-12b&lt;/code&gt; reflects the content and limitations of its training corpuses.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The Pile&lt;/strong&gt;: GPT-J‚Äôs pre-training corpus contains content mostly collected from the public internet, and like most web-scale datasets, it contains content many users would find objectionable. As such, the model is likely to reflect these shortcomings, potentially overtly in the case it is explicitly asked to produce objectionable content, and sometimes subtly, as in the case of biased or harmful implicit associations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;databricks-dolly-15k&lt;/code&gt;&lt;/strong&gt;: The training data on which &lt;code&gt;dolly-v2-12b&lt;/code&gt; is instruction tuned represents natural language instructions generated by Databricks employees during a period spanning March and April 2023 and includes passages from Wikipedia as references passages for instruction categories like closed QA and summarization. To our knowledge it does not contain obscenity, intellectual property or personally identifying information about non-public figures, but it may contain typos and factual errors. The dataset may also reflect biases found in Wikipedia. Finally, the dataset likely reflects the interests and semantic choices of Databricks employees, a demographic which is not representative of the global population at large.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Databricks is committed to ongoing research and development efforts to develop helpful, honest and harmless AI technologies that maximize the potential of all individuals and organizations.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Response Generation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to simply test the model without training, the model is available on Hugging Face as &lt;a href=&#34;https://huggingface.co/databricks/dolly-v2-12b&#34;&gt;databricks/dolly-v2-12b&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the model with the &lt;code&gt;transformers&lt;/code&gt; library on a machine with A100 GPUs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from transformers import pipeline&#xA;import torch&#xA;&#xA;instruct_pipeline = pipeline(model=&#34;databricks/dolly-v2-12b&#34;, torch_dtype=torch.bfloat16, trust_remote_code=True, device_map=&#34;auto&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use the pipeline to answer instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;instruct_pipeline(&#34;Explain to me the difference between nuclear fission and fusion.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating on Other Instances&lt;/h3&gt; &#xA;&lt;p&gt;A100 instance types are not available in all cloud regions, or can be hard to provision. Inference is possible on other GPU instance types.&lt;/p&gt; &#xA;&lt;h4&gt;A10 GPUs&lt;/h4&gt; &#xA;&lt;p&gt;The 6.9B and 2.8B param models should work as-is.&lt;/p&gt; &#xA;&lt;p&gt;To generate using the 12B param model on A10s (ex: &lt;code&gt;g5.4xlarge&lt;/code&gt;, 1 x A10 24GB), it&#39;s necessary to load and run generating using 8-bit weights, which impacts the results slightly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also install &lt;code&gt;bitsandbytes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;model_kwargs={&#39;load_in_8bit&#39;: True}&lt;/code&gt; to the &lt;code&gt;pipeline()&lt;/code&gt; command shown above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;V100 GPUs&lt;/h4&gt; &#xA;&lt;p&gt;When using V100s (ex: &lt;code&gt;p3.2xlarge&lt;/code&gt;, 1 x V100 16GB, &lt;code&gt;NC6s_v3&lt;/code&gt;), in all cases, set &lt;code&gt;torch_dtype=torch.float16&lt;/code&gt; in &lt;code&gt;pipeline()&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, follow the steps above. The 12B param model may not function well in 8-bit on V100s.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Training&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;dolly&lt;/code&gt; repo to Databricks (under Repos click Add Repo, enter &lt;code&gt;https://github.com/databrickslabs/dolly.git&lt;/code&gt;, then click Create Repo).&lt;/li&gt; &#xA; &lt;li&gt;Start a &lt;code&gt;12.2 LTS ML (includes Apache Spark 3.3.2, GPU, Scala 2.12)&lt;/code&gt; single-node cluster with node type having 8 A100 GPUs (e.g. &lt;code&gt;Standard_ND96asr_v4&lt;/code&gt; or &lt;code&gt;p4d.24xlarge&lt;/code&gt;). Note that these instance types may not be available in all regions, or may be difficult to provision. In Databricks, note that you must select the GPU runtime first, and unselect &#34;Use Photon&#34;, for these instance types to appear (where supported).&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;train_dolly&lt;/code&gt; notebook in the Repo (which is the &lt;code&gt;train_dolly.py&lt;/code&gt; file in the Github &lt;code&gt;dolly&lt;/code&gt; repo), attach to your GPU cluster, and run all cells. When training finishes, the notebook will save the model under &lt;code&gt;/dbfs/dolly_training&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Training on Other Instances&lt;/h3&gt; &#xA;&lt;p&gt;A100 instance types are not available in all cloud regions, or can be hard to provision. Training is possible on other GPU instance types, for smaller Dolly model sizes, and with small modifications to reduce memory usage. These modifications are not optimal, but are simple to make.&lt;/p&gt; &#xA;&lt;h4&gt;A10 GPUs&lt;/h4&gt; &#xA;&lt;p&gt;Training the 12B param model is not recommended on A10s.&lt;/p&gt; &#xA;&lt;p&gt;To train the 6.9B param model on A10 instances (ex: &lt;code&gt;g5.24xlarge&lt;/code&gt;, 4 x A10 24GB; &lt;code&gt;Standard_NV72ads_A10_v5&lt;/code&gt;, 2 x A10), make the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set &lt;code&gt;per-device-train-batch-size&lt;/code&gt; and &lt;code&gt;per-device-eval-batch-size&lt;/code&gt; to 3 in the &lt;code&gt;train_dolly.py&lt;/code&gt; invocation of &lt;code&gt;deepspeed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify the deepspeed config file &lt;code&gt;ds_z3_bf16_config.json&lt;/code&gt; to configure optimizer offload. Within the &lt;code&gt;&#34;zero_optimization&#34;&lt;/code&gt; section, add: &lt;pre&gt;&lt;code&gt;&#34;offload_optimizer&#34;: {&#xA;  &#34;device&#34;: &#34;cpu&#34;,&#xA;  &#34;pin_memory&#34;: true&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;num_gpus&lt;/code&gt; widget in &lt;code&gt;train_dolly&lt;/code&gt; to the number of GPUs in your instance, such as 2 or 4, before running&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To train the 2.8B param model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instead, only set &lt;code&gt;per-device-train-batch-size&lt;/code&gt; and &lt;code&gt;per-device-eval-batch-size&lt;/code&gt; to 3 in the &lt;code&gt;train_dolly.py&lt;/code&gt; invocation of &lt;code&gt;deepspeed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;V100 GPUs&lt;/h4&gt; &#xA;&lt;p&gt;To run on V100 instances with 32GB of GPU memory (ex: &lt;code&gt;p3dn.24xlarge&lt;/code&gt; or &lt;code&gt;Standard_ND40rs_v2&lt;/code&gt;), follow instructions above, and add:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;training/trainer.py&lt;/code&gt; to disable &lt;code&gt;bf16&lt;/code&gt; and enable &lt;code&gt;fp16&lt;/code&gt; in &lt;code&gt;TrainingArguments&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;...&#xA;fp16=True,&#xA;bf16=False,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may be able to slightly increase the batch size with 32GB instances, compared to what works above for 24GB A10s.&lt;/p&gt; &#xA;&lt;h2&gt;Running Unit Tests Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv local 3.8.13&#xA;python -m venv .venv&#xA;. .venv/bin/activate&#xA;pip install -r requirements_dev.txt&#xA;./run_pytest.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>biobootloader/wolverine</title>
    <updated>2023-05-01T02:09:56Z</updated>
    <id>tag:github.com,2023-05-01:/biobootloader/wolverine</id>
    <link href="https://github.com/biobootloader/wolverine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wolverine&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Give your python scripts regenerative healing abilities!&lt;/p&gt; &#xA;&lt;p&gt;Run your scripts with Wolverine and when they crash, GPT-4 edits them and explains what went wrong. Even if you have many bugs it will repeatedly rerun until it&#39;s fixed.&lt;/p&gt; &#xA;&lt;p&gt;For a quick demonstration see my &lt;a href=&#34;https://twitter.com/bio_bootloader/status/1636880208304431104&#34;&gt;demo video on twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv venv&#xA;source venv/bin/activate&#xA;pip install -r requirements.txt&#xA;cp .env.sample .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your openAI api key to &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;warning!&lt;/em&gt; By default wolverine uses GPT-4 and may make many repeated calls to the api.&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run with gpt-4 (the default, tested option):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m wolverine examples/buggy_script.py &#34;subtract&#34; 20 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run with other models, but be warned they may not adhere to the edit format as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m wolverine --model=gpt-3.5-turbo examples/buggy_script.py &#34;subtract&#34; 20 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use GPT-3.5 by default instead of GPT-4 uncomment the default model line in &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DEFAULT_MODEL=gpt-3.5-turbo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use flag &lt;code&gt;--confirm=True&lt;/code&gt; which will ask you &lt;code&gt;yes or no&lt;/code&gt; before making changes to the file. If flag is not used then it will apply the changes to the file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m wolverine examples/buggy_script.py &#34;subtract&#34; 20 3 --confirm=True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;env name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_API_KEY&lt;/td&gt; &#xA;   &lt;td&gt;OpenAI API key&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DEFAULT_MODEL&lt;/td&gt; &#xA;   &lt;td&gt;GPT model to use&lt;/td&gt; &#xA;   &lt;td&gt;&#34;gpt-4&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VALIDATE_JSON_RETRY&lt;/td&gt; &#xA;   &lt;td&gt;Number of retries when requesting OpenAI API (-1 means unlimites)&lt;/td&gt; &#xA;   &lt;td&gt;-1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Future Plans&lt;/h2&gt; &#xA;&lt;p&gt;This is just a quick prototype I threw together in a few hours. There are many possible extensions and contributions are welcome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add flags to customize usage, such as asking for user confirmation before running changed code&lt;/li&gt; &#xA; &lt;li&gt;further iterations on the edit format that GPT responds in. Currently it struggles a bit with indentation, but I&#39;m sure that can be improved&lt;/li&gt; &#xA; &lt;li&gt;a suite of example buggy files that we can test prompts on to ensure reliability and measure improvement&lt;/li&gt; &#xA; &lt;li&gt;multiple files / codebases: send GPT everything that appears in the stacktrace&lt;/li&gt; &#xA; &lt;li&gt;graceful handling of large files - should we just send GPT relevant classes / functions?&lt;/li&gt; &#xA; &lt;li&gt;extension to languages other than python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#biobootloader/wolverine&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=biobootloader/wolverine&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>