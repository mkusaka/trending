<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:07:51Z</updated>
  <subtitle>Monthly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>krahets/hello-algo</title>
    <updated>2023-10-01T02:07:51Z</updated>
    <id>tag:github.com,2023-10-01:/krahets/hello-algo</id>
    <link href="https://github.com/krahets/hello-algo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《Hello 算法》：动画图解、一键运行的数据结构与算法教程，支持 Java, C++, Python, Go, JS, TS, C#, Swift, Rust, Dart, Zig 等语言。&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.hello-algo.com/&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/conceptual_rendering.png&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://readme-typing-svg.demolab.com?font=Fira+Code&amp;amp;weight=500&amp;amp;duration=3500&amp;amp;pause=2000&amp;amp;color=21C8B8&amp;amp;center=true&amp;amp;vCenter=true&amp;amp;width=200&amp;amp;lines=Hello%2C+%E7%AE%97%E6%B3%95+!&#34; alt=&#34;hello-algo-typing-svg&#34;&gt; &lt;br&gt; 动画图解、一键运行的数据结构与算法教程 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.hello-algo.com/&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/btn_read_online_dark.png&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/krahets/hello-algo/releases&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/btn_download_pdf_dark.png&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/animation.gif&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://www.hello-algo.com/index.assets/running_code.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;关于本书&lt;/h2&gt; &#xA;&lt;p&gt;本项目旨在打造一本开源免费、新手友好的数据结构与算法入门教程。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;全书采用动画图解，内容清晰易懂、学习曲线平滑，引导初学者探索数据结构与算法的知识地图。&lt;/li&gt; &#xA; &lt;li&gt;源代码可一键运行，帮助读者在练习中提升编程技能，了解算法工作原理和数据结构底层实现。&lt;/li&gt; &#xA; &lt;li&gt;鼓励读者互助学习，提问与评论通常可在两日内得到回复。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;若本书对您有所帮助，请在页面右上角点个 Star &lt;span&gt;⭐&lt;/span&gt; 支持一下，谢谢！&lt;/p&gt; &#xA;&lt;h2&gt;推荐语&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“一本通俗易懂的数据结构与算法入门书，引导读者手脑并用地学习，强烈推荐算法初学者阅读。”&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;—— 邓俊辉，清华大学计算机系教授&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“如果我当年学数据结构与算法的时候有《Hello 算法》，学起来应该会简单 10 倍！”&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;—— 李沐，亚马逊资深首席科学家&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;参与写作&lt;/h2&gt; &#xA;&lt;p&gt;我们正在加速更新本书，欢迎您通过提交 Pull Request 来&lt;a href=&#34;https://www.hello-algo.com/chapter_appendix/contribution/&#34;&gt;参与本项目&lt;/a&gt;，以帮助其他读者获取更优质的学习内容。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;若您发现语法错误、内容缺失、文字歧义、无效链接、解释不清晰等问题，请协助修正或在评论区指出。&lt;/li&gt; &#xA; &lt;li&gt;期待您参与 C++, Python, Go, JavaScript, TypeScript, C, C#, Swift, Zig, Rust, Dart 等语言的&lt;a href=&#34;https://github.com/krahets/hello-algo/issues/15&#34;&gt;代码翻译&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;欢迎您为本书内容提出宝贵意见和建议，如有任何问题请提交 Issues 或微信联系 krahets-jyd 。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;感谢本开源书的每一位撰稿人，是他们的无私奉献让这本书变得更好，他们是：&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/krahets/hello-algo/graphs/contributors&#34;&gt; &lt;img width=&#34;550&#34; src=&#34;https://contrib.rocks/image?repo=krahets/hello-algo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The texts, codes, images, photos, and videos in this repository are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;CC BY-NC-SA-4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oven-sh/bun</title>
    <updated>2023-10-01T02:07:51Z</updated>
    <id>tag:github.com,2023-10-01:/oven-sh/bun</id>
    <link href="https://github.com/oven-sh/bun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Incredibly fast JavaScript runtime, bundler, test runner, and package manager – all in one&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://bun.sh&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/709451/182802334-d9c42afe-f35d-4a7b-86ea-9985f73f20c3.png&#34; alt=&#34;Logo&#34; height=&#34;170&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Bun&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://bun.sh/discord&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;20&#34; src=&#34;https://img.shields.io/discord/876711213126520882&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/oven-sh/bun&#34; alt=&#34;stars&#34;&gt; &lt;a href=&#34;https://twitter.com/jarredsumner/status/1542824445810642946&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=speed&amp;amp;message=fast&amp;amp;color=success&#34; alt=&#34;Bun speed&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://bun.sh/docs&#34;&gt;Documentation&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://discord.com/invite/CXdq2DP29u&#34;&gt;Discord&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/oven-sh/bun/issues/new&#34;&gt;Issues&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/oven-sh/bun/issues/159&#34;&gt;Roadmap&lt;/a&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://bun.sh/docs&#34;&gt;Read the docs →&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;What is Bun?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;​​Bun is under active development.&lt;/strong&gt; Use it to speed up your development workflows or run simpler production code in resource-constrained environments like serverless functions. We&#39;re working on more complete Node.js compatibility and integration with existing frameworks. Join the &lt;a href=&#34;https://bun.sh/discord&#34;&gt;Discord&lt;/a&gt; and watch the &lt;a href=&#34;https://github.com/oven-sh/bun&#34;&gt;GitHub repository&lt;/a&gt; to keep tabs on future releases.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Bun is an all-in-one toolkit for JavaScript and TypeScript apps. It ships as a single executable called &lt;code&gt;bun​&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At its core is the &lt;em&gt;Bun runtime&lt;/em&gt;, a fast JavaScript runtime designed as a drop-in replacement for Node.js. It&#39;s written in Zig and powered by JavaScriptCore under the hood, dramatically reducing startup times and memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run index.tsx             # TS and JSX supported out of the box&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;​​The &lt;code&gt;bun​&lt;/code&gt; command-line tool also implements a test runner, script runner, and Node.js-compatible package manager. Instead of 1,000 node_modules for development, you only need &lt;code&gt;bun&lt;/code&gt;. Bun&#39;s built-in tools are significantly faster than existing options and usable in existing Node.js projects with little to no changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun test                      # run tests&#xA;bun run start                 # run the `start` script in `package.json`&#xA;bun install &amp;lt;pkg&amp;gt;​             # install a package&#xA;bunx cowsay &#39;Hello, world!&#39;   # execute a package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Bun supports Linux (x64 &amp;amp; arm64) and macOS (x64 &amp;amp; Apple Silicon).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Linux users&lt;/strong&gt; — Kernel version 5.6 or higher is strongly recommended, but the minimum is 5.1.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Windows users&lt;/strong&gt; — Bun does not currently provide a native Windows build. We&#39;re working on this; progress can be tracked at &lt;a href=&#34;https://github.com/oven-sh/bun/issues/43&#34;&gt;this issue&lt;/a&gt;. In the meantime, use one of the installation methods below for Windows Subsystem for Linux.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# with install script (recommended)&#xA;curl -fsSL https://bun.sh/install | bash&#xA;&#xA;# with npm&#xA;npm install -g bun&#xA;&#xA;# with Homebrew&#xA;brew tap oven-sh/bun&#xA;brew install bun&#xA;&#xA;# with Docker&#xA;docker pull oven/bun&#xA;docker run --rm --init --ulimit memlock=-1:-1 oven/bun&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrade&lt;/h3&gt; &#xA;&lt;p&gt;To upgrade to the latest version of Bun, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bun upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bun automatically releases a canary build on every commit to &lt;code&gt;main&lt;/code&gt;. To upgrade to the latest canary build, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bun upgrade --canary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oven-sh/bun/releases/tag/canary&#34;&gt;View canary build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intro &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/index&#34;&gt;What is Bun?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CLI &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/cli/run&#34;&gt;&lt;code&gt;bun run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/cli/install&#34;&gt;&lt;code&gt;bun install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/cli/test&#34;&gt;&lt;code&gt;bun test&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/templates#bun-init&#34;&gt;&lt;code&gt;bun init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/templates#bun-create&#34;&gt;&lt;code&gt;bun create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/cli/bunx&#34;&gt;&lt;code&gt;bunx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Runtime &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/runtime/index&#34;&gt;Runtime&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/runtime/modules&#34;&gt;Module resolution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/runtime/hot&#34;&gt;Hot &amp;amp; live reloading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/bundler/plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ecosystem &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/ecosystem/nodejs&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/ecosystem/typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/ecosystem/react&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/ecosystem/elysia&#34;&gt;Elysia&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/ecosystem/hono&#34;&gt;Hono&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/ecosystem/express&#34;&gt;Express&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/apvarun/awesome-bun&#34;&gt;awesome-bun&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/http&#34;&gt;HTTP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/websockets&#34;&gt;WebSockets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/tcp&#34;&gt;TCP Sockets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/file-io&#34;&gt;File I/O&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/sqlite&#34;&gt;SQLite&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/file-system-router&#34;&gt;FileSystemRouter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/globals&#34;&gt;Globals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/spawn&#34;&gt;Spawn&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/transpiler&#34;&gt;Transpiler&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/console&#34;&gt;Console&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/ffi&#34;&gt;FFI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/html-rewriter&#34;&gt;HTMLRewriter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/test&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/utils&#34;&gt;Utils&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bun.sh/docs/api/node-api&#34;&gt;Node-API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://bun.sh/docs/project/development&#34;&gt;Project &amp;gt; Development&lt;/a&gt; guide to start contributing to Bun.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://bun.sh/docs/project/licensing&#34;&gt;Project &amp;gt; License&lt;/a&gt; page for information about Bun&#39;s licensing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Pythagora-io/gpt-pilot</title>
    <updated>2023-10-01T02:07:51Z</updated>
    <id>tag:github.com,2023-10-01:/Pythagora-io/gpt-pilot</id>
    <link href="https://github.com/Pythagora-io/gpt-pilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dev tool that writes scalable apps from scratch while the developer oversees the implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧑‍✈️ GPT PILOT&lt;/h1&gt; &#xA;&lt;h3&gt;GPT Pilot helps developers build apps 20x faster&lt;/h3&gt; &#xA;&lt;p&gt;You specify what kind of app you want to build. Then, GPT Pilot asks clarifying questions, creates the product and technical requirements, sets up the environment, and &lt;strong&gt;starts coding the app step by step, like in real life while you oversee the development process&lt;/strong&gt;. It asks you to review each task it finishes or to help when it gets stuck. This way, GPT Pilot acts as a coder while you are a lead dev who reviews code and helps when needed.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-requirements&#34;&gt;🔌 Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#how-to-start-using-gpt-pilot&#34;&gt;🚦How to start using gpt-pilot?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-how-to-start-gpt-pilot-in-docker&#34;&gt;🐳 How to start gpt-pilot in docker?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-other-arguments&#34;&gt;🧑‍💻️ Other arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-examples&#34;&gt;🔎 Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-real-time-chat-app&#34;&gt;Real-time chat app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-markdown-editor&#34;&gt;Markdown editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-timer-app&#34;&gt;Timer app&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-main-pillars-of-gpt-pilot&#34;&gt;🏛 Main pillars of GPT Pilot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-how-gpt-pilot-works&#34;&gt;🏗 How GPT Pilot works?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#hows-gpt-pilot-different-from-smol-developer-and-gpt-engineer&#34;&gt;🕴How&#39;s GPT Pilot different from &lt;em&gt;Smol developer&lt;/em&gt; and &lt;em&gt;GPT engineer&lt;/em&gt;?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-contributing&#34;&gt;🍻 Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-connect-with-us&#34;&gt;🔗 Connect with us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The goal of GPT Pilot is to research how much can GPT-4 be utilized to generate fully working, production-ready apps while the developer oversees the implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The main idea is that AI can write most of the code for an app (maybe 95%) but for the rest 5%, a developer is and will be needed until we get full AGI&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve broken down the idea behind GPT Pilot and how it works in the following blog posts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.pythagora.ai/2023/08/23/430/&#34;&gt;[Part 1/3] High-level concepts + GPT Pilot workflow until the coding part&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;[Part 2/3] GPT Pilot coding workflow (COMING UP)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;[Part 3/3] Other important concepts and future plans (COMING UP)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/gpt-pilot/main/#-examples&#34;&gt;👉 Examples of apps written by GPT Pilot 👈&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/0495631b-511e-451b-93d5-8a42acf22d3d&#34;&gt;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/0495631b-511e-451b-93d5-8a42acf22d3d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🔌 Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; (optional, projects default is SQLite) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DB is needed for multiple reasons like continuing app development if you had to stop at any point or app crashed, going back to specific step so that you can change some later steps in development, easier debugging, for future we will add functionality to update project (change some things in existing project or add new features to the project and so on)...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🚦How to start using gpt-pilot?&lt;/h1&gt; &#xA;&lt;p&gt;After you have Python and PostgreSQL installed, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/Pythagora-io/gpt-pilot.git&lt;/code&gt; (clone the repo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd gpt-pilot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python -m venv pilot-env&lt;/code&gt; (create a virtual environment)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source pilot-env/bin/activate&lt;/code&gt; (or on Windows &lt;code&gt;pilot-env\Scripts\activate&lt;/code&gt;) (activate the virtual environment)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt; (install the dependencies)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd pilot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mv .env.example .env&lt;/code&gt; (create the .env file)&lt;/li&gt; &#xA; &lt;li&gt;Add your environment (OpenAI/Azure), your API key and the SQLite/PostgreSQL database info to the &lt;code&gt;.env&lt;/code&gt; file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;to change from SQLite to PostgreSQL in your .env just set &lt;code&gt;DATABASE_TYPE=postgres&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python db_init.py&lt;/code&gt; (initialize the database)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python main.py&lt;/code&gt; (start GPT Pilot)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After, this, you can just follow the instructions in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;All generated code will be stored in the folder &lt;code&gt;workspace&lt;/code&gt; inside the folder named after the app name you enter upon starting the pilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT: To run GPT Pilot, you need to have PostgreSQL set up on your machine&lt;/strong&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🐳 How to start gpt-pilot in docker?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/Pythagora-io/gpt-pilot.git&lt;/code&gt; (clone the repo)&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;docker-compose.yml&lt;/code&gt; environment variables&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;docker compose build&lt;/code&gt;. this will build a gpt-pilot container for you.&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;docker compose up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;access web terminal on &lt;code&gt;port 7681&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python db_init.py&lt;/code&gt; (initialize the database)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python main.py&lt;/code&gt; (start GPT Pilot)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will start two containers, one being a new image built by the &lt;code&gt;Dockerfile&lt;/code&gt; and a postgres database. The new image also has &lt;a href=&#34;https://github.com/tsl0922/ttyd&#34;&gt;ttyd&lt;/a&gt; installed so that you can easily interact with gpt-pilot. Node is also installed on the image and port 3000 is exposed.&lt;/p&gt; &#xA;&lt;h1&gt;🧑‍💻️ CLI arguments&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;app_type&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If not provided, the ProductOwner will ask for these values&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;app_type&lt;/code&gt; is used as a hint to the LLM as to what kind of architecture, language options and conventions would apply. If not provided, &lt;code&gt;prompts.prompts.ask_for_app_type()&lt;/code&gt; will ask for it.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;const.common.ALL_TYPES&lt;/code&gt;: &#39;Web App&#39;, &#39;Script&#39;, &#39;Mobile App&#39;, &#39;Chrome Extension&#39;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;app_id&lt;/code&gt; and &lt;code&gt;workspace&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Continue working on an existing app using &lt;strong&gt;&lt;code&gt;app_id&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;or&lt;/em&gt; &lt;strong&gt;&lt;code&gt;workspace&lt;/code&gt;&lt;/strong&gt; path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py workspace=&amp;lt;PATH_TO_PROJECT_WORKSPACE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each user can have their own workspace path for each App.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;These values will be saved to the User table in the DB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py user_id=me_at_work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If not specified, &lt;code&gt;user_id&lt;/code&gt; defaults to the OS username, but can be provided explicitly if your OS username differs from your GitHub or work username. This value is used to load the &lt;code&gt;App&lt;/code&gt; config when the &lt;code&gt;workspace&lt;/code&gt; arg is provided.&lt;/p&gt; &#xA;&lt;p&gt;If not specified &lt;code&gt;email&lt;/code&gt; will be parsed from &lt;code&gt;~/.gitconfig&lt;/code&gt; if the file exists.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot/discussions/55&#34;&gt;What&#39;s the purpose of arguments.password / User.password?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;advanced&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The Architect by default favours certain technologies including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.JS&lt;/li&gt; &#xA; &lt;li&gt;MongoDB&lt;/li&gt; &#xA; &lt;li&gt;PeeWee ORM&lt;/li&gt; &#xA; &lt;li&gt;Jest &amp;amp; PyUnit&lt;/li&gt; &#xA; &lt;li&gt;Bootstrap&lt;/li&gt; &#xA; &lt;li&gt;Vanilla JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Socket.io&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have your own preferences, you can have a deeper conversation with the Architect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py advanced=True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;step&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Continue working on an existing app from a specific &lt;strong&gt;&lt;code&gt;step&lt;/code&gt;&lt;/strong&gt; (eg: &lt;code&gt;user_tasks&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt; step=&amp;lt;STEP_FROM_CONST_COMMON&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;skip_until_dev_step&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Continue working on an existing app from a specific &lt;strong&gt;development step&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt; skip_until_dev_step=&amp;lt;DEV_STEP&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is basically the same as &lt;code&gt;step&lt;/code&gt; but during the actual development process. If you want to play around with gpt-pilot, this is likely the flag you will often use. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Erase all development steps previously done and continue working on an existing app from start of development&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py app_id=&amp;lt;ID_OF_THE_APP&amp;gt; skip_until_dev_step=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;delete_unrelated_steps&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;code&gt;update_files_before_start&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;🔎 Examples&lt;/h1&gt; &#xA;&lt;p&gt;Here are a couple of example apps GPT Pilot created by itself:&lt;/p&gt; &#xA;&lt;h3&gt;📱 Real-time chat app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💬 Prompt: &lt;code&gt;A simple chat app with real time communication&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;▶️ &lt;a href=&#34;https://youtu.be/bUj9DbMRYhA&#34;&gt;Video of the app creation process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💻️ &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot-chat-app-demo&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📝 Markdown editor&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💬 Prompt: &lt;code&gt;Build a simple markdown editor using HTML, CSS, and JavaScript. Allow users to input markdown text and display the formatted output in real-time.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;▶️ &lt;a href=&#34;https://youtu.be/uZeA1iX9dgg&#34;&gt;Video of the app creation process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💻️ &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot-demo-markdown-editor.git&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;⏱️ Timer app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💬 Prompt: &lt;code&gt;Create a simple timer app using HTML, CSS, and JavaScript that allows users to set a countdown timer and receive an alert when the time is up.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;▶️ &lt;a href=&#34;https://youtu.be/CMN3W18zfiE&#34;&gt;Video of the app creation process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💻️ &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot-timer-app-demo&#34;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;🏛 Main pillars of GPT Pilot:&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For AI to create a fully working app, &lt;strong&gt;a developer needs to be involved&lt;/strong&gt; in the process of app creation. They need to be able to change the code at any moment and GPT Pilot needs to continue working with those changes (e.g. add an API key or fix an issue if an AI gets stuck) &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The app needs to be written step by step as a developer would write it&lt;/strong&gt; - Let&#39;s say you want to create a simple app, and you know everything you need to code and have the entire architecture in your head. Even then, you won&#39;t code it out entirely, then run it for the first time and debug all the issues at once. Rather, you will implement something simple, like add routes, run it, see how it works, and then move on to the next task. This way, you can debug issues as they arise. The same should be in the case when AI codes. It will make mistakes for sure so in order for it to have an easier time debugging issues and for the developer to understand what is happening, the AI shouldn&#39;t just spit out the entire codebase at once. Rather, the app should be developed step by step just like a developer would code it - e.g. setup routes, add database connection, etc. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The approach needs to be scalable&lt;/strong&gt; so that AI can create a production ready app &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Context rewinding&lt;/strong&gt; - for solving each development task, the context size of the first message to the LLM has to be relatively the same. For example, the context size of the first LLM message while implementing development task #5 has to be more or less the same as the first message while developing task #50. Because of this, the conversation needs to be rewound to the first message upon each task. &lt;a href=&#34;https://blogpythagora.files.wordpress.com/2023/08/pythagora-product-development-frame-3-1.jpg?w=1714&#34;&gt;See the diagram here&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Recursive conversations&lt;/strong&gt; are LLM conversations that are set up in a way that they can be used “recursively”. For example, if GPT Pilot detects an error, it needs to debug it but let’s say that, during the debugging process, another error happens. Then, GPT Pilot needs to stop debugging the first issue, fix the second one, and then get back to fixing the first issue. This is a very important concept that, I believe, needs to work to make AI build large and scalable apps by itself. It works by rewinding the context and explaining each error in the recursion separately. Once the deepest level error is fixed, we move up in the recursion and continue fixing that error. We do this until the entire recursion is completed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;TDD (Test Driven Development)&lt;/strong&gt; - for GPT Pilot to be able to scale the codebase, it will need to be able to create new code without breaking previously written code. There is no better way to do this than working with TDD methodology. For each code that GPT Pilot writes, it needs to write tests that check if the code works as intended so that whenever new changes are made, all previous tests can be run.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The idea is that AI won&#39;t be able to (at least in the near future) create apps from scratch without the developer being involved. That&#39;s why we created an interactive tool that generates code but also requires the developer to check each step so that they can understand what&#39;s going on and so that the AI can have a better overview of the entire codebase.&lt;/p&gt; &#xA;&lt;p&gt;Obviously, it still can&#39;t create any production-ready app but the general concept of how this could work is there.&lt;/p&gt; &#xA;&lt;h1&gt;🏗 How GPT Pilot works?&lt;/h1&gt; &#xA;&lt;p&gt;Here are the steps GPT Pilot takes to create an app:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/d89ba1d4-1208-4b7f-b3d4-76e3ccea584e&#34; alt=&#34;GPT Pilot workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You enter the app name and the description&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product Owner agent&lt;/strong&gt; asks a couple of questions to understand the requirements better&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Product Owner agent&lt;/strong&gt; writes user stories and asks you if they are all correct (this helps it create code later on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Architect agent&lt;/strong&gt; writes up technologies that will be used for the app&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DevOps agent&lt;/strong&gt; checks if all technologies are installed on the machine and installs them if they are not&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tech Lead agent&lt;/strong&gt; writes up development tasks that Developer will need to implement. This is an important part because, for each step, Tech Lead needs to specify how the user (real world developer) can review if the task is done (e.g. open localhost:3000 and do something)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer agent&lt;/strong&gt; takes each task and writes up what needs to be done to implement it. The description is in human-readable form.&lt;/li&gt; &#xA; &lt;li&gt;Finally, &lt;strong&gt;Code Monkey agent&lt;/strong&gt; takes the Developer&#39;s description and the existing file and implements the changes into it. We realized this works much better than giving it to Developer right away to implement changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more details on the roles of agents employed by GPT Pilot refer to &lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot/raw/main/pilot/helpers/agents/AGENTS.md&#34;&gt;AGENTS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Pythagora-io/gpt-pilot/assets/10895136/53ea246c-cefe-401c-8ba0-8e4dd49c987b&#34; alt=&#34;GPT Pilot Coding Workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;🕴How&#39;s GPT Pilot different from &lt;em&gt;Smol developer&lt;/em&gt; and &lt;em&gt;GPT engineer&lt;/em&gt;?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GPT Pilot works with the developer to create fully working production-ready app&lt;/strong&gt; - I don&#39;t think that AI can (at least in the near future) create apps without a developer being involved. So, &lt;strong&gt;GPT Pilot codes the app step by step&lt;/strong&gt; just like a developer would in real life. This way, it can debug issues as they arise throughout the development process. If it gets stuck, you, the developer in charge, can review the code and fix the issue. Other similar tools give you the entire codebase at once - this way, bugs are much harder to fix both for AI and for you as a developer. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works at scale&lt;/strong&gt; - GPT Pilot isn&#39;t meant to create simple apps but rather so it can work at any scale. It has mechanisms that filter out the code so in each LLM conversation, it doesn&#39;t need to store the entire codebase in context, but it shows the LLM only the code that is relevant for the current task it&#39;s working on. Once an app is finished, you can always continue working on it by writing instructions on what feature you want to add.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🍻 Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested in contributing to GPT Pilot, I would be more than happy to have you on board but also help you get started. Feel free to ping &lt;a href=&#34;mailto:zvonimir@pythagora.ai&#34;&gt;zvonimir@pythagora.ai&lt;/a&gt; and I&#39;ll help you get started.&lt;/p&gt; &#xA;&lt;h2&gt;🔬️ Research&lt;/h2&gt; &#xA;&lt;p&gt;Since this is a research project, there are many areas that need to be researched on both practical and theoretical levels. We&#39;re happy to hear how can the entire GPT Pilot concept be improved. For example, maybe it would work better if we structured functional requirements differently or maybe technical requirements need to be specified in a different way.&lt;/p&gt; &#xA;&lt;h2&gt;🖥 Development&lt;/h2&gt; &#xA;&lt;p&gt;Other than the research, GPT Pilot needs to be debugged to work in different scenarios. For example, we realized that the quality of the code generated is very sensitive to the size of the development task. When the task is too broad, the code has too many bugs that are hard to fix but when the development task is too narrow, GPT also seems to struggle in getting the task implemented into the existing code.&lt;/p&gt; &#xA;&lt;h1&gt;🔗 Connect with us&lt;/h1&gt; &#xA;&lt;p&gt;🌟 As an open source tool, it would mean the world to us if you starred the GPT-pilot repo 🌟&lt;/p&gt; &#xA;&lt;p&gt;💬 Join &lt;a href=&#34;https://discord.gg/HaqXugmxr9&#34;&gt;the Discord server&lt;/a&gt; to get in touch. &lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
</feed>