<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-21T01:29:20Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ranaroussi/yfinance</title>
    <updated>2022-12-21T01:29:20Z</updated>
    <id>tag:github.com,2022-12-21:/ranaroussi/yfinance</id>
    <link href="https://github.com/ranaroussi/yfinance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download market data from Yahoo! Finance&#39;s API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Download market data from Yahoo! Finance&#39;s API&lt;/h1&gt; &#xA;&lt;table border=&#34;1&#34; cellpadding=&#34;10&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;h4&gt;*** IMPORTANT LEGAL DISCLAIMER ***&lt;/h4&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;strong&gt;Yahoo!, Y!Finance, and Yahoo! finance are registered trademarks of Yahoo, Inc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;yfinance is &lt;strong&gt;not&lt;/strong&gt; affiliated, endorsed, or vetted by Yahoo, Inc. It&#39;s an open-source tool that uses Yahoo&#39;s publicly available APIs, and is intended for research and educational purposes.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;You should refer to Yahoo!&#39;s terms of use&lt;/strong&gt; (&lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/index.htm&#34;&gt;here&lt;/a&gt;) &lt;strong&gt;for details on your rights to use the actual data downloaded. Remember - the Yahoo! finance API is intended for personal use only.&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/badge/python-2.7,%203.6+-blue.svg?style=flat&#34; alt=&#34;Python version&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/pypi/v/yfinance.svg?maxAge=60%&#34; alt=&#34;PyPi version&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/pypi/status/yfinance.svg?maxAge=60&#34; alt=&#34;PyPi status&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/pypi/dm/yfinance.svg?maxAge=2592000&amp;amp;label=installs&amp;amp;color=%2327B1FF&#34; alt=&#34;PyPi downloads&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://travis-ci.com/github/ranaroussi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/travis/ranaroussi/yfinance/main.svg?maxAge=1&#34; alt=&#34;Travis-CI build status&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://www.codefactor.io/repository/github/ranaroussi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.codefactor.io/repository/github/ranaroussi/yfinance/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://github.com/ranaroussi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/github/stars/ranaroussi/yfinance.svg?style=social&amp;amp;label=Star&amp;amp;maxAge=60&#34; alt=&#34;Star this repo&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://twitter.com/aroussi&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/twitter/follow/aroussi.svg?style=social&amp;amp;label=Follow&amp;amp;maxAge=60&#34; alt=&#34;Follow me on twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;yfinance&lt;/strong&gt; offers a threaded and Pythonic way to download market data from &lt;a href=&#34;https://finance.yahoo.com&#34;&gt;Yahoo!Ⓡ finance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;→ Check out this &lt;a href=&#34;https://aroussi.com/#post/python-yahoo-finance&#34;&gt;Blog post&lt;/a&gt; for a detailed tutorial with code examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ranaroussi/yfinance/raw/main/CHANGELOG.rst&#34;&gt;Changelog »&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What&#39;s new in version 0.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimised web scraping&lt;/li&gt; &#xA; &lt;li&gt;All 3 financials tables now match website so expect keys to change. If you really want old tables, use &lt;a href=&#34;https://github.com/ranaroussi/yfinance/raw/85783da515761a145411d742c2a8a3c1517264b0/yfinance/base.py#L968&#34;&gt;&lt;code&gt;Ticker.get_[income_stmt|balance_sheet|cashflow](legacy=True, ...)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;price data improvements: fix bug NaN rows with dividend; new repair feature for missing or 100x prices &lt;code&gt;download(repair=True)&lt;/code&gt;; new attribute &lt;code&gt;Ticker.history_metadata&lt;/code&gt; &lt;a href=&#34;https://github.com/ranaroussi/yfinance/releases/tag/0.2.1&#34;&gt;See release notes for full list of changes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;The Ticker module&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Ticker&lt;/code&gt; module, which allows you to access ticker data in a more Pythonic way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;&#xA;msft = yf.Ticker(&#34;MSFT&#34;)&#xA;&#xA;# get stock info&#xA;msft.info&#xA;&#xA;# get historical market data&#xA;hist = msft.history(period=&#34;max&#34;)&#xA;&#xA;# show meta information about the history (requires history() to be called first)&#xA;msft.history_metadata&#xA;&#xA;# show actions (dividends, splits, capital gains)&#xA;msft.actions&#xA;&#xA;# show dividends&#xA;msft.dividends&#xA;&#xA;# show splits&#xA;msft.splits&#xA;&#xA;&#xA;# show capital gains (for mutual funds &amp;amp; etfs)&#xA;msft.capital_gains&#xA;&#xA;# show share count&#xA;msft.shares&#xA;&#xA;# show financials:&#xA;# - income statement&#xA;msft.income_stmt&#xA;msft.quarterly_income_stmt&#xA;# - balance sheet&#xA;msft.balance_sheet&#xA;msft.quarterly_balance_sheet&#xA;# - cash flow statement&#xA;msft.cashflow&#xA;msft.quarterly_cashflow&#xA;# see `Ticker.get_income_stmt()` for more options&#xA;&#xA;# show major holders&#xA;msft.major_holders&#xA;&#xA;# show institutional holders&#xA;msft.institutional_holders&#xA;&#xA;# show mutualfund holders&#xA;msft.mutualfund_holders&#xA;&#xA;# show earnings&#xA;msft.earnings&#xA;msft.quarterly_earnings&#xA;&#xA;# show sustainability&#xA;msft.sustainability&#xA;&#xA;# show analysts recommendations&#xA;msft.recommendations&#xA;msft.recommendations_summary&#xA;# show analysts other work&#xA;msft.analyst_price_target&#xA;msft.revenue_forecasts&#xA;msft.earnings_forecasts&#xA;msft.earnings_trend&#xA;&#xA;# show next event (earnings, etc)&#xA;msft.calendar&#xA;&#xA;# Show future and historic earnings dates, returns at most next 4 quarters and last 8 quarters by default. &#xA;# Note: If more are needed use msft.get_earnings_dates(limit=XX) with increased limit argument.&#xA;msft.earnings_dates&#xA;&#xA;# show ISIN code - *experimental*&#xA;# ISIN = International Securities Identification Number&#xA;msft.isin&#xA;&#xA;# show options expirations&#xA;msft.options&#xA;&#xA;# show news&#xA;msft.news&#xA;&#xA;# get option chain for specific expiration&#xA;opt = msft.option_chain(&#39;YYYY-MM-DD&#39;)&#xA;# data available via: opt.calls, opt.puts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use a proxy server for downloading data, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;&#xA;msft = yf.Ticker(&#34;MSFT&#34;)&#xA;&#xA;msft.history(..., proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_actions(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_dividends(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_splits(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_capital_gains(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_balance_sheet(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_cashflow(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.option_chain(..., proxy=&#34;PROXY_SERVER&#34;)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a custom &lt;code&gt;requests&lt;/code&gt; session (for example to cache calls to the API or customize the &lt;code&gt;User-agent&lt;/code&gt; header), pass a &lt;code&gt;session=&lt;/code&gt; argument to the Ticker constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests_cache&#xA;session = requests_cache.CachedSession(&#39;yfinance.cache&#39;)&#xA;session.headers[&#39;User-agent&#39;] = &#39;my-program/1.0&#39;&#xA;ticker = yf.Ticker(&#39;msft&#39;, session=session)&#xA;# The scraped response will be stored in the cache&#xA;ticker.actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initialize multiple &lt;code&gt;Ticker&lt;/code&gt; objects, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;&#xA;tickers = yf.Tickers(&#39;msft aapl goog&#39;)&#xA;&#xA;# access each ticker using (example)&#xA;tickers.tickers[&#39;MSFT&#39;].info&#xA;tickers.tickers[&#39;AAPL&#39;].history(period=&#34;1mo&#34;)&#xA;tickers.tickers[&#39;GOOG&#39;].actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetching data for multiple tickers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;data = yf.download(&#34;SPY AAPL&#34;, start=&#34;2017-01-01&#34;, end=&#34;2017-04-30&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I&#39;ve also added some options to make life easier :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = yf.download(  # or pdr.get_data_yahoo(...&#xA;        # tickers list or string as well&#xA;        tickers = &#34;SPY AAPL MSFT&#34;,&#xA;&#xA;        # use &#34;period&#34; instead of start/end&#xA;        # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max&#xA;        # (optional, default is &#39;1mo&#39;)&#xA;        period = &#34;ytd&#34;,&#xA;&#xA;        # fetch data by interval (including intraday if period &amp;lt; 60 days)&#xA;        # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo&#xA;        # (optional, default is &#39;1d&#39;)&#xA;        interval = &#34;5d&#34;,&#xA;&#xA;        # Whether to ignore timezone when aligning ticker data from &#xA;        # different timezones. Default is True. False may be useful for &#xA;        # minute/hourly data.&#xA;        ignore_tz = False,&#xA;&#xA;        # group by ticker (to access via data[&#39;SPY&#39;])&#xA;        # (optional, default is &#39;column&#39;)&#xA;        group_by = &#39;ticker&#39;,&#xA;&#xA;        # adjust all OHLC automatically&#xA;        # (optional, default is False)&#xA;        auto_adjust = True,&#xA;&#xA;        # attempt repair of missing data or currency mixups e.g. $/cents&#xA;        repair = False,&#xA;&#xA;        # download pre/post regular market hours data&#xA;        # (optional, default is False)&#xA;        prepost = True,&#xA;&#xA;        # use threads for mass downloading? (True/False/Integer)&#xA;        # (optional, default is True)&#xA;        threads = True,&#xA;&#xA;        # proxy URL scheme use use when downloading?&#xA;        # (optional, default is None)&#xA;        proxy = None&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timezone cache store&lt;/h3&gt; &#xA;&lt;p&gt;When fetching price data, all dates are localized to stock exchange timezone. But timezone retrieval is relatively slow, so yfinance attemps to cache them in your users cache folder. You can direct cache to use a different location with &lt;code&gt;set_tz_cache_location()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;yf.set_tz_cache_location(&#34;custom/cache/location&#34;)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managing Multi-Level Columns&lt;/h3&gt; &#xA;&lt;p&gt;The following answer on Stack Overflow is for &lt;a href=&#34;https://stackoverflow.com/questions/63107801&#34;&gt;How to deal with multi-level column names downloaded with yfinance?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yfinance&lt;/code&gt; returns a &lt;code&gt;pandas.DataFrame&lt;/code&gt; with multi-level column names, with a level for the ticker and a level for the stock price data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The answer discusses: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;How to correctly read the the multi-level columns after saving the dataframe to a csv with &lt;code&gt;pandas.DataFrame.to_csv&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;How to download single or multiple tickers into a single dataframe with single level column names and a ticker column&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;code&gt;pandas_datareader&lt;/code&gt; override&lt;/h2&gt; &#xA;&lt;p&gt;If your code uses &lt;code&gt;pandas_datareader&lt;/code&gt; and you want to download data faster, you can &#34;hijack&#34; &lt;code&gt;pandas_datareader.data.get_data_yahoo()&lt;/code&gt; method to use &lt;strong&gt;yfinance&lt;/strong&gt; while making sure the returned data is in the same format as &lt;strong&gt;pandas_datareader&lt;/strong&gt;&#39;s &lt;code&gt;get_data_yahoo()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pandas_datareader import data as pdr&#xA;&#xA;import yfinance as yf&#xA;yf.pdr_override() # &amp;lt;== that&#39;s all it takes :-)&#xA;&#xA;# download dataframe&#xA;data = pdr.get_data_yahoo(&#34;SPY&#34;, start=&#34;2017-01-01&#34;, end=&#34;2017-04-30&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;yfinance&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sourceCode&#34;&gt;$ pip install yfinance --upgrade --no-cache-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install &lt;code&gt;yfinance&lt;/code&gt; using &lt;code&gt;conda&lt;/code&gt;, see &lt;a href=&#34;https://anaconda.org/ranaroussi/yfinance&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt; &amp;gt;= 2.7, 3.4+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydata/pandas&#34;&gt;Pandas&lt;/a&gt; &amp;gt;= 1.3.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.numpy.org&#34;&gt;Numpy&lt;/a&gt; &amp;gt;= 1.16.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.python-requests.org/en/master&#34;&gt;requests&lt;/a&gt; &amp;gt;= 2.26&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/lxml&#34;&gt;lxml&lt;/a&gt; &amp;gt;= 4.9.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/appdirs&#34;&gt;appdirs&lt;/a&gt; &amp;gt;= 1.4.4&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pytz&#34;&gt;pytz&lt;/a&gt; &amp;gt;=2022.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/frozendict&#34;&gt;frozendict&lt;/a&gt; &amp;gt;= 2.3.4&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/beautifulsoup4&#34;&gt;beautifulsoup4&lt;/a&gt; &amp;gt;= 4.11.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/html5lib&#34;&gt;html5lib&lt;/a&gt; &amp;gt;= 1.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/cryptography&#34;&gt;cryptography&lt;/a&gt; &amp;gt;= 3.3.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional (if you want to use &lt;code&gt;pandas_datareader&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydata/pandas-datareader&#34;&gt;pandas_datareader&lt;/a&gt; &amp;gt;= 0.4.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Legal Stuff&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;yfinance&lt;/strong&gt; is distributed under the &lt;strong&gt;Apache Software License&lt;/strong&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/ranaroussi/yfinance/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file in the release for details.&lt;/p&gt; &#xA;&lt;p&gt;AGAIN - yfinance is &lt;strong&gt;not&lt;/strong&gt; affiliated, endorsed, or vetted by Yahoo, Inc. It&#39;s an open-source tool that uses Yahoo&#39;s publicly available APIs, and is intended for research and educational purposes. You should refer to Yahoo!&#39;s terms of use (&lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/index.htm&#34;&gt;here&lt;/a&gt;) for detailes on your rights to use the actual data downloaded.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;P.S.&lt;/h3&gt; &#xA;&lt;p&gt;Please drop me an note with any feedback you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ran Aroussi&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sundowndev/phoneinfoga</title>
    <updated>2022-12-21T01:29:20Z</updated>
    <id>tag:github.com,2022-12-21:/sundowndev/phoneinfoga</id>
    <link href="https://github.com/sundowndev/phoneinfoga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Information gathering framework for phone numbers&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/docs/images/banner.png&#34; width=&#34;500&#34; alt=&#34;project logo&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/sundowndev/phoneinfoga/actions&#34;&gt; &lt;img src=&#34;https://github.com/sundowndev/phoneinfoga/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://goreportcard.com/report/github.com/sundowndev/phoneinfoga/v2&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/sundowndev/phoneinfoga/v2&#34; alt=&#34;go report&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://codeclimate.com/github/sundowndev/phoneinfoga/maintainability&#34;&gt; &lt;img src=&#34;https://api.codeclimate.com/v1/badges/3259feb1c68df1cd4f71/maintainability&#34; alt=&#34;code climate badge&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://coveralls.io/github/sundowndev/phoneinfoga&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/sundowndev/phoneinfoga/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/sundowndev/phoneinfoga/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/SundownDEV/phoneinfoga.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://hub.docker.com/r/sundowndev/phoneinfoga&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/sundowndev/phoneinfoga.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Information gathering framework for phone numbers&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sundowndev.github.io/phoneinfoga/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml&#34;&gt;API documentation&lt;/a&gt; • &lt;a href=&#34;https://demo.phoneinfoga.crvx.fr/&#34;&gt;Demo instance&lt;/a&gt; • &lt;a href=&#34;https://medium.com/@SundownDEV/phone-number-scanning-osint-recon-tool-6ad8f0cac27b&#34;&gt;Related blog post&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;PhoneInfoga is one of the most advanced tools to scan international phone numbers. It allows you to first gather basic information such as country, area, carrier and line type, then use various techniques to try to find the VoIP provider or identify the owner. It works with a collection of scanners that must be configured in order for the tool to be effective. PhoneInfoga doesn&#39;t automate everything, it&#39;s just there to help investigating on phone numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/docs/images/screenshot.png&#34; alt=&#34;web client screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;This project is stable and production-ready.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;About demo instance&lt;/strong&gt;: This is a test service. Kittens will die if you abuse it.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check if phone number exists&lt;/li&gt; &#xA; &lt;li&gt;Gather basic information such as country, line type and carrier&lt;/li&gt; &#xA; &lt;li&gt;OSINT footprinting using external APIs, phone books &amp;amp; search engines&lt;/li&gt; &#xA; &lt;li&gt;Check for reputation reports, social media, disposable numbers and more&lt;/li&gt; &#xA; &lt;li&gt;Use the graphical user interface to run scans from the browser&lt;/li&gt; &#xA; &lt;li&gt;Programmatic usage with the &lt;a href=&#34;https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml&#34;&gt;REST API&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/sundowndev/phoneinfoga/v2&#34;&gt;Go modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Anti-features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not claim to provide relevant or verified data, it&#39;s just a tool !&lt;/li&gt; &#xA; &lt;li&gt;Does not allow to &#34;track&#34; a phone or its owner in real time&lt;/li&gt; &#xA; &lt;li&gt;Does not allow to get the precise phone location&lt;/li&gt; &#xA; &lt;li&gt;Does not allow to hack a phone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tool is licensed under the GNU General Public License v3.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flaticon.com/free-icon/fingerprint-search-symbol-of-secret-service-investigation_48838&#34;&gt;Icon&lt;/a&gt; made by &lt;a href=&#34;https://www.freepik.com/&#34; title=&#34;Freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34; title=&#34;Flaticon&#34;&gt;flaticon.com&lt;/a&gt; is licensed by &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34; target=&#34;_blank&#34;&gt;CC 3.0 BY&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/sundowndev/static/raw/main/sponsors.svg?v=c68eba9&#34; width=&#34;100%&#34; heigh=&#34;auto&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>zsyOAOA/DifFace</title>
    <updated>2022-12-21T01:29:20Z</updated>
    <id>tag:github.com,2022-12-21:/zsyOAOA/DifFace</id>
    <link href="https://github.com/zsyOAOA/DifFace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DifFace: Blind Face Restoration with Diffused Error Contraction (PyTorch)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DifFace: Blind Face Restoration with Diffused Error Contraction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zsyoaoa.github.io/&#34;&gt;Zongsheng Yue&lt;/a&gt;, &lt;a href=&#34;https://www.mmlab-ntu.com/person/ccloy/&#34;&gt;Chen Change Loy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2212.06512&#34;&gt;Paper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1BNtoPPRuJwNDvqfwDOOmD9XJyF05Zh4m?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;google colab logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/OAOA/DifFace&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-Hugging%20Face-blue&#34; alt=&#34;Hugging Face&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=zsyOAOA/DifFace&#34; alt=&#34;visitors&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/DifFace_Framework.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; If DifFace is helpful to your images or projects, please help star this repo. Thanks! &lt;span&gt;🤗&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022.12.13&lt;/strong&gt;: Create this repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;span&gt;👉&lt;/span&gt; Old Photo Enhancement&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTM5NTgw&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/Solvay_conference.png&#34; width=&#34;805px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgsli.com/MTM5NTc5&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/Hepburn.png&#34; height=&#34;555px&#34; width=&#34;400px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://imgsli.com/MTM5NTgy&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/oldimg_05.png&#34; height=&#34;555px&#34; width=&#34;400px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;👉&lt;/span&gt; Face Restoration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/testdata/cropped_faces/0368.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/0368.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/testdata/cropped_faces/0885.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/0885.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/testdata/cropped_faces/0729.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/0729.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/testdata/cropped_faces/0934.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zsyOAOA/DifFace/master/assets/0934.png&#34; height=&#34;200px&#34; width=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A suitable &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt; environment named &lt;code&gt;DifFace&lt;/code&gt; can be created and activated with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate taming&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;span&gt;👦&lt;/span&gt; Face image restoration (cropped and aligned)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;python inference_difface.py --aligned --in_path [image folder/image path] --out_path [result folder] --gpu_id [gpu index]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;span&gt;👫&lt;/span&gt; Whole image enhancement&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;python inference_difface.py --in_path [image folder/image path] --out_path [result folder] --gpu_id [gpu index]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;span&gt;🐢&lt;/span&gt; Prepare data&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/NVlabs/ffhq-dataset&#34;&gt;FFHQ&lt;/a&gt; dataset, and resize them into size 512x512.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python datapipe/prepare/face/big2small_face.py --face_dir [Face folder(1024x1024)] --save_dir [Saving folder] --pch_size 512 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Extract the image path into &#39;datapipe/files_txt/ffhq512.txt&#39;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python datapipe/prepare/face/split_train_val.py --face_dir [Face folder(512x512)] --save_dir [Saving folder] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Making the testing dataset&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python datapipe/prepare/face/make_testing_data.py --files_txt datapipe/files_txt/ffhq512.txt --save_dir [Saving folder]  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;span&gt;🐬&lt;/span&gt; Train diffusion model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0,1,2,3 torchrun --standalone --nproc_per_node=4 --nnodes=1 main_diffusion.py --cfg_path configs/training/diffsuion_ffhq512.yaml --save_dir [Logging Folder]  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;span&gt;🐳&lt;/span&gt; Train diffused estimator (SwinIR)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0,1,2,3 torchrun --standalone --nproc_per_node=4 --nnodes=1 main_sr.py --cfg_path configs/training/swinir_ffhq512.yaml --save_dir [Logging Folder]  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a rel=&#34;license&#34; href=&#34;https://github.com/sczhou/CodeFormer/raw/master/LICENSE&#34;&gt;NTU S-Lab License 1.0&lt;/a&gt;. Redistribution and use should follow this license.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This project is based on &lt;a href=&#34;https://github.com/openai/improved-diffusion&#34;&gt;Improved Diffusion Model&lt;/a&gt;. Some codes are brought from &lt;a href=&#34;https://github.com/XPixelGroup/BasicSR&#34;&gt;BasicSR&lt;/a&gt;, &lt;a href=&#34;https://github.com/deepcam-cn/yolov5-face&#34;&gt;YOLOv5-face&lt;/a&gt;, and &lt;a href=&#34;https://github.com/xinntao/facexlib&#34;&gt;FaceXLib&lt;/a&gt;. We also adopt &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;Real-ESRGAN&lt;/a&gt; to support background image enhancement. Thanks for their awesome works.&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions, please feel free to contact me via &lt;code&gt;zsyzam@gmail.com&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>