<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-26T01:31:19Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XavierXiao/Dreambooth-Stable-Diffusion</title>
    <updated>2022-09-26T01:31:19Z</updated>
    <id>tag:github.com,2022-09-26:/XavierXiao/Dreambooth-Stable-Diffusion</id>
    <link href="https://github.com/XavierXiao/Dreambooth-Stable-Diffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of Dreambooth (https://arxiv.org/abs/2208.12242) with Stable Diffusion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dreambooth on Stable Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;This is an implementtaion of Google&#39;s &lt;a href=&#34;https://arxiv.org/abs/2208.12242&#34;&gt;Dreambooth&lt;/a&gt; with &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;. The original Dreambooth is based on &lt;a href=&#34;https://imagen.research.google/&#34;&gt;Imagen&lt;/a&gt; text-to-image model. However, neither the model nor the pre-trained weights of Imagen is available. To enable people to fine-tune a text-to-image model with a few examples, I implemented the idea of Dreambooth on Stable diffusion.&lt;/p&gt; &#xA;&lt;p&gt;This code repository is based on that of &lt;a href=&#34;https://github.com/rinongal/textual_inversion&#34;&gt;Textual Inversion&lt;/a&gt;. Note that Textual Inversion only optimizes word ebedding, while dreambooth fine-tunes the whole diffusion model.&lt;/p&gt; &#xA;&lt;p&gt;The implementation makes minimum changes over the official codebase of Textual Inversion. In fact, due to lazyness, some components in Textual Inversion, such as the embedding manager, are not deleted, although they will never be used here.&lt;/p&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;9/20/2022&lt;/strong&gt;: I just found a way to reduce the GPU memory a bit. Remember that this code is based on Textual Inversion, and TI&#39;s code base has &lt;a href=&#34;https://github.com/rinongal/textual_inversion/raw/main/ldm/modules/diffusionmodules/util.py#L112&#34;&gt;this line&lt;/a&gt;, which disable gradient checkpointing in a hard-code way. This is because in TI, the Unet is not optimized. However, in Dreambooth we optimize the Unet, so we can turn on the gradient checkpoint pointing trick, as in the original SD repo &lt;a href=&#34;https://github.com/CompVis/stable-diffusion/raw/main/ldm/modules/diffusionmodules/util.py#L112&#34;&gt;here&lt;/a&gt;. The gradient checkpoint is default to be True in &lt;a href=&#34;https://github.com/XavierXiao/Dreambooth-Stable-Diffusion/raw/main/configs/stable-diffusion/v1-finetune_unfrozen.yaml#L47&#34;&gt;config&lt;/a&gt;. I have updated the codes.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Preparation&lt;/h3&gt; &#xA;&lt;p&gt;First set-up the &lt;code&gt;ldm&lt;/code&gt; enviroment following the instruction from textual inversion repo, or the original Stable Diffusion repo.&lt;/p&gt; &#xA;&lt;p&gt;To fine-tune a stable diffusion model, you need to obtain the pre-trained stable diffusion models following their &lt;a href=&#34;https://github.com/CompVis/stable-diffusion#stable-diffusion-v1&#34;&gt;instructions&lt;/a&gt;. Weights can be downloaded on &lt;a href=&#34;https://huggingface.co/CompVis&#34;&gt;HuggingFace&lt;/a&gt;. You can decide which version of checkpoint to use, but I use &lt;code&gt;sd-v1-4-full-ema.ckpt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also need to create a set of images for regularization, as the fine-tuning algorithm of Dreambooth requires that. Details of the algorithm can be found in the paper. Note that in the original paper, the regularization images seem to be generated on-the-fly. However, here I generated a set of regularization images before the training. The text prompt for generating regularization images can be &lt;code&gt;photo of a &amp;lt;class&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;class&amp;gt;&lt;/code&gt; is a word that describes the class of your object, such as &lt;code&gt;dog&lt;/code&gt;. The command is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/stable_txt2img.py --ddim_eta 0.0 --n_samples 8 --n_iter 1 --scale 10.0 --ddim_steps 50  --ckpt /path/to/original/stable-diffusion/sd-v1-4-full-ema.ckpt --prompt &#34;a photo of a &amp;lt;class&amp;gt;&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I generate 8 images for regularization, but more regularization images may lead to stronger regularization and better editability. After that, save the generated images (separately, one image per &lt;code&gt;.png&lt;/code&gt; file) at &lt;code&gt;/root/to/regularization/images&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Updates on 9/9&lt;/strong&gt; We should definitely use more images for regularization. Please try 100 or 200, to better align with the original paper. To acomodate this, I shorten the &#34;repeat&#34; of reg dataset in the &lt;a href=&#34;https://github.com/XavierXiao/Dreambooth-Stable-Diffusion/raw/main/configs/stable-diffusion/v1-finetune_unfrozen.yaml#L96&#34;&gt;config file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For some cases, if the generated regularization images are highly unrealistic (happens when you want to generate &#34;man&#34; or &#34;woman&#34;), you can find a diverse set of images (of man/woman) online, and use them as regularization images.&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;Training can be done by running the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/stable-diffusion/v1-finetune_unfrozen.yaml &#xA;                -t &#xA;                --actual_resume /path/to/original/stable-diffusion/sd-v1-4-full-ema.ckpt  &#xA;                -n &amp;lt;job name&amp;gt; &#xA;                --gpus 0, &#xA;                --data_root /root/to/training/images &#xA;                --reg_data_root /root/to/regularization/images &#xA;                --class_word &amp;lt;xxx&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed configuration can be found in &lt;code&gt;configs/stable-diffusion/v1-finetune_unfrozen.yaml&lt;/code&gt;. In particular, the default learning rate is &lt;code&gt;1.0e-6&lt;/code&gt; as I found the &lt;code&gt;1.0e-5&lt;/code&gt; in the Dreambooth paper leads to poor editability. The parameter &lt;code&gt;reg_weight&lt;/code&gt; corresponds to the weight of regularization in the Dreambooth paper, and the default is set to &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dreambooth requires a placeholder word &lt;code&gt;[V]&lt;/code&gt;, called identifier, as in the paper. This identifier needs to be a relatively rare tokens in the vocabulary. The original paper approaches this by using a rare word in T5-XXL tokenizer. For simplicity, here I just use a random word &lt;code&gt;sks&lt;/code&gt; and hard coded it.. If you want to change that, simply make a change in &lt;a href=&#34;https://github.com/XavierXiao/Dreambooth-Stable-Diffusion/raw/main/ldm/data/personalized.py#L10&#34;&gt;this file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Training will be run for 800 steps, and two checkpoints will be saved at &lt;code&gt;./logs/&amp;lt;job_name&amp;gt;/checkpoints&lt;/code&gt;, one at 500 steps and one at final step. Typically the one at 500 steps works well enough. I train the model use two A6000 GPUs and it takes ~15 mins.&lt;/p&gt; &#xA;&lt;h3&gt;Generation&lt;/h3&gt; &#xA;&lt;p&gt;After training, personalized samples can be obtained by running the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/stable_txt2img.py --ddim_eta 0.0 &#xA;                                 --n_samples 8 &#xA;                                 --n_iter 1 &#xA;                                 --scale 10.0 &#xA;                                 --ddim_steps 100  &#xA;                                 --ckpt /path/to/saved/checkpoint/from/training&#xA;                                 --prompt &#34;photo of a sks &amp;lt;class&amp;gt;&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In particular, &lt;code&gt;sks&lt;/code&gt; is the identifier, which should be replaced by your choice if you happen to change the identifier, and &lt;code&gt;&amp;lt;class&amp;gt;&lt;/code&gt; is the class word &lt;code&gt;--class_word&lt;/code&gt; for training.&lt;/p&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;Here I show some qualitative results. The training images are obtained from the &lt;a href=&#34;https://github.com/rinongal/textual_inversion/issues/8&#34;&gt;issue&lt;/a&gt; in the Textual Inversion repository, and they are 3 images of a large trash container. Regularization images are generated by prompt &lt;code&gt;photo of a container&lt;/code&gt;. Regularization images are shown here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XavierXiao/Dreambooth-Stable-Diffusion/main/assets/a-container-0038.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After training, generated images with prompt &lt;code&gt;photo of a sks container&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XavierXiao/Dreambooth-Stable-Diffusion/main/assets/photo-of-a-sks-container-0018.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generated images with prompt &lt;code&gt;photo of a sks container on the beach&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XavierXiao/Dreambooth-Stable-Diffusion/main/assets/photo-of-a-sks-container-on-the-beach-0017.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generated images with prompt &lt;code&gt;photo of a sks container on the moon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XavierXiao/Dreambooth-Stable-Diffusion/main/assets/photo-of-a-sks-container-on-the-moon-0016.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some not-so-perfect but still interesting results:&lt;/p&gt; &#xA;&lt;p&gt;Generated images with prompt &lt;code&gt;photo of a red sks container&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XavierXiao/Dreambooth-Stable-Diffusion/main/assets/a-red-sks-container-0021.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generated images with prompt &lt;code&gt;a dog on top of sks container&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XavierXiao/Dreambooth-Stable-Diffusion/main/assets/a-dog-on-top-of-sks-container-0023.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AveYo/MediaCreationTool.bat</title>
    <updated>2022-09-26T01:31:19Z</updated>
    <id>tag:github.com,2022-09-26:/AveYo/MediaCreationTool.bat</id>
    <link href="https://github.com/AveYo/MediaCreationTool.bat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal MCT wrapper script for all Windows 10/11 versions from 1507 to 21H2!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Not just an Universal MediaCreationTool wrapper script with ingenious support for business editions,&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AveYo/MediaCreationTool.bat/main/preview.png&#34;&gt;&lt;br&gt; A powerful yet simple windows 10 / 11 deployment automation tool as well!&lt;br&gt; &lt;em&gt;If you had no success launching the script so far, this latest version will work&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Presets&lt;/h2&gt; &#xA;&lt;p&gt;1 &lt;em&gt;&lt;strong&gt;Auto Upgrade&lt;/strong&gt;&lt;/em&gt; with detected media, script assists setupprep for upgrading directly&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;- can keep files and apps on more scenarios where os and target edition does not match&lt;/em&gt;&lt;br&gt; &lt;em&gt;- can switch detected edition by adding EditionID to script name&lt;/em&gt;&lt;br&gt; &lt;em&gt;- can troubleshoot upgrade failing by adding &lt;code&gt;no_update&lt;/code&gt; to script name&lt;/em&gt;&lt;br&gt; &lt;em&gt;- auto defaults to 11, so pass version as well for 10: &lt;code&gt;auto 21H2 MediaCreationTool.bat&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;2 &lt;em&gt;&lt;strong&gt;Auto ISO&lt;/strong&gt;&lt;/em&gt; with detected media in current folder directly &lt;em&gt;(or C:\ESD if run from zip)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;- can override detected media by adding edition name / language / arch to script name&lt;/em&gt;&lt;br&gt; &lt;em&gt;- example: &lt;code&gt;21H1 Education en-US x86 iso MediaCreationTool.bat&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;3 &lt;em&gt;&lt;strong&gt;Auto USB&lt;/strong&gt;&lt;/em&gt; with detected media in specified usb target&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;- for data safety, this is not fully automated - must select the usb drive manually in GUI&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;4 &lt;em&gt;&lt;strong&gt;Select&lt;/strong&gt;&lt;/em&gt; with user picked Edition, Language, Arch (x86,x64,both) - on specified target&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;- implicit choice, includes setup override files (disable by adding &lt;code&gt;def&lt;/code&gt; to script name)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;5 &lt;em&gt;&lt;strong&gt;MCT Defaults&lt;/strong&gt;&lt;/em&gt; runs unassisted, creating media without script modification&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;- no added files, script passes &lt;code&gt;products.xml&lt;/code&gt; to MCT and quits without touching media&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;1-4 presets will modify created media in the following ways:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;- write &lt;code&gt;auto.cmd&lt;/code&gt; to run on demand for auto upgrade with edition switch and skip tpm&lt;/em&gt;&lt;br&gt; &lt;em&gt;- write &lt;code&gt;$ISO$&lt;/code&gt; folder content (if it exists) at the root of the media&lt;/em&gt;&lt;br&gt; &lt;em&gt;if you previously used $OEM$ content, must now place it in &lt;code&gt;$ISO$\sources\$OEM$\&lt;/code&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;- write &lt;code&gt;sources\PID.txt&lt;/code&gt; to preselect edition at media boot or within windows (if configured)&lt;/em&gt;&lt;br&gt; &lt;em&gt;- write &lt;code&gt;sources\EI.cfg&lt;/code&gt; to prevent product key prompt on Windows 11 consumer media (11 only)&lt;/em&gt;&lt;br&gt; &lt;em&gt;- write &lt;code&gt;AutoUnattend.xml&lt;/code&gt; in boot.wim to enable local account on Windows 11 Home (11 only)&lt;/em&gt;&lt;br&gt; &lt;em&gt;- patch &lt;code&gt;winsetup.dll&lt;/code&gt; in boot.wim to remove windows 11 setup checks when booting from media (11 only)&lt;/em&gt;&lt;br&gt; &lt;em&gt;- can disable by adding &lt;code&gt;def&lt;/code&gt; to script name for a default, untouched MCT media&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Simple deployment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;auto.cmd&lt;/strong&gt; is behind &lt;em&gt;&lt;strong&gt;Auto Upgrade&lt;/strong&gt;&lt;/em&gt; preset via GUI&lt;br&gt; Can run it fully unnatended by renaming script with &lt;code&gt;auto MediaCreationTool.bat&lt;/code&gt;&lt;br&gt; Makes it easy to upgrade keeping files and apps when the OS edition does not match the media&lt;br&gt; Should allow upgrade from Ultimate, PosReady, Embedded, LTSC or Enterprise Eval as well&lt;/p&gt; &#xA;&lt;p&gt;Generated script is added to the created media so you can run it again at any time&lt;br&gt; It is fairly generic - it will detect available editions in install.esd, pick a suitable index,&lt;br&gt; then set EditionID in the registry to match; can even force another edition, keeping files and apps!&lt;br&gt; On 11, it will try to skip setup checks (can disable this behavior with script var)&lt;br&gt; Finally, it sets recommended setup options with least amount of issues on upgrades&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Let&#39;s say the current OS is Enterprise LTSC 2019, and you use the business media to upgrade:&lt;br&gt; &lt;strong&gt;auto.cmd&lt;/strong&gt; selects Enterprise index and adjust EditionID to Enterprise in the registry (backed up as EditionID_undo)&lt;br&gt; Maybe you also want to switch edition,&lt;br&gt; ex. by renaming the script to &lt;code&gt;ProfessionalWorkstation MediaCreationTool.bat&lt;/code&gt;:&lt;br&gt; &lt;strong&gt;auto.cmd&lt;/strong&gt; selects Professional index and sets EditionID to ProfessionalWorkstation in the registry.&lt;/p&gt; &#xA; &lt;p&gt;Let&#39;s say the OS is Windows 7 Ultimate or PosReady, and you use the consumer media to upgrade:&lt;br&gt; &lt;strong&gt;auto.cmd&lt;/strong&gt; selects Professional index, and sets EditionID to Professional or Enterprise, respectively.&lt;br&gt; In all cases, the script tries to pick an existing index, else a compatible one to keep files and apps on upgrade.&lt;/p&gt; &#xA; &lt;p&gt;Let&#39;s say you have a dozen PCs spread with versions: 7, 8.1, 10 and editions: Ultimate, Home, Enterprise LTSB..&lt;br&gt; If you need to upgrade all to the latest 10 version and only use Pro, you could rename the script as:&lt;br&gt; &lt;code&gt;auto 21H2 Pro MediaCreationTool.bat&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Can even add a VL / MAK / retail product key in the same way to take care of licensing differences.&lt;br&gt; The script also picks up any &lt;code&gt;$ISO$&lt;/code&gt; folder in the current location - for $OEM$ branding, configuration, tweaks etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;No need to right-click Run as Admin, script will ask itself. Directly saving the Raw files no longer breaks line endings&lt;/em&gt;&lt;br&gt; &lt;em&gt;We did it! We broke &lt;a href=&#34;https://git.io/MediaCreationTool.bat&#34;&gt;the previous gist&lt;/a&gt;&lt;/em&gt; ;) So this is the new home. &lt;strong&gt;Thank you all!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.mydigitallife.net/threads/universal-mediacreationtool-wrapper-script-create-windows-11-media-with-automatic-bypass.84168/&#34;&gt;discuss on MDL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2018.10.10: reinstated 1809 [RS5]! using native xml patching for products.xml; fixed syntax bug with exit/b&#xA;2018.10.12: added data loss warning for RS5&#xA;2018.11.13: RS5 is officially back! + greatly improved choices dialog - feel free to use the small snippet in your own scripts&#xA;2019.05.22: 1903 [19H1]&#xA;2019.07.11: 1903 __release_svc_refresh__ and enable DynamicUpdate by default to grab latest CU&#xA;2019.09.29: UPDATED 19H1 build 18362.356 ; RS5 build 17763.379 and show build number&#xA;            added LATEST MCT choice to dinamically download the current version (all others have hard-coded links)&#xA;2019.11.16: 19H2 18363.418 as default choice (updated hard-coded links)&#xA;2020.02.29: 19H2 18363.592&#xA;2020.05.28: 2004 19041.264 first release&#xA;2020.10.29: 20H2 and aniversary script refactoring to support all MCT versions from 1507 to 20H2!!!&#xA;2020.10.30: hotfix utf-8, enterprise on 1909+&#xA;2020.11.01: fix remove unsupported options in older versions code breaking when path has spaces.. pff&#xA;2020.11.14: generate latest links for 1909,2004; all xml editing now in one go; resolved known cannot run script issues&#xA;2020.11.15: one-time clear of cached MCT, as script generates proper 1.0 catalog for 1507,1511,1703 since last update&#xA;            fixed compatibility with naked windows 7 powershell 2.0 / IPv6 / optional import $OEM$ / 1803+ business typo&#xA;            updated executables links for 1903 and 2004&#xA;2020.11.17: parse first commandline parameter as version, example: MediaCreationTool.bat 1909&#xA;2020.12.01: attempt to fix reported issues with 1703; no other changes (skipping 19042.630 leaked esd because it is broken)&#xA;2020.12.11: 20H2 19042.631; fixed pesky 1703 decryption bug on dual x86 + x64; improved cleanup; label includes version&#xA;2021.03.20: pre-release 21H1; optional auto upgrade or create media presets importing $OEM$ folder and key as PID.txt&#xA;2021.05.23: 21H1 release; enhanced script name args parsing, upgrade from embedded, auto.cmd / PID.txt / $OEM$ import&#xA;2021.06.06: create iso directly; enhanced dialogs; args from script name or commandline; refactoring is complete!&#xA;2021.08.04: done fiddling&#xA;2021.09.03: 21H2, both 10 and 11 [unreleased]&#xA;2021.09.25: Windows 11&#xA;            with Skip TPM Check on media boot as well as on dynamic update (standalone toggle script available)&#xA;            final touches for improved script reliability; enhanced auto upgrade preset; win 7 powershell 2.0 compatible&#xA;2021.09.30: fix Auto Setup preset not launching.. automatically&#xA;2021.10.04: fix for long standing tr localization quirks; Skip TPM Check v2 (ifeo-based instead of wmi)&#xA;2021.10.05: 11 22000.194 Release (rofl W11 MCT has limited capabilities, so still using 21H1 MCT because it works fine)&#xA;2021.10.09: outstanding refactoring around Windows 11 MCT; minimize while waiting MCT; unified 7 - 11 appearence&#xA;2021.10.20: create generic iso if no edition arg; use Downloads folder; no 11 setup checks on boot in VirtualBox; fixes #2&#xA;2021.10.23: 11 22000.258&#xA;            more intuitive presets; 11 setup override via AutoUnattend.xml or via boot.wim (for VirtualBox 5.x) with FIX arg&#xA;            only reliable ui automation; enhanced script output&#xA;2021.11.03: multiple download methods; improved automation; improved auto.cmd; moved autounattend.xml to boot.wim&#xA;            revising 11 setup bypass (wip) - not being content with any methods is the reason why I&#39;ve not updated in a while&#xA;2021.11.09: skip windows 11 upgrade checks with setup.exe (not just auto.cmd); no server label; local account on 11 home&#xA;            auto.cmd has more fixes to keep files and apps on upgrade; reliable ui automation; alternative downloaders &#xA;2021.11.15: 11 22000.318&#xA;            write output to script folder (or C:\ESD if run from zip); style: more consistent separation of arguments&#xA;            20H2 builds with esd size above 4GB that had to be reverted at 19042.631: en,de,es,pt,fr,it,jp,zh (MCT limits)&#xA;2021.11.16: 10 19044.1288 - official release of 10 21H2&#xA;            10 19043.1348 - newest 10 build - don&#39;t ask why ms is releasing these as such, it&#39;s not the first time&#xA;2021.12.07: skip windows 11 upgrade checks only via auto.cmd - just ignore server label, please&#xA;2021.12.15: fix regression with 1507-1709 not getting the correct fallback esd; fix dev &#39;-noe&#39; not autoclosing script&#xA;2021.12.22: improved auto.cmd handling of mismatched OS and target edition, obey &#39;def&#39;, &#39;auto&#39; upgrades 7 to 10, not 11&#xA;2022.03.16: prevent launch errors when run from non-canonical paths; USBLayout progress; pickup $ISO$ dir to add on media&#xA;            DU in 11: auto installs 22000.556 atm; older skip_11_checks, without Server label; Home offline local account&#xA;2022.03.18: fix regression with Auto Upgrade; removed powershell -nop arg (issue #41); enhanced 11 AutoUnattend.xml&#xA;2022.03.20: stable - all issues ironed out; improved script ui; upgrade keeping files from Eval editions too&#xA;            last squash I promise ;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ahrm/UnstableFusion</title>
    <updated>2022-09-26T01:31:19Z</updated>
    <id>tag:github.com,2022-09-26:/ahrm/UnstableFusion</id>
    <link href="https://github.com/ahrm/UnstableFusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Stable Diffusion desktop frontend with inpainting, img2img and more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UnstableFusion&lt;/h1&gt; &#xA;&lt;p&gt;A Stable Diffusion desktop frontend with inpainting, img2img and more!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/6392321/191858568-0550f52d-e89c-4b37-aa07-23df605b4807.mp4&#34;&gt;https://user-images.githubusercontent.com/6392321/191858568-0550f52d-e89c-4b37-aa07-23df605b4807.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to run locally?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the dependencies (for example using &lt;code&gt;pip&lt;/code&gt;). The dependencies include :&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PyQt5&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;pytorch&lt;/code&gt;, &lt;code&gt;Pillow&lt;/code&gt;, &lt;code&gt;opencv-python&lt;/code&gt;, &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;flask&lt;/code&gt;, &lt;code&gt;diffusers&lt;/code&gt;, &lt;code&gt;transformers&lt;/code&gt;, &lt;code&gt;protobuf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that if you want to run StableDiffusion on Windows locally, use requirements-localgpu-win64.txt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip -r requirements-localgpu-win64.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: On linux, if you encounter &lt;code&gt;Could not load the Qt platform plugin &#34;xcb&#34;&lt;/code&gt; error, run this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip uninstall opencv-python     (solve a xcb compatibility issue)&#xA;pip install opencv-python-headless     (solve a xcb compatibility issue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a huggingface account and an &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;access token&lt;/a&gt;, if you haven&#39;t done so already. Request access to the StableDiffusion model at &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v1-4&#34;&gt;CompVis/stable-diffusion-v1-4&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository and run &lt;code&gt;python unstablefusion.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to run using colab servers?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the dependencies (see the previous section)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;a href=&#34;https://colab.research.google.com/github/ahrm/UnstableFusion/blob/main/UnstableFusionServer.ipynb&#34;&gt;this notebook&lt;/a&gt; and run it (you need to enter your huggingface token when asked).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you run the last cell, you will be given a url like this:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6392321/191857962-0601fa88-7f03-46cf-98a0-c38cb3fd25b9.png&#34; alt=&#34;colab_output - Copy&#34;&gt; copy this URL.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;python unstablefusion.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the runtime section, select server and enter the address you copied in the server field. Like this:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6392321/191858215-9db78f1a-50f8-4394-8bd4-fc14d981561b.png&#34; alt=&#34;using_server - Copy&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can select a box by clicking on the screen. All of your operations will be limited to this box. You can resize the box using mouse wheel.&lt;/li&gt; &#xA; &lt;li&gt;You can erase the selected box by right clicking, or paint into it by middle clicking (the paint color can be configured using &lt;code&gt;Select Color&lt;/code&gt; button)&lt;/li&gt; &#xA; &lt;li&gt;To generate an image, select the destination box, enter the prompt in the &lt;code&gt;prompt&lt;/code&gt; text field and press the &lt;code&gt;Generate button&lt;/code&gt; (inpainting and reimagining work similarly)&lt;/li&gt; &#xA; &lt;li&gt;You can undo/redo by pressing the &lt;code&gt;undo&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt; button or pressing &lt;code&gt;Control+Z&lt;/code&gt;/&lt;code&gt;Control+Shift+Z&lt;/code&gt; on your keyboard. In fact most other functions are bound to keys as well (you can configure them in &lt;code&gt;keys.json&lt;/code&gt; file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Increase Size&lt;/code&gt;/&lt;code&gt;Decrease Size&lt;/code&gt; buttons adjust the size of the image by adding/removing extra space in the margins (and not by scaling, this is useful when you want to add more detail around an image)&lt;/li&gt; &#xA; &lt;li&gt;You can open a scratchpad by pressing &lt;code&gt;Show Scratchpad&lt;/code&gt; button. This window is capable of doing everything the main window can (using keyboard shortcuts only). The selected box in scratch pad will be mirrored and scaled into the selected box in the main window. This is useful when trying to import another generated/local image into the main image.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>