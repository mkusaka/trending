<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-21T01:34:45Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liyupi/yulegeyu</title>
    <updated>2022-09-21T01:34:45Z</updated>
    <id>tag:github.com,2022-09-21:/liyupi/yulegeyu</id>
    <link href="https://github.com/liyupi/yulegeyu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;羊了个羊纯前端实现版【鱼了个鱼】，自定义关卡+图案+无限道具，可在线玩：https://yulegeyu.cn&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;鱼了个鱼&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;被羊了个羊虐了百遍后，我自己做了一个！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;在线体验：&lt;a href=&#34;https://yulegeyu.cn&#34;&gt;https://yulegeyu.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;游戏视频：&lt;a href=&#34;https://www.bilibili.com/video/BV1Pe411M7wh&#34;&gt;https://www.bilibili.com/video/BV1Pe411M7wh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;相关文章：&lt;a href=&#34;https://mp.weixin.qq.com/s/D_I1Tq-ofhKhlp0rkOpaLA&#34;&gt;https://mp.weixin.qq.com/s/D_I1Tq-ofhKhlp0rkOpaLA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;游戏截图（自定义了图案）：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liyupi/yulegeyu/master/doc/img.png&#34; alt=&#34;游戏截图&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;游戏特色：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;支持选择难度（4 种）&lt;/li&gt; &#xA; &lt;li&gt;支持自定义难度&lt;/li&gt; &#xA; &lt;li&gt;支持自定义动物图案（比如 🐔🏀）&lt;/li&gt; &#xA; &lt;li&gt;可以无限使用技能（道具）&lt;/li&gt; &#xA; &lt;li&gt;不需要看广告&lt;/li&gt; &#xA; &lt;li&gt;能通关&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;补一句：就出于兴趣做了几个小时，有 bug 正常哈哈，欢迎 PR~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;简单说下实现原理，主要有 4 个点：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;游戏全局参数：做游戏的同学都知道，游戏中会涉及很多参数，比如槽位数量、层数等等。我们要将这些参数抽取成统一的全局变量，供其他变量使用。从而做到修改一处，游戏自动适配。还可以提供页面来让用户自定义这些参数，提高游戏的可玩性。&lt;/li&gt; &#xA; &lt;li&gt;网格：为了让块的分布相对规整、并且为计算坐标提供方便，我将整个游戏画布分为 24 x 24 的虚拟网格，类似一个棋盘。一个块占用 3 x 3 的格子。&lt;/li&gt; &#xA; &lt;li&gt;随机生成块：包括随机生成方块的图案和坐标。首先我根据全局参数计算出了总块数，然后用 shuffle 函数打乱存储所有动物图案的数组，再依次将数组中的图案填充到方块中。生成坐标的原理是随机选取坐标范围内的点，坐标范围可以随着层级的增加而递减，即生成的图案越来越挤，达到难度逐层加大的效果。&lt;/li&gt; &#xA; &lt;li&gt;块的覆盖关系：怎么做到点击上层的块后，才能点下层的块呢？首先要给每个块指定一个层级属性。然后有两种思路，第 1 种是先逐层生成，然后每个格子里层级最高的块依次判断其周围格子有没有块层级大于它；第 2 种是在随机生成块的时候就给相互重叠的块绑定层级关系（即谁覆盖了我？我覆盖了谁？）。这里我选择了第 2 种方法，感觉效率会高一些。&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>hsutter/cppfront</title>
    <updated>2022-09-21T01:34:45Z</updated>
    <id>tag:github.com,2022-09-21:/hsutter/cppfront</id>
    <link href="https://github.com/hsutter/cppfront" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A personal experimental C++ Syntax 2 -&gt; Syntax 1 compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cppfront&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; width=&#34;320&#34; src=&#34;https://user-images.githubusercontent.com/1801526/189203090-bbf2eea0-83e5-4962-b2da-f81224152dcb.png&#34;&gt; Copyright (c) Herb Sutter&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/code_of_conduct.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cppfront is a experimental compiler from a potential C++ &#39;syntax 2&#39; (Cpp2) to today&#39;s &#39;syntax 1&#39; (Cpp1), to learn some things, prove out some concepts, and share some ideas. This compiler is a work in progress and currently hilariously incomplete... basic functions work, classes will be next, then metaclasses and lightweight exceptions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#goals-and-history&#34;&gt;Goals and history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#whats-different-about-this-experiment&#34;&gt;What&#39;s different about this experiment?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#how-do-i-build-cppfront&#34;&gt;How do I build cppfront?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#how-do-i-build-my-cpp2-file&#34;&gt;How do I build my &lt;code&gt;.cpp2&lt;/code&gt; file?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#wheres-the-documentation&#34;&gt;Where&#39;s the documentation?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#papers-and-talks-derived-from-this-work-presented-in-today&#39;s-syntax&#34;&gt;Papers and talks derived from this work (presented in today&#39;s syntax)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hsutter/cppfront/main/#epilog-2016-roadmap-diagram&#34;&gt;Epilog: 2016 roadmap diagram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals and history&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; width=&#34;320&#34; src=&#34;https://user-images.githubusercontent.com/1801526/189241726-db92ae64-2b2f-4463-a0c3-87794062da9c.png&#34;&gt; My goal is to explore whether there&#39;s a way we can evolve C++ itself to become 10x simpler, safer, and more toolable. If we had an alternate C++ syntax, it would give us a &#34;bubble of new code that doesn&#39;t exist today&#34; where we could make arbitrary improvements (e.g., change defaults, remove unsafe parts, make the language context-free and order-independent, and generally apply 30 years&#39; worth of learnings), free of backward source compatibility constraints.&lt;/p&gt; &#xA;&lt;p&gt;In 2015-16 I did most of the &#39;syntax 2&#39; design work. Since then, my ISO C++ evolution proposals and conference talks have come from this work (see list below) — each presenting one part of the design as a standalone proposal under today&#39;s syntax, usually with a standalone prototype implementation, to validate and refine that part. Since 2021, I&#39;ve been writing this cppfront compiler to prototype all the parts together as a whole as originally intended, now including the alternative &#39;syntax 2&#39; for C++ that enables their full designs including otherwise-breaking changes.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s different about this experiment?&lt;/h2&gt; &#xA;&lt;p&gt;This is one of many experiments going on across the industry looking at ways to accomplish a major C++ evolution. I look forward to seeing how all the experiments work out. This experiment is different in two main ways.&lt;/p&gt; &#xA;&lt;h3&gt;1) This is about C++20/23/... — not about something else&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; width=&#34;150&#34; src=&#34;https://user-images.githubusercontent.com/1801526/188887745-23e0c3a0-3ea7-4589-993c-f54fe662b107.png&#34;&gt; For me, ISO C++ is the best tool in the world today to write the programs I want and need. I want to keep writing code in C++... just &#34;nicer&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;with less complexity to remember;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;with fewer safety gotchas; and&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;with the same level of tool support other languages enjoy.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;ve been improving C++&#39;s safety and ergonomics with each ISO C++ release, but they have been &#34;10%&#34; improvements. We haven&#39;t been able to do a &lt;strong&gt;&#34;10x&#34;&lt;/strong&gt; improvement primarily because we have to keep 100% syntax backward compatibility. So, what if we could have our compatibility cake, and eat it too — by having:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;100% seamless &lt;strong&gt;link compatibility always&lt;/strong&gt; (no marshaling, no thunks, no wrappers, no generated &#39;compatibility modules&#39; to import/export C++ code from/to a different world); and&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;100% seamless &lt;strong&gt;backward source compatibility always &lt;em&gt;available&lt;/em&gt;&lt;/strong&gt;, including 100% SFINAE and macro compatibility, but only pay for it when we use it... that is, apply C++&#39;s familiar &#34;zero-overhead principle&#34; also to backward source compatibility?&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In cppfront this means you have two options always available: (1) &lt;em&gt;Write mixed Cpp1/Cpp2 in the same source file&lt;/em&gt; with perfect backward source compatibility via &lt;code&gt;#include&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;. (2) &lt;em&gt;Write only Cpp2 in a particular source file&lt;/em&gt; and program in a 10x simpler C++, where code is type-safe and memory-safe by construction, keeps perfect backward link compatibility via &lt;code&gt;import&lt;/code&gt;, and in the future (if this project succeeds) with faster compilers and better tools tuned for the simpler language.&lt;/p&gt; &#xA;&lt;p&gt;I hope to start a conversation about what could be possible &lt;em&gt;&lt;strong&gt;within C++&lt;/strong&gt;&lt;/em&gt;’s own evolution to rejuvenate C++, now that we have C++20 and soon C++23 to build upon. I want to encourage us to look for ways to push the boundaries to bring C++ itself forward and double down on C++ — not to switch to something else. I want us to aim for major C++ evolution directed toward things that will make us better C++ programmers — not programmers of something else.&lt;/p&gt; &#xA;&lt;h3&gt;2) This is about measurable improvements to safety, simplicity, and toolability — not about green-field design or random drive-by changes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; width=&#34;320&#34; src=&#34;https://user-images.githubusercontent.com/1801526/189236486-0b5a4892-42c8-4486-9722-bb60a5df8c7e.png&#34;&gt; My specific goal is to explore the question: Can we make C++ &lt;strong&gt;10x safer, simpler, and more toolable?&lt;/strong&gt; I want each proposed improvement to address those known C++ pain points in a measurable way (e.g., reduce a class of CVEs (vulnerabilities) by A%, reduce the guidance we have to teach by B%).&lt;/p&gt; &#xA;&lt;p&gt;An alternative syntax would let us do things we can never do within today&#39;s syntax without breaking the world:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix defaults (e.g., make &lt;code&gt;[[nodiscard]]&lt;/code&gt; the default);&lt;/li&gt; &#xA; &lt;li&gt;double down on modern C++ (e.g., make C++20 modules and C++23 &lt;code&gt;import std;&lt;/code&gt; the default);&lt;/li&gt; &#xA; &lt;li&gt;remove unsafe parts that are already superseded (e.g., remove &lt;code&gt;union&lt;/code&gt; and pointer arithmetic);&lt;/li&gt; &#xA; &lt;li&gt;have type and memory safety by default (e.g., make the &lt;a href=&#34;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-profile&#34;&gt;C++ Core Guidelines safety profiles&lt;/a&gt; the default and required);&lt;/li&gt; &#xA; &lt;li&gt;eliminate 90% of the guidance we have to teach about today&#39;s complex language;&lt;/li&gt; &#xA; &lt;li&gt;make it easy to write a parser (e.g., have a context-free grammar); and&lt;/li&gt; &#xA; &lt;li&gt;make it easy to write refactoring and other tools (e.g., have order-independent semantics).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;Scores of people have given valuable feedback and many are listed below, but I especially want to thank Joe Duffy, Anders Hejlsberg, Bjarne Stroustrup, Andrew Sutton, Tim Sweeney, and Mads Torgersen for their insights and valuable feedback on this work over the years — especially when they disagreed with me. I&#39;d also like to thank Dave Abrahams, Andrei Alexandrescu, Walter Bright, Lee Howes, Chris McKinsey, Scott Meyers, Gor Nishanov, Andrew Pardoe, Sean Parent, Jared Parsons, David Sankel, Nathan Sidwell, JC van Winkel, and Ville Voutilainen for broad feedback on the design.&lt;/p&gt; &#xA;&lt;p&gt;Many more people are listed below for their help with specific parts of the design and those proposals/prototypes. I apologize for the names I have forgotten.&lt;/p&gt; &#xA;&lt;h2&gt;How do I build cppfront?&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;120&#34; src=&#34;https://user-images.githubusercontent.com/1801526/188906112-ef377a79-b6a9-4a30-b318-10b51d8ea934.png&#34;&gt; Cppfront builds with any major C++20 compiler. &#xA;&lt;h4&gt;MSVC build instructions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cl cppfront.cpp -std:c++20 -EHsc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GCC build instructions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;g++-10 cppfront.cpp -std=c++20 -o cppfront&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clang build instructions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang++-12 cppfront.cpp -std=c++20 -o cppfront&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do I build my &lt;code&gt;.cpp2&lt;/code&gt; file?&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;cppfront your.cpp2&lt;/code&gt;, then run the generated &lt;code&gt;your.cpp&lt;/code&gt; through any major C++20 compiler after putting &lt;code&gt;/cppfront/include&lt;/code&gt; in the path so it can find &lt;code&gt;cpp2util.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MSVC would be: &lt;code&gt;cl your.cpp -std:c++20 -EHsc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GCC would be: &lt;code&gt;g++-10 your.cpp -std=c++20&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clang would be: &lt;code&gt;clang++-12 your.cpp -std=c++20&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where&#39;s the documentation?&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m not posting much documentation because that would imply this project is intended for others to use — if it someday becomes ready for that, I&#39;ll post more docs.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;My CppCon 2022 talk, &#34;Can C++ be 10x simpler and safer ...?&lt;/strong&gt;&#34; [link coming soon]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The &lt;a href=&#34;https://github.com/hsutter/cppfront/tree/main/regression-tests/test-results&#34;&gt;cppfront regression tests&lt;/a&gt;&lt;/strong&gt; which show dozens of working examples, each with a&lt;code&gt;.cpp2&lt;/code&gt; file and the &lt;code&gt;.cpp&lt;/code&gt; file it is translated to. Each filename briefly describes the language features the test demonstrates (e.g., contracts, parameter passing, bounds safety, type-safe &lt;code&gt;is&lt;/code&gt; queries and &lt;code&gt;as&lt;/code&gt; casts, initialization safety, and generalized value capture including in function expressions (&#39;lambdas&#39;), postconditions, and string interpolation).&lt;/li&gt; &#xA; &lt;li&gt;The list of papers and talks below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Papers and talks derived from this work (presented in today&#39;s syntax)&lt;/h2&gt; &#xA;&lt;p&gt;Here are the ISO C++ papers and CppCon conference talks I&#39;ve given since 2015 that have been derived from this work, in the order that I brought each piece forward. Most of the details in the materials below are still current with only incremental updates, apart from the specific syntax of course.&lt;/p&gt; &#xA;&lt;h3&gt;2015: Lifetime safety&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/hEx5DNLWGgA&#34;&gt;&lt;strong&gt;CppCon 2015&lt;/strong&gt;: &#34;Writing good C++14... &lt;em&gt;by default&lt;/em&gt;&#34;&lt;/a&gt; particularly &lt;a href=&#34;https://youtu.be/hEx5DNLWGgA?t=1757&#34;&gt;from 29:00 onward&lt;/a&gt; shows the Lifetime analysis with live demos in a Visual Studio prototype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/80BZxujhY38&#34;&gt;&lt;strong&gt;CppCon 2018&lt;/strong&gt;: &#34;Thoughts on a more powerful &lt;em&gt;and&lt;/em&gt; simpler C++ (#5 of N)&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/80BZxujhY38?t=1097&#34;&gt;The section starting at 18:00&lt;/a&gt; is an update on the Lifetime status with live demos in a Clang prototype.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/80BZxujhY38?t=5307&#34;&gt;The final part starting at 1:28:00&lt;/a&gt; shows the Lifetime and Metaclasses proposals working hand-in-hand. This is one of the few places before cppfront where the same compiler has contained prototypes of multiple &#39;syntax 2&#39;-derived features so I could show how they build on each other when used together.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isocpp/CppCoreGuidelines/raw/master/docs/Lifetime.pdf&#34;&gt;&lt;strong&gt;C++ Core Guidelines&lt;/strong&gt;: Lifetime safety profile&lt;/a&gt; is this static analysis adopted by the C++ Core Guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wg21.link/p1179&#34;&gt;&lt;strong&gt;P1179&lt;/strong&gt;: Lifetime Safety: Preventing common dangling&lt;/a&gt; is the same analysis in the WG 21 paper list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is not yet implemented in cppfront. Implementations are shipping in Visual Studio and in CLion, and initial parts have been upstreamed in Clang. I want to especially thank Matthias Gehre, Gabor Horvath, Neil MacIntosh, and Kyle Reed for their help in implementing the Lifetime static analysis design in Visual Studio and a Clang fork. Thanks also to the following for their input and feedback on the specification: Andrei Alexandrescu, Steve Carroll, Pavel Curtis, Gabriel Dos Reis, Joe Duffy, Daniel Frampton, Anna Gringauze, Chris Hawblitzel, Nicolai Josuttis, Ellie Kornstaedt, Aaron Lahman, Ryan McDougall, Nathan Myers, Gor Nishanov, Andrew Pardoe, Jared Parsons, Dave Sielaff, Richard Smith, Jim Springfield, and Bjarne Stroustrup.&lt;/p&gt; &#xA;&lt;h3&gt;2016: Garbage-collected memory arena&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JfmTagWcqoE&#34;&gt;&lt;strong&gt;CppCon 2016&lt;/strong&gt;: &#34;Leak-freedom in C++... &lt;em&gt;by default&lt;/em&gt;&#34;&lt;/a&gt; particularly &lt;a href=&#34;https://youtu.be/JfmTagWcqoE?t=3558&#34;&gt;from 59:00 onward&lt;/a&gt; where I show the strawman prototype I wrote of a tracing garbage-collection memory arena.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsutter/gcpp&#34;&gt;&lt;strong&gt;Github.com/hsutter/gcpp&lt;/strong&gt;: &#34;gcpp: Deferred and unordered destruction&#34;&lt;/a&gt; is the GitHub prototype I wrote.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is not yet implemented in cppfront. I welcome a real GC expert to collaborate with on bringing this forward to become a &#34;real&#34; usable tracing GC memory arena that C++ code can opt into, with real C++ zero-overhead costing (don&#39;t pay anything if you don&#39;t do a &lt;code&gt;gc.new&lt;/code&gt;, and if you do use it then have the costs be proportional to the number of &lt;code&gt;gc.new&lt;/code&gt; allocations).&lt;/p&gt; &#xA;&lt;h3&gt;2017: Spaceship operator for comparisons, &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4AfRAVcThyA&#34;&gt;&lt;strong&gt;CppCon 2017 (just the intro, first 6 minutes)&lt;/strong&gt;: &#34;Meta: Thoughts on generative C++&#34;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wg21.link/p0515&#34;&gt;&lt;strong&gt;P0515&lt;/strong&gt;: Consistent comparison&lt;/a&gt; is the proposal in today&#39;s syntax that I proposed, and was adopted, for C++20.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is part of ISO C++20 and C++23. Thank you again to everyone who helped land this in the Standard in C++20 and improve it in C++23, including especially Walter Brown, Lawrence Crowl, Cameron DaCamara, Gabriel Dos Reis, Jens Maurer, Barry Revzin, Richard Smith, and David Stone.&lt;/p&gt; &#xA;&lt;h3&gt;2017: Reflection, generation, and metaclasses&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6nsyX37nsRs&#34;&gt;&lt;strong&gt;ACCU 2017&lt;/strong&gt;: &#34;Thoughts on metaclasses&#34;&lt;/a&gt; is the first talk I gave about this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4AfRAVcThyA&#34;&gt;&lt;strong&gt;CppCon 2017&lt;/strong&gt;: &#34;Meta: Thoughts on generative C++&#34;&lt;/a&gt; from after the intro, &lt;a href=&#34;https://youtu.be/4AfRAVcThyA?t=393&#34;&gt;from 6:00 onward&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/80BZxujhY38&#34;&gt;&lt;strong&gt;CppCon 2018&lt;/strong&gt;: &#34;Thoughts on a more powerful &lt;em&gt;and&lt;/em&gt; simpler C++ (&#34;Simplifying C++&#34; #5 of N)&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://youtu.be/80BZxujhY38?t=1097&#34;&gt;The section starting at 51:00&lt;/a&gt; is an update on the Metaclasses status with live demos in a Clang prototype.&lt;/li&gt; &#xA;   &lt;li&gt;(repeating the Lifetime section bullet above) &lt;a href=&#34;https://youtu.be/80BZxujhY38?t=5307&#34;&gt;The final part starting at 1:28&lt;/a&gt; shows the Lifetime and Metaclasses proposals working hand-in-hand. This is one of the few places before cppfront where the same compiler has contained prototypes of multiple &#39;syntax 2&#39;-derived features so I could show how they build on each other when used together.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wg21.link/p0707&#34;&gt;&lt;strong&gt;P0707&lt;/strong&gt;: Metaclass functions: Generative C++&lt;/a&gt; is the paper I brought to the ISO C++ committee.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is not yet implemented in cppfront. Thanks again to Andrew Sutton and his colleagues Wyatt Childers and Jennifer Yao for their help in implementing the Clang-based prototypes of this proposal, and everyone else who contributed feedback on the design including Louis Brandy, Chandler Carruth, Casey Carter, Matúš Chochlík, Lawrence Crowl, Pavel Curtis, Louis Dionne, Gabriel Dos Reis, Joe Duffy, Kenny Kerr, Nicolai Josuttis, Aaron Lahman, Scott Meyers, Axel Naumann, Gor Nishanov, Stephan T. Lavavej, Andrew Pardoe, Sean Parent, Jared Parsons, David Sankel, Richard Smith, Jeff Snyder, Mike Spertus, Mads Torgersen, Daveed Vandevoorde, Tony Van Eerd, JC van Winkel, Ville Voutilainen, and Titus Winters, and many more WG 21 / SG 7 participants.&lt;/p&gt; &#xA;&lt;h3&gt;2018: Updates to Lifetime and Metaclasses (see above)&lt;/h3&gt; &#xA;&lt;h3&gt;2019: Zero-overhead deterministic exceptions: Throwing values&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=os7cqJ5qlzo&#34;&gt;&lt;strong&gt;ACCU 2019&lt;/strong&gt;: &#34;De-fragmenting C++: Making exceptions more affordable and usable&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ARYP83yNAWk&#34;&gt;&lt;strong&gt;CppCon 2019&lt;/strong&gt;: &#34;De-fragmenting C++: Making exceptions and RTTI more affordable and usable (&#34;Simplifying C++&#34; #6 of N)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wg21.link/p0709&#34;&gt;&lt;strong&gt;P0709&lt;/strong&gt;: Zero-overhead deterministic exceptions: Throwing values&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is not yet implemented in cppfront.&lt;/p&gt; &#xA;&lt;h3&gt;2020: Parameter passing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ACCU autumn 2019&lt;/strong&gt;: &#34;Quantifying accidental complexity: An empirical look at teaching and using C++&#34; was my first public talk about this, but a &#34;beta&#34; version that was not recorded; you can find the description &lt;a href=&#34;https://accu.org/conf-previous/2019_autumn/sessions/#XQuantifyingAccidentalComplexityAnEmpiricalLookatTeachingandUsingC&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6lurOCdaj0Y&#34;&gt;&lt;strong&gt;CppCon 2020&lt;/strong&gt;: &#34;Quantifying accidental complexity: An empirical look at teaching and using C++&#34;&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first half of the talk is about how to be rigorous and actually measure that we&#39;re making improvements, including to measure the percentage of today&#39;s C++ guidance that is about parameter passing and initialization.&lt;/li&gt; &#xA;   &lt;li&gt;The second half of the talk is about &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;inout&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;forward&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsutter/708/raw/main/708.pdf&#34;&gt;&lt;strong&gt;d0708&lt;/strong&gt;: &#34;Parameter passing -&amp;gt; guaranteed unified initialization and value setting&lt;/a&gt; goes into additional detail I didn&#39;t have time for in the talk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsutter/708&#34;&gt;&lt;strong&gt;Github.com/hsutter/708&lt;/strong&gt;&lt;/a&gt; is a repo with the paper and demo examples as used in the talk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wg21.link/p2064&#34;&gt;&lt;strong&gt;P2064&lt;/strong&gt;: &#34;Assumptions&#34;&lt;/a&gt; is also related to this &#39;syntax 2&#39; work, because this work includes a contracts design, and assumptions ought to be separate from that. This paper was making the technical argument why assumptions and assertions (contracts) are different things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is implemented in cppfront, except not the unified &lt;code&gt;operator=&lt;/code&gt; experiment which will come with classes. Thanks to Andrew Sutton for an initial Clang-based implementation.&lt;/p&gt; &#xA;&lt;h3&gt;2020: &#34;Bridge to NewThingia&#34;&lt;/h3&gt; &#xA;&lt;p&gt;In 2020 I also started socializing the ideas of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;How do you answer &#34;why is your thing different when others that look like it have all failed&#34;?&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;What does it take to be adoptable, including to enable incremental adoption?&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I had specifically in mind a major C++ evolution&#39;s success when many attempts to make C or C++ safer have failed, and the importance of seamless compatibility. The talk was &#34;Bridge to NewThingia,&#34; presented at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://herbsutter.com/2020/06/14/talk-video-available-bridge-to-newthingia-devaroundthesun/&#34;&gt;&lt;strong&gt;DevAroundTheSun&lt;/strong&gt;: &#34;Bridge to Newthingia&#34;&lt;/a&gt;, an initial 26-minute version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BF3qw1ObUyo&#34;&gt;&lt;strong&gt;C++ on Sea&lt;/strong&gt;: &#34;Bridge to NewThingia&#34;&lt;/a&gt; which especially &lt;a href=&#34;https://youtu.be/BF3qw1ObUyo?t=2883&#34;&gt;at the end starting near 48:00&lt;/a&gt; had a slide that directly tackled the &#34;C++ major evolution&#34; scenario, and laid out what I think it would take to have credible answers to the key questions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2021: &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;as&lt;/code&gt;, and pattern matching&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=raB_289NxBk&#34;&gt;&lt;strong&gt;CppCon 2021&lt;/strong&gt;: &#34;Extending and simplifying C++: Thoughts on pattern matching using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt;&#34;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wg21.link/p2392&#34;&gt;&lt;strong&gt;P2392&lt;/strong&gt;: Pattern matching using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt;&lt;/a&gt; is the ISO C++ committee paper.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is partly implemented in cppfront. There is basic support for &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt;, and very basic &lt;code&gt;inspect&lt;/code&gt; expressions.&lt;/p&gt; &#xA;&lt;h3&gt;2022: CppCon 2022 talk and cppfront&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CppCon 2022&lt;/strong&gt;: &#34;C++ simplicity, safety, and toolability: Can C++ be 10x simpler and safer ...?&#34; [link coming soon]&lt;/li&gt; &#xA; &lt;li&gt;This repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Epilog: 2016 roadmap diagram&lt;/h1&gt; &#xA;&lt;p&gt;Finally, here is a roadmap diagram I made in 2016 that is still recognizably a roadmap of Cpp2&#39;s design approach, although a few additions like &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; came later. I think this is important to show design decisions are related and support each other, so that they are not a gaggle of point fixes but a coordinated refactoring of C++ into a smaller number of regular and combinable features. As Bjarne Stroustrup put it in the &lt;em&gt;ACM History of Programming Languages III&lt;/em&gt; (among other places):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;&lt;strong&gt;10% the size of C++&lt;/strong&gt; in definition and similar in front-end compiler size. ... &lt;strong&gt;Most of the simplification would come from generalization.&lt;/strong&gt;&#34; (B. Stroustrup, ACM HOPL-III, 2007; emphasis added)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1801526/189503047-0b0a4f0f-c5e7-42b2-a17d-37d80bef3970.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I haven&#39;t updated this roadmap diagram since 2016, but it shows many of the talks and papers that have come since then from this work, and it&#39;s still a pretty up-to-date roadmap of the major parts of Cpp2. As of this writing, cppfront implements much of the top part of this roadmap, and I plan for more to follow.&lt;/p&gt; &#xA;&lt;p&gt;I hope you enjoy reading about this personal experiment, and I hope that it might at least start a conversation about what could be possible &lt;em&gt;&lt;strong&gt;within C++&lt;/strong&gt;&lt;/em&gt;&#39;s own evolution to make C++ 10x simpler, safer, and more toolable.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwaggyMacro/YangLeGeYang</title>
    <updated>2022-09-21T01:34:45Z</updated>
    <id>tag:github.com,2022-09-21:/SwaggyMacro/YangLeGeYang</id>
    <link href="https://github.com/SwaggyMacro/YangLeGeYang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;免抓包版本，羊了个羊 小助手，羊了个羊一键通关，自动获取Token，羊了个羊辅助，本项目仅用于学习研究使用，请勿将本项目的任何内容用于商业或非法目的，否则后果自负。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YangLeGeYang&lt;/h1&gt; &#xA;&lt;p&gt;羊了个羊辅助&lt;/p&gt; &#xA;&lt;h2&gt;🏷️前言&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;本项目可一键通关羊了个羊，请勿滥用本程序持续对游戏服务器造成压力，仅用于学习研究使用，一切后果自负。&lt;br&gt; &lt;strong&gt;不会更新多线程版本，对游戏服务器压力过大。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📚使用教程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;已更新v0.5自动获取Token版本（无需手动抓包）&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;只需要你电脑登陆PC微信然后打开羊了个羊游戏，再打开本助手即可自动获取Token，直接开刷即可！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;登陆电脑版的PC微信&lt;/li&gt; &#xA; &lt;li&gt;打开羊了个羊&lt;/li&gt; &#xA; &lt;li&gt;打开本助手&lt;/li&gt; &#xA; &lt;li&gt;一键通关 &lt;img src=&#34;https://user-images.githubusercontent.com/38845682/190835970-4ae6cb7c-712e-4f40-9041-21ae850a162f.gif&#34; alt=&#34;Animation&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📚抓包教程&lt;/h2&gt; &#xA;&lt;p&gt;使用前需要用抓包工具获取账号token(t)，需要一定动手能力，获取后就是傻瓜式操作。&lt;/p&gt; &#xA;&lt;p&gt;💻PC端抓包工具：Fiddler、Http Debugger&lt;/p&gt; &#xA;&lt;p&gt;📱Android端抓包工具：HttpCarry&lt;/p&gt; &#xA;&lt;p&gt;📱iPhone端抓包工具：Stream&lt;/p&gt; &#xA;&lt;p&gt;Android端抓包视频教程：&lt;a href=&#34;http://u.ncii.cn/LIgVd&#34;&gt;http://u.ncii.cn/LIgVd&lt;/a&gt;&lt;br&gt; iPhone端抓包视频教程：&lt;a href=&#34;http://u.ncii.cn/68dxv&#34;&gt;http://u.ncii.cn/68dxv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;(仅介绍PC抓包方式) 此处以PC端（推荐PC）为例：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装登陆微信 &lt;a href=&#34;https://windows.weixin.qq.com/&#34;&gt;PC微信官网&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;搜索羊了个羊小游戏（先不要点进去） &lt;img src=&#34;https://user-images.githubusercontent.com/38845682/190594067-d2d6fcda-ae12-4e1e-ba29-6ffba33e8138.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;打开HTTP Debugger工具（首次打开提示安装证书，一定要点安装），点击左上角Home-&amp;gt;Start开始抓包 &lt;a href=&#34;http://kkx.xiazais.com/small/HTTPDebugger.Cracked.rar&#34;&gt;点我下载 HTTP Debugger&lt;/a&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/38845682/190595665-1542a67e-7c30-4521-8610-17e38d2783ee.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;然后点开羊了个羊小游戏，等待游戏加载完后切换到HTTP Debugger&lt;/li&gt; &#xA; &lt;li&gt;按住 CTRL+F 搜索 &#34;easygame2021&#34; 然后复制这个数据包中协议头的token(t)内容 （如果搜索不到的话就退出微信 重新登陆再重复抓包步骤） &lt;img src=&#34;https://user-images.githubusercontent.com/38845682/190595519-9188c778-2cba-4bc4-98a7-854b4021a61b.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;将Token复制到羊了个羊助手上面，然后点击“羊它！”即可，通关次数以及通关耗时可以自己调整。 &lt;img src=&#34;https://user-images.githubusercontent.com/38845682/190595932-05c04298-1726-45e8-bca8-b9d56e63ae3a.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>