<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-28T01:28:39Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kolbytn/mindcraft</title>
    <updated>2024-10-28T01:28:39Z</updated>
    <id>tag:github.com,2024-10-28:/kolbytn/mindcraft</id>
    <link href="https://github.com/kolbytn/mindcraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mindcraft üß†‚õèÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;Crafting minds for Minecraft with Language Models and Mineflayer!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ZsrAAByEnr&#34;&gt;Join the discord for support!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;‚ÄºÔ∏èWarning‚ÄºÔ∏è&lt;/h4&gt; &#xA;&lt;p&gt;This project allows an AI model to write/execute code on your computer that may be insecure, dangerous, and vulnerable to injection attacks on public servers. Code writing is disabled by default, you can enable it by setting &lt;code&gt;allow_insecure_coding&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;settings.js&lt;/code&gt;. Enable only on local or private servers, &lt;strong&gt;never&lt;/strong&gt; on public servers. Ye be warned.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.minecraft.net/en-us/store/minecraft-java-bedrock-edition-pc&#34;&gt;Minecraft Java Edition&lt;/a&gt; (up to v1.21.1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; (at least v14)&lt;/li&gt; &#xA; &lt;li&gt;One of these: &lt;a href=&#34;https://openai.com/blog/openai-api&#34;&gt;OpenAI API Key&lt;/a&gt; | &lt;a href=&#34;https://aistudio.google.com/app/apikey&#34;&gt;Gemini API Key&lt;/a&gt; |&lt;a href=&#34;https://docs.anthropic.com/claude/docs/getting-access-to-claude&#34;&gt;Anthropic API Key&lt;/a&gt; | &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate API Key&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/&#34;&gt;Hugging Face API Key&lt;/a&gt; | &lt;a href=&#34;https://console.groq.com/keys&#34;&gt;Groq API Key&lt;/a&gt; | &lt;a href=&#34;https://ollama.com/download&#34;&gt;Ollama Installed&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Rename &lt;code&gt;keys.example.json&lt;/code&gt; to &lt;code&gt;keys.json&lt;/code&gt; and fill in your API keys, and you can set the desired model in &lt;code&gt;andy.json&lt;/code&gt; or other profiles.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Config Variable&lt;/th&gt; &#xA;   &lt;th&gt;Example Model name&lt;/th&gt; &#xA;   &lt;th&gt;Docs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpt-3.5-turbo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GEMINI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gemini-pro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ai.google.dev/gemini-api/docs/models/gemini&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Anthropic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;claude-3-haiku-20240307&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.anthropic.com/claude/docs/models-overview&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Replicate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;REPLICATE_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;meta/meta-llama-3-70b-instruct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://replicate.com/collections/language-models&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ollama (local)&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;llama3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ollama.com/library&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Groq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GROQCLOUD_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;groq/mixtral-8x7b-32768&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://console.groq.com/docs/models&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hugging Face&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HUGGINGFACE_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;huggingface/mistralai/Mistral-Nemo-Instruct-2407&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/models&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you use Ollama, to install the models used by default (generation and embedding), execute the following terminal command: &lt;code&gt;ollama pull llama3 &amp;amp;&amp;amp; ollama pull nomic-embed-text&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, clone/download this repository&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npm install&lt;/code&gt; from the installed directory&lt;/p&gt; &#xA;&lt;p&gt;Install the minecraft version specified in &lt;code&gt;settings.js&lt;/code&gt;, currently supports up to 1.21.1&lt;/p&gt; &#xA;&lt;h3&gt;Running Locally&lt;/h3&gt; &#xA;&lt;p&gt;Start a minecraft world and open it to LAN on localhost port &lt;code&gt;55916&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;node main.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can configure the agent&#39;s name, model, and prompts in their profile like &lt;code&gt;andy.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can configure project details in &lt;code&gt;settings.js&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/kolbytn/mindcraft/main/settings.js&#34;&gt;See file for more details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Online Servers&lt;/h3&gt; &#xA;&lt;p&gt;To connect to online servers your bot will need an official Microsoft/Minecraft account. You can use your own personal one, but will need another account if you want to connect with it. Here are example settings for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;host&#34;: &#34;111.222.333.444&#34;,&#xA;&#34;port&#34;: 55920,&#xA;&#34;auth&#34;: &#34;microsoft&#34;,&#xA;&#xA;// rest is same...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ÄºÔ∏è Please make sure your bot&#39;s name in the profile.json matches the account name! Otherwise the bot will spam talk to itself.&lt;/p&gt; &#xA;&lt;h3&gt;Bot Profiles&lt;/h3&gt; &#xA;&lt;p&gt;Bot profiles are json files (such as &lt;code&gt;andy.json&lt;/code&gt;) that define:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bot backend LLMs to use for chat and embeddings.&lt;/li&gt; &#xA; &lt;li&gt;Prompts used to influence the bot&#39;s behavior.&lt;/li&gt; &#xA; &lt;li&gt;Examples help the bot perform tasks.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Specifying Profiles via Command Line&lt;/h3&gt; &#xA;&lt;p&gt;By default, the program will use the profiles specified in &lt;code&gt;settings.js&lt;/code&gt;. You can specify one or more agent profiles using the &lt;code&gt;--profiles&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;node main.js --profiles ./profiles/andy.json ./profiles/jill.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Model Specifications&lt;/h3&gt; &#xA;&lt;p&gt;LLM backends can be specified as simply as &lt;code&gt;&#34;model&#34;: &#34;gpt-3.5-turbo&#34;&lt;/code&gt;. However, for both the chat model and the embedding model, the bot profile can specify the below attributes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;model&#34;: {&#xA;  &#34;api&#34;: &#34;openai&#34;,&#xA;  &#34;url&#34;: &#34;https://api.openai.com/v1/&#34;,&#xA;  &#34;model&#34;: &#34;gpt-3.5-turbo&#34;&#xA;},&#xA;&#34;embedding&#34;: {&#xA;  &#34;api&#34;: &#34;openai&#34;,&#xA;  &#34;url&#34;: &#34;https://api.openai.com/v1/&#34;,&#xA;  &#34;model&#34;: &#34;text-embedding-ada-002&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The model parameter accepts either a string or object. If a string, it should specify the model to be used. The api and url will be assumed. If an object, the api field must be specified. Each api has a default model and url, so those fields are optional.&lt;/p&gt; &#xA;&lt;p&gt;If the embedding field is not specified, then it will use the default embedding method for the chat model&#39;s api (Note that anthropic has no embedding model). The embedding parameter can also be a string or object. If a string, it should specify the embedding api and the default model and url will be used. If a valid embedding is not specified and cannot be assumed, then word overlap will be used to retrieve examples instead.&lt;/p&gt; &#xA;&lt;p&gt;Thus, all the below specifications are equivalent to the above example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;model&#34;: &#34;gpt-3.5-turbo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;model&#34;: {&#xA;  &#34;api&#34;: &#34;openai&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;&#34;embedding&#34;: &#34;openai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Patches&lt;/h2&gt; &#xA;&lt;p&gt;Some of the node modules that we depend on have bugs in them. To add a patch, change your local node module file and run &lt;code&gt;npx patch-package [package-name]&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>junegunn/fzf</title>
    <updated>2024-10-28T01:28:39Z</updated>
    <id>tag:github.com,2024-10-28:/junegunn/fzf</id>
    <link href="https://github.com/junegunn/fzf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üå∏ A command-line fuzzy finder&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=fzf_20240209&#34;&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/warp.png&#34; width=&#34;300&#34; alt=&#34;Warp&#34;&gt; &#xA;  &lt;/div&gt; &lt;b&gt;Warp is a modern, Rust-based terminal with AI built in so you and your team can build great software, faster.&lt;/b&gt; &#xA;  &lt;div&gt; &#xA;   &lt;sup&gt;Visit warp.dev to learn more.&lt;/sup&gt; &#xA;  &lt;/div&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/fzf.png&#34; height=&#34;170&#34; alt=&#34;fzf - a command-line fuzzy finder&#34;&gt; &lt;a href=&#34;https://github.com/junegunn/fzf/actions&#34;&gt;&lt;img src=&#34;https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg?sanitize=true&#34; alt=&#34;github-actions&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;fzf is a general-purpose command-line fuzzy finder.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;p&gt;It&#39;s an interactive filter program for any kind of list; files, command history, processes, hostnames, bookmarks, git commits, etc. It implements a &#34;fuzzy&#34; matching algorithm, so you can quickly type in patterns with omitted characters and still get the results you want.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üì¶ &lt;strong&gt;Portable&lt;/strong&gt; ‚Äî Distributed as a single binary for easy installation&lt;/li&gt; &#xA; &lt;li&gt;‚ö° &lt;strong&gt;Blazingly fast&lt;/strong&gt; ‚Äî Highly optimized code instantly processes millions of items&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;strong&gt;Extremely versatile&lt;/strong&gt; ‚Äî Fully customizable via an event-action binding mechanism&lt;/li&gt; &#xA; &lt;li&gt;üîã &lt;strong&gt;Batteries included&lt;/strong&gt; ‚Äî Includes integration with bash, zsh, fish, Vim, and Neovim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;I would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to sponsor this project, please visit &lt;a href=&#34;https://github.com/sponsors/junegunn&#34;&gt;https://github.com/sponsors/junegunn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- sponsors --&gt;&#xA;&lt;a href=&#34;https://github.com/miyanokomiya&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/20733354?u=363dbf6d7becb19a848535228189abc7b263697c&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;miyanokomiya&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/jonhoo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/176295?u=264ece14e9ef7ce507becbaecc6b4ac4271d4e4f&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Jon Gjengset&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/AceofSpades5757&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10341888?u=996946cf9555e309a6a1fd03d2c72080217b4999&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Kyle L. Davis&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/Frederick888&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4507647?u=8feed5449181b62831b6f4f526cf2c075d7833b2&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Frederick Zhang&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/moritzdietz&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7935536?u=79a728c053f252e08eb2b3d1030569058c8f6c63&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Moritz Dietz&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mikker&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2819?u=6a2ada89a4baf89ee431d6940ed674cb46eceb88&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Mikkel Malmberg&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pldubouilh&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/760637?u=476f763b74ce175e0c6d74789b304ad94ecddd4b&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Pierre Dubouilh&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/trantor&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/69568?v=4&#34; width=&#34;60px&#34; alt=&#34;Fulvio Scapin&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/rcorre&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2496231?u=2a46dcfdbcdc02f29ac395d8de5efd222fa174bc&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Ryan Roden-Corrent&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/blissdev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3456?v=4&#34; width=&#34;60px&#34; alt=&#34;Jordan Arentsen&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mislav&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/887?u=5ce21332bfb47e39de1fddeb28b4192d1f8d543a&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Mislav Marohniƒá&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/aexvir&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/8055505?u=3cc5cc4daba1b0eb027c6b20b29720831832025d&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Alex Viscreanu&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/dbalatero&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/59429?u=67d5158d381fa28b0ce849b3976dc7c8ac1faa54&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;David Balatero&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/moobar&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4176540?v=4&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/majjoha&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/233988?v=4&#34; width=&#34;60px&#34; alt=&#34;Mathias Jean Johansen&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/benelan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10986395?u=44009e8406b0a1f2487a2710e0763b345590fa7c&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Ben Elan&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pawelduda&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3728827?u=18306be396fdb2560e04ff5db57d9024c40ec561&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Pawe≈Ç Duda&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/slezica&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/321596?u=8423ec39c6f046851335d192a5837cc0f0336be3&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Santiago Lezica&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pbwn&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/34809091?u=5a0fbe67ca5c1df360398daf2700a5d69ee91904&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pyrho&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/145502?v=4&#34; width=&#34;60px&#34; alt=&#34;Damien Rajon&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/ArtBIT&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/184220?u=cc51cc2de93c463e38b11debb64d4bf1c248cfe3&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;ArtBIT&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/da-moon&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/17126777?u=6b7aeb3f4c9011efba1719ca1d22ba5fd810007a&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/hovissimo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6434414?u=e58fccf7558d7e3a4ab209a560afc2cd45460af1&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Hovis&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/dariusjonda&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/46670464?v=4&#34; width=&#34;60px&#34; alt=&#34;Darius Jonda&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/cristiand391&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6853656?u=c776e9cac61125d80ff5ac95c500305d37d8e674&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Cristian Dominguez&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/eliangcs&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/740461?u=76680d6f502ca5c1a4672abb54e43b5096884703&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Chang-Hung Liang&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/asphaltbuffet&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/30903912?u=aa0852635933800a81491462b542796834e6be13&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Ben Lechlitner&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/looshch&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/45432373?u=56759fa0249df8316ca41b3485c3aa28fee1af12&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;george looshch&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/kg8m&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/694547?u=8d953632231c25e8cf22d230e3a0d71fb4a5c7c6&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Takumi KAGIYAMA&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/polm&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/286278?v=4&#34; width=&#34;60px&#34; alt=&#34;Paul OLeary McCann&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/rbeeger&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/426834?v=4&#34; width=&#34;60px&#34; alt=&#34;Robert Beeger&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/veebch&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/75116070?u=f2249cafab82cfe46847ca51a6699abaf7a4b523&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;VEEB Projects&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/yowayb&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/603829?v=4&#34; width=&#34;60px&#34; alt=&#34;Yoway Buorn&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/scalisi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/163816?u=77afc0c27b34e33450514a519f6a28f1ceba4c55&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Josh Scalisi&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/alecbcs&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/19558067?u=212da801321fc40faabc1a5de932931b0f9d924d&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Alec Scott&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/thnxdev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/72539280?v=4&#34; width=&#34;60px&#34; alt=&#34;thanks.dev&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/artursapek&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/897596?u=3994c5d67812b10a05798cc7ce9b61190e0a4623&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Artur Sapek&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/ramnes&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/835072?u=3fca03c3ba0051e2eb652b1def2188a94d1e1dc2&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Guillaume Gelin&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/jyc&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/360412?u=15e7b90eb91a3d2b410f7f47461862cb793398ff&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/roblevy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4764631?v=4&#34; width=&#34;60px&#34; alt=&#34;Rob Levy&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/glozow&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/25183001?u=300ffe27f349299862614f00df51cc1e07fe07d1&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Gloria Zhao&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/toupeira&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6501?v=4&#34; width=&#34;60px&#34; alt=&#34;Markus Koller&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/rkpatel33&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3799489?u=011b74a4c6b0879e3de40b4284bf4ff2df5f0af9&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/jamesob&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/73197?u=b8ea256a15089319d357dbcc87b3ce7270f8e1a5&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;jamesob&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/jlebray&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/15625131?v=4&#34; width=&#34;60px&#34; alt=&#34;Johan Le Bray&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/panosl1&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5313566?u=7a698e16bc2927edc7af50c702e31e11cfe56d3d&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Panos Lampropoulos&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/bespinian&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/42848616?v=4&#34; width=&#34;60px&#34; alt=&#34;bespinian&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/scosu&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/598259?u=54a80a753e6541bb666dd7b3fa9407af141bee8c&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Markus Schneider-Pargmann&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/smithbm2316&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/37027883?u=eda62f61ccdcba2f53210fb5fa01405dd73190d2&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Ben Smith&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/charlieegan3&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1774239?u=9d05b8de251c67900464a1cbd7bea95c56a178fe&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Charlie Egan&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/thobbs&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/355580?u=4df51c19ac92fcc152e484286be143724888eac9&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Tyler Hobbs&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/neilparikh&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/614836?u=983726e56a81be42f17051786124a32be8e07570&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Neil Parikh&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/Thenlie&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/41388783?u=82ce75ae671fa0fa8f1f7d06ee2c5171db35b8d7&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Leithen&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shkm&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/22677?u=7be337f5cf5874bcab69e58f174c2b9d03b2331e&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Jamie Schembri&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/BasedScience&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/143867596?u=71878090f3062a48f79fac0395f7a54e9bda22d6&amp;amp;v=4&#34; width=&#34;60px&#34; alt=&#34;Based Science&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- sponsors --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-homebrew&#34;&gt;Using Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#linux-packages&#34;&gt;Linux packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#windows-packages&#34;&gt;Windows packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-git&#34;&gt;Using git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#binary-releases&#34;&gt;Binary releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration&#34;&gt;Setting up shell integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#vimneovim-plugin&#34;&gt;Vim/Neovim plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#upgrading-fzf&#34;&gt;Upgrading fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#building-fzf&#34;&gt;Building fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-the-finder&#34;&gt;Using the finder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#display-modes&#34;&gt;Display modes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#--height-mode&#34;&gt;&lt;code&gt;--height&lt;/code&gt; mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#--tmux-mode&#34;&gt;&lt;code&gt;--tmux&lt;/code&gt; mode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#search-syntax&#34;&gt;Search syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#key-bindings-for-command-line&#34;&gt;Key bindings for command-line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fuzzy-completion-for-bash-and-zsh&#34;&gt;Fuzzy completion for bash and zsh&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#files-and-directories&#34;&gt;Files and directories&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#process-ids&#34;&gt;Process IDs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#host-names&#34;&gt;Host names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables--aliases&#34;&gt;Environment variables / Aliases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#settings&#34;&gt;Settings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#supported-commands&#34;&gt;Supported commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#custom-fuzzy-completion&#34;&gt;Custom fuzzy completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#vim-plugin&#34;&gt;Vim plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#advanced-topics&#34;&gt;Advanced topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#executing-external-programs&#34;&gt;Executing external programs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#turning-into-a-different-process&#34;&gt;Turning into a different process&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#reloading-the-candidate-list&#34;&gt;Reloading the candidate list&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#1-update-the-list-of-processes-by-pressing-ctrl-r&#34;&gt;1. Update the list of processes by pressing CTRL-R&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f&#34;&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#3-interactive-ripgrep-integration&#34;&gt;3. Interactive ripgrep integration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#preview-window&#34;&gt;Preview window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#previewing-an-image&#34;&gt;Previewing an image&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#tips&#34;&gt;Tips&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#respecting-gitignore&#34;&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fish-shell&#34;&gt;Fish shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fzf-theme-playground&#34;&gt;fzf Theme Playground&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#related-projects&#34;&gt;Related projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (on macOS or Linux) to install fzf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install fzf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] To set up shell integration (key bindings and fuzzy completion), see &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration&#34;&gt;the instructions below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;fzf is also available &lt;a href=&#34;https://github.com/macports/macports-ports/raw/master/sysutils/fzf/Portfile&#34;&gt;via MacPorts&lt;/a&gt;: &lt;code&gt;sudo port install fzf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th&gt;Linux Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APK&lt;/td&gt; &#xA;   &lt;td&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apk add fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APT&lt;/td&gt; &#xA;   &lt;td&gt;Debian 9+/Ubuntu 19.10+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Conda&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;conda install -c conda-forge fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DNF&lt;/td&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo dnf install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nix&lt;/td&gt; &#xA;   &lt;td&gt;NixOS, etc.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pacman&lt;/td&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo pacman -S fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkg&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkgin&lt;/td&gt; &#xA;   &lt;td&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkgin install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkg_add&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg_add fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portage&lt;/td&gt; &#xA;   &lt;td&gt;Gentoo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emerge --ask app-shells/fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;spack install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XBPS&lt;/td&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo xbps-install -S fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zypper&lt;/td&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo zypper install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] To set up shell integration (key bindings and fuzzy completion), see &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration&#34;&gt;the instructions below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/fzf/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/fzf.svg?columns=3&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows packages&lt;/h3&gt; &#xA;&lt;p&gt;On Windows, fzf is available via &lt;a href=&#34;https://chocolatey.org/packages/fzf&#34;&gt;Chocolatey&lt;/a&gt;, &lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/fzf.json&#34;&gt;Scoop&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf&#34;&gt;Winget&lt;/a&gt;, and &lt;a href=&#34;https://packages.msys2.org/base/mingw-w64-fzf&#34;&gt;MSYS2&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package manager&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;choco install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scoop install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Winget&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winget install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSYS2 (pacman)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman -S $MINGW_PACKAGE_PREFIX-fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using git&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can &#34;git clone&#34; this repository to any directory and run &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/install&#34;&gt;install&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf&#xA;~/.fzf/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The install script will add lines to your shell configuration file to modify &lt;code&gt;$PATH&lt;/code&gt; and set up shell integration.&lt;/p&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;p&gt;You can download the official fzf binaries from the releases page.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/releases&#34;&gt;https://github.com/junegunn/fzf/releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setting up shell integration&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your shell configuration file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set up fzf key bindings and fuzzy completion&#xA;eval &#34;$(fzf --bash)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;zsh &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Set up fzf key bindings and fuzzy completion&#xA;source &amp;lt;(fzf --zsh)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;fish &lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;# Set up fzf key bindings&#xA;fzf --fish | source&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;code&gt;--bash&lt;/code&gt;, &lt;code&gt;--zsh&lt;/code&gt;, and &lt;code&gt;--fish&lt;/code&gt; options are only available in fzf 0.48.0 or later. If you have an older version of fzf, or want finer control, you can source individual script files in the &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/shell&#34;&gt;/shell&lt;/a&gt; directory. The location of the files may vary depending on the package manager you use. Please refer to the package documentation for more information. (e.g. &lt;code&gt;apt show fzf&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can disable CTRL-T or ALT-C binding by setting &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; or &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to an empty string when sourcing the script. For example, to disable ALT-C binding:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;bash: &lt;code&gt;FZF_ALT_C_COMMAND= eval &#34;$(fzf --bash)&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;zsh: &lt;code&gt;FZF_ALT_C_COMMAND= source &amp;lt;(fzf --zsh)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;fish: &lt;code&gt;fzf --fish | FZF_ALT_C_COMMAND= source&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Setting the variables after sourcing the script will have no effect.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Vim/Neovim plugin&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;, add this to your Vim configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;junegunn/fzf&#39;, { &#39;do&#39;: { -&amp;gt; fzf#install() } }&#xA;Plug &#39;junegunn/fzf.vim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;junegunn/fzf&lt;/code&gt; provides the basic library functions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;fzf#install()&lt;/code&gt; makes sure that you have the latest binary&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;junegunn/fzf.vim&lt;/code&gt; is &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;a separate project&lt;/a&gt; that provides a variety of useful commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about the Vim integration, see &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md&#34;&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you use Neovim and prefer Lua-based plugins, check out &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Upgrading fzf&lt;/h2&gt; &#xA;&lt;p&gt;fzf is being actively developed, and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git: &lt;code&gt;cd ~/.fzf &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; ./install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;brew: &lt;code&gt;brew update; brew upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macports: &lt;code&gt;sudo port upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;chocolatey: &lt;code&gt;choco upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;vim-plug: &lt;code&gt;:PlugUpdate fzf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building fzf&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find * -type f | fzf &amp;gt; selected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without STDIN pipe, fzf will traverse the file system under the current directory to get the list of files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can override the default behavior&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Either by setting &lt;code&gt;$FZF_DEFAULT_COMMAND&lt;/code&gt; to a command that generates the desired list&lt;/li&gt; &#xA;  &lt;li&gt;Or by setting &lt;code&gt;--walker&lt;/code&gt;, &lt;code&gt;--walker-root&lt;/code&gt;, and &lt;code&gt;--walker-skip&lt;/code&gt; options in &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] A more robust solution would be to use &lt;code&gt;xargs&lt;/code&gt; but we&#39;ve presented the above as it&#39;s easier to grasp&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --print0 | xargs -0 -o vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] fzf also has the ability to turn itself into a different process.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --bind &#39;enter:become(vim {})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#turning-into-a-different-process&#34;&gt;Turning into a different process&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using the finder&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-K&lt;/code&gt; / &lt;code&gt;CTRL-J&lt;/code&gt; (or &lt;code&gt;CTRL-P&lt;/code&gt; / &lt;code&gt;CTRL-N&lt;/code&gt;) to move cursor up and down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enter&lt;/code&gt; key to select the item, &lt;code&gt;CTRL-C&lt;/code&gt; / &lt;code&gt;CTRL-G&lt;/code&gt; / &lt;code&gt;ESC&lt;/code&gt; to exit&lt;/li&gt; &#xA; &lt;li&gt;On multi-select mode (&lt;code&gt;-m&lt;/code&gt;), &lt;code&gt;TAB&lt;/code&gt; and &lt;code&gt;Shift-TAB&lt;/code&gt; to mark multiple items&lt;/li&gt; &#xA; &lt;li&gt;Emacs style key bindings&lt;/li&gt; &#xA; &lt;li&gt;Mouse: scroll, click, double-click; shift-click and shift-scroll on multi-select mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Display modes&lt;/h3&gt; &#xA;&lt;p&gt;fzf by default runs in fullscreen mode, but there are other display modes.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;--height&lt;/code&gt; mode&lt;/h4&gt; &#xA;&lt;p&gt;With &lt;code&gt;--height HEIGHT[%]&lt;/code&gt;, fzf will start below the cursor with the given height.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --height 40%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; layout and &lt;code&gt;--border&lt;/code&gt; goes well with this option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --height 40% --layout reverse --border&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By prepending &lt;code&gt;~&lt;/code&gt; to the height, you&#39;re setting the maximum height.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Will take as few lines as possible to display the list&#xA;seq 3 | fzf --height ~100%&#xA;seq 3000 | fzf --height ~100%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Height value can be a negative number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Screen height - 3&#xA;fzf --height -3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;--tmux&lt;/code&gt; mode&lt;/h4&gt; &#xA;&lt;p&gt;With &lt;code&gt;--tmux&lt;/code&gt; option, fzf will start in a tmux popup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%]]&#xA;&#xA;fzf --tmux center         # Center, 50% width and height&#xA;fzf --tmux 80%            # Center, 80% width and height&#xA;fzf --tmux 100%,50%       # Center, 100% width and 50% height&#xA;fzf --tmux left,40%       # Left, 40% width&#xA;fzf --tmux left,40%,90%   # Left, 40% width, 90% height&#xA;fzf --tmux top,40%        # Top, 40% height&#xA;fzf --tmux bottom,80%,40% # Bottom, 80% height, 40% height&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--tmux&lt;/code&gt; is silently ignored when you&#39;re not on tmux.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you&#39;re stuck with an old version of tmux that doesn&#39;t support popup, or if you want to open fzf in a regular tmux pane, check out &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux&#34;&gt;fzf-tmux&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can add these options to &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt; so that they&#39;re applied by default. For example,&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Open in tmux popup if on tmux, otherwise use --height mode&#xA;export FZF_DEFAULT_OPTS=&#39;--height 40% --tmux bottom,40% --layout reverse --border top&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Search syntax&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise specified, fzf starts in &#34;extended-search mode&#34; where you can type in multiple search terms delimited by spaces. e.g. &lt;code&gt;^music .mp3$ sbtrkt !fire&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Token&lt;/th&gt; &#xA;   &lt;th&gt;Match type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fuzzy-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that match &lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;wild&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exact-match (quoted)&lt;/td&gt; &#xA;   &lt;td&gt;Items that include &lt;code&gt;wild&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;wild&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exact-boundary-match (quoted both ends)&lt;/td&gt; &#xA;   &lt;td&gt;Items that include &lt;code&gt;wild&lt;/code&gt; at word boundaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!fire&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not include &lt;code&gt;fire&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you don&#39;t prefer fuzzy matching and do not wish to &#34;quote&#34; every word, start fzf with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--exact&lt;/code&gt; option. Note that when &lt;code&gt;--exact&lt;/code&gt; is set, &lt;code&gt;&#39;&lt;/code&gt;-prefix &#34;unquotes&#34; the term.&lt;/p&gt; &#xA;&lt;p&gt;A single bar character term acts as an OR operator. For example, the following query matches entries that start with &lt;code&gt;core&lt;/code&gt; and end with either &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;rb&lt;/code&gt;, or &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;^core go$ | rb$ | py$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default command to use when input is tty&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type f&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_OPTS&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default options&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_OPTS=&#34;--layout=reverse --inline-info&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_OPTS_FILE&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you prefer to manage default options in a file, set this variable to point to the location of the file&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_OPTS_FILE=~/.fzfrc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] &lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt; is not used by shell integration due to the slight difference in requirements.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; runs &lt;code&gt;$FZF_CTRL_T_COMMAND&lt;/code&gt; to get a list of files and directories&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ALT-C&lt;/code&gt; runs &lt;code&gt;$FZF_ALT_C_COMMAND&lt;/code&gt; to get a list of directories&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;vim ~/**&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;fzf_compgen_path()&lt;/code&gt; with the prefix (&lt;code&gt;~/&lt;/code&gt;) as the first argument&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;cd foo**&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;fzf_compgen_dir()&lt;/code&gt; with the prefix (&lt;code&gt;foo&lt;/code&gt;) as the first argument&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;The available options are described later in this document.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;If you learn by watching videos, check out this screencast by &lt;a href=&#34;https://github.com/samoshkin&#34;&gt;@samoshkin&lt;/a&gt; to explore &lt;code&gt;fzf&lt;/code&gt; features.&lt;/p&gt; &#xA;&lt;a title=&#34;fzf - command-line fuzzy finder&#34; href=&#34;https://www.youtube.com/watch?v=qgG5Jhi_Els&#34;&gt; &lt;img src=&#34;https://i.imgur.com/vtG8olE.png&#34; width=&#34;640&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/wiki/examples&#34;&gt;Wiki page of examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Disclaimer: The examples on this page are maintained by the community and are not thoroughly tested&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md&#34;&gt;Advanced fzf examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key bindings for command-line&lt;/h2&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#setting-up-shell-integration&#34;&gt;setting up shell integration&lt;/a&gt;, you can use the following key bindings in bash, zsh, and fish.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; - Paste the selected files and directories onto the command-line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The list is generated using &lt;code&gt;--walker file,dir,follow,hidden&lt;/code&gt; option &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can override the behavior by setting &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; to a custom command that generates the desired list&lt;/li&gt; &#xA;     &lt;li&gt;Or you can set &lt;code&gt;--walker*&lt;/code&gt; options in &lt;code&gt;FZF_CTRL_T_OPTS&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_T_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Preview file content using bat (https://github.com/sharkdp/bat)&#xA;export FZF_CTRL_T_OPTS=&#34;&#xA;  --walker-skip .git,node_modules,target&#xA;  --preview &#39;bat -n --color=always {}&#39;&#xA;  --bind &#39;ctrl-/:change-preview-window(down|hidden|)&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Can be disabled by setting &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; to an empty string when sourcing the script&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-R&lt;/code&gt; - Paste the selected command from history onto the command-line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to see the commands in chronological order, press &lt;code&gt;CTRL-R&lt;/code&gt; again which toggles sorting by relevance&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;CTRL-/&lt;/code&gt; or &lt;code&gt;ALT-/&lt;/code&gt; to toggle line wrapping&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_R_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# CTRL-Y to copy the command into clipboard using pbcopy&#xA;export FZF_CTRL_R_OPTS=&#34;&#xA;  --bind &#39;ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort&#39;&#xA;  --color header:italic&#xA;  --header &#39;Press CTRL-Y to copy command into clipboard&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALT-C&lt;/code&gt; - cd into the selected directory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The list is generated using &lt;code&gt;--walker dir,follow,hidden&lt;/code&gt; option&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to override the default command &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Or you can set &lt;code&gt;--walker-*&lt;/code&gt; options in &lt;code&gt;FZF_ALT_C_OPTS&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Print tree structure in the preview window&#xA;export FZF_ALT_C_OPTS=&#34;&#xA;  --walker-skip .git,node_modules,target&#xA;  --preview &#39;tree -C {}&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Can be disabled by setting &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to an empty string when sourcing the script&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Display modes for these bindings can be separately configured via &lt;code&gt;FZF_{CTRL_T,CTRL_R,ALT_C}_OPTS&lt;/code&gt; or globally via &lt;code&gt;FZF_DEFAULT_OPTS&lt;/code&gt;. (e.g. &lt;code&gt;FZF_CTRL_R_OPTS=&#39;--tmux bottom,60% --height 60% --border top&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;More tips can be found on &lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fuzzy completion for bash and zsh&lt;/h2&gt; &#xA;&lt;h3&gt;Files and directories&lt;/h3&gt; &#xA;&lt;p&gt;Fuzzy completion for files and directories can be triggered if the word before the cursor ends with the trigger sequence, which is by default &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMAND [DIRECTORY/][FUZZY_PATTERN]**&amp;lt;TAB&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Files under the current directory&#xA;# - You can select multiple items with TAB key&#xA;vim **&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under parent directory&#xA;vim ../**&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under parent directory that match `fzf`&#xA;vim ../fzf**&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under your home directory&#xA;vim ~/**&amp;lt;TAB&amp;gt;&#xA;&#xA;&#xA;# Directories under current directory (single-selection)&#xA;cd **&amp;lt;TAB&amp;gt;&#xA;&#xA;# Directories under ~/github that match `fzf`&#xA;cd ~/github/fzf**&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Process IDs&lt;/h3&gt; &#xA;&lt;p&gt;Fuzzy completion for PIDs is provided for kill command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Can select multiple processes with &amp;lt;TAB&amp;gt; or &amp;lt;Shift-TAB&amp;gt; keys&#xA;kill -9 **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Host names&lt;/h3&gt; &#xA;&lt;p&gt;For ssh and telnet commands, fuzzy completion for hostnames is provided. The names are extracted from /etc/hosts and ~/.ssh/config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh **&amp;lt;TAB&amp;gt;&#xA;telnet **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables / Aliases&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;unset **&amp;lt;TAB&amp;gt;&#xA;export **&amp;lt;TAB&amp;gt;&#xA;unalias **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Use ~~ as the trigger sequence instead of the default **&#xA;export FZF_COMPLETION_TRIGGER=&#39;~~&#39;&#xA;&#xA;# Options to fzf command&#xA;export FZF_COMPLETION_OPTS=&#39;--border --info=inline&#39;&#xA;&#xA;# Use fd (https://github.com/sharkdp/fd) for listing path candidates.&#xA;# - The first argument to the function ($1) is the base path to start traversal&#xA;# - See the source code (completion.{bash,zsh}) for the details.&#xA;_fzf_compgen_path() {&#xA;  fd --hidden --follow --exclude &#34;.git&#34; . &#34;$1&#34;&#xA;}&#xA;&#xA;# Use fd to generate the list for directory completion&#xA;_fzf_compgen_dir() {&#xA;  fd --type d --hidden --follow --exclude &#34;.git&#34; . &#34;$1&#34;&#xA;}&#xA;&#xA;# Advanced customization of fzf options via _fzf_comprun function&#xA;# - The first argument to the function is the name of the command.&#xA;# - You should make sure to pass the rest of the arguments to fzf.&#xA;_fzf_comprun() {&#xA;  local command=$1&#xA;  shift&#xA;&#xA;  case &#34;$command&#34; in&#xA;    cd)           fzf --preview &#39;tree -C {} | head -200&#39;   &#34;$@&#34; ;;&#xA;    export|unset) fzf --preview &#34;eval &#39;echo \$&#39;{}&#34;         &#34;$@&#34; ;;&#xA;    ssh)          fzf --preview &#39;dig {}&#39;                   &#34;$@&#34; ;;&#xA;    *)            fzf --preview &#39;bat -n --color=always {}&#39; &#34;$@&#34; ;;&#xA;  esac&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported commands&lt;/h3&gt; &#xA;&lt;p&gt;On bash, fuzzy completion is enabled only for a predefined set of commands (&lt;code&gt;complete | grep _fzf&lt;/code&gt; to see the list). But you can enable it for other commands as well by using &lt;code&gt;_fzf_setup_completion&lt;/code&gt; helper function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...&#xA;_fzf_setup_completion path ag git kubectl&#xA;_fzf_setup_completion dir tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom fuzzy completion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;(Custom completion API is experimental and subject to change)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a command named &lt;em&gt;&#34;COMMAND&#34;&lt;/em&gt;, define &lt;code&gt;_fzf_complete_COMMAND&lt;/code&gt; function using &lt;code&gt;_fzf_complete&lt;/code&gt; helper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Custom fuzzy completion for &#34;doge&#34; command&#xA;#   e.g. doge **&amp;lt;TAB&amp;gt;&#xA;_fzf_complete_doge() {&#xA;  _fzf_complete --multi --reverse --prompt=&#34;doge&amp;gt; &#34; -- &#34;$@&#34; &amp;lt; &amp;lt;(&#xA;    echo very&#xA;    echo wow&#xA;    echo such&#xA;    echo doge&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The arguments before &lt;code&gt;--&lt;/code&gt; are the options to fzf.&lt;/li&gt; &#xA; &lt;li&gt;After &lt;code&gt;--&lt;/code&gt;, simply pass the original completion arguments unchanged (&lt;code&gt;&#34;$@&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Then, write a set of commands that generates the completion candidates and feed its output to the function using process substitution (&lt;code&gt;&amp;lt; &amp;lt;(...)&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;zsh will automatically pick up the function using the naming convention but in bash you have to manually associate the function with the command using the &lt;code&gt;complete&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[ -n &#34;$BASH&#34; ] &amp;amp;&amp;amp; complete -F _fzf_complete_doge -o default -o bashdefault doge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to post-process the output from fzf, define &lt;code&gt;_fzf_complete_COMMAND_post&lt;/code&gt; as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;_fzf_complete_foo() {&#xA;  _fzf_complete --multi --reverse --header-lines=3 -- &#34;$@&#34; &amp;lt; &amp;lt;(&#xA;    ls -al&#xA;  )&#xA;}&#xA;&#xA;_fzf_complete_foo_post() {&#xA;  awk &#39;{print $NF}&#39;&#xA;}&#xA;&#xA;[ -n &#34;$BASH&#34; ] &amp;amp;&amp;amp; complete -F _fzf_complete_foo -o default -o bashdefault foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vim plugin&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md&#34;&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced topics&lt;/h2&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;fzf is fast. Performance should not be a problem in most use cases. However, you might want to be aware of the options that can affect performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--ansi&lt;/code&gt; tells fzf to extract and parse ANSI color codes in the input, and it makes the initial scanning slower. So it&#39;s not recommended that you add it to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--nth&lt;/code&gt; makes fzf slower because it has to tokenize each line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-nth&lt;/code&gt; makes fzf slower as fzf has to tokenize and reassemble each line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Executing external programs&lt;/h3&gt; &#xA;&lt;p&gt;You can set up key bindings for starting external processes without leaving fzf (&lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;execute-silent&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Press F1 to open the file with less without leaving fzf&#xA;# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)&#xA;fzf --bind &#39;f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;em&gt;KEY BINDINGS&lt;/em&gt; section of the man page for details.&lt;/p&gt; &#xA;&lt;h3&gt;Turning into a different process&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;become(...)&lt;/code&gt; is similar to &lt;code&gt;execute(...)&lt;/code&gt;/&lt;code&gt;execute-silent(...)&lt;/code&gt; described above, but instead of executing the command and coming back to fzf on complete, it turns fzf into a new process for the command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --bind &#39;enter:become(vim {})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compared to the seemingly equivalent command substitution &lt;code&gt;vim &#34;$(fzf)&#34;&lt;/code&gt;, this approach has several advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim will not open an empty file when you terminate fzf with &lt;kbd&gt;CTRL-C&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vim will not open an empty file when you press &lt;kbd&gt;ENTER&lt;/kbd&gt; on an empty result&lt;/li&gt; &#xA; &lt;li&gt;Can handle multiple selections even when they have whitespaces &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --multi --bind &#39;enter:become(vim {+})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To be fair, running &lt;code&gt;fzf --print0 | xargs -0 -o vim&lt;/code&gt; instead of &lt;code&gt;vim &#34;$(fzf)&#34;&lt;/code&gt; resolves all of the issues mentioned. Nonetheless, &lt;code&gt;become(...)&lt;/code&gt; still offers additional benefits in different scenarios.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can set up multiple bindings to handle the result in different ways without any wrapping script &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --bind &#39;enter:become(vim {}),ctrl-e:become(emacs {})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Previously, you would have to use &lt;code&gt;--expect=ctrl-e&lt;/code&gt; and check the first line of the output of fzf&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can easily build the subsequent command using the field index expressions of fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Open the file in Vim and go to the line&#xA;git grep --line-number . |&#xA;    fzf --delimiter : --nth 3.. --bind &#39;enter:become(vim {1} +{2})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reloading the candidate list&lt;/h3&gt; &#xA;&lt;p&gt;By binding &lt;code&gt;reload&lt;/code&gt; action to a key or an event, you can make fzf dynamically reload the candidate list. See &lt;a href=&#34;https://github.com/junegunn/fzf/issues/1750&#34;&gt;https://github.com/junegunn/fzf/issues/1750&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;1. Update the list of processes by pressing CTRL-R&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ps -ef |&#xA;  fzf --bind &#39;ctrl-r:reload(ps -ef)&#39; \&#xA;      --header &#39;Press CTRL-R to reload&#39; --header-lines=1 \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FZF_DEFAULT_COMMAND=&#39;find . -type f&#39; \&#xA;  fzf --bind &#39;ctrl-d:reload(find . -type d),ctrl-f:reload(eval &#34;$FZF_DEFAULT_COMMAND&#34;)&#39; \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Interactive ripgrep integration&lt;/h4&gt; &#xA;&lt;p&gt;The following example uses fzf as the selector interface for ripgrep. We bound &lt;code&gt;reload&lt;/code&gt; action to &lt;code&gt;change&lt;/code&gt; event, so every time you type on fzf, the ripgrep process will restart with the updated query string denoted by the placeholder expression &lt;code&gt;{q}&lt;/code&gt;. Also, note that we used &lt;code&gt;--disabled&lt;/code&gt; option so that fzf doesn&#39;t perform any secondary filtering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;: | rg_prefix=&#39;rg --column --line-number --no-heading --color=always --smart-case&#39; \&#xA;    fzf --bind &#39;start:reload:$rg_prefix &#34;&#34;&#39; \&#xA;        --bind &#39;change:reload:$rg_prefix {q} || true&#39; \&#xA;        --bind &#39;enter:become(vim {1} +{2})&#39; \&#xA;        --ansi --disabled \&#xA;        --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ripgrep doesn&#39;t find any matches, it will exit with a non-zero exit status, and fzf will warn you about it. To suppress the warning message, we added &lt;code&gt;|| true&lt;/code&gt; to the command, so that it always exits with 0.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher&#34;&gt;&#34;Using fzf as interactive Ripgrep launcher&#34;&lt;/a&gt; for more sophisticated examples.&lt;/p&gt; &#xA;&lt;h3&gt;Preview window&lt;/h3&gt; &#xA;&lt;p&gt;When the &lt;code&gt;--preview&lt;/code&gt; option is set, fzf automatically starts an external process with the current line as the argument and shows the result in the split window. Your &lt;code&gt;$SHELL&lt;/code&gt; is used to execute the command with &lt;code&gt;$SHELL -c COMMAND&lt;/code&gt;. The window can be scrolled using the mouse or custom key bindings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# {} is replaced with the single-quoted string of the focused line&#xA;fzf --preview &#39;cat {}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preview window supports ANSI colors, so you can use any program that syntax-highlights the content of a file, such as &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;Bat&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com/saalen/highlight&#34;&gt;Highlight&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --preview &#39;bat --color=always {}&#39; --preview-window &#39;~3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the size, position, and border of the preview window using &lt;code&gt;--preview-window&lt;/code&gt; option, and the foreground and background color of it with &lt;code&gt;--color&lt;/code&gt; option. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --height 40% --layout reverse --info inline --border \&#xA;    --preview &#39;file {}&#39; --preview-window up,1,border-horizontal \&#xA;    --bind &#39;ctrl-/:change-preview-window(50%|hidden|)&#39; \&#xA;    --color &#39;fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; &#xA;&lt;p&gt;More advanced examples can be found &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Since fzf is a general-purpose text filter rather than a file finder, &lt;strong&gt;it is not a good idea to add &lt;code&gt;--preview&lt;/code&gt; option to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# *********************&#xA;# ** DO NOT DO THIS! **&#xA;# *********************&#xA;export FZF_DEFAULT_OPTS=&#39;--preview &#34;bat --style=numbers --color=always --line-range :500 {}&#34;&#39;&#xA;&#xA;# bat doesn&#39;t work with any input other than the list of files&#xA;ps -ef | fzf&#xA;seq 100 | fzf&#xA;history | fzf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Previewing an image&lt;/h3&gt; &#xA;&lt;p&gt;fzf can display images in the preview window using one of the following protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/&#34;&gt;Kitty graphics protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iterm2.com/documentation-images.html&#34;&gt;iTerm2 inline images protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sixel&#34;&gt;Sixel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-preview.sh&#34;&gt;bin/fzf-preview.sh&lt;/a&gt; script for more information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --preview &#39;fzf-preview.sh {}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt;, &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;, or &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;the silver searcher&lt;/a&gt; to traverse the file system while respecting &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Feed the output of fd into fzf&#xA;fd --type f --strip-cwd-prefix | fzf&#xA;&#xA;# Setting fd as the default source for fzf&#xA;export FZF_DEFAULT_COMMAND=&#39;fd --type f --strip-cwd-prefix&#39;&#xA;&#xA;# Now fzf (w/o pipe) will use the fd command to generate the list&#xA;fzf&#xA;&#xA;# To apply the command to CTRL-T as well&#xA;export FZF_CTRL_T_COMMAND=&#34;$FZF_DEFAULT_COMMAND&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the command to follow symbolic links and don&#39;t want it to exclude hidden files, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type f --strip-cwd-prefix --hidden --follow --exclude .git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fish shell&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;CTRL-T&lt;/code&gt; key binding of fish, unlike those of bash and zsh, will use the last token on the command-line as the root directory for the recursive search. For instance, hitting &lt;code&gt;CTRL-T&lt;/code&gt; at the end of the following command-line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ls /var/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will list all files and directories under &lt;code&gt;/var/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using a custom &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt;, use the unexpanded &lt;code&gt;$dir&lt;/code&gt; variable to make use of this feature. &lt;code&gt;$dir&lt;/code&gt; defaults to &lt;code&gt;.&lt;/code&gt; when the last token is not a valid directory. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set -g FZF_CTRL_T_COMMAND &#34;command find -L \$dir -type f 2&amp;gt; /dev/null | sed &#39;1d; s#^\./##&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;fzf Theme Playground&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vitormv.github.io/fzf-themes/&#34;&gt;fzf Theme Playground&lt;/a&gt; created by &lt;a href=&#34;https://github.com/vitormv&#34;&gt;Vitor Mello&lt;/a&gt; is a webpage where you can interactively create fzf themes.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Related-projects&#34;&gt;https://github.com/junegunn/fzf/wiki/Related-projects&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2024 Junegunn Choi&lt;/p&gt;</summary>
  </entry>
</feed>