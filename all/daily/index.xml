<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:30:11Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>loov/lensm</title>
    <updated>2022-07-20T01:30:11Z</updated>
    <id>tag:github.com,2022-07-20:/loov/lensm</id>
    <link href="https://github.com/loov/lensm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go assembly and source viewer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lensm&lt;/h1&gt; &#xA;&lt;p&gt;A tool for viewing assembly and source.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/loov/lensm/main/screenshot.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install with the usual Go commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install loov.dev/lensm@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;For Linux you may need to add some &lt;a href=&#34;https://gioui.org/doc/install/linux&#34;&gt;additional dependencies&lt;/a&gt;. You can use &lt;code&gt;go install --tags nowayland loov.dev/lensm@main&lt;/code&gt; or &lt;code&gt;go install --tags nox11 loov.dev/lensm@main&lt;/code&gt; respectively to skip building Wayland or X11 version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the program provide a regular expression filter for the symbol you want to inspect. &lt;code&gt;-watch&lt;/code&gt; allows to automatically reload the executable and information when it changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lensm -watch -filter Fibonacci lensm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The program requires a binary that is built on your computer, otherwise the source code for the functions cannot be loaded.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I wrote a blog post at &lt;a href=&#34;https://www.storj.io/blog/lensm&#34;&gt;https://www.storj.io/blog/lensm&lt;/a&gt; on why and how the core functionality works.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kevwan/tproxy</title>
    <updated>2022-07-20T01:30:11Z</updated>
    <id>tag:github.com,2022-07-20:/kevwan/tproxy</id>
    <link href="https://github.com/kevwan/tproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cli tool to proxy and analyze TCP connections.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tproxy&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/kevwan/tproxy/main/readme-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kevwan/tproxy/actions&#34;&gt;&lt;img src=&#34;https://github.com/kevwan/tproxy/workflows/Go/badge.svg?branch=main&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kevwan/tproxy&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kevwan/tproxy&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kevwan/tproxy&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kevwan/tproxy.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/kevwan&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why I wrote this tool&lt;/h2&gt; &#xA;&lt;p&gt;When I develop backend services and write &lt;a href=&#34;https://github.com/zeromicro/go-zero&#34;&gt;go-zero&lt;/a&gt;, I often need to monitor the network traffic. For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;monitoring gRPC connections, when to connect and when to reconnect&lt;/li&gt; &#xA; &lt;li&gt;monitoring MySQL connection pools, how many connections and figure out the lifetime policy&lt;/li&gt; &#xA; &lt;li&gt;monitoring any TCP connections on the fly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go install github.com/kevwan/tproxy@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use docker images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it -p &amp;lt;listen-port&amp;gt;:&amp;lt;listen-port&amp;gt; -p &amp;lt;remote-port&amp;gt;:&amp;lt;remote-port&amp;gt; kevinwan/tproxy:v1 tproxy -l 0.0.0.0 -p &amp;lt;listen-port&amp;gt; -r host.docker.internal:&amp;lt;remote-port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For arm64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it -p &amp;lt;listen-port&amp;gt;:&amp;lt;listen-port&amp;gt; -p &amp;lt;remote-port&amp;gt;:&amp;lt;remote-port&amp;gt; kevinwan/tproxy:v1-arm64 tproxy -l 0.0.0.0 -p &amp;lt;listen-port&amp;gt; -r host.docker.internal:&amp;lt;remote-port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ scoop install tproxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tproxy --help&#xA;Usage of tproxy:&#xA;  -d duration&#xA;    &#x9;the delay to relay packets&#xA;  -l string&#xA;    &#x9;Local address to listen on (default &#34;localhost&#34;)&#xA;  -p int&#xA;    &#x9;Local port to listen on, default to pick a random port&#xA;  -q&#x9;Quiet mode, only prints connection open/close and stats, default false&#xA;  -r string&#xA;    &#x9;Remote address (host:port) to connect&#xA;  -s&#x9;Enable statistics&#xA;  -t string&#xA;    &#x9;The type of protocol, currently support grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Monitor gRPC connections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tproxy -p 8088 -r localhost:8081 -t grpc -d 100ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;listen on localhost and port 8088&lt;/li&gt; &#xA; &lt;li&gt;redirect the traffic to &lt;code&gt;localhost:8081&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;protocol type to be gRPC&lt;/li&gt; &#xA; &lt;li&gt;delay 100ms for each packets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;561&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1918356/174335713-259de707-c9f5-40f1-a96f-780232d23f43.png&#34;&gt; &#xA;&lt;h3&gt;Monitor MySQL connections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tproxy -p 3307 -r localhost:3306&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1918356/173970130-944e4265-8ba6-4d2e-b091-1f6a5de81070.png&#34;&gt; &#xA;&lt;h2&gt;Give a Star! ⭐&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project, please give it a &lt;strong&gt;star&lt;/strong&gt;. Thanks!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fossabot/typoraCracker</title>
    <updated>2022-07-20T01:30:11Z</updated>
    <id>tag:github.com,2022-07-20:/fossabot/typoraCracker</id>
    <link href="https://github.com/fossabot/typoraCracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A patch and keygen tools for typora.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;typora Cracker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2FMas0nShi%2FtyporaCracker?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2FMas0nShi%2FtyporaCracker.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A patch and keygen tools for typora.&lt;/p&gt; &#xA;&lt;p&gt;中文说明请戳&lt;a href=&#34;https://raw.githubusercontent.com/fossabot/typoraCracker/master/README_CN.md&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WARNING&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;FOR STUDY AND DISCUSSION ONLY, PLEASE DO NOT ENGAGE IN ANY ILLEGAL ACTS.&#xA;ANY PROBLEMS ARISING FROM THIS WILL BE BORNE BY THE USER (YOU).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports ALL OS supported by typora&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python typroa.py --help&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;read and use.&lt;/li&gt; &#xA; &lt;li&gt;patch License.js.&lt;/li&gt; &#xA; &lt;li&gt;replace app.asar.&lt;/li&gt; &#xA; &lt;li&gt;run keygen.&lt;/li&gt; &#xA; &lt;li&gt;enjoy it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; python typroa.py --help&#xA;usage: typora.py [-h] [-u] [-f] asarPath dirPath&#xA;&#xA;[extract and decryption / pack and encryption] app.asar file from [Typora].&#xA;&#xA;positional arguments:&#xA;  asarPath    app.asar file path/dir [input/ouput]&#xA;  dirPath     as tmp and out directory.&#xA;&#xA;optional arguments:&#xA;  -h, --help  show this help message and exit&#xA;  -u          pack &amp;amp; encryption (default: extract &amp;amp; decryption)&#xA;  -f          enabled prettify/compress (default: disabled)&#xA;&#xA;If you have any questions, please contact [ MasonShi@88.com ]&#xA;&#xA;&amp;gt; python typora.py {installRoot}/Typora/resources/app.asar workstation/outfile/&#xA;⋯&#xA;&amp;gt; python typora.py -u workstation/outfile/ workstation/outappasar&#xA;⋯&#xA;&amp;gt; cp {installRoot}/Typora/resources/app.asar {installRoot}/Typora/resources/app.asar.bak&#xA;&amp;gt; mv workstation/outappasar/app.asar {installRoot}/Typora/resources/app.asar&#xA;# (patch code)&#xA;&amp;gt; node keygen.js&#xA;XXXXXX-XXXXXX-XXXXXX-XXXXXX&#xA;&amp;gt; typora&#xA;# (input info)&#xA;email: crack@example.com&#xA;serial: XXXXXX-XXXXXX-XXXXXX-XXXXXX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;MIT LICENSE&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2FMas0nShi%2FtyporaCracker?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2FMas0nShi%2FtyporaCracker.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>