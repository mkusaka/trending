<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-15T08:57:37Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nocobase/nocobase</title>
    <updated>2024-05-15T08:57:37Z</updated>
    <id>tag:github.com,2024-05-15:/nocobase/nocobase</id>
    <link href="https://github.com/nocobase/nocobase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NocoBase is a scalability-first, open-source no-code/low-code platform for building business applications and enterprise solutions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/nocobase/nocobase/main/README.zh-CN.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nocobase/nocobase/assets/1267426/1d6a3979-d1eb-4e50-b726-2f90c3f82eeb&#34;&gt;https://github.com/nocobase/nocobase/assets/1267426/1d6a3979-d1eb-4e50-b726-2f90c3f82eeb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Recent major updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v1001-changelog&#34;&gt;v1.0ÔºöSignificant Milestone - 2024/04/28&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0210-changelog&#34;&gt;v0.21ÔºöBlock performance optimization - 2024/03/29&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0200-changelog&#34;&gt;v0.20ÔºöSupport for multiple data sources - 2024/03/03&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0190-changelog&#34;&gt;v0.19: Application process optimization - 2024/01/08&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0180-changelog&#34;&gt;v0.18: Establish a sound testing system - 2023/12/21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0170-changelog&#34;&gt;v0.17: New SchemaInitializer and SchemaSettings - 2023/12/11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0160-changelog&#34;&gt;v0.16: New cache manager - 2023/11/20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0150-changelog&#34;&gt;v0.15: New plugin settings manager - 2023/11/13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0140-changelog&#34;&gt;v0.14: New plugin manager, supports adding plugins through UI - 2023/09/11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0130-changelog&#34;&gt;v0.13: New application status flow - 2023/08/24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0120-changelog&#34;&gt;v0.12: New plugin build tool - 2023/08/01&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nocobase.com/welcome/release/v0110-changelog&#34;&gt;v0.11: New client application, plugin and router - 2023/07/08&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is NocoBase&lt;/h2&gt; &#xA;&lt;p&gt;NocoBase is a scalability-first, open-source no-code development platform.&lt;br&gt; Instead of investing years of time and millions of dollars in research and development, deploy NocoBase in a few minutes and you&#39;ll have a private, controllable, and extremely scalable no-code development platform!&lt;/p&gt; &#xA;&lt;p&gt;Homepage:&lt;br&gt; &lt;a href=&#34;https://www.nocobase.com/&#34;&gt;https://www.nocobase.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Online Demo:&lt;br&gt; &lt;a href=&#34;https://demo.nocobase.com/new&#34;&gt;https://demo.nocobase.com/new&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documents:&lt;br&gt; &lt;a href=&#34;https://docs.nocobase.com/&#34;&gt;https://docs.nocobase.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contact Us:&lt;br&gt; &lt;a href=&#34;mailto:hello@nocobase.com&#34;&gt;hello@nocobase.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Distinctive features&lt;/h2&gt; &#xA;&lt;h3&gt;1. Data model-driven&lt;/h3&gt; &#xA;&lt;p&gt;Most form-, table-, or process-driven no-code products create data structures directly in the user interface, such as Airtable, where adding a new column to a table is adding a new field. This has the advantage of simplicity of use, but the disadvantage of limited functionality and flexibility to meet the needs of more complex scenarios.&lt;/p&gt; &#xA;&lt;p&gt;NocoBase adopts the design idea of separating the data structure from the user interface, allowing you to create any number of blocks (data views) for the data collections, with different type, styles, content, and actions in each block. This balances the simplicity of no-code operation with the flexibility of native development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static-docs.nocobase.com/model.png&#34; alt=&#34;model&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. What you see is what you get&lt;/h3&gt; &#xA;&lt;p&gt;NocoBase enables the development of complex and distinctive business systems, but this does not mean that complex and specialized operations are required. With a single click, configuration options are displayed on the usage interface, and administrators with system configuration privileges can directly configure the user interface in a WYSIWYG manner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static-docs.nocobase.com/wysiwyg.gif&#34; alt=&#34;wysiwyg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Everything is implemented as plugins&lt;/h3&gt; &#xA;&lt;p&gt;NocoBase adopts plugin architecture, all new functions can be realized by developing and installing plugins, and expanding the functions is as easy as installing an APP on your phone.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static-docs.nocobase.com/plugins.png&#34; alt=&#34;plugins&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;NocoBase supports three installation methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://docs.nocobase.com/welcome/getting-started/installation/docker-compose&#34;&gt;Installing With Docker (üëçRecommended)&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Suitable for no-code scenarios, no code to write. When upgrading, just download the latest image and reboot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://docs.nocobase.com/welcome/getting-started/installation/create-nocobase-app&#34;&gt;Installing from create-nocobase-app CLI&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The business code of the project is completely independent and supports low-code development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://docs.nocobase.com/welcome/getting-started/installation/git-clone&#34;&gt;Installing from Git source code&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you want to experience the latest unreleased version, or want to participate in the contribution, you need to make changes and debug on the source code, it is recommended to choose this installation method, which requires a high level of development skills, and if the code has been updated, you can git pull the latest code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Mr-Wiseguy/N64Recomp</title>
    <updated>2024-05-15T08:57:37Z</updated>
    <id>tag:github.com,2024-05-15:/Mr-Wiseguy/N64Recomp</id>
    <link href="https://github.com/Mr-Wiseguy/N64Recomp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tool to statically recompile N64 games into native executables&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;N64: Recompiled&lt;/h1&gt; &#xA;&lt;p&gt;N64: Recompiled is a tool to statically recompile N64 binaries into C code that can be compiled for any platform. This can be used for ports or tools as well as for simulating behaviors significantly faster than interpreters or dynamic recompilation can. More widely, it can be used in any context where you want to run some part of an N64 binary in a standalone environment.&lt;/p&gt; &#xA;&lt;p&gt;This is not the first project that uses static recompilation on game console binaries. A well known example is &lt;a href=&#34;https://github.com/andrewrk/jamulator&#34;&gt;jamulator&lt;/a&gt;, which targets NES binaries. Additionally, this is not even the first project to apply static recompilation to N64-related projects: the &lt;a href=&#34;https://github.com/decompals/ido-static-recomp&#34;&gt;IDO static recompilation&lt;/a&gt; recompiles the SGI IRIX IDO compiler on modern systems to faciliate matching decompilation of N64 games. This project works similarly to the IDO static recomp project in some ways, and that project was my main inspiration for making this.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#overlays&#34;&gt;Overlays&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#how-to-use&#34;&gt;How to Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#single-file-output-mode-for-patches&#34;&gt;Single File Output Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#rsp-microcode-support&#34;&gt;RSP Microcode Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#planned-features&#34;&gt;Planned Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mr-Wiseguy/N64Recomp/main/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;The recompiler works by accepting a list of symbols and metadata alongside the binary with the goal of splitting the input binary into functions that are each individually recompiled into a C function, named according to the metadata.&lt;/p&gt; &#xA;&lt;p&gt;Instructions are processed one-by-one and corresponding C code is emitted as each one gets processed. This translation is very literal in order to keep complexity low. For example, the instruction &lt;code&gt;addiu $r4, $r4, 0x20&lt;/code&gt;, which adds &lt;code&gt;0x20&lt;/code&gt; to the 32-bit value in the low bytes of register &lt;code&gt;$r4&lt;/code&gt; and stores the sign extended 64-bit result in &lt;code&gt;$r4&lt;/code&gt;, gets recompiled into &lt;code&gt;ctx-&amp;gt;r4 = ADD32(ctx-&amp;gt;r4, 0X20);&lt;/code&gt; The &lt;code&gt;jal&lt;/code&gt; (jump-and-link) instruction is recompiled directly into a function call, and &lt;code&gt;j&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; instructions (unconditional jumps and branches) that can be identified as tail-call optimizations are also recompiled into function calls as well. Branch delay slots are handled by duplicating instructions as necessary. There are other specific behaviors for certain instructions, such as the recompiler attempting to turn a &lt;code&gt;jr&lt;/code&gt; instruction into a switch-case statement if it can tell that it&#39;s being used with a jump table. The recompiler has mostly been tested on binaries built with old MIPS compilers (e.g. mips gcc 2.7.2 and IDO) as well as modern clang targeting mips. Modern mips gcc may trip up the recompiler due to certain optimizations it can do, but those cases can probably be avoided by setting specific compilation flags.&lt;/p&gt; &#xA;&lt;p&gt;Every output function created by the recompiler is currently emitted into its own file. An option may be provided in the future to group functions together into output files, which should help improve build times of the recompiler output by reducing file I/O in the build process.&lt;/p&gt; &#xA;&lt;p&gt;Recompiler output can be compiled with any C compiler (tested with msvc, gcc and clang). The output is expected to be used with a runtime that can provide the necessary functionality and macro implementations to run it. An example of most of the required macro implementations can be found in the Zelda 64: Recompiled project &lt;a href=&#34;https://github.com/Mr-Wiseguy/Zelda64Recomp/raw/dev/include/recomp.h&#34;&gt;here&lt;/a&gt;, with the project also containing accompanying code for implementing the rest of the required runtime.&lt;/p&gt; &#xA;&lt;h2&gt;Overlays&lt;/h2&gt; &#xA;&lt;p&gt;Statically linked and relocatable overlays can both be handled by this tool. In both cases, the tool emits function lookups for jump-and-link-register (i.e. function pointers or virtual functions) which the provided runtime can implement using any sort of lookup table. For example, the instruction &lt;code&gt;jalr $25&lt;/code&gt; would get recompiled as &lt;code&gt;LOOKUP_FUNC(ctx-&amp;gt;r25)(rdram, ctx);&lt;/code&gt; The runtime can then maintain a list of which program sections are loaded and at what address they are at in order to determine which function to run whenever a lookup is triggered during runtime.&lt;/p&gt; &#xA;&lt;p&gt;For relocatable overlays, the tool will modify supported instructions possessing relocation data (&lt;code&gt;lui&lt;/code&gt;, &lt;code&gt;addiu&lt;/code&gt;, load and store instructions) by emitting an extra macro that enables the runtime to relocate the instruction&#39;s immediate value field. For example, the instruction &lt;code&gt;lui $24, 0x80C0&lt;/code&gt; in a section beginning at address &lt;code&gt;0x80BFA100&lt;/code&gt; with a relocation against a symbol with an address of &lt;code&gt;0x80BFA730&lt;/code&gt; will get recompiled as &lt;code&gt;ctx-&amp;gt;r24 = S32(RELOC_HI16(1754, 0X630) &amp;lt;&amp;lt; 16);&lt;/code&gt;, where 1754 is the index of this section. The runtime can then implement the RELOC_HI16 and RELOC_LO16 macros in order to handle modifying the immediate based on the current loaded address of the section.&lt;/p&gt; &#xA;&lt;p&gt;Support for relocations for TLB mapping is coming in the future, which will add the ability to provide a list of MIPS32 relocations so that the runtime can relocate them on load. Combining this with the functionality used for relocatable overlays should allow running most TLB mapped code without incurring a performance penalty on every RAM access.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;The recompiler is configured by providing a toml file in order to configure the recompiler behavior, which is the only argument provided to the recompiler. The toml is where you specify input and output file paths, as well as optionally stub out specific functions, skip recompilation of specific functions, and patch single instructions in the target binary. There is also planned functionality to be able to emit hooks in the recompiler output by adding them to the toml (the &lt;code&gt;[[patches.func]]&lt;/code&gt; and &lt;code&gt;[[patches.hook]]&lt;/code&gt; sections of the linked toml below), but this is currently unimplemented. Documentation on every option that the recompiler provides is not currently available, but an example toml can be found in the Zelda 64: Recompiled project &lt;a href=&#34;https://github.com/Mr-Wiseguy/Zelda64Recomp/raw/dev/us.rev1.toml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the only way to provide the required metadata is by passing an elf file to this tool. The easiest way to get such an elf is to set up a disassembly or decompilation of the target binary, but there will be support for providing the metadata via a custom format to bypass the need to do so in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Single File Output Mode (for Patches)&lt;/h2&gt; &#xA;&lt;p&gt;This tool can also be configured to recompile in &#34;single file output&#34; mode via an option in the configuration toml. This will emit all of the functions in the provided elf into a single output file. The purpose of this mode is to be able to compile patched versions of functions from the target binary.&lt;/p&gt; &#xA;&lt;p&gt;This mode can be combined with the functionality provided by almost all linkers (ld, lld, MSVC&#39;s link.exe, etc.) to replace functions from the original recompiler output with modified versions. Those linkers only look for symbols in a static library if they weren&#39;t already found in a previous input file, so providing the recompiled patches to the linker before providing the original recompiler output will result in the patches taking priority over functions with the same names from the original recompiler output.&lt;/p&gt; &#xA;&lt;p&gt;This saves a tremendous amount of time while iterating on patches for the target binary, as you can bypass rerunning the recompiler on the target binary as well as compiling the original recompiler output. An example of using this single file output mode for that purpose can be found in the Zelda 64: Recompiled project &lt;a href=&#34;https://github.com/Mr-Wiseguy/Zelda64Recomp/raw/dev/patches.toml&#34;&gt;here&lt;/a&gt;, with the corresponding Makefile that gets used to build the elf for those patches &lt;a href=&#34;https://github.com/Mr-Wiseguy/Zelda64Recomp/raw/dev/patches/Makefile&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RSP Microcode Support&lt;/h2&gt; &#xA;&lt;p&gt;RSP microcode can also be recompiled with this tool. Currently there is no support for recompiling RSP overlays, but it may be added in the future if desired. Documentation on how to use this functionality will be coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;Planned Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom metadata format to provide symbol names, relocations, and any other necessary data in order to operate without an elf&lt;/li&gt; &#xA; &lt;li&gt;Emitting multiple functions per output file to speed up compilation&lt;/li&gt; &#xA; &lt;li&gt;Support for recording MIPS32 relocations to allow runtimes to relocate them for TLB mapping&lt;/li&gt; &#xA; &lt;li&gt;Ability to recompile into a dynamic language (such as Lua) to be able to load code at runtime for mod support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;This project can be built with CMake 3.20 or above and a C++ compiler that supports C++20. This repo uses git submodules, so be sure to clone recursively (&lt;code&gt;git clone --recurse-submodules&lt;/code&gt;) or initialize submodules recursively after cloning (&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;). From there, building is identical to any other cmake project, e.g. run &lt;code&gt;cmake&lt;/code&gt; in the target build folder and point it at the root of this repo, then run &lt;code&gt;cmake --build .&lt;/code&gt; from that target folder.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries Used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Decompollaborate/rabbitizer&#34;&gt;rabbitizer&lt;/a&gt; for instruction decoding/analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/serge1/ELFIO&#34;&gt;ELFIO&lt;/a&gt; for elf parsing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ToruNiina/toml11&#34;&gt;toml11&lt;/a&gt; for toml parsing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;fmtlib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>X-LANCE/AniTalker</title>
    <updated>2024-05-15T08:57:37Z</updated>
    <id>tag:github.com,2024-05-15:/X-LANCE/AniTalker</id>
    <link href="https://github.com/X-LANCE/AniTalker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AniTalker: Animate Vivid and Diverse Talking Faces through Identity-Decoupled Facial Motion Encoding&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://x-lance.github.io/AniTalker/&#34;&gt;Demo&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://arxiv.org/abs/2405.03121&#34;&gt;Paper&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/X-LANCE/AniTalker&#34;&gt;Code&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-LANCE/AniTalker/master/docs/img/generated_result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The weights and code are being organized, and we will make them public as soon as possible.&lt;/li&gt; &#xA; &lt;li&gt;Thank you for your attention. The paper is currently under peer review, and there may still be minor changes. We will update this repository after the official publication.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda create -n anitalker python==3.9.0&#xA;conda activate anitalker&#xA;conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model Zoo&lt;/h2&gt; &#xA;&lt;p&gt;Please download the checkpoint and place them into the folder &lt;code&gt;ckpts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run the demo&lt;/h2&gt; &#xA;&lt;h3&gt;Face facing forward&lt;/h3&gt; &#xA;&lt;p&gt;Keep pose_yaw, pose_pitch, pose_roll to zero.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-LANCE/AniTalker/master/assets/monalisa_facing_forward.gif&#34; alt=&#34;monalisa_facing_forward&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demo script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python ./code/demo_audio_generation.py \&#xA;    --infer_type &#39;mfcc_pose_only&#39; \&#xA;    --stage1_checkpoint_path &#39;ckpts/stage1.ckpt&#39; \&#xA;    --stage2_checkpoint_path &#39;ckpts/stage2_pose_only.ckpt&#39; \&#xA;    --test_image_path &#39;test_demos/portraits/monalisa.jpg&#39; \&#xA;    --test_audio_path &#39;test_demos/audios/english_female.wav&#39; \&#xA;    --result_path &#39;results/monalisa_case1/&#39; \&#xA;    --control_flag True \&#xA;    --seed 0 \&#xA;    --pose_yaw 0 \&#xA;    --pose_pitch 0 \&#xA;    --pose_roll 0 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adjust the orientation&lt;/h3&gt; &#xA;&lt;p&gt;Changing pose_yaw from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0.25&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-LANCE/AniTalker/master/assets/monalisa_turn_head_right.gif&#34; alt=&#34;monalisa_turn_head_right&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demo script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python ./code/demo.py \&#xA;    --infer_type &#39;mfcc_pose_only&#39; \&#xA;    --stage1_checkpoint_path &#39;ckpts/stage1.ckpt&#39; \&#xA;    --stage2_checkpoint_path &#39;ckpts/stage2_pose_only.ckpt&#39; \&#xA;    --test_image_path &#39;test_demos/portraits/monalisa.jpg&#39; \&#xA;    --test_audio_path &#39;test_demos/audios/english_female.wav&#39; \&#xA;    --result_path &#39;results/monalisa_case2/&#39; \&#xA;    --control_flag True \&#xA;    --seed 0 \&#xA;    --pose_yaw 0.25 \&#xA;    --pose_pitch 0 \&#xA;    --pose_roll 0 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Talking in Free-style&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-LANCE/AniTalker/master/assets/monalisa_free_style.gif&#34; alt=&#34;monalisa_free_style&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demo script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python ./code/demo.py \&#xA;    --infer_type &#39;mfcc_pose_only&#39; \&#xA;    --stage1_checkpoint_path &#39;ckpts/stage1.ckpt&#39; \&#xA;    --stage2_checkpoint_path &#39;ckpts/stage2_pose_only.ckpt&#39; \&#xA;    --test_image_path &#39;test_demos/portraits/monalisa.jpg&#39; \&#xA;    --test_audio_path &#39;test_demos/audios/english_female.wav&#39; \&#xA;    --result_path &#39;results/monalisa_case3/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Scripts&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/X-LANCE/AniTalker/master/MORE_SCRIPTS.md&#34;&gt;MORE_SCRIPTS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Some Advice and Questions&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;1. Using similar poses to the portrait (Best Practice)&lt;/summary&gt; To avoid potential deformation issues, it is recommended to keep the generated face angle close to the original portrait angle. For instance, if the face in the portrait is initially rotated to the left, it is advisable to use a value for yaw between -1 and 0 (-90 to 0 degrees). When the difference in angle from the portrait is significant, the generated face may appear distorted. &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;2. Utilizing algorithms to automatically extract or control using other faces&#39; angles&lt;/summary&gt; If you need to automate face control, you can employ pose extraction algorithms to achieve this, such as extracting the pose of another person to drive the portrait. The algorithms for extraction have been open-sourced and can be found at &#xA; &lt;a href=&#34;https://github.com/liutaocode/talking_face_preprocessing?tab=readme-ov-file#face-orientation-angles&#34;&gt;this link&lt;/a&gt;. &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;3. What are the differences between MFCC and Hubert features?&lt;/summary&gt; Both `MFCC` and `Hubert` are front-end features for speech, used to extract audio signals. However, `Hubert` features require more environmental dependencies and occupy a significant amount of disk space. To facilitate quick inference for everyone, we have replaced this feature with a lightweight alternative (MFCC). The rest of the code remains unchanged. We have observed that MFCC converges more easily but may be inferior in terms of expressiveness compared to Hubert. If you need to extract Hubert features, please refer to &#xA; &lt;a href=&#34;https://github.com/liutaocode/talking_face_preprocessing?tab=readme-ov-file#audio-feature-extraction&#34;&gt;this link&lt;/a&gt;. Considering the highly lifelike nature of the generated results, we currently do not plan to release the weights based on Hubert. &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{liu2024anitalker,&#xA;      title={AniTalker: Animate Vivid and Diverse Talking Faces through Identity-Decoupled Facial Motion Encoding}, &#xA;      author={Tao Liu and Feilong Chen and Shuai Fan and Chenpeng Du and Qi Chen and Xie Chen and Kai Yu},&#xA;      year={2024},&#xA;      eprint={2405.03121},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We would like to express our sincere gratitude to the numerous prior works that have laid the foundation for the development of AniTalker.&lt;/p&gt; &#xA;&lt;p&gt;Stage 1, which primarily focuses on training the motion encoder and the rendering module, heavily relies on resources from &lt;a href=&#34;https://github.com/wyhsirius/LIA&#34;&gt;LIA&lt;/a&gt;. The second stage of diffusion training is built upon &lt;a href=&#34;https://github.com/phizaz/diffae&#34;&gt;diffae&lt;/a&gt; and &lt;a href=&#34;https://espnet.github.io/espnet/_modules/espnet2/asr/encoder/conformer_encoder.html&#34;&gt;espnet&lt;/a&gt;. For the computation of mutual information loss, we implement methods from &lt;a href=&#34;https://github.com/Linear95/CLUB&#34;&gt;CLUB&lt;/a&gt; and utilize &lt;a href=&#34;https://github.com/TaoRuijie/ECAPA-TDNN&#34;&gt;AAM-softmax&lt;/a&gt; in the training of face recognition. Moreover, we leverage the pretrained Hubert model provided by &lt;a href=&#34;https://github.com/TencentGameMate/chinese_speech_pretrain&#34;&gt;TencentGameMate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, we employ &lt;a href=&#34;https://github.com/cleardusk/3DDFA_V2&#34;&gt;3DDFA_V2&lt;/a&gt; to extract head pose and &lt;a href=&#34;https://github.com/DefTruth/torchlm&#34;&gt;torchlm&lt;/a&gt; to obtain face landmarks, which are used to calculate face location and scale. We have already open-sourced the code usage for these preprocessing steps at &lt;a href=&#34;https://github.com/liutaocode/talking_face_preprocessing&#34;&gt;talking_face_preprocessing&lt;/a&gt;. We acknowledge the importance of building upon existing knowledge and are committed to contributing back to the research community by sharing our findings and code.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;This library&#39;s code is not a formal product, and we have not tested all use cases; therefore, it cannot be directly offered to end-service customers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The main purpose of making our code public is to facilitate academic demonstrations and communication. Any use of this code to spread harmful information is strictly prohibited.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please use this library in compliance with the terms specified in the license file and avoid improper use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using the code, please follow and abide by local laws and regulations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;During the use of this code, you will bear the corresponding responsibility. Our company (AISpeech Ltd.) is not responsible for the generated results.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>