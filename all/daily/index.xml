<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-26T01:31:15Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>felixrieseberg/windows95</title>
    <updated>2022-10-26T01:31:15Z</updated>
    <id>tag:github.com,2022-10-26:/felixrieseberg/windows95</id>
    <link href="https://github.com/felixrieseberg/windows95" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí©üöÄ Windows 95 in Electron. Runs on macOS, Linux, and Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;windows95&lt;/h1&gt; &#xA;&lt;p&gt;This is Windows 95, running in an &lt;a href=&#34;https://electronjs.org/&#34;&gt;Electron&lt;/a&gt; app. Yes, it&#39;s the full thing. I&#39;m sorry.&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;table class=&#34;is-fullwidth&#34;&gt;  &#xA; &lt;tbody&gt; &#xA; &lt;/tbody&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/.github/images/windows.png&#34; width=&#34;24&#34;&gt;&lt;br&gt; Windows &lt;/td&gt; &#xA;   &lt;td&gt; &lt;span&gt;32-bit&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-3.1.1-setup-ia32.exe&#34;&gt; üíø Installer &lt;/a&gt; | &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-win32-ia32-3.1.1.zip&#34;&gt; üì¶ Standalone Zip &lt;/a&gt; &lt;br&gt; &lt;span&gt;64-bit&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-3.1.1-setup-x64.exe&#34;&gt; üíø Installer &lt;/a&gt; | &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-win32-x64-3.1.1.zip&#34;&gt; üì¶ Standalone Zip &lt;/a&gt;&lt;br&gt; &lt;span&gt;ARM64&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-3.1.1-setup-arm64.exe&#34;&gt; üíø Installer &lt;/a&gt; | &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-win32-arm64-3.1.1.zip&#34;&gt; üì¶ Standalone Zip &lt;/a&gt;&lt;br&gt; &lt;span&gt; ‚ùì Don&#39;t know what kind of chip you have? Hit start, enter &#34;processor&#34; for info. &lt;/span&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/.github/images/macos.png&#34; width=&#34;24&#34;&gt;&lt;br&gt; macOS &lt;/td&gt; &#xA;   &lt;td&gt; &lt;span&gt;Intel Processor&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-darwin-x64-3.1.1.zip&#34;&gt; üì¶ Standalone Zip &lt;/a&gt;&lt;br&gt; &lt;span&gt;Apple M1 Processor&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-darwin-arm64-3.1.1.zip&#34;&gt; üì¶ Standalone Zip &lt;/a&gt;&lt;br&gt; &lt;span&gt; ‚ùì Don&#39;t know what kind of chip you have? Learn more at &lt;a href=&#34;https://support.apple.com/en-us/HT211814&#34;&gt;apple.com&lt;/a&gt;. &lt;/span&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/.github/images/linux.png&#34; width=&#34;24&#34;&gt;&lt;br&gt; Linux &lt;/td&gt; &#xA;   &lt;td&gt; &lt;span&gt;64-bit&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-3.1.1-1.x86_64.rpm&#34;&gt; üíø rpm &lt;/a&gt; | &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95_3.1.1_amd64.deb&#34;&gt; üíø deb &lt;/a&gt;&lt;br&gt; &lt;span&gt;ARM64&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-3.1.1-1.arm64.rpm&#34;&gt; üíø rpm &lt;/a&gt; | &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95_3.1.1_arm64.deb&#34;&gt; üíø deb &lt;/a&gt;&lt;br&gt; &lt;span&gt;ARMv7 (armhf)&lt;/span&gt; &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95-3.1.1-1.armv7hl.rpm&#34;&gt; üíø rpm &lt;/a&gt; | &lt;a href=&#34;https://github.com/felixrieseberg/windows95/releases/download/v3.1.1/windows95_3.1.1_armhf.deb&#34;&gt; üíø deb &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1426799/44532591-4ceb3680-a6a8-11e8-8c2c-bc29f3bfdef7.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Does it work?&lt;/h2&gt; &#xA;&lt;p&gt;Yes! Quite well, actually - on macOS, Windows, and Linux. Bear in mind that this is written entirely in JavaScript, so please adjust your expectations.&lt;/p&gt; &#xA;&lt;h2&gt;Should this have been a native app?&lt;/h2&gt; &#xA;&lt;p&gt;Absolutely.&lt;/p&gt; &#xA;&lt;h2&gt;Does it run Doom (or my other favorite game)?&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll likely be better off with an actual virtualization app, but the short answer is yes. &lt;a href=&#34;https://youtu.be/xDXqmdFxofM&#34;&gt;Thanks to @DisplacedGamers&lt;/a&gt; I can recommend that you switch to a resolution of 640x480 @ 256 colors before starting DOS games - just like in the good ol&#39; days.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;99% of the work was done over at &lt;a href=&#34;https://github.com/copy/v86/&#34;&gt;v86&lt;/a&gt; by Copy aka Fabian Hemmer and his contributors.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before you can run this from source, you&#39;ll need the disk image. It&#39;s not part of the repository, but you can grab it using the &lt;code&gt;Show Disk Image&lt;/code&gt; button from the packaged release, which does include the disk image. You can find that button in the &lt;code&gt;Modify C: Drive&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Unpack the &lt;code&gt;images&lt;/code&gt; folder into the &lt;code&gt;src&lt;/code&gt; folder, creating this layout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- /images/windows95.img&#xA;- /images/default-state.bin&#xA;- /assets/...&#xA;- /bios/...&#xA;- /docs/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve done so, run &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm start&lt;/code&gt; to run your local build.&lt;/p&gt; &#xA;&lt;p&gt;If you want to tinker with the image or make a new one, check out the &lt;a href=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/docs/qemu.md&#34;&gt;QEMU docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/HELP.md#ms-dos-seems-to-brick-the-screen&#34;&gt;MS-DOS seems to brick the screen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/HELP.md#windows-95-is-stuck-in-a-bad-state&#34;&gt;Windows 95 is stuck in a bad state&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/HELP.md#i-want-to-install-additional-apps-or-games&#34;&gt;I want to install additional apps or games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/docs/docker-instructions.md&#34;&gt;Running in Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/felixrieseberg/windows95/master/docs/docker-kubernetes-gitpod.md&#34;&gt;Running in an online VM with Kubernetes and Gitpod&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is provided for educational purposes only. It is not affiliated with and has not been approved by Microsoft.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>losvedir/transit-lang-cmp</title>
    <updated>2022-10-26T01:31:15Z</updated>
    <id>tag:github.com,2022-10-26:/losvedir/transit-lang-cmp</id>
    <link href="https://github.com/losvedir/transit-lang-cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Programming language comparison by reimplementing the same transit data app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;An informal comparison of several programming languages&lt;/h1&gt; &#xA;&lt;p&gt;This repository implements the same simple backend API in a variety of languages. It&#39;s just a personal project of mine to get a feel for the languages, and shouldn&#39;t be taken &lt;em&gt;too&lt;/em&gt; seriously. So far I&#39;ve built it in C#, Typescript (Deno), Elixir, Go, Rust, and Scala. Star the repository and/or follow me on Twitter (@losvedir) if you want updates on the project. I hope to eventually get to Swift, Kotlin, ordinary Java, Nim, and Zig. And feel free to open an issue if you want to suggest another language, or a PR if you want to implement one!&lt;/p&gt; &#xA;&lt;p&gt;All the apps read in the MBTA&#39;s GTFS data, which is the standard spec for transit data - stuff like the routes, stops, and schedules for a system. The apps look for files in an &lt;code&gt;MBTA_GTFS&lt;/code&gt; folder, but could be easily updated to work with any transit system&#39;s data. To get the MBTA data, the following commands can be run in the repo&#39;s root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; curl -o MBTA_GTFS.zip https://cdn.mbta.com/MBTA_GTFS.zip&#xA;&amp;gt; unzip -d MBTA_GTFS MBTA_GTFS.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The apps are all named some mashup of &#34;Transit&#34; and the programming language name.&lt;/p&gt; &#xA;&lt;p&gt;For now, the apps only read in the GTFS trips and stop_times data. They parse the files, which are &lt;code&gt;.txt&lt;/code&gt; but CSV, into an in-memory list of structs. I was interested to see how long this takes, as it&#39;s a bunch of IO - there are roughly 75k trips and 2 million stop_times in the MBTA data. In a future iteration, I&#39;d also like to handle &#34;services&#34;, which specify which trips run on which days.&lt;/p&gt; &#xA;&lt;p&gt;The apps set up a simple webserver that responds to &lt;code&gt;/schedules/:route&lt;/code&gt; requests, and returns a JSON response of all the &#34;schedules&#34; (trips with included stop_times) for that route. This involves a &#34;join&#34; through trips, and for some routes serializes a bunch of data. (The most, I think, is for the Red line at about 7MB of a response.) I represented it this way because even though so far I&#39;ve only implemented some of the functionality, I think it makes sense conceptually to want to look up trips by route_id and/or service_id, and to look up stop_times by trip_id and/or stop_id. So rather than just storing the data as a hashmap, I figured it was better to store the data as a big list, and have various handles into it.&lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;Currently, I&#39;m collecting two things. The first is how long it takes the apps to load the GTFS &lt;code&gt;stop_times.txt&lt;/code&gt; file into an in-memory structure (together with a hashmap &#34;index&#34; to access it more efficiently). The second is the requests per second that the webservers can field, as measured using the k6 tool.&lt;/p&gt; &#xA;&lt;h3&gt;Loading stop_times.txt&lt;/h3&gt; &#xA;&lt;p&gt;This is the time it takes for the app to load the stop_times.txt file, which is roughly 100MB and 2M records and parse it into a big vector/list/array of a structured &lt;code&gt;StopTime&lt;/code&gt; structs, together with an &#34;index&#34; on trips, which is a map from the trip ID to a list of indices into the big stop time list.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Time (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;1,390&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;2,905&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;5,986&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;842&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;565&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;931&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;~ 4,000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Webserver performance&lt;/h3&gt; &#xA;&lt;p&gt;This is tested using the &lt;a href=&#34;https://github.com/grafana/k6&#34;&gt;k6&lt;/a&gt; tool, which I installed via homebrew. There is a &lt;code&gt;loadTest.js&lt;/code&gt; script in the root of the repo, and I ran the test as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k6 run -u 50 --duration 30s loadTest.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That sets up 50 &#34;virtual users&#34; concurrently accessing the server, and the test itself has them sequentially issuing requests, of the schedules for roughly a hundred routes, some pretty hefty, some pretty small, in random order.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m not trying for a perfectly uniform test environment, but I close most of my usual apps and just run it on my laptop by itself. You shouldn&#39;t &lt;em&gt;really&lt;/em&gt; test on the same machine, but the requests are decently beefy overall that I figured the load from the test harness wouldn&#39;t disrupt the response data too badly. Here I report the requests/sec that k6 spits out, and also an eyeball at the highest RAM and CPU usage I see in ActivityMonitor just out of curiosity.&lt;/p&gt; &#xA;&lt;h4&gt;JSON heavy&lt;/h4&gt; &#xA;&lt;p&gt;These use the &lt;code&gt;loadTest.js&lt;/code&gt; file which includes about a hundred of the MBTA routes, many of which have JSON schedule data in the megabytes. Consequently, the performance here is largely a reflection of how fast JSON can be serialized. All these were with 50 concurrent virtual users.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Requests/sec&lt;/th&gt; &#xA;   &lt;th&gt;Max CPU (%)&lt;/th&gt; &#xA;   &lt;th&gt;Max RAM (MB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;1,534&lt;/td&gt; &#xA;   &lt;td&gt;654&lt;/td&gt; &#xA;   &lt;td&gt;1,750&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;286&lt;/td&gt; &#xA;   &lt;td&gt;280&lt;/td&gt; &#xA;   &lt;td&gt;400&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;388&lt;/td&gt; &#xA;   &lt;td&gt;750&lt;/td&gt; &#xA;   &lt;td&gt;3,700&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;2,715&lt;/td&gt; &#xA;   &lt;td&gt;620&lt;/td&gt; &#xA;   &lt;td&gt;1,100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;2,839&lt;/td&gt; &#xA;   &lt;td&gt;619&lt;/td&gt; &#xA;   &lt;td&gt;603&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;432&lt;/td&gt; &#xA;   &lt;td&gt;715&lt;/td&gt; &#xA;   &lt;td&gt;3,150&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Smaller responses&lt;/h4&gt; &#xA;&lt;p&gt;These use the &lt;code&gt;loadTestSmallResponses.js&lt;/code&gt; runner, and only use about a dozen routes whose schedule data is in the ~50KB to ~200KB range, so the requests are a lot higher, and less dominated by JSON encoding. Since the responses are smaller and more requests can be handled, I also tried it with different number of concurrent &#34;virtual users&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Requests per second, by language and concurrent virtual user count (higher is better).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;1 VU&lt;/th&gt; &#xA;   &lt;th&gt;10 VU&lt;/th&gt; &#xA;   &lt;th&gt;50 VU&lt;/th&gt; &#xA;   &lt;th&gt;100 VU&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;2,227&lt;/td&gt; &#xA;   &lt;td&gt;11,663&lt;/td&gt; &#xA;   &lt;td&gt;13,005&lt;/td&gt; &#xA;   &lt;td&gt;13,102&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;2,808&lt;/td&gt; &#xA;   &lt;td&gt;3,882&lt;/td&gt; &#xA;   &lt;td&gt;3,852&lt;/td&gt; &#xA;   &lt;td&gt;3,753&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;623&lt;/td&gt; &#xA;   &lt;td&gt;3,306&lt;/td&gt; &#xA;   &lt;td&gt;3,809&lt;/td&gt; &#xA;   &lt;td&gt;3,852&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;2,283&lt;/td&gt; &#xA;   &lt;td&gt;10,551&lt;/td&gt; &#xA;   &lt;td&gt;11,078&lt;/td&gt; &#xA;   &lt;td&gt;11,091&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;3,501&lt;/td&gt; &#xA;   &lt;td&gt;20,496&lt;/td&gt; &#xA;   &lt;td&gt;22,437&lt;/td&gt; &#xA;   &lt;td&gt;22,283&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;705&lt;/td&gt; &#xA;   &lt;td&gt;4,204&lt;/td&gt; &#xA;   &lt;td&gt;4,289&lt;/td&gt; &#xA;   &lt;td&gt;4,332&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Response times in milliseconds: median / p95 / max, by language and concurrent virtual user count (lower is better):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;1 VU&lt;/th&gt; &#xA;   &lt;th&gt;10 VU&lt;/th&gt; &#xA;   &lt;th&gt;50 VU&lt;/th&gt; &#xA;   &lt;th&gt;100 VU&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;.3 / 1 / 88&lt;/td&gt; &#xA;   &lt;td&gt;.6 / 2 / 27&lt;/td&gt; &#xA;   &lt;td&gt;2 / 12 / 138&lt;/td&gt; &#xA;   &lt;td&gt;6 / 17 / 75&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;.3 / .8 / 5&lt;/td&gt; &#xA;   &lt;td&gt;2 / 4 / 254&lt;/td&gt; &#xA;   &lt;td&gt;13 / 16 / 218&lt;/td&gt; &#xA;   &lt;td&gt;26 / 33 / 265&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;1 / 4 / 11&lt;/td&gt; &#xA;   &lt;td&gt;2 / 7 / 22&lt;/td&gt; &#xA;   &lt;td&gt;13 / 23 / 58&lt;/td&gt; &#xA;   &lt;td&gt;24 / 47 / 132&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;.3 / 1 / 19&lt;/td&gt; &#xA;   &lt;td&gt;.6 / 2 / 36&lt;/td&gt; &#xA;   &lt;td&gt;3 / 15 / 111&lt;/td&gt; &#xA;   &lt;td&gt;6 / 29 / 140&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;.2 / .6 / 3&lt;/td&gt; &#xA;   &lt;td&gt;.4 / 1 / 9&lt;/td&gt; &#xA;   &lt;td&gt;2 / 4 / 36&lt;/td&gt; &#xA;   &lt;td&gt;4 / 9 / 85&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;1 / 3 / 109&lt;/td&gt; &#xA;   &lt;td&gt;2 / 5 / 129&lt;/td&gt; &#xA;   &lt;td&gt;3 / 58 / 394&lt;/td&gt; &#xA;   &lt;td&gt;10 / 109 / 587&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Searching the data&lt;/h3&gt; &#xA;&lt;p&gt;This metric I collected from a previous commit, and involved simply counting the number of StopTimes for the Red line. I removed this code in favor of the webserver approach, but am keeping the stats here for posterity.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Time (ms)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;1.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;3.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;2.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Thoughts&lt;/h2&gt; &#xA;&lt;p&gt;Here are some scattered thoughts while I went about writing this.&lt;/p&gt; &#xA;&lt;h3&gt;C#&lt;/h3&gt; &#xA;&lt;p&gt;Where to begin! First, I went into this very confused at just a jargon level of what all the different pieces of the Microsoft ecosystem are. C# is the language and it runs on the &#34;.NET CLR&#34;. The build/run tool is &lt;code&gt;dotnet&lt;/code&gt; so that&#39;s kind of the main term, but I also saw &#34;CLR&#34; thrown around. I ended up working with &#34;.NET 6.0&#34;, which is what all the guides and docs called it, and which was cross platform. I didn&#39;t see &#34;.NET Core&#34; anywhere like I was expecting, which I believe is what &lt;em&gt;used&lt;/em&gt; to be the explicitly cross-platform piece? Amusingly, I spent a fair bit of time trying to look up the standard &#34;.NET web framework&#34; before eventually finally realizing that that&#39;s what ASP.NET is. So that was useful to connect for me, since I&#39;ve seen &#34;ASP&#34; a lot but had had no idea how it fit into the picture.&lt;/p&gt; &#xA;&lt;p&gt;I wasn&#39;t entirely sure I&#39;d even be able to complete this project. I wasn&#39;t sure how truly cross platform .NET was, in reality, though development went off without a hitch! I&#39;m going to say, yes, at least for my simple use case of using the standard library plus ASP.NET, it&#39;s truly cross platform. I didn&#39;t try bringing in any 3rd party libraries, and I imagine there could be some incompatibilities there. In the future I&#39;d like to explore F#, which is a language more inline with my sensibilities, but I wanted to try more &#34;vanilla .NET&#34; first. The developer experience in VSCode was great, the language server worked well, and the code formatter worked (though I despise the convention of opening curly braces on the next line).&lt;/p&gt; &#xA;&lt;p&gt;As for the language, C# is... all right, I guess. It kind of reminds me of Dart; it works fine, the tooling is good, it&#39;s verbose and very object oriented, but it doesn&#39;t really spark joy. The &#34;billion dollar mistake&#34; is important to me, and while C# has non-nullability sugar in its typesystem (i.e. with &lt;code&gt;?&lt;/code&gt; after a number of types), the type system wasn&#39;t as rigorous as I was maybe hoping. At one point I had a bug because I did a &lt;code&gt;stopWatch.Elapsed / 1000&lt;/code&gt; by accident instead of &lt;code&gt;stopWatch.ElapsedTicks / 1000&lt;/code&gt;. The former is a &lt;code&gt;TimeSpan&lt;/code&gt; struct instead of a &lt;code&gt;long&lt;/code&gt; like &lt;code&gt;ElapsedTicks&lt;/code&gt;, so intuitively it feels like I shouldn&#39;t be able to divide it, though it did a best effort and did &lt;em&gt;something&lt;/em&gt; to it, though I&#39;m not quite sure what.&lt;/p&gt; &#xA;&lt;p&gt;ASP.NET has a lot of conventions and magic. I don&#39;t personally love all that magic but if you&#39;re experienced with it, I could see how it would make designing web apps pretty quick.&lt;/p&gt; &#xA;&lt;p&gt;But, wow, I was incredibly surprised and impressed with the performance! It was comparable to my unoptimized Rust (i.e.: treating Rust like a high level language with lots of clones)!&lt;/p&gt; &#xA;&lt;p&gt;All in all, I was pleasantly surprised and pretty impressed with dotnet and C#.&lt;/p&gt; &#xA;&lt;h3&gt;Deno&lt;/h3&gt; &#xA;&lt;p&gt;Deno is pretty neat. I really want it to succeed. I really like TypeScript, and Deno almost gives me what I want: pretending TypeScript is a full-fledged language, with a standard library, that I can build non-frontend apps with. Let&#39;s just sweep all that JS-heritage and V8 stuff under the rug...&lt;/p&gt; &#xA;&lt;p&gt;I wish the standard library weren&#39;t at URLs like all the other packages. It would be great if the &lt;code&gt;deno&lt;/code&gt; tool you downloaded also included the standard library, and you could just reference it without any network stuff. The documentation is also pretty cryptic (and I think autogenerated?).&lt;/p&gt; &#xA;&lt;p&gt;The package management stuff I haven&#39;t quite wrapped my head around. Obviously, you shouldn&#39;t be downloading stuff willy-nilly, but I think with some combination of the conventional deps.ts, import_map, specifying a lock file, the vendor command, --no-remote, etc, I feel like I have all the pieces to kind of build up a reasonable approach, but I don&#39;t quite understand it all just yet.&lt;/p&gt; &#xA;&lt;p&gt;Personally, the &lt;code&gt;--allow-read&lt;/code&gt;, &lt;code&gt;--allow-net&lt;/code&gt;, etc stuff feels a little gimmicky to me. I don&#39;t think other languages really have that, and I&#39;m not sure what the threat model is here. I control the backend code, and if I&#39;m worried about my code doing unexpected things like that I have larger issues. I just run with &lt;code&gt;-A&lt;/code&gt; all the time.&lt;/p&gt; &#xA;&lt;p&gt;The performance was great when looking at a single virtual user, but sort of topped out there. I don&#39;t know if it just can&#39;t handle async and multiple cores very well, or if I was doing something wrong.&lt;/p&gt; &#xA;&lt;h3&gt;Elixir&lt;/h3&gt; &#xA;&lt;p&gt;Elixir is my primary language, so I threw this one in to compare its performance to see what I could be missing. I like Elixir the language and all its nice OTP goodies, but it&#39;s known to be a little slow, so I was wondering how much performance I&#39;m leaving on the table.&lt;/p&gt; &#xA;&lt;p&gt;Normally, my first thought for some state in Elixir would be an Agent or custom GenServer, but that would funnel all requests to the one data source, which would respond sequentially, and I thought under load that could be a bottleneck. So I opted to put the data in ETS, with read concurrency enabled.&lt;/p&gt; &#xA;&lt;p&gt;ETS stores data as a set (in this case) of Erlang tuples, and wanting to follow the conventions of the other apps, I decided to add an extra &#34;primary key&#34; integer to each tuple, for the purpose of the &#34;indexes&#34;. The other languages allow you to simply index into the underlying list, but that&#39;s not really possible with the way ETS stores data.&lt;/p&gt; &#xA;&lt;p&gt;This approach works fine for GTFS static data which is loaded on app start-up, but I&#39;m not entirely sure yet how I will handle when I need to &lt;em&gt;update&lt;/em&gt; data, if I extend the apps to poll the real-time vehicle positions and predictions data. In that scenario, I&#39;ve had issues before with how to handle locking and atomic updates to ETS data. Most likely it would be something like create a whole new ETS table in the background and then swap it out for this one after it&#39;s ready.&lt;/p&gt; &#xA;&lt;p&gt;I used Phoenix here since that&#39;s pretty much the standard in Elixir, though it might be a bit heavier weight than the other apps. But my understanding is that it&#39;s mostly just plugs that get compiled in, so it&#39;s pretty lightweight in how much it actually affects performance vs the minimal possible thing I could do.&lt;/p&gt; &#xA;&lt;p&gt;The final performance results were unfortunately low, an order of magnitude worse than Rust, and a little behind Deno.&lt;/p&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;p&gt;I was super happy to get the work done so far using just the standard library. And the performance was solid! In the JSON-heavy benchmark it actually is the fastest of all the languages, though in the lighter-response benchmark it&#39;s more where I expected: fast, but not quite at rust levels.&lt;/p&gt; &#xA;&lt;p&gt;That said, contrary to my expectations, I found the documentation not great. While the language reference and tour was pretty good and useful (I kept referring to the tour), the library documentation on &lt;a href=&#34;https://pkg.go.dev/&#34;&gt;pkg.go.dev&lt;/a&gt; was fairly... bad.&lt;/p&gt; &#xA;&lt;p&gt;It took me longer than I&#39;d like to admit to figure out how to get a dang &lt;code&gt;io.Reader&lt;/code&gt;, which is what the CSV parsing package takes. I had hoped &lt;a href=&#34;https://pkg.go.dev/search?q=io.reader&#34;&gt;searching their docs&lt;/a&gt; for &lt;code&gt;io.Reader&lt;/code&gt; would yield a package or function that at a glance would (1) read from the filesystem and (2) implement the &lt;code&gt;io.Reader&lt;/code&gt; interface, but the top result was simply the definition of the interface, and the rest of the results were random GitHub repos. And clicking through to the &lt;code&gt;io.Reader&lt;/code&gt; definition didn&#39;t provide links to anything that implements it. Eventually I gave up and went the other direction, trying to figure out how to open and read files. I finally found &lt;code&gt;os.Open()&lt;/code&gt; (though it was my third try after poking around in &lt;code&gt;io&lt;/code&gt; and &lt;code&gt;io.fs&lt;/code&gt;). I saw it returns a &lt;code&gt;File&lt;/code&gt;, which then sent me on a bit of a goose change on how to turn &lt;em&gt;it&lt;/em&gt; into an &lt;code&gt;io.Reader&lt;/code&gt; before realizing that although it&#39;s not mentioned in the docs, the type &lt;em&gt;does&lt;/em&gt; implement &lt;code&gt;Read&lt;/code&gt; and so it &lt;em&gt;is&lt;/em&gt; already an &lt;code&gt;io.Reader&lt;/code&gt;! It was all sort of magical to me, and kind of odd. Now I realize that in theory I could have searched pkg.go.dev for &#34;Read&#34; to find types that implement it, and hence satisfy &lt;code&gt;io.Reader&lt;/code&gt; and would get me to &lt;code&gt;File&lt;/code&gt; and &lt;code&gt;os.Open()&lt;/code&gt; but of course that doesn&#39;t work because the search function seems to be hot garbage.&lt;/p&gt; &#xA;&lt;p&gt;All that said, actually programming in Go was pretty nice. VSCode support was solid and the build/run cycle was fast! The final result ended up being pretty quick, too. It doesn&#39;t have the type richness I appreciate, but I didn&#39;t mind it overall.&lt;/p&gt; &#xA;&lt;p&gt;I started out looking for a &#34;web framework&#34; since that was my expectation of how this works, but it seemed like there was a reasonable consensus that using simply the standard library was a good place to start. That was nice, and helped me avoid the analysis paralysis and reviewing benchmarks and HN and reddit, etc, to decide &lt;em&gt;which&lt;/em&gt; framework to use.&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;This one shocked me in a good way! I was expecting a lot more low level fiddlyness, and was prepared to simply allocate and clone and do all the tricks I&#39;ve read about to not worry about eking out the most performance possible. After all, I&#39;m comparing against higher level interpreted or GC languages, and am interested in Rust more for its type system than needing to program at a system level.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve had some experience playing with Rust in the past, so it wasn&#39;t brand new to me, but it has been some time so I was expecting to be a lot more, uh... rusty. All that said, with my initial approach, I just did a lot of String cloning and got performance comparable to the best of the other languages (dotnet or Go, depending on the benchmark). But then after a bit of help from reddit, I removed some unnecessary String allocations, using &lt;code&gt;&amp;amp;str&lt;/code&gt; and dreaded (to me) lifetime markers, so that the response structs just referenced the strings allocated in the actual data, and the performance jumped dramatically, to be far and away the most performant language.&lt;/p&gt; &#xA;&lt;p&gt;Also, I don&#39;t know how much of this is because Rust is special or because BurntSushi is a national treasure and his CSV library is impeccably constructed and documented.&lt;/p&gt; &#xA;&lt;p&gt;I also was impressed and amused that I got compiler warnings that my Struct had unnecessary fields (I haven&#39;t used the Trips&#39; service_ids or the StopTimes&#39; arrival and departure times yet), which wasn&#39;t raised for any of the other languages.&lt;/p&gt; &#xA;&lt;p&gt;For the web server piece, I spent some time trying to decide which framework to use. When I last looked at Rust, &lt;code&gt;rocket&lt;/code&gt; was all the rage, but it seems to have fallen off the radar almost completely these days! That was mildly concerning. It seems like &lt;code&gt;actix&lt;/code&gt; has taken over as nearly the &#34;default&#34;, except there&#39;s a new-ish one called &lt;code&gt;axum&lt;/code&gt; that&#39;s quite popular. Being a part of the official tokio project, and guessing that tokio has staying power, I went with &lt;code&gt;axum&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It was a little tricky to get working... I felt like I was playing type tetris a bit to get my app to compile, and was trying to mindlessly copy documentation without fully understanding it. I&#39;ve never quite understood the &lt;code&gt;#[...]&lt;/code&gt; syntax, and so annotating my &lt;code&gt;main&lt;/code&gt; function with &lt;code&gt;#[tokio::main]&lt;/code&gt; is still black magic to me. I also got tripped up for a while before realizing that I needed to put &lt;code&gt;futures&lt;/code&gt; as a dependency in my &lt;code&gt;Cargo.toml&lt;/code&gt;. That wasn&#39;t in the axum docs but I found it in their examples, though it was quite a wild guess that &lt;em&gt;that&lt;/em&gt; was the thing that allowed the example to compile when mine wasn&#39;t. I drew on some latent knowledge I had buried deep down in there that &lt;code&gt;futures&lt;/code&gt; was what the &lt;code&gt;async&lt;/code&gt; ecosystem was built on, and it was a crate rather than part of the language, but I had thought it was just a temporary thing for experimentation by the rust folks back in the day.&lt;/p&gt; &#xA;&lt;p&gt;I also ran into some issues trying to get my shared state to work. My handler was failing to typecheck and the compiler error was not helpful. The axum docs actually mention this is a problem and that there&#39;s an &lt;code&gt;axum-macros&lt;/code&gt; crate that can help, though. Some of this was my lack of understanding exactly how &lt;code&gt;Arc&lt;/code&gt; works and how to safely have shared state across async requests. In the end, I appreciate that the flexibility is there; right now I just have an &lt;code&gt;Arc&lt;/code&gt; so that all my handlers can read the data I prepare up front, but I could see how I could wrap it in an &lt;code&gt;RwLock&lt;/code&gt;, for example, to also allow safe updates in the future. In general, I&#39;m not sure how I feel about Axum&#39;s magical handler/extractor setup, as I still don&#39;t really know how it works.&lt;/p&gt; &#xA;&lt;h3&gt;Scala&lt;/h3&gt; &#xA;&lt;p&gt;Of all the languages I played with here, Scala is the only one I disliked.&lt;/p&gt; &#xA;&lt;p&gt;Part of the reason was timing: it seems an ecosystem in flux at the moment. It didn&#39;t work with my JDK 19 out of the box, so I had to downgrade to JDK 17 for it. I sort of blindly followed the scala-lang.org site and went through the getting started guide, for Scala 3, and then building the first half of my app in Scala 3, before realizing that Play (the only Scala webframework I&#39;d heard of) and Scalatra (the other web framework mentioned in the Getting Started &#34;ecosystem&#34; section of the guide) don&#39;t work on Scala 3 yet. I briefly tried updating my code to Scala 2 but I wasn&#39;t super sure what the differences were, and I didn&#39;t really want to learn Scala 2 if everything is moving to Scala 3 (eventually) anyway. Beyond that I got mixed messages in whether to use &lt;code&gt;sbt&lt;/code&gt; and &lt;code&gt;mill&lt;/code&gt; as a build tool.&lt;/p&gt; &#xA;&lt;p&gt;Beyond that, there seems to be a schism in the community between people who love super sophisticated types (think Haskell style Applicative Functors or whatever) and people who want a nicer Java (these days those people might be moving to Kotlin).&lt;/p&gt; &#xA;&lt;p&gt;In trying to find a Scala 3 compatible web framework, I saw a lot of people saying &lt;code&gt;http4s&lt;/code&gt; is the new standard, so I tried that one first. But after generating the skeleton for the app, and trying to add my own routes I gave up. The &#34;router&#34; part is unwieldy and complicated, though I think I was able to cargo-cult a route of my own. Here&#39;s the given example on how to match against &lt;code&gt;/hello/:name&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def helloWorldRoutes[F[_]: Sync](H: HelloWorld[F]): HttpRoutes[F] =&#xA;  val dsl = new Http4sDsl[F]{}&#xA;  import dsl._&#xA;  HttpRoutes.of[F] {&#xA;    case GET -&amp;gt; Root / &#34;hello&#34; / name =&amp;gt;&#xA;      for {&#xA;        greeting &amp;lt;- H.hello(HelloWorld.Name(name))&#xA;        resp &amp;lt;- Ok(greeting)&#xA;      } yield resp&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But then when it comes to implementing the code that actually returns data there, I got totally flummoxed. Here&#39;s the corresponding &#34;HelloWorld&#34; code for the above route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import cats.Applicative&#xA;import cats.implicits._&#xA;import io.circe.{Encoder, Json}&#xA;import org.http4s.EntityEncoder&#xA;import org.http4s.circe._&#xA;&#xA;trait HelloWorld[F[_]]:&#xA;  def hello(n: HelloWorld.Name): F[HelloWorld.Greeting]&#xA;&#xA;object HelloWorld:&#xA;  def apply[F[_]](using ev: HelloWorld[F]): HelloWorld[F] = ev&#xA;&#xA;  final case class Name(name: String) extends AnyVal&#xA;  /**&#xA;    * More generally you will want to decouple your edge representations from&#xA;    * your internal data structures, however this shows how you can&#xA;    * create encoders for your data.&#xA;    **/&#xA;  final case class Greeting(greeting: String) extends AnyVal&#xA;  object Greeting:&#xA;    given Encoder[Greeting] = new Encoder[Greeting]:&#xA;      final def apply(a: Greeting): Json = Json.obj(&#xA;        (&#34;message&#34;, Json.fromString(a.greeting)),&#xA;      )&#xA;&#xA;    given [F[_]]: EntityEncoder[F, Greeting] =&#xA;      jsonEncoderOf[F, Greeting]&#xA;&#xA;  def impl[F[_]: Applicative]: HelloWorld[F] = new HelloWorld[F]:&#xA;    def hello(n: HelloWorld.Name): F[HelloWorld.Greeting] =&#xA;        Greeting(&#34;Hello, &#34; + n.name).pure[F]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s a &lt;em&gt;lot&lt;/em&gt; of both syntax and semantics to grok. &lt;code&gt;trait&lt;/code&gt; is an interface, &lt;code&gt;object&lt;/code&gt; is a singleton class, &lt;code&gt;case class&lt;/code&gt; is kind of a data record. I don&#39;t know what &lt;code&gt;given&lt;/code&gt; or &lt;code&gt;using&lt;/code&gt; are. I recognize &lt;code&gt;pure&lt;/code&gt; as related to &lt;code&gt;Applicative&lt;/code&gt; but that&#39;s a whole complicated library/type concern distinct from Scala-the-language. I don&#39;t really know why the &lt;code&gt;def impl&lt;/code&gt; does a &lt;code&gt;new HelloWorld&lt;/code&gt; with a nested &lt;code&gt;def hello&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the end, I moved on to trying the framework Cask, which&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;aims to bring simplicity, flexibility and ease-of-use to Scala webservers, avoiding cryptic DSLs or complicated asynchrony&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And in the end, I got something that worked! So thanks author of Cask. Cask also used &lt;code&gt;mill&lt;/code&gt; rather than &lt;code&gt;sbt&lt;/code&gt;. The latter seems more &#34;official&#34;, or at least is the tool recommended on scala-lang.org, but oh BOY is it slow! &lt;code&gt;mill&lt;/code&gt; was nicer for me to work with.&lt;/p&gt; &#xA;&lt;p&gt;The performance was not super great, and it used the most memory by far. I don&#39;t know if this is because Cask is not performance-focused, but then I couldn&#39;t get anything else to work... I liked Scala 3 well enough before dealing with the ecosystem, but I think in the future I&#39;m going to avoid Scala until it finishes its 2 to 3 transition, and only if the non-typenerds win.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite&lt;/h3&gt; &#xA;&lt;p&gt;Not really an apples-to-apples comparison but I was curious about the order of magnitude performance characteristics of SQLite here.&lt;/p&gt; &#xA;&lt;p&gt;For importing &lt;code&gt;stop_times&lt;/code&gt; I counted (yes, so take that time with a grain of salt) while running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; .mode csv&#xA;sqlite&amp;gt; .import MBTA_GTFS/stop_times.txt stop_times&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for scanning the data for the number of Red line schedules, I did:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; create index stop_times_by_trip on stop_times(trip_id);&#xA;sqlite&amp;gt; create index trips_by_route on trips(route_id);&#xA;sqlite&amp;gt; .timer on&#xA;sqlite&amp;gt; select count(*) from stop_times where trip_id in (select trip_id from trips where route_id = &#34;Red&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can&#39;t beat the convenience! It&#39;s an order of magnitude slower than the apps which keep everything in memory, but of course the tradeoff then is it uses much less memory! And while a given read is slow(-ish), I understand that a lot of it is waiting on the filesystem, and that concurrent reads should allow plenty of throughput.&lt;/p&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;p&gt;Notes from in-progress work on Swift.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Had to download many-GB Xcode, which had a host of issues (had to login)&lt;/li&gt; &#xA; &lt;li&gt;did &lt;code&gt;swift init&lt;/code&gt; and then &lt;code&gt;swift run&lt;/code&gt; and it crashed. Found a discussion online where &lt;code&gt;sudo xcode-select --reset&lt;/code&gt; was recommended and that got the HelloWorld to run.&lt;/li&gt; &#xA; &lt;li&gt;No code formatter?&lt;/li&gt; &#xA; &lt;li&gt;Couldn&#39;t figure out how to read the relative MBTA_GTFS folder from my project in xcode, but running &lt;code&gt;swift run&lt;/code&gt; from the directory worked. (Though I had to &lt;code&gt;swift package init&lt;/code&gt; which xcode didn&#39;t need.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Textualize/textual</title>
    <updated>2022-10-26T01:31:15Z</updated>
    <id>tag:github.com,2022-10-26:/Textualize/textual</id>
    <link href="https://github.com/Textualize/textual" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Textual is a TUI (Text User Interface) framework for Python inspired by modern web development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Textual&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png&#34; alt=&#34;Textual splash image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Textual is a Python framework for creating interactive applications that run in your terminal.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Demonstration &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;A quick run through of some Textual features.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197355913-65d3c125-493d-4c05-a590-5311f16c40ff.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197355913-65d3c125-493d-4c05-a590-5311f16c40ff.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Textual adds interactivity to &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;Rich&lt;/a&gt; with a Python API inspired by modern web development.&lt;/p&gt; &#xA;&lt;p&gt;On modern terminal software (installed by default on most systems), Textual apps can use &lt;strong&gt;16.7 million&lt;/strong&gt; colors with mouse support and smooth flicker-free animation. A powerful layout engine and re-usable components makes it possible to build apps that rival the desktop and web experience.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Textual runs on Linux, macOS, and Windows. Textual requires Python 3.7 or above.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install Textual via pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install &#34;textual[dev]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The addition of &lt;code&gt;[dev]&lt;/code&gt; installs Textual development tools. See the &lt;a href=&#34;https://textual.textualize.io/getting_started/&#34;&gt;docs&lt;/a&gt; if you need help getting started.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to see a little of what Textual can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m textual&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/demo.png&#34; alt=&#34;Textual demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;http://textual.textualize.io/&#34;&gt;Textual documentation&lt;/a&gt; to start building!&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The Textual repository comes with a number of examples you can experiment with or use as a template for your own projects.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Code browser &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the &lt;a href=&#34;https://github.com/Textualize/textual/raw/main/examples/code_browser.py&#34;&gt;code_browser.py&lt;/a&gt; example which clocks in at 61 lines (&lt;em&gt;including&lt;/em&gt; docstrings and blank lines).&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197188237-88d3f7e4-4e5f-40b5-b996-c47b19ee2f49.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197188237-88d3f7e4-4e5f-40b5-b996-c47b19ee2f49.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üì∑ Calculator &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is &lt;a href=&#34;https://github.com/Textualize/textual/raw/main/examples/calculator.py&#34;&gt;calculator.py&lt;/a&gt; which demonstrates Textual grid layouts.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/calculator.png&#34; alt=&#34;calculator screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Stopwatch &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the Stopwatch example from the &lt;a href=&#34;https://textual.textualize.io/tutorial/&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197360718-0c834ef5-6285-4d37-85cf-23eed4aa56c5.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197360718-0c834ef5-6285-4d37-85cf-23eed4aa56c5.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Reference commands&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;textual&lt;/code&gt; command has a few sub-commands to preview Textual styles.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Easing reference &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the &lt;em&gt;easing&lt;/em&gt; reference which demonstrates the easing parameter on animation, with both movement and opacity. You can run it with the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;textual easing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/196157100-352852a6-2b09-4dc8-a888-55b53570aff9.mov&#34;&gt;https://user-images.githubusercontent.com/554369/196157100-352852a6-2b09-4dc8-a888-55b53570aff9.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Borders reference &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is the borders reference which demonstrates some of the borders styles in Textual. You can run it with the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;textual borders&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/196158235-4b45fb78-053d-4fd5-b285-e09b4f1c67a8.mov&#34;&gt;https://user-images.githubusercontent.com/554369/196158235-4b45fb78-053d-4fd5-b285-e09b4f1c67a8.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; üé¨ Colors reference &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;This is a reference for Textual&#39;s color design system.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;textual colors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/554369/197357417-2d407aac-8969-44d3-8250-eea45df79d57.mov&#34;&gt;https://user-images.githubusercontent.com/554369/197357417-2d407aac-8969-44d3-8250-eea45df79d57.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>