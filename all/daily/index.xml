<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-05T01:34:13Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>freeCodeCamp/freeCodeCamp</title>
    <updated>2022-10-05T01:34:13Z</updated>
    <id>tag:github.com,2022-10-05:/freeCodeCamp/freeCodeCamp</id>
    <link href="https://github.com/freeCodeCamp/freeCodeCamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;freeCodeCamp.org&#39;s open-source codebase and curriculum. Learn to code for free.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.freecodecamp.org/&#34;&gt;&lt;img src=&#34;https://s3.amazonaws.com/freecodecamp/wide-social-banner.png&#34; alt=&#34;freeCodeCamp Social Banner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34; alt=&#34;Pull Requests Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.firsttimersonly.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/first--timers--only-friendly-blue.svg?sanitize=true&#34; alt=&#34;first-timers-only Friendly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/freecodecamp/freecodecamp&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/freecodecamp/freecodecamp/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/from-referrer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/setup-automated-blue?logo=gitpod&#34; alt=&#34;Setup Automated&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/PRyKn3Vbay&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/692816967895220344&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;freeCodeCamp.org&#39;s open-source codebase and curriculum&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.freecodecamp.org&#34;&gt;freeCodeCamp.org&lt;/a&gt; is a friendly community where you can learn to code for free. It is run by a &lt;a href=&#34;https://www.freecodecamp.org/donate&#34;&gt;donor-supported 501(c)(3) nonprofit&lt;/a&gt; to help millions of busy adults transition into tech. Our community has already helped more than 40,000 people get their first developer job.&lt;/p&gt; &#xA;&lt;p&gt;Our full-stack web development and machine learning curriculum is completely free and self-paced. We have thousands of interactive coding challenges to help you expand your skills.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#certifications&#34;&gt;Certifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#the-learning-platform&#34;&gt;The Learning Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#reporting-bugs-and-issues&#34;&gt;Reporting Bugs and Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#reporting-security-issues-and-responsible-disclosure&#34;&gt;Reporting Security Issues and Responsible Disclosure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#platform-build-and-deployment-status&#34;&gt;Platform, Build and Deployment Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Certifications&lt;/h3&gt; &#xA;&lt;p&gt;freeCodeCamp.org offers several free developer certifications. Each of these certifications involves building 5 required web app projects, along with hundreds of optional coding challenges to help you prepare for those projects. We estimate that each certification will take a beginner programmer around 300 hours to earn.&lt;/p&gt; &#xA;&lt;p&gt;Each of these 50 projects in the freeCodeCamp.org curriculum has its own agile user stories and automated tests. These help you build up your project incrementally and ensure you&#39;ve fulfilled all the user stories before you submit it.&lt;/p&gt; &#xA;&lt;p&gt;You can pull in these test suites through &lt;a href=&#34;https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js&#34;&gt;freeCodeCamp&#39;s CDN&lt;/a&gt;. This means you can build these projects on websites like CodePen and Replit - or even on your local computer&#39;s development environment.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve earned a certification, you will always have it. You will always be able to link to it from your LinkedIn or resume. And when your prospective employers or freelance clients click that link, they&#39;ll see a verified certification specific to you.&lt;/p&gt; &#xA;&lt;p&gt;The one exception to this is if we discover violations of our &lt;a href=&#34;https://www.freecodecamp.org/news/academic-honesty-policy/&#34;&gt;Academic Honesty Policy&lt;/a&gt;. When we catch people unambiguously plagiarizing (submitting other people&#39;s code or projects as their own without citation), we do what all rigorous institutions of learning should do - we revoke their certifications and ban those people.&lt;/p&gt; &#xA;&lt;p&gt;Here are our ten core certifications:&lt;/p&gt; &#xA;&lt;h4&gt;1. &lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/&#34;&gt;Responsive Web Design Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-html-by-building-a-cat-photo-app&#34;&gt;Learn HTML by Building a Cat Photo App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-basic-css-by-building-a-cafe-menu&#34;&gt;Learn Basic CSS by Building a Cafe Menu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-colors-by-building-a-set-of-colored-markers&#34;&gt;Learn CSS Colors by Building a Set of Colored Markers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-html-forms-by-building-a-registration-form&#34;&gt;Learn HTML Forms by Building a Registration Form&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-the-css-box-model-by-building-a-rothko-painting&#34;&gt;Learn the CSS Box Model by Building a Rothko Painting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-flexbox-by-building-a-photo-gallery&#34;&gt;Learn CSS Flexbox by Building a Photo Gallery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-typography-by-building-a-nutrition-label&#34;&gt;Learn Typography by Building a Nutrition Label&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-accessibility-by-building-a-quiz&#34;&gt;Learn Accessibility by Building a Quiz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-more-about-css-pseudo-selectors-by-building-a-balance-sheet&#34;&gt;Learn More About CSS Pseudo Selectors By Building A Balance Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-intermediate-css-by-building-a-picasso-painting&#34;&gt;Learn Intermediate CSS by Building a Picasso Painting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-responsive-web-design-by-building-a-piano&#34;&gt;Learn Responsive Web Design by Building a Piano&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-variables-by-building-a-city-skyline&#34;&gt;Learn CSS Variables by Building a City Skyline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-grid-by-building-a-magazine&#34;&gt;Learn CSS Grid by Building a Magazine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-transforms-by-building-a-penguin&#34;&gt;Learn CSS Transforms by Building a Penguin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/#learn-css-animation-by-building-a-ferris-wheel&#34;&gt;Learn CSS Animations by Building a Ferris Wheel&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-survey-form-project/build-a-survey-form&#34;&gt;Survey Form&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-tribute-page-project/build-a-tribute-page&#34;&gt;Tribute Page&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-technical-documentation-page-project/build-a-technical-documentation-page&#34;&gt;Technical Documentation Page&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-product-landing-page-project/build-a-product-landing-page&#34;&gt;Product Landing Page&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/2022/responsive-web-design/build-a-personal-portfolio-webpage-project/build-a-personal-portfolio-webpage&#34;&gt;Personal Portfolio Webpage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. &lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/&#34;&gt;JavaScript Algorithms and Data Structures Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-javascript&#34;&gt;Basic JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#es6&#34;&gt;ES6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#regular-expressions&#34;&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-data-structures&#34;&gt;Basic Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-algorithm-scripting&#34;&gt;Basic Algorithm Scripting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#object-oriented-programming&#34;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#functional-programming&#34;&gt;Functional Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#intermediate-algorithm-scripting&#34;&gt;Intermediate Algorithm Scripting&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/palindrome-checker&#34;&gt;Palindrome Checker&lt;/a&gt;,&lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter&#34;&gt; Roman Numeral Converter&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/caesars-cipher&#34;&gt;Caesar&#39;s Cipher&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/telephone-number-validator&#34;&gt;Telephone Number Validator&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/cash-register&#34;&gt;Cash Register&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3. &lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/&#34;&gt;Front End Libraries Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/#bootstrap&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/#jquery&#34;&gt;jQuery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/#sass&#34;&gt;Sass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/#react&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/#redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/#react-and-redux&#34;&gt;React and Redux&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-random-quote-machine&#34;&gt;Random Quote Machine&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-markdown-previewer&#34;&gt;Markdown Previewer&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-drum-machine&#34;&gt;Drum Machine&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-javascript-calculator&#34;&gt;JavaScript Calculator&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/front-end-development-libraries/front-end-development-libraries-projects/build-a-25--5-clock&#34;&gt;25 + 5 Clock&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4. &lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/&#34;&gt;Data Visualization Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/#data-visualization-with-d3&#34;&gt;Data Visualization with D3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/#json-apis-and-ajax&#34;&gt;JSON APIs and Ajax&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-bar-chart&#34;&gt;Bar Chart&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-scatterplot-graph&#34;&gt;Scatterplot Graph&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-heat-map&#34;&gt;Heat Map&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-choropleth-map&#34;&gt;Choropleth Map&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-treemap-diagram&#34;&gt;Treemap Diagram&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;5. &lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/&#34;&gt;APIs and Microservices Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/#managing-packages-with-npm&#34;&gt;Managing Packages with Npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/#basic-node-and-express&#34;&gt;Basic Node and Express&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/#mongodb-and-mongoose&#34;&gt;MongoDB and Mongoose&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/timestamp-microservice&#34;&gt;Timestamp Microservice&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/request-header-parser-microservice&#34;&gt;Request Header Parser&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice&#34;&gt;URL Shortener&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker&#34;&gt;Exercise Tracker&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/file-metadata-microservice&#34;&gt;File Metadata Microservice&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;6. &lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/&#34;&gt;Quality Assurance Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/#quality-assurance-and-testing-with-chai&#34;&gt;Quality Assurance and Testing with Chai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/#advanced-node-and-express&#34;&gt;Advanced Node and Express&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/metric-imperial-converter&#34;&gt;Metric-Imperial Converter&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/issue-tracker&#34;&gt;Issue Tracker&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/personal-library&#34;&gt;Personal Library&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/sudoku-solver&#34;&gt;Sudoku Solver&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/american-british-translator&#34;&gt;American British Translator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;7. &lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/&#34;&gt;Scientific Computing with Python Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/#python-for-everybody&#34;&gt;Introduction to Python for Everybody&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/arithmetic-formatter&#34;&gt;Arithmetic Formatter&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/time-calculator&#34;&gt;Time Calculator&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/budget-app&#34;&gt;Budget App&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/polygon-area-calculator&#34;&gt;Polygon Area Calculator&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/probability-calculator&#34;&gt;Probability Calculator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;8. &lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/&#34;&gt;Data Analysis with Python Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/#data-analysis-with-python-course&#34;&gt;Data Analysis with Python Course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/#numpy&#34;&gt;NumPy&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/mean-variance-standard-deviation-calculator&#34;&gt;Mean-Variance-Standard Deviation Calculator&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/demographic-data-analyzer&#34;&gt;Demographic Data Analyzer&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/medical-data-visualizer&#34;&gt;Medical Data Visualizer&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/page-view-time-series-visualizer&#34;&gt;Page View Time Series Visualizer&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/sea-level-predictor&#34;&gt;Sea Level Predictor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;9. &lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/&#34;&gt;Information Security Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/#information-security-with-helmetjs&#34;&gt;Information Security with HelmetJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/#python-for-penetration-testing&#34;&gt;Python for Penetration Testing&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/information-security-projects/stock-price-checker&#34;&gt;Stock Price Checker&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/information-security-projects/anonymous-message-board&#34;&gt;Anonymous Message Board&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/information-security-projects/port-scanner&#34;&gt;Port Scanner&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/information-security-projects/sha-1-password-cracker&#34;&gt;SHA-1 Password Cracker&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/information-security/information-security-projects/secure-real-time-multiplayer-game&#34;&gt;Secure Real Time Multiplayer Game &lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;10. &lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/&#34;&gt;Machine Learning with Python Certification&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/#tensorflow&#34;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/#how-neural-networks-work&#34;&gt;How Neural Networks Work&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/rock-paper-scissors&#34;&gt;Rock Paper Scissors&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/cat-and-dog-image-classifier&#34;&gt;Cat and Dog Image Classifier&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/book-recommendation-engine-using-knn&#34;&gt;Book Recommendation Engine using KNN&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/linear-regression-health-costs-calculator&#34;&gt;Linear Regression Health Costs Calculator&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/neural-network-sms-text-classifier&#34;&gt;Neural Network SMS Text Classifier&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Legacy Full Stack Development Certification&lt;/h4&gt; &#xA;&lt;p&gt;Once you have earned the Responsive Web Design, Algorithms and Data Structures, Front End Development Libraries, Data Visualization, Back End Development and APIs, and Legacy Information Security and Quality Assurance certifications, you&#39;ll be able to claim your freeCodeCamp.org Full Stack Development Certification. This distinction signifies that you&#39;ve completed around 1,800 hours of coding with a wide range of web development tools.&lt;/p&gt; &#xA;&lt;h4&gt;Legacy Certifications&lt;/h4&gt; &#xA;&lt;p&gt;We also have 4 legacy certifications dating back to our 2015 curriculum, which are still available. All of the required projects for these legacy certifications will remain available on freeCodeCamp.org.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Legacy Front End Development Certification&lt;/li&gt; &#xA; &lt;li&gt;Legacy Data Visualization Certification&lt;/li&gt; &#xA; &lt;li&gt;Legacy Back End Development Certification&lt;/li&gt; &#xA; &lt;li&gt;Legacy Information Security and Quality Assurance Certification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The Learning Platform&lt;/h3&gt; &#xA;&lt;p&gt;This code is running live at &lt;a href=&#34;https://www.freecodecamp.org&#34;&gt;freeCodeCamp.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our community also has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://forum.freecodecamp.org&#34;&gt;forum&lt;/a&gt; where you can usually get programming help or project feedback within hours.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://youtube.com/freecodecamp&#34;&gt;YouTube channel&lt;/a&gt; with free courses on Python, SQL, Android, and a wide variety of other technologies.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.freecodecamp.org/news&#34;&gt;technical publication&lt;/a&gt; with thousands of programming tutorials and articles about mathematics and computer science.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://discord.gg/Z7Fm39aNtZ&#34;&gt;Discord server&lt;/a&gt; where you can hang out and talk with developers and people who are learning to code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;&lt;a href=&#34;https://www.freecodecamp.org/signin&#34;&gt;Join the community here&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Reporting Bugs and Issues&lt;/h3&gt; &#xA;&lt;p&gt;If you think you&#39;ve found a bug, first read the &lt;a href=&#34;https://forum.freecodecamp.org/t/how-to-report-a-bug/19543&#34;&gt;how to report a bug&lt;/a&gt; article and follow its instructions.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re confident it&#39;s a new bug and have confirmed that someone else is facing the same issue, go ahead and create a new GitHub issue. Be sure to include as much information as possible so we can reproduce the bug.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting Security Issues and Responsible Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://contribute.freecodecamp.org/#/security&#34;&gt;Our security policy is available here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;The freeCodeCamp.org community is possible thanks to thousands of kind volunteers like you. We welcome all contributions to the community and are excited to welcome you aboard.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;&lt;a href=&#34;https://contribute.freecodecamp.org&#34;&gt;Please follow these steps to contribute&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Platform, Build, and Deployment Status&lt;/h3&gt; &#xA;&lt;p&gt;The general platform status for all our applications is available at &lt;a href=&#34;https://status.freecodecamp.org&#34;&gt;&lt;code&gt;status.freecodecamp.org&lt;/code&gt;&lt;/a&gt;. The build and deployment status for the code is available in &lt;a href=&#34;https://contribute.freecodecamp.org/#/devops&#34;&gt;our DevOps Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright © 2022 freeCodeCamp.org&lt;/p&gt; &#xA;&lt;p&gt;The content of this repository is bound by the following licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The computer software is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/LICENSE.md&#34;&gt;BSD-3-Clause&lt;/a&gt; license.&lt;/li&gt; &#xA; &lt;li&gt;The learning resources in the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/curriculum&#34;&gt;&lt;code&gt;/curriculum&lt;/code&gt;&lt;/a&gt; directory including their subdirectories thereon are licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/main/curriculum/LICENSE.md&#34;&gt;CC-BY-SA-4.0&lt;/a&gt; license.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>leeoniya/uFuzzy</title>
    <updated>2022-10-05T01:34:13Z</updated>
    <id>tag:github.com,2022-10-05:/leeoniya/uFuzzy</id>
    <link href="https://github.com/leeoniya/uFuzzy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny, efficient fuzzy search that doesn&#39;t suck&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;▒ μFuzzy&lt;/h2&gt; &#xA;&lt;p&gt;A tiny, efficient fuzzy search that doesn&#39;t suck. This is my fuzzy 🐈. &lt;a href=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/#a-biased-appraisal-of-similar-work&#34;&gt;There are many like it&lt;/a&gt;, but this one is mine.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;uFuzzy is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Approximate_string_matching&#34;&gt;fuzzy search&lt;/a&gt; library designed to match a relatively short search phrase (needle) against a large list of short-to-medium phrases (haystack). It might be best described as a more forgiving &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf&#34;&gt;String.indexOf()&lt;/a&gt;. Common use cases are list filtering, auto-complete/suggest, and title/name/description/filename/function searches.&lt;/p&gt; &#xA;&lt;p&gt;In its default configuration, each uFuzzy match must contain all alpha-numeric characters from the needle in the same sequence, so is likely a poor fit for applications like spellcheck or fulltext/document search. However, its speed leaves ample headroom to &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;outOfOrder&amp;amp;search=spac%20ca&#34;&gt;match out-of-order terms&lt;/a&gt; by combining results from all permutations of the needle. When held &lt;em&gt;just right&lt;/em&gt;, it can efficiently match against multiple object properties, too.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Junk-free, high quality results&lt;/strong&gt; that are &lt;em&gt;dataset-independent&lt;/em&gt;. No need to fine-tune indexing options or boosting params to attain some arbitrary quality score cut-off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Straightforward fuzziness control&lt;/strong&gt; without surprises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sorting you can reason about&lt;/strong&gt; and customize using a simple &lt;code&gt;Array.sort()&lt;/code&gt; which gets access to each match&#39;s stats/counters. There&#39;s no composite, black box &#34;score&#34; to understand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concise set of options&lt;/strong&gt; that don&#39;t interact in mysterious ways to drastically alter combined behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast with low resource usage&lt;/strong&gt; - there&#39;s no index to build, so startup is below 1ms with near-zero memory overhead. Searching a three-term phrase in a 162,000 phrase dataset takes 12ms with in-order terms or 50ms with out-of-order terms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Micro, with zero dependencies&lt;/strong&gt; - currently &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/dist/uFuzzy.iife.min.js&#34;&gt;~4KB min&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;outOfOrder&amp;amp;search=spac%20ca&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/uFuzzy.png&#34; alt=&#34;uFuzzy demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Demos&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/demos/testdata.json&#34;&gt;testdata.json&lt;/a&gt; file is a diverse 162,000 string/phrase dataset 4MB in size, so first load may be slow due to network transfer. Try refreshing once it&#39;s been cached by your browser.&lt;/p&gt; &#xA;&lt;p&gt;First, uFuzzy in isolation to demonstrate its performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;search=super%20ma&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;search=super%20ma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now the same comparison page, booted with &lt;a href=&#34;https://github.com/farzher/fuzzysort&#34;&gt;fuzzysort&lt;/a&gt;, &lt;a href=&#34;https://fwextensions.github.io/quick-score-demo/&#34;&gt;QuickScore&lt;/a&gt;, and &lt;a href=&#34;https://fusejs.io/&#34;&gt;Fuse.js&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is the full library list but with a reduced dataset (just &lt;code&gt;hearthstone_750&lt;/code&gt;, &lt;code&gt;urls_and_titles_600&lt;/code&gt;) to avoid crashing your browser:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?lists=hearthstone_750,urls_and_titles_600&amp;amp;search=moo&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?lists=hearthstone_750,urls_and_titles_600&amp;amp;search=moo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h3&gt;Node&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i @leeoniya/ufuzzy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const uFuzzy = require(&#39;@leeoniya/ufuzzy&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;script src=&#34;./dist/uFuzzy.iife.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let haystack = [&#xA;    &#39;puzzle&#39;,&#xA;    &#39;Super Awesome Thing (now with stuff!)&#39;,&#xA;    &#39;FileName.js&#39;,&#xA;    &#39;/feeding/the/catPic.jpg&#39;,&#xA;];&#xA;&#xA;let needle = &#39;feed cat&#39;;&#xA;&#xA;let opts = {};&#xA;&#xA;let uf = new uFuzzy(opts);&#xA;&#xA;// pre-filter&#xA;let idxs = uf.filter(haystack, needle);&#xA;&#xA;// sort/rank only when &amp;lt;= 1,000 items&#xA;if (idxs.length &amp;lt;= 1e3) {&#xA;  let info = uf.info(idxs, haystack, needle);&#xA;&#xA;  // order is a double-indirection array (a re-order of the passed-in idxs)&#xA;  // this allows corresponding info to be grabbed directly by idx, if needed&#xA;  let order = uf.sort(info, haystack, needle);&#xA;&#xA;  // render post-filtered &amp;amp; ordered matches&#xA;  for (let i = 0; i &amp;lt; order.length; i++) {&#xA;    // using info.idx here instead of idxs because uf.info() may have&#xA;    // further reduced the initial idxs based on prefix/suffix rules&#xA;    console.log(haystack[info.idx[order[i]]]);&#xA;  }&#xA;}&#xA;else {&#xA;  // render pre-filtered but unordered matches&#xA;  for (let i = 0; i &amp;lt; idxs.length; i++) {&#xA;    console.log(haystack[i]);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;How It Works&lt;/h3&gt; &#xA;&lt;p&gt;uFuzzy has two operational modes which differ in matching strategy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;intraMode: 0&lt;/strong&gt; (default) requires all alpha-numeric characters in each search term to exist in the same sequence in all matches. For example, when searching for &#34;&lt;strong&gt;cat&lt;/strong&gt;&#34;, this mode is capable of matching the strings below. What is &lt;em&gt;actually&lt;/em&gt; matched will depend on additonal fuzziness settings. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;at&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s&lt;strong&gt;c&lt;/strong&gt;r&lt;strong&gt;at&lt;/strong&gt;ch&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;ca&lt;/strong&gt;n&lt;strong&gt;t&lt;/strong&gt;ina&lt;/li&gt; &#xA;   &lt;li&gt;tra&lt;strong&gt;c&lt;/strong&gt;tors &lt;strong&gt;a&lt;/strong&gt;re la&lt;strong&gt;t&lt;/strong&gt;e&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;intraMode: 1&lt;/strong&gt; allows for a single error in each term of the search phrase, where an error is one of: substitution (replacement), transposition (swap), insertion (addition), or deletion (omission). The search strings with errors below can return matches containing &#34;&lt;strong&gt;example&lt;/strong&gt;&#34;. What is &lt;em&gt;actually&lt;/em&gt; matched will depend on additonal fuzziness settings. In contrast to the previous mode, searching for &#34;&lt;strong&gt;example&lt;/strong&gt;&#34; will never match &#34;&lt;strong&gt;ex&lt;/strong&gt;tr&lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;m&lt;/strong&gt;a&lt;strong&gt;ple&lt;/strong&gt;&#34;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;example&lt;/code&gt; - exact&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;examplle&lt;/code&gt; - single insertion (addition)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exemple&lt;/code&gt; - single substitution (replacement)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exmaple&lt;/code&gt; - single transposition (swap)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exmple&lt;/code&gt; - single deletion (omission)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xamp&lt;/code&gt; - partial&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xmap&lt;/code&gt; - partial with transposition&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are 3 phases to a search:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt; filters the full &lt;code&gt;haystack&lt;/code&gt; with a fast RegExp compiled from your &lt;code&gt;needle&lt;/code&gt; without doing any extra ops. It returns an array of matched indices in original order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Info&lt;/strong&gt; collects more detailed stats about the filtered matches, such as start offsets, fuzz level, prefix/suffix counters, etc. It also gathers substring match positions for range highlighting. Finally, it filters out any matches that don&#39;t conform to the desired prefix/suffix rules. To do all this it re-compiles the &lt;code&gt;needle&lt;/code&gt; into two more-expensive RegExps that can partition each match. Therefore, it should be run on a reduced subset of the haystack, usually returned by the Filter phase. The &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&#34;&gt;uFuzzy demo&lt;/a&gt; is gated at &amp;lt;= 1,000 filtered items, before moving ahead with this phase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sort&lt;/strong&gt; does an &lt;code&gt;Array.sort()&lt;/code&gt; to determine final result order, utilizing the &lt;code&gt;info&lt;/code&gt; object returned from the previous phase. A custom sort function can be provided via a uFuzzy option: &lt;code&gt;{sort: (info, haystack, needle) =&amp;gt; idxsOrder}&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;A liberally-commented 100 LoC &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/dist/uFuzzy.d.ts&#34;&gt;uFuzzy.d.ts&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Options with an &lt;strong&gt;inter&lt;/strong&gt; prefix apply to allowances &lt;em&gt;in between&lt;/em&gt; search terms, while those with an &lt;strong&gt;intra&lt;/strong&gt; prefix apply to allowances &lt;em&gt;within&lt;/em&gt; each search term.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How term matching should be performed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;0&lt;/code&gt; MultiInsert&lt;br&gt; &lt;code&gt;1&lt;/code&gt; SingleError&lt;br&gt;&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/#how-it-works&#34;&gt;How It Works&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraIns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max number of extra chars allowed&lt;br&gt;between each char within a term&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;cat&#34;...&lt;br&gt; &lt;code&gt;0&lt;/code&gt; can match: &lt;b&gt;cat&lt;/b&gt;, s&lt;b&gt;cat&lt;/b&gt;, &lt;b&gt;cat&lt;/b&gt;ch, va&lt;b&gt;cat&lt;/b&gt;e&lt;br&gt; &lt;code&gt;1&lt;/code&gt; also matches: &lt;b&gt;ca&lt;/b&gt;r&lt;b&gt;t&lt;/b&gt;, &lt;b&gt;c&lt;/b&gt;h&lt;b&gt;a&lt;/b&gt;p&lt;b&gt;t&lt;/b&gt;er, out&lt;b&gt;ca&lt;/b&gt;s&lt;b&gt;t&lt;/b&gt;&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interIns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max number of extra chars allowed between terms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;where is&#34;...&lt;br&gt; &lt;code&gt;Infinity&lt;/code&gt; can match: &lt;b&gt;where is&lt;/b&gt;, &lt;b&gt;where&lt;/b&gt; have blah w&lt;b&gt;is&lt;/b&gt;dom&lt;br&gt; &lt;code&gt;5&lt;/code&gt; cannot match: where have blah wisdom&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;code&gt;intraSub&lt;/code&gt;&lt;br&gt; &lt;code&gt;intraTrn&lt;/code&gt;&lt;br&gt; &lt;code&gt;intraDel&lt;/code&gt;&lt;br&gt; &lt;/td&gt; &#xA;   &lt;td&gt; For &lt;code&gt;intraMode: 1&lt;/code&gt; only,&lt;br&gt; Error types to tolerate within terms &lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;0&lt;/code&gt; No&lt;br&gt; &lt;code&gt;1&lt;/code&gt; Yes&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraChars&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Partial regexp for allowed insert&lt;br&gt;chars between each char within a term&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[a-z\d]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;[a-z\d]&lt;/code&gt; matches only alpha-numeric (case-insensitive)&lt;br&gt; &lt;code&gt;[\w-]&lt;/code&gt; would match alpha-numeric, undercore, and hyphen&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraFilt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback for excluding results based on term &amp;amp; match&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(term, match, index) =&amp;gt; true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Do your own thing, maybe... - Length diff threshold&lt;br&gt; - Levenshtein distance&lt;br&gt; - Term offset or content&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interChars&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Partial regexp for allowed chars between terms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;.&lt;/code&gt; matches all chars&lt;br&gt; &lt;code&gt;[^a-z\d]&lt;/code&gt; would only match whitespace and punctuation&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interLft&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines allowable term left boundary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;mania&#34;...&lt;br&gt; &lt;code&gt;0&lt;/code&gt; any - anywhere: ro&lt;b&gt;mania&lt;/b&gt;n&lt;br&gt; &lt;code&gt;1&lt;/code&gt; loose - whitespace, punctuation, alpha-num, case-change transitions: Track&lt;b&gt;Mania&lt;/b&gt;, &lt;b&gt;mania&lt;/b&gt;c&lt;br&gt; &lt;code&gt;2&lt;/code&gt; strict - whitespace, punctuation: &lt;b&gt;mania&lt;/b&gt;cally&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interRgt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines allowable term right boundary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;mania&#34;...&lt;br&gt; &lt;code&gt;0&lt;/code&gt; any - anywhere: ro&lt;b&gt;mania&lt;/b&gt;n&lt;br&gt; &lt;code&gt;1&lt;/code&gt; loose - whitespace, punctuation, alpha-num, case-change transitions: &lt;b&gt;Mania&lt;/b&gt;Star&lt;br&gt; &lt;code&gt;2&lt;/code&gt; strict - whitespace, punctuation: &lt;b&gt;mania&lt;/b&gt;_foo&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom result sorting function&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(info, haystack, needle) =&amp;gt; idxsOrder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Default: &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/bba02537334ae9d02440b86262fbfa40d86daa54/src/uFuzzy.js#L32-L52&#34;&gt;Search sort&lt;/a&gt;, prioritizes full term matches and char density&lt;br&gt; Demo: &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/bba02537334ae9d02440b86262fbfa40d86daa54/demos/compare.html#L264-L288&#34;&gt;Typeahead sort&lt;/a&gt;, prioritizes start offset and match length&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;A biased appraisal of similar work&lt;/h3&gt; &#xA;&lt;p&gt;This assessment is extremely narrow and, of course, biased towards my use cases, text corpus, and my complete expertise in operating my own library. It is highly probable that I&#39;m not taking full advantage of some feature in other libraries that may significantly improve outcomes along some axis; I welcome improvement PRs from anyone with deeper library knowledge than afforded by my hasty 10min skim over any &#34;Basic usage&#34; example and README doc.&lt;/p&gt; &#xA;&lt;h4&gt;Search quality&lt;/h4&gt; &#xA;&lt;p&gt;Can-of-worms #1.&lt;/p&gt; &#xA;&lt;p&gt;Before we discuss &lt;a href=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/#performance&#34;&gt;performance&lt;/a&gt; let&#39;s talk about search quality, because speed is irrelevant when your results are a strange medly of &#34;Oh yeah!&#34; and &#34;WTF?&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Search quality is very subjective. What constitutes a good top match in a &#34;typeahead / auto-suggest&#34; case can be a poor match in a &#34;search / find-all&#34; scenario. Some solutions optimize for the latter, some for the former. It&#39;s common to find knobs that skew the results in either direction, but these are often by-feel and imperfect, being little more than a proxy to producing a single, composite match &#34;score&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take a look at some matches produced by the most popular fuzzy search library, &lt;a href=&#34;https://github.com/krisk/Fuse&#34;&gt;Fuse.js&lt;/a&gt; and some others for which match highlighting is implemented in the demo.&lt;/p&gt; &#xA;&lt;p&gt;Searching for the partial term &lt;strong&gt;&#34;twili&#34;&lt;/strong&gt;, we see these results appearing above numerous obvious &lt;strong&gt;&#34;twilight&#34;&lt;/strong&gt; results:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twili&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twili&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;twi&lt;/strong&gt;r&lt;strong&gt;li&lt;/strong&gt;ng&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;he total number of received alerts that &lt;strong&gt;w&lt;/strong&gt;ere &lt;strong&gt;i&lt;/strong&gt;nva&lt;strong&gt;li&lt;/strong&gt;d.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;om Clancy&#39;s Ghost Recon &lt;strong&gt;Wil&lt;/strong&gt;dlands - AS&lt;strong&gt;I&lt;/strong&gt;A Pre-order Standard Uplay Activation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;t&lt;/strong&gt;heHunter™: Call of the &lt;strong&gt;Wi&lt;/strong&gt;ld - Bearclaw &lt;strong&gt;Li&lt;/strong&gt;te CB-60&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not only are these poor matches in isolation, but they actually rank higher than literal substrings.&lt;/p&gt; &#xA;&lt;p&gt;Finishing the search term to &lt;strong&gt;&#34;twilight&#34;&lt;/strong&gt;, &lt;em&gt;still&lt;/em&gt; scores bizzare results higher:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twilight&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twilight&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Magic: &lt;strong&gt;T&lt;/strong&gt;he Gathering - Duels of the Planeswalkers &lt;strong&gt;Wi&lt;/strong&gt;ngs of &lt;strong&gt;Light&lt;/strong&gt; Unlock&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;he &lt;strong&gt;Wil&lt;/strong&gt;d E&lt;strong&gt;ight&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some engines do better with partial prefix matches, at the expense of higher startup/indexing cost:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=twili&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=twili&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;match-sorter&lt;/code&gt; returns 1,384 results, but only the first 40 are relevant. How do we know where the cut-off is?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=super&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=super&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;twil  0.1683 ok, 0.25+ bad&#xA;chest 0.1959 ok, 0.2+ bad&#xA;train&#xA;nin tur&#xA;puzz, puzl (MiniSearch, {fuzzy: 0.4}, uFuzzy, intraIns: 1)&#xA;--&gt; &#xA;&lt;h4&gt;Performance&lt;/h4&gt; &#xA;&lt;p&gt;Can-of-worms #2.&lt;/p&gt; &#xA;&lt;p&gt;All benchmarks suck, but this one might suck more than others.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;ve tried to follow any &#34;best performance&#34; advice when I could find it in each library&#39;s docs, but it&#39;s a certainty that some stones were left unturned when implementing ~20 different search engines.&lt;/li&gt; &#xA; &lt;li&gt;Despite my best efforts, result quality is still extremely variable between libraries, and even between search terms. In some cases, results are very poor but the library is very fast; in other cases, the results are better, but the library is quite slow. What use is extreme speed when the search quality is sub-par? This is a subjective, nuanced topic that will surely affect how you interpret these numbers. I consider uFuzzy&#39;s search quality second-to-none, so my view of most faster libraries is typically one of quality trade-offs I&#39;m happy not to have made. I encourage you to evaluate the results for all benched search phrases manually to decide this for yourself.&lt;/li&gt; &#xA; &lt;li&gt;Many fulltext &amp;amp; document-search libraries compared here are designed to work best with exact terms rather than partial matches (which this benchmark is skewed towards).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Still, something is better than a hand-wavy YMMV/do-it-yourself dismissal and certainly better than nothing.&lt;/p&gt; &#xA;&lt;h4&gt;Benchmark&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each benchmark can be run by changing the &lt;code&gt;libs&lt;/code&gt; parameter to the desired library name: &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?bench&amp;amp;libs=uFuzzy&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?bench&amp;amp;libs=uFuzzy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Results output is suppressed in &lt;code&gt;bench&lt;/code&gt; mode to avoid benchmarking the DOM.&lt;/li&gt; &#xA; &lt;li&gt;Measurements are taken in the Performance secrion of Chrome&#39;s DevTools by recording several reloads of the bench page, with forced garbage collection in between. The middle/typical run is used to collect numbers.&lt;/li&gt; &#xA; &lt;li&gt;The search corpus is 162,000 words and phrases, loaded from a 4MB &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/demos/testdata.json&#34;&gt;testdata.json&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The benchmark types and then deletes, character-by-character (every 100ms) the following search terms, triggering a search for each keypress: &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;chest&lt;/code&gt;, &lt;code&gt;super ma&lt;/code&gt;, &lt;code&gt;mania&lt;/code&gt;, &lt;code&gt;puzz&lt;/code&gt;, &lt;code&gt;prom rem stor&lt;/code&gt;, &lt;code&gt;twil&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To evaluate the results for each library, or to compare several, simply visit the same page with more &lt;code&gt;libs&lt;/code&gt; and without &lt;code&gt;bench&lt;/code&gt;: &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/bench.png&#34; alt=&#34;profile example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are several metrics evaluated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Init time - how long it takes to load the library and build any required index to perform searching.&lt;/li&gt; &#xA; &lt;li&gt;Bench runtime - how long it takes to execute all searches.&lt;/li&gt; &#xA; &lt;li&gt;Memory required - peak JS heap size used during the bench as well as how much is still retained after a forced garbage collection at the end.&lt;/li&gt; &#xA; &lt;li&gt;GC cost - how much time is needed to collect garbage at the end (main thread jank)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;https://bestofjs.org/projects?tags=search&#xA;--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Lib&lt;/th&gt; &#xA;   &lt;th&gt;Stars&lt;/th&gt; &#xA;   &lt;th&gt;Size (min)&lt;/th&gt; &#xA;   &lt;th&gt;Init&lt;/th&gt; &#xA;   &lt;th&gt;Search&lt;/th&gt; &#xA;   &lt;th&gt;Heap (peak)&lt;/th&gt; &#xA;   &lt;th&gt;Retained&lt;/th&gt; &#xA;   &lt;th&gt;GC&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/leeoniya/uFuzzy&#34;&gt;uFuzzy&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 0&lt;/td&gt; &#xA;   &lt;td&gt;4KB&lt;/td&gt; &#xA;   &lt;td&gt;0.3ms&lt;/td&gt; &#xA;   &lt;td&gt;630ms&lt;/td&gt; &#xA;   &lt;td&gt;25.5MB&lt;/td&gt; &#xA;   &lt;td&gt;7.5MB&lt;/td&gt; &#xA;   &lt;td&gt;20ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/krisk/Fuse&#34;&gt;Fuse.js&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Fuse&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 14.8k&lt;/td&gt; &#xA;   &lt;td&gt;23.5KB&lt;/td&gt; &#xA;   &lt;td&gt;40ms&lt;/td&gt; &#xA;   &lt;td&gt;35600ms&lt;/td&gt; &#xA;   &lt;td&gt;323MB&lt;/td&gt; &#xA;   &lt;td&gt;14.5MB&lt;/td&gt; &#xA;   &lt;td&gt;30ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/nextapps-de/flexsearch&#34;&gt;FlexSearch (Light)&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=FlexSearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 8.9k&lt;/td&gt; &#xA;   &lt;td&gt;5.9KB&lt;/td&gt; &#xA;   &lt;td&gt;3600ms&lt;/td&gt; &#xA;   &lt;td&gt;130ms&lt;/td&gt; &#xA;   &lt;td&gt;673MB&lt;/td&gt; &#xA;   &lt;td&gt;316MB&lt;/td&gt; &#xA;   &lt;td&gt;320ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/olivernn/lunr.js&#34;&gt;Lunr.js&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Lunr&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 8.2k&lt;/td&gt; &#xA;   &lt;td&gt;29.4KB&lt;/td&gt; &#xA;   &lt;td&gt;2000ms&lt;/td&gt; &#xA;   &lt;td&gt;800ms&lt;/td&gt; &#xA;   &lt;td&gt;355MB&lt;/td&gt; &#xA;   &lt;td&gt;121MB&lt;/td&gt; &#xA;   &lt;td&gt;130ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/LyraSearch/lyra&#34;&gt;LyraSearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=LyraSearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3.3k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/kentcdodds/match-sorter&#34;&gt;match-sorter&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=match-sorter&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3.1k&lt;/td&gt; &#xA;   &lt;td&gt;7.3KB&lt;/td&gt; &#xA;   &lt;td&gt;0.03ms&lt;/td&gt; &#xA;   &lt;td&gt;10000ms&lt;/td&gt; &#xA;   &lt;td&gt;79MB&lt;/td&gt; &#xA;   &lt;td&gt;8MB&lt;/td&gt; &#xA;   &lt;td&gt;30ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/farzher/fuzzysort&#34;&gt;fuzzysort&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzysort&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3k&lt;/td&gt; &#xA;   &lt;td&gt;5.5KB&lt;/td&gt; &#xA;   &lt;td&gt;60ms&lt;/td&gt; &#xA;   &lt;td&gt;1500ms&lt;/td&gt; &#xA;   &lt;td&gt;176MB&lt;/td&gt; &#xA;   &lt;td&gt;84MB&lt;/td&gt; &#xA;   &lt;td&gt;70ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/kbrsh/wade&#34;&gt;Wade&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Wade&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3k&lt;/td&gt; &#xA;   &lt;td&gt;4KB&lt;/td&gt; &#xA;   &lt;td&gt;840ms&lt;/td&gt; &#xA;   &lt;td&gt;370ms&lt;/td&gt; &#xA;   &lt;td&gt;436MB&lt;/td&gt; &#xA;   &lt;td&gt;42MB&lt;/td&gt; &#xA;   &lt;td&gt;100ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/bevacqua/fuzzysearch&#34;&gt;fuzzysearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzysearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 2.6k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/bvaughn/js-search&#34;&gt;js-search&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=js-search&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 2k&lt;/td&gt; &#xA;   &lt;td&gt;17.1KB&lt;/td&gt; &#xA;   &lt;td&gt;6500ms&lt;/td&gt; &#xA;   &lt;td&gt;1350ms&lt;/td&gt; &#xA;   &lt;td&gt;1937MB&lt;/td&gt; &#xA;   &lt;td&gt;734MB&lt;/td&gt; &#xA;   &lt;td&gt;1400ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/weixsong/elasticlunr.js&#34;&gt;Elasticlunr.js&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Elasticlunr&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.9k&lt;/td&gt; &#xA;   &lt;td&gt;18.1KB&lt;/td&gt; &#xA;   &lt;td&gt;1220ms&lt;/td&gt; &#xA;   &lt;td&gt;1770ms&lt;/td&gt; &#xA;   &lt;td&gt;238MB&lt;/td&gt; &#xA;   &lt;td&gt;70MB&lt;/td&gt; &#xA;   &lt;td&gt;100ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/lucaong/minisearch&#34;&gt;MiniSearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=MiniSearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.5k&lt;/td&gt; &#xA;   &lt;td&gt;22.4KB&lt;/td&gt; &#xA;   &lt;td&gt;525ms&lt;/td&gt; &#xA;   &lt;td&gt;1800ms&lt;/td&gt; &#xA;   &lt;td&gt;422MB&lt;/td&gt; &#xA;   &lt;td&gt;64MB&lt;/td&gt; &#xA;   &lt;td&gt;90ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/Glench/fuzzyset.js&#34;&gt;Fuzzyset&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Fuzzyset&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.3k&lt;/td&gt; &#xA;   &lt;td&gt;2.8KB&lt;/td&gt; &#xA;   &lt;td&gt;3500ms&lt;/td&gt; &#xA;   &lt;td&gt;1000ms&lt;/td&gt; &#xA;   &lt;td&gt;660MB&lt;/td&gt; &#xA;   &lt;td&gt;238MB&lt;/td&gt; &#xA;   &lt;td&gt;430ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/fergiemcdowall/search-index&#34;&gt;search-index&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=search-index&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.3k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/rmm5t/liquidmetal&#34;&gt;LiquidMetal&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=LiquidMetal&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 285&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/itemsapi/itemsjs&#34;&gt;ItemJS&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=ItemJS&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 260&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/wouter2203/fuzzy-search&#34;&gt;FuzzySearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzy-search&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 184&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jeancroy/FuzzySearch&#34;&gt;FuzzySearch2&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=FuzzySearch2&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 173&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/fwextensions/quick-score&#34;&gt;QuickScore&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=QuickScore&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 131&lt;/td&gt; &#xA;   &lt;td&gt;9.1KB&lt;/td&gt; &#xA;   &lt;td&gt;40ms&lt;/td&gt; &#xA;   &lt;td&gt;7500ms&lt;/td&gt; &#xA;   &lt;td&gt;176MB&lt;/td&gt; &#xA;   &lt;td&gt;12.8MB&lt;/td&gt; &#xA;   &lt;td&gt;30ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jhawthorn/fzy.js/&#34;&gt;fzy&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fzy&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 115&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/grafana/grafana/raw/main/packages/grafana-ui/src/utils/fuzzy.ts&#34;&gt;fuzzyMatch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzyMatch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/transformers</title>
    <updated>2022-10-05T01:34:13Z</updated>
    <id>tag:github.com,2022-10-05:/huggingface/transformers</id>
    <link href="https://github.com/huggingface/transformers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤗 Transformers: State-of-the-art Machine Learning for Pytorch, TensorFlow, and JAX.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers_logo_name.png&#34; width=&#34;400&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/huggingface/transformers&#34;&gt; &lt;img alt=&#34;Build&#34; src=&#34;https://img.shields.io/circleci/build/github/huggingface/transformers/main&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huggingface/transformers/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/huggingface/transformers.svg?color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://huggingface.co/docs/transformers/index&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/website/http/huggingface.co/docs/transformers/index.svg?down_color=red&amp;amp;down_message=offline&amp;amp;up_message=online&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huggingface/transformers/releases&#34;&gt; &lt;img alt=&#34;GitHub release&#34; src=&#34;https://img.shields.io/github/release/huggingface/transformers.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huggingface/transformers/raw/main/CODE_OF_CONDUCT.md&#34;&gt; &lt;img alt=&#34;Contributor Covenant&#34; src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/155220641&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/155220641.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;p&gt; &lt;b&gt;English&lt;/b&gt; | &lt;a href=&#34;https://github.com/huggingface/transformers/raw/main/README_zh-hans.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/huggingface/transformers/raw/main/README_zh-hant.md&#34;&gt;繁體中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/huggingface/transformers/raw/main/README_ko.md&#34;&gt;한국어&lt;/a&gt; &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/h4&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;p&gt;State-of-the-art Machine Learning for JAX, PyTorch and TensorFlow&lt;/p&gt; &lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://hf.co/course&#34;&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/course_banner.png&#34;&gt;&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;🤗 Transformers provides thousands of pretrained models to perform tasks on different modalities such as text, vision, and audio.&lt;/p&gt; &#xA;&lt;p&gt;These models can be applied on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📝 Text, for tasks like text classification, information extraction, question answering, summarization, translation, text generation, in over 100 languages.&lt;/li&gt; &#xA; &lt;li&gt;🖼️ Images, for tasks like image classification, object detection, and segmentation.&lt;/li&gt; &#xA; &lt;li&gt;🗣️ Audio, for tasks like speech recognition and audio classification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Transformer models can also perform tasks on &lt;strong&gt;several modalities combined&lt;/strong&gt;, such as table question answering, optical character recognition, information extraction from scanned documents, video classification, and visual question answering.&lt;/p&gt; &#xA;&lt;p&gt;🤗 Transformers provides APIs to quickly download and use those pretrained models on a given text, fine-tune them on your own datasets and then share them with the community on our &lt;a href=&#34;https://huggingface.co/models&#34;&gt;model hub&lt;/a&gt;. At the same time, each python module defining an architecture is fully standalone and can be modified to enable quick research experiments.&lt;/p&gt; &#xA;&lt;p&gt;🤗 Transformers is backed by the three most popular deep learning libraries — &lt;a href=&#34;https://jax.readthedocs.io/en/latest/&#34;&gt;Jax&lt;/a&gt;, &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt; and &lt;a href=&#34;https://www.tensorflow.org/&#34;&gt;TensorFlow&lt;/a&gt; — with a seamless integration between them. It&#39;s straightforward to train your models with one before loading them for inference with the other.&lt;/p&gt; &#xA;&lt;h2&gt;Online demos&lt;/h2&gt; &#xA;&lt;p&gt;You can test most of our models directly on their pages from the &lt;a href=&#34;https://huggingface.co/models&#34;&gt;model hub&lt;/a&gt;. We also offer &lt;a href=&#34;https://huggingface.co/pricing&#34;&gt;private model hosting, versioning, &amp;amp; an inference API&lt;/a&gt; for public and private models.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few examples:&lt;/p&gt; &#xA;&lt;p&gt;In Natural Language Processing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bert-base-uncased?text=Paris+is+the+%5BMASK%5D+of+France&#34;&gt;Masked word completion with BERT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/dbmdz/electra-large-discriminator-finetuned-conll03-english?text=My+name+is+Sarah+and+I+live+in+London+city&#34;&gt;Name Entity Recognition with Electra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/gpt2?text=A+long+time+ago%2C+&#34;&gt;Text generation with GPT-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/roberta-large-mnli?text=The+dog+was+lost.+Nobody+lost+any+animal&#34;&gt;Natural Language Inference with RoBERTa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/bart-large-cnn?text=The+tower+is+324+metres+%281%2C063+ft%29+tall%2C+about+the+same+height+as+an+81-storey+building%2C+and+the+tallest+structure+in+Paris.+Its+base+is+square%2C+measuring+125+metres+%28410+ft%29+on+each+side.+During+its+construction%2C+the+Eiffel+Tower+surpassed+the+Washington+Monument+to+become+the+tallest+man-made+structure+in+the+world%2C+a+title+it+held+for+41+years+until+the+Chrysler+Building+in+New+York+City+was+finished+in+1930.+It+was+the+first+structure+to+reach+a+height+of+300+metres.+Due+to+the+addition+of+a+broadcasting+aerial+at+the+top+of+the+tower+in+1957%2C+it+is+now+taller+than+the+Chrysler+Building+by+5.2+metres+%2817+ft%29.+Excluding+transmitters%2C+the+Eiffel+Tower+is+the+second+tallest+free-standing+structure+in+France+after+the+Millau+Viaduct&#34;&gt;Summarization with BART&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/distilbert-base-uncased-distilled-squad?text=Which+name+is+also+used+to+describe+the+Amazon+rainforest+in+English%3F&amp;amp;context=The+Amazon+rainforest+%28Portuguese%3A+Floresta+Amaz%C3%B4nica+or+Amaz%C3%B4nia%3B+Spanish%3A+Selva+Amaz%C3%B3nica%2C+Amazon%C3%ADa+or+usually+Amazonia%3B+French%3A+For%C3%AAt+amazonienne%3B+Dutch%3A+Amazoneregenwoud%29%2C+also+known+in+English+as+Amazonia+or+the+Amazon+Jungle%2C+is+a+moist+broadleaf+forest+that+covers+most+of+the+Amazon+basin+of+South+America.+This+basin+encompasses+7%2C000%2C000+square+kilometres+%282%2C700%2C000+sq+mi%29%2C+of+which+5%2C500%2C000+square+kilometres+%282%2C100%2C000+sq+mi%29+are+covered+by+the+rainforest.+This+region+includes+territory+belonging+to+nine+nations.+The+majority+of+the+forest+is+contained+within+Brazil%2C+with+60%25+of+the+rainforest%2C+followed+by+Peru+with+13%25%2C+Colombia+with+10%25%2C+and+with+minor+amounts+in+Venezuela%2C+Ecuador%2C+Bolivia%2C+Guyana%2C+Suriname+and+French+Guiana.+States+or+departments+in+four+nations+contain+%22Amazonas%22+in+their+names.+The+Amazon+represents+over+half+of+the+planet%27s+remaining+rainforests%2C+and+comprises+the+largest+and+most+biodiverse+tract+of+tropical+rainforest+in+the+world%2C+with+an+estimated+390+billion+individual+trees+divided+into+16%2C000+species&#34;&gt;Question answering with DistilBERT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/t5-base?text=My+name+is+Wolfgang+and+I+live+in+Berlin&#34;&gt;Translation with T5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Computer Vision:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/google/vit-base-patch16-224&#34;&gt;Image classification with ViT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/detr-resnet-50&#34;&gt;Object Detection with DETR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/nvidia/segformer-b0-finetuned-ade-512-512&#34;&gt;Semantic Segmentation with SegFormer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/detr-resnet-50-panoptic&#34;&gt;Panoptic Segmentation with DETR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Audio:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/wav2vec2-base-960h&#34;&gt;Automatic Speech Recognition with Wav2Vec2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/superb/wav2vec2-base-superb-ks&#34;&gt;Keyword Spotting with Wav2Vec2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Multimodal tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/dandelin/vilt-b32-finetuned-vqa&#34;&gt;Visual Question Answering with ViLT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://transformer.huggingface.co&#34;&gt;Write With Transformer&lt;/a&gt;&lt;/strong&gt;, built by the Hugging Face team, is the official demo of this repo’s text generation capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;If you are looking for custom support from the Hugging Face team&lt;/h2&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://huggingface.co/support&#34;&gt; &lt;img alt=&#34;HuggingFace Expert Acceleration Program&#34; src=&#34;https://cdn-media.huggingface.co/marketing/transformers/new-support-improved.png&#34; style=&#34;max-width: 600px; border: 1px solid #eee; border-radius: 4px; box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);&#34;&gt; &lt;/a&gt;&#xA;&lt;br&gt; &#xA;&lt;h2&gt;Quick tour&lt;/h2&gt; &#xA;&lt;p&gt;To immediately use a model on a given input (text, image, audio, ...), we provide the &lt;code&gt;pipeline&lt;/code&gt; API. Pipelines group together a pretrained model with the preprocessing that was used during that model&#39;s training. Here is how to quickly use a pipeline to classify positive versus negative texts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from transformers import pipeline&#xA;&#xA;# Allocate a pipeline for sentiment-analysis&#xA;&amp;gt;&amp;gt;&amp;gt; classifier = pipeline(&#39;sentiment-analysis&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; classifier(&#39;We are very happy to introduce pipeline to the transformers repository.&#39;)&#xA;[{&#39;label&#39;: &#39;POSITIVE&#39;, &#39;score&#39;: 0.9996980428695679}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second line of code downloads and caches the pretrained model used by the pipeline, while the third evaluates it on the given text. Here the answer is &#34;positive&#34; with a confidence of 99.97%.&lt;/p&gt; &#xA;&lt;p&gt;Many tasks have a pre-trained &lt;code&gt;pipeline&lt;/code&gt; ready to go, in NLP but also in computer vision and speech. For example, we can easily extract detected objects in an image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import requests&#xA;&amp;gt;&amp;gt;&amp;gt; from PIL import Image&#xA;&amp;gt;&amp;gt;&amp;gt; from transformers import pipeline&#xA;&#xA;# Download an image with cute cats&#xA;&amp;gt;&amp;gt;&amp;gt; url = &#34;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/coco_sample.png&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; image_data = requests.get(url, stream=True).raw&#xA;&amp;gt;&amp;gt;&amp;gt; image = Image.open(image_data)&#xA;&#xA;# Allocate a pipeline for object detection&#xA;&amp;gt;&amp;gt;&amp;gt; object_detector = pipeline(&#39;object_detection&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; object_detector(image)&#xA;[{&#39;score&#39;: 0.9982201457023621,&#xA;  &#39;label&#39;: &#39;remote&#39;,&#xA;  &#39;box&#39;: {&#39;xmin&#39;: 40, &#39;ymin&#39;: 70, &#39;xmax&#39;: 175, &#39;ymax&#39;: 117}},&#xA; {&#39;score&#39;: 0.9960021376609802,&#xA;  &#39;label&#39;: &#39;remote&#39;,&#xA;  &#39;box&#39;: {&#39;xmin&#39;: 333, &#39;ymin&#39;: 72, &#39;xmax&#39;: 368, &#39;ymax&#39;: 187}},&#xA; {&#39;score&#39;: 0.9954745173454285,&#xA;  &#39;label&#39;: &#39;couch&#39;,&#xA;  &#39;box&#39;: {&#39;xmin&#39;: 0, &#39;ymin&#39;: 1, &#39;xmax&#39;: 639, &#39;ymax&#39;: 473}},&#xA; {&#39;score&#39;: 0.9988006353378296,&#xA;  &#39;label&#39;: &#39;cat&#39;,&#xA;  &#39;box&#39;: {&#39;xmin&#39;: 13, &#39;ymin&#39;: 52, &#39;xmax&#39;: 314, &#39;ymax&#39;: 470}},&#xA; {&#39;score&#39;: 0.9986783862113953,&#xA;  &#39;label&#39;: &#39;cat&#39;,&#xA;  &#39;box&#39;: {&#39;xmin&#39;: 345, &#39;ymin&#39;: 23, &#39;xmax&#39;: 640, &#39;ymax&#39;: 368}}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we get a list of objects detected in the image, with a box surrounding the object and a confidence score. Here is the original image on the right, with the predictions displayed on the left:&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/coco_sample.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/coco_sample_post_processed.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;You can learn more about the tasks supported by the &lt;code&gt;pipeline&lt;/code&gt; API in &lt;a href=&#34;https://huggingface.co/docs/transformers/task_summary&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;code&gt;pipeline&lt;/code&gt;, to download and use any of the pretrained models on your given task, all it takes is three lines of code. Here is the PyTorch version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from transformers import AutoTokenizer, AutoModel&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; tokenizer = AutoTokenizer.from_pretrained(&#34;bert-base-uncased&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; model = AutoModel.from_pretrained(&#34;bert-base-uncased&#34;)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; inputs = tokenizer(&#34;Hello world!&#34;, return_tensors=&#34;pt&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; outputs = model(**inputs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is the equivalent code for TensorFlow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from transformers import AutoTokenizer, TFAutoModel&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; tokenizer = AutoTokenizer.from_pretrained(&#34;bert-base-uncased&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; model = TFAutoModel.from_pretrained(&#34;bert-base-uncased&#34;)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; inputs = tokenizer(&#34;Hello world!&#34;, return_tensors=&#34;tf&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; outputs = model(**inputs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tokenizer is responsible for all the preprocessing the pretrained model expects, and can be called directly on a single string (as in the above examples) or a list. It will output a dictionary that you can use in downstream code or simply directly pass to your model using the ** argument unpacking operator.&lt;/p&gt; &#xA;&lt;p&gt;The model itself is a regular &lt;a href=&#34;https://pytorch.org/docs/stable/nn.html#torch.nn.Module&#34;&gt;Pytorch &lt;code&gt;nn.Module&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/keras/Model&#34;&gt;TensorFlow &lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; (depending on your backend) which you can use as usual. &lt;a href=&#34;https://huggingface.co/docs/transformers/training&#34;&gt;This tutorial&lt;/a&gt; explains how to integrate such a model into a classic PyTorch or TensorFlow training loop, or how to use our &lt;code&gt;Trainer&lt;/code&gt; API to quickly fine-tune on a new dataset.&lt;/p&gt; &#xA;&lt;h2&gt;Why should I use transformers?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy-to-use state-of-the-art models:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;High performance on natural language understanding &amp;amp; generation, computer vision, and audio tasks.&lt;/li&gt; &#xA;   &lt;li&gt;Low barrier to entry for educators and practitioners.&lt;/li&gt; &#xA;   &lt;li&gt;Few user-facing abstractions with just three classes to learn.&lt;/li&gt; &#xA;   &lt;li&gt;A unified API for using all our pretrained models.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lower compute costs, smaller carbon footprint:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Researchers can share trained models instead of always retraining.&lt;/li&gt; &#xA;   &lt;li&gt;Practitioners can reduce compute time and production costs.&lt;/li&gt; &#xA;   &lt;li&gt;Dozens of architectures with over 60,000 pretrained models across all modalities.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose the right framework for every part of a model&#39;s lifetime:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Train state-of-the-art models in 3 lines of code.&lt;/li&gt; &#xA;   &lt;li&gt;Move a single model between TF2.0/PyTorch/JAX frameworks at will.&lt;/li&gt; &#xA;   &lt;li&gt;Seamlessly pick the right framework for training, evaluation and production.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easily customize a model or an example to your needs:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We provide examples for each architecture to reproduce the results published by its original authors.&lt;/li&gt; &#xA;   &lt;li&gt;Model internals are exposed as consistently as possible.&lt;/li&gt; &#xA;   &lt;li&gt;Model files can be used independently of the library for quick experiments.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why shouldn&#39;t I use transformers?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This library is not a modular toolbox of building blocks for neural nets. The code in the model files is not refactored with additional abstractions on purpose, so that researchers can quickly iterate on each of the models without diving into additional abstractions/files.&lt;/li&gt; &#xA; &lt;li&gt;The training API is not intended to work on any model but is optimized to work with the models provided by the library. For generic machine learning loops, you should use another library (possibly, &lt;a href=&#34;https://huggingface.co/docs/accelerate&#34;&gt;Accelerate&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;While we strive to present as many use cases as possible, the scripts in our &lt;a href=&#34;https://github.com/huggingface/transformers/tree/main/examples&#34;&gt;examples folder&lt;/a&gt; are just that: examples. It is expected that they won&#39;t work out-of-the box on your specific problem and that you will be required to change a few lines of code to adapt them to your needs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;With pip&lt;/h3&gt; &#xA;&lt;p&gt;This repository is tested on Python 3.6+, Flax 0.3.2+, PyTorch 1.3.1+ and TensorFlow 2.3+.&lt;/p&gt; &#xA;&lt;p&gt;You should install 🤗 Transformers in a &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;virtual environment&lt;/a&gt;. If you&#39;re unfamiliar with Python virtual environments, check out the &lt;a href=&#34;https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, create a virtual environment with the version of Python you&#39;re going to use and activate it.&lt;/p&gt; &#xA;&lt;p&gt;Then, you will need to install at least one of Flax, PyTorch or TensorFlow. Please refer to &lt;a href=&#34;https://www.tensorflow.org/install/&#34;&gt;TensorFlow installation page&lt;/a&gt;, &lt;a href=&#34;https://pytorch.org/get-started/locally/#start-locally&#34;&gt;PyTorch installation page&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/google/flax#quick-install&#34;&gt;Flax&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/jax#installation&#34;&gt;Jax&lt;/a&gt; installation pages regarding the specific install command for your platform.&lt;/p&gt; &#xA;&lt;p&gt;When one of those backends has been installed, 🤗 Transformers can be installed using pip as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install transformers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to play with the examples or need the bleeding edge of the code and can&#39;t wait for a new release, you must &lt;a href=&#34;https://huggingface.co/docs/transformers/installation#installing-from-source&#34;&gt;install the library from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;With conda&lt;/h3&gt; &#xA;&lt;p&gt;Since Transformers version v4.0.0, we now have a conda channel: &lt;code&gt;huggingface&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;🤗 Transformers can be installed using conda as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda install -c huggingface transformers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the installation pages of Flax, PyTorch or TensorFlow to see how to install them with conda.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; On Windows, you may be prompted to activate Developer Mode in order to benefit from caching. If this is not an option for you, please let us know in &lt;a href=&#34;https://github.com/huggingface/huggingface_hub/issues/1062&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Model architectures&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/models&#34;&gt;All the model checkpoints&lt;/a&gt;&lt;/strong&gt; provided by 🤗 Transformers are seamlessly integrated from the huggingface.co &lt;a href=&#34;https://huggingface.co&#34;&gt;model hub&lt;/a&gt; where they are uploaded directly by &lt;a href=&#34;https://huggingface.co/users&#34;&gt;users&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/organizations&#34;&gt;organizations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Current number of checkpoints: &lt;img src=&#34;https://img.shields.io/endpoint?url=https://huggingface.co/api/shields/models&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🤗 Transformers currently provides the following architectures (see &lt;a href=&#34;https://huggingface.co/docs/transformers/model_summary&#34;&gt;here&lt;/a&gt; for a high-level summary of each them):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/albert&#34;&gt;ALBERT&lt;/a&gt;&lt;/strong&gt; (from Google Research and the Toyota Technological Institute at Chicago) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1909.11942&#34;&gt;ALBERT: A Lite BERT for Self-supervised Learning of Language Representations&lt;/a&gt;, by Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bart&#34;&gt;BART&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1910.13461&#34;&gt;BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension&lt;/a&gt; by Mike Lewis, Yinhan Liu, Naman Goyal, Marjan Ghazvininejad, Abdelrahman Mohamed, Omer Levy, Ves Stoyanov and Luke Zettlemoyer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/barthez&#34;&gt;BARThez&lt;/a&gt;&lt;/strong&gt; (from École polytechnique) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.12321&#34;&gt;BARThez: a Skilled Pretrained French Sequence-to-Sequence Model&lt;/a&gt; by Moussa Kamal Eddine, Antoine J.-P. Tixier, Michalis Vazirgiannis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bartpho&#34;&gt;BARTpho&lt;/a&gt;&lt;/strong&gt; (from VinAI Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2109.09701&#34;&gt;BARTpho: Pre-trained Sequence-to-Sequence Models for Vietnamese&lt;/a&gt; by Nguyen Luong Tran, Duong Minh Le and Dat Quoc Nguyen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/beit&#34;&gt;BEiT&lt;/a&gt;&lt;/strong&gt; (from Microsoft) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2106.08254&#34;&gt;BEiT: BERT Pre-Training of Image Transformers&lt;/a&gt; by Hangbo Bao, Li Dong, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bert&#34;&gt;BERT&lt;/a&gt;&lt;/strong&gt; (from Google) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1810.04805&#34;&gt;BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding&lt;/a&gt; by Jacob Devlin, Ming-Wei Chang, Kenton Lee and Kristina Toutanova.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bert-generation&#34;&gt;BERT For Sequence Generation&lt;/a&gt;&lt;/strong&gt; (from Google) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1907.12461&#34;&gt;Leveraging Pre-trained Checkpoints for Sequence Generation Tasks&lt;/a&gt; by Sascha Rothe, Shashi Narayan, Aliaksei Severyn.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bertweet&#34;&gt;BERTweet&lt;/a&gt;&lt;/strong&gt; (from VinAI Research) released with the paper &lt;a href=&#34;https://aclanthology.org/2020.emnlp-demos.2/&#34;&gt;BERTweet: A pre-trained language model for English Tweets&lt;/a&gt; by Dat Quoc Nguyen, Thanh Vu and Anh Tuan Nguyen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bigbird_pegasus&#34;&gt;BigBird-Pegasus&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2007.14062&#34;&gt;Big Bird: Transformers for Longer Sequences&lt;/a&gt; by Manzil Zaheer, Guru Guruganesh, Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, Amr Ahmed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/big_bird&#34;&gt;BigBird-RoBERTa&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2007.14062&#34;&gt;Big Bird: Transformers for Longer Sequences&lt;/a&gt; by Manzil Zaheer, Guru Guruganesh, Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, Amr Ahmed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/blenderbot&#34;&gt;Blenderbot&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.13637&#34;&gt;Recipes for building an open-domain chatbot&lt;/a&gt; by Stephen Roller, Emily Dinan, Naman Goyal, Da Ju, Mary Williamson, Yinhan Liu, Jing Xu, Myle Ott, Kurt Shuster, Eric M. Smith, Y-Lan Boureau, Jason Weston.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/blenderbot-small&#34;&gt;BlenderbotSmall&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.13637&#34;&gt;Recipes for building an open-domain chatbot&lt;/a&gt; by Stephen Roller, Emily Dinan, Naman Goyal, Da Ju, Mary Williamson, Yinhan Liu, Jing Xu, Myle Ott, Kurt Shuster, Eric M. Smith, Y-Lan Boureau, Jason Weston.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bloom&#34;&gt;BLOOM&lt;/a&gt;&lt;/strong&gt; (from BigScience workshop) released by the &lt;a href=&#34;https://bigscience.huggingface.co/&#34;&gt;BigSicence Workshop&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/bort&#34;&gt;BORT&lt;/a&gt;&lt;/strong&gt; (from Alexa) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.10499&#34;&gt;Optimal Subarchitecture Extraction For BERT&lt;/a&gt; by Adrian de Wynter and Daniel J. Perry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/byt5&#34;&gt;ByT5&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2105.13626&#34;&gt;ByT5: Towards a token-free future with pre-trained byte-to-byte models&lt;/a&gt; by Linting Xue, Aditya Barua, Noah Constant, Rami Al-Rfou, Sharan Narang, Mihir Kale, Adam Roberts, Colin Raffel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/camembert&#34;&gt;CamemBERT&lt;/a&gt;&lt;/strong&gt; (from Inria/Facebook/Sorbonne) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1911.03894&#34;&gt;CamemBERT: a Tasty French Language Model&lt;/a&gt; by Louis Martin*, Benjamin Muller*, Pedro Javier Ortiz Suárez*, Yoann Dupont, Laurent Romary, Éric Villemonte de la Clergerie, Djamé Seddah and Benoît Sagot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/canine&#34;&gt;CANINE&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2103.06874&#34;&gt;CANINE: Pre-training an Efficient Tokenization-Free Encoder for Language Representation&lt;/a&gt; by Jonathan H. Clark, Dan Garrette, Iulia Turc, John Wieting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/clip&#34;&gt;CLIP&lt;/a&gt;&lt;/strong&gt; (from OpenAI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;Learning Transferable Visual Models From Natural Language Supervision&lt;/a&gt; by Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, Ilya Sutskever.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/codegen&#34;&gt;CodeGen&lt;/a&gt;&lt;/strong&gt; (from Salesforce) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2203.13474&#34;&gt;A Conversational Paradigm for Program Synthesis&lt;/a&gt; by Erik Nijkamp, Bo Pang, Hiroaki Hayashi, Lifu Tu, Huan Wang, Yingbo Zhou, Silvio Savarese, Caiming Xiong.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/conditional_detr&#34;&gt;Conditional DETR&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research Asia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2108.06152&#34;&gt;Conditional DETR for Fast Training Convergence&lt;/a&gt; by Depu Meng, Xiaokang Chen, Zejia Fan, Gang Zeng, Houqiang Li, Yuhui Yuan, Lei Sun, Jingdong Wang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/convbert&#34;&gt;ConvBERT&lt;/a&gt;&lt;/strong&gt; (from YituTech) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2008.02496&#34;&gt;ConvBERT: Improving BERT with Span-based Dynamic Convolution&lt;/a&gt; by Zihang Jiang, Weihao Yu, Daquan Zhou, Yunpeng Chen, Jiashi Feng, Shuicheng Yan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/convnext&#34;&gt;ConvNeXT&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2201.03545&#34;&gt;A ConvNet for the 2020s&lt;/a&gt; by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/cpm&#34;&gt;CPM&lt;/a&gt;&lt;/strong&gt; (from Tsinghua University) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2012.00413&#34;&gt;CPM: A Large-scale Generative Chinese Pre-trained Language Model&lt;/a&gt; by Zhengyan Zhang, Xu Han, Hao Zhou, Pei Ke, Yuxian Gu, Deming Ye, Yujia Qin, Yusheng Su, Haozhe Ji, Jian Guan, Fanchao Qi, Xiaozhi Wang, Yanan Zheng, Guoyang Zeng, Huanqi Cao, Shengqi Chen, Daixuan Li, Zhenbo Sun, Zhiyuan Liu, Minlie Huang, Wentao Han, Jie Tang, Juanzi Li, Xiaoyan Zhu, Maosong Sun.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/ctrl&#34;&gt;CTRL&lt;/a&gt;&lt;/strong&gt; (from Salesforce) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1909.05858&#34;&gt;CTRL: A Conditional Transformer Language Model for Controllable Generation&lt;/a&gt; by Nitish Shirish Keskar*, Bryan McCann*, Lav R. Varshney, Caiming Xiong and Richard Socher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/cvt&#34;&gt;CvT&lt;/a&gt;&lt;/strong&gt; (from Microsoft) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2103.15808&#34;&gt;CvT: Introducing Convolutions to Vision Transformers&lt;/a&gt; by Haiping Wu, Bin Xiao, Noel Codella, Mengchen Liu, Xiyang Dai, Lu Yuan, Lei Zhang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/data2vec&#34;&gt;Data2Vec&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2202.03555&#34;&gt;Data2Vec: A General Framework for Self-supervised Learning in Speech, Vision and Language&lt;/a&gt; by Alexei Baevski, Wei-Ning Hsu, Qiantong Xu, Arun Babu, Jiatao Gu, Michael Auli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/deberta&#34;&gt;DeBERTa&lt;/a&gt;&lt;/strong&gt; (from Microsoft) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2006.03654&#34;&gt;DeBERTa: Decoding-enhanced BERT with Disentangled Attention&lt;/a&gt; by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/deberta-v2&#34;&gt;DeBERTa-v2&lt;/a&gt;&lt;/strong&gt; (from Microsoft) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2006.03654&#34;&gt;DeBERTa: Decoding-enhanced BERT with Disentangled Attention&lt;/a&gt; by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/decision_transformer&#34;&gt;Decision Transformer&lt;/a&gt;&lt;/strong&gt; (from Berkeley/Facebook/Google) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2106.01345&#34;&gt;Decision Transformer: Reinforcement Learning via Sequence Modeling&lt;/a&gt; by Lili Chen, Kevin Lu, Aravind Rajeswaran, Kimin Lee, Aditya Grover, Michael Laskin, Pieter Abbeel, Aravind Srinivas, Igor Mordatch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/deformable_detr&#34;&gt;Deformable DETR&lt;/a&gt;&lt;/strong&gt; (from SenseTime Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.04159&#34;&gt;Deformable DETR: Deformable Transformers for End-to-End Object Detection&lt;/a&gt; by Xizhou Zhu, Weijie Su, Lewei Lu, Bin Li, Xiaogang Wang, Jifeng Dai.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/deit&#34;&gt;DeiT&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2012.12877&#34;&gt;Training data-efficient image transformers &amp;amp; distillation through attention&lt;/a&gt; by Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, Hervé Jégou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/detr&#34;&gt;DETR&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2005.12872&#34;&gt;End-to-End Object Detection with Transformers&lt;/a&gt; by Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, Sergey Zagoruyko.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/dialogpt&#34;&gt;DialoGPT&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1911.00536&#34;&gt;DialoGPT: Large-Scale Generative Pre-training for Conversational Response Generation&lt;/a&gt; by Yizhe Zhang, Siqi Sun, Michel Galley, Yen-Chun Chen, Chris Brockett, Xiang Gao, Jianfeng Gao, Jingjing Liu, Bill Dolan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/distilbert&#34;&gt;DistilBERT&lt;/a&gt;&lt;/strong&gt; (from HuggingFace), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/1910.01108&#34;&gt;DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter&lt;/a&gt; by Victor Sanh, Lysandre Debut and Thomas Wolf. The same method has been applied to compress GPT2 into &lt;a href=&#34;https://github.com/huggingface/transformers/tree/main/examples/research_projects/distillation&#34;&gt;DistilGPT2&lt;/a&gt;, RoBERTa into &lt;a href=&#34;https://github.com/huggingface/transformers/tree/main/examples/research_projects/distillation&#34;&gt;DistilRoBERTa&lt;/a&gt;, Multilingual BERT into &lt;a href=&#34;https://github.com/huggingface/transformers/tree/main/examples/research_projects/distillation&#34;&gt;DistilmBERT&lt;/a&gt; and a German version of DistilBERT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/dit&#34;&gt;DiT&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2203.02378&#34;&gt;DiT: Self-supervised Pre-training for Document Image Transformer&lt;/a&gt; by Junlong Li, Yiheng Xu, Tengchao Lv, Lei Cui, Cha Zhang, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/donut&#34;&gt;Donut&lt;/a&gt;&lt;/strong&gt; (from NAVER), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.15664&#34;&gt;OCR-free Document Understanding Transformer&lt;/a&gt; by Geewook Kim, Teakgyu Hong, Moonbin Yim, Jeongyeon Nam, Jinyoung Park, Jinyeong Yim, Wonseok Hwang, Sangdoo Yun, Dongyoon Han, Seunghyun Park.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/dpr&#34;&gt;DPR&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.04906&#34;&gt;Dense Passage Retrieval for Open-Domain Question Answering&lt;/a&gt; by Vladimir Karpukhin, Barlas Oğuz, Sewon Min, Patrick Lewis, Ledell Wu, Sergey Edunov, Danqi Chen, and Wen-tau Yih.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/master/model_doc/dpt&#34;&gt;DPT&lt;/a&gt;&lt;/strong&gt; (from Intel Labs) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2103.13413&#34;&gt;Vision Transformers for Dense Prediction&lt;/a&gt; by René Ranftl, Alexey Bochkovskiy, Vladlen Koltun.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/electra&#34;&gt;ELECTRA&lt;/a&gt;&lt;/strong&gt; (from Google Research/Stanford University) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2003.10555&#34;&gt;ELECTRA: Pre-training text encoders as discriminators rather than generators&lt;/a&gt; by Kevin Clark, Minh-Thang Luong, Quoc V. Le, Christopher D. Manning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/encoder-decoder&#34;&gt;EncoderDecoder&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1907.12461&#34;&gt;Leveraging Pre-trained Checkpoints for Sequence Generation Tasks&lt;/a&gt; by Sascha Rothe, Shashi Narayan, Aliaksei Severyn.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/ernie&#34;&gt;ERNIE&lt;/a&gt;&lt;/strong&gt; (from Baidu) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1904.09223&#34;&gt;ERNIE: Enhanced Representation through Knowledge Integration&lt;/a&gt; by Yu Sun, Shuohuan Wang, Yukun Li, Shikun Feng, Xuyi Chen, Han Zhang, Xin Tian, Danxiang Zhu, Hao Tian, Hua Wu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/esm&#34;&gt;ESM&lt;/a&gt;&lt;/strong&gt; (from Meta AI) are transformer protein language models. &lt;strong&gt;ESM-1b&lt;/strong&gt; was released with the paper &lt;a href=&#34;https://www.pnas.org/content/118/15/e2016239118&#34;&gt;Biological structure and function emerge from scaling unsupervised learning to 250 million protein sequences&lt;/a&gt; by Alexander Rives, Joshua Meier, Tom Sercu, Siddharth Goyal, Zeming Lin, Jason Liu, Demi Guo, Myle Ott, C. Lawrence Zitnick, Jerry Ma, and Rob Fergus. &lt;strong&gt;ESM-1v&lt;/strong&gt; was released with the paper &lt;a href=&#34;https://doi.org/10.1101/2021.07.09.450648&#34;&gt;Language models enable zero-shot prediction of the effects of mutations on protein function&lt;/a&gt; by Joshua Meier, Roshan Rao, Robert Verkuil, Jason Liu, Tom Sercu and Alexander Rives. &lt;strong&gt;ESM-2&lt;/strong&gt; was released with the paper &lt;a href=&#34;https://doi.org/10.1101/2022.07.20.500902&#34;&gt;Language models of protein sequences at the scale of evolution enable accurate structure prediction&lt;/a&gt; by Zeming Lin, Halil Akin, Roshan Rao, Brian Hie, Zhongkai Zhu, Wenting Lu, Allan dos Santos Costa, Maryam Fazel-Zarandi, Tom Sercu, Sal Candido, Alexander Rives.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/flaubert&#34;&gt;FlauBERT&lt;/a&gt;&lt;/strong&gt; (from CNRS) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1912.05372&#34;&gt;FlauBERT: Unsupervised Language Model Pre-training for French&lt;/a&gt; by Hang Le, Loïc Vial, Jibril Frej, Vincent Segonne, Maximin Coavoux, Benjamin Lecouteux, Alexandre Allauzen, Benoît Crabbé, Laurent Besacier, Didier Schwab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/flava&#34;&gt;FLAVA&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2112.04482&#34;&gt;FLAVA: A Foundational Language And Vision Alignment Model&lt;/a&gt; by Amanpreet Singh, Ronghang Hu, Vedanuj Goswami, Guillaume Couairon, Wojciech Galuba, Marcus Rohrbach, and Douwe Kiela.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/fnet&#34;&gt;FNet&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2105.03824&#34;&gt;FNet: Mixing Tokens with Fourier Transforms&lt;/a&gt; by James Lee-Thorp, Joshua Ainslie, Ilya Eckstein, Santiago Ontanon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/funnel&#34;&gt;Funnel Transformer&lt;/a&gt;&lt;/strong&gt; (from CMU/Google Brain) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2006.03236&#34;&gt;Funnel-Transformer: Filtering out Sequential Redundancy for Efficient Language Processing&lt;/a&gt; by Zihang Dai, Guokun Lai, Yiming Yang, Quoc V. Le.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/glpn&#34;&gt;GLPN&lt;/a&gt;&lt;/strong&gt; (from KAIST) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2201.07436&#34;&gt;Global-Local Path Networks for Monocular Depth Estimation with Vertical CutDepth&lt;/a&gt; by Doyeon Kim, Woonghyun Ga, Pyungwhan Ahn, Donggyu Joo, Sehwan Chun, Junmo Kim.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/openai-gpt&#34;&gt;GPT&lt;/a&gt;&lt;/strong&gt; (from OpenAI) released with the paper &lt;a href=&#34;https://blog.openai.com/language-unsupervised/&#34;&gt;Improving Language Understanding by Generative Pre-Training&lt;/a&gt; by Alec Radford, Karthik Narasimhan, Tim Salimans and Ilya Sutskever.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/gpt_neo&#34;&gt;GPT Neo&lt;/a&gt;&lt;/strong&gt; (from EleutherAI) released in the repository &lt;a href=&#34;https://github.com/EleutherAI/gpt-neo&#34;&gt;EleutherAI/gpt-neo&lt;/a&gt; by Sid Black, Stella Biderman, Leo Gao, Phil Wang and Connor Leahy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/gpt_neox&#34;&gt;GPT NeoX&lt;/a&gt;&lt;/strong&gt; (from EleutherAI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2204.06745&#34;&gt;GPT-NeoX-20B: An Open-Source Autoregressive Language Model&lt;/a&gt; by Sid Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor Leahy, Kyle McDonell, Jason Phang, Michael Pieler, USVSN Sai Prashanth, Shivanshu Purohit, Laria Reynolds, Jonathan Tow, Ben Wang, Samuel Weinbach&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/gpt_neox_japanese&#34;&gt;GPT NeoX Japanese&lt;/a&gt;&lt;/strong&gt; (from ABEJA) released by Shinya Otani, Takayoshi Makabe, Anuj Arora, and Kyo Hattori.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/gpt2&#34;&gt;GPT-2&lt;/a&gt;&lt;/strong&gt; (from OpenAI) released with the paper &lt;a href=&#34;https://blog.openai.com/better-language-models/&#34;&gt;Language Models are Unsupervised Multitask Learners&lt;/a&gt; by Alec Radford*, Jeffrey Wu*, Rewon Child, David Luan, Dario Amodei** and Ilya Sutskever**.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/gptj&#34;&gt;GPT-J&lt;/a&gt;&lt;/strong&gt; (from EleutherAI) released in the repository &lt;a href=&#34;https://github.com/kingoflolz/mesh-transformer-jax/&#34;&gt;kingoflolz/mesh-transformer-jax&lt;/a&gt; by Ben Wang and Aran Komatsuzaki.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/groupvit&#34;&gt;GroupViT&lt;/a&gt;&lt;/strong&gt; (from UCSD, NVIDIA) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2202.11094&#34;&gt;GroupViT: Semantic Segmentation Emerges from Text Supervision&lt;/a&gt; by Jiarui Xu, Shalini De Mello, Sifei Liu, Wonmin Byeon, Thomas Breuel, Jan Kautz, Xiaolong Wang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/hubert&#34;&gt;Hubert&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2106.07447&#34;&gt;HuBERT: Self-Supervised Speech Representation Learning by Masked Prediction of Hidden Units&lt;/a&gt; by Wei-Ning Hsu, Benjamin Bolte, Yao-Hung Hubert Tsai, Kushal Lakhotia, Ruslan Salakhutdinov, Abdelrahman Mohamed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/ibert&#34;&gt;I-BERT&lt;/a&gt;&lt;/strong&gt; (from Berkeley) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2101.01321&#34;&gt;I-BERT: Integer-only BERT Quantization&lt;/a&gt; by Sehoon Kim, Amir Gholami, Zhewei Yao, Michael W. Mahoney, Kurt Keutzer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/imagegpt&#34;&gt;ImageGPT&lt;/a&gt;&lt;/strong&gt; (from OpenAI) released with the paper &lt;a href=&#34;https://openai.com/blog/image-gpt/&#34;&gt;Generative Pretraining from Pixels&lt;/a&gt; by Mark Chen, Alec Radford, Rewon Child, Jeffrey Wu, Heewoo Jun, David Luan, Ilya Sutskever.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/layoutlm&#34;&gt;LayoutLM&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research Asia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1912.13318&#34;&gt;LayoutLM: Pre-training of Text and Layout for Document Image Understanding&lt;/a&gt; by Yiheng Xu, Minghao Li, Lei Cui, Shaohan Huang, Furu Wei, Ming Zhou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/layoutlmv2&#34;&gt;LayoutLMv2&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research Asia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2012.14740&#34;&gt;LayoutLMv2: Multi-modal Pre-training for Visually-Rich Document Understanding&lt;/a&gt; by Yang Xu, Yiheng Xu, Tengchao Lv, Lei Cui, Furu Wei, Guoxin Wang, Yijuan Lu, Dinei Florencio, Cha Zhang, Wanxiang Che, Min Zhang, Lidong Zhou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/layoutlmv3&#34;&gt;LayoutLMv3&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research Asia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2204.08387&#34;&gt;LayoutLMv3: Pre-training for Document AI with Unified Text and Image Masking&lt;/a&gt; by Yupan Huang, Tengchao Lv, Lei Cui, Yutong Lu, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/layoutxlm&#34;&gt;LayoutXLM&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research Asia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2104.08836&#34;&gt;LayoutXLM: Multimodal Pre-training for Multilingual Visually-rich Document Understanding&lt;/a&gt; by Yiheng Xu, Tengchao Lv, Lei Cui, Guoxin Wang, Yijuan Lu, Dinei Florencio, Cha Zhang, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/led&#34;&gt;LED&lt;/a&gt;&lt;/strong&gt; (from AllenAI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.05150&#34;&gt;Longformer: The Long-Document Transformer&lt;/a&gt; by Iz Beltagy, Matthew E. Peters, Arman Cohan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/levit&#34;&gt;LeViT&lt;/a&gt;&lt;/strong&gt; (from Meta AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2104.01136&#34;&gt;LeViT: A Vision Transformer in ConvNet&#39;s Clothing for Faster Inference&lt;/a&gt; by Ben Graham, Alaaeldin El-Nouby, Hugo Touvron, Pierre Stock, Armand Joulin, Hervé Jégou, Matthijs Douze.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/longformer&#34;&gt;Longformer&lt;/a&gt;&lt;/strong&gt; (from AllenAI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.05150&#34;&gt;Longformer: The Long-Document Transformer&lt;/a&gt; by Iz Beltagy, Matthew E. Peters, Arman Cohan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/longt5&#34;&gt;LongT5&lt;/a&gt;&lt;/strong&gt; (from Google AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2112.07916&#34;&gt;LongT5: Efficient Text-To-Text Transformer for Long Sequences&lt;/a&gt; by Mandy Guo, Joshua Ainslie, David Uthus, Santiago Ontanon, Jianmo Ni, Yun-Hsuan Sung, Yinfei Yang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/luke&#34;&gt;LUKE&lt;/a&gt;&lt;/strong&gt; (from Studio Ousia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.01057&#34;&gt;LUKE: Deep Contextualized Entity Representations with Entity-aware Self-attention&lt;/a&gt; by Ikuya Yamada, Akari Asai, Hiroyuki Shindo, Hideaki Takeda, Yuji Matsumoto.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/lxmert&#34;&gt;LXMERT&lt;/a&gt;&lt;/strong&gt; (from UNC Chapel Hill) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1908.07490&#34;&gt;LXMERT: Learning Cross-Modality Encoder Representations from Transformers for Open-Domain Question Answering&lt;/a&gt; by Hao Tan and Mohit Bansal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mctct&#34;&gt;M-CTC-T&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.00161&#34;&gt;Pseudo-Labeling For Massively Multilingual Speech Recognition&lt;/a&gt; by Loren Lugosch, Tatiana Likhomanenko, Gabriel Synnaeve, and Ronan Collobert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/m2m_100&#34;&gt;M2M100&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.11125&#34;&gt;Beyond English-Centric Multilingual Machine Translation&lt;/a&gt; by Angela Fan, Shruti Bhosale, Holger Schwenk, Zhiyi Ma, Ahmed El-Kishky, Siddharth Goyal, Mandeep Baines, Onur Celebi, Guillaume Wenzek, Vishrav Chaudhary, Naman Goyal, Tom Birch, Vitaliy Liptchinsky, Sergey Edunov, Edouard Grave, Michael Auli, Armand Joulin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/marian&#34;&gt;MarianMT&lt;/a&gt;&lt;/strong&gt; Machine translation models trained using &lt;a href=&#34;http://opus.nlpl.eu/&#34;&gt;OPUS&lt;/a&gt; data by Jörg Tiedemann. The &lt;a href=&#34;https://marian-nmt.github.io/&#34;&gt;Marian Framework&lt;/a&gt; is being developed by the Microsoft Translator Team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/markuplm&#34;&gt;MarkupLM&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research Asia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2110.08518&#34;&gt;MarkupLM: Pre-training of Text and Markup Language for Visually-rich Document Understanding&lt;/a&gt; by Junlong Li, Yiheng Xu, Lei Cui, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/maskformer&#34;&gt;MaskFormer&lt;/a&gt;&lt;/strong&gt; (from Meta and UIUC) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2107.06278&#34;&gt;Per-Pixel Classification is Not All You Need for Semantic Segmentation&lt;/a&gt; by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mbart&#34;&gt;mBART&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2001.08210&#34;&gt;Multilingual Denoising Pre-training for Neural Machine Translation&lt;/a&gt; by Yinhan Liu, Jiatao Gu, Naman Goyal, Xian Li, Sergey Edunov, Marjan Ghazvininejad, Mike Lewis, Luke Zettlemoyer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mbart&#34;&gt;mBART-50&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2008.00401&#34;&gt;Multilingual Translation with Extensible Multilingual Pretraining and Finetuning&lt;/a&gt; by Yuqing Tang, Chau Tran, Xian Li, Peng-Jen Chen, Naman Goyal, Vishrav Chaudhary, Jiatao Gu, Angela Fan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/megatron-bert&#34;&gt;Megatron-BERT&lt;/a&gt;&lt;/strong&gt; (from NVIDIA) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1909.08053&#34;&gt;Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism&lt;/a&gt; by Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper and Bryan Catanzaro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/megatron_gpt2&#34;&gt;Megatron-GPT2&lt;/a&gt;&lt;/strong&gt; (from NVIDIA) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1909.08053&#34;&gt;Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism&lt;/a&gt; by Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper and Bryan Catanzaro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mluke&#34;&gt;mLUKE&lt;/a&gt;&lt;/strong&gt; (from Studio Ousia) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2110.08151&#34;&gt;mLUKE: The Power of Entity Representations in Multilingual Pretrained Language Models&lt;/a&gt; by Ryokan Ri, Ikuya Yamada, and Yoshimasa Tsuruoka.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mobilebert&#34;&gt;MobileBERT&lt;/a&gt;&lt;/strong&gt; (from CMU/Google Brain) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.02984&#34;&gt;MobileBERT: a Compact Task-Agnostic BERT for Resource-Limited Devices&lt;/a&gt; by Zhiqing Sun, Hongkun Yu, Xiaodan Song, Renjie Liu, Yiming Yang, and Denny Zhou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mobilevit&#34;&gt;MobileViT&lt;/a&gt;&lt;/strong&gt; (from Apple) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2110.02178&#34;&gt;MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer&lt;/a&gt; by Sachin Mehta and Mohammad Rastegari.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mpnet&#34;&gt;MPNet&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.09297&#34;&gt;MPNet: Masked and Permuted Pre-training for Language Understanding&lt;/a&gt; by Kaitao Song, Xu Tan, Tao Qin, Jianfeng Lu, Tie-Yan Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mt5&#34;&gt;MT5&lt;/a&gt;&lt;/strong&gt; (from Google AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.11934&#34;&gt;mT5: A massively multilingual pre-trained text-to-text transformer&lt;/a&gt; by Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya Siddhant, Aditya Barua, Colin Raffel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/mvp&#34;&gt;MVP&lt;/a&gt;&lt;/strong&gt; (from RUC AI Box) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2206.12131&#34;&gt;MVP: Multi-task Supervised Pre-training for Natural Language Generation&lt;/a&gt; by Tianyi Tang, Junyi Li, Wayne Xin Zhao and Ji-Rong Wen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/nezha&#34;&gt;Nezha&lt;/a&gt;&lt;/strong&gt; (from Huawei Noah’s Ark Lab) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1909.00204&#34;&gt;NEZHA: Neural Contextualized Representation for Chinese Language Understanding&lt;/a&gt; by Junqiu Wei, Xiaozhe Ren, Xiaoguang Li, Wenyong Huang, Yi Liao, Yasheng Wang, Jiashu Lin, Xin Jiang, Xiao Chen and Qun Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/nllb&#34;&gt;NLLB&lt;/a&gt;&lt;/strong&gt; (from Meta) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2207.04672&#34;&gt;No Language Left Behind: Scaling Human-Centered Machine Translation&lt;/a&gt; by the NLLB team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/nystromformer&#34;&gt;Nyströmformer&lt;/a&gt;&lt;/strong&gt; (from the University of Wisconsin - Madison) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2102.03902&#34;&gt;Nyströmformer: A Nyström-Based Algorithm for Approximating Self-Attention&lt;/a&gt; by Yunyang Xiong, Zhanpeng Zeng, Rudrasis Chakraborty, Mingxing Tan, Glenn Fung, Yin Li, Vikas Singh.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/master/model_doc/opt&#34;&gt;OPT&lt;/a&gt;&lt;/strong&gt; (from Meta AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2205.01068&#34;&gt;OPT: Open Pre-trained Transformer Language Models&lt;/a&gt; by Susan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen, Shuohui Chen et al.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/owlvit&#34;&gt;OWL-ViT&lt;/a&gt;&lt;/strong&gt; (from Google AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2205.06230&#34;&gt;Simple Open-Vocabulary Object Detection with Vision Transformers&lt;/a&gt; by Matthias Minderer, Alexey Gritsenko, Austin Stone, Maxim Neumann, Dirk Weissenborn, Alexey Dosovitskiy, Aravindh Mahendran, Anurag Arnab, Mostafa Dehghani, Zhuoran Shen, Xiao Wang, Xiaohua Zhai, Thomas Kipf, and Neil Houlsby.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/pegasus&#34;&gt;Pegasus&lt;/a&gt;&lt;/strong&gt; (from Google) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1912.08777&#34;&gt;PEGASUS: Pre-training with Extracted Gap-sentences for Abstractive Summarization&lt;/a&gt; by Jingqing Zhang, Yao Zhao, Mohammad Saleh and Peter J. Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/pegasus_x&#34;&gt;PEGASUS-X&lt;/a&gt;&lt;/strong&gt; (from Google) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2208.04347&#34;&gt;Investigating Efficiently Extending Transformers for Long Input Summarization&lt;/a&gt; by Jason Phang, Yao Zhao, and Peter J. Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/perceiver&#34;&gt;Perceiver IO&lt;/a&gt;&lt;/strong&gt; (from Deepmind) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2107.14795&#34;&gt;Perceiver IO: A General Architecture for Structured Inputs &amp;amp; Outputs&lt;/a&gt; by Andrew Jaegle, Sebastian Borgeaud, Jean-Baptiste Alayrac, Carl Doersch, Catalin Ionescu, David Ding, Skanda Koppula, Daniel Zoran, Andrew Brock, Evan Shelhamer, Olivier Hénaff, Matthew M. Botvinick, Andrew Zisserman, Oriol Vinyals, João Carreira.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/phobert&#34;&gt;PhoBERT&lt;/a&gt;&lt;/strong&gt; (from VinAI Research) released with the paper &lt;a href=&#34;https://www.aclweb.org/anthology/2020.findings-emnlp.92/&#34;&gt;PhoBERT: Pre-trained language models for Vietnamese&lt;/a&gt; by Dat Quoc Nguyen and Anh Tuan Nguyen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/plbart&#34;&gt;PLBart&lt;/a&gt;&lt;/strong&gt; (from UCLA NLP) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2103.06333&#34;&gt;Unified Pre-training for Program Understanding and Generation&lt;/a&gt; by Wasi Uddin Ahmad, Saikat Chakraborty, Baishakhi Ray, Kai-Wei Chang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/poolformer&#34;&gt;PoolFormer&lt;/a&gt;&lt;/strong&gt; (from Sea AI Labs) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.11418&#34;&gt;MetaFormer is Actually What You Need for Vision&lt;/a&gt; by Yu, Weihao and Luo, Mi and Zhou, Pan and Si, Chenyang and Zhou, Yichen and Wang, Xinchao and Feng, Jiashi and Yan, Shuicheng.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/prophetnet&#34;&gt;ProphetNet&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2001.04063&#34;&gt;ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training&lt;/a&gt; by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei Zhang and Ming Zhou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/qdqbert&#34;&gt;QDQBert&lt;/a&gt;&lt;/strong&gt; (from NVIDIA) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.09602&#34;&gt;Integer Quantization for Deep Learning Inference: Principles and Empirical Evaluation&lt;/a&gt; by Hao Wu, Patrick Judd, Xiaojie Zhang, Mikhail Isaev and Paulius Micikevicius.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/rag&#34;&gt;RAG&lt;/a&gt;&lt;/strong&gt; (from Facebook) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2005.11401&#34;&gt;Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks&lt;/a&gt; by Patrick Lewis, Ethan Perez, Aleksandara Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel, Sebastian Riedel, Douwe Kiela.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/realm.html&#34;&gt;REALM&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2002.08909&#34;&gt;REALM: Retrieval-Augmented Language Model Pre-Training&lt;/a&gt; by Kelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat and Ming-Wei Chang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/reformer&#34;&gt;Reformer&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2001.04451&#34;&gt;Reformer: The Efficient Transformer&lt;/a&gt; by Nikita Kitaev, Łukasz Kaiser, Anselm Levskaya.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/regnet&#34;&gt;RegNet&lt;/a&gt;&lt;/strong&gt; (from META Platforms) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2003.13678&#34;&gt;Designing Network Design Space&lt;/a&gt; by Ilija Radosavovic, Raj Prateek Kosaraju, Ross Girshick, Kaiming He, Piotr Dollár.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/rembert&#34;&gt;RemBERT&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.12821&#34;&gt;Rethinking embedding coupling in pre-trained language models&lt;/a&gt; by Hyung Won Chung, Thibault Févry, Henry Tsai, M. Johnson, Sebastian Ruder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/resnet&#34;&gt;ResNet&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;Deep Residual Learning for Image Recognition&lt;/a&gt; by Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/roberta&#34;&gt;RoBERTa&lt;/a&gt;&lt;/strong&gt; (from Facebook), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/1907.11692&#34;&gt;RoBERTa: A Robustly Optimized BERT Pretraining Approach&lt;/a&gt; by Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, Veselin Stoyanov.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/roformer&#34;&gt;RoFormer&lt;/a&gt;&lt;/strong&gt; (from ZhuiyiTechnology), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2104.09864&#34;&gt;RoFormer: Enhanced Transformer with Rotary Position Embedding&lt;/a&gt; by Jianlin Su and Yu Lu and Shengfeng Pan and Bo Wen and Yunfeng Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/segformer&#34;&gt;SegFormer&lt;/a&gt;&lt;/strong&gt; (from NVIDIA) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2105.15203&#34;&gt;SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers&lt;/a&gt; by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping Luo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/sew&#34;&gt;SEW&lt;/a&gt;&lt;/strong&gt; (from ASAPP) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2109.06870&#34;&gt;Performance-Efficiency Trade-offs in Unsupervised Pre-training for Speech Recognition&lt;/a&gt; by Felix Wu, Kwangyoun Kim, Jing Pan, Kyu Han, Kilian Q. Weinberger, Yoav Artzi.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/sew_d&#34;&gt;SEW-D&lt;/a&gt;&lt;/strong&gt; (from ASAPP) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2109.06870&#34;&gt;Performance-Efficiency Trade-offs in Unsupervised Pre-training for Speech Recognition&lt;/a&gt; by Felix Wu, Kwangyoun Kim, Jing Pan, Kyu Han, Kilian Q. Weinberger, Yoav Artzi.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/speech_to_text&#34;&gt;SpeechToTextTransformer&lt;/a&gt;&lt;/strong&gt; (from Facebook), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.05171&#34;&gt;fairseq S2T: Fast Speech-to-Text Modeling with fairseq&lt;/a&gt; by Changhan Wang, Yun Tang, Xutai Ma, Anne Wu, Dmytro Okhonko, Juan Pino.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/speech_to_text_2&#34;&gt;SpeechToTextTransformer2&lt;/a&gt;&lt;/strong&gt; (from Facebook), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2104.06678&#34;&gt;Large-Scale Self- and Semi-Supervised Learning for Speech Translation&lt;/a&gt; by Changhan Wang, Anne Wu, Juan Pino, Alexei Baevski, Michael Auli, Alexis Conneau.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/splinter&#34;&gt;Splinter&lt;/a&gt;&lt;/strong&gt; (from Tel Aviv University), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2101.00438&#34;&gt;Few-Shot Question Answering by Pretraining Span Selection&lt;/a&gt; by Ori Ram, Yuval Kirstain, Jonathan Berant, Amir Globerson, Omer Levy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/squeezebert&#34;&gt;SqueezeBERT&lt;/a&gt;&lt;/strong&gt; (from Berkeley) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2006.11316&#34;&gt;SqueezeBERT: What can computer vision teach NLP about efficient neural networks?&lt;/a&gt; by Forrest N. Iandola, Albert E. Shaw, Ravi Krishna, and Kurt W. Keutzer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/swin&#34;&gt;Swin Transformer&lt;/a&gt;&lt;/strong&gt; (from Microsoft) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2103.14030&#34;&gt;Swin Transformer: Hierarchical Vision Transformer using Shifted Windows&lt;/a&gt; by Ze Liu, Yutong Lin, Yue Cao, Han Hu, Yixuan Wei, Zheng Zhang, Stephen Lin, Baining Guo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/swinv2&#34;&gt;Swin Transformer V2&lt;/a&gt;&lt;/strong&gt; (from Microsoft) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.09883&#34;&gt;Swin Transformer V2: Scaling Up Capacity and Resolution&lt;/a&gt; by Ze Liu, Han Hu, Yutong Lin, Zhuliang Yao, Zhenda Xie, Yixuan Wei, Jia Ning, Yue Cao, Zheng Zhang, Li Dong, Furu Wei, Baining Guo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/t5&#34;&gt;T5&lt;/a&gt;&lt;/strong&gt; (from Google AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1910.10683&#34;&gt;Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer&lt;/a&gt; by Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/t5v1.1&#34;&gt;T5v1.1&lt;/a&gt;&lt;/strong&gt; (from Google AI) released in the repository &lt;a href=&#34;https://github.com/google-research/text-to-text-transfer-transformer/raw/main/released_checkpoints.md#t511&#34;&gt;google-research/text-to-text-transfer-transformer&lt;/a&gt; by Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/tapas&#34;&gt;TAPAS&lt;/a&gt;&lt;/strong&gt; (from Google AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2004.02349&#34;&gt;TAPAS: Weakly Supervised Table Parsing via Pre-training&lt;/a&gt; by Jonathan Herzig, Paweł Krzysztof Nowak, Thomas Müller, Francesco Piccinno and Julian Martin Eisenschlos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/tapex&#34;&gt;TAPEX&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2107.07653&#34;&gt;TAPEX: Table Pre-training via Learning a Neural SQL Executor&lt;/a&gt; by Qian Liu, Bei Chen, Jiaqi Guo, Morteza Ziyadi, Zeqi Lin, Weizhu Chen, Jian-Guang Lou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/time_series_transformer&#34;&gt;Time Series Transformer&lt;/a&gt;&lt;/strong&gt; (from HuggingFace).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/trajectory_transformers&#34;&gt;Trajectory Transformer&lt;/a&gt;&lt;/strong&gt; (from the University of California at Berkeley) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2106.02039&#34;&gt;Offline Reinforcement Learning as One Big Sequence Modeling Problem&lt;/a&gt; by Michael Janner, Qiyang Li, Sergey Levine&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/transfo-xl&#34;&gt;Transformer-XL&lt;/a&gt;&lt;/strong&gt; (from Google/CMU) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1901.02860&#34;&gt;Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context&lt;/a&gt; by Zihang Dai*, Zhilin Yang*, Yiming Yang, Jaime Carbonell, Quoc V. Le, Ruslan Salakhutdinov.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/trocr&#34;&gt;TrOCR&lt;/a&gt;&lt;/strong&gt; (from Microsoft), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2109.10282&#34;&gt;TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models&lt;/a&gt; by Minghao Li, Tengchao Lv, Lei Cui, Yijuan Lu, Dinei Florencio, Cha Zhang, Zhoujun Li, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/ul2&#34;&gt;UL2&lt;/a&gt;&lt;/strong&gt; (from Google Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2205.05131v1&#34;&gt;Unifying Language Learning Paradigms&lt;/a&gt; by Yi Tay, Mostafa Dehghani, Vinh Q. Tran, Xavier Garcia, Dara Bahri, Tal Schuster, Huaixiu Steven Zheng, Neil Houlsby, Donald Metzler&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/unispeech&#34;&gt;UniSpeech&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2101.07597&#34;&gt;UniSpeech: Unified Speech Representation Learning with Labeled and Unlabeled Data&lt;/a&gt; by Chengyi Wang, Yu Wu, Yao Qian, Kenichi Kumatani, Shujie Liu, Furu Wei, Michael Zeng, Xuedong Huang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/unispeech-sat&#34;&gt;UniSpeechSat&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2110.05752&#34;&gt;UNISPEECH-SAT: UNIVERSAL SPEECH REPRESENTATION LEARNING WITH SPEAKER AWARE PRE-TRAINING&lt;/a&gt; by Sanyuan Chen, Yu Wu, Chengyi Wang, Zhengyang Chen, Zhuo Chen, Shujie Liu, Jian Wu, Yao Qian, Furu Wei, Jinyu Li, Xiangzhan Yu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/van&#34;&gt;VAN&lt;/a&gt;&lt;/strong&gt; (from Tsinghua University and Nankai University) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2202.09741&#34;&gt;Visual Attention Network&lt;/a&gt; by Meng-Hao Guo, Cheng-Ze Lu, Zheng-Ning Liu, Ming-Ming Cheng, Shi-Min Hu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/videomae&#34;&gt;VideoMAE&lt;/a&gt;&lt;/strong&gt; (from Multimedia Computing Group, Nanjing University) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2203.12602&#34;&gt;VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training&lt;/a&gt; by Zhan Tong, Yibing Song, Jue Wang, Limin Wang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/vilt&#34;&gt;ViLT&lt;/a&gt;&lt;/strong&gt; (from NAVER AI Lab/Kakao Enterprise/Kakao Brain) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2102.03334&#34;&gt;ViLT: Vision-and-Language Transformer Without Convolution or Region Supervision&lt;/a&gt; by Wonjae Kim, Bokyung Son, Ildoo Kim.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/vit&#34;&gt;Vision Transformer (ViT)&lt;/a&gt;&lt;/strong&gt; (from Google AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.11929&#34;&gt;An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale&lt;/a&gt; by Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/visual_bert&#34;&gt;VisualBERT&lt;/a&gt;&lt;/strong&gt; (from UCLA NLP) released with the paper &lt;a href=&#34;https://arxiv.org/pdf/1908.03557&#34;&gt;VisualBERT: A Simple and Performant Baseline for Vision and Language&lt;/a&gt; by Liunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, Kai-Wei Chang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/vit_mae&#34;&gt;ViTMAE&lt;/a&gt;&lt;/strong&gt; (from Meta AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.06377&#34;&gt;Masked Autoencoders Are Scalable Vision Learners&lt;/a&gt; by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li, Piotr Dollár, Ross Girshick.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/vit_msn&#34;&gt;ViTMSN&lt;/a&gt;&lt;/strong&gt; (from Meta AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2204.07141&#34;&gt;Masked Siamese Networks for Label-Efficient Learning&lt;/a&gt; by Mahmoud Assran, Mathilde Caron, Ishan Misra, Piotr Bojanowski, Florian Bordes, Pascal Vincent, Armand Joulin, Michael Rabbat, Nicolas Ballas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/wav2vec2&#34;&gt;Wav2Vec2&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2006.11477&#34;&gt;wav2vec 2.0: A Framework for Self-Supervised Learning of Speech Representations&lt;/a&gt; by Alexei Baevski, Henry Zhou, Abdelrahman Mohamed, Michael Auli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/wav2vec2-conformer&#34;&gt;Wav2Vec2-Conformer&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2010.05171&#34;&gt;FAIRSEQ S2T: Fast Speech-to-Text Modeling with FAIRSEQ&lt;/a&gt; by Changhan Wang, Yun Tang, Xutai Ma, Anne Wu, Sravya Popuri, Dmytro Okhonko, Juan Pino.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/wav2vec2_phoneme&#34;&gt;Wav2Vec2Phoneme&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2109.11680&#34;&gt;Simple and Effective Zero-shot Cross-lingual Phoneme Recognition&lt;/a&gt; by Qiantong Xu, Alexei Baevski, Michael Auli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/wavlm&#34;&gt;WavLM&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2110.13900&#34;&gt;WavLM: Large-Scale Self-Supervised Pre-Training for Full Stack Speech Processing&lt;/a&gt; by Sanyuan Chen, Chengyi Wang, Zhengyang Chen, Yu Wu, Shujie Liu, Zhuo Chen, Jinyu Li, Naoyuki Kanda, Takuya Yoshioka, Xiong Xiao, Jian Wu, Long Zhou, Shuo Ren, Yanmin Qian, Yao Qian, Jian Wu, Michael Zeng, Furu Wei.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xclip&#34;&gt;X-CLIP&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2208.02816&#34;&gt;Expanding Language-Image Pretrained Models for General Video Recognition&lt;/a&gt; by Bolin Ni, Houwen Peng, Minghao Chen, Songyang Zhang, Gaofeng Meng, Jianlong Fu, Shiming Xiang, Haibin Ling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xglm&#34;&gt;XGLM&lt;/a&gt;&lt;/strong&gt; (From Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2112.10668&#34;&gt;Few-shot Learning with Multilingual Language Models&lt;/a&gt; by Xi Victoria Lin, Todor Mihaylov, Mikel Artetxe, Tianlu Wang, Shuohui Chen, Daniel Simig, Myle Ott, Naman Goyal, Shruti Bhosale, Jingfei Du, Ramakanth Pasunuru, Sam Shleifer, Punit Singh Koura, Vishrav Chaudhary, Brian O&#39;Horo, Jeff Wang, Luke Zettlemoyer, Zornitsa Kozareva, Mona Diab, Veselin Stoyanov, Xian Li.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xlm&#34;&gt;XLM&lt;/a&gt;&lt;/strong&gt; (from Facebook) released together with the paper &lt;a href=&#34;https://arxiv.org/abs/1901.07291&#34;&gt;Cross-lingual Language Model Pretraining&lt;/a&gt; by Guillaume Lample and Alexis Conneau.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xlm-prophetnet&#34;&gt;XLM-ProphetNet&lt;/a&gt;&lt;/strong&gt; (from Microsoft Research) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2001.04063&#34;&gt;ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training&lt;/a&gt; by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei Zhang and Ming Zhou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xlm-roberta&#34;&gt;XLM-RoBERTa&lt;/a&gt;&lt;/strong&gt; (from Facebook AI), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/1911.02116&#34;&gt;Unsupervised Cross-lingual Representation Learning at Scale&lt;/a&gt; by Alexis Conneau*, Kartikay Khandelwal*, Naman Goyal, Vishrav Chaudhary, Guillaume Wenzek, Francisco Guzmán, Edouard Grave, Myle Ott, Luke Zettlemoyer and Veselin Stoyanov.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xlm-roberta-xl&#34;&gt;XLM-RoBERTa-XL&lt;/a&gt;&lt;/strong&gt; (from Facebook AI), released together with the paper &lt;a href=&#34;https://arxiv.org/abs/2105.00572&#34;&gt;Larger-Scale Transformers for Multilingual Masked Language Modeling&lt;/a&gt; by Naman Goyal, Jingfei Du, Myle Ott, Giri Anantharaman, Alexis Conneau.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xlnet&#34;&gt;XLNet&lt;/a&gt;&lt;/strong&gt; (from Google/CMU) released with the paper &lt;a href=&#34;https://arxiv.org/abs/1906.08237&#34;&gt;​XLNet: Generalized Autoregressive Pretraining for Language Understanding&lt;/a&gt; by Zhilin Yang*, Zihang Dai*, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, Quoc V. Le.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xls_r&#34;&gt;XLS-R&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.09296&#34;&gt;XLS-R: Self-supervised Cross-lingual Speech Representation Learning at Scale&lt;/a&gt; by Arun Babu, Changhan Wang, Andros Tjandra, Kushal Lakhotia, Qiantong Xu, Naman Goyal, Kritika Singh, Patrick von Platen, Yatharth Saraf, Juan Pino, Alexei Baevski, Alexis Conneau, Michael Auli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/xlsr_wav2vec2&#34;&gt;XLSR-Wav2Vec2&lt;/a&gt;&lt;/strong&gt; (from Facebook AI) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2006.13979&#34;&gt;Unsupervised Cross-Lingual Representation Learning For Speech Recognition&lt;/a&gt; by Alexis Conneau, Alexei Baevski, Ronan Collobert, Abdelrahman Mohamed, Michael Auli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/yolos&#34;&gt;YOLOS&lt;/a&gt;&lt;/strong&gt; (from Huazhong University of Science &amp;amp; Technology) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2106.00666&#34;&gt;You Only Look at One Sequence: Rethinking Transformer in Vision through Object Detection&lt;/a&gt; by Yuxin Fang, Bencheng Liao, Xinggang Wang, Jiemin Fang, Jiyang Qi, Rui Wu, Jianwei Niu, Wenyu Liu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_doc/yoso&#34;&gt;YOSO&lt;/a&gt;&lt;/strong&gt; (from the University of Wisconsin - Madison) released with the paper &lt;a href=&#34;https://arxiv.org/abs/2111.09714&#34;&gt;You Only Sample (Almost) Once: Linear Cost Self-Attention Via Bernoulli Sampling&lt;/a&gt; by Zhanpeng Zeng, Yunyang Xiong, Sathya N. Ravi, Shailesh Acharya, Glenn Fung, Vikas Singh.&lt;/li&gt; &#xA; &lt;li&gt;Want to contribute a new model? We have added a &lt;strong&gt;detailed guide and templates&lt;/strong&gt; to guide you in the process of adding a new model. You can find them in the &lt;a href=&#34;https://raw.githubusercontent.com/huggingface/transformers/main/templates&#34;&gt;&lt;code&gt;templates&lt;/code&gt;&lt;/a&gt; folder of the repository. Be sure to check the &lt;a href=&#34;https://raw.githubusercontent.com/huggingface/transformers/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; and contact the maintainers or open an issue to collect feedbacks before starting your PR.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To check if each model has an implementation in Flax, PyTorch or TensorFlow, or has an associated tokenizer backed by the 🤗 Tokenizers library, refer to &lt;a href=&#34;https://huggingface.co/docs/transformers/index#supported-frameworks&#34;&gt;this table&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These implementations have been tested on several datasets (see the example scripts) and should match the performance of the original implementations. You can find more details on performance in the Examples section of the &lt;a href=&#34;https://github.com/huggingface/transformers/tree/main/examples&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Section&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/&#34;&gt;Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full API documentation and tutorials&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/task_summary&#34;&gt;Task summary&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tasks supported by 🤗 Transformers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/preprocessing&#34;&gt;Preprocessing tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using the &lt;code&gt;Tokenizer&lt;/code&gt; class to prepare data for the models&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/training&#34;&gt;Training and fine-tuning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using the models provided by 🤗 Transformers in a PyTorch/TensorFlow training loop and the &lt;code&gt;Trainer&lt;/code&gt; API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/huggingface/transformers/tree/main/examples&#34;&gt;Quick tour: Fine-tuning/usage scripts&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example scripts for fine-tuning models on a wide range of tasks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/model_sharing&#34;&gt;Model sharing and uploading&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Upload and share your fine-tuned models with the community&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/migration&#34;&gt;Migration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Migrate to 🤗 Transformers from &lt;code&gt;pytorch-transformers&lt;/code&gt; or &lt;code&gt;pytorch-pretrained-bert&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;We now have a &lt;a href=&#34;https://www.aclweb.org/anthology/2020.emnlp-demos.6/&#34;&gt;paper&lt;/a&gt; you can cite for the 🤗 Transformers library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{wolf-etal-2020-transformers,&#xA;    title = &#34;Transformers: State-of-the-Art Natural Language Processing&#34;,&#xA;    author = &#34;Thomas Wolf and Lysandre Debut and Victor Sanh and Julien Chaumond and Clement Delangue and Anthony Moi and Pierric Cistac and Tim Rault and Rémi Louf and Morgan Funtowicz and Joe Davison and Sam Shleifer and Patrick von Platen and Clara Ma and Yacine Jernite and Julien Plu and Canwen Xu and Teven Le Scao and Sylvain Gugger and Mariama Drame and Quentin Lhoest and Alexander M. Rush&#34;,&#xA;    booktitle = &#34;Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations&#34;,&#xA;    month = oct,&#xA;    year = &#34;2020&#34;,&#xA;    address = &#34;Online&#34;,&#xA;    publisher = &#34;Association for Computational Linguistics&#34;,&#xA;    url = &#34;https://www.aclweb.org/anthology/2020.emnlp-demos.6&#34;,&#xA;    pages = &#34;38--45&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>