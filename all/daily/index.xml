<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-22T01:22:04Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/garnet</title>
    <updated>2024-03-22T01:22:04Z</updated>
    <id>tag:github.com,2024-03-22:/microsoft/garnet</id>
    <link href="https://github.com/microsoft/garnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Garnet is a remote cache-store from Microsoft Research that offers strong performance (throughput and latency), scalability, storage, recovery, cluster sharding, key migration, and replication features. Garnet can work with existing Redis clients.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Garnet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/garnet/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/garnet/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;.NET CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aka.ms/garnet-discord&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1213937452272582676/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Garnet is a new remote cache-store from Microsoft Research, that offers several unique benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Garnet adopts the popular &lt;a href=&#34;https://redis.io/docs/reference/protocol-spec/&#34;&gt;RESP&lt;/a&gt; wire protocol as a starting point, which makes it possible to use Garnet from unmodified Redis clients available in most programming languages of today, such as &lt;a href=&#34;https://github.com/StackExchange/StackExchange.Redis&#34;&gt;StackExchange.Redis&lt;/a&gt; in C#.&lt;/li&gt; &#xA; &lt;li&gt;Garnet offers much better throughput and scalability with many client connections and small batches, relative to comparable open-source cache-stores, leading to cost savings for large apps and services.&lt;/li&gt; &#xA; &lt;li&gt;Garnet demonstrates extremely low client latencies (often less than 300 microseconds at the 99.9th percentile) using commodity cloud (Azure) VMs with accelerated TCP enabled, which is critical to real-world scenarios.&lt;/li&gt; &#xA; &lt;li&gt;Based on the latest .NET technology, Garnet is cross-platform, extensible, and modern. It is designed to be easy to develop for and evolve, without sacrificing performance in the common case. We leveraged the rich library ecosystem of .NET for API breadth, with open opportunities for optimization. Thanks to our careful use of .NET, Garnet achieves state-of-the-art performance on both Linux and Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo contains the code to build and run Garnet. For more information and documentation, check out our website at &lt;a href=&#34;https://microsoft.github.io/garnet&#34;&gt;https://microsoft.github.io/garnet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Summary&lt;/h2&gt; &#xA;&lt;p&gt;Garnet implements a wide range of APIs including raw strings (e.g., gets, sets, and key expiration), analytical (e.g., HyperLogLog and Bitmap), and object (e.g., sorted sets and lists) operations. It can handle multi-key transactions in the form of client-side RESP transactions and our own server-side stored procedures in C# and allows users to define custom operations on both raw strings and new object types, all in the convenience and safety of C#, leading to a lower bar for developing custom extensions.&lt;/p&gt; &#xA;&lt;p&gt;Garnet uses a fast and pluggable network layer, enabling future extensions such as leveraging kernel-bypass stacks. It supports secure transport layer security (TLS) communications using the robust &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream&#34;&gt;SslStream&lt;/a&gt; library of .NET, as well as basic access control. Garnet’s storage layer, called Tsavorite, was forked from our prior open-source project &lt;a href=&#34;https://github.com/microsoft/FASTER&#34;&gt;FASTER&lt;/a&gt;, and includes strong database features such as thread scalability, tiered storage support (memory, SSD, and cloud storage), fast non-blocking checkpointing, recovery, operation logging for durability, multi-key transaction support, and better memory management and reuse. Finally, Garnet supports a cluster mode of operation with support for sharding, replication, and dynamic key migration.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/microsoft/garnet/assets/18355833/851be90b-e43a-40ca-ae56-7dc087cf6adc&#34; width=&#34;350&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Performance Preview&lt;/h2&gt; &#xA;&lt;p&gt;We illustrate a few key results on our &lt;a href=&#34;https://microsoft.github.io/garnet/docs/benchmarking/overview&#34;&gt;website&lt;/a&gt; comparing Garnet to leading open-source cache-stores.&lt;/p&gt; &#xA;&lt;h2&gt;Design Highlights&lt;/h2&gt; &#xA;&lt;p&gt;Garnet’s design re-thinks the entire cache-store stack – from receiving packets on the network, to parsing and processing database operations, to performing storage interactions. We build on top of years of our &lt;a href=&#34;https://microsoft.github.io/FASTER/docs/td-research-papers/&#34;&gt;prior research&lt;/a&gt;. Below is Garnet’s overall architecture.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/microsoft/garnet/assets/18355833/8d89f719-f86b-4b1f-81d1-1ae7bd450001&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Garnet’s network layer inherits a shared memory design inspired by our prior research on &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/achieving-high-throughput-and-elasticity-in-a-larger-than-memory-store/&#34;&gt;ShadowFax&lt;/a&gt;. TLS processing and storage interactions are performed on the IO completion thread, avoiding thread switching overheads in the common case. This approach allows CPU cache coherence to bring the data to the network, instead of traditional shuffle-based designs, which require data movement on the server.&lt;/p&gt; &#xA;&lt;p&gt;Garnet’s storage design consists of two Tsavorite key-value stores whose fates are bound by a unified operation log. The first store, called the “main store,” is optimized for raw string operations and manages memory carefully to avoid garbage collection. The second, and optional, “object store” is optimized for complex objects and custom data types, including popular types such as Sorted Set, Set, Hash, List, and Geo. Data types in the object store leverage the .NET library ecosystem for their current implementations. They are stored on the heap in memory (which makes updates very efficient) and in a serialized form on disk. In the future, we plan to investigate using a unified index and log to ease maintenance.&lt;/p&gt; &#xA;&lt;p&gt;A distinguishing feature of Garnet’s design is its narrow-waist Tsavorite storage API, which is used to implement the large, rich, and extensible RESP API surface on top. This API consists of read, upsert, delete, and atomic read-modify-write operations, implemented with asynchronous callbacks for Garnet to interject logic at various points during each operation. Our storage API model allows us to cleanly separate Garnet’s parsing and query processing concerns from storage details such as concurrency, storage tiering, and checkpointing. Garnet uses two-phase locking for multi-key transactions.&lt;/p&gt; &#xA;&lt;h3&gt;Cluster Mode&lt;/h3&gt; &#xA;&lt;p&gt;In addition to single-node execution, Garnet supports a cluster mode, which allows users to create and manage a sharded and replicated deployment. Garnet also supports an efficient and dynamic key migration scheme to rebalance shards. Users can use standard Redis cluster commands to create and manage Garnet clusters, and nodes perform gossip to share and evolve cluster state. Cluster is still work in progress.&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;Head over to our &lt;a href=&#34;https://microsoft.github.io/garnet&#34;&gt;documentation&lt;/a&gt; site, or jump directly to the &lt;a href=&#34;https://microsoft.github.io/garnet/docs/getting-started&#34;&gt;getting started&lt;/a&gt; or &lt;a href=&#34;https://microsoft.github.io/garnet/docs/welcome/releases&#34;&gt;releases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/garnet/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;Privacy information can be found at &lt;a href=&#34;https://privacy.microsoft.com/en-us/privacystatement&#34;&gt;https://privacy.microsoft.com/en-us/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt; &#xA;&lt;p&gt;Redis is a registered trademark of Redis Ltd. Any rights therein are reserved to Redis Ltd. Any use by Microsoft is for referential purposes only and does not indicate any sponsorship, endorsement or affiliation between Redis and Microsoft.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CISOfy/lynis</title>
    <updated>2024-03-22T01:22:04Z</updated>
    <id>tag:github.com,2024-03-22:/CISOfy/lynis</id>
    <link href="https://github.com/CISOfy/lynis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lynis - Security auditing tool for Linux, macOS, and UNIX-based systems. Assists with compliance testing (HIPAA/ISO27001/PCI DSS) and system hardening. Agentless, and installation optional.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxsecurity.expert/tools/lynis/&#34;&gt;&lt;img src=&#34;https://badges.linuxsecurity.expert/tools/ranking/lynis.svg?sanitize=true&#34; alt=&#34;Linux Security Expert badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/CISOfy/lynis&#34;&gt;&lt;img src=&#34;https://travis-ci.org/CISOfy/lynis.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/96&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/96/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cisofy.com/documentation/lynis/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you like this software? &lt;strong&gt;Star the project&lt;/strong&gt; and become a &lt;a href=&#34;https://github.com/CISOfy/lynis/stargazers&#34;&gt;stargazer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;lynis&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Lynis - Security auditing and hardening tool, for UNIX-based systems.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Lynis is a security auditing tool for systems based on UNIX like Linux, macOS, BSD, and others. It performs an &lt;strong&gt;in-depth security scan&lt;/strong&gt; and runs on the system itself. The primary goal is to test security defenses and &lt;strong&gt;provide tips for further system hardening&lt;/strong&gt;. It will also scan for general system information, vulnerable software packages, and possible configuration issues. Lynis was commonly used by system administrators and auditors to assess the security defenses of their systems. Besides the &#34;blue team,&#34; nowadays penetration testers also have Lynis in their toolkit.&lt;/p&gt; &#xA;&lt;p&gt;We believe software should be &lt;strong&gt;simple&lt;/strong&gt;, &lt;strong&gt;updated on a regular basis&lt;/strong&gt;, and &lt;strong&gt;open&lt;/strong&gt;. You should be able to trust, understand, and have the option to change the software. Many agree with us, as the software is being used by thousands every day to protect their systems.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The main goals are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automated security auditing&lt;/li&gt; &#xA; &lt;li&gt;Compliance testing (e.g. ISO27001, PCI-DSS, HIPAA)&lt;/li&gt; &#xA; &lt;li&gt;Vulnerability detection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The software (also) assists with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration and asset management&lt;/li&gt; &#xA; &lt;li&gt;Software patch management&lt;/li&gt; &#xA; &lt;li&gt;System hardening&lt;/li&gt; &#xA; &lt;li&gt;Penetration testing (privilege escalation)&lt;/li&gt; &#xA; &lt;li&gt;Intrusion detection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Audience&lt;/h3&gt; &#xA;&lt;p&gt;Typical users of the software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System administrators&lt;/li&gt; &#xA; &lt;li&gt;Auditors&lt;/li&gt; &#xA; &lt;li&gt;Security officers&lt;/li&gt; &#xA; &lt;li&gt;Penetration testers&lt;/li&gt; &#xA; &lt;li&gt;Security professionals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple options available to install Lynis.&lt;/p&gt; &#xA;&lt;h3&gt;Software Package&lt;/h3&gt; &#xA;&lt;p&gt;For systems running Linux, BSD, and macOS, there is typically a package available. This is the preferred method of obtaining Lynis, as it is quick to install and easy to update. The Lynis project itself also provides &lt;a href=&#34;https://packages.cisofy.com/&#34;&gt;packages&lt;/a&gt; in RPM or DEB format suitable for systems systems running: &lt;code&gt;CentOS&lt;/code&gt;, &lt;code&gt;Debian&lt;/code&gt;, &lt;code&gt;Fedora&lt;/code&gt;, &lt;code&gt;OEL&lt;/code&gt;, &lt;code&gt;openSUSE&lt;/code&gt;, &lt;code&gt;RHEL&lt;/code&gt;, &lt;code&gt;Ubuntu&lt;/code&gt;, and others.&lt;/p&gt; &#xA;&lt;p&gt;Some distributions may also have Lynis in their software repository: &lt;a href=&#34;https://repology.org/project/lynis/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/lynis.svg?sanitize=true&#34; alt=&#34;Repology&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: Some distributions don&#39;t provide an up-to-date version. In that case it is better to use the CISOfy software repository, download the tarball from the website, or download the latest GitHub release.&lt;/p&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;p&gt;The very latest developments can be obtained via git.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone or download the project files (&lt;strong&gt;no compilation nor installation&lt;/strong&gt; is required) ;&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone https://github.com/CISOfy/lynis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; cd lynis &amp;amp;&amp;amp; ./lynis audit system&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to run the software as &lt;code&gt;root&lt;/code&gt; (or sudo), we suggest changing the ownership of the files. Use &lt;code&gt;chown -R 0:0&lt;/code&gt; to recursively alter the owner and group and set it to user ID &lt;code&gt;0&lt;/code&gt; (&lt;code&gt;root&lt;/code&gt;). Otherwise Lynis will warn you about the file permissions. After all, you are executing files owned by a non-privileged user.&lt;/p&gt; &#xA;&lt;h3&gt;Enterprise Version&lt;/h3&gt; &#xA;&lt;p&gt;This software component is also part of an enterprise solution. Same quality, yet with more functionality.&lt;/p&gt; &#xA;&lt;p&gt;Focus areas include compliance (&lt;code&gt;PCI DSS&lt;/code&gt;, &lt;code&gt;HIPAA&lt;/code&gt;, &lt;code&gt;ISO27001&lt;/code&gt;, and others). The Enterprise version comes with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a web interface;&lt;/li&gt; &#xA; &lt;li&gt;dashboard and reporting;&lt;/li&gt; &#xA; &lt;li&gt;hardening snippets;&lt;/li&gt; &#xA; &lt;li&gt;improvement plan (based on risk);&lt;/li&gt; &#xA; &lt;li&gt;commercial support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation: &lt;a href=&#34;https://cisofy.com/documentation/lynis/&#34;&gt;https://cisofy.com/documentation/lynis/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;If you want to create your own tests, have a look at the &lt;a href=&#34;https://github.com/CISOfy/lynis-sdk&#34;&gt;Lynis software development kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;We participate in the &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/96&#34;&gt;CII best practices&lt;/a&gt; badge program of the Linux Foundation.&lt;/p&gt; &#xA;&lt;h2&gt;Media and Awards&lt;/h2&gt; &#xA;&lt;p&gt;Lynis is collecting some awards along the way and we are proud of that.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2016&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.infoworld.com/article/3121251/open-source-tools/bossie-awards-2016-the-best-open-source-networking-and-security-software.html#slide13&#34;&gt;Best of Open Source Software Awards 2016&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Article by TechRepublic, considering Lynis a &#34;must-have&#34; tool: &lt;a href=&#34;http://www.techrepublic.com/article/how-to-quickly-audit-a-linux-system-from-the-command-line/&#34;&gt;How to quickly audit a Linux system from the command line&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.toolswatch.org/2017/02/2016-top-security-tools-as-voted-by-toolswatch-org-readers/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/toptools/2016.svg?sanitize=true&#34; alt=&#34;ToolsWatch Best Tools (top 10)&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2015&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.toolswatch.org/2016/02/2015-top-security-tools-as-voted-by-toolswatch-org-readers/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/toptools/2015.svg?sanitize=true&#34; alt=&#34;ToolsWatch Best Tools (second place)&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.idgenterprise.com/news/press-release/infoworld-announces-the-2015-best-of-open-source-software-awards/&#34;&gt;Best of Open Source Software Awards 2015&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2014&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.toolswatch.org/2015/01/2014-top-security-tools-as-voted-by-toolswatch-org-readers/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/toptools/2014.svg?sanitize=true&#34; alt=&#34;ToolsWatch Best Tools (third place)&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2013&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.toolswatch.org/2013/12/2013-top-security-tools-as-voted-by-toolswatch-org-readers/&#34;&gt;&lt;img src=&#34;https://www.toolswatch.org/badges/toptools/2013.svg?sanitize=true&#34; alt=&#34;ToolsWatch Best Tools (sixth place)&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We love contributors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Do you have something to share? Want to help out with translating Lynis into your own language? Create an issue or pull request on GitHub, or send us an e-mail: &lt;a href=&#34;mailto:lynis-dev@cisofy.com&#34;&gt;lynis-dev@cisofy.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More details can be found in the &lt;a href=&#34;https://github.com/CISOfy/lynis/raw/master/CONTRIBUTING.md&#34;&gt;Contributors Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also simply contribute to the project by &lt;em&gt;starring&lt;/em&gt; the project and show your appreciation that way.&lt;/p&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;GPLv3&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>ynqa/jnv</title>
    <updated>2024-03-22T01:22:04Z</updated>
    <id>tag:github.com,2024-03-22:/ynqa/jnv</id>
    <link href="https://github.com/ynqa/jnv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;interactive JSON filter using jq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jnv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;jnv&lt;/em&gt; is designed for navigating JSON, offering an interactive JSON viewer and &lt;code&gt;jq&lt;/code&gt; filter editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ynqa/jnv/assets/6745370/625599ca-6c95-4cc1-bddf-d724ec32e676&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/simeji/jid&#34;&gt;jid&lt;/a&gt; and &lt;a href=&#34;https://github.com/fiatjaf/jiq&#34;&gt;jiq&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive JSON viewer and &lt;code&gt;jq&lt;/code&gt; filter editor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Syntax highlighting for JSON&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Accept JSON from stdin, file, URL&lt;/li&gt; &#xA; &lt;li&gt;Auto-completion for the filter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Only supports: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://jqlang.github.io/jq/manual/#identity&#34;&gt;Identity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://jqlang.github.io/jq/manual/#object-identifier-index&#34;&gt;Object Identifier-Index&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://jqlang.github.io/jq/manual/#array-index&#34;&gt;Array Index&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hint message to evaluate the filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ynqa/tap/jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/automake/&#34;&gt;automake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;em&gt;jnv&lt;/em&gt; does not require users to install &lt;code&gt;jq&lt;/code&gt; on their system, because it utilizes &lt;a href=&#34;https://github.com/ynqa/j9&#34;&gt;j9&lt;/a&gt; Rust bindings.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat data.json | jnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jnv data.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keymap&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Exit &lt;code&gt;jnv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;jq filter auto-completion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;←&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one character to the left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;→&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one character to the right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + A&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor to the start of the filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + E&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor to the end of the filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Backspace&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete a character of filter at the cursor position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + U&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete all characters of filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;↑&lt;/kbd&gt;, &lt;kbd&gt;Ctrl + K&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one entry up in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;↓&lt;/kbd&gt;, &lt;kbd&gt;Ctrl + J&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move the cursor one entry down in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + H&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move to the last entry in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + L&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Move to the first entry in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Toggle expand/collapse in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + P&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Expand all folds in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl + N&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Collapse all folds in JSON viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;JSON navigator and interactive filter leveraging jq&#xA;&#xA;Usage: jnv [OPTIONS] [INPUT]&#xA;&#xA;Examples:&#xA;- Read from a file:&#xA;        jnv data.json&#xA;&#xA;- Read from standard input:&#xA;        cat data.json | jnv&#xA;&#xA;Arguments:&#xA;  [INPUT]&#xA;          Optional path to a JSON file. If not provided or if &#34;-&#34; is specified, reads from standard input&#xA;&#xA;Options:&#xA;  -e, --edit-mode &amp;lt;EDIT_MODE&amp;gt;&#xA;                  Specifies the edit mode for the interface.&#xA;                  Acceptable values are &#34;insert&#34; or &#34;overwrite&#34;.&#xA;                  - &#34;insert&#34; inserts a new input at the cursor&#39;s position.&#xA;                  - &#34;overwrite&#34; mode replaces existing characters with new input at the cursor&#39;s position.&#xA;          [default: insert]&#xA;&#xA;  -i, --indent &amp;lt;INDENT&amp;gt;&#xA;                  Affect the formatting of the displayed JSON,&#xA;                  making it more readable by adjusting the indentation level.&#xA;          [default: 2]&#xA;&#xA;  -n, --no-hint&#xA;                  When this option is enabled, it prevents the display of&#xA;                  hints that typically guide or offer suggestions to the user.&#xA;&#xA;  -d, --expand-depth &amp;lt;EXPAND_DEPTH&amp;gt;&#xA;                  Specifies the initial depth to which JSON nodes are expanded in the visualization.&#xA;                  Note: Increasing this depth can significantly slow down the display for large datasets.&#xA;          [default: 3]&#xA;&#xA;  -l, --suggestion-list-length &amp;lt;SUGGESTION_LIST_LENGTH&amp;gt;&#xA;                  Controls the number of suggestions displayed in the list,&#xA;                  aiding users in making selections more efficiently.&#xA;          [default: 3]&#xA;&#xA;  -h, --help&#xA;          Print help (see a summary with &#39;-h&#39;)&#xA;&#xA;  -V, --version&#xA;          Print version&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>