<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-18T01:28:37Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>docusealco/docuseal</title>
    <updated>2024-11-18T01:28:37Z</updated>
    <id>tag:github.com,2024-11-18:/docusealco/docuseal</id>
    <link href="https://github.com/docusealco/docuseal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source DocuSign alternative. Create, fill, and sign digital documents ✍️&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; style=&#34;border-bottom: none&#34;&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://www.docuseal.com&#34;&gt; &lt;img alt=&#34;DocuSeal&#34; src=&#34;https://github.com/docusealco/docuseal/assets/5418788/c12cd051-81cd-4402-bc3a-92f2cfdc1b06&#34; width=&#34;80&#34;&gt; &lt;br&gt; &lt;/a&gt; DocuSeal &#xA; &lt;/div&gt; &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Open source document filling and signing &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/docuseal/docuseal&#34;&gt; &lt;img alt=&#34;Docker releases&#34; src=&#34;https://img.shields.io/docker/v/docuseal/docuseal&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/qygYCDGck9&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1125112641170448454?logo=discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=docusealco&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/docusealco?style=social&#34; alt=&#34;Follow @docusealco&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; DocuSeal is an open source platform that provides secure and efficient digital document signing and processing. Create PDF forms to have them filled and signed online on any device with an easy-to-use, mobile-optimized web tool. &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;a href=&#34;https://demo.docuseal.tech&#34;&gt;✨ Live Demo&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href=&#34;https://docuseal.com/sign_up&#34;&gt;☁️ Try in Cloud&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.docuseal.tech&#34;&gt;&lt;img src=&#34;https://github.com/docusealco/docuseal/assets/5418788/d8703ea3-361a-423f-8bfe-eff1bd9dbe14&#34; alt=&#34;Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PDF form fields builder (WYSIWYG)&lt;/li&gt; &#xA; &lt;li&gt;12 field types available (Signature, Date, File, Checkbox etc.)&lt;/li&gt; &#xA; &lt;li&gt;Multiple submitters per document&lt;/li&gt; &#xA; &lt;li&gt;Automated emails via SMTP&lt;/li&gt; &#xA; &lt;li&gt;Files storage on disk or AWS S3, Google Storage, Azure Cloud&lt;/li&gt; &#xA; &lt;li&gt;Automatic PDF eSignature&lt;/li&gt; &#xA; &lt;li&gt;PDF signature verification&lt;/li&gt; &#xA; &lt;li&gt;Users management&lt;/li&gt; &#xA; &lt;li&gt;Mobile-optimized&lt;/li&gt; &#xA; &lt;li&gt;6 UI languages with signing available in 13 languages&lt;/li&gt; &#xA; &lt;li&gt;API and Webhooks for integrations&lt;/li&gt; &#xA; &lt;li&gt;Easy to deploy in minutes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pro Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Company logo and white-label&lt;/li&gt; &#xA; &lt;li&gt;User roles&lt;/li&gt; &#xA; &lt;li&gt;Automated reminders&lt;/li&gt; &#xA; &lt;li&gt;Invitation and identify verification via SMS&lt;/li&gt; &#xA; &lt;li&gt;Conditional fields and formulas&lt;/li&gt; &#xA; &lt;li&gt;Bulk send with CSV, XLSX spreadsheet import&lt;/li&gt; &#xA; &lt;li&gt;SSO / SAML&lt;/li&gt; &#xA; &lt;li&gt;Template creation with HTML API (&lt;a href=&#34;https://www.docuseal.com/guides/create-pdf-document-fillable-form-with-html-api&#34;&gt;Guide&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Template creation with PDF or DOCX and field tags API (&lt;a href=&#34;https://www.docuseal.com/guides/use-embedded-text-field-tags-in-the-pdf-to-create-a-fillable-form&#34;&gt;Guide&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Embedded signing form (&lt;a href=&#34;https://github.com/docusealco/docuseal-react&#34;&gt;React&lt;/a&gt;, &lt;a href=&#34;https://github.com/docusealco/docuseal-vue&#34;&gt;Vue&lt;/a&gt;, &lt;a href=&#34;https://github.com/docusealco/docuseal-angular&#34;&gt;Angular&lt;/a&gt; or &lt;a href=&#34;https://www.docuseal.com/docs/embedded&#34;&gt;JavaScript&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Embedded document form builder (&lt;a href=&#34;https://github.com/docusealco/docuseal-react&#34;&gt;React&lt;/a&gt;, &lt;a href=&#34;https://github.com/docusealco/docuseal-vue&#34;&gt;Vue&lt;/a&gt;, &lt;a href=&#34;https://github.com/docusealco/docuseal-angular&#34;&gt;Angular&lt;/a&gt; or &lt;a href=&#34;https://www.docuseal.com/docs/embedded&#34;&gt;JavaScript&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docuseal.com/pricing&#34;&gt;Learn more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Heroku&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Railway&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/docusealco/docuseal-heroku&#34;&gt;&lt;img alt=&#34;Deploy on Heroku&#34; src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://railway.app/template/IGoDnc?referralCode=ruU7JR&#34;&gt;&lt;img alt=&#34;Deploy on Railway&#34; src=&#34;https://railway.app/button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;DigitalOcean&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Render&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://cloud.digitalocean.com/apps/new?repo=https://github.com/docusealco/docuseal-digitalocean/tree/master&amp;amp;refcode=421d50f53990&#34;&gt;&lt;img alt=&#34;Deploy on DigitalOcean&#34; src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/docusealco/docuseal-render&#34;&gt;&lt;img alt=&#34;Deploy to Render&#34; src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --name docuseal -p 3000:3000 -v.:/data docuseal/docuseal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default DocuSeal docker container uses an SQLite database to store data and configurations. Alternatively, it is possible use PostgreSQL or MySQL databases by specifying the &lt;code&gt;DATABASE_URL&lt;/code&gt; env variable.&lt;/p&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;Download docker-compose.yml into your private server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://raw.githubusercontent.com/docusealco/docuseal/master/docker-compose.yml &amp;gt; docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the app under a custom domain over https using docker compose (make sure your DNS points to the server to automatically issue ssl certs with Caddy):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo HOST=your-domain-name.com docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;For Businesses&lt;/h2&gt; &#xA;&lt;h3&gt;Integrate seamless document signing into your web or mobile apps with DocuSeal&lt;/h3&gt; &#xA;&lt;p&gt;At DocuSeal we have expertise and technologies to make documents creation, filling, signing and processing seamlessly integrated with your product. We specialize in working with various industries, including &lt;strong&gt;Banking, Healthcare, Transport, Real Estate, eCommerce, KYC, CRM, and other software products&lt;/strong&gt; that require bulk document signing. By leveraging DocuSeal, we can assist in reducing the overall cost of developing and processing electronic documents while ensuring security and compliance with local electronic document laws.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.docuseal.com/contact&#34;&gt;Book a Meeting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the AGPLv3 License. See &lt;a href=&#34;https://github.com/docusealco/docuseal/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information. Unless otherwise noted, all files © 2023 DocuSeal LLC.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docuseal.com/online-signature&#34;&gt;Signature Maker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docuseal.com/sign-documents-online&#34;&gt;Sign Document Online&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docuseal.com/fill-pdf&#34;&gt;Fill PDF Online&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>leaningtech/webvm</title>
    <updated>2024-11-18T01:28:37Z</updated>
    <id>tag:github.com,2024-11-18:/leaningtech/webvm</id>
    <link href="https://github.com/leaningtech/webvm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual Machine for the Web&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebVM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/yWRr2YnD9c&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/988743885121548329?color=%235865F2&amp;amp;logo=discord&amp;amp;logoColor=%23fff&#34; alt=&#34;Discord server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/leaningtech/webvm/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/leaningtech/webvm&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository hosts the source code for &lt;a href=&#34;https://webvm.io&#34;&gt;https://webvm.io&lt;/a&gt;, a Linux virtual machine that runs in your browser.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/leaningtech/webvm/main/assets/welcome_to_WebVM_2024.png&#34; width=&#34;70%&#34;&gt; &#xA;&lt;p&gt;WebVM is a server-less virtual environment running fully client-side in HTML5/WebAssembly. It&#39;s designed to be Linux ABI-compatible. It runs an unmodified Debian distribution including many native development toolchains.&lt;/p&gt; &#xA;&lt;p&gt;WebVM is powered by the CheerpX virtualization engine, and enables safe, sandboxed client-side execution of x86 binaries on any browser. CheerpX includes an x86-to-WebAssembly JIT compiler, a virtual block-based file system, and a Linux syscall emulator.&lt;/p&gt; &#xA;&lt;h1&gt;Enable networking&lt;/h1&gt; &#xA;&lt;p&gt;Modern browsers do not provide APIs to directly use TCP or UDP. WebVM provides networking support by integrating with Tailscale, a VPN network that supports WebSockets as a transport layer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the &#34;Networking&#34; panel from the side-bar&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Connect to Tailscale&#34; from the panel&lt;/li&gt; &#xA; &lt;li&gt;Log in to Tailscale (create an account if you don&#39;t have one)&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Connect&#34; when prompted by Tailscale&lt;/li&gt; &#xA; &lt;li&gt;If you are unfamiliar with Tailscale or would like additional information see &lt;a href=&#34;https://raw.githubusercontent.com/leaningtech/webvm/main/docs/Tailscale.md&#34;&gt;WebVM and Tailscale&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Fork, deploy, customize&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/leaningtech/webvm/main/assets/fork_deploy_instructions.gif&#34; alt=&#34;deploy_instructions_gif&#34; width=&#34;90%&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repository.&lt;/li&gt; &#xA; &lt;li&gt;Enable Github pages in settings. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click on &lt;code&gt;Settings&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Go to the &lt;code&gt;Pages&lt;/code&gt; section.&lt;/li&gt; &#xA;   &lt;li&gt;Select &lt;code&gt;Github Actions&lt;/code&gt; as the source. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If you are using a custom domain, ensure &lt;code&gt;Enforce HTTPS&lt;/code&gt; is enabled.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the workflow. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click on &lt;code&gt;Actions&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Accept the prompt. This is required only once to enable Actions for your fork.&lt;/li&gt; &#xA;   &lt;li&gt;Click on the workflow named &lt;code&gt;Deploy&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;Run workflow&lt;/code&gt; and then once more &lt;code&gt;Run workflow&lt;/code&gt; in the menu.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;After a few seconds a new &lt;code&gt;Deploy&lt;/code&gt; workflow will start, click on it to see details.&lt;/li&gt; &#xA; &lt;li&gt;After the workflow completes, which takes a few minutes, it will show the URL below the &lt;code&gt;deploy_to_github_pages&lt;/code&gt; job.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/leaningtech/webvm/main/assets/result.png&#34; width=&#34;70%&#34;&gt; &#xA;&lt;p&gt;You can now customize &lt;code&gt;dockerfiles/debian_mini&lt;/code&gt; to suit your needs, or make a new Dockerfile from scratch. Use the &lt;code&gt;Path to Dockerfile&lt;/code&gt; workflow parameter to select it.&lt;/p&gt; &#xA;&lt;h1&gt;Local deployment&lt;/h1&gt; &#xA;&lt;p&gt;From a local &lt;code&gt;git clone&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;debian_mini&lt;/code&gt; Ext2 image from &lt;a href=&#34;https://github.com/leaningtech/webvm/releases/&#34;&gt;https://github.com/leaningtech/webvm/releases/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can also build your own by selecting the &#34;Upload GitHub release&#34; workflow option&lt;/li&gt; &#xA;   &lt;li&gt;Place the image in the repository root folder&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;config_github_terminal.js&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uncomment the default values for &lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;ARGS&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt; and &lt;code&gt;CWD&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Replace &lt;code&gt;IMAGE_URL&lt;/code&gt; with the URL (absolute or relative) for the Ext2 image. For example &lt;code&gt;&#34;/debian_mini_20230519_5022088024.ext2&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build WebVM using &lt;code&gt;npm&lt;/code&gt;, output will be placed in the &lt;code&gt;build&lt;/code&gt; directory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start NGINX, it automatically points to the &lt;code&gt;build&lt;/code&gt; directory just created &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nginx -p . -c nginx.conf&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;code&gt;http://127.0.0.1:8081&lt;/code&gt; and enjoy your local WebVM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example customization: Python3 REPL&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;Deploy&lt;/code&gt; workflow takes into account the &lt;code&gt;CMD&lt;/code&gt; specified in the Dockerfile. To build a REPL you can simply apply this patch and deploy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/dockerfiles/debian_mini b/dockerfiles/debian_mini&#xA;index 2878332..1f3103a 100644&#xA;--- a/dockerfiles/debian_mini&#xA;+++ b/dockerfiles/debian_mini&#xA;@@ -15,4 +15,4 @@ WORKDIR /home/user/&#xA; # We set env, as this gets extracted by Webvm. This is optional.&#xA; ENV HOME=&#34;/home/user&#34; TERM=&#34;xterm&#34; USER=&#34;user&#34; SHELL=&#34;/bin/bash&#34; EDITOR=&#34;vim&#34; LANG=&#34;en_US.UTF-8&#34; LC_ALL=&#34;C&#34;&#xA; RUN echo &#39;root:password&#39; | chpasswd&#xA;-CMD [ &#34;/bin/bash&#34; ]&#xA;+CMD [ &#34;/usr/bin/python3&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Bugs and Issues&lt;/h1&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;https://github.com/leaningtech/webvm/issues&#34;&gt;Issues&lt;/a&gt; to report any bug. Or come to say hello / share your feedback on &lt;a href=&#34;https://discord.gg/yTNZgySKGa&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;More links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leaningtech.com/webvm-server-less-x86-virtual-machines-in-the-browser/&#34;&gt;WebVM: server-less x86 virtual machines in the browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leaningtech.com/webvm-virtual-machine-with-networking-via-tailscale/&#34;&gt;WebVM: Linux Virtualization in WebAssembly with Full Networking via Tailscale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leaningtech.com/mini-webvm-your-linux-box-from-dockerfile-via-wasm/&#34;&gt;Mini.WebVM: Your own Linux box from Dockerfile, virtualized in the browser via WebAssembly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reference GitHub Pages deployment: &lt;a href=&#34;https://mini.webvm.io&#34;&gt;Mini.WebVM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VqrbVycTXmw&#34;&gt;Crafting the Impossible: X86 Virtualization in the Browser with WebAssembly&lt;/a&gt; Talk at JsNation 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Thanks to...&lt;/h1&gt; &#xA;&lt;p&gt;This project depends on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cheerpx.io/&#34;&gt;CheerpX&lt;/a&gt;, made by &lt;a href=&#34;https://leaningtech.com/&#34;&gt;Leaning Technologies&lt;/a&gt; for x86 virtualization and Linux emulation&lt;/li&gt; &#xA; &lt;li&gt;xterm.js, &lt;a href=&#34;https://xtermjs.org/&#34;&gt;https://xtermjs.org/&lt;/a&gt;, for providing the Web-based terminal emulator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailscale.com/&#34;&gt;Tailscale&lt;/a&gt;, for the networking component&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://savannah.nongnu.org/projects/lwip/&#34;&gt;lwIP&lt;/a&gt;, for the TCP/IP stack, compiled for the Web via &lt;a href=&#34;https://github.com/leaningtech/cheerp-meta/&#34;&gt;Cheerp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Versioning&lt;/h1&gt; &#xA;&lt;p&gt;WebVM depends on the CheerpX x86-to-WebAssembly virtualization technology, which is included in the project via &lt;a href=&#34;https://www.npmjs.com/package/@leaningtech/cheerpx&#34;&gt;NPM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The NPM package is updated on every release.&lt;/p&gt; &#xA;&lt;p&gt;Every build is immutable, if a specific version works well for you today, it will keep working forever.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;WebVM is released under the Apache License, Version 2.0.&lt;/p&gt; &#xA;&lt;p&gt;You are welcome to use, modify, and redistribute the contents of this repository.&lt;/p&gt; &#xA;&lt;p&gt;The public CheerpX deployment is provided &lt;strong&gt;as-is&lt;/strong&gt; and is &lt;strong&gt;free to use&lt;/strong&gt; for technological exploration, testing and use by individuals. Any other use by organizations, including non-profit, academia and the public sector, requires a license. Downloading a CheerpX build for the purpose of hosting it elsewhere is not permitted without a commercial license.&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://cheerpx.io/docs/licensing&#34;&gt;CheerpX licensing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to build a product on top of CheerpX/WebVM, please get in touch: &lt;a href=&#34;mailto:sales@leaningtech.com&#34;&gt;sales@leaningtech.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>epasveer/seer</title>
    <updated>2024-11-18T01:28:37Z</updated>
    <id>tag:github.com,2024-11-18:/epasveer/seer</id>
    <link href="https://github.com/epasveer/seer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seer - a gui frontend to gdb&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Seer - a gui frontend to gdb for Linux. (Ernie Pasveer &lt;a href=&#34;mailto:epasveer@att.net&#34;&gt;epasveer@att.net&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This project is actively worked on. The aim is a simple, yet pleasing gui to gdb.&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs or desired features to my email or create a &lt;a href=&#34;https://github.com/epasveer/seer/issues&#34;&gt;task&lt;/a&gt; in my GitHub project page.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Seer can be installed either from a package manager or from source.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Make sure the requirements are met before installing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C++17&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;gdb with &#34;mi&#34; interpreter (check by running: &lt;code&gt;gdb --interpreter=mi&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CMake (3.1.0 or newer)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QT6&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When building Seer from source, you will need the QT6 &#34;devel&#34; packages installed on your system for your distribution. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Core&lt;/li&gt; &#xA;     &lt;li&gt;Gui&lt;/li&gt; &#xA;     &lt;li&gt;Widgets&lt;/li&gt; &#xA;     &lt;li&gt;PrintSupport&lt;/li&gt; &#xA;     &lt;li&gt;Charts&lt;/li&gt; &#xA;     &lt;li&gt;Svg&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Qt6 build instructions are here: &lt;a href=&#34;https://github.com/epasveer/seer/wiki/Building-Seer---Qt6&#34;&gt;https://github.com/epasveer/seer/wiki/Building-Seer---Qt6&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QT5&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Seer no longer compiles with Qt5.&lt;/strong&gt; The 2.3 source tree is the last one that does.&lt;/li&gt; &#xA;   &lt;li&gt;Qt5 build instructions are here: &lt;a href=&#34;https://github.com/epasveer/seer/wiki/Building-Seer---Qt5&#34;&gt;https://github.com/epasveer/seer/wiki/Building-Seer---Qt5&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install from package&lt;/h2&gt; &#xA;&lt;p&gt;Available through the following package managers:&lt;/p&gt; &#xA;&lt;h3&gt;Pamac (Manjaro)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pamac install seer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zypper (openSUSE Tumbleweed)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper install seergdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install from source&lt;/h2&gt; &#xA;&lt;p&gt;(Recommended) Seer can be built with Qt6 by following the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epasveer/seer/wiki/Building-Seer---Qt6&#34;&gt;https://github.com/epasveer/seer/wiki/Building-Seer---Qt6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It can still be built with Qt5, for the time being by following the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epasveer/seer/wiki/Building-Seer---Qt5&#34;&gt;https://github.com/epasveer/seer/wiki/Building-Seer---Qt5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NEWS&lt;/h1&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/epasveer/seer/wiki&#34;&gt;Seer&#39;s Wiki page&lt;/a&gt; on github.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version v1.17 will be the last Qt5 release.&lt;/li&gt; &#xA; &lt;li&gt;The next release will be v2.0 and will be Qt6 based. However, for the time being, it&#39;s still able to be compiled with Qt5.&lt;/li&gt; &#xA; &lt;li&gt;If you want the latest stable Qt5 source, grab v1.17 from here: &lt;a href=&#34;https://github.com/epasveer/seer/releases/tag/v1.17&#34;&gt;https://github.com/epasveer/seer/releases/tag/v1.17&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;GUI overview&lt;/h1&gt; &#xA;&lt;p&gt;Examples of the various Seer views and dialogs.&lt;/p&gt; &#xA;&lt;h2&gt;Main View&lt;/h2&gt; &#xA;&lt;p&gt;The main view for Seer looks like this: &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/mainview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Source/Function/Types/Variables/Libraries&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The list of source/header files that were used in the program.&lt;/li&gt; &#xA;   &lt;li&gt;Search for Functions, Types, and Static Variables. Dobule clicking will open the source file.&lt;/li&gt; &#xA;   &lt;li&gt;The list of shared libraries referenced by the program.&lt;/li&gt; &#xA;   &lt;li&gt;The list of source/header files can be searched. This will &#34;shrink&#34; the list of files shown.&lt;/li&gt; &#xA;   &lt;li&gt;Double clicking on a file will open it in the Code Manager.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Variable/Register Info&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show variable and register values.&lt;/li&gt; &#xA;   &lt;li&gt;&#34;Logger&#34; - log the value of a variable. Manually enter it or double click on the variable in the file that is opened in the code manager.&lt;/li&gt; &#xA;   &lt;li&gt;&#34;Tracker&#34; - create a list of variables to show the value for whenever gdb reaches a stopping point (step, next, finish, etc.). When the stopping point is reached, all variables in the list will show their potentially new value.&lt;/li&gt; &#xA;   &lt;li&gt;&#34;Registers&#34; - show the values of all cpu registers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code Manager.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The large area of the middle part of the Seer gui.&lt;/li&gt; &#xA;   &lt;li&gt;Source files are opened in this view.&lt;/li&gt; &#xA;   &lt;li&gt;Text in a file can be seached for with ^F.&lt;/li&gt; &#xA;   &lt;li&gt;Variables can be added to the &#34;Logger&#34; by double clicking the variable name. Double click with CTLR key pressed will prepend variable with &#34;&lt;em&gt;&#34;. Double click with SHIFT key pressed will prepend variable with &#34;&amp;amp;&#34;. Double click with CTRL+SHIFT key pressed will prepend variable with &#34;&lt;/em&gt;&amp;amp;&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Variables can be added to the &#34;Tracker&#34; by selecting the variable name and RMB and select &#34;Add variable to Tracker&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Variables can be added to the &#34;Memory Visualizer&#34; by selecting the variable name and RMB and select &#34;Add variable to Memory Visualizer&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;A breakpoint/printpoint can be created by RMB on a specific line.&lt;/li&gt; &#xA;   &lt;li&gt;Can execute to a specific line by RMB on a specific line.&lt;/li&gt; &#xA;   &lt;li&gt;Tabs in this view can be detached by double-clicking a tab.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Breakpoints, Watchpoints, Catchpoints, Printpoints, manual gdb commands, and logs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The area below the Code Manager.&lt;/li&gt; &#xA;   &lt;li&gt;Manual commands. Manually enter a gdb or gdbmi command. The commands are remembered for the next Seer use.&lt;/li&gt; &#xA;   &lt;li&gt;Breakpoint manager. Create and manage breakpoints.&lt;/li&gt; &#xA;   &lt;li&gt;Watchpoint manager. Create and manage watchpoints. A watchpoint monitors when a variable is accessed (read, write, read/write).&lt;/li&gt; &#xA;   &lt;li&gt;Catchpoint manager. Create and manage catchpoints. A catchpoint stops execution on a C++ throw/rethrow/catch call.&lt;/li&gt; &#xA;   &lt;li&gt;Printpoint manager. Create and manage printpoints. A printpoint is like a breakpoint but it allows you to print variables at that printpoint. See gdb&#39;s &#39;dprintf&#39; call.&lt;/li&gt; &#xA;   &lt;li&gt;GDB output. A log of any output from the gdb program itself.&lt;/li&gt; &#xA;   &lt;li&gt;Seer output. A log of any output from the Seer program itself. As diagnostics.&lt;/li&gt; &#xA;   &lt;li&gt;Tabs in this view can be detached by double-clicking a tab.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stack frame information.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stack frame list. A frame can be double clicked to change the scope (the current function).&lt;/li&gt; &#xA;   &lt;li&gt;Stack frame arguments. For each frame, print the arguments passed to each function.&lt;/li&gt; &#xA;   &lt;li&gt;Stack locals. For the current function, print the values of the local variables.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thread information.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thread ids. A list of all threads. Double click on a thread id to change the scope (the current thread).&lt;/li&gt; &#xA;   &lt;li&gt;Thread frames. For each thread, list its stack frames.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports Gdb&#39;s Reverse Debugging mode.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Turn instruction recording on or off.&lt;/li&gt; &#xA;   &lt;li&gt;Set playback direction to forward or reverse.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open Dialog&lt;/h2&gt; &#xA;&lt;p&gt;When the open executable dialog is invoked, it looks like this: &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/opendialog.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Seer Console&lt;/h2&gt; &#xA;&lt;p&gt;All text output from the executable will go to the Seer console. Text input for the executable can be entered via the console too. &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/console.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Assembly View&lt;/h2&gt; &#xA;&lt;p&gt;Normally Seer will just show the source code as tabs in the Code Manager. The program&#39;s assembly can also be show as a tab.&lt;/p&gt; &#xA;&lt;p&gt;Select &#34;View-&amp;gt;Assembly View&#34; and an extra tab will be shown alongside the source code tabs that shows the current assembly being executed. Here is an example. &lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/mainview_assemby.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like the source code tabs, breakpoints can be set in the assembly tab. The current instruction is highlighted.&lt;/p&gt; &#xA;&lt;p&gt;Double-clicking on entries in the &#34;Breakpoints&#34; tab and the &#34;Stack frames&#34; tab will show the assembly for those addresses.&lt;/p&gt; &#xA;&lt;p&gt;There are &#34;Nexti&#34; and &#34;Stepi&#34; hot-keys, as defined by your config settings. Normally &#34;Ctrl+F5&#34; and &#34;CTRL+F6&#34;. Using &#34;^F&#34; in the assembly tab will show a powerful search bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The assembly feature in Seer is new. Feel free to suggest changes/features.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Memory Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of raw memory in the Memory Visualizer, it looks like this :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Memory&lt;/th&gt; &#xA;   &lt;th&gt;Disassembly&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/memoryvisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/memoryvisualizer_asm.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Array Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of arrays in the Array Visualizer, it looks like this :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Normal&lt;/th&gt; &#xA;   &lt;th&gt;Spline&lt;/th&gt; &#xA;   &lt;th&gt;Scatter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_spline.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_scatter.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Two arrays can be used as an X-Y plot. For example, this simple &#39;points&#39; array forms the X-Y outline of a shape.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    int main() {&#xA;        int points[] = {50,1,20,91,97,35,2,35,79,91,50,1};&#xA;        return 0;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;X values&lt;/th&gt; &#xA;   &lt;th&gt;Y values&lt;/th&gt; &#xA;   &lt;th&gt;XY Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_x.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_y.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/arrayvisualizer_xy.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Struct Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of a C/C++ struct or a C++ class in the Struct Visualizer, it looks like this. This example shows the contents of &#34;*this&#34; for the current C++ class that Seer is in. All structure members that are basic types can be edited.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/structvisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;strong&gt;Basic Struct Visualizer&lt;/strong&gt; that is more light weight, but can not follow pointers and can not be edited.&lt;/p&gt; &#xA;&lt;h2&gt;Image Visualizer&lt;/h2&gt; &#xA;&lt;p&gt;When looking at the contents of raw memory that is an image, the Image Visualizer can be used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epasveer/seer/main/images/imagevisualizer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Starting Seer&lt;/h1&gt; &#xA;&lt;p&gt;Seer is meant to easily start the program to debug from the command line. gdb has multiple methods for debugging a program. So Seer naturally does too.&lt;/p&gt; &#xA;&lt;p&gt;Go to the Wiki to see all the ways to run Seer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/epasveer/seer/wiki/Starting-Seer&#34;&gt;https://github.com/epasveer/seer/wiki/Starting-Seer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Support/Contact&lt;/h1&gt; &#xA;&lt;p&gt;Send an email to &lt;a href=&#34;mailto:epasveer@att.net&#34;&gt;epasveer@att.net&lt;/a&gt; for any bugs or features. Or create a &lt;a href=&#34;https://github.com/epasveer/seer/issues&#34;&gt;task&lt;/a&gt; in my GitHub project page.&lt;/p&gt;</summary>
  </entry>
</feed>