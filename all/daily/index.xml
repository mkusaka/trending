<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-07T01:26:18Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>state-spaces/mamba</title>
    <updated>2023-12-07T01:26:18Z</updated>
    <id>tag:github.com,2023-12-07:/state-spaces/mamba</id>
    <link href="https://github.com/state-spaces/mamba" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mamba&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/state-spaces/mamba/main/assets/selection.png&#34; alt=&#34;Mamba&#34; title=&#34;Selective State Space&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Mamba: Linear-Time Sequence Modeling with Selective State Spaces&lt;/strong&gt;&lt;br&gt; Albert Gu*, Tri Dao*&lt;br&gt; Paper: &lt;a href=&#34;https://arxiv.org/abs/2312.00752&#34;&gt;https://arxiv.org/abs/2312.00752&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Mamba is a new state space model architecture showing promising performance on information-dense data such as language modeling, where previous subquadratic models fall short of Transformers. It is based on the line of progress on &lt;a href=&#34;https://github.com/state-spaces/s4&#34;&gt;structured state space models&lt;/a&gt;, with an efficient hardware-aware design and implementation in the spirit of &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;FlashAttention&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install causal-conv1d&lt;/code&gt;: an efficient implementation of a simple causal Conv1d layer used inside the Mamba block.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install mamba-ssm&lt;/code&gt;: the core Mamba package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It can also be built from source with &lt;code&gt;pip install .&lt;/code&gt; from this repository.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;pip&lt;/code&gt; complains about PyTorch versions, try passing &lt;code&gt;--no-build-isolation&lt;/code&gt; to &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA GPU&lt;/li&gt; &#xA; &lt;li&gt;PyTorch 1.12+&lt;/li&gt; &#xA; &lt;li&gt;CUDA 11.6+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;We expose several levels of interface with the Mamba model.&lt;/p&gt; &#xA;&lt;h3&gt;Selective SSM&lt;/h3&gt; &#xA;&lt;p&gt;Mamba is based on a selective SSM layer, which is the focus of the paper (Section 3; Algorithm 2).&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://raw.githubusercontent.com/state-spaces/mamba/main/mamba_ssm/ops/selective_scan_interface.py&#34;&gt;ops/selective_scan_interface.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mamba Block&lt;/h3&gt; &#xA;&lt;p&gt;The main module of this repository is the Mamba architecture block wrapping the selective SSM.&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://raw.githubusercontent.com/state-spaces/mamba/main/mamba_ssm/modules/mamba_simple.py&#34;&gt;modules/mamba_simple.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from mamba_ssm import Mamba&#xA;&#xA;batch, length, dim = 2, 64, 16&#xA;x = torch.randn(batch, length, dim).to(&#34;cuda&#34;)&#xA;model = Mamba(&#xA;    # This module uses roughly 3 * expand * d_model^2 parameters&#xA;    d_model=dim, # Model dimension d_model&#xA;    d_state=16,  # SSM state expansion factor&#xA;    d_conv=4,    # Local convolution width&#xA;    expand=2,    # Block expansion factor&#xA;).to(&#34;cuda&#34;)&#xA;y = model(x)&#xA;assert y.shape == x.shape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mamba Language Model&lt;/h3&gt; &#xA;&lt;p&gt;Finally, we provide an example of a complete language model: a deep sequence model backbone (with repeating Mamba blocks) + language model head.&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://raw.githubusercontent.com/state-spaces/mamba/main/mamba_ssm/models/mixer_seq_simple.py&#34;&gt;models/mixer_seq_simple.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is an example of how to integrate Mamba into an end-to-end neural network. This example is used in the generation scripts below.&lt;/p&gt; &#xA;&lt;h2&gt;Pretrained Models&lt;/h2&gt; &#xA;&lt;p&gt;Pretrained models are uploaded to &lt;a href=&#34;https://huggingface.co/state-spaces&#34;&gt;HuggingFace&lt;/a&gt;: &lt;code&gt;mamba-130m&lt;/code&gt;, &lt;code&gt;mamba-370m&lt;/code&gt;, &lt;code&gt;mamba-790m&lt;/code&gt;, &lt;code&gt;mamba-1.4b&lt;/code&gt;, &lt;code&gt;mamba-2.8b&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The models will be autodownloaded by the generation script below.&lt;/p&gt; &#xA;&lt;p&gt;These models were trained on the &lt;a href=&#34;https://huggingface.co/datasets/EleutherAI/pile&#34;&gt;Pile&lt;/a&gt;, and follow the standard model dimensions described by GPT-3 and followed by many open source models:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Layers&lt;/th&gt; &#xA;   &lt;th&gt;Model dim.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;130M&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;370M&lt;/td&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;1024&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;790M&lt;/td&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;1536&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.4B&lt;/td&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;2048&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.8B&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;2560&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(The layer count of Mamba should be doubled, as two Mamba blocks are needed for each &#34;layer&#34; (MHA block + MLP block) of a Transformer.)&lt;/p&gt; &#xA;&lt;p&gt;Note: these are base models trained only for 300B tokens, without any form of downstream modification (instruction tuning, etc.). Performance is expected to be comparable or better than other architectures trained on similar data, but not to match larger or fine-tuned models.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluations&lt;/h2&gt; &#xA;&lt;p&gt;To run zero-shot evaluations of models (corresponding to Table 3 of the paper), we use the &lt;a href=&#34;https://github.com/EleutherAI/lm-evaluation-harness/tree/big-refactor&#34;&gt;lm-evaluation-harness&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pull the &lt;code&gt;lm-evaluation-harness&lt;/code&gt; repo by &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;. We use the &lt;code&gt;big-refactor&lt;/code&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;lm-evaluation-harness&lt;/code&gt;: &lt;code&gt;pip install -e 3rdparty/lm-evaluation-harness&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run evaluation with (more documentation at the &lt;a href=&#34;https://github.com/EleutherAI/lm-evaluation-harness/tree/big-refactor&#34;&gt;lm-evaluation-harness&lt;/a&gt; repo):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python evals/lm_harness_eval.py --model mamba --model_args pretrained=state-spaces/mamba-130m --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande --device cuda --batch_size 64&#xA;python evals/lm_harness_eval.py --model hf --model_args pretrained=EleutherAI/pythia-160m --tasks lambada_openai,hellaswag,piqa,arc_easy,arc_challenge,winogrande --device cuda --batch_size 64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the result of each task might differ from reported values by 0.1-0.3 due to noise in the evaluation process.&lt;/p&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;The script &lt;a href=&#34;https://raw.githubusercontent.com/state-spaces/mamba/main/benchmarks/benchmark_generation_mamba_simple.py&#34;&gt;benchmarks/benchmark_generation_mamba_simple.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;autoloads a model from the HuggingFace Hub,&lt;/li&gt; &#xA; &lt;li&gt;generates completions of a user-specified prompt,&lt;/li&gt; &#xA; &lt;li&gt;benchmarks the inference speed of this generation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Other configurable options include the top-p (nucleus sampling) probability, and the softmax temperature.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;To test generation latency (e.g. batch size = 1) with different sampling strategies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python benchmarks/benchmark_generation_mamba_simple.py --model-name &#34;state-spaces/mamba-2.8b&#34; --prompt &#34;My cat wrote all this CUDA code for a new language model and&#34; --topp 0.9 --temperature 0.5&#xA;python benchmarks/benchmark_generation_mamba_simple.py --model-name &#34;EleutherAI/pythia-2.8b&#34; --prompt &#34;My cat wrote all this CUDA code for a new language model and&#34; --topp 0.9 --temperature 0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test generation throughput with random prompts (e.g. large batch size):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python benchmarks/benchmark_generation_mamba_simple.py --model-name &#34;state-spaces/mamba-2.8b&#34; --batch 128&#xA;python benchmarks/benchmark_generation_mamba_simple.py --model-name &#34;EleutherAI/pythia-2.8b&#34; --batch 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Our models were trained using PyTorch &lt;a href=&#34;https://pytorch.org/docs/stable/amp.html&#34;&gt;AMP&lt;/a&gt; for mixed precision. AMP keeps model parameters in float32 and casts to half precision when necessary. On the other hand, other frameworks like DeepSpeed store parameters in float16 and upcasts when necessary (e.g. for optimizer accumulation).&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve observed that higher precision for the main model parameters may be necessary, because SSMs are sensitive to their recurrent dynamics. If you are experiencing instabilities, as a first step please try a framework storing parameters in fp32 (such as AMP).&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this codebase, or otherwise found our work valuable, please cite Mamba:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{mamba,&#xA;  title={Mamba: Linear-Time Sequence Modeling with Selective State Spaces},&#xA;  author={Gu, Albert and Dao, Tri},&#xA;  journal={arXiv preprint arXiv:2312.00752},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>magic-research/magic-animate</title>
    <updated>2023-12-07T01:26:18Z</updated>
    <id>tag:github.com,2023-12-07:/magic-research/magic-animate</id>
    <link href="https://github.com/magic-research/magic-animate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MagicAnimate: Temporally Consistent Human Image Animation using Diffusion Model&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;MagicAnimate: Temporally Consistent Human Image Animation using Diffusion Model&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://scholar.google.com/citations?user=-4iADzMAAAAJ&amp;amp;hl=en&#34;&gt;&lt;strong&gt;Zhongcong Xu&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;http://jeff95.me/&#34;&gt;&lt;strong&gt;Jianfeng Zhang&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://scholar.google.com.sg/citations?user=8gm-CYYAAAAJ&amp;amp;hl=en&#34;&gt;&lt;strong&gt;Jun Hao Liew&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://hanshuyan.github.io/&#34;&gt;&lt;strong&gt;Hanshu Yan&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://scholar.google.com/citations?user=stQQf7wAAAAJ&amp;amp;hl=en&#34;&gt;&lt;strong&gt;Jia-Wei Liu&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://zhangchenxu528.github.io/&#34;&gt;&lt;strong&gt;Chenxu Zhang&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://sites.google.com/site/jshfeng/home&#34;&gt;&lt;strong&gt;Jiashi Feng&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://sites.google.com/view/showlab&#34;&gt;&lt;strong&gt;Mike Zheng Shou&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://arxiv.org/abs/2311.16498&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-MagicAnimate-red&#34; alt=&#34;Paper PDF&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://showlab.github.io/magicanimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project_Page-MagicAnimate-green&#34; alt=&#34;Project Page&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/zcxu-eric/magicanimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;b&gt;National University of Singapore &amp;nbsp; | &amp;nbsp; ByteDance&lt;/b&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/magic-research/magic-animate/main/assets/teaser/t1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/magic-research/magic-animate/main/assets/teaser/t4.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/magic-research/magic-animate/main/assets/teaser/t3.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/magic-research/magic-animate/main/assets/teaser/t2.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;📢 News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2023.12.4]&lt;/strong&gt; Release inference code and gradio demo. We are working to improve MagicAnimate, stay tuned!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2023.11.23]&lt;/strong&gt; Release MagicAnimate paper and project page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏃‍♂️ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Please download the pretrained base models for &lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5&#34;&gt;StableDiffusion V1.5&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/stabilityai/sd-vae-ft-mse&#34;&gt;MSE-finetuned VAE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download our MagicAnimate &lt;a href=&#34;https://huggingface.co/zcxu-eric/MagicAnimate&#34;&gt;checkpoints&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Place them as follows:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;magic-animate&#xA;|----pretrained_models&#xA;  |----MagicAnimate&#xA;    |----appearance_encoder&#xA;      |----diffusion_pytorch_model.safetensors&#xA;      |----config.json&#xA;    |----densepose_controlnet&#xA;      |----diffusion_pytorch_model.safetensors&#xA;      |----config.json&#xA;    |----temporal_attention&#xA;      |----temporal_attention.ckpt&#xA;  |----sd-vae-ft-mse&#xA;    |----...&#xA;  |----stable-diffusion-v1-5&#xA;    |----...&#xA;|----...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚒️ Installation&lt;/h2&gt; &#xA;&lt;p&gt;prerequisites: &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;, &lt;code&gt;CUDA&amp;gt;=11.3&lt;/code&gt;, and &lt;code&gt;ffmpeg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install with &lt;code&gt;conda&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create -f environment.yaml&#xA;conda activate manimate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💃 Inference&lt;/h2&gt; &#xA;&lt;p&gt;Run inference on single GPU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/animate.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run inference with multiple GPUs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/animate_dist.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎨 Gradio Demo&lt;/h2&gt; &#xA;&lt;h4&gt;Online Gradio Demo:&lt;/h4&gt; &#xA;&lt;p&gt;Try our &lt;a href=&#34;https://huggingface.co/spaces/zcxu-eric/magicanimate&#34;&gt;online gradio demo&lt;/a&gt; quickly.&lt;/p&gt; &#xA;&lt;h4&gt;Local Gradio Demo:&lt;/h4&gt; &#xA;&lt;p&gt;Launch local gradio demo on single GPU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m demo.gradio_animate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch local gradio demo if you have multiple GPUs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m demo.gradio_animate_dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open gradio demo in local browser.&lt;/p&gt; &#xA;&lt;h2&gt;🙏 Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We would like to thank &lt;a href=&#34;https://twitter.com/_akhaliq?lang=en&#34;&gt;AK(@_akhaliq)&lt;/a&gt; and huggingface team for the help of setting up oneline gradio demo.&lt;/p&gt; &#xA;&lt;h2&gt;🎓 Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this codebase useful for your research, please use the following entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;@inproceedings{xu2023magicanimate,&#xA;    author    = {Xu, Zhongcong and Zhang, Jianfeng and Liew, Jun Hao and Yan, Hanshu and Liu, Jia-Wei and Zhang, Chenxu and Feng, Jiashi and Shou, Mike Zheng},&#xA;    title     = {MagicAnimate: Temporally Consistent Human Image Animation using Diffusion Model},&#xA;    booktitle = {arXiv},&#xA;    year      = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ExpLangcn/NucleiTP</title>
    <updated>2023-12-07T01:26:18Z</updated>
    <id>tag:github.com,2023-12-07:/ExpLangcn/NucleiTP</id>
    <link href="https://github.com/ExpLangcn/NucleiTP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;自动整合全网Nuclei的漏洞POC，实时同步更新最新POC！&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NucleiTP 全网监控 Nuclei Poc 实时更新&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;根据风险等级分别存储不同文件夹&lt;/li&gt; &#xA; &lt;li&gt;自动测试Poc是否可以使用Nuclei加载&lt;/li&gt; &#xA; &lt;li&gt;重复Poc自动重命名，方便手工分析&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关注我的&lt;a href=&#34;https://twitter.com/ExpLang_Cn&#34;&gt;Twitter&lt;/a&gt;，快速了解我在做什么，我正在等待你的关注！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;订阅&lt;/h1&gt; &#xA;&lt;img width=&#34;524&#34; alt=&#34;image&#34; src=&#34;https://github.com/ExpLangcn/NucleiTP/assets/52586866/bbaacd7e-0d4b-4959-80dd-f92d4617d132&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;关注仓库变动 快速获取最新 Poc&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>