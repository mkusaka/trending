<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:31:54Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>still-scene/t3</title>
    <updated>2022-06-26T01:31:54Z</updated>
    <id>tag:github.com,2022-06-26:/still-scene/t3</id>
    <link href="https://github.com/still-scene/t3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tooll 3 is an open source software to create realtime motion graphics.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tooll 3 - A realtime animation toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/YmSyQdeH3S&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/823853172619083816.svg?style=for-the-badge&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alelievr/Mixture/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PrxhwOC9hLw&#34; title=&#34;Tooll3 - A quick overview&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1732545/173256422-a4ef9894-d954-4bc3-8c24-000bfbe1c3ad.png&#34; alt=&#34;tooll-screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;A standalone version is in development. Although it&#39;s working already, it needs further clean up and testing.&lt;/p&gt; &#xA;&lt;p&gt;This means that you need an IDE, like Visual Studio or Rider, to build and run it. This is free and not as difficult as it might sound.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We only test on Win10. But Win11 might work too.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t have a .net IDE installed already download and install the &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Community Edition of Visual Studio v16.11 (or later)&lt;/a&gt;. In the installer make sure to select the features... &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;.net Desktop Application development&lt;/li&gt; &#xA;   &lt;li&gt;.net 4.7.1 (on the right side)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-5.0.404-windows-x64-installer&#34;&gt;.net 5.0 SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You might also want to download and install a git client like &lt;a href=&#34;https://git-fork.com/&#34;&gt;https://git-fork.com/&lt;/a&gt; . Alternatively, you can install the bare bone git scm.&lt;/li&gt; &#xA; &lt;li&gt;On Windows 10, you also need to install &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/uwp/gaming/use-the-directx-runtime-and-visual-studio-graphics-diagnostic-features&#34;&gt;Windows Graphics tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Cloning the repository&lt;/h3&gt; &#xA;&lt;h4&gt;If you don&#39;t have a git account&lt;/h4&gt; &#xA;&lt;p&gt;Ideally, it would be better to sign-up. It&#39;s free and only takes a minute or so. This will allow you share your changes with the community. If not, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that you have git scm installed (see above)&lt;/li&gt; &#xA; &lt;li&gt;Right file explorer right click on the folder you want T3 to install in and select &lt;strong&gt;Open git bash here&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone: &lt;code&gt;git clone git@github.com:still-scene/t3.git&lt;/code&gt; Note: As of 2021-11-05 we no longer use submodules, so you don&#39;t have to care about setting up those.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;If you have a git account&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have a git account, we recommend using ssh. Make sure you have an ssh-key installed correctly. Github has &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;excellent documentation&lt;/a&gt; on that topic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With Fork you just clone the repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using the command line&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone  git@github.com:still-scene/t3.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Completing the installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;Install/install.bat&lt;/code&gt; To initialize some dependencies and the default view layouts. If you cleaned your solution with visual studio, you might need to run the install.bat script again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building and starting&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;t3.sln&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the Solution Explorer right click on &lt;strong&gt;T3&lt;/strong&gt; to open the Properties panel. Under the section &lt;strong&gt;Debug&lt;/strong&gt;, change the &lt;strong&gt;Working directory&lt;/strong&gt; for all build modes to &lt;code&gt;..&lt;/code&gt;. This is important, because the Resources folder needs to be on the same logical level as the starting directory. If this is not match you will experience errors like &#34;t3.ico&#34; not found.&lt;/li&gt; &#xA; &lt;li&gt;Start the project in Debug or Release mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;To get started read the &lt;a href=&#34;https://github.com/still-scene/t3/wiki/user-interface&#34;&gt;documentation&lt;/a&gt; or watch &lt;a href=&#34;https://www.youtube.com/watch?v=eH2E02U6P5Q&amp;amp;list=PLj-rnPROvbn3LigXGRSDvmLtgTwmNHcQs&amp;amp;index=4&#34;&gt;tutorial videos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or feedback, please join us on discord: &lt;a href=&#34;https://discord.gg/YmSyQdeH3S&#34;&gt;https://discord.gg/YmSyQdeH3S&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dolthub/dolt</title>
    <updated>2022-06-26T01:31:54Z</updated>
    <id>tag:github.com,2022-06-26:/dolthub/dolt</id>
    <link href="https://github.com/dolthub/dolt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dolt – It&#39;s Git for Data&lt;/p&gt;&lt;hr&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/dolthub/dolt/main/docs/Dolt-Logo@3x.svg?sanitize=true&#34;&gt; &#xA;&lt;h1&gt;Dolt is Git for Data!&lt;/h1&gt; &#xA;&lt;p&gt;Dolt is a SQL database that you can fork, clone, branch, merge, push and pull just like a git repository. Connect to Dolt just like any MySQL database to run queries or update the data using SQL commands. Use the command line interface to import CSV files, commit your changes, push them to a remote, or merge your teammate&#39;s changes.&lt;/p&gt; &#xA;&lt;p&gt;All the commands you know for Git work exactly the same for Dolt. Git versions files, Dolt versions tables. It&#39;s like Git and MySQL had a baby.&lt;/p&gt; &#xA;&lt;p&gt;We also built &lt;a href=&#34;https://www.dolthub.com&#34;&gt;DoltHub&lt;/a&gt;, a place to share Dolt databases. We host public data for free. If you want to host your own version of DoltHub, we have &lt;a href=&#34;https://www.doltlab.com&#34;&gt;DoltLab&lt;/a&gt;. If you want us to run a Dolt server for you, we have &lt;a href=&#34;https://hosted.doltdb.com&#34;&gt;Hosted Dolt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/RFwfYpu&#34;&gt;Join us on Discord&lt;/a&gt; to say hi and ask questions.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s it for?&lt;/h2&gt; &#xA;&lt;p&gt;Lots of things! Dolt is a generally useful tool with countless applications. But if you want some ideas, &lt;a href=&#34;https://www.dolthub.com/blog/2021-03-09-dolt-use-cases-in-the-wild/&#34;&gt;here&#39;s how people are using it so far&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Dolt CLI&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;dolt&lt;/code&gt; CLI has the same commands as &lt;code&gt;git&lt;/code&gt;, with some extras.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dolt&#xA;Valid commands for dolt are&#xA;                init - Create an empty Dolt data repository.&#xA;              status - Show the working tree status.&#xA;                 add - Add table changes to the list of staged table changes.&#xA;                diff - Diff a table.&#xA;               reset - Remove table changes from the list of staged table changes.&#xA;               clean - Remove untracked tables from working set.&#xA;              commit - Record changes to the repository.&#xA;                 sql - Run a SQL query against tables in repository.&#xA;          sql-server - Start a MySQL-compatible server.&#xA;          sql-client - Starts a built-in MySQL client.&#xA;                 log - Show commit logs.&#xA;              branch - Create, list, edit, delete branches.&#xA;            checkout - Checkout a branch or overwrite a table from HEAD.&#xA;               merge - Merge a branch.&#xA;           conflicts - Commands for viewing and resolving merge conflicts.&#xA;         cherry-pick - Apply the changes introduced by an existing commit.&#xA;              revert - Undo the changes introduced in a commit.&#xA;               clone - Clone from a remote data repository.&#xA;               fetch - Update the database from a remote data repository.&#xA;                pull - Fetch from a dolt remote data repository and merge.&#xA;                push - Push to a dolt remote.&#xA;              config - Dolt configuration.&#xA;              remote - Manage set of tracked repositories.&#xA;              backup - Manage a set of server backups.&#xA;               login - Login to a dolt remote host.&#xA;               creds - Commands for managing credentials.&#xA;                  ls - List tables in the working set.&#xA;              schema - Commands for showing and importing table schemas.&#xA;               table - Commands for copying, renaming, deleting, and exporting tables.&#xA;                 tag - Create, list, delete tags.&#xA;               blame - Show what revision and author last modified each row of a table.&#xA;         constraints - Commands for handling constraints.&#xA;             migrate - Executes a database migration to use the latest Dolt data format.&#xA;         read-tables - Fetch table(s) at a specific commit into a new dolt repo&#xA;                  gc - Cleans up unreferenced data from the repository.&#xA;       filter-branch - Edits the commit history using the provided query.&#xA;          merge-base - Find the common ancestor of two commits.&#xA;             version - Displays the current Dolt cli version.&#xA;                dump - Export all tables in the working set into a file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Dolt is a single ~68 megabyte program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dolt $ du -h /Users/timsehn//go/bin/dolt&#xA; 68M&#x9;/Users/timsehn/go/bin/dolt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s really easy to install. Download it and put it on your &lt;code&gt;PATH&lt;/code&gt;. We have a bunch of ways to make this even easier for most platforms.&lt;/p&gt; &#xA;&lt;h2&gt;From Latest Release&lt;/h2&gt; &#xA;&lt;p&gt;To install on Linux or Mac based systems run this command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo bash -c &#39;curl -L https://github.com/dolthub/dolt/releases/latest/download/install.sh | bash&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download the latest &lt;code&gt;dolt&lt;/code&gt; release and put it in &lt;code&gt;/usr/local/bin/&lt;/code&gt;, which is probably on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The install script needs sudo in order to put &lt;code&gt;dolt&lt;/code&gt; in &lt;code&gt;/usr/local/bin&lt;/code&gt;. If you don&#39;t have root privileges or aren&#39;t comfortable running a script with them, you can download the dolt binary for your platform from &lt;a href=&#34;https://github.com/dolthub/dolt/releases&#34;&gt;the latest release&lt;/a&gt;, unzip it, and put the binary somewhere on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;Dolt is on Homebrew, updated every release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install dolt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest Microsoft Installer (&lt;code&gt;.msi&lt;/code&gt; file) in &lt;a href=&#34;https://github.com/dolthub/dolt/releases&#34;&gt;releases&lt;/a&gt; and run it.&lt;/p&gt; &#xA;&lt;p&gt;For information on running on Windows, see &lt;a href=&#34;https://raw.githubusercontent.com/dolthub/dolt/main/docs/windows.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Chocolatey&lt;/h4&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;dolt&lt;/code&gt; using &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install dolt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;From Source&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have Go installed, and that &lt;code&gt;go&lt;/code&gt; is in your path.&lt;/p&gt; &#xA;&lt;p&gt;Clone this repository and cd into the &lt;code&gt;go&lt;/code&gt; directory. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install ./cmd/dolt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Verify that your installation has succeeded by running &lt;code&gt;dolt&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dolt&#xA;Valid commands for dolt are&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;dolt&lt;/code&gt; with your user name and email, which you&#39;ll need to create commits. The commands work exactly the same as git.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dolt config --global --add user.email YOU@DOMAIN.COM&#xA;$ dolt config --global --add user.name &#34;YOUR NAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Navigate to the directory where you would like your data stored&lt;/h2&gt; &#xA;&lt;p&gt;Dolt needs a place to store your databases. I&#39;m going to put my databases in &lt;code&gt;~/dolt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% cd ~&#xA;% mkdir dolt&#xA;% cd dolt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any databases you create will be stored in this directory. So, for this example, a directory named &lt;code&gt;getting_started&lt;/code&gt; will be created here once you run &lt;code&gt;create database getting_started&lt;/code&gt;. Navigating to &lt;code&gt;~/dolt/getting_started&lt;/code&gt; will allow you to access this database using the Dolt command line.&lt;/p&gt; &#xA;&lt;h2&gt;Start a MySQL-compatible database server&lt;/h2&gt; &#xA;&lt;p&gt;Dolt ships with a MySQL compatible database server built in. To start it you use the command &lt;code&gt;dolt sql-server&lt;/code&gt;. Running this command starts the server on port 3306.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dolt sql-server&#xA;Starting server with Config HP=&#34;localhost:3306&#34;|T=&#34;28800000&#34;|R=&#34;false&#34;|L=&#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your terminal will just hang there. This means the server is running. Any errors will be printed in this terminal. Just leave it there and open a new terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Connect with any MySQL client&lt;/h2&gt; &#xA;&lt;p&gt;In the new terminal, we will now connect to the running database server using a client. Dolt also ships with a MySQL compatible client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% dolt sql-client&#xA;# Welcome to the Dolt MySQL client.&#xA;# Statements must be terminated with &#39;;&#39;.&#xA;# &#34;exit&#34; or &#34;quit&#34; (or Ctrl-D) to exit.&#xA;mysql&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the other terminal where you ran &lt;code&gt;dolt sql-server&lt;/code&gt;, you&#39;ll see the following log line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2022-06-06T13:14:32-07:00 INFO [conn 1] NewConnection {DisableClientMultiStatements=false}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are connected!&lt;/p&gt; &#xA;&lt;p&gt;While we&#39;re here let&#39;s grab a copy of MySQL so we can connect with that client. Head over to the &lt;a href=&#34;https://dev.mysql.com/doc/mysql-getting-started/en/&#34;&gt;MySQL Getting Started&lt;/a&gt; documentation and install MySQL on your machine. I used &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to install MySQL on my Mac.&lt;/p&gt; &#xA;&lt;p&gt;MySQL comes with a MySQL server called &lt;code&gt;mysqld&lt;/code&gt; and a MySQL client called &lt;code&gt;mysql&lt;/code&gt;. You&#39;re only interested in the client. After following the instructions from MySQL&#39;s documentation, make sure you have a copy of the &lt;code&gt;mysql&lt;/code&gt; client on your path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% mysql --version&#xA;mysql  Ver 8.0.29 for macos12.2 on x86_64 (Homebrew)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, to connect the &lt;code&gt;mysql&lt;/code&gt; client to Dolt, you have to force the MySQL client through the TCP interface by passing in a host and port. The default is the socket interface which Dolt does not support. The MySQL client also requires you specify a user, in this case &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% mysql --host 127.0.0.1 --port 3306 -uroot&#xA;Welcome to the MySQL monitor.  Commands end with ; or \g.&#xA;Your MySQL connection id is 2&#xA;Server version: 5.7.9-Vitess &#xA;&#xA;Copyright (c) 2000, 2022, Oracle and/or its affiliates.&#xA;&#xA;Oracle is a registered trademark of Oracle Corporation and/or its&#xA;affiliates. Other names may be trademarks of their respective&#xA;owners.&#xA;&#xA;Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.&#xA;&#xA;mysql&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Again, to ensure the client actually connected, you should see the following in the &lt;code&gt;dolt sql-server&lt;/code&gt; terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2022-06-06T13:26:55-07:00 INFO [conn 2] NewConnection {DisableClientMultiStatements=false}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, Dolt supports any MySQL-compatible client. Dolt ships with a client but you can use any MySQL client, like the one that comes with MySQL.&lt;/p&gt; &#xA;&lt;h2&gt;Create a schema&lt;/h2&gt; &#xA;&lt;p&gt;Now we&#39;re actually ready to do something interesting. I&#39;ll stay in the &lt;code&gt;mysql&lt;/code&gt; client and execute the following SQL statements to create a database called &lt;code&gt;getting_started&lt;/code&gt;. The &lt;code&gt;getting_started&lt;/code&gt; database will have three tables: &lt;code&gt;employees&lt;/code&gt;, &lt;code&gt;teams&lt;/code&gt;, and &lt;code&gt;employees_teams&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database getting_started;&#xA;Query OK, 1 row affected (0.04 sec)&#xA;&#xA;mysql&amp;gt; use getting_started;&#xA;Database changed&#xA;mysql&amp;gt; create table employees (&#xA;    id int, &#xA;    last_name varchar(255), &#xA;    first_name varchar(255), &#xA;    primary key(id));&#xA;Query OK, 0 rows affected (0.01 sec)&#xA;&#xA;mysql&amp;gt; create table teams (&#xA;    id int, &#xA;    team_name varchar(255), &#xA;    primary key(id)); &#xA;Query OK, 0 rows affected (0.00 sec)&#xA;&#xA;mysql&amp;gt; create table employees_teams(&#xA;    team_id int, &#xA;    employee_id int, &#xA;    primary key(team_id, employee_id), &#xA;    foreign key (team_id) references teams(id), &#xA;    foreign key (employee_id) references employees(id));&#xA;Query OK, 0 rows affected (0.01 sec)&#xA;&#xA;mysql&amp;gt; show tables;&#xA;+---------------------------+&#xA;| Tables_in_getting_started |&#xA;+---------------------------+&#xA;| employees                 |&#xA;| employees_teams           |&#xA;| teams                     |&#xA;+---------------------------+&#xA;3 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dolt supports foreign keys, secondary indexes, triggers, check constraints, and stored procedures. It&#39;s a modern, feature-rich SQL database.&lt;/p&gt; &#xA;&lt;h2&gt;Make a Dolt commit&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s time to use your first Dolt feature. We&#39;re going to make a Dolt &lt;a href=&#34;https://docs.dolthub.com/concepts/dolt/commits&#34;&gt;commit&lt;/a&gt;. A Dolt commit allows you to time travel and see lineage. Make a Dolt commit whenever you want to restore or compare to this point in time.&lt;/p&gt; &#xA;&lt;p&gt;Dolt exposes version control functionality through a Git-style interface. On the command line, Dolt commands map exactly to their Git equivalent with the targets being tables instead of files. In SQL, Dolt exposes version control read operations as &lt;a href=&#34;https://docs.dolthub.com/sql-reference/version-control/dolt-system-tables&#34;&gt;system tables&lt;/a&gt; and version control write operations as &lt;a href=&#34;https://docs.dolthub.com/sql-reference/version-control/dolt-sql-procedures&#34;&gt;stored procedures&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The naming of the system tables and stored procedures follows the &lt;code&gt;dolt_&amp;lt;command&amp;gt;&lt;/code&gt; pattern. So &lt;code&gt;dolt add&lt;/code&gt; on the CLI becomes &lt;code&gt;dolt_add&lt;/code&gt; as a stored procedure. Passing options also follows the command line model. For instance, to specify tables to add, send the table names in as options to the &lt;code&gt;dolt_add&lt;/code&gt; procedure. For named arguments like sending a message into the &lt;code&gt;dolt_commit&lt;/code&gt; command use two arguments in sequence like &lt;code&gt;(&#39;-m&#39;, &#39;This is a message&#39;)&lt;/code&gt;. If you know Git, the version control procedures and system tables should feel familiar.&lt;/p&gt; &#xA;&lt;p&gt;So, we add and commit our new schema like so.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_add(&#39;teams&#39;, &#39;employees&#39;, &#39;employees_teams&#39;);&#xA;+--------+&#xA;| status |&#xA;+--------+&#xA;|      0 |&#xA;+--------+&#xA;1 row in set (0.03 sec)&#xA;&#xA;mysql&amp;gt; call dolt_commit(&#39;-m&#39;, &#39;Created initial schema&#39;);&#xA;+----------------------------------+&#xA;| hash                             |&#xA;+----------------------------------+&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 |&#xA;+----------------------------------+&#xA;1 row in set (0.02 sec)&#xA;&#xA;mysql&amp;gt; select * from dolt_log;&#xA;+----------------------------------+-----------+-----------------+-------------------------+----------------------------+&#xA;| commit_hash                      | committer | email           | date                    | message                    |&#xA;+----------------------------------+-----------+-----------------+-------------------------+----------------------------+&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |&#xA;| vluuhvd0bn59598utedt77ed9q5okbcb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:33:59.531 | Initialize data repository |&#xA;+----------------------------------+-----------+-----------------+-------------------------+----------------------------+&#xA;2 rows in set (0.01 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There you have it. Your schema is created and you have a Dolt commit tracking the creation, as seen in the &lt;code&gt;dolt_log&lt;/code&gt; system table.&lt;/p&gt; &#xA;&lt;p&gt;Note, a Dolt commit is different than a standard SQL transaction &lt;code&gt;COMMIT&lt;/code&gt;. In this case, I am running the database with &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/innodb-autocommit-commit-rollback.html&#34;&gt;&lt;code&gt;AUTOCOMMIT&lt;/code&gt;&lt;/a&gt; on, so each SQL statement is automatically generating a transaction &lt;code&gt;COMMIT&lt;/code&gt;. If you want system to generate a Dolt commit for every transaction use the system variable, &lt;a href=&#34;https://docs.dolthub.com/sql-reference/version-control/dolt-sysvars#dolt_transaction_commit&#34;&gt;&lt;code&gt;@@dolt_transaction_commit&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Insert some data&lt;/h2&gt; &#xA;&lt;p&gt;Now, I&#39;m going to populate the database with a few employees here at DoltHub. Then, I&#39;ll assign the employees to two teams: engineering and sales. The CEO wears many hats at a start up so he&#39;ll be assigned to multiple teams.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; insert into employees values &#xA;    (0, &#39;Sehn&#39;, &#39;Tim&#39;), &#xA;    (1, &#39;Hendriks&#39;, &#39;Brian&#39;), &#xA;    (2, &#39;Son&#39;,&#39;Aaron&#39;), &#xA;    (3, &#39;Fitzgerald&#39;, &#39;Brian&#39;);&#xA;Query OK, 4 rows affected (0.01 sec)&#xA;&#xA;mysql&amp;gt; select * from employees where first_name=&#39;Brian&#39;;&#xA;+------+------------+------------+&#xA;| id   | last_name  | first_name |&#xA;+------+------------+------------+&#xA;|    1 | Hendriks   | Brian      |&#xA;|    3 | Fitzgerald | Brian      |&#xA;+------+------------+------------+&#xA;2 rows in set (0.00 sec)&#xA;&#xA;mysql&amp;gt; insert into teams values &#xA;    (0, &#39;Engineering&#39;), &#xA;    (1, &#39;Sales&#39;);&#xA;Query OK, 2 rows affected (0.00 sec)&#xA;&#xA;mysql&amp;gt; insert into employees_teams values &#xA;    (0,0), &#xA;    (1,0), &#xA;    (2,0), &#xA;    (0,1), &#xA;    (3,1);&#xA;ERROR 1452 (HY000): cannot add or update a child row - Foreign key violation on fk: `rv9ek7ft`, table: `employees_teams`, referenced table: `teams`, key: `[2]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Oops, I violated a constraint. It looks like I created the table with teams before employees. You should always specify your columns when you insert, not rely on natural ordering. Serves me right! Dolt comes with the full power of a modern SQL relational database to ensure data integrity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; insert into employees_teams(employee_id, team_id) values &#xA;    (0,0), &#xA;    (1,0), &#xA;    (2,0), &#xA;    (0,1), &#xA;    (3,1);&#xA;Query OK, 5 rows affected (0.01 sec)&#xA;&#xA;mysql&amp;gt; select first_name, last_name, team_name from employees &#xA;    join employees_teams on (employees.id=employees_teams.employee_id) &#xA;    join teams on (teams.id=employees_teams.team_id) &#xA;    where team_name=&#39;Engineering&#39;;&#xA;+------------+-----------+-------------+&#xA;| first_name | last_name | team_name   |&#xA;+------------+-----------+-------------+&#xA;| Tim        | Sehn      | Engineering |&#xA;| Brian      | Hendriks  | Engineering |&#xA;| Aaron      | Son       | Engineering |&#xA;+------------+-----------+-------------+&#xA;3 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looks like everything is inserted and correct. I was able to list the members of the engineering team using that three table &lt;code&gt;JOIN&lt;/code&gt;. Dolt supports up to twelve table &lt;code&gt;JOIN&lt;/code&gt;s. Again, Dolt is a modern SQL relational database paired with Git-style version control.&lt;/p&gt; &#xA;&lt;h2&gt;Examine the diff&lt;/h2&gt; &#xA;&lt;p&gt;Now, what if you want to see what changed in your working set before you make a commit? You use the &lt;code&gt;dolt_status&lt;/code&gt; and &lt;code&gt;dolt_diff_&amp;lt;tablename&amp;gt;&lt;/code&gt; system tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from dolt_status;&#xA;+-----------------+--------+----------+&#xA;| table_name      | staged | status   |&#xA;+-----------------+--------+----------+&#xA;| teams           |      0 | modified |&#xA;| employees       |      0 | modified |&#xA;| employees_teams |      0 | modified |&#xA;+-----------------+--------+----------+&#xA;3 rows in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; select * from dolt_diff_employees;&#xA;+--------------+---------------+-------+-----------+----------------+----------------+-----------------+---------+----------------------------------+-------------------------+-----------+&#xA;| to_last_name | to_first_name | to_id | to_commit | to_commit_date | from_last_name | from_first_name | from_id | from_commit                      | from_commit_date        | diff_type |&#xA;+--------------+---------------+-------+-----------+----------------+----------------+-----------------+---------+----------------------------------+-------------------------+-----------+&#xA;| Sehn         | Tim           |     0 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |&#xA;| Hendriks     | Brian         |     1 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |&#xA;| Son          | Aaron         |     2 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |&#xA;| Fitzgerald   | Brian         |     3 | WORKING   | NULL           | NULL           | NULL            |    NULL | ne182jemgrlm8jnjmoubfqsstlfi1s98 | 2022-06-07 16:35:49.277 | added     |&#xA;+--------------+---------------+-------+-----------+----------------+----------------+-----------------+---------+----------------------------------+-------------------------+-----------+&#xA;4 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see from the diff I&#39;ve added the correct values to the &lt;code&gt;employees&lt;/code&gt; table. The values were previously &lt;code&gt;NULL&lt;/code&gt; and now they are populated.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s finish off with another Dolt commit this time adding all effected tables using &lt;code&gt;-am&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_commit(&#39;-am&#39;, &#39;Populated tables with data&#39;);&#xA;+----------------------------------+&#xA;| hash                             |&#xA;+----------------------------------+&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 |&#xA;+----------------------------------+&#xA;1 row in set (0.02 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can inspect the log using &lt;code&gt;dolt_log&lt;/code&gt; and see which tables changed in each commit using an unscoped &lt;code&gt;dolt_diff&lt;/code&gt;. Unscoped &lt;code&gt;dolt_diff&lt;/code&gt; tells you whether schema, data, or both changed in that particular commit for the table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from dolt_log;&#xA;+----------------------------------+-----------+-----------------+-------------------------+----------------------------+&#xA;| commit_hash                      | committer | email           | date                    | message                    |&#xA;+----------------------------------+-----------+-----------------+-------------------------+----------------------------+&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |&#xA;| vluuhvd0bn59598utedt77ed9q5okbcb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:33:59.531 | Initialize data repository |&#xA;+----------------------------------+-----------+-----------------+-------------------------+----------------------------+&#xA;3 rows in set (0.00 sec)&#xA;&#xA;mysql&amp;gt; select * from dolt_diff;&#xA;+----------------------------------+-----------------+-----------+-----------------+-------------------------+----------------------------+-------------+---------------+&#xA;| commit_hash                      | table_name      | committer | email           | date                    | message                    | data_change | schema_change |&#xA;+----------------------------------+-----------------+-----------+-----------------+-------------------------+----------------------------+-------------+---------------+&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 | teams           | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |           1 |             0 |&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 | employees       | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |           1 |             0 |&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 | employees_teams | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data |           1 |             0 |&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 | employees       | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |           0 |             1 |&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 | employees_teams | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |           0 |             1 |&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 | teams           | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema     |           0 |             1 |&#xA;+----------------------------------+-----------------+-----------+-----------------+-------------------------+----------------------------+-------------+---------------+&#xA;6 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Oh no! I made a mistake.&lt;/h2&gt; &#xA;&lt;p&gt;Dolt supports undoing changes via &lt;code&gt;call dolt_reset()&lt;/code&gt;. Let&#39;s imagine I accidentally drop a table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; drop table employees_teams;&#xA;Query OK, 0 rows affected (0.01 sec)&#xA;&#xA;mysql&amp;gt; show tables;&#xA;+---------------------------+&#xA;| Tables_in_getting_started |&#xA;+---------------------------+&#xA;| employees                 |&#xA;| teams                     |&#xA;+---------------------------+&#xA;2 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a traditional database, this could be disastrous. In Dolt, you&#39;re one command away from getting your table back.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_reset(&#39;--hard&#39;);&#xA;+--------+&#xA;| status |&#xA;+--------+&#xA;|      0 |&#xA;+--------+&#xA;1 row in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; show tables;&#xA;+---------------------------+&#xA;| Tables_in_getting_started |&#xA;+---------------------------+&#xA;| employees                 |&#xA;| employees_teams           |&#xA;| teams                     |&#xA;+---------------------------+&#xA;3 rows in set (0.01 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dolt makes operating databases less error prone. You can always back out changes you have in progress or rewind to a known good state. You also have the ability to undo specific commits using &lt;a href=&#34;https://docs.dolthub.com/sql-reference/version-control/dolt-sql-procedures#dolt_revert&#34;&gt;&lt;code&gt;dolt_revert()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note, the only unrecoverable SQL statement in Dolt is &lt;code&gt;drop database&lt;/code&gt;. This deletes the database and all of its history on disk. &lt;code&gt;drop database&lt;/code&gt; works this way for SQL tool compatibility as it is common for import tools to issue a &lt;code&gt;drop database&lt;/code&gt; to clear all database state before an import. Dolt implements &lt;a href=&#34;https://docs.dolthub.com/concepts/dolt/remotes&#34;&gt;remotes&lt;/a&gt; like in Git so you can maintain an offline copy for backup using clone, fetch, push, and pull. Maintaining a remote copy allows you to restore in the case of an errant &lt;code&gt;drop database&lt;/code&gt; query.&lt;/p&gt; &#xA;&lt;h2&gt;See the data in a SQL Workbench&lt;/h2&gt; &#xA;&lt;p&gt;Hate the command line? Let&#39;s use &lt;a href=&#34;https://tableplus.com/&#34;&gt;Tableplus&lt;/a&gt; to make some modifications. Tableplus is a free SQL Workbench. Follow the installation instructions from their website.&lt;/p&gt; &#xA;&lt;p&gt;Now, to connect you must select MySQL as the connection type. Then enter a name for your connection, &lt;code&gt;getting_started&lt;/code&gt; as your database, and &lt;code&gt;root&lt;/code&gt; as your user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dolthub/dolt/main/docs/getting-started-tp-connect.png&#34; alt=&#34;Tableplus Connection&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click connect and you&#39;ll be presented with a familiar database workbench GUI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dolthub/dolt/main/docs/getting-started-tp.png&#34; alt=&#34;Tableplus&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make changes on a branch&lt;/h2&gt; &#xA;&lt;p&gt;To make changes on a branch, I use the &lt;code&gt;dolt_checkout()&lt;/code&gt; stored procedure. Using the &lt;code&gt;-b&lt;/code&gt; option creates a branch, just like in Git.&lt;/p&gt; &#xA;&lt;p&gt;Tableplus gives me the ability to enter a multiple line SQL script on the SQL tab. I entered the following SQL to checkout a branch, update, insert, delete, and finally Dolt commit my changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;call dolt_checkout(&#39;-b&#39;,&#39;modifications&#39;);&#xA;update employees SET first_name=&#39;Timothy&#39; where first_name=&#39;Tim&#39;;&#xA;insert INTO employees (id, first_name, last_name) values (4,&#39;Daylon&#39;, &#39;Wilkins&#39;);&#xA;insert into employees_teams(team_id, employee_id) values (0,4);&#xA;delete from employees_teams where employee_id=0 and team_id=1;&#xA;call dolt_commit(&#39;-am&#39;, &#39;Modifications on a branch&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s the result in Tableplus.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dolthub/dolt/main/docs/getting-started-new-updates.png&#34; alt=&#34;New Updates&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Back in my terminal, I cannot see the table modifications made in Tableplus because they happened on a different branch than the one I have checked out in my session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from dolt_branches;&#xA;+---------------+----------------------------------+------------------+------------------------+-------------------------+----------------------------+&#xA;| name          | hash                             | latest_committer | latest_committer_email | latest_commit_date      | latest_commit_message      |&#xA;+---------------+----------------------------------+------------------+------------------------+-------------------------+----------------------------+&#xA;| main          | 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn         | tim@dolthub.com        | 2022-06-07 16:39:32.066 | Populated tables with data |&#xA;| modifications | uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim Sehn         | tim@dolthub.com        | 2022-06-07 16:41:49.847 | Modifications on a branch  |&#xA;+---------------+----------------------------------+------------------+------------------------+-------------------------+----------------------------+&#xA;2 rows in set (0.00 sec)&#xA;&#xA;mysql&amp;gt; select active_branch();&#xA;+-----------------+&#xA;| active_branch() |&#xA;+-----------------+&#xA;| main            |&#xA;+-----------------+&#xA;1 row in set (0.00 sec)&#xA;&#xA;mysql&amp;gt; select * from employees;&#xA;+------+------------+------------+&#xA;| id   | last_name  | first_name |&#xA;+------+------------+------------+&#xA;|    0 | Sehn       | Tim        |&#xA;|    1 | Hendriks   | Brian      |&#xA;|    2 | Son        | Aaron      |&#xA;|    3 | Fitzgerald | Brian      |&#xA;+------+------------+------------+&#xA;4 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I can query the branch no matter what I have checked out using SQL &lt;code&gt;as of&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from employees as of &#39;modifications&#39;;&#xA;+------+------------+------------+&#xA;| id   | last_name  | first_name |&#xA;+------+------------+------------+&#xA;|    0 | Sehn       | Timothy    |&#xA;|    1 | Hendriks   | Brian      |&#xA;|    2 | Son        | Aaron      |&#xA;|    3 | Fitzgerald | Brian      |&#xA;|    4 | Wilkins    | Daylon     |&#xA;+------+------------+------------+&#xA;5 rows in set (0.01 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If I&#39;d like to see the diff between the two branches, I can use the &lt;code&gt;dolt_diff()&lt;/code&gt; table function. It takes the table name and two branches as arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from dolt_diff(&#39;employees&#39;, &#39;main&#39;,&#39;modifications&#39;);&#xA;+--------------+---------------+-------+---------------+-------------------------+----------------+-----------------+---------+-------------+-------------------------+-----------+&#xA;| to_last_name | to_first_name | to_id | to_commit     | to_commit_date          | from_last_name | from_first_name | from_id | from_commit | from_commit_date        | diff_type |&#xA;+--------------+---------------+-------+---------------+-------------------------+----------------+-----------------+---------+-------------+-------------------------+-----------+&#xA;| Sehn         | Timothy       |     0 | modifications | 2022-06-07 16:41:49.847 | Sehn           | Tim             |       0 | main        | 2022-06-07 16:39:32.066 | modified  |&#xA;| Wilkins      | Daylon        |     4 | modifications | 2022-06-07 16:41:49.847 | NULL           | NULL            |    NULL | main        | 2022-06-07 16:39:32.066 | added     |&#xA;+--------------+---------------+-------+---------------+-------------------------+----------------+-----------------+---------+-------------+-------------------------+-----------+&#xA;2 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, you have the full power of Git-style branches and diffs in a SQL database with Dolt.&lt;/p&gt; &#xA;&lt;h2&gt;Make a schema change on another branch&lt;/h2&gt; &#xA;&lt;p&gt;I can also make schema changes on branches for isolated testing of new schema. I&#39;m going to add a &lt;code&gt;start_date&lt;/code&gt; column on a new branch and populate it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_checkout(&#39;-b&#39;, &#39;schema_changes&#39;);&#xA;+--------+&#xA;| status |&#xA;+--------+&#xA;|      0 |&#xA;+--------+&#xA;1 row in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; alter table employees add column start_date date;&#xA;Query OK, 0 rows affected (0.02 sec)&#xA;&#xA;mysql&amp;gt; update employees set start_date=&#39;2018-09-08&#39;;&#xA;Query OK, 4 rows affected (0.01 sec)&#xA;Rows matched: 4  Changed: 4  Warnings: 0&#xA;&#xA;mysql&amp;gt; update employees set start_date=&#39;2021-04-19&#39; where last_name=&#39;Fitzgerald&#39;;&#xA;Query OK, 1 row affected (0.01 sec)&#xA;Rows matched: 1  Changed: 1  Warnings: 0&#xA;&#xA;mysql&amp;gt; select * from employees;&#xA;+------+------------+------------+------------+&#xA;| id   | last_name  | first_name | start_date |&#xA;+------+------------+------------+------------+&#xA;|    0 | Sehn       | Tim        | 2018-09-08 |&#xA;|    1 | Hendriks   | Brian      | 2018-09-08 |&#xA;|    2 | Son        | Aaron      | 2018-09-08 |&#xA;|    3 | Fitzgerald | Brian      | 2021-04-19 |&#xA;+------+------------+------------+------------+&#xA;4 rows in set (0.00 sec)&#xA;&#xA;mysql&amp;gt; call dolt_commit(&#39;-am&#39;, &#39;Added start_date column to employees&#39;);&#xA;+----------------------------------+&#xA;| hash                             |&#xA;+----------------------------------+&#xA;| pg3nfi0j1dpc5pf1rfgckpmlteaufdrt |&#xA;+----------------------------------+&#xA;1 row in set (0.01 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changing schema on a branch gives you a new method for doing isolated integration testing of new schema changes.&lt;/p&gt; &#xA;&lt;h2&gt;Merge it all together&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s assume all the testing of the new schema on the &lt;code&gt;schema_changes&lt;/code&gt; branch and data on the &lt;code&gt;modifications&lt;/code&gt; branch completed flawlessly. It&#39;s time to merge all our edits together onto &lt;code&gt;main&lt;/code&gt;. This is done using the &lt;code&gt;dolt_merge&lt;/code&gt; stored procedure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_checkout(&#39;main&#39;);&#xA;+--------+&#xA;| status |&#xA;+--------+&#xA;|      0 |&#xA;+--------+&#xA;1 row in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; select * from dolt_status;&#xA;Empty set (0.00 sec)&#xA;&#xA;mysql&amp;gt; call dolt_merge(&#39;schema_changes&#39;);&#xA;+--------------+&#xA;| no_conflicts |&#xA;+--------------+&#xA;|            1 |&#xA;+--------------+&#xA;1 row in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; select * from employees;&#xA;+------+------------+------------+------------+&#xA;| id   | last_name  | first_name | start_date |&#xA;+------+------------+------------+------------+&#xA;|    0 | Sehn       | Tim        | 2018-09-08 |&#xA;|    1 | Hendriks   | Brian      | 2018-09-08 |&#xA;|    2 | Son        | Aaron      | 2018-09-08 |&#xA;|    3 | Fitzgerald | Brian      | 2021-04-19 |&#xA;+------+------------+------------+------------+&#xA;4 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Schema change successful. We now have start dates. Data changes are next.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_merge(&#39;modifications&#39;);&#xA;+--------------+&#xA;| no_conflicts |&#xA;+--------------+&#xA;|            1 |&#xA;+--------------+&#xA;1 row in set (0.02 sec)&#xA;&#xA;mysql&amp;gt; select * from employees;&#xA;+------+------------+------------+------------+&#xA;| id   | last_name  | first_name | start_date |&#xA;+------+------------+------------+------------+&#xA;|    0 | Sehn       | Timothy    | 2018-09-08 |&#xA;|    1 | Hendriks   | Brian      | 2018-09-08 |&#xA;|    2 | Son        | Aaron      | 2018-09-08 |&#xA;|    3 | Fitzgerald | Brian      | 2021-04-19 |&#xA;|    4 | Wilkins    | Daylon     | NULL       |&#xA;+------+------------+------------+------------+&#xA;5 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data changes successful as well. As you can see, I am now &#34;Timothy&#34; instead of &#34;Tim&#34;, Daylon is added, and we all have start dates except for Daylon who was added on a different branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select first_name, last_name, team_name from employees &#xA;    join employees_teams on (employees.id=employees_teams.employee_id) &#xA;    join teams on (teams.id=employees_teams.team_id) &#xA;    where team_name=&#39;Sales&#39;;&#xA;+------------+------------+-----------+&#xA;| first_name | last_name  | team_name |&#xA;+------------+------------+-----------+&#xA;| Brian      | Fitzgerald | Sales     |&#xA;+------------+------------+-----------+&#xA;1 row in set (0.01 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I&#39;m also gone from the Sales Team. Engineering is life.&lt;/p&gt; &#xA;&lt;p&gt;I have to commit all my changes because the last merge was not a fast-forward merge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; call dolt_commit(&#39;-m&#39;, &#39;Merged all branches&#39;);&#xA;+----------------------------------+&#xA;| hash                             |&#xA;+----------------------------------+&#xA;| vn9b0qcematsj2f6ka0hfoflhr5s6p0b |&#xA;+----------------------------------+&#xA;1 row in set (0.01 sec)&#xA;&#xA;mysql&amp;gt; select * from dolt_log;&#xA;+----------------------------------+-----------+-----------------+-------------------------+--------------------------------------+&#xA;| commit_hash                      | committer | email           | date                    | message                              |&#xA;+----------------------------------+-----------+-----------------+-------------------------+--------------------------------------+&#xA;| vn9b0qcematsj2f6ka0hfoflhr5s6p0b | Tim Sehn  | tim@dolthub.com | 2022-06-07 17:10:02.07  | Merged all branches                  |&#xA;| pg3nfi0j1dpc5pf1rfgckpmlteaufdrt | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:44:37.513 | Added start_date column to employees |&#xA;| uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:41:49.847 | Modifications on a branch            |&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:39:32.066 | Populated tables with data           |&#xA;| ne182jemgrlm8jnjmoubfqsstlfi1s98 | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:35:49.277 | Created initial schema               |&#xA;| vluuhvd0bn59598utedt77ed9q5okbcb | Tim Sehn  | tim@dolthub.com | 2022-06-07 16:33:59.531 | Initialize data repository           |&#xA;+----------------------------------+-----------+-----------------+-------------------------+--------------------------------------+&#xA;6 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we have a database with all the schema and data changes merged and ready for use.&lt;/p&gt; &#xA;&lt;h2&gt;Audit Cell Lineage&lt;/h2&gt; &#xA;&lt;p&gt;Which commit changed my first name? With Dolt you have lineage for every cell in your database. Let&#39;s use the &lt;code&gt;dolt_history_&amp;lt;tablename&amp;gt;&lt;/code&gt; and &lt;code&gt;dolt_diff_&amp;lt;tablename&amp;gt;&lt;/code&gt; to explore the lineage features in Dolt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dolt_history_&amp;lt;tablename&amp;gt;&lt;/code&gt; shows you the state of the row at every commit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from dolt_history_employees where id=0 order by commit_date;&#xA;+------+-----------+------------+------------+----------------------------------+-----------+-------------------------+&#xA;| id   | last_name | first_name | start_date | commit_hash                      | committer | commit_date             |&#xA;+------+-----------+------------+------------+----------------------------------+-----------+-------------------------+&#xA;|    0 | Sehn      | Tim        | NULL       | 13qfqa5rojq18j84d1n2htjkm6fletg4 | Tim Sehn  | 2022-06-07 16:39:32.066 |&#xA;|    0 | Sehn      | Timothy    | NULL       | uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim Sehn  | 2022-06-07 16:41:49.847 |&#xA;|    0 | Sehn      | Tim        | 2018-09-08 | pg3nfi0j1dpc5pf1rfgckpmlteaufdrt | Tim Sehn  | 2022-06-07 16:44:37.513 |&#xA;|    0 | Sehn      | Timothy    | 2018-09-08 | vn9b0qcematsj2f6ka0hfoflhr5s6p0b | Tim Sehn  | 2022-06-07 17:10:02.07  |&#xA;+------+-----------+------------+------------+----------------------------------+-----------+-------------------------+&#xA;4 rows in set (0.00 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dolt_diff_&amp;lt;tablename&amp;gt;&lt;/code&gt; allows you to filter the history down to only commits when the cell in question changed. In this case, I&#39;m interested in the commits that are changing my first name. Note, there are two commits that changed my name because one is the original change and the second is the merge commit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select to_commit,from_first_name,to_first_name from dolt_diff_employees &#xA;    where (from_id=0 or to_id=0) and (from_first_name &amp;lt;&amp;gt; to_first_name or from_first_name is NULL)&#xA;    order by to_commit_date;&#xA;+----------------------------------+-----------------+---------------+&#xA;| to_commit                        | from_first_name | to_first_name |&#xA;+----------------------------------+-----------------+---------------+&#xA;| 13qfqa5rojq18j84d1n2htjkm6fletg4 | NULL            | Tim           |&#xA;| uhkv57j4bp2v16vcnmev9lshgkqq8ppb | Tim             | Timothy       |&#xA;| vn9b0qcematsj2f6ka0hfoflhr5s6p0b | Tim             | Timothy       |&#xA;+----------------------------------+-----------------+---------------+&#xA;3 rows in set (0.01 sec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dolt provides powerful data audit capabilities down to individual cells. When, how, and why has each cell in your database changed over time?&lt;/p&gt; &#xA;&lt;h1&gt;Additonal Reading&lt;/h1&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://docs.dolthub.com/introduction/what-is-dolt&#34;&gt;our documentation&lt;/a&gt; now that you have a feel for Dolt.&lt;/p&gt; &#xA;&lt;h1&gt;Credits and License&lt;/h1&gt; &#xA;&lt;p&gt;Dolt relies heavily on open source code and ideas from the &lt;a href=&#34;https://github.com/attic-labs/noms&#34;&gt;Noms&lt;/a&gt; project. We are very thankful to the Noms team for making this code freely available, without which we would not have been able to build Dolt so rapidly.&lt;/p&gt; &#xA;&lt;p&gt;Dolt is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://github.com/dolthub/dolt/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cpp-Club/Cxx_HOPL4_zh</title>
    <updated>2022-06-26T01:31:54Z</updated>
    <id>tag:github.com,2022-06-26:/Cpp-Club/Cxx_HOPL4_zh</id>
    <link href="https://github.com/Cpp-Club/Cxx_HOPL4_zh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chinese translation of Bjarne Stroustrup&#39;s HOPL4 paper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;在拥挤和变化的世界中茁壮成长：C++ 2006–2020&lt;/h1&gt; &#xA;&lt;p&gt;这是 C++ 之父 Bjarne Stroustrup 的 &lt;a href=&#34;https://www.stroustrup.com/hopl20main-p5-p-bfc9cd4--final.pdf&#34;&gt;HOPL4 论文&lt;/a&gt;的中文版。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/conference/hopl&#34;&gt;HOPL&lt;/a&gt; 是 History of Programming Languages（编程语言历史）的缩写，是 &lt;a href=&#34;https://www.acm.org/&#34;&gt;ACM&lt;/a&gt;（Association of Computing Machines，国际计算机协会）旗下的一个会议，约每十五年举办一次。Bjarne 的这篇论文是他为 2021 年 &lt;a href=&#34;https://hopl4.sigplan.org/&#34;&gt;HOPL IV 会议&lt;/a&gt;准备的论文，也是他的第三篇 HOPL 论文。在这三篇前后间隔近三十年的论文里，Bjarne 记录了 C++ 的完整历史，从 1979 年到 2020 年。这篇 HOPL4 论文尤其重要，因为它涵盖了 C++98 之后的所有 C++ 版本，从 C++11 直到 C++20。如果你对更早期的历史也感兴趣的话，则可以参考&lt;a href=&#34;https://www.stroustrup.com/papers.html&#34;&gt;他的其他 HOPL 论文&lt;/a&gt;，及他在 1994 年出版的《C++ 语言的设计和演化》（&lt;em&gt;The Design and Evolution of C++&lt;/em&gt;）。&lt;/p&gt; &#xA;&lt;p&gt;鉴于这篇论文对于 C++ 从业者的重要性，&lt;a href=&#34;http://cpp-summit.org/&#34;&gt;全球 C++ 及系统软件技术大会&lt;/a&gt;的主办方 &lt;a href=&#34;http://boolan.com/&#34;&gt;Boolan&lt;/a&gt; 组织了一群译者，把这篇重要论文翻译成了中文，让 C++ 开发人员对 C++ 的设计原则和历史有一个系统的了解。下面是论文的完整摘要：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;到 2006 年时，C++ 已经在业界广泛使用了 20 年。它既包含了自 1970 年代初引入 C 语言以来一直没有改变的部分，又包含了在二十一世纪初仍很新颖的特性。从 2006 年到 2020 年，C++ 开发者人数从约 300 万增长到了约 450 万。在这段时期里，有新的编程模型涌现出来，有硬件架构的演变，有新的应用领域变得至关重要，也有好些语言在争夺主导地位，背后有雄厚的资金支持和专业的营销。C++——一种没有真正商业支持的、老得多的语言——是如何在这些挑战面前继续茁壮成长的？&lt;/p&gt; &#xA; &lt;p&gt;本文重点关注 ISO C++ 标准在 2011 年、2014 年、2017 年和 2020 年的修订版中的重大变化。标准库在篇幅上约占 C++20 标准的四分之三，但本文的主要重点仍是语言特性和它们所支持的编程技术。&lt;/p&gt; &#xA; &lt;p&gt;本文包含了长长的特性清单，其中记录了 C++ 的成长。我会对重要的技术要点进行讨论，并用简短的代码片段加以说明。此外，本文还展示了一些失败的提案，以及导致其失败的讨论。它提供了一个视角，如何看待这些年来令人眼花缭乱的事实和特性。我的重点是塑造语言的想法、人和流程。&lt;/p&gt; &#xA; &lt;p&gt;讨论主题包括各种方向上的努力，包括：通过演进式变化保留 C++ 的本质，简化 C++ 的使用，改善对泛型编程的支持，更好地支持编译期编程，扩展对并发和并行编程的支持，以及保持对几十年前的代码的稳定支持。&lt;/p&gt; &#xA; &lt;p&gt;ISO C++ 标准是通过一个共识流程演化而来的。无可避免，在方向、设计理念和原则方面，不同的提案间存在竞争和（通常是礼貌性的）冲突。委员会现在比以往任何时候都更大、更活跃，每年有多达 250 人参加三次为期一周的会议，还有更多的人以电子方式参加。我们试图（并不总是成功）减轻各种不良影响，包括“委员会设计”、官僚主义，以及对各种语言时尚的过度热衷。&lt;/p&gt; &#xA; &lt;p&gt;具体的语言技术话题包括内存模型、并发并行、编译期计算、移动语义、异常、lambda 表达式和模块。要设计一种机制来指定模板对其参数的要求，既足够灵活和精确，又不会增加运行期开销，实践证明这很困难。设计“概念”来做到这一点的反复尝试可以追溯到 1980 年代，并触及到 C++ 和泛型编程的许多关键设计问题。&lt;/p&gt; &#xA; &lt;p&gt;文中的描述基于个人对关键事件和设计决策的参与，并以 ISO C++ 标准委员会档案中的数千篇论文和数百份会议记录作为支持。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;下面是论文的一级目录：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/01.md&#34;&gt;前言&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/02.md&#34;&gt;背景：C++ 的 1979–2006&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/03.md&#34;&gt;C++ 标准委员会&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/04.md&#34;&gt;C++11：感觉像是门新语言&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/05.md&#34;&gt;C++14：完成 C++11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/06.md&#34;&gt;概念&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/07.md&#34;&gt;错误处理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/08.md&#34;&gt;C++17：大海迷航&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/09.md&#34;&gt;C++20：方向之争&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/10.md&#34;&gt;2020 年的 C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cpp-Club/Cxx_HOPL4_zh/main/11.md&#34;&gt;回顾&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;参加论文翻译工作的译者有（按拼音序）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;陈常筠&lt;/li&gt; &#xA; &lt;li&gt;高辉&lt;/li&gt; &#xA; &lt;li&gt;何荣华&lt;/li&gt; &#xA; &lt;li&gt;何一娜&lt;/li&gt; &#xA; &lt;li&gt;侯晨&lt;/li&gt; &#xA; &lt;li&gt;侯金亭&lt;/li&gt; &#xA; &lt;li&gt;彭亚&lt;/li&gt; &#xA; &lt;li&gt;王奎&lt;/li&gt; &#xA; &lt;li&gt;王绍新&lt;/li&gt; &#xA; &lt;li&gt;吴咏炜&lt;/li&gt; &#xA; &lt;li&gt;徐宁&lt;/li&gt; &#xA; &lt;li&gt;杨文波&lt;/li&gt; &#xA; &lt;li&gt;于波&lt;/li&gt; &#xA; &lt;li&gt;余水清&lt;/li&gt; &#xA; &lt;li&gt;翟华明&lt;/li&gt; &#xA; &lt;li&gt;章爱国&lt;/li&gt; &#xA; &lt;li&gt;张云潮&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;论文翻译的校对和体例统一工作由吴咏炜、杨文波、张云潮完成。最后的发布由吴咏炜完成。&lt;/p&gt; &#xA;&lt;p&gt;我们翻译的是论文的正文部分，英文原文超过 140 页。最后的参考文献部分，由于翻译的意义不大，没有译出。不过，这也带来了一个小小的负面后果：虽然我们对论文内部的交叉引用可以用脚本生成链接，但对指向参考文献的链接就完全无能为力了。所以，如果想要阅读参考文献的话，只能请你到&lt;a href=&#34;https://www.stroustrup.com/hopl20main-p5-p-bfc9cd4--final.pdf&#34;&gt;英文原文&lt;/a&gt;结尾的 References 部分自行查找了。&lt;/p&gt; &#xA;&lt;p&gt;翻译过程中我们发现了一些原文中的小问题，并在译文中进行了修正或标注（绝大部分已经经过 Bjarne 老爷子确认）。当然，在翻译过程中引入翻译错误或其他技术问题，恐怕也在所难免——不过，跟 ACM 上发表论文不同，这个网页仍然是可以修正的。所以，如果你，亲爱的读者，发现问题的话，请不吝提交 pull request，我们会尽快检查并进行修正。&lt;/p&gt;</summary>
  </entry>
</feed>