<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-23T01:21:05Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GaParmar/img2img-turbo</title>
    <updated>2024-03-23T01:21:05Z</updated>
    <id>tag:github.com,2024-03-23:/GaParmar/img2img-turbo</id>
    <link href="https://github.com/GaParmar/img2img-turbo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One-step image-to-image with Stable Diffusion turbo: sketch2image, day2night, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;img2img-turbo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2403.12036&#34;&gt;&lt;strong&gt;Paper&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/spaces/gparmar/img2img-turbo-sketch&#34;&gt;&lt;strong&gt;Sketch2Image Demo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Quick start:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/#getting-started&#34;&gt;&lt;strong&gt;Running Locally&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/#gradio-demo&#34;&gt;&lt;strong&gt;Gradio (locally hosted)&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Cat Sketching&lt;/h3&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/cat_2x.gif&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Fish Sketching&lt;/h3&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/fish_2x.gif&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;We propose a general method for adapting a single-step diffusion model, such as SD-Turbo, to new tasks and domains through adversarial learning. This enables us to leverage the internal knowledge of pre-trained diffusion models while achieving efficient inference (e.g., for 512x512 images, 0.29 seconds on A6000 and 0.11 seconds on A100).&lt;/p&gt; &#xA;&lt;p&gt;Our one-step conditional models &lt;strong&gt;CycleGAN-Turbo&lt;/strong&gt; and &lt;strong&gt;pix2pix-turbo&lt;/strong&gt; can perform various image-to-image translation tasks for both unpaired and paired settings. CycleGAN-Turbo outperforms existing GAN-based and diffusion-based methods, while pix2pix-turbo is on par with recent works such as ControlNet for Sketch2Photo and Edge2Image, but with one-step inference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2403.12036&#34;&gt;One-Step Image Translation with Text-to-Image Models&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://gauravparmar.com/&#34;&gt;Gaurav Parmar&lt;/a&gt;, &lt;a href=&#34;https://taesung.me/&#34;&gt;Taesung Park&lt;/a&gt;, &lt;a href=&#34;https://www.cs.cmu.edu/~srinivas/&#34;&gt;Srinivasa Narasimhan&lt;/a&gt;, &lt;a href=&#34;https://github.com/junyanz/&#34;&gt;Jun-Yan Zhu&lt;/a&gt;&lt;br&gt; CMU and Adobe, arXiv 2403.12036&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/teaser_results.jpg&#34; align=&#34;center&#34; width=&#34;1000px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;h3&gt;Paired Translation with pix2pix-turbo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Edge to Image&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/edge_to_image_results.jpg&#34; align=&#34;center&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- **Sketch to Image**&#xA;TODO --&gt; &#xA;&lt;h3&gt;Generating Diverse Outputs&lt;/h3&gt; &#xA;&lt;p&gt;By varying the input noise map, our method can generate diverse outputs from the same input conditioning. The output style can be controlled by changing the text prompt.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/gen_variations.jpg&#34; align=&#34;center&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Unpaired Translation with CycleGAN-Turbo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Day to Night&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/day2night_results.jpg&#34; align=&#34;center&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Night to Day&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div&gt;&#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/night2day_results.jpg&#34; align=&#34;center&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Clear to Rainy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/clear2rainy_results.jpg&#34; align=&#34;center&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rainy to Clear&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/rainy2clear.jpg&#34; align=&#34;center&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Method&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our Generator Architecture:&lt;/strong&gt; We tightly integrate three separate modules in the original latent diffusion models into a single end-to-end network with small trainable weights. This architecture allows us to translate the input image x to the output y, while retaining the input scene structure. We use LoRA adapters in each module, introduce skip connections and Zero-Convs between input and output, and retrain the first layer of the U-Net. Blue boxes indicate trainable layers. Semi-transparent layers are frozen. The same generator can be used for various GAN objectives.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/assets/method.jpg&#34; align=&#34;center&#34; width=&#34;900px&#34;&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Environment Setup&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We provide a &lt;a href=&#34;https://raw.githubusercontent.com/GaParmar/img2img-turbo/main/environment.yml&#34;&gt;conda env file&lt;/a&gt; that contains all the required dependencies. &lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Following this, you can activate the conda environment with the command below. &lt;pre&gt;&lt;code&gt;conda activate img2img-turbo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Paired Image Translation (pix2pix-turbo)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The following command takes an image file and a prompt as inputs, extracts the canny edges, and saves the results in the directory specified.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python src/inference_paired.py --model &#34;edge_to_image&#34; \&#xA;    --input_image &#34;assets/bird.png&#34; \&#xA;    --prompt &#34;a blue bird&#34; \&#xA;    --output_dir &#34;outputs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The following command takes a sketch and a prompt as inputs, and saves the results in the directory specified.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python src/inference_paired.py --model &#34;sketch_to_image_stochastic&#34; \&#xA;--input_image &#34;assets/sketch.png&#34; --gamma 0.4 \&#xA;--prompt &#34;ethereal fantasy concept art of an asteroid. magnificent, celestial, ethereal, painterly, epic, majestic, magical, fantasy art, cover art, dreamy&#34; \&#xA;--output_dir &#34;outputs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unpaired Image Translation (CycleGAN-Turbo)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following command takes an image file as input, and saves the results in the directory specified. &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python src/inference_unpaired.py --model &#34;day_to_night&#34; \&#xA;    --input_image &#34;assets/day.png&#34; --output_dir &#34;outputs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gradio Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We provide a Gradio demo for the paired image translation tasks.&lt;/li&gt; &#xA; &lt;li&gt;The following command will launch the sketch to image locally using gradio. &lt;pre&gt;&lt;code&gt;gradio gradio_sketch2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;Our work uses the Stable Diffusion-Turbo as the base model with the following &lt;a href=&#34;https://huggingface.co/stabilityai/sd-turbo/blob/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/retina</title>
    <updated>2024-03-23T01:21:05Z</updated>
    <id>tag:github.com,2024-03-23:/microsoft/retina</id>
    <link href="https://github.com/microsoft/retina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF distributed networking observability tool for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Retina&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/codespaces/new?hide_repo_select=true&amp;amp;ref=main&amp;amp;repo=746962176&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/microsoft/retina&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/microsoft/retina&#34; alt=&#34;goreport&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/microsoft/retina.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt; &lt;a href=&#34;https://godoc.org/github.com/microsoft/retina&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/microsoft/retina?status.svg?sanitize=true&#34; alt=&#34;retina-publish&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue?link=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fretina%2Fblob%2Fmain%2FLICENSE&#34; alt=&#34;license&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/retina/actions/workflows/test.yaml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/retina/actions/workflows/test.yaml/badge.svg?branch=main&#34; alt=&#34;retina-test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://retina.sh/&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/retina/actions/workflows/docs.yaml/badge.svg?branch=main&#34; alt=&#34;retinash&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/retina/actions/workflows/images.yaml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/retina/actions/workflows/images.yaml/badge.svg?branch=main&#34; alt=&#34;retina-publish&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/microsoft/retina/actions/workflows/codeql.yaml/badge.svg?branch=main&#34; alt=&#34;retina-codeql-img&#34;&gt; &lt;img src=&#34;https://github.com/microsoft/retina/actions/workflows/golangci-lint.yaml/badge.svg?branch=main&#34; alt=&#34;retina-golangci-lint-img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Retina is a cloud-agnostic, open-source &lt;strong&gt;Kubernetes network observability platform&lt;/strong&gt; that provides a &lt;strong&gt;centralized hub for monitoring application health, network health, and security&lt;/strong&gt;. It provides actionable insights to cluster network administrators, cluster security administrators, and DevOps engineers navigating DevOps, SecOps, and compliance use cases.&lt;/p&gt; &#xA;&lt;p&gt;Retina &lt;strong&gt;collects customizable telemetry&lt;/strong&gt;, which can be exported to &lt;strong&gt;multiple storage options&lt;/strong&gt; (such as Prometheus, Azure Monitor, and other vendors) and &lt;strong&gt;visualized in a variety of ways&lt;/strong&gt; (like Grafana, Azure Log Analytics, and other vendors).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://ebpf.io/what-is-ebpf#what-is-ebpf&#34;&gt;eBPF&lt;/a&gt;-based&lt;/strong&gt; Network Observability platform for Kubernetes workloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On-Demand&lt;/strong&gt; and &lt;strong&gt;Configurable&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Actionable, industry-standard &lt;strong&gt;Prometheus metrics&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Streamlined &lt;strong&gt;Packet Captures&lt;/strong&gt; for deep dives.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cloud-agnostic&lt;/strong&gt;, supporting multiple OS (like Linux, Windows, Azure Linux).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Retina?&lt;/h2&gt; &#xA;&lt;p&gt;Retina lets you &lt;strong&gt;investigate network issues on-demand&lt;/strong&gt; and &lt;strong&gt;continuously monitor your clusters&lt;/strong&gt;. For scenarios where Retina shines, see the intro docs &lt;a href=&#34;https://retina.sh/docs/intro&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://retina.sh&#34;&gt;retina.sh&lt;/a&gt; for documentation and examples.&lt;/p&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Retina has two major features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://retina.sh/docs/metrics/modes&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://retina.sh/docs/captures&#34;&gt;Captures&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metrics Quick Install Guide&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites: Go, Helm&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo, then install Retina on your Kubernetes cluster&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make helm-install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow steps in &lt;a href=&#34;https://retina.sh/docs/installation/prometheus-unmanaged&#34;&gt;Using Prometheus and Grafana&lt;/a&gt; to set up metrics collection and visualization.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Captures Quick Start Guide&lt;/h3&gt; &#xA;&lt;h4&gt;Captures via CLI&lt;/h4&gt; &#xA;&lt;p&gt;Currently, Retina CLI only supports Linux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 1: Download from Release&lt;/p&gt; &lt;p&gt;Download &lt;code&gt;kubectl-retina&lt;/code&gt; from the latest &lt;a href=&#34;https://github.com/microsoft/retina/releases&#34;&gt;Retina release&lt;/a&gt;. Feel free to move the binary to &lt;code&gt;/usr/local/bin/&lt;/code&gt;, or add it to your &lt;code&gt;PATH&lt;/code&gt; otherwise.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 2: Build from source&lt;/p&gt; &lt;p&gt;Requirements:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;go 1.21 or newer&lt;/li&gt; &#xA;   &lt;li&gt;GNU make&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Clone the Retina repo and execute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make install-kubectl-retina&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Execute Retina:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl-retina capture create --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further CLI documentation, see &lt;a href=&#34;https://retina.sh/docs/captures/cli&#34;&gt;Capture with Retina CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Captures via CRD&lt;/h4&gt; &#xA;&lt;p&gt;Prerequisites: Go, Helm&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo, then install Retina with Capture operator support on your Kubernetes cluster&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make helm-install-with-operator&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow steps in &lt;a href=&#34;https://retina.sh/docs/captures/#option-2-capture-crd-custom-resource-definition&#34;&gt;Capture CRD&lt;/a&gt; for documentation of the CRD and examples for setting up Captures.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://retina.sh/docs/contributing&#34;&gt;Read more about how to begin contributing here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Office Hours and Community Meetings&lt;/h3&gt; &#xA;&lt;p&gt;We host a periodic open community meeting. &lt;a href=&#34;https://retina.sh/docs/contributing/#office-hours-and-community-meetings&#34;&gt;Find the details here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/retina/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;For bugs or feature requests, open an &lt;a href=&#34;https://github.com/microsoft/retina/issues&#34;&gt;issue&lt;/a&gt;.&lt;br&gt; For security or vulnerability concerns, see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/retina/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;br&gt; For other communication, contact the maintainers at &lt;a href=&#34;mailto:retina@microsoft.com&#34;&gt;retina@microsoft.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rive-app/rive-renderer</title>
    <updated>2024-03-23T01:21:05Z</updated>
    <id>tag:github.com,2024-03-23:/rive-app/rive-renderer</id>
    <link href="https://github.com/rive-app/rive-renderer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Downstream repo for Rive renderer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rive Renderer&lt;/h1&gt; &#xA;&lt;p&gt;The Rive Renderer is a vector and raster graphics renderer custom-built for Rive content, for animation, and for runtime.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the renderer code and an example for how to interface with it directly. The code within this repository does not contain a Rive runtime. It contains the best in class concrete implementation of Rive&#39;s rendering abstraction layer, which we call the Rive Renderer.&lt;/p&gt; &#xA;&lt;h2&gt;Clone this repo&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to clone this repo with submodules!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules git@github.com:rive-app/rive-renderer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build GLFW&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd submodules/rive-cpp/skia/dependencies&#xA;./make_glfw.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install Premake5&lt;/h2&gt; &#xA;&lt;p&gt;Grab the binary from the premake5 GitHub releases: &lt;a href=&#34;https://github.com/premake/premake-core/releases/&#34;&gt;https://github.com/premake/premake-core/releases/&lt;/a&gt; or you can build your own for Apple Silicon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 --branch master https://github.com/premake/premake-core.git&#xA;cd premake-core&#xA;make -f Bootstrap.mak osx PLATFORM=ARM&#xA;# binaries will be in bin/release/* put them in your path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install Python PLY&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install ply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Call Premake &amp;amp; Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;PREMAKE_PATH=&#34;$(pwd)/submodules/rive-cpp/build&#34; premake5 gmake2 --with_rive_text --config=release --out=out/release&#xA;cd out/release&#xA;make -j20&#xA;# run path_fiddle&#xA;./path_fiddle [/path/to/my.riv]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and serve for WebGL2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;PREMAKE_PATH=&#34;$(pwd)/submodules/rive-cpp/build&#34; premake5 gmake2 --with_rive_text --config=release --arch=wasm --out=out/wasm_release&#xA;cd out/wasm_release&#xA;# Ensure your emsdk_env is configured.&#xA;make -j20 path_fiddle&#xA;# serve to http://localhost:5555/&#xA;python3 -m http.server 5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpful keys&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;H&lt;/code&gt;: add/subtract copies to the left and right (only when a .riv is provided)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;j&lt;/code&gt;/&lt;code&gt;J&lt;/code&gt;: add/subtract copies below (only when a .riv is provided)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;k&lt;/code&gt;/&lt;code&gt;K&lt;/code&gt;: add/subtract copies above (only when a .riv is provided)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p&lt;/code&gt;: pause runtime (for benchmarking the renderer in isolation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt;: toggle &#34;atomic&#34; mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>