<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:32:12Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AstroNvim/AstroNvim</title>
    <updated>2022-08-02T01:32:12Z</updated>
    <id>tag:github.com,2022-08-02:/AstroNvim/AstroNvim</id>
    <link href="https://github.com/AstroNvim/AstroNvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;img src=&#34;https://astronvim.github.io/img/logo/astronvim.svg?sanitize=true&#34; width=&#34;110&#34; , height=&#34;100&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;AstroNvim&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/pulse&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/AstroNvim/AstroNvim?color=%4dc71f&amp;amp;label=Last%20Commit&amp;amp;logo=github&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/AstroNvim/AstroNvim?label=License&amp;amp;logo=GNU&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://neovim.io/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.7+-blueviolet.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/UcZutyeaFW&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-Join-7289da?color=%235865F2%20&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%23ffffff&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; AstroNvim is an aesthetic and feature-rich neovim config that is extensible and easy to use with a great set of plugins &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Notice:&lt;/em&gt;&lt;/strong&gt; AstroNvim v1.4.0 has added &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt; update channels. For the time being we have kept the default update channel to &lt;code&gt;nightly&lt;/code&gt; so that the behavior of AstroNvim doesn&#39;t change (this could be considered a breaking change to some). We are planning to make the &lt;code&gt;stable&lt;/code&gt; channel the default update channel when Neovim v0.8 is released and we tag AstroNvim v2.0.0 to incorporate this &#34;breaking&#34; change.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/dashboard.png&#34; alt=&#34;Preview1&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/overview.png&#34; alt=&#34;Preview2&#34;&gt; &lt;img src=&#34;https://github.com/AstroNvim/astronvim.github.io/raw/main/static/img/lsp_hover.png&#34; alt=&#34;Preview33&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File explorer with &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;Neo-tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion with &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git integration with &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Statusline with &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;Feline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal with &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;Toggleterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fuzzy finding with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Formatting and linting with &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;Null-ls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language Server Protocol with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;Native LSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Buffer Line with &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö° Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.0&#34;&gt;Neovim 0.7+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A clipboard tool is necessary for the integration with the system clipboard (see &lt;a href=&#34;https://neovim.io/doc/user/provider.html#clipboard-tool&#34;&gt;&lt;code&gt;:help clipboard-tool&lt;/code&gt;&lt;/a&gt; for supported solutions)&lt;/li&gt; &#xA; &lt;li&gt;Terminal with true color support (for the default theme, otherwise it is dependent on the theme you are using)&lt;/li&gt; &#xA; &lt;li&gt;Optional Requirements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; - live grep telescope search (&lt;code&gt;&amp;lt;leader&amp;gt;fw&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazygit&#34;&gt;lazygit&lt;/a&gt; - git ui toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tl&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;gg&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dev.yorhel.nl/ncdu&#34;&gt;NCDU&lt;/a&gt; - disk usage toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tu&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://htop.dev/&#34;&gt;Htop&lt;/a&gt; - process viewer toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tt&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; - python repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tp&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node&lt;/a&gt; - node repl toggle terminal (&lt;code&gt;&amp;lt;leader&amp;gt;tn&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note when using default theme: For MacOS, the default terminal does not have true color support. You wil need to use &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; or another &lt;a href=&#34;https://gist.github.com/XVilka/8346728#terminal-emulators&#34;&gt;terminal emulator&lt;/a&gt; that has true color support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note if you are still on Neovim v0.6: You can still install the previous version of AstroNvim that supported. After cloning the repository run &lt;code&gt;git checkout nvim-0.6&lt;/code&gt; to check out this version. This will no longer be receiving updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Make a backup of your current nvim folder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv ~/.config/nvim ~/.config/nvimbackup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clone the repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim&#xA;nvim +PackerSync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üì¶ Basic Setup&lt;/h2&gt; &#xA;&lt;h4&gt;Install LSP&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:LspInstall&lt;/code&gt; followed by the name of the server you want to install&lt;br&gt; Example: &lt;code&gt;:LspInstall pyright&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install language parser&lt;/h4&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;:TSInstall&lt;/code&gt; followed by the name of the language you want to install&lt;br&gt; Example: &lt;code&gt;:TSInstall python&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manage plugins&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:PackerClean&lt;/code&gt; to remove any disabled or unused plugins&lt;br&gt; Run &lt;code&gt;:PackerSync&lt;/code&gt; to update and clean plugins&lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Update AstroNvim&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:AstroUpdate&lt;/code&gt; to get the latest updates from the repository&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üóíÔ∏è Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://astronvim.github.io/&#34;&gt;AstroNvim Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/walkthrough&#34;&gt;Basic Usage&lt;/a&gt; is given for basic usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/usage/mappings&#34;&gt;Default Mappings&lt;/a&gt; more about the default key bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/plugin_defaults&#34;&gt;Default Plugin Configuration&lt;/a&gt; more about the provided plugin defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/configuration/config_options&#34;&gt;Advanced Configuration&lt;/a&gt; more about advanced configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JQLZ7NJRTEo&amp;amp;t=4s&amp;amp;ab_channel=JohnCodes&#34;&gt;Watch&lt;/a&gt; a review video to know about the out of the box experience&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê Credits&lt;/h2&gt; &#xA;&lt;p&gt;Sincere appreciation to the following repositories, plugin authors and the entire neovim community out there that made the development of AstroNvim possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://astronvim.github.io/acknowledgements#plugins-used-in-astronvim&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NvChad/NvChad&#34;&gt;NvChad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LunarVim&#34;&gt;LunarVim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CosmicNvim/CosmicNvim&#34;&gt;CosmicVim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;madewithlua&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Datalux/Osintgram</title>
    <updated>2022-08-02T01:32:12Z</updated>
    <id>tag:github.com,2022-08-02:/Datalux/Osintgram</id>
    <link href="https://github.com/Datalux/Osintgram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Osintgram is a OSINT tool on Instagram. It offers an interactive shell to perform analysis on Instagram account of any users by its nickname&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Osintgram üîéüì∏&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Datalux/Osintgram/releases/tag/1.3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-1.3-green&#34; alt=&#34;version-1.3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/license-GPLv3-blue&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-blue&#34; alt=&#34;GPLv3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/language-Python3-red&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Python3-red&#34; alt=&#34;Python3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/osintgram&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-Channel-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Docker-Supported-blue&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-Supported-blue&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Osintgram is a &lt;strong&gt;OSINT&lt;/strong&gt; tool on Instagram to collect, analyze, and run reconnaissance.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/Datalux/Osintgram/master/.img/carbon.png&#34; width=&#34;900&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Disclaimer: &lt;strong&gt;FOR EDUCATIONAL PURPOSE ONLY! The contributors do not assume any responsibility for the use of this tool.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Warning: It is advisable to &lt;strong&gt;not&lt;/strong&gt; use your own/primary account when using this tool.&lt;/p&gt; &#xA;&lt;h2&gt;Tools and Commands üß∞&lt;/h2&gt; &#xA;&lt;p&gt;Osintgram offers an interactive shell to perform analysis on Instagram account of any users by its nickname. You can get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- addrs           Get all registered addressed by target photos&#xA;- captions        Get user&#39;s photos captions&#xA;- comments        Get total comments of target&#39;s posts&#xA;- followers       Get target followers&#xA;- followings      Get users followed by target&#xA;- fwersemail      Get email of target followers&#xA;- fwingsemail     Get email of users followed by target&#xA;- fwersnumber     Get phone number of target followers&#xA;- fwingsnumber    Get phone number of users followed by target&#xA;- hashtags        Get hashtags used by target&#xA;- info            Get target info&#xA;- likes           Get total likes of target&#39;s posts&#xA;- mediatype       Get user&#39;s posts type (photo or video)&#xA;- photodes        Get description of target&#39;s photos&#xA;- photos          Download user&#39;s photos in output folder&#xA;- propic          Download user&#39;s profile picture&#xA;- stories         Download user&#39;s stories  &#xA;- tagged          Get list of users tagged by target&#xA;- wcommented      Get a list of user who commented target&#39;s photos&#xA;- wtagged         Get a list of user who tagged target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find detailed commands usage &lt;a href=&#34;https://raw.githubusercontent.com/Datalux/Osintgram/master/doc/COMMANDS.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Datalux/Osintgram/releases/tag/1.3&#34;&gt;&lt;strong&gt;Latest version&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Datalux/Osintgram/master/doc/COMMANDS.md&#34;&gt;Commands&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Datalux/Osintgram/master/doc/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Can I access the contents of a private profile?&lt;/strong&gt; No, you cannot get information on private profiles. You can only get information from a public profile or a profile you follow. The tools that claim to be successful are scams!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What is and how I can bypass the &lt;code&gt;challenge_required&lt;/code&gt; error?&lt;/strong&gt; The &lt;code&gt;challenge_required&lt;/code&gt; error means that Instagram notice a suspicious behavior on your profile, so needs to check if you are a real person or a bot. To avoid this you should follow the suggested link and complete the required operation (insert a code, confirm email, etc)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork/Clone/Download this repo&lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/Datalux/Osintgram.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the directory&lt;/p&gt; &lt;p&gt;&lt;code&gt;cd Osintgram&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a virtual environment for this project&lt;/p&gt; &lt;p&gt;&lt;code&gt;python3 -m venv venv&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load the virtual environment&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Windows Powershell: &lt;code&gt;.\venv\Scripts\activate.ps1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;On Linux and Git Bash: &lt;code&gt;source venv/bin/activate&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;credentials.ini&lt;/code&gt; file in the &lt;code&gt;config&lt;/code&gt; folder and write your Instagram account username and password in the corresponding fields&lt;/p&gt; &lt;p&gt;Alternatively, you can run the &lt;code&gt;make setup&lt;/code&gt; command to populate this file for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the main.py script in one of two ways&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As an interactive prompt &lt;code&gt;python3 main.py &amp;lt;target username&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Or execute your command straight away &lt;code&gt;python3 main.py &amp;lt;target username&amp;gt; --command &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Docker Quick Start üê≥&lt;/h2&gt; &#xA;&lt;p&gt;This section will explain how you can quickly use this image with &lt;code&gt;Docker&lt;/code&gt; or &lt;code&gt;Docker-compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before you can use either &lt;code&gt;Docker&lt;/code&gt; or &lt;code&gt;Docker-compose&lt;/code&gt;, please ensure you do have the following prerequisites met.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; installed - &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker-composed&lt;/strong&gt; installed (if using Docker-compose) - &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Credentials&lt;/strong&gt; configured - This can be done manually or by running the &lt;code&gt;make setup&lt;/code&gt; command from the root of this repo&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Your container will fail if you do not do step #3 and configure your credentials&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;If docker is installed you can build an image and run this as a container.&lt;/p&gt; &#xA;&lt;p&gt;Build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t osintgram .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;$PWD/output:/home/osintgram/output&#34; osintgram &amp;lt;target&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; is the Instagram account you wish to use as your target for recon.&lt;/li&gt; &#xA; &lt;li&gt;The required &lt;code&gt;-i&lt;/code&gt; flag enables an interactive terminal to use commands within the container. &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#assign-name-and-allocate-pseudo-tty---name--it&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The required &lt;code&gt;-v&lt;/code&gt; flag mounts a volume between your local filesystem and the container to save to the &lt;code&gt;./output/&lt;/code&gt; folder. &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#mount-volume--v---read-only&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The optional &lt;code&gt;--rm&lt;/code&gt; flag removes the container filesystem on completion to prevent cruft build-up. &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#clean-up---rm&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The optional &lt;code&gt;-t&lt;/code&gt; flag allocates a pseudo-TTY which allows colored output. &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#foreground&#34;&gt;docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;docker-compose.yml&lt;/code&gt; file this single command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose run osintgram &amp;lt;target&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;target&lt;/code&gt; is the Instagram target for recon.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you may run &lt;code&gt;docker-compose&lt;/code&gt; with the &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make run&lt;/code&gt; - Builds and Runs with compose. Prompts for a &lt;code&gt;target&lt;/code&gt; before running.&lt;/p&gt; &#xA;&lt;h3&gt;Makefile (easy mode)&lt;/h3&gt; &#xA;&lt;p&gt;For ease of use with Docker-compose, a &lt;code&gt;Makefile&lt;/code&gt; has been provided.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample work flow to spin up a container and run &lt;code&gt;osintgram&lt;/code&gt; with just two commands!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;make setup&lt;/code&gt; - Sets up your Instagram credentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make run&lt;/code&gt; - Builds and Runs a osintgram container and prompts for a target&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Sample workflow for development:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;make setup&lt;/code&gt; - Sets up your Instagram credentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make build-run-testing&lt;/code&gt; - Builds an Runs a container without invoking the &lt;code&gt;main.py&lt;/code&gt; script. Useful for an &lt;code&gt;it&lt;/code&gt; Docker session for development&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make cleanup-testing&lt;/code&gt; - Cleans up the testing container created from &lt;code&gt;build-run-testing&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development version üíª&lt;/h2&gt; &#xA;&lt;p&gt;To use the development version with the latest feature and fixes just switch to &lt;code&gt;development&lt;/code&gt; branch using Git:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git checkout development&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and update to last version using:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git pull origin development&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updating ‚¨áÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;To update Osintgram with the stable release just pull the latest commit using Git.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you are in the master branch running: &lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version: &lt;code&gt;git pull origin master&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing üí°&lt;/h2&gt; &#xA;&lt;p&gt;You can propose a feature request opening an issue or a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of Osintgram&#39;s contributors:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/Datalux/Osintgram/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=Datalux/Osintgram&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;External library üîó&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ping/instagram_private_api&#34;&gt;Instagram API&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>userver-framework/userver</title>
    <updated>2022-08-02T01:32:12Z</updated>
    <id>tag:github.com,2022-08-02:/userver-framework/userver</id>
    <link href="https://github.com/userver-framework/userver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The C++ Asynchronous Framework (beta)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;userver &lt;img src=&#34;https://raw.githubusercontent.com/userver-framework/userver/develop/scripts/docs/logo.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;userver&lt;/strong&gt; is an open source asynchronous framework with a rich set of abstractions for fast and comfortable creation of C++ microservices, services and utilities.&lt;/p&gt; &#xA;&lt;p&gt;The framework solves the problem of efficient I/O interactions transparently for the developers. Operations that would typically suspend the thread of execution do not suspend it. Instead of that, the thread processes other requests and tasks and returns to the handling of the operation only when it is guaranteed to execute immediately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::size_t Ins(storages::postgres::Transaction&amp;amp; tr, std::string_view key) {&#xA;  // Asynchronous execution of the SQL query in transaction. Current thread&#xA;  // handles other requests while the response from the DB is being received:&#xA;  auto res = tr.Execute(&#34;INSERT INTO keys VALUES ($1)&#34;, key);&#xA;  return res.RowsAffected();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a result, with the framework you get straightforward source code, avoid CPU-consuming context switches from OS, efficiently utilize the CPU with a small amount of execution threads.&lt;/p&gt; &#xA;&lt;h2&gt;Other Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Efficient asynchronous drivers for databases (MongoDB, PostgreSQL, Redis, ...) and data transfer protocols (HTTP, GRPC, TCP, ...), tasks construction and cancellation.&lt;/li&gt; &#xA; &lt;li&gt;Rich set of high-level components for caches, tasks, distributed locking, logging, tracing, statistics, metrics, JSON/YAML/BSON.&lt;/li&gt; &#xA; &lt;li&gt;Functionality to change the service configuration on-the-fly.&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly configurable drivers, options of the deadline propagation, timeouts, congestion-control.&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive set of asynchronous low-level synchronization primitives and OS abstractions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://userver-framework.github.io/&#34;&gt;See the docs for more info&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>