<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:32:23Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Elfocrash/.NET-Backend-Developer-Roadmap</title>
    <updated>2022-06-21T01:32:23Z</updated>
    <id>tag:github.com,2022-06-21:/Elfocrash/.NET-Backend-Developer-Roadmap</id>
    <link href="https://github.com/Elfocrash/.NET-Backend-Developer-Roadmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nick&#39;s Roadmap for a .NET Backend Developer working with Microservices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nick&#39;s .NET Backend Developer Roadmap for 2022&lt;/h1&gt; &#xA;&lt;p&gt;Hey there ðŸ‘‹. This is my (very opinionated) roadmap for .NET developers that want to focus on backend and specifically work with microservices. If you want a more generic ASP.NET Developer Roadmap, you can check the one that inspired this one &lt;a href=&#34;https://github.com/MoienTajik/AspNetCore-Developer-Roadmap&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In cases where I used cloud specific technology, like Azure Cosmos DB and AWS DynamoDB, you can assume that I also include the equivelent tech from other cloud providers like GCP.&lt;/p&gt; &#xA;&lt;p&gt;I will try to keep updating this roadmap as the technology landscape is evolving.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Elfocrash/.NET-Backend-Developer-Roadmap/master/Backend-.NET-Developer-Roadmap-2022.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TGX-Android/Telegram-X</title>
    <updated>2022-06-21T01:32:23Z</updated>
    <id>tag:github.com,2022-06-21:/TGX-Android/Telegram-X</id>
    <link href="https://github.com/TGX-Android/Telegram-X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The main repository of Telegram X â€” official alternative Telegram client for Android. Check out the $25,000 contest in the pinned issue.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thunderdog.challegram&#34;&gt;Telegram X&lt;/a&gt; â€” a slick experimental Telegram client based on &lt;a href=&#34;https://core.telegram.org/tdlib&#34;&gt;TDLib&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/images/feature.png&#34; alt=&#34;Telegram X&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the complete source code and the build instructions for the official alternative Android client for the Telegram messenger, based on the &lt;a href=&#34;https://core.telegram.org/api&#34;&gt;Telegram API&lt;/a&gt; and the &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;MTProto&lt;/a&gt; secure protocol via &lt;a href=&#34;https://github.com/TGX-Android/tdlib&#34;&gt;TDLib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://play.google.com/store/apps/details?id=org.thunderdog.challegram&#34;&gt;&lt;strong&gt;Telegram X&lt;/strong&gt; on Google Play&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/apps/testing/org.thunderdog.challegram&#34;&gt;Subscribe to Beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/tgx_log&#34;&gt;APKs and Build Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/tgx_bot&#34;&gt;Bot to verify APK hash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At least &lt;strong&gt;5,34GB&lt;/strong&gt; of free disk space: &lt;strong&gt;487,10MB&lt;/strong&gt; for source codes and around &lt;strong&gt;4,85GB&lt;/strong&gt; for files generated after building all variants&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;4GB&lt;/strong&gt; of RAM&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt; or &lt;strong&gt;Linux&lt;/strong&gt;-based operating system. &lt;strong&gt;Windows&lt;/strong&gt; platform is not yet supported in &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/scripts&#34;&gt;scripts&lt;/a&gt; that build native dependencies, however, it might be easy to patch them in order to make it work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;git with LFS, wget and sed: &lt;code&gt;$ brew install git git-lfs wget gsed &amp;amp;&amp;amp; git lfs install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git with LFS: &lt;code&gt;# apt install git git-lfs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ git lfs install&lt;/code&gt; for the current user, if you didn&#39;t have &lt;code&gt;git-lfs&lt;/code&gt; previously installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;$ git clone --recursive --depth=1 --shallow-submodules https://github.com/TGX-Android/Telegram-X tgx&lt;/code&gt; â€” clone &lt;strong&gt;Telegram X&lt;/strong&gt; with submodules&lt;/li&gt; &#xA; &lt;li&gt;In case you forgot the &lt;code&gt;--recursive&lt;/code&gt; flag, &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;tgx&lt;/code&gt; directory and: &lt;code&gt;$ git submodule init &amp;amp;&amp;amp; git submodule update --init --recursive --depth=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;keystore.properties&lt;/code&gt; file outside of source tree with the following properties:&lt;br&gt;&lt;code&gt;keystore.file&lt;/code&gt;: absolute path to the keystore file&lt;br&gt;&lt;code&gt;keystore.password&lt;/code&gt;: password for the keystore&lt;br&gt;&lt;code&gt;key.alias&lt;/code&gt;: key alias that will be used to sign the app&lt;br&gt;&lt;code&gt;key.password&lt;/code&gt;: key password.&lt;br&gt;&lt;strong&gt;Warning&lt;/strong&gt;: keep this file safe and make sure nobody, except you, has access to it. For production builds one could use a separate user with home folder encryption to avoid harm from physical theft&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cd tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ scripts/./setup.sh&lt;/code&gt; and follow up the instructions&lt;/li&gt; &#xA; &lt;li&gt;If you specified package name that&#39;s different from the one Telegram X uses, &lt;a href=&#34;https://firebase.google.com/docs/android/setup&#34;&gt;setup Firebase&lt;/a&gt; and replace &lt;code&gt;google-services.json&lt;/code&gt; with the one that&#39;s suitable for the &lt;code&gt;app.id&lt;/code&gt; you need&lt;/li&gt; &#xA; &lt;li&gt;Now you can open the project using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/studio/&#34;&gt;Android Studio&lt;/a&gt;&lt;/strong&gt; or build manually from the command line: &lt;code&gt;./gradlew assembleUniversalRelease&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Available flavors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arm64&lt;/code&gt;: &lt;strong&gt;arm64-v8a&lt;/strong&gt; build with &lt;code&gt;minSdkVersion&lt;/code&gt; set to &lt;code&gt;21&lt;/code&gt; (&lt;strong&gt;Lollipop&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arm32&lt;/code&gt;: &lt;strong&gt;armeabi-v7a&lt;/strong&gt; build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x64&lt;/code&gt;: &lt;strong&gt;x86_64&lt;/strong&gt; build with &lt;code&gt;minSdkVersion&lt;/code&gt; set to &lt;code&gt;21&lt;/code&gt; (&lt;strong&gt;Lollipop&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x86&lt;/code&gt;: &lt;strong&gt;x86&lt;/strong&gt; build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;universal&lt;/code&gt;: universal build that includes native bundles for all platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reproducing public builds&lt;/h2&gt; &#xA;&lt;p&gt;In order to verify that there is no additional source code injected inside official APKs, you must use &lt;strong&gt;Ubuntu 21.04&lt;/strong&gt; and comply with the following requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create user called &lt;code&gt;vk&lt;/code&gt; with the home directory located at &lt;code&gt;/home/vk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone &lt;code&gt;tgx&lt;/code&gt; repository to &lt;code&gt;/home/vk/tgx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the specific commit you want to verify&lt;/li&gt; &#xA; &lt;li&gt;In rare cases of builds that include unmerged pull requests, you must follow actions performed by &lt;a href=&#34;https://github.com/TGX-Android/Publisher/raw/main/main.js&#34;&gt;Publisher&#39;s&lt;/a&gt; &lt;code&gt;fetchPr&lt;/code&gt; and &lt;code&gt;squashPr&lt;/code&gt; tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;tgx&lt;/code&gt; folder and install dependencies: &lt;code&gt;# apt install $(cat reproducible-builds/dependencies.txt)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow up the build instruction from the previous section&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;$ apkanalyzer apk compare --different-only &amp;lt;remote-apk&amp;gt; &amp;lt;reproduced-apk&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If only signature files and metadata differ, build reproduction is successful.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In future build reproduction might become easier. Here&#39;s a list of related PR-welcome TODOs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project path must not affect the resulting &lt;code&gt;.so&lt;/code&gt; files, so user &amp;amp; project location requirement could be removed&lt;/li&gt; &#xA; &lt;li&gt;When building native binaries on &lt;strong&gt;macOS&lt;/strong&gt;, &lt;code&gt;.comment&lt;/code&gt; ELF section differs from the one built with &lt;strong&gt;Linux&lt;/strong&gt; version of NDK. It must be removed or made deterministic without any side-effects like breaking &lt;code&gt;native-debug-symbols.zip&lt;/code&gt; (or should be reported to NDK team?)&lt;/li&gt; &#xA; &lt;li&gt;It might be a good idea to use &lt;code&gt;--build-id=0x&amp;lt;commit&amp;gt;&lt;/code&gt; instead of &lt;code&gt;--build-id=none&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checksums of cold APK builds always differ, even though the same keystore applied and generated inner APK contents do not differ. Real cause must be investigated and fixed, if possible.&lt;br&gt;To generate cold build, invoke &lt;code&gt;$ scripts/./reset.sh&lt;/code&gt; and &lt;code&gt;$ scripts/./setup.sh --skip-sdk-setup&lt;/code&gt;.&lt;br&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this will also reset changes inside some of the submodules (&lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/ffmpeg&#34;&gt;ffmpeg&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/libvpx&#34;&gt;libvpx&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/webp&#34;&gt;webp&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/opus&#34;&gt;opus&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty/exoplayer&#34;&gt;ExoPlayer&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Move local pull requests squash-merging from &lt;a href=&#34;https://github.com/TGX-Android/Publisher&#34;&gt;Publisher&lt;/a&gt; to some script inside this repository to make reproduction of builds that include them easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;i&gt;PS: &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is not considered an option, as it just hides away these tasks, and requires that all published APKs must be built using it.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Verifying side-loaded APKs&lt;/h2&gt; &#xA;&lt;p&gt;If you downloaded &lt;strong&gt;Telegram X&lt;/strong&gt; APK from somewhere and would like to simply verify whether it&#39;s an original APK without any injected malicious source code, you need to get checksum (&lt;code&gt;SHA-256&lt;/code&gt;, &lt;code&gt;SHA-1&lt;/code&gt; or &lt;code&gt;MD5&lt;/code&gt;) of the downloaded APK file and find whether it corresponds to any known &lt;strong&gt;Telegram X&lt;/strong&gt; version.&lt;/p&gt; &#xA;&lt;p&gt;In order to obtain &lt;strong&gt;SHA-256&lt;/strong&gt; of the APK:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$ sha256sum &amp;lt;path-to-apk&amp;gt;&lt;/code&gt; on &lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ shasum -a 256 &amp;lt;path-to-apk&amp;gt;&lt;/code&gt; on &lt;strong&gt;macOS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once obtained, there are three ways to find out the commit for the specific checksum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending checksum to &lt;a href=&#34;https://t.me/tgx_bot&#34;&gt;&lt;code&gt;@tgx_bot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Searching for a checksum in &lt;a href=&#34;https://t.me/tgx_log&#34;&gt;&lt;code&gt;@tgx_log&lt;/code&gt;&lt;/a&gt;. You can do so without need in installing any Telegram client by using this URL format: &lt;a href=&#34;https://t.me/s/tgx_log?q=c541ebb0a3ae7bb6e6bd155530f375d567b8aef1761fdd942fb5d69af62e24ae&#34;&gt;&lt;code&gt;https://t.me/s/tgx_log?q={checksum}&lt;/code&gt;&lt;/a&gt; (click to see in action). Note: unpublished builds cannot be verified this way.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Telegram X&lt;/code&gt; is licensed under the terms of the GNU General Public License v3.0.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;License of components and third-party dependencies it relies on might differ, check &lt;code&gt;LICENSE&lt;/code&gt; file in the corresponding folder.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party dependencies&lt;/h3&gt; &#xA;&lt;p&gt;List of third-party components used in &lt;strong&gt;Telegram X&lt;/strong&gt; can be found &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/THIRDPARTY.md&#34;&gt;here&lt;/a&gt;. Additionally you can check the specific commit of the third-party component used, for example, &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/app/jni/thirdparty&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/thirdparty&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Telegram X&lt;/strong&gt; welcomes contributions. Check out &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/PULL_REQUEST_TEMPLATE.md&#34;&gt;pull request template&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/TGX-Android/Telegram-X/main/docs/GUIDE.md&#34;&gt;guide for contributors&lt;/a&gt; to learn more about Telegram X internals before creating the first pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you are a regular user and experience a problem with Telegram X, the best place to look for solution is &lt;a href=&#34;https://t.me/tgandroidtests&#34;&gt;Telegram X chat&lt;/a&gt; â€” a community with over 4 thousand members. Please do not use this repository to ask questions: if you have general issue with Telegram, refer to &lt;a href=&#34;http://telegram.org/faq&#34;&gt;FAQ&lt;/a&gt; or contact &lt;a href=&#34;https://telegram.org/faq#telegram-support&#34;&gt;Telegram Support&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>runelite/runelite</title>
    <updated>2022-06-21T01:32:23Z</updated>
    <id>tag:github.com,2022-06-21:/runelite/runelite</id>
    <link href="https://github.com/runelite/runelite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source Old School RuneScape client&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://runelite.net/img/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;runelite &lt;a href=&#34;https://github.com/runelite/runelite/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/runelite/runelite/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ArdAhnN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/301497432909414422.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;RuneLite is a free, open source OldSchool RuneScape client.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please join our IRC channel on &lt;a href=&#34;http://qchat.rizon.net/?channels=runelite&amp;amp;uio=d4&#34;&gt;irc.rizon.net #runelite&lt;/a&gt; or alternatively our &lt;a href=&#34;https://discord.gg/ArdAhnN&#34;&gt;Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runelite/runelite/master/cache/src/main/java/net/runelite/cache&#34;&gt;cache&lt;/a&gt; - Libraries used for reading/writing cache files, as well as the data in it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runelite/runelite/master/runelite-api/src/main/java/net/runelite/api&#34;&gt;runelite-api&lt;/a&gt; - RuneLite API, interfaces for accessing the client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/runelite/runelite/master/runelite-client/src/main/java/net/runelite/client&#34;&gt;runelite-client&lt;/a&gt; - Game client with plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Open the project in your IDE as a Maven project, build the root module and then run the RuneLite class in runelite-client.&lt;br&gt; For more information visit the &lt;a href=&#34;https://github.com/runelite/runelite/wiki&#34;&gt;RuneLite Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;RuneLite is licensed under the BSD 2-clause license. See the license header in the respective file to be sure.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute and Develop&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve set up a separate document for our &lt;a href=&#34;https://github.com/runelite/runelite/raw/master/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>