<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:30:09Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jexom/sd-webui-depth-lib</title>
    <updated>2023-03-08T01:30:09Z</updated>
    <id>tag:github.com,2023-03-08:/jexom/sd-webui-depth-lib</id>
    <link href="https://github.com/jexom/sd-webui-depth-lib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Depth map library for use with the Control Net extension for Automatic1111/stable-diffusion-webui&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Depth map library and poser&lt;/h2&gt; &#xA;&lt;p&gt;Depth map library for use with the &lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;Control Net extension&lt;/a&gt; for &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Automatic1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jexom/sd-webui-depth-lib/main/images/ui.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &#34;Extension&#34; tab&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Install from URL&#34;&lt;/li&gt; &#xA; &lt;li&gt;In &#34;URL for extension&#39;s git repository&#34; enter this extension, &lt;a href=&#34;https://github.com/jexom/sd-webui-depth-lib.git&#34;&gt;https://github.com/jexom/sd-webui-depth-lib.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Install&#34;&lt;/li&gt; &#xA; &lt;li&gt;Restart WebUI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Adding own maps&lt;/h2&gt; &#xA;&lt;p&gt;To add own depth maps permanently put them in the &lt;code&gt;extensions/sd-webui-depth-lib/maps/&amp;lt;category&amp;gt;&lt;/code&gt; folder where &lt;code&gt;&amp;lt;category&amp;gt;&lt;/code&gt; is a folder with the name of the category tab you want, see the examle &lt;code&gt;shapes&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h2&gt;Attention&lt;/h2&gt; &#xA;&lt;p&gt;Do not select anything for the Preprocessor in ControlNet.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Grt1228/chatgpt-java</title>
    <updated>2023-03-08T01:30:09Z</updated>
    <id>tag:github.com,2023-03-08:/Grt1228/chatgpt-java</id>
    <link href="https://github.com/Grt1228/chatgpt-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT的Java客户端，ChatGPT Java SDK。OpenAI官方Api的Java 版SDK。OpenAI GPT-3.5-Turb Api Client for Java&lt;/p&gt;&lt;hr&gt;&lt;p&gt;it’s an “unofficial&#34; or &#34;community-maintained” library.&lt;/p&gt; &#xA;&lt;p&gt;这是一个非官方的社区维护的库。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;国内访问可以看下这个解决方案&lt;/strong&gt;：&lt;a href=&#34;https://github.com/noobnooc/noobnooc/discussions/9&#34;&gt;https://github.com/noobnooc/noobnooc/discussions/9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.0 支持所有的OpenAI官方接口&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.1 支持自定义超时时间，自定义OkHttpClient拦截器，参考：OpenAiClient构造函数&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.2 支持Stream流式输出，参考：OpenAiStreamClient&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.3 支持最新的GPT-3.5-Turbo模型和Whisper-1模型，支持语音功能转文字，语音翻译。OpenAiClient和OpenAiStreamClient支持Builder构造，支持代理。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.4 官方最新的ChatGPT Stream模式下的Api返回值改动。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1.0.5 支持自定义Api Host，使用Builder构建。参考下面的快速开始部分代码。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;已经支持OpenAI官方的全部api，有bug欢迎朋友们指出，互相学习。&lt;/h4&gt; &#xA;&lt;p&gt;注意：由于这个接口：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/retrieve-content&#34;&gt;https://platform.openai.com/docs/api-reference/files/retrieve-content&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;免费用户无法使用，所以并未经过测试！！！&lt;/strong&gt;（哪位朋友有收费版keys也可以提供下）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;完整测试案例参考源码中的：com.unfbx.chatgpt.OpenAiClientTest&lt;/strong&gt;和 &lt;strong&gt;com.unfbx.chatgpt.OpenAiStreamClientTest&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Q&lt;/th&gt; &#xA;   &lt;th&gt;A&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;如何实现连续对话？&lt;/td&gt; &#xA;   &lt;td&gt;issues：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/issues/8&#34;&gt;https://github.com/Grt1228/chatgpt-java/issues/8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;如何实现流式输出？&lt;/td&gt; &#xA;   &lt;td&gt;升级1.0.2版本，参考源码：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiStreamClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;如何整合SpringBoot实现流式输出的Api接口？&lt;/td&gt; &#xA;   &lt;td&gt;参考另外一个项目：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-steam-output&#34;&gt;chatgpt-steam-output&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;最新版GPT-3.5-TURBO是否支持？&lt;/td&gt; &#xA;   &lt;td&gt;升级1.0.3 已经支持ChatCompletion, 参考测试案例：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiStreamClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt; 和&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;最新版语言转文字和语言翻译是否支持？&lt;/td&gt; &#xA;   &lt;td&gt;升级1.0.3 已经支持whisper参考测试案例：&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiStreamClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt; 和&lt;a href=&#34;https://github.com/Grt1228/chatgpt-java/raw/main/src/test/java/com/unfbx/chatgpt/OpenAiClientTest.java/&#34;&gt;OpenAiStreamClientTest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;工程简介&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChatGPT的Java客户端&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenAI官方Api的Java SDK&lt;/p&gt; &#xA;&lt;p&gt;目前支持api-keys的方式调用，获取api-keys可以百度或者csdn查一下。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;api-keys的方式调用目前需要用梯子才可访问。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenAi官方文档地址：&lt;a href=&#34;https://platform.openai.com/docs/api-reference&#34;&gt;https://platform.openai.com/docs/api-reference&lt;/a&gt; &lt;strong&gt;已完成接口列表：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Completions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Embeddings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fine-tune&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Moderations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Engines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Speech To Text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;h2&gt;方式一&lt;/h2&gt; &#xA;&lt;p&gt;导入pom依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.unfbx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;chatgpt-java&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0.5&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;常规客户端使用示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package com.unfbx.eventTest.test;&#xA;import com.unfbx.chatgpt.OpenAiClient;&#xA;import com.unfbx.chatgpt.entity.completions.CompletionResponse;&#xA;import java.util.Arrays;&#xA;&#xA;public class TestB {&#xA;    public static void main(String[] args) {&#xA;        //配置api keys&#xA;        //代理可以为null&#xA;        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&#34;192.168.1.111&#34;, 7890));&#xA;        //日志输出可以不添加&#xA;        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor(new OpenAILogger());&#xA;        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);&#xA;//        OpenAiClient openAiClient = new OpenAiClient(&#34;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&#34;,60,60,60);&#xA;//        OpenAiClient openAiClient = new OpenAiClient(&#34;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&#34;,60,60,60,null);&#xA;//        OpenAiClient openAiClient = new OpenAiClient(&#34;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&#34;);&#xA;        OpenAiClient openAiClient = OpenAiClient.builder()&#xA;            .apiKey(&#34;sk-***************************&#34;)&#xA;            .connectTimeout(50)&#xA;            .writeTimeout(50)&#xA;            .readTimeout(50)&#xA;            .interceptor(Arrays.asList(httpLoggingInterceptor))&#xA;            .proxy(proxy)&#xA;            .apiHost(&#34;https://api.openai.com/&#34;)&#xA;            .build();&#xA;        CompletionResponse completions = openAiClient.completions(&#34;我想申请转专业，从计算机专业转到会计学专业，帮我完成一份两百字左右的申请书&#34;);&#xA;        Arrays.stream(completions.getChoices()).forEach(System.out::println);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Choice(text=&#xA;&#xA;尊敬的领导：&#xA;&#xA;您好！&#xA;&#xA;我是XX，目前就读于XX大学计算机专业，现在我想申请转专业，从计算机专业转到会计学专业。&#xA;&#xA;我有着良好的学习习惯，在计算机专业的学习中，我取得了良好的成绩，并且拥有了一定的计算机基础知识。在这一年的学习中，我发现自己对计算机的兴趣不太浓厚，而对会计学的兴趣却很浓厚，我觉得会计学是一个很有前景的专业，而且也是我的兴趣所在，我想把自己的未来打造成一个会计学专业的专家。&#xA;&#xA;因此，我希望能够申请转专业，从计算机专业转到会计学专业，我会努力学习，努力完成学业，让自己成为一个优秀的会计学专业的专家。&#xA;&#xA;最后，我再次表达我申请转专业的请求，希望能够得到您的认可和批准。&#xA;&#xA;谨上&#xA;&#xA;XX, index=0, logprobs=null, finishReason=stop)&#xA;&#xA;Process finished with exit code 0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;流式输出代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package com.unfbx.chatgpt;&#xA;&#xA;import com.unfbx.chatgpt.entity.completions.Completion;&#xA;import com.unfbx.chatgpt.sse.ConsoleEventSourceListener;&#xA;import org.junit.Before;&#xA;import org.junit.Test;&#xA;&#xA;import java.util.concurrent.CountDownLatch;&#xA;&#xA;/**&#xA; * 描述： 测试类&#xA; *&#xA; * @author https:www.unfbx.com&#xA; * 2023-02-28&#xA; */&#xA;public class OpenAiStreamClientTest {&#xA;&#xA;    private OpenAiStreamClient client;&#xA;&#xA;    @Before&#xA;    public void before() {&#xA;        //代理可以不设置&#xA;        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&#34;192.168.1.111&#34;, 7890));&#xA;//        client = new OpenAiStreamClient(&#34;sk-**********************&#34;,&#xA;//                60,&#xA;//                60,&#xA;//                60,&#xA;//                proxy);&#xA;        //推荐这种构造方式&#xA;        client = OpenAiStreamClient.builder()&#xA;                .connectTimeout(50)&#xA;                .readTimeout(50)&#xA;                .writeTimeout(50)&#xA;                .apiKey(&#34;sk-******************************&#34;)&#xA;                .proxy(proxy)&#xA;                .apiHost(&#34;https://api.openai.com/&#34;)&#xA;                .build();&#xA;    }&#xA;    &#xA;    @Test&#xA;    public void chatCompletions() {&#xA;        ConsoleEventSourceListener eventSourceListener = new ConsoleEventSourceListener();&#xA;        Message message = Message.builder().role(Message.Role.USER).content(&#34;你好啊我的伙伴！&#34;).build();&#xA;        ChatCompletion chatCompletion = ChatCompletion.builder().messages(Arrays.asList(message)).build();&#xA;        client.streamChatCompletion(chatCompletion, eventSourceListener);&#xA;        CountDownLatch countDownLatch = new CountDownLatch(1);&#xA;        try {&#xA;            countDownLatch.await();&#xA;        } catch (InterruptedException e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    @Test&#xA;    public void completions() {&#xA;        ConsoleEventSourceListener eventSourceListener = new ConsoleEventSourceListener();&#xA;        Completion q = Completion.builder()&#xA;                .prompt(&#34;一句话描述下开心的心情&#34;)&#xA;                .stream(true)&#xA;                .build();&#xA;        client.streamCompletions(q, eventSourceListener);&#xA;        CountDownLatch countDownLatch = new CountDownLatch(1);&#xA;        try {&#xA;            countDownLatch.await();&#xA;        } catch (InterruptedException e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;输出日志（text是持续输出的）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;23:03:59.158 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI建立sse连接...&#xA;23:03:59.160 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\n&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.172 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\n&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.251 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u5fc3&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.313 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u60c5&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.380 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u8212&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.439 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u7545&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.532 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\uff0c&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.579 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u5fc3&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.641 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u65f7&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.673 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u795e&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.751 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u6021&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.782 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：{&#34;id&#34;: &#34;cmpl-6pIHnOOJiiUEVMesXwxzzcSQFoZHj&#34;, &#34;object&#34;: &#34;text_completion&#34;, &#34;created&#34;: 1677683039, &#34;choices&#34;: [{&#34;text&#34;: &#34;\u3002&#34;, &#34;index&#34;: 0, &#34;logprobs&#34;: null, &#34;finish_reason&#34;: null}], &#34;model&#34;: &#34;text-davinci-003&#34;}&#xA;23:03:59.815 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据：[DONE]&#xA;23:03:59.815 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI返回数据结束了&#xA;23:03:59.815 [OkHttp https://api.openai.com/...] INFO com.unfbx.chatgpt.sse.ConsoleEventSourceListener - OpenAI关闭sse连接...&#xA;&#xA;Process finished with exit code -1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;方式二（下载源码直接运行）&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;OpenAI全部接口支持调用&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;创建客户端配置api-key 完整测试案例参考：com.unfbx.chatgpt.OpenAiClientTest 和 com.unfbx.chatgpt.OpenAiStreamClientTest&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lss233/chatgpt-mirai-qq-bot</title>
    <updated>2023-03-08T01:30:09Z</updated>
    <id>tag:github.com,2023-03-08:/lss233/chatgpt-mirai-qq-bot</id>
    <link href="https://github.com/lss233/chatgpt-mirai-qq-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 一键部署！真正的 ChatGPT QQ 聊天机器人！支持ChatGPT API、 ChatGPT Plus、新版 Bing，多账号负载均衡，人设调教，敏感词检测，虚拟女仆、对话上下文，图片渲染，代理加速 (内有视频教程）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT Mirai QQ Bot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;一款使用 OpenAI 的 ChatGPT 进行聊天的 QQ 机器人！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://badgen.net/github/stars/lss233/chatgpt-mirai-qq-bot?icon=github&amp;amp;label=stars&#34; alt=&#34;Github stars&#34;&gt; &lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/actions/workflows/docker-latest.yml&#34;&gt;&lt;img src=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/actions/workflows/docker-latest.yml/badge.svg?branch=browser-version&#34; alt=&#34;Docker build latest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lss233/chatgpt-mirai-qq-bot/&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/pulls/lss233/chatgpt-mirai-qq-bot?icon=docker&amp;amp;label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lss233/chatgpt-mirai-qq-bot/&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/size/lss233/chatgpt-mirai-qq-bot/browser-version/amd64?icon=docker&amp;amp;label=image%20size&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;2023/2/10&lt;/strong&gt;&lt;br&gt; 本项目分为 ChatGPT 版和 GPT-3 版两种模式。&lt;br&gt; ChatGPT 版代表版本号为 v2.x 的版本； GPT-3 版代表版本号为 v1.6 的版本&lt;br&gt; 具体区别见：&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/issues/82&#34;&gt;https://github.com/lss233/chatgpt-mirai-qq-bot/issues/82&lt;/a&gt;&lt;br&gt; 当前浏览的是 ChatGPT 版，点&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/tree/api-version&#34;&gt;这里&lt;/a&gt;切换至 GPT-3 版。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;如果你自己也有做机器人的想法，可以看看下面这些项目：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GraiaProject/Ariadne&#34;&gt;Ariadne&lt;/a&gt; - 一个优雅且完备的 Python QQ 机器人框架 （主要是这个 ！！！）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/project-mirai/mirai-api-http&#34;&gt;mirai-api-http&lt;/a&gt; - 提供HTTP API供所有语言使用 mirai QQ 机器人&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acheong08/ChatGPT&#34;&gt;Reverse Engineered ChatGPT by OpenAI&lt;/a&gt; - 非官方 ChatGPT Python 支持库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;本项目基于以上项目开发，所以你可以给他们也点个 star ！&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚡ 支持&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;文字转图片发送&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;群聊回复引用&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;关键词触发回复&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;正向代理&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;多种方式登录 OpenAI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;多账号支持&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;支持 ChatGPT Plus&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;支持 ChatGPT API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;支持 Bing 聊天&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;支持接入百度云内容审核（主要是防封）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;指定用户/群组额度限制&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;预设人格初始化&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=voXtxBSw&#34;&gt;交流群&lt;/a&gt; 会发布最新的项目动态。&lt;br&gt; 加群之前先看&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/issues&#34;&gt;这里&lt;/a&gt;的内容能不能解决你的问题。&lt;br&gt; 如果不能解决，把遇到的问题、&lt;strong&gt;日志&lt;/strong&gt;和配置文件准备好后再提问。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=TBX8Saq7&#34;&gt;调试群&lt;/a&gt; 这个群里有很多 ChatGPT QQ 机器人，不解答技术问题。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lss233/chatgpt-mirai-qq-bot/browser-version/.github/preview.png&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🐎 命令&lt;/h2&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/wiki/&#34;&gt;Wiki&lt;/a&gt; 了解机器人的内部命令和用法。&lt;/p&gt; &#xA;&lt;h2&gt;🔧 搭建&lt;/h2&gt; &#xA;&lt;p&gt;如果你在使用的过程中遇到问题，可以看&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/issues/85&#34;&gt;&lt;strong&gt;搭建常见问题解答 | FAQ&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;对于 Windows 用户，此处有一个视频教程供你参考：&lt;a href=&#34;https://www.bilibili.com/video/av991984534&#34;&gt;https://www.bilibili.com/video/av991984534&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果你是手机党，可以看这个纯用手机的部署教程（使用 Linux 服务器）：&lt;a href=&#34;https://www.bilibili.com/video/av949514538&#34;&gt;https://www.bilibili.com/video/av949514538&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Linux: 通过快速部署脚本部署 （新人推荐)&lt;/summary&gt; &#xA; &lt;p&gt;执行下面这行命令启动自动部署脚本。&lt;br&gt; 它会为你安装 Docker、 Docker Compose 和编写配置文件。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -c &#34;$(curl -fsSL https://gist.githubusercontent.com/lss233/54f0f794f2157665768b1bdcbed837fd/raw/chatgpt-mirai-installer-154-16RC3.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Linux: 通过 Docker Compose 部署 （自带 Mirai)&lt;/summary&gt; 我们使用 `docker-compose.yaml` 整合了 [lss233/mirai-http](https://github.com/lss233/mirai-http-docker) 和本项目来实现快速部署。 但是在部署过程中仍然需要一些步骤来进行配置。 &#xA; &lt;p&gt;你可以在 &lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/wiki/%E4%BD%BF%E7%94%A8-Docker-Compose-%E9%83%A8%E7%BD%B2%EF%BC%88Mirai---%E6%9C%AC%E9%A1%B9%E7%9B%AE%EF%BC%89&#34;&gt;Wiki&lt;/a&gt; 查看搭建教程。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Linux: 通过 Docker 部署 （适合已经有 Mirai 的用户)&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;找个合适的位置，写你的 &lt;code&gt;config.cfg&lt;/code&gt;。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;执行以下命令，启动 bot：&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 修改 /path/to/config.cfg 为你 config.cfg 的位置&#xA;# XPRA_PASSWORD=123456 中的 123456 是你的 Xpra 密码，建议修改&#xA;docker run --name mirai-chatgpt-bot \&#xA;    -e XPRA_PASSWORD=123456 \&#xA;    -v /path/to/config.cfg:/app/config.cfg \&#xA;    --network host \&#xA;    lss233/chatgpt-mirai-qq-bot:browser-version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;启动后，在浏览器访问 &lt;code&gt;http://你的服务器IP:14500&lt;/code&gt; 可以访问到登录 ChatGPT 的浏览器页面&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Windows: 快速部署包 (自带 Mirai，新人推荐）&lt;/summary&gt; &#xA; &lt;p&gt;我们为 Windows 用户制作了一个快速启动包，可以在 &lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/releases&#34;&gt;Release&lt;/a&gt; 中找到。&lt;/p&gt; &#xA; &lt;p&gt;文件名为：&lt;code&gt;quickstart-windows-amd64.zip&lt;/code&gt; 或者 &lt;code&gt;Windows快速部署包.zip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Mac: 快速部署包 (自带 Mirai，新人推荐）&lt;/summary&gt; &#xA; &lt;p&gt;Windows快速部署包Mac用户也可以使用，@magisk317 已测试通过，功能基本都正常 不过，需要注意的是，如果需要使用图片模式，由于&lt;code&gt;wkhtmltoimage.exe&lt;/code&gt;在Mac上无法运行，可以使用&lt;code&gt;wkhtmltopdf&lt;/code&gt;代替，安装命令：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;brew install --cask wkhtmltopdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;brew的安装及使用方法详见：&lt;a href=&#34;https://brew.sh/index_zh-cn&#34;&gt;链接&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;手动部署&lt;/summary&gt; &#xA; &lt;p&gt;提示：你需要 Python &amp;gt;= 3.11 才能运行本项目&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;部署 Mirai ，安装 mirai-http-api 插件。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;下载本项目:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lss233/chatgpt-mirai-qq-bot&#xA;cd chatgpt-mirai-qq-bot&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;参照下文调整配置文件。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;启动 bot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 bot.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;⚙ 配置文件完整介绍&lt;/h2&gt; &#xA;&lt;p&gt;参考 &lt;code&gt;config.example.cfg&lt;/code&gt; 调整配置文件。将其复制为 &lt;code&gt;config.cfg&lt;/code&gt;，然后修改 &lt;code&gt;config.cfg&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;配置文件主要包含 mirai-http-api 的连接信息和 OpenAI 的登录信息。&lt;/p&gt; &#xA;&lt;p&gt;OpenAI 注册教程： &lt;a href=&#34;https://www.cnblogs.com/mrjade/p/16968591.html&#34;&gt;https://www.cnblogs.com/mrjade/p/16968591.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# 这里是 ChatGPT for QQ 的所有配置文件&#xA;# 请注意：以 &#34;#&#34; 开头的文本均为注释&#xA;# 不会被程序读取&#xA;# 如果你想要使用某个设置，请确保前面没有 &#34;#&#34; 号&#xA;[mirai]&#xA;# Mirai 相关设置&#xA;&#xA;qq = 请填写机器人的 QQ 号&#xA;&#xA;manager_qq = 请修改为机器人管理员的QQ号&#xA;&#xA;# 以下设置如果不懂 无需理会&#xA;&#xA;api_key = &#34;1234567890&#34; # mirai-http-api 中的 verifyKey&#xA;http_url = &#34;http://localhost:8080&#34; # mirai-http-api 中的 http 回调地址&#xA;ws_url = &#34;http://localhost:8080&#34;# mirai-http-api 中的 ws 回调地址&#xA;&#xA;# ==== OpenAI 账号部分开始&#xA;[openai]&#xA;# OpenAI 相关设置&#xA;&#xA;# 你可以用多种不同的方式登录 OpenAI&#xA;# 你也可以登录很多个不同的账号（无限多个）&#xA;# 下面的例子会向你演示使用不同方式登录时&#xA;# 配置文件的写法&#xA;&#xA;# 第 1 个 OpenAI 账号&#xA;# 使用 access_token 登录&#xA;# 优点：&#xA;# 1. 适用于在国内网络环境&#xA;# 2. 适用于通过 Google / 微软 注册的 OpenAI 账号&#xA;# 3. 登录过程较快&#xA;# 缺点：&#xA;# 1. 有效期为 30 天，到期后需更换&#xA;[[openai.accounts]]&#xA;mode = &#34;browserless&#34;&#xA;&#xA;# 你的 access_token，登录 OpenAI 后访问`https://chat.openai.com/api/auth/session`获取&#xA;access_token = &#34;一串 ey 开头的东西&#34;&#xA;&#xA;# 下面是所有的 OpenAI 账号都可以有的设置&#xA;# ========= 开始 ========&#xA;&#xA;# 如果你在国内，需要配置代理&#xA;proxy=&#34;http://127.0.0.1:1080&#34;&#xA;&#xA;# 使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）&#xA;paid = false&#xA;&#xA;# 是否开启标题自动重命名&#xA;# 若为空或保持注释即不开启&#xA;# 支持的变量： {session_id} - 此对话对应的上下文 ID，若产生在好友中，则为好友 QQ 号，若产生在群聊中，则为群号&#xA;# 具体见 README 中的介绍&#xA;# title_pattern=&#34;qq-{session_id}&#34;&#xA;&#xA;# 是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容&#xA;# auto_remove_old_conversations = true&#xA;&#xA;# ===== 结束 =====&#xA;&#xA;# 第 2 个 OpenAI 账号&#xA;# 使用 session_token 登录&#xA;# 此方法已很少人使用&#xA;# 优点：&#xA;# 1. 适用于通过 Google / 微软 注册的 OpenAI 账号&#xA;# 缺点：&#xA;# 1. 有效期较短，具体时间未知&#xA;# 2. 登录过程需要几秒钟时间&#xA;[[openai.accounts]]&#xA;mode = &#34;browserless&#34;&#xA;&#xA;# 你的 session_token，使用方法见 README&#xA;session_token = &#34;一串 ey 开头的东西&#34;&#xA;&#xA;# 如果你在国内，需要配置代理&#xA;proxy=&#34;http://127.0.0.1:1080&#34;&#xA;&#xA;# 使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）&#xA;paid = false&#xA;&#xA;# 是否开启标题自动重命名&#xA;title_pattern=&#34;qq-{session_id}&#34;&#xA;&#xA;# 是否自动删除旧的对话&#xA;auto_remove_old_conversations = true&#xA;&#xA;# 第 3 个 OpenAI 账号&#xA;# 使用 邮箱+密码 登录&#xA;# 优点：&#xA;# 1. 自动刷新 access_token 和 session_token，无需人工操作&#xA;# 缺点：&#xA;# 1. 需要国外网络环境&#xA;# 2. 如果使用代理，需要确保你的代理未被 OpenAI 封禁&#xA;[[openai.accounts]]&#xA;mode = &#34;browserless&#34;&#xA;&#xA;# 你的 OpenAI 邮箱&#xA;email = &#34;xxxx&#34; &#xA;# 你的 OpenAI 密码&#xA;password = &#34;xxx&#34;&#xA;&#xA;# 如果你在国内，需要配置代理&#xA;proxy=&#34;http://127.0.0.1:1080&#34;&#xA;&#xA;# 使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）&#xA;paid = false&#xA;&#xA;# 是否开启标题自动重命名&#xA;title_pattern=&#34;qq-{session_id}&#34;&#xA;&#xA;# 是否自动删除旧的对话&#xA;auto_remove_old_conversations = true&#xA;&#xA;# 第 4 个 OpenAI 账号&#xA;# 使用 api key 登录&#xA;# 当你设置了 API Key 之后&#xA;# 你就可以使用 OpenAI 中收费的 ChatGPT API、AI 画图等功能&#xA;# 优点：&#xA;# 1. 响应快&#xA;# 缺点：&#xA;# 1. 烧钱&#xA;[[openai.accounts]]&#xA;# 你的 API key，可以在这里看： https://platform.openai.com/account/api-keys&#xA;api_key=&#34;sk-xxxxx&#34;&#xA;# 如果你在国内，需要配置代理&#xA;proxy=&#34;http://127.0.0.1:1080&#34;&#xA;&#xA;# 第 5 个 OpenAI 账号&#xA;# 理论上你可以添加无限多个 OpenAI 账号&#xA;# 你可以自行添加或删除配置文件来设置账号信息&#xA;[[openai.accounts]]&#xA;mode = &#34;browserless&#34;&#xA;&#xA;# 你的 OpenAI 邮箱&#xA;email = &#34;xxxx&#34; &#xA;# 你的 OpenAI 密码&#xA;password = &#34;xxx&#34;&#xA;&#xA;# 如果你在国内，需要配置代理&#xA;proxy=&#34;http://127.0.0.1:1080&#34;&#xA;&#xA;# 使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）&#xA;paid = false&#xA;&#xA;# 是否开启标题自动重命名&#xA;title_pattern=&#34;qq-{session_id}&#34;&#xA;&#xA;# 是否自动删除旧的对话&#xA;auto_remove_old_conversations = true&#xA;&#xA;# === OpenAI 账号部分结束&#xA;&#xA;&#xA;# === Bing 设置部分开始&#xA;# 如果你没有 Bing 账号，可以直接删除这部分&#xA;[bing]&#xA;&#xA;# 第 1 个 Bing 账号&#xA;# 理论上，你可以添加无限多个 Bing 账号。  &#xA;# 多账号的配置方法和 OpenAI 的一样。&#xA;[[bing.accounts]]&#xA;# 你的账号 Cookie，获取方法见 README&#xA;cookie_content = &#39;MUID=xxxxx; SRCHD=AF=xxxx; SRCHUID=V=2&amp;amp;GUID=xxxxxxxx;  MicrosoftApplicationsTelemetryDeviceId=xxxxxx-xxxx-xxxx-xxx-xxxxx; ...一串很长的文本...&#39;&#xA;# === Bing 设置部分结束&#xA;&#xA;[text_to_image]&#xA;# 文字转图片&#xA;&#xA;# 是否强制开启，设置后所有的消息强制以图片发送，减小风控概率  &#xA;always = true&#xA;&#xA;# 是否默认开启，设置后所有的消息默认以图片发送，减小风控概率  &#xA;default = true&#xA;&#xA;# [备用模式]字体大小&#xA;font_size = 30&#xA;&#xA;# [备用模式]图片宽度&#xA;width = 700&#xA;&#xA;# [备用模式]字体&#xA;font_path = &#34;fonts/sarasa-mono-sc-regular.ttf&#34; &#xA;&#xA;# [备用模式]起始点 X&#xA;offset_x = 50 &#xA;&#xA;# [备用模式]起始点 Y&#xA;offset_y = 50 &#xA;&#xA;[trigger]&#xA;# 配置机器人要如何响应，下面所有项均可选 (也就是可以直接删掉那一行)&#xA;&#xA;# 全局聊天前缀，在群聊和私聊中，符合下面的前缀才会响应，可以自己增减&#xA;prefix = [ &#34;&#34;,]&#xA;&#xA;# 私聊聊天前缀，在私聊中，符合下面的前缀也会响应，可以自己增减&#xA;prefix_friend = [ &#34;&#34;,]&#xA;&#xA;# 群聊聊天前缀，在群聊中，符合下面的前缀也会响应，可以自己增减&#xA;prefix_group = [ &#34;&#34;,]&#xA;&#xA;# 直接和指定的 AI 对话（不切换AI）&#xA;# 此处的前缀是在上面的前缀之后的&#xA;# 例： &#xA;# prefix = [ &#34;ask&#34; ]&#xA;# prefix_ai = { &#34;bing-c&#34; = [&#34;bing&#34;] }&#xA;# 则用户发送： ask bing 你好&#xA;# 则会直接把 “你好” 两个字发给 New Bing AI&#xA;prefix_ai = { &#34;chatgpt-web&#34; = [&#34;gpt&#34;], &#34;bing-c&#34; = [&#34;bing&#34;] }&#xA;&#xA;# AI 画图的前缀&#xA;# 需要有 OpenAI 的 api_key 才能使用&#xA;prefix_image = [&#34;画&#34;, &#34;看&#34;]&#xA;# 配置群里如何让机器人响应，&#34;at&#34; 表示需要群里 @ 机器人，&#34;mention&#34; 表示 @ 或者以机器人名字开头都可以，&#34;none&#34; 表示不需要&#xA;require_mention = &#34;at&#34;&#xA;&#xA;# 重置会话的命令&#xA;reset_command = [ &#34;重置会话&#34;,]&#xA;&#xA;# 回滚会话的命令&#xA;rollback_command = [ &#34;回滚会话&#34;,]&#xA;&#xA;[response]&#xA;# 默认使用的 AI 类型，不填写时自动推测&#xA;# 目前支持的类型：&#xA;# chatgpt-web: 网页版 ChatGPT&#xA;# chatgpt-api: API 版 ChatGPT (GPT3.5-turbo)&#xA;# bing-c: New Bing (新必应对话风格-创造力)&#xA;# bing-p: New Bing (新必应对话风格-精确)&#xA;# bing-b: New Bing (新必应对话风格-平衡)&#xA;default_ai = &#34;chatgpt-web&#34;&#xA;# 匹配指令成功但没有对话内容时发送的消息&#xA;placeholder = &#34;您好！我是 Assistant，一个由 OpenAI 训练的大型语言模型。我不是真正的人，而是一个计算机程序，可以通过文本聊天来帮助您解决问题。如果您有任何问题，请随时告诉我，我将尽力回答。\n如果您需要重置我们的会话，请回复`重置会话`。&#34;&#xA;&#xA;# 发生错误时要发送的消息&#xA;error_format = &#34;出现故障！如果这个问题持续出现，请和我说“重置会话” 来开启一段新的会话，或者发送 “回滚会话” 来回溯到上一条对话，你上一条说的我就当作没看见。\n{exc}&#34;&#xA;&#xA;# 发生网络错误时发送的消息，请注意可以插入 {exc} 作为异常占位符&#xA;error_network_failure = &#34;网络故障！连接 OpenAI 服务器失败，我需要更好的网络才能服务！\n{exc}&#34;&#xA;&#xA;# OpenAI 账号登录失效时的提示&#xA;error_session_authenciate_failed = &#34;身份验证失败！无法登录至 ChatGPT 服务器，请检查账号信息是否正确！\n{exc}&#34;&#xA;&#xA;# OpenAI 提示 Too many requests（太多请求） 时的提示&#xA;error_request_too_many = &#34;糟糕！当前收到的请求太多了，我需要一段时间冷静冷静。你可以选择“重置会话”，或者过一会儿再来找我！\n{exc}&#34;&#xA;&#xA;# 服务器提示 Server overloaded(过载) 时的提示&#xA;error_server_overloaded = &#34;抱歉，当前服务器压力有点大，请稍后再找我吧！&#34;&#xA;&#xA;# 是否要回复触发指令的消息&#xA;quote = true&#xA;&#xA;# 发送下面那个提醒之前的等待时间&#xA;timeout = 30.0&#xA;&#xA;# 超过响应时间时要发送的提醒&#xA;timeout_format = &#34;我还在思考中，请再等一下~&#34;&#xA;&#xA;# 重置会话时发送的消息&#xA;reset = &#34;会话已重置。&#34;&#xA;&#xA;# 回滚成功时发送的消息&#xA;rollback_success = &#34;已回滚至上一条对话，你刚刚发的我就忘记啦！&#34;&#xA;&#xA;# 回滚失败时发送的消息&#xA;rollback_fail = &#34;回滚失败，没有更早的记录了！&#34;&#xA;&#xA;# 等待处理的消息的最大数量，如果要关闭此功能，设置为 0&#xA;max_queue_size = 10&#xA;&#xA;# 队列满时的提示&#xA;queue_full = &#34;抱歉！我现在要回复的人有点多，暂时没有办法接收新的消息了，请过会儿再给我发吧！&#34;&#xA;&#xA;# 新消息加入队列会发送通知的长度最小值&#xA;queued_notice_size = 3&#xA;&#xA;# 新消息进入队列时，发送的通知。 queue_size 是当前排队的消息数&#xA;queued_notice = &#34;消息已收到！当前我还有{queue_size}条消息要回复，请您稍等。&#34;&#xA;&#xA;[baiducloud]&#xA;# 是否启动百度云内容安全审核&#xA;# 注册地址: http://console.bce.baidu.com/ai/#/ai/antiporn/overview/index&#xA;check = false&#xA;&#xA;# 百度云API_KEY 24位英文数字字符串&#xA;baidu_api_key = &#34;&#34;&#xA;&#xA;# 百度云SECRET_KEY 32位的英文数字字符串&#xA;baidu_secret_key =&#34;&#34;&#xA;&#xA;# 不合规消息自定义返回&#xA;illgalmessage = &#34;[百度云]请珍惜机器人，当前返回内容不合规&#34;&#xA;&#xA;[system]&#xA;# 是否自动同意进群邀请&#xA;accept_group_invite = false&#xA;&#xA;# 是否自动同意好友请求&#xA;accept_friend_request = false&#xA;&#xA;[presets]&#xA;# 切换预设的命令： 加载预设 猫娘&#xA;command = &#34;加载预设 (\\w+)&#34;&#xA;&#xA;loaded_successful = &#34;预设加载成功！&#34;&#xA;&#xA;[presets.keywords]&#xA;# 预设关键词 &amp;lt;-&amp;gt; 实际文件&#xA;&#34;正常&#34; = &#34;presets/default.txt&#34;&#xA;&#34;猫娘&#34; = &#34;presets/catgirl.txt&#34;&#xA;&#xA;[ratelimit]&#xA;# 额度限制功能，可以在 wiki 中了解此功能的用法&#xA;&#xA;# 额度使用达到此比例时进行警告&#xA;warning_rate = 0.8&#xA;&#xA;# 警告消息&#xA;warning_msg = &#34;\n\n警告：额度即将耗尽！\n目前已发送：{usage}条消息，最大限制为{limit}条消息/小时，请调整您的节奏。\n额度限制整点重置，当前服务器时间：{current_time}&#34;&#xA;&#xA;# 超额消息&#xA;exceed = &#34;已达到额度限制，请等待下一小时继续和我对话。&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;多账号支持&lt;/h3&gt; &#xA;&lt;p&gt;你可以登录多个不同的 OpenAI 账号，当机器人开始产生新对话时，我们会从你登录的账号中选择&lt;strong&gt;一个&lt;/strong&gt;来使用 ChatGPT 和用户聊天。&lt;/p&gt; &#xA;&lt;p&gt;一个对话会绑定在一个号上，所以你不必担心丢失上下文的问题。&lt;/p&gt; &#xA;&lt;p&gt;这可以降低聊天频率限制出现的概率。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;[openai]&#xA;# OpenAI 相关设置&#xA;&#xA;# 第 1 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;# 里面是一些设置&#xA;&#xA;# 第 2 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;# 里面是一些设置&#xA;&#xA;# 第 3 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;# 里面是一些设置&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;登录模式选择&lt;/h3&gt; &#xA;&lt;p&gt;现在我们支持多种方式访问 OpenAI 服务器， 你可以在配置文件中选择所使用的模式。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;[openai]&#xA;# OpenAI 相关设置&#xA;&#xA;# 第 N 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;# 前面别的东西&#xA;&#xA;# 模式选择&#xA;mode = &#34;browser&#34;&#xA;&#xA;# 后面别的东西&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;支持的模式有：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;browser - 浏览器登录。该模式会在你的电脑上启动一个 Chrome 浏览器来登录并验证 OpenAI，该模式成功率较低。&lt;/li&gt; &#xA; &lt;li&gt;browserless - 无浏览器模式。该模式将你的&lt;strong&gt;聊天请求&lt;/strong&gt;发送到第三方服务器进行认证，从而不需要浏览器，该模式成功率较高。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;邮箱密码登录&lt;/h4&gt; &#xA;&lt;p&gt;当你使用这种方式登录时，我们会自动打开一个浏览器页面完成 OpenAI 的登录。&lt;/p&gt; &#xA;&lt;p&gt;我们会自动点击页面中的 &lt;code&gt;Log in&lt;/code&gt; 按钮、为您填写 &lt;code&gt;email&lt;/code&gt;，并完成登录。&lt;/p&gt; &#xA;&lt;p&gt;登录完成后，浏览器会自动退出。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# 前面别的东西&#xA;[openai]&#xA;# OpenAI 相关设置&#xA;&#xA;# 第 N 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;# 你的 OpenAI 邮箱&#xA;email = &#34;xxxx&#34; &#xA;# 你的 OpenAI 密码&#xA;password = &#34;xxx&#34;&#xA;# 后面别的东西&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;session_token 登录&lt;/h3&gt; &#xA;&lt;p&gt;对于通过 Google 登录或者微软登录的同学，可以使用 session_token 方式进行登录。&lt;/p&gt; &#xA;&lt;p&gt;使用这种方式登录时不需要填写&lt;strong&gt;密码&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是，session_token 过期比较频繁，过期后需要重新设置。&lt;/p&gt; &#xA;&lt;p&gt;session_token 的获取方式可参考：&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/issues/96&#34;&gt;请问怎么获取 session_token&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# 前面别的东西&#xA;[openai]&#xA;# OpenAI 相关设置&#xA;&#xA;# 第 N 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;&#xA;session_token = &#34;一串 ey 开头的东西&#34;&#xA;email = &#34;你的邮箱&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;access_token 登录&lt;/h3&gt; &#xA;&lt;p&gt;配合 &lt;code&gt;mode=&#34;browserless&#34;&lt;/code&gt;使用，这种方式登录时不需要填写邮箱和密码、session_token。&lt;br&gt; 这种方法比较适合登录时出现 Unknown error,或者回答问题时出现有关 Access Token报错的情况。&lt;br&gt; 你需要自己登录 OpenAI 网站，然后访问 &lt;a href=&#34;https://chat.openai.com/api/auth/session&#34;&gt;https://chat.openai.com/api/auth/session&lt;/a&gt; ，你可以看到一段类似下面的代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;user&#34;: {&#xA;&#x9;&#x9;&#34;id&#34;: &#34;user-*****&#34;,&#xA;&#x9;&#x9;&#34;name&#34;: &#34;***&#34;,&#xA;&#x9;&#x9;&#34;email&#34;: &#34;***&#34;,&#xA;&#x9;&#x9;&#34;image&#34;: &#34;***&#34;,&#xA;&#x9;&#x9;&#34;picture&#34;: &#34;***&#34;,&#xA;&#x9;&#x9;&#34;groups&#34;: []&#xA;&#x9;},&#xA;&#x9;&#34;expires&#34;: &#34;2023-03-18T09:11:03.546Z&#34;,&#xA;&#x9;&#34;accessToken&#34;: &#34;eyJhbGciOiJS*****X7GdA&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;获取以上 JSON 中&lt;code&gt;accessToken&lt;/code&gt; 后面的值即可，有效期在 30 天左右。过期后需要重新设置。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# 前面别的东西&#xA;&#xA;[[openai.accounts]]&#xA;access_token = &#34;一串内容为 eyJhbGciOiJS*****X7GdA 的东西&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;浏览器登录不了？使用无浏览器模式！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果你登录过程中遇到了卡死的情况，&lt;/p&gt; &#xA;&lt;p&gt;可以尝试设置 &lt;code&gt;mode=&#34;browserless&#34;&lt;/code&gt; 配置项。&lt;/p&gt; &#xA;&lt;p&gt;开启后，你的账户密码将发送至一个第三方的代理服务器进行验证。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# 前面别的东西&#xA;[openai]&#xA;# 无浏览器模式接入点，如果未知请勿添加此配置项&#xA;browserless_endpoint = &#34;xxxx&#34;&#xA;# OpenAI 相关设置&#xA;&#xA;# 第 N 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;mode = &#34;browserless&#34;&#xA;# 你的 OpenAI 邮箱&#xA;email = &#34;xxxx&#34; &#xA;# 你的 OpenAI 密码&#xA;password = &#34;xxx&#34;&#xA;# 后面别的东西&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;使用正向代理&lt;/h3&gt; &#xA;&lt;p&gt;如果你的网络访问 OpenAI 出现一直弹浏览器的问题，或者你的 IP 被封锁了，可以通过配置代理的方式来连接到 OpenAI。支持使用正向代理方式访问 OpenAI，你需要一个 HTTTP/HTTPS 代理服务器：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# 前面别的东西&#xA;[openai]&#xA;# OpenAI 相关设置&#xA;&#xA;# 第 N 个 OpenAI 账号的登录信息&#xA;[[openai.accounts]]&#xA;&#xA;# 请注意，由于现在 OpenAI 封锁严格，你需要一个&#xA;# 尽量使用独立的代理服务器，不要使用和其他人共用 IP 的代理&#xA;# 否则会出现无限弹出浏览器的问题  &#xA;&#xA;proxy=&#34;http://127.0.0.1:1080&#34;&#xA;&#xA;# 后面别的东西&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;对话标题自动重命名&lt;/h3&gt; &#xA;&lt;p&gt;如果你的账号产生了太多的对话，看着不舒服，可以开启配置文件中的标题自动重命名和。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[openai.accounts]]&#xA;# 省略的账号信息&#xA;&#xA;title_pattern=&#34;qq-{session_id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当你按照这个格式进行设置之后，新创建的对话将会以 &lt;code&gt;qq-friend-好友QQ&lt;/code&gt; 或 &lt;code&gt;qq-group-群号&lt;/code&gt; 进行命名。&lt;/p&gt; &#xA;&lt;p&gt;这里的 &lt;code&gt;{session_id}&lt;/code&gt; 是一个变量，它在程序启动之后会根据聊天信息的发送者动态变化。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;如果是一个好友给机器人发送消息，则 &lt;code&gt;{session_id}&lt;/code&gt; 会变成 &lt;code&gt;qq-friend-好友QQ&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果是一个群聊给机器人发送消息，则 &lt;code&gt;{session_id}&lt;/code&gt; 会变成 &lt;code&gt;qq-group-群号&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bing 账号 Cookie 获取方法&lt;/h3&gt; &#xA;&lt;p&gt;你需要通过电脑浏览器来获得 Bing Cookie，如果你有别的手段能获得 cookie 的话也是可以的。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;确认你有 Bing 机器人的聊天测试资格&lt;/li&gt; &#xA; &lt;li&gt;打开 &lt;a href=&#34;https://bing.com&#34;&gt;https://bing.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;按下 F12，打开开发者工具（DevTools）&lt;/li&gt; &#xA; &lt;li&gt;找到 控制台（或 Console），输入 &lt;code&gt;document.cookie&lt;/code&gt; 然后回车&lt;/li&gt; &#xA; &lt;li&gt;复制接下来出现的一段文本，这就是你的 Cookie&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🦊 加载预设&lt;/h2&gt; &#xA;&lt;p&gt;如果你想让机器人自动带上某种聊天风格，可以使用预设功能。&lt;/p&gt; &#xA;&lt;p&gt;我们自带了 &lt;code&gt;猫娘&lt;/code&gt; 和 &lt;code&gt;正常&lt;/code&gt; 两种预设，你可以在 &lt;code&gt;presets&lt;/code&gt; 文件夹下了解预设的写法。&lt;/p&gt; &#xA;&lt;p&gt;使用 &lt;code&gt;加载预设 猫娘&lt;/code&gt; 来加载猫娘预设。&lt;/p&gt; &#xA;&lt;p&gt;下面是一些预设的小视频，你可以看看效果：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MOSS： &lt;a href=&#34;https://www.bilibili.com/video/av309604568&#34;&gt;https://www.bilibili.com/video/av309604568&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;丁真：&lt;a href=&#34;https://www.bilibili.com/video/av267013053&#34;&gt;https://www.bilibili.com/video/av267013053&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;小黑子：&lt;a href=&#34;https://www.bilibili.com/video/av309604568&#34;&gt;https://www.bilibili.com/video/av309604568&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;高启强：&lt;a href=&#34;https://www.bilibili.com/video/av779555493&#34;&gt;https://www.bilibili.com/video/av779555493&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;关于预设系统的详细教程：&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/wiki/%F0%9F%90%B1-%E9%A2%84%E8%AE%BE%E7%B3%BB%E7%BB%9F&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;https://github.com/lss233/awesome-chatgpt-qq-presets/tree/master&#34;&gt;Awesome ChatGPT QQ Presets&lt;/a&gt; 获取由大家分享的预设。&lt;/p&gt; &#xA;&lt;p&gt;你也可以参考 &lt;a href=&#34;https://github.com/L1Xu4n/Awesome-ChatGPT-prompts-ZH_CN&#34;&gt;Awesome-ChatGPT-prompts-ZH_CN&lt;/a&gt; 来调教你的 ChatGPT。&lt;/p&gt; &#xA;&lt;p&gt;还可以参考 &lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;Awesome ChatGPT Prompts&lt;/a&gt; 来解锁更多技能。&lt;/p&gt; &#xA;&lt;h2&gt;📷 文字转图片&lt;/h2&gt; &#xA;&lt;p&gt;向 QQ 群发送消息失败时，自动将消息转为图片发送。&lt;/p&gt; &#xA;&lt;p&gt;字体文件存放于 &lt;code&gt;fonts/&lt;/code&gt; 目录中。&lt;/p&gt; &#xA;&lt;p&gt;默认使用的字体是 &lt;a href=&#34;https://github.com/be5invis/Sarasa-Gothic&#34;&gt;更纱黑体&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;🎈 相似项目&lt;/h2&gt; &#xA;&lt;p&gt;除了我们以外，还有这些很出色的项目：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LlmKira/Openaibot&#34;&gt;LlmKira / Openaibot&lt;/a&gt; - 全平台，多模态理解的 OpenAI 机器人&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RockChinQ/QChatGPT&#34;&gt;RockChinQ / QChatGPT&lt;/a&gt; - 基于 OpenAI 官方 API， 使用 GPT-3 的 QQ 机器人&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fuergaosi233/wechat-chatgpt&#34;&gt;fuergaosi233 / wechat-chatgpt&lt;/a&gt; - 在微信上迅速接入 ChatGPT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🛠 贡献者名单&lt;/h2&gt; &#xA;&lt;p&gt;欢迎提出新的点子、 Pull Request。&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/lss233/chatgpt-mirai-qq-bot/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=lss233/chatgpt-mirai-qq-bot&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💪 支持我们&lt;/h2&gt; &#xA;&lt;p&gt;如果我们这个项目对你有所帮助，请给我们一颗 ⭐️&lt;/p&gt;</summary>
  </entry>
</feed>