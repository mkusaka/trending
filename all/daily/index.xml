<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-19T01:29:00Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Azure-Samples/chat-with-your-data-solution-accelerator</title>
    <updated>2024-05-19T01:29:00Z</updated>
    <id>tag:github.com,2024-05-19:/Azure-Samples/chat-with-your-data-solution-accelerator</id>
    <link href="https://github.com/Azure-Samples/chat-with-your-data-solution-accelerator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Solution Accelerator for the RAG pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&amp;A experiences. This includes most common requirements and best practices.&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;name: Chat with your data - Solution accelerator (Python) description: Chat with your data using OpenAI and AI Search with Python. languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python&lt;/li&gt; &#xA; &lt;li&gt;typescript&lt;/li&gt; &#xA; &lt;li&gt;bicep&lt;/li&gt; &#xA; &lt;li&gt;azdeveloper products:&lt;/li&gt; &#xA; &lt;li&gt;azure-openai&lt;/li&gt; &#xA; &lt;li&gt;azure-cognitive-search&lt;/li&gt; &#xA; &lt;li&gt;azure-app-service&lt;/li&gt; &#xA; &lt;li&gt;azure&lt;/li&gt; &#xA; &lt;li&gt;azure-bot-service&lt;/li&gt; &#xA; &lt;li&gt;document-intelligence&lt;/li&gt; &#xA; &lt;li&gt;azure-functions&lt;/li&gt; &#xA; &lt;li&gt;azure-storage-accounts&lt;/li&gt; &#xA; &lt;li&gt;azure-speech page_type: sample urlFragment: chat-with-your-data-solution-accelerator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- YAML front-matter schema: https://review.learn.microsoft.com/en-us/help/contribute/samples/process/onboarding?branch=main#supported-metadata-fields-for-readmemd --&gt; &#xA;&lt;h1&gt;Chat with your data - Solution accelerator&lt;/h1&gt; &#xA;&lt;h5&gt;Table of Contents&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#user-story&#34;&gt;User story&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#about-this-repo&#34;&gt;About this repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#when-should-you-use-this-repo&#34;&gt;When should you use this repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#key-features&#34;&gt;Key features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#target-end-users&#34;&gt;Target end users&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#industry-scenario&#34;&gt;Industry scenario&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#deploy&#34;&gt;Deploy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#pre-requisites&#34;&gt;Pre-requisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#products-used&#34;&gt;Products used&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#required-licenses&#34;&gt;Required licenses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#pricing-considerations&#34;&gt;Pricing Considerations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#deploy-instructions&#34;&gt;Deploy instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#testing-the-deployment&#34;&gt;Testing the deployment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#supporting-documentation&#34;&gt;Supporting documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/best_practices.md&#34;&gt;Best practices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/SUPPORT.md&#34;&gt;Getting Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#resource-links&#34;&gt;Resource links&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/customer_truth.md&#34;&gt;Customer truth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/#disclaimers&#34;&gt;Disclaimers&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/images/userStory.png&#34; alt=&#34;User Story&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User story&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the &lt;em&gt;Chat with your data&lt;/em&gt; Solution accelerator repository! The &lt;em&gt;Chat with your data&lt;/em&gt; Solution accelerator is a powerful tool that combines the capabilities of Azure AI Search and Large Language Models (LLMs) to create a conversational search experience. This solution accelerator uses an Azure OpenAI GPT model and an Azure AI Search index generated from your data, which is integrated into a web application to provide a natural language interface, including &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/speech_to_text.md&#34;&gt;speech-to-text&lt;/a&gt; functionality, for search queries. Users can drag and drop files, point to storage, and take care of technical setup to transform documents. Everything can be deployed in your own subscription to accelerate your use of this technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/images/cwyd-solution-architecture.png&#34; alt=&#34;Solution Architecture - Chat with your data&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About this repo&lt;/h3&gt; &#xA;&lt;p&gt;This repository provides an end-to-end solution for users who want to query their data with natural language. It includes a well designed ingestion mechanism for multiple file types, an easy deployment, and a support team for maintenance. The accelerator demonstrates both Push or Pull Ingestion; the choice of orchestration (Semantic Kernel or LangChain) and should be the minimum components needed to implement a RAG pattern. It is not intended to be put into Production as-is without experimentation or evaluation of your data. It provides the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with an Azure OpenAI model using your own data&lt;/li&gt; &#xA; &lt;li&gt;Upload and process your documents&lt;/li&gt; &#xA; &lt;li&gt;Index public web pages&lt;/li&gt; &#xA; &lt;li&gt;Easy prompt configuration&lt;/li&gt; &#xA; &lt;li&gt;Multiple chunking strategies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;When should you use this repo?&lt;/h3&gt; &#xA;&lt;p&gt;If you need to customize your scenario beyond what &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/concepts/use-your-data&#34;&gt;Azure OpenAI on your data&lt;/a&gt; offers out-of-the-box, use this repository. By default, this repo comes with one specific set of RAG configurations including but not limited to: chunk size, overlap, retrieval/search type and system prompt. It is important that you evaluate the retrieval/search and the generation of the answers for your data and tune these configurations accordingly before you use this repo in production. For a starting point to understand and perform RAG evaluations, we encourage you to look into the &lt;a href=&#34;https://github.com/microsoft/rag-experiment-accelerator&#34;&gt;RAG Experiment Accelerator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The accelerator presented here provides several options, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The ability to ground a model using both data and public web pages&lt;/li&gt; &#xA; &lt;li&gt;A backend that mimics the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/use-your-data&#34;&gt;On Your Data&lt;/a&gt; flow, with the ability to switch to a custom backend&lt;/li&gt; &#xA; &lt;li&gt;Advanced prompt engineering capabilities&lt;/li&gt; &#xA; &lt;li&gt;An admin site for ingesting/inspecting/configuring your dataset on the fly&lt;/li&gt; &#xA; &lt;li&gt;Push or Pull model for data ingestion: See &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/integrated_vectorization.md&#34;&gt;integrated vectorization&lt;/a&gt; documentation for more details&lt;/li&gt; &#xA; &lt;li&gt;Running a Retrieval Augmented Generation (RAG) solution locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*Have you seen &lt;a href=&#34;https://github.com/Azure-Samples/azure-search-openai-demo&#34;&gt;ChatGPT + Enterprise data with Azure OpenAI and AI Search demo&lt;/a&gt;? If you would like to experiment: Play with prompts, understanding RAG pattern different implementation approaches, see how different features interact with the RAG pattern and choose the best options for your RAG deployments, take a look at that repo.&lt;/p&gt; &#xA;&lt;p&gt;Here is a comparison table with a few features offered by Azure, an available GitHub demo sample and this repo, that can provide guidance when you need to decide which one to use:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Feature or Sample?&lt;/th&gt; &#xA;   &lt;th&gt;What is it?&lt;/th&gt; &#xA;   &lt;th&gt;When to use?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aka.ms/ChatWithYourDataSolutionAccelerator&#34;&gt;&#34;Chat with your data&#34; Solution Accelerator&lt;/a&gt; - (This repo)&lt;/td&gt; &#xA;   &lt;td&gt;Azure sample&lt;/td&gt; &#xA;   &lt;td&gt;End-to-end baseline RAG pattern sample that uses Azure AI Search as a retriever.&lt;/td&gt; &#xA;   &lt;td&gt;This sample should be used by Developers when the RAG pattern implementations provided by Azure are not able to satisfy business requirements. This sample provides a means to customize the solution. Developers must add their own code to meet requirements, and adapt with best practices according to individual company policies.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/concepts/use-your-data&#34;&gt;Azure OpenAI on your data&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Azure feature&lt;/td&gt; &#xA;   &lt;td&gt;Azure OpenAI Service offers out-of-the-box, end-to-end RAG implementation that uses a REST API or the web-based interface in the Azure AI Studio to create a solution that connects to your data to enable an enhanced chat experience with Azure OpenAI ChatGPT models and Azure AI Search.&lt;/td&gt; &#xA;   &lt;td&gt;This should be the first option considered for developers that need an end-to-end solution for Azure OpenAI Service with an Azure AI Search retriever. Simply select supported data sources, that ChatGPT model in Azure OpenAI Service , and any other Azure resources needed to configure your enterprise application needs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/machine-learning/concept-retrieval-augmented-generation&#34;&gt;Azure Machine Learning prompt flow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Azure feature&lt;/td&gt; &#xA;   &lt;td&gt;RAG in Azure Machine Learning is enabled by integration with Azure OpenAI Service for large language models and vectorization. It includes support for Faiss and Azure AI Search as vector stores, as well as support for open-source offerings, tools, and frameworks such as LangChain for data chunking. Azure Machine Learning prompt flow offers the ability to test data generation, automate prompt creation, visualize prompt evaluation metrics, and integrate RAG workflows into MLOps using pipelines.&lt;/td&gt; &#xA;   &lt;td&gt;When Developers need more control over processes involved in the development cycle of LLM-based AI applications, they should use Azure Machine Learning prompt flow to create executable flows and evaluate performance through large-scale testing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Azure-Samples/azure-search-openai-demo&#34;&gt;ChatGPT + Enterprise data with Azure OpenAI and AI Search demo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Azure sample&lt;/td&gt; &#xA;   &lt;td&gt;RAG pattern demo that uses Azure AI Search as a retriever.&lt;/td&gt; &#xA;   &lt;td&gt;Developers who would like to use or present an end-to-end demonstration of the RAG pattern should use this sample. This includes the ability to deploy and test different retrieval modes, and prompts to support business use cases.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/rag-experiment-accelerator&#34;&gt;RAG Experiment Accelerator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tool&lt;/td&gt; &#xA;   &lt;td&gt;The RAG Experiment Accelerator is a versatile tool that helps you conduct experiments and evaluations using Azure AI Search and RAG pattern.&lt;/td&gt; &#xA;   &lt;td&gt;RAG Experiment Accelerator is to make it easier and faster to run experiments and evaluations of search queries and quality of response from OpenAI. This tool is useful for researchers, data scientists, and developers who want to, Test the performance of different Search and OpenAI related hyperparameters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Key features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Private LLM access on your data&lt;/strong&gt;: Get all the benefits of ChatGPT on your private, unstructured data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single application access to your full data set&lt;/strong&gt;: Minimize endpoints required to access internal company knowledgebases. Reuse the same backend with the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/teams_extension.md&#34;&gt;Microsoft Teams Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Natural language interaction with your unstructured data&lt;/strong&gt;: Use natural language to quickly find the answers you need and ask follow-up queries to get the supplemental details, including &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/speech_to_text.md&#34;&gt;Speech-to-text&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy access to source documentation when querying&lt;/strong&gt;: Review referenced documents in the same chat window for additional context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data upload&lt;/strong&gt;: Batch upload documents of &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/supported_file_types.md&#34;&gt;various file types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accessible orchestration&lt;/strong&gt;: Prompt and document configuration (prompt engineering, document processing, and data retrieval)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The current model allows users to ask questions about unstructured data, such as PDF, text, and docx files. See the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/supported_file_types.md&#34;&gt;supported file types&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Target end users&lt;/h3&gt; &#xA;&lt;p&gt;Company personnel (employees, executives) looking to research against internal unstructured company data would leverage this accelerator using natural language to find what they need quickly.&lt;/p&gt; &#xA;&lt;p&gt;This accelerator also works across industry and roles and would be suitable for any employee who would like to get quick answers with a ChatGPT experience against their internal unstructured company data.&lt;/p&gt; &#xA;&lt;p&gt;Tech administrators can use this accelerator to give their colleagues easy access to internal unstructured company data. Admins can customize the system configurator to tailor responses for the intended audience.&lt;/p&gt; &#xA;&lt;h3&gt;Industry scenario&lt;/h3&gt; &#xA;&lt;p&gt;The sample data illustrates how this accelerator could be used in the financial services industry (FSI).&lt;/p&gt; &#xA;&lt;p&gt;In this scenario, a financial advisor is preparing for a meeting with a potential client who has expressed interest in Woodgrove Investments’ Emerging Markets Funds. The advisor prepares for the meeting by refreshing their understanding of the emerging markets fund&#39;s overall goals and the associated risks.&lt;/p&gt; &#xA;&lt;p&gt;Now that the financial advisor is more informed about Woodgrove’s Emerging Markets Funds, they&#39;re better equipped to respond to questions about this fund from their client.&lt;/p&gt; &#xA;&lt;p&gt;Note: Some of the sample data included with this accelerator was generated using AI and is for illustrative purposes only.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/images/oneClickDeploy.png&#34; alt=&#34;One-click Deploy&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-requisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure subscription - &lt;a href=&#34;https://azure.microsoft.com/free/&#34;&gt;Create one for free&lt;/a&gt; with owner access.&lt;/li&gt; &#xA; &lt;li&gt;Approval to use Azure OpenAI services with your Azure subcription. To apply for approval, see &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/overview#how-do-i-get-access-to-azure-openai&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant#enable-custom-teams-apps-and-turn-on-custom-app-uploading&#34;&gt;Enable custom Teams apps and turn on custom app uploading&lt;/a&gt; (optional: Teams extension only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Products used&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure App Service&lt;/li&gt; &#xA; &lt;li&gt;Azure Application Insights&lt;/li&gt; &#xA; &lt;li&gt;Azure Bot&lt;/li&gt; &#xA; &lt;li&gt;Azure OpenAI&lt;/li&gt; &#xA; &lt;li&gt;Azure Document Intelligence&lt;/li&gt; &#xA; &lt;li&gt;Azure Function App&lt;/li&gt; &#xA; &lt;li&gt;Azure Search Service&lt;/li&gt; &#xA; &lt;li&gt;Azure Storage Account&lt;/li&gt; &#xA; &lt;li&gt;Azure Speech Service&lt;/li&gt; &#xA; &lt;li&gt;Teams (optional: Teams extension only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Required licenses&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft 365 (optional: Teams extension only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pricing Considerations&lt;/h3&gt; &#xA;&lt;p&gt;This solution accelerator deploys multiple resources. Evaluate the cost of each component prior to deployment.&lt;/p&gt; &#xA;&lt;p&gt;The following are links to the pricing details for some of the resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/pricing/details/cognitive-services/openai-service/&#34;&gt;Azure OpenAI service pricing&lt;/a&gt;. GPT and embedding models are charged separately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/pricing/details/search/&#34;&gt;Azure AI Search pricing&lt;/a&gt;. AI Search core service and semantic ranker are charged separately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/pricing/details/storage/blobs/&#34;&gt;Azure Blob Storage pricing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/pricing/details/functions/&#34;&gt;Azure Functions pricing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/pricing/details/ai-document-intelligence/&#34;&gt;Azure AI Document Intelligence pricing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/pricing/details/app-service/windows/&#34;&gt;Azure Web App Pricing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploy instructions&lt;/h3&gt; &#xA;&lt;p&gt;There are two choices; the &#34;Deploy to Azure&#34; offers a one click deployment where you don&#39;t have to clone the code, alternatively if you would like a developer experience, follow the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/LOCAL_DEPLOYMENT.md&#34;&gt;Local deployment instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The demo, which uses containers pre-built from the main branch is available by clicking this button:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure-Samples%2Fchat-with-your-data-solution-accelerator%2Fmain%2Finfra%2Fmain.json&#34;&gt;&lt;img src=&#34;https://aka.ms/deploytoazurebutton&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The default configuration deploys an OpenAI Model &#34;gpt-35-turbo&#34; with version 0613. However, not all locations support this version. If you&#39;re deploying to a location that doesn&#39;t support version 0613, you&#39;ll need to switch to a lower version. To find out which versions are supported in different regions, visit the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-35-turbo-model-availability&#34;&gt;GPT-35 Turbo Model Availability&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;Testing the deployment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the admin site, where you can upload documents. It will be located at:&lt;/p&gt; &lt;p&gt;&lt;code&gt;https://web-{RESOURCE_TOKEN}-admin.azurewebsites.net/&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Where &lt;code&gt;{RESOURCE_TOKEN}&lt;/code&gt; is uniquely generated during deployment. This is a combination of your subscription and the name of the resource group. Then select &lt;strong&gt;Ingest Data&lt;/strong&gt; and add your data. You can find sample data in the &lt;code&gt;/data&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/images/admin-site.png&#34; alt=&#34;A screenshot of the admin site.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the web app to start chatting on top of your data. The web app can be found at:&lt;/p&gt; &lt;p&gt;&lt;code&gt;https://web-{RESOURCE_TOKEN}.azurewebsites.net/&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/images/web-unstructureddata.png&#34; alt=&#34;A screenshot of the chat app.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/docs/images/supportingDocuments.png&#34; alt=&#34;Supporting documentation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporting documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Resource links&lt;/h3&gt; &#xA;&lt;p&gt;This solution accelerator deploys the following resources. It&#39;s critical to comprehend the functionality of each. Below are the links to their respective documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview?tabs=net&#34;&gt;Application Insights overview - Azure Monitor | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/use-your-data&#34;&gt;Azure OpenAI Service - Documentation, quickstarts, API reference - Azure AI services | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/use-your-data&#34;&gt;Using your data with Azure OpenAI Service - Azure OpenAI | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/content-safety/&#34;&gt;Content Safety documentation - Quickstarts, Tutorials, API Reference - Azure AI services | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/?view=doc-intel-3.1.0&#34;&gt;Document Intelligence documentation - Quickstarts, Tutorials, API Reference - Azure AI services | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/&#34;&gt;Azure Functions documentation | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/search/&#34;&gt;Azure Cognitive Search documentation | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/speech-service/index-speech-to-text&#34;&gt;Speech to text documentation - Tutorials, API Reference - Azure AI services - Azure AI services | Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/bots/what-are-bots&#34;&gt;Bots in Microsoft Teams - Teams | Microsoft Learn&lt;/a&gt; (Optional: Teams extension only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Licensing&lt;/h3&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The data set under the /data folder is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/chat-with-your-data-solution-accelerator/main/CDLA-Permissive-2.md&#34;&gt;CDLA-Permissive-2 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;This Software requires the use of third-party components which are governed by separate proprietary or open-source licenses as identified below, and you must comply with the terms of each applicable license in order to use the Software. You acknowledge and agree that this license does not grant you a license or other right to use any such third-party proprietary or open-source components.&lt;/p&gt; &#xA;&lt;p&gt;To the extent that the Software includes components or code used in or derived from Microsoft products or services, including without limitation Microsoft Azure Services (collectively, “Microsoft Products and Services”), you must also comply with the Product Terms applicable to such Microsoft Products and Services. You acknowledge and agree that the license governing the Software does not grant you a license or other right to use Microsoft Products and Services. Nothing in the license or this ReadMe file will serve to supersede, amend, terminate or modify any terms in the Product Terms for any Microsoft Products and Services.&lt;/p&gt; &#xA;&lt;p&gt;You must also comply with all domestic and international export laws and regulations that apply to the Software, which include restrictions on destinations, end users, and end use. For further information on export restrictions, visit &lt;a href=&#34;https://aka.ms/exporting&#34;&gt;https://aka.ms/exporting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You acknowledge that the Software and Microsoft Products and Services (1) are not designed, intended or made available as a medical device(s), and (2) are not designed or intended to be a substitute for professional medical advice, diagnosis, treatment, or judgment and should not be used to replace or as a substitute for professional medical advice, diagnosis, treatment, or judgment. Customer is solely responsible for displaying and/or obtaining appropriate consents, warnings, disclaimers, and acknowledgements to end users of Customer’s implementation of the Online Services.&lt;/p&gt; &#xA;&lt;p&gt;You acknowledge the Software is not subject to SOC 1 and SOC 2 compliance audits. No Microsoft technology, nor any of its component technologies, including the Software, is intended or made available as a substitute for the professional advice, opinion, or judgement of a certified financial services professional. Do not use the Software to replace, substitute, or provide professional financial advice or judgment.&lt;/p&gt; &#xA;&lt;p&gt;BY ACCESSING OR USING THE SOFTWARE, YOU ACKNOWLEDGE THAT THE SOFTWARE IS NOT DESIGNED OR INTENDED TO SUPPORT ANY USE IN WHICH A SERVICE INTERRUPTION, DEFECT, ERROR, OR OTHER FAILURE OF THE SOFTWARE COULD RESULT IN THE DEATH OR SERIOUS BODILY INJURY OF ANY PERSON OR IN PHYSICAL OR ENVIRONMENTAL DAMAGE (COLLECTIVELY, “HIGH-RISK USE”), AND THAT YOU WILL ENSURE THAT, IN THE EVENT OF ANY INTERRUPTION, DEFECT, ERROR, OR OTHER FAILURE OF THE SOFTWARE, THE SAFETY OF PEOPLE, PROPERTY, AND THE ENVIRONMENT ARE NOT REDUCED BELOW A LEVEL THAT IS REASONABLY, APPROPRIATE, AND LEGAL, WHETHER IN GENERAL OR IN A SPECIFIC INDUSTRY. BY ACCESSING THE SOFTWARE, YOU FURTHER ACKNOWLEDGE THAT YOUR HIGH-RISK USE OF THE SOFTWARE IS AT YOUR OWN RISK.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>felangel/data_class</title>
    <updated>2024-05-19T01:29:00Z</updated>
    <id>tag:github.com,2024-05-19:/felangel/data_class</id>
    <link href="https://github.com/felangel/data_class" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental support for data classes in Dart using macros.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;data_class&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/felangel/data_class/actions/workflows/main.yaml&#34;&gt;&lt;img src=&#34;https://github.com/felangel/data_class/actions/workflows/main.yaml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/data_class_macro&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/data_class_macro.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-purple.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🚧 Experimental&lt;/strong&gt; support for data classes in Dart using &lt;a href=&#34;https://dart.dev/language/macros&#34;&gt;macros&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;p&gt;🪨 &lt;code&gt;const&lt;/code&gt; constructors with required, named parameters&lt;/p&gt; &#xA;&lt;p&gt;🖨️ &lt;code&gt;copyWith&lt;/code&gt; with optional, nullable, named parameters&lt;/p&gt; &#xA;&lt;p&gt;✨ &lt;code&gt;toString&lt;/code&gt; for an improved string representation&lt;/p&gt; &#xA;&lt;p&gt;☯️ &lt;code&gt;operator==&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; for value equality&lt;/p&gt; &#xA;&lt;h2&gt;🧑‍💻 Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:data_class_macro/data_class_macro.dart&#39;;&#xA;&#xA;@Data()&#xA;class Person {&#xA;  final String name;&#xA;}&#xA;&#xA;void main() {&#xA;  // 🪨 Create a const instance with required, name parameters.&#xA;  const dash = Person(name: &#39;Dash&#39;);&#xA;&#xA;  // 🖨️ Create copies of your object.&#xA;  final sparky = dash.copyWith(name: () =&amp;gt; &#39;Sparky&#39;);&#xA;&#xA;  // ✨ Human-readable string representation.&#xA;  print(dash); // Person(name: Dash)&#xA;  print(sparky); // Person(name: Sparky)&#xA;&#xA;  // ☯️ Value equality comparisons.&#xA;  print(dash == dash.copyWith()); // true&#xA;  print(dash == sparky); // false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Switch to the Flutter &lt;code&gt;master&lt;/code&gt; channel &lt;code&gt;flutter channel master&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;package:data_class_macro&lt;/code&gt; to your &lt;code&gt;pubspec.yaml&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  data_class_macro: ^0.0.0-dev.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable experimental macros in &lt;code&gt;analysis_options.yaml&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;analyzer:&#xA;  enable-experiment:&#xA;    - macros&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;@Data&lt;/code&gt; annotation (see above example).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run it&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dart --enable-experiment=macros run main.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;*Requires Dart SDK &amp;gt;= 3.5.0-152.0.dev&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeleniumHQ/docker-selenium</title>
    <updated>2024-05-19T01:29:00Z</updated>
    <id>tag:github.com,2024-05-19:/SeleniumHQ/docker-selenium</id>
    <link href="https://github.com/SeleniumHQ/docker-selenium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides a simple way to run Selenium Grid with Chrome, Firefox, and Edge using Docker, making it easier to perform browser automation&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/build-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/build-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/deploy.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/deploy.yml/badge.svg?sanitize=true&#34; alt=&#34;Deploys&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/helm-chart-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/helm-chart-release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release Charts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/nightly.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/nightly.yml/badge.svg?sanitize=true&#34; alt=&#34;Nightly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/update-dev-beta-browser-images.yml&#34;&gt;&lt;img src=&#34;https://github.com/SeleniumHQ/docker-selenium/actions/workflows/update-dev-beta-browser-images.yml/badge.svg?sanitize=true&#34; alt=&#34;Update Dev/Beta Browser Images&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Docker images for the Selenium Grid Server&lt;/h1&gt; &#xA;&lt;p&gt;The project is made possible by volunteer contributors who have put in thousands of hours of their own time, and made the source code freely available under the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/LICENSE.md&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These Docker images come with a handful of tags to simplify its usage, have a look at them in one of our &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/releases/tag/4.21.0-20240517&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get notifications of new releases, add yourself as a &#34;Releases only&#34; watcher.&lt;/p&gt; &#xA;&lt;p&gt;These images are published to the Docker Hub registry at &lt;a href=&#34;https://hub.docker.com/u/selenium&#34;&gt;Selenium Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Do you need help to use these Docker images? Talk to us at &lt;a href=&#34;https://www.selenium.dev/support/&#34;&gt;https://www.selenium.dev/support/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#quick-start&#34;&gt;Quick start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#try-them-out-in-a-ready-to-use-gitpod-environment&#34;&gt;Try them out in a ready-to-use GitPod environment!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#experimental-mult-arch-aarch64armhfamd64-images&#34;&gt;Experimental Mult-Arch aarch64/armhf/amd64 Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#nightly-images&#34;&gt;Nightly Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#dev-and-beta-channel-browser-images&#34;&gt;Dev and Beta Channel Browser Images&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#dev-and-beta-standalone-mode&#34;&gt;Dev and Beta Standalone Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#dev-and-beta-on-the-grid&#34;&gt;Dev and Beta on the Grid&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-modes&#34;&gt;Execution modes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#standalone&#34;&gt;Standalone&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#hub-and-nodes&#34;&gt;Hub and Nodes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#fully-distributed-mode---router-queue-distributor-eventbus-sessionmap-and-nodes&#34;&gt;Fully distributed mode - Router, Queue, Distributor, EventBus, SessionMap and Nodes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#video-recording&#34;&gt;Video recording&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#video-recording-with-dynamic-file-name-based-on-metadata-in-tests&#34;&gt;Video recording with dynamic file name based on metadata in tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#video-recording-and-uploading&#34;&gt;Video recording and uploading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#dynamic-grid&#34;&gt;Dynamic Grid&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#configuration-example&#34;&gt;Configuration example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-with-hub--node-roles&#34;&gt;Execution with Hub &amp;amp; Node roles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-with-standalone-roles&#34;&gt;Execution with Standalone roles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#using-dynamic-grid-in-different-machinesvms&#34;&gt;Using Dynamic Grid in different machines/VMs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#execution-with-docker-compose&#34;&gt;Execution with Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#configuring-the-child-containers&#34;&gt;Configuring the child containers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#video-recording-screen-resolution-and-time-zones-in-a-dynamic-grid&#34;&gt;Video recording, screen resolution, and time zones in a Dynamic Grid&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#deploying-to-kubernetes&#34;&gt;Deploying to Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#configuring-the-containers&#34;&gt;Configuring the containers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#se_opts-selenium-configuration-options&#34;&gt;SE_OPTS Selenium Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#se_java_opts-java-environment-options&#34;&gt;SE_JAVA_OPTS Java Environment Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#node-configuration-options&#34;&gt;Node configuration options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#node-configuration-relay-commands&#34;&gt;Node configuration relay commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#setting-sub-path&#34;&gt;Setting Sub Path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#setting-screen-resolution&#34;&gt;Setting Screen Resolution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#grid-url-and-session-timeout&#34;&gt;Grid Url and Session Timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#session-request-timeout&#34;&gt;Session request timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#increasing-session-concurrency-per-container&#34;&gt;Increasing session concurrency per container&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#running-in-headless-mode&#34;&gt;Running in Headless mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#stopping-the-nodestandalone-after-n-sessions-have-been-executed&#34;&gt;Stopping the Node/Standalone after N sessions have been executed&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#automatic-browser-leftovers-cleanup&#34;&gt;Automatic browser leftovers cleanup&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#building-the-images&#34;&gt;Building the images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#build-the-images-with-specific-versions&#34;&gt;Build the images with specific versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#upgrade-browser-version-in-the-images&#34;&gt;Upgrade browser version in the images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#waiting-for-the-grid-to-be-ready&#34;&gt;Waiting for the Grid to be ready&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#adding-a-healthcheck-to-the-grid&#34;&gt;Adding a HEALTHCHECK to the Grid&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#using-a-bash-script-to-wait-for-the-grid&#34;&gt;Using a bash script to wait for the Grid&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#install-certificates-for-chromium-based-browsers&#34;&gt;Install certificates for Chromium-based browsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#alternative-method-add-certificates-to-existing-selenium-based-images-for-browsers&#34;&gt;Alternative method: Add certificates to existing Selenium based images for browsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#debugging&#34;&gt;Debugging&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#using-a-vnc-client&#34;&gt;Using a VNC client&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#using-your-browser-no-vnc-client-is-needed&#34;&gt;Using your browser (no VNC client is needed)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#disabling-vnc&#34;&gt;Disabling VNC&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#tracing-in-grid&#34;&gt;Tracing in Grid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#--shm-size2g&#34;&gt;&lt;code&gt;--shm-size=&#34;2g&#34;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#headless&#34;&gt;Headless&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#mounting-volumes-to-retrieve-downloaded-files&#34;&gt;Mounting volumes to retrieve downloaded files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#mounting-volumes-to-retrieve-video-files&#34;&gt;Mounting volumes to retrieve video files&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#stargazers-over-time&#34;&gt;Stargazers over time&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a Docker container with Firefox&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 -p 7900:7900 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Point your WebDriver tests to &lt;a href=&#34;http://localhost:4444&#34;&gt;http://localhost:4444&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) To see what is happening inside the container, head to &lt;a href=&#34;http://localhost:7900/?autoconnect=1&amp;amp;resize=scale&amp;amp;password=secret&#34;&gt;http://localhost:7900/?autoconnect=1&amp;amp;resize=scale&amp;amp;password=secret&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more details about visualising the container activity, check the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/#debugging&#34;&gt;Debugging&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;☝&lt;/span&gt; When executing &lt;code&gt;docker run&lt;/code&gt; for an image that contains a browser please use the flag &lt;code&gt;--shm-size=2g&lt;/code&gt; to use the host&#39;s shared memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;☝&lt;/span&gt; Always use a Docker image with a full tag to pin a specific browser and Grid version. See &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/wiki/Tagging-Convention&#34;&gt;Tagging Conventions&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Try them out in a ready-to-use GitPod environment!&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/SeleniumHQ/docker-selenium&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Experimental Mult-Arch aarch64/armhf/amd64 Images&lt;/h2&gt; &#xA;&lt;p&gt;For experimental docker container images, which run on platforms such as the Mac M1 or Raspberry Pi, see the community-driven repository hosted at &lt;a href=&#34;https://github.com/seleniumhq-community/docker-seleniarm&#34;&gt;seleniumhq-community/docker-seleniarm&lt;/a&gt;. These images are built for three separate architectures: linux/arm64 (aarch64), linux/arm/v7 (armhf), and linux/amd64.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, these experimental container images are published on &lt;a href=&#34;https://hub.docker.com/u/seleniarm&#34;&gt;Seleniarm Docker Hub&lt;/a&gt; registry.&lt;/p&gt; &#xA;&lt;p&gt;See issue &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/1076&#34;&gt;#1076&lt;/a&gt; for more information on these images.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working on an Intel or AMD64 architecture, we recommend using the container images in &lt;em&gt;this&lt;/em&gt; repository (SeleniumHQ/docker-selenium) instead of the experimental ones.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Nightly Images&lt;/h2&gt; &#xA;&lt;p&gt;Nightly images are built on top of the &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/releases/tag/nightly&#34;&gt;Nightly&lt;/a&gt; build on the upstream project &lt;a href=&#34;https://github.com/SeleniumHQ/selenium&#34;&gt;Selenium&lt;/a&gt; with the latest changes on main branch in this repository. The image tag is &lt;code&gt;nightly&lt;/code&gt;. This is not recommended to use images in production. It is only for testing purpose.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dev and Beta Channel Browser Images&lt;/h2&gt; &#xA;&lt;p&gt;To run tests or otherwise work with pre-release browsers, Google, Mozilla, and Microsoft maintain a Dev and Beta release channel for those who need to see what&#39;s soon to be released to the general population.&lt;/p&gt; &#xA;&lt;h3&gt;Dev and Beta Standalone Mode&lt;/h3&gt; &#xA;&lt;p&gt;Here are the instructions to run them in Standalone mode:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chrome Beta:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-chrome:beta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chrome Dev:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-chrome:dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Firefox Beta:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-firefox:beta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Firefox Dev:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-firefox:dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Edge Beta:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-edge:beta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Edge Dev:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-edge:dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dev and Beta on the Grid&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;docker-compose-v3-beta-channel.yml:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To execute this docker compose yml file use `docker compose -f docker-compose-v3-beta-channel.yml up`&#xA;# Add the `-d` flag at the end for detached execution&#xA;# To stop the execution, hit Ctrl+C, and then `docker compose -f docker-compose-v3-beta-channel.yml down`&#xA;version: &#34;3&#34;&#xA;services:&#xA;  chrome:&#xA;    image: selenium/node-chrome:beta&#xA;    shm_size: 2gb&#xA;    depends_on:&#xA;      - selenium-hub&#xA;    environment:&#xA;      - SE_EVENT_BUS_HOST=selenium-hub&#xA;      - SE_EVENT_BUS_PUBLISH_PORT=4442&#xA;      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443&#xA;&#xA;  edge:&#xA;    image: selenium/node-edge:beta&#xA;    shm_size: 2gb&#xA;    depends_on:&#xA;      - selenium-hub&#xA;    environment:&#xA;      - SE_EVENT_BUS_HOST=selenium-hub&#xA;      - SE_EVENT_BUS_PUBLISH_PORT=4442&#xA;      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443&#xA;&#xA;  firefox:&#xA;    image: selenium/node-firefox:beta&#xA;    shm_size: 2gb&#xA;    depends_on:&#xA;      - selenium-hub&#xA;    environment:&#xA;      - SE_EVENT_BUS_HOST=selenium-hub&#xA;      - SE_EVENT_BUS_PUBLISH_PORT=4442&#xA;      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443&#xA;&#xA;  selenium-hub:&#xA;    image: selenium/hub:latest&#xA;    container_name: selenium-hub&#xA;    ports:&#xA;      - &#34;4442:4442&#34;&#xA;      - &#34;4443:4443&#34;&#xA;      - &#34;4444:4444&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;docker-compose-v3-dev-channel.yml:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To execute this docker compose yml file use `docker compose -f docker-compose-v3-dev-channel.yml up`&#xA;# Add the `-d` flag at the end for detached execution&#xA;# To stop the execution, hit Ctrl+C, and then `docker compose -f docker-compose-v3-dev-channel.yml down`&#xA;version: &#34;3&#34;&#xA;services:&#xA;  chrome:&#xA;    image: selenium/node-chrome:dev&#xA;    shm_size: 2gb&#xA;    depends_on:&#xA;      - selenium-hub&#xA;    environment:&#xA;      - SE_EVENT_BUS_HOST=selenium-hub&#xA;      - SE_EVENT_BUS_PUBLISH_PORT=4442&#xA;      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443&#xA;&#xA;  edge:&#xA;    image: selenium/node-edge:dev&#xA;    shm_size: 2gb&#xA;    depends_on:&#xA;      - selenium-hub&#xA;    environment:&#xA;      - SE_EVENT_BUS_HOST=selenium-hub&#xA;      - SE_EVENT_BUS_PUBLISH_PORT=4442&#xA;      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443&#xA;&#xA;  firefox:&#xA;    image: selenium/node-firefox:dev&#xA;    shm_size: 2gb&#xA;    depends_on:&#xA;      - selenium-hub&#xA;    environment:&#xA;      - SE_EVENT_BUS_HOST=selenium-hub&#xA;      - SE_EVENT_BUS_PUBLISH_PORT=4442&#xA;      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443&#xA;&#xA;  selenium-hub:&#xA;    image: selenium/hub:latest&#xA;    container_name: selenium-hub&#xA;    ports:&#xA;      - &#34;4442:4442&#34;&#xA;      - &#34;4443:4443&#34;&#xA;      - &#34;4444:4444&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on the Dev and Beta channel container images, see the blog post on &lt;a href=&#34;https://www.selenium.dev/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium/&#34;&gt;Dev and Beta Channel Browsers via Docker Selenium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Execution modes&lt;/h2&gt; &#xA;&lt;h3&gt;Standalone&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34;&gt; Firefox&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34;&gt; Chrome&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_24x24.png&#34; alt=&#34;Edge&#34;&gt; Edge&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; selenium/standalone-edge:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Only one Standalone container can run on port&lt;/em&gt; &lt;code&gt;4444&lt;/code&gt; &lt;em&gt;at the same time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Hub and Nodes&lt;/h3&gt; &#xA;&lt;p&gt;There are different ways to run the images and create a Grid with a Hub and Nodes, check the following options.&lt;/p&gt; &#xA;&lt;h4&gt;Docker networking&lt;/h4&gt; &#xA;&lt;p&gt;The Hub and Nodes will be created in the same network and they will recognize each other by their container name. A Docker &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_create/&#34;&gt;network&lt;/a&gt; needs to be created as a first step.&lt;/p&gt; &#xA;&lt;h5&gt;macOS/Linux&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-edge:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Windows PowerShell&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    selenium/node-edge:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    selenium/node-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are done using the Grid, and the containers have exited, the network can be removed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Removes the grid network&#xA;$ docker network rm grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using different machines/VMs&lt;/h4&gt; &#xA;&lt;p&gt;The Hub and Nodes will be created on different machines/VMs, they need to know each other&#39;s IPs to communicate properly. If more than one node will be running on the same Machine/VM, they must be configured to expose different ports.&lt;/p&gt; &#xA;&lt;h5&gt;Hub - Machine/VM 1&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Chrome - Machine/VM 2&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-2&amp;gt; \&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-2&amp;gt; `&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Edge - Machine/VM 3&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-3&amp;gt; \&#xA;    selenium/node-edge:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-3&amp;gt; `&#xA;    selenium/node-edge:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Firefox - Machine/VM 4&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; \&#xA;    selenium/node-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; `&#xA;    selenium/node-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Node Chrome - Machine/VM 4&lt;/h5&gt; &#xA;&lt;h6&gt;macOS/Linux&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5556:5556 \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; \&#xA;    -e SE_NODE_PORT=5556 \&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Windows PowerShell&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker run -d -p 5556:5556 `&#xA;    --shm-size=&#34;2g&#34; `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -e SE_NODE_HOST=&amp;lt;ip-from-machine-4&amp;gt; `&#xA;    -e SE_NODE_PORT=5556 `&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; is the simplest way to start a Grid. Use the linked resources below, save them locally and check the execution instructions on top of each file.&lt;/p&gt; &#xA;&lt;h5&gt;Version 2&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v2.yml&#34;&gt;&lt;code&gt;docker-compose-v2.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Version 3&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3.yml&#34;&gt;&lt;code&gt;docker-compose-v3.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To stop the Grid and cleanup the created containers, run &lt;code&gt;docker compose down&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Version 3 with Swarm support&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-swarm.yml&#34;&gt;&lt;code&gt;docker-compose-v3-swarm.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Fully distributed mode - Router, Queue, Distributor, EventBus, SessionMap and Nodes&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to start a Selenium Grid with all its components apart. For simplicity, only an example with docker compose will be provided. Save the file locally, and check the execution instructions on top of it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-full-grid.yml&#34;&gt;&lt;code&gt;docker-compose-v3-full-grid.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Distributor configuration&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment variable&lt;/th&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SE_REJECT_UNSUPPORTED_CAPS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--reject-unsupported-caps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow the Distributor to reject a request immediately if the Grid does not support the requested capability.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SE_HEALTHCHECK_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--healthcheck-interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;120&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This ensures the server can ping all the Nodes successfully after an interval.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Video recording&lt;/h2&gt; &#xA;&lt;p&gt;Tests execution can be recorded by using the &lt;code&gt;selenium/video:ffmpeg-6.1.1-20240517&lt;/code&gt; Docker image. One container is needed per each container where a browser is running. This means if you are running 5 Nodes/Standalone containers, you will need 5 video containers, the mapping is 1-1.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the only way to do this mapping is manually (either starting the containers manually or through &lt;code&gt;docker compose&lt;/code&gt;). We are iterating on this process and probably this setup will be more simple in the future.&lt;/p&gt; &#xA;&lt;p&gt;The video Docker image we provide is based on the ffmpeg Ubuntu image provided by the &lt;a href=&#34;https://github.com/jrottenberg/ffmpeg&#34;&gt;jrottenberg/ffmpeg&lt;/a&gt; project, thank you for providing this image and simplifying our work &lt;span&gt;🎉&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;From image tag based &lt;code&gt;4.20.0&lt;/code&gt; onwards, the video Docker image is based on the FFmpeg Ubuntu image provided by &lt;a href=&#34;https://github.com/linuxserver/docker-ffmpeg&#34;&gt;linuxserver/docker-ffmpeg&lt;/a&gt; project since the image is available for multi-platform. Thank you for simplifying our project and helping us move forward with multiple architecture support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have questions or feedback, please use the community contact points shown &lt;a href=&#34;https://www.selenium.dev/support/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please report any bugs through GitHub &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/new/choose&#34;&gt;issues&lt;/a&gt;, and provide all the information requested on the template.&lt;/li&gt; &#xA; &lt;li&gt;Video recording for headless browsers is not supported.&lt;/li&gt; &#xA; &lt;li&gt;Video recording tends to use considerable amounts of CPU. Normally you should estimate 1CPU per video container, and 1 CPU per browser container.&lt;/li&gt; &#xA; &lt;li&gt;Videos are stored in the &lt;code&gt;/videos&lt;/code&gt; directory inside the video container. Map a local directory to get the videos.&lt;/li&gt; &#xA; &lt;li&gt;If you are running more than one video container, be sure to overwrite the video file name through the &lt;code&gt;FILE_NAME&lt;/code&gt; environment variable to avoid unexpected results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This example shows how to start the containers manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4444:4444 -p 6900:5900 --net grid --name selenium --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.21.0-20240517&#xA;$ docker run -d --net grid --name video -v /tmp/videos:/videos selenium/video:ffmpeg-6.1.1-20240517&#xA;# Run your tests&#xA;$ docker stop video &amp;amp;&amp;amp; docker rm video&#xA;$ docker stop selenium &amp;amp;&amp;amp; docker rm selenium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the containers are stopped and removed, you should see a video file on your machine&#39;s &lt;code&gt;/tmp/videos&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example using a Hub and a few Nodes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-video.yml&#34;&gt;&lt;code&gt;docker-compose-v3-video.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video recording with dynamic file name based on metadata in tests&lt;/h2&gt; &#xA;&lt;p&gt;Based on the support of &lt;a href=&#34;https://www.selenium.dev/documentation/grid/getting_started/#metadata-in-tests&#34;&gt;Metadata in tests&lt;/a&gt;. When the video recorder is sidecar deployed with the browser node with enabling &lt;code&gt;SE_VIDEO_FILE_NAME=auto&lt;/code&gt; and adding metadata to your tests, video file name will extract value of capability &lt;code&gt;se:name&lt;/code&gt; and use it as the video file name.&lt;/p&gt; &#xA;&lt;p&gt;For example in Python binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from selenium.webdriver.chrome.options import Options as ChromeOptions&#xA;from selenium import webdriver&#xA;&#xA;options = ChromeOptions()&#xA;options.set_capability(&#39;se:name&#39;, &#39;test_visit_basic_auth_secured_page (ChromeTests)&#39;)&#xA;driver = webdriver.Remote(options=options, command_executor=&#34;http://localhost:4444&#34;)&#xA;driver.get(&#34;https://selenium.dev&#34;)&#xA;driver.quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output video file name will be &lt;code&gt;test_visit_basic_auth_secured_page_ChromeTests_&amp;lt;sessionId&amp;gt;.mp4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your test name is handled by the test framework, and it is unique for sure, you also can disable the session id appends to the video file name by setting &lt;code&gt;SE_VIDEO_FILE_NAME_SUFFIX=false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;File name will be trimmed to 255 characters to avoid long file names. Moreover, &lt;code&gt;space&lt;/code&gt; character will be replaced by &lt;code&gt;_&lt;/code&gt; and only characters alphabets, numbers, &lt;code&gt;-&lt;/code&gt; (hyphen), &lt;code&gt;_&lt;/code&gt; (underscore) are retained in the file name.&lt;/p&gt; &#xA;&lt;p&gt;The trim regex is able to be customized by setting &lt;code&gt;SE_VIDEO_FILE_NAME_TRIM_REGEX&lt;/code&gt; environment variable. The default value is &lt;code&gt;[:alnum:]-_&lt;/code&gt;. The regex should be compatible with the &lt;code&gt;tr&lt;/code&gt; command in bash.&lt;/p&gt; &#xA;&lt;p&gt;At deployment level, the recorder container is up always. In addition, you can disable video recording process via session capability &lt;code&gt;se:recordVideo&lt;/code&gt;. For example in Python binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;options.set_capability(&#39;se:recordVideo&#39;, False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In recorder container will perform query GraphQL in Hub based on Node SessionId and extract the value of &lt;code&gt;se:recordVideo&lt;/code&gt; in capabilities before deciding to start video recording process or not.&lt;/p&gt; &#xA;&lt;p&gt;Notes: To reach the GraphQL endpoint, the recorder container needs to know the Hub URL. The Hub URL can be passed via environment variable &lt;code&gt;SE_NODE_GRID_URL&lt;/code&gt;. For example &lt;code&gt;SE_NODE_GRID_URL&lt;/code&gt; is &lt;code&gt;http://selenium-hub:4444&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Video recording and uploading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rclone.org/&#34;&gt;RCLONE&lt;/a&gt; is installed in the video recorder image. You can use it to upload the videos to a cloud storage service. Besides the video recording mentioned above, you can enable the upload functionality by setting the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  chrome_video:&#xA;    image: selenium/video:ffmpeg-6.1.1-20240517&#xA;    depends_on:&#xA;      - chrome&#xA;    environment:&#xA;      - DISPLAY_CONTAINER_NAME=chrome&#xA;      - SE_VIDEO_FILE_NAME=auto&#xA;      - SE_VIDEO_UPLOAD_ENABLED=true&#xA;      - SE_VIDEO_INTERNAL_UPLOAD=true&#xA;      - SE_UPLOAD_DESTINATION_PREFIX=s3://mybucket/path&#xA;      - RCLONE_CONFIG_S3_TYPE=s3&#xA;      - RCLONE_CONFIG_S3_PROVIDER=GCS&#xA;      - RCLONE_CONFIG_S3_ENV_AUTH=true&#xA;      - RCLONE_CONFIG_S3_REGION=asia-southeast1&#xA;      - RCLONE_CONFIG_S3_LOCATION_CONSTRAINT=asia-southeast1&#xA;      - RCLONE_CONFIG_S3_ACL=private&#xA;      - RCLONE_CONFIG_S3_ACCESS_KEY_ID=xxx&#xA;      - RCLONE_CONFIG_S3_SECRET_ACCESS_KEY=xxx&#xA;      - RCLONE_CONFIG_S3_ENDPOINT=https://storage.googleapis.com&#xA;      - RCLONE_CONFIG_S3_NO_CHECK_BUCKET=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;SE_VIDEO_FILE_NAME=auto&lt;/code&gt; will use the session id as the video file name. This ensures that the video file name is unique to upload.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SE_VIDEO_UPLOAD_ENABLED=true&lt;/code&gt; will enable the video upload feature. In the background, it will create a pipefile with file and destination for uploader to consume and proceed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SE_VIDEO_INTERNAL_UPLOAD=true&lt;/code&gt; will use RCLONE installed in the container for upload. If you want to use another container for upload, set it to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For environment variables with prefix &lt;code&gt;RCLONE_&lt;/code&gt; is used to pass remote configuration to RCLONE. You can find more information about RCLONE configuration &lt;a href=&#34;https://rclone.org/docs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-video-upload.yml&#34;&gt;&lt;code&gt;docker-compose-v3-video-upload.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that upload function is not supported for Dynamic Grid. If you want it, please create a feature request.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dynamic Grid&lt;/h2&gt; &#xA;&lt;p&gt;Grid 4 has the ability to start Docker containers on demand, this means that it starts a Docker container in the background for each new session request, the test gets executed there, and when the test completes, the container gets thrown away.&lt;/p&gt; &#xA;&lt;p&gt;This execution mode can be used either in the Standalone or Node roles. The &#34;dynamic&#34; execution mode needs to be told what Docker images to use when the containers get started. Additionally, the Grid needs to know the URI of the Docker daemon. This configuration can be placed in a local &lt;code&gt;toml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration example&lt;/h3&gt; &#xA;&lt;p&gt;You can save this file locally and name it, for example, &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[docker]&#xA;# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to&#xA;# start a container with the given image.&#xA;configs = [&#xA;    &#34;selenium/standalone-firefox:4.21.0-20240517&#34;, &#39;{&#34;browserName&#34;: &#34;firefox&#34;}&#39;,&#xA;    &#34;selenium/standalone-chrome:4.21.0-20240517&#34;, &#39;{&#34;browserName&#34;: &#34;chrome&#34;}&#39;,&#xA;    &#34;selenium/standalone-edge:4.21.0-20240517&#34;, &#39;{&#34;browserName&#34;: &#34;MicrosoftEdge&#34;}&#39;&#xA;]&#xA;&#xA;host-config-keys = [&#34;Dns&#34;, &#34;DnsOptions&#34;, &#34;DnsSearch&#34;, &#34;ExtraHosts&#34;, &#34;Binds&#34;]&#xA;&#xA;# URL for connecting to the docker daemon&#xA;# Most simple approach, leave it as http://127.0.0.1:2375, and mount /var/run/docker.sock.&#xA;# 127.0.0.1 is used because internally the container uses socat when /var/run/docker.sock is mounted &#xA;# If var/run/docker.sock is not mounted: &#xA;# Windows: make sure Docker Desktop exposes the daemon via tcp, and use http://host.docker.internal:2375.&#xA;# macOS: install socat and run the following command, socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock,&#xA;# then use http://host.docker.internal:2375.&#xA;# Linux: varies from machine to machine, please mount /var/run/docker.sock. If this does not work, please create an issue.&#xA;url = &#34;http://127.0.0.1:2375&#34;&#xA;# Docker image used for video recording&#xA;video-image = &#34;selenium/video:ffmpeg-6.1.1-20240517&#34;&#xA;&#xA;# Uncomment the following section if you are running the node on a separate VM&#xA;# Fill out the placeholders with appropriate values&#xA;#[server]&#xA;#host = &amp;lt;ip-from-node-machine&amp;gt;&#xA;#port = &amp;lt;port-from-node-machine&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the optional config key &lt;code&gt;host-config-keys&lt;/code&gt; under section [docker] in a config.toml file (or CLI option --docker-host-config-keys). Users can specify a list of docker host configuration keys that should be passed to browser containers.&lt;/p&gt; &#xA;&lt;p&gt;Valid key names for Docker host config can be found in the Docker API &lt;a href=&#34;https://docs.docker.com/engine/api/latest/#tag/Container/operation/ContainerCreate&#34;&gt;documentation&lt;/a&gt; or via the command &lt;code&gt;docker inspect&lt;/code&gt; the node-docker container.&lt;/p&gt; &#xA;&lt;h3&gt;Execution with Hub &amp;amp; Node roles&lt;/h3&gt; &#xA;&lt;p&gt;This can be expanded to a full Grid deployment, all components deployed individually. The overall idea is to have the Hub in one virtual machine, and each of the Nodes in separate and more powerful virtual machines.&lt;/p&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/node-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/node-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have the assets saved on your host, please mount your host path to &lt;code&gt;/opt/selenium/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you are done using the Grid, and the containers have exited, the network can be removed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Removes the grid network&#xA;$ docker network rm grid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execution with Standalone roles&lt;/h3&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --name selenium-docker -p 4444:4444 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/standalone-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --name selenium-docker -p 4444:4444 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/standalone-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Dynamic Grid in different machines/VMs&lt;/h3&gt; &#xA;&lt;h4&gt;Hub - Machine/VM 1&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Node Chrome - Machine/VM 2&lt;/h4&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 \&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/node-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 5555:5555 `&#xA;    -e SE_EVENT_BUS_HOST=&amp;lt;ip-from-machine-1&amp;gt; `&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 `&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/node-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complete the &lt;code&gt;[server]&lt;/code&gt; section in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[docker]&#xA;# Configs have a mapping between the Docker image to use and the capabilities that need to be matched to&#xA;# start a container with the given image.&#xA;configs = [&#xA;    &#34;selenium/standalone-firefox:4.21.0-20240517&#34;, &#34;{\&#34;browserName\&#34;: \&#34;firefox\&#34;}&#34;,&#xA;    &#34;selenium/standalone-chrome:4.21.0-20240517&#34;, &#34;{\&#34;browserName\&#34;: \&#34;chrome\&#34;}&#34;,&#xA;    &#34;selenium/standalone-edge:4.21.0-20240517&#34;, &#34;{\&#34;browserName\&#34;: \&#34;MicrosoftEdge\&#34;}&#34;&#xA;    ]&#xA;&#xA;# URL for connecting to the docker daemon&#xA;# Most simple approach, leave it as http://127.0.0.1:2375, and mount /var/run/docker.sock.&#xA;# 127.0.0.1 is used because interally the container uses socat when /var/run/docker.sock is mounted &#xA;# If var/run/docker.sock is not mounted: &#xA;# Windows: make sure Docker Desktop exposes the daemon via tcp, and use http://host.docker.internal:2375.&#xA;# macOS: install socat and run the following command, socat -4 TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock,&#xA;# then use http://host.docker.internal:2375.&#xA;# Linux: varies from machine to machine, please mount /var/run/docker.sock. If this does not work, please create an issue.&#xA;url = &#34;http://127.0.0.1:2375&#34;&#xA;# Docker image used for video recording&#xA;video-image = &#34;selenium/video:ffmpeg-6.1.1-20240517&#34;&#xA;&#xA;# Uncomment the following section if you are running the node on a separate VM&#xA;# Fill out the placeholders with appropriate values&#xA;[server]&#xA;host = &amp;lt;ip-from-node-machine&amp;gt;&#xA;port = &amp;lt;port-from-node-machine&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have the assets saved on your host, please mount your host path to &lt;code&gt;/opt/selenium/assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Execution with Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Here is an example using a Hub and a Node:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-dynamic-grid.yml&#34;&gt;&lt;code&gt;docker-compose-v3-dynamic-grid.yml&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuring the child containers&lt;/h3&gt; &#xA;&lt;p&gt;Containers can be further configured through environment variables, such as &lt;code&gt;SE_NODE_SESSION_TIMEOUT&lt;/code&gt; and &lt;code&gt;SE_OPTS&lt;/code&gt;. When a child container is created, all environment variables prefixed with &lt;code&gt;SE_&lt;/code&gt; will be forwared and set in the container. You can set the desired environment variables in the &lt;code&gt;standalone-docker&lt;/code&gt; or &lt;code&gt;node-docker&lt;/code&gt; containers. The following example sets the session timeout to 700 seconds for all sessions:&lt;/p&gt; &#xA;&lt;h4&gt;macOS/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --name selenium-docker -p 4444:4444 \&#xA;    -e SE_NODE_SESSION_TIMEOUT=700 \&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml \&#xA;    -v ${PWD}/assets:/opt/selenium/assets \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    selenium/standalone-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --name selenium-docker -p 4444:4444 `&#xA;    -e SE_NODE_SESSION_TIMEOUT=700 `&#xA;    -v ${PWD}/config.toml:/opt/bin/config.toml `&#xA;    -v ${PWD}/assets:/opt/selenium/assets `&#xA;    -v /var/run/docker.sock:/var/run/docker.sock `&#xA;    selenium/standalone-docker:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video recording, screen resolution, and time zones in a Dynamic Grid&lt;/h3&gt; &#xA;&lt;p&gt;To record your WebDriver session, you need to add a &lt;code&gt;se:recordVideo&lt;/code&gt; field set to &lt;code&gt;true&lt;/code&gt;. You can also set a time zone and a screen resolution, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;browserName&#34;: &#34;firefox&#34;,&#xA;  &#34;platformName&#34;: &#34;linux&#34;,&#xA;  &#34;se:recordVideo&#34;: &#34;true&#34;,&#xA;  &#34;se:timeZone&#34;: &#34;US/Pacific&#34;,&#xA;  &#34;se:screenResolution&#34;: &#34;1920x1080&#34;  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running a test, check the path you mounted to the Docker container, (&lt;code&gt;${PWD}/assets&lt;/code&gt;), and you should see videos and session information.&lt;/p&gt; &#xA;&lt;p&gt;From language bindings, you can set the &lt;code&gt;se:name&lt;/code&gt; capability to change output video file name dynamically. For example, in Python binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from selenium.webdriver.chrome.options import Options as ChromeOptions&#xA;from selenium import webdriver&#xA;&#xA;options = ChromeOptions()&#xA;options.set_capability(&#39;se:recordVideo&#39;, True)&#xA;options.set_capability(&#39;se:screenResolution&#39;, &#39;1920x1080&#39;)&#xA;options.set_capability(&#39;se:name&#39;, &#39;test_visit_basic_auth_secured_page (ChromeTests)&#39;)&#xA;driver = webdriver.Remote(options=options, command_executor=&#34;http://localhost:4444&#34;)&#xA;driver.get(&#34;https://selenium.dev&#34;)&#xA;driver.quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After test executed, under (&lt;code&gt;${PWD}/assets&lt;/code&gt;) you can see the video file name in path &lt;code&gt;/&amp;lt;sessionId&amp;gt;/test_visit_basic_auth_secured_page_ChromeTests.mp4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file name will be trimmed to 255 characters to avoid long file names. Moreover, the &lt;code&gt;space&lt;/code&gt; character will be replaced by &lt;code&gt;_&lt;/code&gt;, and only the characters alphabets, numbers, &lt;code&gt;-&lt;/code&gt; (hyphen), and &lt;code&gt;_&lt;/code&gt; (underscore) are retained in the file name. (This feat is available once this &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/pull/13907&#34;&gt;PR&lt;/a&gt; merged)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deploying to Kubernetes&lt;/h2&gt; &#xA;&lt;p&gt;We offer a Helm chart to deploy these Docker images to Kubernetes. Read more details at the Helm &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/charts/selenium-grid/README.md&#34;&gt;readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Configuring the containers&lt;/h2&gt; &#xA;&lt;h3&gt;SE_OPTS Selenium Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;SE_OPTS&lt;/code&gt; variable with additional command line parameters for starting a hub or a node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -e SE_OPTS=&#34;--log-level FINE&#34; --name selenium-hub selenium/hub:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SE_JAVA_OPTS Java Environment Options&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;SE_JAVA_OPTS&lt;/code&gt; environment variable to the Java process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -e SE_JAVA_OPTS=-Xmx512m --name selenium-hub selenium/hub:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node configuration options&lt;/h3&gt; &#xA;&lt;p&gt;The Nodes register themselves through the Event Bus. When the Grid is started in its typical Hub/Node setup, the Hub will be the one acting as the Event Bus, and when the Grid is started with all its five elements apart, the Event Bus will be running on its own.&lt;/p&gt; &#xA;&lt;p&gt;In both cases, it is necessary to tell the Node where the Event Bus is, so it can register itself. That is the purpose of the &lt;code&gt;SE_EVENT_BUS_HOST&lt;/code&gt;, &lt;code&gt;SE_EVENT_BUS_PUBLISH_PORT&lt;/code&gt; and &lt;code&gt;SE_EVENT_BUS_SUBSCRIBE_PORT&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, for example, if you want to tag a node, it might be necessary to supply a custom stereotype to the node config. The environment variable &lt;code&gt;SE_NODE_STEREOTYPE&lt;/code&gt; sets the stereotype entry in the node&#39;s &lt;code&gt;config.toml&lt;/code&gt;. An example config.toml file can be found here: &lt;a href=&#34;https://www.selenium.dev/documentation/grid/configuration/toml_options/#setting-custom-capabilities-for-matching-specific-nodes&#34;&gt;Setting custom capabilities for matching specific Nodes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with the default values of these environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d \&#xA;  -e SE_EVENT_BUS_HOST=&amp;lt;event_bus_ip|event_bus_name&amp;gt; \&#xA;  -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 -e SE_NODE_STEREOTYPE=&#34;{\&#34;browserName\&#34;:\&#34;${SE_NODE_BROWSER_NAME}\&#34;,\&#34;browserVersion\&#34;:\&#34;${SE_NODE_BROWSER_VERSION}\&#34;,\&#34;platformName\&#34;: \&#34;Linux\&#34;}&#34; \&#xA;  --shm-size=&#34;2g&#34; selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node configuration relay commands&lt;/h3&gt; &#xA;&lt;p&gt;Relaying commands to a service endpoint that supports WebDriver. It is useful to connect an external service that supports WebDriver to Selenium Grid. An example of such service could be a cloud provider or an Appium server. In this way, Grid can enable more coverage to platforms and versions not present locally.&lt;/p&gt; &#xA;&lt;p&gt;The following is an en example of configuration relay commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/tests/docker-compose-v3-test-node-relay.yml&#34;&gt;docker-compose-v3-test-node-relay.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to relay commands only, &lt;code&gt;selenium/node-base&lt;/code&gt; is suitable and lightweight for this purpose. In case you want to configure node with both browsers and relay commands, respective node images can be used.&lt;/p&gt; &#xA;&lt;p&gt;To use environment variables for generate relay configs, set &lt;code&gt;SE_NODE_RELAY_URL&lt;/code&gt; and other variables as below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[relay]&#xA;url = &#34;${SE_NODE_RELAY_URL}&#34;&#xA;status-endpoint = &#34;${SE_NODE_RELAY_STATUS_ENDPOINT}&#34;&#xA;protocol-version = &#34;${SE_NODE_RELAY_PROTOCOL_VERSION}&#34;&#xA;configs = [ &#39;${SE_NODE_RELAY_MAX_SESSIONS}&#39;, &#39;{&#34;browserName&#34;: &#34;${SE_NODE_RELAY_BROWSER_NAME}&#34;, &#34;platformName&#34;: &#34;${SE_NODE_RELAY_PLATFORM_NAME}&#34;, &#34;appium:platformVersion&#34;: &#34;${SE_NODE_RELAY_PLATFORM_VERSION}&#34;}&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a sample test with the relayed node, you can clone the project and try below command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test_node_relay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Sub Path&lt;/h3&gt; &#xA;&lt;p&gt;By default, Selenium is reachable at &lt;code&gt;http://127.0.0.1:4444/&lt;/code&gt;. Selenium can be configured to use a custom subpath by specifying the &lt;code&gt;SE_SUB_PATH&lt;/code&gt; environmental variable. In the example below Selenium is reachable at &lt;code&gt;http://127.0.0.1:4444/selenium-grid/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -e SE_SUB_PATH=/selenium-grid/ --name selenium-hub selenium/hub:4.9.0-20230421&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Screen Resolution&lt;/h3&gt; &#xA;&lt;p&gt;By default, nodes start with a screen resolution of 1360 x 1020 with a color depth of 24 bits and a dpi of 96. These settings can be adjusted by specifying &lt;code&gt;SE_SCREEN_WIDTH&lt;/code&gt;, &lt;code&gt;SE_SCREEN_HEIGHT&lt;/code&gt;, &lt;code&gt;SE_SCREEN_DEPTH&lt;/code&gt;, and/or &lt;code&gt;SE_SCREEN_DPI&lt;/code&gt; environmental variables when starting the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -e SE_SCREEN_WIDTH=1366 -e SE_SCREEN_HEIGHT=768 -e SE_SCREEN_DEPTH=24 -e SE_SCREEN_DPI=74 selenium/standalone-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grid Url and Session Timeout&lt;/h3&gt; &#xA;&lt;p&gt;In some use cases, you might need to set the Grid URL to the Node, for example, if you&#39;d like to access the BiDi/CDP endpoint. This is also needed when you want to use the new &lt;code&gt;RemoteWebDriver.builder()&lt;/code&gt; or &lt;code&gt;Augmenter()&lt;/code&gt; present in Selenium 4 (since they setup the BiDi/CDP connection implicitly). You can do that through the &lt;code&gt;SE_NODE_GRID_URL&lt;/code&gt; environment variable, eg &lt;code&gt;-e SE_NODE_GRID_URL=http://&amp;lt;hostMachine&amp;gt;:4444&lt;/code&gt;. Setting this env var is needed if you want to see the live view while sessions are executing.&lt;/p&gt; &#xA;&lt;p&gt;Grid has a default session timeout of 300 seconds, where the session can be in a stale state until it is killed. You can use &lt;code&gt;SE_NODE_SESSION_TIMEOUT&lt;/code&gt; to overwrite that value in seconds.&lt;/p&gt; &#xA;&lt;h3&gt;Session request timeout&lt;/h3&gt; &#xA;&lt;p&gt;A new session request is placed in the Session Queue before it is processed, and the request sits in the queue until a matching slot is found across the registered Nodes. However, the new session request might timeout if no slot was found. By default, a request will stay in the queue for up to 300 seconds before it a timeout is reached. In addition, an attempt to process the request is done every 5 seconds (by default).&lt;/p&gt; &#xA;&lt;p&gt;It is possible to override those values through environment variables in the Hub and the SessionQueue (&lt;code&gt;SE_SESSION_REQUEST_TIMEOUT&lt;/code&gt; and &lt;code&gt;SE_SESSION_RETRY_INTERVAL&lt;/code&gt;). For example, a timeout of 500 seconds would be &lt;code&gt;SE_SESSION_REQUEST_TIMEOUT=500&lt;/code&gt; and a retry interval of 2 seconds would be &lt;code&gt;SE_SESSION_RETRY_INTERVAL=2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Increasing session concurrency per container&lt;/h3&gt; &#xA;&lt;p&gt;By default, only one session is configured to run per container through the &lt;code&gt;SE_NODE_MAX_SESSIONS&lt;/code&gt; environment variable. It is possible to increase that number up to the maximum available processors, this is because more stability is achieved when one container/browser has 1 CPU to run.&lt;/p&gt; &#xA;&lt;p&gt;However, if you have measured performance and based on that, you think more sessions can be executed in each container, you can override the maximum limit by setting both &lt;code&gt;SE_NODE_MAX_SESSIONS&lt;/code&gt; to a desired number and &lt;code&gt;SE_NODE_OVERRIDE_MAX_SESSIONS&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Nevertheless, running more browser sessions than the available processors is not recommended since you will be overloading the resources.&lt;/p&gt; &#xA;&lt;p&gt;Overriding this setting has an undesired side effect when video recording is enabled since more than one browser session might be captured in the same video.&lt;/p&gt; &#xA;&lt;h3&gt;Running in Headless mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/web/updates/2017/04/headless-chrome&#34;&gt;Chrome&lt;/a&gt;, When using headless mode, there&#39;s no need for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Xvfb&#34;&gt;Xvfb&lt;/a&gt; server to be started.&lt;/p&gt; &#xA;&lt;p&gt;To avoid starting the server you can set the &lt;code&gt;SE_START_XVFB&lt;/code&gt; environment variable to &lt;code&gt;false&lt;/code&gt; (or any other value than &lt;code&gt;true&lt;/code&gt;), for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 -e SE_START_XVFB=false --shm-size=&#34;2g&#34; selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see this GitHub &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/567&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stopping the Node/Standalone after N sessions have been executed&lt;/h3&gt; &#xA;&lt;p&gt;In some environments, like Docker Swarm or Kubernetes, it is useful to shut down the Node or Standalone container after N tests have been executed. For example, this can be used in Kubernetes to terminate the pod and then scale a new one after N sessions. Set the environment variable &lt;code&gt;SE_DRAIN_AFTER_SESSION_COUNT&lt;/code&gt; to a value higher than zero to enable this behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -e SE_DRAIN_AFTER_SESSION_COUNT=5 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the previous command, the Standalone container will shut down after 5 sessions have been executed.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic browser leftovers cleanup&lt;/h3&gt; &#xA;&lt;p&gt;In long-running containers, it can happen that browsers leave some leftovers. These can be stuck browser processes of jobs that have already finished but failed to fully stop the browser, or temporary files written to the &lt;code&gt;/tmp&lt;/code&gt; file system (notably on Chrome-based browsers). To avoid these filling up resources like process IDs and file system usage in the container, there is an automatic cleanup script running every hour in the node containers. This will clean up old processes and old temporary files. By default, this is disabled. When enabled, this will clean up browsers running for longer than 2 hours, and files older than 1 day. These can be enabled and tweaked with the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SE_ENABLE_BROWSER_LEFTOVERS_CLEANUP&lt;/code&gt;: default value &lt;code&gt;false&lt;/code&gt;, set to &lt;code&gt;true&lt;/code&gt; to enable the cleanup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SE_BROWSER_LEFTOVERS_INTERVAL_SECS&lt;/code&gt;: default value &lt;code&gt;3600&lt;/code&gt; (1 hour), cleanup interval in seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SE_BROWSER_LEFTOVERS_PROCESSES_SECS&lt;/code&gt;: default value &lt;code&gt;7200&lt;/code&gt; (2 hours), browsers running for longer than this time will be killed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SE_BROWSER_LEFTOVERS_TEMPFILES_DAYS&lt;/code&gt;: default value &lt;code&gt;1&lt;/code&gt; (1 day), files generated by Chrome-based browsers in &lt;code&gt;/tmp&lt;/code&gt; will be removed after these number of days (ignored when using Firefox).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Selenium for long-running sessions and expect browsers to be running for longer than 2 hours, either do not set &lt;code&gt;SE_ENABLE_BROWSER_LEFTOVERS_CLEANUP&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (leave the default value of &lt;code&gt;false&lt;/code&gt;), or tweak &lt;code&gt;SE_BROWSER_LEFTOVERS_PROCESSES_SECS&lt;/code&gt; to set a value higher than your expected long-running browser processes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -e SE_ENABLE_BROWSER_LEFTOVERS_CLEANUP=true --shm-size=&#34;2g&#34; selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the previous command, the cleanup will be enabled with the default timings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -e SE_ENABLE_BROWSER_LEFTOVERS_CLEANUP=true \&#xA;-e SE_BROWSER_LEFTOVERS_INTERVAL_SECS=7200 \&#xA;-e SE_BROWSER_LEFTOVERS_PROCESSES_SECS=3600 \&#xA;-e SE_BROWSER_LEFTOVERS_TEMPFILES_DAYS=2 \&#xA;--shm-size=&#34;2g&#34; selenium/node-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the previous command, the cleanup will be enabled, but will run every 2 hours (instead of 1), will kill browsers running longer than 1 hour (instead of 2 hours), and will remove temp files older than 2 days (instead of 1).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Building the images&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repo and from the project directory root you can build everything by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ VERSION=local make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to configure environment variables in order to build the image (http proxy for instance), simply set an environment variable &lt;code&gt;BUILD_ARGS&lt;/code&gt; that contains the additional variables to pass to the docker context (this will only work with docker &amp;gt;= 1.9)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ BUILD_ARGS=&#34;--build-arg http_proxy=http://acme:3128 --build-arg https_proxy=http://acme:3128&#34; make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Omitting&lt;/em&gt; &lt;code&gt;VERSION=local&lt;/code&gt; &lt;em&gt;will build the images with the released version but replacing the date for the current one.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to build the image with the host UID/GID, simply set an environment variable &lt;code&gt;BUILD_ARGS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ BUILD_ARGS=&#34;--build-arg UID=$(id -u) --build-arg GID=$(id -g)&#34; make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to build the image with different default user/password, simply set an environment variable &lt;code&gt;BUILD_ARGS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ BUILD_ARGS=&#34;--build-arg SEL_USER=yourseluser --build-arg SEL_PASSWD=welcome&#34; make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Build the images with specific versions&lt;/h1&gt; &#xA;&lt;p&gt;Based on the latest Dockerfile (by cloning the repo and from the project directory root), you can build the images with a specific combination of Selenium Grid, and browser versions.&lt;/p&gt; &#xA;&lt;p&gt;For example, you would like to build &lt;code&gt;node-chrome&lt;/code&gt; and &lt;code&gt;standalone-chrome&lt;/code&gt; images with the Grid based version &lt;code&gt;4.17.0&lt;/code&gt;, Chrome browser versions &lt;code&gt;119&lt;/code&gt;, &lt;code&gt;120&lt;/code&gt;, &lt;code&gt;123&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./tests/build-backward-compatible/bootstrap.sh 4.17.0 119,120,123 chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In generic, the script takes the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$1&lt;/code&gt; (mandatory): Selenium Grid version. Details are fetching from matrix &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/tests/build-backward-compatible/selenium-matrix.yml&#34;&gt;file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$2&lt;/code&gt; (mandatory): Browser major version, multiple values separated by comma. Details are fetching from matrix &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/tests/build-backward-compatible/cdp-matrix.yml&#34;&gt;file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$3&lt;/code&gt; (optional): browser name. If not provided, it will iterate over all the browsers (&lt;code&gt;chrome&lt;/code&gt;, &lt;code&gt;edge&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$4&lt;/code&gt; (optional): Push image to registry. By default, it is &lt;code&gt;false&lt;/code&gt;. If you want to push the image to the registry, set it to &lt;code&gt;true&lt;/code&gt; (required Docker login to your namespace done before running the script).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To set your namespace for the images, you can set the environment variable &lt;code&gt;NAME&lt;/code&gt; before running the script. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export NAME=artifactory.yourcompany.com/selenium&#xA;$ ./tests/build-backward-compatible/bootstrap.sh 4.17.0 119,120,123 chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the script, you will see list images with a full tag to pin specific Grid and browser version following &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/wiki/Tagging-Convention&#34;&gt;Tagging Conventions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Upgrade browser version in the images&lt;/h2&gt; &#xA;&lt;p&gt;Selenium server, browser and driver are pre-installed in the image. In case you would like to remain on the same Selenium version and just upgrade the browser and its driver to the latest. You can follow below steps&lt;/p&gt; &#xA;&lt;p&gt;Clone the repo and from the project directory root you can upgrade by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ VERSION=$EXPECTED_SELENIUM_VERSION make chrome_upgrade_version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;VERSION=4.16.1 make chrome_upgrade_version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The new image has tag &lt;code&gt;$VERSION_YYYYMMDD&lt;/code&gt; where &lt;code&gt;YYYYMMDD&lt;/code&gt; is the current date.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ VERSION=$SELENIUM_VERSION make firefox_upgrade_version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ VERSION=$SELENIUM_VERSION make edge_upgrade_version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can refer to detail commands in the &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/Makefile&#34;&gt;Makefile&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Waiting for the Grid to be ready&lt;/h2&gt; &#xA;&lt;p&gt;It is a good practice to check first if the Grid is up and ready to receive requests, this can be done by checking the &lt;code&gt;/wd/hub/status&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;A Grid that is ready, composed of a hub and two nodes, could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;value&#34;: {&#xA;    &#34;ready&#34;: true,&#xA;    &#34;message&#34;: &#34;Selenium Grid ready.&#34;,&#xA;    &#34;nodes&#34;: [&#xA;      {&#xA;        &#34;id&#34;: &#34;6c0a2c59-7e99-469d-bbfc-313dc638797c&#34;,&#xA;        &#34;uri&#34;: &#34;http:\u002f\u002f172.19.0.3:5555&#34;,&#xA;        &#34;maxSessions&#34;: 4,&#xA;        &#34;stereotypes&#34;: [&#xA;          {&#xA;            &#34;capabilities&#34;: {&#xA;              &#34;browserName&#34;: &#34;firefox&#34;&#xA;            },&#xA;            &#34;count&#34;: 4&#xA;          }&#xA;        ],&#xA;        &#34;sessions&#34;: [&#xA;        ]&#xA;      },&#xA;      {&#xA;        &#34;id&#34;: &#34;26af3363-a0d8-4bd6-a854-2c7497ed64a4&#34;,&#xA;        &#34;uri&#34;: &#34;http:\u002f\u002f172.19.0.4:5555&#34;,&#xA;        &#34;maxSessions&#34;: 4,&#xA;        &#34;stereotypes&#34;: [&#xA;          {&#xA;            &#34;capabilities&#34;: {&#xA;              &#34;browserName&#34;: &#34;chrome&#34;&#xA;            },&#xA;            &#34;count&#34;: 4&#xA;          }&#xA;        ],&#xA;        &#34;sessions&#34;: [&#xA;        ]&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&#34;ready&#34;: true&lt;/code&gt; value indicates that the Grid is ready to receive requests. This status can be polled through a script before running any test, or it can be added as a &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#healthcheck&#34;&gt;HEALTHCHECK&lt;/a&gt; when the docker container is started.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#healthcheck&#34;&gt;HEALTHCHECK&lt;/a&gt; to the Grid&lt;/h3&gt; &#xA;&lt;p&gt;The script &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/Base/check-grid.sh&#34;&gt;check-grid.sh&lt;/a&gt;, which is included in the images, can be used to poll the Grid status.&lt;/p&gt; &#xA;&lt;p&gt;This example checks the status of the Grid every 15 seconds, it has a timeout of 30 seconds when the check is done, and it retries up to 5 times until the container is marked as unhealthy. Please use adjusted values to fit your needs, (if needed) replace the &lt;code&gt;--host&lt;/code&gt; and &lt;code&gt;--port&lt;/code&gt; parameters for the ones used in your environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create grid&#xA;$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub \&#xA;  --health-cmd=&#39;/opt/bin/check-grid.sh --host 0.0.0.0 --port 4444&#39; \&#xA;  --health-interval=15s --health-timeout=30s --health-retries=5 \&#xA;  selenium/hub:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-edge:4.21.0-20240517&#xA;$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-firefox:4.21.0-20240517&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;\&lt;/code&gt; line delimiter won&#39;t work on Windows-based terminals, try either &lt;code&gt;^&lt;/code&gt; or a backtick.&lt;/p&gt; &#xA;&lt;p&gt;The container health status can be checked by doing &lt;code&gt;docker ps&lt;/code&gt; and verifying the &lt;code&gt;(healthy)|(unhealthy)&lt;/code&gt; status or by inspecting it in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker inspect --format=&#39;{{json .State.Health.Status}}&#39; selenium-hub&#xA;&#34;healthy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a bash script to wait for the Grid&lt;/h3&gt; &#xA;&lt;p&gt;A common problem known in docker is that a running container does not always mean that the application inside it is ready. A simple way to tackle this is by using a &#34;wait-for-it&#34; script, more information can be seen &lt;a href=&#34;https://docs.docker.com/compose/startup-order/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following script is an example of how this can be done using bash, but the same principle applies if you want to do this with the programming language used to write the tests. In the example below, the script will poll the status endpoint every second. If the grid does not become ready within 30 seconds, the script will exit with an error code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;# wait-for-grid.sh&#xA;&#xA;set -e&#xA;url=&#34;http://localhost:4444/wd/hub/status&#34;&#xA;wait_interval_in_seconds=1&#xA;max_wait_time_in_seconds=30&#xA;end_time=$((SECONDS + max_wait_time_in_seconds))&#xA;time_left=$max_wait_time_in_seconds&#xA;&#xA;while [ $SECONDS -lt $end_time ]; do&#xA;    response=$(curl -sL &#34;$url&#34; | jq -r &#39;.value.ready&#39;)&#xA;    if [ -n &#34;$response&#34;  ]  &amp;amp;&amp;amp; [ &#34;$response&#34; ]; then&#xA;        echo &#34;Selenium Grid is up - executing tests&#34;&#xA;        break&#xA;    else&#xA;        echo &#34;Waiting for the Grid. Sleeping for $wait_interval_in_seconds second(s). $time_left seconds left until timeout.&#34;&#xA;        sleep $wait_interval_in_seconds&#xA;        time_left=$((time_left - wait_interval_in_seconds))&#xA;    fi&#xA;done&#xA;&#xA;if [ $SECONDS -ge $end_time ]; then&#xA;    echo &#34;Timeout: The Grid was not started within $max_wait_time_in_seconds seconds.&#34;&#xA;    exit 1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Will require &lt;code&gt;jq&lt;/code&gt; installed via &lt;code&gt;apt-get&lt;/code&gt;, else the script will keep printing &lt;code&gt;Waiting&lt;/code&gt; without completing the execution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If needed, replace &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;4444&lt;/code&gt; for the correct values in your environment. Also, this script is polling indefinitely, you might want to tweak it and establish a timeout.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say that the normal command to execute your tests is &lt;code&gt;mvn clean test&lt;/code&gt;. Here is a way to use the above script and execute your tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./wait-for-grid.sh mvn clean test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like this, the script will poll until the Grid is ready, and then your tests will start.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Install certificates for Chromium-based browsers&lt;/h2&gt; &#xA;&lt;p&gt;By default, the based image is installed &lt;code&gt;libnss3-tools&lt;/code&gt; and initializes &lt;code&gt;/home/seluser/.pki/nssdb&lt;/code&gt;, so you are able to add your certs with rootless. If you need to install custom certificates, CA, intermediate CA, or client certificates (for example, enterprise internal CA) you can create your own docker image from selenium node image. The Chromium-based browser uses &lt;code&gt;nssdb&lt;/code&gt; as a certificate store. You can then install all required internal certificates in your Dockerfile like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a script for installing the certificates. For example, &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/tests/customCACert/cert-script.sh&#34;&gt;cert-script.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a Dockerfile that uses the selenium node image as a base and copies the script to the container, and executes it. For example, &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/tests/customCACert/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you have to create a set of different certificates and node images. You can create a bootstrap script to do that in one-shot. For example, &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/tests/customCACert/bootstrap.sh&#34;&gt;bootstrap.sh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The above example can be tested with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test_custom_ca_cert&#xA;# ./tests/customCACert/bootstrap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more information &lt;a href=&#34;https://chromium.googlesource.com/chromium/src/+/master/docs/linux/cert_management.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This way the certificates will be installed and the node will start automatically as before.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Alternative method: Add certificates to existing Selenium based images for browsers&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative, you can add your certificate files to existing Selenium images. This practical example assumes you have a known image to use as a build image and have a way to publish new images to your local docker registry.&lt;/p&gt; &#xA;&lt;p&gt;This example uses a RedHat-based distro as a build image (Rocky Linux) but it can be &lt;em&gt;any&lt;/em&gt; Linux image of your choice. Please note that build instruction will vary between distributions. You can check the instructions for Ubuntu in the previous example.&lt;/p&gt; &#xA;&lt;p&gt;The example also assumes your internal CA is already in &lt;em&gt;/etc/pki/ca-trust/source/anchors/YOUR_CA.pem&lt;/em&gt;, the default location for Rocky Linux. Alternatively, you can also provide these files from your host and copy them into the build image.&lt;/p&gt; &#xA;&lt;p&gt;For Chrome and Edge browsers, the recipe is the same, just adapt the image name (node-chrome or node-edge):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Get a standard image for creating nssdb file&#xA;FROM rockylinux:8.6 as build&#xA;RUN yum install -y nss-tools&#xA;RUN mkdir -p -m755 /seluser/.pki/nssdb \&#xA;    &amp;amp;&amp;amp; certutil -d sql:/seluser/.pki/nssdb -N --empty-password \&#xA;    &amp;amp;&amp;amp; certutil -d sql:/seluser/.pki/nssdb -A -t &#34;C,,&#34; -n YOUR_CA -i /etc/pki/ca-trust/source/anchors/YOUR_CA.pem \&#xA;    &amp;amp;&amp;amp; chown -R 1200:1201 /seluser&#xA;&#xA;# Start from Selenium image and add relevant files from build image&#xA;FROM selenium/node-chrome:4.21.0-20240517&#xA;USER root&#xA;COPY --from=build /seluser/ /home/seluser/&#xA;USER seluser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for Firefox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Get a standard image for working on&#xA;FROM rockylinux:8.6 as build&#xA;RUN mkdir -p &#34;/distribution&#34; &#34;/certs&#34; &amp;amp;&amp;amp; \&#xA;    cp /etc/pki/ca-trust/source/anchors/YOUR_CA*.pem /certs/ &amp;amp;&amp;amp; \&#xA;    echo &#39;{ &#34;policies&#34;: { &#34;Certificates&#34;: { &#34;Install&#34;: [&#34;/opt/firefox-latest/YOUR_CA.pem&#34;] }} }&#39; &amp;gt;&#34;/distribution/policies.json&#34;&#xA;&#xA;# Start from Selenium image and add relevant files from build image&#xA;FROM selenium/node-firefox:4.21.0-20240517&#xA;USER root&#xA;COPY --from=build /certs /opt/firefox-latest&#xA;COPY --from=build /distribution /opt/firefox-latest/distribution&#xA;USER seluser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/LibVNC/x11vnc&#34;&gt;x11vnc&lt;/a&gt; as a VNC server to allow users to inspect what is happening inside the container. Users can connect to this server in two ways:&lt;/p&gt; &#xA;&lt;h3&gt;Using a VNC client&lt;/h3&gt; &#xA;&lt;p&gt;The VNC server is listening to port 5900, you can use a VNC client and connect to it. Feel free to map port 5900 to any free external port that you wish.&lt;/p&gt; &#xA;&lt;p&gt;The internal 5900 port remains the same because that is the configured port for the VNC server running inside the container. You can override it with the &lt;code&gt;SE_VNC_PORT&lt;/code&gt; environment variable in case you want to use &lt;code&gt;--net=host&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with the standalone images, the same concept applies to the node images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -p 5900:5900 --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.21.0-20240517&#xA;$ docker run -d -p 4445:4444 -p 5901:5900 --shm-size=&#34;2g&#34; selenium/standalone-edge:4.21.0-20240517&#xA;$ docker run -d -p 4446:4444 -p 5902:5900 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you would use in your VNC client:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Port 5900 to connect to the Chrome container&lt;/li&gt; &#xA; &lt;li&gt;Port 5901 to connect to the Edge container&lt;/li&gt; &#xA; &lt;li&gt;Port 5902 to connect to the Firefox container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you get a prompt asking for a password, it is: &lt;code&gt;secret&lt;/code&gt;. If you wish to change this, you can set the environment variable &lt;code&gt;SE_VNC_PASSWORD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run VNC without password authentication you can set the environment variable &lt;code&gt;SE_VNC_NO_PASSWORD=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run VNC in view-only mode you can set the environment variable &lt;code&gt;SE_VNC_VIEW_ONLY=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to modify the open file descriptor limit for the VNC server process you can set the environment variable &lt;code&gt;SE_VNC_ULIMIT=4096&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using your browser (no VNC client is needed)&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/novnc/noVNC&#34;&gt;noVNC&lt;/a&gt; to allow users to inspect visually container activity with their browser. This might come in handy if you cannot install a VNC client on your machine. Port 7900 is used to start noVNC, so you will need to connect to that port with your browser.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to the previous section, feel free to map port 7900 to any free external port that you wish. You can also override it with the &lt;code&gt;SE_NO_VNC_PORT&lt;/code&gt; environment variable in case you want to use &lt;code&gt;--net=host&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example with the standalone images, the same concept applies to the node images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -d -p 4444:4444 -p 7900:7900 --shm-size=&#34;2g&#34; selenium/standalone-chrome:4.21.0-20240517&#xA;$ docker run -d -p 4445:4444 -p 7901:7900 --shm-size=&#34;2g&#34; selenium/standalone-edge:4.21.0-20240517&#xA;$ docker run -d -p 4446:4444 -p 7902:7900 --shm-size=&#34;2g&#34; selenium/standalone-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you would use in your browser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:7900/&#34;&gt;http://localhost:7900/&lt;/a&gt; to connect to the Chrome container&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:7901/&#34;&gt;http://localhost:7901/&lt;/a&gt; to connect to the Edge container&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:7902/&#34;&gt;http://localhost:7902/&lt;/a&gt; to connect to the Firefox container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you get a prompt asking for a password, it is: &lt;code&gt;secret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling VNC&lt;/h3&gt; &#xA;&lt;p&gt;If You are running low on resources, or simply don&#39;t need to inspect running sessions, it is possible to not run VNC at all. Just set &lt;code&gt;SE_START_VNC=false&lt;/code&gt; environment variable on the grid startup.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tracing in Grid&lt;/h2&gt; &#xA;&lt;p&gt;In order to enable tracing in the Selenium Grid container, the following commands can be executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker network create grid&#xA;docker run -d -p 16686:16686 -p 4317:4317 --net grid --name jaeger jaegertracing/all-in-one:1.54&#xA;docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.21.0-20240517&#xA;docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;&#x9;-e SE_ENABLE_TRACING=true \&#xA;&#x9;-e SE_OTEL_TRACES_EXPORTER=otlp \&#xA;&#x9;-e SE_OTEL_EXPORTER_ENDPOINT=http://jaeger:4317 \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-chrome:4.21.0-20240517&#xA;docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;&#x9;-e SE_ENABLE_TRACING=true \&#xA;&#x9;-e SE_OTEL_TRACES_EXPORTER=otlp \&#xA;&#x9;-e SE_OTEL_EXPORTER_ENDPOINT=http://jaeger:4317 \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-edge:4.21.0-20240517&#xA;docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \&#xA;    --shm-size=&#34;2g&#34; \&#xA;&#x9;-e SE_ENABLE_TRACING=true \&#xA;&#x9;-e SE_OTEL_TRACES_EXPORTER=otlp \&#xA;&#x9;-e SE_OTEL_EXPORTER_ENDPOINT=http://jaeger:4317 \&#xA;    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \&#xA;    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \&#xA;    selenium/node-firefox:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also refer to the below docker compose yaml files to be able to start a simple grid (or) a dynamic grid.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple Grid &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-tracing.yml&#34;&gt;v3 yaml file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simple Grid &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v2-tracing.yml&#34;&gt;v2 yaml file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Grid &lt;a href=&#34;https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/docker-compose-v3-full-grid-tracing.yml&#34;&gt;v3 yaml file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can view the &lt;a href=&#34;http://localhost:16686/&#34;&gt;Jaeger UI&lt;/a&gt; and trace your request.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;All output gets sent to stdout, so it can be inspected by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker logs -f &amp;lt;container-id|container-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can increase the log output by passing environment variable to the containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SE_OPTS=&#34;--log-level FINE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;--shm-size=&#34;2g&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Why is &lt;code&gt;--shm-size 2g&lt;/code&gt; necessary?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a known workaround to avoid the browser crashing inside a docker container, here are the documented issues for &lt;a href=&#34;https://code.google.com/p/chromium/issues/detail?id=519952&#34;&gt;Chrome&lt;/a&gt; and &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1338771#c10&#34;&gt;Firefox&lt;/a&gt;. The shm size of 2gb is arbitrary but known to work well, your specific use case might need a different value, it is recommended to tune this value according to your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Headless&lt;/h3&gt; &#xA;&lt;p&gt;If you see the following selenium exceptions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Message: invalid argument: can&#39;t kill an exited process&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Message: unknown error: Chrome failed to start: exited abnormally&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The reason &lt;em&gt;might&lt;/em&gt; be that you&#39;ve set the &lt;code&gt;START_XVFB&lt;/code&gt; environment variable to &#34;false&#34;, but forgot to actually run Firefox, Chrome or Edge in headless mode.&lt;/p&gt; &#xA;&lt;h3&gt;Mounting volumes to retrieve downloaded files&lt;/h3&gt; &#xA;&lt;p&gt;A common scenario is mounting a volume to the browser container in order to retrieve downloaded files. This works well in Windows and macOS but not without workarounds in Linux. For more details, check this well-documented &lt;a href=&#34;https://github.com/SeleniumHQ/docker-selenium/issues/1095&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, while using Linux, you might be starting a container in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 4444:4444 --shm-size=&#34;2g&#34; \&#xA;  -v /home/ubuntu/files:/home/seluser/Downloads \&#xA;  selenium/standalone-chrome:4.21.0-20240517&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will mount the host &lt;code&gt;/home/ubuntu/files&lt;/code&gt; directory to the &lt;code&gt;/home/seluser/Downloads&lt;/code&gt; inside the container (default browser&#39;s downloads directory). The problem happens because the volume will be mounted as &lt;code&gt;root&lt;/code&gt;; therefore, the browser cannot write a file to that directory because it is running under the user &lt;code&gt;seluser&lt;/code&gt;. This happens because that is how Docker mounts volumes in Linux, more details in this &lt;a href=&#34;https://github.com/moby/moby/issues/2259&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A workaround for this is to create a directory on the host and change its permissions &lt;strong&gt;before mounting the volume&lt;/strong&gt;. Depending on your user permissions, you might need to use &lt;code&gt;sudo&lt;/code&gt; for some of these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /home/ubuntu/files&#xA;chown 1200:1201 /home/ubuntu/files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After doing this, you should be able to download files to the mounted directory. If you have a better workaround, please send us a pull request!&lt;/p&gt; &#xA;&lt;h3&gt;Mounting volumes to retrieve video files&lt;/h3&gt; &#xA;&lt;p&gt;Similar to mount volumes to retrieve downloaded files. For video files, you might need to do the same&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /tmp/videos&#xA;chown 1200:1201 /tmp/videos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/SeleniumHQ/docker-selenium&#34;&gt;&lt;img src=&#34;https://starchart.cc/SeleniumHQ/docker-selenium.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>