<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-02T01:31:24Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>midudev/libros-programacion-gratis</title>
    <updated>2022-12-02T01:31:24Z</updated>
    <id>tag:github.com,2022-12-02:/midudev/libros-programacion-gratis</id>
    <link href="https://github.com/midudev/libros-programacion-gratis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📚 Lista de libros sobre programación en Español y gratis&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;📚 Libros de Programación en Español y gratuitos&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/midudev?style=social&#34; alt=&#34;Twitch Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/midudev?style=social&#34; alt=&#34;Twitter Follow&#34;&gt; &lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8LeXCWOalN8SxlrPcG-PaQ?style=social&#34; alt=&#34;YouTube Channel Subscribers&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📖 Índice&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-libros-de-programaci%C3%B3n-en-espa%C3%B1ol-y-gratuitos&#34;&gt;📚 Libros de Programación en Español y gratuitos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-%C3%ADndice&#34;&gt;📖 Índice&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-generales&#34;&gt;👨‍💻 Generales&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#lenguajes-de-programaci%C3%B3n&#34;&gt;Lenguajes de Programación&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-javascript&#34;&gt;🟨 JavaScript&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-typescript&#34;&gt;🟦 TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-python&#34;&gt;🐍 Python&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#%EF%B8%8F-ruby&#34;&gt;♦️ Ruby&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#%EF%B8%8F-rust&#34;&gt;⚙️ Rust&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-php&#34;&gt;🐘 PHP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-haskell&#34;&gt;🤔 Haskell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-golang&#34;&gt;🐹 Golang&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-java&#34;&gt;☕ Java&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#-git&#34;&gt;🔀 Git&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#bases-de-datos&#34;&gt;Bases de datos&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/libros-programacion-gratis/main/#sql&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👨‍💻 Generales&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://97cosas.com/programador/&#34;&gt;97 cosas que todo programador debe saber&lt;/a&gt; - Kevlin Henney&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://losapuntesdemajo.vercel.app/&#34;&gt;Los apuntes de Majo&lt;/a&gt; - Majo Ledesma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lenguajes de Programación&lt;/h2&gt; &#xA;&lt;h3&gt;🟨 JavaScript&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eloquentjs-es.thedojo.mx/Eloquent_JavaScript.pdf&#34;&gt;Eloquent JavaScript&lt;/a&gt; - Marijn Haverbeke (PDF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/javascript-inspirate&#34;&gt;JavaScript, ¡Inspírate!&lt;/a&gt; - Ulises Gascón (eBook)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://es.javascript.info/&#34;&gt;JavaScript Moderno&lt;/a&gt; - Ilya Kantor (HTML)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/es/docs/Web/JavaScript/Guide&#34;&gt;MDN:Guía de JavaScript&lt;/a&gt; (HTML)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🟦 TypeScript&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://khru.gitbooks.io/typescript/&#34;&gt;Introducción a TypeScript&lt;/a&gt; - Emmanuel Valverde Ramos (HTML)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/melissarofman/typescript-book&#34;&gt;TypeScript en Profundidad&lt;/a&gt; - Basarat Ali Syed, traducido por Melissa Rofman (HTML)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mega.nz/file/TldlTZID#1A90Wn8xYloDvekX8rQewI3Yh8HMJXlufRUEWEcOzNU&#34;&gt;Introducción a TypeScript&lt;/a&gt; - Adictos al trabajo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mega.nz/file/7hdwEY6b#ESsixH9wCUFhUugkRq8BEa1uZlzFXCJX6QxHdL5Yz9Q&#34;&gt;TypeScript para Principantes&lt;/a&gt; - Envato Tuts+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mega.nz/#!qwcFDZ7a!ggLXIZ4c-O1Do0OEuvK0Mz8k39LvYQwdaJ2LtKKxgsE&#34;&gt;Manual de TypeScript&lt;/a&gt; - Emmanuel Valverde y Pedro Hernández-Mora&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neliosoftware.com/es/blog/uso-avanzado-de-typescript/&#34;&gt;Uso avanzado de TypeScript en un ejemplo real&lt;/a&gt; - Nelio Software (HTML)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://riptutorial.com/Download/typescript-es.pdf&#34;&gt;Aprendizaje TypeScript&lt;/a&gt; - RipTutorial (PDF)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🐍 Python&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://launchpadlibrarian.net/18980633/Python%20para%20todos.pdf&#34;&gt;Python para todos&lt;/a&gt; - Raúl González Duque&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argentinaenpython.com/quiero-aprender-python/aprenda-a-pensar-como-un-programador-con-python.pdf&#34;&gt;Aprenda a pensar como un programador con Python&lt;/a&gt; - Allen Downey, Jeffrey Elkner, Chris Meyers. Traducción: Miguel Ángel Vilella, Ángel Arnal, Iván Juanes, Litza Amurrio, Efrain Andia, César Ballardini (PDF)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;♦️ Ruby&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rubysur.org/aprende.a.programar&#34;&gt;Aprende a programar con Ruby&lt;/a&gt; - RubySur (HTML)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;⚙️ Rust&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://riptutorial.com/Download/rust-es.pdf&#34;&gt;Aprendizaje Rust&lt;/a&gt; - Riptutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goyox86.github.io/elpr/README.html&#34;&gt;El Lenguaje de Programación Rust&lt;/a&gt; - Jose Narvaez (HTML)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🐘 PHP&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phpdevenezuela.github.io/php-the-right-way/&#34;&gt;PHP, la manera correcta&lt;/a&gt; - Josh Lockhart, Phil Sturgeon (HTML)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🤔 Haskell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cs.us.es/~jalonso/publicaciones/Piensa_en_Haskell.pdf&#34;&gt;Piensa en Haskell&lt;/a&gt; - José A. Alonso Jiménez, Mª José Hidalgo Doblado (PDF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aprendehaskell.es/main.html&#34;&gt;¡Aprende Haskell por el bien de todos!&lt;/a&gt; (HTML)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🐹 Golang&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raulexposito.com/assets/pdf/go.pdf&#34;&gt;El pequeño libro de Go&lt;/a&gt; - Karl Seguin (traducido por Raúl Exposito)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nachopacheco.gitbooks.io/go-es/content/doc&#34;&gt;Go en Español&lt;/a&gt; - Nacho Pacheco&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;☕ Java&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tesuva.edu.co/phocadownloadpap/Fundamentos%20de%20programcion%20en%20Java.pdf&#34;&gt;Fundamentos de programación en Java&lt;/a&gt; - Jorge Martínez Ladrón (PDF)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🔀 Git&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/progit/progit2-es/releases/download/2.1.23/progit.pdf&#34;&gt;Pro Git&lt;/a&gt; - Scott Chacon y Ben Straub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bases de datos&lt;/h2&gt; &#xA;&lt;h3&gt;SQL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.desarrolloweb.com/manuales/9/&#34;&gt;Tutorial de SQL&lt;/a&gt; - Rubén Alvarez&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jorgesanchez.net/manuales/sql/intro-sql-sql2016.html&#34;&gt;Manual de SQL&lt;/a&gt; - Jorge Sanchez Asenjo&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zu1k/zlib-searcher</title>
    <updated>2022-12-02T01:31:24Z</updated>
    <id>tag:github.com,2022-12-02:/zu1k/zlib-searcher</id>
    <link href="https://github.com/zu1k/zlib-searcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;search zlib/libgen index to get ipfs_cid. We don&#39;t save and provide files, we provide search. I hope everyone have a copy of the index locally, so that no need to rely on any centralized service.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zlib(libgen) searcher&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zu1k/zlib-searcher/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zu1k/zlib-searcher&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zu1k/zlib-searcher/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/zu1k/zlib-searcher&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zu1k/zlib-searcher/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/zu1k/zlib-searcher&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zu1k/zlib-searcher/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/zu1k/zlib-searcher&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zu1k/zlib-searcher/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/zu1k/zlib-searcher&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search &lt;code&gt;zlib&lt;/code&gt;/&lt;code&gt;libgen&lt;/code&gt; index to get &lt;code&gt;ipfs_cid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t save and provide files, we provide search.&lt;/p&gt; &#xA;&lt;p&gt;I hope everyone have a copy of the index locally, so that no need to rely on any centralized service.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy with Docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/zu1k/zlib-searcher.git &amp;amp;&amp;amp; cd zlib-searcher&#xA;wget https://github.com/zu1k/zlib-searcher/releases/download/0.6.0/index_0.6.zip &amp;amp;&amp;amp; unzip index_0.6.zip&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now &lt;code&gt;zlib-searcher&lt;/code&gt; it will listen to &lt;code&gt;0.0.0.0:7070&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Download the pre-compiled binary from &lt;a href=&#34;https://github.com/zu1k/zlib-searcher/releases&#34;&gt;Release&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;Or you can compile by yourself. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/zu1k/zlib-searcher/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;2. Download the &lt;code&gt;index&lt;/code&gt; file that has been created.&lt;/h3&gt; &#xA;&lt;p&gt;We will give the corresponding &lt;code&gt;index&lt;/code&gt; download links for each version in the release page.&lt;/p&gt; &#xA;&lt;p&gt;Or you can make your own via &lt;code&gt;zlib-searcher index&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extract the &lt;code&gt;index&lt;/code&gt; folder to the same level as the program, it should look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zlib_searcher_dir&#xA;├── index&#xA;│&amp;nbsp;&amp;nbsp; ├── some index files...&#xA;│&amp;nbsp;&amp;nbsp; └── meta.json&#xA;└── zlib-searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Run &lt;code&gt;zlib-searcher run&lt;/code&gt;, it will listen to &lt;code&gt;127.0.0.1:7070&lt;/code&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;Access &lt;a href=&#34;http://127.0.0.1:7070/&#34;&gt;http://127.0.0.1:7070/&lt;/a&gt; to use webui, or you can use the original api.&lt;/p&gt; &#xA;&lt;h4&gt;original search api&lt;/h4&gt; &#xA;&lt;p&gt;You can search by the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;title&lt;/li&gt; &#xA; &lt;li&gt;author&lt;/li&gt; &#xA; &lt;li&gt;publisher&lt;/li&gt; &#xA; &lt;li&gt;extension&lt;/li&gt; &#xA; &lt;li&gt;language&lt;/li&gt; &#xA; &lt;li&gt;isbn&lt;/li&gt; &#xA; &lt;li&gt;zlib_id&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=余华&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=title:机器学习 extension:azw3 publisher:清华&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=zlib_id:18557063&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=isbn:9787302423287&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;1. Build &lt;code&gt;zlib-searcher&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;First build frontend&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make frontend_preinstall frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build zlib-searcher&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET=release make&#xA;&#xA;# move the compiled binary to the project root directory&#xA;mv target/release/zlib-searcher .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Build &lt;code&gt;index&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;code&gt;zlib_index_books.csv.zip&lt;/code&gt; and &lt;code&gt;libgen_index_books.csv.zip&lt;/code&gt; and extract the &lt;code&gt;csv&lt;/code&gt; files to the project root directory.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;zlib-searcher index&lt;/code&gt;. You may need to &lt;code&gt;rm index/*&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;The finally folder structure should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zlib_searcher_dir // in the example above, it is project root directory.&#xA;├── index&#xA;│&amp;nbsp;&amp;nbsp; ├── some index files...&#xA;│&amp;nbsp;&amp;nbsp; └── meta.json&#xA;└── zlib-searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raw data&lt;/h2&gt; &#xA;&lt;p&gt;We downloaded &lt;code&gt;libgen&lt;/code&gt; sql and &lt;code&gt;zlib&lt;/code&gt; sql and exported the necessary data from them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;id, title, author, publisher, extension, filesize, language, year, pages, isbn, ipfs_cid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This raw data is used to generate our &lt;code&gt;index&lt;/code&gt;, you can download the raw data from here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zlib.r2.zu1k.com/raw/zlib_index_books.csv.zip&#34;&gt;zlib_index_books.csv.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zlib.r2.zu1k.com/raw/libgen_index_books.csv.zip&#34;&gt;libgen_index_books.csv.zip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;zlib-searcher&lt;/strong&gt; © &lt;a href=&#34;https://github.com/zu1k/zlib-searcher/graphs/contributors&#34;&gt;zlib-searcher&#39;s authors&lt;/a&gt;, Released under the &lt;a href=&#34;https://raw.githubusercontent.com/zu1k/zlib-searcher/master/LICENSE&#34;&gt;MIT&lt;/a&gt; License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gbj/leptos</title>
    <updated>2022-12-02T01:31:24Z</updated>
    <id>tag:github.com,2022-12-02:/gbj/leptos</id>
    <link href="https://github.com/gbj/leptos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build fast web applications with Rust.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; This framework is in active development. I&#39;m keeping it in a cycle of 0.0.x releases at the moment to indicate that it’s not even ready for its 0.1.0. Active work is being done on documentation and features, and APIs should not necessarily be considered stable. At the same time, it is more than a toy project or proof of concept, and I am actively using it for my own application development.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/gbj/leptos/main/docs/logos/logo.svg?sanitize=true&#34; alt=&#34;Leptos Logo&#34; style=&#34;width: 100%; height: auto; display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/leptos&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/leptos.svg?sanitize=true&#34; alt=&#34;crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/leptos&#34;&gt;&lt;img src=&#34;https://docs.rs/leptos/badge.svg?sanitize=true&#34; alt=&#34;docs.rs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YdRAhS7eQB&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1031524867910148188?color=%237289DA&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Leptos&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use leptos::*;&#xA;&#xA;#[component]&#xA;pub fn SimpleCounter(cx: Scope, initial_value: i32) -&amp;gt; Element {&#xA;    // create a reactive signal with the initial value&#xA;    let (value, set_value) = create_signal(cx, initial_value);&#xA;&#xA;    // create event handlers for our buttons&#xA;    // note that `value` and `set_value` are `Copy`, so it&#39;s super easy to move them into closures&#xA;    let clear = move |_| set_value(0);&#xA;    let decrement = move |_| set_value.update(|value| *value -= 1);&#xA;    let increment = move |_| set_value.update(|value| *value += 1);&#xA;&#xA;    // this JSX is compiled to an HTML template string for performance&#xA;    view! {&#xA;        cx,&#xA;        &amp;lt;div&amp;gt;&#xA;            &amp;lt;button on:click=clear&amp;gt;&#34;Clear&#34;&amp;lt;/button&amp;gt;&#xA;            &amp;lt;button on:click=decrement&amp;gt;&#34;-1&#34;&amp;lt;/button&amp;gt;&#xA;            &amp;lt;span&amp;gt;&#34;Value: &#34; {move || value().to_string()} &#34;!&#34;&amp;lt;/span&amp;gt;&#xA;            &amp;lt;button on:click=increment&amp;gt;&#34;+1&#34;&amp;lt;/button&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    }&#xA;}&#xA;&#xA;// Easy to use with Trunk (trunkrs.dev) or with a simple wasm-bindgen setup&#xA;pub fn main() {&#xA;    mount_to_body(|cx| view! { cx,  &amp;lt;SimpleCounter initial_value=3 /&amp;gt; })&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About the Framework&lt;/h2&gt; &#xA;&lt;p&gt;Leptos is a full-stack, isomorphic Rust web framework leveraging fine-grained reactivity to build declarative user interfaces.&lt;/p&gt; &#xA;&lt;h2&gt;What does that mean?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full-stack&lt;/strong&gt;: Leptos can be used to build apps that run in the browser (&lt;em&gt;client-side rendering&lt;/em&gt;), on the server (&lt;em&gt;server-side rendering&lt;/em&gt;), or by rendering HTML on the server and then adding interactivity in the browser (&lt;em&gt;hydration&lt;/em&gt;). This includes support for &lt;em&gt;HTTP streaming&lt;/em&gt; of both data (&lt;code&gt;Resource&lt;/code&gt;s) and HTML (out-of-order streaming of &lt;code&gt;&amp;lt;Suspense/&amp;gt;&lt;/code&gt; components.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Isomorphic&lt;/strong&gt;: Leptos provides primitives to write isomorphic server functions, i.e., functions that can be called with the “same shape” on the client or server, but only run on the server. This means you can write your server-only logic (database requests, authentication etc.) alongside the client-side components that will consume it, and call server functions as if they were running in the browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;: Leptos is built on the Web platform and Web standards. The router is designed to use Web fundamentals (like links and forms) and build on top of them rather than trying to replace them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: Leptos provides most of what you need to build a modern web app: a reactive system, templating library, and a router that works on both the server and client side.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained reactivity&lt;/strong&gt;: The entire framework is build from reactive primitives. This allows for extremely performant code with minimal overhead: when a reactive signal’s value changes, it can update a single text node, toggle a single class, or remove an element from the DOM without any other code running. (&lt;em&gt;So, no virtual DOM!&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: Tell Leptos how you want the page to look, and let the framework tell the browser how to do it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;Here are some resources for learning more about Leptos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gbj/leptos/tree/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/leptos/latest/leptos/&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gbj/leptos/tree/main/docs/COMMON_BUGS.md&#34;&gt;Common Bugs&lt;/a&gt; (and how to fix them!)&lt;/li&gt; &#xA; &lt;li&gt;Leptos Guide (in progress)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;nightly&lt;/code&gt; Note&lt;/h2&gt; &#xA;&lt;p&gt;Most of the examples assume you’re using &lt;code&gt;nightly&lt;/code&gt; Rust. If you’re on stable, note the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need to enable the &lt;code&gt;&#34;stable&#34;&lt;/code&gt; flag in &lt;code&gt;Cargo.toml&lt;/code&gt;: &lt;code&gt;leptos = { version = &#34;0.0&#34;, features = [&#34;stable&#34;] }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt; enables the function call syntax for accessing and setting signals. If you’re using &lt;code&gt;stable&lt;/code&gt;, you’ll just call &lt;code&gt;.get()&lt;/code&gt;, &lt;code&gt;.set()&lt;/code&gt;, or &lt;code&gt;.update()&lt;/code&gt; manually. Check out the &lt;a href=&#34;https://github.com/gbj/leptos/raw/main/examples/counters-stable/src/main.rs&#34;&gt;&lt;code&gt;counters-stable&lt;/code&gt; example&lt;/a&gt; for examples of the correct API.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;h3&gt;Server-Side Rendering&lt;/h3&gt; &#xA;&lt;p&gt;I’ve created a benchmark comparing Leptos’s HTML rendering on the server to &lt;a href=&#34;https://github.com/Keats/tera&#34;&gt;Tera&lt;/a&gt;, &lt;a href=&#34;https://github.com/yewstack/yew&#34;&gt;Yew&lt;/a&gt;, and &lt;a href=&#34;https://github.com/sycamore-rs/sycamore&#34;&gt;Sycamore&lt;/a&gt;. You can find the benchmark &lt;a href=&#34;https://github.com/gbj/leptos/tree/main/benchmarks&#34;&gt;here&lt;/a&gt; and run it yourself using &lt;code&gt;cargo bench&lt;/code&gt;. Leptos renders HTML roughly as fast as Tera, and scales well as templates become larger. It&#39;s significantly faster than the server-side HTML rendering done by similar frameworks.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to show results&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt;&#xA;    &lt;td&gt;&lt;em&gt;ns/iter&lt;/em&gt;&lt;/td&gt;&#xA;    &lt;td&gt;Tera&lt;/td&gt;&#xA;    &lt;td&gt;Leptos&lt;/td&gt;&#xA;    &lt;td&gt;Yew&lt;/td&gt;&#xA;    &lt;td&gt;Sycamore&lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt;&#xA;    &lt;td&gt;3 Counters&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;3,454&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;5,666&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;34,984&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;32,412&lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt;&#xA;    &lt;td&gt;TodoMVC (no todos)&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;2,396&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;5,561&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;38,725&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;68,749&lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt;&#xA;    &lt;td&gt;TodoMVC (1000 todos)&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;3,829,447&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;3,077,907&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;5,125,639&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;19,448,900&lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt;&#xA;    &lt;td&gt;&lt;em&gt;Average&lt;/em&gt;&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;1.08&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;1.65&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;6.25&lt;/td&gt;&#xA;    &lt;td align=&#34;right&#34;&gt;9.36&lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Client-Side Rendering&lt;/h3&gt; &#xA;&lt;p&gt;The gold standard for testing raw rendering performance for front-end web frameworks is the &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark&#34;&gt;js-framework-benchmark&lt;/a&gt;. The official results list Leptos as the fastest Rust/Wasm framework, slightly slower than SolidJS and significantly faster than popular JS frameworks like Svelte, Preact, and React.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to show results&lt;/summary&gt; &#xA; &lt;img width=&#34;913&#34; alt=&#34;js-framework-benchmark results&#34; src=&#34;https://user-images.githubusercontent.com/286622/198388168-d21e938b-5d59-4000-b373-91b48f1ec4d3.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;Can I use this for native GUI?&lt;/h3&gt; &#xA;&lt;p&gt;Sure! Obviously the &lt;code&gt;view&lt;/code&gt; macro is for generating DOM nodes but you can use the reactive system to drive native any GUI toolkit that uses the same kind of object-oriented, event-callback-based framework as the DOM pretty easily. The principles are the same:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use signals, derived signals, and memos to create your reactive system&lt;/li&gt; &#xA; &lt;li&gt;Create GUI widgets&lt;/li&gt; &#xA; &lt;li&gt;Use event listeners to update signals&lt;/li&gt; &#xA; &lt;li&gt;Create effects to update the UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ve put together a &lt;a href=&#34;https://github.com/gbj/leptos/raw/main/examples/gtk/src/main.rs&#34;&gt;very simple GTK example&lt;/a&gt; so you can see what I mean.&lt;/p&gt; &#xA;&lt;h3&gt;How is this different from Yew/Dioxus?&lt;/h3&gt; &#xA;&lt;p&gt;On the surface level, these libraries may seem similar. Yew is, of course, the most mature Rust library for web UI development and has a huge ecosystem. Dioxus is similar in many ways, being heavily inspired by React. Here are some conceptual differences between Leptos and these frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;VDOM vs. fine-grained:&lt;/strong&gt; Yew is built on the virtual DOM (VDOM) model: state changes cause components to re-render, generating a new virtual DOM tree. Yew diffs this against the previous VDOM, and applies those patches to the actual DOM. Component functions rerun whenever state changes. Leptos takes an entirely different approach. Components run once, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; This has huge performance implications: Leptos is simply &lt;em&gt;much&lt;/em&gt; faster at both creating and updating the UI than Yew is.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mental model:&lt;/strong&gt; Adopting fine-grained reactivity also tends to simplify the mental model. There are no surprising components re-renders because there are no re-renders. Your app can be divided into components based on what makes sense for your app, because they have no performance implications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How is this different from Sycamore?&lt;/h3&gt; &#xA;&lt;p&gt;Conceptually, these two frameworks are very similar: because both are built on fine-grained reactivity, most apps will end up looking very similar between the two, and Sycamore or Leptos apps will both look a lot like SolidJS apps, in the same way that Yew or Dioxus can look a lot like React.&lt;/p&gt; &#xA;&lt;p&gt;There are some practical differences that make a significant difference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maturity:&lt;/strong&gt; Sycamore is obviously a much more mature and stable library with a larger ecosystem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Templating:&lt;/strong&gt; Leptos uses a JSX-like template format (built on &lt;a href=&#34;https://github.com/stoically/syn-rsx&#34;&gt;syn-rsx&lt;/a&gt;) for its &lt;code&gt;view&lt;/code&gt; macro. Sycamore offers the choice of its own templating DSL or a builder syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template node cloning:&lt;/strong&gt; Leptos&#39;s &lt;code&gt;view&lt;/code&gt; macro compiles to a static HTML string and a set of instructions of how to assign its reactive values. This means that at runtime, Leptos can clone a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; node rather than calling &lt;code&gt;document.createElement()&lt;/code&gt; to create DOM nodes. This is a &lt;em&gt;significantly&lt;/em&gt; faster way of rendering components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read-write segregation:&lt;/strong&gt; Leptos, like Solid, encourages read-write segregation between signal getters and setters, so you end up accessing signals with tuples like &lt;code&gt;let (count, set_count) = create_signal(cx, 0);&lt;/code&gt; &lt;em&gt;(If you prefer or if it&#39;s more convenient for your API, you can use &lt;code&gt;create_rw_signal&lt;/code&gt; to give a unified read/write signal.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Signals are functions:&lt;/strong&gt; In Leptos, you can call a signal to access it rather than calling a specific method (so, &lt;code&gt;count()&lt;/code&gt; instead of &lt;code&gt;count.get()&lt;/code&gt;) This creates a more consistent mental model: accessing a reactive value is always a matter of calling a function. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let (count, set_count) = create_signal(cx, 0); // a signal&#xA;let double_count = move || count() * 2; // a derived signal&#xA;let memoized_count = create_memo(cx, move |_| count() * 3); // a memo&#xA;// all are accessed by calling them&#xA;assert_eq!(count(), 0);&#xA;assert_eq!(double_count(), 0);&#xA;assert_eq!(memoized_count(), 0);&#xA;&#xA;// this function can accept any of those signals&#xA;fn do_work_on_signal(my_signal: impl Fn() -&amp;gt; i32) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Signals and scopes are &lt;code&gt;&#39;static&lt;/code&gt;:&lt;/strong&gt; Both Leptos and Sycamore ease the pain of moving signals in closures (in particular, event listeners) by making them &lt;code&gt;Copy&lt;/code&gt;, to avoid the &lt;code&gt;{ let count = count.clone(); move |_| ... }&lt;/code&gt; that&#39;s very familiar in Rust UI code. Sycamore does this by using bump allocation to tie the lifetimes of its signals to its scopes: since references are &lt;code&gt;Copy&lt;/code&gt;, &lt;code&gt;&amp;amp;&#39;a Signal&amp;lt;T&amp;gt;&lt;/code&gt; can be moved into a closure. Leptos does this by using arena allocation and passing around indices: types like &lt;code&gt;ReadSignal&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;WriteSignal&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;Memo&amp;lt;T&amp;gt;&lt;/code&gt; are actually wrapper for indices into an arena. This means that both scopes and signals are both &lt;code&gt;Copy&lt;/code&gt; and &lt;code&gt;&#39;static&lt;/code&gt; in Leptos, which means that they can be moved easily into closures without adding lifetime complexity.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>