<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-01T01:28:44Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jef/streetmerchant</title>
    <updated>2025-02-01T01:28:44Z</updated>
    <id>tag:github.com,2025-02-01:/jef/streetmerchant</id>
    <link href="https://github.com/jef/streetmerchant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü§ñ The world&#39;s easiest, most powerful stock checker&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://jef.buzz/streetmerchant&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jef/streetmerchant/main/docs/assets/images/streetmerchant-banner.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;The world&#39;s easiest, most powerful stock checker&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;To get started, visit &lt;a href=&#34;https://jef.buzz/streetmerchant&#34;&gt;jef.buzz/streetmerchant&lt;/a&gt;&lt;/em&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;First and foremost, this service &lt;em&gt;will not&lt;/em&gt; automatically buy for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Checks stock continuously&lt;/strong&gt; -- runs 24/7, 365, looking for the items you want.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ready for checkout&lt;/strong&gt; -- ability to add to cart when available and even opens the browser for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notifications galore&lt;/strong&gt; -- when you&#39;re not by your computer, worry free with notifications to most platforms and devices when an item comes in stock.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;streetmerchant runs on Node.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/jef/streetmerchant.git&#xA;cd streetmerchant &amp;amp;&amp;amp; npm i &amp;amp;&amp;amp; npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information and customization, visit &lt;a href=&#34;https://jef.buzz/streetmerchant/getting-started&#34;&gt;jef.buzz/streetmerchant/getting-started&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>astral-sh/ruff</title>
    <updated>2025-02-01T01:28:44Z</updated>
    <id>tag:github.com,2025-02-01:/astral-sh/ruff</id>
    <link href="https://github.com/astral-sh/ruff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ruff&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#34; alt=&#34;Ruff&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/ruff.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/ruff.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/ruff.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff/actions&#34;&gt;&lt;img src=&#34;https://github.com/astral-sh/ruff/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/astral-sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://play.ruff.rs/&#34;&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An extremely fast Python linter and code formatter, written in Rust.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture align=&#34;center&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/1309177/232603514-c95e9b0f-6b31-43de-9a80-9e844173fd6a.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Shows a bar chart with benchmark results.&#34; src=&#34;https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Linting the CPython codebase from scratch.&lt;/i&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ö°Ô∏è 10-100x faster than existing linters (like Flake8) and formatters (like Black)&lt;/li&gt; &#xA; &lt;li&gt;üêç Installable via &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;code&gt;pyproject.toml&lt;/code&gt; support&lt;/li&gt; &#xA; &lt;li&gt;ü§ù Python 3.13 compatibility&lt;/li&gt; &#xA; &lt;li&gt;‚öñÔ∏è Drop-in parity with &lt;a href=&#34;https://docs.astral.sh/ruff/faq/#how-does-ruffs-linter-compare-to-flake8&#34;&gt;Flake8&lt;/a&gt;, isort, and &lt;a href=&#34;https://docs.astral.sh/ruff/faq/#how-does-ruffs-formatter-compare-to-black&#34;&gt;Black&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üì¶ Built-in caching, to avoid re-analyzing unchanged files&lt;/li&gt; &#xA; &lt;li&gt;üîß Fix support, for automatic error correction (e.g., automatically remove unused imports)&lt;/li&gt; &#xA; &lt;li&gt;üìè Over &lt;a href=&#34;https://docs.astral.sh/ruff/rules/&#34;&gt;800 built-in rules&lt;/a&gt;, with native re-implementations of popular Flake8 plugins, like flake8-bugbear&lt;/li&gt; &#xA; &lt;li&gt;‚å®Ô∏è First-party &lt;a href=&#34;https://docs.astral.sh/ruff/integrations/&#34;&gt;editor integrations&lt;/a&gt; for &lt;a href=&#34;https://github.com/astral-sh/ruff-vscode&#34;&gt;VS Code&lt;/a&gt; and &lt;a href=&#34;https://docs.astral.sh/ruff/editors/setup&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üåé Monorepo-friendly, with &lt;a href=&#34;https://docs.astral.sh/ruff/configuration/#config-file-discovery&#34;&gt;hierarchical and cascading configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ruff aims to be orders of magnitude faster than alternative tools while integrating more functionality behind a single, common interface.&lt;/p&gt; &#xA;&lt;p&gt;Ruff can be used to replace &lt;a href=&#34;https://pypi.org/project/flake8/&#34;&gt;Flake8&lt;/a&gt; (plus dozens of plugins), &lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/isort/&#34;&gt;isort&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/pydocstyle/&#34;&gt;pydocstyle&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/pyupgrade/&#34;&gt;pyupgrade&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/autoflake/&#34;&gt;autoflake&lt;/a&gt;, and more, all while executing tens or hundreds of times faster than any individual tool.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is extremely actively developed and used in major open-source projects like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/airflow&#34;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/superset&#34;&gt;Apache Superset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Hugging Face&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scipy/scipy&#34;&gt;SciPy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...and &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is backed by &lt;a href=&#34;https://astral.sh&#34;&gt;Astral&lt;/a&gt;. Read the &lt;a href=&#34;https://astral.sh/blog/announcing-astral-the-company-behind-ruff&#34;&gt;launch post&lt;/a&gt;, or the original &lt;a href=&#34;https://notes.crmarsh.com/python-tooling-could-be-much-much-faster&#34;&gt;project announcement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/tiangolo/status/1591912354882764802&#34;&gt;&lt;strong&gt;Sebasti√°n Ram√≠rez&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it&#39;s actually running and checking the code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/schrockn/status/1612615862904827904&#34;&gt;&lt;strong&gt;Nick Schrock&lt;/strong&gt;&lt;/a&gt;, founder of &lt;a href=&#34;https://www.elementl.com/&#34;&gt;Elementl&lt;/a&gt;, co-creator of &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4 cores on my M1. Running ruff against our &lt;em&gt;entire&lt;/em&gt; codebase takes .4 seconds.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bokeh/bokeh/pull/12605&#34;&gt;&lt;strong&gt;Bryan Van de Ven&lt;/strong&gt;&lt;/a&gt;, co-creator of &lt;a href=&#34;https://github.com/bokeh/bokeh/&#34;&gt;Bokeh&lt;/a&gt;, original author of &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;Conda&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of ~20s. This is an enormous quality of life improvement for local dev. It&#39;s fast enough that I added it as an actual commit hook, which is terrific.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/timothycrosley/status/1606420868514877440&#34;&gt;&lt;strong&gt;Timothy Crosley&lt;/strong&gt;&lt;/a&gt;, creator of &lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just switched my first project to Ruff. Only one downside so far: it&#39;s so fast I couldn&#39;t believe it was working till I intentionally introduced some errors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff/issues/465#issuecomment-1317400028&#34;&gt;&lt;strong&gt;Tim Abbott&lt;/strong&gt;&lt;/a&gt;, lead developer of &lt;a href=&#34;https://github.com/zulip/zulip&#34;&gt;Zulip&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is just ridiculously fast... &lt;code&gt;ruff&lt;/code&gt; is amazing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- End section: Overview --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#rules&#34;&gt;Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#whos-using-ruff&#34;&gt;Who&#39;s Using Ruff?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;a id=&#34;getting-started&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://docs.astral.sh/ruff/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Ruff is available as &lt;a href=&#34;https://pypi.org/project/ruff/&#34;&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/a&gt; on PyPI.&lt;/p&gt; &#xA;&lt;p&gt;Invoke Ruff directly with &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;&lt;code&gt;uvx&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uvx ruff check   # Lint all files in the current directory.&#xA;uvx ruff format  # Format all files in the current directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install Ruff with &lt;code&gt;uv&lt;/code&gt; (recommended), &lt;code&gt;pip&lt;/code&gt;, or &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# With uv.&#xA;uv tool install ruff@latest  # Install Ruff globally.&#xA;uv add --dev ruff            # Or add Ruff to your project.&#xA;&#xA;# With pip.&#xA;pip install ruff&#xA;&#xA;# With pipx.&#xA;pipx install ruff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with version &lt;code&gt;0.5.0&lt;/code&gt;, Ruff can be installed with our standalone installers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On macOS and Linux.&#xA;curl -LsSf https://astral.sh/ruff/install.sh | sh&#xA;&#xA;# On Windows.&#xA;powershell -c &#34;irm https://astral.sh/ruff/install.ps1 | iex&#34;&#xA;&#xA;# For a specific version.&#xA;curl -LsSf https://astral.sh/ruff/0.9.4/install.sh | sh&#xA;powershell -c &#34;irm https://astral.sh/ruff/0.9.4/install.ps1 | iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install Ruff via &lt;a href=&#34;https://formulae.brew.sh/formula/ruff&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://anaconda.org/conda-forge/ruff&#34;&gt;Conda&lt;/a&gt;, and with &lt;a href=&#34;https://docs.astral.sh/ruff/installation/&#34;&gt;a variety of other package managers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To run Ruff as a linter, try any of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff check                          # Lint all files in the current directory (and any subdirectories).&#xA;ruff check path/to/code/            # Lint all files in `/path/to/code` (and any subdirectories).&#xA;ruff check path/to/code/*.py        # Lint all `.py` files in `/path/to/code`.&#xA;ruff check path/to/code/to/file.py  # Lint `file.py`.&#xA;ruff check @arguments.txt           # Lint using an input file, treating its contents as newline-delimited command-line arguments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to run Ruff as a formatter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff format                          # Format all files in the current directory (and any subdirectories).&#xA;ruff format path/to/code/            # Format all files in `/path/to/code` (and any subdirectories).&#xA;ruff format path/to/code/*.py        # Format all `.py` files in `/path/to/code`.&#xA;ruff format path/to/code/to/file.py  # Format `file.py`.&#xA;ruff format @arguments.txt           # Format using an input file, treating its contents as newline-delimited command-line arguments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruff can also be used as a &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; hook via &lt;a href=&#34;https://github.com/astral-sh/ruff-pre-commit&#34;&gt;&lt;code&gt;ruff-pre-commit&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- repo: https://github.com/astral-sh/ruff-pre-commit&#xA;  # Ruff version.&#xA;  rev: v0.9.4&#xA;  hooks:&#xA;    # Run the linter.&#xA;    - id: ruff&#xA;      args: [ --fix ]&#xA;    # Run the formatter.&#xA;    - id: ruff-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ruff can also be used as a &lt;a href=&#34;https://github.com/astral-sh/ruff-vscode&#34;&gt;VS Code extension&lt;/a&gt; or with &lt;a href=&#34;https://docs.astral.sh/ruff/editors/setup&#34;&gt;various other editors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff can also be used as a &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Action&lt;/a&gt; via &lt;a href=&#34;https://github.com/astral-sh/ruff-action&#34;&gt;&lt;code&gt;ruff-action&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Ruff&#xA;on: [ push, pull_request ]&#xA;jobs:&#xA;  ruff:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v4&#xA;      - uses: astral-sh/ruff-action@v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;a id=&#34;configuration&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Ruff can be configured through a &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;ruff.toml&lt;/code&gt;, or &lt;code&gt;.ruff.toml&lt;/code&gt; file (see: &lt;a href=&#34;https://docs.astral.sh/ruff/configuration/&#34;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt;, or &lt;a href=&#34;https://docs.astral.sh/ruff/settings/&#34;&gt;&lt;em&gt;Settings&lt;/em&gt;&lt;/a&gt; for a complete list of all configuration options).&lt;/p&gt; &#xA;&lt;p&gt;If left unspecified, Ruff&#39;s default configuration is equivalent to the following &lt;code&gt;ruff.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Exclude a variety of commonly ignored directories.&#xA;exclude = [&#xA;    &#34;.bzr&#34;,&#xA;    &#34;.direnv&#34;,&#xA;    &#34;.eggs&#34;,&#xA;    &#34;.git&#34;,&#xA;    &#34;.git-rewrite&#34;,&#xA;    &#34;.hg&#34;,&#xA;    &#34;.ipynb_checkpoints&#34;,&#xA;    &#34;.mypy_cache&#34;,&#xA;    &#34;.nox&#34;,&#xA;    &#34;.pants.d&#34;,&#xA;    &#34;.pyenv&#34;,&#xA;    &#34;.pytest_cache&#34;,&#xA;    &#34;.pytype&#34;,&#xA;    &#34;.ruff_cache&#34;,&#xA;    &#34;.svn&#34;,&#xA;    &#34;.tox&#34;,&#xA;    &#34;.venv&#34;,&#xA;    &#34;.vscode&#34;,&#xA;    &#34;__pypackages__&#34;,&#xA;    &#34;_build&#34;,&#xA;    &#34;buck-out&#34;,&#xA;    &#34;build&#34;,&#xA;    &#34;dist&#34;,&#xA;    &#34;node_modules&#34;,&#xA;    &#34;site-packages&#34;,&#xA;    &#34;venv&#34;,&#xA;]&#xA;&#xA;# Same as Black.&#xA;line-length = 88&#xA;indent-width = 4&#xA;&#xA;# Assume Python 3.9&#xA;target-version = &#34;py39&#34;&#xA;&#xA;[lint]&#xA;# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.&#xA;select = [&#34;E4&#34;, &#34;E7&#34;, &#34;E9&#34;, &#34;F&#34;]&#xA;ignore = []&#xA;&#xA;# Allow fix for all enabled rules (when `--fix`) is provided.&#xA;fixable = [&#34;ALL&#34;]&#xA;unfixable = []&#xA;&#xA;# Allow unused variables when underscore-prefixed.&#xA;dummy-variable-rgx = &#34;^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$&#34;&#xA;&#xA;[format]&#xA;# Like Black, use double quotes for strings.&#xA;quote-style = &#34;double&#34;&#xA;&#xA;# Like Black, indent with spaces, rather than tabs.&#xA;indent-style = &#34;space&#34;&#xA;&#xA;# Like Black, respect magic trailing commas.&#xA;skip-magic-trailing-comma = false&#xA;&#xA;# Like Black, automatically detect the appropriate line ending.&#xA;line-ending = &#34;auto&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, in a &lt;code&gt;pyproject.toml&lt;/code&gt;, each section header should be prefixed with &lt;code&gt;tool.ruff&lt;/code&gt;. For example, &lt;code&gt;[lint]&lt;/code&gt; should be replaced with &lt;code&gt;[tool.ruff.lint]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some configuration options can be provided via dedicated command-line arguments, such as those related to rule enablement and disablement, file discovery, and logging level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff check --select F401 --select F403 --quiet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The remaining configuration options can be provided through a catch-all &lt;code&gt;--config&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ruff check --config &#34;lint.per-file-ignores = {&#39;some_file.py&#39; = [&#39;F841&#39;]}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To opt in to the latest lint rules, formatter style changes, interface updates, and more, enable &lt;a href=&#34;https://docs.astral.sh/ruff/rules/&#34;&gt;preview mode&lt;/a&gt; by setting &lt;code&gt;preview = true&lt;/code&gt; in your configuration file or passing &lt;code&gt;--preview&lt;/code&gt; on the command line. Preview mode enables a collection of unstable features that may change prior to stabilization.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;ruff help&lt;/code&gt; for more on Ruff&#39;s top-level commands, or &lt;code&gt;ruff help check&lt;/code&gt; and &lt;code&gt;ruff help format&lt;/code&gt; for more on the linting and formatting commands, respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;a id=&#34;rules&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;!-- Begin section: Rules --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ruff supports over 800 lint rules&lt;/strong&gt;, many of which are inspired by popular tools like Flake8, isort, pyupgrade, and others. Regardless of the rule&#39;s origin, Ruff re-implements every rule in Rust as a first-party feature.&lt;/p&gt; &#xA;&lt;p&gt;By default, Ruff enables Flake8&#39;s &lt;code&gt;F&lt;/code&gt; rules, along with a subset of the &lt;code&gt;E&lt;/code&gt; rules, omitting any stylistic rules that overlap with the use of a formatter, like &lt;code&gt;ruff format&lt;/code&gt; or &lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re just getting started with Ruff, &lt;strong&gt;the default rule set is a great place to start&lt;/strong&gt;: it catches a wide variety of common errors (like unused imports) with zero configuration.&lt;/p&gt; &#xA;&lt;!-- End section: Rules --&gt; &#xA;&lt;p&gt;Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code quality tools, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/autoflake/&#34;&gt;autoflake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/eradicate/&#34;&gt;eradicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-2020/&#34;&gt;flake8-2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-annotations/&#34;&gt;flake8-annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-async&#34;&gt;flake8-async&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-bandit/&#34;&gt;flake8-bandit&lt;/a&gt; (&lt;a href=&#34;https://github.com/astral-sh/ruff/issues/1646&#34;&gt;#1646&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-blind-except/&#34;&gt;flake8-blind-except&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-boolean-trap/&#34;&gt;flake8-boolean-trap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-bugbear/&#34;&gt;flake8-bugbear&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-builtins/&#34;&gt;flake8-builtins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-commas/&#34;&gt;flake8-commas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-comprehensions/&#34;&gt;flake8-comprehensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-copyright/&#34;&gt;flake8-copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-datetimez/&#34;&gt;flake8-datetimez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-debugger/&#34;&gt;flake8-debugger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-django/&#34;&gt;flake8-django&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-docstrings/&#34;&gt;flake8-docstrings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-eradicate/&#34;&gt;flake8-eradicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-errmsg/&#34;&gt;flake8-errmsg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-executable/&#34;&gt;flake8-executable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-future-annotations/&#34;&gt;flake8-future-annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-gettext/&#34;&gt;flake8-gettext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-implicit-str-concat/&#34;&gt;flake8-implicit-str-concat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaopalmeiro/flake8-import-conventions&#34;&gt;flake8-import-conventions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-logging/&#34;&gt;flake8-logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-logging-format/&#34;&gt;flake8-logging-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-no-pep420&#34;&gt;flake8-no-pep420&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-pie/&#34;&gt;flake8-pie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-print/&#34;&gt;flake8-print&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-pyi/&#34;&gt;flake8-pyi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-pytest-style/&#34;&gt;flake8-pytest-style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-quotes/&#34;&gt;flake8-quotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-raise/&#34;&gt;flake8-raise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-return/&#34;&gt;flake8-return&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-self/&#34;&gt;flake8-self&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-simplify/&#34;&gt;flake8-simplify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-slots/&#34;&gt;flake8-slots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-super/&#34;&gt;flake8-super&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-tidy-imports/&#34;&gt;flake8-tidy-imports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-todos/&#34;&gt;flake8-todos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-type-checking/&#34;&gt;flake8-type-checking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-use-pathlib/&#34;&gt;flake8-use-pathlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flynt/&#34;&gt;flynt&lt;/a&gt; (&lt;a href=&#34;https://github.com/astral-sh/ruff/issues/2102&#34;&gt;#2102&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/isort/&#34;&gt;isort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/mccabe/&#34;&gt;mccabe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pandas-vet/&#34;&gt;pandas-vet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pep8-naming/&#34;&gt;pep8-naming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pydocstyle/&#34;&gt;pydocstyle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pre-commit/pygrep-hooks&#34;&gt;pygrep-hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pylint-airflow/&#34;&gt;pylint-airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pyupgrade/&#34;&gt;pyupgrade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/tryceratops/&#34;&gt;tryceratops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/yesqa/&#34;&gt;yesqa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a complete enumeration of the supported rules, see &lt;a href=&#34;https://docs.astral.sh/ruff/rules/&#34;&gt;&lt;em&gt;Rules&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;a id=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and highly appreciated. To get started, check out the &lt;a href=&#34;https://docs.astral.sh/ruff/contributing/&#34;&gt;&lt;strong&gt;contributing guidelines&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join us on &lt;a href=&#34;https://discord.com/invite/astral-sh&#34;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;a id=&#34;support&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Having trouble? Check out the existing issues on &lt;a href=&#34;https://github.com/astral-sh/ruff/issues&#34;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, or feel free to &lt;a href=&#34;https://github.com/astral-sh/ruff/issues/new&#34;&gt;&lt;strong&gt;open a new one&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also ask for help on &lt;a href=&#34;https://discord.com/invite/astral-sh&#34;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;a id=&#34;acknowledgements&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ruff&#39;s linter draws on both the APIs and implementation details of many other tools in the Python ecosystem, especially &lt;a href=&#34;https://github.com/PyCQA/flake8&#34;&gt;Flake8&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/pyflakes&#34;&gt;Pyflakes&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/pycodestyle&#34;&gt;pycodestyle&lt;/a&gt;, &lt;a href=&#34;https://github.com/PyCQA/pydocstyle&#34;&gt;pydocstyle&lt;/a&gt;, &lt;a href=&#34;https://github.com/asottile/pyupgrade&#34;&gt;pyupgrade&lt;/a&gt;, and &lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, Ruff includes a &#34;direct&#34; Rust port of the corresponding tool. We&#39;re grateful to the maintainers of these tools for their work, and for all the value they&#39;ve provided to the Python community.&lt;/p&gt; &#xA;&lt;p&gt;Ruff&#39;s formatter is built on a fork of Rome&#39;s &lt;a href=&#34;https://github.com/rome/tools/tree/main/crates/rome_formatter&#34;&gt;&lt;code&gt;rome_formatter&lt;/code&gt;&lt;/a&gt;, and again draws on both API and implementation details from &lt;a href=&#34;https://github.com/rome/tools&#34;&gt;Rome&lt;/a&gt;, &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;Prettier&lt;/a&gt;, and &lt;a href=&#34;https://github.com/psf/black&#34;&gt;Black&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff&#39;s import resolver is based on the import resolution algorithm from &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is also influenced by a number of tools outside the Python ecosystem, like &lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;Clippy&lt;/a&gt; and &lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;ESLint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is the beneficiary of a large number of &lt;a href=&#34;https://github.com/astral-sh/ruff/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ruff is released under the MIT license.&lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s Using Ruff?&lt;a id=&#34;whos-using-ruff&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ruff is used by a number of major open-source projects and companies, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/albumentations-team/albumentations&#34;&gt;Albumentations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amazon (&lt;a href=&#34;https://github.com/aws/serverless-application-model&#34;&gt;AWS SAM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Anthropic (&lt;a href=&#34;https://github.com/anthropics/anthropic-sdk-python&#34;&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/airflow&#34;&gt;Apache Airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AstraZeneca (&lt;a href=&#34;https://github.com/AstraZeneca/magnus-core&#34;&gt;Magnus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-babel/babel&#34;&gt;Babel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Benchling (&lt;a href=&#34;https://github.com/benchling/refac&#34;&gt;Refac&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bokeh/bokeh&#34;&gt;Bokeh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CrowdCent (&lt;a href=&#34;https://github.com/crowdcent/numerblox&#34;&gt;NumerBlox&lt;/a&gt;) &#xA;  &lt;!-- typos: ignore --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;Cryptography (PyCA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CERN (&lt;a href=&#34;https://getindico.io/&#34;&gt;Indico&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iterative/dvc&#34;&gt;DVC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagger/dagger&#34;&gt;Dagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagster-io/dagster&#34;&gt;Dagster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Databricks (&lt;a href=&#34;https://github.com/mlflow/mlflow&#34;&gt;MLflow&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/langgenius/dify&#34;&gt;Dify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiangolo/fastapi&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/godotengine/godot&#34;&gt;Godot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/great-expectations/great_expectations&#34;&gt;Great Expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/encode/httpx&#34;&gt;HTTPX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/hatch&#34;&gt;Hatch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/home-assistant/core&#34;&gt;Home Assistant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hugging Face (&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Transformers&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/datasets&#34;&gt;Datasets&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;Diffusers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;IBM (&lt;a href=&#34;https://github.com/Qiskit/qiskit&#34;&gt;Qiskit&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ING Bank (&lt;a href=&#34;https://github.com/ing-bank/popmon&#34;&gt;popmon&lt;/a&gt;, &lt;a href=&#34;https://github.com/ing-bank/probatus&#34;&gt;probatus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibis-project/ibis&#34;&gt;Ibis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unifyai/ivy&#34;&gt;ivy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupyter-server/jupyter_server&#34;&gt;Jupyter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kraken.tech/&#34;&gt;Kraken Tech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://litestar.dev/&#34;&gt;Litestar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jerryjliu/llama_index&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix (&lt;a href=&#34;https://github.com/matrix-org/synapse&#34;&gt;Synapse&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oxsecurity/megalinter&#34;&gt;MegaLinter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Meltano (&lt;a href=&#34;https://github.com/meltano/meltano&#34;&gt;Meltano CLI&lt;/a&gt;, &lt;a href=&#34;https://github.com/meltano/sdk&#34;&gt;Singer SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft (&lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/onnxruntime&#34;&gt;ONNX Runtime&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/LightGBM&#34;&gt;LightGBM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Modern Treasury (&lt;a href=&#34;https://github.com/Modern-Treasury/modern-treasury-python&#34;&gt;Python SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mozilla (&lt;a href=&#34;https://github.com/mozilla/gecko-dev&#34;&gt;Firefox&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python/mypy&#34;&gt;Mypy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nautobot/nautobot&#34;&gt;Nautobot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Netflix (&lt;a href=&#34;https://github.com/Netflix/dispatch&#34;&gt;Dispatch&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neondatabase/neon&#34;&gt;Neon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nokia.com/&#34;&gt;Nokia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nonebot/nonebot2&#34;&gt;NoneBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyro-ppl/numpyro&#34;&gt;NumPyro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onnx/onnx&#34;&gt;ONNX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenBB-finance/OpenBBTerminal&#34;&gt;OpenBB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher&#34;&gt;Open Wine Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pdm-project/pdm&#34;&gt;PDM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/Paddle&#34;&gt;PaddlePaddle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-pillow/Pillow&#34;&gt;Pillow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-poetry/poetry&#34;&gt;Poetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pola-rs/polars&#34;&gt;Polars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PostHog/posthog&#34;&gt;PostHog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prefect (&lt;a href=&#34;https://github.com/PrefectHQ/prefect&#34;&gt;Python SDK&lt;/a&gt;, &lt;a href=&#34;https://github.com/PrefectHQ/marvin&#34;&gt;Marvin&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyinstaller/pyinstaller&#34;&gt;PyInstaller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pymc-devs/pymc/&#34;&gt;PyMC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pymc-labs/pymc-marketing&#34;&gt;PyMC-Marketing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytest-dev/pytest&#34;&gt;pytest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/pytorch&#34;&gt;PyTorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydantic/pydantic&#34;&gt;Pydantic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/pylint&#34;&gt;Pylint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyvista/pyvista&#34;&gt;PyVista&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reflex-dev/reflex&#34;&gt;Reflex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/online-ml/river&#34;&gt;River&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rippling.com&#34;&gt;Rippling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sansyrox/robyn&#34;&gt;Robyn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saleor/saleor&#34;&gt;Saleor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scale AI (&lt;a href=&#34;https://github.com/scaleapi/launch-python-client&#34;&gt;Launch SDK&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scipy/scipy&#34;&gt;SciPy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Snowflake (&lt;a href=&#34;https://github.com/Snowflake-Labs/snowcli&#34;&gt;SnowCLI&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sphinx-doc/sphinx&#34;&gt;Sphinx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DLR-RM/stable-baselines3&#34;&gt;Stable Baselines3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/encode/starlette&#34;&gt;Starlette&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/streamlit/streamlit&#34;&gt;Streamlit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Python&#34;&gt;The Algorithms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altair-viz/altair&#34;&gt;Vega-Altair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WordPress (&lt;a href=&#34;https://github.com/WordPress/openverse&#34;&gt;Openverse&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml&#34;&gt;ZenML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zulip/zulip&#34;&gt;Zulip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/build&#34;&gt;build (PyPA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/cibuildwheel&#34;&gt;cibuildwheel (PyPA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/delta-rs&#34;&gt;delta-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alteryx/featuretools&#34;&gt;featuretools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mesonbuild/meson-python&#34;&gt;meson-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wntrblm/nox&#34;&gt;nox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pypa/pip&#34;&gt;pip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Show Your Support&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Ruff, consider adding the Ruff badge to your project&#39;s &lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or &lt;code&gt;README.rst&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rst&#34;&gt;.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#xA;    :target: https://github.com/astral-sh/ruff&#xA;    :alt: Ruff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or, as HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&amp;gt;&amp;lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#34; alt=&#34;Ruff&#34; style=&#34;max-width:100%;&#34;&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;a id=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://github.com/astral-sh/ruff/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://astral.sh&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg?sanitize=true&#34; alt=&#34;Made by Astral&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>confluentinc/librdkafka</title>
    <updated>2025-02-01T01:28:44Z</updated>
    <id>tag:github.com,2025-02-01:/confluentinc/librdkafka</id>
    <link href="https://github.com/confluentinc/librdkafka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Apache Kafka C/C++ library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;librdkafka - the Apache Kafka C/C++ client library&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2022, &lt;a href=&#34;http://www.edenhill.se/&#34;&gt;Magnus Edenhill&lt;/a&gt;. 2023 &lt;a href=&#34;https://www.confluent.io/&#34;&gt;Confluent Inc.&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/confluentinc/librdkafka&#34;&gt;https://github.com/confluentinc/librdkafka&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;librdkafka&lt;/strong&gt; is a C library implementation of the &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt; protocol, providing Producer, Consumer and Admin clients. It was designed with message delivery reliability and high performance in mind, current figures exceed 1 million msgs/second for the producer and 3 million msgs/second for the consumer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;librdkafka&lt;/strong&gt; is licensed under the 2-clause BSD license.&lt;/p&gt; &#xA;&lt;p&gt;KAFKA is a registered trademark of The Apache Software Foundation and has been licensed for use by librdkafka. librdkafka has no affiliation with and is not endorsed by The Apache Software Foundation.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full Exactly-Once-Semantics (EOS) support&lt;/li&gt; &#xA; &lt;li&gt;High-level producer, including Idempotent and Transactional producers&lt;/li&gt; &#xA; &lt;li&gt;High-level balanced KafkaConsumer (requires broker &amp;gt;= 0.9)&lt;/li&gt; &#xA; &lt;li&gt;Simple (legacy) consumer&lt;/li&gt; &#xA; &lt;li&gt;Admin client&lt;/li&gt; &#xA; &lt;li&gt;Compression: snappy, gzip, lz4, zstd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/librdkafka/wiki/Using-SSL-with-librdkafka&#34;&gt;SSL&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/librdkafka/wiki/Using-SASL-with-librdkafka&#34;&gt;SASL&lt;/a&gt; (GSSAPI/Kerberos/SSPI, PLAIN, SCRAM, OAUTHBEARER) support&lt;/li&gt; &#xA; &lt;li&gt;Full list of &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/INTRODUCTION.md#supported-kips&#34;&gt;supported KIPs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Broker version support: &amp;gt;=0.8 (see &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/INTRODUCTION.md#broker-version-compatibility&#34;&gt;Broker version compatibility&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Guaranteed API stability for C &amp;amp; C++ APIs (ABI safety guaranteed for C)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/STATISTICS.md&#34;&gt;Statistics&lt;/a&gt; metrics&lt;/li&gt; &#xA; &lt;li&gt;Debian package: librdkafka1 and librdkafka-dev in Debian and Ubuntu&lt;/li&gt; &#xA; &lt;li&gt;RPM package: librdkafka and librdkafka-devel&lt;/li&gt; &#xA; &lt;li&gt;Gentoo package: dev-libs/librdkafka&lt;/li&gt; &#xA; &lt;li&gt;Portable: runs on Linux, MacOS X, Windows, Solaris, FreeBSD, AIX, ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Public API in &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/src/rdkafka.h&#34;&gt;C header&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/src-cpp/rdkafkacpp.h&#34;&gt;C++ header&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Introduction and manual in &lt;a href=&#34;https://github.com/confluentinc/librdkafka/raw/master/INTRODUCTION.md&#34;&gt;INTRODUCTION.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Configuration properties in &lt;a href=&#34;https://github.com/confluentinc/librdkafka/raw/master/CONFIGURATION.md&#34;&gt;CONFIGURATION.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Statistics metrics in &lt;a href=&#34;https://github.com/confluentinc/librdkafka/raw/master/STATISTICS.md&#34;&gt;STATISTICS.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/librdkafka/wiki&#34;&gt;Frequently asked questions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Step-by-step tutorial &lt;a href=&#34;https://developer.confluent.io/get-started/c/&#34;&gt;Getting Started with Apache Kafka and C/C++&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The &lt;code&gt;master&lt;/code&gt; branch is actively developed, use latest &lt;a href=&#34;https://github.com/confluentinc/librdkafka/releases&#34;&gt;release&lt;/a&gt; for production use.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Installing prebuilt packages&lt;/h2&gt; &#xA;&lt;p&gt;On Mac OSX, install librdkafka with homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install librdkafka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian and Ubuntu, install librdkafka from the Confluent APT repositories, see instructions &lt;a href=&#34;https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software&#34;&gt;here&lt;/a&gt; and then install librdkafka:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt install librdkafka-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On RedHat, CentOS, Fedora, install librdkafka from the Confluent YUM repositories, instructions &lt;a href=&#34;https://docs.confluent.io/current/installation/installing_cp/rhel-centos.html#get-the-software&#34;&gt;here&lt;/a&gt; and then install librdkafka:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yum install librdkafka-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, reference &lt;a href=&#34;https://www.nuget.org/packages/librdkafka.redist/&#34;&gt;librdkafka.redist&lt;/a&gt; NuGet package in your Visual Studio project.&lt;/p&gt; &#xA;&lt;p&gt;For other platforms, follow the source building instructions below.&lt;/p&gt; &#xA;&lt;h2&gt;Installing librdkafka using vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install librdkafka using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install vcpkg if not already installed&#xA;$ git clone https://github.com/Microsoft/vcpkg.git&#xA;$ cd vcpkg&#xA;$ ./bootstrap-vcpkg.sh&#xA;$ ./vcpkg integrate install&#xA;&#xA;# Install librdkafka&#xA;$ vcpkg install librdkafka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The librdkafka package in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;The GNU toolchain&#xA;GNU make&#xA;pthreads&#xA;zlib-dev (optional, for gzip compression support)&#xA;libssl-dev (optional, for SSL and SASL SCRAM support)&#xA;libsasl2-dev (optional, for SASL GSSAPI support)&#xA;libzstd-dev (optional, for ZStd compression support)&#xA;libcurl-dev (optional, for SASL OAUTHBEARER OIDC support)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Static linking of ZStd (requires zstd &amp;gt;= 1.2.1) in the producer enables encoding the original size in the compression frame header, which will speed up the consumer. Use &lt;code&gt;STATIC_LIB_libzstd=/path/to/libzstd.a ./configure --enable-static&lt;/code&gt; to enable static ZStd linking. MacOSX example: &lt;code&gt;STATIC_LIB_libzstd=$(brew ls -v zstd | grep libzstd.a$) ./configure --enable-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ./configure&#xA;  # Or, to automatically install dependencies using the system&#39;s package manager:&#xA;  # ./configure --install-deps&#xA;  # Or, build dependencies from source:&#xA;  # ./configure --install-deps --source-deps-only&#xA;&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/README.win32&#34;&gt;README.win32&lt;/a&gt; for instructions how to build on Windows with Microsoft Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/packaging/cmake/README.md&#34;&gt;CMake instructions&lt;/a&gt; for experimental CMake build (unsupported).&lt;/p&gt; &#xA;&lt;h2&gt;Usage in code&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.confluent.io/get-started/c/&#34;&gt;getting Started with Apache Kafka and C/C++&lt;/a&gt; for a basic tutorial.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/confluentinc/librdkafka/master/examples/&#34;&gt;examples directory&lt;/a&gt; for code using:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Producers: basic producers, idempotent producers, transactional producers.&lt;/li&gt; &#xA;   &lt;li&gt;Consumers: basic consumers, reading batches of messages.&lt;/li&gt; &#xA;   &lt;li&gt;Performance and latency testing tools.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/confluentinc/examples/tree/master/clients/cloud/c&#34;&gt;examples GitHub repo&lt;/a&gt; for code connecting to a cloud streaming data service based on Apache Kafka&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Link your program with &lt;code&gt;-lrdkafka&lt;/code&gt; (C) or &lt;code&gt;-lrdkafka++&lt;/code&gt; (C++).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Commercial support&lt;/h2&gt; &#xA;&lt;p&gt;Commercial support is available from &lt;a href=&#34;https://www.confluent.io/&#34;&gt;Confluent Inc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Only the &lt;a href=&#34;https://github.com/confluentinc/librdkafka/releases&#34;&gt;latest official release&lt;/a&gt; is supported for community members.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;File bug reports and feature requests using &lt;a href=&#34;https://github.com/confluentinc/librdkafka/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Questions and discussions are welcome on the &lt;a href=&#34;https://github.com/confluentinc/librdkafka/discussions&#34;&gt;Discussions&lt;/a&gt; forum, and on the &lt;a href=&#34;https://launchpass.com/confluentcommunity&#34;&gt;Confluent Community slack&lt;/a&gt; #clients channel.&lt;/p&gt; &#xA;&lt;h1&gt;Language bindings&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C#/.NET: &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-dotnet&#34;&gt;confluent-kafka-dotnet&lt;/a&gt; (based on &lt;a href=&#34;https://github.com/ah-/rdkafka-dotnet&#34;&gt;rdkafka-dotnet&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;C++: &lt;a href=&#34;https://github.com/mfontanini/cppkafka&#34;&gt;cppkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C++: &lt;a href=&#34;https://github.com/Morgan-Stanley/modern-cpp-kafka&#34;&gt;modern-cpp-kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp: &lt;a href=&#34;https://github.com/SahilKang/cl-rdkafka&#34;&gt;cl-rdkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;D (C-like): &lt;a href=&#34;https://github.com/DlangApache/librdkafka/&#34;&gt;librdkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;D (C++-like): &lt;a href=&#34;https://github.com/tamediadigital/librdkafka-d&#34;&gt;librdkafkad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang: &lt;a href=&#34;https://github.com/silviucpp/erlkaf&#34;&gt;erlkaf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-go&#34;&gt;confluent-kafka-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haskell (kafka, conduit, avro, schema registry): &lt;a href=&#34;https://github.com/haskell-works/hw-kafka&#34;&gt;hw-kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin Native: &lt;a href=&#34;https://github.com/icemachined/kafka-kotlin-native&#34;&gt;Kafka-Kotlin-Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lua: &lt;a href=&#34;https://github.com/mistsv/luardkafka&#34;&gt;luardkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js: &lt;a href=&#34;https://github.com/Blizzard/node-rdkafka&#34;&gt;node-rdkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OCaml: &lt;a href=&#34;https://github.com/didier-wenzek/ocaml-kafka&#34;&gt;ocaml-kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Perl: &lt;a href=&#34;https://github.com/bookingcom/perl-Net-Kafka&#34;&gt;Net::Kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP: &lt;a href=&#34;https://github.com/arnaud-lb/php-rdkafka&#34;&gt;php-rdkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP: &lt;a href=&#34;https://github.com/php-kafka/php-simple-kafka-client&#34;&gt;php-simple-kafka-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-python&#34;&gt;confluent-kafka-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://github.com/Parsely/pykafka&#34;&gt;PyKafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/reiseburo/hermann&#34;&gt;Hermann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/appsignal/rdkafka-ruby&#34;&gt;rdkafka-ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust: &lt;a href=&#34;https://github.com/fede1024/rust-rdkafka&#34;&gt;rust-rdkafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tcl: &lt;a href=&#34;https://github.com/flightaware/kafkatcl&#34;&gt;KafkaTcl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shell: &lt;a href=&#34;https://github.com/edenhill/kafkacat&#34;&gt;kafkacat&lt;/a&gt; - Apache Kafka command line tool&lt;/li&gt; &#xA; &lt;li&gt;Swift: &lt;a href=&#34;https://github.com/PerfectlySoft/Perfect-Kafka&#34;&gt;Perfect-Kafka&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/confluentinc/librdkafka/wiki/Powered-by-librdkafka&#34;&gt;Powered by librdkafka&lt;/a&gt; for an incomplete list of librdkafka users.&lt;/p&gt;</summary>
  </entry>
</feed>