<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-13T01:29:46Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>open-telemetry/opentelemetry-go</title>
    <updated>2025-07-13T01:29:46Z</updated>
    <id>tag:github.com,2025-07-13:/open-telemetry/opentelemetry-go</id>
    <link href="https://github.com/open-telemetry/opentelemetry-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenTelemetry Go API and SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTelemetry-Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/open-telemetry/opentelemetry-go/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/open-telemetry/opentelemetry-go?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-go/coverage.svg?branch=main&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/go.opentelemetry.io/otel&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/go.opentelemetry.io/otel&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/go.opentelemetry.io/otel&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/go.opentelemetry.io/otel&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scorecard.dev/viewer/?uri=github.com/open-telemetry/opentelemetry-go&#34;&gt;&lt;img src=&#34;https://api.scorecard.dev/projects/github.com/open-telemetry/opentelemetry-go/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.bestpractices.dev/projects/9996&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/9996/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://issues.oss-fuzz.com/issues?q=project:opentelemetry-go&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry-go.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B162%2Fgithub.com%2Fopen-telemetry%2Fopentelemetry-go?ref=badge_shield&amp;amp;issueType=license&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B162%2Fgithub.com%2Fopen-telemetry%2Fopentelemetry-go.svg?type=shield&amp;amp;issueType=license&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud-native.slack.com/archives/C01NPAXACKT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@cncf/otel--go-brightgreen.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenTelemetry-Go is the &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; implementation of &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt;. It provides a set of APIs to directly measure performance and behavior of your software and send this data to observability platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Signal&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metrics&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;a href=&#34;https://github.com/orgs/open-telemetry/projects/43&#34;&gt;^1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Progress and status specific to this repository is tracked in our &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go/projects&#34;&gt;project boards&lt;/a&gt; and &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go/milestones&#34;&gt;milestones&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Project versioning information and stability guarantees can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/VERSIONING.md&#34;&gt;versioning documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;OpenTelemetry-Go ensures compatibility with the current supported versions of the &lt;a href=&#34;https://golang.org/doc/devel/release#policy&#34;&gt;Go language&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Each major Go release is supported until there are two newer major releases. For example, Go 1.5 was supported until the Go 1.7 release, and Go 1.6 was supported until the Go 1.8 release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For versions of Go that are no longer supported upstream, opentelemetry-go will stop ensuring compatibility with these versions in the following manner:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A minor release of opentelemetry-go will be made to add support for the new supported release of Go.&lt;/li&gt; &#xA; &lt;li&gt;The following minor release of opentelemetry-go will remove compatibility testing for the oldest (now archived upstream) version of Go. This, and future, releases of opentelemetry-go may include features only supported by the currently supported versions of Go.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, this project supports the following environments.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Go Version&lt;/th&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;386&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;386&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;arm64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;arm64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS 13&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS 13&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;arm64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;arm64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;1.24&lt;/td&gt; &#xA;   &lt;td&gt;386&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;1.23&lt;/td&gt; &#xA;   &lt;td&gt;386&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;While this project should work for other systems, no compatibility guarantees are made for those systems currently.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can find a getting started guide on &lt;a href=&#34;https://opentelemetry.io/docs/languages/go/getting-started/&#34;&gt;opentelemetry.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;OpenTelemetry&#39;s goal is to provide a single set of APIs to capture distributed traces and metrics from your application and send them to an observability platform. This project allows you to do just that for applications written in Go. There are two steps to this process: instrument your application, and configure an exporter.&lt;/p&gt; &#xA;&lt;h3&gt;Instrumentation&lt;/h3&gt; &#xA;&lt;p&gt;To start capturing distributed traces and metric events from your application it first needs to be instrumented. The easiest way to do this is by using an instrumentation library for your code. Be sure to check out &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation&#34;&gt;the officially supported instrumentation libraries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to extend the telemetry an instrumentation library provides or want to build your own instrumentation for your application directly you will need to use the &lt;a href=&#34;https://pkg.go.dev/go.opentelemetry.io/otel&#34;&gt;Go otel&lt;/a&gt; package. The &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/examples&#34;&gt;examples&lt;/a&gt; are a good way to see some practical uses of this process.&lt;/p&gt; &#xA;&lt;h3&gt;Export&lt;/h3&gt; &#xA;&lt;p&gt;Now that your application is instrumented to collect telemetry, it needs an export pipeline to send that telemetry to an observability platform.&lt;/p&gt; &#xA;&lt;p&gt;All officially supported exporters for the OpenTelemetry project are contained in the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters&#34;&gt;exporters directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Exporter&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Logs&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Metrics&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Traces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/otlp/&#34;&gt;OTLP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/prometheus/&#34;&gt;Prometheus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/stdout/&#34;&gt;stdout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/exporters/zipkin/&#34;&gt;Zipkin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-go/main/CONTRIBUTING.md&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pybind/pybind11</title>
    <updated>2025-07-13T01:29:46Z</updated>
    <id>tag:github.com,2025-07-13:/pybind/pybind11</id>
    <link href="https://github.com/pybind/pybind11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamless operability between C++11 and Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: &lt;a href=&#34;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&#34;&gt;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&lt;/a&gt; :alt: pybind11 logo&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pybind11 (v3) — Seamless interoperability between C++ and Python&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;|Latest Documentation Status| |Stable Documentation Status| |Gitter chat| |GitHub Discussions|&lt;/p&gt; &#xA;&lt;p&gt;|CI| |Build status| |SPEC 4 — Using and Creating Nightly Wheels|&lt;/p&gt; &#xA;&lt;p&gt;|Repology| |PyPI package| |Conda-forge| |Python Versions|&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Setuptools example &amp;lt;https://github.com/pybind/python_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Scikit-build example &amp;lt;https://github.com/pybind/scikit_build_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;CMake example &amp;lt;https://github.com/pybind/cmake_example&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;.. start&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pybind11&lt;/strong&gt; is a lightweight header-only library that exposes C++ types in Python and vice versa, mainly to create Python bindings of existing C++ code. Its goals and syntax are similar to the excellent &lt;code&gt;Boost.Python &amp;lt;http://www.boost.org/doc/libs/1_58_0/libs/python/doc/&amp;gt;&lt;/code&gt;_ library by David Abrahams: to minimize boilerplate code in traditional extension modules by inferring type information using compile-time introspection.&lt;/p&gt; &#xA;&lt;p&gt;The main issue with Boost.Python—and the reason for creating such a similar project—is Boost. Boost is an enormously large and complex suite of utility libraries that works with almost every C++ compiler in existence. This compatibility has its cost: arcane template tricks and workarounds are necessary to support the oldest and buggiest of compiler specimens. Now that C++11-compatible compilers are widely available, this heavy machinery has become an excessively large and unnecessary dependency.&lt;/p&gt; &#xA;&lt;p&gt;Think of this library as a tiny self-contained version of Boost.Python with everything stripped away that isn&#39;t relevant for binding generation. Without comments, the core header files only require ~4K lines of code and depend on Python (CPython 3.8+, PyPy, or GraalPy) and the C++ standard library. This compact implementation was possible thanks to some C++11 language features (specifically: tuples, lambda functions and variadic templates). Since its creation, this library has grown beyond Boost.Python in many ways, leading to dramatically simpler binding code in many common situations.&lt;/p&gt; &#xA;&lt;p&gt;Tutorial and reference documentation is provided at &lt;code&gt;pybind11.readthedocs.io &amp;lt;https://pybind11.readthedocs.io/en/latest&amp;gt;&lt;/code&gt;&lt;em&gt;. A PDF version of the manual is available &lt;code&gt;here &amp;lt;https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/&amp;gt;&lt;/code&gt;&lt;/em&gt;. And the source code is always available at &lt;code&gt;github.com/pybind/pybind11 &amp;lt;https://github.com/pybind/pybind11&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Core features&lt;/h2&gt; &#xA;&lt;p&gt;pybind11 can map the following core C++ features to Python:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions accepting and returning custom data structures per value, reference, or pointer&lt;/li&gt; &#xA; &lt;li&gt;Instance methods and static methods&lt;/li&gt; &#xA; &lt;li&gt;Overloaded functions&lt;/li&gt; &#xA; &lt;li&gt;Instance attributes and static attributes&lt;/li&gt; &#xA; &lt;li&gt;Arbitrary exception types&lt;/li&gt; &#xA; &lt;li&gt;Enumerations&lt;/li&gt; &#xA; &lt;li&gt;Callbacks&lt;/li&gt; &#xA; &lt;li&gt;Iterators and ranges&lt;/li&gt; &#xA; &lt;li&gt;Custom operators&lt;/li&gt; &#xA; &lt;li&gt;Single and multiple inheritance&lt;/li&gt; &#xA; &lt;li&gt;STL data structures&lt;/li&gt; &#xA; &lt;li&gt;Smart pointers with reference counting like &lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Internal references with correct reference counting&lt;/li&gt; &#xA; &lt;li&gt;C++ classes with virtual (and pure virtual) methods can be extended in Python&lt;/li&gt; &#xA; &lt;li&gt;Integrated NumPy support (NumPy 2 requires pybind11 2.12+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goodies&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the core functionality, pybind11 provides some extra goodies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CPython 3.8+, PyPy3 7.3.17+, and GraalPy 24.1+ are supported with an implementation-agnostic interface (see older versions for older CPython and PyPy versions).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is possible to bind C++11 lambda functions with captured variables. The lambda capture data is stored inside the resulting Python function object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pybind11 uses C++11 move constructors and move assignment operators whenever possible to efficiently transfer custom data types.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s easy to expose the internal storage of custom data types through Pythons&#39; buffer protocols. This is handy e.g.&amp;nbsp;for fast conversion between C++ matrix classes like Eigen and NumPy without expensive copy operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pybind11 can automatically vectorize functions so that they are transparently applied to all entries of one or more NumPy array arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python&#39;s slice-based access and assignment operations can be supported with just a few lines of code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Everything is contained in just a few header files; there is no need to link against any additional libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Binaries are generally smaller by a factor of at least 2 compared to equivalent bindings generated by Boost.Python. A recent pybind11 conversion of PyRosetta, an enormous Boost.Python binding project, &lt;code&gt;reported &amp;lt;https://graylab.jhu.edu/Sergey/2016.RosettaCon/PyRosetta-4.pdf&amp;gt;&lt;/code&gt;_ a binary size reduction of &lt;strong&gt;5.4x&lt;/strong&gt; and compile time reduction by &lt;strong&gt;5.8x&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Function signatures are precomputed at compile time (using &lt;code&gt;constexpr&lt;/code&gt;), leading to smaller binaries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With little extra effort, C++ types can be pickled and unpickled similar to regular Python objects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported compilers&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clang/LLVM 3.3 or newer (for Apple Xcode&#39;s clang, this is 5.0.0 or newer)&lt;/li&gt; &#xA; &lt;li&gt;GCC 4.8 or newer&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2022 or newer (2019 probably works, but was dropped in CI)&lt;/li&gt; &#xA; &lt;li&gt;Intel classic C++ compiler 18 or newer (ICC 20.2 tested in CI)&lt;/li&gt; &#xA; &lt;li&gt;Cygwin/GCC (previously tested on 2.5.1)&lt;/li&gt; &#xA; &lt;li&gt;NVCC (CUDA 11.0 tested in CI)&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA PGI (20.9 tested in CI)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows, Linux, macOS, and iOS&lt;/li&gt; &#xA; &lt;li&gt;CPython 3.8+, Pyodide, PyPy, and GraalPy&lt;/li&gt; &#xA; &lt;li&gt;C++11, C++14, C++17, C++20, and C++23&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This project was created by &lt;code&gt;Wenzel Jakob &amp;lt;http://rgl.epfl.ch/people/wjakob&amp;gt;&lt;/code&gt;_. Significant features and/or improvements to the code were contributed by Jonas Adler, Lori A. Burns, Sylvain Corlay, Eric Cousineau, Aaron Gokaslan, Ralf Grosse-Kunstleve, Trent Houliston, Axel Huebl, @hulucc, Yannick Jadoul, Sergey Lyskov, Johan Mabille, Tomasz Miąsko, Dean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, Pim Schellart, Henry Schreiner, Ivan Smirnov, Dustin Spicuzza, Boris Staletic, Ethan Steinberg, Patrick Stewart, Ivor Wanders, and Xiaofei Wang.&lt;/p&gt; &#xA;&lt;p&gt;We thank Google for a generous financial contribution to the continuous integration infrastructure used by this project.&lt;/p&gt; &#xA;&lt;p&gt;Contributing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;See the `contributing&#xA;guide &amp;lt;https://github.com/pybind/pybind11/blob/master/.github/CONTRIBUTING.md&amp;gt;`_&#xA;for information on building and contributing to pybind11.&#xA;&#xA;License&#xA;~~~~~~~&#xA;&#xA;pybind11 is provided under a BSD-style license that can be found in the&#xA;`LICENSE &amp;lt;https://github.com/pybind/pybind11/blob/master/LICENSE&amp;gt;`_&#xA;file. By using, distributing, or contributing to this project, you agree&#xA;to the terms and conditions of this license.&#xA;&#xA;.. |Latest Documentation Status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest&#xA;   :target: http://pybind11.readthedocs.org/en/latest&#xA;.. |Stable Documentation Status| image:: https://img.shields.io/badge/docs-stable-blue.svg&#xA;   :target: http://pybind11.readthedocs.org/en/stable&#xA;.. |Gitter chat| image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg&#xA;   :target: https://gitter.im/pybind/Lobby&#xA;.. |CI| image:: https://github.com/pybind/pybind11/workflows/CI/badge.svg&#xA;   :target: https://github.com/pybind/pybind11/actions&#xA;.. |Build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true&#xA;   :target: https://ci.appveyor.com/project/wjakob/pybind11&#xA;.. |PyPI package| image:: https://img.shields.io/pypi/v/pybind11.svg&#xA;   :target: https://pypi.org/project/pybind11/&#xA;.. |Conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg&#xA;   :target: https://github.com/conda-forge/pybind11-feedstock&#xA;.. |Repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg&#xA;   :target: https://repology.org/project/python:pybind11/versions&#xA;.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg&#xA;   :target: https://pypi.org/project/pybind11/&#xA;.. |GitHub Discussions| image:: https://img.shields.io/static/v1?label=Discussions&amp;amp;message=Ask&amp;amp;color=blue&amp;amp;logo=github&#xA;   :target: https://github.com/pybind/pybind11/discussions&#xA;.. |SPEC 4 — Using and Creating Nightly Wheels| image:: https://img.shields.io/badge/SPEC-4-green?labelColor=%23004811&amp;amp;color=%235CA038&#xA;   :target: https://scientific-python.org/specs/spec-0004/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>