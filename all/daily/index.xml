<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-07T01:30:42Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>borisdayma/dalle-mini</title>
    <updated>2022-06-07T01:30:42Z</updated>
    <id>tag:github.com,2022-06-07:/borisdayma/dalle-mini</id>
    <link href="https://github.com/borisdayma/dalle-mini" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DALL·E Mini - Generate images from a text prompt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DALL·E Mini&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/xBPBXfcFHd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/823813159592001537?color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Join us on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Generate images from a text prompt&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/borisdayma/dalle-mini/raw/main/img/logo.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;Our logo was generated with DALL·E mini using the prompt &#34;logo of an armchair in the shape of an avocado&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use it?&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to use DALL·E mini to create your own images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;use &lt;a href=&#34;https://huggingface.co/spaces/dalle-mini/dalle-mini&#34;&gt;the official DALL·E Mini demo&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;experiment with the pipeline step by step through our &lt;a href=&#34;https://raw.githubusercontent.com/borisdayma/dalle-mini/main/tools/inference/inference_pipeline.ipynb&#34;&gt;&lt;code&gt;inference pipeline notebook&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/borisdayma/dalle-mini/blob/main/tools/inference/inference_pipeline.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;spin off your own app with &lt;a href=&#34;https://github.com/saharmor/dalle-playground&#34;&gt;DALL-E Playground repository&lt;/a&gt; (thanks &lt;a href=&#34;https://twitter.com/theaievangelist&#34;&gt;Sahar&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;try &lt;a href=&#34;https://github.com/jina-ai/dalle-flow&#34;&gt;DALL·E Flow&lt;/a&gt; project for generating, diffusion, upscaling in a Human-in-the-Loop workflow.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/jina-ai/dalle-flow/blob/main/client.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://wandb.ai/dalle-mini/dalle-mini/reports/DALL-E-mini-Generate-images-from-any-text-prompt--VmlldzoyMDE4NDAy&#34;&gt;our report&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Join the community on the &lt;a href=&#34;https://discord.gg/xBPBXfcFHd&#34;&gt;LAION Discord&lt;/a&gt;. Any contribution is welcome, from reporting issues to proposing fixes/improvements or testing the model with cool prompts!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies Installation&lt;/h3&gt; &#xA;&lt;p&gt;For inference only, use &lt;code&gt;pip install git+https://github.com/borisdayma/dalle-mini.git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For development, clone the repo and use &lt;code&gt;pip install -e &#34;.[dev]&#34;&lt;/code&gt;. Before making a PR, check style with &lt;code&gt;make style&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Training of DALL·E mini&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/borisdayma/dalle-mini/main/tools/train/train.py&#34;&gt;&lt;code&gt;tools/train/train.py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also adjust the &lt;a href=&#34;https://docs.wandb.ai/guides/sweeps&#34;&gt;sweep configuration file&lt;/a&gt; if you need to perform a hyperparameter search.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Where to find the latest models?&lt;/h3&gt; &#xA;&lt;p&gt;Trained models are on 🤗 Model Hub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/dalle-mini/vqgan_imagenet_f16_16384&#34;&gt;VQGAN-f16-16384&lt;/a&gt; for encoding/decoding images&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/flax-community/dalle-mini&#34;&gt;DALL·E mini&lt;/a&gt; for generating images from a text prompt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where does the logo come from?&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;armchair in the shape of an avocado&#34; was used by OpenAI when releasing DALL·E to illustrate the model&#39;s capabilities. Having successful predictions on this prompt represents a big milestone to us.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤗 Hugging Face for organizing &lt;a href=&#34;https://github.com/huggingface/transformers/tree/master/examples/research_projects/jax-projects&#34;&gt;the FLAX/JAX community week&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google &lt;a href=&#34;https://sites.research.google/trc/&#34;&gt;TPU Research Cloud (TRC) program&lt;/a&gt; for providing computing resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wandb.com/&#34;&gt;Weights &amp;amp; Biases&lt;/a&gt; for providing the infrastructure for experiment tracking and model management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors &amp;amp; Contributors&lt;/h2&gt; &#xA;&lt;p&gt;DALL·E mini was initially developed by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/borisdayma&#34;&gt;Boris Dayma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patil-suraj&#34;&gt;Suraj Patil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pcuenca&#34;&gt;Pedro Cuenca&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/khalidsaifullaah&#34;&gt;Khalid Saifullah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmabraham&#34;&gt;Tanishq Abraham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lkhphuc&#34;&gt;Phúc Lê Khắc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukemelas&#34;&gt;Luke Melas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghosh-r&#34;&gt;Ritobrata Ghosh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many thanks to the people who helped make it better:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://discord.gg/xBPBXfcFHd&#34;&gt;DALLE-Pytorch&lt;/a&gt; and &lt;a href=&#34;https://www.eleuther.ai/&#34;&gt;EleutherAI&lt;/a&gt; communities for testing and exchanging cool ideas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rohan-anil&#34;&gt;Rohan Anil&lt;/a&gt; for adding Distributed Shampoo optimizer and always giving great suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains&#34;&gt;Phil Wang&lt;/a&gt; has provided a lot of cool implementations of transformer variants and gives interesting insights with &lt;a href=&#34;https://github.com/lucidrains/x-transformers&#34;&gt;x-transformers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crowsonkb&#34;&gt;Katherine Crowson&lt;/a&gt; for &lt;a href=&#34;https://twitter.com/RiversHaveWings/status/1478093658716966912&#34;&gt;super conditioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://gradio.app/&#34;&gt;Gradio team&lt;/a&gt; made an amazing UI for our app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citing DALL·E mini&lt;/h2&gt; &#xA;&lt;p&gt;If you find DALL·E mini useful in your research or wish to refer, please use the following BibTeX entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{Dayma_DALL·E_Mini_2021,&#xA;      author = {Dayma, Boris and Patil, Suraj and Cuenca, Pedro and Saifullah, Khalid and Abraham, Tanishq and Lê Khắc, Phúc and Melas, Luke and Ghosh, Ritobrata},&#xA;      doi = {10.5281/zenodo.5146400},&#xA;      month = {7},&#xA;      title = {DALL·E Mini},&#xA;      url = {https://github.com/borisdayma/dalle-mini},&#xA;      year = {2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Original DALL·E from &#34;&lt;a href=&#34;https://arxiv.org/abs/2102.12092&#34;&gt;Zero-Shot Text-to-Image Generation&lt;/a&gt;&#34; with image quantization from &#34;&lt;a href=&#34;https://arxiv.org/abs/2103.00020&#34;&gt;Learning Transferable Visual Models From Natural Language Supervision&lt;/a&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Image encoder from &#34;&lt;a href=&#34;https://arxiv.org/abs/2012.09841v2&#34;&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/a&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Sequence to sequence model based on &#34;&lt;a href=&#34;https://arxiv.org/abs/1910.13461v1&#34;&gt;BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension&lt;/a&gt;&#34; with implementation of a few variants:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/2002.05202&#34;&gt;GLU Variants Improve Transformer&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/2203.00555&#34;&gt;Deepnet: Scaling Transformers to 1,000 Layers&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/2110.09456&#34;&gt;NormFormer: Improved Transformer Pretraining with Extra Normalization&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/2103.14030&#34;&gt;Swin Transformer: Hierarchical Vision Transformer using Shifted Windows&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/2105.13290v2&#34;&gt;CogView: Mastering Text-to-Image Generation via Transformers&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/1910.07467&#34;&gt;Root Mean Square Layer Normalization&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://arxiv.org/abs/2110.11773&#34;&gt;Sinkformers: Transformers with Doubly Stochastic Attention&lt;/a&gt;&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main optimizer (Distributed Shampoo) from &#34;&lt;a href=&#34;https://arxiv.org/abs/2002.09018&#34;&gt;Scalable Second Order Optimization for Deep Learning&lt;/a&gt;&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Citations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={Zero-Shot Text-to-Image Generation}, &#xA;  author={Aditya Ramesh and Mikhail Pavlov and Gabriel Goh and Scott Gray and Chelsea Voss and Alec Radford and Mark Chen and Ilya Sutskever},&#xA;  year={2021},&#xA;  eprint={2102.12092},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={Learning Transferable Visual Models From Natural Language Supervision}, &#xA;  author={Alec Radford and Jong Wook Kim and Chris Hallacy and Aditya Ramesh and Gabriel Goh and Sandhini Agarwal and Girish Sastry and Amanda Askell and Pamela Mishkin and Jack Clark and Gretchen Krueger and Ilya Sutskever},&#xA;  year={2021},&#xA;  eprint={2103.00020},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={Taming Transformers for High-Resolution Image Synthesis}, &#xA;  author={Patrick Esser and Robin Rombach and Björn Ommer},&#xA;  year={2021},&#xA;  eprint={2012.09841},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension}, &#xA;  author={Mike Lewis and Yinhan Liu and Naman Goyal and Marjan Ghazvininejad and Abdelrahman Mohamed and Omer Levy and Ves Stoyanov and Luke Zettlemoyer},&#xA;  year={2019},&#xA;  eprint={1910.13461},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={Scalable Second Order Optimization for Deep Learning},&#xA;  author={Rohan Anil and Vineet Gupta and Tomer Koren and Kevin Regan and Yoram Singer},&#xA;  year={2021},&#xA;  eprint={2002.09018},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={GLU Variants Improve Transformer},&#xA;  author={Noam Shazeer},&#xA;  year={2020},&#xA;  url={https://arxiv.org/abs/2002.05202}    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; @misc{&#xA;  title={DeepNet: Scaling transformers to 1,000 layers},&#xA;  author={Wang, Hongyu and Ma, Shuming and Dong, Li and Huang, Shaohan and Zhang, Dongdong and Wei, Furu},&#xA;  year={2022},&#xA;  eprint={2203.00555}&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.LG}&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title={NormFormer: Improved Transformer Pretraining with Extra Normalization},&#xA;  author={Sam Shleifer and Jason Weston and Myle Ott},&#xA;  year={2021},&#xA;  eprint={2110.09456},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@inproceedings{&#xA;  title={Swin Transformer V2: Scaling Up Capacity and Resolution}, &#xA;  author={Ze Liu and Han Hu and Yutong Lin and Zhuliang Yao and Zhenda Xie and Yixuan Wei and Jia Ning and Yue Cao and Zheng Zhang and Li Dong and Furu Wei and Baining Guo},&#xA;  booktitle={International Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title = {CogView: Mastering Text-to-Image Generation via Transformers},&#xA;  author = {Ming Ding and Zhuoyi Yang and Wenyi Hong and Wendi Zheng and Chang Zhou and Da Yin and Junyang Lin and Xu Zou and Zhou Shao and Hongxia Yang and Jie Tang},&#xA;  year = {2021},&#xA;  eprint = {2105.13290},&#xA;  archivePrefix = {arXiv},&#xA;  primaryClass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title = {Root Mean Square Layer Normalization},&#xA;  author = {Biao Zhang and Rico Sennrich},&#xA;  year = {2019},&#xA;  eprint = {1910.07467},&#xA;  archivePrefix = {arXiv},&#xA;  primaryClass = {cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title = {Sinkformers: Transformers with Doubly Stochastic Attention},&#xA;  url = {https://arxiv.org/abs/2110.11773},&#xA;  author = {Sander, Michael E. and Ablin, Pierre and Blondel, Mathieu and Peyré, Gabriel},&#xA;  publisher = {arXiv},&#xA;  year = {2021},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@misc{&#xA;  title = {Smooth activations and reproducibility in deep networks},&#xA;  url = {https://arxiv.org/abs/2010.09931},&#xA;  author = {Shamir, Gil I. and Lin, Dong and Coviello, Lorenzo},&#xA;  publisher = {arXiv},&#xA;  year = {2020},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MarlinFirmware/Marlin</title>
    <updated>2022-06-07T01:30:42Z</updated>
    <id>tag:github.com,2022-06-07:/MarlinFirmware/Marlin</id>
    <link href="https://github.com/MarlinFirmware/Marlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Marlin is an optimized firmware for RepRap 3D printers based on the Arduino platform. | Many commercial 3D printers come with Marlin installed. Check with your vendor if you need source code for your specific machine.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MarlinFirmware/Marlin/bugfix-2.1.x/buildroot/share/pixmaps/logo/marlin-outrun-nf-500.png&#34; height=&#34;250&#34; alt=&#34;MarlinFirmware&#39;s logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Marlin 3D Printer Firmware&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MarlinFirmware/Marlin/bugfix-2.1.x/LICENSE&#34;&gt;&lt;img alt=&#34;GPL-V3.0 License&#34; src=&#34;https://img.shields.io/github/license/marlinfirmware/marlin.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/graphs/contributors&#34;&gt;&lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors/marlinfirmware/marlin.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/releases&#34;&gt;&lt;img alt=&#34;Last Release Date&#34; src=&#34;https://img.shields.io/github/release-date/MarlinFirmware/Marlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/actions&#34;&gt;&lt;img alt=&#34;CI Status&#34; src=&#34;https://github.com/MarlinFirmware/Marlin/actions/workflows/test-builds.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/thinkyhead&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/thinkyhead?color=db61a2&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/MarlinFirmware&#34;&gt;&lt;img alt=&#34;Follow MarlinFirmware on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/MarlinFirmware?style=social&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Additional documentation can be found at the &lt;a href=&#34;https://marlinfw.org/&#34;&gt;Marlin Home Page&lt;/a&gt;. Please test this firmware and let us know if it misbehaves in any way. Volunteers are standing by!&lt;/p&gt; &#xA;&lt;h2&gt;Marlin 2.0 Bugfix Branch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Not for production use. Use with caution!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Marlin 2.0 takes this popular RepRap firmware to the next level by adding support for much faster 32-bit and ARM-based boards while improving support for 8-bit AVR boards. Read about Marlin&#39;s decision to use a &#34;Hardware Abstraction Layer&#34; below.&lt;/p&gt; &#xA;&lt;p&gt;This branch is for patches to the latest 2.0.x release version. Periodically this branch will form the basis for the next minor 2.0.x release.&lt;/p&gt; &#xA;&lt;p&gt;Download earlier versions of Marlin on the &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Before building Marlin you&#39;ll need to configure it for your specific hardware. Your vendor should have already provided source code with configurations for the installed firmware, but if you ever decide to upgrade you&#39;ll need updated configuration files. Marlin users have contributed dozens of tested example configurations to get you started. Visit the &lt;a href=&#34;https://github.com/MarlinFirmware/Configurations&#34;&gt;MarlinFirmware/Configurations&lt;/a&gt; repository to find the right configuration for your hardware.&lt;/p&gt; &#xA;&lt;h2&gt;Building Marlin 2.0&lt;/h2&gt; &#xA;&lt;p&gt;To build Marlin 2.0 you&#39;ll need &lt;a href=&#34;https://www.arduino.cc/en/main/software&#34;&gt;Arduino IDE 1.8.8 or newer&lt;/a&gt; or &lt;a href=&#34;https://docs.platformio.org/en/latest/ide.html#platformio-ide&#34;&gt;PlatformIO&lt;/a&gt;. We&#39;ve posted detailed instructions on &lt;a href=&#34;https://marlinfw.org/docs/basics/install_arduino.html&#34;&gt;Building Marlin with Arduino&lt;/a&gt; and &lt;a href=&#34;https://marlinfw.org/docs/basics/install_rearm.html&#34;&gt;Building Marlin with PlatformIO for ReArm&lt;/a&gt; (which applies well to other 32-bit boards).&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Abstraction Layer (HAL)&lt;/h2&gt; &#xA;&lt;p&gt;Marlin 2.0 introduces a layer of abstraction so that all the existing high-level code can be built for 32-bit platforms while still retaining full 8-bit AVR compatibility. Retaining AVR compatibility and a single code-base is important to us, because we want to make sure that features and patches get as much testing and attention as possible, and that all platforms always benefit from the latest improvements.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;MCU&lt;/th&gt; &#xA;   &lt;th&gt;Example Boards&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.arduino.cc/&#34;&gt;Arduino AVR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ATmega&lt;/td&gt; &#xA;   &lt;td&gt;RAMPS, Melzi, RAMBo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.microchip.com/en-us/product/AT90USB1286&#34;&gt;Teensy++ 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AT90USB1286&lt;/td&gt; &#xA;   &lt;td&gt;Printrboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.arduino.cc/en/Guide/ArduinoDue&#34;&gt;Arduino Due&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SAM3X8E&lt;/td&gt; &#xA;   &lt;td&gt;RAMPS-FD, RADDS, RAMPS4DUE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;ESP32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ESP32&lt;/td&gt; &#xA;   &lt;td&gt;FYSETC E4, E4d@BOX, MRR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1700-cortex-m3/512-kb-flash-64-kb-sram-ethernet-usb-lqfp100-package:LPC1768FBD100&#34;&gt;LPC1768&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M3&lt;/td&gt; &#xA;   &lt;td&gt;MKS SBASE, Re-ARM, Selena Compact&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/general-purpose-mcus/lpc1700-cortex-m3/512-kb-flash-64-kb-sram-ethernet-usb-lqfp100-package:LPC1769FBD100&#34;&gt;LPC1769&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M3&lt;/td&gt; &#xA;   &lt;td&gt;Smoothieboard, Azteeg X5 mini, TH3D EZBoard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32f103.html&#34;&gt;STM32F103&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M3&lt;/td&gt; &#xA;   &lt;td&gt;Malyan M200, GTM32 Pro, MKS Robin, BTT SKR Mini&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32f401.html&#34;&gt;STM32F401&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;ARMED, Rumba32, SKR Pro, Lerdge, FYSETC S6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.st.com/en/microcontrollers-microprocessors/stm32f7x6.html&#34;&gt;STM32F7x6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;The Borg, RemRam V1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.adafruit.com/product/4064&#34;&gt;SAMD51P20A&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;Adafruit Grand Central M4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy35.html&#34;&gt;Teensy 3.5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy36.html&#34;&gt;Teensy 3.6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy40.html&#34;&gt;Teensy 4.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy41.html&#34;&gt;Teensy 4.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ARM® Cortex-M7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux Native&lt;/td&gt; &#xA;   &lt;td&gt;x86/ARM/etc.&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry Pi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Submitting Patches&lt;/h2&gt; &#xA;&lt;p&gt;Proposed patches should be submitted as a Pull Request against the (&lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/tree/bugfix-2.1.x&#34;&gt;bugfix-2.1.x&lt;/a&gt;) branch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This branch is for fixing bugs and integrating any new features for the duration of the Marlin 2.0.x life-cycle.&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://marlinfw.org/docs/development/coding_standards.html&#34;&gt;Coding Standards&lt;/a&gt; to gain points with the maintainers.&lt;/li&gt; &#xA; &lt;li&gt;Please submit Feature Requests and Bug Reports to the &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/issues/new/choose&#34;&gt;Issue Queue&lt;/a&gt;. Support resources are also listed there.&lt;/li&gt; &#xA; &lt;li&gt;Whenever you add new features, be sure to add tests to &lt;code&gt;buildroot/tests&lt;/code&gt; and then run your tests locally, if possible. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It&#39;s optional: Running all the tests on Windows might take a long time, and they will run anyway on GitHub.&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re running the tests on Linux (or on WSL with the code on a Linux volume) the speed is much faster.&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;make tests-all-local&lt;/code&gt; or &lt;code&gt;make tests-single-local TEST_TARGET=...&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you prefer Docker you can use &lt;code&gt;make tests-all-local-docker&lt;/code&gt; or &lt;code&gt;make tests-all-local-docker TEST_TARGET=...&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Marlin Support&lt;/h2&gt; &#xA;&lt;p&gt;The Issue Queue is reserved for Bug Reports and Feature Requests. To get help with configuration and troubleshooting, please use the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marlinfw.org&#34;&gt;Marlin Documentation&lt;/a&gt; - Official Marlin documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/n5NJ59y&#34;&gt;Marlin Discord&lt;/a&gt; - Discuss issues with Marlin users and developers&lt;/li&gt; &#xA; &lt;li&gt;Facebook Group &lt;a href=&#34;https://www.facebook.com/groups/1049718498464482/&#34;&gt;&#34;Marlin Firmware&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RepRap.org &lt;a href=&#34;https://forums.reprap.org/list.php?415&#34;&gt;Marlin Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook Group &lt;a href=&#34;https://www.facebook.com/groups/3Dtechtalk/&#34;&gt;&#34;Marlin Firmware for 3D Printers&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/results?search_query=marlin+configuration&#34;&gt;Marlin Configuration&lt;/a&gt; on YouTube&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Marlin is constantly improving thanks to a huge number of contributors from all over the world bringing their specialties and talents. Huge thanks are due to &lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/graphs/contributors&#34;&gt;all the contributors&lt;/a&gt; who regularly patch up bugs, help direct traffic, and basically keep Marlin from falling apart. Marlin&#39;s continued existence would not be possible without them.&lt;/p&gt; &#xA;&lt;h2&gt;Administration&lt;/h2&gt; &#xA;&lt;p&gt;Regular users can open and close their own issues, but only the administrators can do project-related things like add labels, merge changes, set milestones, and kick trolls. The current Marlin admin team consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scott Lahteine [&lt;a href=&#34;https://github.com/thinkyhead&#34;&gt;@thinkyhead&lt;/a&gt;] - USA - Project Maintainer &amp;nbsp; &lt;a href=&#34;https://www.thinkyhead.com/donate-to-marlin&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Roxanne Neufeld [&lt;a href=&#34;https://github.com/Roxy-3D&#34;&gt;@Roxy-3D&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Keith Bennett [&lt;a href=&#34;https://github.com/thisiskeithb&#34;&gt;@thisiskeithb&lt;/a&gt;] - USA &amp;nbsp; &lt;a href=&#34;https://github.com/sponsors/thisiskeithb&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peter Ellens [&lt;a href=&#34;https://github.com/ellensp&#34;&gt;@ellensp&lt;/a&gt;] - New Zealand&lt;/li&gt; &#xA; &lt;li&gt;Victor Oliveira [&lt;a href=&#34;https://github.com/rhapsodyv&#34;&gt;@rhapsodyv&lt;/a&gt;] - Brazil&lt;/li&gt; &#xA; &lt;li&gt;Chris Pepper [&lt;a href=&#34;https://github.com/p3p&#34;&gt;@p3p&lt;/a&gt;] - UK&lt;/li&gt; &#xA; &lt;li&gt;Jason Smith [&lt;a href=&#34;https://github.com/sjasonsmith&#34;&gt;@sjasonsmith&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Luu Lac [&lt;a href=&#34;https://github.com/shitcreek&#34;&gt;@shitcreek&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Bob Kuhn [&lt;a href=&#34;https://github.com/Bob-the-Kuhn&#34;&gt;@Bob-the-Kuhn&lt;/a&gt;] - USA&lt;/li&gt; &#xA; &lt;li&gt;Erik van der Zalm [&lt;a href=&#34;https://github.com/ErikZalm&#34;&gt;@ErikZalm&lt;/a&gt;] - Netherlands &amp;nbsp; &lt;a href=&#34;https://flattr.com/submit/auto?user_id=ErikZalm&amp;amp;url=https://github.com/MarlinFirmware/Marlin&amp;amp;title=Marlin&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&#34;&gt;💸 Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Marlin is published under the &lt;a href=&#34;https://raw.githubusercontent.com/MarlinFirmware/Marlin/bugfix-2.1.x/LICENSE&#34;&gt;GPL license&lt;/a&gt; because we believe in open development. The GPL comes with both rights and obligations. Whether you use Marlin firmware as the driver for your open or closed-source product, you must keep Marlin open, and you must provide your compatible Marlin source code to end users upon request. The most straightforward way to comply with the Marlin license is to make a fork of Marlin on Github, perform your modifications, and direct users to your modified fork.&lt;/p&gt; &#xA;&lt;p&gt;While we can&#39;t prevent the use of this code in products (3D printers, CNC, etc.) that are closed source or crippled by a patent, we would prefer that you choose another firmware or, better yet, make your own.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ocornut/imgui</title>
    <updated>2022-06-07T01:30:42Z</updated>
    <id>tag:github.com,2022-06-07:/ocornut/imgui</id>
    <link href="https://github.com/ocornut/imgui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dear ImGui: Bloat-free Graphical User interface for C++ with minimal dependencies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dear ImGui&lt;/h1&gt; &#xA;&lt;center&gt;&#xA; &lt;b&gt;&lt;i&gt;&#34;Give someone state and they&#39;ll have a bug one day, but teach them how to represent state in two separate locations that have to be kept in sync and they&#39;ll have bugs for a lifetime.&#34;&lt;/i&gt;&lt;/b&gt;&#xA;&lt;/center&gt; &#xA;&lt;a href=&#34;https://twitter.com/rygorous/status/1507178315886444544&#34;&gt;-ryg&lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocornut/imgui/actions?workflow=build&#34;&gt;&lt;img src=&#34;https://github.com/ocornut/imgui/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ocornut/imgui/actions?workflow=static-analysis&#34;&gt;&lt;img src=&#34;https://github.com/ocornut/imgui/workflows/static-analysis/badge.svg?sanitize=true&#34; alt=&#34;Static Analysis Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;(This library is available under a free and permissive license, but needs financial support to sustain its continued improvements. In addition to maintenance and stability there are many desirable features yet to be added. If your company is using Dear ImGui, please consider reaching out.)&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Businesses: support continued development and maintenance via invoiced technical support, maintenance, sponsoring contracts: &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;em&gt;E-mail: contact @ dearimgui dot com&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Individuals: support continued development and maintenance &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=WGHNC6MBFLZ2S&#34;&gt;here&lt;/a&gt;. Also see &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Sponsors&#34;&gt;Sponsors&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#the-pitch&#34;&gt;The Pitch&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#usage&#34;&gt;Usage&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#how-it-works&#34;&gt;How it works&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#releases--changelogs&#34;&gt;Releases &amp;amp; Changelogs&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#demo&#34;&gt;Demo&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#integration&#34;&gt;Integration&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#upcoming-changes&#34;&gt;Upcoming changes&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#gallery&#34;&gt;Gallery&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#support-frequently-asked-questions-faq&#34;&gt;Support, FAQ&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#how-to-help&#34;&gt;How to help&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#credits&#34;&gt;Credits&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#license&#34;&gt;License&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ocornut/imgui/wiki&#34;&gt;Wiki&lt;/a&gt; - &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Bindings&#34;&gt;Languages &amp;amp; frameworks backends/bindings&lt;/a&gt; - &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui&#34;&gt;Software using Dear ImGui&lt;/a&gt; - &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Quotes&#34;&gt;User quotes&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;The Pitch&lt;/h3&gt; &#xA;&lt;p&gt;Dear ImGui is a &lt;strong&gt;bloat-free graphical user interface library for C++&lt;/strong&gt;. It outputs optimized vertex buffers that you can render anytime in your 3D-pipeline enabled application. It is fast, portable, renderer agnostic and self-contained (no external dependencies).&lt;/p&gt; &#xA;&lt;p&gt;Dear ImGui is designed to &lt;strong&gt;enable fast iterations&lt;/strong&gt; and to &lt;strong&gt;empower programmers&lt;/strong&gt; to create &lt;strong&gt;content creation tools and visualization / debug tools&lt;/strong&gt; (as opposed to UI for the average end-user). It favors simplicity and productivity toward this goal, and lacks certain features normally found in more high-level libraries.&lt;/p&gt; &#xA;&lt;p&gt;Dear ImGui is particularly suited to integration in games engine (for tooling), real-time 3D applications, fullscreen applications, embedded applications, or any applications on consoles platforms where operating system features are non-standard.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use to create code-driven and data-driven tools.&lt;/li&gt; &#xA; &lt;li&gt;Easy to use to create ad hoc short-lived tools and long-lived, more elaborate tools.&lt;/li&gt; &#xA; &lt;li&gt;Easy to hack and improve.&lt;/li&gt; &#xA; &lt;li&gt;Minimize setup and maintenance.&lt;/li&gt; &#xA; &lt;li&gt;Minimize state storage on user side.&lt;/li&gt; &#xA; &lt;li&gt;Minimize state synchronization.&lt;/li&gt; &#xA; &lt;li&gt;Portable, minimize dependencies, run on target (consoles, phones, etc.).&lt;/li&gt; &#xA; &lt;li&gt;Efficient runtime and memory consumption.&lt;/li&gt; &#xA; &lt;li&gt;Battle-tested, used by many major actors in the game industry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;The core of Dear ImGui is self-contained within a few platform-agnostic files&lt;/strong&gt; which you can easily compile in your application/engine. They are all the files in the root folder of the repository (imgui*.cpp, imgui*.h).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No specific build process is required&lt;/strong&gt;. You can add the .cpp files to your existing project.&lt;/p&gt; &#xA;&lt;p&gt;You will need a backend to integrate Dear ImGui in your app. The backend passes mouse/keyboard/gamepad inputs and variety of settings to Dear ImGui, and is in charge of rendering the resulting vertices. &lt;strong&gt;Backends for a variety of graphics api and rendering platforms&lt;/strong&gt; are provided in the &lt;a href=&#34;https://github.com/ocornut/imgui/tree/master/backends&#34;&gt;backends/&lt;/a&gt; folder, along with example applications in the &lt;a href=&#34;https://github.com/ocornut/imgui/tree/master/examples&#34;&gt;examples/&lt;/a&gt; folder. See the &lt;a href=&#34;https://raw.githubusercontent.com/ocornut/imgui/master/#integration&#34;&gt;Integration&lt;/a&gt; section of this document for details. You may also create your own backend. Anywhere where you can render textured triangles, you can render Dear ImGui.&lt;/p&gt; &#xA;&lt;p&gt;After Dear ImGui is setup in your application, you can use it from _anywhere_ in your program loop:&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;ImGui::Text(&#34;Hello, world %d&#34;, 123);&#xA;if (ImGui::Button(&#34;Save&#34;))&#xA;    MySaveFunction();&#xA;ImGui::InputText(&#34;string&#34;, buf, IM_ARRAYSIZE(buf));&#xA;ImGui::SliderFloat(&#34;float&#34;, &amp;amp;f, 0.0f, 1.0f);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v175/capture_readme_styles_0001.png&#34; alt=&#34;sample code output (dark)&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v175/capture_readme_styles_0002.png&#34; alt=&#34;sample code output (light)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Create a window called &#34;My First Tool&#34;, with a menu bar.&#xA;ImGui::Begin(&#34;My First Tool&#34;, &amp;amp;my_tool_active, ImGuiWindowFlags_MenuBar);&#xA;if (ImGui::BeginMenuBar())&#xA;{&#xA;    if (ImGui::BeginMenu(&#34;File&#34;))&#xA;    {&#xA;        if (ImGui::MenuItem(&#34;Open..&#34;, &#34;Ctrl+O&#34;)) { /* Do stuff */ }&#xA;        if (ImGui::MenuItem(&#34;Save&#34;, &#34;Ctrl+S&#34;))   { /* Do stuff */ }&#xA;        if (ImGui::MenuItem(&#34;Close&#34;, &#34;Ctrl+W&#34;))  { my_tool_active = false; }&#xA;        ImGui::EndMenu();&#xA;    }&#xA;    ImGui::EndMenuBar();&#xA;}&#xA;&#xA;// Edit a color (stored as ~4 floats)&#xA;ImGui::ColorEdit4(&#34;Color&#34;, my_color);&#xA;&#xA;// Plot some values&#xA;const float my_values[] = { 0.2f, 0.1f, 1.0f, 0.5f, 0.9f, 2.2f };&#xA;ImGui::PlotLines(&#34;Frame Times&#34;, my_values, IM_ARRAYSIZE(my_values));&#xA;&#xA;// Display contents in a scrolling region&#xA;ImGui::TextColored(ImVec4(1,1,0,1), &#34;Important Stuff&#34;);&#xA;ImGui::BeginChild(&#34;Scrolling&#34;);&#xA;for (int n = 0; n &amp;lt; 50; n++)&#xA;    ImGui::Text(&#34;%04d: Some text&#34;, n);&#xA;ImGui::EndChild();&#xA;ImGui::End();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v180/code_sample_04_color.gif&#34; alt=&#34;sample code output&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dear ImGui allows you to &lt;strong&gt;create elaborate tools&lt;/strong&gt; as well as very short-lived ones. On the extreme side of short-livedness: using the Edit&amp;amp;Continue (hot code reload) feature of modern compilers you can add a few widgets to tweaks variables while your application is running, and remove the code a minute later! Dear ImGui is not just for tweaking values. You can use it to trace a running algorithm by just emitting text commands. You can use it along with your own reflection data to browse your dataset live. You can use it to expose the internals of a subsystem in your engine, to create a logger, an inspection tool, a profiler, a debugger, an entire game making editor/framework, etc.&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;Check out the Wiki&#39;s &lt;a href=&#34;https://github.com/ocornut/imgui/wiki#about-the-imgui-paradigm&#34;&gt;About the IMGUI paradigm&lt;/a&gt; section if you want to understand the core principles behind the IMGUI paradigm. An IMGUI tries to minimize superfluous state duplication, state synchronization and state retention from the user&#39;s point of view. It is less error prone (less code and less bugs) than traditional retained-mode interfaces, and lends itself to create dynamic user interfaces.&lt;/p&gt; &#xA;&lt;p&gt;Dear ImGui outputs vertex buffers and command lists that you can easily render in your application. The number of draw calls and state changes required to render them is fairly small. Because Dear ImGui doesn&#39;t know or touch graphics state directly, you can call its functions anywhere in your code (e.g. in the middle of a running algorithm, or in the middle of your own rendering process). Refer to the sample applications in the examples/ folder for instructions on how to integrate Dear ImGui with your existing codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A common misunderstanding is to mistake immediate mode gui for immediate mode rendering, which usually implies hammering your driver/GPU with a bunch of inefficient draw calls and state changes as the gui functions are called. This is NOT what Dear ImGui does. Dear ImGui outputs vertex buffers and a small list of draw calls batches. It never touches your GPU directly. The draw call batches are decently optimal and you can render them later, in your app or even remotely.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Releases &amp;amp; Changelogs&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ocornut/imgui/releases&#34;&gt;Releases&lt;/a&gt; page. Reading the changelogs is a good way to keep up to date with the things Dear ImGui has to offer, and maybe will give you ideas of some features that you&#39;ve been ignoring until now!&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;ImGui::ShowDemoWindow()&lt;/code&gt; function will create a demo window showcasing variety of features and examples. The code is always available for reference in &lt;code&gt;imgui_demo.cpp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v167/v167-misc.png&#34; alt=&#34;screenshot demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should be able to build the examples from sources (tested on Windows/Mac/Linux). If you don&#39;t, let us know! If you want to have a quick look at some Dear ImGui features, you can download Windows binaries of the demo app here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dearimgui.org/binaries/imgui-demo-binaries-20220504.zip&#34;&gt;imgui-demo-binaries-20220504.zip&lt;/a&gt; (Windows, 1.88 WIP, built 2022/05/04, master branch) or &lt;a href=&#34;https://www.dearimgui.org/binaries&#34;&gt;older demo binaries&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The demo applications are not DPI aware so expect some blurriness on a 4K screen. For DPI awareness in your application, you can load/reload your font at different scale, and scale your style with &lt;code&gt;style.ScaleAllSizes()&lt;/code&gt; (see &lt;a href=&#34;https://www.dearimgui.org/faq&#34;&gt;FAQ&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Integration&lt;/h3&gt; &#xA;&lt;p&gt;On most platforms and when using C++, &lt;strong&gt;you should be able to use a combination of the &lt;a href=&#34;https://github.com/ocornut/imgui/tree/master/backends&#34;&gt;imgui_impl_xxxx&lt;/a&gt; backends without modification&lt;/strong&gt; (e.g. &lt;code&gt;imgui_impl_win32.cpp&lt;/code&gt; + &lt;code&gt;imgui_impl_dx11.cpp&lt;/code&gt;). If your engine supports multiple platforms, consider using more of the imgui_impl_xxxx files instead of rewriting them: this will be less work for you and you can get Dear ImGui running immediately. You can &lt;em&gt;later&lt;/em&gt; decide to rewrite a custom backend using your custom engine functions if you wish so.&lt;/p&gt; &#xA;&lt;p&gt;Integrating Dear ImGui within your custom engine is a matter of 1) wiring mouse/keyboard/gamepad inputs 2) uploading one texture to your GPU/render engine 3) providing a render function that can bind textures and render textured triangles. The &lt;a href=&#34;https://github.com/ocornut/imgui/tree/master/examples&#34;&gt;examples/&lt;/a&gt; folder is populated with applications doing just that. If you are an experienced programmer at ease with those concepts, it should take you less than two hours to integrate Dear ImGui in your custom engine. &lt;strong&gt;Make sure to spend time reading the &lt;a href=&#34;https://www.dearimgui.org/faq&#34;&gt;FAQ&lt;/a&gt;, comments, and some of the examples/ application!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Officially maintained backends/bindings (in repository):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Renderers: DirectX9, DirectX10, DirectX11, DirectX12, Metal, OpenGL/ES/ES2, SDL_Renderer, Vulkan, WebGPU.&lt;/li&gt; &#xA; &lt;li&gt;Platforms: GLFW, SDL2, Win32, Glut, OSX, Android.&lt;/li&gt; &#xA; &lt;li&gt;Frameworks: Allegro5, Emscripten.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Bindings&#34;&gt;Third-party backends/bindings&lt;/a&gt; wiki page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Languages: C, C# and: Beef, ChaiScript, Crystal, D, Go, Haskell, Haxe/hxcpp, Java, JavaScript, Julia, Kotlin, Lobster, Lua, Odin, Pascal, PureBasic, Python, Ruby, Rust, Swift...&lt;/li&gt; &#xA; &lt;li&gt;Frameworks: AGS/Adventure Game Studio, Amethyst, Blender, bsf, Cinder, Cocos2d-x, Diligent Engine, Flexium, GML/Game Maker Studio2, GLEQ, Godot, GTK3+OpenGL3, Irrlicht Engine, LÖVE+LUA, Magnum, Monogame, NanoRT, nCine, Nim Game Lib, Nintendo 3DS &amp;amp; Switch (homebrew), Ogre, openFrameworks, OSG/OpenSceneGraph, Orx, Photoshop, px_render, Qt/QtDirect3D, SDL_Renderer, SFML, Sokol, Unity, Unreal Engine 4, vtk, VulkanHpp, VulkanSceneGraph, Win32 GDI, WxWidgets.&lt;/li&gt; &#xA; &lt;li&gt;Note that C bindings (&lt;a href=&#34;https://github.com/cimgui/cimgui&#34;&gt;cimgui&lt;/a&gt;) are auto-generated, you can use its json/lua output to generate bindings for other languages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Useful-Extensions&#34;&gt;Useful Extensions/Widgets&lt;/a&gt; wiki page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text editors, node editors, timeline editors, plotting, software renderers, remote network access, memory editors, gizmos etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/ocornut/imgui/wiki&#34;&gt;Wiki&lt;/a&gt; for more links and ideas.&lt;/p&gt; &#xA;&lt;h3&gt;Upcoming Changes&lt;/h3&gt; &#xA;&lt;p&gt;Some of the goals for 2022 are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work on Docking (see &lt;a href=&#34;https://github.com/ocornut/imgui/issues/2109&#34;&gt;#2109&lt;/a&gt;, in public &lt;a href=&#34;https://github.com/ocornut/imgui/tree/docking&#34;&gt;docking&lt;/a&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;Work on Multi-Viewport / Multiple OS windows. (see &lt;a href=&#34;https://github.com/ocornut/imgui/issues/1542&#34;&gt;#1542&lt;/a&gt;, in public &lt;a href=&#34;https://github.com/ocornut/imgui/tree/docking&#34;&gt;docking&lt;/a&gt; branch looking for feedback)&lt;/li&gt; &#xA; &lt;li&gt;Work on gamepad/keyboard controls. (see &lt;a href=&#34;https://github.com/ocornut/imgui/issues/787&#34;&gt;#787&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Work on automation and testing system, both to test the library and end-user apps. (see &lt;a href=&#34;https://github.com/ocornut/imgui/issues/435&#34;&gt;#435&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Make the examples look better, improve styles, improve font support, make the examples hi-DPI and multi-DPI aware.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Gallery&lt;/h3&gt; &#xA;&lt;p&gt;For more user-submitted screenshots of projects using Dear ImGui, check out the &lt;a href=&#34;https://github.com/ocornut/imgui/issues/5243&#34;&gt;Gallery Threads&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;For a list of third-party widgets and extensions, check out the &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Useful-Extensions&#34;&gt;Useful Extensions/Widgets&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;p&gt;Custom engine &lt;a href=&#34;https://github.com/tksuoran/erhe&#34;&gt;ehre&lt;/a&gt; (docking branch) &lt;a href=&#34;https://user-images.githubusercontent.com/994606/147875067-a848991e-2ad2-4fd3-bf71-4aeb8a547bcf.png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8225057/166686854-3f76bf28-0442-4fac-8e65-9fc9650d2ed0.jpg&#34; alt=&#34;ehre&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom engine for &lt;a href=&#34;http://www.TheDragonsTrap.com&#34;&gt;Wonder Boy: The Dragon&#39;s Trap&lt;/a&gt; (2017) &lt;a href=&#34;https://cloud.githubusercontent.com/assets/8225057/20628927/33e14cac-b329-11e6-80f6-9524e93b048a.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v149/gallery_TheDragonsTrap-01-thumb.jpg&#34; alt=&#34;screenshot game&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom engine (untitled) &lt;a href=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v160/editor_white.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v160/editor_white_preview.jpg&#34; alt=&#34;screenshot tool&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wolfpld/tracy&#34;&gt;Tracy Profiler&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wiki/ocornut/imgui/web/v176/tracy_profiler.png&#34; alt=&#34;tracy profiler&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Support, Frequently Asked Questions (FAQ)&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/ocornut/imgui/raw/master/docs/FAQ.md&#34;&gt;Frequently Asked Questions (FAQ)&lt;/a&gt; where common questions are answered.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/ocornut/imgui/wiki&#34;&gt;Wiki&lt;/a&gt; for many links, references, articles.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/ocornut/imgui/wiki#about-the-imgui-paradigm&#34;&gt;Articles about the IMGUI paradigm&lt;/a&gt; to read/learn about the Immediate Mode GUI paradigm.&lt;/p&gt; &#xA;&lt;p&gt;Getting started? For first-time users having issues compiling/linking/running or issues loading fonts, please use &lt;a href=&#34;https://github.com/ocornut/imgui/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other questions, bug reports, requests, feedback, you may post on &lt;a href=&#34;https://github.com/ocornut/imgui/issues&#34;&gt;GitHub Issues&lt;/a&gt;. Please read and fill the New Issue template carefully.&lt;/p&gt; &#xA;&lt;p&gt;Private support is available for paying business customers (E-mail: &lt;em&gt;contact @ dearimgui dot com&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which version should I get?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We occasionally tag &lt;a href=&#34;https://github.com/ocornut/imgui/releases&#34;&gt;Releases&lt;/a&gt; but it is generally safe and recommended to sync to master/latest. The library is fairly stable and regressions tend to be fixed fast when reported.&lt;/p&gt; &#xA;&lt;p&gt;Advanced users may want to use the &lt;code&gt;docking&lt;/code&gt; branch with &lt;a href=&#34;https://github.com/ocornut/imgui/issues/1542&#34;&gt;Multi-Viewport&lt;/a&gt; and &lt;a href=&#34;https://github.com/ocornut/imgui/issues/2109&#34;&gt;Docking&lt;/a&gt; features. This branch is kept in sync with master regularly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Who uses Dear ImGui?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Quotes&#34;&gt;Quotes&lt;/a&gt;, &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Sponsors&#34;&gt;Sponsors&lt;/a&gt;, &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui&#34;&gt;Software using dear imgui&lt;/a&gt; Wiki pages for an idea of who is using Dear ImGui. Please add your game/software if you can! Also see the &lt;a href=&#34;https://github.com/ocornut/imgui/issues/5243&#34;&gt;Gallery Threads&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;How to help&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I help?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/ocornut/imgui/issues&#34;&gt;GitHub Forum/issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/ocornut/imgui/discussions&#34;&gt;Github Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You may help with development and submit pull requests! Please understand that by submitting a PR you are also submitting a request for the maintainer to review your code and then take over its maintenance forever. PR should be crafted both in the interest in the end-users and also to ease the maintainer into understanding and accepting it.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Help-Wanted&#34;&gt;Help wanted&lt;/a&gt; on the &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/&#34;&gt;Wiki&lt;/a&gt; for some more ideas.&lt;/li&gt; &#xA; &lt;li&gt;Have your company financially support this project (please reach by e-mail)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;How can I help financing further development of Dear ImGui?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Sponsors&#34;&gt;Sponsors&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Ongoing Dear ImGui development is currently financially supported in 2021-2022 by users and private sponsors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Platinum-chocolate sponsors&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://careers.blizzard.com/en-us/openings/engineering/all/all/all/1&#34;&gt;Blizzard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Double-chocolate sponsors&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://montreal.ubisoft.com/en/ubisoft-sponsors-user-interface-library-for-c-dear-imgui&#34;&gt;Ubisoft&lt;/a&gt;, &lt;a href=&#34;https://supercell.com&#34;&gt;Supercell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Chocolate sponsors&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adobe.com/products/medium.html&#34;&gt;Adobe&lt;/a&gt;, &lt;a href=&#34;https://aras-p.info&#34;&gt;Aras Pranckevičius&lt;/a&gt;, &lt;a href=&#34;https://www.unrealengine.com/en-US/megagrants&#34;&gt;Epic&lt;/a&gt;, &lt;a href=&#34;&#34;&gt;G3Dvu&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Salty-caramel sponsors&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kylotonn.com&#34;&gt;Kylotonn&lt;/a&gt;, &lt;a href=&#34;http://en.o-netcom.com&#34;&gt;O-Net Communications (USA)&lt;/a&gt;, &lt;a href=&#34;https://wonderlandengine.com/&#34;&gt;Wonderland Engine&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/ocornut/imgui/wiki/Sponsors&#34;&gt;detailed list of current and past Dear ImGui supporters&lt;/a&gt; for more. From November 2014 to December 2019, ongoing development has also been financially supported by its users on Patreon and through individual donations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;THANK YOU to all past and present supporters for helping to keep this project alive and thriving!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dear ImGui is using software and services provided free of charge for open source projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.viva64.com/en/b/0570/&#34;&gt;PVS-Studio&lt;/a&gt; for static analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub actions&lt;/a&gt; for continuous integration systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenCppCoverage/OpenCppCoverage&#34;&gt;OpenCppCoverage&lt;/a&gt; for code coverage analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Developed by &lt;a href=&#34;https://www.miracleworld.net&#34;&gt;Omar Cornut&lt;/a&gt; and every direct or indirect &lt;a href=&#34;https://github.com/ocornut/imgui/graphs/contributors&#34;&gt;contributors&lt;/a&gt; to the GitHub. The early version of this library was developed with the support of &lt;a href=&#34;https://www.mediamolecule.com&#34;&gt;Media Molecule&lt;/a&gt; and first used internally on the game &lt;a href=&#34;https://tearaway.mediamolecule.com&#34;&gt;Tearaway&lt;/a&gt; (PS Vita).&lt;/p&gt; &#xA;&lt;p&gt;Recurring contributors (2022): Omar Cornut &lt;a href=&#34;https://github.com/ocornut&#34;&gt;@ocornut&lt;/a&gt;, Rokas Kupstys &lt;a href=&#34;https://github.com/rokups&#34;&gt;@rokups&lt;/a&gt; (a large portion of work on automation systems, regression tests and other features are currently unpublished).&lt;/p&gt; &#xA;&lt;p&gt;Sponsoring, support contracts and other B2B transactions are hosted and handled by &lt;a href=&#34;https://www.lizardcube.com&#34;&gt;Lizardcube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Omar: &#34;I first discovered the IMGUI paradigm at &lt;a href=&#34;https://www.q-games.com&#34;&gt;Q-Games&lt;/a&gt; where Atman Binstock had dropped his own simple implementation in the codebase, which I spent quite some time improving and thinking about. It turned out that Atman was exposed to the concept directly by working with Casey. When I moved to Media Molecule I rewrote a new library trying to overcome the flaws and limitations of the first one I&#39;ve worked with. It became this library and since then I have spent an unreasonable amount of time iterating and improving it.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Embeds &lt;a href=&#34;http://upperbounds.net&#34;&gt;ProggyClean.ttf&lt;/a&gt; font by Tristan Grimmer (MIT license).&lt;/p&gt; &#xA;&lt;p&gt;Embeds &lt;a href=&#34;https://github.com/nothings/stb/&#34;&gt;stb_textedit.h, stb_truetype.h, stb_rect_pack.h&lt;/a&gt; by Sean Barrett (public domain).&lt;/p&gt; &#xA;&lt;p&gt;Inspiration, feedback, and testing for early versions: Casey Muratori, Atman Binstock, Mikko Mononen, Emmanuel Briney, Stefan Kamoda, Anton Mikhailov, Matt Willis. Also thank you to everyone posting feedback, questions and patches on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Dear ImGui is licensed under the MIT License, see &lt;a href=&#34;https://github.com/ocornut/imgui/raw/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>