<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-09T01:28:56Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>soxoj/maigret</title>
    <updated>2024-12-09T01:28:56Z</updated>
    <id>tag:github.com,2024-12-09:/soxoj/maigret</id>
    <link href="https://github.com/soxoj/maigret" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üïµÔ∏è‚Äç‚ôÇÔ∏è Collect a dossier on a person by username from thousands of sites&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Maigret&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/maigret/&#34;&gt; &lt;img alt=&#34;PyPI version badge for Maigret&#34; src=&#34;https://img.shields.io/pypi/v/maigret?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/maigret/&#34;&gt; &lt;img alt=&#34;PyPI download count for Maigret&#34; src=&#34;https://img.shields.io/pypi/dw/maigret?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/soxoj/maigret&#34;&gt; &lt;img alt=&#34;Minimum Python version required: 3.10+&#34; src=&#34;https://img.shields.io/badge/Python-3.10%2B-brightgreen?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/soxoj/maigret/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License badge for Maigret&#34; src=&#34;https://img.shields.io/github/license/soxoj/maigret?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/soxoj/maigret&#34;&gt; &lt;img alt=&#34;View count for Maigret project&#34; src=&#34;https://komarev.com/ghpvc/?username=maigret&amp;amp;color=brightgreen&amp;amp;label=views&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/soxoj/maigret/main/static/maigret.png&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;i&gt;The Commissioner Jules Maigret is a fictional French police detective, created by Georges Simenon. His investigation method is based on understanding the personality of different people and their interactions.&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;üëâüëâüëâ &lt;a href=&#34;https://t.me/osint_maigret_bot&#34;&gt;Online Telegram bot&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Maigret&lt;/strong&gt; collects a dossier on a person &lt;strong&gt;by username only&lt;/strong&gt;, checking for accounts on a huge number of sites and gathering all the available information from web pages. No API keys required. Maigret is an easy-to-use and powerful fork of &lt;a href=&#34;https://github.com/sherlock-project/sherlock&#34;&gt;Sherlock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently supported more than 3000 sites (&lt;a href=&#34;https://github.com/soxoj/maigret/raw/main/sites.md&#34;&gt;full list&lt;/a&gt;), search is launched against 500 popular sites in descending order of popularity by default. Also supported checking of Tor sites, I2P sites, and domains (via DNS resolving).&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Profile pages parsing, &lt;a href=&#34;https://github.com/soxoj/socid_extractor&#34;&gt;extraction&lt;/a&gt; of personal info, links to other profiles, etc.&lt;/li&gt; &#xA; &lt;li&gt;Recursive search by new usernames and other ids found&lt;/li&gt; &#xA; &lt;li&gt;Search by tags (site categories, countries)&lt;/li&gt; &#xA; &lt;li&gt;Censorship and captcha detection&lt;/li&gt; &#xA; &lt;li&gt;Requests retries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See full description of Maigret features &lt;a href=&#34;https://maigret.readthedocs.io/en/latest/features.html&#34;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;‚ÄºÔ∏è Maigret is available online via &lt;a href=&#34;https://t.me/osint_maigret_bot&#34;&gt;official Telegram bot&lt;/a&gt;. Consider using it if you don&#39;t want to install anything.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Standalone EXE-binaries for Windows are located in &lt;a href=&#34;https://github.com/soxoj/maigret/releases&#34;&gt;Releases section&lt;/a&gt; of GitHub repository.&lt;/p&gt; &#xA;&lt;p&gt;Video guide on how to run it: &lt;a href=&#34;https://youtu.be/qIgwTZOmMmM&#34;&gt;https://youtu.be/qIgwTZOmMmM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation in Cloud Shells&lt;/h3&gt; &#xA;&lt;p&gt;You can launch Maigret using cloud shells and Jupyter notebooks. Press one of the buttons below and follow the instructions to launch it in your browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/soxoj/maigret&amp;amp;tutorial=README.md&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/27065646/92304704-8d146d80-ef80-11ea-8c29-0deaabb1c702.png&#34; alt=&#34;Open in Cloud Shell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repl.it/github/soxoj/maigret&#34;&gt;&lt;img src=&#34;https://replit.com/badge/github/soxoj/maigret&#34; alt=&#34;Run on Replit&#34; height=&#34;50&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/gist/soxoj/879b51bc3b2f8b695abb054090645000/maigret-collab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mybinder.org/v2/gist/soxoj/9d65c2f4d3bec5dd25949197ea73cf3a/HEAD&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Open In Binder&#34; height=&#34;45&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Local installation&lt;/h3&gt; &#xA;&lt;p&gt;Maigret can be installed using pip, Docker, or simply can be launched from the cloned repo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Python 3.10 or higher and pip is required, &lt;strong&gt;Python 3.11 is recommended.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install from pypi&#xA;pip3 install maigret&#xA;&#xA;# usage&#xA;maigret username&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cloning a repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# or clone and install manually&#xA;git clone https://github.com/soxoj/maigret &amp;amp;&amp;amp; cd maigret&#xA;&#xA;# build and install&#xA;pip3 install .&#xA;&#xA;# usage&#xA;maigret username&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# official image&#xA;docker pull soxoj/maigret&#xA;&#xA;# usage&#xA;docker run -v /mydir:/app/reports soxoj/maigret:latest username --html&#xA;&#xA;# manual build&#xA;docker build -t maigret .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make HTML, PDF, and Xmind8 reports&#xA;maigret user --html&#xA;maigret user --pdf&#xA;maigret user --xmind #Output not compatible with xmind 2022+&#xA;&#xA;# search on sites marked with tags photo &amp;amp; dating&#xA;maigret user --tags photo,dating&#xA;&#xA;# search on sites marked with tag us&#xA;maigret user --tags us&#xA;&#xA;# search for three usernames on all available sites&#xA;maigret user1 user2 user3 -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;maigret --help&lt;/code&gt; to get full options description. Also options &lt;a href=&#34;https://maigret.readthedocs.io/en/latest/command-line-options.html&#34;&gt;are documented&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Maigret has open-source code, so you may contribute your own sites by adding them to &lt;code&gt;data.json&lt;/code&gt; file, or bring changes to it&#39;s code!&lt;/p&gt; &#xA;&lt;p&gt;For more information about development and contribution, please read the &lt;a href=&#34;https://maigret.readthedocs.io/en/latest/development.html&#34;&gt;development documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo with page parsing and recursive username search&lt;/h2&gt; &#xA;&lt;h3&gt;Video (asciinema)&lt;/h3&gt; &#xA;&lt;a href=&#34;https://asciinema.org/a/Ao0y7N0TTxpS0pisoprQJdylZ&#34;&gt; &lt;img src=&#34;https://asciinema.org/a/Ao0y7N0TTxpS0pisoprQJdylZ.svg?sanitize=true&#34; alt=&#34;asciicast&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Reports&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/soxoj/maigret/main/static/report_alexaimephotographycars.pdf&#34;&gt;PDF report&lt;/a&gt;, &lt;a href=&#34;https://htmlpreview.github.io/?https://raw.githubusercontent.com/soxoj/maigret/main/static/report_alexaimephotographycars.html&#34;&gt;HTML report&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/soxoj/maigret/main/static/report_alexaimephotography_html_screenshot.png&#34; alt=&#34;HTML report screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/soxoj/maigret/main/static/report_alexaimephotography_xmind_screenshot.png&#34; alt=&#34;XMind 8 report screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/soxoj/maigret/main/static/recursive_search.md&#34;&gt;Full console output&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This tool is intended for educational and lawful purposes only.&lt;/strong&gt; The developers do not endorse or encourage any illegal activities or misuse of this tool. Regulations regarding the collection and use of personal data vary by country and region, including but not limited to GDPR in the EU, CCPA in the USA, and similar laws worldwide.&lt;/p&gt; &#xA;&lt;p&gt;It is your sole responsibility to ensure that your use of this tool complies with all applicable laws and regulations in your jurisdiction. Any illegal use of this tool is strictly prohibited, and you are fully accountable for your actions.&lt;/p&gt; &#xA;&lt;p&gt;The authors and developers of this tool bear no responsibility for any misuse or unlawful activities conducted by its users.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, suggestions, or feedback, please feel free to &lt;a href=&#34;https://github.com/soxoj/maigret/issues&#34;&gt;open an issue&lt;/a&gt;, create a &lt;a href=&#34;https://github.com/soxoj/maigret/discussions&#34;&gt;GitHub discussion&lt;/a&gt;, or contact the author directly via &lt;a href=&#34;https://t.me/soxoj&#34;&gt;Telegram&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SOWEL classification&lt;/h2&gt; &#xA;&lt;p&gt;This tool uses the following OSINT techniques:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sowel.soxoj.com/other-platform-accounts&#34;&gt;SOTL-2.2. Search For Accounts On Other Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sowel.soxoj.com/logins-reuse&#34;&gt;SOTL-6.1. Check Logins Reuse To Find Another Account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sowel.soxoj.com/nicknames-reuse&#34;&gt;SOTL-6.2. Check Nicknames Reuse To Find Another Account&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT ¬© &lt;a href=&#34;https://github.com/soxoj/maigret&#34;&gt;Maigret&lt;/a&gt;&lt;br&gt; MIT ¬© &lt;a href=&#34;https://github.com/sherlock-project/&#34;&gt;Sherlock Project&lt;/a&gt;&lt;br&gt; Original Creator of Sherlock Project - &lt;a href=&#34;https://github.com/sdushantha&#34;&gt;Siddharth Dushantha&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skills/copilot-codespaces-vscode</title>
    <updated>2024-12-09T01:28:56Z</updated>
    <id>tag:github.com,2024-12-09:/skills/copilot-codespaces-vscode</id>
    <link href="https://github.com/skills/copilot-codespaces-vscode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Develop with AI-powered code suggestions using GitHub Copilot and VS Code&lt;/p&gt;&lt;hr&gt;&lt;header&gt; &#xA; &lt;!--&#xA;  &lt;&lt;&lt; Author notes: Course header &gt;&gt;&gt;&#xA;  Read &lt;https://skills.github.com/quickstart&gt; for more information about how to build courses using this template.&#xA;  Include a 1280√ó640 image, course name in sentence case, and a concise description in emphasis.&#xA;  In your repository settings: enable template repository, add your 1280√ó640 social image, auto delete head branches.&#xA;  Next to &#34;About&#34;, add description &amp; tags; disable releases, packages, &amp; environments.&#xA;  Add your open source license, GitHub uses the MIT license.&#xA;--&gt; &#xA; &lt;h1&gt;Code with GitHub Copilot&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;GitHub Copilot can help you code by offering autocomplete-style suggestions right in VS Code and Codespaces.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/header&gt; &#xA;&lt;!--&#xA;  &lt;&lt;&lt; Author notes: Course start &gt;&gt;&gt;&#xA;  Include start button, a note about Actions minutes,&#xA;  and tell the learner why they should take the course.&#xA;--&gt; &#xA;&lt;h2&gt;Welcome&lt;/h2&gt; &#xA;&lt;p&gt;GitHub Copilot can help you code by offering autocomplete-style suggestions. You can learn how GitHub Copilot works, and what to consider while using GitHub Copilot. GitHub Copilot analyzes the context in the file you are editing, as well as related files, and offers suggestions from within your text editor. GitHub Copilot is powered by OpenAI Codex, a new AI system created by OpenAI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Who this is for&lt;/strong&gt;: Developers, DevOps Engineers, Software development managers, Testers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What you&#39;ll learn&lt;/strong&gt;: How to install Copilot into a Codespace, accept suggestions from code, accept suggestions from comments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What you&#39;ll build&lt;/strong&gt;: Javascript files that will have code generated by Copilot AI for code and comment suggestions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: To use GitHub Copilot you must have an active GitHub Copilot subscription. Sign up for 30 days free &lt;a href=&#34;https://github.com/settings/copilot&#34;&gt;Copilot&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Timing&lt;/strong&gt;: This course can be completed in under an hour.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to start this course&lt;/h3&gt; &#xA;&lt;!-- For start course, run in JavaScript:&#xA;&#39;https://github.com/new?&#39; + new URLSearchParams({&#xA;  template_owner: &#39;skills&#39;,&#xA;  template_name: &#39;copilot-codespaces-vscode&#39;,&#xA;  owner: &#39;@me&#39;,&#xA;  name: &#39;skills-copilot-codespaces-vscode&#39;,&#xA;  description: &#39;My clone repository&#39;,&#xA;  visibility: &#39;public&#39;,&#xA;}).toString()&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/new?template_owner=skills&amp;amp;template_name=copilot-codespaces-vscode&amp;amp;owner=%40me&amp;amp;name=skills-copilot-codespaces-vscode&amp;amp;description=My+clone+repository&amp;amp;visibility=public&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1221423/235727646-4a590299-ffe5-480d-8cd5-8194ea184546.svg?sanitize=true&#34; alt=&#34;start-course&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Right-click &lt;strong&gt;Start course&lt;/strong&gt; and open the link in a new tab.&lt;/li&gt; &#xA; &lt;li&gt;In the new tab, most of the prompts will automatically fill in for you. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For owner, choose your personal account or an organization to host the repository.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend creating a public repository, as private repositories will &lt;a href=&#34;https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions&#34;&gt;use Actions minutes&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Scroll down and click the &lt;strong&gt;Create repository&lt;/strong&gt; button at the bottom of the form.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;After your new repository is created, wait about 20 seconds, then refresh the page. Follow the step-by-step instructions in the new repository&#39;s README.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;footer&gt; &#xA; &lt;!--&#xA;  &lt;&lt;&lt; Author notes: Footer &gt;&gt;&gt;&#xA;  Add a link to get support, GitHub status page, code of conduct, license link.&#xA;--&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;Get help: &lt;a href=&#34;https://github.com/orgs/skills/discussions/categories/code-with-copilot&#34;&gt;Post in our discussion board&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://www.githubstatus.com/&#34;&gt;Review the GitHub status page&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;¬© 2023 GitHub ‚Ä¢ &lt;a href=&#34;https://www.contributor-covenant.org/version/2/1/code_of_conduct/code_of_conduct.md&#34;&gt;Code of Conduct&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://gh.io/mit&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/footer&gt;</summary>
  </entry>
  <entry>
    <title>evolutionaryscale/esm</title>
    <updated>2024-12-09T01:28:56Z</updated>
    <id>tag:github.com,2024-12-09:/evolutionaryscale/esm</id>
    <link href="https://github.com/evolutionaryscale/esm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#installation-&#34;&gt;Installation &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#esm-c-&#34;&gt;ESM C &lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#using-esm-c-300m-and-600m-via-github&#34;&gt;Using ESM C 300M and 600M via GitHub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#using-esm-c-6b-via-forge-api&#34;&gt;Using ESM C 6B via Forge API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#using-esm-c-6b-via-sagemaker&#34;&gt;Using ESM C 6B via SageMaker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#esm-3--&#34;&gt;ESM 3 &lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#quickstart-for-esm3-open&#34;&gt;Quickstart for ESM3-open&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#forge-access-to-larger-esm3-models&#34;&gt;Forge: Access to larger ESM3 models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#responsible-development-&#34;&gt;Responsible Development &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#licenses--&#34;&gt;Licenses &lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To get started with ESM, install the library using pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install esm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ESM C &lt;a name=&#34;esm-c&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.evolutionaryscale.ai/blog/esm-cambrian&#34;&gt;ESM Cambrian&lt;/a&gt; is a parallel model family to our flagship ESM3 generative models. While ESM3 focuses on controllable generation of proteins for therapeutic and many other applications, ESM C focuses on creating representations of the underlying biology of proteins.&lt;/p&gt; &#xA;&lt;p&gt;ESM C comes with major performance benefits over ESM2. The 300M parameter ESM C delivers similar performance to ESM2 650M with dramatically reduced memory requirements and faster inference. The 600M parameter ESM C rivals the 3B parameter ESM2 and approaches the capabilities of the 15B model, delivering frontier performance with far greater efficiency. The 6B parameter ESM C sets a new benchmark, outperforming the best ESM2 models by a wide margin.&lt;/p&gt; &#xA;&lt;p&gt;ESM C models are available immediately for academic and commercial use under a new license structure designed to promote openness and enable scientists and builders. You can find the high level take-away of the license structure in the &lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/#licenses&#34;&gt;Licenses&lt;/a&gt; section of this page, and the full license structure in the &lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;You can use the following guides to start using ESM C models today, either &lt;a href=&#34;https://huggingface.co/EvolutionaryScale&#34;&gt;running the model locally&lt;/a&gt;, &lt;a href=&#34;https://forge.evolutionaryscale.ai/&#34;&gt;the Forge API&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/marketplace/seller-profile?id=seller-iw2nbscescndm&#34;&gt;AWS SageMaker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using ESM C 300M and 600M via GitHub&lt;/h3&gt; &#xA;&lt;p&gt;ESM C model weights are stored on the HuggingFace hub under &lt;a href=&#34;https://huggingface.co/EvolutionaryScale/&#34;&gt;https://huggingface.co/EvolutionaryScale/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from esm.models.esmc import ESMC&#xA;from esm.sdk.api import ESMProtein, LogitsConfig&#xA;&#xA;protein = ESMProtein(sequence=&#34;AAAAA&#34;)&#xA;client = ESMC.from_pretrained(&#34;esmc_300m&#34;).to(&#34;cuda&#34;) # or &#34;cpu&#34;&#xA;protein_tensor = client.encode(protein)&#xA;logits_output = client.logits(&#xA;   protein_tensor, LogitsConfig(sequence=True, return_embeddings=True)&#xA;)&#xA;print(logits_output.logits, logits_output.embeddings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using ESM C 6B via Forge API&lt;/h3&gt; &#xA;&lt;p&gt;ESM C models, including ESMC 6B, are accessible via EvolutionaryScale Forge. You can request access and utilize these models through forge.evolutionaryscale.ai, as demonstrated in the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from esm.sdk.forge import ESM3ForgeInferenceClient&#xA;from esm.sdk.api import ESMProtein, LogitsConfig&#xA;&#xA;# Apply for forge access and get an access token&#xA;forge_client = ESM3ForgeInferenceClient(model=&#34;esmc-6b-2024-12&#34;, url=&#34;https://forge.evolutionaryscale.ai&#34;, token=&#34;&amp;lt;your forge token&amp;gt;&#34;)&#xA;protein_tensor = forge_client.encode(protein)&#xA;logits_output = forge_client.logits(&#xA;   protein_tensor, LogitsConfig(sequence=True, return_embeddings=True)&#xA;)&#xA;print(logits_output.logits, logits_output.embeddings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using ESM C 6B via SageMaker&lt;/h3&gt; &#xA;&lt;p&gt;ESM C models are also available on Amazon SageMaker. They function similarly to the ESM3 model family, and you can refer to the sample notebooks provided in this repository for examples.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need an admin AWS access to an AWS account to follow these instructions. To deploy, first we need to deploy the AWS package:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find the ESM C model version you want to subscribe to. All of our offerings are visible &lt;a href=&#34;https://aws.amazon.com/marketplace/seller-profile?id=seller-iw2nbscescndm&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click the name of the model version you are interested in, review pricing information and the end user license agreement (EULA), then click &#34;Continue to Subscribe&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Once you have subscribed, you should be able to see our model under your &lt;a href=&#34;https://us-east-1.console.aws.amazon.com/marketplace/home#/subscriptions&#34;&gt;marketplace subscriptions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click the product name and then from the &#34;Actions&#34; dropdown select &#34;Configure&#34;.&lt;/li&gt; &#xA; &lt;li&gt;You will next see the &#34;Configure and Launch&#34; UI. There are multiple deployment paths - we recommend using &#34;AWS CloudFormation&#34;.&lt;/li&gt; &#xA; &lt;li&gt;The default value for &#34;Service Access&#34; may or may not work. We recommend clicking &#34;Create and use a new service role&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Launch CloudFormation Template&#34;. This takes 15 to 25 minutes depending on model size.&lt;/li&gt; &#xA; &lt;li&gt;On the &#34;Quick create stack&#34; page, ensure the stack name and endpoint names are not already used. You can check existing stack names &lt;a href=&#34;https://console.aws.amazon.com/cloudformation/home/stacks&#34;&gt;here&lt;/a&gt; and existing endpoint names &lt;a href=&#34;https://us-east-1.console.aws.amazon.com/sagemaker/home?region=us-east-1#/endpoints&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The Sagemaker deployment of the model now lives on a dedicated GPU instance inside your AWS environment, and will be billed directly to your AWS account. Make sure to remember to shut down the instance after you stop using it. Find the CloudFormation stack you created &lt;a href=&#34;https://us-east-1.console.aws.amazon.com/cloudformation/home&#34;&gt;here&lt;/a&gt;, select it, and then click &#34;Delete&#34; to clean up all resources.&lt;/p&gt; &#xA;&lt;p&gt;After creating the endpoint, you can create a sagemaker client and use it the same way as a forge client. They share the same API.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that the code below runs in an environment that has AWS credentials available for the account which provisioned SageMaker resources. Learn more about general AWS credential options &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-authentication.html#cli-chap-authentication-precedence&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from esm.sdk.sagemaker import ESM3SageMakerClient&#xA;from esm.sdk.api import ESMProtein, LogitsConfig&#xA;&#xA;sagemaker_client = ESM3SageMakerClient(&#xA;   # E.g. &#34;Endpoint-ESMC-6B-1&#34;&#xA;   endpoint_name=SAGE_ENDPOINT_NAME,&#xA;   # E.g. &#34;esmc-6b-2024-12&#34;. Same model names as in Forge.&#xA;   model=MODEL_NAME,&#xA;)&#xA;&#xA;protein = ESMProtein(sequence=&#34;AAAAA&#34;)&#xA;protein_tensor = sagemaker_client.encode(protein)&#xA;logits_output = sagemaker_client.logits(&#xA;   protein_tensor, LogitsConfig(sequence=True, return_embeddings=True)&#xA;)&#xA;print(logits_output.logits, logits_output.embeddings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ESM 3 &lt;a name=&#34;esm3&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.evolutionaryscale.ai/papers/esm3-simulating-500-million-years-of-evolution-with-a-language-model&#34;&gt;ESM3&lt;/a&gt; is a frontier generative model for biology, able to jointly reason across three fundamental biological properties of proteins: sequence, structure, and function. These three data modalities are represented as tracks of discrete tokens at the input and output of ESM3. You can present the model with a combination of partial inputs across the tracks, and ESM3 will provide output predictions for all the tracks.&lt;/p&gt; &#xA;&lt;p&gt;ESM3 is a &lt;em&gt;generative&lt;/em&gt; masked language model. You can prompt it with partial sequence, structure, and function keywords, and iteratively sample masked positions until all positions are unmasked. This iterative sampling is what the &lt;code&gt;.generate()&lt;/code&gt; function does.&lt;/p&gt; &#xA;&lt;!--![ESM3 Diagram](_assets/esm3_diagram.png)--&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/_assets/esm3_diagram.png&#34; alt=&#34;ESM3 Diagram&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;The ESM3 architecture is highly scalable due to its transformer backbone and all-to-all reasoning over discrete token sequences. At its largest scale, ESM3 was trained with 1.07e24 FLOPs on 2.78 billion proteins and 771 billion unique tokens, and has 98 billion parameters. Learn more by reading the &lt;a href=&#34;https://www.evolutionaryscale.ai/blog/esm3-release&#34;&gt;blog post&lt;/a&gt; and &lt;a href=&#34;https://www.evolutionaryscale.ai/papers/esm3-simulating-500-million-years-of-evolution-with-a-language-model&#34;&gt;the pre-print (Hayes et al., 2024)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here we present &lt;code&gt;esm3-open-small&lt;/code&gt;. With 1.4B parameters it is the smallest and fastest model in the family. ESM3-open is available under the &lt;a href=&#34;https://www.evolutionaryscale.ai/policies/cambrian-non-commercial-license-agreement&#34;&gt;Cambrian non-commercial license agreement&lt;/a&gt;, as outlined in &lt;code&gt;LICENSE.md&lt;/code&gt; (note: updated with ESM C release). Visit our &lt;a href=&#34;https://github.com/evolutionaryscale/esm/discussions&#34;&gt;Discussions page&lt;/a&gt; to get in touch, provide feedback, ask questions or share your experience with ESM3!&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart for ESM3-open&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install esm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to download the weights, we require users to accept our non-commercial license. The weights are stored on HuggingFace Hub under &lt;a href=&#34;https://huggingface.co/EvolutionaryScale/esm3&#34;&gt;HuggingFace/EvolutionaryScale/esm3&lt;/a&gt;. Please create an account and accept the license.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from huggingface_hub import login&#xA;from esm.models.esm3 import ESM3&#xA;from esm.sdk.api import ESM3InferenceClient, ESMProtein, GenerationConfig&#xA;&#xA;# Will instruct you how to get an API key from huggingface hub, make one with &#34;Read&#34; permission.&#xA;login()&#xA;&#xA;# This will download the model weights and instantiate the model on your machine.&#xA;model: ESM3InferenceClient = ESM3.from_pretrained(&#34;esm3-open&#34;).to(&#34;cuda&#34;) # or &#34;cpu&#34;&#xA;&#xA;# Generate a completion for a partial Carbonic Anhydrase (2vvb)&#xA;prompt = &#34;___________________________________________________DQATSLRILNNGHAFNVEFDDSQDKAVLKGGPLDGTYRLIQFHFHWGSLDGQGSEHTVDKKKYAAELHLVHWNTKYGDFGKAVQQPDGLAVLGIFLKVGSAKPGLQKVVDVLDSIKTKGKSADFTNFDPRGLLPESLDYWTYPGSLTTPP___________________________________________________________&#34;&#xA;protein = ESMProtein(sequence=prompt)&#xA;# Generate the sequence, then the structure. This will iteratively unmask the sequence track.&#xA;protein = model.generate(protein, GenerationConfig(track=&#34;sequence&#34;, num_steps=8, temperature=0.7))&#xA;# We can show the predicted structure for the generated sequence.&#xA;protein = model.generate(protein, GenerationConfig(track=&#34;structure&#34;, num_steps=8))&#xA;protein.to_pdb(&#34;./generation.pdb&#34;)&#xA;# Then we can do a round trip design by inverse folding the sequence and recomputing the structure&#xA;protein.sequence = None&#xA;protein = model.generate(protein, GenerationConfig(track=&#34;sequence&#34;, num_steps=8))&#xA;protein.coordinates = None&#xA;protein = model.generate(protein, GenerationConfig(track=&#34;structure&#34;, num_steps=8))&#xA;protein.to_pdb(&#34;./round_tripped.pdb&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations, you just generated your first proteins with ESM3! Let&#39;s explore some more advanced prompting with the help of our &lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/examples/&#34;&gt;notebooks and scripts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;generate.ipynb&lt;/code&gt; will walk through two prompting examples (scaffolding and secondary structure editing) using the open model: &lt;a href=&#34;https://colab.research.google.com/github/evolutionaryscale/esm/blob/main/examples/generate.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gfp_design.ipynb&lt;/code&gt; will walk through the more complex generation procedure we used to design esmGFP: &lt;a href=&#34;https://colab.research.google.com/github/evolutionaryscale/esm/blob/main/examples/gfp_design.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also provide example scripts that show common workflows under &lt;code&gt;examples/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/examples/local_generate.py&#34;&gt;local_generate.py&lt;/a&gt; shows how simple and elegant common tasks are: it shows folding, inverse folding and chain of thought generation, all by calling just &lt;code&gt;model.generate()&lt;/code&gt; for iterative decoding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/examples/seqfun_struct.py&#34;&gt;seqfun_struct.py&lt;/a&gt; shows direct use of the model as a standard pytorch model with a simple model &lt;code&gt;forward&lt;/code&gt; call.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Forge: Access to larger ESM3 models&lt;/h3&gt; &#xA;&lt;p&gt;You can apply for beta access to the full family of larger and higher capability ESM3 models at &lt;a href=&#34;https://forge.evolutionaryscale.ai&#34;&gt;EvolutionaryScale Forge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We encourage users to interact with the Forge API through the python &lt;code&gt;esm&lt;/code&gt; library instead of the command line. The python interface enables you to interactively load proteins, build prompts, and inspect generated proteins with the &lt;code&gt;ESMProtein&lt;/code&gt; and config classes used to interact with the local model.&lt;/p&gt; &#xA;&lt;p&gt;In any example script try to replace a local &lt;code&gt;ESM3&lt;/code&gt; model with a Forge API client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Instead of loading the model locally on your machine:&#xA;model: ESM3InferenceClient = ESM3.from_pretrained(&#34;esm3_sm_open_v1&#34;).to(&#34;cuda&#34;) # or &#34;cpu&#34;&#xA;# just replace the line with this:&#xA;model: ESM3InferenceClient = esm.sdk.client(&#34;esm3-medium-2024-08&#34;, token=&#34;&amp;lt;your forge token&amp;gt;&#34;)&#xA;# and now you&#39;re interfacing with the model running on our remote servers.&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the exact same code will work. This enables a seamless transition from smaller and faster models, to our large 98B protein language models for protein design work.&lt;/p&gt; &#xA;&lt;h2&gt;Responsible Development &lt;a name=&#34;responsible-development&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;EvolutionaryScale is a public benefit company. Our mission is to develop artificial intelligence to understand biology for the benefit of human health and society, through partnership with the scientific community, and open, safe, and responsible research. Inspired by the history of our field as well as &lt;a href=&#34;https://responsiblebiodesign.ai/&#34;&gt;new principles and recommendations&lt;/a&gt;, we have created a Responsible Development Framework to guide our work towards our mission with transparency and clarity.&lt;/p&gt; &#xA;&lt;p&gt;The core tenets of our framework are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We will communicate the benefits and risks of our research&lt;/li&gt; &#xA; &lt;li&gt;We will proactively and rigorously evaluate the risk of our models before public deployment&lt;/li&gt; &#xA; &lt;li&gt;We will adopt risk mitigation strategies and precautionary guardrails&lt;/li&gt; &#xA; &lt;li&gt;We will work with stakeholders in government, policy, and civil society to keep them informed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this in mind, we have performed a variety of mitigations for &lt;code&gt;esm3-sm-open-v1&lt;/code&gt;, detailed in our &lt;a href=&#34;https://www.evolutionaryscale.ai/papers/esm3-simulating-500-million-years-of-evolution-with-a-language-model&#34;&gt;paper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses &lt;a name=&#34;licenses&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The code and model weights of ESM3 and ESM C are available under a mixture of non-commercial and more permissive licenses, fully outlined in &lt;a href=&#34;https://raw.githubusercontent.com/evolutionaryscale/esm/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>