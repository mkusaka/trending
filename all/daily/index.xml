<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-21T01:23:12Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zylon-ai/private-gpt</title>
    <updated>2024-03-21T01:23:12Z</updated>
    <id>tag:github.com,2024-03-21:/zylon-ai/private-gpt</id>
    <link href="https://github.com/zylon-ai/private-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interact with your documents using the power of GPT, 100% privately, no data leaks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üîí PrivateGPT üìë&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/imartinez/privateGPT/actions/workflows/tests.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/imartinez/privateGPT/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.privategpt.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?up_message=check%20it&amp;amp;down_message=down&amp;amp;url=https%3A%2F%2Fdocs.privategpt.dev%2F&amp;amp;label=Documentation&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/bK6mRVpErU&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1164200432894234644?logo=discord&amp;amp;label=PrivateGPT&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ZylonPrivateGPT&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ZylonPrivateGPT&#34; alt=&#34;X (formerly Twitter) Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Install &amp;amp; usage docs: &lt;a href=&#34;https://docs.privategpt.dev/&#34;&gt;https://docs.privategpt.dev/&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Join the community: &lt;a href=&#34;https://twitter.com/PrivateGPT_AI&#34;&gt;Twitter&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://discord.gg/bK6mRVpErU&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zylon-ai/private-gpt/main/fern/docs/assets/ui.png?raw=true&#34; alt=&#34;Gradio UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;PrivateGPT is a production-ready AI project that allows you to ask questions about your documents using the power of Large Language Models (LLMs), even in scenarios without an Internet connection. 100% private, no data leaves your execution environment at any point.&lt;/p&gt; &#xA;&lt;p&gt;The project provides an API offering all the primitives required to build private, context-aware AI applications. It follows and extends the &lt;a href=&#34;https://openai.com/blog/openai-api&#34;&gt;OpenAI API standard&lt;/a&gt;, and supports both normal and streaming responses.&lt;/p&gt; &#xA;&lt;p&gt;The API is divided into two logical blocks:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;High-level API&lt;/strong&gt;, which abstracts all the complexity of a RAG (Retrieval Augmented Generation) pipeline implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ingestion of documents: internally managing document parsing, splitting, metadata extraction, embedding generation and storage.&lt;/li&gt; &#xA; &lt;li&gt;Chat &amp;amp; Completions using context from ingested documents: abstracting the retrieval of context, the prompt engineering and the response generation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Low-level API&lt;/strong&gt;, which allows advanced users to implement their own complex pipelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embeddings generation: based on a piece of text.&lt;/li&gt; &#xA; &lt;li&gt;Contextual chunks retrieval: given a query, returns the most relevant chunks of text from the ingested documents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to this, a working &lt;a href=&#34;https://www.gradio.app/&#34;&gt;Gradio UI&lt;/a&gt; client is provided to test the API, together with a set of useful tools such as bulk model download script, ingestion script, documents folder watch, etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üëÇ &lt;strong&gt;Need help applying PrivateGPT to your specific use case?&lt;/strong&gt; &lt;a href=&#34;https://forms.gle/4cSDmH13RZBHV9at7&#34;&gt;Let us know more about it&lt;/a&gt; and we&#39;ll try to help! We are refining PrivateGPT through your feedback.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üéûÔ∏è Overview&lt;/h2&gt; &#xA;&lt;p&gt;DISCLAIMER: This README is not updated as frequently as the &lt;a href=&#34;https://docs.privategpt.dev/&#34;&gt;documentation&lt;/a&gt;. Please check it out for the latest updates!&lt;/p&gt; &#xA;&lt;h3&gt;Motivation behind PrivateGPT&lt;/h3&gt; &#xA;&lt;p&gt;Generative AI is a game changer for our society, but adoption in companies of all sizes and data-sensitive domains like healthcare or legal is limited by a clear concern: &lt;strong&gt;privacy&lt;/strong&gt;. Not being able to ensure that your data is fully under your control when using third-party AI tools is a risk those industries cannot take.&lt;/p&gt; &#xA;&lt;h3&gt;Primordial version&lt;/h3&gt; &#xA;&lt;p&gt;The first version of PrivateGPT was launched in May 2023 as a novel approach to address the privacy concerns by using LLMs in a complete offline way.&lt;/p&gt; &#xA;&lt;p&gt;That version, which rapidly became a go-to project for privacy-sensitive setups and served as the seed for thousands of local-focused generative AI projects, was the foundation of what PrivateGPT is becoming nowadays; thus a simpler and more educational implementation to understand the basic concepts required to build a fully local -and therefore, private- chatGPT-like tool.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep experimenting with it, we have saved it in the &lt;a href=&#34;https://github.com/imartinez/privateGPT/tree/primordial&#34;&gt;primordial branch&lt;/a&gt; of the project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is strongly recommended to do a clean clone and install of this new version of PrivateGPT if you come from the previous, primordial version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Present and Future of PrivateGPT&lt;/h3&gt; &#xA;&lt;p&gt;PrivateGPT is now evolving towards becoming a gateway to generative AI models and primitives, including completions, document ingestion, RAG pipelines and other low-level building blocks. We want to make it easier for any developer to build AI applications and experiences, as well as provide a suitable extensive architecture for the community to keep contributing.&lt;/p&gt; &#xA;&lt;p&gt;Stay tuned to our &lt;a href=&#34;https://github.com/imartinez/privateGPT/releases&#34;&gt;releases&lt;/a&gt; to check out all the new features and changes included.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation on installation, dependencies, configuration, running the server, deployment options, ingesting local documents, API details and UI features can be found here: &lt;a href=&#34;https://docs.privategpt.dev/&#34;&gt;https://docs.privategpt.dev/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üß© Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Conceptually, PrivateGPT is an API that wraps a RAG pipeline and exposes its primitives.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The API is built using &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt; and follows &lt;a href=&#34;https://platform.openai.com/docs/api-reference&#34;&gt;OpenAI&#39;s API scheme&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The RAG pipeline is based on &lt;a href=&#34;https://www.llamaindex.ai/&#34;&gt;LlamaIndex&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The design of PrivateGPT allows to easily extend and adapt both the API and the RAG implementation. Some key architectural decisions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependency Injection, decoupling the different components and layers.&lt;/li&gt; &#xA; &lt;li&gt;Usage of LlamaIndex abstractions such as &lt;code&gt;LLM&lt;/code&gt;, &lt;code&gt;BaseEmbedding&lt;/code&gt; or &lt;code&gt;VectorStore&lt;/code&gt;, making it immediate to change the actual implementations of those abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Simplicity, adding as few layers and new abstractions as possible.&lt;/li&gt; &#xA; &lt;li&gt;Ready to use, providing a full implementation of the API and RAG pipeline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main building blocks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APIs are defined in &lt;code&gt;private_gpt:server:&amp;lt;api&amp;gt;&lt;/code&gt;. Each package contains an &lt;code&gt;&amp;lt;api&amp;gt;_router.py&lt;/code&gt; (FastAPI layer) and an &lt;code&gt;&amp;lt;api&amp;gt;_service.py&lt;/code&gt; (the service implementation). Each &lt;em&gt;Service&lt;/em&gt; uses LlamaIndex base abstractions instead of specific implementations, decoupling the actual implementation from its usage.&lt;/li&gt; &#xA; &lt;li&gt;Components are placed in &lt;code&gt;private_gpt:components:&amp;lt;component&amp;gt;&lt;/code&gt;. Each &lt;em&gt;Component&lt;/em&gt; is in charge of providing actual implementations to the base abstractions used in the Services - for example &lt;code&gt;LLMComponent&lt;/code&gt; is in charge of providing an actual implementation of an &lt;code&gt;LLM&lt;/code&gt; (for example &lt;code&gt;LlamaCPP&lt;/code&gt; or &lt;code&gt;OpenAI&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí° Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed! To ensure code quality we have enabled several format and typing checks, just run &lt;code&gt;make check&lt;/code&gt; before committing to make sure your code is ok. Remember to test your code! You&#39;ll find a tests folder with helpers, and you can run tests using &lt;code&gt;make test&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t know what to contribute? Here is the public &lt;a href=&#34;https://github.com/users/imartinez/projects/3&#34;&gt;Project Board&lt;/a&gt; with several ideas.&lt;/p&gt; &#xA;&lt;p&gt;Head over to Discord #contributors channel and ask for write permissions on that GitHub project.&lt;/p&gt; &#xA;&lt;h2&gt;üí¨ Community&lt;/h2&gt; &#xA;&lt;p&gt;Join the conversation around PrivateGPT on our:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/PrivateGPT_AI&#34;&gt;Twitter (aka X)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/bK6mRVpErU&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìñ Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use PrivateGPT in a paper, check out the &lt;a href=&#34;https://raw.githubusercontent.com/zylon-ai/private-gpt/main/CITATION.cff&#34;&gt;Citation file&lt;/a&gt; for the correct citation.&lt;br&gt; You can also use the &#34;Cite this repository&#34; button in this repo to get the citation in different formats.&lt;/p&gt; &#xA;&lt;p&gt;Here are a couple of examples:&lt;/p&gt; &#xA;&lt;h4&gt;BibTeX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@software{Martinez_Toro_PrivateGPT_2023,&#xA;author = {Mart√≠nez Toro, Iv√°n and Gallego Vico, Daniel and Orgaz, Pablo},&#xA;license = {Apache-2.0},&#xA;month = may,&#xA;title = {{PrivateGPT}},&#xA;url = {https://github.com/imartinez/privateGPT},&#xA;year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;APA&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Mart√≠nez Toro, I., Gallego Vico, D., &amp;amp; Orgaz, P. (2023). PrivateGPT [Computer software]. https://github.com/imartinez/privateGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü§ó Partners &amp;amp; Supporters&lt;/h2&gt; &#xA;&lt;p&gt;PrivateGPT is actively supported by the teams behind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt;, providing the default vector database&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buildwithfern.com/&#34;&gt;Fern&lt;/a&gt;, providing Documentation and SDKs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.llamaindex.ai/&#34;&gt;LlamaIndex&lt;/a&gt;, providing the base RAG framework and abstractions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has been strongly influenced and supported by other amazing projects like &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;, &lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;GPT4All&lt;/a&gt;, &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;LlamaCpp&lt;/a&gt;, &lt;a href=&#34;https://www.trychroma.com/&#34;&gt;Chroma&lt;/a&gt; and &lt;a href=&#34;https://www.sbert.net/&#34;&gt;SentenceTransformers&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pola-rs/polars</title>
    <updated>2024-03-21T01:23:12Z</updated>
    <id>tag:github.com,2024-03-21:/pola-rs/polars</id>
    <link href="https://github.com/pola-rs/polars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dataframes powered by a multithreaded, vectorized query engine, written in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pola-rs/polars-static/master/logos/polars_github_logo_rect_dark_name.svg?sanitize=true&#34; alt=&#34;Polars logo&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/polars&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/polars.svg?sanitize=true&#34; alt=&#34;crates.io Latest Release&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://pypi.org/project/polars/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/polars.svg?sanitize=true&#34; alt=&#34;PyPi Latest Release&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/nodejs-polars&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/nodejs-polars.svg?sanitize=true&#34; alt=&#34;NPM Latest Release&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://rpolars.r-universe.dev&#34;&gt; &lt;img src=&#34;https://rpolars.r-universe.dev/badges/polars&#34; alt=&#34;R-universe Latest Release&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://doi.org/10.5281/zenodo.7697217&#34;&gt; &lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg?sanitize=true&#34; alt=&#34;DOI Latest Release&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Documentation&lt;/b&gt;: &lt;a href=&#34;https://docs.pola.rs/py-polars/html/reference/index.html&#34;&gt;Python&lt;/a&gt; - &lt;a href=&#34;https://docs.rs/polars/latest/polars/&#34;&gt;Rust&lt;/a&gt; - &lt;a href=&#34;https://pola-rs.github.io/nodejs-polars/index.html&#34;&gt;Node.js&lt;/a&gt; - &lt;a href=&#34;https://rpolars.github.io/index.html&#34;&gt;R&lt;/a&gt; | &lt;b&gt;StackOverflow&lt;/b&gt;: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/python-polars&#34;&gt;Python&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/tagged/rust-polars&#34;&gt;Rust&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/tagged/nodejs-polars&#34;&gt;Node.js&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/tagged/r-polars&#34;&gt;R&lt;/a&gt; | &lt;a href=&#34;https://docs.pola.rs/&#34;&gt;User guide&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/4UfP5cfBE7&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Polars: Blazingly fast DataFrames in Rust, Python, Node.js, R, and SQL&lt;/h2&gt; &#xA;&lt;p&gt;Polars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using &lt;a href=&#34;https://arrow.apache.org/docs/format/Columnar.html&#34;&gt;Apache Arrow Columnar Format&lt;/a&gt; as the memory model.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lazy | eager execution&lt;/li&gt; &#xA; &lt;li&gt;Multi-threaded&lt;/li&gt; &#xA; &lt;li&gt;SIMD&lt;/li&gt; &#xA; &lt;li&gt;Query optimization&lt;/li&gt; &#xA; &lt;li&gt;Powerful expression API&lt;/li&gt; &#xA; &lt;li&gt;Hybrid Streaming (larger-than-RAM datasets)&lt;/li&gt; &#xA; &lt;li&gt;Rust | Python | NodeJS | R | ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more, read the &lt;a href=&#34;https://docs.pola.rs/&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Python&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import polars as pl&#xA;&amp;gt;&amp;gt;&amp;gt; df = pl.DataFrame(&#xA;...     {&#xA;...         &#34;A&#34;: [1, 2, 3, 4, 5],&#xA;...         &#34;fruits&#34;: [&#34;banana&#34;, &#34;banana&#34;, &#34;apple&#34;, &#34;apple&#34;, &#34;banana&#34;],&#xA;...         &#34;B&#34;: [5, 4, 3, 2, 1],&#xA;...         &#34;cars&#34;: [&#34;beetle&#34;, &#34;audi&#34;, &#34;beetle&#34;, &#34;beetle&#34;, &#34;beetle&#34;],&#xA;...     }&#xA;... )&#xA;&#xA;# embarrassingly parallel execution &amp;amp; very expressive query language&#xA;&amp;gt;&amp;gt;&amp;gt; df.sort(&#34;fruits&#34;).select(&#xA;...     &#34;fruits&#34;,&#xA;...     &#34;cars&#34;,&#xA;...     pl.lit(&#34;fruits&#34;).alias(&#34;literal_string_fruits&#34;),&#xA;...     pl.col(&#34;B&#34;).filter(pl.col(&#34;cars&#34;) == &#34;beetle&#34;).sum(),&#xA;...     pl.col(&#34;A&#34;).filter(pl.col(&#34;B&#34;) &amp;gt; 2).sum().over(&#34;cars&#34;).alias(&#34;sum_A_by_cars&#34;),&#xA;...     pl.col(&#34;A&#34;).sum().over(&#34;fruits&#34;).alias(&#34;sum_A_by_fruits&#34;),&#xA;...     pl.col(&#34;A&#34;).reverse().over(&#34;fruits&#34;).alias(&#34;rev_A_by_fruits&#34;),&#xA;...     pl.col(&#34;A&#34;).sort_by(&#34;B&#34;).over(&#34;fruits&#34;).alias(&#34;sort_A_by_B_by_fruits&#34;),&#xA;... )&#xA;shape: (5, 8)&#xA;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ fruits   ‚îÜ cars     ‚îÜ literal_stri ‚îÜ B   ‚îÜ sum_A_by_ca ‚îÜ sum_A_by_fr ‚îÜ rev_A_by_fr ‚îÜ sort_A_by_B ‚îÇ&#xA;‚îÇ ---      ‚îÜ ---      ‚îÜ ng_fruits    ‚îÜ --- ‚îÜ rs          ‚îÜ uits        ‚îÜ uits        ‚îÜ _by_fruits  ‚îÇ&#xA;‚îÇ str      ‚îÜ str      ‚îÜ ---          ‚îÜ i64 ‚îÜ ---         ‚îÜ ---         ‚îÜ ---         ‚îÜ ---         ‚îÇ&#xA;‚îÇ          ‚îÜ          ‚îÜ str          ‚îÜ     ‚îÜ i64         ‚îÜ i64         ‚îÜ i64         ‚îÜ i64         ‚îÇ&#xA;‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï°&#xA;‚îÇ &#34;apple&#34;  ‚îÜ &#34;beetle&#34; ‚îÜ &#34;fruits&#34;     ‚îÜ 11  ‚îÜ 4           ‚îÜ 7           ‚îÜ 4           ‚îÜ 4           ‚îÇ&#xA;‚îÇ &#34;apple&#34;  ‚îÜ &#34;beetle&#34; ‚îÜ &#34;fruits&#34;     ‚îÜ 11  ‚îÜ 4           ‚îÜ 7           ‚îÜ 3           ‚îÜ 3           ‚îÇ&#xA;‚îÇ &#34;banana&#34; ‚îÜ &#34;beetle&#34; ‚îÜ &#34;fruits&#34;     ‚îÜ 11  ‚îÜ 4           ‚îÜ 8           ‚îÜ 5           ‚îÜ 5           ‚îÇ&#xA;‚îÇ &#34;banana&#34; ‚îÜ &#34;audi&#34;   ‚îÜ &#34;fruits&#34;     ‚îÜ 11  ‚îÜ 2           ‚îÜ 8           ‚îÜ 2           ‚îÜ 2           ‚îÇ&#xA;‚îÇ &#34;banana&#34; ‚îÜ &#34;beetle&#34; ‚îÜ &#34;fruits&#34;     ‚îÜ 11  ‚îÜ 4           ‚îÜ 8           ‚îÜ 1           ‚îÜ 1           ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SQL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; df = pl.scan_ipc(&#34;file.arrow&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; # create a SQL context, registering the frame as a table&#xA;&amp;gt;&amp;gt;&amp;gt; sql = pl.SQLContext(my_table=df)&#xA;&amp;gt;&amp;gt;&amp;gt; # create a SQL query to execute&#xA;&amp;gt;&amp;gt;&amp;gt; query = &#34;&#34;&#34;&#xA;...   SELECT sum(v1) as sum_v1, min(v2) as min_v2 FROM my_table&#xA;...   WHERE id1 = &#39;id016&#39;&#xA;...   LIMIT 10&#xA;... &#34;&#34;&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; ## OPTION 1&#xA;&amp;gt;&amp;gt;&amp;gt; # run the query, materializing as a DataFrame&#xA;&amp;gt;&amp;gt;&amp;gt; sql.execute(query, eager=True)&#xA; shape: (1, 2)&#xA; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA; ‚îÇ sum_v1 ‚îÜ min_v2 ‚îÇ&#xA; ‚îÇ ---    ‚îÜ ---    ‚îÇ&#xA; ‚îÇ i64    ‚îÜ i64    ‚îÇ&#xA; ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï™‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï°&#xA; ‚îÇ 298268 ‚îÜ 1      ‚îÇ&#xA; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&amp;gt;&amp;gt;&amp;gt; ## OPTION 2&#xA;&amp;gt;&amp;gt;&amp;gt; # run the query but don&#39;t immediately materialize the result.&#xA;&amp;gt;&amp;gt;&amp;gt; # this returns a LazyFrame that you can continue to operate on.&#xA;&amp;gt;&amp;gt;&amp;gt; lf = sql.execute(query)&#xA;&amp;gt;&amp;gt;&amp;gt; (lf.join(other_table)&#xA;...      .group_by(&#34;foo&#34;)&#xA;...      .agg(&#xA;...     pl.col(&#34;sum_v1&#34;).count()&#xA;... ).collect())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQL commands can also be run directly from your terminal using the Polars CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run an inline SQL query&#xA;&amp;gt; polars -c &#34;SELECT sum(v1) as sum_v1, min(v2) as min_v2 FROM read_ipc(&#39;file.arrow&#39;) WHERE id1 = &#39;id016&#39; LIMIT 10&#34;&#xA;&#xA;# run interactively&#xA;&amp;gt; polars&#xA;Polars CLI v0.3.0&#xA;Type .help for help.&#xA;&#xA;&amp;gt; SELECT sum(v1) as sum_v1, min(v2) as min_v2 FROM read_ipc(&#39;file.arrow&#39;) WHERE id1 = &#39;id016&#39; LIMIT 10;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/pola-rs/polars-cli&#34;&gt;Polars CLI repository&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Performance üöÄüöÄ&lt;/h2&gt; &#xA;&lt;h3&gt;Blazingly fast&lt;/h3&gt; &#xA;&lt;p&gt;Polars is very fast. In fact, it is one of the best performing solutions available. See the results in &lt;a href=&#34;https://duckdblabs.github.io/db-benchmark/&#34;&gt;DuckDB&#39;s db-benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://www.pola.rs/benchmarks.html&#34;&gt;TPC-H benchmarks&lt;/a&gt; Polars is orders of magnitude faster than pandas, dask, modin and vaex on full queries (including IO).&lt;/p&gt; &#xA;&lt;h3&gt;Lightweight&lt;/h3&gt; &#xA;&lt;p&gt;Polars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;polars: 70ms&lt;/li&gt; &#xA; &lt;li&gt;numpy: 104ms&lt;/li&gt; &#xA; &lt;li&gt;pandas: 520ms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Handles larger-than-RAM data&lt;/h3&gt; &#xA;&lt;p&gt;If you have data that does not fit into memory, Polars&#39; query engine is able to process your query (or parts of your query) in a streaming fashion. This drastically reduces memory requirements, so you might be able to process your 250GB dataset on your laptop. Collect with &lt;code&gt;collect(streaming=True)&lt;/code&gt; to run the query streaming. (This might be a little slower, but it is still very fast!)&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;Install the latest Polars version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install polars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also have a conda package (&lt;code&gt;conda install -c conda-forge polars&lt;/code&gt;), however pip is the preferred way to install Polars.&lt;/p&gt; &#xA;&lt;p&gt;Install Polars with all optional dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install &#39;polars[all]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install a subset of all optional dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install &#39;polars[numpy,pandas,pyarrow]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;all&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install all optional dependencies (all of the following)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pandas&lt;/td&gt; &#xA;   &lt;td&gt;Install with pandas for converting data to and from pandas DataFrames/Series&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;numpy&lt;/td&gt; &#xA;   &lt;td&gt;Install with NumPy for converting data to and from NumPy arrays&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pyarrow&lt;/td&gt; &#xA;   &lt;td&gt;Reading data formats using PyArrow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fsspec&lt;/td&gt; &#xA;   &lt;td&gt;Support for reading from remote file systems&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;connectorx&lt;/td&gt; &#xA;   &lt;td&gt;Support for reading from SQL databases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xlsx2csv&lt;/td&gt; &#xA;   &lt;td&gt;Support for reading from Excel files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openpyxl&lt;/td&gt; &#xA;   &lt;td&gt;Support for reading from Excel files with native types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deltalake&lt;/td&gt; &#xA;   &lt;td&gt;Support for reading and writing Delta Lake Tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pyiceberg&lt;/td&gt; &#xA;   &lt;td&gt;Support for reading from Apache Iceberg tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;plot&lt;/td&gt; &#xA;   &lt;td&gt;Support for plot functions on DataFrames&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timezone&lt;/td&gt; &#xA;   &lt;td&gt;Timezone support, only needed if you are on Python&amp;lt;3.9 or Windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Releases happen quite often (weekly / every few days) at the moment, so updating Polars regularly to get the latest bugfixes / features might not be a bad idea.&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;You can take latest release from &lt;code&gt;crates.io&lt;/code&gt;, or if you want to use the latest features / performance improvements point to the &lt;code&gt;main&lt;/code&gt; branch of this repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;polars = { git = &#34;https://github.com/pola-rs/polars&#34;, rev = &#34;&amp;lt;optional git tag&amp;gt;&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requires Rust version &lt;code&gt;&amp;gt;=1.71&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Read our &lt;a href=&#34;https://docs.pola.rs/development/contributing/&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Python: compile Polars from source&lt;/h2&gt; &#xA;&lt;p&gt;If you want a bleeding edge release or maximal performance you should compile Polars from source.&lt;/p&gt; &#xA;&lt;p&gt;This can be done by going through the following steps in sequence:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust compiler&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://maturin.rs/&#34;&gt;maturin&lt;/a&gt;: &lt;code&gt;pip install maturin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd py-polars&lt;/code&gt; and choose one of the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;make build-release&lt;/code&gt;, fastest binary, very long compile times&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make build-opt&lt;/code&gt;, fast binary with debug symbols, long compile times&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make build-debug-opt&lt;/code&gt;, medium-speed binary with debug assertions and symbols, medium compile times&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make build&lt;/code&gt;, slow binary with debug assertions and symbols, fast compile times&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Append &lt;code&gt;-native&lt;/code&gt; (e.g. &lt;code&gt;make build-release-native&lt;/code&gt;) to enable further optimizations specific to your CPU. This produces a non-portable binary/wheel however.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that the Rust crate implementing the Python bindings is called &lt;code&gt;py-polars&lt;/code&gt; to distinguish from the wrapped Rust crate &lt;code&gt;polars&lt;/code&gt; itself. However, both the Python package and the Python module are named &lt;code&gt;polars&lt;/code&gt;, so you can &lt;code&gt;pip install polars&lt;/code&gt; and &lt;code&gt;import polars&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use custom Rust function in Python?&lt;/h2&gt; &#xA;&lt;p&gt;Extending Polars with UDFs compiled in Rust is easy. We expose PyO3 extensions for &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; data structures. See more in &lt;a href=&#34;https://github.com/pola-rs/pyo3-polars&#34;&gt;https://github.com/pola-rs/pyo3-polars&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Going big...&lt;/h2&gt; &#xA;&lt;p&gt;Do you expect more than 2^32 (~4.2 billion) rows? Compile Polars with the &lt;code&gt;bigidx&lt;/code&gt; feature flag.&lt;/p&gt; &#xA;&lt;p&gt;Or for Python users, install &lt;code&gt;pip install polars-u64-idx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t use this unless you hit the row boundary, as the default build of Polars is faster and consumes less memory.&lt;/p&gt; &#xA;&lt;h2&gt;Legacy&lt;/h2&gt; &#xA;&lt;p&gt;Do you want Polars to run on an old CPU (e.g. dating from before 2011), or on an &lt;code&gt;x86-64&lt;/code&gt; build of Python on Apple Silicon under Rosetta? Install &lt;code&gt;pip install polars-lts-cpu&lt;/code&gt;. This version of Polars is compiled without &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&#34;&gt;AVX&lt;/a&gt; target features.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com&#34;&gt;&lt;img src=&#34;https://www.jetbrains.com/company/brand/img/jetbrains_logo.png&#34; height=&#34;50&#34; alt=&#34;JetBrains logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>laylavish/uBlockOrigin-HUGE-AI-Blocklist</title>
    <updated>2024-03-21T01:23:12Z</updated>
    <id>tag:github.com,2024-03-21:/laylavish/uBlockOrigin-HUGE-AI-Blocklist</id>
    <link href="https://github.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A huge blocklist of sites that contain AI generated content for uBlock Origin &amp; uBlacklist.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uBlockOrigin &amp;amp; uBlacklist Huge AI Blocklist&lt;/h1&gt; &#xA;&lt;p&gt;A huge blocklist of sites (~850) that contain AI generated content, for the purposes of cleaning image search engines (Google Search, DuckDuckGo, and Bing) with uBlock Origin or uBlacklist.&lt;/p&gt; &#xA;&lt;h2&gt;How to install the blocklist (uBlock Origin)&lt;/h2&gt; &#xA;&lt;h3&gt;One-click filter import&lt;/h3&gt; &#xA;&lt;p&gt;If you have uBlock Origin installed, click &lt;a href=&#34;https://subscribe.adblockplus.org?location=https%3A%2F%2Fraw.githubusercontent.com%2Flaylavish%2FuBlockOrigin-HUGE-AI-Blocklist%2Fmain%2Flist.txt&amp;amp;title=Sites%20using%20AI%20generated%20content&#34;&gt;this link&lt;/a&gt; to import the filter list in just a click! Quick and simple.&lt;/p&gt; &#xA;&lt;h3&gt;Import manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you have the uBlock Origin Extension for &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://chromewebstore.google.com/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm&#34;&gt;Chrome&lt;/a&gt;, or any browser that supports uBO (works on Android too!).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the uBlock Origin Extension, and in the bottom right, there is a cog-wheel symbol--named the dashboard. Click it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you are in the dashboard, look towards the top. Click on the tab that says &#34;Filter lists&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Look towards the bottom, and expand the &lt;code&gt;Import&lt;/code&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy and paste this URL into the dialogue box:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist/main/list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Apply changes, and you&#39;re set!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A video guide on how to do this is available as well:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist/assets/128162304/7b8810dc-ce87-4cdc-8b5a-95dc5b0f56c3&#34;&gt;https://github.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist/assets/128162304/7b8810dc-ce87-4cdc-8b5a-95dc5b0f56c3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;uBlock Origin will automatically refresh the filter list once a day, so you&#39;ll always have up-to-date filters.&lt;/p&gt; &#xA;&lt;p&gt;If you want to force an update of the filter list, pressing the stopwatch next to the newly added list, then pressing &lt;code&gt;Update now&lt;/code&gt; will achieve that.&lt;/p&gt; &#xA;&lt;h2&gt;How to install the blocklist (uBlacklist)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you have the uBlacklist extension for &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ublacklist/&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://chromewebstore.google.com/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe&#34;&gt;Chrome&lt;/a&gt;, or any browser that supports uBlacklist (works on Android too!).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on your extensions list, select uBlacklist, then click on the &#34;options&#34; text, highlighted in blue.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This will take you to the uBlacklist options panel, similar to the Dashboard in uBlock Origin&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Scroll all the way down until you see the &#34;Subscription&#34; tab, and click on the blue &#34;Add a subscription&#34; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Give a name for the added blocklist (eg. Main AI blocklist).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy and paste this url&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist/main/list_uBlacklist.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;into the &#34;URL&#34; part of the dialogue box, then press the blue &#34;Add&#34; button.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;There you go! You&#39;re done!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(optional) Set the update interval to an hour for near-realtime list updates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional list(s)&lt;/h2&gt; &#xA;&lt;p&gt;As of right now, there are two lists. The main default list, and the nuclear list.&lt;/p&gt; &#xA;&lt;p&gt;The nuclear list has sites that contain a mix of authentic and AI generated imagery (eg. DeviantArt, Artstation, Stock Photography sites, etc), which make it tricky to outright block in the main filter list, so I&#39;ve designated it to a separate list that you can toggle on and off if you so desire.&lt;/p&gt; &#xA;&lt;h3&gt;uBlock Origin&lt;/h3&gt; &#xA;&lt;p&gt;In order to use the &lt;strong&gt;Nuclear&lt;/strong&gt; list, do the same steps that you did in the section &#34;How to install the blocklist (uBlock Origin)&#34;, but instead of using the other url, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist/main/additional_list_nuclear.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uBlacklist&lt;/h3&gt; &#xA;&lt;p&gt;In order to use the &lt;strong&gt;Nuclear&lt;/strong&gt; list, do the same steps that you did in the section &#34;How to install the blocklist (uBlacklist)&#34;, but instead of using the other URL, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/laylavish/uBlockOrigin-HUGE-AI-Blocklist/main/list_uBlacklist_nuclear.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Allowlisting sites&lt;/h2&gt; &#xA;&lt;p&gt;If you find that you don&#39;t like a certain website being blocked, you can create an allowlist in your own personal uBlock Origin or uBlacklist filter list. Here&#39;s how to do it.&lt;/p&gt; &#xA;&lt;h3&gt;For uBlock Origin:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Toggle the &lt;a href=&#34;https://github.com/gorhill/uBlock/wiki/DOM-inspector&#34;&gt;DOM inspector&lt;/a&gt; &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; through uBlock Origin&#39;s &lt;a href=&#34;https://github.com/gorhill/uBlock/wiki/The-logger&#34;&gt;logger&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Locate the URL you want to allowlist.&lt;/li&gt; &#xA; &lt;li&gt;Click on the filter you want to disable (eg. vecteezy.com); it should then be crossed out.&lt;/li&gt; &#xA; &lt;li&gt;Press the save icon, then the &#34;Create&#34; button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Boom! Now it&#39;s allowlisted!&lt;/p&gt; &#xA;&lt;p&gt;Or, if you don&#39;t want to go through that mumbo-jumbo, add this line in your filter list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#@#a[href*=&#34;example.com&#34;]:upward(div):style(opacity:0.00!important;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change &#34;example.com&#34; to the URL you want to allowlist. Copy &amp;amp; paste that in uBlock Origin&#39;s &#34;My filters&#34; list, and you&#39;re set!&lt;/p&gt; &#xA;&lt;h3&gt;For uBlacklist:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enter uBlacklist&#39;s options panel.&lt;/li&gt; &#xA; &lt;li&gt;In the text box, add this line in the text box:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;@*://*.example.com/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Change &#34;example.com&#34; to a website you want allowlisted.&lt;/li&gt; &#xA; &lt;li&gt;Click save. Done!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What is the difference between uBlock Origin and uBlacklist implementations?&lt;/h2&gt; &#xA;&lt;p&gt;uBlock Origin&#39;s implementation is technically superior, as it allows you to continue scrolling even when tons of blocked websites are queried, since all it does is &lt;strong&gt;set the offending sites&#39; opacity to 0&lt;/strong&gt; instead of using traditional blocking methods.&lt;/p&gt; &#xA;&lt;p&gt;uBlacklist on the otherhand, &lt;strong&gt;blocks the queries outright&lt;/strong&gt;--meaning if too many AI sites are in your image search results, you will not be able to scroll any further than the first 6 rows of images (seems to be exclusive to Google Images).&lt;/p&gt; &#xA;&lt;p&gt;Although the latter is inferior, it is a bit rare for that to happen, especially if you append operators such as &lt;code&gt;-ai&lt;/code&gt; in your query. Just keep that in mind (it may also be a bug on uBlacklist&#39;s part).&lt;/p&gt; &#xA;&lt;h2&gt;What if you want to go even further beyond?&lt;/h2&gt; &#xA;&lt;p&gt;I created a repo that houses &lt;a href=&#34;https://github.com/laylavish/TipsTricksGoogleSearch/tree/main&#34;&gt;fantastic tips &amp;amp; tricks for Google Search&#39;s operators&lt;/a&gt;. Eradicate AI even more!&lt;/p&gt; &#xA;&lt;p&gt;Not only that, but there are lots of lists you can subscribe to that will clean up the internet more, such as &lt;a href=&#34;https://github.com/rjaus/awesome-ublacklist&#34;&gt;rjaus&#39; awesome ublacklist subscription list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To Do&lt;/h2&gt; &#xA;&lt;p&gt;‚úÖ Provide blocklist for uBlacklist compatibility&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Make blocklist work on other search engines such as DuckDuckGo and Bing (ew)&lt;/p&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to this &lt;a href=&#34;https://pastebin.com/B8kP4imQ&#34;&gt;pastebin&lt;/a&gt; (since it added even more sites to my blocklist) and to u/AchernarB for the &lt;a href=&#34;https://www.reddit.com/r/uBlockOrigin/comments/13uyex5/how_to_block_results_from_a_specific_site_in_the/&#34;&gt;awesome snip-bit of code.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>