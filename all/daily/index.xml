<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-13T01:30:42Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/poml</title>
    <updated>2025-08-13T01:30:42Z</updated>
    <id>tag:github.com,2025-08-13:/microsoft/poml</id>
    <link href="https://github.com/microsoft/poml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prompt Orchestration Markup Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;POML: Prompt Orchestration Markup Language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;POML (Prompt Orchestration Markup Language)&lt;/strong&gt; is a novel markup language designed to bring structure, maintainability, and versatility to advanced prompt engineering for Large Language Models (LLMs). It addresses common challenges in prompt development, such as lack of structure, complex data integration, format sensitivity, and inadequate tooling. POML provides a systematic way to organize prompt components, integrate diverse data types seamlessly, and manage presentation variations, empowering developers to create more sophisticated and reliable LLM applications.&lt;/p&gt; &#xA;&lt;h2&gt;Demo Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/b9WDcFsKixo&#34;&gt;&lt;img src=&#34;https://i3.ytimg.com/vi/b9WDcFsKixo/maxresdefault.jpg&#34; alt=&#34;The 5-minute guide to POML&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structured Prompting Markup&lt;/strong&gt;: Employs an HTML-like syntax with semantic components such as &lt;code&gt;&amp;lt;role&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;example&amp;gt;&lt;/code&gt; to encourage modular design, enhancing prompt readability, reusability, and maintainability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive Data Handling&lt;/strong&gt;: Incorporates specialized data components (e.g., &lt;code&gt;&amp;lt;document&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;) that seamlessly embed or reference external data sources like text files, spreadsheets, and images, with customizable formatting options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Decoupled Presentation Styling&lt;/strong&gt;: Features a CSS-like styling system that separates content from presentation. This allows developers to modify styling (e.g., verbosity, syntax format) via &lt;code&gt;&amp;lt;stylesheet&amp;gt;&lt;/code&gt; definitions or inline attributes without altering core prompt logic, mitigating LLM format sensitivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrated Templating Engine&lt;/strong&gt;: Includes a built-in templating engine with support for variables (&lt;code&gt;{{ }}&lt;/code&gt;), loops (&lt;code&gt;for&lt;/code&gt;), conditionals (&lt;code&gt;if&lt;/code&gt;), and variable definitions (&lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt;) for dynamically generating complex, data-driven prompts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich Development Toolkit&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;IDE Extension (Visual Studio Code)&lt;/strong&gt;: Provides essential development aids like syntax highlighting, context-aware auto-completion, hover documentation, real-time previews, inline diagnostics for error checking, and integrated interactive testing.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Software Development Kits (SDKs)&lt;/strong&gt;: Offers SDKs for Node.js (JavaScript/TypeScript) and Python for seamless integration into various application workflows and popular LLM frameworks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a very simple POML example. Please put it in a file named &lt;code&gt;example.poml&lt;/code&gt;. Make sure it resides in the same directory as the &lt;code&gt;photosynthesis_diagram.png&lt;/code&gt; image file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;poml&amp;gt;&#xA;  &amp;lt;role&amp;gt;You are a patient teacher explaining concepts to a 10-year-old.&amp;lt;/role&amp;gt;&#xA;  &amp;lt;task&amp;gt;Explain the concept of photosynthesis using the provided image as a reference.&amp;lt;/task&amp;gt;&#xA;&#xA;  &amp;lt;img src=&#34;photosynthesis_diagram.png&#34; alt=&#34;Diagram of photosynthesis&#34; /&amp;gt;&#xA;&#xA;  &amp;lt;output-format&amp;gt;&#xA;    Keep the explanation simple, engaging, and under 100 words.&#xA;    Start with &#34;Hey there, future scientist!&#34;.&#xA;  &amp;lt;/output-format&amp;gt;&#xA;&amp;lt;/poml&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example defines a role and task for the LLM, includes an image for context, and specifies the desired output format. With the POML toolkit, the prompt can be easily rendered with a flexible format, and tested with a vision LLM.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Visual Studio Code Extension&lt;/h3&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=poml-team.poml&#34;&gt;Visual Studio Code Marketplace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install the extension manually by downloading the &lt;code&gt;.vsix&lt;/code&gt; file from our &lt;a href=&#34;https://github.com/microsoft/poml/releases&#34;&gt;GitHub releases page&lt;/a&gt; and installing it in VS Code via the Extensions view.&lt;/p&gt; &#xA;&lt;p&gt;Before testing prompts with the POML toolkit, make sure you have configured your preferred LLM model, API key, and endpoint. If these are not set, prompt testing will not work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To configure in Visual Studio Code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the extension settings (open &#34;Settings&#34; and search for &#34;POML&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Set your model provider (e.g., OpenAI, Azure, Google), API key, and endpoint URL in the POML section.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, you can add these settings directly to your &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Node.js (via npm)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install pomljs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python (via pip)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install poml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development or local installation, you might use &lt;code&gt;pip install -e .&lt;/code&gt; from a cloned repository.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information on POML syntax, components, styling, templating, SDKs, and the VS Code extension, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/poml/main/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Watch our Demo Video on YouTube:&lt;/strong&gt; &lt;a href=&#34;https://youtu.be/b9WDcFsKixo&#34;&gt;POML Introduction &amp;amp; Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read the Research Paper (coming soon):&lt;/strong&gt; For an in-depth understanding of POML&#39;s design, implementation, and evaluation, check out our paper: &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/poml/main/TBD&#34;&gt;Paper link TBD&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt; &#xA;&lt;h2&gt;Responsible AI&lt;/h2&gt; &#xA;&lt;p&gt;This project has been evaluated and certified to comply with the Microsoft Responsible AI Standard. The team will continue to monitor and maintain the repository, addressing any severe issues, including potential harms, if they arise. For more details, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/poml/main/RAI_README&#34;&gt;Responsible AI Readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/poml/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>denizsafak/abogen</title>
    <updated>2025-08-13T01:30:42Z</updated>
    <id>tag:github.com,2025-08-13:/denizsafak/abogen</id>
    <link href="https://github.com/denizsafak/abogen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate audiobooks from EPUBs, PDFs and text with synchronized captions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;abogen &lt;img width=&#34;40px&#34; title=&#34;abogen icon&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/abogen/assets/icon.ico&#34; align=&#34;right&#34; style=&#34;padding-left: 10px; padding-top:5px;&#34; /&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/denizsafak/abogen/actions&#34;&gt;&lt;img src=&#34;https://github.com/denizsafak/abogen/actions/workflows/test_pip.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/denizsafak/abogen/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/denizsafak/abogen&#34; alt=&#34;GitHub Release&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/abogen/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/abogen&#34; alt=&#34;Abogen PyPi Python Versions&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/denizsafak/abogen/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/os-windows%20%7C%20linux%20%7C%20macos%20-blue&#34; alt=&#34;Operating Systems&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-maroon.svg?sanitize=true&#34; alt=&#34;License: MIT&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Abogen is a powerful text-to-speech conversion tool that makes it easy to turn ePub, PDF, or text files into high-quality audio with matching subtitles in seconds. Use it for audiobooks, voiceovers for Instagram, YouTube, TikTok, or any project that needs natural-sounding text-to-speech, using &lt;a href=&#34;https://huggingface.co/hexgrad/Kokoro-82M&#34;&gt;Kokoro-82M&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img title=&#34;Abogen Main&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/abogen.png&#34; width=&#34;380&#34; /&gt; &lt;img title=&#34;Abogen Processing&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/abogen2.png&#34; width=&#34;380&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/cb66512d-0a52-48c3-bda4-f1e6a03fb8d6&#34;&gt;https://github.com/user-attachments/assets/cb66512d-0a52-48c3-bda4-f1e6a03fb8d6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This demo was generated in just 5&amp;nbsp;seconds, producing ∼1&amp;nbsp;minute of audio with perfectly synced subtitles. To create a similar video, see &lt;a href=&#34;https://github.com/denizsafak/abogen/tree/main/demo&#34;&gt;the demo guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;How to install?&lt;/code&gt; &lt;a href=&#34;https://pypi.org/project/abogen/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/abogen&#34; alt=&#34;Abogen Compatible PyPi Python Versions&#34; align=&#34;right&#34; style=&#34;margin-top:6px;&#34; /&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/espeak-ng/espeak-ng/releases/latest&#34;&gt;espeak-ng latest release&lt;/a&gt; download and run the *.msi file.&lt;/p&gt; &#xA;&lt;h4&gt;OPTION 1: Install using script&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denizsafak/abogen/archive/refs/heads/main.zip&#34;&gt;Download&lt;/a&gt; the repository&lt;/li&gt; &#xA; &lt;li&gt;Extract the ZIP file&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;WINDOWS_INSTALL.bat&lt;/code&gt; by double-clicking it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This method handles everything automatically - installing all dependencies including CUDA in a self-contained environment without requiring a separate Python installation. (You still need to install &lt;a href=&#34;https://github.com/espeak-ng/espeak-ng/releases/latest&#34;&gt;espeak-ng&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You don&#39;t need to install Python separately. The script will install Python automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;OPTION 2: Install using pip&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create a virtual environment (optional)&#xA;mkdir abogen &amp;amp;&amp;amp; cd abogen&#xA;python -m venv venv&#xA;venv\Scripts\activate&#xA;&#xA;# For NVIDIA GPUs:&#xA;pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128&#xA;&#xA;# For AMD GPUs:&#xA;# Not supported yet, because ROCm is not available on Windows. Use Linux if you have AMD GPU.&#xA;&#xA;# Install abogen&#xA;pip install abogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install espeak-ng&#xA;brew install espeak-ng&#xA;&#xA;# Create a virtual environment (recommended)&#xA;mkdir abogen &amp;amp;&amp;amp; cd abogen&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;&#xA;# Install abogen&#xA;pip3 install abogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install espeak-ng&#xA;sudo apt install espeak-ng # Ubuntu/Debian&#xA;sudo pacman -S espeak-ng # Arch Linux&#xA;sudo dnf install espeak-ng # Fedora&#xA;&#xA;# Create a virtual environment (recommended)&#xA;mkdir abogen &amp;amp;&amp;amp; cd abogen&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;&#xA;# Install abogen&#xA;pip3 install abogen&#xA;&#xA;# For NVIDIA GPUs:&#xA;# Already supported, no need to install CUDA separately.&#xA;&#xA;# For AMD GPUs:&#xA;# After installing abogen, we need to uninstall the existing torch package&#xA;pip3 uninstall torch &#xA;pip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you get &lt;code&gt;WARNING: The script abogen-cli is installed in &#39;/home/username/.local/bin&#39; which is not on PATH.&lt;/code&gt; error, run the following command to add it to your PATH:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;export PATH=\&#34;/home/$USER/.local/bin:\$PATH\&#34;&#34; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you get &#34;No matching distribution found&#34; error, try installing it on supported Python (3.10 to 3.12). You can use &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; to manage multiple Python versions easily in Linux. Watch this &lt;a href=&#34;https://www.youtube.com/watch?v=MVyb-nI4KyI&#34;&gt;video&lt;/a&gt; by NetworkChuck for a quick guide.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/hg000125&#34;&gt;@hg000125&lt;/a&gt; for his contribution in &lt;a href=&#34;https://github.com/denizsafak/abogen/issues/23&#34;&gt;#23&lt;/a&gt;. AMD GPU support is possible thanks to his work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;How to run?&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you installed using pip, you can simply run the following command to start Abogen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;abogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you installed using the Windows installer &lt;code&gt;(WINDOWS_INSTALL.bat)&lt;/code&gt;, It should have created a shortcut in the same folder, or your desktop. You can run it from there. If you lost the shortcut, Abogen is located in &lt;code&gt;python_embedded/Scripts/abogen.exe&lt;/code&gt;. You can run it from there directly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;How to use?&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag and drop any ePub, PDF, or text file (or use the built-in text editor)&lt;/li&gt; &#xA; &lt;li&gt;Configure the settings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set speech speed&lt;/li&gt; &#xA;   &lt;li&gt;Select a voice (or create a custom voice using voice mixer)&lt;/li&gt; &#xA;   &lt;li&gt;Select subtitle generation style (by sentence, word, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;Select output format&lt;/li&gt; &#xA;   &lt;li&gt;Select where to save the output&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hit Start&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;code&gt;In action&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;img title=&#34;Abogen in action&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/abogen.gif&#34; /&gt; &#xA;&lt;p&gt;Here’s Abogen in action: in this demo, it processes ∼3,000 characters of text in just 11 seconds and turns it into 3 minutes and 28 seconds of audio, and I have a low-end &lt;strong&gt;RTX&amp;nbsp;2060&amp;nbsp;Mobile laptop GPU&lt;/strong&gt;. Your results may vary depending on your hardware.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Configuration&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Input Box&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drag and drop &lt;code&gt;ePub&lt;/code&gt;, &lt;code&gt;PDF&lt;/code&gt;, or &lt;code&gt;.TXT&lt;/code&gt; files (or use built-in text editor)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Queue options&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add multiple files to a queue and process them in batch, with individual settings for each file. See &lt;a href=&#34;https://raw.githubusercontent.com/denizsafak/abogen/main/#queue-mode&#34;&gt;Queue mode&lt;/a&gt; for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adjust speech rate from &lt;code&gt;0.1x&lt;/code&gt; to &lt;code&gt;2.0x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Select Voice&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First letter of the language code (e.g., &lt;code&gt;a&lt;/code&gt; for American English, &lt;code&gt;b&lt;/code&gt; for British English, etc.), second letter is for &lt;code&gt;m&lt;/code&gt; for male and &lt;code&gt;f&lt;/code&gt; for female.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Voice mixer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create custom voices by mixing different voice models with a profile system. See &lt;a href=&#34;https://raw.githubusercontent.com/denizsafak/abogen/main/#voice-mixer&#34;&gt;Voice Mixer&lt;/a&gt; for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Voice preview&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen to the selected voice before processing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Generate subtitles&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Disabled&lt;/code&gt;, &lt;code&gt;Sentence&lt;/code&gt;, &lt;code&gt;Sentence + Comma&lt;/code&gt;, &lt;code&gt;1 word&lt;/code&gt;, &lt;code&gt;2 words&lt;/code&gt;, &lt;code&gt;3 words&lt;/code&gt;, etc. (Represents the number of words in each subtitle entry)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Output voice format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.WAV&lt;/code&gt;, &lt;code&gt;.FLAC&lt;/code&gt;, &lt;code&gt;.MP3&lt;/code&gt;, &lt;code&gt;.OPUS (best compression)&lt;/code&gt; and &lt;code&gt;M4B (with chapters)&lt;/code&gt; (Special thanks to &lt;a href=&#34;https://github.com/jborza&#34;&gt;@jborza&lt;/a&gt; for chapter support in PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/10&#34;&gt;#10&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Output subtitle format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the subtitle format as &lt;code&gt;SRT (standard)&lt;/code&gt;, &lt;code&gt;ASS (wide)&lt;/code&gt;, &lt;code&gt;ASS (narrow)&lt;/code&gt;, &lt;code&gt;ASS (centered wide)&lt;/code&gt;, or &lt;code&gt;ASS (centered narrow)&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Replace single newlines with spaces&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replaces single newlines with spaces in the text. This is useful for texts that have imaginary line breaks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Save location&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Save next to input file&lt;/code&gt;, &lt;code&gt;Save to desktop&lt;/code&gt;, or &lt;code&gt;Choose output folder&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Book handler options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Chapter Control&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select specific &lt;code&gt;chapters&lt;/code&gt; from ePUBs or &lt;code&gt;chapters + pages&lt;/code&gt; from PDFs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Save each chapter separately&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save each chapter in e-books as a separate audio file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Create a merged version&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create a single audio file that combines all chapters. (If &lt;code&gt;Save each chapter separately&lt;/code&gt; is disabled, this option will be the default behavior.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Save in a project folder with metadata&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save the converted items in a project folder with available metadata files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Menu options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Theme&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the application&#39;s theme using &lt;code&gt;System&lt;/code&gt;, &lt;code&gt;Light&lt;/code&gt;, or &lt;code&gt;Dark&lt;/code&gt; options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Configure max words per subtitle&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the maximum number of words per subtitle entry.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Configure max lines in log window&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the maximum number of lines to display in the log window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Separate chapters audio format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the audio format for separate chapters as &lt;code&gt;wav&lt;/code&gt;, &lt;code&gt;flac&lt;/code&gt;, &lt;code&gt;mp3&lt;/code&gt;, or &lt;code&gt;opus&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Create desktop shortcut&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a shortcut on your desktop for easy access.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Open config directory&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens the directory where the configuration file is stored.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Open cache directory&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens the cache directory where converted text files are stored.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Clear cache files&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deletes cache files created during the conversion or preview.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Check for updates at startup&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically checks for updates when the program starts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disable Kokoro&#39;s internet access&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prevents Kokoro from downloading models or voices from HuggingFace Hub, useful for offline use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Reset to default settings&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resets all settings to their default values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;code&gt;Voice Mixer&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;img title=&#34;Abogen Voice Mixer&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/voice_mixer.png&#34; /&gt; &#xA;&lt;p&gt;With voice mixer, you can create custom voices by mixing different voice models. You can adjust the weight of each voice and save your custom voice as a profile for future use. The voice mixer allows you to create unique and personalized voices. (Huge thanks to &lt;a href=&#34;https://github.com/jborza&#34;&gt;@jborza&lt;/a&gt; for making this possible through his contributions in &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/5&#34;&gt;#5&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Queue Mode&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;img title=&#34;Abogen queue mode&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/queue.png&#34; /&gt; &#xA;&lt;p&gt;Abogen supports &lt;strong&gt;queue mode&lt;/strong&gt;, allowing you to add multiple files to a processing queue. This is useful if you want to convert several files in one batch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add text files (&lt;code&gt;.txt&lt;/code&gt;) directly using the &lt;strong&gt;Add files&lt;/strong&gt; button in the Queue Manager. To add PDF or EPUB files, use the input box in the main window and click the &lt;strong&gt;Add to Queue&lt;/strong&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Each file in the queue keeps the configuration settings that were active when it was added. Changing the main window configuration afterward does &lt;strong&gt;not&lt;/strong&gt; affect files already in the queue.&lt;/li&gt; &#xA; &lt;li&gt;You can view each file&#39;s configuration by hovering over them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Abogen will process each item in the queue automatically, saving outputs as configured.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/jborza&#34;&gt;@jborza&lt;/a&gt; for adding queue mode in PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/35&#34;&gt;#35&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;About Chapter Markers&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When you process ePUB or PDF files, Abogen converts them into text files stored in your cache directory. When you click &#34;Edit,&#34; you&#39;re actually modifying these converted text files. In these text files, you&#39;ll notice tags that look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;CHAPTER_MARKER:Chapter Title&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are chapter markers. They are automatically added when you process ePUB or PDF files, based on the chapters you select. They serve an important purpose:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow you to split the text into separate audio files for each chapter&lt;/li&gt; &#xA; &lt;li&gt;Save time by letting you reprocess only specific chapters if errors occur, rather than the entire file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can manually add these markers to plain text files for the same benefits. Simply include them in your text like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;CHAPTER_MARKER:Introduction&amp;gt;&amp;gt;&#xA;This is the beginning of my text...  &#xA;&#xA;&amp;lt;&amp;lt;CHAPTER_MARKER:Main Content&amp;gt;&amp;gt; &#xA;Here&#39;s another part...  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you process the text file, Abogen will detect these markers automatically and ask if you want to save each chapter separately and create a merged version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/chapter_marker.png&#34; alt=&#34;Abogen Chapter Marker&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;About Metadata Tags&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Similar to chapter markers, it is possible to add metadata tags for &lt;code&gt;M4B&lt;/code&gt; files. This is useful for audiobook players that support metadata, allowing you to add information like title, author, year, etc. Abogen automatically adds these tags when you process ePUB or PDF files, but you can also add them manually to your text files. Add metadata tags &lt;strong&gt;at the beginning of your text file&lt;/strong&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;METADATA_TITLE:Title&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_ARTIST:Author&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_ALBUM:Album Title&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_YEAR:Year&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_ALBUM_ARTIST:Album Artist&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_COMPOSER:Narrator&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_GENRE:Audiobook&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;Supported Languages&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 🇺🇸 &#39;a&#39; =&amp;gt; American English, 🇬🇧 &#39;b&#39; =&amp;gt; British English&#xA;# 🇪🇸 &#39;e&#39; =&amp;gt; Spanish es&#xA;# 🇫🇷 &#39;f&#39; =&amp;gt; French fr-fr&#xA;# 🇮🇳 &#39;h&#39; =&amp;gt; Hindi hi&#xA;# 🇮🇹 &#39;i&#39; =&amp;gt; Italian it&#xA;# 🇯🇵 &#39;j&#39; =&amp;gt; Japanese: pip install misaki[ja]&#xA;# 🇧🇷 &#39;p&#39; =&amp;gt; Brazilian Portuguese pt-br&#xA;# 🇨🇳 &#39;z&#39; =&amp;gt; Mandarin Chinese: pip install misaki[zh]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a complete list of supported languages and voices, refer to Kokoro&#39;s &lt;a href=&#34;https://huggingface.co/hexgrad/Kokoro-82M/blob/main/VOICES.md&#34;&gt;VOICES.md&lt;/a&gt;. To listen to sample audio outputs, see &lt;a href=&#34;https://huggingface.co/hexgrad/Kokoro-82M/blob/main/SAMPLES.md&#34;&gt;SAMPLES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;MPV Config&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I highly recommend using &lt;a href=&#34;https://mpv.io/installation/&#34;&gt;MPV&lt;/a&gt; to play your audio files, as it supports displaying subtitles even without a video track. Here&#39;s my &lt;code&gt;mpv.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# --- MPV Settings ---&#xA;save-position-on-quit&#xA;keep-open=yes&#xA;# --- Subtitle ---&#xA;sub-ass-override=no&#xA;sub-margin-y=50&#xA;sub-margin-x=50&#xA;# --- Audio Quality ---&#xA;audio-spdif=ac3,dts,eac3,truehd,dts-hd&#xA;audio-channels=auto&#xA;audio-samplerate=48000&#xA;volume-max=200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;Docker Guide&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run Abogen in a Docker container:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denizsafak/abogen/archive/refs/heads/main.zip&#34;&gt;Download the repository&lt;/a&gt; and extract, or clone it using git.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;abogen&lt;/code&gt; folder. You should see &lt;code&gt;Dockerfile&lt;/code&gt; there.&lt;/li&gt; &#xA; &lt;li&gt;Open your termminal in that directory and run the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image:&#xA;docker build --progress plain -t abogen .&#xA;&#xA;# Note that building the image may take a while.&#xA;# After building is complete, run the Docker container:&#xA;&#xA;# Windows&#xA;docker run --name abogen -v %cd%:/shared -p 5800:5800 -p 5900:5900 --gpus all abogen&#xA;&#xA;# Linux&#xA;docker run --name abogen -v $(pwd):/shared -p 5800:5800 -p 5900:5900 --gpus all abogen&#xA;&#xA;# MacOS&#xA;docker run --name abogen -v $(pwd):/shared -p 5800:5800 -p 5900:5900 abogen&#xA;&#xA;# We expose port 5800 for use by a web browser, 5900 if you want to connect with a VNC client.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Abogen launches automatically inside the container.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can access it via a web browser at &lt;a href=&#34;http://localhost:5800&#34;&gt;http://localhost:5800&lt;/a&gt; or connect to it using a VNC client at &lt;code&gt;localhost:5900&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;/shared&lt;/code&gt; directory to share files between your host and the container.&lt;/li&gt; &#xA; &lt;li&gt;For later use, start it with &lt;code&gt;docker start abogen&lt;/code&gt; and stop it with &lt;code&gt;docker stop abogen&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Known issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio preview is not working inside container (ALSA error).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Open cache directory&lt;/code&gt; and &lt;code&gt;Open configuration directory&lt;/code&gt; options in settings not working. (Tried pcmanfm, did not work with Abogen).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Special thanks to &lt;a href=&#34;https://www.reddit.com/user/geo38/&#34;&gt;@geo38&lt;/a&gt; from Reddit, who provided the Dockerfile and instructions in &lt;a href=&#34;https://www.reddit.com/r/selfhosted/comments/1k8x1yo/comment/mpe0bz8/&#34;&gt;this comment&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Similar Projects&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Abogen is a standalone project, but it is inspired by and shares some similarities with other projects. Here are a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/santinic/audiblez&#34;&gt;audiblez&lt;/a&gt;: Generate audiobooks from e-books. &lt;strong&gt;(Has CLI and GUI support)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plusuncold/autiobooks&#34;&gt;autiobooks&lt;/a&gt;: Automatically convert epubs to audiobooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mateogon/pdf-narrator&#34;&gt;pdf-narrator&lt;/a&gt;: Convert your PDFs and EPUBs into audiobooks effortlessly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p0n1/epub_to_audiobook&#34;&gt;epub_to_audiobook&lt;/a&gt;: EPUB to audiobook converter, optimized for Audiobookshelf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DrewThomasson/ebook2audiobook&#34;&gt;ebook2audiobook&lt;/a&gt;: Convert ebooks to audiobooks with chapters and metadata using dynamic AI models and voice cloning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;Roadmap&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Add OCR scan feature for PDF files using docling/teserract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Add chapter metadata for .m4a files. (Issue &lt;a href=&#34;https://github.com/denizsafak/abogen/issues/9&#34;&gt;#9&lt;/a&gt;, PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/10&#34;&gt;#10&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Add support for different languages in GUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Add voice formula feature that enables mixing different voice models. (Issue &lt;a href=&#34;https://github.com/denizsafak/abogen/issues/1&#34;&gt;#1&lt;/a&gt;, PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/5&#34;&gt;#5&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled /&gt; Add support for kokoro-onnx (If it&#39;s necessary).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled /&gt; Add dark mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;Troubleshooting&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues while running Abogen, try launching it from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abogen-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start Abogen in command-line mode and display detailed error messages. Please open a new issue on the &lt;a href=&#34;https://github.com/denizsafak/abogen/issues&#34;&gt;Issues&lt;/a&gt; page with the error message and a description of your problem.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Contributing&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I welcome contributions! If you have ideas for new features, improvements, or bug fixes, please fork the repository and submit a pull request.&lt;/p&gt; &#xA;&lt;h3&gt;For developers and contributors&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to modify the code and contribute to development, you can &lt;a href=&#34;https://github.com/denizsafak/abogen/archive/refs/heads/main.zip&#34;&gt;download the repository&lt;/a&gt;, extract it and run the following commands to build &lt;strong&gt;or&lt;/strong&gt; install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go to the directory where you extracted the repository and run:&#xA;pip install -e .      # Installs the package in editable mode&#xA;pip install build     # Install the build package&#xA;python -m build       # Builds the package in dist folder (optional)&#xA;abogen                # Opens the GUI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to explore the code and make any changes you like.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Credits&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Abogen uses &lt;a href=&#34;https://github.com/hexgrad/kokoro&#34;&gt;Kokoro&lt;/a&gt; for its high-quality, natural-sounding text-to-speech synthesis. Huge thanks to the Kokoro team for making this possible.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/wojiushixiaobai&#34;&gt;@wojiushixiaobai&lt;/a&gt; for &lt;a href=&#34;https://github.com/wojiushixiaobai/Python-Embed-Win64&#34;&gt;Embedded Python&lt;/a&gt; packages. These modified packages include pip pre-installed, enabling Abogen to function as a standalone application without requiring users to separately install Python in Windows.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to creators of &lt;a href=&#34;https://github.com/aerkalov/ebooklib&#34;&gt;EbookLib&lt;/a&gt;, a Python library for reading and writing ePub files, which is used for extracting text from ePub files.&lt;/li&gt; &#xA; &lt;li&gt;Special thanks to the &lt;a href=&#34;https://www.riverbankcomputing.com/software/pyqt/&#34;&gt;PyQt&lt;/a&gt; team for providing the cross-platform GUI toolkit that powers Abogen&#39;s interface.&lt;/li&gt; &#xA; &lt;li&gt;Icons: &lt;a href=&#34;https://icons8.com/icon/aRiu1GGi6Aoe/usa&#34;&gt;US&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/t3NE3BsOAQwq/great-britain&#34;&gt;Great Britain&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/ly7tzANRt33n/spain&#34;&gt;Spain&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/3muzEmi4dpD5/france&#34;&gt;France&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/esGVrxg9VCJ1/india&#34;&gt;India&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/PW8KZnP7qXzO/italy&#34;&gt;Italy&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/McQbrq9qaQye/japan&#34;&gt;Japan&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/zHmH8HpOmM90/brazil&#34;&gt;Brazil&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/Ej50Oe3crXwF/china&#34;&gt;China&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/uI49hxbpxTkp/female&#34;&gt;Female&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/12351/male&#34;&gt;Male&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/21698/adjust&#34;&gt;Adjust&lt;/a&gt; and &lt;a href=&#34;https://icons8.com/icon/GskSeVoroQ7u/voice-id&#34;&gt;Voice Id&lt;/a&gt; icons by &lt;a href=&#34;https://icons8.com/&#34;&gt;Icons8&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;License&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This project is available under the MIT License - see the &lt;a href=&#34;https://github.com/denizsafak/abogen/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details. &lt;a href=&#34;https://github.com/hexgrad/kokoro&#34;&gt;Kokoro&lt;/a&gt; is licensed under &lt;a href=&#34;https://github.com/hexgrad/kokoro/raw/main/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt; which allows commercial use, modification, distribution, and private use.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Subtitle generation currently works only for English. This is because Kokoro provides timestamp tokens only for English text. If you want subtitles in other languages, please request this feature in the &lt;a href=&#34;https://github.com/hexgrad/kokoro&#34;&gt;Kokoro project&lt;/a&gt;. For more technical details, see &lt;a href=&#34;https://github.com/hexgrad/kokoro/raw/6d87f4ae7abc2d14dbc4b3ef2e5f19852e861ac2/kokoro/pipeline.py#L383&#34;&gt;this line&lt;/a&gt; in the Kokoro&#39;s code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tags: audiobook, kokoro, text-to-speech, TTS, audiobook generator, audiobooks, text to speech, audiobook maker, audiobook creator, audiobook generator, voice-synthesis, text to audio, text to audio converter, text to speech converter, text to speech generator, text to speech software, text to speech app, epub to audio, pdf to audio, content-creation, media-generation&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>conductor-oss/conductor</title>
    <updated>2025-08-13T01:30:42Z</updated>
    <id>tag:github.com,2025-08-13:/conductor-oss/conductor</id>
    <link href="https://github.com/conductor-oss/conductor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Conductor is an event driven orchestration platform providing durable and highly resilient execution engine for your applications&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;!-- Dark mode logo --&gt; &#xA; &lt;source srcset=&#34;https://github.com/user-attachments/assets/104b3a67-6013-4622-8075-a45da3a9e726&#34; media=&#34;(prefers-color-scheme: dark)&#34; /&gt; &#xA; &lt;!-- Light mode logo --&gt; &#xA; &lt;img src=&#34;https://assets.conductor-oss.org/logo.png&#34; alt=&#34;Logo&#34; /&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1 align=&#34;center&#34; style=&#34;border-bottom: none&#34;&gt; Conductor - Scalable Workflow Orchestration &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/conductor-oss/conductor/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/conductor-oss/conductor?style=social&#34; alt=&#34;GitHub stars&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/conductor-oss/conductor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/conductor-oss/conductor.svg?sanitize=true&#34; alt=&#34;Github release&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/conductor-oss/conductor.svg?sanitize=true&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/orkes-conductor/shared_invite/zt-2vdbx239s-Eacdyqya9giNLHfrCavfaA&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join%20the%20Community-blueviolet?logo=slack&#34; alt=&#34;Conductor Slack&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://conductor-oss.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Conductor%20OSS-Visit%20Site-blue&#34; alt=&#34;Conductor OSS&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Conductor is an open-source orchestration engine built at Netflix to help developers manage microservices and event-driven workflows. Today, it’s actively maintained by the team at &lt;a href=&#34;https://orkes.io&#34;&gt;Orkes&lt;/a&gt; and a growing &lt;a href=&#34;https://orkes-conductor.slack.com/join/shared_invite/zt-2vdbx239s-Eacdyqya9giNLHfrCavfaA#/shared-invite/email&#34;&gt;community of contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/4azDdDlx27M&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/6153aa58-8ad1-4ec5-93d1-38ba1b83e3f4&#34; alt=&#34;conductor_oss_getting_started&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#what-is-conductor&#34;&gt;What is Conductor?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#key-benefits&#34;&gt;Key benefits&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#getting-started&#34;&gt;Getting Started with Docker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#quick-start-guide&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#create-your-first-workflow&#34;&gt;Create your first workflow&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#database-specifications&#34;&gt;Database Specifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#conductor-oss-roadmap&#34;&gt;Conductor Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#contributors&#34;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#resources&#34;&gt;Additional Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/#slack-community&#34;&gt;Community &amp;amp; Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;What is Conductor?&lt;/h1&gt; &#xA;&lt;p&gt;Conductor (or &lt;a href=&#34;https://netflixtechblog.com/netflix-conductor-a-microservices-orchestrator-2e8d4771bf40&#34;&gt;Netflix Conductor&lt;/a&gt;) is a microservices orchestration engine for distributed and asynchronous workflows. It empowers developers to create workflows that define interactions between services, databases, and other external systems.&lt;/p&gt; &#xA;&lt;p&gt;Conductor is designed to enable flexible, resilient, and scalable workflows. It allows you to compose services into complex workflows without coupling them tightly, simplifying orchestration across cloud-native applications and enterprise systems alike.&lt;/p&gt; &#xA;&lt;h2&gt;Key benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resilience and Error Handling:&lt;/strong&gt; Conductor enables automatic retries and fallback mechanisms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Built to scale with complex workflows in high-traffic environments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observability:&lt;/strong&gt; Provides monitoring and debugging capabilities for workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ease of Integration:&lt;/strong&gt; Seamlessly integrates with microservices, external APIs, and legacy systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workflow as code:&lt;/strong&gt; Define workflows in JSON and manage them with versioning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich task types:&lt;/strong&gt; Includes task types like HTTP, JSON, Lambda, Sub Workflow, and Event tasks, allowing for flexible workflow definitions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic workflow management:&lt;/strong&gt; Workflows can evolve independently of the underlying services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built-in UI:&lt;/strong&gt; A customizable UI is available to monitor and manage workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible persistence and queue options:&lt;/strong&gt; Use Redis, MySQL, Postgres, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;Getting Started with Conductor&lt;/h1&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Docker Desktop (&lt;a href=&#34;https://docs.docker.com/desktop/setup/install/mac-install/&#34;&gt;Mac&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/desktop/setup/install/windows-install/&#34;&gt;Windows/PC&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/desktop/setup/install/linux/&#34;&gt;Linux&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install Java (JDK) 17 or newer&lt;/li&gt; &#xA; &lt;li&gt;Node 14 for the UI to build &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Earlier versions may work, but are untested&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start guide&lt;/h2&gt; &#xA;&lt;h4&gt;Clone the repo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/conductor-oss/conductor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Change to new Conductor directory&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd conductor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Start with Docker Compose (&lt;em&gt;recommended for local deployment&lt;/em&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose -f docker/docker-compose.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create your first workflow&lt;/h4&gt; &#xA;&lt;h5&gt;With the UI:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8127&#34;&gt;http://localhost:8127&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Or the REST API with your preferred HTTP client:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Check-out the &lt;a href=&#34;https://github.com/conductor-oss/conductor/tree/main/docs&#34;&gt;Conductor docs&lt;/a&gt; for additional details&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;Database Specifications&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default persistence used is Redis&lt;/li&gt; &#xA; &lt;li&gt;The indexing backend is &lt;a href=&#34;https://www.elastic.co/&#34;&gt;Elasticsearch&lt;/a&gt; (7.x)&lt;/li&gt; &#xA; &lt;li&gt;To use &lt;a href=&#34;https://opensearch.org/&#34;&gt;Opensearch&lt;/a&gt; (2.x), comment out Elasticsearch import so lucene dependencies don&#39;t conflict &lt;a href=&#34;https://github.com/conductor-oss/conductor/raw/main/server/build.gradle#L44-L46&#34;&gt;server/build.gradle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration for various database backends&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Backend&lt;/th&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Redis + ES7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/docker/server/config/config-redis.properties&#34;&gt;config-redis.properties&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/docker/server/config/config-postgres.properties&#34;&gt;config-postgres.properties&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres + ES7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/docker/server/config/config-postgres-es7.properties&#34;&gt;config-postgres-es7.properties&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL + ES7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/docker/server/config/config-mysql.properties&#34;&gt;config-mysql.properties&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Build from source&lt;/h1&gt; &#xA;&lt;p&gt;Build from source and deploy Conductor as a standalone Java application. Configure databases, queues, and environment settings as needed. Follow the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/docs/devguide/running/source.md&#34;&gt;Building Conductor From Source&lt;/a&gt;&lt;/strong&gt; guide included in this repo.&lt;/p&gt; &#xA;&lt;h2&gt;Available SDKs&lt;/h2&gt; &#xA;&lt;p&gt;Conductor provides several SDKs for interacting with the API and creating custom clients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conductor-oss/java-sdk&#34;&gt;&lt;strong&gt;Java SDK:&lt;/strong&gt;&lt;/a&gt; Fully featured for building and executing workflows in Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conductor-oss/python-sdk&#34;&gt;&lt;strong&gt;Python SDK:&lt;/strong&gt;&lt;/a&gt; Python library for creating and managing workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conductor-oss/javascript-sdk&#34;&gt;&lt;strong&gt;Javascript SDK:&lt;/strong&gt;&lt;/a&gt; For integrating Conductor workflows with Javascript/Typescript-based services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conductor-oss/go-sdk&#34;&gt;&lt;strong&gt;Go SDK:&lt;/strong&gt;&lt;/a&gt; For integrating Conductor workflows with Go-based services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conductor-oss/csharp-sdk&#34;&gt;&lt;strong&gt;C# SDK:&lt;/strong&gt;&lt;/a&gt;The conductor-csharp repository provides the client SDKs to build task workers in C#&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each SDK is maintained as part of the Conductor project, providing examples and comprehensive API documentation.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome contributions from everyone!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Report Issues:&lt;/strong&gt; Found a bug or have a feature request? Open an &lt;a href=&#34;https://github.com/conductor-oss/conductor/issues&#34;&gt;issue on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contribute code:&lt;/strong&gt; Check out our &lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;, and explore our &lt;a href=&#34;https://github.com/conductor-oss/conductor/labels/good%20first%20issue&#34;&gt;Good first issues&lt;/a&gt; for beginner-friendly tasks to tackle first.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contribute to our Docs:&lt;/strong&gt; Contribute edits or updates to keep our &lt;a href=&#34;https://github.com/conductor-oss/conductor/tree/main/docs&#34;&gt;documentation&lt;/a&gt; in great shape for the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build a Conductor SDK:&lt;/strong&gt; Need an &lt;a href=&#34;https://github.com/conductor-sdk&#34;&gt;SDK&lt;/a&gt; not available for Conductor today? Build your own using the &lt;a href=&#34;http://localhost:8080&#34;&gt;Swagger API&lt;/a&gt; included with your local deployment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://join.slack.com/t/orkes-conductor/shared_invite/zt-2vdbx239s-Eacdyqya9giNLHfrCavfaA&#34;&gt;Join the Conductor Slack&lt;/a&gt;&lt;/strong&gt; channel for community discussions and support.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/conductor-oss/conductor/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=conductor-oss/conductor&#34; /&gt; &lt;/a&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;Conductor OSS Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/ROADMAP.md&#34;&gt;See the roadmap for the Conductor&lt;/a&gt; If you would like to participate in the roadmap and development, &lt;a href=&#34;https://forms.gle/P2i1xHrxPQLrjzTB7&#34;&gt;please reach out&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Conductor is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/conductor-oss/conductor/main/LICENSE&#34;&gt;Apache 2.0 License ©&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>