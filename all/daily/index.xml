<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:28:29Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>infinition/Bjorn</title>
    <updated>2024-11-10T01:28:29Z</updated>
    <id>tag:github.com,2024-11-10:/infinition/Bjorn</id>
    <link href="https://github.com/infinition/Bjorn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bjorn is a powerful network scanning and offensive security tool for the Raspberry Pi with a 2.13-inch e-Paper HAT. It discovers network targets, identifies open ports, exposed services, and potential vulnerabilities. Bjorn can perform brute force attacks, file stealing, host zombification, and supports custom attack scripts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bjorn&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/c5eb4cc1-0c3d-497d-9422-1614651a84ab&#34; alt=&#34;thumbnail_IMG_0546&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#design&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#educational-aspects&#34;&gt;Educational Aspects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#extensibility&#34;&gt;Extensibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#detailed-project-description&#34;&gt;Detailed Project Description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#core-files&#34;&gt;Core Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#actions&#34;&gt;Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#data-structure&#34;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#behavior-of-bjorn&#34;&gt;Behavior of Bjorn&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#installation-and-configuration&#34;&gt;Installation and Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#quick-installation&#34;&gt;Quick Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#manual-installation&#34;&gt;Manual Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-1-activate-spi--i2c&#34;&gt;Step 1: Activate SPI &amp;amp; I2C&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-2-system-dependencies&#34;&gt;Step 2: System Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-3-bjorn-installation&#34;&gt;Step 3: Bjorn Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-4-configure-file-descriptor-limits&#34;&gt;Step 4: Configure File Descriptor Limits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-5-reload-systemd-and-apply-changes&#34;&gt;Step 5: Reload Systemd and Apply Changes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-6-modify-pam-configuration-files&#34;&gt;Step 6: Modify PAM Configuration Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-7-configure-services&#34;&gt;Step 7: Configure Services&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#running-bjorn&#34;&gt;Running Bjorn&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#manual-start&#34;&gt;Manual Start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#service-control&#34;&gt;Service Control&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#fresh-start&#34;&gt;Fresh Start&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#important-configuration-files&#34;&gt;Important Configuration Files&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#shared-configuration-shared_configjson&#34;&gt;Shared Configuration (&lt;code&gt;shared_config.json&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#actions-configuration-actionsjson&#34;&gt;Actions Configuration (&lt;code&gt;actions.json&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#known-issues-and-troubleshooting&#34;&gt;Known Issues and Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#current-development-issues&#34;&gt;Current Development Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#troubleshooting-steps&#34;&gt;Troubleshooting Steps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#e-paper-display-support&#34;&gt;E-Paper Display Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#development-guidelines&#34;&gt;Development Guidelines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#adding-new-actions&#34;&gt;Adding New Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#web-interface&#34;&gt;Web Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#project-roadmap&#34;&gt;Project Roadmap&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#current-focus&#34;&gt;Current Focus&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#future-plans&#34;&gt;Future Plans&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#support-and-contact&#34;&gt;Support and Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Bjorn is a&amp;nbsp;«&amp;nbsp;Tamagotchi like&amp;nbsp;» sophisticated, autonomous network scanning, vulnerability assessment, and offensive security tool designed to run on a Raspberry Pi equipped with a 2.13-inch e-Paper HAT. This document provides a detailed explanation of the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Scanning&lt;/strong&gt;: Identifies live hosts and open ports on the network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulnerability Assessment&lt;/strong&gt;: Performs vulnerability scans using Nmap and other tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;System Attacks&lt;/strong&gt;: Conducts brute-force attacks on various services (FTP, SSH, SMB, RDP, Telnet, SQL).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Stealing&lt;/strong&gt;: Extracts data from vulnerable services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: Real-time display on the e-Paper HAT and web interface for monitoring and interaction.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability&lt;/strong&gt;: Self-contained and portable device, ideal for penetration testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Extensible architecture allowing addition of new actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual Interface&lt;/strong&gt;: The e-Paper HAT provides a visual interface for monitoring the ongoing actions, displaying results or stats, and interacting with Bjorn .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Educational Aspects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learning Tool&lt;/strong&gt;: Designed as an educational tool to understand cybersecurity concepts and penetration testing techniques.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Practical Experience&lt;/strong&gt;: Provides a practical means for students and professionals to familiarize themselves with network security practices and vulnerability assessment tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ethical Use&lt;/strong&gt;: This project is strictly for educational purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsibility&lt;/strong&gt;: The author and contributors disclaim any responsibility for misuse of Bjorn.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Legal Compliance&lt;/strong&gt;: Unauthorized use of this tool for malicious activities is prohibited and may be prosecuted by law.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolution&lt;/strong&gt;: The main purpose of Bjorn is to gain new actions and extend his arsenal over time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Actions are designed to be modular and can be easily extended or modified to add new functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Possibilities&lt;/strong&gt;: From capturing pcap files to cracking hashes, man-in-the-middle attacks, and more—the possibilities are endless.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contribution&lt;/strong&gt;: It&#39;s up to the user to develop new actions and add them to the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project Status&lt;/strong&gt;: Ongoing development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Current Version&lt;/strong&gt;: Scripted auto-installer, or manual installation. Not yet packaged with Raspberry Pi OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reason&lt;/strong&gt;: The project is still in an early stage, requiring further development and debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/bcad830d-77d6-4f3e-833d-473eadd33921&#34; alt=&#34;Bjorn Display&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Detailed Project Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bjorn/&#xA;├── Bjorn.py&#xA;├── comment.py&#xA;├── display.py&#xA;├── epd_helper.py&#xA;├── init_shared.py&#xA;├── kill_port_8000.sh&#xA;├── logger.py&#xA;├── orchestrator.py&#xA;├── requirements.txt&#xA;├── shared.py&#xA;├── utils.py&#xA;├── webapp.py&#xA;├── __init__.py&#xA;├── actions/&#xA;│   ├── ftp_connector.py&#xA;│   ├── ssh_connector.py&#xA;│   ├── smb_connector.py&#xA;│   ├── rdp_connector.py&#xA;│   ├── telnet_connector.py&#xA;│   ├── sql_connector.py&#xA;│   ├── steal_files_ftp.py&#xA;│   ├── steal_files_ssh.py&#xA;│   ├── steal_files_smb.py&#xA;│   ├── steal_files_rdp.py&#xA;│   ├── steal_files_telnet.py&#xA;│   ├── steal_data_sql.py&#xA;│   ├── nmap_vuln_scanner.py&#xA;│   ├── scanning.py&#xA;│   └── __init__.py&#xA;├── backup/&#xA;│   ├── backups/&#xA;│   └── uploads/&#xA;├── config/&#xA;├── data/&#xA;│   ├── input/&#xA;│   │   └── dictionary/&#xA;│   ├── logs/&#xA;│   └── output/&#xA;│       ├── crackedpwd/&#xA;│       ├── data_stolen/&#xA;│       ├── scan_results/&#xA;│       ├── vulnerabilities/&#xA;│       └── zombies/&#xA;└── resources/&#xA;    └── waveshare_epd/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Core Files&lt;/h3&gt; &#xA;&lt;h4&gt;Bjorn.py&lt;/h4&gt; &#xA;&lt;p&gt;The main entry point for the application. It initializes and runs the main components, including the network scanner, orchestrator, display, and web server.&lt;/p&gt; &#xA;&lt;h4&gt;comment.py&lt;/h4&gt; &#xA;&lt;p&gt;Handles generating all the Bjorn comments displayed on the e-Paper HAT based on different themes/actions and statuses.&lt;/p&gt; &#xA;&lt;h4&gt;display.py&lt;/h4&gt; &#xA;&lt;p&gt;Manages the e-Paper HAT display, updating the screen with Bjorn character, the dialog/comments, and the current information such as network status, vulnerabilities, and various statistics.&lt;/p&gt; &#xA;&lt;h4&gt;epd_helper.py&lt;/h4&gt; &#xA;&lt;p&gt;Handles the low-level interactions with the e-Paper display hardware.&lt;/p&gt; &#xA;&lt;h4&gt;logger.py&lt;/h4&gt; &#xA;&lt;p&gt;Defines a custom logger with specific formatting and handlers for console and file logging. It also includes a custom log level for success messages.&lt;/p&gt; &#xA;&lt;h4&gt;orchestrator.py&lt;/h4&gt; &#xA;&lt;p&gt;Bjorn’s AI, an heuristic engine that orchestrates the different actions such as network scanning, vulnerability scanning, attacks, and file stealing. It loads and executes actions based on the configuration and sets the status of the actions and Bjorn.&lt;/p&gt; &#xA;&lt;h4&gt;shared.py&lt;/h4&gt; &#xA;&lt;p&gt;Defines the &lt;code&gt;SharedData&lt;/code&gt; class that holds configuration settings, paths, and methods for updating and managing shared data across different modules.&lt;/p&gt; &#xA;&lt;h4&gt;init_shared.py&lt;/h4&gt; &#xA;&lt;p&gt;Initializes shared data that is used across different modules. It loads the configuration and sets up necessary paths and variables.&lt;/p&gt; &#xA;&lt;h4&gt;utils.py&lt;/h4&gt; &#xA;&lt;p&gt;Contains utility functions used throughout the project.&lt;/p&gt; &#xA;&lt;h4&gt;webapp.py&lt;/h4&gt; &#xA;&lt;p&gt;Sets up and runs a web server to provide a web interface for changing settings, monitoring and interacting with Bjorn.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;h4&gt;actions/scanning.py&lt;/h4&gt; &#xA;&lt;p&gt;Conducts network scanning to identify live hosts and open ports. It updates the network knowledge base (&lt;code&gt;netkb&lt;/code&gt;) and generates scan results.&lt;/p&gt; &#xA;&lt;h4&gt;actions/nmap_vuln_scanner.py&lt;/h4&gt; &#xA;&lt;p&gt;Performs vulnerability scanning using Nmap. It parses the results and updates the vulnerability summary for each host.&lt;/p&gt; &#xA;&lt;h4&gt;Protocol Connectors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ftp_connector.py&lt;/strong&gt;: Brute-force attacks on FTP services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ssh_connector.py&lt;/strong&gt;: Brute-force attacks on SSH services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;smb_connector.py&lt;/strong&gt;: Brute-force attacks on SMB services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rdp_connector.py&lt;/strong&gt;: Brute-force attacks on RDP services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;telnet_connector.py&lt;/strong&gt;: Brute-force attacks on Telnet services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sql_connector.py&lt;/strong&gt;: Brute-force attacks on SQL services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;File Stealing Modules&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_ftp.py&lt;/strong&gt;: Steals files from FTP servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_smb.py&lt;/strong&gt;: Steals files from SMB shares.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_ssh.py&lt;/strong&gt;: Steals files from SSH servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_telnet.py&lt;/strong&gt;: Steals files from Telnet servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_data_sql.py&lt;/strong&gt;: Extracts data from SQL databases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Data Structure&lt;/h3&gt; &#xA;&lt;h4&gt;Network Knowledge Base (netkb.csv)&lt;/h4&gt; &#xA;&lt;p&gt;Located at &lt;code&gt;data/netkb.csv&lt;/code&gt;. Stores information about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Known hosts and their status. (Alive or offline)&lt;/li&gt; &#xA; &lt;li&gt;Open ports and vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;Action execution history. (Success or failed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/f641a565-2765-4280-a7d7-5b25c30dcea5&#34; alt=&#34;netkb1&#34;&gt; &lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/f08114a2-d7d1-4f50-b1c4-a9939ba66056&#34; alt=&#34;netkb2&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Scan Results&lt;/h4&gt; &#xA;&lt;p&gt;Located in &lt;code&gt;data/output/scan_results/&lt;/code&gt;. This file is generated everytime the network is scanned. It is used to consolidate the data and update netkb.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/eb4a313a-f90c-4c43-b699-3678271886dc&#34; alt=&#34;Scan result&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Live Status (livestatus.csv)&lt;/h4&gt; &#xA;&lt;p&gt;Contains real-time information displayed on the e-Paper HAT:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Total number of known hosts.&lt;/li&gt; &#xA; &lt;li&gt;Currently alive hosts.&lt;/li&gt; &#xA; &lt;li&gt;Open ports count.&lt;/li&gt; &#xA; &lt;li&gt;Other runtime statistics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Behavior of Bjorn&lt;/h3&gt; &#xA;&lt;p&gt;Once launched, Bjorn performs the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: Loads configuration, initializes shared data, and sets up necessary components such as the e-Paper HAT display.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Scanning&lt;/strong&gt;: Scans the network to identify live hosts and open ports. Updates the network knowledge base (&lt;code&gt;netkb&lt;/code&gt;) with the results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orchestration&lt;/strong&gt;: Orchestrates different actions based on the configuration and network knowledge base. This includes performing vulnerability scanning, attacks, and file stealing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulnerability Scanning&lt;/strong&gt;: Performs vulnerability scans on identified hosts and updates the vulnerability summary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brute-Force Attacks and File Stealing&lt;/strong&gt;: Starts brute-force attacks and steals files based on the configuration criteria.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Display Updates&lt;/strong&gt;: Continuously updates the e-Paper HAT display with current information such as network status, vulnerabilities, and various statistics. Bjorn also displays random comments based on different themes and statuses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Server&lt;/strong&gt;: Provides a web interface for monitoring and interacting with Bjorn.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry Pi OS installed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stable: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;System: 32-bit&lt;/li&gt; &#xA;     &lt;li&gt;Kernel version: 6.6&lt;/li&gt; &#xA;     &lt;li&gt;Debian version: 12 (bookworm) &#39;2024-10-22-raspios-bookworm-armhf-lite&#39;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Username and hostname set to &lt;code&gt;bjorn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2.13-inch e-Paper HAT connected to GPIO pins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the moment the paper screen v2 &amp;amp; v4 have been tested and implemented. I juste hope the V1 &amp;amp; V3 will work the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick Installation&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to install Bjorn is using the automatic installation script :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download and run the installer&#xA;wget https://raw.githubusercontent.com/infinition/Bjorn/refs/heads/main/install_bjorn.sh&#xA;sudo chmod +x install_bjorn.sh&#xA;sudo ./install_bjorn.sh&#xA;# Choose the choice 1 for automatic installation. It may take a while as a lot of packages and modules will be installed. You must reboot at the end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1: Activate SPI &amp;amp; I2C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo raspi-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to &lt;strong&gt;&#34;Interface Options&#34;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;strong&gt;SPI&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;strong&gt;I2C&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Step 2: System Dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Update system&#xA;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y&#xA;&#xA;# Install required packages&#xA;&#xA; sudo apt install -y \&#xA;  libjpeg-dev \&#xA;  zlib1g-dev \&#xA;  libpng-dev \&#xA;  python3-dev \&#xA;  libffi-dev \&#xA;  libssl-dev \&#xA;  libgpiod-dev \&#xA;  libi2c-dev \&#xA;  libatlas-base-dev \&#xA;  build-essential \&#xA;  python3-pip \&#xA;  wget \&#xA;  lsof \&#xA;  git \&#xA;  libopenjp2-7 \&#xA;  nmap \&#xA;  libopenblas-dev \&#xA;  bluez-tools \&#xA;  bluez \&#xA;  dhcpcd5 \&#xA;  bridge-utils \&#xA;  python3-pil&#xA;&#xA;&#xA;# Update Nmap scripts database&#xA;&#xA;sudo nmap --script-updatedb&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3: Bjorn Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the Bjorn repository&#xA;cd /home/bjorn&#xA;git clone https://github.com/infinition/Bjorn.git&#xA;cd Bjorn&#xA;&#xA;# Install Python dependencies within the virtual environment&#xA;sudo pip install -r requirements.txt --break-system-packages&#xA;# As i did not succeed &#34;for now&#34; to get a stable installation with a virtual environment, i installed the dependencies system wide (with --break-system-packages), it did not cause any issue so far. You can try to install them in a virtual environment if you want.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;3.1: Configure E-Paper Display Type&lt;/h5&gt; &#xA;&lt;p&gt;Choose your e-Paper HAT version by modifying the configuration file:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the configuration file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /home/bjorn/Bjorn/config/shared_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press i to enter insert mode Locate the line containing &#34;epd_type&#34;: Change the value according to your screen model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For 2.13 V1: &#34;epd_type&#34;: &#34;epd2in13&#34;,&lt;/li&gt; &#xA; &lt;li&gt;For 2.13 V2: &#34;epd_type&#34;: &#34;epd2in13_V2&#34;,&lt;/li&gt; &#xA; &lt;li&gt;For 2.13 V3: &#34;epd_type&#34;: &#34;epd2in13_V3&#34;,&lt;/li&gt; &#xA; &lt;li&gt;For 2.13 V4: &#34;epd_type&#34;: &#34;epd2in13_V4&#34;,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Press Esc to exit insert mode Type :wq and press Enter to save and quit&lt;/p&gt; &#xA;&lt;h4&gt;Step 4: Configure File Descriptor Limits&lt;/h4&gt; &#xA;&lt;p&gt;To prevent &lt;code&gt;OSError: [Errno 24] Too many open files&lt;/code&gt;, it&#39;s essential to increase the file descriptor limits.&lt;/p&gt; &#xA;&lt;h5&gt;4.1: Modify File Descriptor Limits for All Users&lt;/h5&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/security/limits.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/security/limits.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* soft nofile 65535&#xA;* hard nofile 65535&#xA;root soft nofile 65535&#xA;root hard nofile 65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.2: Configure Systemd Limits&lt;/h5&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/systemd/system.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/system.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uncomment and modify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DefaultLimitNOFILE=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/systemd/user.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/user.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uncomment and modify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DefaultLimitNOFILE=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.3: Create or Modify &lt;code&gt;/etc/security/limits.d/90-nofile.conf&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/security/limits.d/90-nofile.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root soft nofile 65535&#xA;root hard nofile 65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.4: Adjust the System-wide File Descriptor Limit&lt;/h5&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/sysctl.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fs.file-max = 2097152&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apply the changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sysctl -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 5: Reload Systemd and Apply Changes&lt;/h4&gt; &#xA;&lt;p&gt;Reload systemd to apply the new file descriptor limits:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 6: Modify PAM Configuration Files&lt;/h4&gt; &#xA;&lt;p&gt;PAM (Pluggable Authentication Modules) manages how limits are enforced for user sessions. To ensure that the new file descriptor limits are respected, update the following configuration files.&lt;/p&gt; &#xA;&lt;h5&gt;Step 6.1: Edit &lt;code&gt;/etc/pam.d/common-session&lt;/code&gt; and &lt;code&gt;/etc/pam.d/common-session-noninteractive&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/pam.d/common-session&#xA;sudo vi /etc/pam.d/common-session-noninteractive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line at the end of both files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;session required pam_limits.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This ensures that the limits set in &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; are enforced for all user sessions.&lt;/p&gt; &#xA;&lt;h4&gt;Step 7: Configure Services&lt;/h4&gt; &#xA;&lt;h5&gt;7.1: Bjorn Service&lt;/h5&gt; &#xA;&lt;p&gt;Create the service file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/system/bjorn.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=Bjorn Service&#xA;DefaultDependencies=no&#xA;Before=basic.target&#xA;After=local-fs.target&#xA;&#xA;[Service]&#xA;ExecStartPre=/home/bjorn/Bjorn/kill_port_8000.sh&#xA;ExecStart=/usr/bin/python3 /home/bjorn/Bjorn/Bjorn.py&#xA;WorkingDirectory=/home/bjorn/Bjorn&#xA;StandardOutput=inherit&#xA;StandardError=inherit&#xA;Restart=always&#xA;User=root&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;7.2: Port 8000 Killer Script&lt;/h5&gt; &#xA;&lt;p&gt;Create the script to free up port 8000:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /home/bjorn/Bjorn/kill_port_8000.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;PORT=8000&#xA;PIDS=$(lsof -t -i:$PORT)&#xA;&#xA;if [ -n &#34;$PIDS&#34; ]; then&#xA;    echo &#34;Killing PIDs using port $PORT: $PIDS&#34;&#xA;    kill -9 $PIDS&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make the script executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x /home/bjorn/Bjorn/kill_port_8000.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;7.3: USB Gadget Configuration&lt;/h5&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;/boot/firmware/cmdline.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /boot/firmware/cmdline.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following right after &lt;code&gt;rootwait&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;modules-load=dwc2,g_ether&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;/boot/firmware/config.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /boot/firmware/config.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add at the end of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dtoverlay=dwc2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the USB gadget script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /usr/local/bin/usb-gadget.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;set -e&#xA;&#xA;modprobe libcomposite&#xA;cd /sys/kernel/config/usb_gadget/&#xA;mkdir -p g1&#xA;cd g1&#xA;&#xA;echo 0x1d6b &amp;gt; idVendor&#xA;echo 0x0104 &amp;gt; idProduct&#xA;echo 0x0100 &amp;gt; bcdDevice&#xA;echo 0x0200 &amp;gt; bcdUSB&#xA;&#xA;mkdir -p strings/0x409&#xA;echo &#34;fedcba9876543210&#34; &amp;gt; strings/0x409/serialnumber&#xA;echo &#34;Raspberry Pi&#34; &amp;gt; strings/0x409/manufacturer&#xA;echo &#34;Pi Zero USB&#34; &amp;gt; strings/0x409/product&#xA;&#xA;mkdir -p configs/c.1/strings/0x409&#xA;echo &#34;Config 1: ECM network&#34; &amp;gt; configs/c.1/strings/0x409/configuration&#xA;echo 250 &amp;gt; configs/c.1/MaxPower&#xA;&#xA;mkdir -p functions/ecm.usb0&#xA;&#xA;# Check for existing symlink and remove if necessary&#xA;if [ -L configs/c.1/ecm.usb0 ]; then&#xA;    rm configs/c.1/ecm.usb0&#xA;fi&#xA;ln -s functions/ecm.usb0 configs/c.1/&#xA;&#xA;# Ensure the device is not busy before listing available USB device controllers&#xA;max_retries=10&#xA;retry_count=0&#xA;&#xA;while ! ls /sys/class/udc &amp;gt; UDC 2&amp;gt;/dev/null; do&#xA;    if [ $retry_count -ge $max_retries ]; then&#xA;        echo &#34;Error: Device or resource busy after $max_retries attempts.&#34;&#xA;        exit 1&#xA;    fi&#xA;    retry_count=$((retry_count + 1))&#xA;    sleep 1&#xA;done&#xA;&#xA;# Check if the usb0 interface is already configured&#xA;if ! ip addr show usb0 | grep -q &#34;172.20.2.1&#34;; then&#xA;    ifconfig usb0 172.20.2.1 netmask 255.255.255.0&#xA;else&#xA;    echo &#34;Interface usb0 already configured.&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make the script executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chmod +x /usr/local/bin/usb-gadget.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the systemd service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/system/usb-gadget.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=USB Gadget Service&#xA;After=network.target&#xA;&#xA;[Service]&#xA;ExecStartPre=/sbin/modprobe libcomposite&#xA;ExecStart=/usr/local/bin/usb-gadget.sh&#xA;Type=simple&#xA;RemainAfterExit=yes&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;usb0&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/network/interfaces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;allow-hotplug usb0&#xA;iface usb0 inet static&#xA;    address 172.20.2.1&#xA;    netmask 255.255.255.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload the services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload&#xA;sudo systemctl enable systemd-networkd&#xA;sudo systemctl enable usb-gadget&#xA;sudo systemctl start systemd-networkd&#xA;sudo systemctl start usb-gadget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must reboot to be able to use it as a USB gadget (with ip)&lt;/p&gt; &#xA;&lt;h6&gt;Windows PC Configuration&lt;/h6&gt; &#xA;&lt;p&gt;Set the static IP address on your Windows PC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IP Address&lt;/strong&gt;: &lt;code&gt;172.20.2.2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subnet Mask&lt;/strong&gt;: &lt;code&gt;255.255.255.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default Gateway&lt;/strong&gt;: &lt;code&gt;172.20.2.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS Servers&lt;/strong&gt;: &lt;code&gt;8.8.8.8&lt;/code&gt;, &lt;code&gt;8.8.4.4&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Bjorn&lt;/h2&gt; &#xA;&lt;h3&gt;Manual Start&lt;/h3&gt; &#xA;&lt;p&gt;To manually start Bjorn (without the service, ensure the service is stopped «&amp;nbsp;sudo systemctl stop bjorn.service&amp;nbsp;»):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/bjorn/Bjorn&#xA;&#xA;# Run Bjorn&#xA;sudo python Bjorn.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service Control&lt;/h3&gt; &#xA;&lt;p&gt;Control the Bjorn service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start Bjorn&#xA;sudo systemctl start bjorn.service&#xA;&#xA;# Stop Bjorn&#xA;sudo systemctl stop bjorn.service&#xA;&#xA;# Check status&#xA;sudo systemctl status bjorn.service&#xA;&#xA;# View logs&#xA;sudo journalctl -u bjorn.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fresh Start&lt;/h3&gt; &#xA;&lt;p&gt;To reset Bjorn to a clean state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm -rf /home/bjorn/Bjorn/config/*.json \&#xA;    /home/bjorn/Bjorn/data/*.csv \&#xA;    /home/bjorn/Bjorn/data/*.log \&#xA;    /home/bjorn/Bjorn/data/output/data_stolen/* \&#xA;    /home/bjorn/Bjorn/data/output/crackedpwd/* \&#xA;    /home/bjorn/Bjorn/config/* \&#xA;    /home/bjorn/Bjorn/data/output/scan_results/* \&#xA;    /home/bjorn/Bjorn/__pycache__ \&#xA;    /home/bjorn/Bjorn/config/__pycache__ \&#xA;    /home/bjorn/Bjorn/data/__pycache__ \&#xA;    /home/bjorn/Bjorn/actions/__pycache__ \&#xA;    /home/bjorn/Bjorn/resources/__pycache__ \&#xA;    /home/bjorn/Bjorn/web/__pycache__ \&#xA;    /home/bjorn/Bjorn/*.log \&#xA;    /home/bjorn/Bjorn/resources/waveshare_epd/__pycache__ \&#xA;    /home/bjorn/Bjorn/data/logs/* \&#xA;    /home/bjorn/Bjorn/data/output/vulnerabilities/* \&#xA;    /home/bjorn/Bjorn/data/logs/*&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything will be recreated automatically at the next launch of Bjorn.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important Configuration Files&lt;/h2&gt; &#xA;&lt;h3&gt;Shared Configuration (&lt;code&gt;shared_config.json&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Defines various settings for Bjorn, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Boolean settings (&lt;code&gt;manual_mode&lt;/code&gt;, &lt;code&gt;websrv&lt;/code&gt;, &lt;code&gt;debug_mode&lt;/code&gt;, etc.).&lt;/li&gt; &#xA; &lt;li&gt;Time intervals and delays.&lt;/li&gt; &#xA; &lt;li&gt;Network settings.&lt;/li&gt; &#xA; &lt;li&gt;Port lists and blacklists. These settings are accessible on the webpage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Actions Configuration (&lt;code&gt;actions.json&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Lists the actions to be performed by Bjorn, including (dynamically generated with the content of the folder):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Module and class definitions.&lt;/li&gt; &#xA; &lt;li&gt;Port assignments.&lt;/li&gt; &#xA; &lt;li&gt;Parent-child relationships.&lt;/li&gt; &#xA; &lt;li&gt;Action status definitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues and Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Current Development Issues&lt;/h3&gt; &#xA;&lt;h4&gt;1. Long Runtime Issue&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Problem&lt;/strong&gt;: &lt;code&gt;OSError: [Errno 24] Too many open files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: Partially resolved with system limits configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workaround&lt;/strong&gt;: Implemented file descriptor limits increase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;: Check open files with &lt;code&gt;lsof -p $(pgrep -f Bjorn.py) | wc -l&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;At the moment the logs show periodically this information as (FD : XXX)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Troubleshooting Steps&lt;/h3&gt; &#xA;&lt;h4&gt;1. Service Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Check service status&#xA;sudo systemctl status bjorn.service&#xA;&#xA;# View detailed logs&#xA;sudo journalctl -u bjorn.service -f&#xA;&#xA;# Check port 8000 usage&#xA;sudo lsof -i :8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Display Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Verify SPI devices&#xA;ls /dev/spi*&#xA;&#xA;# Check user permissions&#xA;sudo usermod -a -G spi,gpio bjorn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Network Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Check network interfaces&#xA;ip addr show&#xA;&#xA;# Test USB gadget interface&#xA;ip link show usb0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Permission Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Fix ownership&#xA;sudo chown -R bjorn:bjorn /home/bjorn/Bjorn&#xA;&#xA;# Fix permissions&#xA;sudo chmod -R 755 /home/bjorn/Bjorn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;E-Paper Display Support&lt;/h2&gt; &#xA;&lt;p&gt;Currently hardcoded for the 2.13-inch V2 &amp;amp; V4 e-Paper HAT. My program automatically detect the screen model and adapt the python expressions into my code.&lt;/p&gt; &#xA;&lt;p&gt;For other versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As i dont have the v1 and v3 to validate my algorithm, i just hope it will work properly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ghosting removed ! 🍾&lt;/h3&gt; &#xA;&lt;p&gt;In my journey to make Bjorn work with the different screen versions, I struggled, hacking several parameters and found out that it was possible to remove the ghosting of screens! I let you see this, I think this method will be very useful for all other projects with the e-paper screen!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Guidelines&lt;/h2&gt; &#xA;&lt;h3&gt;Adding New Actions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new action file in &lt;code&gt;actions/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Implement required methods: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;__init__(self, shared_data)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;execute(self, ip, port, row, status_key)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the action to &lt;code&gt;actions.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow existing action patterns.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a test environment.&lt;/li&gt; &#xA; &lt;li&gt;Use an isolated network.&lt;/li&gt; &#xA; &lt;li&gt;Follow ethical guidelines.&lt;/li&gt; &#xA; &lt;li&gt;Document test cases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web Interface&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access&lt;/strong&gt;: &lt;code&gt;http://[device-ip]:8000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Real-time monitoring with a console.&lt;/li&gt; &#xA;   &lt;li&gt;Configuration management.&lt;/li&gt; &#xA;   &lt;li&gt;Viewing results. (Credentials and files)&lt;/li&gt; &#xA;   &lt;li&gt;System control.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;Current Focus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stability improvements.&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;Service reliability.&lt;/li&gt; &#xA; &lt;li&gt;Documentation updates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Future Plans&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Additional attack modules.&lt;/li&gt; &#xA; &lt;li&gt;Enhanced reporting.&lt;/li&gt; &#xA; &lt;li&gt;Improved user interface.&lt;/li&gt; &#xA; &lt;li&gt;Extended protocol support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The project welcomes contributions in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New attack modules.&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;Documentation.&lt;/li&gt; &#xA; &lt;li&gt;Feature improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support and Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Report Issues&lt;/strong&gt;: Via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow ethical guidelines.&lt;/li&gt; &#xA;   &lt;li&gt;Document reproduction steps.&lt;/li&gt; &#xA;   &lt;li&gt;Provide logs and context.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Bjorn is a powerful tool designed to perform comprehensive network scanning, vulnerability assessment, and data exfiltration. Its modular design and extensive configuration options allow for flexible and targeted operations. By combining different actions and orchestrating them intelligently, Bjorn can provide valuable insights into network security and help identify and mitigate potential risks.&lt;/p&gt; &#xA;&lt;p&gt;The e-Paper HAT display and web interface make it easy to monitor and interact with Bjorn, providing real-time updates and status information. With its extensible architecture and customizable actions, Bjorn can be adapted to suit a wide range of security testing and monitoring needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Bjorn is distributed under the MIT License. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Author&lt;/strong&gt;: infinition&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&#34;https://github.com/infinition/Bjorn&#34;&gt;infinition/Bjorn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This document is subject to change as the project evolves. Please refer to the GitHub repository for the most recent updates.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>AlexxIT/go2rtc</title>
    <updated>2024-11-10T01:28:29Z</updated>
    <id>tag:github.com,2024-11-10:/AlexxIT/go2rtc</id>
    <link href="https://github.com/AlexxIT/go2rtc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ultimate camera streaming application with support RTSP, RTMP, HTTP-FLV, WebRTC, MSE, HLS, MP4, MJPEG, HomeKit, FFmpeg, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/logo.gif&#34; alt=&#34;go2rtc&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/AlexxIT/go2rtc?style=flat-square&amp;amp;logo=github&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/alexxit/go2rtc&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/alexxit/go2rtc?style=flat-square&amp;amp;logo=docker&amp;amp;logoColor=white&amp;amp;label=pulls&#34; alt=&#34;docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/AlexxIT/go2rtc/total?color=blue&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/AlexxIT/go2rtc&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/AlexxIT/go2rtc&#34; alt=&#34;goreport&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;p&gt;Ultimate camera streaming application with support RTSP, WebRTC, HomeKit, FFmpeg, RTMP, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/go2rtc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zero-dependency and zero-config &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;small app&lt;/a&gt; for all OS (Windows, macOS, Linux, ARM)&lt;/li&gt; &#xA; &lt;li&gt;zero-delay for many supported protocols (lowest possible streaming latency)&lt;/li&gt; &#xA; &lt;li&gt;streaming from &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp&#34;&gt;RTMP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;DVRIP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;HTTP&lt;/a&gt; (FLV/MJPEG/JPEG/TS), &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device&#34;&gt;USB Cameras&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;other sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;streaming from any sources, supported by &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;streaming to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;MSE/MP4&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit&#34;&gt;HomeKit&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;HLS&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg&#34;&gt;MJPEG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream&#34;&gt;publish&lt;/a&gt; any source to popular streaming services (YouTube, Telegram, etc.)&lt;/li&gt; &#xA; &lt;li&gt;first project in the World with support streaming from &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit&#34;&gt;HomeKit Cameras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;support H265 for WebRTC in browser (Safari only, &lt;a href=&#34;https://github.com/AlexxIT/Blog/issues/5&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on the fly transcoding for unsupported codecs via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;play audio files and live streams on some cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera&#34;&gt;speaker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;multi-source 2-way &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation&#34;&gt;codecs negotiation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mixing tracks from different sources to single stream&lt;/li&gt; &#xA;   &lt;li&gt;auto match client supported codecs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;2-way audio&lt;/a&gt; for some cameras&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;streaming from private networks via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;can be &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;integrated to&lt;/a&gt; any smart home platform or be used as &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;standalone app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inspired by:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;series of streaming projects from &lt;a href=&#34;https://github.com/deepch&#34;&gt;@deepch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;webrtc&lt;/a&gt; go library and whole &lt;a href=&#34;https://github.com/pion&#34;&gt;@pion&lt;/a&gt; team&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aler9/rtsp-simple-server&#34;&gt;rtsp-simple-server&lt;/a&gt; idea from &lt;a href=&#34;https://github.com/aler9&#34;&gt;@aler9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt; framework pipeline idea&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mediasoup.org/&#34;&gt;MediaSoup&lt;/a&gt; framework routing idea&lt;/li&gt; &#xA; &lt;li&gt;HomeKit Accessory Protocol from &lt;a href=&#34;https://github.com/brutella/hap&#34;&gt;@brutella&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;creator of the project&#39;s logo &lt;a href=&#34;https://www.instagram.com/v_novoseltsev&#34;&gt;@v_novoseltsev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start&#34;&gt;Fast start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;go2rtc: Binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker&#34;&gt;go2rtc: Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;go2rtc: Home Assistant Add-on&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration&#34;&gt;go2rtc: Home Assistant Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-dev-version&#34;&gt;go2rtc: Dev version&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;Module: Streams&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;Two way audio&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;Source: RTSP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp&#34;&gt;Source: RTMP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;Source: HTTP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif&#34;&gt;Source: ONVIF&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;Source: FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device&#34;&gt;Source: FFmpeg Device&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec&#34;&gt;Source: Exec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;Source: Echo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr&#34;&gt;Source: Expr&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit&#34;&gt;Source: HomeKit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble&#34;&gt;Source: Bubble&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;Source: DVRIP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;Source: Tapo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-kasa&#34;&gt;Source: Kasa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro&#34;&gt;Source: GoPro&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon&#34;&gt;Source: Ivideon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;Source: Hass&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi&#34;&gt;Source: ISAPI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest&#34;&gt;Source: Nest&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock&#34;&gt;Source: Roborock&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc&#34;&gt;Source: WebRTC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent&#34;&gt;Source: WebTorrent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources&#34;&gt;Incoming sources&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera&#34;&gt;Stream to camera&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream&#34;&gt;Publish stream&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;Module: API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;Module: RTSP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp&#34;&gt;Module: RTMP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;Module: WebRTC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit&#34;&gt;Module: HomeKit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent&#34;&gt;Module: WebTorrent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;Module: ngrok&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;Module: Hass&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;Module: MP4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;Module: HLS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg&#34;&gt;Module: MJPEG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log&#34;&gt;Module: Log&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;Codecs filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-madness&#34;&gt;Codecs madness&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation&#34;&gt;Codecs negotiation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#projects-using-go2rtc&#34;&gt;Projects using go2rtc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#cameras-experience&#34;&gt;Camera experience&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#tips&#34;&gt;TIPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fast start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;binary&lt;/a&gt; or use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker&#34;&gt;Docker&lt;/a&gt; or Home Assistant &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;Add-on&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open web interface: &lt;code&gt;http://localhost:1984/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optionally:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add your &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;streams&lt;/a&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;config&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;setup &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;external access&lt;/a&gt; to webrtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;write your own &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;web interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;integrate &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;web api&lt;/a&gt; into your smart home platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;go2rtc: Binary&lt;/h3&gt; &#xA;&lt;p&gt;Download binary for your OS from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/&#34;&gt;latest release&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_win64.zip&lt;/code&gt; - Windows 10+ 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_win32.zip&lt;/code&gt; - Windows 7+ 32-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_win_arm64.zip&lt;/code&gt; - Windows ARM 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_amd64&lt;/code&gt; - Linux 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_i386&lt;/code&gt; - Linux 32-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_arm64&lt;/code&gt; - Linux ARM 64-bit (ex. Raspberry 64-bit OS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_arm&lt;/code&gt; - Linux ARM 32-bit (ex. Raspberry 32-bit OS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_armv6&lt;/code&gt; - Linux ARMv6 (for old Raspberry 1 and Zero)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_mipsel&lt;/code&gt; - Linux MIPS (ex. &lt;a href=&#34;https://github.com/AlexxIT/XiaomiGateway3&#34;&gt;Xiaomi Gateway 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/gtxaspec/wz_mini_hacks&#34;&gt;Wyze cameras&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_mac_amd64.zip&lt;/code&gt; - macOS 10.13+ Intel 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_mac_arm64.zip&lt;/code&gt; - macOS ARM 64-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t forget to fix the rights &lt;code&gt;chmod +x go2rtc_xxx_xxx&lt;/code&gt; on Linux and Mac.&lt;/p&gt; &#xA;&lt;h3&gt;go2rtc: Docker&lt;/h3&gt; &#xA;&lt;p&gt;The Docker container &lt;a href=&#34;https://hub.docker.com/r/alexxit/go2rtc&#34;&gt;&lt;code&gt;alexxit/go2rtc&lt;/code&gt;&lt;/a&gt; supports multiple architectures including &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;386&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, and &lt;code&gt;arm&lt;/code&gt;. This container offers the same functionality as the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;Home Assistant Add-on&lt;/a&gt; but is designed to operate independently of Home Assistant. It comes preinstalled with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;Python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;go2rtc: Home Assistant Add-on&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons&#34;&gt;&lt;img src=&#34;https://my.home-assistant.io/badges/supervisor_addon.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Add-On: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Settings &amp;gt; Add-ons &amp;gt; Plus &amp;gt; Repositories &amp;gt; Add &lt;code&gt;https://github.com/AlexxIT/hassio-addons&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;go2rtc &amp;gt; Install &amp;gt; Start&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Setup &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;go2rtc: Home Assistant Integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; custom component can be used on any &lt;a href=&#34;https://www.home-assistant.io/installation/&#34;&gt;Home Assistant installation&lt;/a&gt;, including &lt;a href=&#34;https://github.com/AlexxIT/HassWP&#34;&gt;HassWP&lt;/a&gt; on Windows. It can automatically download and use the latest version of go2rtc. Or it can connect to an existing version of go2rtc. Addon installation in this case is optional.&lt;/p&gt; &#xA;&lt;h3&gt;go2rtc: Dev version&lt;/h3&gt; &#xA;&lt;p&gt;Latest, but maybe unstable version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary: &lt;a href=&#34;https://nightly.link/AlexxIT/go2rtc/workflows/build/master&#34;&gt;latest nightly release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker: &lt;code&gt;alexxit/go2rtc:master&lt;/code&gt; or &lt;code&gt;alexxit/go2rtc:master-hardware&lt;/code&gt; versions&lt;/li&gt; &#xA; &lt;li&gt;Hass Add-on: &lt;code&gt;go2rtc master&lt;/code&gt; or &lt;code&gt;go2rtc master hardware&lt;/code&gt; versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by default go2rtc will search &lt;code&gt;go2rtc.yaml&lt;/code&gt; in the current work directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;api&lt;/code&gt; server will start on default &lt;strong&gt;1984 port&lt;/strong&gt; (TCP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp&lt;/code&gt; server will start on default &lt;strong&gt;8554 port&lt;/strong&gt; (TCP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;webrtc&lt;/code&gt; will use port &lt;strong&gt;8555&lt;/strong&gt; (TCP/UDP) for connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ffmpeg&lt;/code&gt; will use default transcoding options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Configuration options and a complete list of settings can be found in &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Configuration&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;streams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;api&lt;/a&gt; - HTTP API (important for WebRTC support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;rtsp&lt;/a&gt; - RTSP Server (important for FFmpeg support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;webrtc&lt;/a&gt; - WebRTC Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;mp4&lt;/a&gt; - MSE, MP4 stream and MP4 shapshot Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;hls&lt;/a&gt; - HLS TS or fMP4 stream Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg&#34;&gt;mjpeg&lt;/a&gt; - MJPEG Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg&lt;/a&gt; - FFmpeg integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok&lt;/a&gt; - ngrok integration (external access for private network)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log&#34;&gt;log&lt;/a&gt; - logs config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module: Streams&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; support different stream source types. You can config one or multiple links of any type as stream source.&lt;/p&gt; &#xA;&lt;p&gt;Available source types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;rtsp&lt;/a&gt; - &lt;code&gt;RTSP&lt;/code&gt; and &lt;code&gt;RTSPS&lt;/code&gt; cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;two way audio&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp&#34;&gt;rtmp&lt;/a&gt; - &lt;code&gt;RTMP&lt;/code&gt; streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;http&lt;/a&gt; - &lt;code&gt;HTTP-FLV&lt;/code&gt;, &lt;code&gt;MPEG-TS&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt; (snapshots), &lt;code&gt;MJPEG&lt;/code&gt; streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif&#34;&gt;onvif&lt;/a&gt; - get camera &lt;code&gt;RTSP&lt;/code&gt; link and snapshot link using &lt;code&gt;ONVIF&lt;/code&gt; protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg&lt;/a&gt; - FFmpeg integration (&lt;code&gt;HLS&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt; and many others)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device&#34;&gt;ffmpeg:device&lt;/a&gt; - local USB Camera or Webcam&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec&#34;&gt;exec&lt;/a&gt; - get media from external app output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;echo&lt;/a&gt; - get stream link from bash or python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr&#34;&gt;expr&lt;/a&gt; - get stream link via built-in expression language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit&#34;&gt;homekit&lt;/a&gt; - streaming from HomeKit Camera&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble&#34;&gt;bubble&lt;/a&gt; - streaming from ESeeCloud/dvr163 NVR&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;dvrip&lt;/a&gt; - streaming from DVR-IP NVR&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;tapo&lt;/a&gt; - TP-Link Tapo cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;two way audio&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;kasa&lt;/a&gt; - TP-Link Kasa cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro&#34;&gt;gopro&lt;/a&gt; - GoPro cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon&#34;&gt;ivideon&lt;/a&gt; - public cameras from &lt;a href=&#34;https://tv.ivideon.com/&#34;&gt;Ivideon&lt;/a&gt; service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi&#34;&gt;isapi&lt;/a&gt; - two way audio for Hikvision (ISAPI) cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock&#34;&gt;roborock&lt;/a&gt; - Roborock vacuums with cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc&#34;&gt;webrtc&lt;/a&gt; - WebRTC/WHEP sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent&#34;&gt;webtorrent&lt;/a&gt; - WebTorrent source from another go2rtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources&#34;&gt;incoming sources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Two way audio&lt;/h4&gt; &#xA;&lt;p&gt;Supported for sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;RTSP cameras&lt;/a&gt; with &lt;a href=&#34;https://www.onvif.org/specs/stream/ONVIF-Streaming-Spec.pdf&#34;&gt;ONVIF Profile T&lt;/a&gt; (back channel connection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;DVRIP&lt;/a&gt; cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;TP-Link Tapo&lt;/a&gt; cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi&#34;&gt;Hikvision ISAPI&lt;/a&gt; cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock&#34;&gt;Roborock vacuums&lt;/a&gt; models with cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec&#34;&gt;Exec&lt;/a&gt; audio on server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser&#34;&gt;Any Browser&lt;/a&gt; as IP-camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Two way audio can be used in browser with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt; technology. The browser will give access to the microphone only for HTTPS sites (&lt;a href=&#34;https://stackoverflow.com/questions/52759992/how-to-access-camera-and-microphone-in-chrome-without-https&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;go2rtc also support &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera&#34;&gt;play audio&lt;/a&gt; files and live streams on this cameras.&lt;/p&gt; &#xA;&lt;h4&gt;Source: RTSP&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  sonoff_camera: rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0&#xA;  dahua_camera:&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1&#xA;  amcrest_doorbell:&#xA;    - rtsp://username:password@192.168.1.123:554/cam/realmonitor?channel=1&amp;amp;subtype=0#backchannel=0&#xA;  unifi_camera: rtspx://192.168.1.123:7441/fD6ouM72bWoFijxK&#xA;  glichy_camera: ffmpeg:rtsp://username:password@192.168.1.123/live/ch00_1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommendations&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Amcrest Doorbell&lt;/strong&gt; users may want to disable two way audio, because with an active stream you won&#39;t have a call button working. You need to add &lt;code&gt;#backchannel=0&lt;/code&gt; to the end of your RTSP link in YAML config file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dahua Doorbell&lt;/strong&gt; users may want to change backchannel &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/issues/52&#34;&gt;audio codec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reolink&lt;/strong&gt; users may want NOT to use RTSP protocol at all, some camera models have a very awful unusable stream implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ubiquiti UniFi&lt;/strong&gt; users may want to disable HTTPS verification. Use &lt;code&gt;rtspx://&lt;/code&gt; prefix instead of &lt;code&gt;rtsps://&lt;/code&gt;. And don&#39;t use &lt;code&gt;?enableSrtp&lt;/code&gt; &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/issues/81&#34;&gt;suffix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TP-Link Tapo&lt;/strong&gt; users may skip login and password, because go2rtc support login &lt;a href=&#34;https://drmnsamoliu.github.io/video.html&#34;&gt;without them&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If your camera has two RTSP links - you can add both of them as sources. This is useful when streams has different codecs, as example AAC audio with main stream and PCMU/PCMA audio with second stream&lt;/li&gt; &#xA; &lt;li&gt;If the stream from your camera is glitchy, try using &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg source&lt;/a&gt;. It will not add CPU load if you won&#39;t use transcoding&lt;/li&gt; &#xA; &lt;li&gt;If the stream from your camera is very glitchy, try to use transcoding with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;rtsp...#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add custom timeout &lt;code&gt;#timeout=30&lt;/code&gt; (in seconds)&lt;/li&gt; &#xA; &lt;li&gt;Ignore audio - &lt;code&gt;#media=video&lt;/code&gt; or ignore video - &lt;code&gt;#media=audio&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ignore two way audio API &lt;code&gt;#backchannel=0&lt;/code&gt; - important for some glitchy cameras&lt;/li&gt; &#xA; &lt;li&gt;Use WebSocket transport &lt;code&gt;#transport=ws...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;RTSP over WebSocket&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # WebSocket with authorization, RTSP - without&#xA;  axis-rtsp-ws:  rtsp://192.168.1.123:4567/axis-media/media.amp?overview=0&amp;amp;camera=1&amp;amp;resolution=1280x720&amp;amp;videoframeskipmode=empty&amp;amp;Axis-Orig-Sw=true#transport=ws://user:pass@192.168.1.123:4567/rtsp-over-websocket&#xA;  # WebSocket without authorization, RTSP - with&#xA;  dahua-rtsp-ws: rtsp://user:pass@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1&amp;amp;proto=Private3#transport=ws://192.168.1.123/rtspoverwebsocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: RTMP&lt;/h4&gt; &#xA;&lt;p&gt;You can get stream from RTMP server, for example &lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;Nginx with nginx-rtmp-module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  rtmp_stream: rtmp://192.168.1.123/live/camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: HTTP&lt;/h4&gt; &#xA;&lt;p&gt;Support Content-Type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP-FLV&lt;/strong&gt; (&lt;code&gt;video/x-flv&lt;/code&gt;) - same as RTMP, but over HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP-JPEG&lt;/strong&gt; (&lt;code&gt;image/jpeg&lt;/code&gt;) - camera snapshot link, can be converted by go2rtc to MJPEG stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP-MJPEG&lt;/strong&gt; (&lt;code&gt;multipart/x&lt;/code&gt;) - simple MJPEG stream over HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MPEG-TS&lt;/strong&gt; (&lt;code&gt;video/mpeg&lt;/code&gt;) - legacy &lt;a href=&#34;https://en.wikipedia.org/wiki/MPEG_transport_stream&#34;&gt;streaming format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Source also support HTTP and TCP streams with autodetection for different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # [HTTP-FLV] stream in video/x-flv format&#xA;  http_flv: http://192.168.1.123:20880/api/camera/stream/780900131155/657617&#xA;  &#xA;  # [JPEG] snapshots from Dahua camera, will be converted to MJPEG stream&#xA;  dahua_snap: http://admin:password@192.168.1.123/cgi-bin/snapshot.cgi?channel=1&#xA;&#xA;  # [MJPEG] stream will be proxied without modification&#xA;  http_mjpeg: https://mjpeg.sanford.io/count.mjpeg&#xA;&#xA;  # [MJPEG or H.264/H.265 bitstream or MPEG-TS]&#xA;  tcp_magic: tcp://192.168.1.123:12345&#xA;&#xA;  # Add custom header&#xA;  custom_header: &#34;https://mjpeg.sanford.io/count.mjpeg#header=Authorization: Bearer XXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Dahua camera has bug: if you select MJPEG codec for RTSP second stream - snapshot won&#39;t work.&lt;/p&gt; &#xA;&lt;h4&gt;Source: ONVIF&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0&#34;&gt;New in v1.5.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The source is not very useful if you already know RTSP and snapshot links for your camera. But it can be useful if you don&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WebUI &amp;gt; Add&lt;/strong&gt; webpage support ONVIF autodiscovery. Your server must be on the same subnet as the camera. If you use docker, you must use &#34;network host&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua1: onvif://admin:password@192.168.1.123&#xA;  reolink1: onvif://admin:password@192.168.1.123:8000&#xA;  tapo1: onvif://admin:password@192.168.1.123:2020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: FFmpeg&lt;/h4&gt; &#xA;&lt;p&gt;You can get any stream or file or device via FFmpeg and push it to go2rtc. The app will automatically start FFmpeg with the proper arguments when someone starts watching the stream.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FFmpeg preistalled for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hass Add-on&lt;/strong&gt; users can target files from &lt;a href=&#34;https://www.home-assistant.io/more-info/local-media/setup-media/&#34;&gt;/media&lt;/a&gt; folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;ffmpeg:{input}#{param1}#{param2}#{param3}&lt;/code&gt;. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # [FILE] all tracks will be copied without transcoding codecs&#xA;  file1: ffmpeg:/media/BigBuckBunny.mp4&#xA;&#xA;  # [FILE] video will be transcoded to H264, audio will be skipped&#xA;  file2: ffmpeg:/media/BigBuckBunny.mp4#video=h264&#xA;&#xA;  # [FILE] video will be copied, audio will be transcoded to pcmu&#xA;  file3: ffmpeg:/media/BigBuckBunny.mp4#video=copy#audio=pcmu&#xA;&#xA;  # [HLS] video will be copied, audio will be skipped&#xA;  hls: ffmpeg:https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear5/prog_index.m3u8#video=copy&#xA;&#xA;  # [MJPEG] video will be transcoded to H264&#xA;  mjpeg: ffmpeg:http://185.97.122.128/cgi-bin/faststream.jpg#video=h264&#xA;&#xA;  # [RTSP] video with rotation, should be transcoded, so select H264&#xA;  rotate: ffmpeg:rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0#video=h264#rotate=90&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All trascoding formats has &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/internal/ffmpeg/ffmpeg.go&#34;&gt;built-in templates&lt;/a&gt;: &lt;code&gt;h264&lt;/code&gt;, &lt;code&gt;h265&lt;/code&gt;, &lt;code&gt;opus&lt;/code&gt;, &lt;code&gt;pcmu&lt;/code&gt;, &lt;code&gt;pcmu/16000&lt;/code&gt;, &lt;code&gt;pcmu/48000&lt;/code&gt;, &lt;code&gt;pcma&lt;/code&gt;, &lt;code&gt;pcma/16000&lt;/code&gt;, &lt;code&gt;pcma/48000&lt;/code&gt;, &lt;code&gt;aac&lt;/code&gt;, &lt;code&gt;aac/16000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But you can override them via YAML config. You can also add your own formats to config and use them with source params.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg:&#xA;  bin: ffmpeg  # path to ffmpeg binary&#xA;  h264: &#34;-codec:v libx264 -g:v 30 -preset:v superfast -tune:v zerolatency -profile:v main -level:v 4.1&#34;&#xA;  mycodec: &#34;-any args that supported by ffmpeg...&#34;&#xA;  myinput: &#34;-fflags nobuffer -flags low_delay -timeout 5000000 -i {input}&#34;&#xA;  myraw: &#34;-ss 00:00:20&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use go2rtc stream name as ffmpeg input (ex. &lt;code&gt;ffmpeg:camera1#video=h264&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;audio&lt;/code&gt; params multiple times (ex. &lt;code&gt;#video=copy#audio=copy#audio=pcmu&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values, important with transcoding (ex. &lt;code&gt;#video=h264#rotate=90&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; params, important with transcoding (ex. &lt;code&gt;#video=h264#width=1280&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;drawtext&lt;/code&gt; to add a timestamp (ex. &lt;code&gt;drawtext=x=2:y=2:fontsize=12:fontcolor=white:box=1:boxcolor=black&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will greatly increase the CPU of the server, even with hardware acceleration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;raw&lt;/code&gt; param for any additional FFmpeg arguments (ex. &lt;code&gt;#raw=-vf transpose=1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;input&lt;/code&gt; param to override default input template (ex. &lt;code&gt;#input=rtsp/udp&lt;/code&gt; will change RTSP transport from TCP to UDP+TCP) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use raw input value (ex. &lt;code&gt;#input=-timeout 5000000 -i {input}&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;You can add your own input templates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration&#34;&gt;hardware acceleration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available hardware in the WebUI add page.&lt;/p&gt; &#xA;&lt;h4&gt;Source: FFmpeg Device&lt;/h4&gt; &#xA;&lt;p&gt;You can get video from any USB-camera or Webcam as RTSP or WebRTC stream. This is part of FFmpeg integration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;check available devices in Web interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;video_size&lt;/code&gt; and &lt;code&gt;framerate&lt;/code&gt; must be supported by your camera!&lt;/li&gt; &#xA; &lt;li&gt;for Linux supported only video for now&lt;/li&gt; &#xA; &lt;li&gt;for macOS you can stream Facetime camera or whole Desktop!&lt;/li&gt; &#xA; &lt;li&gt;for macOS important to set right framerate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;ffmpeg:device?{input-params}#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  linux_usbcam:   ffmpeg:device?video=0&amp;amp;video_size=1280x720#video=h264&#xA;  windows_webcam: ffmpeg:device?video=0#video=h264&#xA;  macos_facetime: ffmpeg:device?video=0&amp;amp;audio=1&amp;amp;video_size=1280x720&amp;amp;framerate=30#video=h264#audio=pcma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available devices in the WebUI add page.&lt;/p&gt; &#xA;&lt;h4&gt;Source: Exec&lt;/h4&gt; &#xA;&lt;p&gt;Exec source can run any external application and expect data from it. Two transports are supported - &lt;strong&gt;pipe&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0&#34;&gt;v1.5.0&lt;/a&gt;&lt;/em&gt;) and &lt;strong&gt;RTSP&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use &lt;strong&gt;RTSP&lt;/strong&gt; transport - the command must contain the &lt;code&gt;{output}&lt;/code&gt; argument in any place. On launch, it will be replaced by the local address of the RTSP server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pipe&lt;/strong&gt; reads data from app stdout in different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;. Also pipe can write data to app stdin in two formats: &lt;strong&gt;PCMA&lt;/strong&gt; and &lt;strong&gt;PCM/48000&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The source can be used with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt; - go2rtc ffmpeg source just a shortcut to exec source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffplay.html&#34;&gt;FFplay&lt;/a&gt; - play audio on your server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/camera_software.html&#34;&gt;Raspberry Pi Cameras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;any your own software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pipe commands support parameters (format: &lt;code&gt;exec:{command}#{param1}#{param2}&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;killsignal&lt;/code&gt; - signal which will be send to stop the process (numeric form)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;killtimeout&lt;/code&gt; - time in seconds for forced termination with sigkill&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backchannel&lt;/code&gt; - enable backchannel for two-way audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  stream: exec:ffmpeg -re -i /media/BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp {output}&#xA;  picam_h264: exec:libcamera-vid -t 0 --inline -o -&#xA;  picam_mjpeg: exec:libcamera-vid -t 0 --codec mjpeg -o -&#xA;  pi5cam_h264: exec:libcamera-vid -t 0 --libav-format h264 -o -&#xA;  canon: exec:gphoto2 --capture-movie --stdout#killsignal=2#killtimeout=5&#xA;  play_pcma: exec:ffplay -fflags nobuffer -f alaw -ar 8000 -i -#backchannel=1&#xA;  play_pcm48k: exec:ffplay -fflags nobuffer -f s16be -ar 48000 -i -#backchannel=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Echo&lt;/h4&gt; &#xA;&lt;p&gt;Some sources may have a dynamic link. And you will need to get it using a bash or python script. Your script should echo a link to the source. RTSP, FFmpeg or any of the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;supported sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users has preinstalled &lt;code&gt;python3&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check examples in &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Source-Echo-examples&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  apple_hls: echo:python3 hls.py https://developer.apple.com/streaming/examples/basic-stream-osx-ios5.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Expr&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.2&#34;&gt;New in v1.8.2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;echo&lt;/code&gt; source, but uses the built-in &lt;a href=&#34;https://github.com/antonmedv/expr&#34;&gt;expr&lt;/a&gt; expression language (&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/internal/expr/README.md&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Source: HomeKit&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use HomeKit Cameras &lt;strong&gt;without Apple devices&lt;/strong&gt; (iPhone, iPad, etc.), it&#39;s just a yet another protocol&lt;/li&gt; &#xA; &lt;li&gt;HomeKit device can be paired with only one ecosystem. So, if you have paired it to an iPhone (Apple Home) - you can&#39;t pair it with Home Assistant or go2rtc. Or if you have paired it to go2rtc - you can&#39;t pair it with iPhone&lt;/li&gt; &#xA; &lt;li&gt;HomeKit device should be in same network with working &lt;a href=&#34;https://en.wikipedia.org/wiki/Multicast_DNS&#34;&gt;mDNS&lt;/a&gt; between device and go2rtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;go2rtc support import paired HomeKit devices from &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;Home Assistant&lt;/a&gt;. So you can use HomeKit camera with Hass and go2rtc simultaneously. If you using Hass, I recommend pairing devices with it, it will give you more options.&lt;/p&gt; &#xA;&lt;p&gt;You can pair device with go2rtc on the HomeKit page. If you can&#39;t see your devices - reload the page. Also try reboot your HomeKit device (power off). If you still can&#39;t see it - you have a problems with mDNS.&lt;/p&gt; &#xA;&lt;p&gt;If you see a device but it does not have a pair button - it is paired to some ecosystem (Apple Home, Home Assistant, HomeBridge etc). You need to delete device from that ecosystem, and it will be available for pairing. If you cannot unpair device, you will have to reset it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HomeKit audio uses very non-standard &lt;strong&gt;AAC-ELD&lt;/strong&gt; codec with very non-standard params and specification violation&lt;/li&gt; &#xA; &lt;li&gt;Audio can&#39;t be played in &lt;code&gt;VLC&lt;/code&gt; and probably any other player&lt;/li&gt; &#xA; &lt;li&gt;Audio should be transcoded for using with MSE, WebRTC, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recommended settings for using HomeKit Camera with WebRTC, MSE, MP4, RTSP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streams:&#xA;  aqara_g3:&#xA;    - hass:Camera-Hub-G3-AB12&#xA;    - ffmpeg:aqara_g3#audio=aac#audio=opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RTSP link with &#34;normal&#34; audio for any player: &lt;code&gt;rtsp://192.168.1.123:8554/aqara_g3?video&amp;amp;audio=aac&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This source is in active development!&lt;/strong&gt; Tested only with &lt;a href=&#34;https://www.aqara.com/eu/product/camera-hub-g3&#34;&gt;Aqara Camera Hub G3&lt;/a&gt; (both EU and CN versions).&lt;/p&gt; &#xA;&lt;h4&gt;Source: Bubble&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1&#34;&gt;New in v1.6.1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other names: &lt;a href=&#34;http://www.eseecloud.com/&#34;&gt;ESeeCloud&lt;/a&gt;, &lt;a href=&#34;http://help.dvr163.com/&#34;&gt;dvr163&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt; and &lt;code&gt;stream&lt;/code&gt; if they are default&lt;/li&gt; &#xA; &lt;li&gt;setup separate streams for different channels and streams&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  camera1: bubble://username:password@192.168.1.123:34567/bubble/live?ch=0&amp;amp;stream=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: DVRIP&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0&#34;&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other names: DVR-IP, NetSurveillance, Sofia protocol (NETsurveillance ActiveX plugin XMeye SDK).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;channel&lt;/code&gt; and &lt;code&gt;subtype&lt;/code&gt; if they are default&lt;/li&gt; &#xA; &lt;li&gt;setup separate streams for different channels&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;subtype=0&lt;/code&gt; for Main stream, and &lt;code&gt;subtype=1&lt;/code&gt; for Extra1 stream&lt;/li&gt; &#xA; &lt;li&gt;only the TCP protocol is supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  only_stream: dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0&#xA;  only_tts: dvrip://username:password@192.168.1.123:34567?backchannel=1&#xA;  two_way_audio:&#xA;    - dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0&#xA;    - dvrip://username:password@192.168.1.123:34567?backchannel=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Tapo&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0&#34;&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tapo.com/&#34;&gt;TP-Link Tapo&lt;/a&gt; proprietary camera protocol with &lt;strong&gt;two way audio&lt;/strong&gt; support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;stream quality is the same as &lt;a href=&#34;https://www.tapo.com/en/faq/34/&#34;&gt;RTSP protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;use the &lt;strong&gt;cloud password&lt;/strong&gt;, this is not the RTSP password! you do not need to add a login!&lt;/li&gt; &#xA; &lt;li&gt;you can also use UPPERCASE MD5 hash from your cloud password with &lt;code&gt;admin&lt;/code&gt; username&lt;/li&gt; &#xA; &lt;li&gt;some new camera firmwares requires SHA256 instead of MD5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # cloud password without username&#xA;  camera1: tapo://cloud-password@192.168.1.123&#xA;  # admin username and UPPERCASE MD5 cloud-password hash&#xA;  camera2: tapo://admin:UPPERCASE-MD5@192.168.1.123&#xA;  # admin username and UPPERCASE SHA256 cloud-password hash&#xA;  camera3: tapo://admin:UPPERCASE-SHA256@192.168.1.123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo -n &#34;cloud password&#34; | md5 | awk &#39;{print toupper($0)}&#39;&#xA;echo -n &#34;cloud password&#34; | shasum -a 256 | awk &#39;{print toupper($0)}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Kasa&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0&#34;&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.kasasmart.com/&#34;&gt;TP-Link Kasa&lt;/a&gt; non-standard protocol &lt;a href=&#34;https://medium.com/@hu3vjeen/reverse-engineering-tp-link-kc100-bac4641bf1cd&#34;&gt;more info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;username&lt;/code&gt; - urlsafe email, &lt;code&gt;alex@gmail.com&lt;/code&gt; -&amp;gt; &lt;code&gt;alex%40gmail.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password&lt;/code&gt; - base64password, &lt;code&gt;secret1&lt;/code&gt; -&amp;gt; &lt;code&gt;c2VjcmV0MQ==&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  kc401: kasa://username:password@192.168.1.123:19443/https/stream/mixed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tested: KD110, KC200, KC401, KC420WS, EC71.&lt;/p&gt; &#xA;&lt;h4&gt;Source: GoPro&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.3&#34;&gt;New in v1.8.3&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support streaming from &lt;a href=&#34;https://gopro.com/&#34;&gt;GoPro&lt;/a&gt; cameras, connected via USB or Wi-Fi to Linux, Mac, Windows. &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/tree/master/internal/gopro&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Source: Ivideon&lt;/h4&gt; &#xA;&lt;p&gt;Support public cameras from service &lt;a href=&#34;https://tv.ivideon.com/&#34;&gt;Ivideon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  quailcam: ivideon:100-tu5dkUPct39cTp9oNEN2B6/0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Hass&lt;/h4&gt; &#xA;&lt;p&gt;Support import camera links from &lt;a href=&#34;https://www.home-assistant.io/&#34;&gt;Home Assistant&lt;/a&gt; config files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/generic/&#34;&gt;Generic Camera&lt;/a&gt;, setup via GUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/homekit_controller/&#34;&gt;HomeKit Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/onvif/&#34;&gt;ONVIF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/humbertogontijo/homeassistant-roborock&#34;&gt;Roborock&lt;/a&gt; vacuums with camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hass:&#xA;  config: &#34;/config&#34;  # skip this setting if you Hass Add-on user&#xA;&#xA;streams:&#xA;  generic_camera: hass:Camera1  # Settings &amp;gt; Integrations &amp;gt; Integration Name&#xA;  aqara_g3: hass:Camera-Hub-G3-AB12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WebRTC Cameras&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0&#34;&gt;v1.6.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Any cameras in WebRTC format are supported. But at the moment Home Assistant only supports some &lt;a href=&#34;https://www.home-assistant.io/integrations/nest/&#34;&gt;Nest&lt;/a&gt; cameras in this fomat.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; The Nest API only allows you to get a link to a stream for 5 minutes. Do not use this with Frigate! If the stream expires, Frigate will consume all available ram on your machine within seconds. It&#39;s recommended to use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest&#34;&gt;Nest source&lt;/a&gt; - it supports extending the stream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # link to Home Assistant Supervised&#xA;  hass-webrtc1: hass://supervisor?entity_id=camera.nest_doorbell&#xA;  # link to external Hass with Long-Lived Access Tokens&#xA;  hass-webrtc2: hass://192.168.1.123:8123?entity_id=camera.nest_doorbell&amp;amp;token=eyXYZ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;RTSP Cameras&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the Home Assistant API does not allow you to get dynamic RTSP link to a camera stream. So more cameras, like &lt;a href=&#34;https://www.home-assistant.io/integrations/tuya/&#34;&gt;Tuya&lt;/a&gt;, and possibly others can also be imported by using &lt;a href=&#34;https://github.com/felipecrs/hass-expose-camera-stream-source#importing-home-assistant-cameras-to-go2rtc-andor-frigate&#34;&gt;this method&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Source: ISAPI&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source type support only backchannel audio for Hikvision ISAPI protocol. So it should be used as second source in addition to the RTSP protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  hikvision1:&#xA;    - rtsp://admin:password@192.168.1.123:554/Streaming/Channels/101&#xA;    - isapi://admin:password@192.168.1.123:80/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Nest&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0&#34;&gt;New in v1.6.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently only WebRTC cameras are supported.&lt;/p&gt; &#xA;&lt;p&gt;For simplicity, it is recommended to connect the Nest/WebRTC camera to the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;Home Assistant&lt;/a&gt;. But if you can somehow get the below parameters - Nest/WebRTC source will work without Hass.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  nest-doorbell: nest:?client_id=***&amp;amp;client_secret=***&amp;amp;refresh_token=***&amp;amp;project_id=***&amp;amp;device_id=***&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Roborock&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source type support Roborock vacuums with cameras. Known working models:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Roborock S6 MaxV - only video (the vacuum has no microphone)&lt;/li&gt; &#xA; &lt;li&gt;Roborock S7 MaxV - video and two way audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Source support load Roborock credentials from Home Assistant &lt;a href=&#34;https://github.com/humbertogontijo/homeassistant-roborock&#34;&gt;custom integration&lt;/a&gt;. Otherwise, you need to log in to your Roborock account (MiHome account is not supported). Go to: go2rtc WebUI &amp;gt; Add webpage. Copy &lt;code&gt;roborock://...&lt;/code&gt; source for your vacuum and paste it to &lt;code&gt;go2rtc.yaml&lt;/code&gt; config.&lt;/p&gt; &#xA;&lt;p&gt;If you have graphic pin for your vacuum - add it as numeric pin (lines: 123, 456, 678) to the end of the roborock-link.&lt;/p&gt; &#xA;&lt;h4&gt;Source: WebRTC&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source type support four connection formats.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;whep&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-murillo-whep/&#34;&gt;WebRTC/WHEP&lt;/a&gt; - is replaced by &lt;a href=&#34;https://datatracker.ietf.org/doc/charter-ietf-wish/02/&#34;&gt;WebRTC/WISH&lt;/a&gt; standard for WebRTC video/audio viewers. But it may already be supported in some third-party software. It is supported in go2rtc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This format is only supported in go2rtc. Unlike WHEP it supports asynchronous WebRTC connection and two way audio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;openipc&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0&#34;&gt;v1.7.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Support connection to &lt;a href=&#34;https://openipc.org/&#34;&gt;OpenIPC&lt;/a&gt; cameras.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;wyze&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1&#34;&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Supports connection to &lt;a href=&#34;https://www.wyze.com/&#34;&gt;Wyze&lt;/a&gt; cameras, using WebRTC protocol. You can use &lt;a href=&#34;https://github.com/mrlt8/docker-wyze-bridge&#34;&gt;docker-wyze-bridge&lt;/a&gt; project to get connection credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;kinesis&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1&#34;&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Supports &lt;a href=&#34;https://aws.amazon.com/kinesis/video-streams/&#34;&gt;Amazon Kinesis Video Streams&lt;/a&gt;, using WebRTC protocol. You need to specify signalling WebSocket URL with all credentials in query params, &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;ice_servers&lt;/code&gt; list in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer&#34;&gt;JSON format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  webrtc-whep:    webrtc:http://192.168.1.123:1984/api/webrtc?src=camera1&#xA;  webrtc-go2rtc:  webrtc:ws://192.168.1.123:1984/api/ws?src=camera1&#xA;  webrtc-openipc: webrtc:ws://192.168.1.123/webrtc_ws#format=openipc#ice_servers=[{&#34;urls&#34;:&#34;stun:stun.kinesisvideo.eu-north-1.amazonaws.com:443&#34;}]&#xA;  webrtc-wyze:    webrtc:http://192.168.1.123:5000/signaling/camera1?kvs#format=wyze&#xA;  webrtc-kinesis: webrtc:wss://...amazonaws.com/?...#format=kinesis#client_id=...#ice_servers=[{...},{...}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; For &lt;code&gt;kinesis&lt;/code&gt; sources you can use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;echo&lt;/a&gt; to get connection params using &lt;code&gt;bash&lt;/code&gt;/&lt;code&gt;python&lt;/code&gt; or any other script language.&lt;/p&gt; &#xA;&lt;h4&gt;Source: WebTorrent&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source can get a stream from another go2rtc via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent&#34;&gt;WebTorrent&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  webtorrent1: webtorrent:?share=huofssuxaty00izc&amp;amp;pwd=k3l2j9djeg8v8r7e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Incoming sources&lt;/h4&gt; &#xA;&lt;p&gt;By default, go2rtc establishes a connection to the source when any client requests it. Go2rtc drops the connection to the source when it has no clients left.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go2rtc also can accepts incoming sources in &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp&#34;&gt;RTMP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;HTTP&lt;/a&gt; and &lt;strong&gt;WebRTC/WHIP&lt;/strong&gt; formats&lt;/li&gt; &#xA; &lt;li&gt;Go2rtc won&#39;t stop such a source if it has no clients&lt;/li&gt; &#xA; &lt;li&gt;You can push data only to existing stream (create stream with empty source in config)&lt;/li&gt; &#xA; &lt;li&gt;You can push multiple incoming sources to same stream&lt;/li&gt; &#xA; &lt;li&gt;You can push data to non empty stream, so it will have additional codecs inside&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTSP with any codec &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://localhost:8554/camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTTP-MJPEG with MJPEG codec &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c mjpeg -f mpjpeg http://localhost:1984/api/stream.mjpeg?dst=camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTTP-FLV with H264, AAC codecs &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f flv http://localhost:1984/api/stream.flv?dst=camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;MPEG-TS with H264 codec &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f mpegts http://localhost:1984/api/stream.ts?dst=camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Incoming: Browser&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can turn the browser of any PC or mobile into an IP-camera with support video and two way audio. Or even broadcast your PC screen:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create empty stream in the &lt;code&gt;go2rtc.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to go2rtc WebUI&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;links&lt;/code&gt; page for you stream&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;camera+microphone&lt;/code&gt; or &lt;code&gt;display+speaker&lt;/code&gt; option&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;webrtc&lt;/code&gt; local page (your go2rtc &lt;strong&gt;should work over HTTPS!&lt;/strong&gt;) or &lt;code&gt;share link&lt;/code&gt; via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent&#34;&gt;WebTorrent&lt;/a&gt; technology (work over HTTPS by default)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Incoming: WebRTC/WHIP&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;strong&gt;OBS Studio&lt;/strong&gt; or any other broadcast software with &lt;a href=&#34;https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html&#34;&gt;WHIP&lt;/a&gt; protocol support. This standard has not yet been approved. But you can download OBS Studio &lt;a href=&#34;https://github.com/obsproject/obs-studio/actions/runs/3969201209&#34;&gt;dev version&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Settings &amp;gt; Stream &amp;gt; Service: WHIP &amp;gt; &lt;a href=&#34;http://192.168.1.123:1984/api/webrtc?dst=camera1&#34;&gt;http://192.168.1.123:1984/api/webrtc?dst=camera1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Stream to camera&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;go2rtc support play audio files (ex. music or &lt;a href=&#34;https://www.home-assistant.io/integrations/#text-to-speech&#34;&gt;TTS&lt;/a&gt;) and live streams (ex. radio) on cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;two way audio&lt;/a&gt; support (RTSP/ONVIF cameras, TP-Link Tapo, Hikvision ISAPI, Roborock vacuums, any Browser).&lt;/p&gt; &#xA;&lt;p&gt;API example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?dst=camera1&amp;amp;src=ffmpeg:http://example.com/song.mp3#audio=pcma#input=file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can stream: local files, web files, live streams or any format, supported by FFmpeg&lt;/li&gt; &#xA; &lt;li&gt;you should use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg source&lt;/a&gt; for transcoding audio to codec, that your camera supports&lt;/li&gt; &#xA; &lt;li&gt;you can check camera codecs on the go2rtc WebUI info page when the stream is active&lt;/li&gt; &#xA; &lt;li&gt;some cameras support only low quality &lt;code&gt;PCMA/8000&lt;/code&gt; codec (ex. &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;Tapo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;it is recommended to choose higher quality formats if your camera supports them (ex. &lt;code&gt;PCMA/48000&lt;/code&gt; for some Dahua cameras)&lt;/li&gt; &#xA; &lt;li&gt;if you play files over http-link, you need to add &lt;code&gt;#input=file&lt;/code&gt; params for transcoding, so file will be transcoded and played in real time&lt;/li&gt; &#xA; &lt;li&gt;if you play live streams, you should skip &lt;code&gt;#input&lt;/code&gt; param, because it is already in real time&lt;/li&gt; &#xA; &lt;li&gt;you can stop active playback by calling the API with the empty &lt;code&gt;src&lt;/code&gt; parameter&lt;/li&gt; &#xA; &lt;li&gt;you will see one active producer and one active consumer in go2rtc WebUI info page during streaming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Publish stream&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0&#34;&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can publish any stream to streaming services (YouTube, Telegram, etc.) via RTMP/RTMPS. Important:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported codecs: H264 for video and AAC for audio&lt;/li&gt; &#xA; &lt;li&gt;AAC audio is required for YouTube, videos without audio will not work&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need to enable &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp&#34;&gt;RTMP module&lt;/a&gt; listening for this task&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?src=camera1&amp;amp;dst=rtmps://...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:&#xA;  # publish stream &#34;video_audio_transcode&#34; to Telegram&#xA;  video_audio_transcode:&#xA;    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx&#xA;  # publish stream &#34;audio_transcode&#34; to Telegram and YouTube&#xA;  audio_transcode:&#xA;    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx&#xA;    - rtmp://xxx.rtmp.youtube.com/live2/xxxx-xxxx-xxxx-xxxx-xxxx&#xA;&#xA;streams:&#xA;  video_audio_transcode:&#xA;    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=h264#hardware#audio=aac&#xA;  audio_transcode:&#xA;    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=copy#audio=aac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram Desktop App&lt;/strong&gt; &amp;gt; Any public or private channel or group (where you admin) &amp;gt; Live stream &amp;gt; Start with... &amp;gt; Start streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt; &amp;gt; Create &amp;gt; Go live &amp;gt; Stream latency: Ultra low-latency &amp;gt; Copy: Stream URL + Stream key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module: API&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP API is the main part for interacting with the application. Default address: &lt;code&gt;http://localhost:1984/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; go2rtc passes requests from localhost and from unix socket without HTTP authorisation, even if you have it configured! It is your responsibility to set up secure external access to API. If not properly configured, an attacker can gain access to your cameras and even your server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/tree/master/api&#34;&gt;API description&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can disable HTTP API with &lt;code&gt;listen: &#34;&#34;&lt;/code&gt; and use, for example, only RTSP client/server protocol&lt;/li&gt; &#xA; &lt;li&gt;you can enable HTTP API only on localhost with &lt;code&gt;listen: &#34;127.0.0.1:1984&#34;&lt;/code&gt; setting&lt;/li&gt; &#xA; &lt;li&gt;you can change API &lt;code&gt;base_path&lt;/code&gt; and host go2rtc on your main app webserver suburl&lt;/li&gt; &#xA; &lt;li&gt;all files from &lt;code&gt;static_dir&lt;/code&gt; hosted on root path: &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;you can use raw TLS cert/key content or path to files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api:&#xA;  listen: &#34;:1984&#34;    # default &#34;:1984&#34;, HTTP API port (&#34;&#34; - disabled)&#xA;  username: &#34;admin&#34;  # default &#34;&#34;, Basic auth for WebUI&#xA;  password: &#34;pass&#34;   # default &#34;&#34;, Basic auth for WebUI&#xA;  base_path: &#34;/rtc&#34;  # default &#34;&#34;, API prefix for serve on suburl (/api =&amp;gt; /rtc/api)&#xA;  static_dir: &#34;www&#34;  # default &#34;&#34;, folder for static files (custom web interface)&#xA;  origin: &#34;*&#34;        # default &#34;&#34;, allow CORS requests (only * supported)&#xA;  tls_listen: &#34;:443&#34; # default &#34;&#34;, enable HTTPS server&#xA;  tls_cert: |        # default &#34;&#34;, PEM-encoded fullchain certificate for HTTPS&#xA;    -----BEGIN CERTIFICATE-----&#xA;    ...&#xA;    -----END CERTIFICATE-----&#xA;  tls_key: |         # default &#34;&#34;, PEM-encoded private key for HTTPS&#xA;    -----BEGIN PRIVATE KEY-----&#xA;    ...&#xA;    -----END PRIVATE KEY-----&#xA;  unix_listen: &#34;/tmp/go2rtc.sock&#34;  # default &#34;&#34;, unix socket listener for API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MJPEG over WebSocket plays better than native MJPEG because Chrome &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=527446&#34;&gt;bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MP4 over WebSocket was created only for Apple iOS because it doesn&#39;t support MSE and native MP4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module: RTSP&lt;/h3&gt; &#xA;&lt;p&gt;You can get any stream as RTSP-stream: &lt;code&gt;rtsp://192.168.1.123:8554/{stream_name}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can enable external password protection for your RTSP streams. Password protection always disabled for localhost calls (ex. FFmpeg or Hass on same server).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;rtsp:&#xA;  listen: &#34;:8554&#34;    # RTSP Server TCP port, default - 8554&#xA;  username: &#34;admin&#34;  # optional, default - disabled&#xA;  password: &#34;pass&#34;   # optional, default - disabled&#xA;  default_query: &#34;video&amp;amp;audio&#34;  # optional, default codecs filters &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default go2rtc provide RTSP-stream with only one first video and only one first audio. You can change it with the &lt;code&gt;default_query&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;mp4&#34;&lt;/code&gt; - MP4 compatible codecs (H264, H265, AAC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;video=all&amp;amp;audio=all&#34;&lt;/code&gt; - all tracks from all source (not all players can handle this)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;video=h264,h265&#34;&lt;/code&gt; - only one video track (H264 or H265)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;video&amp;amp;audio=all&#34;&lt;/code&gt; - only one first any video and all audio as separate tracks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Module: RTMP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0&#34;&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can get any stream as RTMP-stream: &lt;code&gt;rtmp://192.168.1.123/{stream_name}&lt;/code&gt;. Only H264/AAC codecs supported right now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources&#34;&gt;Incoming stream&lt;/a&gt; in RTMP-format tested only with &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS Studio&lt;/a&gt; and Dahua camera. Different FFmpeg versions has differnt problems with this format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;rtmp:&#xA;  listen: &#34;:1935&#34;  # by default - disabled!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module: WebRTC&lt;/h3&gt; &#xA;&lt;p&gt;In most cases &lt;a href=&#34;https://en.wikipedia.org/wiki/WebRTC&#34;&gt;WebRTC&lt;/a&gt; uses direct peer-to-peer connection from your browser to go2rtc and sends media data via UDP. It &lt;strong&gt;can&#39;t pass&lt;/strong&gt; media data through your Nginx or Cloudflare or &lt;a href=&#34;https://www.nabucasa.com/&#34;&gt;Nabu Casa&lt;/a&gt; HTTP TCP connection! It can automatically detects your external IP via public &lt;a href=&#34;https://en.wikipedia.org/wiki/STUN&#34;&gt;STUN&lt;/a&gt; server. It can establish a external direct connection via &lt;a href=&#34;https://en.wikipedia.org/wiki/UDP_hole_punching&#34;&gt;UDP hole punching&lt;/a&gt; technology even if you not open your server to the World.&lt;/p&gt; &#xA;&lt;p&gt;But about 10-20% of users may need to configure additional settings for external access if &lt;strong&gt;mobile phone&lt;/strong&gt; or &lt;strong&gt;go2rtc server&lt;/strong&gt; behing &lt;a href=&#34;https://tomchen.github.io/symmetric-nat-test/&#34;&gt;Symmetric NAT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by default, WebRTC uses both TCP and UDP on port 8555 for connections&lt;/li&gt; &#xA; &lt;li&gt;you can use this port for external access&lt;/li&gt; &#xA; &lt;li&gt;you can change the port in YAML config:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  listen: &#34;:8555&#34;  # address of your local server and port (TCP/UDP)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Static public IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;forward the port 8555 on your router (you can use same 8555 port or any other as external port)&lt;/li&gt; &#xA; &lt;li&gt;add your external IP-address and external port to YAML config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  candidates:&#xA;    - 216.58.210.174:8555  # if you have static public IP-address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dynamic public IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;forward the port 8555 on your router (you can use same 8555 port or any other as the external port)&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;stun&lt;/code&gt; word and external port to YAML config &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;go2rtc automatically detects your external address with STUN-server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  candidates:&#xA;    - stun:8555  # if you have dynamic public IP-address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Private IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setup integration with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok service&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ngrok:&#xA;  command: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hard tech way 1. Own TCP-tunnel&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have personal &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_private_server&#34;&gt;VPS&lt;/a&gt;, you can create TCP-tunnel and setup in the same way as &#34;Static public IP&#34;. But use your VPS IP-address in YAML config.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hard tech way 2. Using TURN-server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have personal &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_private_server&#34;&gt;VPS&lt;/a&gt;, you can install TURN server (e.g. &lt;a href=&#34;https://github.com/coturn/coturn&#34;&gt;coturn&lt;/a&gt;, config &lt;a href=&#34;https://github.com/AlexxIT/WebRTC/wiki/Coturn-Example&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  ice_servers:&#xA;    - urls: [stun:stun.l.google.com:19302]&#xA;    - urls: [turn:123.123.123.123:3478]&#xA;      username: your_user&#xA;      credential: your_pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module: HomeKit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0&#34;&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;HomeKit module can work in two modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;export any H264 camera to Apple HomeKit&lt;/li&gt; &#xA; &lt;li&gt;transparent proxy any Apple HomeKit camera (Aqara, Eve, Eufy, etc.) back to Apple HomeKit, so you will have all camera features in Apple Home and also will have RTSP/WebRTC/MP4/etc. from your HomeKit camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HomeKit cameras supports only H264 video and OPUS audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Minimal config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua1: rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&#xA;homekit:&#xA;  dahua1:  # same stream ID from streams list, default PIN - 19550224&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua1:&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&#xA;    - ffmpeg:dahua1#video=h264#hardware  # if your camera doesn&#39;t support H264, important for HomeKit&#xA;    - ffmpeg:dahua1#audio=opus           # only OPUS audio supported by HomeKit&#xA;&#xA;homekit:&#xA;  dahua1:                   # same stream ID from streams list&#xA;    pin: 12345678           # custom PIN, default: 19550224&#xA;    name: Dahua camera      # custom camera name, default: generated from stream ID&#xA;    device_id: dahua1       # custom ID, default: generated from stream ID&#xA;    device_private: dahua1  # custom key, default: generated from stream ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Proxy HomeKit camera&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Video stream from HomeKit camera to Apple device (iPhone, AppleTV) will be transmitted directly&lt;/li&gt; &#xA; &lt;li&gt;Video stream from HomeKit camera to RTSP/WebRTC/MP4/etc. will be transmitted via go2rtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  aqara1:&#xA;    - homekit://...&#xA;    - ffmpeg:aqara1#audio=aac#audio=opus  # optional audio transcoding&#xA;&#xA;homekit:&#xA;  aqara1:  # same stream ID from streams list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module: WebTorrent&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This module support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Share any local stream via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; &#xA; &lt;li&gt;Get any &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser&#34;&gt;incoming stream&lt;/a&gt; from PC or mobile via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; &#xA; &lt;li&gt;Get any remote &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent&#34;&gt;go2rtc source&lt;/a&gt; via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Securely and free. You do not need to open a public access to the go2rtc server. But in some cases (Symmetric NAT) you may need to set up external access to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate sharing link or incoming link - goto go2rtc WebUI (stream links page). This link is &lt;strong&gt;temporary&lt;/strong&gt; and will stop working after go2rtc is restarted!&lt;/p&gt; &#xA;&lt;p&gt;You can create permanent external links in go2rtc config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webtorrent:&#xA;  shares:&#xA;    super-secret-share:  # share name, should be unique among all go2rtc users!&#xA;      pwd: super-secret-password&#xA;      src: rtsp-dahua1   # stream name from streams section&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Link example: &lt;a href=&#34;https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio&#34;&gt;https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TODO: article how it works...&lt;/p&gt; &#xA;&lt;h3&gt;Module: ngrok&lt;/h3&gt; &#xA;&lt;p&gt;With ngrok integration you can get external access to your streams in situations when you have Internet with private IP-address.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ngrok is pre-installed for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users&lt;/li&gt; &#xA; &lt;li&gt;you may need external access for two different things: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WebRTC stream, so you need tunnel WebRTC TCP port (ex. 8555)&lt;/li&gt; &#xA;   &lt;li&gt;go2rtc web interface, so you need tunnel API HTTP port (ex. 1984)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ngrok support authorization for your web interface&lt;/li&gt; &#xA; &lt;li&gt;ngrok automatically adds HTTPS to your web interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ngrok free subscription has the following limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can reserve a free domain for serving the web interface, but the TCP address you get will always be random and change with each restart of the ngrok agent (not a problem for webrtc stream)&lt;/li&gt; &#xA; &lt;li&gt;You can forward multiple ports from a single agent, but you can only run one ngrok agent on the free plan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;go2rtc will automatically get your external TCP address (if you enable it in ngrok config) and use it with WebRTC connection (if you enable it in webrtc config).&lt;/p&gt; &#xA;&lt;p&gt;You need to manually download the &lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok agent app&lt;/a&gt; for your OS and register with the &lt;a href=&#34;https://ngrok.com/signup&#34;&gt;ngrok service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tunnel for only WebRTC Stream&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to add your &lt;a href=&#34;https://dashboard.ngrok.com/get-started/your-authtoken&#34;&gt;ngrok authtoken&lt;/a&gt; and WebRTC TCP port to YAML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ngrok:&#xA;  command: ngrok tcp 8555 --authtoken eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tunnel for WebRTC and Web interface&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to create &lt;code&gt;ngrok.yaml&lt;/code&gt; config file and add it to go2rtc config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ngrok:&#xA;  command: ngrok start --all --config ngrok.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ngrok config example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;2&#34;&#xA;authtoken: eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw&#xA;tunnels:&#xA;  api:&#xA;    addr: 1984  # use the same port as in go2rtc config&#xA;    proto: http&#xA;    basic_auth:&#xA;      - admin:password  # you can set login/pass for your web interface&#xA;  webrtc:&#xA;    addr: 8555  # use the same port as in go2rtc config&#xA;    proto: tcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ngrok.com/docs/agent/config/&#34;&gt;ngrok agent documentation&lt;/a&gt; for more details on the ngrok configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Module: Hass&lt;/h3&gt; &#xA;&lt;p&gt;The best and easiest way to use go2rtc inside the Home Assistant is to install the custom integration &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration&#34;&gt;WebRTC Camera&lt;/a&gt; and custom lovelace card.&lt;/p&gt; &#xA;&lt;p&gt;But go2rtc is also compatible and can be used with &lt;a href=&#34;https://www.home-assistant.io/integrations/rtsp_to_webrtc/&#34;&gt;RTSPtoWebRTC&lt;/a&gt; built-in integration.&lt;/p&gt; &#xA;&lt;p&gt;You have several options on how to add a camera to Home Assistant:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Camera RTSP source =&amp;gt; &lt;a href=&#34;https://www.home-assistant.io/integrations/generic/&#34;&gt;Generic Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Camera &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;any source&lt;/a&gt; =&amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;go2rtc config&lt;/a&gt; =&amp;gt; &lt;a href=&#34;https://www.home-assistant.io/integrations/generic/&#34;&gt;Generic Camera&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install any &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start&#34;&gt;go2rtc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add your stream to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;go2rtc config&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=onvif&#34;&gt;ONVIF&lt;/a&gt; &amp;gt; Host: &lt;code&gt;127.0.0.1&lt;/code&gt;, Port: &lt;code&gt;1984&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=generic&#34;&gt;Generic Camera&lt;/a&gt; &amp;gt; Stream Source URL: &lt;code&gt;rtsp://127.0.0.1:8554/camera1&lt;/code&gt; (change to your stream name, leave everything else as is)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You have several options on how to watch the stream from the cameras in Home Assistant:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;HLS&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC&lt;/code&gt;, poor latency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;a href=&#34;https://www.home-assistant.io/integrations/rtsp_to_webrtc/&#34;&gt;RTSPtoWebRTC&lt;/a&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;WebRTC&lt;/code&gt;, codecs: &lt;code&gt;H264/PCMU/PCMA/OPUS&lt;/code&gt;, best latency. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install any &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start&#34;&gt;go2rtc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=rtsp_to_webrtc&#34;&gt;RTSPtoWebRTC&lt;/a&gt; &amp;gt; &lt;code&gt;http://127.0.0.1:1984/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;RTSPtoWebRTC &amp;gt; Configure &amp;gt; STUN server: &lt;code&gt;stun.l.google.com:19302&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use Picture Entity or Picture Glance lovelace card&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; or &lt;code&gt;Camera URL&lt;/code&gt; =&amp;gt; &lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; =&amp;gt; Technology: &lt;code&gt;WebRTC/MSE/MP4/MJPEG&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC/PCMU/PCMA/OPUS&lt;/code&gt;, best latency, best compatibility. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install and add &lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; custom integration&lt;/li&gt; &#xA;   &lt;li&gt;Use WebRTC Camera custom lovelace card&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can add camera &lt;code&gt;entity_id&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;go2rtc config&lt;/a&gt; if you need transcoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  &#34;camera.hall&#34;: ffmpeg:{input}#video=copy#audio=opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Default Home Assistant lovelace cards don&#39;t support 2-way audio. You can use 2-way audio from &lt;a href=&#34;https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons&#34;&gt;Add-on Web UI&lt;/a&gt;. But you need use HTTPS to access the microphone. This is a browser restriction and cannot be avoided.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; There is also another nice card with go2rtc support - &lt;a href=&#34;https://github.com/dermotduffy/frigate-hass-card&#34;&gt;Frigate Lovelace Card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Module: MP4&lt;/h3&gt; &#xA;&lt;p&gt;Provides several features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MSE stream (fMP4 over WebSocket)&lt;/li&gt; &#xA; &lt;li&gt;Camera snapshots in MP4 format (single frame), can be sent to &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP progressive streaming (MP4 file stream) - bad format for streaming because of high start delay. This format doesn&#39;t work in all Safari browsers, but go2rtc will automatically redirect it to HLS/fMP4 it this case.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;API examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MP4 snapshot: &lt;code&gt;http://192.168.1.123:1984/api/frame.mp4?src=camera1&lt;/code&gt; (H264, H265)&lt;/li&gt; &#xA; &lt;li&gt;MP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; &#xA; &lt;li&gt;MP4 file: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265*, AAC, OPUS, MP3, PCMA, PCMU, PCM) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;mp4&lt;/code&gt;, &lt;code&gt;mp4=flac&lt;/code&gt; and &lt;code&gt;mp4=all&lt;/code&gt; param for codec filters&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;duration&lt;/code&gt; param in seconds (ex. &lt;code&gt;duration=15&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;filename&lt;/code&gt; param (ex. &lt;code&gt;filename=record.mp4&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt; or &lt;code&gt;270&lt;/code&gt; values&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;scale&lt;/code&gt; param with positive integer values (ex. &lt;code&gt;scale=4:3&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Rotate and scale params don&#39;t use transcoding and change video using metadata.&lt;/p&gt; &#xA;&lt;h3&gt;Module: HLS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.1.0&#34;&gt;New in v1.1.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Live_Streaming&#34;&gt;HLS&lt;/a&gt; is the worst technology for real-time streaming. It can only be useful on devices that do not support more modern technology, like &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;MSE/MP4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The go2rtc implementation differs from the standards and may not work with all players.&lt;/p&gt; &#xA;&lt;p&gt;API examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HLS/TS stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&lt;/code&gt; (H264)&lt;/li&gt; &#xA; &lt;li&gt;HLS/fMP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Module: MJPEG&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; For stream as MJPEG format, your source MUST contain the MJPEG codec. If your stream has a MJPEG codec - you can receive &lt;strong&gt;MJPEG stream&lt;/strong&gt; or &lt;strong&gt;JPEG snapshots&lt;/strong&gt; via API.&lt;/p&gt; &#xA;&lt;p&gt;You can receive an MJPEG stream in several ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;some cameras support MJPEG codec inside &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;RTSP stream&lt;/a&gt; (ex. second stream for Dahua cameras)&lt;/li&gt; &#xA; &lt;li&gt;some cameras has HTTP link with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;some cameras has HTTP link with snapshots - go2rtc can convert them to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;you can convert H264/H265 stream from your camera via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg integraion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this example, your stream will have both H264 and MJPEG codecs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  camera1:&#xA;    - rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0&#xA;    - ffmpeg:camera1#video=mjpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;API examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MJPEG stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mjpeg?src=camera1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JPEG snapshots: &lt;code&gt;http://192.168.1.123:1984/api/frame.jpeg?src=camera1&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt;/&lt;code&gt;h&lt;/code&gt; params&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;hardware&lt;/code&gt;/&lt;code&gt;hw&lt;/code&gt; param &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration&#34;&gt;read more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; This module also supports streaming to the server console (terminal) in the &lt;strong&gt;animated ASCII art&lt;/strong&gt; format (&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/internal/mjpeg/README.md&#34;&gt;read more&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sHj_3h_sX7M&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/sHj_3h_sX7M/mqdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Module: Log&lt;/h3&gt; &#xA;&lt;p&gt;You can set different log levels for different modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;log:&#xA;  level: info  # default level&#xA;  api: trace&#xA;  exec: debug&#xA;  ngrok: info&#xA;  rtsp: warn&#xA;  streams: error&#xA;  webrtc: fatal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;By default &lt;code&gt;go2rtc&lt;/code&gt; starts the Web interface on port &lt;code&gt;1984&lt;/code&gt; and RTSP on port &lt;code&gt;8554&lt;/code&gt;, as well as use port &lt;code&gt;8555&lt;/code&gt; for WebRTC connections. The three ports are accessible from your local network. So anyone on your local network can watch video from your cameras without authorization. The same rule applies to the Home Assistant Add-on.&lt;/p&gt; &#xA;&lt;p&gt;This is not a problem if you trust your local network as much as I do. But you can change this behaviour with a &lt;code&gt;go2rtc.yaml&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api:&#xA;  listen: &#34;127.0.0.1:1984&#34; # localhost&#xA;&#xA;rtsp:&#xA;  listen: &#34;127.0.0.1:8554&#34; # localhost&#xA;&#xA;webrtc:&#xA;  listen: &#34;:8555&#34; # external TCP/UDP port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;local access to RTSP is not a problem for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt; integration, because it runs locally on your server&lt;/li&gt; &#xA; &lt;li&gt;local access to API is not a problem for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;Home Assistant Add-on&lt;/a&gt;, because Hass runs locally on same server and Add-on Web UI protected with Hass authorization (&lt;a href=&#34;https://www.home-assistant.io/blog/2019/04/15/hassio-ingress/&#34;&gt;Ingress feature&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;external access to WebRTC TCP port is not a problem, because it used only for transmit encrypted media data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;anyway you need to open this port to your local network and to the Internet in order for WebRTC to work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need Web interface protection without Home Assistant Add-on - you need to use reverse proxy, like &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;, &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt;, &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;PS. Additionally WebRTC will try to use the 8555 UDP port for transmit encrypted media. It works without problems on the local network. And sometimes also works for external access, even if you haven&#39;t opened this port on your router (&lt;a href=&#34;https://en.wikipedia.org/wiki/UDP_hole_punching&#34;&gt;read more&lt;/a&gt;). But for stable external WebRTC access, you need to open the 8555 port on your router for both TCP and UDP.&lt;/p&gt; &#xA;&lt;h2&gt;Codecs filters&lt;/h2&gt; &#xA;&lt;p&gt;go2rtc can automatically detect which codecs your device supports for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;MSE&lt;/a&gt; technologies.&lt;/p&gt; &#xA;&lt;p&gt;But it cannot be done for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;HTTP progressive streaming&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;HLS&lt;/a&gt; technologies. You can manually add a codec filter when you create a link to a stream. The filters work the same for all three technologies. Filters do not create a new codec. They only select the suitable codec from existing sources. You can add new codecs to the stream using the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg transcoding&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Without filters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTSP will provide only the first video and only the first audio (any codec)&lt;/li&gt; &#xA; &lt;li&gt;MP4 will include only compatible codecs (H264, H265, AAC)&lt;/li&gt; &#xA; &lt;li&gt;HLS will output in the legacy TS format (H264 without audio)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?mp4&lt;/code&gt; - useful for recording as MP4 files (e.g. Hass or Frigate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264,h265&amp;amp;audio=aac&lt;/code&gt; - full version of the filter above&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264&amp;amp;audio=aac&amp;amp;audio=opus&lt;/code&gt; - H264 video codec and two separate audio tracks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video&amp;amp;audio=all&lt;/code&gt; - any video codec and all audio codecs as separate tracks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; - HLS stream with MP4 compatible codecs (HLS/fMP4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - HLS stream with PCMA/PCMU/PCM audio support (HLS/fMP4), won&#39;t work on old devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - MP4 file with PCMA/PCMU/PCM audio support, won&#39;t work on old devices (ex. iOS 12)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=all&lt;/code&gt; - MP4 file with non standard audio codecs, won&#39;t work on some players&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Codecs madness&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AVC/H.264&lt;/code&gt; video can be played almost anywhere. But &lt;code&gt;HEVC/H.265&lt;/code&gt; has a lot of limitations in supporting with different devices and browsers. It&#39;s all about patents and money, you can&#39;t do anything about it.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Device&lt;/th&gt; &#xA;   &lt;th&gt;WebRTC&lt;/th&gt; &#xA;   &lt;th&gt;MSE&lt;/th&gt; &#xA;   &lt;th&gt;HTTP*&lt;/th&gt; &#xA;   &lt;th&gt;HLS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;latency&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;best&lt;/td&gt; &#xA;   &lt;td&gt;medium&lt;/td&gt; &#xA;   &lt;td&gt;bad&lt;/td&gt; &#xA;   &lt;td&gt;bad&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;- Desktop Chrome 107+ &lt;br&gt; - Desktop Edge &lt;br&gt; - Android Chrome 107+&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS, MP3&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Desktop Firefox&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;- Desktop Safari 14+ &lt;br&gt; - iPad Safari 14+ &lt;br&gt; - iPhone Safari 17.1+&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iPhone Safari 14+&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS &lt;a href=&#34;https://apps.apple.com/app/home-assistant/id1099568401&#34;&gt;Hass App&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;HTTP*&lt;/code&gt; - HTTP Progressive Streaming, not related with &lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_download&#34;&gt;Progressive download&lt;/a&gt;, because the file has no size and no end&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome H265: &lt;a href=&#34;https://chromestatus.com/feature/5186511939567616&#34;&gt;read this&lt;/a&gt; and &lt;a href=&#34;https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding&#34;&gt;read this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edge H265: &lt;a href=&#34;https://www.reddit.com/r/MicrosoftEdge/comments/v9iw8k/enable_hevc_support_in_edge/&#34;&gt;read this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Desktop Safari H265: Menu &amp;gt; Develop &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; &#xA; &lt;li&gt;iOS Safari H265: Settings &amp;gt; Safari &amp;gt; Advanced &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go2rtc support &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#built-in-transcoding&#34;&gt;automatic repack&lt;/a&gt; &lt;code&gt;PCMA/PCMU/PCM&lt;/code&gt; codecs to &lt;code&gt;FLAC&lt;/code&gt; for MSE/MP4/HLS so they will work almost anywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebRTC&lt;/strong&gt; audio codecs: &lt;code&gt;PCMU/8000&lt;/code&gt;, &lt;code&gt;PCMA/8000&lt;/code&gt;, &lt;code&gt;OPUS/48000/2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPUS&lt;/code&gt; and &lt;code&gt;MP3&lt;/code&gt; inside &lt;strong&gt;MP4&lt;/strong&gt; is part of the standard, but some players do not support them anyway (especially Apple)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apple devices&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all Apple devices don&#39;t support HTTP progressive streaming&lt;/li&gt; &#xA; &lt;li&gt;iPhones don&#39;t support MSE technology because it competes with the HTTP Live Streaming (HLS) technology, invented by Apple&lt;/li&gt; &#xA; &lt;li&gt;HLS is the worst technology for &lt;strong&gt;live&lt;/strong&gt; streaming, it still exists only because of iPhones&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Codec names&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;H264 = H.264 = AVC (Advanced Video Coding)&lt;/li&gt; &#xA; &lt;li&gt;H265 = H.265 = HEVC (High Efficiency Video Coding)&lt;/li&gt; &#xA; &lt;li&gt;PCMA = G.711 PCM (A-law) = PCM A-law (&lt;code&gt;alaw&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PCMU = G.711 PCM (µ-law) = PCM mu-law (&lt;code&gt;mulaw&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PCM = L16 = PCM signed 16-bit big-endian (&lt;code&gt;s16be&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;AAC = MPEG4-GENERIC&lt;/li&gt; &#xA; &lt;li&gt;MP3 = MPEG-1 Audio Layer III or MPEG-2 Audio Layer III&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built-in transcoding&lt;/h2&gt; &#xA;&lt;p&gt;There are no plans to embed complex transcoding algorithms inside go2rtc. &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg source&lt;/a&gt; does a great job with this. Including &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration&#34;&gt;hardware acceleration&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;p&gt;But go2rtc has some simple algorithms. They are turned on automatically, you do not need to set them up additionally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PCM for MSE/MP4/HLS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go2rtc can pack &lt;code&gt;PCMA&lt;/code&gt;, &lt;code&gt;PCMU&lt;/code&gt; and &lt;code&gt;PCM&lt;/code&gt; codecs into an MP4 container so that they work in all browsers and all built-in players on modern devices. Including Apple QuickTime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PCMA/PCMU =&amp;gt; PCM =&amp;gt; FLAC =&amp;gt; MSE/MP4/HLS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Resample PCMA/PCMU for WebRTC&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default WebRTC support only &lt;code&gt;PCMA/8000&lt;/code&gt; and &lt;code&gt;PCMU/8000&lt;/code&gt;. But go2rtc can automatically resample PCMA and PCMU codec with with a different sample rate. Also go2rtc can transcode &lt;code&gt;PCM&lt;/code&gt; codec to &lt;code&gt;PCMA/8000&lt;/code&gt;, so WebRTC can play it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PCM/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC&#xA;PCMA/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC&#xA;PCMU/xxx =&amp;gt; PCMU/8000 =&amp;gt; WebRTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FLAC codec not supported in a RTSP stream. If you using Frigate or Hass for recording MP4 files with PCMA/PCMU/PCM audio - you should setup transcoding to AAC codec.&lt;/li&gt; &#xA; &lt;li&gt;PCMA and PCMU are VERY low quality codecs. Them support only 256! different sounds. Use them only when you have no other options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Codecs negotiation&lt;/h2&gt; &#xA;&lt;p&gt;For example, you want to watch RTSP-stream from &lt;a href=&#34;https://www.dahuasecurity.com/fr/products/All-Products/Network-Cameras/Wireless-Series/Wi-Fi-Series/4MP/IPC-K42&#34;&gt;Dahua IPC-K42&lt;/a&gt; camera in your Chrome browser.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;this camera support 2-way audio standard &lt;strong&gt;ONVIF Profile T&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;this camera support codecs &lt;strong&gt;H264, H265&lt;/strong&gt; for send video, and you select &lt;code&gt;H264&lt;/code&gt; in camera settings&lt;/li&gt; &#xA; &lt;li&gt;this camera support codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for send audio (from mic), and you select &lt;code&gt;AAC/16000&lt;/code&gt; in camera settings&lt;/li&gt; &#xA; &lt;li&gt;this camera support codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for receive audio (to speaker), you don&#39;t need to select them&lt;/li&gt; &#xA; &lt;li&gt;your browser support codecs &lt;strong&gt;H264, VP8, VP9, AV1&lt;/strong&gt; for receive video, you don&#39;t need to select them&lt;/li&gt; &#xA; &lt;li&gt;your browser support codecs &lt;strong&gt;OPUS, PCMU, PCMA&lt;/strong&gt; for send and receive audio, you don&#39;t need to select them&lt;/li&gt; &#xA; &lt;li&gt;you can&#39;t get camera audio directly, because its audio codecs doesn&#39;t match with your browser codecs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;so you decide to use transcoding via FFmpeg and add this setting to config YAML file&lt;/li&gt; &#xA;   &lt;li&gt;you have chosen &lt;code&gt;OPUS/48000/2&lt;/code&gt; codec, because it is higher quality than the &lt;code&gt;PCMU/8000&lt;/code&gt; or &lt;code&gt;PCMA/8000&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you have stream with two sources - &lt;strong&gt;RTSP and FFmpeg&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua:&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif&#xA;    - ffmpeg:rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0#audio=opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; automatically match codecs for you browser and all your stream sources. This called &lt;strong&gt;multi-source 2-way codecs negotiation&lt;/strong&gt;. And this is one of the main features of this app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/codecs.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; You can select &lt;code&gt;PCMU&lt;/code&gt; or &lt;code&gt;PCMA&lt;/code&gt; codec in camera setting and don&#39;t use transcoding at all. Or you can select &lt;code&gt;AAC&lt;/code&gt; codec for main stream and &lt;code&gt;PCMU&lt;/code&gt; codec for second stream and add both RTSP to YAML config, this also will work fine.&lt;/p&gt; &#xA;&lt;h2&gt;Projects using go2rtc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://frigate.video/&#34;&gt;Frigate 12+&lt;/a&gt; - open source NVR built around real-time AI object detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dermotduffy/frigate-hass-card&#34;&gt;Frigate Lovelace Card&lt;/a&gt; - custom card for Home Assistant&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenIPC/firmware/tree/master/general/package/go2rtc&#34;&gt;OpenIPC&lt;/a&gt; - Alternative IP Camera firmware from an open community&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gtxaspec/wz_mini_hacks&#34;&gt;wz_mini_hacks&lt;/a&gt; - Custom firmware for Wyze cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oischinger/eufyp2pstream&#34;&gt;EufyP2PStream&lt;/a&gt; - A small project that provides a Video/Audio Stream from Eufy cameras that don&#39;t directly support RTSP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bropat/ioBroker.eusec&#34;&gt;ioBroker.euSec&lt;/a&gt; - &lt;a href=&#34;https://www.iobroker.net/&#34;&gt;ioBroker&lt;/a&gt; adapter for control Eufy security devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Anonym-tsk/MMM-go2rtc&#34;&gt;MMM-go2rtc&lt;/a&gt; - MagicMirror² Module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tsightler/ring-mqtt&#34;&gt;ring-mqtt&lt;/a&gt; - Ring devices to MQTT Bridge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Distributions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=go2rtc&#34;&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linux-packages.com/aur/package/go2rtc&#34;&gt;Arch User Repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inode64/inode64-overlay/tree/main/media-video/go2rtc&#34;&gt;Gentoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://search.nixos.org/packages?query=go2rtc&#34;&gt;NixOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tteck.github.io/Proxmox/&#34;&gt;Proxmox Helper Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myqnap.org/product/go2rtc/&#34;&gt;QNAP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://synocommunity.com/package/go2rtc&#34;&gt;Synology NAS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unraid.net/community/apps?q=go2rtc&#34;&gt;Unraid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cameras experience&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dahuasecurity.com/&#34;&gt;Dahua&lt;/a&gt; - reference implementation streaming protocols, a lot of settings, high stream quality, multiple streaming clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ezviz.com/&#34;&gt;EZVIZ&lt;/a&gt; - awful RTSP protocol realisation, many bugs in SDP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hikvision.com/&#34;&gt;Hikvision&lt;/a&gt; - a lot of proprietary streaming technologies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reolink.com/&#34;&gt;Reolink&lt;/a&gt; - some models has awful unusable RTSP realisation and not best RTMP alternative (I recommend that you contact Reolink support for new firmware), few settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sonoff.tech/&#34;&gt;Sonoff&lt;/a&gt; - very low stream quality, no settings, not best protocol implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tp-link.com/&#34;&gt;TP-Link&lt;/a&gt; - few streaming clients, packet loss?&lt;/li&gt; &#xA; &lt;li&gt;Chinese cheap noname cameras, Wyze Cams, Xiaomi cameras with hacks (usual has &lt;code&gt;/live/ch00_1&lt;/code&gt; in RTSP URL) - awful but usable RTSP protocol realisation, low stream quality, few settings, packet loss?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TIPS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using apps for low RTSP delay&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ffplay -fflags nobuffer -flags low_delay &#34;rtsp://192.168.1.123:8554/camera1&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;VLC &amp;gt; Preferences &amp;gt; Input / Codecs &amp;gt; Default Caching Level: Lowest Latency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Snapshots to Telegram&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. What&#39;s the difference between go2rtc, WebRTC Camera and RTSPtoWebRTC?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is a new version of the server-side &lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; integration, completely rewritten from scratch, with a number of fixes and a huge number of new features. It is compatible with native Home Assistant &lt;a href=&#34;https://www.home-assistant.io/integrations/rtsp_to_webrtc/&#34;&gt;RTSPtoWebRTC&lt;/a&gt; integration. So you &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;can use&lt;/a&gt; default lovelace Picture Entity or Picture Glance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. Should I use go2rtc addon or WebRTC Camera integration?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is more than just viewing your stream online with WebRTC/MSE/HLS/etc. You can use it all the time for your various tasks. But every time the Hass is rebooted - all integrations are also rebooted. So your streams may be interrupted if you use them in additional tasks.&lt;/p&gt; &#xA;&lt;p&gt;Basic users can use &lt;strong&gt;WebRTC Camera&lt;/strong&gt; integration. Advanced users can use go2rtc addon or Frigate 12+ addon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. Which RTSP link should I use inside Hass?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use direct link to your cameras there (as you always do). &lt;strong&gt;go2rtc&lt;/strong&gt; support zero-config feature. You may leave &lt;code&gt;streams&lt;/code&gt; config section empty. And your streams will be created on the fly on first start from Hass. And your cameras will have multiple connections. Some from Hass directly and one from &lt;strong&gt;go2rtc&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also you can specify your streams in &lt;strong&gt;go2rtc&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;config file&lt;/a&gt; and use RTSP links to this addon. With additional features: multi-source &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation&#34;&gt;codecs negotiation&lt;/a&gt; or FFmpeg &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;transcoding&lt;/a&gt; for unsupported codecs. Or use them as source for Frigate. And your cameras will have one connection from &lt;strong&gt;go2rtc&lt;/strong&gt;. And &lt;strong&gt;go2rtc&lt;/strong&gt; will have multiple connection - some from Hass via RTSP protocol, some from your browser via WebRTC/MSE/HLS protocols.&lt;/p&gt; &#xA;&lt;p&gt;Use any config what you like.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. What about lovelace card with support 2-way audio?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;At this moment I am focused on improving stability and adding new features to &lt;strong&gt;go2rtc&lt;/strong&gt;. Maybe someone could write such a card themselves. It&#39;s not difficult, I have &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/www/webrtc.html&#34;&gt;some sketches&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dromara/Sa-Token</title>
    <updated>2024-11-10T01:28:29Z</updated>
    <id>tag:github.com,2024-11-10:/dromara/Sa-Token</id>
    <link href="https://github.com/dromara/Sa-Token" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个轻量级 Java 权限认证框架，让鉴权变得简单、优雅！—— 登录认证、权限认证、分布式Session会话、微服务网关鉴权、单点登录、OAuth2.0&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;logo&#34; src=&#34;https://sa-token.cc/logo.png&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34; style=&#34;margin: 30px 0 30px; font-weight: bold;&#34;&gt;Sa-Token v1.39.0&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;一个轻量级 Java 权限认证框架，让鉴权变得简单、优雅！&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitee.com/dromara/sa-token/stargazers&#34;&gt;&lt;img src=&#34;https://gitee.com/dromara/sa-token/badge/star.svg?theme=gvp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/dromara/sa-token/members&#34;&gt;&lt;img src=&#34;https://gitee.com/dromara/sa-token/badge/fork.svg?theme=gvp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dromara/sa-token?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/dromara/sa-token?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/dromara/sa-token?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dromara/sa-token.svg?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dromara/sa-token/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dromara/sa-token.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- &lt;p align=&#34;center&#34;&gt;学习测试请拉取 master 分支，dev 是在开发分支 (在根目录执行 `git checkout master`)&lt;/p&gt; --&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://sa-token.cc&#34; target=&#34;_blank&#34;&gt;在线文档：https://sa-token.cc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Sa-Token 介绍&lt;/h3&gt; &#xA;&lt;p&gt;Sa-Token 是一个轻量级 Java 权限认证框架，目前拥有五大核心模块：登录认证、权限认证、单点登录、OAuth2.0、微服务鉴权。&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;简单示例展示：（点击展开 / 折叠）&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Sa-Token 旨在以简单、优雅的方式完成系统的权限认证部分，以登录认证为例，你只需要：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 会话登录，参数填登录人的账号id &#xA;StpUtil.login(10001);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;无需实现任何接口，无需创建任何配置文件，只需要这一句静态代码的调用，便可以完成会话登录认证。&lt;/p&gt; &#xA; &lt;p&gt;如果一个接口需要登录后才能访问，我们只需调用以下代码：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 校验当前客户端是否已经登录，如果未登录则抛出 `NotLoginException` 异常&#xA;StpUtil.checkLogin();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;在 Sa-Token 中，大多数功能都可以一行代码解决：&lt;/p&gt; &#xA; &lt;p&gt;踢人下线：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 将账号id为 10077 的会话踢下线 &#xA;StpUtil.kickout(10077);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;权限认证：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 注解鉴权：只有具备 `user:add` 权限的会话才可以进入方法&#xA;@SaCheckPermission(&#34;user:add&#34;)&#xA;public String insert(SysUser user) {&#xA;    // ... &#xA;    return &#34;用户增加&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;路由拦截鉴权：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 根据路由划分模块，不同模块不同鉴权 &#xA;registry.addInterceptor(new SaInterceptor(handler -&amp;gt; {&#xA;&#x9;SaRouter.match(&#34;/user/**&#34;, r -&amp;gt; StpUtil.checkPermission(&#34;user&#34;));&#xA;&#x9;SaRouter.match(&#34;/admin/**&#34;, r -&amp;gt; StpUtil.checkPermission(&#34;admin&#34;));&#xA;&#x9;SaRouter.match(&#34;/goods/**&#34;, r -&amp;gt; StpUtil.checkPermission(&#34;goods&#34;));&#xA;&#x9;SaRouter.match(&#34;/orders/**&#34;, r -&amp;gt; StpUtil.checkPermission(&#34;orders&#34;));&#xA;&#x9;SaRouter.match(&#34;/notice/**&#34;, r -&amp;gt; StpUtil.checkPermission(&#34;notice&#34;));&#xA;&#x9;// 更多模块... &#xA;})).addPathPatterns(&#34;/**&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;当你受够 Shiro、SpringSecurity 等框架的三拜九叩之后，你就会明白，相对于这些传统老牌框架，Sa-Token 的 API 设计是多么的简单、优雅！&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;核心模块一览：（点击展开 / 折叠）&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;登录认证&lt;/strong&gt; —— 单端登录、多端登录、同端互斥登录、七天内免登录。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;权限认证&lt;/strong&gt; —— 权限认证、角色认证、会话二级认证。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;踢人下线&lt;/strong&gt; —— 根据账号id踢人下线、根据Token值踢人下线。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;注解式鉴权&lt;/strong&gt; —— 优雅的将鉴权与业务代码分离。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;路由拦截式鉴权&lt;/strong&gt; —— 根据路由拦截鉴权，可适配 restful 模式。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Session会话&lt;/strong&gt; —— 全端共享Session,单端独享Session,自定义Session,方便的存取值。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;持久层扩展&lt;/strong&gt; —— 可集成 Redis，重启数据不丢失。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;前后台分离&lt;/strong&gt; —— APP、小程序等不支持 Cookie 的终端也可以轻松鉴权。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Token风格定制&lt;/strong&gt; —— 内置六种 Token 风格，还可：自定义 Token 生成策略。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;记住我模式&lt;/strong&gt; —— 适配 [记住我] 模式，重启浏览器免验证。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;二级认证&lt;/strong&gt; —— 在已登录的基础上再次认证，保证安全性。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;模拟他人账号&lt;/strong&gt; —— 实时操作任意用户状态数据。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;临时身份切换&lt;/strong&gt; —— 将会话身份临时切换为其它账号。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;同端互斥登录&lt;/strong&gt; —— 像QQ一样手机电脑同时在线，但是两个手机上互斥登录。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;账号封禁&lt;/strong&gt; —— 登录封禁、按照业务分类封禁、按照处罚阶梯封禁。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;密码加密&lt;/strong&gt; —— 提供基础加密算法，可快速 MD5、SHA1、SHA256、AES 加密。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;会话查询&lt;/strong&gt; —— 提供方便灵活的会话查询接口。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Http Basic认证&lt;/strong&gt; —— 一行代码接入 Http Basic、Digest 认证。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;全局侦听器&lt;/strong&gt; —— 在用户登陆、注销、被踢下线等关键性操作时进行一些AOP操作。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;全局过滤器&lt;/strong&gt; —— 方便的处理跨域，全局设置安全响应头等操作。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;多账号体系认证&lt;/strong&gt; —— 一个系统多套账号分开鉴权（比如商城的 User 表和 Admin 表）&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;单点登录&lt;/strong&gt; —— 内置三种单点登录模式：同域、跨域、同Redis、跨Redis、前后端分离等架构都可以搞定。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;单点注销&lt;/strong&gt; —— 任意子系统内发起注销，即可全端下线。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;OAuth2.0认证&lt;/strong&gt; —— 轻松搭建 OAuth2.0 服务，支持openid模式 。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;分布式会话&lt;/strong&gt; —— 提供共享数据中心分布式会话方案。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;微服务网关鉴权&lt;/strong&gt; —— 适配Gateway、ShenYu、Zuul等常见网关的路由拦截认证。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;RPC调用鉴权&lt;/strong&gt; —— 网关转发鉴权，RPC调用鉴权，让服务调用不再裸奔&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;临时Token认证&lt;/strong&gt; —— 解决短时间的 Token 授权问题。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;独立Redis&lt;/strong&gt; —— 将权限缓存与业务缓存分离。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Quick快速登录认证&lt;/strong&gt; —— 为项目零代码注入一个登录页面。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;标签方言&lt;/strong&gt; —— 提供 Thymeleaf 标签方言集成包，提供 beetl 集成示例。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;jwt集成&lt;/strong&gt; —— 提供三种模式的 jwt 集成方案，提供 token 扩展参数能力。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;RPC调用状态传递&lt;/strong&gt; —— 提供 dubbo、grpc 等集成包，在RPC调用时登录状态不丢失。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;参数签名&lt;/strong&gt; —— 提供跨系统API调用签名校验模块，防参数篡改，防请求重放。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;自动续签&lt;/strong&gt; —— 提供两种Token过期策略，灵活搭配使用，还可自动续签。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;开箱即用&lt;/strong&gt; —— 提供SpringMVC、WebFlux、Solon 等常见框架集成包，开箱即用。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;最新技术栈&lt;/strong&gt; —— 适配最新技术栈：支持 SpringBoot 3.x，jdk 17。&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://color-test.oss-cn-qingdao.aliyuncs.com/sa-token/x/sa-token-js4.png&#34; alt=&#34;sa-token-js&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SSO 单点登录&lt;/h3&gt; &#xA;&lt;p&gt;Sa-Token SSO 分为三种模式，解决同域、跨域、共享Redis、跨Redis、前后端一体、前后端分离……等不同架构下的 SSO 接入问题：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;系统架构&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;采用模式&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;简介&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;文档链接&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;前端同域 + 后端同 Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;模式一&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;共享Cookie同步会话&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sa-token.cc/doc.html#/sso/sso-type1&#34;&gt;文档&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso1-client&#34;&gt;示例&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;前端不同域 + 后端同 Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;模式二&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;URL重定向传播会话&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sa-token.cc/doc.html#/sso/sso-type2&#34;&gt;文档&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso2-client&#34;&gt;示例&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;前端不同域 + 后端 不同Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;模式三&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Http请求获取会话&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://sa-token.cc/doc.html#/sso/sso-type3&#34;&gt;文档&lt;/a&gt;、&lt;a href=&#34;https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso3-client&#34;&gt;示例&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;前端同域：就是指多个系统可以部署在同一个主域名之下，比如：&lt;code&gt;c1.domain.com&lt;/code&gt;、&lt;code&gt;c2.domain.com&lt;/code&gt;、&lt;code&gt;c3.domain.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;后端同Redis：就是指多个系统可以连接同一个Redis。（此处并非要所有项目数据都放在一个Redis中，Sa-Token提供 &lt;strong&gt;&lt;code&gt;[权限缓存与业务缓存分离]&lt;/code&gt;&lt;/strong&gt; 的解决方案）&lt;/li&gt; &#xA; &lt;li&gt;如果既无法做到前端同域，也无法做到后端同Redis，可以走模式三，Http请求校验 ticket 获取会话。&lt;/li&gt; &#xA; &lt;li&gt;提供 NoSdk 模式示例，不使用 Sa-Token 的系统也可以对接。&lt;/li&gt; &#xA; &lt;li&gt;提供 sso-server 接口文档，不使用 java 语言的系统也可以对接。&lt;/li&gt; &#xA; &lt;li&gt;提供前后端分离整合方案：无论是 sso-server 还是 sso-client 的前后端分离都可以整合。&lt;/li&gt; &#xA; &lt;li&gt;提供安全校验：域名校验、ticket校验、参数签名校验，有效防 ticket 劫持，防请求重放等攻击。&lt;/li&gt; &#xA; &lt;li&gt;参数防丢：笔者曾试验多个SSO框架，均有参数丢失情况，比如登录前是：&lt;code&gt;http://a.com?id=1&amp;amp;name=2&lt;/code&gt;，登录成功后就变成了：&lt;code&gt;http://a.com?id=1&lt;/code&gt;，Sa-Token-SSO 内有专门算法保证了参数不丢失，登录成功后精准原路返回。&lt;/li&gt; &#xA; &lt;li&gt;提供用户数据同步/迁移方案的建议：开发前统一迁移、运行时实时数据同步、根据关联字段匹配、根据 center_id 字段匹配等。&lt;/li&gt; &#xA; &lt;li&gt;提供直接可运行的 demo 示例，帮助你快速熟悉 SSO 大致登录流程。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;OAuth2 授权认证&lt;/h3&gt; &#xA;&lt;p&gt;Sa-Token-OAuth2 模块分为四种授权模式，解决不同场景下的授权需求&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;授权模式&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;简介&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;授权码（Authorization Code）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OAuth2.0 标准授权步骤，Server 端向 Client 端下放 Code 码，Client 端再用 Code 码换取授权 Token&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;隐藏式（Implicit）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;无法使用授权码模式时的备用选择，Server 端使用 URL 重定向方式直接将 Token 下放到 Client 端页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;密码式（Password）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client直接拿着用户的账号密码换取授权 Token&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;客户端凭证（Client Credentials）&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Server 端针对 Client 级别的 Token，代表应用自身的资源授权&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;详细参考文档：&lt;a href=&#34;https://sa-token.cc/doc.html#/oauth2/readme&#34;&gt;https://sa-token.cc/doc.html#/oauth2/readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;开源集成案例&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/xiaonuobase/snowy&#34;&gt;[ Snowy ]&lt;/a&gt;：国内首个国密前后分离快速开发平台，采用 Vue3 + AntDesignVue3 + Vite + SpringBoot + Mp + HuTool + SaToken。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/dromara/RuoYi-Vue-Plus&#34;&gt;[ RuoYi-Vue-Plus ]&lt;/a&gt;：重写RuoYi-Vue所有功能 集成 Sa-Token+Mybatis-Plus+Jackson+Xxl-Job+knife4j+Hutool+OSS 定期同步&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/lab1024/smart-admin&#34;&gt;[Smart-Admin]&lt;/a&gt;：SmartAdmin国内首个以「高质量代码」为核心，「简洁、高效、安全」中后台快速开发平台；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/dromara/lamp-cloud&#34;&gt;[ 灯灯 ]&lt;/a&gt;： 专注于多租户解决方案的微服务中后台快速开发平台。租户模式支持独立数据库(DATASOURCE模式)、共享数据架构(COLUMN模式) 和 非租户模式(NONE模式)✨&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/lakernote/easy-admin&#34;&gt;[ EasyAdmin ]&lt;/a&gt;：一个基于SpringBoot2 + Sa-Token + Mybatis-Plus + Snakerflow + Layui 的后台管理系统，灵活多变可前后端分离，也可单体，内置代码生成器、权限管理、工作流引擎等&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/wlf213/sa-admin-server&#34;&gt;[ sa-admin-server ]&lt;/a&gt;： 基于 sa-admin-ui 的后台管理开发脚手架。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;还有更多优秀开源案例无法逐一展示，请参考：&lt;a href=&#34;https://gitee.com/sa-token/awesome-sa-token&#34;&gt;Awesome-Sa-Token&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;友情链接&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/ejlchina-zhxu/okhttps&#34;&gt;[ OkHttps ]&lt;/a&gt;：轻量级 http 通信框架，API无比优雅，支持 WebSocket、Stomp 协议&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ejlchina/bean-searcher&#34;&gt;[ Bean Searcher ]&lt;/a&gt;：专注高级查询的只读 ORM，使一行代码实现复杂列表检索！&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/dromara/Jpom&#34;&gt;[ Jpom ]&lt;/a&gt;：简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/dromara/TLog&#34;&gt;[ TLog ]&lt;/a&gt;：一个轻量级的分布式日志标记追踪神器。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/agentart/hippo4j&#34;&gt;[ hippo4j ]&lt;/a&gt;：强大的动态线程池框架，附带监控报警功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/dromara/hertzbeat&#34;&gt;[ hertzbeat ]&lt;/a&gt;：易用友好的开源实时监控告警系统，无需Agent，高性能集群，强大自定义监控能力。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/noear/solon&#34;&gt;[ Solon ]&lt;/a&gt;：一个更现代感的应用开发框架：更快、更小、更自由。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chat2db/Chat2DB&#34;&gt;[ Chat2DB ]&lt;/a&gt;：一个AI驱动的数据库管理和BI工具，支持Mysql、pg、Oracle、Redis等22种数据库的管理。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;代码托管&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gitee：&lt;a href=&#34;https://gitee.com/dromara/sa-token&#34;&gt;https://gitee.com/dromara/sa-token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub：&lt;a href=&#34;https://github.com/dromara/sa-token&#34;&gt;https://github.com/dromara/sa-token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitCode：&lt;a href=&#34;https://gitcode.com/dromara/sa-token&#34;&gt;https://gitcode.com/dromara/sa-token&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;交流群&lt;/h3&gt; &#xA;&lt;!-- QQ交流群：685792424 [点击加入](http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=Y05Ld4125W92YSwZ0gA8e3RhG9Q4Vsfx&amp;authKey=IomXuIuhP9g8G7l%2ByfkrRsS7i%2Fna0lIBpkTXxx%2BQEaz0NNEyJq00kgeiC4dUyNLS&amp;noverify=0&amp;group_code=685792424)--&gt; &#xA;&lt;p&gt;QQ交流群：823181187 &lt;a href=&#34;https://qm.qq.com/q/EBIJVZBVGE&#34;&gt;点击加入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;微信交流群：&lt;/p&gt; &#xA;&lt;!-- &lt;img src=&#34;https://oss.dev33.cn/sa-token/qr/wx-qr-m-400k.png&#34; width=&#34;230px&#34; title=&#34;微信群&#34; /&gt; --&gt; &#xA;&lt;img src=&#34;https://oss.dev33.cn/sa-token/qr/i-wx-qr2.png&#34; width=&#34;230px&#34; title=&#34;微信群&#34;&gt; &#xA;&lt;p&gt;(扫码添加微信，备注：sa-token，邀您加入群聊)&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;加入群聊的好处：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;第一时间收到框架更新通知。&lt;/li&gt; &#xA; &lt;li&gt;第一时间收到框架 bug 通知。&lt;/li&gt; &#xA; &lt;li&gt;第一时间收到新增开源案例通知。&lt;/li&gt; &#xA; &lt;li&gt;和众多大佬一起互相 (huá shuǐ) 交流 (mō yú)。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>