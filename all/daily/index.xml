<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-15T01:32:49Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>camenduru/MusicGen-colab</title>
    <updated>2023-06-15T01:32:49Z</updated>
    <id>tag:github.com,2023-06-15:/camenduru/MusicGen-colab</id>
    <link href="https://github.com/camenduru/MusicGen-colab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;üê£ Please follow me for new updates &lt;a href=&#34;https://twitter.com/camenduru&#34;&gt;https://twitter.com/camenduru&lt;/a&gt; &lt;br&gt; üî• Please join our discord server &lt;a href=&#34;https://discord.gg/k5BwmmvJJU&#34;&gt;https://discord.gg/k5BwmmvJJU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü¶í Colab&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Colab&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/camenduru/MusicGen-colab/blob/main/MusicGen_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MusicGen_colab (max 120s melody, medium, small, large)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/camenduru/MusicGen-colab/blob/main/MusicGen_long_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MusicGen_long_colab (max 60s melody 300s medium, small, large)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/camenduru/MusicGen-colab/blob/main/MusicGen_rkfg_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MusicGen_rkfg_colab &lt;br&gt; (Thanks to @rkfg ‚ù§ &lt;a href=&#34;https://github.com/rkfg/audiocraft/tree/long&#34;&gt;https://github.com/rkfg/audiocraft/tree/long&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/camenduru/MusicGen-colab/blob/main/MusicGen_Oncorporation_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MusicGen_Oncorporation_colab &lt;br&gt; (Thanks to @Oncorporation ‚ù§ &lt;a href=&#34;https://github.com/Oncorporation/audiocraft&#34;&gt;https://github.com/Oncorporation/audiocraft&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/camenduru/MusicGen-colab/blob/main/MusicGen_author_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MusicGen_author_colab &lt;br&gt; (Thanks to @adefossez (author) ‚ù§ &lt;a href=&#34;https://github.com/facebookresearch/audiocraft&#34;&gt;https://github.com/facebookresearch/audiocraft&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/camenduru/MusicGen-colab/blob/main/MusicGen_ClownOfMadness_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MusicGen_ClownOfMadness_colab &lt;br&gt; (Thanks to @ClownOfMadness ‚ù§ &lt;a href=&#34;https://github.com/ClownOfMadness/audiocraft_plus/tree/bg&#34;&gt;https://github.com/ClownOfMadness/audiocraft_plus/tree/bg&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EGfxuTy9Eeo&#34;&gt;https://www.youtube.com/watch?v=EGfxuTy9Eeo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Some prompting info from @Duemellon&#xA;&#xA;But, here&#39;s a generality:&#xA;&#xA;120bpm - beats per minute. Typical dance songs are 120. Most ballads are 90-100. A real slow song is 70-85. 140+ is the kinda stuff for raves, techno, &amp;amp; dub&#xA;&#xA;320kbps 48khz - these ensure quality of the recordings, reducing hiss &amp;amp; usually expanding the sound range. These numbers are just rather high for an MP3 recording but not near the values of a raw audio recording. Don&#39;t apply this to sound that is supposed to be LOFI (like Lofi hip hop) because it undoes their intent : ) 22kbps quality should start sounding like you&#39;re listening to a song through a telephone or through a megaphone&#xA;&#xA;4/4, 3/4, 5/4, 2/4, etc -- This would have to get into a bit more about music theory that would be applicable here. Just know the majority of American pop songs (the huge VAST majority) is 4/4. Slow jams &amp;amp; waltz are 3/4 (ballads &amp;amp; such). 5/4 &amp;amp; others are more for non-US audiences that have a Spanish influence. 13/8, 11/8, 10/7, etc. &#34;weird&#34; numbers would be for jazz&#xA;&#xA;Have fun with that stuff!&#xA;&#xA;All together it looks like:&#xA;&#xA;* 4/4 100bpm 320kbps 48khz motown groove&#xA;* 3/4 105bpm 320kbps 48khz piano only baroque&#xA;* 110bpm 64kbps 16khz lofi hiphop summer smooth&#xA;&#xA;More info about Top-k, Top-p, Temperature and Classifier Free Guidance from ChatGPT&#xA;&#xA;Top-k: Top-k is a parameter used in text generation models, including music generation models. It determines the number of most likely next tokens to consider at each step of the generation process. The model ranks all possible tokens based on their predicted probabilities, and then selects the top-k tokens from the ranked list. The model then samples from this reduced set of tokens to determine the next token in the generated sequence. A smaller value of k results in a more focused and deterministic output, while a larger value of k allows for more diversity in the generated music.&#xA;&#xA;Top-p (or nucleus sampling): Top-p, also known as nucleus sampling or probabilistic sampling, is another method used for token selection during text generation. Instead of specifying a fixed number like top-k, top-p considers the cumulative probability distribution of the ranked tokens. It selects the smallest possible set of tokens whose cumulative probability exceeds a certain threshold (usually denoted as p). The model then samples from this set to choose the next token. This approach ensures that the generated output maintains a balance between diversity and coherence, as it allows for a varying number of tokens to be considered based on their probabilities.&#xA;&#xA;Temperature: Temperature is a parameter that controls the randomness of the generated output. It is applied during the sampling process, where a higher temperature value results in more random and diverse outputs, while a lower temperature value leads to more deterministic and focused outputs. In the context of music generation, a higher temperature can introduce more variability and creativity into the generated music, but it may also lead to less coherent or structured compositions. On the other hand, a lower temperature can produce more repetitive and predictable music.&#xA;&#xA;Classifier-Free Guidance: Classifier-Free Guidance refers to a technique used in some music generation models where a separate classifier network is trained to provide guidance or control over the generated music. This classifier is trained on labeled data to recognize specific musical characteristics or styles. During the generation process, the output of the generator model is evaluated by the classifier, and the generator is encouraged to produce music that aligns with the desired characteristics or style. This approach allows for more fine-grained control over the generated music, enabling users to specify certain attributes they want the model to capture.&#xA;&#xA;These parameters, such as top-k, top-p, temperature, and classifier-free guidance, provide different ways to influence the output of a music generation model and strike a balance between creativity, diversity, coherence, and control. The specific values for these parameters can be tuned based on the desired outcome and user preferences.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Main Repo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/facebookresearch/audiocraft&#34;&gt;https://github.com/facebookresearch/audiocraft&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Page&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ai.honu.io/papers/musicgen/&#34;&gt;https://ai.honu.io/papers/musicgen/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Paper&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2306.05284&#34;&gt;https://arxiv.org/abs/2306.05284&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/camenduru/MusicGen-colab/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/camenduru/MusicGen-colab/main/LICENSE_weights&#34;&gt;LICENSE_weights&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>isledecomp/isle</title>
    <updated>2023-06-15T01:32:49Z</updated>
    <id>tag:github.com,2023-06-15:/isledecomp/isle</id>
    <link href="https://github.com/isledecomp/isle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A work-in-progress decompilation of LEGO Island (1997)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LEGO Island Decompilation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbpl-gZkNl2COf_bB6cfgTapD5WduAfPz&#34;&gt;Development Vlog&lt;/a&gt; | &lt;a href=&#34;https://matrix.to/#/#isledecomp:matrix.org&#34;&gt;Matrix&lt;/a&gt; | &lt;a href=&#34;https://forum.mattkc.com/viewforum.php?f=1&#34;&gt;Forums&lt;/a&gt; | &lt;a href=&#34;https://www.patreon.com/mattkc&#34;&gt;Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;work-in-progress&lt;/strong&gt; decompilation of LEGO Island version 1.1. It aims to be relatively faithful, but not byte accurate. The goal is to provide a workable codebase that can be modified, improved, and ported to other platforms later on.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO: A progress bar showing the percentage progress of this decompilation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently &lt;code&gt;ISLE.EXE&lt;/code&gt; is completely decompiled, however there are some known inaccuracies. It should work if you pair it with the original game&#39;s &lt;code&gt;LEGO1.DLL&lt;/code&gt; (and other files), however small things may not work correctly yet. Work on decompiling &lt;code&gt;LEGO1.DLL&lt;/code&gt; has only just started and currently it is too incomplete to be usable.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;LEGO Island was compiled with Microsoft Visual C++ 4.20, so that&#39;s what this decompilation targets. However it should compile with NMAKE on newer versions of Visual Studio too.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended Instructions:&lt;/h3&gt; &#xA;&lt;p&gt;These instructions use the development IDE from Visual C++ 4.20. By modern standards, it can be a little clunky to use, especially on newer versions of Windows, however it&#39;s still relatively straightforward. If you prefer a command line process that can fit into a modern workflow/IDE, see the instructions below.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Microsoft Visual C++ 4.20. This can be found on many abandonware sites, but the installer can be a little iffy on modern versions of Windows. For convenience, I made a &lt;a href=&#34;https://github.com/itsmattkc/msvc420&#34;&gt;portable version&lt;/a&gt; that can be downloaded and used quickly instead.&lt;/li&gt; &#xA; &lt;li&gt;Download and install the DirectX 5 SDK. Similarly, this can be found on many abandonware sites.&lt;/li&gt; &#xA; &lt;li&gt;Open &#34;Microsoft Developer Studio&#34; (&lt;code&gt;BIN/MSDEV.EXE&lt;/code&gt; for those using the portable).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Open Workspace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;ISLE.MDP&lt;/code&gt; from this repository.&lt;/li&gt; &#xA; &lt;li&gt;Select a build configuration. &lt;code&gt;ISLE - Win32 Release&lt;/code&gt; is recommended because, at this point in time, you&#39;ll almost certainly be pairing it with the retail &lt;code&gt;LEGO1.DLL&lt;/code&gt;, which is also a release build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Build&lt;/code&gt; &amp;gt; &lt;code&gt;Build ISLE.EXE&lt;/code&gt;. This will build &lt;code&gt;ISLE.EXE&lt;/code&gt; in a folder called &lt;code&gt;Release&lt;/code&gt;. It will also build &lt;code&gt;LEGO1.DLL&lt;/code&gt; since it&#39;s listed as a dependency, however the &lt;code&gt;LEGO1.DLL&lt;/code&gt; produced is too incomplete to be usable at this time.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Command Line Instructions&lt;/h3&gt; &#xA;&lt;p&gt;For some users, this may be preferable to using an obsolete graphical IDE. Any modern IDE should support custom command line build steps, making this potentially easier to fit into a familiar contemporary workflow. This guide assumes a general familiarity with the Windows command prompt.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Acquire Visual Studio/Visual C++. Any version after 4.20 should work here, but 4.20 is the only one guaranteed to work. If you wish to use 4.20, it can be found on many abandonware sites, but the installer can be a little iffy on modern versions of Windows. For convenience, I made a &lt;a href=&#34;https://github.com/itsmattkc/msvc420&#34;&gt;portable version&lt;/a&gt; that can be downloaded and used quickly instead.&lt;/li&gt; &#xA; &lt;li&gt;Download and install the DirectX 5 SDK. Similarly, this can be found on many abandonware sites, but later versions of Visual Studio include the DirectX SDK by default, so this step may be skippable (you definitely need it for MSVC 4.20).&lt;/li&gt; &#xA; &lt;li&gt;Open an x86/32-bit developer command prompt. Depending on the version of VS you&#39;re using, you may have a start menu item for it already (e.g. &lt;code&gt;x86 Native Tools Command Prompt&lt;/code&gt;). Alternatively, you can start a normal command prompt (&lt;code&gt;cmd&lt;/code&gt;) and run &lt;code&gt;vcvars32.bat&lt;/code&gt; from the Visual Studio folder (run &lt;code&gt;BIN/VCVARS32.BAT x86&lt;/code&gt; if you&#39;re using the portable 4.20).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to the folder you cloned this repository to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mkdir Release&lt;/code&gt; if the folder doesn&#39;t already exist. Some versions of NMAKE may make this folder by itself, but some don&#39;t.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;nmake /f isle.mak CFG=&#34;ISLE - Win32 Release&#34;&lt;/code&gt;. This will build &lt;code&gt;ISLE.EXE&lt;/code&gt; in the &lt;code&gt;Release&lt;/code&gt; folder you just made. It will also build &lt;code&gt;LEGO1.DLL&lt;/code&gt; since it&#39;s listed as a dependency, however the &lt;code&gt;LEGO1.DLL&lt;/code&gt; produced is too incomplete to be usable at this time.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply place the compiled &lt;code&gt;ISLE.EXE&lt;/code&gt; into LEGO Island&#39;s install folder (usually &lt;code&gt;C:\Program Files\LEGO Island&lt;/code&gt; or &lt;code&gt;C:\Program Files (x86)\LEGO Island&lt;/code&gt;). Unless you&#39;re a developer, disregard the compiled &lt;code&gt;LEGO1.DLL&lt;/code&gt; for now as it is too incomplete to be usable. Alternatively, LEGO Island can run from any directory as long as &lt;code&gt;ISLE.EXE&lt;/code&gt; and &lt;code&gt;LEGO1.DLL&lt;/code&gt; are in the same directory, and the registry keys point to the correct location for the asset files.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, this decompilation should be paired with version 1.1. It may work on 1.0 too, however this is not guaranteed.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Information&lt;/h2&gt; &#xA;&lt;h3&gt;Which version of LEGO Island do I have?&lt;/h3&gt; &#xA;&lt;p&gt;Right click on &lt;code&gt;LEGO1.DLL&lt;/code&gt;, select &lt;code&gt;Properties&lt;/code&gt;, and switch to the &lt;code&gt;Details&lt;/code&gt; tab. Under &lt;code&gt;Version&lt;/code&gt; you should either see &lt;code&gt;1.0.0.0&lt;/code&gt; (1.0) or &lt;code&gt;1.1.0.0&lt;/code&gt; (1.1). Additionally, you can look at the game disc files; 1.0&#39;s files will all say August 8, 1997, and 1.1&#39;s files will all say September 8, 1997. Version 1.1 is by far the most common, especially if you&#39;re not using the English or Japanese versions, so that&#39;s most likely the version you have.&lt;/p&gt; &#xA;&lt;h3&gt;SmartHeap&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;ISLE.EXE&lt;/code&gt; and &lt;code&gt;LEGO1.DLL&lt;/code&gt; were originally statically linked with &lt;a href=&#34;http://www.microquill.com/smartheap/sh_tspec.htm&#34;&gt;SmartHeap&lt;/a&gt;, a drop-in replacement for malloc/free that presumably provides better heap memory management on the old low-memory (16MB) systems this game was designed for. Unfortunately, acquiring SmartHeap legally is expensive, and the chances of acquiring the exact same version used by Mindscape in the late 90s is very low. Since it&#39;s a drop-in binary-compatible replacement, this decomp can just stick with the standard malloc/free functions while still achieving matching assembly on a per-function level, however the resulting binaries will never be byte accurate as a result of this. If you notice significant size disparities, particularly in ISLE.EXE, the lack of statically linked SmartHeap libraries is why.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LemmyNet/lemmy-ui</title>
    <updated>2023-06-15T01:32:49Z</updated>
    <id>tag:github.com,2023-06-15:/LemmyNet/lemmy-ui</id>
    <link href="https://github.com/LemmyNet/lemmy-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official web app for lemmy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lemmy-UI&lt;/h1&gt; &#xA;&lt;p&gt;The official web app for &lt;a href=&#34;https://github.com/LemmyNet/lemmy&#34;&gt;Lemmy&lt;/a&gt;, written in inferno.&lt;/p&gt; &#xA;&lt;p&gt;Based off of MrFoxPro&#39;s &lt;a href=&#34;https://github.com/MrFoxPro/inferno-isomorphic-template&#34;&gt;inferno-isomorphic-template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The following environment variables can be used to configure lemmy-ui:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;ENV_VAR&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.0.0:1234&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The IP / port that the lemmy-ui isomorphic node server is hosted at.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_LEMMY_INTERNAL_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.0.0:8536&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The internal IP / port that lemmy is hosted at. Often &lt;code&gt;lemmy:8536&lt;/code&gt; if using docker.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_LEMMY_EXTERNAL_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.0.0:8536&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The external IP / port that lemmy is hosted at. Often &lt;code&gt;DOMAIN.TLD&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_HTTPS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to use https.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_EXTRA_THEMES_FOLDER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;./extra_themes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A location for additional lemmy css themes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loads the &lt;a href=&#34;https://github.com/liriliri/eruda&#34;&gt;Eruda&lt;/a&gt; debugging utility.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_DISABLE_CSP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables CSP security headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LEMMY_UI_CUSTOM_HTML_HEADER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Injects a custom script into &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>