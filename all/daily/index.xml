<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-08T01:28:38Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>project-baize/baize-chatbot</title>
    <updated>2023-04-08T01:28:38Z</updated>
    <id>tag:github.com,2023-04-08:/project-baize/baize-chatbot</id>
    <link href="https://github.com/project-baize/baize-chatbot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Let ChatGPT teach your own chatbot in hours with a single GPU!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500px&#34; alt=&#34;Project Baize&#34; src=&#34;https://user-images.githubusercontent.com/22514219/229195563-0cddfa74-e52f-4413-b4b4-e4ba489c4b3d.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://arxiv.org/abs/2304.01196&#34;&gt;[üìÑ Paper]&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/spaces/project-baize/Baize-7B&#34;&gt;[ü§ó Demo]&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What&#39;s Baize?&lt;/h2&gt; &#xA;&lt;p&gt;Baize is an open-source chat model trained with &lt;a href=&#34;https://github.com/microsoft/LoRA&#34;&gt;LoRA&lt;/a&gt;. It uses 100k dialogs generated by letting ChatGPT chat with itself. We also use Alpaca&#39;s data to improve its performance. We have released 7B, 13B and 30B models. Please refer to the &lt;a href=&#34;https://arxiv.org/pdf/2304.01196.pdf&#34;&gt;paper&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Why it&#39;s called Baize?&lt;/h2&gt; &#xA;&lt;p&gt;Baize (ÁôΩÊ≥Ω) is a mythical creature in Chinese folklore, who speaks human languages and knows everything. This is exactly what we expect from a chat model.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;‚ö†Ô∏è All model weights and data are for &lt;strong&gt;research use ONLY&lt;/strong&gt;. Commercial use is &lt;strong&gt;strictly prohibited&lt;/strong&gt;. We accept &lt;strong&gt;NO responsibility or liability&lt;/strong&gt; for any use of our data, code or weights.&lt;/p&gt; &#xA;&lt;p&gt;This is the repo for the Baize project, which aims to build a chat model with LLaMA. This repository contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;54K/57K/47K &lt;a href=&#34;https://raw.githubusercontent.com/project-baize/baize-chatbot/main/data&#34;&gt;dialogs&lt;/a&gt; from Quora, StackOverFlow and MedQuAD questions&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/project-baize/baize-chatbot/main/collect.py&#34;&gt;code&lt;/a&gt; for collecting self-chat data&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/project-baize/baize-chatbot/main/finetune.py&#34;&gt;code&lt;/a&gt; for training Baize&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/project-baize/baize-chatbot/main/demo/app.py&#34;&gt;code&lt;/a&gt; for chat model demo (forked from &lt;a href=&#34;https://github.com/GaiZhenbiao/ChuanhuChatGPT&#34;&gt;ChuanhuChatGPT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Model Release&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/project-baize/baize-lora-7B&#34;&gt;Baize-7B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/project-baize/baize-lora-13B&#34;&gt;Baize-13B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/project-baize/baize-lora-30B&#34;&gt;Baize-30B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/project-baize/baize-healthcare-lora-7b&#34;&gt;Baize Healthcare-7B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Baize Chinese-7B (Coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/project-baize/Baize-7B&#34;&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/badges/raw/main/open-in-hf-spaces-md.svg?sanitize=true&#34; alt=&#34;Open in Spaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/project-baize/Baize-7B?duplicate=true&#34;&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/badges/raw/main/duplicate-this-space-md.svg?sanitize=true&#34; alt=&#34;Duplicate this Space&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Demo&#34; src=&#34;https://user-images.githubusercontent.com/22514219/229863275-0e83c1cf-0661-4afa-9a47-1ce20fb521ae.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can either host it on your local machine or access the &lt;a href=&#34;https://huggingface.co/spaces/project-baize/Baize-7B&#34;&gt;online demo&lt;/a&gt;. The demo fetches the &lt;a href=&#34;https://huggingface.co/decapoda-research/llama-7b-hf&#34;&gt;LLaMA&lt;/a&gt; model and the &lt;a href=&#34;https://huggingface.co/project-baize/baize-lora-7B&#34;&gt;LoRA weights&lt;/a&gt; from the Hugging Face model hub, then runs a user-friendly Gradio interface for chatting.&lt;/p&gt; &#xA;&lt;h3&gt;How to Run Locally&lt;/h3&gt; &#xA;&lt;p&gt;First, make sure your Python version is 3.8, and then install the required packages using the command below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd demo&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can host the model on your local machine using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;base_model=decapoda-research/llama-7b-hf&#xA;lora_model=project-baize/baize-lora-7B&#xA;python app.py $base_model $lora_model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GPU VRAM Requirements&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Inference (without int8)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Baize-7B&lt;/td&gt; &#xA;   &lt;td&gt;16GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Baize-13B&lt;/td&gt; &#xA;   &lt;td&gt;28GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Baize-30B&lt;/td&gt; &#xA;   &lt;td&gt;67GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you have a GPU with smaller VRAM, you can do inference with &lt;code&gt;int8&lt;/code&gt;, following &lt;a href=&#34;https://github.com/project-baize/baize/issues/15&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Reproduce&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;If &lt;code&gt;bitsandbytes&lt;/code&gt; doesn&#39;t work, &lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes/raw/main/compile_from_source.md&#34;&gt;install it from source&lt;/a&gt;. Windows users can follow &lt;a href=&#34;https://github.com/tloen/alpaca-lora/issues/17&#34;&gt;these instructions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Data Collecting&lt;/h3&gt; &#xA;&lt;p&gt;You can use our &lt;a href=&#34;https://raw.githubusercontent.com/project-baize/baize-chatbot/main/data&#34;&gt;released data&lt;/a&gt; or collect the data from ChatGPT using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;num_process=10 # The number of processes to collect data&#xA;max_total_tokens=500000 # Set maximum numbers of tokens to collect data&#xA;api_key=xxxxxxxxxxxxxxxxx # Set your openai api key&#xA;for ((i=0; i&amp;lt;$num_process; i++))&#xA;do&#xA;    python collect.py $api_key $max_total_tokens $i $num_process stackoverflow &amp;amp;&#xA;    python collect.py $api_key $max_total_tokens $i $num_process quora &amp;amp;&#xA;    python collect.py $api_key $max_total_tokens $i $num_process medical &amp;amp;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After collecting data, you use the following command to preprocess data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python preprocess.py stackoverflow&#xA;python preprocess.py quora&#xA;python preprocess.py medical&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use your own data&lt;/h3&gt; &#xA;&lt;p&gt;If there&#39;s a specific dataset you want to use as seeds for ChatGPT self-chatting, you can simply modify &lt;code&gt;collect.py&lt;/code&gt; to load your own data.&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;The fine-tuning code is designed to run on an A100-80G GPU. The &lt;code&gt;finetune.py&lt;/code&gt; script accepts three parameters: foundation model size (i.e., 7B, 13B, or 30B), batch size, learning rate and datasets. Note the total batch size is fixed to 64 (can be modified &lt;a href=&#34;https://github.com/project-baize/baize/raw/cbcf39902fcdfab8d935b7ea771a4e7d452a1be0/finetune.py#L24&#34;&gt;here&lt;/a&gt;) and the batch size here is the per device batch size before gradient accumulation. Set it to a smaller value if you are training on a GPU with smaller VRAM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For the 7B model (takes about 9 hours)&#xA;python finetune.py 7b 32 0.0002 alpaca,stackoverflow,quora&#xA;&#xA;# For the 13B model (takes about 16 hours)&#xA;python finetune.py 13b 16 0.0001 alpaca,stackoverflow,quora&#xA;&#xA;# For the 30B model (takes about 36 hours)&#xA;python finetune.py 30b 8 0.00005 alpaca,stackoverflow,quora&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GPU VRAM Consumption&lt;/h4&gt; &#xA;&lt;p&gt;With the settings above:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Training (with int8)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Baize-7B&lt;/td&gt; &#xA;   &lt;td&gt;26GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Baize-13B&lt;/td&gt; &#xA;   &lt;td&gt;25GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Baize-30B&lt;/td&gt; &#xA;   &lt;td&gt;42GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Citation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{xu2023baize,&#xA;  title={Baize: An Open-Source Chat Model with Parameter-Efficient Tuning on Self-Chat Data},&#xA;  author={Xu, Canwen and Guo, Daya and Duan, Nan and McAuley, Julian},&#xA;  journal={arXiv preprint arXiv:2304.01196},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co&#34;&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/badges/raw/main/powered-by-huggingface-light.svg?sanitize=true&#34; alt=&#34;Share to Community&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Torantulino/AI-Functions</title>
    <updated>2023-04-08T01:28:38Z</updated>
    <id>tag:github.com,2023-04-08:/Torantulino/AI-Functions</id>
    <link href="https://github.com/Torantulino/AI-Functions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI-Powered Function Magic: Never code again with GPT models!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Functions ü§ñüë©‚Äçüíª&lt;/h1&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;function = &#34;def fake_people(n: int) -&amp;gt; list[dict]:&#34;&#xA;args = [&#34;4&#34;]&#xA;description_string = &#34;&#34;&#34;Generates n examples of fake data representing people, each with a name and an age.&#34;&#34;&#34;&#xA;&#xA;result = ai_functions.ai_function(function_string, args, description_string, model)&#xA;&#xA;&#34;&#34;&#34; Output: [&#xA;  {&#34;name&#34;: &#34;John Doe&#34;, &#34;age&#34;: 35},&#xA;  {&#34;name&#34;: &#34;Jane Smith&#34;, &#34;age&#34;: 28},&#xA;  {&#34;name&#34;: &#34;Alice Johnson&#34;, &#34;age&#34;: 42},&#xA;  {&#34;name&#34;: &#34;Bob Brown&#34;, &#34;age&#34;: 23}&#xA;]&#34;&#34;&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy-to-use implementation of AI functions using OpenAI&#39;s GPT-4 (or any other model version) to perform various tasks. This project is heavily inspired by &lt;a href=&#34;https://www.askmarvin.ai/&#34;&gt;Ask Marvin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/YourUsername/SuperSimpleAIFunctions.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install the required dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Obtain an &lt;a href=&#34;https://beta.openai.com/signup/&#34;&gt;OpenAI API key&lt;/a&gt; and store it in a &lt;code&gt;keys.py&lt;/code&gt; file in the same directory as the scripts or set it as an environment variable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;ai_functions.py&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ai_functions.py&lt;/code&gt; contains the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def ai_function(function, args, description, model=&#34;gpt-4&#34;):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ai_function&lt;/code&gt; takes the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;function&lt;/code&gt;: A string describing the function signature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;args&lt;/code&gt;: A list of arguments for the function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: A string describing the purpose of the function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: (Optional) A string specifying the GPT model to use. Default is &#39;gpt-4&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import ai_functions&#xA;&#xA;function = &#34;def add(a: int, b: int) -&amp;gt; int:&#34;&#xA;args = [&#34;5&#34;, &#34;7&#34;]&#xA;description = &#34;Adds two integers.&#34;&#xA;&#xA;result = ai_functions.ai_function(function, args, description)&#xA;print(result)  # Output: 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows the success rate of the AI functions with different GPT models:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4 Result&lt;/th&gt; &#xA;   &lt;th&gt;GPT-3.5-turbo Result&lt;/th&gt; &#xA;   &lt;th&gt;Reason&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generate fake people&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;Incorrect response format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generate Random Password&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;Incorrect response format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calculate area of triangle&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;Incorrect float value (GPT-4), Incorrect response format (GPT-3.5-turbo)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calculate the nth prime number&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Encrypt text&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Find missing numbers&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;It&#39;s important to note that AI Functions are not suited for certain tasks, particularly those involving mathematical calculations and precision. As observed in the case of calculating the area of a triangle and finding the nth prime number, GPT models can struggle with providing accurate results. The limitations of GPT models in such cases are mainly due to their inherent inability to perform precise arithmetic and the ambiguity in understanding user inputs.&lt;/p&gt; &#xA;&lt;p&gt;In conclusion, while AI Functions can be helpful in various scenarios, they may not be the optimal choice for tasks requiring mathematical accuracy or specific domain knowledge. For such use-cases, utilizing traditional algorithms and libraries would yield better results.&lt;/p&gt; &#xA;&lt;h3&gt;test_ai_functions.py&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;test_ai_functions.py&lt;/code&gt; contains test cases for the &lt;code&gt;ai_function&lt;/code&gt;. To run the tests, execute the script with Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python test_ai_functions.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test script will output the results of each test case and provide a success rate.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you would like to add more test cases or improve the existing code, please feel free to submit a pull request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>slint-ui/slint</title>
    <updated>2023-04-08T01:28:38Z</updated>
    <id>tag:github.com,2023-04-08:/slint-ui/slint</id>
    <link href="https://github.com/slint-ui/slint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display: embedded devices and desktop applications. We support multiple programming languages, such as Rust, C++, or JavaScript.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/logo/slint-logo-full-light.svg#gh-light-mode-only&#34; alt=&#34;Slint&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/logo/slint-logo-full-white.svg#gh-dark-mode-only&#34; alt=&#34;Slint&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- cSpell: ignore ChipTrack Moir√© Trolltech valign Woboq --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/slint-ui/slint/actions&#34;&gt;&lt;img src=&#34;https://github.com/slint-ui/slint/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.reuse.software/info/github.com/slint-ui/slint&#34;&gt;&lt;img src=&#34;https://api.reuse.software/badge/github.com/slint-ui/slint&#34; alt=&#34;REUSE status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/slint-ui/slint/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/slint-ui/slint&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display: embedded devices and desktop applications. We support multiple programming languages, such as Rust, C++, and JavaScript. We invite you to use Slint and be part of its community.&lt;/p&gt; &#xA;&lt;h2&gt;Design Goals&lt;/h2&gt; &#xA;&lt;p&gt;We use the following design goals as a guide when developing Slint:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Run on any screen connected to a device, from desktop computers to low end embedded systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: Fit into a few hundred kilobytes of RAM and require little processing power.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: Both developers and designers should feel productive and enjoy the design and development process. The APIs should be consistent and easy to use, no matter the target language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt;: Slint apps should match the users&#39; expectations of a native application. Various target platforms such as embedded devices, desktops, mobile and web should be supported so that both the user and the developer feel comfortable on their platform of choice.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The .slint Markup Language&lt;/h2&gt; &#xA;&lt;p&gt;Slint comes with a markup language that is specifically designed for user interfaces. This language is easy to learn, to read and write, and provides a powerful way to describe graphical elements, their placement, and the flow of data through the different states. It&#39;s a familiar syntax to describe the hierarchy of elements and property bindings.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the obligatory &#34;Hello World&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-slint&#34;&gt;export component HelloWorld inherits Window {&#xA;    width: 400px;&#xA;    height: 400px;&#xA;&#xA;    Text {&#xA;       y: parent.width / 2;&#xA;       x: parent.x + 200px;&#xA;       text: &#34;Hello, world&#34;;&#xA;       color: blue;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;p&gt;Slint is in active development. The state of the toolkit for each platform is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embedded&lt;/strong&gt;: &lt;em&gt;Ready&lt;/em&gt; Slint is already being used in production projects by customers (running on an Arm processor with Linux).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Microcontrollers&lt;/strong&gt; (MCU): &lt;em&gt;Ready&lt;/em&gt;. Slint apps can run on MCUs with less than 300K of RAM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Desktop&lt;/strong&gt;: &lt;em&gt;In Progress&lt;/em&gt;. While Slint is a good fit on Windows, Linux and Mac, we are working on improving the platform support in subsequent releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mobile&lt;/strong&gt; (Android/iOS): &lt;em&gt;Todo&lt;/em&gt;. We haven&#39;t started supporting mobile platforms yet, but it is our intention to do so in the near future.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;: &lt;em&gt;In Progress&lt;/em&gt;. Slint apps can be compiled to WebAssembly and can run in a web browser. As there are many other web frameworks, the web platform is not one of our primary target platforms. The web support is currently limited to demo purposes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Accessibility&lt;/h3&gt; &#xA;&lt;p&gt;Slint supports keyboard based navigation of many widgets, and user interfaces are scalable. The basic infrastructure for assistive technology like screen readers is in place, but currently requires the Qt backend. We&#39;re aware that more work is needed to get best-of-class support for users with special needs.&lt;/p&gt; &#xA;&lt;h3&gt;Stay up to date&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/slint_ui&#34;&gt;@slint-ui&lt;/a&gt; on Twitter or keep an eye out for our &lt;a href=&#34;https://slint-ui.com/thisweek/&#34;&gt;ü•† Weekly Status Updates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more details, check out the &lt;a href=&#34;https://slint-ui.com/docs/slint&#34;&gt;Slint Language Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/examples&#34;&gt;examples&lt;/a&gt; folder contains examples and demos, showing how to use the Slint markup language and how to interact with a Slint user interface from supported programming languages.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;docs&lt;/code&gt; folder contains a lot more information, including &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/docs/building.md&#34;&gt;build instructions&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/docs/development.md&#34;&gt;internal developer docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the README of each language directory in the &lt;code&gt;api&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/api/cpp&#34;&gt;C++&lt;/a&gt; (&lt;a href=&#34;https://slint-ui.com/docs/cpp&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://slint-ui.com/docs/tutorial/cpp&#34;&gt;Tutorial&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/_-Hxr6ZrHyo&#34;&gt;Tutorial Video&lt;/a&gt; | &lt;a href=&#34;https://github.com/slint-ui/slint-cpp-template&#34;&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/api/rs/slint&#34;&gt;Rust&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/slint&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/slint&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; (&lt;a href=&#34;https://slint-ui.com/docs/rust/slint/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://slint-ui.com/docs/tutorial/rust&#34;&gt;Tutorial&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/_-Hxr6ZrHyo&#34;&gt;Tutorial Video&lt;/a&gt; | &lt;a href=&#34;https://github.com/slint-ui/slint-rust-template&#34;&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/api/node&#34;&gt;JavaScript/NodeJS (Beta)&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/slint-ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/slint-ui&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; (&lt;a href=&#34;https://slint-ui.com/docs/node&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://slint-ui.com/docs/tutorial/node&#34;&gt;Tutorial&lt;/a&gt; | &lt;a href=&#34;https://github.com/slint-ui/slint-nodejs-template&#34;&gt;Getting Started Template&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;h3&gt;Embedded&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_BDbNHrjK7g&#34;&gt;Video of Slint on RaspberryPi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MCU&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;STM32&lt;/th&gt; &#xA;   &lt;th&gt;RP2040&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NNNOJJsOAis&#34;&gt;Video of Slint on STM32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dkBwNocItGs&#34;&gt;Video of Slint on RP2040&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;WebAssembly&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Printer Demo&lt;/th&gt; &#xA;   &lt;th&gt;Slide Puzzle&lt;/th&gt; &#xA;   &lt;th&gt;Energy Monitor&lt;/th&gt; &#xA;   &lt;th&gt;Widget Gallery&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://slint-ui.com/demos/printerdemo/&#34;&gt;&lt;img src=&#34;https://slint-ui.com/resources/printerdemo_screenshot.png&#34; alt=&#34;Screenshot of the Printer Demo&#34; title=&#34;Printer Demo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://slint-ui.com/demos/slide_puzzle/&#34;&gt;&lt;img src=&#34;https://slint-ui.com/resources/puzzle_screenshot.png&#34; alt=&#34;Screenshot of the Slide Puzzle&#34; title=&#34;Slide Puzzle&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://slint-ui.com/demos/energy-monitor/&#34;&gt;&lt;img src=&#34;https://slint-ui.com/resources/energy-monitor-screenshot.png&#34; alt=&#34;Screenshot of the Energy Monitor Demo&#34; title=&#34;Energy Monitor Demo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://slint-ui.com/demos/gallery/&#34;&gt;&lt;img src=&#34;https://slint-ui.com/resources/gallery_screenshot.png&#34; alt=&#34;Screenshot of the Gallery Demo&#34; title=&#34;Gallery Demo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Desktop Native Widgets&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://slint-ui.com/resources/gallery_win_screenshot.png&#34; alt=&#34;Screenshot of the Gallery on Windows&#34; title=&#34;Gallery&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://slint-ui.com/resources/gallery_mac_screenshot.png&#34; alt=&#34;Screenshot of the Gallery on macOS&#34; title=&#34;Gallery&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://slint-ui.com/resources/gallery_linux_screenshot.png&#34; alt=&#34;Screenshot of the Gallery on Linux&#34; title=&#34;Gallery&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;An application is composed of the business logic written in Rust, C++, or JavaScript and the &lt;code&gt;.slint&lt;/code&gt; user interface design markup, which is compiled to native code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://slint-ui.com/resources/architecture.drawio.svg?sanitize=true&#34; alt=&#34;Architecture Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compiler&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;.slint&lt;/code&gt; files are compiled ahead of time. The expressions in the &lt;code&gt;.slint&lt;/code&gt; are pure functions that the compiler can optimize. For example, the compiler could choose to &#34;inline&#34; properties and remove those that are constant or unchanged. In the future we hope to improve rendering time on low end devices by pre-processing images and text. The compiler could determine that a &lt;code&gt;Text&lt;/code&gt; or an &lt;code&gt;Image&lt;/code&gt; element is always on top of another &lt;code&gt;Image&lt;/code&gt; in the same location. Consequently both elements could be rendered ahead of time into a single element, thus cutting down on rendering time.&lt;/p&gt; &#xA;&lt;p&gt;The compiler uses the typical compiler phases of lexing, parsing, optimization, and finally code generation. It provides different back-ends for code generation in the target language. The C++ code generator produces a C++ header file, the Rust generator produces Rust code, and so on. An interpreter for dynamic languages is also included.&lt;/p&gt; &#xA;&lt;h3&gt;Runtime&lt;/h3&gt; &#xA;&lt;p&gt;The runtime library consists of an engine that supports properties declared in the &lt;code&gt;.slint&lt;/code&gt; language. Components with their elements, items, and properties are laid out in a single memory region, to reduce memory allocations.&lt;/p&gt; &#xA;&lt;p&gt;Rendering backends and styles are configurable at compile time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;femtovg&lt;/code&gt; renderer uses OpenGL ES 2.0 for rendering.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;skia&lt;/code&gt; renderer uses &lt;a href=&#34;https://skia.org&#34;&gt;Skia&lt;/a&gt; for rendering.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;software&lt;/code&gt; renderer uses the CPU with no additional dependencies.&lt;/li&gt; &#xA; &lt;li&gt;When Qt is installed on the system, the &lt;code&gt;native&lt;/code&gt; style uses Qt&#39;s QStyle to achieve native looking widgets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tooling&lt;/h3&gt; &#xA;&lt;p&gt;We have a few tools to help with the development of .slint files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/tools/lsp&#34;&gt;&lt;strong&gt;LSP Server&lt;/strong&gt;&lt;/a&gt; that adds features like auto-complete and live preview of the .slint files to many editors.&lt;/li&gt; &#xA; &lt;li&gt;It is bundled in a &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/editors/vscode&#34;&gt;&lt;strong&gt;Visual Studio Code Extension&lt;/strong&gt;&lt;/a&gt; available from the market place.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/tools/viewer&#34;&gt;&lt;strong&gt;slint-viewer&lt;/strong&gt;&lt;/a&gt; tool which displays the .slint files. The &lt;code&gt;--auto-reload&lt;/code&gt; argument makes it easy to preview your UI while you are working on it (when using the LSP preview is not possible).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slint-ui.com/editor&#34;&gt;&lt;strong&gt;SlintPad&lt;/strong&gt;&lt;/a&gt;, an online editor to try out .slint syntax without installing anything (&lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/tools/slintpad&#34;&gt;sources&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/tools/updater&#34;&gt;&lt;strong&gt;updater&lt;/strong&gt;&lt;/a&gt; to convert the .slint files from previous versions to newer versions.&lt;/li&gt; &#xA; &lt;li&gt;An experimental &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/tools/figma_import&#34;&gt;&lt;strong&gt;Figma importer&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check our &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/editors/README.md&#34;&gt;Editors README&lt;/a&gt; for tips on how to configure your favorite editor to work well with Slint.&lt;/p&gt; &#xA;&lt;h2&gt;Made with Slint&lt;/h2&gt; &#xA;&lt;p&gt;List of some open source projects using Slint: (Contact us or open a pull request to add yours)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/slint-ui/cargo-ui&#34;&gt;Cargo UI&lt;/a&gt;&lt;/strong&gt;: A graphical frontend for Cargo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Futsch1/image-sieve&#34;&gt;ImageSieve&lt;/a&gt;&lt;/strong&gt; : GUI based tool to sort and categorize images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://codeberg.org/moire/moire&#34;&gt;Moir√©&lt;/a&gt;&lt;/strong&gt; : Musical live performance application with a DAW-like timeline interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/jturcotte/chiptrack&#34;&gt;Chiptrack&lt;/a&gt;&lt;/strong&gt;: A cross-platform sequencer that internally uses a Game Boy emulator to synthesize the sound.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Project-Trains/launcher&#34;&gt;Project Trains Launcher&lt;/a&gt;&lt;/strong&gt;: Cross-platform game launcher made for Project Trains simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ElevenJune/mastermind_Rust&#34;&gt;Mastermind&lt;/a&gt;&lt;/strong&gt;: Mastermind game coded in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://codeberg.org/flovansl/co_sl&#34;&gt;coop_widgets&lt;/a&gt;&lt;/strong&gt;: Custom widget library for Slint &lt;a href=&#34;https://flovansl.codeberg.page/coop_sl/snapshots/examples/widgets/&#34;&gt;online demo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Slint is available under either a &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/LicenseRef-Slint-commercial.md&#34;&gt;proprietary license&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/LICENSES/GPL-3.0-only.txt&#34;&gt;GNU GPLv3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The proprietary license is provided free-of-charge in exchange for (1) consent that we can showcase the application, (2) attribution of Slint in the application and (3) feedback to improve Slint. Check out our &lt;a href=&#34;https://slint-ui.com/ambassador-program.html&#34;&gt;ambassador program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/FAQ.md#licensing&#34;&gt;Licensing FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your contributions: in the form of code, bug reports or feedback.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you see an &lt;a href=&#34;https://github.com/slint-ui/slint/labels/rfc&#34;&gt;RFC tag&lt;/a&gt; on an issue, feel free to chime in.&lt;/li&gt; &#xA; &lt;li&gt;For contribution guidelines see &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. The dual-licensing of Slint requires the contributor to accept our CLA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;Please see our separate &lt;a href=&#34;https://raw.githubusercontent.com/slint-ui/slint/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About us (SixtyFPS GmbH)&lt;/h2&gt; &#xA;&lt;p&gt;We are passionate about software - API design, cross-platform software development and user interface components. Our aim is to make developing user interfaces fun for everyone: from JavaScript, C++, or Rust developers all the way to UI/UX designers. We believe that software grows organically and keeping it open source is the best way to sustain that growth. Our team members are located remotely in Germany.&lt;/p&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to join &lt;a href=&#34;https://github.com/slint-ui/slint/discussions&#34;&gt;Github discussions&lt;/a&gt; for general chat or questions. Use &lt;a href=&#34;https://github.com/slint-ui/slint/issues&#34;&gt;Github issues&lt;/a&gt; to report public suggestions or bugs.&lt;/p&gt; &#xA;&lt;p&gt;We chat in &lt;a href=&#34;https://chat.slint-ui.com&#34;&gt;our Mattermost instance&lt;/a&gt; where you are welcome to listen in or ask your questions.&lt;/p&gt; &#xA;&lt;p&gt;You can of course also tweet at &lt;a href=&#34;https://twitter.com/slint_ui&#34;&gt;@slint-ui&lt;/a&gt; or contact us privately via email to &lt;a href=&#34;mailto://info@slint-ui.com&#34;&gt;info@slint-ui.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>