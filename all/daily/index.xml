<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-27T01:29:17Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nexus-xyz/nexus-cli</title>
    <updated>2025-06-27T01:29:17Z</updated>
    <id>tag:github.com,2025-06-27:/nexus-xyz/nexus-cli</id>
    <link href="https://github.com/nexus-xyz/nexus-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command line interface for supplying proofs to the Nexus network.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nexus-xyz/nexus-cli/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/nexus-xyz/nexus-cli.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nexus-xyz/nexus-cli/actions&#34;&gt;&lt;img src=&#34;https://github.com/nexus-xyz/nexus-cli/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nexus-xyz/nexus-cli/raw/main/LICENSE-APACHE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nexus-xyz/nexus-cli/raw/main/LICENSE-MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Nexus CLI&lt;/h1&gt; &#xA;&lt;p&gt;A high-performance command-line interface for contributing proofs to the Nexus network.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;a href=&#34;https://beta.nexus.xyz/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/assets/images/nexus-network-image.png&#34; alt=&#34;Nexus Network visualization showing a distributed network of interconnected nodes with a &#39;Launch Network&#39; button in the center&#34;&gt; &lt;/a&gt; &#xA; &lt;figcaption&gt; &#xA;  &lt;strong&gt;Verifiable Computation on a Global Scale&lt;/strong&gt;&#xA;  &lt;br&gt; We&#39;re building a global distributed prover network to unite the world&#39;s computers and power a new and better Internet: the Verifiable Internet. Connect to the beta and give it a try today. &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h2&gt;Nexus Network&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nexus.xyz/&#34;&gt;Nexus&lt;/a&gt; is a global distributed prover network that unites the world&#39;s computers to power a new and better Internet: the Verifiable Internet.&lt;/p&gt; &#xA;&lt;p&gt;There have been several testnets so far:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Testnet 0: &lt;a href=&#34;https://blog.nexus.xyz/nexus-launches-worlds-first-open-prover-network/&#34;&gt;October 8 – 28, 2024&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Testnet I: &lt;a href=&#34;https://blog.nexus.xyz/the-new-nexus-testnet-is-live/&#34;&gt;December 9 – 13, 2024&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Testnet II: &lt;a href=&#34;https://blog.nexus.xyz/testnet-ii-is-open/&#34;&gt;February 18 – 22, 2025&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Devnet: February 22 - June 20 2025&lt;/li&gt; &#xA; &lt;li&gt;Testnet III: &lt;a href=&#34;https://blog.nexus.xyz/live-everywhere/&#34;&gt;Ongoing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Precompiled Binary (Recommended)&lt;/h4&gt; &#xA;&lt;p&gt;For the simplest and most reliable installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://cli.nexus.xyz/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install the latest precompiled binary for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Prompt you to accept the Terms of Use.&lt;/li&gt; &#xA; &lt;li&gt;Start the CLI in interactive mode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The exact installation script is viewable &lt;a href=&#34;https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/public/install.sh&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Non-Interactive Installation&lt;/h4&gt; &#xA;&lt;p&gt;For automated installations (e.g., in CI):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSf https://cli.nexus.xyz/ -o install.sh&#xA;chmod +x install.sh&#xA;NONINTERACTIVE=1 ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Proving&lt;/h3&gt; &#xA;&lt;p&gt;Proving with the CLI is documented &lt;a href=&#34;https://docs.nexus.xyz/layer-1/testnet/cli-node&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To start with an existing node ID, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nexus-cli start --node-id &amp;lt;your-node-id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can register your wallet address and create a node ID with the CLI, or at at &lt;a href=&#34;https://app.nexus.xyz&#34;&gt;app.nexus.xyz&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nexus-cli register-user --wallet-address &amp;lt;your-wallet-address&amp;gt;&#xA;nexus-cli register-node&#xA;nexus-cli start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;register-user&lt;/code&gt; and &lt;code&gt;register-node&lt;/code&gt; commands will save your credentials to &lt;code&gt;~/.nexus/config.json&lt;/code&gt;. To clear credentials, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nexus-cli logout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For troubleshooting or to see available command line options, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nexus-cli --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Terms of Use&lt;/h2&gt; &#xA;&lt;p&gt;Use of the CLI is subject to the &lt;a href=&#34;https://nexus.xyz/terms-of-use&#34;&gt;Terms of Use&lt;/a&gt;. First-time users running interactively will be prompted to accept these terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Node ID&lt;/h2&gt; &#xA;&lt;p&gt;During the CLI&#39;s startup, you&#39;ll be asked for your node ID. To skip prompts in a non-interactive environment, manually create a &lt;code&gt;~/.nexus/config.json&lt;/code&gt; in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;node_id&#34;: &#34;&amp;lt;YOUR NODE ID&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Current Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To submit programs to the network for proving, contact &lt;a href=&#34;mailto:growth@nexus.xyz&#34;&gt;growth@nexus.xyz&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nexus.xyz/layer-1/network-devnet/faq&#34;&gt;Network FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/nexus-xyz&#34;&gt;Discord Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Technical issues? &lt;a href=&#34;https://github.com/nexus-xyz/nexus-cli/issues&#34;&gt;Open an issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Interested in contributing to the Nexus Network CLI? Check out our &lt;a href=&#34;https://raw.githubusercontent.com/nexus-xyz/nexus-cli/main/CONTRIBUTING.md&#34;&gt;Contributor Guide&lt;/a&gt; for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development setup instructions&lt;/li&gt; &#xA; &lt;li&gt;How to report issues and submit pull requests&lt;/li&gt; &#xA; &lt;li&gt;Our code of conduct and community guidelines&lt;/li&gt; &#xA; &lt;li&gt;Tips for working with the codebase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For most users, we recommend using the precompiled binaries as described above. The contributor guide is intended for those who want to modify or improve the CLI itself.&lt;/p&gt; &#xA;&lt;h3&gt;🛠 Developer Guide&lt;/h3&gt; &#xA;&lt;p&gt;The following steps may be required in order to setup a development environment for contributing to the project:&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt upgrade&#xA;sudo apt install build-essential pkg-config libssl-dev git-all&#xA;sudo apt install protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install using Homebrew&#xA;brew install protobuf&#xA;&#xA;# Verify installation&#xA;protoc --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;Install WSL&lt;/a&gt;, then see Linux instructions above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install using Chocolatey&#xA;choco install protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building ProtoBuf files&lt;/h3&gt; &#xA;&lt;p&gt;To build the ProtoBuf files, run the following command in the &lt;code&gt;clients/cli&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build --features build_proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Release&lt;/h3&gt; &#xA;&lt;p&gt;To create a release, update the package version in &lt;code&gt;Cargo.toml&lt;/code&gt;, then create and push a new (annotated) tag, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git tag -a v0.1.2 -m &#34;Release v0.1.2&#34;&#xA;git push origin v0.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will trigger the GitHub Actions release workflow that compiles binaries and pushes the Docker image, in addition to creating release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Creating a release through the GitHub UI creates a new release but does &lt;strong&gt;NOT&lt;/strong&gt; trigger the workflow. This leads to a release without a Docker image or binaries, which breaks the installation script.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gitleaks/gitleaks</title>
    <updated>2025-06-27T01:29:17Z</updated>
    <id>tag:github.com,2025-06-27:/gitleaks/gitleaks</id>
    <link href="https://github.com/gitleaks/gitleaks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find secrets with Gitleaks 🔑&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitleaks&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌─○───┐&#xA;│ │╲  │&#xA;│ │ ○ │&#xA;│ ○ ░ │&#xA;└─░───┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gitleaks/gitleaks/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/gitleaks/gitleaks/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Action Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/zricethezav/gitleaks&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg?sanitize=true&#34; alt=&#34;Docker Hub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitleaks.io/playground&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitleaks%20-playground-blue&#34; alt=&#34;Gitleaks Playground&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/protected%20by-gitleaks-blue&#34; alt=&#34;Gitleaks Action&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/zricethezav/gitleaks/v8&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/gitleaks/gitleaks/v8?status&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gitleaks/gitleaks/v8&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gitleaks/gitleaks/v8&#34; alt=&#34;GoReportCard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gitleaks/gitleaks/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/gitleaks/gitleaks.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Join our Discord! &lt;a href=&#34;https://discord.gg/8Hzbrnkr7E&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1102689410522284044.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Gitleaks is a tool for &lt;strong&gt;detecting&lt;/strong&gt; secrets like passwords, API keys, and tokens in git repos, files, and whatever else you wanna throw at it via &lt;code&gt;stdin&lt;/code&gt;. If you wanna learn more about how the detection engine works check out this blog: &lt;a href=&#34;https://lookingatcomputer.substack.com/p/regex-is-almost-all-you-need&#34;&gt;Regex is (almost) all you need&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜  ~/code(master) gitleaks git -v&#xA;&#xA;    ○&#xA;    │╲&#xA;    │ ○&#xA;    ○ ░&#xA;    ░    gitleaks&#xA;&#xA;&#xA;Finding:     &#34;export BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef&#34;,&#xA;Secret:      cafebabe:deadbeef&#xA;RuleID:      sidekiq-secret&#xA;Entropy:     2.609850&#xA;File:        cmd/generate/config/rules/sidekiq.go&#xA;Line:        23&#xA;Commit:      cd5226711335c68be1e720b318b7bc3135a30eb2&#xA;Author:      John&#xA;Email:       john@users.noreply.github.com&#xA;Date:        2022-08-03T12:31:40Z&#xA;Fingerprint: cd5226711335c68be1e720b318b7bc3135a30eb2:cmd/generate/config/rules/sidekiq.go:sidekiq-secret:23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href=&#34;https://github.com/gitleaks/gitleaks/releases&#34;&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;Gitleaks-Action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# MacOS&#xA;brew install gitleaks&#xA;&#xA;# Docker (DockerHub)&#xA;docker pull zricethezav/gitleaks:latest&#xA;docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]&#xA;&#xA;# Docker (ghcr.io)&#xA;docker pull ghcr.io/gitleaks/gitleaks:latest&#xA;docker run -v ${path_to_host_folder_to_scan}:/path ghcr.io/gitleaks/gitleaks:latest [COMMAND] [OPTIONS] [SOURCE_PATH]&#xA;&#xA;# From Source (make sure `go` is installed)&#xA;git clone https://github.com/gitleaks/gitleaks.git&#xA;cd gitleaks&#xA;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;p&gt;Check out the official &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;Gitleaks GitHub Action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name: gitleaks&#xA;on: [pull_request, push, workflow_dispatch]&#xA;jobs:&#xA;  scan:&#xA;    name: gitleaks&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;        with:&#xA;          fetch-depth: 0&#xA;      - uses: gitleaks/gitleaks-action@v2&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-Commit&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install pre-commit from &lt;a href=&#34;https://pre-commit.com/#install&#34;&gt;https://pre-commit.com/#install&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file at the root of your repository with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repos:&#xA;  - repo: https://github.com/gitleaks/gitleaks&#xA;    rev: v8.24.2&#xA;    hooks:&#xA;      - id: gitleaks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for a &lt;a href=&#34;https://github.com/gitleaks/gitleaks/releases&#34;&gt;native execution of gitleaks&lt;/a&gt; or use the &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/.pre-commit-hooks.yaml&#34;&gt;&lt;code&gt;gitleaks-docker&lt;/code&gt; pre-commit ID&lt;/a&gt; for executing gitleaks using the &lt;a href=&#34;https://raw.githubusercontent.com/gitleaks/gitleaks/master/#docker&#34;&gt;official Docker images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Auto-update the config to the latest repos&#39; versions by executing &lt;code&gt;pre-commit autoupdate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install with &lt;code&gt;pre-commit install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you&#39;re all set!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜ git commit -m &#34;this commit contains a secret&#34;&#xA;Detect hardcoded secrets.................................................Failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: to disable the gitleaks pre-commit hook you can prepend &lt;code&gt;SKIP=gitleaks&lt;/code&gt; to the commit command and it will skip running gitleaks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜ SKIP=gitleaks git commit -m &#34;skip gitleaks check&#34;&#xA;Detect hardcoded secrets................................................Skipped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  gitleaks [command]&#xA;&#xA;Available Commands:&#xA;  dir         scan directories or files for secrets&#xA;  git         scan git repositories for secrets&#xA;  help        Help about any command&#xA;  stdin       detect secrets from stdin&#xA;  version     display gitleaks version&#xA;&#xA;Flags:&#xA;  -b, --baseline-path string          path to baseline with issues that can be ignored&#xA;  -c, --config string                 config file path&#xA;                                      order of precedence:&#xA;                                      1. --config/-c&#xA;                                      2. env var GITLEAKS_CONFIG&#xA;                                      3. env var GITLEAKS_CONFIG_TOML with the file content&#xA;                                      4. (target path)/.gitleaks.toml&#xA;                                      If none of the four options are used, then gitleaks will use the default config&#xA;      --diagnostics string            enable diagnostics (comma-separated list: cpu,mem,trace). cpu=CPU profiling, mem=memory profiling, trace=execution tracing&#xA;      --diagnostics-dir string        directory to store diagnostics output files (defaults to current directory)&#xA;      --enable-rule strings           only enable specific rules by id&#xA;      --exit-code int                 exit code when leaks have been encountered (default 1)&#xA;  -i, --gitleaks-ignore-path string   path to .gitleaksignore file or folder containing one (default &#34;.&#34;)&#xA;  -h, --help                          help for gitleaks&#xA;      --ignore-gitleaks-allow         ignore gitleaks:allow comments&#xA;  -l, --log-level string              log level (trace, debug, info, warn, error, fatal) (default &#34;info&#34;)&#xA;      --max-decode-depth int          allow recursive decoding up to this depth (default &#34;0&#34;, no decoding is done)&#xA;      --max-archive-depth int         allow scanning into nested archives up to this depth (default &#34;0&#34;, no archive traversal is done)&#xA;      --max-target-megabytes int      files larger than this will be skipped&#xA;      --no-banner                     suppress banner&#xA;      --no-color                      turn off color for verbose output&#xA;      --redact uint[=100]             redact secrets from logs and stdout. To redact only parts of the secret just apply a percent value from 0..100. For example --redact=20 (default 100%)&#xA;  -f, --report-format string          output format (json, csv, junit, sarif, template)&#xA;  -r, --report-path string            report file&#xA;      --report-template string        template file used to generate the report (implies --report-format=template)&#xA;  -v, --verbose                       show verbose output from scan&#xA;      --version                       version for gitleaks&#xA;&#xA;Use &#34;gitleaks [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;⚠️ v8.19.0 introduced a change that deprecated &lt;code&gt;detect&lt;/code&gt; and &lt;code&gt;protect&lt;/code&gt;. Those commands are still available but are hidden in the &lt;code&gt;--help&lt;/code&gt; menu. Take a look at this &lt;a href=&#34;https://gist.github.com/zricethezav/b325bb93ebf41b9c0b0507acf12810d2&#34;&gt;gist&lt;/a&gt; for easy command translations. If you find v8.19.0 broke an existing command (&lt;code&gt;detect&lt;/code&gt;/&lt;code&gt;protect&lt;/code&gt;), please open an issue.&lt;/p&gt; &#xA;&lt;p&gt;There are three scanning modes: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, and &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;git&lt;/code&gt; command lets you scan local git repos. Under the hood, gitleaks uses the &lt;code&gt;git log -p&lt;/code&gt; command to scan patches. You can configure the behavior of &lt;code&gt;git log -p&lt;/code&gt; with the &lt;code&gt;log-opts&lt;/code&gt; option. For example, if you wanted to run gitleaks on a range of commits you could use the following command: &lt;code&gt;gitleaks git -v --log-opts=&#34;--all commitA..commitB&#34; path_to_repo&lt;/code&gt;. See the &lt;a href=&#34;https://git-scm.com/docs/git-log&#34;&gt;git log&lt;/a&gt; documentation for more information. If there is no target specified as a positional argument, then gitleaks will attempt to scan the current working directory as a git repo.&lt;/p&gt; &#xA;&lt;h4&gt;Dir&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;dir&lt;/code&gt; (aliases include &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt;) command lets you scan directories and files. Example: &lt;code&gt;gitleaks dir -v path_to_directory_or_file&lt;/code&gt;. If there is no target specified as a positional argument, then gitleaks will scan the current working directory.&lt;/p&gt; &#xA;&lt;h4&gt;Stdin&lt;/h4&gt; &#xA;&lt;p&gt;You can also stream data to gitleaks with the &lt;code&gt;stdin&lt;/code&gt; command. Example: &lt;code&gt;cat some_file | gitleaks -v stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Creating a baseline&lt;/h3&gt; &#xA;&lt;p&gt;When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the &lt;code&gt;--report-path&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gitleaks git --report-path gitleaks-report.json # This will save the report in a file called gitleaks-report.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once as baseline is created it can be applied when running the detect command again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gitleaks git --baseline-path gitleaks-report.json --report-path findings.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the detect command with the --baseline-path parameter, report output (findings.json) will only contain new issues.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-Commit hook&lt;/h2&gt; &#xA;&lt;p&gt;You can run Gitleaks as a pre-commit hook by copying the example &lt;code&gt;pre-commit.py&lt;/code&gt; script into your &lt;code&gt;.git/hooks/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Load Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The order of precedence is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;--config/-c&lt;/code&gt; option: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitleaks git --config /home/dev/customgitleaks.toml .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG&lt;/code&gt; with the file path: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GITLEAKS_CONFIG=&#34;/home/dev/customgitleaks.toml&#34;&#xA;gitleaks git .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variable &lt;code&gt;GITLEAKS_CONFIG_TOML&lt;/code&gt; with the file content: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GITLEAKS_CONFIG_TOML=`cat customgitleaks.toml`&#xA;gitleaks git .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;.gitleaks.toml&lt;/code&gt; file within the target path: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitleaks git .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If none of the four options are used, then gitleaks will use the default config.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Gitleaks offers a configuration format you can follow to write your own secret detection rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Title for the gitleaks configuration file.&#xA;title = &#34;Custom Gitleaks configuration&#34;&#xA;&#xA;# You have basically two options for your custom configuration:&#xA;#&#xA;# 1. define your own configuration, default rules do not apply&#xA;#&#xA;#    use e.g., the default configuration as starting point:&#xA;#    https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml&#xA;#&#xA;# 2. extend a configuration, the rules are overwritten or extended&#xA;#&#xA;#    When you extend a configuration the extended rules take precedence over the&#xA;#    default rules. I.e., if there are duplicate rules in both the extended&#xA;#    configuration and the default configuration the extended rules or&#xA;#    attributes of them will override the default rules.&#xA;#    Another thing to know with extending configurations is you can chain&#xA;#    together multiple configuration files to a depth of 2. Allowlist arrays are&#xA;#    appended and can contain duplicates.&#xA;&#xA;# useDefault and path can NOT be used at the same time. Choose one.&#xA;[extend]&#xA;# useDefault will extend the default gitleaks config built in to the binary&#xA;# the latest version is located at:&#xA;# https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml&#xA;useDefault = true&#xA;# or you can provide a path to a configuration to extend from.&#xA;# The path is relative to where gitleaks was invoked,&#xA;# not the location of the base config.&#xA;# path = &#34;common_config.toml&#34;&#xA;# If there are any rules you don&#39;t want to inherit, they can be specified here.&#xA;disabledRules = [ &#34;generic-api-key&#34;]&#xA;&#xA;# An array of tables that contain information that define instructions&#xA;# on how to detect secrets&#xA;[[rules]]&#xA;# Unique identifier for this rule&#xA;id = &#34;awesome-rule-1&#34;&#xA;&#xA;# Short human-readable description of the rule.&#xA;description = &#34;awesome rule 1&#34;&#xA;&#xA;# Golang regular expression used to detect secrets. Note Golang&#39;s regex engine&#xA;# does not support lookaheads.&#xA;regex = &#39;&#39;&#39;one-go-style-regex-for-this-rule&#39;&#39;&#39;&#xA;&#xA;# Int used to extract secret from regex match and used as the group that will have&#xA;# its entropy checked if `entropy` is set.&#xA;secretGroup = 3&#xA;&#xA;# Float representing the minimum shannon entropy a regex group must have to be considered a secret.&#xA;entropy = 3.5&#xA;&#xA;# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used&#xA;# in conjunction with a valid `regex` entry.&#xA;path = &#39;&#39;&#39;a-file-path-regex&#39;&#39;&#39;&#xA;&#xA;# Keywords are used for pre-regex check filtering. Rules that contain&#xA;# keywords will perform a quick string compare check to make sure the&#xA;# keyword(s) are in the content being scanned. Ideally these values should&#xA;# either be part of the identiifer or unique strings specific to the rule&#39;s regex&#xA;# (introduced in v8.6.0)&#xA;keywords = [&#xA;  &#34;auth&#34;,&#xA;  &#34;password&#34;,&#xA;  &#34;token&#34;,&#xA;]&#xA;&#xA;# Array of strings used for metadata and reporting purposes.&#xA;tags = [&#34;tag&#34;,&#34;another tag&#34;]&#xA;&#xA;    # ⚠️ In v8.21.0 `[rules.allowlist]` was replaced with `[[rules.allowlists]]`.&#xA;    # This change was backwards-compatible: instances of `[rules.allowlist]` still  work.&#xA;    #&#xA;    # You can define multiple allowlists for a rule to reduce false positives.&#xA;    # A finding will be ignored if _ANY_ `[[rules.allowlists]]` matches.&#xA;    [[rules.allowlists]]&#xA;    description = &#34;ignore commit A&#34;&#xA;    # When multiple criteria are defined the default condition is &#34;OR&#34;.&#xA;    # e.g., this can match on |commits| OR |paths| OR |stopwords|.&#xA;    condition = &#34;OR&#34;&#xA;    commits = [ &#34;commit-A&#34;, &#34;commit-B&#34;]&#xA;    paths = [&#xA;      &#39;&#39;&#39;go\.mod&#39;&#39;&#39;,&#xA;      &#39;&#39;&#39;go\.sum&#39;&#39;&#39;&#xA;    ]&#xA;    # note: stopwords targets the extracted secret, not the entire regex match&#xA;    # like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)&#xA;    stopwords = [&#xA;      &#39;&#39;&#39;client&#39;&#39;&#39;,&#xA;      &#39;&#39;&#39;endpoint&#39;&#39;&#39;,&#xA;    ]&#xA;&#xA;    [[rules.allowlists]]&#xA;    # The &#34;AND&#34; condition can be used to make sure all criteria match.&#xA;    # e.g., this matches if |regexes| AND |paths| are satisfied.&#xA;    condition = &#34;AND&#34;&#xA;    # note: |regexes| defaults to check the _Secret_ in the finding.&#xA;    # Acceptable values for |regexTarget| are &#34;secret&#34; (default), &#34;match&#34;, and &#34;line&#34;.&#xA;    regexTarget = &#34;match&#34;&#xA;    regexes = [ &#39;&#39;&#39;(?i)parseur[il]&#39;&#39;&#39; ]&#xA;    paths = [ &#39;&#39;&#39;package-lock\.json&#39;&#39;&#39; ]&#xA;&#xA;# You can extend a particular rule from the default config. e.g., gitlab-pat&#xA;# if you have defined a custom token prefix on your GitLab instance&#xA;[[rules]]&#xA;id = &#34;gitlab-pat&#34;&#xA;# all the other attributes from the default rule are inherited&#xA;&#xA;    [[rules.allowlists]]&#xA;    regexTarget = &#34;line&#34;&#xA;    regexes = [ &#39;&#39;&#39;MY-glpat-&#39;&#39;&#39; ]&#xA;&#xA;&#xA;# ⚠️ In v8.25.0 `[allowlist]` was replaced with `[[allowlists]]`.&#xA;#&#xA;# Global allowlists have a higher order of precedence than rule-specific allowlists.&#xA;# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no&#xA;# secrets will be detected for said commit. The same logic applies for regexes and paths.&#xA;[[allowlists]]&#xA;description = &#34;global allow list&#34;&#xA;commits = [ &#34;commit-A&#34;, &#34;commit-B&#34;, &#34;commit-C&#34;]&#xA;paths = [&#xA;  &#39;&#39;&#39;gitleaks\.toml&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;(.*?)(jpg|gif|doc)&#39;&#39;&#39;&#xA;]&#xA;# note: (global) regexTarget defaults to check the _Secret_ in the finding.&#xA;# Acceptable values for regexTarget are &#34;match&#34; and &#34;line&#34;&#xA;regexTarget = &#34;match&#34;&#xA;regexes = [&#xA;  &#39;&#39;&#39;219-09-9999&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;078-05-1120&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;(9[0-9]{2}|666)-\d{2}-\d{4}&#39;&#39;&#39;,&#xA;]&#xA;# note: stopwords targets the extracted secret, not the entire regex match&#xA;# like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)&#xA;stopwords = [&#xA;  &#39;&#39;&#39;client&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;endpoint&#39;&#39;&#39;,&#xA;]&#xA;&#xA;# ⚠️ In v8.25.0, `[[allowlists]]` have a new field called |targetRules|.&#xA;#&#xA;# Common allowlists can be defined once and assigned to multiple rules using |targetRules|.&#xA;# This will only run on the specified rules, not globally.&#xA;[[allowlists]]&#xA;targetRules = [&#34;awesome-rule-1&#34;, &#34;awesome-rule-2&#34;]&#xA;description = &#34;Our test assets trigger false-positives in a couple rules.&#34;&#xA;paths = [&#39;&#39;&#39;tests/expected/._\.json$&#39;&#39;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the default &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/config/gitleaks.toml&#34;&gt;gitleaks config&lt;/a&gt; for examples or follow the &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; if you would like to contribute to the default configuration. Additionally, you can check out &lt;a href=&#34;https://blog.gitleaks.io/stop-leaking-secrets-configuration-2-3-aeed293b1fbf&#34;&gt;this gitleaks blog post&lt;/a&gt; which covers advanced configuration setups.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;gitleaks:allow&lt;/h4&gt; &#xA;&lt;p&gt;If you are knowingly committing a test secret that gitleaks will catch you can add a &lt;code&gt;gitleaks:allow&lt;/code&gt; comment to that line which will instruct gitleaks to ignore that secret. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class CustomClass:&#xA;    discord_client_secret = &#39;8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ&#39;  #gitleaks:allow&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;.gitleaksignore&lt;/h4&gt; &#xA;&lt;p&gt;You can ignore specific findings by creating a &lt;code&gt;.gitleaksignore&lt;/code&gt; file at the root of your repo. In release v8.10.0 Gitleaks added a &lt;code&gt;Fingerprint&lt;/code&gt; value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the &lt;code&gt;.gitleaksignore&lt;/code&gt; file to ignore that specific secret. See Gitleaks&#39; &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/.gitleaksignore&#34;&gt;.gitleaksignore&lt;/a&gt; for an example. Note: this feature is experimental and is subject to change in the future.&lt;/p&gt; &#xA;&lt;h4&gt;Decoding&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes secrets are encoded in a way that can make them difficult to find with just regex. Now you can tell gitleaks to automatically find and decode encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; enables this feature (the default value &#34;0&#34; means the feature is disabled by default).&lt;/p&gt; &#xA;&lt;p&gt;Recursive decoding is supported since decoded text can also contain encoded text. The flag &lt;code&gt;--max-decode-depth&lt;/code&gt; sets the recursion limit. Recursion stops when there are no new segments of encoded text to decode, so setting a really high max depth doesn&#39;t mean it will make that many passes. It will only make as many as it needs to decode the text. Overall, decoding only minimally increases scan times.&lt;/p&gt; &#xA;&lt;p&gt;The findings for encoded text differ from normal findings in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The location points the bounds of the encoded text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the rule matches outside the encoded text, the bounds are adjusted to include that as well&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The match and secret contain the decoded value&lt;/li&gt; &#xA; &lt;li&gt;Two tags are added &lt;code&gt;decoded:&amp;lt;encoding&amp;gt;&lt;/code&gt; and &lt;code&gt;decode-depth:&amp;lt;depth&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently supported encodings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;percent&lt;/strong&gt; - Any printable ASCII percent encoded values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hex&lt;/strong&gt; - Any printable ASCII hex encoded values &amp;gt;= 32 characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;base64&lt;/strong&gt; - Any printable ASCII base64 encoded values &amp;gt;= 16 characters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Archive Scanning&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes secrets are packaged within archive files like zip files or tarballs, making them difficult to discover. Now you can tell gitleaks to automatically extract and scan the contents of archives. The flag &lt;code&gt;--max-archive-depth&lt;/code&gt; enables this feature for both &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; scan types. The default value of &#34;0&#34; means this feature is disabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Recursive scanning is supported since archives can also contain other archives. The &lt;code&gt;--max-archive-depth&lt;/code&gt; flag sets the recursion limit. Recursion stops when there are no new archives to extract, so setting a very high max depth just sets the potential to go that deep. It will only go as deep as it needs to.&lt;/p&gt; &#xA;&lt;p&gt;The findings for secrets located within an archive will include the path to the file inside the archive. Inner paths are separated with &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example finding (shortened for brevity):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Finding:     DB_PASSWORD=8ae31cacf141669ddfb5da&#xA;...&#xA;File:        testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod&#xA;Line:        4&#xA;Commit:      6e6ee6596d337bb656496425fb98644eb62b4a82&#xA;...&#xA;Fingerprint: 6e6ee6596d337bb656496425fb98644eb62b4a82:testdata/archives/nested.tar.gz!archives/files.tar!files/.env.prod:generic-api-key:4&#xA;Link:        https://github.com/leaktk/gitleaks/blob/6e6ee6596d337bb656496425fb98644eb62b4a82/testdata/archives/nested.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means a secret was detected on line 4 of &lt;code&gt;files/.env.prod.&lt;/code&gt; which is in &lt;code&gt;archives/files.tar&lt;/code&gt; which is in &lt;code&gt;testdata/archives/nested.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently supported formats:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/mholt/archives?tab=readme-ov-file#supported-compression-formats&#34;&gt;compression&lt;/a&gt; and &lt;a href=&#34;https://github.com/mholt/archives?tab=readme-ov-file#supported-archive-formats&#34;&gt;archive&lt;/a&gt; formats supported by mholt&#39;s &lt;a href=&#34;https://github.com/mholt/archives&#34;&gt;archives package&lt;/a&gt; are supported.&lt;/p&gt; &#xA;&lt;h4&gt;Reporting&lt;/h4&gt; &#xA;&lt;p&gt;Gitleaks has built-in support for several report formats: &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/json_simple.json&#34;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/csv_simple.csv?plain=1&#34;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/junit_simple.xml&#34;&gt;&lt;code&gt;junit&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/gitleaks/gitleaks/raw/master/testdata/expected/report/sarif_simple.sarif&#34;&gt;&lt;code&gt;sarif&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If none of these formats fit your need, you can create your own report format with a &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-templates-in-go#step-4-writing-a-template&#34;&gt;Go &lt;code&gt;text/template&lt;/code&gt; .tmpl file&lt;/a&gt; and the &lt;code&gt;--report-template&lt;/code&gt; flag. The template can use &lt;a href=&#34;https://masterminds.github.io/sprig/&#34;&gt;extended functionality from the &lt;code&gt;Masterminds/sprig&lt;/code&gt; template library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following template provides a custom JSON output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gotemplate&#34;&gt;# jsonextra.tmpl&#xA;[{{ $lastFinding := (sub (len . ) 1) }}&#xA;{{- range $i, $finding := . }}{{with $finding}}&#xA;    {&#xA;        &#34;Description&#34;: {{ quote .Description }},&#xA;        &#34;StartLine&#34;: {{ .StartLine }},&#xA;        &#34;EndLine&#34;: {{ .EndLine }},&#xA;        &#34;StartColumn&#34;: {{ .StartColumn }},&#xA;        &#34;EndColumn&#34;: {{ .EndColumn }},&#xA;        &#34;Line&#34;: {{ quote .Line }},&#xA;        &#34;Match&#34;: {{ quote .Match }},&#xA;        &#34;Secret&#34;: {{ quote .Secret }},&#xA;        &#34;File&#34;: &#34;{{ .File }}&#34;,&#xA;        &#34;SymlinkFile&#34;: {{ quote .SymlinkFile }},&#xA;        &#34;Commit&#34;: {{ quote .Commit }},&#xA;        &#34;Entropy&#34;: {{ .Entropy }},&#xA;        &#34;Author&#34;: {{ quote .Author }},&#xA;        &#34;Email&#34;: {{ quote .Email }},&#xA;        &#34;Date&#34;: {{ quote .Date }},&#xA;        &#34;Message&#34;: {{ quote .Message }},&#xA;        &#34;Tags&#34;: [{{ $lastTag := (sub (len .Tags ) 1) }}{{ range $j, $tag := .Tags }}{{ quote . }}{{ if ne $j $lastTag }},{{ end }}{{ end }}],&#xA;        &#34;RuleID&#34;: {{ quote .RuleID }},&#xA;        &#34;Fingerprint&#34;: {{ quote .Fingerprint }}&#xA;    }{{ if ne $i $lastFinding }},{{ end }}&#xA;{{- end}}{{ end }}&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gitleaks dir ~/leaky-repo/ --report-path &#34;report.json&#34; --report-format template --report-template testdata/report/jsonextra.tmpl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsorships&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;/p&gt;&#xA;&lt;h3&gt;&lt;a href=&#34;https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&#34;&gt;coderabbit.ai&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a href=&#34;https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&#34;&gt; &lt;/a&gt;&#xA;&lt;a href=&#34;https://coderabbit.ai/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&#34;&gt; &lt;img alt=&#34;CodeRabbit.ai Sponsorship&#34; src=&#34;https://github.com/gitleaks/gitleaks/assets/15034943/76c30a85-887b-47ca-9956-17a8e55c6c41&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Exit Codes&lt;/h2&gt; &#xA;&lt;p&gt;You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 - no leaks present&#xA;1 - leaks or error encountered&#xA;126 - unknown flag&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Portkey-AI/gateway</title>
    <updated>2025-06-27T01:29:17Z</updated>
    <id>tag:github.com,2025-06-27:/Portkey-AI/gateway</id>
    <link href="https://github.com/Portkey-AI/gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast AI Gateway with integrated guardrails. Route to 200+ LLMs, 50+ AI Guardrails with 1 fast &amp; friendly API.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/.github/README.cn.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/.github/README.jp.md&#34;&gt;日本語&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://portkey.sh/report-github&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siddharthsambharia-portkey/Portkey-Product-Images/refs/heads/main/LLM%20Report%20Campaign%20Frame.png&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA; &lt;h1&gt;AI Gateway&lt;/h1&gt; &#xA; &lt;h4&gt;Route to 250+ LLMs with 1 fast &amp;amp; friendly API&lt;/h4&gt; &#xA; &lt;img src=&#34;https://cfassets.portkey.ai/sdk.gif&#34; width=&#34;550px&#34; alt=&#34;Portkey AI Gateway Demo showing LLM routing capabilities&#34; style=&#34;margin-left:-35px&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://portkey.wiki/gh-1&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://portkey.wiki/gh-2&#34;&gt;Enterprise&lt;/a&gt; | &lt;a href=&#34;https://portkey.wiki/gh-3&#34;&gt;Hosted Gateway&lt;/a&gt; | &lt;a href=&#34;https://portkey.wiki/gh-4&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://portkey.wiki/gh-5&#34;&gt;API Reference&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Ileriayo/markdown-badges&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://portkey.wiki/gh-6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1143393887742861333&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://portkey.wiki/gh-7&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter/follow/portkeyai?style=social&amp;amp;label=Follow%20%40PortkeyAI&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://portkey.wiki/gh-8&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/%40portkey-ai%2Fgateway.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://portkey.wiki/gh-9&#34;&gt;&lt;img src=&#34;https://uptime.betterstack.com/status-badges/v1/monitor/q94g.svg?sanitize=true&#34; alt=&#34;Better Stack Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?stackName=portkey-gateway&amp;amp;templateURL=https://portkey-gateway-ec2-quicklaunch.s3.us-east-1.amazonaws.com/portkey-gateway-ec2-quicklaunch.template.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Deploy_to_EC2-232F3E?style=for-the-badge&amp;amp;logo=amazonwebservices&amp;amp;logoColor=white&#34; alt=&#34;Deploy to AWS EC2&#34; width=&#34;105&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepwiki.com/Portkey-AI/gateway&#34;&gt;&lt;img src=&#34;https://deepwiki.com/badge.svg?sanitize=true&#34; alt=&#34;Ask DeepWiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://portkey.wiki/gh-10&#34;&gt;&lt;strong&gt;AI Gateway&lt;/strong&gt;&lt;/a&gt; is designed for fast, reliable &amp;amp; secure routing to 1600+ language, vision, audio, and image models. It is a lightweight, open-source, and enterprise-ready solution that allows you to integrate with any language model in under 2 minutes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Blazing fast&lt;/strong&gt; (&amp;lt;1ms latency) with a tiny footprint (122kb)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Battle tested&lt;/strong&gt;, with over 10B tokens processed everyday&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Enterprise-ready&lt;/strong&gt; with enhanced security, scale, and custom deployments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;What can you do with the AI Gateway?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate with any LLM in under 2 minutes - &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/#quickstart-2-mins&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prevent downtimes through &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-11&#34;&gt;automatic retries&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-12&#34;&gt;fallbacks&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scale AI apps with &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-13&#34;&gt;load balancing&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-14&#34;&gt;conditional routing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Protect your AI deployments with &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-15&#34;&gt;guardrails&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go beyond text with &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-16&#34;&gt;multi-modal capabilities&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Finally, explore &lt;strong&gt;&lt;a href=&#34;https://portkey.wiki/gh-17&#34;&gt;agentic workflow&lt;/a&gt;&lt;/strong&gt; integrations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Starring this repo helps more developers discover the AI Gateway 🙏🏻&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/53597dce-6333-4ecc-a154-eb05532954e4&#34; alt=&#34;star-2&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Quickstart (2 mins)&lt;/h2&gt; &#xA;&lt;h3&gt;1. Setup your AI Gateway&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the gateway locally (needs Node.js and npm)&#xA;npx @portkey-ai/gateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The Gateway is running on &lt;code&gt;http://localhost:8787/v1&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;The Gateway Console is running on &lt;code&gt;http://localhost:8787/public/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;sup&gt; Deployment guides: &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-18&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cfassets.portkey.ai/logo/dew-color.svg?sanitize=true&#34;&gt; Portkey Cloud (Recommended)&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/installation-deployments.md#docker&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/docker/3776AB&#34;&gt; Docker&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/installation-deployments.md#nodejs-server&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/node.js/3776AB&#34;&gt; Node.js&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/installation-deployments.md#cloudflare-workers&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/cloudflare/3776AB&#34;&gt; Cloudflare&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/installation-deployments.md#replit&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/replit/3776AB&#34;&gt; Replit&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/installation-deployments.md&#34;&gt; Others...&lt;/a&gt; &lt;/sup&gt; &#xA;&lt;h3&gt;2. Make your first request&lt;/h3&gt; &#xA;&lt;!-- &lt;details open&gt;&#xA;&lt;summary&gt;Python Example&lt;/summary&gt; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pip install -qU portkey-ai&#xA;&#xA;from portkey_ai import Portkey&#xA;&#xA;# OpenAI compatible client&#xA;client = Portkey(&#xA;    provider=&#34;openai&#34;, # or &#39;anthropic&#39;, &#39;bedrock&#39;, &#39;groq&#39;, etc&#xA;    Authorization=&#34;sk-***&#34; # the provider API key&#xA;)&#xA;&#xA;# Make a request through your AI Gateway&#xA;client.chat.completions.create(&#xA;    messages=[{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;What&#39;s the weather like?&#34;}],&#xA;    model=&#34;gpt-4o-mini&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;Supported Libraries: &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-19&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/javascript/3776AB&#34;&gt; JS&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-20&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/python/3776AB&#34;&gt; Python&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.sh/gh-84&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/gnubash/3776AB&#34;&gt; REST&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-21&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/openai/3776AB&#34;&gt; OpenAI SDKs&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-22&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/langchain/3776AB&#34;&gt; Langchain&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-23&#34;&gt;LlamaIndex&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-24&#34;&gt;Autogen&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-25&#34;&gt;CrewAI&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-26&#34;&gt;More..&lt;/a&gt; &lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the Gateway Console (&lt;code&gt;http://localhost:8787/public/&lt;/code&gt;) you can see all of your local logs in one place.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/362bc916-0fc9-43f1-a39e-4bd71aac4a3a&#34; width=&#34;400&#34;&gt; &#xA;&lt;h3&gt;3. Routing &amp;amp; Guardrails&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Configs&lt;/code&gt; in the LLM gateway allow you to create routing rules, add reliability and setup guardrails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;config = {&#xA;  &#34;retry&#34;: {&#34;attempts&#34;: 5},&#xA;&#xA;  &#34;output_guardrails&#34;: [{&#xA;    &#34;default.contains&#34;: {&#34;operator&#34;: &#34;none&#34;, &#34;words&#34;: [&#34;Apple&#34;]},&#xA;    &#34;deny&#34;: True&#xA;  }]&#xA;}&#xA;&#xA;# Attach the config to the client&#xA;client = client.with_options(config=config)&#xA;&#xA;client.chat.completions.create(&#xA;    model=&#34;gpt-4o-mini&#34;,&#xA;    messages=[{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Reply randomly with Apple or Bat&#34;}]&#xA;)&#xA;&#xA;# This would always response with &#34;Bat&#34; as the guardrail denies all replies containing &#34;Apple&#34;. The retry config would retry 5 times before giving up.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://portkey.ai/blog/content/images/size/w1600/2024/11/image-15.png&#34; width=&#34;600&#34; title=&#34;Request flow through Portkey&#39;s AI gateway with retries and guardrails&#34; alt=&#34;Request flow through Portkey&#39;s AI gateway with retries and guardrails&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;You can do a lot more stuff with configs in your AI gateway. &lt;a href=&#34;https://portkey.wiki/gh-27&#34;&gt;Jump to examples →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Enterprise Version (Private deployments)&lt;/h3&gt; &#xA;&lt;sup&gt; &lt;p&gt;&lt;a href=&#34;https://portkey.wiki/gh-28&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cfassets.portkey.ai/amazon-logo.svg?sanitize=true&#34;&gt; AWS&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-29&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cfassets.portkey.ai/azure-logo.svg?sanitize=true&#34;&gt; Azure&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-30&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/googlecloud/3776AB&#34;&gt; GCP&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-31&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/redhatopenshift/3776AB&#34;&gt; OpenShift&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://portkey.wiki/gh-85&#34;&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://cdn.simpleicons.org/kubernetes/3776AB&#34;&gt; Kubernetes&lt;/a&gt;&lt;/p&gt; &lt;/sup&gt; &#xA;&lt;p&gt;The LLM Gateway&#39;s &lt;a href=&#34;https://portkey.wiki/gh-86&#34;&gt;enterprise version&lt;/a&gt; offers advanced capabilities for &lt;strong&gt;org management&lt;/strong&gt;, &lt;strong&gt;governance&lt;/strong&gt;, &lt;strong&gt;security&lt;/strong&gt; and &lt;a href=&#34;https://portkey.wiki/gh-87&#34;&gt;more&lt;/a&gt; out of the box. &lt;a href=&#34;https://portkey.wiki/gh-32&#34;&gt;View Feature Comparison →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The enterprise deployment architecture for supported platforms is available here - &lt;a href=&#34;https://portkey.wiki/gh-33&#34;&gt;&lt;strong&gt;Enterprise Private Cloud Deployments&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.sh/demo-13&#34;&gt;&lt;img src=&#34;https://portkey.ai/blog/content/images/2024/08/Get-API-Key--5-.png&#34; height=&#34;50&#34; alt=&#34;Book an enterprise AI gateway demo&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;AI Engineering Hours&lt;/h3&gt; &#xA;&lt;p&gt;Join weekly community calls every Friday (8 AM PT) to kickstart your AI Gateway implementation! &lt;a href=&#34;https://portkey.wiki/gh-35&#34;&gt;Happening every Friday&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.wiki/gh-35&#34;&gt;&lt;img width=&#34;500&#34; src=&#34;https://github.com/user-attachments/assets/c2885699-f197-4289-b819-21eb839fbae1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Minutes of Meetings &lt;a href=&#34;https://portkey.wiki/gh-36&#34;&gt;published here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LLMs in Prod&#39;25&lt;/h3&gt; &#xA;&lt;p&gt;Insights from analyzing 2 trillion+ tokens, across 90+ regions and 650+ teams in production. What to expect from this report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trends shaping AI adoption and LLM provider growth.&lt;/li&gt; &#xA; &lt;li&gt;Benchmarks to optimize speed, cost and reliability.&lt;/li&gt; &#xA; &lt;li&gt;Strategies to scale production-grade AI systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.sh/report-github&#34;&gt;&lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/siddharthsambharia-portkey/Portkey-Product-Images/refs/heads/main/LLM%20Report%20Campaign%20Image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.sh/report-github&#34;&gt;&lt;strong&gt;Get the Report&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Core Features&lt;/h2&gt; &#xA;&lt;h3&gt;Reliable Routing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-37&#34;&gt;&lt;strong&gt;Fallbacks&lt;/strong&gt;&lt;/a&gt;: Fallback to another provider or model on failed requests using the LLM gateway. You can specify the errors on which to trigger the fallback. Improves reliability of your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-38&#34;&gt;&lt;strong&gt;Automatic Retries&lt;/strong&gt;&lt;/a&gt;: Automatically retry failed requests up to 5 times. An exponential backoff strategy spaces out retry attempts to prevent network overload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-39&#34;&gt;&lt;strong&gt;Load Balancing&lt;/strong&gt;&lt;/a&gt;: Distribute LLM requests across multiple API keys or AI providers with weights to ensure high availability and optimal performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-40&#34;&gt;&lt;strong&gt;Request Timeouts&lt;/strong&gt;&lt;/a&gt;: Manage unruly LLMs &amp;amp; latencies by setting up granular request timeouts, allowing automatic termination of requests that exceed a specified duration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-41&#34;&gt;&lt;strong&gt;Multi-modal LLM Gateway&lt;/strong&gt;&lt;/a&gt;: Call vision, audio (text-to-speech &amp;amp; speech-to-text), and image generation models from multiple providers — all using the familiar OpenAI signature&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-42&#34;&gt;&lt;strong&gt;Realtime APIs&lt;/strong&gt;&lt;/a&gt;: Call realtime APIs launched by OpenAI through the integrate websockets server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security &amp;amp; Accuracy&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-88&#34;&gt;&lt;strong&gt;Guardrails&lt;/strong&gt;&lt;/a&gt;: Verify your LLM inputs and outputs to adhere to your specified checks. Choose from the 40+ pre-built guardrails to ensure compliance with security and accuracy standards. You can &lt;a href=&#34;https://portkey.wiki/gh-43&#34;&gt;bring your own guardrails&lt;/a&gt; or choose from our &lt;a href=&#34;https://portkey.wiki/gh-44&#34;&gt;many partners&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-45&#34;&gt;&lt;strong&gt;Secure Key Management&lt;/strong&gt;&lt;/a&gt;: Use your own keys or generate virtual keys on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-46&#34;&gt;&lt;strong&gt;Role-based access control&lt;/strong&gt;&lt;/a&gt;: Granular access control for your users, workspaces and API keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-47&#34;&gt;&lt;strong&gt;Compliance &amp;amp; Data Privacy&lt;/strong&gt;&lt;/a&gt;: The AI gateway is SOC2, HIPAA, GDPR, and CCPA compliant.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cost Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-48&#34;&gt;&lt;strong&gt;Smart caching&lt;/strong&gt;&lt;/a&gt;: Cache responses from LLMs to reduce costs and improve latency. Supports simple and semantic* caching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-49&#34;&gt;&lt;strong&gt;Usage analytics&lt;/strong&gt;&lt;/a&gt;: Monitor and analyze your AI and LLM usage, including request volume, latency, costs and error rates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-89&#34;&gt;&lt;strong&gt;Provider optimization&lt;/strong&gt;*&lt;/a&gt;: Automatically switch to the most cost-effective provider based on usage patterns and pricing models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Collaboration &amp;amp; Workflows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.ai/docs/integrations/agents&#34;&gt;&lt;strong&gt;Agents Support&lt;/strong&gt;&lt;/a&gt;: Seamlessly integrate with popular agent frameworks to build complex AI applications. The gateway seamlessly integrates with &lt;a href=&#34;https://portkey.wiki/gh-50&#34;&gt;Autogen&lt;/a&gt;, &lt;a href=&#34;https://portkey.wiki/gh-51&#34;&gt;CrewAI&lt;/a&gt;, &lt;a href=&#34;https://portkey.wiki/gh-52&#34;&gt;LangChain&lt;/a&gt;, &lt;a href=&#34;https://portkey.wiki/gh-53&#34;&gt;LlamaIndex&lt;/a&gt;, &lt;a href=&#34;https://portkey.wiki/gh-54&#34;&gt;Phidata&lt;/a&gt;, &lt;a href=&#34;https://portkey.wiki/gh-55&#34;&gt;Control Flow&lt;/a&gt;, and even &lt;a href=&#34;https://portkey.wiki/gh-56&#34;&gt;Custom Agents&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portkey.wiki/gh-57&#34;&gt;&lt;strong&gt;Prompt Template Management&lt;/strong&gt;*&lt;/a&gt;: Create, manage and version your prompt templates collaboratively through a universal prompt playground. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;sup&gt; *&amp;nbsp;Available in hosted and enterprise versions &lt;/sup&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Cookbooks&lt;/h2&gt; &#xA;&lt;h3&gt;☄️ Trending&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use models from &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/cookbook/providers/nvidia.ipynb&#34;&gt;Nvidia NIM&lt;/a&gt; with AI Gateway&lt;/li&gt; &#xA; &lt;li&gt;Monitor &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/cookbook/monitoring-agents/CrewAI_with_Telemetry.ipynb&#34;&gt;CrewAI Agents&lt;/a&gt; with Portkey!&lt;/li&gt; &#xA; &lt;li&gt;Comparing &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/cookbook/use-cases/LMSYS%20Series/comparing-top10-LMSYS-models-with-Portkey.ipynb&#34;&gt;Top 10 LMSYS Models&lt;/a&gt; with AI Gateway.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🚨 Latest&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/cookbook/use-cases/Nemotron_GPT_Finetuning_Portkey.ipynb&#34;&gt;Create Synthetic Datasets using Nemotron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/cookbook/integrations/vercel-ai.md&#34;&gt;Use the LLM Gateway with Vercel&#39;s AI SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/cookbook/monitoring-agents/Llama_Agents_with_Telemetry.ipynb&#34;&gt;Monitor Llama Agents with Portkey&#39;s LLM Gateway&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.wiki/gh-58&#34;&gt;View all cookbooks →&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Providers&lt;/h2&gt; &#xA;&lt;p&gt;Explore Gateway integrations with &lt;a href=&#34;https://portkey.wiki/gh-59&#34;&gt;45+ providers&lt;/a&gt; and &lt;a href=&#34;https://portkey.wiki/gh-90&#34;&gt;8+ agent frameworks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;   &lt;th&gt;Stream&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/images/openai.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-60&#34;&gt;OpenAI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/images/azure.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-61&#34;&gt;Azure OpenAI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/images/anyscale.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-62&#34;&gt;Anyscale&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/2/2d/Google-favicon-2015.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-63&#34;&gt;Google Gemini&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/images/anthropic.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-64&#34;&gt;Anthropic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/docs/images/cohere.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-65&#34;&gt;Cohere&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://assets-global.website-files.com/64f6f2c0e3f4c5a91c1e823a/654693d569494912cfc0c0d4_favicon.svg?sanitize=true&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-66&#34;&gt;Together AI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.perplexity.ai/favicon.svg?sanitize=true&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-67&#34;&gt;Perplexity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://docs.mistral.ai/img/favicon.ico&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-68&#34;&gt;Mistral&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://docs.nomic.ai/img/nomic-logo.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-69&#34;&gt;Nomic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://files.readme.io/d38a23e-small-studio-favicon.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-91&#34;&gt;AI21&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://platform.stability.ai/small-logo-purple.svg?sanitize=true&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-71&#34;&gt;Stability AI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://deepinfra.com/_next/static/media/logo.4a03fd3d.svg?sanitize=true&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.sh/gh-92&#34;&gt;DeepInfra&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://ollama.com/public/ollama.png&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-72&#34;&gt;Ollama&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://novita.ai/favicon.ico&#34; width=&#34;35&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-73&#34;&gt;Novita AI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://portkey.wiki/gh-74&#34;&gt;View the complete list of 200+ supported models here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Agents&lt;/h2&gt; &#xA;&lt;p&gt;Gateway seamlessly integrates with popular agent frameworks. &lt;a href=&#34;https://portkey.wiki/gh-75&#34;&gt;Read the documentation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Framework&lt;/th&gt; &#xA;   &lt;th&gt;Call 200+ LLMs&lt;/th&gt; &#xA;   &lt;th&gt;Advanced Routing&lt;/th&gt; &#xA;   &lt;th&gt;Caching&lt;/th&gt; &#xA;   &lt;th&gt;Logging &amp;amp; Tracing*&lt;/th&gt; &#xA;   &lt;th&gt;Observability*&lt;/th&gt; &#xA;   &lt;th&gt;Prompt Management*&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-93&#34;&gt;Autogen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-94&#34;&gt;CrewAI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-95&#34;&gt;LangChain&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-96&#34;&gt;Phidata&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-97&#34;&gt;Llama Index&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-98&#34;&gt;Control Flow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://portkey.wiki/gh-99&#34;&gt;Build Your Own Agents&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;*Available on the &lt;a href=&#34;https://portkey.wiki/gh-76&#34;&gt;hosted app&lt;/a&gt;. For detailed documentation &lt;a href=&#34;https://portkey.wiki/gh-100&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Gateway Enterprise Version&lt;/h2&gt; &#xA;&lt;p&gt;Make your AI app more &lt;ins&gt;reliable&lt;/ins&gt; and &lt;ins&gt;forward compatible&lt;/ins&gt;, while ensuring complete &lt;ins&gt;data security&lt;/ins&gt; and &lt;ins&gt;privacy&lt;/ins&gt;.&lt;/p&gt; &#xA;&lt;p&gt;✅&amp;nbsp; Secure Key Management - for role-based access control and tracking &lt;br&gt; ✅&amp;nbsp; Simple &amp;amp; Semantic Caching - to serve repeat queries faster &amp;amp; save costs &lt;br&gt; ✅&amp;nbsp; Access Control &amp;amp; Inbound Rules - to control which IPs and Geos can connect to your deployments &lt;br&gt; ✅&amp;nbsp; PII Redaction - to automatically remove sensitive data from your requests to prevent indavertent exposure &lt;br&gt; ✅&amp;nbsp; SOC2, ISO, HIPAA, GDPR Compliances - for best security practices &lt;br&gt; ✅&amp;nbsp; Professional Support - along with feature prioritization &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.sh/demo-13&#34;&gt;Schedule a call to discuss enterprise deployments&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to contribute is to pick an issue with the &lt;code&gt;good first issue&lt;/code&gt; tag 💪. Read the contribution guidelines &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bug Report? &lt;a href=&#34;https://portkey.wiki/gh-78&#34;&gt;File here&lt;/a&gt; | Feature Request? &lt;a href=&#34;https://portkey.wiki/gh-78&#34;&gt;File here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started with the Community&lt;/h3&gt; &#xA;&lt;p&gt;Join our weekly AI Engineering Hours every Friday (8 AM PT) to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Meet other contributors and community members&lt;/li&gt; &#xA; &lt;li&gt;Learn advanced Gateway features and implementation patterns&lt;/li&gt; &#xA; &lt;li&gt;Share your experiences and get help&lt;/li&gt; &#xA; &lt;li&gt;Stay updated with the latest development priorities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://portkey.wiki/gh-101&#34;&gt;Join the next session →&lt;/a&gt; | &lt;a href=&#34;https://portkey.wiki/gh-102&#34;&gt;Meeting notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our growing community around the world, for help, ideas, and discussions on AI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View our official &lt;a href=&#34;https://portkey.wiki/gh-78&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat with us on &lt;a href=&#34;https://portkey.wiki/community&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://portkey.wiki/gh-79&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect with us on &lt;a href=&#34;https://portkey.wiki/gh-80&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the documentation in &lt;a href=&#34;https://raw.githubusercontent.com/Portkey-AI/gateway/main/.github/README.jp.md&#34;&gt;Japanese&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit us on &lt;a href=&#34;https://portkey.wiki/gh-103&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://portkey.wiki/gh-82&#34;&gt;Dev community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - Questions tagged #portkey on [Stack Overflow](https://stackoverflow.com/questions/tagged/portkey) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Portkey-AI/gateway/assets/971978/89d6f0af-a95d-4402-b451-14764c40d03f&#34; alt=&#34;Rubeus Social Share (4)&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>