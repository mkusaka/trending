<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-08T01:27:56Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CanadaHonk/porffor</title>
    <updated>2024-08-08T01:27:56Z</updated>
    <id>tag:github.com,2024-08-08:/CanadaHonk/porffor</id>
    <link href="https://github.com/CanadaHonk/porffor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A from-scratch experimental AOT JS engine, written in JS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Porffor &amp;nbsp;&lt;sup&gt;&lt;sub&gt;/ˈpɔrfɔr/ &amp;nbsp;&lt;em&gt;(poor-for)&lt;/em&gt;&lt;/sub&gt;&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A from-scratch experimental &lt;strong&gt;AOT&lt;/strong&gt; optimizing JS/TS -&amp;gt; Wasm/C engine/compiler/runtime in JS. Research project, not yet intended for serious use.&lt;br&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/CanadaHonk/porffor/assets/19228318/de8ad753-8ce3-4dcd-838e-f4d49452f8f8&#34; alt=&#34;Screenshot of terminal showing Porffor running and compiling a hello world&#34; width=&#34;60%&#34;&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;Porffor is a very unique JS engine, due many wildly different approaches. It is seriously limited, but what it can do, it does pretty well. Key differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% AOT compiled (no JIT)&lt;/li&gt; &#xA; &lt;li&gt;No constant runtime/preluded code&lt;/li&gt; &#xA; &lt;li&gt;Least Wasm imports possible (only I/O)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Porffor is primarily built from scratch, the only thing that is not is the parser (using &lt;a href=&#34;https://github.com/acornjs/acorn&#34;&gt;Acorn&lt;/a&gt;). Binaryen/etc is not used, we make final wasm binaries ourself. You could imagine it as compiling a language which is a sub (some things unsupported) and super (new/custom apis) set of javascript. Not based on any particular spec version.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Expect nothing to work! Only very limited JS is currently supported. See files in &lt;code&gt;bench&lt;/code&gt; for examples.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;npm install -g porffor@latest&lt;/code&gt;&lt;/strong&gt;. It&#39;s that easy (hopefully) :)&lt;/p&gt; &#xA;&lt;h3&gt;Trying a REPL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf&lt;/code&gt;&lt;/strong&gt;. Just run it with no script file argument.&lt;/p&gt; &#xA;&lt;h3&gt;Running a JS file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf path/to/script.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compiling to Wasm&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf wasm path/to/script.js out.wasm&lt;/code&gt;&lt;/strong&gt;. Currently it does not use an import standard like WASI, so it is mostly unusable on its own.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling to native binaries&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Compiling to native binaries uses &lt;a href=&#34;https://raw.githubusercontent.com/CanadaHonk/porffor/main/#2c&#34;&gt;2c&lt;/a&gt;, Porffor&#39;s own Wasm -&amp;gt; C compiler, which is experimental.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf native path/to/script.js out(.exe)&lt;/code&gt;&lt;/strong&gt;. You can specify the compiler with &lt;code&gt;--compiler=clang|gcc|zig&lt;/code&gt; (&lt;code&gt;clang&lt;/code&gt; by default), and which optimization level to use with &lt;code&gt;--cO=Ofast|O3|O2|O1|O0&lt;/code&gt; (&lt;code&gt;Ofast&lt;/code&gt; by default). Output binaries are also stripped by default.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling to C&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Compiling to C uses &lt;a href=&#34;https://raw.githubusercontent.com/CanadaHonk/porffor/main/#2c&#34;&gt;2c&lt;/a&gt;, Porffor&#39;s own Wasm -&amp;gt; C compiler, which is experimental.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf c path/to/script.js (out.c)&lt;/code&gt;&lt;/strong&gt;. When not including an output file, it will be printed to stdout instead.&lt;/p&gt; &#xA;&lt;h3&gt;Profiling a JS file&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Very experimental WIP feature!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf profile path/to/script.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging a JS file&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Very experimental WIP feature!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf debug path/to/script.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging the compiled Wasm of a JS file&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Very experimental WIP feature!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;porf debug-wasm path/to/script.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--parser=acorn|@babel/parser|meriyah|hermes-parser&lt;/code&gt; (default: &lt;code&gt;acorn&lt;/code&gt;) to set which parser to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--parse-types&lt;/code&gt; to enable parsing type annotations/typescript. if &lt;code&gt;-parser&lt;/code&gt; is unset, changes default to &lt;code&gt;@babel/parser&lt;/code&gt;. does not type check&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--opt-types&lt;/code&gt; to perform optimizations using type annotations as compiler hints. does not type check&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--valtype=i32|i64|f64&lt;/code&gt; (default: &lt;code&gt;f64&lt;/code&gt;) to set valtype&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-O0&lt;/code&gt; to disable opt&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-O1&lt;/code&gt; (default) to enable basic opt (simplify insts, treeshake wasm imports)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-O2&lt;/code&gt; to enable advanced opt (inlining). unstable!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-O3&lt;/code&gt; to enable advanceder opt (precompute const math). unstable!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Limited async support&lt;/li&gt; &#xA; &lt;li&gt;No variables between scopes (except args and globals)&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;eval()&lt;/code&gt;/&lt;code&gt;Function()&lt;/code&gt; etc (since it is AOT)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sub-engines&lt;/h2&gt; &#xA;&lt;h3&gt;Asur&lt;/h3&gt; &#xA;&lt;p&gt;Asur is Porffor&#39;s own Wasm engine; it is an intentionally simple interpreter written in JS. It is very WIP. See &lt;a href=&#34;https://raw.githubusercontent.com/CanadaHonk/porffor/main/asur/README.md&#34;&gt;its readme&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Rhemyn&lt;/h3&gt; &#xA;&lt;p&gt;Rhemyn is Porffor&#39;s own regex engine; it compiles literal regex to Wasm bytecode AOT (remind you of anything?). It is quite basic and WIP. See &lt;a href=&#34;https://raw.githubusercontent.com/CanadaHonk/porffor/main/rhemyn/README.md&#34;&gt;its readme&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;2c&lt;/h3&gt; &#xA;&lt;p&gt;2c is Porffor&#39;s own Wasm -&amp;gt; C compiler, using generated Wasm bytecode and internal info to generate specific and efficient/fast C code. Little boilerplate/preluded code or required external files, just for CLI binaries (not like wasm2c very much).&lt;/p&gt; &#xA;&lt;h2&gt;Supported&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/CanadaHonk/porffor/main/#optimizations&#34;&gt;optimizations&lt;/a&gt; for opts implemented/supported.&lt;/p&gt; &#xA;&lt;h3&gt;Proposals&lt;/h3&gt; &#xA;&lt;p&gt;These include some early (stage 1/0) and/or dead (last commit years ago) proposals but &lt;em&gt;I&lt;/em&gt; think they are pretty neat, so.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Math&lt;/code&gt; proposals (stage 1/0)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Richienb/proposal-math-clamp&#34;&gt;&lt;code&gt;Math.clamp&lt;/code&gt; Proposal&lt;/a&gt;: &lt;code&gt;Math.clamp&lt;/code&gt; (stage 0 - last commit april 2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rwaldron/proposal-math-extensions&#34;&gt;&lt;code&gt;Math&lt;/code&gt; Extensions Proposal&lt;/a&gt;: &lt;code&gt;Math.scale&lt;/code&gt;, &lt;code&gt;Math.radians&lt;/code&gt;, &lt;code&gt;Math.degrees&lt;/code&gt;, &lt;code&gt;Math.RAD_PER_DEG&lt;/code&gt;, &lt;code&gt;Math.DEG_PER_RAD&lt;/code&gt; (stage 1 - last commit september 2020)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-Math.signbit&#34;&gt;&lt;code&gt;Math.signbit&lt;/code&gt; Proposal&lt;/a&gt;: &lt;code&gt;Math.signbit&lt;/code&gt; (stage 1 - last commit february 2020)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Number literals&lt;/li&gt; &#xA; &lt;li&gt;Declaring functions&lt;/li&gt; &#xA; &lt;li&gt;Calling functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;return&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Basic declarations (&lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;var&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Some basic integer operators (&lt;code&gt;+-/*%&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Some basic integer bitwise operators (&lt;code&gt;&amp;amp;|&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Equality operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;GT/LT operators (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Some unary operators (&lt;code&gt;!&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Logical operators (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Declaring multiple variables in one (&lt;code&gt;let a, b = 0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Array destructuring (&lt;code&gt;let [a, ...b] = foo&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Global variables (&lt;code&gt;var&lt;/code&gt;/none in top scope)&lt;/li&gt; &#xA; &lt;li&gt;Booleans&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;if&lt;/code&gt; and &lt;code&gt;if ... else&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Anonymous functions&lt;/li&gt; &#xA; &lt;li&gt;Setting functions using vars (&lt;code&gt;const foo = function() { ... }&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Arrow functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update expressions (&lt;code&gt;a++&lt;/code&gt;, &lt;code&gt;++b&lt;/code&gt;, &lt;code&gt;c--&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for&lt;/code&gt; loops (&lt;code&gt;for (let i = 0; i &amp;lt; N; i++)&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Basic objects (no prototypes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;console.log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Named export funcs&lt;/li&gt; &#xA; &lt;li&gt;IIFE support&lt;/li&gt; &#xA; &lt;li&gt;Assignment operators (&lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Conditional/ternary operator (&lt;code&gt;cond ? a : b&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Recursive functions&lt;/li&gt; &#xA; &lt;li&gt;Bare returns (&lt;code&gt;return&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;throw&lt;/code&gt; (literals only, hack for &lt;code&gt;new Error&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Basic &lt;code&gt;try { ... } catch { ... }&lt;/code&gt; (no error given)&lt;/li&gt; &#xA; &lt;li&gt;Calling functions with non-matching arguments (eg &lt;code&gt;f(a, b); f(0); f(1, 2, 3);&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runtime errors for undeclared variables (&lt;code&gt;ReferenceError&lt;/code&gt;), not functions (&lt;code&gt;TypeError&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Array creation via &lt;code&gt;[]&lt;/code&gt; (eg &lt;code&gt;let arr = [ 1, 2, 3 ]&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Array member access via &lt;code&gt;arr[ind]&lt;/code&gt; (eg &lt;code&gt;arr[0]&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;String literals (&lt;code&gt;&#39;hello world&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;String member (char) access via &lt;code&gt;str[ind]&lt;/code&gt; (eg &lt;code&gt;str[0]&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;String concat (&lt;code&gt;+&lt;/code&gt;) (eg &lt;code&gt;&#39;a&#39; + &#39;b&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Truthy/falsy (eg &lt;code&gt;!&#39;&#39; == true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;String comparison (eg &lt;code&gt;&#39;a&#39; == &#39;a&#39;&lt;/code&gt;, &lt;code&gt;&#39;a&#39; != &#39;b&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for...of&lt;/code&gt; (arrays and strings)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Array member setting (&lt;code&gt;arr[0] = 2&lt;/code&gt;, &lt;code&gt;arr[0] += 2&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Array constructor (&lt;code&gt;Array(5)&lt;/code&gt;, &lt;code&gt;new Array(1, 2, 3)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Labelled statements (&lt;code&gt;foo: while (...)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;do...while&lt;/code&gt; loops&lt;/li&gt; &#xA; &lt;li&gt;Optional parameters (&lt;code&gt;(foo = &#39;bar&#39;) =&amp;gt; { ... }&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rest parameters (&lt;code&gt;(...foo) =&amp;gt; { ... }&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;this&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Constructors (&lt;code&gt;new Foo&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Classes (&lt;code&gt;class A {}&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Await (&lt;code&gt;await promise&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Built-ins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;isFinite()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Most of &lt;code&gt;Number&lt;/code&gt; (&lt;code&gt;MAX_VALUE&lt;/code&gt;, &lt;code&gt;MIN_VALUE&lt;/code&gt;, &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt;, &lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt;, &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, &lt;code&gt;EPSILON&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;isNaN&lt;/code&gt;, &lt;code&gt;isFinite&lt;/code&gt;, &lt;code&gt;isInteger&lt;/code&gt;, &lt;code&gt;isSafeInteger&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Most &lt;code&gt;Math&lt;/code&gt; funcs (&lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;sign&lt;/code&gt;, &lt;code&gt;round&lt;/code&gt;, &lt;code&gt;trunc&lt;/code&gt;, &lt;code&gt;clz32&lt;/code&gt;, &lt;code&gt;fround&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log2&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;expm1&lt;/code&gt;, &lt;code&gt;log1p&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;cbrt&lt;/code&gt;, &lt;code&gt;hypot&lt;/code&gt;, &lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;cos&lt;/code&gt;, &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;asinh&lt;/code&gt;, &lt;code&gt;acosh&lt;/code&gt;, &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;asin&lt;/code&gt;, &lt;code&gt;acos&lt;/code&gt;, &lt;code&gt;atan&lt;/code&gt;, &lt;code&gt;atan2&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Basic &lt;code&gt;globalThis&lt;/code&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Basic &lt;code&gt;Boolean&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Basic &lt;code&gt;eval&lt;/code&gt; for literals&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Math.random()&lt;/code&gt; using self-made xorshift128+ PRNG&lt;/li&gt; &#xA; &lt;li&gt;Some of &lt;code&gt;performance&lt;/code&gt; (&lt;code&gt;now()&lt;/code&gt;, &lt;code&gt;timeOrigin&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Most of &lt;code&gt;Array.prototype&lt;/code&gt; (&lt;code&gt;at&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;lastIndexOf&lt;/code&gt;, &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;toReversed&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;findLast&lt;/code&gt;, &lt;code&gt;findIndex&lt;/code&gt;, &lt;code&gt;findLastIndex&lt;/code&gt;, &lt;code&gt;every&lt;/code&gt;, &lt;code&gt;some&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduceRight&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Most of &lt;code&gt;Array&lt;/code&gt; (&lt;code&gt;of&lt;/code&gt;, &lt;code&gt;isArray&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Most of &lt;code&gt;String.prototype&lt;/code&gt; (&lt;code&gt;at&lt;/code&gt;, &lt;code&gt;charAt&lt;/code&gt;, &lt;code&gt;charCodeAt&lt;/code&gt;, &lt;code&gt;toUpperCase&lt;/code&gt;, &lt;code&gt;toLowerCase&lt;/code&gt;, &lt;code&gt;startsWith&lt;/code&gt;, &lt;code&gt;endsWith&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;lastIndexOf&lt;/code&gt;, &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;padStart&lt;/code&gt;, &lt;code&gt;padEnd&lt;/code&gt;, &lt;code&gt;substring&lt;/code&gt;, &lt;code&gt;substr&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;trimStart&lt;/code&gt;, &lt;code&gt;trimEnd&lt;/code&gt;, &lt;code&gt;trim&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;blink&lt;/code&gt;, &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt;, &lt;code&gt;italics&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;strike&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;sup&lt;/code&gt;, &lt;code&gt;trimLeft&lt;/code&gt;, &lt;code&gt;trimRight&lt;/code&gt;, &lt;code&gt;trim&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Some of &lt;code&gt;crypto&lt;/code&gt; (&lt;code&gt;randomUUID&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;btoa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Most of &lt;code&gt;Number.prototype&lt;/code&gt; (&lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;toFixed&lt;/code&gt;, &lt;code&gt;toExponential&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Spec-compliant &lt;code&gt;Date&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;WIP typed arrays (&lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;Int32Array&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;Synchronous &lt;code&gt;Promise&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports i32, i64, and f64 for valtypes&lt;/li&gt; &#xA; &lt;li&gt;Intrinsic functions (see below)&lt;/li&gt; &#xA; &lt;li&gt;Inlining wasm via &lt;code&gt;asm`...&lt;/code&gt;` &#34;macro&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Porffor uses a unique versioning system, here&#39;s an example: &lt;code&gt;0.18.2+2aa3f0589&lt;/code&gt;. Let&#39;s break it down:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt; - major, always &lt;code&gt;0&lt;/code&gt; as Porffor is not ready yet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;18&lt;/code&gt; - minor, total Test262 pass percentage (floored to nearest int)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt; - micro, build number for that minor (incremented each publish/git push)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2aa3f0589&lt;/code&gt; - commit hash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;For the features it supports most of the time&lt;/em&gt;, Porffor is &lt;em&gt;blazingly fast&lt;/em&gt; compared to most interpreters and common engines running without JIT. For those with JIT, it is usually slower by default, but can catch up with compiler arguments and typed input, even more so when compiling to native binaries.&lt;/p&gt; &#xA;&lt;h2&gt;Optimizations&lt;/h2&gt; &#xA;&lt;p&gt;Mostly for reducing size. I do not really care about compiler perf/time as long as it is reasonable. We do not use/rely on external opt tools (&lt;code&gt;wasm-opt&lt;/code&gt;, etc), instead doing optimization inside the compiler itself creating even smaller code sizes than &lt;code&gt;wasm-opt&lt;/code&gt; itself can produce as we have more internal information.&lt;/p&gt; &#xA;&lt;h3&gt;Traditional opts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inlining functions (WIP, limited)&lt;/li&gt; &#xA; &lt;li&gt;Inline const math ops&lt;/li&gt; &#xA; &lt;li&gt;Tail calls (behind flag &lt;code&gt;--tail-call&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wasm transforms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;local.set&lt;/code&gt;, &lt;code&gt;local.get&lt;/code&gt; -&amp;gt; &lt;code&gt;local.tee&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i32.const 0&lt;/code&gt;, &lt;code&gt;i32.eq&lt;/code&gt; -&amp;gt; &lt;code&gt;i32.eqz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i64.extend_i32_s&lt;/code&gt;, &lt;code&gt;i32.wrap_i64&lt;/code&gt; -&amp;gt; ``&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f64.convert_i32_u&lt;/code&gt;, &lt;code&gt;i32.trunc_sat_f64_s&lt;/code&gt; -&amp;gt; ``&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;return&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; -&amp;gt; &lt;code&gt;end&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change const, convert to const of converted valtype (eg &lt;code&gt;f64.const&lt;/code&gt;, &lt;code&gt;i32.trunc_sat_f64_s -&amp;gt; &lt;/code&gt;i32.const`)&lt;/li&gt; &#xA; &lt;li&gt;Remove some redundant sets/gets&lt;/li&gt; &#xA; &lt;li&gt;Remove unneeded single just used vars&lt;/li&gt; &#xA; &lt;li&gt;Remove unneeded blocks (no &lt;code&gt;br&lt;/code&gt;s inside)&lt;/li&gt; &#xA; &lt;li&gt;Remove unused imports&lt;/li&gt; &#xA; &lt;li&gt;Use data segments for initing arrays/strings&lt;/li&gt; &#xA; &lt;li&gt;(Likely more not documented yet, todo)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wasm module&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type cache/index (no repeated types)&lt;/li&gt; &#xA; &lt;li&gt;No main func if empty (and other exports)&lt;/li&gt; &#xA; &lt;li&gt;No tags if unused/optimized out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test262&lt;/h2&gt; &#xA;&lt;p&gt;Porffor can run Test262 via some hacks/transforms which remove unsupported features whilst still doing the same asserts (eg simpler error messages using literals only). It currently passes &amp;gt;14% (see latest commit desc for latest and details). Use &lt;code&gt;node test262&lt;/code&gt; to test, it will also show a difference of overall results between the last commit and current results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/CanadaHonk/porffor/assets/19228318/5320da7d-e945-4d16-857b-499f3a6c1180&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Codebase&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;compiler&lt;/code&gt;: contains the compiler itself&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;2c.js&lt;/code&gt;: porffor&#39;s custom wasm-to-c engine&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;allocators.js&lt;/code&gt;: static and dynamic allocators to power various language features&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;assemble.js&lt;/code&gt;: assembles wasm ops and metadata into a wasm module/file&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;builtins.js&lt;/code&gt;: all manually written built-ins of the engine (spec, custom. vars, funcs)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;builtins_object.js&lt;/code&gt;: all the various built-in objects (think &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;globalThis&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;builtins_precompiled.js&lt;/code&gt;: dynamically generated builtins from the &lt;code&gt;builtins/&lt;/code&gt; folder&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;codegen.js&lt;/code&gt;: code (wasm) generation, ast -&amp;gt; wasm. The bulk of the effort&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cyclone.js&lt;/code&gt;: wasm partial constant evaluator (it is fast and dangerous hence &#34;cyclone&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;decompile.js&lt;/code&gt;: basic wasm decompiler for debug info&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;diagram.js&lt;/code&gt;: produces &lt;a href=&#34;https://mermaid.js.org&#34;&gt;Mermaid&lt;/a&gt; graphs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;embedding.js&lt;/code&gt;: utils for embedding consts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;encoding.js&lt;/code&gt;: utils for encoding things as bytes as wasm expects&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;expression.js&lt;/code&gt;: mapping most operators to an opcode (advanced are as built-ins eg &lt;code&gt;f64_%&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;havoc.js&lt;/code&gt;: wasm rewrite library (it wreaks havoc upon wasm bytecode hence &#34;havoc&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;index.js&lt;/code&gt;: doing all the compiler steps, takes code in, wasm out&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;opt.js&lt;/code&gt;: self-made wasm bytecode optimizer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;parse.js&lt;/code&gt;: parser simply wrapping acorn&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pgo.js&lt;/code&gt;: a profile guided optimizer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;precompile.js&lt;/code&gt;: the tool to generate &lt;code&gt;builtins_precompied.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prefs.js&lt;/code&gt;: a utility to read command line arguments&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prototype.js&lt;/code&gt;: some builtin prototype functions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;types.js&lt;/code&gt;: definitions for each of the builtin types&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;wasmSpec.js&lt;/code&gt;: &#34;enums&#34;/info from wasm spec&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;wrap.js&lt;/code&gt;: wrapper for compiler which instantiates and produces nice exports&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;runner&lt;/code&gt;: contains utils for running JS with the compiler&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;index.js&lt;/code&gt;: the main file, you probably want to use this&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;info.js&lt;/code&gt;: runs with extra info printed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repl.js&lt;/code&gt;: basic repl (uses &lt;code&gt;node:repl&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rhemyn&lt;/code&gt;: contains &lt;a href=&#34;https://raw.githubusercontent.com/CanadaHonk/porffor/main/#rhemyn&#34;&gt;Rhemyn&lt;/a&gt; - our regex engine (used by Porffor)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;compile.js&lt;/code&gt;: compiles regex ast into wasm bytecode&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;parse.js&lt;/code&gt;: own regex parser&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;test&lt;/code&gt;: contains many test files for majority of supported features&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;test262&lt;/code&gt;: test262 runner and utils&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usecases&lt;/h2&gt; &#xA;&lt;p&gt;Currently, Porffor is seriously limited in features and functionality, however it has some key benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Safety. As Porffor is written in JS, a memory-safe language*, and compiles JS to Wasm, a fully sandboxed environment*, it is quite safe. (* These rely on the underlying implementations being secure. You could also run Wasm, or even Porffor itself, with an interpreter instead of a JIT for bonus security points too.)&lt;/li&gt; &#xA; &lt;li&gt;Compiling JS to native binaries. This is still very early!&lt;/li&gt; &#xA; &lt;li&gt;Inline Wasm for when you want to beat the compiler in performance, or just want fine grained functionality.&lt;/li&gt; &#xA; &lt;li&gt;Potential for SIMD operations and other lower level concepts.&lt;/li&gt; &#xA; &lt;li&gt;More in future probably?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;p&gt;No particular order and no guarentees, just what could happen soon™&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asur &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support memory&lt;/li&gt; &#xA;   &lt;li&gt;Support exceptions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Exceptions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rethrowing inside catch&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optimizations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rewrite local indexes per func for smallest local header and remove unused idxs&lt;/li&gt; &#xA;   &lt;li&gt;Smarter inline selection (snapshots?)&lt;/li&gt; &#xA;   &lt;li&gt;Memory alignment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Runtime &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WASI target&lt;/li&gt; &#xA;   &lt;li&gt;Run precompiled Wasm file if given&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cool proposals &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-optional-chaining-assignment&#34;&gt;Optional Chaining Assignment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-integer-and-modulus-math&#34;&gt;Modulus and Additional Integer Math&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-array-equality&#34;&gt;Array Equality&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-Declarations-in-Conditionals&#34;&gt;Declarations in Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-seeded-random&#34;&gt;Seeded Pseudo-Random Numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-do-expressions&#34;&gt;&lt;code&gt;do&lt;/code&gt; expressions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Kingwl/proposal-string-trim-characters&#34;&gt;String Trim Characters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Posts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Inlining investigation&lt;/li&gt; &#xA;   &lt;li&gt;JS -&amp;gt; Native&lt;/li&gt; &#xA;   &lt;li&gt;Precompiled TS built-ins&lt;/li&gt; &#xA;   &lt;li&gt;Asur&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;escape()&lt;/code&gt; optimization&lt;/li&gt; &#xA;   &lt;li&gt;PGO&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Self hosted testing?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;VSCode extension&lt;/h2&gt; &#xA;&lt;p&gt;There is a vscode extension in &lt;code&gt;vscode-ext&lt;/code&gt; which tweaks JS syntax highlighting to be nicer with porffor features (eg highlighting wasm inside of inline asm).&lt;/p&gt; &#xA;&lt;h2&gt;Wasm proposals used&lt;/h2&gt; &#xA;&lt;p&gt;Porffor intentionally does not use Wasm proposals which are not commonly implemented yet (eg GC) so it can be used in as many places as possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-value &lt;strong&gt;(required)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Non-trapping float-to-int conversions &lt;strong&gt;(required)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bulk memory operations (optional, can get away without sometimes)&lt;/li&gt; &#xA; &lt;li&gt;Exception handling (optional, only for errors)&lt;/li&gt; &#xA; &lt;li&gt;Tail calls (opt-in, off by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;1. Why the name?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;purple&lt;/code&gt; in Welsh is &lt;code&gt;porffor&lt;/code&gt;. Why purple?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No other JS engine is purple colored&lt;/li&gt; &#xA; &lt;li&gt;Purple is pretty cool&lt;/li&gt; &#xA; &lt;li&gt;Purple apparently represents &#34;ambition&#34;, which is one word to describe this project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Why at all?&lt;/h3&gt; &#xA;&lt;p&gt;Yes!&lt;/p&gt; &#xA;&lt;h2&gt;3. Isn&#39;t this the same as AssemblyScript/other Wasm langs?&lt;/h2&gt; &#xA;&lt;p&gt;No. they are not alike at all internally and have very different goals/ideals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Porffor is made as a generic JS engine, not for Wasm stuff specifically&lt;/li&gt; &#xA; &lt;li&gt;Porffor primarily consumes JS&lt;/li&gt; &#xA; &lt;li&gt;Porffor is written in pure JS and compiles itself, not using Binaryen/etc&lt;/li&gt; &#xA; &lt;li&gt;(Also I didn&#39;t know it existed when I started this, lol)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pgvector/pgvector</title>
    <updated>2024-08-08T01:27:56Z</updated>
    <id>tag:github.com,2024-08-08:/pgvector/pgvector</id>
    <link href="https://github.com/pgvector/pgvector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgvector&lt;/h1&gt; &#xA;&lt;p&gt;Open-source vector similarity search for Postgres&lt;/p&gt; &#xA;&lt;p&gt;Store your vectors with the rest of your data. Supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;exact and approximate nearest neighbor search&lt;/li&gt; &#xA; &lt;li&gt;single-precision, half-precision, binary, and sparse vectors&lt;/li&gt; &#xA; &lt;li&gt;L2 distance, inner product, cosine distance, L1 distance, Hamming distance, and Jaccard distance&lt;/li&gt; &#xA; &lt;li&gt;any &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#languages&#34;&gt;language&lt;/a&gt; with a Postgres client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plus &lt;a href=&#34;https://en.wikipedia.org/wiki/ACID&#34;&gt;ACID&lt;/a&gt; compliance, point-in-time recovery, JOINs, and all of the other &lt;a href=&#34;https://www.postgresql.org/about/&#34;&gt;great features&lt;/a&gt; of Postgres&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector/actions&#34;&gt;&lt;img src=&#34;https://github.com/pgvector/pgvector/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Linux and Mac&lt;/h3&gt; &#xA;&lt;p&gt;Compile and install the extension (supports Postgres 12+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /tmp&#xA;git clone --branch v0.7.4 https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;make&#xA;make install # may need sudo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes---linux-and-mac&#34;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; &#xA;&lt;p&gt;You can also install it with &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&#34;&gt;Docker&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#pgxn&#34;&gt;PGXN&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#apt&#34;&gt;APT&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#yum&#34;&gt;Yum&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#pkg&#34;&gt;pkg&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&#34;&gt;conda-forge&lt;/a&gt;, and it comes preinstalled with &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#postgresapp&#34;&gt;Postgres.app&lt;/a&gt; and many &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#hosted-postgres&#34;&gt;hosted providers&lt;/a&gt;. There are also instructions for &lt;a href=&#34;https://github.com/pgvector/setup-pgvector&#34;&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#download-and-install-the-tools&#34;&gt;C++ support in Visual Studio&lt;/a&gt; is installed, and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;call &#34;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The exact path will vary depending on your Visual Studio version and edition&lt;/p&gt; &#xA;&lt;p&gt;Then use &lt;code&gt;nmake&lt;/code&gt; to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;set &#34;PGROOT=C:\Program Files\PostgreSQL\16&#34;&#xA;cd %TEMP%&#xA;git clone --branch v0.7.4 https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;nmake /F Makefile.win&#xA;nmake /F Makefile.win install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation-notes---windows&#34;&gt;installation notes&lt;/a&gt; if you run into issues&lt;/p&gt; &#xA;&lt;p&gt;You can also install it with &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#docker&#34;&gt;Docker&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#conda-forge&#34;&gt;conda-forge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Enable the extension (do this once in each database where you want to use it)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsql&#34;&gt;CREATE EXTENSION vector;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a vector column with 3 dimensions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also supports inner product (&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt;), cosine distance (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;), and L1 distance (&lt;code&gt;&amp;lt;+&amp;gt;&lt;/code&gt;, added in 0.7.0)&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product since Postgres only supports &lt;code&gt;ASC&lt;/code&gt; order index scans on operators&lt;/p&gt; &#xA;&lt;h2&gt;Storing&lt;/h2&gt; &#xA;&lt;p&gt;Create a new table with a vector column&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add a vector column to an existing table&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE items ADD COLUMN embedding vector(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (embedding) VALUES (&#39;[1,2,3]&#39;), (&#39;[4,5,6]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or load vectors in bulk using &lt;code&gt;COPY&lt;/code&gt; (&lt;a href=&#34;https://github.com/pgvector/pgvector-python/raw/master/examples/bulk_loading.py&#34;&gt;example&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;COPY items (embedding) FROM STDIN WITH (FORMAT BINARY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upsert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (id, embedding) VALUES (1, &#39;[1,2,3]&#39;), (2, &#39;[4,5,6]&#39;)&#xA;    ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE items SET embedding = &#39;[1,2,3]&#39; WHERE id = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM items WHERE id = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Querying&lt;/h2&gt; &#xA;&lt;p&gt;Get the nearest neighbors to a vector&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported distance functions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; - L2 distance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; - (negative) inner product&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; - cosine distance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;+&amp;gt;&lt;/code&gt; - L1 distance (added in 0.7.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Get the nearest neighbors to a row&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items WHERE id != 1 ORDER BY embedding &amp;lt;-&amp;gt; (SELECT embedding FROM items WHERE id = 1) LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get rows within a certain distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items WHERE embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; &amp;lt; 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Combine with &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; to use an index&lt;/p&gt; &#xA;&lt;h4&gt;Distances&lt;/h4&gt; &#xA;&lt;p&gt;Get the distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; AS distance FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For inner product, multiply by -1 (since &lt;code&gt;&amp;lt;#&amp;gt;&lt;/code&gt; returns the negative inner product)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsql&#34;&gt;SELECT (embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39;) * -1 AS inner_product FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For cosine similarity, use 1 - cosine distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) AS cosine_similarity FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Aggregates&lt;/h4&gt; &#xA;&lt;p&gt;Average vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT AVG(embedding) FROM items;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Average groups of vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT category_id, AVG(embedding) FROM items GROUP BY category_id;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Indexing&lt;/h2&gt; &#xA;&lt;p&gt;By default, pgvector performs exact nearest neighbor search, which provides perfect recall.&lt;/p&gt; &#xA;&lt;p&gt;You can add an index to use approximate nearest neighbor search, which trades some recall for speed. Unlike typical indexes, you will see different results for queries after adding an approximate index.&lt;/p&gt; &#xA;&lt;p&gt;Supported index types are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#hnsw&#34;&gt;HNSW&lt;/a&gt; - added in 0.5.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#ivfflat&#34;&gt;IVFFlat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HNSW&lt;/h2&gt; &#xA;&lt;p&gt;An HNSW index creates a multilayer graph. It has better query performance than IVFFlat (in terms of speed-recall tradeoff), but has slower build times and uses more memory. Also, an index can be created without any data in the table since there isn’t a training step like IVFFlat.&lt;/p&gt; &#xA;&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; &#xA;&lt;p&gt;L2 distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Use &lt;code&gt;halfvec_l2_ops&lt;/code&gt; for &lt;code&gt;halfvec&lt;/code&gt; and &lt;code&gt;sparsevec_l2_ops&lt;/code&gt; for &lt;code&gt;sparsevec&lt;/code&gt; (and similar with the other distance functions)&lt;/p&gt; &#xA;&lt;p&gt;Inner product&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding vector_ip_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cosine distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding vector_cosine_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;L1 distance - added in 0.7.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l1_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hamming distance - added in 0.7.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding bit_hamming_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jaccard distance - added in 0.7.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding bit_jaccard_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported types are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; - up to 2,000 dimensions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;halfvec&lt;/code&gt; - up to 4,000 dimensions (added in 0.7.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bit&lt;/code&gt; - up to 64,000 dimensions (added in 0.7.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sparsevec&lt;/code&gt; - up to 1,000 non-zero elements (added in 0.7.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Index Options&lt;/h3&gt; &#xA;&lt;p&gt;Specify HNSW parameters&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; - the max number of connections per layer (16 by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ef_construction&lt;/code&gt; - the size of the dynamic candidate list for constructing the graph (64 by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WITH (m = 16, ef_construction = 64);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A higher value of &lt;code&gt;ef_construction&lt;/code&gt; provides better recall at the cost of index build time / insert speed.&lt;/p&gt; &#xA;&lt;h3&gt;Query Options&lt;/h3&gt; &#xA;&lt;p&gt;Specify the size of the dynamic candidate list for search (40 by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET hnsw.ef_search = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A higher value provides better recall at the cost of speed.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL hnsw.ef_search = 100;&#xA;SELECT ...&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Index Build Time&lt;/h3&gt; &#xA;&lt;p&gt;Indexes build significantly faster when the graph fits into &lt;code&gt;maintenance_work_mem&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET maintenance_work_mem = &#39;8GB&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A notice is shown when the graph no longer fits&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;NOTICE:  hnsw graph no longer fits into maintenance_work_mem after 100000 tuples&#xA;DETAIL:  Building will take significantly more time.&#xA;HINT:  Increase maintenance_work_mem to speed up builds.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Do not set &lt;code&gt;maintenance_work_mem&lt;/code&gt; so high that it exhausts the memory on the server&lt;/p&gt; &#xA;&lt;p&gt;Like other index types, it’s faster to create an index after loading your initial data&lt;/p&gt; &#xA;&lt;p&gt;Starting with 0.6.0, you can also speed up index creation by increasing the number of parallel workers (2 by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET max_parallel_maintenance_workers = 7; -- plus leader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a large number of workers, you may also need to increase &lt;code&gt;max_parallel_workers&lt;/code&gt; (8 by default)&lt;/p&gt; &#xA;&lt;h3&gt;Indexing Progress&lt;/h3&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&#34;&gt;indexing progress&lt;/a&gt; with Postgres 12+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT phase, round(100.0 * blocks_done / nullif(blocks_total, 0), 1) AS &#34;%&#34; FROM pg_stat_progress_create_index;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The phases for HNSW are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;IVFFlat&lt;/h2&gt; &#xA;&lt;p&gt;An IVFFlat index divides vectors into lists, and then searches a subset of those lists that are closest to the query vector. It has faster build times and uses less memory than HNSW, but has lower query performance (in terms of speed-recall tradeoff).&lt;/p&gt; &#xA;&lt;p&gt;Three keys to achieving good recall are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the index &lt;em&gt;after&lt;/em&gt; the table has some data&lt;/li&gt; &#xA; &lt;li&gt;Choose an appropriate number of lists - a good place to start is &lt;code&gt;rows / 1000&lt;/code&gt; for up to 1M rows and &lt;code&gt;sqrt(rows)&lt;/code&gt; for over 1M rows&lt;/li&gt; &#xA; &lt;li&gt;When querying, specify an appropriate number of &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#query-options&#34;&gt;probes&lt;/a&gt; (higher is better for recall, lower is better for speed) - a good place to start is &lt;code&gt;sqrt(lists)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Add an index for each distance function you want to use.&lt;/p&gt; &#xA;&lt;p&gt;L2 distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Use &lt;code&gt;halfvec_l2_ops&lt;/code&gt; for &lt;code&gt;halfvec&lt;/code&gt; (and similar with the other distance functions)&lt;/p&gt; &#xA;&lt;p&gt;Inner product&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_ip_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cosine distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hamming distance - added in 0.7.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding bit_hamming_ops) WITH (lists = 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported types are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt; - up to 2,000 dimensions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;halfvec&lt;/code&gt; - up to 4,000 dimensions (added in 0.7.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bit&lt;/code&gt; - up to 64,000 dimensions (added in 0.7.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Query Options&lt;/h3&gt; &#xA;&lt;p&gt;Specify the number of probes (1 by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET ivfflat.probes = 10;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A higher value provides better recall at the cost of speed, and it can be set to the number of lists for exact nearest neighbor search (at which point the planner won’t use the index)&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;SET LOCAL&lt;/code&gt; inside a transaction to set it for a single query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL ivfflat.probes = 10;&#xA;SELECT ...&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Index Build Time&lt;/h3&gt; &#xA;&lt;p&gt;Speed up index creation on large tables by increasing the number of parallel workers (2 by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET max_parallel_maintenance_workers = 7; -- plus leader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a large number of workers, you may also need to increase &lt;code&gt;max_parallel_workers&lt;/code&gt; (8 by default)&lt;/p&gt; &#xA;&lt;h3&gt;Indexing Progress&lt;/h3&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://www.postgresql.org/docs/current/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING&#34;&gt;indexing progress&lt;/a&gt; with Postgres 12+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT phase, round(100.0 * tuples_done / nullif(tuples_total, 0), 1) AS &#34;%&#34; FROM pg_stat_progress_create_index;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The phases for IVFFlat are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;initializing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;performing k-means&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assigning tuples&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;loading tuples&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;%&lt;/code&gt; is only populated during the &lt;code&gt;loading tuples&lt;/code&gt; phase&lt;/p&gt; &#xA;&lt;h2&gt;Filtering&lt;/h2&gt; &#xA;&lt;p&gt;There are a few ways to index nearest neighbor queries with a &lt;code&gt;WHERE&lt;/code&gt; clause&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items WHERE category_id = 123 ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an index on one &lt;a href=&#34;https://www.postgresql.org/docs/current/indexes-multicolumn.html&#34;&gt;or more&lt;/a&gt; of the &lt;code&gt;WHERE&lt;/code&gt; columns for exact search&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items (category_id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a &lt;a href=&#34;https://www.postgresql.org/docs/current/indexes-partial.html&#34;&gt;partial index&lt;/a&gt; on the vector column for approximate search&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WHERE (category_id = 123);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://www.postgresql.org/docs/current/ddl-partitioning.html&#34;&gt;partitioning&lt;/a&gt; for approximate search on many different values of the &lt;code&gt;WHERE&lt;/code&gt; columns&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (embedding vector(3), category_id int) PARTITION BY LIST(category_id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Half-Precision Vectors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Added in 0.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;halfvec&lt;/code&gt; type to store half-precision vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding halfvec(3));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Half-Precision Indexing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Added in 0.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Index vectors at half precision for smaller indexes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw ((embedding::halfvec(3)) halfvec_l2_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding::halfvec(3) &amp;lt;-&amp;gt; &#39;[1,2,3]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Binary Vectors&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;bit&lt;/code&gt; type to store binary vectors (&lt;a href=&#34;https://github.com/pgvector/pgvector-python/raw/master/examples/hash_image_search.py&#34;&gt;example&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding bit(3));&#xA;INSERT INTO items (embedding) VALUES (&#39;000&#39;), (&#39;111&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors by Hamming distance (added in 0.7.0)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;~&amp;gt; &#39;101&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or (before 0.7.0)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY bit_count(embedding # &#39;101&#39;) LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also supports Jaccard distance (&lt;code&gt;&amp;lt;%&amp;gt;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Binary Quantization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Added in 0.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use expression indexing for binary quantization&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw ((binary_quantize(embedding)::bit(3)) bit_hamming_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors by Hamming distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) &amp;lt;~&amp;gt; binary_quantize(&#39;[1,-2,3]&#39;) LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Re-rank by the original vectors for better recall&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM (&#xA;    SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) &amp;lt;~&amp;gt; binary_quantize(&#39;[1,-2,3]&#39;) LIMIT 20&#xA;) ORDER BY embedding &amp;lt;=&amp;gt; &#39;[1,-2,3]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sparse Vectors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Added in 0.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;sparsevec&lt;/code&gt; type to store sparse vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding sparsevec(5));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Insert vectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO items (embedding) VALUES (&#39;{1:1,3:2,5:3}/5&#39;), (&#39;{1:4,3:5,5:6}/5&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The format is &lt;code&gt;{index1:value1,index2:value2}/dimensions&lt;/code&gt; and indices start at 1 like SQL arrays&lt;/p&gt; &#xA;&lt;p&gt;Get the nearest neighbors by L2 distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;{1:3,3:1,5:2}/5&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hybrid Search&lt;/h2&gt; &#xA;&lt;p&gt;Use together with Postgres &lt;a href=&#34;https://www.postgresql.org/docs/current/textsearch-intro.html&#34;&gt;full-text search&lt;/a&gt; for hybrid search.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT id, content FROM items, plainto_tsquery(&#39;hello search&#39;) query&#xA;    WHERE textsearch @@ query ORDER BY ts_rank_cd(textsearch, query) DESC LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/pgvector/pgvector-python/raw/master/examples/hybrid_search_rrf.py&#34;&gt;Reciprocal Rank Fusion&lt;/a&gt; or a &lt;a href=&#34;https://github.com/pgvector/pgvector-python/raw/master/examples/hybrid_search.py&#34;&gt;cross-encoder&lt;/a&gt; to combine results.&lt;/p&gt; &#xA;&lt;h2&gt;Indexing Subvectors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Added in 0.7.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use expression indexing to index subvectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw ((subvector(embedding, 1, 3)::vector(3)) vector_cosine_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the nearest neighbors by cosine distance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) &amp;lt;=&amp;gt; subvector(&#39;[1,2,3,4,5]&#39;::vector, 1, 3) LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Re-rank by the full vectors for better recall&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM (&#xA;    SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) &amp;lt;=&amp;gt; subvector(&#39;[1,2,3,4,5]&#39;::vector, 1, 3) LIMIT 20&#xA;) ORDER BY embedding &amp;lt;=&amp;gt; &#39;[1,2,3,4,5]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;h3&gt;Tuning&lt;/h3&gt; &#xA;&lt;p&gt;Use a tool like &lt;a href=&#34;https://pgtune.leopard.in.ua/&#34;&gt;PgTune&lt;/a&gt; to set initial values for Postgres server parameters. For instance, &lt;code&gt;shared_buffers&lt;/code&gt; should typically be 25% of the server’s memory. You can find the config file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SHOW config_file;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And check individual settings with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SHOW shared_buffers;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to restart Postgres for changes to take effect.&lt;/p&gt; &#xA;&lt;h3&gt;Loading&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;COPY&lt;/code&gt; for bulk loading data (&lt;a href=&#34;https://github.com/pgvector/pgvector-python/raw/master/examples/bulk_loading.py&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;COPY items (embedding) FROM STDIN WITH (FORMAT BINARY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add any indexes &lt;em&gt;after&lt;/em&gt; loading the initial data for best performance.&lt;/p&gt; &#xA;&lt;h3&gt;Indexing&lt;/h3&gt; &#xA;&lt;p&gt;See index build time for &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-build-time&#34;&gt;HNSW&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#index-build-time-1&#34;&gt;IVFFlat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In production environments, create indexes concurrently to avoid blocking writes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX CONCURRENTLY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querying&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; to debug performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;EXPLAIN ANALYZE SELECT * FROM items ORDER BY embedding &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Exact Search&lt;/h4&gt; &#xA;&lt;p&gt;To speed up queries without an index, increase &lt;code&gt;max_parallel_workers_per_gather&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET max_parallel_workers_per_gather = 4;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If vectors are normalized to length 1 (like &lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings/which-distance-function-should-i-use&#34;&gt;OpenAI embeddings&lt;/a&gt;), use inner product for best performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsql&#34;&gt;SELECT * FROM items ORDER BY embedding &amp;lt;#&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Approximate Search&lt;/h4&gt; &#xA;&lt;p&gt;To speed up queries with an IVFFlat index, increase the number of inverted lists (at the expense of recall).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vacuuming&lt;/h3&gt; &#xA;&lt;p&gt;Vacuuming can take a while for HNSW indexes. Speed it up by reindexing first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;REINDEX INDEX CONCURRENTLY index_name;&#xA;VACUUM table_name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Monitor performance with &lt;a href=&#34;https://www.postgresql.org/docs/current/pgstatstatements.html&#34;&gt;pg_stat_statements&lt;/a&gt; (be sure to add it to &lt;code&gt;shared_preload_libraries&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION pg_stat_statements;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the most time-consuming queries with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT query, calls, ROUND((total_plan_time + total_exec_time) / calls) AS avg_time_ms,&#xA;    ROUND((total_plan_time + total_exec_time) / 60000) AS total_time_min&#xA;    FROM pg_stat_statements ORDER BY total_plan_time + total_exec_time DESC LIMIT 20;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;total_plan_time + total_exec_time&lt;/code&gt; with &lt;code&gt;total_time&lt;/code&gt; for Postgres &amp;lt; 13&lt;/p&gt; &#xA;&lt;p&gt;Monitor recall by comparing results from approximate search with exact search.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL enable_indexscan = off; -- use exact search&#xA;SELECT ...&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scaling&lt;/h2&gt; &#xA;&lt;p&gt;Scale pgvector the same way you scale Postgres.&lt;/p&gt; &#xA;&lt;p&gt;Scale vertically by increasing memory, CPU, and storage on a single instance. Use existing tools to &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#tuning&#34;&gt;tune parameters&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#monitoring&#34;&gt;monitor performance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Scale horizontally with &lt;a href=&#34;https://www.postgresql.org/docs/current/hot-standby.html&#34;&gt;replicas&lt;/a&gt;, or use &lt;a href=&#34;https://github.com/citusdata/citus&#34;&gt;Citus&lt;/a&gt; or another approach for sharding (&lt;a href=&#34;https://github.com/pgvector/pgvector-python/raw/master/examples/citus.py&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;Use pgvector from any language with a Postgres client. You can even generate and store vectors in one language and query them in another.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Libraries / Examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-c&#34;&gt;pgvector-c&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-cpp&#34;&gt;pgvector-cpp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#, F#, Visual Basic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-dotnet&#34;&gt;pgvector-dotnet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-crystal&#34;&gt;pgvector-crystal&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-dart&#34;&gt;pgvector-dart&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-elixir&#34;&gt;pgvector-elixir&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-go&#34;&gt;pgvector-go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-haskell&#34;&gt;pgvector-haskell&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java, Kotlin, Groovy, Scala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-java&#34;&gt;pgvector-java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript, TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-node&#34;&gt;pgvector-node&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-julia&#34;&gt;pgvector-julia&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lisp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-lisp&#34;&gt;pgvector-lisp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-lua&#34;&gt;pgvector-lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-nim&#34;&gt;pgvector-nim&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-ocaml&#34;&gt;pgvector-ocaml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-perl&#34;&gt;pgvector-perl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-php&#34;&gt;pgvector-php&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-python&#34;&gt;pgvector-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-r&#34;&gt;pgvector-r&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-ruby&#34;&gt;pgvector-ruby&lt;/a&gt;, &lt;a href=&#34;https://github.com/ankane/neighbor&#34;&gt;Neighbor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-rust&#34;&gt;pgvector-rust&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-swift&#34;&gt;pgvector-swift&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector-zig&#34;&gt;pgvector-zig&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h4&gt;How many vectors can be stored in a single table?&lt;/h4&gt; &#xA;&lt;p&gt;A non-partitioned table has a limit of 32 TB by default in Postgres. A partitioned table can have thousands of partitions of that size.&lt;/p&gt; &#xA;&lt;h4&gt;Is replication supported?&lt;/h4&gt; &#xA;&lt;p&gt;Yes, pgvector uses the write-ahead log (WAL), which allows for replication and point-in-time recovery.&lt;/p&gt; &#xA;&lt;h4&gt;What if I want to index vectors with more than 2,000 dimensions?&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#half-precision-indexing&#34;&gt;half-precision indexing&lt;/a&gt; to index up to 4,000 dimensions or &lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#binary-quantization&#34;&gt;binary quantization&lt;/a&gt; to index up to 64,000 dimensions. Another option is &lt;a href=&#34;https://en.wikipedia.org/wiki/Dimensionality_reduction&#34;&gt;dimensionality reduction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Can I store vectors with different dimensions in the same column?&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;vector&lt;/code&gt; as the type (instead of &lt;code&gt;vector(3)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE embeddings (model_id bigint, item_id bigint, embedding vector, PRIMARY KEY (model_id, item_id));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, you can only create indexes on rows with the same number of dimensions (using &lt;a href=&#34;https://www.postgresql.org/docs/current/indexes-expressional.html&#34;&gt;expression&lt;/a&gt; and &lt;a href=&#34;https://www.postgresql.org/docs/current/indexes-partial.html&#34;&gt;partial&lt;/a&gt; indexing):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON embeddings USING hnsw ((embedding::vector(3)) vector_l2_ops) WHERE (model_id = 123);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and query with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM embeddings WHERE model_id = 123 ORDER BY embedding::vector(3) &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Can I store vectors with more precision?&lt;/h4&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;double precision[]&lt;/code&gt; or &lt;code&gt;numeric[]&lt;/code&gt; type to store vectors with more precision.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE items (id bigserial PRIMARY KEY, embedding double precision[]);&#xA;&#xA;-- use {} instead of [] for Postgres arrays&#xA;INSERT INTO items (embedding) VALUES (&#39;{1,2,3}&#39;), (&#39;{4,5,6}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, add a &lt;a href=&#34;https://www.postgresql.org/docs/current/ddl-constraints.html&#34;&gt;check constraint&lt;/a&gt; to ensure data can be converted to the &lt;code&gt;vector&lt;/code&gt; type and has the expected dimensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE items ADD CHECK (vector_dims(embedding::vector) = 3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://www.postgresql.org/docs/current/indexes-expressional.html&#34;&gt;expression indexing&lt;/a&gt; to index (at a lower precision):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX ON items USING hnsw ((embedding::vector(3)) vector_l2_ops);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and query with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM items ORDER BY embedding::vector(3) &amp;lt;-&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Do indexes need to fit into memory?&lt;/h4&gt; &#xA;&lt;p&gt;No, but like other index types, you’ll likely see better performance if they do. You can get the size of an index with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT pg_size_pretty(pg_relation_size(&#39;index_name&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;Why isn’t a query using an index?&lt;/h4&gt; &#xA;&lt;p&gt;The query needs to have an &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt;, and the &lt;code&gt;ORDER BY&lt;/code&gt; must be the result of a distance operator (not an expression) in ascending order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- index&#xA;ORDER BY embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39; LIMIT 5;&#xA;&#xA;-- no index&#xA;ORDER BY 1 - (embedding &amp;lt;=&amp;gt; &#39;[3,1,2]&#39;) DESC LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can encourage the planner to use an index for a query with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL enable_seqscan = off;&#xA;SELECT ...&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, if the table is small, a table scan may be faster.&lt;/p&gt; &#xA;&lt;h4&gt;Why isn’t a query using a parallel table scan?&lt;/h4&gt; &#xA;&lt;p&gt;The planner doesn’t consider &lt;a href=&#34;https://www.postgresql.org/docs/current/storage-toast.html&#34;&gt;out-of-line storage&lt;/a&gt; in cost estimates, which can make a serial scan look cheaper. You can reduce the cost of a parallel scan for a query with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN;&#xA;SET LOCAL min_parallel_table_scan_size = 1;&#xA;SET LOCAL parallel_setup_cost = 1;&#xA;SELECT ...&#xA;COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or choose to store vectors inline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE items ALTER COLUMN embedding SET STORAGE PLAIN;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Why are there less results for a query after adding an HNSW index?&lt;/h4&gt; &#xA;&lt;p&gt;Results are limited by the size of the dynamic candidate list (&lt;code&gt;hnsw.ef_search&lt;/code&gt;). There may be even less results due to dead tuples or filtering conditions in the query. We recommend setting &lt;code&gt;hnsw.ef_search&lt;/code&gt; to at least twice the &lt;code&gt;LIMIT&lt;/code&gt; of the query. If you need more than 500 results, use an IVFFlat index instead.&lt;/p&gt; &#xA;&lt;p&gt;Also, note that &lt;code&gt;NULL&lt;/code&gt; vectors are not indexed (as well as zero vectors for cosine distance).&lt;/p&gt; &#xA;&lt;h4&gt;Why are there less results for a query after adding an IVFFlat index?&lt;/h4&gt; &#xA;&lt;p&gt;The index was likely created with too little data for the number of lists. Drop the index until the table has more data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP INDEX index_name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results can also be limited by the number of probes (&lt;code&gt;ivfflat.probes&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Also, note that &lt;code&gt;NULL&lt;/code&gt; vectors are not indexed (as well as zero vectors for cosine distance).&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#vector-type&#34;&gt;Vector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#halfvec-type&#34;&gt;Halfvec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#bit-type&#34;&gt;Bit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#sparsevec-type&#34;&gt;Sparsevec&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Vector Type&lt;/h3&gt; &#xA;&lt;p&gt;Each vector takes &lt;code&gt;4 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a single-precision floating-point number (like the &lt;code&gt;real&lt;/code&gt; type in Postgres), and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Vectors can have up to 16,000 dimensions.&lt;/p&gt; &#xA;&lt;h3&gt;Vector Operators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;   &lt;td&gt;element-wise addition&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;element-wise subtraction&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;element-wise multiplication&lt;/td&gt; &#xA;   &lt;td&gt;0.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;||&lt;/td&gt; &#xA;   &lt;td&gt;concatenate&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;negative inner product&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;taxicab distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vector Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;binary_quantize(vector) → bit&lt;/td&gt; &#xA;   &lt;td&gt;binary quantize&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cosine_distance(vector, vector) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inner_product(vector, vector) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;inner product&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l1_distance(vector, vector) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;taxicab distance&lt;/td&gt; &#xA;   &lt;td&gt;0.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_distance(vector, vector) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_normalize(vector) → vector&lt;/td&gt; &#xA;   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;subvector(vector, integer, integer) → vector&lt;/td&gt; &#xA;   &lt;td&gt;subvector&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vector_dims(vector) → integer&lt;/td&gt; &#xA;   &lt;td&gt;number of dimensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vector_norm(vector) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean norm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vector Aggregate Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avg(vector) → vector&lt;/td&gt; &#xA;   &lt;td&gt;average&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum(vector) → vector&lt;/td&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;0.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Halfvec Type&lt;/h3&gt; &#xA;&lt;p&gt;Each half vector takes &lt;code&gt;2 * dimensions + 8&lt;/code&gt; bytes of storage. Each element is a half-precision floating-point number, and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Half vectors can have up to 16,000 dimensions.&lt;/p&gt; &#xA;&lt;h3&gt;Halfvec Operators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;   &lt;td&gt;element-wise addition&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;element-wise subtraction&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;element-wise multiplication&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;||&lt;/td&gt; &#xA;   &lt;td&gt;concatenate&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;negative inner product&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;taxicab distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Halfvec Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;binary_quantize(halfvec) → bit&lt;/td&gt; &#xA;   &lt;td&gt;binary quantize&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cosine_distance(halfvec, halfvec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inner_product(halfvec, halfvec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;inner product&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l1_distance(halfvec, halfvec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;taxicab distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_distance(halfvec, halfvec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_norm(halfvec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean norm&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_normalize(halfvec) → halfvec&lt;/td&gt; &#xA;   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;subvector(halfvec, integer, integer) → halfvec&lt;/td&gt; &#xA;   &lt;td&gt;subvector&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vector_dims(halfvec) → integer&lt;/td&gt; &#xA;   &lt;td&gt;number of dimensions&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Halfvec Aggregate Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avg(halfvec) → halfvec&lt;/td&gt; &#xA;   &lt;td&gt;average&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum(halfvec) → halfvec&lt;/td&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Bit Type&lt;/h3&gt; &#xA;&lt;p&gt;Each bit vector takes &lt;code&gt;dimensions / 8 + 8&lt;/code&gt; bytes of storage. See the &lt;a href=&#34;https://www.postgresql.org/docs/current/datatype-bit.html&#34;&gt;Postgres docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Bit Operators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;~&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hamming distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;%&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jaccard distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Bit Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hamming_distance(bit, bit) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Hamming distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jaccard_distance(bit, bit) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Jaccard distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Sparsevec Type&lt;/h3&gt; &#xA;&lt;p&gt;Each sparse vector takes &lt;code&gt;8 * non-zero elements + 16&lt;/code&gt; bytes of storage. Each element is a single-precision floating-point number, and all elements must be finite (no &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;). Sparse vectors can have up to 16,000 non-zero elements.&lt;/p&gt; &#xA;&lt;h3&gt;Sparsevec Operators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;#&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;negative inner product&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;+&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;taxicab distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Sparsevec Functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Added&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cosine_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;cosine distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inner_product(sparsevec, sparsevec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;inner product&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l1_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;taxicab distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_distance(sparsevec, sparsevec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean distance&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_norm(sparsevec) → double precision&lt;/td&gt; &#xA;   &lt;td&gt;Euclidean norm&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l2_normalize(sparsevec) → sparsevec&lt;/td&gt; &#xA;   &lt;td&gt;Normalize with Euclidean norm&lt;/td&gt; &#xA;   &lt;td&gt;0.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation Notes - Linux and Mac&lt;/h2&gt; &#xA;&lt;h3&gt;Postgres Location&lt;/h3&gt; &#xA;&lt;p&gt;If your machine has multiple Postgres installations, specify the path to &lt;a href=&#34;https://www.postgresql.org/docs/current/app-pgconfig.html&#34;&gt;pg_config&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PG_CONFIG=/Library/PostgreSQL/16/bin/pg_config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then re-run the installation instructions (run &lt;code&gt;make clean&lt;/code&gt; before &lt;code&gt;make&lt;/code&gt; if needed). If &lt;code&gt;sudo&lt;/code&gt; is needed for &lt;code&gt;make install&lt;/code&gt;, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo --preserve-env=PG_CONFIG make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A few common paths on Mac are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EDB installer - &lt;code&gt;/Library/PostgreSQL/16/bin/pg_config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homebrew (arm64) - &lt;code&gt;/opt/homebrew/opt/postgresql@16/bin/pg_config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homebrew (x86-64) - &lt;code&gt;/usr/local/opt/postgresql@16/bin/pg_config&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;16&lt;/code&gt; with your Postgres server version&lt;/p&gt; &#xA;&lt;h3&gt;Missing Header&lt;/h3&gt; &#xA;&lt;p&gt;If compilation fails with &lt;code&gt;fatal error: postgres.h: No such file or directory&lt;/code&gt;, make sure Postgres development files are installed on the server.&lt;/p&gt; &#xA;&lt;p&gt;For Ubuntu and Debian, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install postgresql-server-dev-16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;16&lt;/code&gt; with your Postgres server version&lt;/p&gt; &#xA;&lt;h3&gt;Missing SDK&lt;/h3&gt; &#xA;&lt;p&gt;If compilation fails and the output includes &lt;code&gt;warning: no such sysroot directory&lt;/code&gt; on Mac, reinstall Xcode Command Line Tools.&lt;/p&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;By default, pgvector compiles with &lt;code&gt;-march=native&lt;/code&gt; on some platforms for best performance. However, this can lead to &lt;code&gt;Illegal instruction&lt;/code&gt; errors if trying to run the compiled extension on a different machine.&lt;/p&gt; &#xA;&lt;p&gt;To compile for portability, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make OPTFLAGS=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation Notes - Windows&lt;/h2&gt; &#xA;&lt;h3&gt;Missing Header&lt;/h3&gt; &#xA;&lt;p&gt;If compilation fails with &lt;code&gt;Cannot open include file: &#39;postgres.h&#39;: No such file or directory&lt;/code&gt;, make sure &lt;code&gt;PGROOT&lt;/code&gt; is correct.&lt;/p&gt; &#xA;&lt;h3&gt;Permissions&lt;/h3&gt; &#xA;&lt;p&gt;If installation fails with &lt;code&gt;Access is denied&lt;/code&gt;, re-run the installation instructions as an administrator.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Installation Methods&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Get the &lt;a href=&#34;https://hub.docker.com/r/pgvector/pgvector&#34;&gt;Docker image&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull pgvector/pgvector:pg16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds pgvector to the &lt;a href=&#34;https://hub.docker.com/_/postgres&#34;&gt;Postgres image&lt;/a&gt; (replace &lt;code&gt;16&lt;/code&gt; with your Postgres server version, and run it the same way).&lt;/p&gt; &#xA;&lt;p&gt;You can also build the image manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --branch v0.7.4 https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;docker build --pull --build-arg PG_MAJOR=16 -t myuser/pgvector .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;With Homebrew Postgres, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: This only adds it to the &lt;code&gt;postgresql@14&lt;/code&gt; formula&lt;/p&gt; &#xA;&lt;h3&gt;PGXN&lt;/h3&gt; &#xA;&lt;p&gt;Install from the &lt;a href=&#34;https://pgxn.org/dist/vector&#34;&gt;PostgreSQL Extension Network&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pgxn install vector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;APT&lt;/h3&gt; &#xA;&lt;p&gt;Debian and Ubuntu packages are available from the &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;PostgreSQL APT Repository&lt;/a&gt;. Follow the &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt#Quickstart&#34;&gt;setup instructions&lt;/a&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install postgresql-16-pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;16&lt;/code&gt; with your Postgres server version&lt;/p&gt; &#xA;&lt;h3&gt;Yum&lt;/h3&gt; &#xA;&lt;p&gt;RPM packages are available from the &lt;a href=&#34;https://yum.postgresql.org/&#34;&gt;PostgreSQL Yum Repository&lt;/a&gt;. Follow the &lt;a href=&#34;https://www.postgresql.org/download/linux/redhat/&#34;&gt;setup instructions&lt;/a&gt; for your distribution and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum install pgvector_16&#xA;# or&#xA;sudo dnf install pgvector_16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Replace &lt;code&gt;16&lt;/code&gt; with your Postgres server version&lt;/p&gt; &#xA;&lt;h3&gt;pkg&lt;/h3&gt; &#xA;&lt;p&gt;Install the FreeBSD package with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pkg install postgresql15-pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the port with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /usr/ports/databases/pgvector&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;conda-forge&lt;/h3&gt; &#xA;&lt;p&gt;With Conda Postgres, install from &lt;a href=&#34;https://anaconda.org/conda-forge/pgvector&#34;&gt;conda-forge&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conda install -c conda-forge pgvector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is &lt;a href=&#34;https://github.com/conda-forge/pgvector-feedstock&#34;&gt;community-maintained&lt;/a&gt; by &lt;a href=&#34;https://github.com/mmcauliffe&#34;&gt;@mmcauliffe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Postgres.app&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://postgresapp.com/downloads.html&#34;&gt;latest release&lt;/a&gt; with Postgres 15+.&lt;/p&gt; &#xA;&lt;h2&gt;Hosted Postgres&lt;/h2&gt; &#xA;&lt;p&gt;pgvector is available on &lt;a href=&#34;https://github.com/pgvector/pgvector/issues/54&#34;&gt;these providers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pgvector/pgvector/master/#installation&#34;&gt;Install&lt;/a&gt; the latest version (use the same method as the original installation). Then in each database you want to upgrade, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER EXTENSION vector UPDATE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the version in the current database with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT extversion FROM pg_extension WHERE extname = &#39;vector&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade Notes&lt;/h2&gt; &#xA;&lt;h3&gt;0.6.0&lt;/h3&gt; &#xA;&lt;h4&gt;Postgres 12&lt;/h4&gt; &#xA;&lt;p&gt;If upgrading with Postgres 12, remove this line from &lt;code&gt;sql/vector--0.5.1--0.6.0.sql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TYPE vector SET (STORAGE = external);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;make install&lt;/code&gt; and &lt;code&gt;ALTER EXTENSION vector UPDATE;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;The Docker image is now published in the &lt;code&gt;pgvector&lt;/code&gt; org, and there are tags for each supported version of Postgres (rather than a &lt;code&gt;latest&lt;/code&gt; tag).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull pgvector/pgvector:pg16&#xA;# or&#xA;docker pull pgvector/pgvector:0.6.0-pg16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, if you’ve increased &lt;code&gt;maintenance_work_mem&lt;/code&gt;, make sure &lt;code&gt;--shm-size&lt;/code&gt; is at least that size to avoid an error with parallel HNSW index builds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --shm-size=1g ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3318464.3386131&#34;&gt;PASE: PostgreSQL Ultra-High-Dimensional Approximate Nearest Neighbor Search Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;Faiss: A Library for Efficient Similarity Search and Clustering of Dense Vectors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdn.aaai.org/ICML/2003/ICML03-022.pdf&#34;&gt;Using the Triangle Inequality to Accelerate k-means&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://theory.stanford.edu/~sergei/papers/kMeansPP-soda.pdf&#34;&gt;k-means++: The Advantage of Careful Seeding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.utexas.edu/users/inderjit/public_papers/concept_mlj.pdf&#34;&gt;Concept Decompositions for Large Sparse Text Data using Clustering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/ftp/arxiv/papers/1603/1603.09320.pdf&#34;&gt;Efficient and Robust Approximate Nearest Neighbor Search using Hierarchical Navigable Small World Graphs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://github.com/pgvector/pgvector/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Everyone is encouraged to help improve this project. Here are a few ways you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pgvector/pgvector/issues&#34;&gt;Report bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix bugs and &lt;a href=&#34;https://github.com/pgvector/pgvector/pulls&#34;&gt;submit pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write, clarify, or fix documentation&lt;/li&gt; &#xA; &lt;li&gt;Suggest or add new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started with development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/pgvector/pgvector.git&#xA;cd pgvector&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make installcheck        # regression tests&#xA;make prove_installcheck  # TAP tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run single tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make installcheck REGRESS=functions                            # regression test&#xA;make prove_installcheck PROVE_TESTS=test/t/001_ivfflat_wal.pl  # TAP test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable assertions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&#34;-DUSE_ASSERT_CHECKING&#34; make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable benchmarking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&#34;-DIVFFLAT_BENCH&#34; make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To show memory usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&#34;-DHNSW_MEMORY -DIVFFLAT_MEMORY&#34; make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get k-means metrics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make clean &amp;amp;&amp;amp; PG_CFLAGS=&#34;-DIVFFLAT_KMEANS_DEBUG&#34; make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resources for contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/extend-pgxs.html&#34;&gt;Extension Building Infrastructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/indexam.html&#34;&gt;Index Access Method Interface Definition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/generic-wal.html&#34;&gt;Generic WAL Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/guava</title>
    <updated>2024-08-08T01:27:56Z</updated>
    <id>tag:github.com,2024-08-08:/google/guava</id>
    <link href="https://github.com/google/guava" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google core libraries for Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Guava: Google Core Libraries for Java&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/guava/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/google/guava.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/guava/actions&#34;&gt;&lt;img src=&#34;https://github.com/google/guava/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/7197&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/7197/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guava is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library, and utilities for concurrency, I/O, hashing, primitives, strings, and more! It is widely used on most Java projects within Google, and widely used by many other companies as well.&lt;/p&gt; &#xA;&lt;p&gt;Guava comes in two flavors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The JRE flavor requires JDK 1.8 or higher.&lt;/li&gt; &#xA; &lt;li&gt;If you need support for Android, use &lt;a href=&#34;https://github.com/google/guava/wiki/Android&#34;&gt;the Android flavor&lt;/a&gt;. You can find the Android Guava source in the &lt;a href=&#34;https://github.com/google/guava/tree/master/android&#34;&gt;&lt;code&gt;android&lt;/code&gt; directory&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding Guava to your build&lt;/h2&gt; &#xA;&lt;p&gt;Guava&#39;s Maven group ID is &lt;code&gt;com.google.guava&lt;/code&gt;, and its artifact ID is &lt;code&gt;guava&lt;/code&gt;. Guava provides two different &#34;flavors&#34;: one for use on a (Java 8+) JRE and one for use on Android or by any library that wants to be compatible with Android. These flavors are specified in the Maven version field as either &lt;code&gt;33.2.1-jre&lt;/code&gt; or &lt;code&gt;33.2.1-android&lt;/code&gt;. For more about depending on Guava, see &lt;a href=&#34;https://github.com/google/guava/wiki/UseGuavaInYourBuild&#34;&gt;using Guava in your build&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add a dependency on Guava using Maven, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;33.2.1-jre&amp;lt;/version&amp;gt;&#xA;  &amp;lt;!-- or, for Android: --&amp;gt;&#xA;  &amp;lt;version&amp;gt;33.2.1-android&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add a dependency using Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  // Pick one:&#xA;&#xA;  // 1. Use Guava in your implementation only:&#xA;  implementation(&#34;com.google.guava:guava:33.2.1-jre&#34;)&#xA;&#xA;  // 2. Use Guava types in your public API:&#xA;  api(&#34;com.google.guava:guava:33.2.1-jre&#34;)&#xA;&#xA;  // 3. Android - Use Guava in your implementation only:&#xA;  implementation(&#34;com.google.guava:guava:33.2.1-android&#34;)&#xA;&#xA;  // 4. Android - Use Guava types in your public API:&#xA;  api(&#34;com.google.guava:guava:33.2.1-android&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on when to use &lt;code&gt;api&lt;/code&gt; and when to use &lt;code&gt;implementation&lt;/code&gt;, consult the &lt;a href=&#34;https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation&#34;&gt;Gradle documentation on API and implementation separation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Snapshots and Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Snapshots of Guava built from the &lt;code&gt;master&lt;/code&gt; branch are available through Maven using version &lt;code&gt;HEAD-jre-SNAPSHOT&lt;/code&gt;, or &lt;code&gt;HEAD-android-SNAPSHOT&lt;/code&gt; for the Android flavor.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snapshot API Docs: &lt;a href=&#34;https://guava.dev/releases/snapshot-jre/api/docs/&#34;&gt;guava&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Snapshot API Diffs: &lt;a href=&#34;https://guava.dev/releases/snapshot-jre/api/diffs/&#34;&gt;guava&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn about Guava&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our users&#39; guide, &lt;a href=&#34;https://github.com/google/guava/wiki/Home&#34;&gt;Guava Explained&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tfnico.com/presentations/google-guava&#34;&gt;A nice collection&lt;/a&gt; of other helpful links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/guava&#34;&gt;GitHub project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/guava/issues/new&#34;&gt;Issue tracker: Report a defect or feature request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/ask?tags=guava+java&#34;&gt;StackOverflow: Ask &#34;how-to&#34; and &#34;why-didn&#39;t-it-work&#34; questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/group/guava-announce&#34;&gt;guava-announce: Announcements of releases and upcoming significant changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/group/guava-discuss&#34;&gt;guava-discuss: For open-ended questions and discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IMPORTANT WARNINGS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;APIs marked with the &lt;code&gt;@Beta&lt;/code&gt; annotation at the class or method level are subject to change. They can be modified in any way, or even removed, at any time. If your code is a library itself (i.e., it is used on the CLASSPATH of users outside your own control), you should not use beta APIs unless you &lt;a href=&#34;https://github.com/google/guava/wiki/UseGuavaInYourBuild#what-if-i-want-to-use-beta-apis-from-a-library-that-people-use-as-a-dependency&#34;&gt;repackage&lt;/a&gt; them. &lt;strong&gt;If your code is a library, we strongly recommend using the &lt;a href=&#34;https://github.com/google/guava-beta-checker&#34;&gt;Guava Beta Checker&lt;/a&gt; to ensure that you do not use any &lt;code&gt;@Beta&lt;/code&gt; APIs!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;APIs without &lt;code&gt;@Beta&lt;/code&gt; will remain binary-compatible for the indefinite future. (Previously, we sometimes removed such APIs after a deprecation period. The last release to remove non-&lt;code&gt;@Beta&lt;/code&gt; APIs was Guava 21.0.) Even &lt;code&gt;@Deprecated&lt;/code&gt; APIs will remain (again, unless they are &lt;code&gt;@Beta&lt;/code&gt;). We have no plans to start removing things again, but officially, we&#39;re leaving our options open in case of surprises (like, say, a serious security problem).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Guava has one dependency that is needed for linkage at runtime: &lt;code&gt;com.google.guava:failureaccess:1.0.2&lt;/code&gt;. It also has &lt;a href=&#34;https://github.com/google/guava/wiki/UseGuavaInYourBuild#what-about-guavas-own-dependencies&#34;&gt;some annotation-only dependencies&lt;/a&gt;, which we discuss in more detail at that link.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Serialized forms of ALL objects are subject to change unless noted otherwise. Do not persist these and assume they can be read by a future version of the library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our classes are not designed to protect against a malicious caller. You should not use them for communication between trusted and untrusted code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the mainline flavor, we test the libraries using OpenJDK 8, 11, and 17 on Linux, with some additional testing on newer JDKs and on Windows. Some features, especially in &lt;code&gt;com.google.common.io&lt;/code&gt;, may not work correctly in non-Linux environments. For the Android flavor, our unit tests also run on API level 21 (Lollipop).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
</feed>