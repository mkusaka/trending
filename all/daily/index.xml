<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-12T01:29:28Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>landing-ai/agentic-doc</title>
    <updated>2025-07-12T01:29:28Z</updated>
    <id>tag:github.com,2025-07-12:/landing-ai/agentic-doc</id>
    <link href="https://github.com/landing-ai/agentic-doc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python library for Agentic Document Extraction from LandingAI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Agentic&amp;nbsp;Document&amp;nbsp;Extraction ‚Äì Python&amp;nbsp;Library&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/landing-ai/agentic-doc/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;ci_status&#34;&gt; &lt;a href=&#34;https://discord.gg/RVcW3j9RgR&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/wPdN8RCYew?compact=true&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/agentic-doc&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/agentic-doc.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://va.landing.ai/demo/doc-extraction&#34;&gt;Web App&lt;/a&gt;&amp;nbsp;¬∑ &lt;a href=&#34;https://discord.com/invite/RVcW3j9RgR&#34;&gt;Discord&lt;/a&gt;&amp;nbsp;¬∑ &lt;a href=&#34;https://landing.ai/blog/going-beyond-ocrllm-introducing-agentic-document-extraction&#34;&gt;Blog&lt;/a&gt;&amp;nbsp;¬∑ &lt;a href=&#34;https://support.landing.ai/docs/document-extraction&#34;&gt;Docs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The LandingAI &lt;strong&gt;Agentic&amp;nbsp;Document&amp;nbsp;Extraction&lt;/strong&gt; API pulls structured data out of visually complex documents‚Äîthink tables, pictures, and charts‚Äîand returns a hierarchical JSON with exact element locations.&lt;/p&gt; &#xA;&lt;p&gt;This Python library wraps that API to provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Long‚Äëdocument support&lt;/strong&gt; ‚Äì process 100+&amp;nbsp;page PDFs in a single call&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto‚Äëretry / paging&lt;/strong&gt; ‚Äì handles concurrency, time‚Äëouts, and rate limits&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Helper utilities&lt;/strong&gt; ‚Äì bounding‚Äëbox snippets, visual debuggers, and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üì¶ &lt;strong&gt;Batteries‚Äëincluded install:&lt;/strong&gt; &lt;code&gt;pip install agentic-doc&lt;/code&gt; ‚Äì nothing else needed ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üóÇÔ∏è &lt;strong&gt;All file types:&lt;/strong&gt; parse PDFs of &lt;em&gt;any&lt;/em&gt; length, single images, or URLs ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#supported-files&#34;&gt;Supported&amp;nbsp;Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;Long‚Äëdoc ready:&lt;/strong&gt; auto‚Äësplit&amp;nbsp;&amp;amp;&amp;nbsp;parallel‚Äëprocess 1000+&amp;nbsp;page PDFs, then stitch results ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#parse-large-pdf-files&#34;&gt;Parse&amp;nbsp;Large&amp;nbsp;PDF&amp;nbsp;Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üß© &lt;strong&gt;Structured output:&lt;/strong&gt; returns hierarchical JSON plus ready‚Äëto‚Äërender Markdown ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#result-schema&#34;&gt;Result&amp;nbsp;Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üëÅÔ∏è &lt;strong&gt;Ground‚Äëtruth visuals:&lt;/strong&gt; optional bounding‚Äëbox snippets and full‚Äëpage visualizations ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#save-groundings-as-images&#34;&gt;Save&amp;nbsp;Groundings&amp;nbsp;as&amp;nbsp;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üèÉ &lt;strong&gt;Batch&amp;nbsp;&amp;amp;&amp;nbsp;parallel:&lt;/strong&gt; feed a list; library manages threads&amp;nbsp;&amp;amp;&amp;nbsp;rate limits (&lt;code&gt;BATCH_SIZE&lt;/code&gt;, &lt;code&gt;MAX_WORKERS&lt;/code&gt;) ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#parse-multiple-files-in-a-batch&#34;&gt;Parse&amp;nbsp;Multiple&amp;nbsp;Files&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Batch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Resilient:&lt;/strong&gt; exponential‚Äëbackoff retries for 408/429/502/503/504 and rate‚Äëlimit hits ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#automatically-handle-api-errors-and-rate-limits-with-retries&#34;&gt;Automatically&amp;nbsp;Handle&amp;nbsp;API&amp;nbsp;Errors&amp;nbsp;and&amp;nbsp;Rate&amp;nbsp;Limits&amp;nbsp;with&amp;nbsp;Retries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;strong&gt;Drop‚Äëin helpers:&lt;/strong&gt; &lt;code&gt;parse_documents&lt;/code&gt;, &lt;code&gt;parse_and_save_documents&lt;/code&gt;, &lt;code&gt;parse_and_save_document&lt;/code&gt; ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#main-functions&#34;&gt;Main&amp;nbsp;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è &lt;strong&gt;Config via env / .env:&lt;/strong&gt; tweak parallelism, logging style, retry caps‚Äîno code changes ‚Üí see&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#configuration-options&#34;&gt;Configuration&amp;nbsp;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üåê &lt;strong&gt;Raw API ready:&lt;/strong&gt; advanced users can still hit the REST endpoint directly ‚Üí see&amp;nbsp;the&amp;nbsp;&lt;a href=&#34;https://support.landing.ai/docs/document-extraction&#34;&gt;API&amp;nbsp;Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install agentic-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python version 3.9, 3.10, 3.11 or 3.12&lt;/li&gt; &#xA; &lt;li&gt;LandingAI agentic AI API key (get the key &lt;a href=&#34;https://va.landing.ai/settings/api-key&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Set the API Key as an Environment Variable&lt;/h3&gt; &#xA;&lt;p&gt;After you get the LandingAI agentic AI API key, set the key as an environment variable (or put it in a &lt;code&gt;.env&lt;/code&gt; file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export VISION_AGENT_API_KEY=&amp;lt;your-api-key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Files&lt;/h3&gt; &#xA;&lt;p&gt;The library can extract data from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PDFs (any length)&lt;/li&gt; &#xA; &lt;li&gt;Images that are supported by OpenCV-Python (i.e. the &lt;code&gt;cv2&lt;/code&gt; library)&lt;/li&gt; &#xA; &lt;li&gt;URLs pointing to PDF or image files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Extract Data from One Document&lt;/h4&gt; &#xA;&lt;p&gt;Run the following script to extract data from one document and return the results in both markdown and structured chunks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;&#xA;# Parse a local file&#xA;result = parse(&#34;path/to/image.png&#34;)&#xA;print(result[0].markdown)  # Get the extracted data as markdown&#xA;print(result[0].chunks)  # Get the extracted data as structured chunks of content&#xA;&#xA;# Parse a document from a URL&#xA;result = parse(&#34;https://example.com/document.pdf&#34;)&#xA;print(result[0].markdown)&#xA;&#xA;# Legacy approach (still supported)&#xA;from agentic_doc.parse import parse_documents&#xA;results = parse_documents([&#34;path/to/image.png&#34;])&#xA;parsed_doc = results[0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Extract Data from Multiple Documents&lt;/h4&gt; &#xA;&lt;p&gt;Run the following script to extract data from multiple documents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;&#xA;# Parse multiple local files&#xA;file_paths = [&#34;path/to/your/document1.pdf&#34;, &#34;path/to/another/document2.pdf&#34;]&#xA;results = parse(file_paths)&#xA;for result in results:&#xA;    print(result.markdown)&#xA;&#xA;# Parse and save results to a directory&#xA;results = parse(file_paths, result_save_dir=&#34;path/to/save/results&#34;)&#xA;result_paths = []&#xA;for result in results:&#xA;    result_paths.append(result.result_path)&#xA;# result_paths: [&#34;path/to/save/results/document1_20250313_070305.json&#34;, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using field extraction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic import BaseModel, Field&#xA;from agentic_doc.parse import parse&#xA;&#xA;class ExtractedFields(BaseModel):&#xA;    employee_name: str = Field(description=&#34;the full name of the employee&#34;)&#xA;    employee_ssn: str = Field(description=&#34;the social security number of the employee&#34;)&#xA;    gross_pay: float = Field(description=&#34;the gross pay of the employee&#34;)&#xA;    employee_address: str = Field(description=&#34;the address of the employee&#34;)&#xA;&#xA;results = parse(&#34;mydoc.pdf&#34;, extraction_model=ExtractedFields)&#xA;fields = results[0].extraction&#xA;metadata = results[0].extraction_metadata&#xA;print(f&#34;Field value: {fields.employee_name}, confidence: {metadata.employee_name.experimental_confidence}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Extract Data Using Connectors&lt;/h4&gt; &#xA;&lt;p&gt;The library now supports various connectors to easily access documents from different sources:&lt;/p&gt; &#xA;&lt;h5&gt;Google Drive Connector&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisites: Follow the &lt;a href=&#34;https://developers.google.com/workspace/drive/api/quickstart/python&#34;&gt;Google Drive API Python Quickstart&lt;/a&gt; tutorial first to set up your credentials.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Google Drive API quickstart will guide you through:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creating a Google Cloud project&lt;/li&gt; &#xA; &lt;li&gt;Enabling the Google Drive API&lt;/li&gt; &#xA; &lt;li&gt;Setting up OAuth 2.0 credentials&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After completing the quickstart tutorial, you can use the Google Drive connector as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;from agentic_doc.connectors import GoogleDriveConnectorConfig&#xA;&#xA;# Using OAuth credentials file (from quickstart tutorial)&#xA;config = GoogleDriveConnectorConfig(&#xA;    client_secret_file=&#34;path/to/credentials.json&#34;,&#xA;    folder_id=&#34;your-google-drive-folder-id&#34;  # Optional&#xA;)&#xA;&#xA;# Parse all documents in the folder&#xA;results = parse(config)&#xA;&#xA;# Parse with filtering&#xA;results = parse(config, connector_pattern=&#34;*.pdf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Amazon S3 Connector&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;from agentic_doc.connectors import S3ConnectorConfig&#xA;&#xA;config = S3ConnectorConfig(&#xA;    bucket_name=&#34;your-bucket-name&#34;,&#xA;    aws_access_key_id=&#34;your-access-key&#34;,  # Optional if using IAM roles&#xA;    aws_secret_access_key=&#34;your-secret-key&#34;,  # Optional if using IAM roles&#xA;    region_name=&#34;us-east-1&#34;&#xA;)&#xA;&#xA;# Parse all documents in the bucket&#xA;results = parse(config)&#xA;&#xA;# Parse documents in a specific prefix/folder&#xA;results = parse(config, connector_path=&#34;documents/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Local Directory Connector&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;from agentic_doc.connectors import LocalConnectorConfig&#xA;&#xA;config = LocalConnectorConfig()&#xA;&#xA;# Parse all supported documents in a directory&#xA;results = parse(config, connector_path=&#34;/path/to/documents&#34;)&#xA;&#xA;# Parse with pattern filtering&#xA;results = parse(config, connector_path=&#34;/path/to/documents&#34;, connector_pattern=&#34;*.pdf&#34;)&#xA;&#xA;# Parse all supported documents in a directory recursively (search subdirectories as well)&#xA;config = LocalConnectorConfig(recursive=True)&#xA;results = parse(config, connector_path=&#34;/path/to/documents&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;URL Connector&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;from agentic_doc.connectors import URLConnectorConfig&#xA;&#xA;config = URLConnectorConfig(&#xA;    headers={&#34;Authorization&#34;: &#34;Bearer your-token&#34;},  # Optional&#xA;    timeout=60  # Optional&#xA;)&#xA;&#xA;# Parse document from URL&#xA;results = parse(config, connector_path=&#34;https://example.com/document.pdf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Raw Bytes Input&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;&#xA;# Load a PDF or image file as bytes&#xA;with open(&#34;document.pdf&#34;, &#34;rb&#34;) as f:&#xA;    raw_bytes = f.read()&#xA;&#xA;# Parse the document from bytes&#xA;results = parse(raw_bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also parse image bytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#34;image.png&#34;, &#34;rb&#34;) as f:&#xA;    image_bytes = f.read()&#xA;&#xA;results = parse(image_bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful when documents are already loaded into memory (e.g., from an API response or uploaded via a web interface). The parser will auto-detect the file type from the bytes.&lt;/p&gt; &#xA;&lt;h2&gt;Why Use It?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplified Setup:&lt;/strong&gt; No need to manage API keys or handle low-level REST calls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic Large File Processing:&lt;/strong&gt; Splits large PDFs into manageable parts and processes them in parallel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built-In Error Handling:&lt;/strong&gt; Automatically retries requests with exponential backoff and jitter for common HTTP errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Processing:&lt;/strong&gt; Efficiently parse multiple documents at once with configurable parallelism.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;p&gt;With this library, you can do things that are otherwise hard to do with the Agentic Document Extraction API alone. This section describes some of the key features this library offers.&lt;/p&gt; &#xA;&lt;h3&gt;Parse Large PDF Files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A single REST API call can only handle up to certain amount of pages at a time&lt;/strong&gt; (see &lt;a href=&#34;https://docs.landing.ai/ade/ade-rate-limits#maximum-pages-per-document&#34;&gt;rate limits&lt;/a&gt;). This library automatically splits a large PDF into multiple calls, uses a thread pool to process the calls in parallel, and stitches the results back together as a single result.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve used this library to successfully parse PDFs that are 1000+ pages long.&lt;/p&gt; &#xA;&lt;h3&gt;Parse Multiple Files in a Batch&lt;/h3&gt; &#xA;&lt;p&gt;You can parse multiple files in a single function call with this library. The library processes files in parallel.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can change the parallelism by setting the &lt;code&gt;batch_size&lt;/code&gt; setting.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Save Groundings as Images&lt;/h3&gt; &#xA;&lt;p&gt;The library can extract and save the visual regions (groundings) of the document where each chunk of content was found. This is useful for visualizing exactly what parts of the document were extracted and for debugging extraction issues.&lt;/p&gt; &#xA;&lt;p&gt;Each grounding represents a bounding box in the original document, and the library can save these regions as individual PNG images. The images are organized by page number and chunk ID.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to use this feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse_documents&#xA;&#xA;# Save groundings when parsing a document&#xA;results = parse_documents(&#xA;    [&#34;path/to/document.pdf&#34;],&#xA;    grounding_save_dir=&#34;path/to/save/groundings&#34;&#xA;)&#xA;&#xA;# The grounding images will be saved to:&#xA;# path/to/save/groundings/document_TIMESTAMP/page_X/CHUNK_TYPE_CHUNK_ID_Y.png&#xA;# Where X is the page number, CHUNK_ID is the unique ID of each chunk,&#xA;# and Y is the index of the grounding within the chunk&#xA;&#xA;# Each chunk&#39;s grounding in the result will have the image_path set&#xA;for chunk in results[0].chunks:&#xA;    for grounding in chunk.grounding:&#xA;        if grounding.image_path:&#xA;            print(f&#34;Grounding saved to: {grounding.image_path}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature works with all parsing functions: &lt;code&gt;parse_documents&lt;/code&gt;, &lt;code&gt;parse_and_save_documents&lt;/code&gt;, and &lt;code&gt;parse_and_save_document&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visualize Parsing Result&lt;/h3&gt; &#xA;&lt;p&gt;The library provides a visualization utility that creates annotated images showing where each chunk of content was extracted from the document. This is useful for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verifying the accuracy of the extraction&lt;/li&gt; &#xA; &lt;li&gt;Debugging extraction issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s how to use the visualization feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;from agentic_doc.utils import viz_parsed_document&#xA;from agentic_doc.config import VisualizationConfig&#xA;&#xA;# Parse a document&#xA;results = parse(&#34;path/to/document.pdf&#34;)&#xA;parsed_doc = results[0]&#xA;&#xA;# Create visualizations with default settings&#xA;# The output images have a PIL.Image.Image type&#xA;images = viz_parsed_document(&#xA;    &#34;path/to/document.pdf&#34;,&#xA;    parsed_doc,&#xA;    output_dir=&#34;path/to/save/visualizations&#34;&#xA;)&#xA;&#xA;# Or customize the visualization appearance&#xA;viz_config = VisualizationConfig(&#xA;    thickness=2,  # Thicker bounding boxes&#xA;    text_bg_opacity=0.8,  # More opaque text background&#xA;    font_scale=0.7,  # Larger text&#xA;    # Custom colors for different chunk types&#xA;    color_map={&#xA;        ChunkType.TITLE: (0, 0, 255),  # Red for titles&#xA;        ChunkType.TEXT: (255, 0, 0),  # Blue for regular text&#xA;        # ... other chunk types ...&#xA;    }&#xA;)&#xA;&#xA;images = viz_parsed_document(&#xA;    &#34;path/to/document.pdf&#34;,&#xA;    parsed_doc,&#xA;    output_dir=&#34;path/to/save/visualizations&#34;,&#xA;    viz_config=viz_config&#xA;)&#xA;&#xA;# The visualization images will be saved as:&#xA;# path/to/save/visualizations/document_viz_page_X.png&#xA;# Where X is the page number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The visualization shows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bounding boxes around each extracted chunk&lt;/li&gt; &#xA; &lt;li&gt;Chunk type and index labels&lt;/li&gt; &#xA; &lt;li&gt;Different colors for different types of content (titles, text, tables, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Semi-transparent text backgrounds for better readability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automatically Handle API Errors and Rate Limits with Retries&lt;/h3&gt; &#xA;&lt;p&gt;The REST API endpoint imposes rate limits per API key. This library automatically handles the rate limit error or other intermittent HTTP errors with retries.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#error-handling&#34;&gt;Error Handling&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/#configuration-options&#34;&gt;Configuration Options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Error Handling&lt;/h3&gt; &#xA;&lt;p&gt;This library implements a retry mechanism for handling API failures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retries are performed for these HTTP status codes: 408, 429, 502, 503, 504.&lt;/li&gt; &#xA; &lt;li&gt;Exponential backoff with jitter is used for retry wait time.&lt;/li&gt; &#xA; &lt;li&gt;The initial retry wait time is 1 second, which increases exponentially.&lt;/li&gt; &#xA; &lt;li&gt;Retry will stop after &lt;code&gt;max_retries&lt;/code&gt; attempts. Exceeding the limit raises an exception and results in a failure for this request.&lt;/li&gt; &#xA; &lt;li&gt;Retry wait time is capped at &lt;code&gt;max_retry_wait_time&lt;/code&gt; seconds.&lt;/li&gt; &#xA; &lt;li&gt;Retries include a random jitter of up to 10 seconds to distribute requests and prevent the thundering herd problem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parsing Errors&lt;/h3&gt; &#xA;&lt;p&gt;If the REST API request encounters an unrecoverable error during parsing (either from client-side or server-side), the library includes an &lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/agentic_doc/common.py#L75&#34;&gt;errors&lt;/a&gt; field in the final result for the affected page(s). Each error contains the error message, error_code and corresponding page number.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Options&lt;/h2&gt; &#xA;&lt;p&gt;The library uses a &lt;a href=&#34;https://raw.githubusercontent.com/landing-ai/agentic-doc/main/agentic_doc/config.py&#34;&gt;&lt;code&gt;Settings&lt;/code&gt;&lt;/a&gt; object to manage configuration. You can customize these settings either through environment variables or a &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;Below is an example &lt;code&gt;.env&lt;/code&gt; file that customizes the configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Number of files to process in parallel, defaults to 4&#xA;BATCH_SIZE=4&#xA;# Number of threads used to process parts of each file in parallel, defaults to 5.&#xA;MAX_WORKERS=2&#xA;# Maximum number of retry attempts for failed intermittent requests, defaults to 100&#xA;MAX_RETRIES=80&#xA;# Maximum wait time in seconds for each retry, defaults to 60&#xA;MAX_RETRY_WAIT_TIME=30&#xA;# Logging style for retry, defaults to log_msg&#xA;RETRY_LOGGING_STYLE=log_msg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Max Parallelism&lt;/h3&gt; &#xA;&lt;p&gt;The maximum number of parallel requests is determined by multiplying &lt;code&gt;BATCH_SIZE&lt;/code&gt; √ó &lt;code&gt;MAX_WORKERS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The maximum parallelism allowed by this library is 100.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Specifically, increasing &lt;code&gt;MAX_WORKERS&lt;/code&gt; can speed up the processing of large individual files, while increasing &lt;code&gt;BATCH_SIZE&lt;/code&gt; improves throughput when processing multiple files.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Your job&#39;s maximum processing throughput may be limited by your API rate limit. If your rate limit isn&#39;t high enough, you may encounter rate limit errors, which the library will automatically handle through retries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The optimal values for &lt;code&gt;MAX_WORKERS&lt;/code&gt; and &lt;code&gt;BATCH_SIZE&lt;/code&gt; depend on your API rate limit and the latency of each REST API call. For example, if your account has a rate limit of 5 requests per minute, and each REST API call takes approximately 60 seconds to complete, and you&#39;re processing a single large file, then &lt;code&gt;MAX_WORKERS&lt;/code&gt; should be set to 5 and &lt;code&gt;BATCH_SIZE&lt;/code&gt; to 1.&lt;/p&gt; &#xA;&lt;p&gt;You can find your REST API latency in the logs. If you want to increase your rate limit, schedule a time to meet with us &lt;a href=&#34;https://scheduler.zoom.us/d/56i81uc2/landingai-document-extraction&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Set &lt;code&gt;RETRY_LOGGING_STYLE&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;RETRY_LOGGING_STYLE&lt;/code&gt; setting controls how the library logs the retry attempts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;log_msg&lt;/code&gt;: Log the retry attempts as a log messages. Each attempt is logged as a separate message. This is the default setting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inline_block&lt;/code&gt;: Print a yellow progress block (&#39;‚ñà&#39;) on the same line. Each block represents one retry attempt. Choose this if you don&#39;t want to see the verbose retry logging message and still want to track the number of retries that have been made.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;none&lt;/code&gt;: Do not log the retry attempts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting &amp;amp; FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Common Issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Key Errors:&lt;/strong&gt;&lt;br&gt; Ensure your API key is correctly set as an environment variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rate Limits:&lt;/strong&gt;&lt;br&gt; The library automatically retries requests if you hit the API rate limit. Adjust &lt;code&gt;BATCH_SIZE&lt;/code&gt; or &lt;code&gt;MAX_WORKERS&lt;/code&gt; if you encounter frequent rate limit errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parsing Failures:&lt;/strong&gt;&lt;br&gt; If a document fails to parse, an error chunk will be included in the result, detailing the error message and page index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;URL Access Issues:&lt;/strong&gt; If you&#39;re having trouble accessing documents from URLs, check that the URLs are publicly accessible and point to supported file types (PDF or images).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note on &lt;code&gt;include_marginalia&lt;/code&gt; and &lt;code&gt;include_metadata_in_markdown&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;include_marginalia&lt;/code&gt;: If True, the parser will attempt to extract and include marginalia (footer notes, page number, etc.) from the document in the output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include_metadata_in_markdown&lt;/code&gt;: If True, the output markdown will include metadata.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both parameters default to True. You can set them to False to exclude these elements from the output.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Using the new parameters&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agentic_doc.parse import parse&#xA;&#xA;results = parse(&#xA;    &#34;path/to/document.pdf&#34;,&#xA;    include_marginalia=False,  # Exclude marginalia from output&#xA;    include_metadata_in_markdown=False  # Exclude metadata from markdown&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>antiwork/flexile</title>
    <updated>2025-07-12T01:29:28Z</updated>
    <id>tag:github.com,2025-07-12:/antiwork/flexile</id>
    <link href="https://github.com/antiwork/flexile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Contractor payments as easy as 1-2-3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flexile&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/antiwork/flexile/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/antiwork/flexile/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/antiwork/flexile/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Equity for everyone.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Node.js&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/flexile/main/.node-version&#34;&gt;&lt;code&gt;.node-version&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way to set up the development environment is to use the &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/flexile/main/bin/setup&#34;&gt;&lt;code&gt;bin/setup&lt;/code&gt; script&lt;/a&gt;, but feel free to run the commands in it yourself to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up Ruby (ideally using &lt;code&gt;rbenv&lt;/code&gt;/&lt;code&gt;rvm&lt;/code&gt;) and PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies using &lt;code&gt;pnpm i&lt;/code&gt; and &lt;code&gt;cd backend &amp;amp;&amp;amp; bundle i&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up your environment by either using &lt;code&gt;pnpx vercel env pull .env&lt;/code&gt; or &lt;code&gt;cp .env.example .env&lt;/code&gt; and filling in missing values and your own keys&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd backend &amp;amp;&amp;amp; gem install foreman&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the App&lt;/h2&gt; &#xA;&lt;p&gt;You can start the local app using the &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/flexile/main/bin/dev&#34;&gt;&lt;code&gt;bin/dev&lt;/code&gt; script&lt;/a&gt; - or feel free to run the commands contained in it yourself.&lt;/p&gt; &#xA;&lt;p&gt;Once the local services are up and running, the application will be available at &lt;code&gt;https://flexile.dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/flexile/main/backend/config/data/seed_templates/gumroad.json&#34;&gt;the seeds&lt;/a&gt; for default data created during setup.&lt;/p&gt; &#xA;&lt;h2&gt;Common Issues / Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;1. Postgres User Creation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issue:&lt;/strong&gt; When running &lt;code&gt;bin/dev&lt;/code&gt; (after &lt;code&gt;bin/setup&lt;/code&gt;) encountered &lt;code&gt;FATAL: role &#34;username&#34; does not exist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt; Manually create the Postgres user with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;psql postgres -c &#34;CREATE USER username WITH LOGIN CREATEDB SUPERUSER PASSWORD &#39;password&#39;;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Likely caused by the &lt;code&gt;bin/setup&lt;/code&gt; script failing silently due to lack of Postgres superuser permissions (common with Homebrew installations).&lt;/p&gt; &#xA;&lt;h3&gt;2. Redis Connection &amp;amp; database seeding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issue:&lt;/strong&gt; First attempt to run &lt;code&gt;bin/dev&lt;/code&gt; failed with &lt;code&gt;Redis::CannotConnectError&lt;/code&gt; on port 6389.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt; Re-running &lt;code&gt;bin/dev&lt;/code&gt; resolved it but data wasn&#39;t seeded properly, so had to run &lt;code&gt;db:reset&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Likely caused by rails attempting to connect before Redis had fully started.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Run Rails specs&#xA;bundle exec rspec # Run all specs&#xA;bundle exec rspec spec/system/roles/show_spec.rb:7 # Run a single spec&#xA;&#xA;# Run Playwright end-to-end tests&#xA;pnpm playwright test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Flexile is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/antiwork/flexile/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googleapis/genai-toolbox</title>
    <updated>2025-07-12T01:29:28Z</updated>
    <id>tag:github.com,2025-07-12:/googleapis/genai-toolbox</id>
    <link href="https://github.com/googleapis/genai-toolbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Toolbox for Databases is an open source MCP server for databases.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MCP Toolbox for Databases&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Dmm69peqjh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/googleapis/genai-toolbox&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/googleapis/genai-toolbox&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] MCP Toolbox for Databases is currently in beta, and may see breaking changes until the first stable release (v1.0).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;MCP Toolbox for Databases is an open source MCP server for databases. It enables you to develop tools easier, faster, and more securely by handling the complexities such as connection pooling, authentication, and more.&lt;/p&gt; &#xA;&lt;p&gt;This README provides a brief overview. For comprehensive details, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This solution was originally named ‚ÄúGen AI Toolbox for Databases‚Äù as its initial development predated MCP, but was renamed to align with recently added MCP compatibility.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- TOC ignore:true --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#why-toolbox&#34;&gt;Why Toolbox?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#general-architecture&#34;&gt;General Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#installing-the-server&#34;&gt;Installing the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#running-the-server&#34;&gt;Running the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#integrating-your-application&#34;&gt;Integrating your application&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#sources&#34;&gt;Sources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#toolsets&#34;&gt;Toolsets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Why Toolbox?&lt;/h2&gt; &#xA;&lt;p&gt;Toolbox helps you build Gen AI tools that let your agents access data in your database. Toolbox provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplified development&lt;/strong&gt;: Integrate tools to your agent in less than 10 lines of code, reuse tools between multiple agents or frameworks, and deploy new versions of tools more easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Better performance&lt;/strong&gt;: Best practices such as connection pooling, authentication, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced security&lt;/strong&gt;: Integrated auth for more secure access to your data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-to-end observability&lt;/strong&gt;: Out of the box metrics and tracing with built-in support for OpenTelemetry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö° Supercharge Your Workflow with an AI Database Assistant ‚ö°&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stop context-switching and let your AI assistant become a true co-developer. By &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/how-to/connect-ide/&#34;&gt;connecting your IDE to your databases with MCP Toolbox&lt;/a&gt;, you can delegate complex and time-consuming database tasks, allowing you to build faster and focus on what matters. This isn&#39;t just about code completion; it&#39;s about giving your AI the context it needs to handle the entire development lifecycle.&lt;/p&gt; &#xA;&lt;p&gt;Here‚Äôs how it will save you time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Query in Plain English&lt;/strong&gt;: Interact with your data using natural language right from your IDE. Ask complex questions like, &lt;em&gt;&#34;How many orders were delivered in 2024, and what items were in them?&#34;&lt;/em&gt; without writing any SQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automate Database Management&lt;/strong&gt;: Simply describe your data needs, and let the AI assistant manage your database for you. It can handle generating queries, creating tables, adding indexes, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generate Context-Aware Code&lt;/strong&gt;: Empower your AI assistant to generate application code and tests with a deep understanding of your real-time database schema. This accelerates the development cycle by ensuring the generated code is directly usable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Slash Development Overhead&lt;/strong&gt;: Radically reduce the time spent on manual setup and boilerplate. MCP Toolbox helps streamline lengthy database configurations, repetitive code, and error-prone schema migrations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/how-to/connect-ide/&#34;&gt;how to connect your AI tools (IDEs) to Toolbox using MCP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;General Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Toolbox sits between your application&#39;s orchestration framework and your database, providing a control plane that is used to modify, distribute, or invoke tools. It simplifies the management of your tools by providing you with a centralized location to store and update tools, allowing you to share tools between agents and applications and update those tools without necessarily redeploying your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/docs/en/getting-started/introduction/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing the server&lt;/h3&gt; &#xA;&lt;p&gt;For the latest version, check the &lt;a href=&#34;https://github.com/googleapis/genai-toolbox/releases&#34;&gt;releases page&lt;/a&gt; and use the following instructions for your OS and CPU architecture.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Binary&lt;/summary&gt; &#xA; &lt;p&gt;To install Toolbox as a binary:&lt;/p&gt; &#xA; &lt;!-- {x-release-please-start-version} --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# see releases page for other versions&#xA;export VERSION=0.9.0&#xA;curl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox&#xA;chmod +x toolbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Container image&lt;/summary&gt; You can also install Toolbox as a container: &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# see releases page for other versions&#xA;export VERSION=0.9.0&#xA;docker pull us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:$VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Compile from source&lt;/summary&gt; &#xA; &lt;p&gt;To install from source, ensure you have the latest version of &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go installed&lt;/a&gt;, and then run the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/googleapis/genai-toolbox@v0.9.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!-- {x-release-please-end} --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Running the server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#configuration&#34;&gt;Configure&lt;/a&gt; a &lt;code&gt;tools.yaml&lt;/code&gt; to define your tools, and then execute &lt;code&gt;toolbox&lt;/code&gt; to start the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./toolbox --tools-file &#34;tools.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Toolbox enables dynamic reloading by default. To disable, use the &lt;code&gt;--disable-reload&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;toolbox help&lt;/code&gt; for a full list of flags! To stop the server, send a terminate signal (&lt;code&gt;ctrl+c&lt;/code&gt; on most platforms).&lt;/p&gt; &#xA;&lt;p&gt;For more detailed documentation on deploying to different environments, check out the resources in the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/how-to/&#34;&gt;How-to section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Integrating your application&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is up and running, you can load the tools into your application. See below the list of Client SDKs for using various frameworks:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Python (&lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-python&#34;&gt;Github&lt;/a&gt;)&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;details open&gt; &#xA;   &lt;summary&gt;Core&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pypi.org/project/toolbox-core/&#34;&gt;Toolbox Core SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-core&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_core import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;async with ToolboxClient(&#34;http://127.0.0.1:5000&#34;) as client:&#xA;&#xA;    # these tools can be passed to your application!&#xA;    tools = await client.load_toolset(&#34;toolset_name&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;   &lt;p&gt;For more detailed instructions on using the Toolbox Core SDK, see the &lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-python/tree/main/packages/toolbox-core/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;LangChain / LangGraph&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pypi.org/project/toolbox-langchain/&#34;&gt;Toolbox LangChain SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-langchain&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_langchain import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;async with ToolboxClient(&#34;http://127.0.0.1:5000&#34;) as client:&#xA;&#xA;    # these tools can be passed to your application!&#xA;    tools = client.load_toolset()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more detailed instructions on using the Toolbox LangChain SDK, see the &lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-python/raw/main/packages/toolbox-langchain/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;LlamaIndex&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pypi.org/project/toolbox-llamaindex/&#34;&gt;Toolbox Llamaindex SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-llamaindex&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_llamaindex import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;async with ToolboxClient(&#34;http://127.0.0.1:5000&#34;) as client:&#xA;&#xA;    # these tools can be passed to your application!&#xA;    tools = client.load_toolset()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more detailed instructions on using the Toolbox Llamaindex SDK, see the &lt;a href=&#34;https://github.com/googleapis/genai-toolbox-llamaindex-python/raw/main/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA; &lt;/blockquote&gt;&#xA;&lt;/details&gt;  &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Javascript/Typescript (&lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-js&#34;&gt;Github&lt;/a&gt;)&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;details open&gt; &#xA;   &lt;summary&gt;Core&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.npmjs.com/package/@toolbox-sdk/core&#34;&gt;Toolbox Core SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @toolbox-sdk/core&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ToolboxClient } from &#39;@toolbox-sdk/core&#39;;&#xA;&#xA;// update the url to point to your server&#xA;const URL = &#39;http://127.0.0.1:5000&#39;;&#xA;let client = new ToolboxClient(URL);&#xA;&#xA;// these tools can be passed to your application!&#xA;const tools = await client.loadToolset(&#39;toolsetName&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more detailed instructions on using the Toolbox Core SDK, see the &lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-js/raw/main/packages/toolbox-core/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;LangChain / LangGraph&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.npmjs.com/package/@toolbox-sdk/core&#34;&gt;Toolbox Core SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @toolbox-sdk/core&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ToolboxClient } from &#39;@toolbox-sdk/core&#39;;&#xA;&#xA;// update the url to point to your server&#xA;const URL = &#39;http://127.0.0.1:5000&#39;;&#xA;let client = new ToolboxClient(URL);&#xA;&#xA;// these tools can be passed to your application!&#xA;const toolboxTools = await client.loadToolset(&#39;toolsetName&#39;);&#xA;&#xA;// Define the basics of the tool: name, description, schema and core logic&#xA;const getTool = (toolboxTool) =&amp;gt; tool(currTool, {&#xA;    name: toolboxTool.getName(),&#xA;    description: toolboxTool.getDescription(),&#xA;    schema: toolboxTool.getParamSchema()&#xA;});&#xA;&#xA;// Use these tools in your Langchain/Langraph applications&#xA;const tools = toolboxTools.map(getTool);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Genkit&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.npmjs.com/package/@toolbox-sdk/core&#34;&gt;Toolbox Core SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @toolbox-sdk/core&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ToolboxClient } from &#39;@toolbox-sdk/core&#39;;&#xA;import { genkit } from &#39;genkit&#39;;&#xA;&#xA;// Initialise genkit&#xA;const ai = genkit({&#xA;    plugins: [&#xA;        googleAI({&#xA;            apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY&#xA;        })&#xA;    ],&#xA;    model: googleAI.model(&#39;gemini-2.0-flash&#39;),&#xA;});&#xA;&#xA;// update the url to point to your server&#xA;const URL = &#39;http://127.0.0.1:5000&#39;;&#xA;let client = new ToolboxClient(URL);&#xA;&#xA;// these tools can be passed to your application!&#xA;const toolboxTools = await client.loadToolset(&#39;toolsetName&#39;);&#xA;&#xA;// Define the basics of the tool: name, description, schema and core logic&#xA;const getTool = (toolboxTool) =&amp;gt; ai.defineTool({&#xA;    name: toolboxTool.getName(),&#xA;    description: toolboxTool.getDescription(),&#xA;    schema: toolboxTool.getParamSchema()&#xA;}, toolboxTool)&#xA;&#xA;// Use these tools in your Genkit applications&#xA;const tools = toolboxTools.map(getTool);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA; &lt;/blockquote&gt;&#xA;&lt;/details&gt;  &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Go (&lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-go&#34;&gt;Github&lt;/a&gt;)&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;details open&gt; &#xA;   &lt;summary&gt;Core&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&gt;Toolbox Go SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/googleapis/mcp-toolbox-sdk-go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&#xA;  &#34;context&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Make sure to add the error checks&#xA;  // update the url to point to your server&#xA;  URL := &#34;http://127.0.0.1:5000&#34;;&#xA;  ctx := context.Background()&#xA;&#xA;  client, err := core.NewToolboxClient(URL)&#xA;&#xA;  // Framework agnostic tools&#xA;  tools, err := client.LoadToolset(&#34;toolsetName&#34;, ctx)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more detailed instructions on using the Toolbox Go SDK, see the &lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-go/raw/main/core/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;LangChain Go&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&gt;Toolbox Go SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/googleapis/mcp-toolbox-sdk-go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;encoding/json&#34;&#xA;&#xA;  &#34;github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&#xA;  &#34;github.com/tmc/langchaingo/llms&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Make sure to add the error checks&#xA;  // update the url to point to your server&#xA;  URL := &#34;http://127.0.0.1:5000&#34;&#xA;  ctx := context.Background()&#xA;&#xA;  client, err := core.NewToolboxClient(URL)&#xA;&#xA;  // Framework agnostic tool&#xA;  tool, err := client.LoadTool(&#34;toolName&#34;, ctx)&#xA;&#xA;  // Fetch the tool&#39;s input schema&#xA;  inputschema, err := tool.InputSchema()&#xA;&#xA;  var paramsSchema map[string]any&#xA;  _ = json.Unmarshal(inputschema, &amp;amp;paramsSchema)&#xA;&#xA;  // Use this tool with LangChainGo&#xA;  langChainTool := llms.Tool{&#xA;    Type: &#34;function&#34;,&#xA;    Function: &amp;amp;llms.FunctionDefinition{&#xA;      Name:        tool.Name(),&#xA;      Description: tool.Description(),&#xA;      Parameters:  paramsSchema,&#xA;    },&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Genkit&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&gt;Toolbox Go SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/googleapis/mcp-toolbox-sdk-go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;encoding/json&#34;&#xA;&#xA;  &#34;github.com/firebase/genkit/go/ai&#34;&#xA;  &#34;github.com/firebase/genkit/go/genkit&#34;&#xA;  &#34;github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&#xA;  &#34;github.com/invopop/jsonschema&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Make sure to add the error checks&#xA;  // Update the url to point to your server&#xA;  URL := &#34;http://127.0.0.1:5000&#34;&#xA;  ctx := context.Background()&#xA;  g, err := genkit.Init(ctx)&#xA;&#xA;  client, err := core.NewToolboxClient(URL)&#xA;&#xA;  // Framework agnostic tool&#xA;  tool, err := client.LoadTool(&#34;toolName&#34;, ctx)&#xA;&#xA;  // Fetch the tool&#39;s input schema&#xA;  inputschema, err := tool.InputSchema()&#xA;&#xA;  var schema *jsonschema.Schema&#xA;  _ = json.Unmarshal(inputschema, &amp;amp;schema)&#xA;&#xA;  executeFn := func(ctx *ai.ToolContext, input any) (string, error) {&#xA;    result, err := tool.Invoke(ctx, input.(map[string]any))&#xA;    if err != nil {&#xA;      // Propagate errors from the tool invocation.&#xA;      return &#34;&#34;, err&#xA;    }&#xA;&#xA;    return result.(string), nil&#xA;  }&#xA;&#xA;  // Use this tool with Genkit Go&#xA;  genkitTool := genkit.DefineToolWithInputSchema(&#xA;    g,&#xA;    tool.Name(),&#xA;    tool.Description(),&#xA;    schema,&#xA;    executeFn,&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Go GenAI&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&gt;Toolbox Go SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/googleapis/mcp-toolbox-sdk-go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;encoding/json&#34;&#xA;&#xA;  &#34;github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&#xA;  &#34;google.golang.org/genai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Make sure to add the error checks&#xA;  // Update the url to point to your server&#xA;  URL := &#34;http://127.0.0.1:5000&#34;&#xA;  ctx := context.Background()&#xA;&#xA;  client, err := core.NewToolboxClient(URL)&#xA;&#xA;  // Framework agnostic tool&#xA;  tool, err := client.LoadTool(&#34;toolName&#34;, ctx)&#xA;&#xA;  // Fetch the tool&#39;s input schema&#xA;  inputschema, err := tool.InputSchema()&#xA;&#xA;  var schema *genai.Schema&#xA;  _ = json.Unmarshal(inputschema, &amp;amp;schema)&#xA;&#xA;  funcDeclaration := &amp;amp;genai.FunctionDeclaration{&#xA;    Name:        tool.Name(),&#xA;    Description: tool.Description(),&#xA;    Parameters:  schema,&#xA;  }&#xA;&#xA;  // Use this tool with Go GenAI&#xA;  genAITool := &amp;amp;genai.Tool{&#xA;    FunctionDeclarations: []*genai.FunctionDeclaration{funcDeclaration},&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;OpenAI Go&lt;/summary&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&gt;Toolbox Go SDK&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/googleapis/mcp-toolbox-sdk-go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Load tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;encoding/json&#34;&#xA;&#xA;  &#34;github.com/googleapis/mcp-toolbox-sdk-go/core&#34;&#xA;  openai &#34;github.com/openai/openai-go&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Make sure to add the error checks&#xA;  // Update the url to point to your server&#xA;  URL := &#34;http://127.0.0.1:5000&#34;&#xA;  ctx := context.Background()&#xA;&#xA;  client, err := core.NewToolboxClient(URL)&#xA;&#xA;  // Framework agnostic tool&#xA;  tool, err := client.LoadTool(&#34;toolName&#34;, ctx)&#xA;&#xA;  // Fetch the tool&#39;s input schema&#xA;  inputschema, err := tool.InputSchema()&#xA;&#xA;  var paramsSchema openai.FunctionParameters&#xA;  _ = json.Unmarshal(inputschema, &amp;amp;paramsSchema)&#xA;&#xA;  // Use this tool with OpenAI Go&#xA;  openAITool := openai.ChatCompletionToolParam{&#xA;    Function: openai.FunctionDefinitionParam{&#xA;      Name:        tool.Name(),&#xA;      Description: openai.String(tool.Description()),&#xA;      Parameters:  paramsSchema,&#xA;    },&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/details&gt; &#xA; &lt;/blockquote&gt;&#xA;&lt;/details&gt;   &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The primary way to configure Toolbox is through the &lt;code&gt;tools.yaml&lt;/code&gt; file. If you have multiple files, you can tell toolbox which to load with the &lt;code&gt;--tools-file tools.yaml&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;You can find more detailed reference documentation to all resource types in the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/&#34;&gt;Resources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sources&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;sources&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; defines what data sources your Toolbox should have access to. Most tools will have at least one source to execute against.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sources:&#xA;  my-pg-source:&#xA;    kind: postgres&#xA;    host: 127.0.0.1&#xA;    port: 5432&#xA;    database: toolbox_db&#xA;    user: toolbox_user&#xA;    password: my-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on configuring different types of sources, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/sources&#34;&gt;Sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tools&lt;/code&gt; section of a &lt;code&gt;tools.yaml&lt;/code&gt; define the actions an agent can take: what kind of tool it is, which source(s) it affects, what parameters it uses, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tools:&#xA;  search-hotels-by-name:&#xA;    kind: postgres-sql&#xA;    source: my-pg-source&#xA;    description: Search for hotels based on name.&#xA;    parameters:&#xA;      - name: name&#xA;        type: string&#xA;        description: The name of the hotel.&#xA;    statement: SELECT * FROM hotels WHERE name ILIKE &#39;%&#39; || $1 || &#39;%&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on configuring different types of tools, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/tools&#34;&gt;Tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Toolsets&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;toolsets&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; allows you to define groups of tools that you want to be able to load together. This can be useful for defining different groups based on agent or application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;toolsets:&#xA;    my_first_toolset:&#xA;        - my_first_tool&#xA;        - my_second_tool&#xA;    my_second_toolset:&#xA;        - my_second_tool&#xA;        - my_third_tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can load toolsets by name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This will load all tools&#xA;all_tools = client.load_toolset()&#xA;&#xA;# This will only load the tools listed in &#39;my_second_toolset&#39;&#xA;my_second_toolset = client.load_toolset(&#34;my_second_toolset&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, including a &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; version number that increments with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MAJOR version when we make incompatible API changes&lt;/li&gt; &#xA; &lt;li&gt;MINOR version when we add functionality in a backward compatible manner&lt;/li&gt; &#xA; &lt;li&gt;PATCH version when we make backward compatible bug fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The public API that this applies to is the CLI associated with Toolbox, the interactions with official SDKs, and the definitions in the &lt;code&gt;tools.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. Please, see the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://discord.gg/GQrFB3Ec3W&#34;&gt;discord community&lt;/a&gt; to connect with our developers!&lt;/p&gt;</summary>
  </entry>
</feed>