<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-17T01:31:12Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nuttyartist/notes</title>
    <updated>2022-09-17T01:31:12Z</updated>
    <id>tag:github.com,2022-09-17:/nuttyartist/notes</id>
    <link href="https://github.com/nuttyartist/notes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Note-taking application, write down your thoughts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/nuttyartist/notes?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/nuttyartist/notes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/nuttyartist/notes&#34;&gt;&lt;img src=&#34;https://travis-ci.org/nuttyartist/notes.svg?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/nuttyartist/notes&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/rgque4o6x2y0i92i?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notes is an open source and cross-platform note-taking app that is both beautiful and powerful.&lt;/p&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;http://get-notes.com&#34; target=&#34;_blank&#34;&gt;get-notes.com&lt;/a&gt;&lt;br&gt; Our vision for the future on our &lt;a href=&#34;https://github.com/nuttyartist/notes/wiki/Vision&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16375940/188721143-df0a3584-011f-4ef0-a185-82066f9eb671.gif&#34; alt=&#34;notes_screenshot_1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/16375940/188721215-943dff96-fd61-48ad-a2c0-fa059db72152.gif&#34; alt=&#34;notes_screenshot_2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native app (written in C++ with Qt).&lt;/li&gt; &#xA; &lt;li&gt;Fast with a low memory footprint.&lt;/li&gt; &#xA; &lt;li&gt;Fully open source and cross-platform (Linux, macOS, Windows).&lt;/li&gt; &#xA; &lt;li&gt;Completely private - tracks nothing.&lt;/li&gt; &#xA; &lt;li&gt;Beautiful and sleek looking, yet still powerful.&lt;/li&gt; &#xA; &lt;li&gt;Folders and tags. Organize your ideas hierarchically using nested folders and universally using tags.&lt;/li&gt; &#xA; &lt;li&gt;Markdown Support. Format text without lifting your hands from the keyboard.&lt;/li&gt; &#xA; &lt;li&gt;Different themes. Switch between Light, Dark, and Sepia.&lt;/li&gt; &#xA; &lt;li&gt;Feed View. Select multiple notes to see them all one after another in the editor.&lt;/li&gt; &#xA; &lt;li&gt;Always runs in the background. Use the hotkey &#34;Windows&#34; + &#39;N&#39; to summon Notes. &#34;control&#34; + &#34;N&#34; for macOS.&lt;/li&gt; &#xA; &lt;li&gt;Keyboard shortcuts. Meant to have the option to be used solely with a keyboard (but more work needs to be done there).&lt;/li&gt; &#xA; &lt;li&gt;What feature will you contribute?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support the project&lt;/h2&gt; &#xA;&lt;p&gt;If you use Notes daily, consider donating money so I can pay programmers to develop new features and fix bugs. I partner with &lt;a href=&#34;https://github.com/sponsors/nuttyartist&#34;&gt;Github Sponsors&lt;/a&gt; and &lt;a href=&#34;https://www.patreon.com/rubymamis&#34;&gt;Patreon&lt;/a&gt; to receive contributions. You can also put a bounty on specific issues using Bountysource. I currently make a living from ads on the website, but I&#39;d like to stop with that.&lt;/p&gt; &#xA;&lt;h2&gt;How to clone&lt;/h2&gt; &#xA;&lt;p&gt;Use this command to clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$&amp;gt; git clone --recursive  https://github.com/nuttyartist/notes.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Make sure the Qt (&amp;gt;= 5.3) development libraries are installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian/Ubuntu : qt5-default build-essential qtbase5-private-dev sqlite3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$&amp;gt; mkdir build&#xA;$&amp;gt; cd build&#xA;$&amp;gt; qmake ../src&#xA;$&amp;gt; make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database path&lt;/h2&gt; &#xA;&lt;p&gt;The notes database and settings file are stored in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; : &lt;code&gt;C:\Users\user\AppData\Roaming\Awesomeness&lt;/code&gt;&lt;br&gt; &lt;strong&gt;Linux&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: &lt;code&gt;/home/user/.config/Awesomeness/&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;/home/snap/notes/x1/.config/Awesomeness&lt;/code&gt; &lt;strong&gt;(using snap)&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;Mac&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: &lt;code&gt;/home/user/.config/Awesomeness/&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>b23r0/Heroinn</title>
    <updated>2022-09-17T01:31:12Z</updated>
    <id>tag:github.com,2022-09-17:/b23r0/Heroinn</id>
    <link href="https://github.com/b23r0/Heroinn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross platform C2/post-exploitation framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Heroinn&lt;/h1&gt; &#xA;&lt;p&gt;A cross platform C2/post-exploitation framework implementation by Rust.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/b23r0/Heroinn/raw/master/image/ui.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This project is for research and study purposes only, and any illegal behavior using this project has nothing to do with this project.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GUI&lt;/li&gt; &#xA; &lt;li&gt;Interactive PTY shell&lt;/li&gt; &#xA; &lt;li&gt;System infomations collect&lt;/li&gt; &#xA; &lt;li&gt;File manager support with resume broken transfer and largefile&lt;/li&gt; &#xA; &lt;li&gt;Support Win10+(Windows Server 2019+) &amp;amp; Linux &amp;amp; BSD &amp;amp; OSX&lt;/li&gt; &#xA; &lt;li&gt;Multiple communication protocols (TCP &amp;amp; HTTP &amp;amp; reliable UDP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report a BUG&lt;/li&gt; &#xA; &lt;li&gt;Submit an ISSUE about suggestion&lt;/li&gt; &#xA; &lt;li&gt;Submit a improved PR&lt;/li&gt; &#xA; &lt;li&gt;Supplement the documentation about using &lt;code&gt;Heroinn&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everyone for me, I for everyone.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookincubator/memlab</title>
    <updated>2022-09-17T01:31:12Z</updated>
    <id>tag:github.com,2022-09-17:/facebookincubator/memlab</id>
    <link href="https://github.com/facebookincubator/memlab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for finding JavaScript memory leaks and analyzing heap snapshots&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;memlab&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/facebookincubator/memlab/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;Licensed under the MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebookincubator/memlab/raw/main/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs%20-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PR&#39;s Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/memlab&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/memlab.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;memlab is an E2E testing and analysis framework for finding JavaScript memory leaks and optimization opportunities.&lt;/p&gt; &#xA;&lt;p&gt;Online Resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebookincubator.github.io/memlab&#34;&gt;Official Website and Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebookincubator.github.io/memlab/docs/intro&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.fb.com/2022/09/12/open-source/memlab/&#34;&gt;Meta Engineering Blog Post&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Browser memory leak detection&lt;/strong&gt; - Write test scenario with puppeteer API, memlab auto diffs JS heap snapshots, filters out memory leaks, and aggregates results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Object-oriented heap traversing API&lt;/strong&gt; - Supports self-defined memory leak detector and programmatically analyzing JS heap snapshots taken from Chromium-based browsers, Node.js, Electron.js, and Hermes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory CLI toolbox&lt;/strong&gt; - Built-in toolbox and APIs for finding memory optimization opportunities (not necessarily memory leaks)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory assertions in Node.js&lt;/strong&gt; - Enables unit test or running node.js program to take a heap snapshot of its own state, do self memory checking, or write advanced memory assertions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CLI Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install the CLI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g memlab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find Memory Leaks&lt;/h3&gt; &#xA;&lt;p&gt;To find memory leaks in Google Maps, you can create a &lt;a href=&#34;https://facebookincubator.github.io/memlab/docs/api/interfaces/core_src.IScenario&#34;&gt;scenario file&lt;/a&gt; defining how to interact with the Google Maps, let&#39;s name it &lt;code&gt;test-google-maps.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// initial page load url: Google Maps&#xA;function url() {&#xA;  return &#39;https://www.google.com/maps/@37.386427,-122.0428214,11z&#39;;&#xA;}&#xA;&#xA;// action where we want to detect memory leaks: click the Hotels button&#xA;async function action(page) {&#xA;  // puppeteer page API&#xA;  await page.click(&#39;button[aria-label=&#34;Hotels&#34;]&#39;);&#xA;}&#xA;&#xA;// action where we want to go back to the step before: click clear search&#xA;async function back(page) {&#xA;  // puppeteer page API&#xA;  await page.click(&#39;[aria-label=&#34;Clear search&#34;]&#39;);&#xA;}&#xA;&#xA;module.exports = {action, back, url};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run memlab with the scenario file, memlab will interact with the web page and detect memory leaks with built-in leak detectors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;memlab run --scenario test-google-maps.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;memlab will print memory leak results showing one representative retainer trace for each cluster of leaked objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Retainer traces&lt;/strong&gt;: This is the result from &lt;a href=&#34;https://facebookincubator.github.io/memlab/docs/guides/guides-find-leaks&#34;&gt;an example website&lt;/a&gt;, the retainer trace is an object reference chain from the GC root to a leaked object. The trace shows why and how a leaked object is still kept alive in memory. Breaking the reference chain means the leaked object will no longer be reachable from the GC root, and therefore can be garbage collected. By following the leak trace one step at a time, you will be able to find a reference that should be set to null (but it wasn&#39;t due to a bug).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MemLab found 46 leak(s)&#xA;--Similar leaks in this run: 4--&#xA;--Retained size of leaked objects: 8.3MB--&#xA;[Window] (native) @35847 [8.3MB]&#xA;  --20 (element)---&amp;gt;  [InternalNode] (native) @130981728 [8.3MB]&#xA;  --8 (element)---&amp;gt;  [InternalNode] (native) @130980288 [8.3MB]&#xA;  --1 (element)---&amp;gt;  [EventListener] (native) @131009888 [8.3MB]&#xA;  --1 (element)---&amp;gt;  [V8EventListener] (native) @224808192 [8.3MB]&#xA;  --1 (element)---&amp;gt;  [eventHandler] (closure) @168079 [8.3MB]&#xA;  --context (internal)---&amp;gt;  [&amp;lt;function scope&amp;gt;] (object) @181905 [8.3MB]&#xA;  --bigArray (variable)---&amp;gt;  [Array] (object) @182925 [8.3MB]&#xA;  --elements (internal)---&amp;gt;  [(object elements)] (array) @182929 [8.3MB]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get readable trace, the web site under test needs to serve non-minified code (or at least minified code with readable variables, function name, and property names on objects).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can debug the leak by loading the heap snapshot taken by memlab (saved in &lt;code&gt;$(memlab get-default-work-dir)/data/cur&lt;/code&gt;) in Chrome DevTool and search for the leaked object ID (&lt;code&gt;@182929&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;View Retainer Trace Interactively&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;View memory issues detected by memlab based on a single JavaScript heap snapshot taken from Chromium, Hermes, memlab, or any node.js or Electron.js program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;memlab view-heap --snapshot &amp;lt;PATH TO .heapsnapshot FILE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally specify a specific heap object with the object&#39;s id: &lt;code&gt;--node-id @28173&lt;/code&gt; to pinpoint a specific object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebookincubator/memlab/main/website/static/img/heap-view.png&#34; alt=&#34;heap-view&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Self-defined leak detector&lt;/strong&gt;: If you want to use a self-defined leak detector, add a &lt;code&gt;filterLeak&lt;/code&gt; callback (&lt;a href=&#34;https://facebookincubator.github.io/memlab/docs/api/interfaces/core_src.IScenario/#-optional-beforeleakfilter-initleakfiltercallback&#34;&gt;doc&lt;/a&gt;) in the scenario file. &lt;code&gt;filterLeak&lt;/code&gt; will be called for every unreleased heap object (&lt;code&gt;node&lt;/code&gt;) allocated by the target interaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function filterLeak(node, heap) {&#xA;  // ... your leak detector logic&#xA;  // return true to mark the node as a memory leak&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;heap&lt;/code&gt; is the graph representation of the final JavaScript heap snapshot. For more details, view the &lt;a href=&#34;https://facebookincubator.github.io/memlab/docs/api/interfaces/core_src.IHeapSnapshot&#34;&gt;doc site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Heap Analysis and Investigation&lt;/h3&gt; &#xA;&lt;p&gt;View which object keeps growing in size during interaction in the previous run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;memlab analyze unbound-object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Analyze pre-fetched V8/hermes &lt;code&gt;.heapsnapshot&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;memlab analyze unbound-object --snapshot-dir &amp;lt;DIR_OF_SNAPSHOT_FILES&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;memlab analyze&lt;/code&gt; to view all built-in memory analyses. For extension, view the &lt;a href=&#34;https://facebookincubator.github.io/memlab&#34;&gt;doc site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;View retainer trace of a particular object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;memlab trace --node-id &amp;lt;HEAP_OBJECT_ID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;memlab help&lt;/code&gt; to view all CLI commands.&lt;/p&gt; &#xA;&lt;h2&gt;APIs&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;memlab&lt;/code&gt; npm package to start a E2E run in browser and detect memory leaks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const memlab = require(&#39;memlab&#39;);&#xA;&#xA;const scenario = {&#xA;    // initial page load url&#xA;    url: () =&amp;gt; &#39;https://www.google.com/maps/@37.386427,-122.0428214,11z&#39;,&#xA;&#xA;    // action where we want to detect memory leaks&#xA;    action: async (page) =&amp;gt; await page.click(&#39;button[aria-label=&#34;Hotels&#34;]&#39;),&#xA;&#xA;    // action where we want to go back to the step before&#xA;    back: async (page) =&amp;gt; await page.click(&#39;[aria-label=&#34;Clear search&#34;]&#39;),&#xA;}&#xA;memlab.run({scenario});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory Assertions&lt;/h2&gt; &#xA;&lt;p&gt;memlab makes it possible to enable a unit test or running node.js program to take a heap snapshot of its own state, and write advanced memory assertions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// save as example.test.ts&#xA;import type {IHeapSnapshot, Nullable} from &#39;@memlab/core&#39;;&#xA;import {config, takeNodeMinimalHeap} from &#39;@memlab/core&#39;;&#xA;&#xA;class TestObject {&#xA;  public arr1 = [1, 2, 3];&#xA;  public arr2 = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;];&#xA;}&#xA;&#xA;test(&#39;memory test with heap assertion&#39;, async () =&amp;gt; {&#xA;  config.muteConsole = true; // no console output&#xA;&#xA;  let obj: Nullable&amp;lt;TestObject&amp;gt; = new TestObject();&#xA;  // get a heap snapshot of the current program state&#xA;  let heap: IHeapSnapshot = await takeNodeMinimalHeap();&#xA;&#xA;  // call some function that may add references to obj&#xA;  rabbitHole(obj)&#xA;&#xA;  expect(heap.hasObjectWithClassName(&#39;TestObject&#39;)).toBe(true);&#xA;  obj = null;&#xA;&#xA;  heap = await takeNodeMinimalHeap();&#xA;  // if rabbitHole does not have any side effect that&#xA;  // adds new references to obj, then obj can be GCed&#xA;  expect(heap.hasObjectWithClassName(&#39;TestObject&#39;)).toBe(false);&#xA;&#xA;}, 30000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other APIs check out the &lt;a href=&#34;https://facebookincubator.github.io/memlab/docs/api/interfaces/core_src.IHeapSnapshot#hasobjectwithclassnameclassname&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Use node version 16 or above. To build on Windows, please use Git Bash.&lt;/p&gt; &#xA;&lt;p&gt;First build the project as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then keep this helper script running to ensure that local changes are picked up and compiled automatically during development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: To run the memlab cli locally, make sure to prefix the memlab command with npx from within the memlab repo e.g. &lt;code&gt;npx memlab&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;memlab is MIT licensed, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/memlab/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/memlab/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn about how to contribute to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/memlab/main/CODE_OF_CONDUCT.md&#34;&gt;Code Of Conduct&lt;/a&gt; to learn more about our contributor standards and expectations.&lt;/p&gt;</summary>
  </entry>
</feed>