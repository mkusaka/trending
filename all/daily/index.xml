<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-20T01:29:14Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zen-browser/desktop</title>
    <updated>2025-05-20T01:29:14Z</updated>
    <id>tag:github.com,2025-05-20:/zen-browser/desktop</id>
    <link href="https://github.com/zen-browser/desktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Welcome to a calmer internet&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/docs/assets/zen-dark.svg?sanitize=true&#34; width=&#34;100px&#34; align=&#34;left&#34;&gt; &#xA;&lt;h3&gt;&lt;code&gt;Zen Browser&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zen-browser/desktop/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/zen-browser/desktop/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/zen-browser&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/zen-browser/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zen-browser/desktop/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/zen-browser/desktop/actions/workflows/build.yml/badge.svg?branch=stable&#34; alt=&#34;Zen Release builds&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ú® Experience tranquillity while browsing the internet with Zen! Our mission is to give you a balance between speed, privacy and productivity!&lt;/p&gt; &#xA;&lt;div flex=&#34;true&#34;&gt; &#xA; &lt;a href=&#34;https://zen-browser.app/download&#34;&gt; Download &lt;/a&gt; ‚Ä¢ &#xA; &lt;a href=&#34;https://zen-browser.app&#34;&gt; Website &lt;/a&gt; ‚Ä¢ &#xA; &lt;a href=&#34;https://docs.zen-browser.app&#34;&gt; Documentation &lt;/a&gt; ‚Ä¢ &#xA; &lt;a href=&#34;https://zen-browser.app/release-notes/latest&#34;&gt; Release Notes &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Zen is currently built using Firefox version &lt;code&gt;138.0.4&lt;/code&gt;! üöÄ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zen-browser.app/download?twilight&#34;&gt;&lt;code&gt;Zen Twilight&lt;/code&gt;&lt;/a&gt; - Is currently built using Firefox version &lt;code&gt;RC 138.0.4&lt;/code&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Check out the latest &lt;a href=&#34;https://zen-browser.app/release-notes&#34;&gt;release notes&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Part of our mission is to keep Zen up-to-date with the latest version of Firefox, so you can enjoy the latest features and security updates!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Zen is an open-source project, and we welcome contributions from the community! Please take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/docs/contribute.md&#34;&gt;contribution guidelines&lt;/a&gt; before getting started!&lt;/p&gt; &#xA;&lt;h3&gt;Issue metrics&lt;/h3&gt; &#xA;&lt;p&gt;We keep track of how many issues are closed at the end of the month in &lt;a href=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/docs/issue-metrics&#34;&gt;docs/issue-metrics&lt;/a&gt;. We use this to keep track of our issues and see our progress! üìà&lt;/p&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Zen uses &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, meaning versions are displayed as &lt;code&gt;a.b.cd&lt;/code&gt; where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt; is the major version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; is the minor version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; is the branch prefix&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt; is the patch version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;Zen is divided into 2 main branches. We use &lt;code&gt;dev&lt;/code&gt; for development and &lt;code&gt;stable&lt;/code&gt; for stable releases. The &lt;code&gt;dev&lt;/code&gt; branch is where all the new features are added and where &lt;code&gt;twilight&lt;/code&gt; builds are generated. The &lt;code&gt;stable&lt;/code&gt; branch is where the stable releases are generated.&lt;/p&gt; &#xA;&lt;p&gt;We divide into 2 branches in case there&#39;s any really important security update (for example) that needs to be released before the next stable release. This allows us to do patches without releasing unstable versions to the public.&lt;/p&gt; &#xA;&lt;h2&gt;üì• Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Operating Systems&lt;/h3&gt; &#xA;&lt;p&gt;Zen is available for Linux, macOS, and Windows. You can download the latest version from the official website at &lt;a href=&#34;https://zen-browser.app/download&#34;&gt;zen-browser.app&lt;/a&gt;, or from the &lt;a href=&#34;https://github.com/zen-browser/desktop/releases&#34;&gt;GitHub Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t see your OS listed below, that&#39;s because we already have it in our &lt;a href=&#34;https://zen-browser.app/download&#34;&gt;downloads page&lt;/a&gt;! Make sure to check it out!&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;h5&gt;Winget&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps&#34;&gt;winget install --id Zen-Team.Zen-Browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires macOS 10.15 or later&lt;/li&gt; &#xA; &lt;li&gt;Available for ARM and Intel architectures&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also install Zen using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install zen-browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;h5&gt;Arch-based distributions&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S zen-browser-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Other Linux distributions (Tarball or AppImage)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Tarball&lt;/code&gt; install:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash &amp;lt;(curl -s https://updates.zen-browser.app/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AppImage&lt;/code&gt; install:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash &amp;lt;(curl https://updates.zen-browser.app/appimage.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AppImage install requires &lt;code&gt;zsync&lt;/code&gt; for the Update feature&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Again, if you don&#39;t see your OS listed above, that&#39;s because we already have it in our &lt;a href=&#34;https://zen-browser.app/download&#34;&gt;downloads page&lt;/a&gt;! üîÑ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To upgrade the browser to a newer version, use the embedded update functionality in &lt;code&gt;About Zen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Development and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Some components used by @zen-browser as an attempt to make Firefox forks a better place, and for other to enjoy the beauty of OSS. You can find them &lt;a href=&#34;https://github.com/zen-browser/desktop/tree/dev/src/zen&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Run Locally&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In order to download and run Zen locally, please follow &lt;a href=&#34;https://docs.zen-browser.app/guides/building&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Special Thanks&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Special thanks to... EVERYONE üéâ! Checkout the team and contributors page &lt;a href=&#34;https://zen-browser.app/about&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Third Party Code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Zen couldn&#39;t be in its current state without the help of these amazing projects! üôè&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zen&#39;s default preferences are based on &lt;a href=&#34;https://github.com/yokoffing/Betterfox&#34;&gt;BetterFox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradient image extracted from &lt;a href=&#34;https://github.com/neurokitti/Arc_Palette&#34;&gt;Arc Palette&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;icons.css&lt;/code&gt; has been modified from &lt;a href=&#34;https://github.com/bmFtZQ/edge-frfox&#34;&gt;Edge Firefox&lt;/a&gt; (MIT licensed file).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üñ•Ô∏è Comparison with other browsers&lt;/h3&gt; &#xA;&lt;p&gt;Thanks everyone for making Zen stand out among these giants!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#zen-browser/desktop&amp;amp;chromium/chromium&amp;amp;brave/brave-browser&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=zen-browser/desktop,chromium/chromium,brave/brave-browser&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;Zen browser is under the &lt;a href=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/LICENSE&#34;&gt;MPL 2.0 LICENSE&lt;/a&gt;. All the code is open-source and free to use! Attribution is appreciated but not required.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/pyrefly</title>
    <updated>2025-05-20T01:29:14Z</updated>
    <id>tag:github.com,2025-05-20:/facebook/pyrefly</id>
    <link href="https://github.com/facebook/pyrefly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast type checker and IDE for Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pyrefly: A fast type checker and IDE for Python&lt;/h1&gt; &#xA;&lt;p&gt;Currently under active development with known issues. Please open an issue if you find bugs.&lt;/p&gt; &#xA;&lt;p&gt;Pyrefly is a fast type checker for Python. It&#39;s designed to replace the existing Pyre type checker at Meta by the end of 2025. This README describes basic usage. See the &lt;a href=&#34;https://pyrefly.org&#34;&gt;Pyrefly website&lt;/a&gt; for full documentation and a tool for checking code.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Pyrefly aims to increase development velocity with IDE features and by checking your Python code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try out pyrefly in your browser: &lt;a href=&#34;https://pyrefly.org/sandbox/&#34;&gt;Sandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the command-line tool: &lt;code&gt;pip install pyrefly&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the VSCode extension: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=meta.pyrefly&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type Inference: Pyrefly infers types in most locations, apart from function parameters. It can infer types of variables and return types.&lt;/li&gt; &#xA; &lt;li&gt;Flow Types: Pyrefly can understand your program&#39;s control flow to refine static types.&lt;/li&gt; &#xA; &lt;li&gt;Incrementality: Pyrefly aims for large-scale incrementality at the module level, with optimized checking and parallelism.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Involved&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions or would like to report a bug, please &lt;a href=&#34;https://github.com/facebook/pyrefly/issues&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://github.com/facebook/pyrefly/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for information on how to contribute to Pyrefly.&lt;/p&gt; &#xA;&lt;h2&gt;Choices&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of choices when writing a Python type checker. We are take inspiration from &lt;a href=&#34;https://pyre-check.org/&#34;&gt;Pyre1&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright&lt;/a&gt; and &lt;a href=&#34;https://mypy.readthedocs.io/en/stable/&#34;&gt;MyPy&lt;/a&gt;. Some notable choices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We infer types in most locations, apart from parameters to functions. We do infer types of variables and return types. As an example, &lt;code&gt;def foo(x): return True&lt;/code&gt; would result in something equivalent to had you written &lt;code&gt;def foo(x: Any) -&amp;gt; bool: ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We attempt to infer the type of &lt;code&gt;[]&lt;/code&gt; to however it is used first, then fix it after. For example &lt;code&gt;xs = []; xs.append(1); xs.append(&#34;&#34;)&lt;/code&gt; will infer that &lt;code&gt;xs: List[int]&lt;/code&gt; and then error on the final statement.&lt;/li&gt; &#xA; &lt;li&gt;We use flow types which refine static types, e.g. &lt;code&gt;x: int = 4&lt;/code&gt; will both know that &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;int&lt;/code&gt;, but also that the immediately next usage of &lt;code&gt;x&lt;/code&gt; will be aware the type is &lt;code&gt;Literal[4]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We aim for large-scale incrementality (at the module level) and optimised checking with parallelism, aiming to use the advantages of Rust to keep the code a bit simpler.&lt;/li&gt; &#xA; &lt;li&gt;We expect large strongly connected components of modules, and do not attempt to take advantage of a DAG-shape in the source code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;There are many nuances of design that change on a regular basis. But the basic substrate on which the checker is built involves three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Figure out what each module exports. That requires solving all &lt;code&gt;import *&lt;/code&gt; statements transitively.&lt;/li&gt; &#xA; &lt;li&gt;For each module in isolation, convert it to bindings, dealing with all statements and scope information (both static and flow).&lt;/li&gt; &#xA; &lt;li&gt;Solve those bindings, which may require the solutions of bindings in other modules.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If we encounter unknowable information (e.g. recursion) we use &lt;code&gt;Type::Var&lt;/code&gt; to insert placeholders which are filled in later.&lt;/p&gt; &#xA;&lt;p&gt;For each module, we solve the steps sequentially and completely. In particular, we do not try and solve a specific identifier first (like &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Rosyln&lt;/a&gt; or &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;), and do not used fine-grained incrementality (like &lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;Rust Analyzer&lt;/a&gt; using &lt;a href=&#34;https://github.com/salsa-rs/salsa&#34;&gt;Salsa&lt;/a&gt;). Instead, we aim for raw performance and a simpler module-centric design - there&#39;s no need to solve a single binding in isolation if solving all bindings in a module is fast enough.&lt;/p&gt; &#xA;&lt;h3&gt;Example of bindings&lt;/h3&gt; &#xA;&lt;p&gt;Given the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1: x: int = 4&#xA;2: print(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We might produce the bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;define int@0&lt;/code&gt; = &lt;code&gt;from builtins import int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;define x@1&lt;/code&gt; = &lt;code&gt;4: int@0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use x@2&lt;/code&gt; = &lt;code&gt;x@1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;anon @2&lt;/code&gt; = &lt;code&gt;print(x@2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;export x&lt;/code&gt; = &lt;code&gt;x@2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The keys are things like &lt;code&gt;define&lt;/code&gt; (the definition of something), &lt;code&gt;use&lt;/code&gt; (a usage of a thing) and &lt;code&gt;anon&lt;/code&gt; (a statement we need to type check, but don&#39;t care about the result of).&lt;/li&gt; &#xA; &lt;li&gt;In many cases the value of a key refers to other keys.&lt;/li&gt; &#xA; &lt;li&gt;Some keys are imported from other modules, via &lt;code&gt;export&lt;/code&gt; keys and &lt;code&gt;import&lt;/code&gt; values.&lt;/li&gt; &#xA; &lt;li&gt;In order to disamiguate identifiers we use the textual position at which they occur (in the example I&#39;ve used &lt;code&gt;@line&lt;/code&gt;, but in reality its the byte offset in the file).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example of &lt;code&gt;Var&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1: x = 1&#xA;2: while test():&#xA;3:     x = x&#xA;4: print(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We end up with the bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;x@1&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x@3&lt;/code&gt; = &lt;code&gt;phi(x@1, x@3)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x@4&lt;/code&gt; = &lt;code&gt;phi(x@1, x@3)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The expression &lt;code&gt;phi&lt;/code&gt; is the join point of the two values, e.g. &lt;code&gt;phi(int, str)&lt;/code&gt; would be &lt;code&gt;int | str&lt;/code&gt;. We skip the distinction between &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;, since it is not necessary for this example.&lt;/p&gt; &#xA;&lt;p&gt;When solving &lt;code&gt;x@3&lt;/code&gt; we encounter recursion. Operationally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We start solving &lt;code&gt;x@3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;That requires us to solve &lt;code&gt;x@1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We solve &lt;code&gt;x@1&lt;/code&gt; to be &lt;code&gt;Literal[1]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;We start solving &lt;code&gt;x@3&lt;/code&gt;. But we are currently solving &lt;code&gt;x@3&lt;/code&gt;, so we invent a fresh &lt;code&gt;Var&lt;/code&gt; (let&#39;s call it &lt;code&gt;?1&lt;/code&gt;) and return that.&lt;/li&gt; &#xA; &lt;li&gt;We conclude that &lt;code&gt;x@3&lt;/code&gt; must be &lt;code&gt;Literal[1] | ?1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Since &lt;code&gt;?1&lt;/code&gt; was introduced by &lt;code&gt;x@3&lt;/code&gt; we record that &lt;code&gt;?1 = Literal[1] | ?1&lt;/code&gt;. We can take the upper reachable bound of that and conclude that &lt;code&gt;?1 = Literal[1]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We simplify &lt;code&gt;x@3&lt;/code&gt; to just &lt;code&gt;Literal[1]&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>