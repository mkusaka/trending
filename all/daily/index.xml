<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-22T01:29:28Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>karpathy/ng-video-lecture</title>
    <updated>2023-01-22T01:29:28Z</updated>
    <id>tag:github.com,2023-01-22:/karpathy/ng-video-lecture</id>
    <link href="https://github.com/karpathy/ng-video-lecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nanogpt-lecture&lt;/h1&gt; &#xA;&lt;p&gt;Code created in the &lt;a href=&#34;https://karpathy.ai/zero-to-hero.html&#34;&gt;Neural Networks: Zero To Hero&lt;/a&gt; video lecture series, specifically on the first lecture on nanoGPT. Publishing here as a Github repo so people can easily hack it, walk through the &lt;code&gt;git log&lt;/code&gt; history of it, etc.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>timothybrooks/instruct-pix2pix</title>
    <updated>2023-01-22T01:29:28Z</updated>
    <id>tag:github.com,2023-01-22:/timothybrooks/instruct-pix2pix</id>
    <link href="https://github.com/timothybrooks/instruct-pix2pix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InstructPix2Pix: Learning to Follow Image Editing Instructions&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.timothybrooks.com/instruct-pix2pix/&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2211.09800&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;http://instruct-pix2pix.eecs.berkeley.edu/&#34;&gt;Data&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;PyTorch implementation of InstructPix2Pix, an instruction-based image editing model, based on the original &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;CompVis/stable_diffusion&lt;/a&gt; repo. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.timothybrooks.com/instruct-pix2pix/&#34;&gt;InstructPix2Pix: Learning to Follow Image Editing Instructions&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.timothybrooks.com/&#34;&gt;Tim Brooks&lt;/a&gt;*, &lt;a href=&#34;https://holynski.org/&#34;&gt;Aleksander Holynski&lt;/a&gt;*, &lt;a href=&#34;https://people.eecs.berkeley.edu/~efros/&#34;&gt;Alexei A. Efros&lt;/a&gt; &lt;br&gt; UC Berkeley &lt;br&gt; *denotes equal contribution&lt;/p&gt; &#xA;&lt;img src=&#34;https://instruct-pix2pix.timothybrooks.com/teaser.jpg&#34;&gt; &#xA;&lt;h2&gt;TL;DR: quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Set up a conda environment, and download a pretrained model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate ip2p&#xA;bash scripts/download_checkpoints.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit a single image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python edit_cli.py --input imgs/example.jpg --output imgs/output.jpg --edit &#34;turn him into a cyborg&#34;&#xA;&#xA;# Optionally, you can specify parameters to tune your result:&#xA;# python edit_cli.py --steps 100 --resolution 512 --seed 1371 --cfg-text 7.5 --cfg-image 1.2 --input imgs/example.jpg --output imgs/output.jpg --edit &#34;turn him into a cyborg&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or launch your own interactive editing Gradio app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python edit_app.py &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/timothybrooks/instruct-pix2pix/raw/main/imgs/edit_app.jpg?raw=true&#34; alt=&#34;Edit app&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(For advice on how to get the best results by tuning parameters, see the &lt;a href=&#34;https://github.com/timothybrooks/instruct-pix2pix#tips&#34;&gt;Tips&lt;/a&gt; section).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install all dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the pretrained models by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/download_checkpoints.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generated Dataset&lt;/h2&gt; &#xA;&lt;p&gt;Our image editing model is trained on a generated dataset consisting of 454,445 examples. Each example contains (1) an input image, (2) an editing instruction, and (3) an output edited image. We provide two versions of the dataset, one in which each pair of edited images is generated 100 times, and the best examples are chosen based on CLIP metrics (Section 3.1.2 in the paper) (&lt;code&gt;clip-filtered-dataset&lt;/code&gt;), and one in which examples are randomly chosen (&lt;code&gt;random-sample-dataset&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For the released version of this dataset, we&#39;ve additionally filtered prompts and images for NSFW content. After NSFW filtering, the GPT-3 generated dataset contains 451,990 examples. The final image-pair datasets contain:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;# of image editing examples&lt;/th&gt; &#xA;   &lt;th&gt;Dataset size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;random-sample-dataset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;451990&lt;/td&gt; &#xA;   &lt;td&gt;727GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clip-filtered-dataset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;313010&lt;/td&gt; &#xA;   &lt;td&gt;436GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To download one of these datasets, along with the entire NSFW-filtered text data, run the following command with the appropriate dataset name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/download_data.sh clip-filtered-dataset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training InstructPix2Pix&lt;/h2&gt; &#xA;&lt;p&gt;InstructPix2Pix is trained by fine-tuning from an initial StableDiffusion checkpoint. The first step is to download a Stable Diffusion checkpoint. For our trained models, we used the v1.5 checkpoint as the starting point. To download the same ones we used, you can run the following script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/download_pretrained_sd.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to use a different checkpoint, point to it in the config file &lt;code&gt;configs/train.yaml&lt;/code&gt;, on line 8, after &lt;code&gt;ckpt_path:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next, we need to change the config to point to our downloaded (or generated) dataset. If you&#39;re using the &lt;code&gt;clip-filtered-dataset&lt;/code&gt; from above, you can skip this. Otherwise, you may need to edit lines 85 and 94 of the config (&lt;code&gt;data.params.train.params.path&lt;/code&gt;, &lt;code&gt;data.params.validation.params.path&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Finally, start a training job with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --name default --base configs/train.yaml --train --gpus 0,1,2,3,4,5,6,7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating your own dataset&lt;/h2&gt; &#xA;&lt;p&gt;Our generated dataset of paired images and editing instructions is made in two phases: First, we use GPT-3 to generate text triplets: (a) a caption describing an image, (b) an edit instruction, (c) a caption describing the image after the edit. Then, we turn pairs of captions (before/after the edit) into pairs of images using Stable Diffusion and Prompt-to-Prompt.&lt;/p&gt; &#xA;&lt;h3&gt;(1) Generate a dataset of captions and instructions&lt;/h3&gt; &#xA;&lt;p&gt;We provide our generated dataset of captions and edit instructions &lt;a href=&#34;https://instruct-pix2pix.eecs.berkeley.edu/gpt-generated-prompts.jsonl&#34;&gt;here&lt;/a&gt;. If you plan to use our captions+instructions, skip to step (2). Otherwise, if you would like to create your own text dataset, please follow steps (1.1-1.3) below. Note that generating very large datasets using GPT-3 can be expensive.&lt;/p&gt; &#xA;&lt;h4&gt;(1.1) Manually write a dataset of instructions and captions&lt;/h4&gt; &#xA;&lt;p&gt;The first step of the process is fine-tuning GPT-3. To do this, we made a dataset of 700 examples broadly covering of edits that we might want our model to be able to perform. Our examples are available &lt;a href=&#34;https://instruct-pix2pix.eecs.berkeley.edu/human-written-prompts.jsonl&#34;&gt;here&lt;/a&gt;. These should be diverse and cover a wide range of possible captions and types of edits. Ideally, they should avoid duplication or significant overlap of captions and instructions. It is also important to be mindful of limitations of Stable Diffusion and Prompt-to-Prompt in writing these examples, such as inability to perform large spatial transformations (e.g., moving the camera, zooming in, swapping object locations).&lt;/p&gt; &#xA;&lt;p&gt;Input prompts should closely match the distribution of input prompts used to generate the larger dataset. We sampled the 700 input prompts from the &lt;em&gt;LAION Improved Aesthetics 6.5+&lt;/em&gt; dataset and also use this dataset for generating examples. We found this dataset is quite noisy (many of the captions are overly long and contain irrelevant text). For this reason, we also considered MSCOCO and LAION-COCO datasets, but ultimately chose &lt;em&gt;LAION Improved Aesthetics 6.5+&lt;/em&gt; due to its diversity of content, proper nouns, and artistic mediums. If you choose to use another dataset or combination of datasets as input to GPT-3 when generating examples, we recommend you sample the input prompts from the same distribution when manually writing training examples.&lt;/p&gt; &#xA;&lt;h4&gt;(1.2) Finetune GPT-3&lt;/h4&gt; &#xA;&lt;p&gt;The next step is to finetune a large language model on the manually written instructions/outputs to generate edit instructions and edited caption from a new input caption. For this, we finetune GPT-3&#39;s Davinci model via the OpenAI API, although other language models could be used.&lt;/p&gt; &#xA;&lt;p&gt;To prepare training data for GPT-3, one must first create an OpenAI developer account to access the needed APIs, and &lt;a href=&#34;https://beta.openai.com/docs/api-reference/introduction&#34;&gt;set up the API keys on your local device&lt;/a&gt;. Also, run the &lt;code&gt;prompts/prepare_for_gpt.py&lt;/code&gt; script, which forms the prompts into the correct format by concatenating instructions and captions and adding delimiters and stop sequences.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python dataset_creation/prepare_for_gpt.py --input-path data/human-written-prompts.jsonl --output-path data/human-written-prompts-for-gpt.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, finetune GPT-3 via the OpenAI CLI. We provide an example below, although please refer to OpenAI&#39;s official documentation for this, as best practices may change. We trained the Davinci model for a single epoch. You can experiment with smaller less expensive GPT-3 variants or with open source language models, although this may negatively affect performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openai api fine_tunes.create -t data/human-written-prompts-for-gpt.jsonl -m davinci --n_epochs 1 --suffix &#34;instruct-pix2pix&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can test out the finetuned GPT-3 model by launching the provided Gradio app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python prompt_app.py --openai-api-key OPENAI_KEY --openai-model OPENAI_MODEL_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/timothybrooks/instruct-pix2pix/raw/main/imgs/prompt_app.jpg?raw=true&#34; alt=&#34;Prompt app&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;(1.3) Generate a large dataset of captions and instructions&lt;/h4&gt; &#xA;&lt;p&gt;We now use the finetuned GPT-3 model to generate a large dataset. Our dataset cost thousands of dollars to create. See &lt;code&gt;prompts/gen_instructions_and_captions.py&lt;/code&gt; for the script which generates these examples. We recommend first generating a small number of examples (by setting a low value of &lt;code&gt;--num-samples&lt;/code&gt;) and gradually increasing the scale to ensure the results are working as desired before increasing scale.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python dataset_creation/generate_txt_dataset.py --openai-api-key OPENAI_KEY --openai-model OPENAI_MODEL_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are generating at a very large scale (e.g., 100K+), it will be noteably faster to generate the dataset with multiple processes running in parallel. This can be accomplished by setting &lt;code&gt;--partitions=N&lt;/code&gt; to a higher number and running multiple processes, setting each &lt;code&gt;--partition&lt;/code&gt; to the corresponding value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python dataset_creation/generate_txt_dataset.py --openai-api-key OPENAI_KEY --openai-model OPENAI_MODEL_NAME --partitions=10 --partition=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(2) Turn paired captions into paired images&lt;/h3&gt; &#xA;&lt;p&gt;The next step is to turn pairs of text captions into pairs of images. For this, we need to copy some pre-trained Stable Diffusion checkpoints to &lt;code&gt;stable_diffusion/models/ldm/stable-diffusion-v1/&lt;/code&gt;. You may have already done this if you followed the instructions above for training with our provided data, but if not, you can do this by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/download_pretrained_sd.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For our model, we used &lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/v1-5-pruned.ckpt&#34;&gt;checkpoint v1.5&lt;/a&gt;, and the &lt;a href=&#34;https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.ckpt&#34;&gt;new autoencoder&lt;/a&gt;, but other models may work as well. If you choose to use other models, make sure to change point to the corresponding checkpoints by passing in the &lt;code&gt;--ckpt&lt;/code&gt; and &lt;code&gt;--vae-ckpt&lt;/code&gt; arguments. Once all checkpoints have been downloaded, we can generate the dataset with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python dataset_creation/generate_img_dataset.py --out_dir data/instruct-pix2pix-dataset-000 --prompts_file path/to/generated_prompts.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command operates on a single GPU (typically a V100 or A100). To parallelize over many GPUs/machines, set &lt;code&gt;--n-partitions&lt;/code&gt; to the total number of parallel jobs and &lt;code&gt;--partition&lt;/code&gt; to the index of each job.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python dataset_creation/generate_img_dataset.py --out_dir data/instruct-pix2pix-dataset-000 --prompts_file path/to/generated_prompts.jsonl --n-partitions 100 --partition 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default parameters match that of our dataset, although in practice you can use a smaller number of steps (e.g., &lt;code&gt;--steps=25&lt;/code&gt;) to generate high quality data faster. By default, we generate 100 samples per prompt and use CLIP filtering to keep a max of 4 per prompt. You can experiment with fewer samples by setting &lt;code&gt;--n-samples&lt;/code&gt;. The command below turns off CLIP filtering entirely and is therefore faster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python dataset_creation/generate_img_dataset.py --out_dir data/instruct-pix2pix-dataset-000 --prompts_file path/to/generated_prompts.jsonl --n-samples 4 --clip-threshold 0 --clip-dir-threshold 0 --clip-img-threshold 0 --n-partitions 100 --partition 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After generating all of the dataset examples, run the following command below to create a list of the examples. This is needed for the dataset onject to efficiently be able to sample examples without needing to iterate over the entire dataset directory at the start of each training run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python dataset_creation/prepare_dataset.py data/instruct-pix2pix-dataset-000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;To generate plots like the ones in Figures 8 and 10 in the paper, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python metrics/compute_metrics.py --ckpt /path/to/your/model.ckpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re not getting the quality result you want, there may be a few reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Is the image not changing enough?&lt;/strong&gt; Your Image CFG weight may be too high. This value dictates how similar the output should be to the input. It&#39;s possible your edit requires larger changes from the original image, and your Image CFG weight isn&#39;t allowing that. Alternatively, your Text CFG weight may be too low. This value dictates how much to listen to the text instruction. The default Image CFG of 1.5 and Text CFG of 7.5 are a good starting point, but aren&#39;t necessarily optimal for each edit. Try: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Decreasing the Image CFG weight, or&lt;/li&gt; &#xA;   &lt;li&gt;Incerasing the Text CFG weight, or&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Conversely, &lt;strong&gt;is the image changing too much&lt;/strong&gt;, such that the details in the original image aren&#39;t preserved? Try: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Increasing the Image CFG weight, or&lt;/li&gt; &#xA;   &lt;li&gt;Decreasing the Text CFG weight&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Try generating results with different random seeds by setting &#34;Randomize Seed&#34; and running generation multiple times. You can also try setting &#34;Randomize CFG&#34; to sample new Text CFG and Image CFG values each time.&lt;/li&gt; &#xA; &lt;li&gt;Rephrasing the instruction sometimes improves results (e.g., &#34;turn him into a dog&#34; vs. &#34;make him a dog&#34; vs. &#34;as a dog&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Increasing the number of steps sometimes improves results.&lt;/li&gt; &#xA; &lt;li&gt;Do faces look weird? The Stable Diffusion autoencoder has a hard time with faces that are small in the image. Try cropping the image so the face takes up a larger portion of the frame.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our codebase is based on the &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion codebase&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{brooks2022instructpix2pix,&#xA;  title={InstructPix2Pix: Learning to Follow Image Editing Instructions},&#xA;  author={Brooks, Tim and Holynski, Aleksander and Efros, Alexei A},&#xA;  journal={arXiv preprint arXiv:2211.09800},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>easychen/CookieCloud</title>
    <updated>2023-01-22T01:29:28Z</updated>
    <id>tag:github.com,2023-01-22:/easychen/CookieCloud</id>
    <link href="https://github.com/easychen/CookieCloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CookieCloud是一个向自架服务器同步Cookie的小工具，可以将浏览器的登录态同步到手机和云端，它支持端对端加密，可设定同步时间间隔。本仓库包含了插件和服务器端源码。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CookieCloud&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/CookieCloud/master/extension/assets/icon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;CookieCloud是一个和自架服务器同步Cookie的小工具，可以将浏览器的登录态同步到手机和云端，它内置端对端加密，可设定同步时间间隔。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;最新版本支持了对同域名下local storage的同步&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/CookieCloudTG&#34;&gt;Telegram频道&lt;/a&gt; | &lt;a href=&#34;https://t.me/CookieCloudGroup&#34;&gt;Telegram交流群&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚠️ Breaking Change&lt;/h2&gt; &#xA;&lt;p&gt;由于支持 local storage 的呼声很高，因此插件版本 0.1.5+ 除了 cookie 也支持了 local storage，这导致加密文本格式变化（从独立cookie对象变成{ cookie_data, local_storage_data }）。&lt;/p&gt; &#xA;&lt;p&gt;另外，为避免配置同步导致的上下行冲突，配置存储从 remote 改到了 local，使用之前版本的同学需要重新配置一下。&lt;/p&gt; &#xA;&lt;p&gt;对此带来的不便深表歉意 🙇🏻‍♂️&lt;/p&gt; &#xA;&lt;h2&gt;官方教程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/CookieCloud/master/images/20230121141854.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;视频教程：&lt;a href=&#34;https://www.bilibili.com/video/BV1fR4y1a7zb&#34;&gt;B站&lt;/a&gt; &lt;a href=&#34;https://youtu.be/3oeSiGHXeQw&#34;&gt;Youtube&lt;/a&gt; 求关注求订阅🥺&lt;/li&gt; &#xA; &lt;li&gt;图文教程：&lt;a href=&#34;https://juejin.cn/post/7190963442017108027&#34;&gt;掘金&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;目前只支持单向同步，即一个浏览器上传，一个浏览器下载&lt;/li&gt; &#xA; &lt;li&gt;浏览器扩展只官方支持 Chrome 和 Edge。其他 Chrome 内核浏览器可用，但未经测试。使用源码 &lt;code&gt;cd extension &amp;amp;&amp;amp; pnpm build --target=firefox-mv2&lt;/code&gt; 可自行编译 Firefox 版本，注意 Firefox 的 Cookie 格式和 Chrome 系有差异，不能混用&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/CookieCloud/master/images/20230121092535.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;浏览器插件&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;商店安装：&lt;a href=&#34;https://microsoftedge.microsoft.com/addons/detail/cookiecloud/bffenpfpjikaeocaihdonmgnjjdpjkeo&#34;&gt;Edge商店&lt;/a&gt; Chrome商店审核中 （ 注意：商店版本会因审核有延迟&lt;/li&gt; &#xA; &lt;li&gt;手动下载安装：见 Release&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;服务器端&lt;/h2&gt; &#xA;&lt;h3&gt;第三方&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;由第三方提供的免费服务器端，可供试用，稳定性由第三方决定。感谢他们的分享 👏&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;由于部分服务器端版本较久，如测试提示失败可添加域名关键词再试&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://45.138.70.177:8088&#34;&gt;http://45.138.70.177:8088&lt;/a&gt; 由&lt;code&gt;LSRNB&lt;/code&gt;提供&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://45.145.231.148:8088&#34;&gt;http://45.145.231.148:8088&lt;/a&gt; 由&lt;code&gt;shellingford37&lt;/code&gt;提供&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nastool.cn:8088&#34;&gt;http://nastool.cn:8088&lt;/a&gt; 由&lt;a href=&#34;https://github.com/jxxghp/nas-tools&#34;&gt;nastools&lt;/a&gt;提供&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;自行架设&lt;/h3&gt; &#xA;&lt;h4&gt;方案一：通过Docker部署，简单、推荐方案&lt;/h4&gt; &#xA;&lt;p&gt;支持架构：linux/amd64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p=8088:8088 easychen/cookiecloud:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;默认端口 8088 ，镜像地址 &lt;a href=&#34;https://hub.docker.com/r/easychen/cookiecloud&#34;&gt;easychen/cookiecloud&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;指定API目录·可选步骤可跳过&lt;/h5&gt; &#xA;&lt;p&gt;添加环境变量 -e API_ROOT=/&lt;code&gt;二级目录需要以斜杠开头&lt;/code&gt; 可以指定二级目录:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -e API_ROOT=/cookie -p=8088:8088 easychen/cookiecloud:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;方案二：通过 Node 部署&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;适用于没有 docker 但支持 node 的环境，需要自行先安装 node&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd api &amp;amp;&amp;amp; yarn install &amp;amp;&amp;amp; node app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;默认端口 8088 ，同样也支持 API_ROOT 环境变量&lt;/p&gt; &#xA;&lt;h2&gt;调试和日志查看&lt;/h2&gt; &#xA;&lt;p&gt;进入浏览器插件列表，点击 service worker，会弹出一个面板，可查看运行日志&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easychen/CookieCloud/master/images/20230121095327.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API 接口&lt;/h2&gt; &#xA;&lt;p&gt;上传：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;method: POST&lt;/li&gt; &#xA; &lt;li&gt;url: /update&lt;/li&gt; &#xA; &lt;li&gt;参数 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;uuid&lt;/li&gt; &#xA;   &lt;li&gt;encrypted: 本地加密后的字符串&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;下载：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;method: POST/GET&lt;/li&gt; &#xA; &lt;li&gt;url: /get/:uuid&lt;/li&gt; &#xA; &lt;li&gt;参数： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;password:可选，不提供返回加密后的字符串，提供则发送尝试解密后的内容；&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cookie加解密算法&lt;/h2&gt; &#xA;&lt;h3&gt;加密&lt;/h3&gt; &#xA;&lt;p&gt;const data = JSON.stringify(cookies);&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;md5(uuid+password) 取前16位作为key&lt;/li&gt; &#xA; &lt;li&gt;AES.encrypt(data, the_key)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;解密&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;md5(uuid+password) 取前16位作为key&lt;/li&gt; &#xA; &lt;li&gt;AES.decrypt(encrypted, the_key)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;解密后得到 data ，JSON.parse(data) 得到数据对象{ cookie_data, local_storage_data };&lt;/p&gt; &#xA;&lt;p&gt;参考函数&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function cookie_decrypt( uuid, encrypted, password )&#xA;{&#xA;    const CryptoJS = require(&#39;crypto-js&#39;);&#xA;    const the_key = CryptoJS.MD5(uuid+&#39;-&#39;+password).toString().substring(0,16);&#xA;    const decrypted = CryptoJS.AES.decrypt(encrypted, the_key).toString(CryptoJS.enc.Utf8);&#xA;    const parsed = JSON.parse(decrypted);&#xA;    return parsed;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;extension/function.js 查看更多&lt;/p&gt;</summary>
  </entry>
</feed>