<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-30T01:28:57Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jlowin/fastmcp</title>
    <updated>2025-03-30T01:28:57Z</updated>
    <id>tag:github.com,2025-03-30:/jlowin/fastmcp</id>
    <link href="https://github.com/jlowin/fastmcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fast, Pythonic way to build Model Context Protocol servers üöÄ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;üéâ FastMCP has been added to the official MCP SDK! üéâ&lt;/h3&gt; &#xA; &lt;p&gt;You can now find FastMCP as part of the official Model Context Protocol Python SDK:&lt;/p&gt; &#xA; &lt;p&gt;üëâ &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;github.com/modelcontextprotocol/python-sdk&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Please note: this repository is no longer maintained.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- omit in toc --&gt; &#xA; &lt;h1&gt;FastMCP üöÄ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;The fast, Pythonic way to build MCP servers.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/fastmcp&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/fastmcp.svg?sanitize=true&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jlowin/fastmcp.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; servers are a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers simple and intuitive. Create tools, expose resources, and define prompts with clean, Pythonic code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# demo.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;mcp = FastMCP(&#34;Demo üöÄ&#34;)&#xA;&#xA;&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Give Claude access to the server by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It&#39;s designed to be high-level and Pythonic - in most cases, decorating a function is all you need.&lt;/p&gt; &#xA;&lt;h3&gt;Key features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: High-level interface means less code and faster development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Build MCP servers with minimal boilerplate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic&lt;/strong&gt;: Feels natural to Python developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt;*: FastMCP aims to provide a full implementation of the core MCP specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*emphasis on &lt;em&gt;aims&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;üö® üöß üèóÔ∏è &lt;em&gt;FastMCP is under active development, as is the MCP specification itself. Core features are working but some advanced capabilities are still in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#running-your-server&#34;&gt;Running Your Server&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#development-mode-recommended-for-building--testing&#34;&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#claude-desktop-integration-for-regular-use&#34;&gt;Claude Desktop Integration (For Regular Use)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#direct-execution-for-advanced-use-cases&#34;&gt;Direct Execution (For Advanced Use Cases)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server-object-names&#34;&gt;Server Object Names&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#echo-server&#34;&gt;Echo Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#sqlite-explorer&#34;&gt;SQLite Explorer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#opening-a-pull-request&#34;&gt;Opening a Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We strongly recommend installing FastMCP with &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;, as it is required for deploying servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: on macOS, uv may need to be installed with Homebrew (&lt;code&gt;brew install uv&lt;/code&gt;) in order to make it available to the Claude Desktop app.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, to use the SDK without deploying, you may use pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;# Create an MCP server&#xA;mcp = FastMCP(&#34;Demo&#34;)&#xA;&#xA;&#xA;# Add an addition tool&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&#xA;&#xA;# Add a dynamic greeting resource&#xA;@mcp.resource(&#34;greeting://{name}&#34;)&#xA;def get_greeting(name: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Get a personalized greeting&#34;&#34;&#34;&#xA;    return f&#34;Hello, {name}!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install this server in &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop&lt;/a&gt; and interact with it right away by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can test it with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/docs/assets/demo-inspector.png&#34; alt=&#34;MCP Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is a low-level &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;Python SDK&lt;/a&gt; available for implementing the protocol directly, but FastMCP aims to make that easier by providing a high-level, Pythonic interface.&lt;/p&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The FastMCP server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;# Create a named server&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;# Specify dependencies for deployment and development&#xA;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;Resources are how you expose data to LLMs. They&#39;re similar to GET endpoints in a REST API - they provide data but shouldn&#39;t perform significant computation or have side effects. Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File contents&lt;/li&gt; &#xA; &lt;li&gt;Database schemas&lt;/li&gt; &#xA; &lt;li&gt;API responses&lt;/li&gt; &#xA; &lt;li&gt;System information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Resources can be static:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;config://app&#34;)&#xA;def get_config() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Static configuration data&#34;&#34;&#34;&#xA;    return &#34;App configuration here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or dynamic with parameters (FastMCP automatically handles these as MCP templates):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;users://{user_id}/profile&#34;)&#xA;def get_user_profile(user_id: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Dynamic user data&#34;&#34;&#34;&#xA;    return f&#34;Profile data for user {user_id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects. They&#39;re similar to POST endpoints in a REST API.&lt;/p&gt; &#xA;&lt;p&gt;Simple calculation example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.tool()&#xA;def calculate_bmi(weight_kg: float, height_m: float) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Calculate BMI given weight in kg and height in meters&#34;&#34;&#34;&#xA;    return weight_kg / (height_m ** 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP request example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import httpx&#xA;&#xA;@mcp.tool()&#xA;async def fetch_weather(city: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Fetch current weather for a city&#34;&#34;&#34;&#xA;    async with httpx.AsyncClient() as client:&#xA;        response = await client.get(&#xA;            f&#34;https://api.weather.com/{city}&#34;&#xA;        )&#xA;        return response.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complex input handling example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic import BaseModel, Field&#xA;from typing import Annotated&#xA;&#xA;class ShrimpTank(BaseModel):&#xA;    class Shrimp(BaseModel):&#xA;        name: Annotated[str, Field(max_length=10)]&#xA;&#xA;    shrimp: list[Shrimp]&#xA;&#xA;@mcp.tool()&#xA;def name_shrimp(&#xA;    tank: ShrimpTank,&#xA;    # You can use pydantic Field in function signatures for validation.&#xA;    extra_names: Annotated[list[str], Field(max_length=10)],&#xA;) -&amp;gt; list[str]:&#xA;    &#34;&#34;&#34;List all shrimp names in the tank&#34;&#34;&#34;&#xA;    return [shrimp.name for shrimp in tank.shrimp] + extra_names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively. They&#39;re like &#34;best practices&#34; encoded into your server. A prompt can be as simple as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.prompt()&#xA;def review_code(code: str) -&amp;gt; str:&#xA;    return f&#34;Please review this code:\n\n{code}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a more structured sequence of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp.prompts.base import UserMessage, AssistantMessage&#xA;&#xA;@mcp.prompt()&#xA;def debug_error(error: str) -&amp;gt; list[Message]:&#xA;    return [&#xA;        UserMessage(&#34;I&#39;m seeing this error:&#34;),&#xA;        UserMessage(error),&#xA;        AssistantMessage(&#34;I&#39;ll help debug that. What have you tried so far?&#34;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;FastMCP provides an &lt;code&gt;Image&lt;/code&gt; class that automatically handles image data in your server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Image&#xA;from PIL import Image as PILImage&#xA;&#xA;@mcp.tool()&#xA;def create_thumbnail(image_path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Create a thumbnail from an image&#34;&#34;&#34;&#xA;    img = PILImage.open(image_path)&#xA;    img.thumbnail((100, 100))&#xA;    &#xA;    # FastMCP automatically handles conversion and MIME types&#xA;    return Image(data=img.tobytes(), format=&#34;png&#34;)&#xA;&#xA;@mcp.tool()&#xA;def load_image(path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Load an image from disk&#34;&#34;&#34;&#xA;    # FastMCP handles reading and format detection&#xA;    return Image(path=path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Images can be used as the result of both tools and resources.&lt;/p&gt; &#xA;&lt;h3&gt;Context&lt;/h3&gt; &#xA;&lt;p&gt;The Context object gives your tools and resources access to MCP capabilities. To use it, add a parameter annotated with &lt;code&gt;fastmcp.Context&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Context&#xA;&#xA;@mcp.tool()&#xA;async def long_task(files: list[str], ctx: Context) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Process multiple files with progress tracking&#34;&#34;&#34;&#xA;    for i, file in enumerate(files):&#xA;        ctx.info(f&#34;Processing {file}&#34;)&#xA;        await ctx.report_progress(i, len(files))&#xA;        &#xA;        # Read another resource if needed&#xA;        data = await ctx.read_resource(f&#34;file://{file}&#34;)&#xA;        &#xA;    return &#34;Processing complete&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Context object provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress reporting through &lt;code&gt;report_progress()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logging via &lt;code&gt;debug()&lt;/code&gt;, &lt;code&gt;info()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, and &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resource access through &lt;code&gt;read_resource()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request metadata via &lt;code&gt;request_id&lt;/code&gt; and &lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Your Server&lt;/h2&gt; &#xA;&lt;p&gt;There are three main ways to use your FastMCP server, each suited for different stages of development:&lt;/p&gt; &#xA;&lt;h3&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to test and debug your server is with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This launches a web interface where you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your tools and resources interactively&lt;/li&gt; &#xA; &lt;li&gt;See detailed logs and error messages&lt;/li&gt; &#xA; &lt;li&gt;Monitor server performance&lt;/li&gt; &#xA; &lt;li&gt;Set environment variables for testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;During development, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add dependencies with &lt;code&gt;--with&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with pandas --with numpy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mount your local code for live updates: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with-editable .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Claude Desktop Integration (For Regular Use)&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is ready, install it in Claude Desktop to use it with Claude:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your server will run in an isolated environment with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic installation of dependencies specified in your FastMCP instance: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom naming via &lt;code&gt;--name&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py --name &#34;My Analytics Server&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variable management: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set variables individually&#xA;fastmcp install server.py -e API_KEY=abc123 -e DB_URL=postgres://...&#xA;&#xA;# Or load from a .env file&#xA;fastmcp install server.py -f .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Direct Execution (For Advanced Use Cases)&lt;/h3&gt; &#xA;&lt;p&gt;For advanced scenarios like custom deployments or running without Claude, you can execute your server directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    mcp.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using the FastMCP CLI&#xA;fastmcp run server.py&#xA;&#xA;# Or with Python/uv directly&#xA;python server.py&#xA;uv run python server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: When running directly, you are responsible for ensuring all dependencies are available in your environment. Any dependencies specified on the FastMCP instance are ignored.&lt;/p&gt; &#xA;&lt;p&gt;Choose this method when you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom deployment configurations&lt;/li&gt; &#xA; &lt;li&gt;Integration with other services&lt;/li&gt; &#xA; &lt;li&gt;Direct control over the server lifecycle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Server Object Names&lt;/h3&gt; &#xA;&lt;p&gt;All FastMCP commands will look for a server object called &lt;code&gt;mcp&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt;, or &lt;code&gt;server&lt;/code&gt; in your file. If you have a different object name or multiple servers in one file, use the syntax &lt;code&gt;server.py:my_server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using a standard name&#xA;fastmcp run server.py&#xA;&#xA;# Using a custom name&#xA;fastmcp run server.py:my_custom_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few examples of FastMCP servers. For more, see the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Echo Server&lt;/h3&gt; &#xA;&lt;p&gt;A simple server demonstrating resources, tools, and prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;Echo&#34;)&#xA;&#xA;@mcp.resource(&#34;echo://{message}&#34;)&#xA;def echo_resource(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a resource&#34;&#34;&#34;&#xA;    return f&#34;Resource echo: {message}&#34;&#xA;&#xA;@mcp.tool()&#xA;def echo_tool(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a tool&#34;&#34;&#34;&#xA;    return f&#34;Tool echo: {message}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def echo_prompt(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create an echo prompt&#34;&#34;&#34;&#xA;    return f&#34;Please process this message: {message}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite Explorer&lt;/h3&gt; &#xA;&lt;p&gt;A more complex example showing database integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;import sqlite3&#xA;&#xA;mcp = FastMCP(&#34;SQLite Explorer&#34;)&#xA;&#xA;@mcp.resource(&#34;schema://main&#34;)&#xA;def get_schema() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Provide the database schema as a resource&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    schema = conn.execute(&#xA;        &#34;SELECT sql FROM sqlite_master WHERE type=&#39;table&#39;&#34;&#xA;    ).fetchall()&#xA;    return &#34;\n&#34;.join(sql[0] for sql in schema if sql[0])&#xA;&#xA;@mcp.tool()&#xA;def query_data(sql: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Execute SQL queries safely&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    try:&#xA;        result = conn.execute(sql).fetchall()&#xA;        return &#34;\n&#34;.join(str(row) for row in result)&#xA;    except Exception as e:&#xA;        return f&#34;Error: {str(e)}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def analyze_table(table: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create a prompt template for analyzing tables&#34;&#34;&#34;&#xA;    return f&#34;&#34;&#34;Please analyze this database table:&#xA;Table: {table}&#xA;Schema: &#xA;{get_schema()}&#xA;&#xA;What insights can you provide about the structure and relationships?&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Open Developer Guide&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP requires Python 3.10+ and &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;p&gt;For development, we recommend installing FastMCP with development dependencies, which includes various utilities the maintainers find useful.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jlowin/fastmcp.git&#xA;cd fastmcp&#xA;uv sync --frozen --extra dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For running tests only (e.g., in CI), you only need the testing dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv sync --frozen --extra tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;p&gt;Please make sure to test any new functionality. Your tests should be simple and atomic and anticipate change rather than cement complex patterns.&lt;/p&gt; &#xA; &lt;p&gt;Run tests from the root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest -vv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Formatting&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP enforces a variety of required formats, which you can automatically enforce with pre-commit.&lt;/p&gt; &#xA; &lt;p&gt;Install the pre-commit hooks:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The hooks will now run on every commit (as well as on every PR). To run them manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Opening a Pull Request&lt;/h3&gt; &#xA; &lt;p&gt;Fork the repository and create a new branch:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make your changes and commit them:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;My changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Push your changes to your fork:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Feel free to reach out in a GitHub issue or discussion if you have any questions!&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>gogs/gogs</title>
    <updated>2025-03-30T01:28:57Z</updated>
    <id>tag:github.com,2025-03-30:/gogs/gogs</id>
    <link href="https://github.com/gogs/gogs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gogs is a painless self-hosted Git service&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2946214/146899259-6a8b58ad-8d6e-40d2-ab02-79dc6aadabbf.png&#34; alt=&#34;gogs-brand&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gogs/gogs/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/checks-status/gogs/gogs/main?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/9aqdHU7&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/382595433060499458.svg?style=for-the-badge&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/gogs/gogs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view%20on-Sourcegraph-brightgreen.svg?style=for-the-badge&amp;amp;logo=sourcegraph&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogs/gogs/main/README_ZH.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üîÆ Vision&lt;/h2&gt; &#xA;&lt;p&gt;The Gogs (&lt;code&gt;/g…ëgz/&lt;/code&gt;) project aims to build a simple, stable and extensible self-hosted Git service that can be set up in the most painless way. With Go, this can be done with an independent binary distribution across all platforms that Go supports, including Linux, macOS, Windows and ARM-based systems.&lt;/p&gt; &#xA;&lt;h2&gt;üì° Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please visit &lt;a href=&#34;https://gogs.io&#34;&gt;our home page&lt;/a&gt; for user documentation.&lt;/li&gt; &#xA; &lt;li&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/gogs/gogs/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for list of changes in each releases.&lt;/li&gt; &#xA; &lt;li&gt;Want to try it before doing anything else? Do it &lt;a href=&#34;https://try.gogs.io/gogs/gogs&#34;&gt;online&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Having trouble? Help yourself with &lt;a href=&#34;https://gogs.io/docs/intro/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or ask questions in &lt;a href=&#34;https://github.com/gogs/gogs/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Want to help with localization? Check out the &lt;a href=&#34;https://gogs.io/docs/features/i18n.html&#34;&gt;localization documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ready to get hands dirty? Read our &lt;a href=&#34;https://raw.githubusercontent.com/gogs/gogs/main/.github/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Hmm... What about APIs? We have experimental support with &lt;a href=&#34;https://github.com/gogs/docs-api&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíå Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User dashboard, user profile and activity timeline.&lt;/li&gt; &#xA; &lt;li&gt;Access repositories via SSH, HTTP and HTTPS protocols.&lt;/li&gt; &#xA; &lt;li&gt;User, organization and repository management.&lt;/li&gt; &#xA; &lt;li&gt;Repository and organization webhooks, including Slack, Discord and Dingtalk.&lt;/li&gt; &#xA; &lt;li&gt;Repository Git hooks, deploy keys and Git LFS.&lt;/li&gt; &#xA; &lt;li&gt;Repository issues, pull requests, wiki, protected branches and collaboration.&lt;/li&gt; &#xA; &lt;li&gt;Migrate and mirror repositories with wiki from other code hosts.&lt;/li&gt; &#xA; &lt;li&gt;Web editor for quick editing repository files and wiki.&lt;/li&gt; &#xA; &lt;li&gt;Jupyter Notebook and PDF rendering.&lt;/li&gt; &#xA; &lt;li&gt;Authentication via SMTP, LDAP, reverse proxy, GitHub.com and GitHub Enterprise with 2FA.&lt;/li&gt; &#xA; &lt;li&gt;Customize HTML templates, static files and many others.&lt;/li&gt; &#xA; &lt;li&gt;Rich database backend support, including PostgreSQL, MySQL, SQLite3 or any database backend that speaks one of those protocols.&lt;/li&gt; &#xA; &lt;li&gt;Have localization over &lt;a href=&#34;https://crowdin.com/project/gogs&#34;&gt;31 languages&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíæ Hardware requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Raspberry Pi or $5 Digital Ocean Droplet is more than enough to get you started. Some even use 64MB RAM Docker &lt;a href=&#34;https://www.docker.com/blog/containers-as-a-service-caas/&#34;&gt;CaaS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2 CPU cores and 512MB RAM would be the baseline for teamwork.&lt;/li&gt; &#xA; &lt;li&gt;Increase CPU cores when your team size gets significantly larger, memory footprint remains low.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíª Browser support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://github.com/Semantic-Org/Semantic-UI#browser-support&#34;&gt;Semantic UI&lt;/a&gt; for specific versions of supported browsers.&lt;/li&gt; &#xA; &lt;li&gt;The smallest resolution officially supported is &lt;strong&gt;1024*768&lt;/strong&gt;, however the UI may still look right in smaller resolutions, but no promises or fixes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìú Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you install the &lt;a href=&#34;https://gogs.io/docs/installation&#34;&gt;prerequisites&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;There are 6 ways to install Gogs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gogs.io/docs/installation/install_from_binary.html&#34;&gt;Install from binary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gogs.io/docs/installation/install_from_source.html&#34;&gt;Install from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gogs.io/docs/installation/install_from_packages.html&#34;&gt;Install from packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gogs/gogs/tree/main/docker&#34;&gt;Ship with Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/geerlingguy/ansible-vagrant-examples/tree/master/gogs&#34;&gt;Try with Vagrant&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploy to cloud&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cloudron.io/store/io.gogs.cloudronapp.html&#34;&gt;Cloudron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YunoHost-Apps/gogs_ynh&#34;&gt;YunoHost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alwaysdata.com/en/marketplace/gogs/&#34;&gt;alwaysdata&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://peppe8o.com/private-git-web-portal-in-raspberry-pi-with-gogs/&#34;&gt;Private Git Web Portal in Raspberry PI With Gogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04&#34;&gt;How To Set Up Gogs on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/&#34;&gt;Run your own GitHub-like service with the help of Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://garthwaite.org/docker-gogs.html&#34;&gt;Dockerized Gogs git server and alpine postgres in 20 minutes or less&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eladnava.com/host-your-own-private-github-with-gogs-io/&#34;&gt;Host Your Own Private GitHub with Gogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.mynook.info/post/host-your-own-git-server-using-gogs/&#34;&gt;‰ΩøÁî® Gogs Êê≠Âª∫Ëá™Â∑±ÁöÑ Git ÊúçÂä°Âô®&lt;/a&gt; (Chinese)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://my.oschina.net/luyao/blog/375654&#34;&gt;ÈòøÈáå‰∫ë‰∏ä Ubuntu 14.04 64 ‰ΩçÂÆâË£Ö Gogs&lt;/a&gt; (Chinese)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codejam.info/2015/03/installing-gogs-on-freebsd.html&#34;&gt;Installing Gogs on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=deSfX0gqefE&#34;&gt;How to install Gogs on a Linux Server (DigitalOcean)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Software, service and product support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jenkins.io/gogs-webhook/&#34;&gt;Jenkins&lt;/a&gt; (CI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forge.puppet.com/modules/Siteminds/gogs&#34;&gt;Puppet&lt;/a&gt; (IT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.synology.com&#34;&gt;Synology&lt;/a&gt; (Docker)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://syncloud.org/&#34;&gt;Syncloud&lt;/a&gt; (App Store)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üôá‚Äç‚ôÇÔ∏è Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This project is proudly supported by:&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt; &lt;img src=&#34;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg?sanitize=true&#34; width=&#34;201px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Other acknowledgments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks &lt;a href=&#34;https://twitter.com/egonelbre&#34;&gt;Egon Elbre&lt;/a&gt; for designing the original version of the logo.&lt;/li&gt; &#xA; &lt;li&gt;Thanks &lt;a href=&#34;https://crowdin.com/project/gogs&#34;&gt;Crowdin&lt;/a&gt; for sponsoring open source translation plan.&lt;/li&gt; &#xA; &lt;li&gt;Thanks &lt;a href=&#34;https://monovm.com/linux-vps/&#34;&gt;MonoVM&lt;/a&gt; for sponsoring VPS services.&lt;/li&gt; &#xA; &lt;li&gt;Thanks &lt;a href=&#34;https://buildkite.com&#34;&gt;Buildkite&lt;/a&gt; for sponsoring open source CI/CD plan.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üëã Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/gogs/gogs/graphs/contributors&#34;&gt;contributors page&lt;/a&gt; for top 100 contributors.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gogs/gogs/main/conf/locale/TRANSLATORS&#34;&gt;TRANSLATORS&lt;/a&gt; for public list of translators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öñÔ∏è License&lt;/h2&gt; &#xA;&lt;p&gt;This project is under the MIT License. See the &lt;a href=&#34;https://github.com/gogs/gogs/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full license text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>open-source-parsers/jsoncpp</title>
    <updated>2025-03-30T01:28:57Z</updated>
    <id>tag:github.com,2025-03-30:/open-source-parsers/jsoncpp</id>
    <link href="https://github.com/open-source-parsers/jsoncpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C++ library for interacting with JSON.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JsonCpp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bintray.com/theirix/conan-repo/jsoncpp%3Atheirix&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/conan.io-jsoncpp%2F1.8.0-green.svg?logo=data:image/png;base64%2CiVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAMAAAAolt3jAAAA1VBMVEUAAABhlctjlstkl8tlmMtlmMxlmcxmmcxnmsxpnMxpnM1qnc1sn85voM91oM11oc1xotB2oc56pNF6pNJ2ptJ8ptJ8ptN9ptN8p9N5qNJ9p9N9p9R8qtOBqdSAqtOAqtR%2BrNSCrNJ/rdWDrNWCsNWCsNaJs9eLs9iRvNuVvdyVv9yXwd2Zwt6axN6dxt%2Bfx%2BChyeGiyuGjyuCjyuGly%2BGlzOKmzOGozuKoz%2BKqz%2BOq0OOv1OWw1OWw1eWx1eWy1uay1%2Baz1%2Baz1%2Bez2Oe02Oe12ee22ujUGwH3AAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfgBQkREyOxFIh/AAAAiklEQVQI12NgAAMbOwY4sLZ2NtQ1coVKWNvoc/Eq8XDr2wB5Ig62ekza9vaOqpK2TpoMzOxaFtwqZua2Bm4makIM7OzMAjoaCqYuxooSUqJALjs7o4yVpbowvzSUy87KqSwmxQfnsrPISyFzWeWAXCkpMaBVIC4bmCsOdgiUKwh3JojLgAQ4ZCE0AMm2D29tZwe6AAAAAElFTkSuQmCC&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-source-parsers/jsoncpp/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://open-source-parsers.github.io/jsoncpp-docs/doxygen/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/document-doxygen-brightgreen&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/open-source-parsers/jsoncpp?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/open-source-parsers/jsoncpp/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://json.org/&#34;&gt;JSON&lt;/a&gt; is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs.&lt;/p&gt; &#xA;&lt;p&gt;JsonCpp is a C++ library that allows manipulating JSON values, including serialization and deserialization to and from strings. It can also preserve existing comment in unserialization/serialization steps, making it a convenient format to store user input files.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://open-source-parsers.github.io/jsoncpp-docs/doxygen/index.html&#34;&gt;JsonCpp documentation&lt;/a&gt; is generated using &lt;a href=&#34;http://www.doxygen.org&#34;&gt;Doxygen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;A note on backward-compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1.y.z&lt;/code&gt; is built with C++11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0.y.z&lt;/code&gt; can be used with older compilers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;00.11.z&lt;/code&gt; can be used both in old and new compilers.&lt;/li&gt; &#xA; &lt;li&gt;Major versions maintain binary-compatibility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special note&lt;/h3&gt; &#xA;&lt;p&gt;The branch &lt;code&gt;00.11.z&lt;/code&gt;is a new branch, its major version number &lt;code&gt;00&lt;/code&gt; is to show that it is different from &lt;code&gt;0.y.z&lt;/code&gt; and &lt;code&gt;1.y.z&lt;/code&gt;, the main purpose of this branch is to make a balance between the other two branches. Thus, users can use some new features in this new branch that introduced in 1.y.z, but can hardly applied into 0.y.z.&lt;/p&gt; &#xA;&lt;h2&gt;Using JsonCpp in your project&lt;/h2&gt; &#xA;&lt;h3&gt;The vcpkg dependency manager&lt;/h3&gt; &#xA;&lt;p&gt;You can download and install JsonCpp using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install jsoncpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JsonCpp port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Amalgamated source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-source-parsers/jsoncpp/wiki/Amalgamated-(Possibly-outdated)&#34;&gt;https://github.com/open-source-parsers/jsoncpp/wiki/Amalgamated-(Possibly-outdated)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The Meson Build System&lt;/h3&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;http://mesonbuild.com&#34;&gt;Meson Build System&lt;/a&gt;, then you can get a wrap file by downloading it from &lt;a href=&#34;https://wrapdb.mesonbuild.com/jsoncpp&#34;&gt;Meson WrapDB&lt;/a&gt;, or simply use &lt;code&gt;meson wrap install jsoncpp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other ways&lt;/h3&gt; &#xA;&lt;p&gt;If you have trouble, see the &lt;a href=&#34;https://github.com/open-source-parsers/jsoncpp/wiki&#34;&gt;Wiki&lt;/a&gt;, or post a question as an Issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;LICENSE&lt;/code&gt; file for details. In summary, JsonCpp is licensed under the MIT license, or public domain if desired and recognized in your jurisdiction.&lt;/p&gt;</summary>
  </entry>
</feed>