<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-05T01:26:53Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AILab-CVC/VideoCrafter</title>
    <updated>2023-11-05T01:26:53Z</updated>
    <id>tag:github.com,2023-11-05:/AILab-CVC/VideoCrafter</id>
    <link href="https://github.com/AILab-CVC/VideoCrafter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VideoCrafter1: Open Diffusion Models for High-Quality Video Generation&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;em&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;VideoCrafter1: Open Diffusion Models for High-Quality Video Generation&lt;/strong&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ailab-cvc.github.io/videocrafter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Page-green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2310.19512&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Technique-Report-red&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rrayYqZ4tf&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/rrayYqZ4tf?style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/VideoCrafter/VideoCrafter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Model-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VideoCrafter/VideoCrafter&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/VideoCrafter/VideoCrafter?style=social&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üî•üî• The VideoCrafter1 for high-quality video generation are now released! Please Join us and create your own film on &lt;a href=&#34;https://discord.gg/rrayYqZ4tf&#34;&gt;Discord/Floor33&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h3&gt;Floor33 | Film&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4MbTNYug1wo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/4MbTNYug1wo/0.jpg&#34; alt=&#34;IMAGE ALT TEXT HERE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üîÜ Introduction&lt;/h2&gt; &#xA;&lt;p&gt;ü§óü§óü§ó VideoCrafter is an open-source video generation and editing toolbox for crafting video content.&lt;br&gt; It currently includes the Text2Video and Image2Video models:&lt;/p&gt; &#xA;&lt;h3&gt;1. Generic Text-to-video Generation&lt;/h3&gt; &#xA;&lt;p&gt;Click the GIF to access the high-resolution video.&lt;/p&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/814f9cfe-5e4c-4d6c-be4c-c378cf4216c7&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/t2v/agirl.gif&#34; width=&#34;320&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/f89af8d2-2ac4-4726-98cc-4ff322ed4cf3&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/t2v/astronaut.gif&#34; width=&#34;320&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;320&#34;&gt;&#34;A girl is looking at the camera smiling. High Definition.&#34;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;320&#34;&gt;&#34;an astronaut running away from a dust storm on the surface of the moon, the astronaut is running towards the camera, cinematic&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/232ef312-be08-4d73-8fd7-f367952c9410&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/t2v/spaceship.gif&#34; width=&#34;320&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/7aa3977c-dc71-45ce-bfe2-449368dc1c9f&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/t2v/unicorn.gif&#34; width=&#34;320&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;320&#34;&gt;&#34;A giant spaceship is landing on mars in the sunset. High Definition.&#34;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;320&#34;&gt;&#34;A blue unicorn flying over a mystical land&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;2. Generic Image-to-video Generation&lt;/h3&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/input/blackswan.png&#34; width=&#34;170&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/input/horse.png&#34; width=&#34;170&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/input/chair.png&#34; width=&#34;170&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/input/sunset.png&#34; width=&#34;170&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/1a57edd9-3fd2-4ce9-8313-89aca95b6ec7&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/blackswan.gif&#34; width=&#34;170&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/d671419d-ae49-4889-807e-b841aef60e8a&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/horse.gif&#34; width=&#34;170&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/39d730d9-7b47-4132-bdae-4d18f3e651ee&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/chair.gif&#34; width=&#34;170&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter/assets/18735168/dc8dd0d5-a80d-4f31-94db-f9ea0b13172b&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AILab-CVC/VideoCrafter/main/assets/i2v/sunset.gif&#34; width=&#34;170&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;170&#34;&gt;&#34;a black swan swims on the pond&#34;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;170&#34;&gt;&#34;a girl is riding a horse fast on grassland&#34;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;170&#34;&gt;&#34;a boy sits on a chair facing the sea&#34;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34; width=&#34;170&#34;&gt;&#34;two galleons moving in the wind at sunset&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üìù Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;[2023.10.30]&lt;/strong&gt;: Release &lt;a href=&#34;https://arxiv.org/abs/2310.19512&#34;&gt;VideoCrafter1&lt;/a&gt; Technical Report!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;[2023.10.19]&lt;/strong&gt;: Release the 320x512 Text2Video Model, and HuggingFace demo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;[2023.10.13]&lt;/strong&gt;: üî•üî• Release the VideoCrafter1, High Quality Video Generation!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;[2023.08.14]&lt;/strong&gt;: Release a new version of VideoCrafter on &lt;a href=&#34;https://discord.gg/uHaQuThT&#34;&gt;Discord/Floor33&lt;/a&gt;. Please join us to create your own film!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;[2023.04.18]&lt;/strong&gt;: Release a VideoControl model with most of the watermarks removed!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;[2023.04.05]&lt;/strong&gt;: Release pretrained Text-to-Video models, VideoLora models, and inference code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;‚è≥ Models&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Models&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Resolution&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Checkpoints&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Text2Video&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;576x1024&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/VideoCrafter/Text2Video-1024-v1.0/blob/main/model.ckpt&#34;&gt;Hugging Face&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Text2Video&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;320x512&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/VideoCrafter/Text2Video-512-v1/blob/main/model.ckpt&#34;&gt;Hugging Face&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Image2Video&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;320x512&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://huggingface.co/VideoCrafter/Image2Video-512-v1.0/blob/main/model.ckpt&#34;&gt;Hugging Face&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Setup&lt;/h2&gt; &#xA;&lt;h3&gt;1. Install Environment via Anaconda (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n videocrafter python=3.8.5&#xA;conda activate videocrafter&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üí´ Inference&lt;/h2&gt; &#xA;&lt;h3&gt;1. Text-to-Video&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download pretrained T2V models via &lt;a href=&#34;https://huggingface.co/VideoCrafter/Text2Video-1024-v1.0/blob/main/model.ckpt&#34;&gt;Hugging Face&lt;/a&gt;, and put the &lt;code&gt;model.ckpt&lt;/code&gt; in &lt;code&gt;checkpoints/base_1024_v1/model.ckpt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Input the following commands in terminal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  sh scripts/run_text2video.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Image-to-Video&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download pretrained I2V models via &lt;a href=&#34;https://huggingface.co/VideoCrafter/Image2Video-512-v1.0/blob/main/model.ckpt&#34;&gt;Hugging Face&lt;/a&gt;, and put the &lt;code&gt;model.ckpt&lt;/code&gt; in &lt;code&gt;checkpoints/i2v_512_v1/model.ckpt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Input the following commands in terminal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  sh scripts/run_image2video.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üìã Techinical Report&lt;/h2&gt; &#xA;&lt;p&gt;üòâ Tech report: &lt;a href=&#34;https://arxiv.org/abs/2310.19512&#34;&gt;VideoCrafter1: Open Diffusion Models for High-Quality Video Generation&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üòâ Citation&lt;/h2&gt; &#xA;&lt;p&gt;The technical report is currently unavailable as it is still in preparation. You can cite the paper of our image-to-video model and related base model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{chen2023videocrafter1,&#xA;      title={VideoCrafter1: Open Diffusion Models for High-Quality Video Generation}, &#xA;      author={Haoxin Chen and Menghan Xia and Yingqing He and Yong Zhang and Xiaodong Cun and Shaoshu Yang and Jinbo Xing and Yaofang Liu and Qifeng Chen and Xintao Wang and Chao Weng and Ying Shan},&#xA;      year={2023},&#xA;      eprint={2310.19512},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&#xA;@article{xing2023dynamicrafter,&#xA;      title={DynamiCrafter: Animating Open-domain Images with Video Diffusion Priors}, &#xA;      author={Jinbo Xing and Menghan Xia and Yong Zhang and Haoxin Chen and Xintao Wang and Tien-Tsin Wong and Ying Shan},&#xA;      year={2023},&#xA;      eprint={2310.12190},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&#xA;@article{he2022lvdm,&#xA;      title={Latent Video Diffusion Models for High-Fidelity Long Video Generation}, &#xA;      author={Yingqing He and Tianyu Yang and Yong Zhang and Ying Shan and Qifeng Chen},&#xA;      year={2022},&#xA;      eprint={2211.13221},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü§ó Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Our codebase builds on &lt;a href=&#34;https://github.com/Stability-AI/stablediffusion&#34;&gt;Stable Diffusion&lt;/a&gt;. Thanks the authors for sharing their awesome codebases!&lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;We develop this repository for RESEARCH purposes, so it can only be used for personal/research/non-commercial purposes.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>evilsocket/legba</title>
    <updated>2023-11-05T01:26:53Z</updated>
    <id>tag:github.com,2023-11-05:/evilsocket/legba</id>
    <link href="https://github.com/evilsocket/legba" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multiprotocol credentials bruteforcer / password sprayer and enumerator.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/evilsocket/legba/releases/latest&#34;&gt;&lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/release/evilsocket/legba.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/legba&#34;&gt;&lt;img alt=&#34;Crate&#34; src=&#34;https://img.shields.io/crates/v/legba.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/evilsocket/legba&#34;&gt;&lt;img alt=&#34;Docker Hub&#34; src=&#34;https://img.shields.io/docker/v/evilsocket/legba?logo=docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rust-reportcard.xuri.me/report/github.com/evilsocket/legba&#34;&gt;&lt;img alt=&#34;Rust Report&#34; src=&#34;https://rust-reportcard.xuri.me/badge/github.com/evilsocket/legba&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/evilsocket/legba/raw/master/LICENSE.md&#34;&gt;&lt;img alt=&#34;Software License&#34; src=&#34;https://img.shields.io/badge/license-GPL3-brightgreen.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Legba&lt;/code&gt; is a multiprotocol credentials bruteforcer / password sprayer and enumerator built with Rust and the Tokio asynchronous runtime in order to achieve better performances and stability while consuming less resources than similar tools (see the benchmark below).&lt;/p&gt; &#xA;&lt;p&gt;For the building instructions, usage and the complete list of options &lt;a href=&#34;https://github.com/evilsocket/legba/wiki&#34;&gt;check the project Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Protocols/Features:&lt;/h2&gt; &#xA;&lt;p&gt;AMQP (ActiveMQ, RabbitMQ, Qpid, JORAM and Solace), Cassandra/ScyllaDB, DNS subdomain enumeration, FTP, HTTP (basic authentication, NTLMv1, NTLMv2, multipart form, custom requests with CSRF support and files/folders enumeration), IMAP, Kerberos pre-authentication and user enumeration, LDAP, MongoDB, Microsoft SQL, MySQL, Oracle, PostgreSQL, POP3, RDP, Redis, SSH / SFTP, SMTP, STOMP (ActiveMQ, RabbitMQ, HornetQ and OpenMQ), TCP port scanning, Telnet, VNC.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a benchmark of &lt;code&gt;legba&lt;/code&gt; versus &lt;code&gt;thc-hydra&lt;/code&gt; running some common plugins, both targeting the same test servers on localhost. The benchmark has been executed on a macOS laptop with an M1 Max CPU, using a wordlist of 1000 passwords with the correct one being on the last line. Legba was compiled in release mode, Hydra compiled and installed via &lt;a href=&#34;https://formulae.brew.sh/formula/hydra&#34;&gt;brew formula&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Far from being an exhaustive benchmark (some legba features are simply not supported by hydra, such as CSRF token grabbing), this table still gives a clear idea of how using an asynchronous runtime can drastically improve performances.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Test Name&lt;/th&gt; &#xA;   &lt;th&gt;Hydra Tasks&lt;/th&gt; &#xA;   &lt;th&gt;Hydra Time&lt;/th&gt; &#xA;   &lt;th&gt;Legba Tasks&lt;/th&gt; &#xA;   &lt;th&gt;Legba Time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP basic auth&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;7.100s&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;1.560s &lt;strong&gt;(üöÄ 4.5x faster)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP POST login (wordpress)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;14.854s&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;5.045s &lt;strong&gt;(üöÄ 2.9x faster)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;7m29.85s *&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;8.150s &lt;strong&gt;(üöÄ 55.1x faster)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;4 **&lt;/td&gt; &#xA;   &lt;td&gt;9.819s&lt;/td&gt; &#xA;   &lt;td&gt;4 **&lt;/td&gt; &#xA;   &lt;td&gt;2.542s &lt;strong&gt;(üöÄ 3.8x faster)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft SQL&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;7.609s&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;4.789s &lt;strong&gt;(üöÄ 1.5x faster)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;sup&gt;* While this result would suggest a default delay between connection attempts used by Hydra. I&#39;ve tried to study the source code to find such delay but to my knowledge there&#39;s none. For some reason it&#39;s simply very slow.&lt;/sup&gt;&lt;br&gt; &lt;sup&gt;** For MySQL hydra automatically reduces the amount of tasks to 4, therefore legba&#39;s concurrency level has been adjusted to 4 as well.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Legba is released under the GPL 3 license. To see the licenses of the project dependencies, install cargo license with &lt;code&gt;cargo install cargo-license&lt;/code&gt; and then run &lt;code&gt;cargo license&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bensadeh/tailspin</title>
    <updated>2023-11-05T01:26:53Z</updated>
    <id>tag:github.com,2023-11-05:/bensadeh/tailspin</id>
    <link href="https://github.com/bensadeh/tailspin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåÄ A log file highlighter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/tailspin.png&#34; width=&#34;230&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A log file highlighter &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/main.png&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü™µ View (or &lt;code&gt;tail&lt;/code&gt;) any log file of any format&lt;/li&gt; &#xA; &lt;li&gt;üç∞ No setup or config required&lt;/li&gt; &#xA; &lt;li&gt;üåà Highlights numbers, dates, IP-addresses, UUIDs, URLs and more&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è All highlight groups are customizable&lt;/li&gt; &#xA; &lt;li&gt;üß¨ Easy to integrate with other commands&lt;/li&gt; &#xA; &lt;li&gt;üîç Uses &lt;code&gt;less&lt;/code&gt; under the hood for scrollback, search and filtering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#highlight-groups&#34;&gt;Highlight Groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#watching-folders&#34;&gt;Watching folders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#customizing-highlight-groups&#34;&gt;Customizing Highlight Groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#working-with-stdin-and-stdout&#34;&gt;Working with &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#using-the-pager-less&#34;&gt;Using the pager &lt;code&gt;less&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/#settings&#34;&gt;Settings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tailspin&lt;/code&gt; works by reading through a log file line by line, running a series of regexes against each line. The regexes recognize patterns like dates, numbers, severity keywords and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tailspin&lt;/code&gt; does not make any assumptions on the format or position of the items it wants to highlight. For this reason, it requires no configuration or setup and will work predictably regardless of the format the log file is in.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Package Managers&lt;/h3&gt; &#xA;&lt;p&gt;The binary name for &lt;code&gt;tailspin&lt;/code&gt; is &lt;code&gt;spin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Homebrew&#xA;brew install tailspin&#xA;&#xA;# Cargo&#xA;cargo install tailspin&#xA;&#xA;# AUR&#xA;paru -S tailspin&#xA;&#xA;# Nix&#xA;nix-shell -p tailspin&#xA;&#xA;# NetBSD&#xA;pkgin install tailspin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary will be placed in &lt;code&gt;~/.cargo/bin&lt;/code&gt;, make sure you add the folder to your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Highlight Groups&lt;/h2&gt; &#xA;&lt;h3&gt;Dates&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/dates.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[date]&#xA;style = { fg = &#34;magenta&#34; }&#xA;# To shorten the date, uncomment the line below&#xA;# shorten = { to = &#34;‚ê£&#34;, style = { fg = &#34;magenta&#34; } }&#xA;&#xA;[time]&#xA;time = { fg = &#34;blue&#34; }&#xA;zone = { fg = &#34;red&#34; }&#xA;# To shorten the time, uncomment the line below&#xA;# shorten = { to = &#34;‚ê£&#34;, style = { fg = &#34;blue&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Keywords&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/keywords.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[keywords]]&#xA;words = [&#39;null&#39;, &#39;true&#39;, &#39;false&#39;]&#xA;style = { fg = &#34;red&#34;, italic = true }&#xA;&#xA;[[keywords]]&#xA;words = [&#39;GET&#39;]&#xA;style = { fg = &#34;black&#34;, bg = &#34;green&#34; }&#xA;border = true&#xA;&#xA;# You can add as many keywords as you&#39;d like&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;URLs&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/urls.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[url]&#xA;http = { faint = true }&#xA;https = { bold = true }&#xA;host = { fg = &#34;blue&#34;, faint = true }&#xA;path = { fg = &#34;blue&#34; }&#xA;query_params_key = { fg = &#34;magenta&#34; }&#xA;query_params_value = { fg = &#34;cyan&#34; }&#xA;symbols = { fg = &#34;red&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Numbers&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/numbers.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[number]&#xA;style = { fg = &#34;cyan&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;IP Addresses&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/ip.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[ip]&#xA;segment = { fg = &#34;blue&#34;, italic = true }&#xA;separator = { fg = &#34;red&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Quotes&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/quotes.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[quotes]&#xA;style = { fg = &#34;yellow&#34; }&#xA;token = &#39;&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Unix file paths&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/paths.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[path]&#xA;segment = { fg = &#34;green&#34;, italic = true }&#xA;separator = { fg = &#34;yellow&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;HTTP methods&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/http.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; See Keywords &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;UUIDs&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/uuids.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[uuid]&#xA;segment = { fg = &#34;blue&#34;, italic = true }&#xA;separator = { fg = &#34;red&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Key-value pairs&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/kv.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[key_value]&#xA;key = { faint = true }&#xA;separator = { fg = &#34;white&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Unix processes&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/processes.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[process]&#xA;name = { fg = &#34;green&#34; }&#xA;separator = { fg = &#34;red&#34; }&#xA;id = { fg = &#34;yellow&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Watching folders&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tailspin&lt;/code&gt; can listen for newline entries in a given folder. Watching folders is useful for monitoring log files that are rotated.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bensadeh/tailspin/main/assets/examples/folder.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;When watching folders, &lt;code&gt;tailspin&lt;/code&gt; will start in follow mode (abort with &lt;kbd&gt;Ctrl + C&lt;/kbd&gt;) and will only print newline entries which arrive after the initial start.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing Highlight Groups&lt;/h2&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;config.toml&lt;/code&gt; in &lt;code&gt;~/.config/tailspin&lt;/code&gt; to customize highlight groups.&lt;/p&gt; &#xA;&lt;p&gt;Styles have the following shape:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;style = { fg = &#34;color&#34;, bg = &#34;color&#34;, italic = false, bold = false, underline = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling Highlight Groups&lt;/h3&gt; &#xA;&lt;p&gt;To disable a highlight group, set the &lt;code&gt;disabled&lt;/code&gt; field to true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[date]&#xA;disabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Keywords&lt;/h3&gt; &#xA;&lt;p&gt;To add custom keywords, either include them in the list of keywords or add new entries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[keywords]]&#xA;words = [&#39;MyCustomKeyword&#39;]&#xA;style = { fg = &#34;green&#34; }&#xA;&#xA;[[keywords]]&#xA;words = [&#39;null&#39;, &#39;true&#39;, &#39;false&#39;]&#xA;style = { fg = &#34;red&#34;, italic = true }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working with &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;tailspin&lt;/code&gt; will open a file in the pager &lt;code&gt;less&lt;/code&gt;. However, if you pipe something into &lt;code&gt;tailspin&lt;/code&gt;, it will print the highlighted output directly to &lt;code&gt;stdout&lt;/code&gt;. This is similar to running &lt;code&gt;spin [file] --print&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To let &lt;code&gt;tailspin&lt;/code&gt; highlight the logs of different commands, you can pipe the output of those commands into &lt;code&gt;tailspin&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;journalctl -f | spin&#xA;cat /var/log/syslog | spin&#xA;kubectl logs -f pod_name | spin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the pager &lt;code&gt;less&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;tailspin&lt;/code&gt; uses &lt;code&gt;less&lt;/code&gt; as its pager to view the highlighted log files. You can get more info on &lt;code&gt;less&lt;/code&gt; via the &lt;strong&gt;man&lt;/strong&gt; command (&lt;code&gt;man less&lt;/code&gt;) or by hitting the &lt;kbd&gt;h&lt;/kbd&gt; button to access the help screen.&lt;/p&gt; &#xA;&lt;h3&gt;Navigating&lt;/h3&gt; &#xA;&lt;p&gt;Navigating within &lt;code&gt;less&lt;/code&gt; uses a set of keybindings that may be familiar to users of &lt;code&gt;vim&lt;/code&gt; or other &lt;code&gt;vi&lt;/code&gt;-like editors. Here&#39;s a brief overview of the most useful navigation commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt;: Scroll one line up / down&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;d&lt;/kbd&gt;/&lt;kbd&gt;u&lt;/kbd&gt;: Scroll one half-page up / down&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt;/&lt;kbd&gt;G&lt;/kbd&gt;: Go to the top / bottom of the file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Follow mode&lt;/h3&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;tailspin&lt;/code&gt; with the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--follow&lt;/code&gt; flag, it will scroll to the bottom and print new lines to the screen as they&#39;re added to the file.&lt;/p&gt; &#xA;&lt;p&gt;To stop following the file, interrupt with &lt;kbd&gt;Ctrl + C&lt;/kbd&gt;. This will stop the tailing, but keep the file open, allowing you to review the existing content.&lt;/p&gt; &#xA;&lt;p&gt;To resume following the file from within &lt;code&gt;less&lt;/code&gt;, press &lt;kbd&gt;Shift + F&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;kbd&gt;/&lt;/kbd&gt; followed by your search query. For example, &lt;code&gt;/ERROR&lt;/code&gt; finds the first occurrence of &lt;strong&gt;ERROR&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the search, &lt;kbd&gt;n&lt;/kbd&gt; finds the next instance, and &lt;kbd&gt;N&lt;/kbd&gt; finds the previous instance.&lt;/p&gt; &#xA;&lt;h3&gt;Filtering&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;less&lt;/code&gt; allows filtering lines by a keyword, using &lt;kbd&gt;&amp;amp;&lt;/kbd&gt; followed by the pattern. For instance, &lt;code&gt;&amp;amp;ERROR&lt;/code&gt; shows only lines with &lt;strong&gt;ERROR&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To only show lines containing either &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;WARN&lt;/code&gt;, use a regular expression: &lt;code&gt;&amp;amp;\(ERROR\|WARN\)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To clear the filter, use &lt;kbd&gt;&amp;amp;&lt;/kbd&gt; with no pattern.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;-f, --follow                 Follow the contents of the file&#xA;-t, --tail                   Start at the end of the file&#xA;-p, --print                  Print the output to stdout&#xA;-c, --config-path PATH       Path to a custom configuration file&#xA;-t, --follow-command &#39;CMD&#39;   Follows the output of the provided command&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>