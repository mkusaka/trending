<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-25T01:29:00Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrsked/mrsk</title>
    <updated>2023-03-25T01:29:00Z</updated>
    <id>tag:github.com,2023-03-25:/mrsked/mrsk</id>
    <link href="https://github.com/mrsked/mrsk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deploy web apps anywhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MRSK&lt;/h1&gt; &#xA;&lt;p&gt;MRSK deploys web apps anywhere from bare metal to cloud VMs using Docker with zero downtime. It uses the dynamic reverse-proxy Traefik to hold requests while the new application container is started and the old one is stopped. It works seamlessly across multiple hosts, using SSHKit to execute commands. It was built for Rails applications, but works with any type of web app that can be containerized with Docker.&lt;/p&gt; &#xA;&lt;p&gt;Watch the screencast: &lt;a href=&#34;https://www.youtube.com/watch?v=LL1cV2FXZ5I&#34;&gt;https://www.youtube.com/watch?v=LL1cV2FXZ5I&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on Discord: &lt;a href=&#34;https://discord.gg/YgHVT7GCXS&#34;&gt;https://discord.gg/YgHVT7GCXS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you have a Ruby environment available, you can install MRSK globally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install mrsk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...otherwise, you can run a dockerized version via an alias (add this to your ${SHELL}rc to simplify re-use):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias mrsk=&#39;docker run --rm -it -v $HOME/.ssh:/root/.ssh -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}/:/workdir  ghcr.io/mrsked/mrsk&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, inside your app directory, run &lt;code&gt;mrsk init&lt;/code&gt; (or &lt;code&gt;mrsk init --bundle&lt;/code&gt; within Rails apps where you want a bin/mrsk binstub). Now edit the new file &lt;code&gt;config/deploy.yml&lt;/code&gt;. It could look as simple as this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;service: hey&#xA;image: 37s/hey&#xA;servers:&#xA;  - 192.168.0.1&#xA;  - 192.168.0.2&#xA;registry:&#xA;  username: registry-user-name&#xA;  password:&#xA;    - MRSK_REGISTRY_PASSWORD&#xA;env:&#xA;  secret:&#xA;    - RAILS_MASTER_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then edit your &lt;code&gt;.env&lt;/code&gt; file to add your registry password as &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; (and your &lt;code&gt;RAILS_MASTER_KEY&lt;/code&gt; for production with a Rails app).&lt;/p&gt; &#xA;&lt;p&gt;Now you&#39;re ready to deploy to the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect to the servers over SSH (using root by default, authenticated by your ssh key)&lt;/li&gt; &#xA; &lt;li&gt;Install Docker on any server that might be missing it (using apt-get): root access is needed via ssh for this.&lt;/li&gt; &#xA; &lt;li&gt;Log into the registry both locally and remotely&lt;/li&gt; &#xA; &lt;li&gt;Build the image using the standard Dockerfile in the root of the application.&lt;/li&gt; &#xA; &lt;li&gt;Push the image to the registry.&lt;/li&gt; &#xA; &lt;li&gt;Pull the image from the registry onto the servers.&lt;/li&gt; &#xA; &lt;li&gt;Ensure Traefik is running and accepting traffic on port 80.&lt;/li&gt; &#xA; &lt;li&gt;Ensure your app responds with &lt;code&gt;200 OK&lt;/code&gt; to &lt;code&gt;GET /up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start a new container with the version of the app that matches the current git version hash.&lt;/li&gt; &#xA; &lt;li&gt;Stop the old container running the previous version of the app.&lt;/li&gt; &#xA; &lt;li&gt;Prune unused images and stopped containers to ensure servers don&#39;t fill up.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Voila! All the servers are now serving the app on port 80. If you&#39;re just running a single server, you&#39;re ready to go. If you&#39;re running multiple servers, you need to put a load balancer in front of them.&lt;/p&gt; &#xA;&lt;h2&gt;Vision&lt;/h2&gt; &#xA;&lt;p&gt;In the past decade+, there&#39;s been an explosion in commercial offerings that make deploying web apps easier. Heroku kicked it off with an incredible offering that stayed ahead of the competition seemingly forever. These days we have excellent alternatives like Fly.io and Render. And hosted Kubernetes is making things easier too on AWS, GCP, Digital Ocean, and elsewhere. But these are all offerings that have you renting computers in the cloud at a premium. If you want to run on your own hardware, or even just have a clear migration path to do so in the future, you need to carefully consider how locked in you get to these commercial platforms. Preferably before the bills swallow your business whole!&lt;/p&gt; &#xA;&lt;p&gt;MRSK seeks to bring the advance in ergonomics pioneered by these commercial offerings to deploying web apps anywhere. Whether that&#39;s low-cost cloud options without the managed-service markup from the likes of Digital Ocean, Hetzner, OVH, etc, or it&#39;s your own colocated bare metal. To MRSK, it&#39;s all the same. Feed the config file a list of IP addresses with vanilla Ubuntu servers that have seen no prep beyond an added SSH key, and you&#39;ll be running in literally minutes.&lt;/p&gt; &#xA;&lt;p&gt;This approach gives you enormous portability. You can have your web app deployed on several clouds at ease like this. Or you can buy the baseline with your own hardware, then deploy to a cloud before a big seasonal spike to get more capacity. When you&#39;re not locked into a single provider from a tooling perspective, there are a lot of compelling options available.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, MRSK is meant to compress the complexity of going to production using open source tooling that isn&#39;t tied to any commercial offering. Not to zero, mind you. You&#39;re probably still better off with a fully managed service if basic Linux or Docker is still difficult, but as soon as those concepts are familiar, you&#39;ll be ready to go with MRSK.&lt;/p&gt; &#xA;&lt;h2&gt;Why not just run Capistrano, Kubernetes or Docker Swarm?&lt;/h2&gt; &#xA;&lt;p&gt;MRSK basically is Capistrano for Containers, without the need to carefully prepare servers in advance. No need to ensure that the servers have just the right version of Ruby or other dependencies you need. That all lives in the Docker image now. You can boot a brand new Ubuntu (or whatever) server, add it to the list of servers in MRSK, and it&#39;ll be auto-provisioned with Docker, and run right away. Docker&#39;s layer caching also speeds up deployments with less mucking about on the server. And the images built for MRSK can be used for CI or later introspection.&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes is a beast. Running it yourself on your own hardware is not for the faint of heart. It&#39;s a fine option if you want to run on someone else&#39;s platform, either transparently &lt;a href=&#34;https://thenewstack.io/render-cloud-deployment-with-less-engineering/&#34;&gt;like Render&lt;/a&gt; or explicitly on AWS/GCP, but if you&#39;d like the freedom to move between cloud and your own hardware, or even mix the two, MRSK is much simpler. You can see everything that&#39;s going on, it&#39;s just basic Docker commands being called.&lt;/p&gt; &#xA;&lt;p&gt;Docker Swarm is much simpler than Kubernetes, but it&#39;s still built on the same declarative model that uses state reconciliation. MRSK is intentionally designed around imperative commands, like Capistrano.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, there are a myriad of ways to deploy web apps, but this is the toolkit we&#39;re using at &lt;a href=&#34;https://37signals.com&#34;&gt;37signals&lt;/a&gt; to bring &lt;a href=&#34;https://www.hey.com&#34;&gt;HEY&lt;/a&gt; &lt;a href=&#34;https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0&#34;&gt;home from the cloud&lt;/a&gt; without losing the advantages of modern containerization tooling.&lt;/p&gt; &#xA;&lt;h2&gt;Running MRSK from Docker&lt;/h2&gt; &#xA;&lt;p&gt;MRSK is packaged up in a Docker container similarly to &lt;a href=&#34;https://github.com/rails/docked&#34;&gt;rails/docked&lt;/a&gt;. This will allow you to run MRSK (from your application directory) without having to install any dependencies other than Docker. Add the following alias to your profile configuration to make working with the container more convenient:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias mrsk=&#34;docker run -it --rm -v &#39;${PWD}:/workdir&#39; -v &#39;${SSH_AUTH_SOCK}:/ssh-agent&#39; -v /var/run/docker.sock:/var/run/docker.sock -e &#39;SSH_AUTH_SOCK=/ssh-agent&#39; ghcr.io/mrsked/mrsk:latest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since MRSK uses SSH to establish a remote connection, it will need access to your SSH agent. The above command uses a volume mount to make it available inside the container and configures the SSH agent inside the container to make use of it.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using .env file to load required environment variables&lt;/h3&gt; &#xA;&lt;p&gt;MRSK uses &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; to automatically load environment variables set in the &lt;code&gt;.env&lt;/code&gt; file present in the application root. This file can be used to set variables like &lt;code&gt;MRSK_REGISTRY_PASSWORD&lt;/code&gt; or database passwords. But for this reason you must ensure that .env files are not checked into Git or included in your Dockerfile! The format is just key-value like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MRSK_REGISTRY_PASSWORD=pw&#xA;DB_PASSWORD=secret123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a generated .env file&lt;/h3&gt; &#xA;&lt;h4&gt;1Password as a secret store&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using a centralized secret store, like 1Password, you can create &lt;code&gt;.env.erb&lt;/code&gt; as a template which looks up the secrets. Example of a .env.erb file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if (session_token = `op signin --account my-one-password-account --raw`.strip) != &#34;&#34; %&amp;gt;# Generated by mrsk envify&#xA;GITHUB_TOKEN=&amp;lt;%= `gh config get -h github.com oauth_token`.strip %&amp;gt;&#xA;MRSK_REGISTRY_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/Docker Hub/password&#34; -n --session  #{session_token}` %&amp;gt;&#xA;RAILS_MASTER_KEY=&amp;lt;%= `op read &#34;op://Vault/My App/RAILS_MASTER_SECRET&#34; -n --session #{session_token}` %&amp;gt;&#xA;MYSQL_ROOT_PASSWORD=&amp;lt;%= `op read &#34;op://Vault/My App/MYSQL_ROOT_PASSWORD&#34; -n --session #{session_token}` %&amp;gt;&#xA;&amp;lt;% else raise ArgumentError, &#34;Session token missing&#34; end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This template can safely be checked into git. Then everyone deploying the app can run &lt;code&gt;mrsk envify&lt;/code&gt; when they setup the app for the first time or passwords change to get the correct &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you need separate env variables for different destinations, you can set them with &lt;code&gt;.env.destination.erb&lt;/code&gt; for the template, which will generate &lt;code&gt;.env.staging&lt;/code&gt; when run with &lt;code&gt;mrsk envify -d staging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Bitwarden as a secret store&lt;/h4&gt; &#xA;&lt;p&gt;If you are using open source secret store like bitwarden, you can create &lt;code&gt;.env.erb&lt;/code&gt; as a template which looks up the secrets.&lt;/p&gt; &#xA;&lt;p&gt;You can store &lt;code&gt;SOME_SECRET&lt;/code&gt; in a secure note in bitwarden vault.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bw list items --search SOME_SECRET | jq&#xA;? Master password: [hidden]&#xA;&#xA;[&#xA;  {&#xA;    &#34;object&#34;: &#34;item&#34;,&#xA;    &#34;id&#34;: &#34;123123123-1232-4224-222f-234234234234&#34;,&#xA;    &#34;organizationId&#34;: null,&#xA;    &#34;folderId&#34;: null,&#xA;    &#34;type&#34;: 2,&#xA;    &#34;reprompt&#34;: 0,&#xA;    &#34;name&#34;: &#34;SOME_SECRET&#34;,&#xA;    &#34;notes&#34;: &#34;yyy&#34;,&#xA;    &#34;favorite&#34;: false,&#xA;    &#34;secureNote&#34;: {&#xA;      &#34;type&#34;: 0&#xA;    },&#xA;    &#34;collectionIds&#34;: [],&#xA;    &#34;revisionDate&#34;: &#34;2023-02-28T23:54:47.868Z&#34;,&#xA;    &#34;creationDate&#34;: &#34;2022-11-07T03:16:05.828Z&#34;,&#xA;    &#34;deletedDate&#34;: null&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and extract the &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;SOME_SECRET&lt;/code&gt; from the &lt;code&gt;json&lt;/code&gt; above and use in the &lt;code&gt;erb&lt;/code&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.env.erb&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;% if (session_token=`bw unlock --raw`.strip) != &#34;&#34; %&amp;gt;# Generated by mrsk envify&#xA;SOME_SECRET=&amp;lt;%= `bw get notes 123123123-1232-4224-222f-234234234234 --session #{session_token}` %&amp;gt;&#xA;&amp;lt;% else raise ArgumentError, &#34;session_token token missing&#34; end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then everyone deploying the app can run &lt;code&gt;mrsk envify&lt;/code&gt; and mrsk will generate &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using another registry than Docker Hub&lt;/h3&gt; &#xA;&lt;p&gt;The default registry is Docker Hub, but you can change it using &lt;code&gt;registry/server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;registry:&#xA;  server: registry.digitalocean.com&#xA;  username:&#xA;    - DOCKER_REGISTRY_TOKEN&#xA;  password:&#xA;    - DOCKER_REGISTRY_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reference to secret &lt;code&gt;DOCKER_REGISTRY_TOKEN&lt;/code&gt; will look for &lt;code&gt;ENV[&#34;DOCKER_REGISTRY_TOKEN&#34;]&lt;/code&gt; on the machine running MRSK.&lt;/p&gt; &#xA;&lt;h3&gt;Using a different SSH user than root&lt;/h3&gt; &#xA;&lt;p&gt;The default SSH user is root, but you can change it using &lt;code&gt;ssh/user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  user: app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a proxy SSH host&lt;/h3&gt; &#xA;&lt;p&gt;If you need to connect to server through a proxy host, you can use &lt;code&gt;ssh/proxy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;192.168.0.1&#34; # defaults to root as the user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with specific user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ssh:&#xA;  proxy: &#34;app@192.168.0.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using env variables&lt;/h3&gt; &#xA;&lt;p&gt;You can inject env variables into the app containers using &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  DATABASE_URL: mysql2://db1/hey_production/&#xA;  REDIS_URL: redis://redis1:6379/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using secret env variables&lt;/h3&gt; &#xA;&lt;p&gt;If you have env variables that are secret, you can divide the &lt;code&gt;env&lt;/code&gt; block into &lt;code&gt;clear&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  clear:&#xA;    DATABASE_URL: mysql2://db1/hey_production/&#xA;    REDIS_URL: redis://redis1:6379/1&#xA;  secret:&#xA;    - DATABASE_PASSWORD&#xA;    - REDIS_PASSWORD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of secret env variables will be expanded at run time from your local machine. So a reference to a secret &lt;code&gt;DATABASE_PASSWORD&lt;/code&gt; will look for &lt;code&gt;ENV[&#34;DATABASE_PASSWORD&#34;]&lt;/code&gt; on the machine running MRSK. Just like with build secrets.&lt;/p&gt; &#xA;&lt;p&gt;If the referenced secret ENVs are missing, the configuration will be halted with a &lt;code&gt;KeyError&lt;/code&gt; exception.&lt;/p&gt; &#xA;&lt;p&gt;Note: Marking an ENV as secret currently only redacts its value in the output for MRSK. The ENV is still injected in the clear into the container at runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Using volumes&lt;/h3&gt; &#xA;&lt;p&gt;You can add custom volumes into the app containers using &lt;code&gt;volumes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - &#34;/local/path:/container/path&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MRSK env variables&lt;/h3&gt; &#xA;&lt;p&gt;The following env variables are set when your container runs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MRSK_CONTAINER_NAME&lt;/code&gt; : this contains the current container name and version&lt;/p&gt; &#xA;&lt;h3&gt;Using different roles for servers&lt;/h3&gt; &#xA;&lt;p&gt;If your application uses separate hosts for running jobs or other roles beyond the default web running, you can specify these hosts in a dedicated role with a new entrypoint command like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Traefik will only by default be installed and run on the servers in the &lt;code&gt;web&lt;/code&gt; role (and on all servers if no roles are defined). If you need Traefik on hosts in other roles than &lt;code&gt;web&lt;/code&gt;, add &lt;code&gt;traefik: true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  web2:&#xA;    traefik: true&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using container labels&lt;/h3&gt; &#xA;&lt;p&gt;You can specialize the default Traefik rules by setting labels on the containers that are being started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;labels:&#xA;  traefik.http.routers.hey.rule: Host(`app.hey.com`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The backticks are needed to ensure the rule is passed in correctly and not treated as command substitution by Bash!&lt;/p&gt; &#xA;&lt;p&gt;This allows you to run multiple applications on the same server sharing the same Traefik instance and port. See &lt;a href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;&gt;https://doc.traefik.io/traefik/routing/routers/#rule&lt;/a&gt; for a full list of available routing rules.&lt;/p&gt; &#xA;&lt;p&gt;The labels can also be applied on a per-role basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;    labels:&#xA;      my-label: &#34;50&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using container options&lt;/h3&gt; &#xA;&lt;p&gt;You can specialize the options used to start containers using the &lt;code&gt;options&lt;/code&gt; definitions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  web:&#xA;    - 192.168.0.1&#xA;    - 192.168.0.2&#xA;  job:&#xA;    hosts:&#xA;      - 192.168.0.3&#xA;      - 192.168.0.4&#xA;    cmd: bin/jobs&#xA;    options:&#xA;      cap-add: true&#xA;      cpu-count: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll start the job containers with &lt;code&gt;docker run ... --cap-add --cpu-count 4 ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring logging&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the logging driver and options passed to Docker using &lt;code&gt;logging&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;logging:&#xA;  driver: awslogs&#xA;  options:&#xA;    awslogs-region: &#34;eu-central-2&#34;&#xA;    awslogs-group: &#34;my-app&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If nothing is configured, the default option &lt;code&gt;max-size=10m&lt;/code&gt; is used for all containers. The default logging driver of Docker is &lt;code&gt;json-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a different stop wait time&lt;/h3&gt; &#xA;&lt;p&gt;On a new deploy, each old running container is gracefully shut down with a &lt;code&gt;SIGTERM&lt;/code&gt;, and after a grace period of &lt;code&gt;10&lt;/code&gt; seconds a &lt;code&gt;SIGKILL&lt;/code&gt; is sent. You can configure this value via the &lt;code&gt;stop_wait_time&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stop_wait_time: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using remote builder for native multi-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), but you want to deploy on AMD64 (x86 64-bit), you can use multi-architecture images. By default, MRSK will setup a local buildx configuration that does this through QEMU emulation. But this can be quite slow, especially on the first build.&lt;/p&gt; &#xA;&lt;p&gt;If you want to speed up this process by using a remote AMD64 host to natively build the AMD64 part of the image, while natively building the ARM64 part locally, you can do so using builder options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  local:&#xA;    arch: arm64&#xA;    host: unix:///Users/&amp;lt;%= `whoami`.strip %&amp;gt;/.docker/run/docker.sock&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You must have Docker running on the remote host being used as a builder. This instance should only be shared for builds using the same registry and credentials.&lt;/p&gt; &#xA;&lt;h3&gt;Using remote builder for single-arch&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on ARM64 (like Apple Silicon), want to deploy on AMD64 (x86 64-bit), but don&#39;t need to run the image locally (or on other ARM64 hosts), you can configure a remote builder that just targets AMD64. This is a bit faster than building with multi-arch, as there&#39;s nothing to build locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  remote:&#xA;    arch: amd64&#xA;    host: ssh://root@192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using native builder when multi-arch isn&#39;t needed&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on the same architecture as the one you&#39;re deploying on, you can speed up the build by forgoing both multi-arch and remote building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  multiarch: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also a good option if you&#39;re running MRSK from a CI server that shares architecture with the deployment servers.&lt;/p&gt; &#xA;&lt;h3&gt;Using a different Dockerfile or context when building&lt;/h3&gt; &#xA;&lt;p&gt;If you need to pass a different Dockerfile or context to the build command (e.g. if you&#39;re using a monorepo or you have different Dockerfiles), you can do so in the builder options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Use a different Dockerfile&#xA;builder:&#xA;  dockerfile: Dockerfile.xyz&#xA;&#xA;# Set context&#xA;builder:&#xA;  context: &#34;..&#34;&#xA;&#xA;# Set Dockerfile and context&#xA;builder:&#xA;  dockerfile: &#34;../Dockerfile.xyz&#34;&#xA;  context: &#34;..&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using build secrets for new images&lt;/h3&gt; &#xA;&lt;p&gt;Some images need a secret passed in during build time, like a GITHUB_TOKEN, to give access to private gem repositories. This can be done by having the secret in ENV, then referencing it in the builder configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  secrets:&#xA;    - GITHUB_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build secret can then be referenced in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Copy Gemfiles&#xA;COPY Gemfile Gemfile.lock ./&#xA;&#xA;# Install dependencies, including private repositories via access token (then remove bundle cache with exposed GITHUB_TOKEN)&#xA;RUN --mount=type=secret,id=GITHUB_TOKEN \&#xA;  BUNDLE_GITHUB__COM=x-access-token:$(cat /run/secrets/GITHUB_TOKEN) \&#xA;  bundle install &amp;amp;&amp;amp; \&#xA;  rm -rf /usr/local/bundle/cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using command arguments for Traefik&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the traefik command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  args:&#xA;    accesslog: true&#xA;    accesslog.format: json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the traefik container with &lt;code&gt;--accesslog=true accesslog.format=json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Traefik&#39;s host port binding&lt;/h3&gt; &#xA;&lt;p&gt;By default Traefik binds to port 80 of the host machine, it can be configured to use an alternative port:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  host_port: 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure docker options for traefik&lt;/h3&gt; &#xA;&lt;p&gt;We allow users to pass additional docker options to the trafik container like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;traefik:&#xA;  options:&#xA;    publish:&#xA;    - 8080:8080&#xA;    volumes:&#xA;    - /tmp/example.json:/tmp/example.json&#xA;    memory: 512m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the traefik container with a command like: &lt;code&gt;docker run ... --volume /tmp/example.json:/tmp/example.json --publish 8080:8080 &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configure alternate entrypoints for traefik&lt;/h3&gt; &#xA;&lt;p&gt;You can configure multiple entrypoints for traefik like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;service: myservice&#xA;&#xA;labels:&#xA;  traefik.tcp.routers.other.rule: &#39;HostSNI(`*`)&#39;&#xA;  traefik.tcp.routers.other.entrypoints: otherentrypoint&#xA;  traefik.tcp.services.other.loadbalancer.server.port: 9000&#xA;  traefik.http.routers.myservice.entrypoints: web&#xA;  traefik.http.services.myservice.loadbalancer.server.port: 8080&#xA;&#xA;traefik:&#xA;  options:&#xA;    publish:&#xA;      - 9000:9000&#xA;  args:&#xA;    entrypoints.web.address: &#39;:80&#39;&#xA;    entrypoints.otherentrypoint.address: &#39;:9000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring build args for new images&lt;/h3&gt; &#xA;&lt;p&gt;Build arguments that aren&#39;t secret can also be configured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;builder:&#xA;  args:&#xA;    RUBY_VERSION: 3.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This build argument can then be used in the Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ARG RUBY_VERSION&#xA;FROM ruby:$RUBY_VERSION-slim as base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using accessories for database, cache, search services&lt;/h3&gt; &#xA;&lt;p&gt;You can manage your accessory services via MRSK as well. Accessories are long-lived services that your app depends on. They are not updated when you deploy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;accessories:&#xA;  mysql:&#xA;    image: mysql:5.7&#xA;    host: 1.1.1.3&#xA;    port: 3306&#xA;    env:&#xA;      clear:&#xA;        MYSQL_ROOT_HOST: &#39;%&#39;&#xA;      secret:&#xA;        - MYSQL_ROOT_PASSWORD&#xA;    volumes:&#xA;      - /var/lib/mysql:/var/lib/mysql&#xA;    options:&#xA;      cpus: 4&#xA;      memory: &#34;2GB&#34;&#xA;  redis:&#xA;    image: redis:latest&#xA;    host: 1.1.1.4&#xA;    port: &#34;36379:6379&#34;&#xA;    volumes:&#xA;      - /var/lib/redis:/data&#xA;  internal-example:&#xA;    image: registry.digitalocean.com/user/otherservice:latest&#xA;    host: 1.1.1.5&#xA;    port: 44444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run &lt;code&gt;mrsk accessory start mysql&lt;/code&gt; to start the MySQL server on 1.1.1.3. See &lt;code&gt;mrsk accessory&lt;/code&gt; for all the commands possible.&lt;/p&gt; &#xA;&lt;p&gt;Accessory images must be public or tagged in your private registry.&lt;/p&gt; &#xA;&lt;h3&gt;Using Cron&lt;/h3&gt; &#xA;&lt;p&gt;You can use a specific container to run your Cron jobs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;servers:&#xA;  cron:&#xA;    hosts:&#xA;      - 192.168.0.1&#xA;    cmd:&#xA;      bash -c &#34;cat config/crontab | crontab - &amp;amp;&amp;amp; cron -f&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This assumes the Cron settings are stored in &lt;code&gt;config/crontab&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using audit broadcasts&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to broadcast audits of deploys, rollbacks, etc to a chatroom or elsewhere, you can configure the &lt;code&gt;audit_broadcast_cmd&lt;/code&gt; setting with the path to a bin file that will be passed the audit line as the first argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;audit_broadcast_cmd:&#xA;  bin/audit_broadcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The broadcast command could look something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;curl -q -d content=&#34;[My App] ${1}&#34; https://3.basecamp.com/XXXXX/integrations/XXXXX/buckets/XXXXX/chats/XXXXX/lines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll post a line like follows to a preconfigured chatbot in Basecamp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[My App] [dhh] Rolled back to version d264c4e92470ad1bd18590f04466787262f605de&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using custom healthcheck path or port&lt;/h3&gt; &#xA;&lt;p&gt;MRSK defaults to checking the health of your application again &lt;code&gt;/up&lt;/code&gt; on port 3000. You can tailor both with the &lt;code&gt;healthcheck&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;healthcheck:&#xA;  path: /healthz&#xA;  port: 4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will ensure your application is configured with a traefik label for the healthcheck against &lt;code&gt;/healthz&lt;/code&gt; and that the pre-deploy healthcheck that MRSK performs is done against the same path on port 4000.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Running commands on servers&lt;/h3&gt; &#xA;&lt;p&gt;You can execute one-off commands on the servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Runs command on all servers&#xA;mrsk app exec &#39;ruby -v&#39;&#xA;App Host: 192.168.0.1&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;App Host: 192.168.0.2&#xA;ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;&#xA;# Runs command on primary server&#xA;mrsk app exec --primary &#39;cat .ruby-version&#39;&#xA;App Host: 192.168.0.1&#xA;3.1.3&#xA;&#xA;# Runs Rails command on all servers&#xA;mrsk app exec &#39;bin/rails about&#39;&#xA;App Host: 192.168.0.1&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;App Host: 192.168.0.2&#xA;About your application&#39;s environment&#xA;Rails version             7.1.0.alpha&#xA;Ruby version              ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]&#xA;RubyGems version          3.3.26&#xA;Rack version              2.2.5&#xA;Middleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::Callbacks, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper&#xA;Application root          /rails&#xA;Environment               production&#xA;Database adapter          sqlite3&#xA;Database schema version   20221231233303&#xA;&#xA;# Run Rails runner on primary server&#xA;mrsk app exec -p &#39;bin/rails runner &#34;puts Rails.application.config.time_zone&#34;&#39;&#xA;UTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running interactive commands over SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can run interactive commands, like a Rails console or a bash session, on a server (default is primary, use &lt;code&gt;--hosts&lt;/code&gt; to connect to another):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Starts a bash session in a new container made from the most recent app image&#xA;mrsk app exec -i bash&#xA;&#xA;# Starts a bash session in the currently running container for the app&#xA;mrsk app exec -i --reuse bash&#xA;&#xA;# Starts a Rails console in a new container made from the most recent app image&#xA;mrsk app exec -i &#39;bin/rails console&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running details to show state of containers&lt;/h3&gt; &#xA;&lt;p&gt;You can see the state of your servers by running &lt;code&gt;mrsk details&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Traefik Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;6195b2a28c81   traefik   &#34;/entrypoint.sh --pr…&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;Traefik Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMES&#xA;de14a335d152   traefik   &#34;/entrypoint.sh --pr…&#34;   30 minutes ago   Up 19 minutes   0.0.0.0:80-&amp;gt;80/tcp, :::80-&amp;gt;80/tcp   traefik&#xA;&#xA;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;badb1aa51db3   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS          PORTS      NAMES&#xA;1d3c91ed1f55   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   13 minutes ago   Up 13 minutes   3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also see just info for app containers with &lt;code&gt;mrsk app details&lt;/code&gt; or just for Traefik with &lt;code&gt;mrsk traefik details&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running rollback to fix a bad deploy&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve discovered a bad deploy, you can quickly rollback by reactivating the old, paused container image. You can see what old containers are available for rollback by running &lt;code&gt;mrsk app containers&lt;/code&gt;. It&#39;ll give you a presentation similar to &lt;code&gt;mrsk app details&lt;/code&gt;, but include all the old containers as well. Showing something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;App Host: 192.168.0.1&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;1d3c91ed1f51   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;539f26b28369   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e…&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&#xA;App Host: 192.168.0.2&#xA;CONTAINER ID   IMAGE                                                                         COMMAND                  CREATED          STATUS                      PORTS      NAMES&#xA;badb1aa51db4   registry.digitalocean.com/user/app:6ef8a6a84c525b123c5245345a8483f86d05a123   &#34;/rails/bin/docker-e…&#34;   19 minutes ago   Up 19 minutes               3000/tcp   chat-6ef8a6a84c525b123c5245345a8483f86d05a123&#xA;6f170d1172ae   registry.digitalocean.com/user/app:e5d9d7c2b898289dfbc5f7f1334140d984eedae4   &#34;/rails/bin/docker-e…&#34;   31 minutes ago   Exited (1) 27 minutes ago              chat-e5d9d7c2b898289dfbc5f7f1334140d984eedae4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the example above, we can see that &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt; was the last version, so it&#39;s available as a rollback target. We can perform this rollback by running &lt;code&gt;mrsk rollback e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. That&#39;ll stop &lt;code&gt;6ef8a6a84c525b123c5245345a8483f86d05a123&lt;/code&gt; and then start &lt;code&gt;e5d9d7c2b898289dfbc5f7f1334140d984eedae4&lt;/code&gt;. Because the old container is still available, this is very quick. Nothing to download from the registry.&lt;/p&gt; &#xA;&lt;p&gt;Note that by default old containers are pruned after 3 days when you run &lt;code&gt;mrsk deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running removal to clean up servers&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to remove the entire application, including Traefik, containers, images, and registry session, you can run &lt;code&gt;mrsk remove&lt;/code&gt;. This will leave the servers clean.&lt;/p&gt; &#xA;&lt;h2&gt;Locking&lt;/h2&gt; &#xA;&lt;p&gt;Commands that are unsafe to run concurrently will take a deploy lock while they run. The lock is the &lt;code&gt;mrsk_lock&lt;/code&gt; directory on the primary server.&lt;/p&gt; &#xA;&lt;p&gt;You can check the lock status with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk lock status&#xA;&#xA;Locked by: AN Other at 2023-03-24 09:49:03 UTC&#xA;Version: 77f45c0686811c68989d6576748475a60bf53fc2&#xA;Message: Automatic deploy lock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also manually acquire and release the lock&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk lock acquire -m &#34;Doing maintanence&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;mrsk lock release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stage of development&lt;/h2&gt; &#xA;&lt;p&gt;This is beta software. Commands may still move around. But we&#39;re live in production at &lt;a href=&#34;https://37signals.com&#34;&gt;37signals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MRSK is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>evanw/thumbhash</title>
    <updated>2023-03-25T01:29:00Z</updated>
    <id>tag:github.com,2023-03-25:/evanw/thumbhash</id>
    <link href="https://github.com/evanw/thumbhash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very compact representation of an image placeholder&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ThumbHash&lt;/h1&gt; &#xA;&lt;p&gt;A very compact representation of a placeholder for an image. Store it inline with your data and show it while the real image is loading for a smoother loading experience. It&#39;s similar to &lt;a href=&#34;https://github.com/woltapp/blurhash&#34;&gt;BlurHash&lt;/a&gt; but with the following advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encodes more detail in the same space&lt;/li&gt; &#xA; &lt;li&gt;Also encodes the aspect ratio&lt;/li&gt; &#xA; &lt;li&gt;Gives more accurate colors&lt;/li&gt; &#xA; &lt;li&gt;Supports images with alpha&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Despite doing all of these additional things, the code for ThumbHash is still similar in complexity to the code for BlurHash. One potential drawback compared to BlurHash is that the parameters of the algorithm are not configurable (everything is automatically configured).&lt;/p&gt; &#xA;&lt;p&gt;A demo and more information is available here: &lt;a href=&#34;https://evanw.github.io/thumbhash/&#34;&gt;https://evanw.github.io/thumbhash/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Implementations&lt;/h2&gt; &#xA;&lt;p&gt;This repo contains implementations for the following languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evanw/thumbhash/main/js&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evanw/thumbhash/main/rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evanw/thumbhash/main/swift&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evanw/thumbhash/main/java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These additional implementations also exist outside of this repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go: &lt;a href=&#34;https://github.com/galdor/go-thumbhash&#34;&gt;https://github.com/galdor/go-thumbhash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Perl: &lt;a href=&#34;https://github.com/mauke/Image-ThumbHash&#34;&gt;https://github.com/mauke/Image-ThumbHash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP: &lt;a href=&#34;https://github.com/SRWieZ/thumbhash&#34;&gt;https://github.com/SRWieZ/thumbhash&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;If you want to add your own implementation here, you can send a PR that puts a link to your implementation in this README.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BlinkDL/ChatRWKV</title>
    <updated>2023-03-25T01:29:00Z</updated>
    <id>tag:github.com,2023-03-25:/BlinkDL/ChatRWKV</id>
    <link href="https://github.com/BlinkDL/ChatRWKV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatRWKV is like ChatGPT but powered by RWKV (100% RNN) language model, and open source.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatRWKV (pronounced as &#34;RwaKuv&#34;, from 4 major params: R W K V)&lt;/h1&gt; &#xA;&lt;p&gt;ChatRWKV is like ChatGPT but powered by my RWKV (100% RNN) language model, which is the only RNN (as of now) that can match transformers in quality and scaling, while being faster and saves VRAM. Training sponsored by Stability EleutherAI :) &lt;strong&gt;中文使用教程，请往下看，在本页面底部。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HuggingFace Gradio Demo (14B ctx8192)&lt;/strong&gt;: &lt;a href=&#34;https://huggingface.co/spaces/BlinkDL/ChatRWKV-gradio&#34;&gt;https://huggingface.co/spaces/BlinkDL/ChatRWKV-gradio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RWKV pip package&lt;/strong&gt;: &lt;a href=&#34;https://pypi.org/project/rwkv/&#34;&gt;https://pypi.org/project/rwkv/&lt;/a&gt; &lt;strong&gt;(please always check for latest version and upgrade)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Update ChatRWKV v2 &amp;amp; pip rwkv package (0.7.0):&lt;/p&gt; &#xA;&lt;p&gt;Use v2/convert_model.py to convert a model for a strategy, for faster loading &amp;amp; saves CPU RAM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;### Note RWKV_CUDA_ON will build a CUDA kernel (&#34;pip install ninja&#34; first).&#xA;### How to build in Linux: set these and run v2/chat.py&#xA;export PATH=/usr/local/cuda/bin:$PATH&#xA;export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH&#xA;### How to build in win:&#xA;Install VS2022 build tools (https://aka.ms/vs/17/release/vs_BuildTools.exe select Desktop C++). Reinstall CUDA 11.7 (install VC++ extensions). Run v2/chat.py in &#34;x64 native tools command prompt&#34;. &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Download RWKV-4 weights:&lt;/strong&gt; &lt;a href=&#34;https://huggingface.co/BlinkDL&#34;&gt;https://huggingface.co/BlinkDL&lt;/a&gt; (&lt;strong&gt;Use RWKV-4 models&lt;/strong&gt;. DO NOT use RWKV-4a and RWKV-4b models.)&lt;/p&gt; &#xA;&lt;h2&gt;RWKV Discord: &lt;a href=&#34;https://discord.gg/bDSBUMeFpc&#34;&gt;https://discord.gg/bDSBUMeFpc&lt;/a&gt; (let&#39;s build together)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/BlinkDL_AI&#34;&gt;https://twitter.com/BlinkDL_AI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RWKV LM:&lt;/strong&gt; &lt;a href=&#34;https://github.com/BlinkDL/RWKV-LM&#34;&gt;https://github.com/BlinkDL/RWKV-LM&lt;/a&gt; (explanation, fine-tuning, training, etc.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RWKV in 150 lines&lt;/strong&gt; (model, inference, text generation): &lt;a href=&#34;https://github.com/BlinkDL/ChatRWKV/raw/main/RWKV_in_150_lines.py&#34;&gt;https://github.com/BlinkDL/ChatRWKV/blob/main/RWKV_in_150_lines.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ChatRWKV v2: with &#34;stream&#34; and &#34;split&#34; strategies, and INT8. 3G VRAM is enough to run RWKV 14B :) &lt;a href=&#34;https://github.com/BlinkDL/ChatRWKV/tree/main/v2&#34;&gt;https://github.com/BlinkDL/ChatRWKV/tree/main/v2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.environ[&#34;RWKV_JIT_ON&#34;] = &#39;1&#39;&#xA;os.environ[&#34;RWKV_CUDA_ON&#34;] = &#39;0&#39; # if &#39;1&#39; then use CUDA kernel for seq mode (much faster)&#xA;from rwkv.model import RWKV                         # pip install rwkv&#xA;model = RWKV(model=&#39;/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-1b5/RWKV-4-Pile-1B5-20220903-8040&#39;, strategy=&#39;cuda fp16&#39;)&#xA;&#xA;out, state = model.forward([187, 510, 1563, 310, 247], None)   # use 20B_tokenizer.json&#xA;print(out.detach().cpu().numpy())                   # get logits&#xA;out, state = model.forward([187, 510], None)&#xA;out, state = model.forward([1563], state)           # RNN has state (use deepcopy if you want to clone it)&#xA;out, state = model.forward([310, 247], state)&#xA;print(out.detach().cpu().numpy())                   # same result as above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/RWKV-eval.png&#34; alt=&#34;RWKV-eval&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/ChatRWKV.png&#34; alt=&#34;ChatRWKV&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cool Community RWKV Projects:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/rwkvstic/&#34;&gt;https://pypi.org/project/rwkvstic/&lt;/a&gt; pip package (with 8bit &amp;amp; offload for low VRAM GPUs)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gururise/rwkv_gradio&#34;&gt;https://github.com/gururise/rwkv_gradio&lt;/a&gt; RWKV Gradio&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hizkifw/WebChatRWKVstic&#34;&gt;https://github.com/hizkifw/WebChatRWKVstic&lt;/a&gt; WebUI (WIP)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cryscan/eloise&#34;&gt;https://github.com/cryscan/eloise&lt;/a&gt; RWKV QQ bot&lt;/p&gt; &#xA;&lt;p&gt;It is not instruct-tuned, so don&#39;t directly ask it to do stuffs (unless it&#39;s a simple question).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen \nQ: prompt\n\nA:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For all RWKV-4 models, some great Q&amp;amp;A prompts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen \nExpert Questions &amp;amp; Helpful Answers\nAsk Research Experts\nQuestion:\nCan penguins fly?\n\nFull Answer:\n&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen \nAsk Expert\n\nQuestion:\nWhat are some good plans to kill all mosquitoes?\n\nExpert Full Answer:\n&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen \nQ &amp;amp; A\n\nQuestion:\nHow&#39;s the weather of Mars?\n\nDetailed Expert Answer:\n&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen Here&#39;s a short cyberpunk sci-fi adventure story. The story&#39;s main character is an artificial human created by a company called OpenBot.\n\nThe Story:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen Here is a Python function that generates string of words that would confuse LLMs:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen List of penguin facts:\n1.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+qa Can penguins fly?&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen $ curl -i https://google.com/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen The following is the contents of https://en.wikipedia.org/wiki/Internet:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen Bob&#39;s Blog - Which is better, iOS or Android?&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;+gen Here is a shell script which will find all .hpp files in /home/workspace and delete the 3th row string of these files:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-1.png&#34; alt=&#34;ChatRWKV&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-2.png&#34; alt=&#34;ChatRWKV&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-3.png&#34; alt=&#34;ChatRWKV&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-4.png&#34; alt=&#34;ChatRWKV&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-5.png&#34; alt=&#34;ChatRWKV&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-6.png&#34; alt=&#34;ChatRWKV&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/BlinkDL/ChatRWKV/main/misc/sample-7.png&#34; alt=&#34;ChatRWKV&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;中文模型&lt;/h2&gt; &#xA;&lt;p&gt;QQ群 553456870（加入时请简单自我介绍）。有研发能力的朋友加群 325154699。&lt;/p&gt; &#xA;&lt;p&gt;中文使用教程：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/609154637&#34;&gt;https://zhuanlan.zhihu.com/p/609154637&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;咒语非常重要。试试这些咒语（注意这些咒语都会忽略聊天内容！都应该用于问独立的问题！）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;【网文模型 testNovel，试试下列指令】&#xA;+gen 这是一颗&#xA;+gen 以下是不朽的科幻史诗长篇巨著，描写细腻，刻画了数百位个性鲜明的英雄和宏大的星际文明战争，情节曲折离奇，充满悬疑氛围，草蛇灰线，当谜底揭开，时而令人惊为天人，时而令人扼腕叹息。\n第一章&#xA;+gen 这是一个修真世界，详细世界设定如下：\n1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;【问答模型 test4，试试下列指令】&#xA;+gen \n活动出席发言稿：\n大家好，&#xA;+gen \n怎样创立一家快速盈利的AI公司：\n1.&#xA;+gen 二向箔是一种超级武器，它的原理是&#xA;+gen 我抬头一看，竟然是&#xA;+gen import torch&#xA;【这些多试几次】&#xA;+qq 请以《我的驴》为题写一篇作文&#xA;+qq 请以《企鹅》为题写一首诗歌&#xA;+qq 请设定一个奇幻世界，告诉我详细的世界设定。&#xA;【问答咒语】&#xA;+gen \nExpert Questions &amp;amp; Helpful Answers\nAsk Research Experts\nQuestion:\n猫会编程吗？\n\nFull Answer:\n&#xA;+gen \nAsk Expert\n\nQuestion:\n猫会编程吗？\n\nExpert Full Answer:\n&#xA;【使用+qa需要在chat.py设置QA_PROMPT=True然后才能看到内容丰富的长回答】&#xA;+qa 奶茶好喝吗？&#xA;+qa 猫喜欢做什么？&#xA;+qa How can I learn Python?&#xA;+qa 猫会编程吗？&#xA;+qa 知乎大V有哪些特点？&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#BlinkDL/ChatRWKV&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=BlinkDL/ChatRWKV&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>