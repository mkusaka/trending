<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-19T01:29:34Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ThePrimeagen/init.lua</title>
    <updated>2022-12-19T01:29:34Z</updated>
    <id>tag:github.com,2022-12-19:/ThePrimeagen/init.lua</id>
    <link href="https://github.com/ThePrimeagen/init.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;ThePrimeagen&#39;s init.lua&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisite: install &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=w7i4amO_zaE&#34;&gt;The full video of me setting up this repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For anyone that is interested in my vimrc, i will have a commit log below documenting each one of my commits (easy to C-f the change you want to know about though i would just suggest &lt;code&gt;git log -S&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Change Log&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/init.lua/commit/33eee9ad0c035a92137d99dae06a2396be4c892e&#34;&gt;33eee9ad&lt;/a&gt; initial commits&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/init.lua/commit/cb210006356b4b613b71c345cb2b02eefa961fc0&#34;&gt;cb210006&lt;/a&gt; netrw, autogroups for yank highlighting, and auto remove whitespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/init.lua/commit/c8c0bf4aeacd0bd77136d9c5ee490680515a106b&#34;&gt;c8c0bf4a&lt;/a&gt; zenmode. i really like this plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/init.lua/commit/81c770d2d2e32e59916b39c7f5babbc8560f7a82&#34;&gt;81c770d2&lt;/a&gt; copilot testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/init.lua/commit/4a96e6457b0a0241ca7361ce62177aa6b9a33a38&#34;&gt;4a96e645&lt;/a&gt; fugitive mappings for push and pull&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThePrimeagen/init.lua/commit/a3bad06a4681c322538d609aa1c0bd18880f77c6&#34;&gt;a3bad06a&lt;/a&gt; disabled eslint. driving me crazy&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lua/kickstart.nvim</title>
    <updated>2022-12-19T01:29:34Z</updated>
    <id>tag:github.com,2022-12-19:/nvim-lua/kickstart.nvim</id>
    <link href="https://github.com/nvim-lua/kickstart.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A launch point for your personal nvim configuration&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;A starting point for Neovim that is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small (~370 lines)&lt;/li&gt; &#xA; &lt;li&gt;Single-file&lt;/li&gt; &#xA; &lt;li&gt;Documented&lt;/li&gt; &#xA; &lt;li&gt;Modular&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kickstart.nvim targets &lt;em&gt;only&lt;/em&gt; the latest &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/stable&#34;&gt;&#39;stable&#39;&lt;/a&gt; and latest &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;&#39;nightly&#39;&lt;/a&gt; of Neovim. If you are experiencing issues, please make sure you have the latest versions.&lt;/p&gt; &#xA;&lt;p&gt;This repo is meant to be used as a starting point for a user&#39;s own configuration; remove the things you don&#39;t use and add what you miss. This configuration serves as the reference configuration for the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki&#34;&gt;lspconfig wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backup your previous configuration&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste the kickstart.nvim &lt;code&gt;init.lua&lt;/code&gt; into &lt;code&gt;$HOME/.config/nvim/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start Neovim (&lt;code&gt;nvim&lt;/code&gt;) and run &lt;code&gt;:PackerInstall&lt;/code&gt; - ignore any error message about missing plugins, &lt;code&gt;:PackerInstall&lt;/code&gt; will fix that shortly&lt;/li&gt; &#xA; &lt;li&gt;Restart Neovim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You could directly modify the &lt;code&gt;init.lua&lt;/code&gt; file with your personal customizations. This option is the most straightforward, but if you update your config from this repo, you may need to reapply your changes.&lt;/p&gt; &#xA;&lt;p&gt;An alternative approach is to create a separate &lt;code&gt;custom.plugins&lt;/code&gt; module to register your own plugins. In addition, you can handle further customizations in the &lt;code&gt;/after/plugin/&lt;/code&gt; directory (see &lt;code&gt;:help load-plugins&lt;/code&gt;). See the following examples for more information. Leveraging this technique should make upgrading to a newer version of this repo easier.&lt;/p&gt; &#xA;&lt;h4&gt;Example &lt;code&gt;plugins.lua&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The following is an example of a &lt;code&gt;plugins.lua&lt;/code&gt; module (located at &lt;code&gt;$HOME/.config/nvim/lua/custom/plugins.lua&lt;/code&gt;) where you can register your own plugins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return function(use)&#xA;  use({&#xA;    &#34;folke/which-key.nvim&#34;,&#xA;      config = function()&#xA;        require(&#34;which-key&#34;).setup({})&#xA;      end&#xA;  })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example &lt;code&gt;defaults.lua&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For further customizations, you can add a file in the &lt;code&gt;/after/plugin/&lt;/code&gt; folder (see &lt;code&gt;:help load-plugins&lt;/code&gt;) to include your own options, keymaps, autogroups, and more. The following is an example &lt;code&gt;defaults.lua&lt;/code&gt; file (located at &lt;code&gt;$HOME/.config/nvim/after/plugin/defaults.lua&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.opt.relativenumber = true&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;sr&#39;, require(&#39;telescope.builtin&#39;).resume, { desc = &#39;[S]earch [R]esume&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Pull-requests are welcome. The goal of this repo is not to create a Neovim configuration framework, but to offer a starting template that shows, by example, available features in Neovim. Some things that will not be included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom language server configuration (null-ls templates)&lt;/li&gt; &#xA; &lt;li&gt;Theming beyond a default colorscheme necessary for LSP highlight groups&lt;/li&gt; &#xA; &lt;li&gt;Lazy-loading. Kickstart.nvim should start within 40 ms on modern hardware. Please profile and contribute to upstream plugins to optimize startup time instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each PR, especially those which increase the line count, should have a description as to why the PR is necessary.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/forma</title>
    <updated>2022-12-19T01:29:34Z</updated>
    <id>tag:github.com,2022-12-19:/google/forma</id>
    <link href="https://github.com/google/forma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An efficient vector-graphics renderer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/forma/main/assets/images/logo.png?raw=true&#34; alt=&#34;forma logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/forma-render&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/forma-render?style=for-the-badge&#34; alt=&#34;crates.io badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/CYtcmqgh&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/CYtcmqgh&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A (thoroughly) parallelized &lt;strong&gt;experimental&lt;/strong&gt; Rust vector-graphics renderer with both a software (CPU) and hardware (GPU) back-end having the following goals, in this order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability&lt;/strong&gt;; supporting Fuchsia, Linux, macOS, Windows, Android &amp;amp; iOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;; making use of compute-focused pipeline that is highly parallelized both at the instruction-level and the thread-level.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;; implementing an easy-to-understand 4-stage pipeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Size&lt;/strong&gt;; minimizing the number of dependencies and focusing on vector-graphics only.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It relies on Rust&#39;s SIMD auto-vectorization/intrinsics and &lt;a href=&#34;https://github.com/rayon-rs/rayon&#34;&gt;Rayon&lt;/a&gt; to have good performance on the CPU, while using &lt;a href=&#34;https://github.com/gpuweb/gpuweb&#34;&gt;WebGPU&lt;/a&gt; (&lt;a href=&#34;https://wgpu.rs/&#34;&gt;wgpu&lt;/a&gt;) to take advantage of the GPU.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Cargo.toml&lt;/code&gt; dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;forma = { version = &#34;0.1.0&#34;, package = &#34;forma-render&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4-stage Pipeline&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;1. Curve flattening&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;2. Line segment rasterization&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;3. Sorting&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;4. Painting&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bézier curves&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;line segments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;pixel segments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;sorted pixel segments, old tiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬇️⬇️⬇️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬇️⬇️⬇️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬇️⬇️⬇️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬇️⬇️⬇️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;line segments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;pixel segments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;sorted pixel segments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;freshly painted tiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Implementation Highlights ✨&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few implementation highlights that make forma stand out from commonly used vector renderers.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Curvature-aware flattening&lt;/summary&gt; &#xA; &lt;p&gt;All higher cubic Béziers are approximated by quadratic ones, then, in parallel, flattened to line segments according to their curvature. This &lt;a href=&#34;https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html&#34;&gt;technique&lt;/a&gt; was developed by Raph Levien.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Cheap translations and rotations&lt;/summary&gt; &#xA; &lt;p&gt;Translations and rotations can be rendered without having to re-flatten the curves, all the while maintaining full quality.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Parallel pixel grid intersection&lt;/summary&gt; &#xA; &lt;p&gt;Line segments are transformed into pixel segments by intersecting them with the pixel grid. We developed a simple method that performs this computation in &lt;em&gt;O(1)&lt;/em&gt; and which is run in parallel.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Efficient sorting&lt;/summary&gt; &#xA; &lt;p&gt;We ported &lt;a href=&#34;https://github.com/google/crumsort-rs&#34;&gt;crumsort&lt;/a&gt; to Rust and parallelized it with Rayon, delivering improved performance over its pdqsort implementation for 64-bit random data. Scattering pixel segments with a sort was inspired from Allan MacKinnon&#39;s work on &lt;a href=&#34;https://cs.opensource.google/fuchsia/fuchsia/+/main:src/graphics/lib/compute/spinel/&#34;&gt;Spinel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Update only the tiles that change (currently CPU-only)&lt;/summary&gt; &#xA; &lt;p&gt;We implemented a fail-fast per-tile optimizer that tries to skip the painting step entirely. A similar approach could also be tested on the GPU.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Animation as it appears on the screen&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Updated tiles only&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/forma/main/assets/images/spaceship.webp?raw=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/forma/main/assets/images/spaceship-damage.webp?raw=true&#34; alt=&#34;juice animation updated tiles&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can run the demo above with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release -p demo -- spaceship&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar Projects&lt;/h2&gt; &#xA;&lt;p&gt;forma draws heavy inspiration from the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cs.opensource.google/fuchsia/fuchsia/+/main:src/graphics/lib/compute/spinel/&#34;&gt;Spinel&lt;/a&gt;, with a Vulkan 1.2 back-end&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linebender/vello&#34;&gt;vello&lt;/a&gt;, with a wgpu back-end&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;You can use the included &lt;code&gt;demo&lt;/code&gt; example to render a few examples, one of which is a non-compliant &amp;amp; incomplete SVG renderer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo run --release -p demo -- svg assets/svgs/paris-30k.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It renders enormous SVGs at interactive framerates, even on CPU: (&lt;a href=&#34;https://raw.githubusercontent.com/google/forma/main/assets/svgs/paris-30k.svg?raw=true&#34;&gt;compare to your web browser&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/forma/main/assets/images/paris-30k-rendered.png?raw=true&#34; alt=&#34;window rendering map of Germany&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;(Currently) Missing Pieces 🧩&lt;/h2&gt; &#xA;&lt;p&gt;Since this project is work-in-progress, breakage in the API, while not drastic, is expected. The performance on the GPU back-end is also expected to improve especially on mobile where performance is known to be poor and where the CPU back-end is currently advised instead.&lt;/p&gt; &#xA;&lt;p&gt;Other than that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automated layer ordering&lt;/li&gt; &#xA; &lt;li&gt;Strokes&lt;/li&gt; &#xA; &lt;li&gt;More color spaces for blends &amp;amp; gradients&lt;/li&gt; &#xA; &lt;li&gt;Faster GPU sorter&lt;/li&gt; &#xA; &lt;li&gt;Use of &lt;code&gt;f16&lt;/code&gt; for great mobile GPU performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
</feed>