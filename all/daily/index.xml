<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-15T01:29:02Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google-gemini/cookbook</title>
    <updated>2024-12-15T01:29:02Z</updated>
    <id>tag:github.com,2024-12-15:/google-gemini/cookbook</id>
    <link href="https://github.com/google-gemini/cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples and guides for using the Gemini API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the Gemini API Cookbook&lt;/h1&gt; &#xA;&lt;p&gt;This is a collection of guides and examples for the Gemini API, including &lt;a href=&#34;https://github.com/google-gemini/cookbook/tree/main/quickstarts&#34;&gt;quickstart&lt;/a&gt; tutorials for writing prompts and using different features of the API, and &lt;a href=&#34;https://github.com/google-gemini/cookbook/tree/main/examples&#34;&gt;examples&lt;/a&gt; of things you can build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEW&lt;/strong&gt;: Check out the latest Gemini 2.0 capabilities in &lt;a href=&#34;https://ai.google.dev/gemini-api/docs/models/gemini-v2&#34;&gt;the docs&lt;/a&gt;, &lt;a href=&#34;https://aistudio.google.com/app/live?model=gemini-2.0-flash-exp&#34;&gt;Google AI Studio&lt;/a&gt; and here in the &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/cookbook/main/gemini-2/&#34;&gt;cookbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get started with the Gemini API&lt;/h2&gt; &#xA;&lt;p&gt;The Gemini API gives you access to Gemini &lt;a href=&#34;https://ai.google.dev/models/gemini&#34;&gt;models&lt;/a&gt; created by &lt;a href=&#34;https://deepmind.google/technologies/gemini/#introduction&#34;&gt;Google DeepMind&lt;/a&gt;. Gemini models are built from the ground up to be multimodal, so you can reason seamlessly across text, images, code, and audio. You can use these to develop a &lt;a href=&#34;https://ai.google.dev/examples/&#34;&gt;range of applications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start developing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://aistudio.google.com/&#34;&gt;Google AI Studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Log in with your Google account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aistudio.google.com/app/apikey&#34;&gt;Create&lt;/a&gt; an API key.&lt;/li&gt; &#xA; &lt;li&gt;Use a &lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Prompting.ipynb&#34;&gt;quickstart&lt;/a&gt; for Python, or call the REST API &lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/rest/Prompting_REST.ipynb&#34;&gt;using curl&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What&#39;s New?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re excited to show you the latest additions to the Gemini API, and new notebooks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/cookbook/main/gemini-2/&#34;&gt;Gemini 2.0&lt;/a&gt;: Explore the capabilities of the new Gemini 2.0 model, including &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/cookbook/main/gemini-2/live_api_starter.ipynb&#34;&gt;multimodal Live API&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/cookbook/main/gemini-2/live_api_tool_use.ipynb&#34;&gt;audio streaming applications with tool use&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/cookbook/main/gemini-2/spatial_understanding.ipynb&#34;&gt;Spatial understanding&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;p&gt;Learn about the capabilities of the Gemini API by checking out these quickstart tutorials.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Authentication.ipynb&#34;&gt;Authentication&lt;/a&gt;: Start here to learn how you can set up your API key so you can get access to the Gemini API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Counting_Tokens.ipynb&#34;&gt;Counting Tokens&lt;/a&gt; Tokens are the basic inputs to the Gemini models. Through this notebook, you will gain a better understanding of tokens through an interactive experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/File_API.ipynb&#34;&gt;Files&lt;/a&gt;: Use the Gemini API to upload files (text, code, images, audio, video) and write prompts using them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Audio.ipynb&#34;&gt;Audio&lt;/a&gt;: Learn how to use the Gemini API with audio files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/JSON_mode.ipynb&#34;&gt;JSON mode&lt;/a&gt;: Discover how to use JSON mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Function_calling.ipynb&#34;&gt;Function Calling&lt;/a&gt;: The Gemini API works great with code. Use this quickstart to learn how to write prompts to understand and call functions. Then check out the &lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Function_calling_config.ipynb&#34;&gt;function calling config&lt;/a&gt; tutorial to learn more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/System_instructions.ipynb&#34;&gt;System Instructions&lt;/a&gt;: Give models additional context on how to respond by setting system instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Embeddings.ipynb&#34;&gt;Embeddings&lt;/a&gt;: Create high-quality and task-specific embeddings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Tuning.ipynb&#34;&gt;Tuning&lt;/a&gt;: Learn how to improve model performance on a specific task through tuning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/quickstarts/Code_Execution.ipynb&#34;&gt;Code execution&lt;/a&gt;: Solve complex tasks by Generating and running Python code based on plain-text instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find lots more in the &lt;a href=&#34;https://github.com/google-gemini/cookbook/tree/main/quickstarts&#34;&gt;quickstarts folder&lt;/a&gt;, and check out the &lt;a href=&#34;https://github.com/google-gemini/cookbook/tree/main/examples&#34;&gt;examples folder&lt;/a&gt; for fun examples. We&#39;re also maintaining an &lt;a href=&#34;https://raw.githubusercontent.com/google-gemini/cookbook/main/Awesome_gemini.md&#34;&gt;Awesome Gemini&lt;/a&gt; list of all the cool projects the community is building using Gemini.&lt;/p&gt; &#xA;&lt;h2&gt;Official SDKs&lt;/h2&gt; &#xA;&lt;p&gt;The Gemini API is a REST API. You can call the API using a command line tool like &lt;code&gt;curl&lt;/code&gt; (and you can find REST examples &lt;a href=&#34;https://github.com/google-gemini/cookbook/tree/main/quickstarts/rest&#34;&gt;here&lt;/a&gt;), or by using one of our official SDKs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/generative-ai-python&#34;&gt;Python&lt;/a&gt; - Note: all the notebooks in this cookbook install the Python SDK for you, and this cookbook is the best place to find Python examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/generative-ai-js&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/generative-ai-dart&#34;&gt;Dart (Flutter)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/generative-ai-android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/generative-ai-swift&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/generative-ai-go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get help&lt;/h2&gt; &#xA;&lt;p&gt;Ask a question on the &lt;a href=&#34;https://discuss.ai.google.dev/&#34;&gt;Google AI Developer Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Gemini API on Google Cloud Vertex AI&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re an enterprise developer looking to build on a fully managed platform, you can also use the Gemini API on Google Cloud. Check out this &lt;a href=&#34;https://github.com/GoogleCloudPlatform/generative-ai&#34;&gt;repo&lt;/a&gt; for lots of cool examples.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. See &lt;a href=&#34;https://github.com/google-gemini/cookbook/raw/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for developing with the Gemini API! We’re excited to see what you create.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Saghen/blink.cmp</title>
    <updated>2024-12-15T01:29:02Z</updated>
    <id>tag:github.com,2024-12-15:/Saghen/blink.cmp</id>
    <link href="https://github.com/Saghen/blink.cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Performant, batteries-included completion plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This plugin is &lt;em&gt;beta&lt;/em&gt; quality. Expect breaking changes and many bugs&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The configuration was recently reworked, please read the &lt;a href=&#34;https://raw.githubusercontent.com/Saghen/blink.cmp/main/#configuration&#34;&gt;configuration section&lt;/a&gt; for the new schema&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you&#39;re on a release tag, ensure you&#39;re viewing the README for &lt;a href=&#34;https://github.com/Saghen/blink.cmp/tree/v0.7.5&#34;&gt;the latest release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Blink Completion (blink.cmp)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;blink.cmp&lt;/strong&gt; is a completion plugin with support for LSPs and external sources that updates on every keystroke with minimal overhead (0.5-4ms async). It use a &lt;a href=&#34;https://github.com/saghen/frizbee&#34;&gt;custom SIMD fuzzy searcher&lt;/a&gt; to easily handle &amp;gt;20k items. It provides extensibility via hooks into the trigger, sources and rendering pipeline. Plenty of work has been put into making each stage of the pipeline as intelligent as possible, such as frecency and proximity bonus on fuzzy matching, and this work is on-going.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/9849e57a-3c2c-49a8-959c-dbb7fef78c80&#34;&gt;https://github.com/user-attachments/assets/9849e57a-3c2c-49a8-959c-dbb7fef78c80&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works out of the box with no additional configuration&lt;/li&gt; &#xA; &lt;li&gt;Updates on every keystroke (0.5-4ms async, single core)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saghen/frizbee&#34;&gt;Typo resistant fuzzy&lt;/a&gt; with frecency and proximity bonus&lt;/li&gt; &#xA; &lt;li&gt;Extensive LSP support (&lt;a href=&#34;https://raw.githubusercontent.com/Saghen/blink.cmp/main/LSP_TRACKER.md&#34;&gt;tracker&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Native &lt;code&gt;vim.snippet&lt;/code&gt; support (including &lt;code&gt;friendly-snippets&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;External sources support (&lt;a href=&#34;https://github.com/Saghen/blink.compat&#34;&gt;compatibility layer for &lt;code&gt;nvim-cmp&lt;/code&gt; sources&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Auto-bracket support based on semantic tokens (experimental, opt-in)&lt;/li&gt; &#xA; &lt;li&gt;Signature help (experimental, opt-in)&lt;/li&gt; &#xA; &lt;li&gt;Command line completion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Saghen/blink.cmp/main/#compared-to-nvim-cmp&#34;&gt;Comparison with nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.10+&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;saghen/blink.cmp&#39;,&#xA;  lazy = false, -- lazy loading handled internally&#xA;  -- optional: provides snippets for the snippet source&#xA;  dependencies = &#39;rafamadriz/friendly-snippets&#39;,&#xA;&#xA;  -- use a release tag to download pre-built binaries&#xA;  version = &#39;v0.*&#39;,&#xA;  -- OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust&#xA;  -- build = &#39;cargo build --release&#39;,&#xA;  -- If you use nix, you can build from source using latest nightly rust with:&#xA;  -- build = &#39;nix run .#build-plugin&#39;,&#xA;&#xA;  ---@module &#39;blink.cmp&#39;&#xA;  ---@type blink.cmp.Config&#xA;  opts = {&#xA;    -- &#39;default&#39; for mappings similar to built-in completion&#xA;    -- &#39;super-tab&#39; for mappings similar to vscode (tab to accept, arrow keys to navigate)&#xA;    -- &#39;enter&#39; for mappings similar to &#39;super-tab&#39; but with &#39;enter&#39; to accept&#xA;    -- see the &#34;default configuration&#34; section below for full documentation on how to define&#xA;    -- your own keymap.&#xA;    keymap = { preset = &#39;default&#39; },&#xA;&#xA;    appearance = {&#xA;      -- Sets the fallback highlight groups to nvim-cmp&#39;s highlight groups&#xA;      -- Useful for when your theme doesn&#39;t support blink.cmp&#xA;      -- will be removed in a future release&#xA;      use_nvim_cmp_as_default = true,&#xA;      -- Set to &#39;mono&#39; for &#39;Nerd Font Mono&#39; or &#39;normal&#39; for &#39;Nerd Font&#39;&#xA;      -- Adjusts spacing to ensure icons are aligned&#xA;      nerd_font_variant = &#39;mono&#39;&#xA;    },&#xA;&#xA;    -- default list of enabled providers defined so that you can extend it&#xA;    -- elsewhere in your config, without redefining it, via `opts_extend`&#xA;    sources = {&#xA;      default = { &#39;lsp&#39;, &#39;path&#39;, &#39;snippets&#39;, &#39;buffer&#39; },&#xA;      -- optionally disable cmdline completions&#xA;      -- cmdline = {},&#xA;    },&#xA;&#xA;    -- experimental signature help support&#xA;    -- signature = { enabled = true }&#xA;  },&#xA;  -- allows extending the providers array elsewhere in your config&#xA;  -- without having to redefine it&#xA;  opts_extend = { &#34;sources.default&#34; }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting capabilities for &lt;code&gt;nvim-lspconfig&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- LSP servers and clients communicate which features they support through &#34;capabilities&#34;.&#xA;--  By default, Neovim supports a subset of the LSP specification.&#xA;--  With blink.cmp, Neovim has *more* capabilities which are communicated to the LSP servers.&#xA;--  Explanation from TJ: https://youtu.be/m8C0Cq9Uv9o?t=1275&#xA;--&#xA;-- This can vary by config, but in general for nvim-lspconfig:&#xA;&#xA;{&#xA;  &#39;neovim/nvim-lspconfig&#39;,&#xA;  dependencies = { &#39;saghen/blink.cmp&#39; },&#xA;&#xA;  -- example using `opts` for defining servers&#xA;  opts = {&#xA;    servers = {&#xA;      lua_ls = {}&#xA;    }&#xA;  },&#xA;  config = function(_, opts)&#xA;    local lspconfig = require(&#39;lspconfig&#39;)&#xA;    for server, config in pairs(opts.servers) do&#xA;      -- passing config.capabilities to blink.cmp merges with the capabilities in your&#xA;      -- `opts[server].capabilities, if you&#39;ve defined it&#xA;      config.capabilities = require(&#39;blink.cmp&#39;).get_lsp_capabilities(config.capabilities)&#xA;      lspconfig[server].setup(config)&#xA;    end&#xA;  end&#xA;&#xA; -- example calling setup directly for each LSP&#xA;  config = function()&#xA;    local capabilities = require(&#39;blink.cmp&#39;).get_lsp_capabilities()&#xA;    local lspconfig = require(&#39;lspconfig&#39;)&#xA;&#xA;    lspconfig[&#39;lua-ls&#39;].setup({ capabilities = capabilities })&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;mini.deps&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- use a release tag to download pre-built binaries&#xA;MiniDeps.add({&#xA;  source = &#34;saghen/blink.cmp&#34;,&#xA;  depends = {&#xA;  &#34;rafamadriz/friendly-snippets&#34;,&#xA;  },&#xA;  checkout = &#34;some.version&#34;, -- check releases for latest tag&#xA;})&#xA;&#xA;-- OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust&#xA;local function build_blink(params)&#xA;  vim.notify(&#39;Building blink.cmp&#39;, vim.log.levels.INFO)&#xA;  local obj = vim.system({ &#39;cargo&#39;, &#39;build&#39;, &#39;--release&#39; }, { cwd = params.path }):wait()&#xA;  if obj.code == 0 then&#xA;    vim.notify(&#39;Building blink.cmp done&#39;, vim.log.levels.INFO)&#xA;  else&#xA;    vim.notify(&#39;Building blink.cmp failed&#39;, vim.log.levels.ERROR)&#xA;  end&#xA;end&#xA;&#xA;MiniDeps.add({&#xA;  source = &#39;Saghen/blink.cmp&#39;,&#xA;  hooks = {&#xA;    post_install = build_blink,&#xA;    post_checkout = build_blink,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Default configuration&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;!-- config:start --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- When specifying &#39;preset&#39; in the keymap table, the custom key mappings are merged with the preset,&#xA;  -- and any conflicting keys will overwrite the preset mappings.&#xA;  -- The &#34;fallback&#34; command will run the next non blink keymap.&#xA;  --&#xA;  -- Example:&#xA;  --&#xA;  -- keymap = {&#xA;  --   preset = &#39;default&#39;,&#xA;  --   [&#39;&amp;lt;Up&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;Down&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   -- disable a keymap from the preset&#xA;  --   [&#39;&amp;lt;C-e&amp;gt;&#39;] = {},&#xA;  --   &#xA;  --   -- show with a list of providers&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { function(cmp) cmp.show({ providers = { &#39;snippets&#39; } }) end },&#xA;  --&#xA;  --   -- note that your function will often be run in a &#34;fast event&#34; where most vim.api functions will throw an error&#xA;  --   -- you may want to wrap your function in `vim.schedule` or use `vim.schedule_wrap`&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { function(cmp) vim.schedule(function() your_behavior end) },&#xA;  --&#xA;  --   -- optionally, define different keymaps for cmdline&#xA;  --   cmdline = {&#xA;  --     preset = &#39;super-tab&#39;&#xA;  --   }&#xA;  -- }&#xA;  --&#xA;  -- When defining your own keymaps without a preset, no keybinds will be assigned automatically.&#xA;  --&#xA;  -- Available commands:&#xA;  --   show, hide, cancel, accept, select_and_accept, select_prev, select_next, show_documentation, hide_documentation,&#xA;  --   scroll_documentation_up, scroll_documentation_down, snippet_forward, snippet_backward, fallback&#xA;  --&#xA;  -- &#34;default&#34; keymap&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { &#39;show&#39;, &#39;show_documentation&#39;, &#39;hide_documentation&#39; },&#xA;  --   [&#39;&amp;lt;C-e&amp;gt;&#39;] = { &#39;hide&#39; },&#xA;  --   [&#39;&amp;lt;C-y&amp;gt;&#39;] = { &#39;select_and_accept&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-p&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-n&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-b&amp;gt;&#39;] = { &#39;scroll_documentation_up&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-f&amp;gt;&#39;] = { &#39;scroll_documentation_down&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Tab&amp;gt;&#39;] = { &#39;snippet_forward&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = { &#39;snippet_backward&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  -- &#34;super-tab&#34; keymap&#xA;  --   you may want to set `completion.trigger.show_in_snippet = false`&#xA;  --   or use `completion.list.selection = &#34;manual&#34; | &#34;auto_insert&#34;`&#xA;  --&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { &#39;show&#39;, &#39;show_documentation&#39;, &#39;hide_documentation&#39; },&#xA;  --   [&#39;&amp;lt;C-e&amp;gt;&#39;] = { &#39;hide&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Tab&amp;gt;&#39;] = {&#xA;  --     function(cmp)&#xA;  --       if cmp.snippet_active() then return cmp.accept()&#xA;  --       else return cmp.select_and_accept() end&#xA;  --     end,&#xA;  --     &#39;snippet_forward&#39;,&#xA;  --     &#39;fallback&#39;&#xA;  --   },&#xA;  --   [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = { &#39;snippet_backward&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Up&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;Down&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-p&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-n&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-b&amp;gt;&#39;] = { &#39;scroll_documentation_up&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-f&amp;gt;&#39;] = { &#39;scroll_documentation_down&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  -- &#34;enter&#34; keymap&#xA;  --   you may want to set `completion.list.selection = &#34;manual&#34; | &#34;auto_insert&#34;`&#xA;  --&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { &#39;show&#39;, &#39;show_documentation&#39;, &#39;hide_documentation&#39; },&#xA;  --   [&#39;&amp;lt;C-e&amp;gt;&#39;] = { &#39;hide&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;CR&amp;gt;&#39;] = { &#39;accept&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Tab&amp;gt;&#39;] = { &#39;snippet_forward&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = { &#39;snippet_backward&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Up&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;Down&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-p&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-n&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-b&amp;gt;&#39;] = { &#39;scroll_documentation_up&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-f&amp;gt;&#39;] = { &#39;scroll_documentation_down&#39;, &#39;fallback&#39; },&#xA;  keymap = { preset = &#39;default&#39; },&#xA;&#xA;  -- Enables keymaps, completions and signature help when true&#xA;  enabled = function() return vim.bo.buftype ~= &#34;prompt&#34; end,&#xA;  -- Example for blocking multiple filetypes&#xA;  -- enabled = function()&#xA;  --  return not vim.tbl_contains({ &#34;lua&#34;, &#34;markdown&#34; }, vim.bo.filetype) and vim.bo.buftype ~= &#34;prompt&#34;&#xA;  -- end,&#xA;&#xA;  snippets = {&#xA;    -- Function to use when expanding LSP provided snippets&#xA;    expand = function(snippet) vim.snippet.expand(snippet) end,&#xA;    -- Function to use when checking if a snippet is active&#xA;    active = function(filter) return vim.snippet.active(filter) end,&#xA;    -- Function to use when jumping between tab stops in a snippet, where direction can be negative or positive&#xA;    jump = function(direction) vim.snippet.jump(direction) end,&#xA;  },&#xA;&#xA;  completion = {&#xA;    keyword = {&#xA;      -- &#39;prefix&#39; will fuzzy match on the text before the cursor&#xA;      -- &#39;full&#39; will fuzzy match on the text before *and* after the cursor&#xA;      -- example: &#39;foo_|_bar&#39; will match &#39;foo_&#39; for &#39;prefix&#39; and &#39;foo__bar&#39; for &#39;full&#39;&#xA;      range = &#39;prefix&#39;,&#xA;      -- Regex used to get the text when fuzzy matching&#xA;      regex = &#39;[-_]\\|\\k&#39;,&#xA;      -- After matching with regex, any characters matching this regex at the prefix will be excluded&#xA;      exclude_from_prefix_regex = &#39;[\\-]&#39;,&#xA;    },&#xA;&#xA;    trigger = {&#xA;      -- When true, will prefetch the completion items when entering insert mode&#xA;      -- WARN: buggy, not recommended unless you&#39;d like to help develop prefetching&#xA;      prefetch_on_insert = false,&#xA;      -- When false, will not show the completion window automatically when in a snippet&#xA;      show_in_snippet = true,&#xA;      -- When true, will show the completion window after typing a character that matches the `keyword.regex`&#xA;      show_on_keyword = true,&#xA;      -- When true, will show the completion window after typing a trigger character&#xA;      show_on_trigger_character = true,&#xA;      -- LSPs can indicate when to show the completion window via trigger characters&#xA;      -- however, some LSPs (i.e. tsserver) return characters that would essentially&#xA;      -- always show the window. We block these by default.&#xA;      show_on_blocked_trigger_characters = function()&#xA;        if vim.api.nvim_get_mode().mode == &#39;c&#39; then return {} end&#xA;  &#xA;        -- you can also block per filetype, for example:&#xA;        -- if vim.bo.filetype == &#39;markdown&#39; then&#xA;        --   return { &#39; &#39;, &#39;\n&#39;, &#39;\t&#39;, &#39;.&#39;, &#39;/&#39;, &#39;(&#39;, &#39;[&#39; }&#xA;        -- end&#xA;&#xA;        return { &#39; &#39;, &#39;\n&#39;, &#39;\t&#39; }&#xA;      end,&#xA;      -- When both this and show_on_trigger_character are true, will show the completion window&#xA;      -- when the cursor comes after a trigger character after accepting an item&#xA;      show_on_accept_on_trigger_character = true,&#xA;      -- When both this and show_on_trigger_character are true, will show the completion window&#xA;      -- when the cursor comes after a trigger character when entering insert mode&#xA;      show_on_insert_on_trigger_character = true,&#xA;      -- List of trigger characters (on top of `show_on_blocked_trigger_characters`) that won&#39;t trigger&#xA;      -- the completion window when the cursor comes after a trigger character when&#xA;      -- entering insert mode/accepting an item&#xA;      show_on_x_blocked_trigger_characters = { &#34;&#39;&#34;, &#39;&#34;&#39;, &#39;(&#39; },&#xA;      -- or a function, similar to show_on_blocked_trigger_character&#xA;    },&#xA;&#xA;    list = {&#xA;      -- Maximum number of items to display&#xA;      max_items = 200,&#xA;      -- Controls if completion items will be selected automatically,&#xA;      -- and whether selection automatically inserts&#xA;      selection = &#39;preselect&#39;,&#xA;      -- Controls how the completion items are selected&#xA;      -- &#39;preselect&#39; will automatically select the first item in the completion list&#xA;      -- &#39;manual&#39; will not select any item by default&#xA;      -- &#39;auto_insert&#39; will not select any item by default, and insert the completion items automatically&#xA;      -- when selecting them&#xA;      --&#xA;      -- You may want to bind a key to the `cancel` command, which will undo the selection&#xA;      -- when using &#39;auto_insert&#39;&#xA;      cycle = {&#xA;        -- When `true`, calling `select_next` at the *bottom* of the completion list&#xA;        -- will select the *first* completion item.&#xA;        from_bottom = true,&#xA;        -- When `true`, calling `select_prev` at the *top* of the completion list&#xA;        -- will select the *last* completion item.&#xA;        from_top = true,&#xA;      },&#xA;    },&#xA;&#xA;    accept = {&#xA;      -- Create an undo point when accepting a completion item&#xA;      create_undo_point = true,&#xA;      -- Experimental auto-brackets support&#xA;      auto_brackets = {&#xA;        -- Whether to auto-insert brackets for functions&#xA;        enabled = true,&#xA;        -- Default brackets to use for unknown languages&#xA;        default_brackets = { &#39;(&#39;, &#39;)&#39; },&#xA;        -- Overrides the default blocked filetypes&#xA;        override_brackets_for_filetypes = {},&#xA;        -- Synchronously use the kind of the item to determine if brackets should be added&#xA;        kind_resolution = {&#xA;          enabled = true,&#xA;          blocked_filetypes = { &#39;typescriptreact&#39;, &#39;javascriptreact&#39;, &#39;vue&#39; },&#xA;        },&#xA;        -- Asynchronously use semantic token to determine if brackets should be added&#xA;        semantic_token_resolution = {&#xA;          enabled = true,&#xA;          blocked_filetypes = {},&#xA;          -- How long to wait for semantic tokens to return before assuming no brackets should be added&#xA;          timeout_ms = 400,&#xA;        },&#xA;      },&#xA;    },&#xA;&#xA;    menu = {&#xA;      enabled = true,&#xA;      min_width = 15,&#xA;      max_height = 10,&#xA;      border = &#39;none&#39;,&#xA;      winblend = 0,&#xA;      winhighlight = &#39;Normal:BlinkCmpMenu,FloatBorder:BlinkCmpMenuBorder,CursorLine:BlinkCmpMenuSelection,Search:None&#39;,&#xA;      -- Keep the cursor X lines away from the top/bottom of the window&#xA;      scrolloff = 2,&#xA;      -- Note that the gutter will be disabled when border ~= &#39;none&#39;&#xA;      scrollbar = true,&#xA;      -- Which directions to show the window,&#xA;      -- falling back to the next direction when there&#39;s not enough space&#xA;      direction_priority = { &#39;s&#39;, &#39;n&#39; },&#xA;&#xA;      -- Whether to automatically show the window when new completion items are available&#xA;      auto_show = true,&#xA;&#xA;      -- Screen coordinates of the command line&#xA;      cmdline_position = function()&#xA;        if vim.g.ui_cmdline_pos ~= nil then&#xA;          local pos = vim.g.ui_cmdline_pos -- (1, 0)-indexed&#xA;          return { pos[1] - 1, pos[2] }&#xA;        end&#xA;        local height = (vim.o.cmdheight == 0) and 1 or vim.o.cmdheight&#xA;        return { vim.o.lines - height, 0 }&#xA;      end,&#xA;&#xA;      -- Controls how the completion items are rendered on the popup window&#xA;      draw = {&#xA;        -- Aligns the keyword you&#39;ve typed to a component in the menu&#xA;        align_to_component = &#39;label&#39;, -- or &#39;none&#39; to disable&#xA;        -- Left and right padding, optionally { left, right } for different padding on each side&#xA;        padding = 1,&#xA;        -- Gap between columns&#xA;        gap = 1,&#xA;        -- Use treesitter to highlight the label text of completions from these sources&#xA;        treesitter = {},&#xA;        -- Recommended to enable it just for the LSP source&#xA;        -- treesitter = { &#39;lsp&#39; }&#xA;&#xA;        -- Components to render, grouped by column&#xA;        columns = { { &#39;kind_icon&#39; }, { &#39;label&#39;, &#39;label_description&#39;, gap = 1 } },&#xA;        -- for a setup similar to nvim-cmp: https://github.com/Saghen/blink.cmp/pull/245#issuecomment-2463659508&#xA;        -- columns = { { &#34;label&#34;, &#34;label_description&#34;, gap = 1 }, { &#34;kind_icon&#34;, &#34;kind&#34; } },&#xA;&#xA;        -- Definitions for possible components to render. Each component defines:&#xA;        --   ellipsis: whether to add an ellipsis when truncating the text&#xA;        --   width: control the min, max and fill behavior of the component&#xA;        --   text function: will be called for each item&#xA;        --   highlight function: will be called only when the line appears on screen&#xA;        components = {&#xA;          kind_icon = {&#xA;            ellipsis = false,&#xA;            text = function(ctx) return ctx.kind_icon .. ctx.icon_gap end,&#xA;            highlight = function(ctx)&#xA;              return require(&#39;blink.cmp.completion.windows.render.tailwind&#39;).get_hl(ctx) or &#39;BlinkCmpKind&#39; .. ctx.kind&#xA;            end,&#xA;          },&#xA;&#xA;          kind = {&#xA;            ellipsis = false,&#xA;            width = { fill = true },&#xA;            text = function(ctx) return ctx.kind end,&#xA;            highlight = function(ctx)&#xA;              return require(&#39;blink.cmp.completion.windows.render.tailwind&#39;).get_hl(ctx) or &#39;BlinkCmpKind&#39; .. ctx.kind&#xA;            end,&#xA;          },&#xA;&#xA;          label = {&#xA;            width = { fill = true, max = 60 },&#xA;            text = function(ctx) return ctx.label .. ctx.label_detail end,&#xA;            highlight = function(ctx)&#xA;              -- label and label details&#xA;              local highlights = {&#xA;                { 0, #ctx.label, group = ctx.deprecated and &#39;BlinkCmpLabelDeprecated&#39; or &#39;BlinkCmpLabel&#39; },&#xA;              }&#xA;              if ctx.label_detail then&#xA;                table.insert(highlights, { #ctx.label, #ctx.label + #ctx.label_detail, group = &#39;BlinkCmpLabelDetail&#39; })&#xA;              end&#xA;&#xA;              -- characters matched on the label by the fuzzy matcher&#xA;              for _, idx in ipairs(ctx.label_matched_indices) do&#xA;                table.insert(highlights, { idx, idx + 1, group = &#39;BlinkCmpLabelMatch&#39; })&#xA;              end&#xA;&#xA;              return highlights&#xA;            end,&#xA;          },&#xA;&#xA;          label_description = {&#xA;            width = { max = 30 },&#xA;            text = function(ctx) return ctx.label_description end,&#xA;            highlight = &#39;BlinkCmpLabelDescription&#39;,&#xA;          },&#xA;&#xA;          source_name = {&#xA;            width = { max = 30 },&#xA;            text = function(ctx) return ctx.source_name end,&#xA;            highlight = &#39;BlinkCmpSource&#39;,&#xA;          },&#xA;        },&#xA;      },&#xA;    },&#xA;&#xA;    documentation = {&#xA;      -- Controls whether the documentation window will automatically show when selecting a completion item&#xA;      auto_show = false,&#xA;      -- Delay before showing the documentation window&#xA;      auto_show_delay_ms = 500,&#xA;      -- Delay before updating the documentation window when selecting a new item,&#xA;      -- while an existing item is still visible&#xA;      update_delay_ms = 50,&#xA;      -- Whether to use treesitter highlighting, disable if you run into performance issues&#xA;      treesitter_highlighting = true,&#xA;      window = {&#xA;        min_width = 10,&#xA;        max_width = 60,&#xA;        max_height = 20,&#xA;        border = &#39;padded&#39;,&#xA;        winblend = 0,&#xA;        winhighlight = &#39;Normal:BlinkCmpDoc,FloatBorder:BlinkCmpDocBorder,CursorLine:BlinkCmpDocCursorLine,Search:None&#39;,&#xA;        -- Note that the gutter will be disabled when border ~= &#39;none&#39;&#xA;        scrollbar = true,&#xA;        -- Which directions to show the documentation window,&#xA;        -- for each of the possible menu window directions,&#xA;        -- falling back to the next direction when there&#39;s not enough space&#xA;        direction_priority = {&#xA;          menu_north = { &#39;e&#39;, &#39;w&#39;, &#39;n&#39;, &#39;s&#39; },&#xA;          menu_south = { &#39;e&#39;, &#39;w&#39;, &#39;s&#39;, &#39;n&#39; },&#xA;        },&#xA;      },&#xA;    },&#xA;    -- Displays a preview of the selected item on the current line&#xA;    ghost_text = {&#xA;      enabled = false,&#xA;    },&#xA;  },&#xA;&#xA;  -- Experimental signature help support&#xA;  signature = {&#xA;    enabled = false,&#xA;    trigger = {&#xA;      blocked_trigger_characters = {},&#xA;      blocked_retrigger_characters = {},&#xA;      -- When true, will show the signature help window when the cursor comes after a trigger character when entering insert mode&#xA;      show_on_insert_on_trigger_character = true,&#xA;    },&#xA;    window = {&#xA;      min_width = 1,&#xA;      max_width = 100,&#xA;      max_height = 10,&#xA;      border = &#39;padded&#39;,&#xA;      winblend = 0,&#xA;      winhighlight = &#39;Normal:BlinkCmpSignatureHelp,FloatBorder:BlinkCmpSignatureHelpBorder&#39;,&#xA;      scrollbar = false, -- Note that the gutter will be disabled when border ~= &#39;none&#39;&#xA;      -- Which directions to show the window,&#xA;      -- falling back to the next direction when there&#39;s not enough space,&#xA;      -- or another window is in the way&#xA;      direction_priority = { &#39;n&#39;, &#39;s&#39; },&#xA;      -- Disable if you run into performance issues&#xA;      treesitter_highlighting = true,&#xA;    },&#xA;  },&#xA;&#xA;  fuzzy = {&#xA;    -- when enabled, allows for a number of typos relative to the length of the query&#xA;    -- disabling this matches the behavior of fzf&#xA;    use_typo_resistance = true,&#xA;    -- frecency tracks the most recently/frequently used items and boosts the score of the item&#xA;    use_frecency = true,&#xA;    -- proximity bonus boosts the score of items matching nearby words&#xA;    use_proximity = true,&#xA;    max_items = 200,&#xA;    -- controls which sorts to use and in which order, falling back to the next sort if the first one returns nil&#xA;    -- you may pass a function instead of a string to customize the sorting&#xA;    sorts = { &#39;score&#39;, &#39;kind&#39;, &#39;label&#39; },&#xA;&#xA;    prebuilt_binaries = {&#xA;      -- Whether or not to automatically download a prebuilt binary from github. If this is set to `false`&#xA;      -- you will need to manually build the fuzzy binary dependencies by running `cargo build --release`&#xA;      download = true,&#xA;      -- When downloading a prebuilt binary, force the downloader to resolve this version. If this is unset&#xA;      -- then the downloader will attempt to infer the version from the checked out git tag (if any).&#xA;      --&#xA;      -- Beware that if the FFI ABI changes while tracking main then this may result in blink breaking.&#xA;      force_version = nil,&#xA;      -- When downloading a prebuilt binary, force the downloader to use this system triple. If this is unset&#xA;      -- then the downloader will attempt to infer the system triple from `jit.os` and `jit.arch`.&#xA;      -- Check the latest release for all available system triples&#xA;      --&#xA;      -- Beware that if the FFI ABI changes while tracking main then this may result in blink breaking.&#xA;      force_system_triple = nil,&#xA;      -- Extra arguments that will be passed to curl like { &#39;curl&#39;, ..extra_curl_args, ..built_in_args }&#xA;      extra_curl_args = {}&#xA;    },&#xA;  },&#xA;&#xA;  sources = {&#xA;    -- Static list of providers to enable, or a function to dynamically enable/disable providers based on the context&#xA;    default = { &#39;lsp&#39;, &#39;path&#39;, &#39;snippets&#39;, &#39;buffer&#39; },&#xA;    -- Example dynamically picking providers based on the filetype and treesitter node:&#xA;    -- providers = function(ctx)&#xA;    --   local node = vim.treesitter.get_node()&#xA;    --   if vim.bo.filetype == &#39;lua&#39; then&#xA;    --     return { &#39;lsp&#39;, &#39;path&#39; }&#xA;    --   elseif node and vim.tbl_contains({ &#39;comment&#39;, &#39;line_comment&#39;, &#39;block_comment&#39; }, node:type()) then&#xA;    --     return { &#39;buffer&#39; }&#xA;    --   else&#xA;    --     return { &#39;lsp&#39;, &#39;path&#39;, &#39;snippets&#39;, &#39;buffer&#39; }&#xA;    --   end&#xA;    -- end&#xA;    &#xA;    -- You may also define providers per filetype&#xA;    per_filetype = {&#xA;      -- lua = { &#39;lsp&#39;, &#39;path&#39; },&#xA;    },&#xA;&#xA;    -- By default, we choose providers for the cmdline based on the current cmdtype&#xA;    -- You may disable cmdline completions by replacing this with an empty table&#xA;    cmdline = function()&#xA;      local type = vim.fn.getcmdtype()&#xA;      -- Search forward and backward&#xA;      if type == &#39;/&#39; or type == &#39;?&#39; then return { &#39;buffer&#39; } end&#xA;      -- Commands&#xA;      if type == &#39;:&#39; then return { &#39;cmdline&#39; } end&#xA;      return {}&#xA;    end,&#xA;&#xA;    -- Function to use when transforming the items before they&#39;re returned for all providers&#xA;    -- The default will lower the score for snippets to sort them lower in the list&#xA;    transform_items = function(_, items)&#xA;      for _, item in ipairs(items) do&#xA;        if item.kind == require(&#39;blink.cmp.types&#39;).CompletionItemKind.Snippet then&#xA;          item.score_offset = item.score_offset - 3&#xA;        end&#xA;      end&#xA;      return items&#xA;    end,&#xA;    -- Minimum number of characters in the keyword to trigger all providers&#xA;    -- May also be `function(ctx: blink.cmp.Context): number`&#xA;    min_keyword_length = 0,&#xA;    -- Example for setting a minimum keyword length for markdown files&#xA;    -- min_keyword_length = function()&#xA;    --   return vim.bo.filetype == &#39;markdown&#39; and 2 or 0&#xA;    -- end,&#xA;&#xA;    -- Please see https://github.com/Saghen/blink.compat for using `nvim-cmp` sources&#xA;    providers = {&#xA;      lsp = {&#xA;        name = &#39;LSP&#39;,&#xA;        module = &#39;blink.cmp.sources.lsp&#39;,&#xA;&#xA;        --- *All* providers have the following options available&#xA;        --- NOTE: All of these options may be functions to get dynamic behavior&#xA;        --- See the type definitions for more information.&#xA;        enabled = true, -- Whether or not to enable the provider&#xA;        async = false, -- Whether we should wait for the provider to return before showing the completions&#xA;        timeout_ms = 2000, -- How long to wait for the provider to return before showing completions and treating it as asynchronous&#xA;        transform_items = nil, -- Function to transform the items before they&#39;re returned&#xA;        should_show_items = true, -- Whether or not to show the items&#xA;        max_items = nil, -- Maximum number of items to display in the menu&#xA;        min_keyword_length = 0, -- Minimum number of characters in the keyword to trigger the provider&#xA;        -- If this provider returns 0 items, it will fallback to these providers.&#xA;        -- If multiple providers falback to the same provider, all of the providers must return 0 items for it to fallback&#xA;        fallbacks = { &#39;buffer&#39; },&#xA;        score_offset = 0, -- Boost/penalize the score of the items&#xA;        override = nil, -- Override the source&#39;s functions&#xA;      },&#xA;      path = {&#xA;        name = &#39;Path&#39;,&#xA;        module = &#39;blink.cmp.sources.path&#39;,&#xA;        score_offset = 3,&#xA;        fallbacks = { &#39;buffer&#39; },&#xA;        opts = {&#xA;          trailing_slash = false,&#xA;          label_trailing_slash = true,&#xA;          get_cwd = function(context) return vim.fn.expand((&#39;#%d:p:h&#39;):format(context.bufnr)) end,&#xA;          show_hidden_files_by_default = false,&#xA;        }&#xA;      },&#xA;      snippets = {&#xA;        name = &#39;Snippets&#39;,&#xA;        module = &#39;blink.cmp.sources.snippets&#39;,&#xA;        opts = {&#xA;          friendly_snippets = true,&#xA;          search_paths = { vim.fn.stdpath(&#39;config&#39;) .. &#39;/snippets&#39; },&#xA;          global_snippets = { &#39;all&#39; },&#xA;          extended_filetypes = {},&#xA;          ignored_filetypes = {},&#xA;          get_filetype = function(context)&#xA;            return vim.bo.filetype&#xA;          end&#xA;        }&#xA;&#xA;        --- Example usage for disabling the snippet provider after pressing trigger characters (i.e. &#34;.&#34;)&#xA;        -- enabled = function(ctx)&#xA;        --   return ctx ~= nil and ctx.trigger.kind == vim.lsp.protocol.CompletionTriggerKind.TriggerCharacter&#xA;        -- end,&#xA;      },&#xA;      luasnip = {&#xA;        name = &#39;Luasnip&#39;,&#xA;        module = &#39;blink.cmp.sources.luasnip&#39;,&#xA;      },&#xA;      buffer = {&#xA;        name = &#39;Buffer&#39;,&#xA;        module = &#39;blink.cmp.sources.buffer&#39;,&#xA;        opts = {&#xA;          -- default to all visible buffers&#xA;          get_bufnrs = function()&#xA;            return vim&#xA;              .iter(vim.api.nvim_list_wins())&#xA;              :map(function(win) return vim.api.nvim_win_get_buf(win) end)&#xA;              :filter(function(buf) return vim.bo[buf].buftype ~= &#39;nofile&#39; end)&#xA;              :totable()&#xA;          end,&#xA;        }&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  appearance = {&#xA;    highlight_ns = vim.api.nvim_create_namespace(&#39;blink_cmp&#39;),&#xA;    -- Sets the fallback highlight groups to nvim-cmp&#39;s highlight groups&#xA;    -- Useful for when your theme doesn&#39;t support blink.cmp&#xA;    -- Will be removed in a future release&#xA;    use_nvim_cmp_as_default = false,&#xA;    -- Set to &#39;mono&#39; for &#39;Nerd Font Mono&#39; or &#39;normal&#39; for &#39;Nerd Font&#39;&#xA;    -- Adjusts spacing to ensure icons are aligned&#xA;    nerd_font_variant = &#39;mono&#39;,&#xA;    kind_icons = {&#xA;      Text = &#39;󰉿&#39;,&#xA;      Method = &#39;󰊕&#39;,&#xA;      Function = &#39;󰊕&#39;,&#xA;      Constructor = &#39;󰒓&#39;,&#xA;&#xA;      Field = &#39;󰜢&#39;,&#xA;      Variable = &#39;󰆦&#39;,&#xA;      Property = &#39;󰖷&#39;,&#xA;&#xA;      Class = &#39;󱡠&#39;,&#xA;      Interface = &#39;󱡠&#39;,&#xA;      Struct = &#39;󱡠&#39;,&#xA;      Module = &#39;󰅩&#39;,&#xA;&#xA;      Unit = &#39;󰪚&#39;,&#xA;      Value = &#39;󰦨&#39;,&#xA;      Enum = &#39;󰦨&#39;,&#xA;      EnumMember = &#39;󰦨&#39;,&#xA;&#xA;      Keyword = &#39;󰻾&#39;,&#xA;      Constant = &#39;󰏿&#39;,&#xA;&#xA;      Snippet = &#39;󱄽&#39;,&#xA;      Color = &#39;󰏘&#39;,&#xA;      File = &#39;󰈔&#39;,&#xA;      Reference = &#39;󰬲&#39;,&#xA;      Folder = &#39;󰉋&#39;,&#xA;      Event = &#39;󱐋&#39;,&#xA;      Operator = &#39;󰪚&#39;,&#xA;      TypeParameter = &#39;󰬛&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!-- config:end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Highlight groups&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Group&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpMenu&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;The completion menu window&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpMenuBorder&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;The completion menu window border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpMenuSelection&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PmenuSel&lt;/td&gt; &#xA;    &lt;td&gt;The completion menu window selected item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpScrollBarThumb&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PmenuThumb&lt;/td&gt; &#xA;    &lt;td&gt;The scrollbar thumb&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpScrollBarGutter&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PmenuSbar&lt;/td&gt; &#xA;    &lt;td&gt;The scrollbar gutter&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabel&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;Label of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabelDeprecated&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NonText&lt;/td&gt; &#xA;    &lt;td&gt;Deprecated label of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabelMatch&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;(Currently unused) Label of the completion item when it matches the query&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabelDetail&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NonText&lt;/td&gt; &#xA;    &lt;td&gt;Label description of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabelDescription&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NonText&lt;/td&gt; &#xA;    &lt;td&gt;Label description of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpKind&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Special&lt;/td&gt; &#xA;    &lt;td&gt;Kind icon/text of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpKind&amp;lt;kind&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Special&lt;/td&gt; &#xA;    &lt;td&gt;Kind icon/text of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSource&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NonText&lt;/td&gt; &#xA;    &lt;td&gt;Source of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpGhostText&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NonText&lt;/td&gt; &#xA;    &lt;td&gt;Preview item with ghost text&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDoc&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The documentation window&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDocBorder&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The documentation window border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDocSeparator&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The documentation separator between doc and detail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDocCursorLine&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Visual&lt;/td&gt; &#xA;    &lt;td&gt;The documentation window cursor line&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSignatureHelp&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The signature help window&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSignatureHelpBorder&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The signature help window border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSignatureHelpActiveParameter&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LspSignatureActiveParameter&lt;/td&gt; &#xA;    &lt;td&gt;Active parameter of the signature help&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Community Sources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazydev.nvim&#34;&gt;lazydev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kristijanhusak/vim-dadbod-completion&#34;&gt;vim-dadbod-completion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikavilpas/blink-ripgrep.nvim&#34;&gt;blink-ripgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/niuiic/blink-cmp-rg.nvim&#34;&gt;blink-cmp-ripgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/netmute/blink-cmp-ctags&#34;&gt;blink-cmp-ctags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/giuxtaposition/blink-cmp-copilot&#34;&gt;blink-cmp-copilot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Luasnip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;saghen/blink.cmp&#39;,&#xA;  version = &#39;v0.*&#39;,&#xA;  -- !Important! Make sure you&#39;re using the latest release of LuaSnip&#xA;  -- `main` does not work at the moment&#xA;  dependencies = { &#39;L3MON4D3/LuaSnip&#39;, version = &#39;v2.*&#39; },&#xA;  opts = {&#xA;    snippets = {&#xA;      expand = function(snippet) require(&#39;luasnip&#39;).lsp_expand(snippet) end,&#xA;      active = function(filter)&#xA;        if filter and filter.direction then&#xA;          return require(&#39;luasnip&#39;).jumpable(filter.direction)&#xA;        end&#xA;        return require(&#39;luasnip&#39;).in_snippet()&#xA;      end,&#xA;      jump = function(direction) require(&#39;luasnip&#39;).jump(direction) end,&#xA;    },&#xA;    sources = {&#xA;      default = { &#39;lsp&#39;, &#39;path&#39;, &#39;luasnip&#39;, &#39;buffer&#39; },&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Menu Appearance/Drawing&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Default draw configuration&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;!-- config:start --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;--- @module &#39;blink.cmp&#39;&#xA;--- @type blink.cmp.Draw&#xA;completion.menu.draw = {&#xA;  -- Aligns the keyword you&#39;ve typed to a component in the menu&#xA;  align_to_component = &#39;label&#39;, -- or &#39;none&#39; to disable&#xA;  -- Left and right padding, optionally { left, right } for different padding on each side&#xA;  padding = 1,&#xA;  -- Gap between columns&#xA;  gap = 1,&#xA;  -- Use treesitter to highlight the label text of completions from these sources&#xA;  treesitter = {},&#xA;&#xA;  -- Components to render, grouped by column&#xA;  columns = { { &#39;kind_icon&#39; }, { &#39;label&#39;, &#39;label_description&#39;, gap = 1 } },&#xA;  -- for a setup similar to nvim-cmp: https://github.com/Saghen/blink.cmp/pull/245#issuecomment-2463659508&#xA;  -- columns = { { &#34;label&#34;, &#34;label_description&#34;, gap = 1 }, { &#34;kind_icon&#34;, &#34;kind&#34; } },&#xA;&#xA;  -- Definitions for possible components to render. Each component defines:&#xA;  --   ellipsis: whether to add an ellipsis when truncating the text&#xA;  --   width: control the min, max and fill behavior of the component&#xA;  --   text function: will be called for each item&#xA;  --   highlight function: will be called only when the line appears on screen&#xA;  components = {&#xA;    kind_icon = {&#xA;      ellipsis = false,&#xA;      text = function(ctx) return ctx.kind_icon .. ctx.icon_gap end,&#xA;      highlight = function(ctx)&#xA;        return require(&#39;blink.cmp.completion.windows.render.tailwind&#39;).get_hl(ctx) or &#39;BlinkCmpKind&#39; .. ctx.kind&#xA;      end,&#xA;    },&#xA;&#xA;    kind = {&#xA;      ellipsis = false,&#xA;      width = { fill = true },&#xA;      text = function(ctx) return ctx.kind end,&#xA;      highlight = function(ctx)&#xA;        return require(&#39;blink.cmp.completion.windows.render.tailwind&#39;).get_hl(ctx) or &#39;BlinkCmpKind&#39; .. ctx.kind&#xA;      end,&#xA;    },&#xA;&#xA;    label = {&#xA;      width = { fill = true, max = 60 },&#xA;      text = function(ctx) return ctx.label .. ctx.label_detail end,&#xA;      highlight = function(ctx)&#xA;        -- label and label details&#xA;        local highlights = {&#xA;          { 0, #ctx.label, group = ctx.deprecated and &#39;BlinkCmpLabelDeprecated&#39; or &#39;BlinkCmpLabel&#39; },&#xA;        }&#xA;        if ctx.label_detail then&#xA;          table.insert(highlights, { #ctx.label, #ctx.label + #ctx.label_detail, group = &#39;BlinkCmpLabelDetail&#39; })&#xA;        end&#xA;&#xA;        -- characters matched on the label by the fuzzy matcher&#xA;        for _, idx in ipairs(ctx.label_matched_indices) do&#xA;          table.insert(highlights, { idx, idx + 1, group = &#39;BlinkCmpLabelMatch&#39; })&#xA;        end&#xA;&#xA;        return highlights&#xA;      end,&#xA;    },&#xA;&#xA;    label_description = {&#xA;      width = { max = 30 },&#xA;      text = function(ctx) return ctx.label_description end,&#xA;      highlight = &#39;BlinkCmpLabelDescription&#39;,&#xA;    },&#xA;&#xA;    source_name = {&#xA;      width = { max = 30 },&#xA;      -- source_name or source_id are supported&#xA;      text = function(ctx) return ctx.source_name end,&#xA;      highlight = &#39;BlinkCmpSource&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!-- config:end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;blink.cmp uses a grid-based layout to render the completion menu. The components, defined in &lt;code&gt;draw.components[string]&lt;/code&gt;, define &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;highlight&lt;/code&gt; functions which are called for each completion item. The &lt;code&gt;highlight&lt;/code&gt; function will be called only when the item appears on screen, so expensive operations such as Treesitter highlighting may be performed (contributions welcome!, &lt;a href=&#34;https://www.reddit.com/r/neovim/comments/1ca4gm2/colorful_cmp_menu_powered_by_treesitter/&#34;&gt;for example&lt;/a&gt;). The components may define their min and max width, where &lt;code&gt;ellipsis = true&lt;/code&gt; (enabled by default), will draw the &lt;code&gt;…&lt;/code&gt; character when the text is truncated. Setting &lt;code&gt;width.fill = true&lt;/code&gt; will fill the remaining space, effectively making subsequent components right aligned, with respect to their column.&lt;/p&gt; &#xA;&lt;p&gt;Columns effectively allow you to vertically align a set of components. Each column, defined as an array in &lt;code&gt;draw.columns&lt;/code&gt;, will be rendered for all of the completion items, where the longest rendered row will determine the width of the column. You may define &lt;code&gt;gap = number&lt;/code&gt; in your column to insert a gap between components.&lt;/p&gt; &#xA;&lt;p&gt;For a setup similar to nvim-cmp, use the following config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  completion = {&#xA;    menu = {&#xA;      draw = {&#xA;        columns = { { &#34;label&#34;, &#34;label_description&#34;, gap = 1 }, { &#34;kind_icon&#34;, &#34;kind&#34; } },&#xA;      },&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select Nth item from the list&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s an example configuration that allows you to select the nth item from the list, based on &lt;a href=&#34;https://github.com/Saghen/blink.cmp/issues/382&#34;&gt;#382&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;keymap = {&#xA;  preset = &#39;default&#39;,&#xA;  [&#39;&amp;lt;A-1&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 1 }) end },&#xA;  [&#39;&amp;lt;A-2&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 2 }) end },&#xA;  [&#39;&amp;lt;A-3&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 3 }) end },&#xA;  [&#39;&amp;lt;A-4&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 4 }) end },&#xA;  [&#39;&amp;lt;A-5&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 5 }) end },&#xA;  [&#39;&amp;lt;A-6&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 6 }) end },&#xA;  [&#39;&amp;lt;A-7&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 7 }) end },&#xA;  [&#39;&amp;lt;A-8&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 8 }) end },&#xA;  [&#39;&amp;lt;A-9&amp;gt;&#39;] = { function(cmp) cmp.accept({ index = 9 }) end },&#xA;},&#xA;completion = {&#xA;  menu = {&#xA;    draw = {&#xA;      columns = { { &#39;item_idx&#39; }, { &#39;kind_icon&#39; }, { &#39;label&#39;, &#39;label_description&#39;, gap = 1 } },&#xA;      components = {&#xA;        item_idx = {&#xA;          text = function(ctx) return tostring(ctx.idx) end,&#xA;          highlight = &#39;BlinkCmpItemIdx&#39; -- optional, only if you want to change its color&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The plugin use a 4 stage pipeline: trigger -&amp;gt; sources -&amp;gt; fuzzy -&amp;gt; render&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger:&lt;/strong&gt; Controls when to request completion items from the sources and provides a context downstream with the current query (i.e. &lt;code&gt;hello.wo|&lt;/code&gt;, the query would be &lt;code&gt;wo&lt;/code&gt;) and the treesitter object under the cursor (i.e. for intelligently enabling/disabling sources). It respects trigger characters passed by the LSP (or any other source) and includes it in the context for sending to the LSP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sources:&lt;/strong&gt; Provides a common interface for and merges the results of completion, trigger character, resolution of additional information and cancellation. Some sources are builtin: &lt;code&gt;LSP&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;snippets&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fuzzy:&lt;/strong&gt; Rust &amp;lt;-&amp;gt; Lua FFI which performs both filtering and sorting of the items &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Filtering:&lt;/strong&gt; The fuzzy matching uses smith-waterman, same as FZF, but implemented in SIMD for ~6x the performance of FZF (TODO: add benchmarks). Due to the SIMD&#39;s performance, the prefiltering phase on FZF was dropped to allow for typos. Similar to fzy/fzf, additional points are given to prefix matches, characters with capitals (to promote camelCase/PascalCase first char matching) and matches after delimiters (to promote snake_case first char matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Sorting:&lt;/strong&gt; Combines fuzzy matching score with frecency and proximity bonus. Each completion item may also include a &lt;code&gt;score_offset&lt;/code&gt; which will be added to this score to demote certain sources. The &lt;code&gt;snippets&lt;/code&gt; source takes advantage of this to avoid taking precedence over the LSP source. The parameters here still need to be tuned, so please let me know if you find some magical parameters!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Responsible for placing the menu, documentation and function parameters windows. All of the rendering can be overridden following a syntax similar to incline.nvim. It uses the neovim window decoration provider to provide next to no overhead from highlighting.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compared to nvim-cmp&lt;/h2&gt; &#xA;&lt;h3&gt;Advantages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoids the complexity of nvim-cmp&#39;s configuration by providing sensible defaults&lt;/li&gt; &#xA; &lt;li&gt;Updates on every keystroke with 0.5-4ms of overhead, versus nvim-cmp&#39;s default debounce of 60ms with 2-50ms hitches from processing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Setting nvim-cmp&#39;s debounce to 0ms leads to visible stuttering. If you&#39;d like to stick with nvim-cmp, try &lt;a href=&#34;https://github.com/yioneko/nvim-cmp&#34;&gt;yioneko&#39;s fork&lt;/a&gt; or the more recent &lt;a href=&#34;https://github.com/iguanacucumber/magazine.nvim&#34;&gt;magazine.nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Boosts completion item score via frecency &lt;em&gt;and&lt;/em&gt; proximity bonus. nvim-cmp only boosts score via proximity bonus and optionally by recency&lt;/li&gt; &#xA; &lt;li&gt;Typo-resistant fuzzy matching unlike nvim-cmp&#39;s fzf-style fuzzy matching&lt;/li&gt; &#xA; &lt;li&gt;Core sources (buffer, snippets, path, lsp) are built-in versus nvim-cmp&#39;s exclusively external sources&lt;/li&gt; &#xA; &lt;li&gt;Built-in auto bracket and signature help support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned missing features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significantly more testing and documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/&#34;&gt;@hrsh7th&lt;/a&gt; nvim-cmp used as inspiration and cmp-path/cmp-cmdline implementations modified for path/cmdline sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/garymjr&#34;&gt;@garymjr&lt;/a&gt; nvim-snippets implementation modified for snippets source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redxtech&#34;&gt;@redxtech&lt;/a&gt; Help with design and testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aaditya-sahay&#34;&gt;@aaditya-sahay&lt;/a&gt; Help with rust, design and testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stefanboca&#34;&gt;@stefanboca&lt;/a&gt; Author of &lt;a href=&#34;https://github.com/saghen/blink.compat&#34;&gt;blink.compat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lopi-py&#34;&gt;@lopi-py&lt;/a&gt; Contributes to the windowing code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scottmckendry&#34;&gt;@scottmckendry&lt;/a&gt; Contributes to the CI and prebuilt binaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Balssh&#34;&gt;@balssh&lt;/a&gt; Manages nixpkg and nixvim&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>go-gitea/gitea</title>
    <updated>2024-12-15T01:29:02Z</updated>
    <id>tag:github.com,2024-12-15:/go-gitea/gitea</id>
    <link href="https://github.com/go-gitea/gitea" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git with a cup of tea! Painless self-hosted all-in-one software development service, including Git hosting, code review, team collaboration, package registry and CI/CD&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitea&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-gitea/gitea/actions/workflows/release-nightly.yml?query=branch%3Amain&#34; title=&#34;Release Nightly&#34;&gt;&lt;img src=&#34;https://github.com/go-gitea/gitea/actions/workflows/release-nightly.yml/badge.svg?branch=main&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Gitea&#34; title=&#34;Join the Discord chat at https://discord.gg/Gitea&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/322538954119184384.svg?logo=discord&amp;amp;logoColor=white&amp;amp;label=Discord&amp;amp;color=5865F2&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/code.gitea.io/gitea&#34; title=&#34;Go Report Card&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/code.gitea.io/gitea&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/code.gitea.io/gitea&#34; title=&#34;GoDoc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/code.gitea.io/gitea?status.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-gitea/gitea/releases/latest&#34; title=&#34;GitHub release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/go-gitea/gitea.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/go-gitea/gitea&#34; title=&#34;Help Contribute to Open Source&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/go-gitea/gitea/badges/users.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea&#34; title=&#34;Become a backer/sponsor of gitea&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/tiers/backers/badge.svg?label=backers&amp;amp;color=brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34; title=&#34;License: MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/go-gitea/gitea&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod&amp;amp;color=green&#34; alt=&#34;Contribute with Gitpod&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/gitea&#34; title=&#34;Crowdin&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/gitea/localized.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gitea/gitea/main/README_ZH.md&#34;&gt;View this document in Chinese&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this project is to make the easiest, fastest, and most painless way of setting up a self-hosted Git service.&lt;/p&gt; &#xA;&lt;p&gt;As Gitea is written in Go, it works across &lt;strong&gt;all&lt;/strong&gt; the platforms and architectures that are supported by Go, including Linux, macOS, and Windows on x86, amd64, ARM and PowerPC architectures. This project has been &lt;a href=&#34;https://blog.gitea.com/welcome-to-gitea/&#34;&gt;forked&lt;/a&gt; from &lt;a href=&#34;https://gogs.io&#34;&gt;Gogs&lt;/a&gt; since November of 2016, but a lot has changed.&lt;/p&gt; &#xA;&lt;p&gt;For online demonstrations, you can visit &lt;a href=&#34;https://demo.gitea.com&#34;&gt;demo.gitea.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For accessing free Gitea service (with a limited number of repositories), you can visit &lt;a href=&#34;https://gitea.com/user/login&#34;&gt;gitea.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To quickly deploy your own dedicated Gitea instance on Gitea Cloud, you can start a free trial at &lt;a href=&#34;https://cloud.gitea.com&#34;&gt;cloud.gitea.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;From the root of the source tree, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TAGS=&#34;bindata&#34; make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if SQLite support is required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TAGS=&#34;bindata sqlite sqlite_unlock_notify&#34; make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; target is split into two sub-targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make backend&lt;/code&gt; which requires &lt;a href=&#34;https://go.dev/dl/&#34;&gt;Go Stable&lt;/a&gt;, the required version is defined in &lt;a href=&#34;https://raw.githubusercontent.com/go-gitea/gitea/main/go.mod&#34;&gt;go.mod&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make frontend&lt;/code&gt; which requires &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js LTS&lt;/a&gt; or greater.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internet connectivity is required to download the go and npm modules. When building from the official source tarballs which include pre-built frontend files, the &lt;code&gt;frontend&lt;/code&gt; target will not be triggered, making it possible to build without Node.js.&lt;/p&gt; &#xA;&lt;p&gt;More info: &lt;a href=&#34;https://docs.gitea.com/installation/install-from-source&#34;&gt;https://docs.gitea.com/installation/install-from-source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gitea web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you&#39;re interested in using our APIs, we have experimental support with &lt;a href=&#34;https://docs.gitea.com/api&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Expected workflow is: Fork -&amp;gt; Patch -&amp;gt; Push -&amp;gt; Pull Request&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;YOU MUST READ THE &lt;a href=&#34;https://raw.githubusercontent.com/go-gitea/gitea/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTORS GUIDE&lt;/a&gt; BEFORE STARTING TO WORK ON A PULL REQUEST.&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;li&gt;If you have found a vulnerability in the project, please write privately to &lt;strong&gt;&lt;a href=&#34;mailto:security@gitea.io&#34;&gt;security@gitea.io&lt;/a&gt;&lt;/strong&gt;. Thanks!&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Translating&lt;/h2&gt; &#xA;&lt;p&gt;Translations are done through Crowdin. If you want to translate to a new language ask one of the managers in the Crowdin project to add a new language there.&lt;/p&gt; &#xA;&lt;p&gt;You can also just create an issue for adding a language or ask on discord on the #translation channel. If you need context or find some translation issues, you can leave a comment on the string or ask on Discord. For general translation questions there is a section in the docs. Currently a bit empty but we hope to fill it as questions pop up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.gitea.com/contributing/localization&#34;&gt;https://docs.gitea.com/contributing/localization&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crowdin.com/project/gitea&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/gitea/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Further information&lt;/h2&gt; &#xA;&lt;p&gt;For more information and instructions about how to install Gitea, please look at our &lt;a href=&#34;https://docs.gitea.com/&#34;&gt;documentation&lt;/a&gt;. If you have questions that are not covered by the documentation, you can get in contact with us on our &lt;a href=&#34;https://discord.gg/Gitea&#34;&gt;Discord server&lt;/a&gt; or create a post in the &lt;a href=&#34;https://forum.gitea.com/&#34;&gt;discourse forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We maintain a list of Gitea-related projects at &lt;a href=&#34;https://gitea.com/gitea/awesome-gitea&#34;&gt;gitea/awesome-gitea&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The official Gitea CLI is developed at &lt;a href=&#34;https://gitea.com/gitea/tea&#34;&gt;gitea/tea&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/go-gitea/people&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-gitea/gitea/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gitea/gitea/main/options/locale/TRANSLATORS&#34;&gt;Translators&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/gitea#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/gitea#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/gitea#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/gitea/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/gitea/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gitea/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do you pronounce Gitea?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gitea is pronounced &lt;a href=&#34;https://youtu.be/EM71-2uDAoY&#34;&gt;/ɡɪ’ti:/&lt;/a&gt; as in &#34;gi-tea&#34; with a hard g.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why is this not hosted on a Gitea instance?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re &lt;a href=&#34;https://github.com/go-gitea/gitea/issues/1029&#34;&gt;working on it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. See the &lt;a href=&#34;https://github.com/go-gitea/gitea/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full license text.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Looking for an overview of the interface? Check it out!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/home_timeline.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/user_profile.png&#34; alt=&#34;User Profile&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/global_issues.png&#34; alt=&#34;Global Issues&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/branches.png&#34; alt=&#34;Branches&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/web_editor.png&#34; alt=&#34;Web Editor&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/activity.png&#34; alt=&#34;Activity&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/migration.png&#34; alt=&#34;New Migration&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/migration.gif&#34; alt=&#34;Migrating&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://image.ibb.co/e02dSb/6.png&#34; alt=&#34;Pull Request View&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/pull_requests_dark.png&#34; alt=&#34;Pull Request Dark&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/review_dark.png&#34; alt=&#34;Diff Review Dark&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://dl.gitea.com/screenshots/diff_dark.png&#34; alt=&#34;Diff Dark&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>