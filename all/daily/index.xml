<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-23T01:29:29Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joschan21/digitalhippo</title>
    <updated>2023-11-23T01:29:29Z</updated>
    <id>tag:github.com,2023-11-23:/joschan21/digitalhippo</id>
    <link href="https://github.com/joschan21/digitalhippo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Modern Fullstack E-Commerce Marketplace for Digital Products&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DigitalHippo - A Modern Fullstack E-Commerce Marketplace for Digital Products&lt;/h1&gt; &#xA;&lt;p&gt;Built with the Next.js 14 App Router, tRPC, TypeScript, Payload &amp;amp; Tailwind&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/joschan21/digitalhippo/raw/master/public/thumbnail.jpg&#34; alt=&#34;Project Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🛠️ Complete marketplace built from scratch in Next.js 14&lt;/li&gt; &#xA; &lt;li&gt;💻 Beautiful landing page &amp;amp; product pages included&lt;/li&gt; &#xA; &lt;li&gt;🎨 Custom artwork included&lt;/li&gt; &#xA; &lt;li&gt;💳 Full admin dashboard&lt;/li&gt; &#xA; &lt;li&gt;🛍️ Users can purchase and sell their own products&lt;/li&gt; &#xA; &lt;li&gt;🛒 Locally persisted shopping cart&lt;/li&gt; &#xA; &lt;li&gt;🔑 Authentication using Payload&lt;/li&gt; &#xA; &lt;li&gt;🖥️ Learn how to self-host Next.js&lt;/li&gt; &#xA; &lt;li&gt;🌟 Clean, modern UI using shadcn-ui&lt;/li&gt; &#xA; &lt;li&gt;✉️ Beautiful emails for signing up and after purchase&lt;/li&gt; &#xA; &lt;li&gt;✅ Admins can verify products to ensure high quality&lt;/li&gt; &#xA; &lt;li&gt;⌨️ 100% written in TypeScript&lt;/li&gt; &#xA; &lt;li&gt;🎁 ...much more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with this project, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/joschan21/digitalhippo.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and copy the .env.example variables into a separate .env file, fill them out &amp;amp; and that&#39;s all you need to get started!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.joshtriedcoding.com/payload&#34;&gt;Payload&lt;/a&gt; for making this project possible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xacone/BestEdrOfTheMarket</title>
    <updated>2023-11-23T01:29:29Z</updated>
    <id>tag:github.com,2023-11-23:/Xacone/BestEdrOfTheMarket</id>
    <link href="https://github.com/Xacone/BestEdrOfTheMarket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Little AV/EDR bypassing lab for training &amp; learning purposes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://xacone.github.io/BestEdrOfTheMarket.html&#34;&gt; Best EDR Of The Market (BEOTM) 🐲 &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;i&gt;Little AV/EDR Evasion Lab for training &amp;amp; learning purposes.&lt;/i&gt; (🏗️ under construction..)​&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ____            _     _____ ____  ____     ___   __   _____ _&#xA;| __ )  ___  ___| |_  | ____|  _ \|  _ \   / _ \ / _| |_   _| |__   ___&#xA;|  _ \ / _ \/ __| __| |  _| | | | | |_) | | | | | |_    | | | &#39;_ \ / _ \&#xA;| |_) |  __/\__ \ |_  | |___| |_| |  _ &amp;lt;  | |_| |  _|   | | | | | |  __/&#xA;|____/_\___||___/\__| |_____|____/|_| \_\  \___/|_|     |_| |_| |_|\___|&#xA;|  \/  | __ _ _ __| | _____| |_&#xA;| |\/| |/ _` | &#39;__| |/ / _ \ __|&#xA;| |  | | (_| | |  |   &amp;lt;  __/ |_           Yazidou - github.com/Xacone&#xA;|_|  |_|\__,_|_|  |_|\_\___|\__|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;br&gt;BestEDROfTheMarket is a naive user-mode EDR (Endpoint Detection and Response) project, designed to serve as a testing ground for understanding and bypassing EDR&#39;s user-mode detection methods that are frequently used by these security solutions. &lt;br&gt;These techniques are mainly based on a dynamic analysis of the target process state (memory, API calls, etc.),&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xacone.github.io/BestEdrOfTheMarket.html&#34;&gt;Feel free to check this short article I wrote that describe the interception and analysis methods implemented by the EDR.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Defensive Techniques ⚔️​&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Multi-Levels API Hooking &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; SSN Hooking/Crushing &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; IAT Hooking &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Shellcode Injection Detection &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Reflective Module Loading Detection&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Call Stack Monitoring &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;i&gt;In progress&lt;/i&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Heap Monitoring &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; ROP Mitigation &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; AMSI Patching Mitigation &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; ETW Patching Mitigation &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;!--&lt;a href=&#34;#&#34;&gt; Performance brief &lt;/a&gt; &lt;br&gt;--&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/Assets/beotmgif1.gif&#34;&gt; &#xA;&lt;h2&gt;Usage 📜&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Usage: BestEdrOfTheMarket.exe [args]&#xA;&#xA;                 /help Shows this help message and quit&#xA;                 /v Verbosity                 &#xA;                 /iat IAT hooking&#xA;                 /stack Threads call stack monitoring&#xA;                 /nt Inline Nt-level hooking&#xA;                 /k32 Inline Kernel32/Kernelbase hooking&#xA;                 /ssn SSN crushing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;BestEdrOfTheMarket.exe /stack /v /k32&#xA;BestEdrOfTheMarket.exe /stack /nt&#xA;BestEdrOfTheMarket.exe /iat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Structure &amp;amp; Config files ⚙️&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;📁 BestEdrOfTheMarket/&#xA;    📄 BestEdrOfTheMarket.exe&#xA;    📁 DLLs/&#xA;        📄 Kernel32.dll&#xA;        📄 ntdll.dll&#xA;        📄 iat.dll&#xA;    📝 TrigerringFunctions.json&#xA;    📝 YaroRules.json&#xA;    📄 jsoncpp.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;YaroRules.json: &lt;/b&gt;Contains a json array filled with the patterns you would like to be identified while monitoring threads call stacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;Patterns&#34;: [&#xA;&#x9;&#x9;&#34;d2 65 48 8b 52 60 48 8b 52 18 48 8b 52 20 48 8b 72 50 48&#34;,&#xA;&#x9;&#x9;&#34;49 be 77 73 32 5f 33 32 00 00&#34;,&#xA;                &#34;...&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;TrigerringFunctions.json: &lt;/b&gt;Describes the functions that are already hooked or/and to hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;DLLBasedHooking&#34;: {&#xA;    &#34;NTDLL.dll&#34;: [&#xA;      &#34;NtAllocateVirtualMemory&#34;,&#xA;      &#34;...&#34;&#xA;    ],&#xA;    &#34;KERNELBASE.dll&#34;: [&#xA;      &#34;VirtualAlloc&#34;&#xA;      &#34;...&#34;&#xA;    ],&#xA;    &#34;KERNEL32.dll&#34;: [&#xA;      &#34;VirtualAlloc&#34;&#xA;      &#34;...&#34;&#xA;    ]&#xA;  },&#xA;  &#34;StackBasedHooking&#34;: {&#xA;    &#34;Functions&#34;: [&#xA;      &#34;NtCreateUserProcess&#34;,&#xA;      &#34;...&#34;&#xA;    ]&#xA;  },&#xA;  &#34;SSNCrushingRoutines&#34;: {&#xA;    &#34;Functions&#34;: [&#xA;      &#34;NtCreateSection&#34;&#xA;      &#34;...&#34;&#xA;    ]&#xA;  },&#xA;  &#34;IATHooking&#34;: {&#xA;    &#34;Functions&#34;: [&#xA;      &#34;VirtualAlloc&#34;,&#xA;      &#34;...&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;DLLBasedHooking&lt;/b&gt;: Not modifiable 🚫​​, changing its values will have absolutely no effect at all. Information purposes only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;StackBasedHooking&lt;/b&gt;: Modifiable ✅, the functions you specify here will be monitored and their call will trigger an analysis of the calling thread&#39;s call stack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;SSNCrushingRoutines&lt;/b&gt;: Modifiable ✅, the NT-level routines you will specify here will be attributed a corrupted SSN, Be careful of specifying NT-Level routines ONLY !&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;IATHooking&lt;/b&gt;: Modifiable ✅, the functions you specify here will be hooked at IAT level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t compile your own DLLs, take a look at the functions already hooked into the DLLs provided &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/DLLs/&#34;&gt;in sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Xacone/BestEdrOfTheMarket/releases/tag/Beta&#34;&gt;Releases&lt;/a&gt; 📦&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/Docs/Setup.md&#34;&gt; Project Setup 🛠️​ &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Disclaimer ⚠️​&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t link the EDR to programs that are too CPU-intensive/thread-creating, as some detection techniques such as call stack analysis constantly monitor the stack state of each thread and this can quickly increase the load on the EDR, it&#39;s more relevant (that&#39;s also the point) that you link the tool to your own artifacts and keep in mind that a good evasive artifact tries to be as discrete as possible.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>stas00/ml-engineering</title>
    <updated>2023-11-23T01:29:29Z</updated>
    <id>tag:github.com,2023-11-23:/stas00/ml-engineering</id>
    <link href="https://github.com/stas00/ml-engineering" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Machine Learning Engineering Guides and Tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Machine Learning Engineering Guides and Tools&lt;/h1&gt; &#xA;&lt;p&gt;An open collection of methodologies to help with successful training of large language models and multi-modal models.&lt;/p&gt; &#xA;&lt;p&gt;This is a technical material suitable for LLM/VLM training engineers and operators. That is the content here contains lots of scripts and copy-n-paste commands to enable you to quickly address your needs.&lt;/p&gt; &#xA;&lt;p&gt;This repo is an ongoing brain dump of my experiences training Large Language Models (LLM) (and VLMs); a lot of the know-how I acquired while training the open-source &lt;a href=&#34;https://huggingface.co/bigscience/bloom&#34;&gt;BLOOM-176B&lt;/a&gt; model in 2022 and &lt;a href=&#34;https://huggingface.co/HuggingFaceM4/idefics-80b-instruct&#34;&gt;IDEFICS-80B&lt;/a&gt; multi-modal model in 2023. Currently, I&#39;m working on developing/training open-source Retrieval Augmented models at &lt;a href=&#34;https://contextual.ai/&#34;&gt;Contextual.AI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been compiling this information mostly for myself so that I could quickly find solutions I have already researched in the past and which have worked, but as usual I&#39;m happy to share these with the wider ML community.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;My apologies while I&#39;m writing new chapters and re-organizing the content to be more intuitive. And some chapters are placeholders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 1. Key Components&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/network/&#34;&gt;Network&lt;/a&gt;&lt;/strong&gt; - intra-node and inter-node connectivity, calculating bandwidth requirements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/io/&#34;&gt;IO&lt;/a&gt;&lt;/strong&gt; - local and distributed disks and filesystems&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/cpu/&#34;&gt;CPU&lt;/a&gt;&lt;/strong&gt; - cpus, affinities (WIP)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/gpu/&#34;&gt;GPU&lt;/a&gt;&lt;/strong&gt; - the work horses (WIP)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/cpu-memory/&#34;&gt;CPU Memory&lt;/a&gt;&lt;/strong&gt; - how much CPU memory is enough - the shortest chapter ever.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 2. Performance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/fault-tolerance/&#34;&gt;Fault Tolerance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/performance/&#34;&gt;Performance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/multi-node&#34;&gt;Multi-Node networking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/model-parallelism/&#34;&gt;Model parallelism&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 3. Operating&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/slurm/&#34;&gt;SLURM&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/hparams/&#34;&gt;Training hyper-parameters and model initializations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/instabilities/&#34;&gt;Instabilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 4. Development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/debug/&#34;&gt;Debugging software and hardware failures&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/stas00/the-art-of-debugging&#34;&gt;And more debugging&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/reproducibility/&#34;&gt;Reproducibility&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/dtype/&#34;&gt;Tensor precision / Data types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/transformers/&#34;&gt;HF Transformers notes&lt;/a&gt;&lt;/strong&gt; - making small models, tokenizers, datasets, and other tips&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Part 5. Miscellaneous&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/resources/&#34;&gt;Resources&lt;/a&gt;&lt;/strong&gt; - LLM/VLM chronicles&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;Things that you are likely to need to find quickly and often.&lt;/p&gt; &#xA;&lt;p&gt;Tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/multi-node/all_reduce_bench.py&#34;&gt;all_reduce_bench.py&lt;/a&gt; - a much easier way to benchmark network throughput than nccl-tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/debug/torch-distributed-gpu-test.py&#34;&gt;torch-distributed-gpu-test.py&lt;/a&gt; - a tool to quickly test your inter-node connectivity&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/debug/pytorch.md&#34;&gt;debugging pytorch applications&lt;/a&gt; - quick copy-n-paste solutions to resolve hanging or breaking pytorch applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/slurm/users.md&#34;&gt;slurm for users&lt;/a&gt; - a slurm cheatsheet and tricks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/transformers/make-tiny-models.md&#34;&gt;make tiny models/datasets/tokenizers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stas00/ml-engineering/tree/master/resources#publicly-available-training-llmvlm-logbooks&#34;&gt;LLM/VLM chronicles collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gratitude&lt;/h2&gt; &#xA;&lt;p&gt;None of this would have been possible without me being entrusted with doing the specific LLM/VLM trainings I have learned this know-how from. This is a privilege that only a few enjoy due to the prohibitively expensive cost of renting huge ML compute clusters. So hopefully the rest of the ML community will vicariously learn from these notes.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks go to &lt;a href=&#34;https://github.com/thomwolf&#34;&gt;Thom Wolf&lt;/a&gt; who proposed that I lead the BLOOM-176B training back when I didn&#39;t know anything about large scale training. This was the project that catapulted me into the intense learning process. And, of course, HuggingFace for giving me the opportunity to work full time on BLOOM-176B and later on IDEFICS-80B trainings.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug, typo or would like to propose an improvement please don&#39;t hesitate to open an &lt;a href=&#34;https://github.com/stas00/ml-engineering/issues&#34;&gt;Issue&lt;/a&gt; or contribute a PR.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The content of this site is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/stas00/ml-engineering/master/LICENSE-CC-BY-SA&#34;&gt;Attribution-ShareAlike 4.0 International&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;My repositories map&lt;/h2&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Machine Learning:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/ml-engineering&#34;&gt;ML Engineering&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/ml-ways&#34;&gt;ML ways&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/porting&#34;&gt;Porting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Guides:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/the-art-of-debugging&#34;&gt;The Art of Debugging&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Applications:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/ipyexperiments&#34;&gt;ipyexperiments&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✔ &lt;strong&gt;Tools and Cheatsheets:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stas00/bash-tools&#34;&gt;bash&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/conda-tools&#34;&gt;conda&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/git-tools&#34;&gt;git&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/jupyter-notebook-tools&#34;&gt;jupyter-notebook&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/make-tools&#34;&gt;make&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/python-tools&#34;&gt;python&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/tensorboard-tools&#34;&gt;tensorboard&lt;/a&gt; | &lt;a href=&#34;https://github.com/stas00/unix-tools&#34;&gt;unix&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>