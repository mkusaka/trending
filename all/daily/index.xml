<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-18T01:33:09Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bambulab/BambuStudio</title>
    <updated>2022-07-18T01:33:09Z</updated>
    <id>tag:github.com,2022-07-18:/bambulab/BambuStudio</id>
    <link href="https://github.com/bambulab/BambuStudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PC Software for BambuLab&#39;s 3D printers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/106916061/179006347-497d24c0-9bd6-45b7-8c49-d5cc8ecfe5d7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BambuStudio&lt;/h1&gt; &#xA;&lt;p&gt;Bambu Studio is a cutting-edge, feature-rich slicing software.&lt;br&gt; It contains project-based workflows, systematically optimized slicing algorithms, and an easy-to-use graphic interface, bringing users an incredibly smooth printing experience.&lt;/p&gt; &#xA;&lt;p&gt;Prebuilt Windows, macOS 64-bit releases are available through the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/releases/&#34;&gt;github releases page&lt;/a&gt;.&lt;br&gt; Linux version currently is not supported.&lt;/p&gt; &#xA;&lt;p&gt;Bambu Studio is based on &lt;a href=&#34;https://github.com/prusa3d/PrusaSlicer&#34;&gt;PrusaSlicer&lt;/a&gt; by Prusa Research, which is from &lt;a href=&#34;https://github.com/Slic3r/Slic3r&#34;&gt;Slic3r&lt;/a&gt; by Alessandro Ranellucci and the RepRap community.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki&#34;&gt;wiki&lt;/a&gt; and the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/tree/master/doc&#34;&gt;documentation directory&lt;/a&gt; for more informations.&lt;/p&gt; &#xA;&lt;h1&gt;What are Bambu Studio&#39;s main features?&lt;/h1&gt; &#xA;&lt;p&gt;Key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic slicing features &amp;amp; GCode viewer&lt;/li&gt; &#xA; &lt;li&gt;Multiple plates management&lt;/li&gt; &#xA; &lt;li&gt;Remote control &amp;amp; monitoring&lt;/li&gt; &#xA; &lt;li&gt;Auto-arrange objects&lt;/li&gt; &#xA; &lt;li&gt;Auto-orient objects&lt;/li&gt; &#xA; &lt;li&gt;Hybrid/Tree/Normal support types, Customized support&lt;/li&gt; &#xA; &lt;li&gt;multi-material printing and rich painting tools&lt;/li&gt; &#xA; &lt;li&gt;multi-platform (Win/Mac/Linux) support&lt;/li&gt; &#xA; &lt;li&gt;Global/Object/Part level slicing parameters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other major features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced cooling logic controlling fan speed and dynamic print speed&lt;/li&gt; &#xA; &lt;li&gt;Auto brim according to mechanical analysis&lt;/li&gt; &#xA; &lt;li&gt;Support arc path(G2/G3)&lt;/li&gt; &#xA; &lt;li&gt;Support STEP format&lt;/li&gt; &#xA; &lt;li&gt;Assembly &amp;amp; explosion view&lt;/li&gt; &#xA; &lt;li&gt;Flushing transition-filament into infill/object during filament change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to compile&lt;/h1&gt; &#xA;&lt;p&gt;Following platforms are currently supported to compile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 64-bit, &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki/Windows-Compile-Guide&#34;&gt;Compile Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mac 64-bit, &lt;a href=&#34;https://github.com/bambulab/BambuStudio/wiki/Mac-Compile-Guide&#34;&gt;Compile Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Report issue&lt;/h1&gt; &#xA;&lt;p&gt;You can add an issue to the &lt;a href=&#34;https://github.com/bambulab/BambuStudio/issues&#34;&gt;github tracker&lt;/a&gt; if &lt;strong&gt;it isn&#39;t already present.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Bambu Studio is licensed under the GNU Affero General Public License, version 3. Bambu Studio is based on PrusaSlicer by PrusaResearch.&lt;/p&gt; &#xA;&lt;p&gt;PrusaSlicer is licensed under the GNU Affero General Public License, version 3. PrusaSlicer is owned by Prusa Research. PrusaSlicer is originally based on Slic3r by Alessandro Ranellucci.&lt;/p&gt; &#xA;&lt;p&gt;Slic3r is licensed under the GNU Affero General Public License, version 3. Slic3r was created by Alessandro Ranellucci with the help of many other contributors.&lt;/p&gt; &#xA;&lt;p&gt;The GNU Affero General Public License, version 3 ensures that if you use any part of this software in any way (even behind a web server), your software must be released under the same license.&lt;/p&gt; &#xA;&lt;p&gt;The BambuNetworking and BambuTunnel plugins are based on non-free libraries. They are optional to the Bambu Studio and provides extended functionalities for users.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mgunyho/tere</title>
    <updated>2022-07-18T01:33:09Z</updated>
    <id>tag:github.com,2022-07-18:/mgunyho/tere</id>
    <link href="https://github.com/mgunyho/tere" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal file explorer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tere - a faster alternative to cd + ls&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;tere&lt;/code&gt; is a terminal file explorer. It is a faster alternative to using &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; to browse folders in your terminal. It only really does one thing: it allows you to navigate to a folder efficiently using a TUI, and then prints the path to that folder when you exit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgunyho/tere/master/demo/tere-demo-2022-07-10-2027-e2-O3.gif&#34; alt=&#34;A gif showing what tere using looks like&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;tere&lt;/code&gt; is not a file &lt;em&gt;manager&lt;/em&gt;, it can only be used to browse folders, not to create, rename or delete them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tere&lt;/code&gt; aims to be minimal and simple. It should be obvious how to use it. Navigating the file system should be efficient and require as few keystrokes as possible. A great source of inspiration for &lt;code&gt;tere&lt;/code&gt; is the &#34;type-ahead search&#34; functionality found in many GUI file managers.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Tere&#34; means &#34;hello&#34; in Estonian. It also feels nice to type.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To start using &lt;code&gt;tere&lt;/code&gt;, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest &lt;a href=&#34;https://github.com/mgunyho/tere-rs/releases&#34;&gt;release&lt;/a&gt;. If you have the Rust toolchain installed, you can also install from source by running &lt;code&gt;cargo install tere&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure your shell to &lt;code&gt;cd&lt;/code&gt; to the folder which &lt;code&gt;tere&lt;/code&gt; prints when it exits. It has to be usually done using a function or alias, since a subprocess cannot change the working directory of the parent.&lt;/p&gt; &lt;p&gt;For bash/zsh, put this in your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tere() {&#xA;    local result=$(/path/to/tere &#34;$@&#34;)&#xA;    [ -n &#34;$result&#34; ] &amp;amp;&amp;amp; cd -- &#34;$result&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For xonsh v0.10 or newer, put this in your &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def _tere(args):&#xA;    result = $(/path/to/tere @(args)).strip()&#xA;    if result:&#xA;        cd @(result)&#xA;&#xA;aliases[&#34;tere&#34;] = _tere&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For fish, put this in your &lt;code&gt;.config.fish&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function tere&#xA;    set --local result (/path/to/tere $argv)&#xA;    [ -n &#34;$result&#34; ] &amp;amp;&amp;amp; cd -- &#34;$result&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For powershell core, put this in your &lt;code&gt;$PROFILE&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    function Invoke-Tere() {&#xA;        $tere_dir = &#39;/path/to/tere&#39;&#xA;        if ($isWindows) {&#xA;            $tere_path = Join-Path $tere_dir &#39;tere.exe&#39;&#xA;        }&#xA;        else {&#xA;            $tere_path = Join-Path $tere_dir &#39;tere&#39;&#xA;        }&#xA;        $result = . $tere_path&#xA;        if ($result) {&#xA;            Set-Location $result&#xA;        }&#xA;    }&#xA;    Set-Alias tere Invoke-Tere  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If instructions for your shell are missing, feel free to send a pull request that includes them!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That&#39;s it. The next time you open a new shell, the command &lt;code&gt;tere&lt;/code&gt; should work (you can also of course call the shell function/alias whatever you like). The above shell configuration also acts as a config file for &lt;code&gt;tere&lt;/code&gt;, just add the options you want (see &lt;code&gt;tere --help&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;tere&lt;/code&gt; is tested on and built for Ubuntu. On Mac, it should be enough to compile the program yourself and the above bash/zsh shell configuration should work out of the box. Windows should also in principle work (the TUI is rendered using a cross-platform library), you just has to figure out the correct shell configuration. Pull requests welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Hacking&lt;/h3&gt; &#xA;&lt;p&gt;To compile &lt;code&gt;tere&lt;/code&gt; from source, follow the standard procedure:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Install the Rust toolchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone git@github.com:mgunyho/tere.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd tere&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cargo build&lt;/code&gt; (&lt;code&gt;--release&lt;/code&gt; for the release version)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will place the &lt;code&gt;tere&lt;/code&gt; in the folder &lt;code&gt;target/debug&lt;/code&gt; or &lt;code&gt;target/release&lt;/code&gt; if you used &lt;code&gt;--release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;User guide&lt;/h2&gt; &#xA;&lt;p&gt;You can navigate folders in &lt;code&gt;tere&lt;/code&gt; by using the arrow keys and by typing to search. Basic navigation works by moving the cursor up or down, and pressing &lt;kbd&gt;Enter&lt;/kbd&gt; or the right arrow &lt;kbd&gt;→&lt;/kbd&gt; to enter the highlighted folder. You can move to the parent folder by pressing &lt;kbd&gt;Enter&lt;/kbd&gt; on the parent folder item &lt;code&gt;..&lt;/code&gt;, or with the left arrow &lt;kbd&gt;←&lt;/kbd&gt;. Below is a full list of keyboard shortcuts.&lt;/p&gt; &#xA;&lt;h3&gt;Keyboard shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;tere&lt;/code&gt; has the following keyboard shortcuts:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Action&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Shortcut(s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Move cursor up&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;↑&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;k&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Move cursor down&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;↓&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Enter directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; or &lt;kbd&gt;→&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;l&lt;/kbd&gt; or if not searching, &lt;kbd&gt;Space&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Go to parent directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;←&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;h&lt;/kbd&gt; or if not searching, &lt;kbd&gt;Backspace&lt;/kbd&gt; or &lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exit &lt;code&gt;tere&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Esc&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exit &lt;code&gt;tere&lt;/code&gt; without changing directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Go to home directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;~&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Home&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;h&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Go to root directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;/&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Refresh current directory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Move cursor up by one screen&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Page Up&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;u&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;u&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Move cursor down by one screen&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Page Down&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;d&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;d&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Move cursor to the top&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Home&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;g&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Move cursor to the bottom&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;End&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;g&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Change case sensitivity mode&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Change gap search mode&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Show help screen&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Some of the shortcuts starting with &lt;kbd&gt;Alt&lt;/kbd&gt; should be familiar to Vim users.&lt;/p&gt; &#xA;&lt;h3&gt;Searching&lt;/h3&gt; &#xA;&lt;p&gt;To search for an item in the current folder, just type some letters. &lt;code&gt;tere&lt;/code&gt; will incrementally highlight all folders and files that match the search query.&lt;/p&gt; &#xA;&lt;p&gt;While searching, moving the cursor up or down jumps between only the items that match the search. The search query, as well as the number of matching items is shown at the bottom of the screen.&lt;/p&gt; &#xA;&lt;p&gt;If only one folder matches your current search, &lt;code&gt;tere&lt;/code&gt; will highlight it, and change the working directory to that folder. This way you can navigate folders very quickly.&lt;/p&gt; &#xA;&lt;p&gt;To stop searching, press &lt;kbd&gt;Esc&lt;/kbd&gt; or erase all search characters by pressing &lt;kbd&gt;Backspace&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, the searching uses &#34;smart case&#34;, meaning that if the query contains only lowercase letters, case is ignored, but if there are uppercase letters, the search is case sensitive. This can be changed with the &lt;code&gt;--ignore-case&lt;/code&gt; and &lt;code&gt;--case-sensitive&lt;/code&gt; options, or with the keyboard shortcut &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; while &lt;code&gt;tere&lt;/code&gt; is running.&lt;/p&gt; &#xA;&lt;p&gt;In addition, in the default search mode, &#34;gap search&#34; is enabled. This means that the search query matches any folder or file name that contains the searched characters, even if there are other characters between them. For example, searching for &lt;code&gt;dt&lt;/code&gt; would match both &lt;code&gt;DeskTop&lt;/code&gt; and &lt;code&gt;DocumenTs&lt;/code&gt;. This behavior can be changed with the &lt;code&gt;--gap-search-anywhere&lt;/code&gt; and &lt;code&gt;--no-gap-search&lt;/code&gt; options, or with the keyboard shortcut &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt; while &lt;code&gt;tere&lt;/code&gt; is running. See the output of the &lt;code&gt;--help&lt;/code&gt; option for further details.&lt;/p&gt; &#xA;&lt;h3&gt;Mouse navigation&lt;/h3&gt; &#xA;&lt;p&gt;Although &lt;code&gt;tere&lt;/code&gt; is mainly keyboard-focused, it is also possible to navigate using the mouse. To maximize compatibility, mouse support is off by default, and has to be enabled with the option &lt;code&gt;--mouse=on&lt;/code&gt;. With the mouse enabled, you can change to a folder by clicking on it, and move to the parent folder by right-clicking.&lt;/p&gt; &#xA;&lt;h3&gt;CLI options&lt;/h3&gt; &#xA;&lt;p&gt;You can adjust the behavior of &lt;code&gt;tere&lt;/code&gt; by passing the following CLI options to it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt;: Print a short help and all CLI options. Note that the output goes to stderr, to not interfere with &lt;code&gt;cd&lt;/code&gt; ing in the shell functions defined during the setup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; or &lt;code&gt;-V&lt;/code&gt;: Print the version of &lt;code&gt;tere&lt;/code&gt;. This also goes to stderr.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--filter-search&lt;/code&gt; or &lt;code&gt;-f&lt;/code&gt; / &lt;code&gt;--no-filter-search&lt;/code&gt; or &lt;code&gt;-F&lt;/code&gt;: If &lt;code&gt;--filter-search&lt;/code&gt; is set, show only items that match the current search query in the listing. Otherwise all items are shown in the listing while searching (this is the default behavior).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--folders-only&lt;/code&gt; or &lt;code&gt;-d&lt;/code&gt; / &lt;code&gt;--no-folders-only&lt;/code&gt; or &lt;code&gt;-D&lt;/code&gt;: With &lt;code&gt;--folders-only&lt;/code&gt;, don&#39;t show files but only folders (and symlinks pointing to folders) in the listing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--smart-case&lt;/code&gt; or &lt;code&gt;-S&lt;/code&gt; / &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt; / &lt;code&gt;--case-sensitive&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt;: Set the case sensitivity mode. The default mode is smart case, which is case insensitive if the query contains only lowercase letters and case sensitive otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--gap-search&lt;/code&gt; or &lt;code&gt;-g&lt;/code&gt; / &lt;code&gt;--gap-search-anywhere&lt;/code&gt; or &lt;code&gt;-G&lt;/code&gt; / &lt;code&gt;--no-gap-search&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt;: Configure whether to allow matches with gaps in them (see above).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--autocd-timeout&lt;/code&gt; - If the current search matches only one folder, automatically change to that folder after this many milliseconds. Can also be set to &lt;code&gt;off&lt;/code&gt;, which disables this behaviour.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--history-file&lt;/code&gt;: To make browsing more convenient, &lt;code&gt;tere&lt;/code&gt; saves a history of folders you have visited to this file in JSON format. It should be an absolute path. Defaults to &lt;code&gt;$CACHE_DIR/tere/history.json&lt;/code&gt;, where &lt;code&gt;$CACHE_DIR&lt;/code&gt; is &lt;code&gt;$XDG_CACHE_HOME&lt;/code&gt; or &lt;code&gt;~/.cache&lt;/code&gt;. Set to the empty string &lt;code&gt;&#39;&#39;&lt;/code&gt; to disable saving the history. Note that the history reveals parts of your folder structure if it can be read by someone else.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--mouse=on&lt;/code&gt; or &lt;code&gt;--mouse=off&lt;/code&gt;: Enable or disable navigating with the mouse. If enabled, you can left-click to enter folders and right-click to go to the parent folder. Off by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some options have two or more versions that override each other (for example &lt;code&gt;--folders-only&lt;/code&gt; and &lt;code&gt;--no-folders-only&lt;/code&gt;). For such options, whichever is passed last wins. This way, you can have one option as the default in your shell&#39;s &lt;code&gt;rc&lt;/code&gt; file, but you can sometimes manually override that option when running &lt;code&gt;tere&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;p&gt;The idea of &lt;code&gt;tere&lt;/code&gt; is by no means unique. There are actually quite a few CLI applications that attempt to make folder navigation faster. Below is a non-exhaustive list of such programs. The purpose of this section is to justify the existence of &lt;code&gt;tere&lt;/code&gt; by showing how it is different from all these applications in subtle but important ways.&lt;/p&gt; &#xA;&lt;p&gt;If there is a program that should be mentioned here, feel free to open an issue or pull request about it!&lt;/p&gt; &#xA;&lt;h3&gt;Terminal file browsers&lt;/h3&gt; &#xA;&lt;p&gt;These programs are designed for basically the same task as &lt;code&gt;tere&lt;/code&gt;: navigate to a folder in the terminal and then &lt;code&gt;cd&lt;/code&gt; to it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dystroy.org/broot/&#34;&gt;Broot&lt;/a&gt; - Broot is more focused on browsing large directories, and has a more complex UI than &lt;code&gt;tere&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sayanarijit/xplr&#34;&gt;xplr&lt;/a&gt; - Lots of features, fully customizable. Not entirely focused on navigation, has file management features. Navigation by searching requires jumping between typing and pressing arrow keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Vifon/deer&#34;&gt;deer&lt;/a&gt; - zsh only, searching requires extra keystrokes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EskelinenAntti/cdir&#34;&gt;cdir&lt;/a&gt; - Basically exactly the same idea as &lt;code&gt;tere&lt;/code&gt;, but in written in Python. Doesn&#39;t have Vim-like keyboard navigation, and it&#39;s not a standalone binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonmedv/llama&#34;&gt;llama&lt;/a&gt; - Very similar to &lt;code&gt;tere&lt;/code&gt;, written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.janouch.name/p/sdn&#34;&gt;sdn&lt;/a&gt; - Also very similar to &lt;code&gt;tere&lt;/code&gt;, even in terms of the UI as well. Type-ahead search mode is not the default, searching requires a couple of extra keystrokes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fuzzy matching and history-based navigation&lt;/h3&gt; &#xA;&lt;p&gt;These programs have a very similar goal as &lt;code&gt;tere&lt;/code&gt;, to speed up filesystem navigation. However, these kinds of programs are not well suited for exploration, as they require that you visit a folder before you can jump to it. They also differ from &lt;code&gt;tere&lt;/code&gt; in philosophy; &lt;code&gt;tere&lt;/code&gt; aims to be deterministic, while the results of a fuzzy match or &#34;frecency&#34;-based query vary depending on your previous queries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rupa/z&#34;&gt;z&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;autojump&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajeetdsouza/zoxide&#34;&gt;zoxide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clvv/fasd&#34;&gt;fasd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gsamokovarov/jump&#34;&gt;jump&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huyng/bashmarks&#34;&gt;bashmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankitvad/goto&#34;&gt;goto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lotabout/skim&#34;&gt;skim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Terminal file managers&lt;/h3&gt; &#xA;&lt;p&gt;There are quite a few terminal file managers, and they can often be used in the same way as &lt;code&gt;tere&lt;/code&gt;, for example using the &lt;code&gt;--choosedir&lt;/code&gt; option of ranger. However, they have a huge number of other features compared to &lt;code&gt;tere&lt;/code&gt;, which usually leads to a more complex UI and a higher learning curve. File managers are also not entirely focused on navigation, and therefore often require extra keystrokes to search and navigate folders. File management is not in the scope of &lt;code&gt;tere&lt;/code&gt;, so these programs are not directly comparable to it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ranger.github.io/&#34;&gt;ranger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarun/nnn&#34;&gt;nnn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://midnight-commander.org/&#34;&gt;Midnight Commander&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vifm.info/&#34;&gt;vifm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leo-arch/clifm&#34;&gt;clifm&lt;/a&gt; (C)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pasqu4le/clifm&#34;&gt;clifm&lt;/a&gt; (Haskell)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gokcehan/lf&#34;&gt;lf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dylanaraps/fff&#34;&gt;fff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kamiyaa/joshuto&#34;&gt;joshuto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rabite0/hunter&#34;&gt;hunter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other similar programs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.2f30.org/noice/file/README.html&#34;&gt;noice&lt;/a&gt; - Very similar to &lt;code&gt;tere&lt;/code&gt;, but there is no option to print the current directory on exit. Filtering/searching directory contents requires two extra keystrokes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golmman/twilight-commander&#34;&gt;twilight commander&lt;/a&gt; - Main goal seems to be a folder tree browser embedded in other apps. No search. No option to go above the initial working directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2022 András Márton Gunyhó. Licensed under the EUPL, see the &lt;code&gt;LICENSE&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jart/cosmopolitan</title>
    <updated>2022-07-18T01:33:09Z</updated>
    <id>tag:github.com,2022-07-18:/jart/cosmopolitan</id>
    <link href="https://github.com/jart/cosmopolitan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;build-once run-anywhere c library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jart/cosmopolitan/master/usr/share/img/honeybadger.png&#34; alt=&#34;Cosmopolitan Honeybadger&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jart/cosmopolitan/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/jart/cosmopolitan/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cosmopolitan&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://justine.lol/cosmopolitan/index.html&#34;&gt;Cosmopolitan Libc&lt;/a&gt; makes C a build-once run-anywhere language, like Java, except it doesn&#39;t need an interpreter or virtual machine. Instead, it reconfigures stock GCC and Clang to output a POSIX-approved polyglot format that runs natively on Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS with the best possible performance and the tiniest footprint imaginable.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;For an introduction to this project, please read the &lt;a href=&#34;https://justine.lol/ape.html&#34;&gt;αcτµαlly pδrταblε εxεcµταblε&lt;/a&gt; blog post and &lt;a href=&#34;https://justine.lol/cosmopolitan/index.html&#34;&gt;cosmopolitan libc&lt;/a&gt; website. We also have &lt;a href=&#34;https://justine.lol/cosmopolitan/documentation.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re doing your development work on Linux or BSD then you need just five files to get started. Here&#39;s what you do on Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://justine.lol/cosmopolitan/cosmopolitan.zip&#xA;unzip cosmopolitan.zip&#xA;printf &#39;main() { printf(&#34;hello world\\n&#34;); }\n&#39; &amp;gt;hello.c&#xA;gcc -g -Os -static -nostdlib -nostdinc -fno-pie -no-pie -mno-red-zone \&#xA;  -fno-omit-frame-pointer -pg -mnop-mcount \&#xA;  -o hello.com.dbg hello.c -fuse-ld=bfd -Wl,-T,ape.lds \&#xA;  -include cosmopolitan.h crt.o ape-no-modify-self.o cosmopolitan.a&#xA;objcopy -S -O binary hello.com.dbg hello.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You now have a portable program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hello.com&#xA;bash -c &#39;./hello.com&#39;  # zsh/fish workaround (we patched them in 2021)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since we used the &lt;code&gt;ape-no-modify-self.o&lt;/code&gt; bootloader (rather than &lt;code&gt;ape.o&lt;/code&gt;) your executable will not modify itself when it&#39;s run. What it&#39;ll instead do, is extract a 4kb program to &lt;code&gt;${TMPDIR:-${HOME:-.}}&lt;/code&gt; that maps your program into memory without needing to copy it. It&#39;s possible to install the APE loader systemwide as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# System-Wide APE Install&#xA;# for Linux, Darwin, and BSDs&#xA;# 1. Copies APE Loader to /usr/bin/ape&#xA;# 2. Registers w/ binfmt_misc too if Linux&#xA;ape/apeinstall.sh&#xA;&#xA;# System-Wide APE Uninstall&#xA;# for Linux, Darwin, and BSDs&#xA;ape/apeuninstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to convert APE binaries into the system-local format by using the &lt;code&gt;--assimilate&lt;/code&gt; flag. Please note that if binfmt_misc is in play, you&#39;ll need to unregister it temporarily before doing this, since the assimilate feature is part of the shell script header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ file hello.com&#xA;hello.com: DOS/MBR boot sector&#xA;./hello.com --assimilate&#xA;$ file hello.com&#xA;hello.com: ELF 64-bit LSB executable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that you&#39;re up and running with Cosmopolitan Libc and APE, here&#39;s some of the most important troubleshooting tools APE offers that you should know, in case you encounter any issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hello.com --strace   # log system calls to stderr&#xA;./hello.com --ftrace   # log function calls to stderr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do you love tiny binaries? If so, you may not be happy with Cosmo adding heavyweight features like tracing to your binaries by default. In that case, you may want to consider using our build system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make -j8 MODE=tiny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will cause programs such as &lt;code&gt;hello.com&lt;/code&gt; and &lt;code&gt;life.com&lt;/code&gt; to shrink from 60kb in size to about 16kb. There&#39;s also a prebuilt amalgamation online &lt;a href=&#34;https://justine.lol/cosmopolitan/cosmopolitan-tiny.zip&#34;&gt;https://justine.lol/cosmopolitan/cosmopolitan-tiny.zip&lt;/a&gt; hosted on our download page &lt;a href=&#34;https://justine.lol/cosmopolitan/download.html&#34;&gt;https://justine.lol/cosmopolitan/download.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on MacOS you can install the GNU compiler collection for x86_64-elf via homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install x86_64-elf-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in the above scripts just replace &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;objcopy&lt;/code&gt; with &lt;code&gt;x86_64-elf-gcc&lt;/code&gt; and &lt;code&gt;x86_64-elf-objcopy&lt;/code&gt; to compile your APE binary.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on Windows then you need to download an x86_64-pc-linux-gnu toolchain beforehand. See the &lt;a href=&#34;https://justine.lol/cosmopolitan/windows-compiling.html&#34;&gt;Compiling on Windows&lt;/a&gt; tutorial. It&#39;s needed because the ELF object format is what makes universal binaries possible.&lt;/p&gt; &#xA;&lt;p&gt;Cosmopolitan officially only builds on Linux. However, one highly experimental (and currently broken) thing you could try, is building the entire cosmo repository from source using the cross9 toolchain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p o/third_party&#xA;rm -rf o/third_party/gcc&#xA;wget https://justine.lol/linux-compiler-on-windows/cross9.zip&#xA;unzip cross9.zip&#xA;mv cross9 o/third_party/gcc&#xA;build/bootstrap/make.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source Builds&lt;/h2&gt; &#xA;&lt;p&gt;Cosmopolitan can be compiled from source on any Linux distro. First, you need to download or clone the repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://justine.lol/cosmopolitan/cosmopolitan.tar.gz&#xA;tar xf cosmopolitan.tar.gz  # see releases page&#xA;cd cosmopolitan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the entire repository and run all the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16&#xA;o//examples/hello.com&#xA;find o -name \*.com | xargs ls -rShal | less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an error running make.com then it&#39;s probably because you have WINE installed to &lt;code&gt;binfmt_misc&lt;/code&gt;. You can fix that by installing the the APE loader as an interpreter. It&#39;ll improve build performance too!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ape/apeinstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the Cosmopolitan repository is very large, you might only want to build a particular thing. Cosmopolitan&#39;s build config does a good job at having minimal deterministic builds. For example, if you wanted to build only hello.com then you could do that as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 o//examples/hello.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes it&#39;s desirable to build a subset of targets, without having to list out each individual one. You can do that by asking make to build a directory name. For example, if you wanted to build only the targets and subtargets of the chibicc package including its tests, you would say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 o//third_party/chibicc&#xA;o//third_party/chibicc/chibicc.com --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cosmopolitan provides a variety of build modes. For example, if you want really tiny binaries (as small as 12kb in size) then you&#39;d say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 MODE=tiny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s some other build modes you can try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 MODE=dbg       # asan + ubsan + debug&#xA;build/bootstrap/make.com -j16 MODE=asan      # production memory safety&#xA;build/bootstrap/make.com -j16 MODE=opt       # -march=native optimizations&#xA;build/bootstrap/make.com -j16 MODE=rel       # traditional release binaries&#xA;build/bootstrap/make.com -j16 MODE=optlinux  # optimal linux-only performance&#xA;build/bootstrap/make.com -j16 MODE=tinylinux # tiniest linux-only 4kb binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further details, see &lt;a href=&#34;https://raw.githubusercontent.com/jart/cosmopolitan/master/build/config.mk&#34;&gt;//build/config.mk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GDB&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s the recommended &lt;code&gt;~/.gdbinit&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set host-charset UTF-8&#xA;set target-charset UTF-8&#xA;set target-wide-charset UTF-8&#xA;set osabi none&#xA;set complaints 0&#xA;set confirm off&#xA;set history save on&#xA;set history filename ~/.gdb_history&#xA;define asm&#xA;  layout asm&#xA;  layout reg&#xA;end&#xA;define src&#xA;  layout src&#xA;  layout reg&#xA;end&#xA;src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You normally run the &lt;code&gt;.com.dbg&lt;/code&gt; file under gdb. If you need to debug the &lt;code&gt;.com&lt;/code&gt; file itself, then you can load the debug symbols independently as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gdb foo.com -ex &#39;add-symbol-file foo.com.dbg 0x401000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support Vector&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Min Version&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Circa&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AMD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;K8 Venus&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2005&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Intel&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Core&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;New Technology&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Vista&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GNU/Systemd&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.6.18&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2007&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;XNU&#39;s Not UNIX!&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15.6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Funding for this project is crowdsourced using &lt;a href=&#34;https://github.com/sponsors/jart&#34;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&#34;https://www.patreon.com/jart&#34;&gt;Patreon&lt;/a&gt;. Your support is what makes this project possible. Thank you! We&#39;d also like to give special thanks to the following individuals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdrumgoole&#34;&gt;Joe Drumgoole&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For publicly sponsoring our work at the highest tier.&lt;/p&gt;</summary>
  </entry>
</feed>