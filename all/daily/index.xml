<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-23T01:29:32Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>suno-ai/bark</title>
    <updated>2023-04-23T01:29:32Z</updated>
    <id>tag:github.com,2023-04-23:/suno-ai/bark</id>
    <link href="https://github.com/suno-ai/bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üîä Text-Prompted Generative Audio Model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üê∂ Bark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/OnusFM.svg?style=social&amp;amp;label=@OnusFM&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE?compact=true&amp;amp;style=flat&amp;amp;&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://suno-ai.notion.site/Bark-Examples-5edae8b02a604b54a42244ba45ebc2e2&#34;&gt;Examples&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/model-card.md&#34;&gt;Model Card&lt;/a&gt; | &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;Playground Waitlist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bark is a transformer-based text-to-audio model created by &lt;a href=&#34;https://suno.ai&#34;&gt;Suno&lt;/a&gt;. Bark can generate highly realistic, multilingual speech as well as other audio - including music, background noise and simple sound effects. The model can also produce nonverbal communications like laughing, sighing and crying. To support the research community, we are providing access to pretrained model checkpoints ready for inference.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5068315/230698495-cbb1ced9-c911-4c9a-941d-a1a4a1286ac6.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üîä Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/suno/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Open%20In%20Spaces-blue.svg?sanitize=true&#34; alt=&#34;Open in Spaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñ Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bark import SAMPLE_RATE, generate_audio, preload_models&#xA;from IPython.display import Audio&#xA;&#xA;# download and load all models&#xA;preload_models()&#xA;&#xA;# generate audio from text&#xA;text_prompt = &#34;&#34;&#34;&#xA;     Hello, my name is Suno. And, uh ‚Äî and I like pizza. [laughs] &#xA;     But I also have other interests such as playing tic tac toe.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&#xA;# play text in notebook&#xA;Audio(audio_array, rate=SAMPLE_RATE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230490503-417e688d-5115-4eee-9550-b46a2b465ee3.webm&#34;&gt;pizza.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To save &lt;code&gt;audio_array&lt;/code&gt; as a WAV file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy.io.wavfile import write as write_wav&#xA;&#xA;write_wav(&#34;/path/to/audio.wav&#34;, SAMPLE_RATE, audio_array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üåé Foreign Language&lt;/h3&gt; &#xA;&lt;p&gt;Bark supports various languages out-of-the-box and automatically determines language from input text. When prompted with code-switched text, Bark will attempt to employ the native accent for the respective languages. English quality is best for the time being, and we expect other languages to further improve with scaling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    Buenos d√≠as Miguel. Tu colega piensa que tu alem√°n es extremadamente malo. &#xA;    But I suppose your english isn&#39;t terrible.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684752-10baadfe-1e7c-46a2-8323-43282aef2c8c.webm&#34;&gt;miguel.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üé∂ Music&lt;/h3&gt; &#xA;&lt;p&gt;Bark can generate all types of audio, and, in principle, doesn&#39;t see a difference between speech and music. Sometimes Bark chooses to generate text as music, but you can help it out by adding music notes around your lyrics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    ‚ô™ In the jungle, the mighty jungle, the lion barks tonight ‚ô™&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684766-97f5ea23-ad99-473c-924b-66b6fab24289.webm&#34;&gt;lion.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üé§ Voice Presets and Voice/Audio Cloning&lt;/h3&gt; &#xA;&lt;p&gt;Bark has the capability to fully clone voices - including tone, pitch, emotion and prosody. The model also attempts to preserve music, ambient noise, etc. from input audio. However, to mitigate misuse of this technology, we limit the audio history prompts to a limited set of Suno-provided, fully synthetic options to choose from for each language. Specify following the pattern: &lt;code&gt;{lang_code}_speaker_{0-9}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    I have a silky smooth voice, and today I will tell you about &#xA;    the exercise regimen of the common sloth.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt, history_prompt=&#34;en_speaker_1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684883-a344c619-a560-4ff5-8b99-b4463a34487b.webm&#34;&gt;sloth.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: since Bark recognizes languages automatically from input text, it is possible to use for example a german history prompt with english text. This usually leads to english audio with a german accent.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üë• Speaker Prompts&lt;/h3&gt; &#xA;&lt;p&gt;You can provide certain speaker prompts such as NARRATOR, MAN, WOMAN, etc. Please note that these are not always respected, especially if a conflicting audio history prompt is given.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    WOMAN: I would like an oatmilk latte please.&#xA;    MAN: Wow, that&#39;s expensive!&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684864-12d101a1-a726-471d-9d56-d18b108efcb8.webm&#34;&gt;latte.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíª Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/suno-ai/bark.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/suno-ai/bark&#xA;cd bark &amp;amp;&amp;amp; pip install . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Hardware and Inference Speed&lt;/h2&gt; &#xA;&lt;p&gt;Bark has been tested and works on both CPU and GPU (&lt;code&gt;pytorch 2.0+&lt;/code&gt;, CUDA 11.7 and CUDA 12.0). Running Bark requires running &amp;gt;100M parameter transformer models. On modern GPUs and PyTorch nightly, Bark can generate audio in roughly realtime. On older GPUs, default colab, or CPU, inference time might be 10-100x slower.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have new hardware available or if you want to play with bigger versions of our models, you can also sign up for early access to our model playground &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Details&lt;/h2&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt; and some other amazing work in the field, Bark uses GPT-style models to generate audio from scratch. Different from Vall-E, the initial text prompt is embedded into high-level semantic tokens without the use of phonemes. It can therefore generalize to arbitrary instructions beyond speech that occur in the training data, such as music lyrics, sound effects or other non-speech sounds. A subsequent second model is used to convert the generated semantic tokens into audio codec tokens to generate the full waveform. To enable the community to use Bark via public code we used the fantastic &lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec codec&lt;/a&gt; from Facebook to act as an audio representation.&lt;/p&gt; &#xA;&lt;p&gt;Below is a list of some known non-speech sounds, but we are finding more every day. Please let us know if you find patterns that work particularly well on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughter]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[sighs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[music]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[gasps]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[clears throat]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;‚Äî&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt; for hesitations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;‚ô™&lt;/code&gt; for song lyrics&lt;/li&gt; &#xA; &lt;li&gt;capitalization for emphasis of a word&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAN/WOMAN:&lt;/code&gt; for bias towards speaker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Languages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (en)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German (de)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish (es)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French (fr)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi (hi)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian (it)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese (ja)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean (ko)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish (pl)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese (pt)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian (ru)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish (tr)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese, simplified (zh)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arabic&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bengali&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Telugu&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üôè Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karpathy/nanoGPT&#34;&gt;nanoGPT&lt;/a&gt; for a dead-simple and blazing fast implementation of GPT-style models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt; for a state-of-the-art implementation of a fantastic audio codec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains/audiolm-pytorch&#34;&gt;AudioLM&lt;/a&gt; for very related training and inference code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and many other ground-breaking papers that enabled the development of Bark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;¬© License&lt;/h2&gt; &#xA;&lt;p&gt;Bark is licensed under a non-commercial license: CC-BY 4.0 NC. The Suno models themselves may be used commercially. However, this version of Bark uses &lt;code&gt;EnCodec&lt;/code&gt; as a neural codec backend, which is licensed under a &lt;a href=&#34;https://github.com/facebookresearch/encodec/raw/main/LICENSE&#34;&gt;non-commercial license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please contact us at &lt;code&gt;bark@suno.ai&lt;/code&gt; if you need access to a larger version of the model and/or a version of the model you can use commercially.&lt;/p&gt; &#xA;&lt;h2&gt;üì±&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéß&amp;nbsp;Suno Studio (Early Access)&lt;/h2&gt; &#xA;&lt;p&gt;We‚Äôre developing a playground for our models, including Bark.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested, you can sign up for early access &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How do I specify where models are downloaded and cached?&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;XDG_CACHE_HOME&lt;/code&gt; env variable to override where models are downloaded and cached (otherwise defaults to a subdirectory of &lt;code&gt;~/.cache&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Bark&#39;s generations sometimes differ from my prompts. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;p&gt;Bark is a GPT-style model. As such, it may take some creative liberties in its generations, resulting in higher-variance model outputs than traditional text-to-speech approaches.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tkmru/awesome-edr-bypass</title>
    <updated>2023-04-23T01:29:32Z</updated>
    <id>tag:github.com,2023-04-23:/tkmru/awesome-edr-bypass</id>
    <link href="https://github.com/tkmru/awesome-edr-bypass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Awesome EDR Bypass Resources For Ethical Hacking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome EDR Bypass„ÄÄ&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;üõ°Ô∏è Awesome EDR Bypass Resources For Ethical Hacking ‚öîÔ∏è&lt;/p&gt; &#xA;&lt;h2&gt;PoC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trickster0/TartarusGate&#34;&gt;trickster0/TartarusGate: TartarusGate, Bypassing EDRs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/am0nsec/HellsGate&#34;&gt;am0nsec/HellsGate: Original C Implementation of the Hell&#39;s Gate VX Technique&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The paper PDF has a nice summary of EDR Bypass techniques.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Maldev-Academy/HellHall&#34;&gt;Maldev-Academy/HellHall: Performing Indirect Clean Syscalls&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A technique called HellsGate, which specifies a system call number through a value in memory, combined with a technique to call a system call by specifying an address in NTDLL where the syscall instruction is implemented, without calling the syscall instruction.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheD1rkMtr/UnhookingPatch&#34;&gt;TheD1rkMtr/UnhookingPatch: Bypass EDR Hooks by patching NT API stub, and resolving SSNs and syscall instructions at runtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RedTeamOperations/Journey-to-McAfee&#34;&gt;RedTeamOperations/Journey-to-McAfee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/op7ic/EDR-Testing-Script&#34;&gt;op7ic/EDR-Testing-Script: Test the accuracy of Endpoint Detection and Response (EDR) software with simple script which executes various ATT&amp;amp;CK/LOLBAS/Invoke-CradleCrafter/Invoke-DOSfuscation payloads&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tool&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tanc7/EXOCET-AV-Evasion&#34;&gt;tanc7/EXOCET-AV-Evasion: EXOCET - AV-evading, undetectable, payload delivery tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/naksyn/Pyramid&#34;&gt;naksyn/Pyramid: a tool to help operate in EDRs&#39; blind spots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Yaxser/Backstab/&#34;&gt;Yaxser/Backstab: A tool to kill antimalware protected processes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klezVirus/inceptor&#34;&gt;klezVirus/inceptor: Template-Driven AV/EDR Evasion Framework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Workshop&lt;/h2&gt; &#xA;&lt;p&gt;More of a malware development workshop for pentesters than a workshop to Bypass EDR.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chvancooten/maldev-for-dummies&#34;&gt;chvancooten/maldev-for-dummies: A workshop about Malware Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BC-SECURITY/Beginners-Guide-to-Obfuscation&#34;&gt;BC-SECURITY/Beginners-Guide-to-Obfuscation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chr0n1k/AH2021Workshop&#34;&gt;chr0n1k/AH2021Workshop: Malware development for red teaming workshop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WesleyWong420/RedTeamOps-Havoc-101&#34;&gt;WesleyWong420/RedTeamOps-Havoc-101: Materials for the workshop &#34;Red Team Ops: Havoc 101&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Presentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.first.org/resources/papers/conf2022/MDEInternals-FIRST.pdf&#34;&gt;Lifting the veil, a look at MDE under the hood - FIRST CONFERENCE 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/eu-22/briefings/schedule/#dirty-vanity-a-new-approach-to-code-injection--edr-bypass-28417&#34;&gt;Dirty Vanity: A New Approach to Code Injection &amp;amp; EDR Bypass - Black Hat Europe 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/naksyn/talks/raw/main/DEFCON30/Diego%20Capriotti%20-%20DEFCON30%20Adversary%20Village%20-%20%20Python%20vs%20Modern%20Defenses.pdf&#34;&gt;talks/Diego Capriotti - DEFCON30 Adversary Village - Python vs Modern Defenses.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1UZmFo_TvSS2TvPJKlDjIW1kTVjYGGaYO86Buh2UgbaI/mobilepresent?slide=id.g11cdb36f978_1_129&#34;&gt;Develop Your Own Rat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.naksyn.com/edr%20evasion/2022/09/01/operating-into-EDRs-blindspot.html&#34;&gt;Living-Off-the-Blindspot - Operating into EDRs‚Äô blindspot | Naksyn‚Äôs blog&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type of person who works hard in Python; uses &lt;a href=&#34;https://peps.python.org/pep-0578/&#34;&gt;PEP 578 ‚Äì Python Runtime Audit Hooks&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@balqurneh/bypass-crowdstrike-falcon-edr-protection-against-process-dump-like-lsass-exe-3c163e1b8a3e&#34;&gt;Bypass CrowdStrike Falcon EDR protection against process dump like lsass.exe | by bilal al-qurneh | Medium&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The story is that a forensic tool can be used to dump memory without detection. This is an example of how a tool for legitimate purposes that is not an attack tool can be used in an attack without being detected.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://therecord.media/state-of-the-art-edrs-are-not-perfect-fail-to-detect-common-attacks/&#34;&gt;State-of-the-art EDRs are not perfect, fail to detect common attacks - The Record from Recorded Future News&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Commentary on &lt;a href=&#34;https://arxiv.org/abs/2108.10422&#34;&gt;An Empirical Assessment of Endpoint Security Systems Against Advanced Persistent Threats Attack Vectors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s3cur3th1ssh1t.github.io/A-tale-of-EDR-bypass-methods/&#34;&gt;A tale of EDR bypass methods | S3cur3Th1sSh1t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rtx.meta.security/post-exploitation/2022/12/19/In-Memory-Execution-in-macOS.html&#34;&gt;In-Memory Execution in macOS: the Old and the New | Meta Red Team X&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS!!!!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other awesome series&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MrEmpy/Awesome-AV-EDR-XDR-Bypass&#34;&gt;MrEmpy/Awesome-AV-EDR-XDR-Bypass: Awesome AV/EDR/XDR Bypass Tips&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zedeus/nitter</title>
    <updated>2023-04-23T01:29:32Z</updated>
    <id>tag:github.com,2023-04-23:/zedeus/nitter</id>
    <link href="https://github.com/zedeus/nitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alternative Twitter front-end&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nitter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zedeus/nitter/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/zedeus/nitter/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zedeus/nitter/actions/workflows/build-docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/zedeus/nitter/workflows/Docker/badge.svg?sanitize=true&#34; alt=&#34;Test Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zedeus/nitter/master/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/zedeus/nitter?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A free and open source alternative Twitter front-end focused on privacy and performance. &lt;br&gt; Inspired by the &lt;a href=&#34;https://github.com/iv-org/invidious&#34;&gt;Invidious&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No JavaScript or ads&lt;/li&gt; &#xA; &lt;li&gt;All requests go through the backend, client never talks to Twitter&lt;/li&gt; &#xA; &lt;li&gt;Prevents Twitter from tracking your IP or JavaScript fingerprint&lt;/li&gt; &#xA; &lt;li&gt;Uses Twitter&#39;s unofficial API (no rate limits or developer account required)&lt;/li&gt; &#xA; &lt;li&gt;Lightweight (for &lt;a href=&#34;https://nitter.net/nim_lang&#34;&gt;@nim_lang&lt;/a&gt;, 60KB vs 784KB from twitter.com)&lt;/li&gt; &#xA; &lt;li&gt;RSS feeds&lt;/li&gt; &#xA; &lt;li&gt;Themes&lt;/li&gt; &#xA; &lt;li&gt;Mobile support (responsive design)&lt;/li&gt; &#xA; &lt;li&gt;AGPLv3 licensed, no proprietary instances permitted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Liberapay: &lt;a href=&#34;https://liberapay.com/zedeus&#34;&gt;https://liberapay.com/zedeus&lt;/a&gt; &lt;br&gt; Patreon: &lt;a href=&#34;https://patreon.com/nitter&#34;&gt;https://patreon.com/nitter&lt;/a&gt; &lt;br&gt; BTC: bc1qp7q4qz0fgfvftm5hwz3vy284nue6jedt44kxya &lt;br&gt; ETH: 0x66d84bc3fd031b62857ad18c62f1ba072b011925 &lt;br&gt; LTC: ltc1qhsz5nxw6jw9rdtw9qssjeq2h8hqk2f85rdgpkr &lt;br&gt; XMR: 42hKayRoEAw4D6G6t8mQHPJHQcXqofjFuVfavqKeNMNUZfeJLJAcNU19i1bGdDvcdN6romiSscWGWJCczFLe9RFhM3d1zpL&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embeds&lt;/li&gt; &#xA; &lt;li&gt;Account system with timeline support&lt;/li&gt; &#xA; &lt;li&gt;Archiving tweets/profiles&lt;/li&gt; &#xA; &lt;li&gt;Developer API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;The wiki contains &lt;a href=&#34;https://github.com/zedeus/nitter/wiki/Instances&#34;&gt;a list of instances&lt;/a&gt; and &lt;a href=&#34;https://github.com/zedeus/nitter/wiki/Extensions&#34;&gt;browser extensions&lt;/a&gt; maintained by the community.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s impossible to use Twitter without JavaScript enabled. For privacy-minded folks, preventing JavaScript analytics and IP-based tracking is important, but apart from using a VPN and uBlock/uMatrix, it&#39;s impossible. Despite being behind a VPN and using heavy-duty adblockers, you can get accurately tracked with your &lt;a href=&#34;https://restoreprivacy.com/browser-fingerprinting/&#34;&gt;browser&#39;s fingerprint&lt;/a&gt;, &lt;a href=&#34;https://noscriptfingerprint.com/&#34;&gt;no JavaScript required&lt;/a&gt;. This all became particularly important after Twitter &lt;a href=&#34;https://www.eff.org/deeplinks/2020/04/twitter-removes-privacy-option-and-shows-why-we-need-strong-privacy-laws&#34;&gt;removed the ability&lt;/a&gt; for users to control whether their data gets sent to advertisers.&lt;/p&gt; &#xA;&lt;p&gt;Using an instance of Nitter (hosted on a VPS for example), you can browse Twitter without JavaScript while retaining your privacy. In addition to respecting your privacy, Nitter is on average around 15 times lighter than Twitter, and in most cases serves pages faster (eg. timelines load 2-4x faster).&lt;/p&gt; &#xA;&lt;p&gt;In the future a simple account system will be added that lets you follow Twitter users, allowing you to have a clean chronological timeline without needing a Twitter account.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zedeus/nitter/master/screenshot.png&#34; alt=&#34;nitter&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libpcre&lt;/li&gt; &#xA; &lt;li&gt;libsass&lt;/li&gt; &#xA; &lt;li&gt;redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To compile Nitter you need a Nim installation, see &lt;a href=&#34;https://nim-lang.org/install.html&#34;&gt;nim-lang.org&lt;/a&gt; for details. It is possible to install it system-wide or in the user directory you create below.&lt;/p&gt; &#xA;&lt;p&gt;To compile the scss files, you need to install &lt;code&gt;libsass&lt;/code&gt;. On Ubuntu and Debian, you can use &lt;code&gt;libsass-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Redis is required for caching and in the future for account info. It should be available on most distros as &lt;code&gt;redis&lt;/code&gt; or &lt;code&gt;redis-server&lt;/code&gt; (Ubuntu/Debian). Running it with the default config is fine, Nitter&#39;s default config is set to use the default Redis port and localhost.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to create a &lt;code&gt;nitter&lt;/code&gt; user, clone the repo, and build the project along with the scss and md files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# useradd -m nitter&#xA;# su nitter&#xA;$ git clone https://github.com/zedeus/nitter&#xA;$ cd nitter&#xA;$ nimble build -d:release&#xA;$ nimble scss&#xA;$ nimble md&#xA;$ cp nitter.example.conf nitter.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set your hostname, port, HMAC key, https (must be correct for cookies), and Redis info in &lt;code&gt;nitter.conf&lt;/code&gt;. To run Redis, either run &lt;code&gt;redis-server --daemonize yes&lt;/code&gt;, or &lt;code&gt;systemctl enable --now redis&lt;/code&gt; (or redis-server depending on the distro). Run Nitter by executing &lt;code&gt;./nitter&lt;/code&gt; or using the systemd service below. You should run Nitter behind a reverse proxy such as &lt;a href=&#34;https://github.com/zedeus/nitter/wiki/Nginx&#34;&gt;Nginx&lt;/a&gt; or &lt;a href=&#34;https://github.com/zedeus/nitter/wiki/Apache&#34;&gt;Apache&lt;/a&gt; for security and performance reasons.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Page for the Docker image: &lt;a href=&#34;https://hub.docker.com/r/zedeus/nitter&#34;&gt;https://hub.docker.com/r/zedeus/nitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;NOTE: For ARM64 support, please use the separate ARM64 docker image: &lt;a href=&#34;https://hub.docker.com/r/zedeus/nitter/tags&#34;&gt;&lt;code&gt;zedeus/nitter:latest-arm64&lt;/code&gt;&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;p&gt;To run Nitter with Docker, you&#39;ll need to install and run Redis separately before you can run the container. See below for how to also run Redis using Docker.&lt;/p&gt; &#xA;&lt;p&gt;To build and run Nitter in Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t nitter:latest .&#xA;docker run -v $(pwd)/nitter.conf:/src/nitter.conf -d --network host nitter:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For ARM64, use this Dockerfile: &lt;a href=&#34;https://github.com/zedeus/nitter/raw/master/Dockerfile.arm64&#34;&gt;&lt;code&gt;Dockerfile.arm64&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A prebuilt Docker image is provided as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v $(pwd)/nitter.conf:/src/nitter.conf -d --network host zedeus/nitter:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using docker-compose to run both Nitter and Redis as different containers: Change &lt;code&gt;redisHost&lt;/code&gt; from &lt;code&gt;localhost&lt;/code&gt; to &lt;code&gt;nitter-redis&lt;/code&gt; in &lt;code&gt;nitter.conf&lt;/code&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the Docker commands expect a &lt;code&gt;nitter.conf&lt;/code&gt; file in the directory you run them.&lt;/p&gt; &#xA;&lt;h3&gt;systemd&lt;/h3&gt; &#xA;&lt;p&gt;To run Nitter via systemd you can use this service file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=Nitter (An alternative Twitter front-end)&#xA;After=syslog.target&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;&#xA;# set user and group&#xA;User=nitter&#xA;Group=nitter&#xA;&#xA;# configure location&#xA;WorkingDirectory=/home/nitter/nitter&#xA;ExecStart=/home/nitter/nitter/nitter&#xA;&#xA;Restart=always&#xA;RestartSec=15&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then enable and run the service: &lt;code&gt;systemctl enable --now nitter.service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;Nitter currently prints some errors to stdout, and there is no real logging implemented. If you&#39;re running Nitter with systemd, you can check stdout like this: &lt;code&gt;journalctl -u nitter.service&lt;/code&gt; (add &lt;code&gt;--follow&lt;/code&gt; to see just the last 15 lines). If you&#39;re running the Docker image, you can do this: &lt;code&gt;docker logs --follow *nitter container id*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to join our &lt;a href=&#34;https://matrix.to/#/#nitter:matrix.org&#34;&gt;Matrix channel&lt;/a&gt;. You can email me at &lt;a href=&#34;mailto:zedeus@pm.me&#34;&gt;zedeus@pm.me&lt;/a&gt; if you wish to contact me personally.&lt;/p&gt;</summary>
  </entry>
</feed>