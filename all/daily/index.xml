<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T01:29:25Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>epfLLM/meditron</title>
    <updated>2023-12-01T01:29:25Z</updated>
    <id>tag:github.com,2023-12-01:/epfLLM/meditron</id>
    <link href="https://github.com/epfLLM/meditron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meditron is a suite of open-source medical Large Language Models (LLMs).&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;40%&#34; src=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/figures/meditron_LOGO.png&#34; alt=&#34;MediTron logo&#34; title=&#34;Meditron-logo&#34;&gt; &#xA;&lt;p&gt;Meditron is a suite of open-source medical Large Language Models (LLMs).&lt;/p&gt; &#xA;&lt;p&gt;We release Meditron-7B and Meditron-70B, which are adapted to the medical domain from Llama-2 through continued pretraining on a comprehensively curated medical corpus, including selected PubMed papers and abstracts, a new dataset of internationally-recognized medical guidelines, and a general domain corpus.&lt;/p&gt; &#xA;&lt;p&gt;Meditron-70B, finetuned on relevant data, outperforms Llama-2-70B, GPT-3.5 and Flan-PaLM on multiple medical reasoning tasks.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Advisory Notice&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;blockquote style=&#34;background-color: #f2f2f2; padding: 10px; margin: 0 0 10px; border-left: 5px solid #ddd;&#34;&gt;&#xA;   While Meditron is designed to encode medical knowledge from sources of high-quality evidence, it is not yet adapted to deliver this knowledge appropriately, safely, or within professional actionable constraints. We recommend against using Meditron in medical applications without extensive use-case alignment, as well as additional testing, specifically including randomized controlled trials in real-world practice settings. &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Model Details&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developed by:&lt;/strong&gt; &lt;a href=&#34;https://huggingface.co/epfl-llm&#34;&gt;EPFL LLM Team&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model type:&lt;/strong&gt; Causal decoder-only transformer language model&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Language(s):&lt;/strong&gt; English (mainly)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model License:&lt;/strong&gt; &lt;a href=&#34;https://ai.meta.com/llama/license/&#34;&gt;LLAMA 2 COMMUNITY LICENSE AGREEMENT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code License:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/LICENSE&#34;&gt;APACHE 2.0 LICENSE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Continue-pretrained from model:&lt;/strong&gt; &lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-70b&#34;&gt;Llama-2-70B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Context length:&lt;/strong&gt; 4k tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; Text only data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; Model generates text only&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Status:&lt;/strong&gt; This is a static model trained on an offline dataset. Future versions of the tuned models will be released as we enhance model&#39;s performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Knowledge Cutoff:&lt;/strong&gt; August 2023&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trainer:&lt;/strong&gt; &lt;a href=&#34;https://github.com/epfLLM/Megatron-LLM&#34;&gt;epflLLM/Megatron-LLM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paper:&lt;/strong&gt; &lt;em&gt;&lt;a href=&#34;https://arxiv.org/abs/2311.16079&#34;&gt;Meditron-70B: Scaling Medical Pretraining for Large Language Models&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You can load the Meditron model directly from the &lt;a href=&#34;https://huggingface.co/epfl-llm/meditron-70B&#34;&gt;HuggingFace model hub&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, AutoModelForCausalLM&#xA;&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;epfl-llm/meditron-70b&#34;)&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;epfl-llm/meditron-70b&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/figures/meditron-pipeline.png&#34; alt=&#34;Pipeline&#34; title=&#34;Pipeline&#34;&gt; &#xA;&lt;h2&gt;Medical Training Data&lt;/h2&gt; &#xA;&lt;p&gt;We release code to download and pre-process the data used to train Meditron.&lt;/p&gt; &#xA;&lt;p&gt;MediTron’s domain-adaptive pre-training corpus &lt;em&gt;GAP-Replay&lt;/em&gt; combines 48.1B tokens from four corpora:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clinical &lt;u&gt;G&lt;/u&gt;uidelines&lt;/strong&gt;: a new corpus of 46K clinical practice guidelines from various healthcare-related sources, including hospitals and international organizations,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paper &lt;u&gt;A&lt;/u&gt;bstracts&lt;/strong&gt;: 16.1M abstracts extracted from closed-access PubMed and PubMed Central papers,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Medical &lt;u&gt;P&lt;/u&gt;apers&lt;/strong&gt;: full-text articles extracted from 5M publicly available PubMed and PubMed Central papers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;u&gt;Replay&lt;/u&gt; dataset&lt;/strong&gt;: 400M tokens of general domain pretraining data sampled from &lt;a href=&#34;https://huggingface.co/datasets/togethercomputer/RedPajama-Data-1T&#34;&gt;RedPajama-v1&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download instructions&lt;/h3&gt; &#xA;&lt;p&gt;You can download and pre-process the entire GAP-Replay corpus by running &lt;code&gt;./download.sh&lt;/code&gt; in the &lt;code&gt;gap-replay&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;You can download 36K open-access articles from our &lt;em&gt;Guidelines&lt;/em&gt; corpus from the &lt;a href=&#34;https://huggingface.co/datasets/epfl-llm/guidelines&#34;&gt;HuggingFace datasets hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datasets import load_dataset&#xA;&#xA;dataset = load_dataset(&#34;epfl-llm/guidelines&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can scrape and clean all 46K guidelines (including closed-access sources) by running &lt;code&gt;./download.sh&lt;/code&gt; in the &lt;code&gt;guidelines&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;More details can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/gap-replay/README.md&#34;&gt;GAP-Replay documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training Procedure&lt;/h2&gt; &#xA;&lt;p&gt;We used the &lt;a href=&#34;https://github.com/epfLLM/Megatron-LLM&#34;&gt;Megatron-LLM&lt;/a&gt; distributed training library, a derivative of Nvidia&#39;s Megatron LM project, to optimize training efficiency. Hardware consists of 16 nodes of 8x NVIDIA A100 (80GB) SXM GPUs connected by NVLink and NVSwitch with a single Nvidia ConnectX-6 DX network card and equipped with 2 x AMD EPYC 7543 32-Core Processors and 512 GB of RAM. The nodes are connected via RDMA over Converged Ethernet.&lt;/p&gt; &#xA;&lt;p&gt;Our three-way parallelism scheme uses the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data Parallelism (DP -- different GPUs process different subsets of the batches) of 2,&lt;/li&gt; &#xA; &lt;li&gt;Pipeline Parallelism (PP -- different GPUs process different layers) of 8,&lt;/li&gt; &#xA; &lt;li&gt;Tensor Parallelism (TP -- different GPUs process different subtensors for matrix multiplication) of 8.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Training Hyperparameters (7B)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bf16&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lr&lt;/td&gt; &#xA;   &lt;td&gt;3e-4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eps&lt;/td&gt; &#xA;   &lt;td&gt;1e-5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;betas&lt;/td&gt; &#xA;   &lt;td&gt;[0.9, 0.95]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clip_grad&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;weight decay&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DP size&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TP size&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PP size&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seq length&lt;/td&gt; &#xA;   &lt;td&gt;2048&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lr scheduler&lt;/td&gt; &#xA;   &lt;td&gt;cosine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min lr&lt;/td&gt; &#xA;   &lt;td&gt;1e-6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;warmup iteration&lt;/td&gt; &#xA;   &lt;td&gt;2000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;micro batch size&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;global batch size&lt;/td&gt; &#xA;   &lt;td&gt;1600&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Training Hyperparameters (70B)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bf16&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lr&lt;/td&gt; &#xA;   &lt;td&gt;1.5e-4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eps&lt;/td&gt; &#xA;   &lt;td&gt;1e-5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;betas&lt;/td&gt; &#xA;   &lt;td&gt;[0.9, 0.95]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clip_grad&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;weight decay&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DP size&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TP size&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PP size&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seq length&lt;/td&gt; &#xA;   &lt;td&gt;4096&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lr scheduler&lt;/td&gt; &#xA;   &lt;td&gt;cosine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min lr&lt;/td&gt; &#xA;   &lt;td&gt;1e-6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;warmup iteration&lt;/td&gt; &#xA;   &lt;td&gt;2000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;micro batch size&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;global batch size&lt;/td&gt; &#xA;   &lt;td&gt;512&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can see the script we used to pretrain our models through Megatron-LLM here: &lt;a href=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/pretrain/finetune.sh&#34;&gt;finetune.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supervised Finetuning&lt;/h2&gt; &#xA;&lt;p&gt;We again used the &lt;a href=&#34;https://github.com/epfLLM/Megatron-LLM&#34;&gt;Megatron-LLM&lt;/a&gt; distributed training library for supervised finetuning (sinlge-node and multi-node). We made a file, &lt;code&gt;sft.py&lt;/code&gt;, that automatically handles the tokenization and finetuning process through Megatron-LLM. To start a multi-node finetuning process, here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd finetuning&#xA;python sft.py \&#xA;    --checkpoint=baseline \&#xA;    --size=70 \&#xA;    --run_name=cotmedqa \&#xA;    --data /pure-mlo-scratch/zechen/meditron/benchmarks/ft_preprocessed/medqa_cot_train.jsonl \&#xA;    --val /pure-mlo-scratch/zechen/meditron/benchmarks/ft_preprocessed/medqa_cot_validation.jsonl \&#xA;    --micro_batch=4&#xA;    --nodes=4 \&#xA;    --addr=&amp;lt;RANK0_HOST_NAME&amp;gt; \&#xA;    --save_interval=200 \&#xA;    --pp=4 \&#xA;    --seq 4096 \&#xA;    --rank=&amp;lt;CURRENT_RANK&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the above line of code at node rank-0, rank-1, rank-2, and rank3 to start a 4-node finetuning process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt;: Make sure to have the proper paths defined in &lt;code&gt;sft.py&lt;/code&gt; and &lt;code&gt;finetune_sft.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Finetuning Hyperparameters&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bf16&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lr&lt;/td&gt; &#xA;   &lt;td&gt;2e-5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eps&lt;/td&gt; &#xA;   &lt;td&gt;1e-5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;betas&lt;/td&gt; &#xA;   &lt;td&gt;[0.9, 0.95]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clip_grad&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;weight decay&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DP size&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TP size&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PP size&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seq length&lt;/td&gt; &#xA;   &lt;td&gt;2048 or 4096&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lr scheduler&lt;/td&gt; &#xA;   &lt;td&gt;cosine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min lr&lt;/td&gt; &#xA;   &lt;td&gt;2e-6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;warmup ratio&lt;/td&gt; &#xA;   &lt;td&gt;0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;added tokens&lt;/td&gt; &#xA;   &lt;td&gt;[&amp;lt;|im_start|&amp;gt;, &amp;lt;|im_end|&amp;gt;]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Uses&lt;/h2&gt; &#xA;&lt;p&gt;Meditron-70B is being made available for further testing and assessment as an AI assistant to enhance clinical decision-making and democratize access to an LLM for healthcare use. Potential use cases may include but are not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Medical exam question answering&lt;/li&gt; &#xA; &lt;li&gt;Supporting differential diagnosis&lt;/li&gt; &#xA; &lt;li&gt;Disease information (symptoms, cause, treatment) query&lt;/li&gt; &#xA; &lt;li&gt;General health information query&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to use this model to generate text, which is useful for experimentation and understanding its capabilities. It should not be used directly for production or work that may impact people.&lt;/p&gt; &#xA;&lt;p&gt;We do not recommend using this model for natural language generation in a production environment, finetuned or otherwise.&lt;/p&gt; &#xA;&lt;h3&gt;Downstream Use&lt;/h3&gt; &#xA;&lt;p&gt;Meditron-70B is a foundation model that can be finetuned, instruction-tuned, or RLHF-tuned for specific downstream tasks and applications. The main way we have used this model is finetuning for downstream question-answering tasks, but we encourage using this model for additional applications.&lt;/p&gt; &#xA;&lt;p&gt;Specific formatting needs to be followed to prompt our finetuned models, including the &lt;code&gt;&amp;lt;|im_start|&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;|im_end|&amp;gt;&lt;/code&gt; tags, and &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;question&lt;/code&gt;, &lt;code&gt;answer&lt;/code&gt; identifiers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;&#34;&#34;&#xA;&amp;lt;|im_start|&amp;gt;system&#xA;{system_message}&amp;lt;|im_end|&amp;gt;&#xA;&amp;lt;|im_start|&amp;gt;question&#xA;{prompt}&amp;lt;|im_end|&amp;gt;&#xA;&amp;lt;|im_start|&amp;gt;answer&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the above formatting is not a requirement if you use your own formatting option for the finetuning of the model.&lt;/p&gt; &#xA;&lt;h2&gt;Medical Benchmark Inference &amp;amp; Evaluation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Before you start, please install the necessary packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vllm &amp;gt;= 0.2.1&#xA;transformers &amp;gt;= 4.34.0&#xA;datasets &amp;gt;= 2.14.6&#xA;torch &amp;gt;= 2.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed instructions to run inference and evaluation with medical benchmarks, please read the documentation here &lt;a href=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/evaluation/README.md&#34;&gt;inference &amp;amp; evaluation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Model Deployment&lt;/h2&gt; &#xA;&lt;p&gt;For detailed instructions to deploy meditron models and have an interactive chat session, please read the documentation here &lt;a href=&#34;https://raw.githubusercontent.com/epfLLM/meditron/main/deployment/README.md&#34;&gt;Model Deployment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this software or our paper, please cite them:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;@misc{chen2023meditron70b,&#xA;      title={MEDITRON-70B: Scaling Medical Pretraining for Large Language Models},&#xA;      author={Zeming Chen and Alejandro Hernández-Cano and Angelika Romanou and Antoine Bonnet and Kyle Matoba and Francesco Salvi and Matteo Pagliardini and Simin Fan and Andreas Köpf and Amirkeivan Mohtashami and Alexandre Sallinen and Alireza Sakhaeirad and Vinitra Swamy and Igor Krawczuk and Deniz Bayazit and Axel Marmet and Syrielle Montariol and Mary-Anne Hartley and Martin Jaggi and Antoine Bosselut},&#xA;      year={2023},&#xA;      eprint={2311.16079},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&#xA;@software{epfmedtrn,&#xA;  author = {Zeming Chen and Alejandro Hernández-Cano and Angelika Romanou and Antoine Bonnet and Kyle Matoba and Francesco Salvi and Matteo Pagliardini and Simin Fan and Andreas Köpf and Amirkeivan Mohtashami and Alexandre Sallinen and Alireza Sakhaeirad and Vinitra Swamy and Igor Krawczuk and Deniz Bayazit and Axel Marmet and Syrielle Montariol and Mary-Anne Hartley and Martin Jaggi and Antoine Bosselut},&#xA;  title = {MediTron-70B: Scaling Medical Pretraining for Large Language Models},&#xA;  month = November,&#xA;  year = 2023,&#xA;  url = {https://github.com/epfLLM/meditron}&#xA;}&#xA;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>federico-busato/Modern-CPP-Programming</title>
    <updated>2023-12-01T01:29:25Z</updated>
    <id>tag:github.com,2023-12-01:/federico-busato/Modern-CPP-Programming</id>
    <link href="https://github.com/federico-busato/Modern-CPP-Programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern C++ Programming Course (C++11/14/17/20)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modern C++ Programming&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/federico-busato/Modern-CPP-Programming/master/other/cpp_logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/releases&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/commits/master&#34; alt=&#34;Commits&#34;&gt; &lt;img src=&#34;https://badgen.net/github/commits/federico-busato/Modern-CPP-Programming?style=for-the-badge&amp;amp;scale=1.2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/network/members&#34; alt=&#34;Forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a alt=&#34;Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;C++11 / C++14 / C++17 / C++20 / (C++23)&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;em&gt;open-access&lt;/em&gt; course is directed at those who are already familiar with C and object-oriented programming towards a proficiency level of C++ programming. The course covers the basics of C++ programming and moves on to advanced C++ semantics and concepts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Free and frequently updated&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Include the &lt;em&gt;last language standard&lt;/em&gt; concepts and features&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Practical teaching&lt;/em&gt;: small structured descriptions associated with code&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Minimal code examples&lt;/em&gt; for showing just a specific feature or issue without digressing&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Complementary language aspects&lt;/em&gt;: tools, coding conventions, project organization, and code optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Experience-based&lt;/em&gt;: many aspects, examples, and problems come from real-world cases faced during my work as software engineer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you enjoy the course or you find it useful, please add a &lt;strong&gt;Star&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/federico-busato/Modern-CPP-Programming?style=social&#34; alt=&#34;stars - Modern-CPP-Programming&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CHAPTERS&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;TITLE&lt;/th&gt; &#xA;   &lt;th&gt;MAIN FOCUS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/01.Introduction.pdf&#34;&gt;Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;History of C/C++, Areas of Applications, Course introduction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/02.Basic_Concepts_I.pdf&#34;&gt;Basic Concepts I - Fundamental Types&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Types overview, operators, and conversion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/03.Basic_Concepts_II.pdf&#34;&gt;Basic Concepts II - Integral and Floating-point Types&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integral and floating-point types and their arithmetic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/04.Basic_Concepts_III.pdf&#34;&gt;Basic Concepts III - Entities and Control Flow&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enumerators, structures, control flow statements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/05.Basic_Concepts_IV.pdf&#34;&gt;Basic Concepts IV - Memory Management&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Heap, Stack, pointers, references, const properties, conversion operators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/06.Basic_Concepts_V.pdf&#34;&gt;Basic Concepts V - Functions and Preprocessing&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functions, lambda expressions, preprocessing directives&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/07.Object_Oriented_I.pdf&#34;&gt;Object Oriented Programming I&amp;nbsp;-&amp;nbsp;Class&amp;nbsp;Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Class hierarchy, constructor, destructor, class keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/08.Object_Oriented_II.pdf&#34;&gt;Object Oriented Programming II&amp;nbsp;-&amp;nbsp;Polymorphism and Operator Overloading&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Polymorphism, operators overloading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/09.Templates_I.pdf&#34;&gt;Templates and Meta-programming I&amp;nbsp;-&amp;nbsp;Function Templates and Compile-Time Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function template, type traits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/10.Templates_II.pdf&#34;&gt;Templates and Meta-programming II&amp;nbsp;-&amp;nbsp;Class Templates and SFINAE&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Class template, SFINAE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/11.Translation_Units_I.pdf&#34;&gt;Translation Units&amp;nbsp;I&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linkage and One Definition Rule&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/12.Translation_Units_II.pdf&#34;&gt;Translation Units&amp;nbsp;II&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dealing with multiple translation units and files,&amp;nbsp;&amp;nbsp;&lt;code&gt;#include&lt;/code&gt;, and modules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;13&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/13.Code_Convention.pdf&#34;&gt;Code Conventions&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Project organization and main code conventions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;14&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/14.Ecosystem_I.pdf&#34;&gt;Ecosystem&amp;nbsp;I&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Debugging, and testing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/15.Ecosystem_II.pdf&#34;&gt;Ecosystem&amp;nbsp;II&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cmake,&amp;nbsp;documenting, and other Tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/16.Utilities.pdf&#34;&gt;Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main &lt;code&gt;std&lt;/code&gt; libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;17&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/17.Iterators_Containers_Alg.pdf&#34;&gt;Containers, Iterators, and Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Containers, iterators, algorithms, ranges&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;18&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/18.Advanced_Topics_I.pdf&#34;&gt;Advanced Topics&amp;nbsp;I&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move semantics, universal reference, type deduction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;19&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/19.Advanced_Topics_II.pdf&#34;&gt;Advanced Topics&amp;nbsp;II&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Error handling, C++ idioms, smart pointers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/20.Optimization_I.pdf&#34;&gt;Optimization I&amp;nbsp;-&amp;nbsp;Basic Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ahmdal Law, performance bounds, architecture concepts (ILP, SIMD, etc.), memory hierarchy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/21.Optimization_II.pdf&#34;&gt;Optimization II - Code Optimization&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arithmetic optimizations, memory optimizations, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/22.Optimization_III.pdf&#34;&gt;Optimization III -&amp;nbsp;Non-Coding Optimizations and Benchmarking&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compiler optimizations, profiling and benchmarking tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TOPICS IN DETAILS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/01.Introduction.pdf&#34;&gt;1. Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Little History of C/C++ Programming Languages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Areas of Application and Popularity&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Philosophy&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Weakness&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Books and References&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Course&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/02.Basic_Concepts_I.pdf&#34;&gt;2. Basic Concepts I - Fundamental Types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preparation&lt;/strong&gt;: What compiler should I use?, What editor/IDE compiler should I use?, How to compile?&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hello World&lt;/strong&gt;: I/O Stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Fundamental Types Overview&lt;/strong&gt;: Arithmetic types, Non-standard arithmetic types, &lt;code&gt;void&lt;/code&gt; type, Pointer type and &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversion Rules&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;auto&lt;/code&gt; declaration&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Operators&lt;/strong&gt;: Operators precedence, Prefix/Postfix increment/decrement, Assignment, Compound , and Comma operators, Spaceship operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; , Safe Comparison Operators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/03.Basic_Concepts_II.pdf&#34;&gt;3. Basic Concepts II - Integral and Floating-point Types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integral Data Types&lt;/strong&gt;: Fixed width integers, &lt;code&gt;size_t&lt;/code&gt; and&lt;code&gt;ptrdiff_t&lt;/code&gt;, When use signed/unsigned integer? Promotion, Truncation, Undefined behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating-point Types and Arithmetic&lt;/strong&gt;: IEEE Floating-point Standard and Other Representations, Normal/Denormal values, Infinity, Not a Number (&lt;code&gt;NaN&lt;/code&gt;), Machine Epsilon, Units at the Last Place (ULP), Cheatsheet, Summary, Arithmetic Properties, Detect Floating-point Errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating-point Issues&lt;/strong&gt;: Catastrophic cancellation, Floating-point comparison&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/04.Basic_Concepts_III.pdf&#34;&gt;4. Basic Concepts III - Entities and Control Flow&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enumerators&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;struct&lt;/code&gt;, Bitfield, &lt;code&gt;union&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: &lt;code&gt;if&lt;/code&gt; Statement, &lt;code&gt;for&lt;/code&gt; Loop, Range-base &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/05.Basic_Concepts_IV.pdf&#34;&gt;5. Basic Concepts IV - Memory Management&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Heap and Stack&lt;/strong&gt;: Stack Memory, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, Non-allocating placement allocation, Non-throwing allocation, Memory leak&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: Variable initialization, Uniform initialization, Fixed-size array initialization, Structure initialization, Dynamic memory initialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pointers and References&lt;/strong&gt;: Pointer Operations, Address-of operator &lt;code&gt;&amp;amp;&lt;/code&gt;, Reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Constant and Literals, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;constexpr&lt;/code&gt;, &lt;code&gt;consteval&lt;/code&gt;, &lt;code&gt;constinit&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;if constexpr&lt;/code&gt;, &lt;code&gt;std::is constant evaluated()&lt;/code&gt;, &lt;code&gt;if consteval&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;volatile&lt;/code&gt; keyword&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explicit Type Conversion&lt;/strong&gt;: &lt;code&gt;static_cast&lt;/code&gt;, &lt;code&gt;const_cast&lt;/code&gt;, &lt;code&gt;reinterpret_cast&lt;/code&gt;, Type punning&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sizeof&lt;/code&gt; Operator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/06.Basic_Concepts_V.pdf&#34;&gt;6. Basic Concepts V - Functions and Preprocessing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declaration and Definition&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Pass by-value, Pass by-pointer, Pass by-reference, Function signature and Overloading, Overloading and &lt;code&gt;=delete&lt;/code&gt;, Default parameters, Attributes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function Pointer and Function Objects&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;: Capture list, Other features, Capture list and classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;: Preprocessors, Common errors, Useful macro, Stringizing operator (&lt;code&gt;#&lt;/code&gt;), &lt;code&gt;#error&lt;/code&gt; and &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;#pragma&lt;/code&gt;, Token-Pasting Operator (&lt;code&gt;##&lt;/code&gt;), Variadic Macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/07.Object_Oriented_I.pdf&#34;&gt;7. Object-Oriented Programming I&amp;nbsp;-&amp;nbsp;Class&amp;nbsp;Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Classes&lt;/strong&gt;: RAII Idiom&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Hierarchy&lt;/strong&gt;: Access specifiers, Inheritance access specifiers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Constructor&lt;/strong&gt;: Default constructor, Class initialization, Uniform initialization, Delegate constructor, &lt;code&gt;explicit&lt;/code&gt; keyword, &lt;code&gt;[[nodiscard]]&lt;/code&gt; and classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Constructor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Destructor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Defaulted Constructors, Destructor, and Operators&lt;/strong&gt; (&lt;code&gt;= default&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Keywords&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;mutable&lt;/code&gt;, &lt;code&gt;using&lt;/code&gt;, &lt;code&gt;friend&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/08.Object_Oriented_II.pdf&#34;&gt;8. Object-Oriented Programming II&amp;nbsp;-&amp;nbsp;Polymorphism and Operator Overloading&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;: &lt;code&gt;virtual&lt;/code&gt; methods, Virtual table, &lt;code&gt;override&lt;/code&gt; keyword, &lt;code&gt;final&lt;/code&gt; keyword, Common errors, Pure virtual method, Abstract class and interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inheritance Casting and Run-time Type Identification&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;: Overview, Comparison operator &lt;code&gt;&amp;lt;&lt;/code&gt;, Spaceship operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, Subscript operator &lt;code&gt;[]&lt;/code&gt;, Multidimensional Subscript operator &lt;code&gt;[]&lt;/code&gt;, Function call operator &lt;code&gt;()&lt;/code&gt;, static operator &lt;code&gt;[]&lt;/code&gt; and operator &lt;code&gt;()&lt;/code&gt;, Conversion operator &lt;code&gt;T()&lt;/code&gt;, Return type overloading resolution, Increment and decrement operators &lt;code&gt;++&lt;/code&gt;/&lt;code&gt;--&lt;/code&gt;, Assignment operator &lt;code&gt;=&lt;/code&gt;, Stream operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, Operator Notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Special Objects&lt;/strong&gt;: Aggregate, Trivial class, Standard-layout class, Plain old data (POD), Hierarchy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/09.Templates_I.pdf&#34;&gt;9. Templates and Meta-programming I -&amp;nbsp;Function Templates and Compile-Time Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function Template&lt;/strong&gt;: Overview, Template parameters, Template parameter - default value, Specialization, Overloading&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Variable&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Parameter Types&lt;/strong&gt;: Generic Type Notes, &lt;code&gt;auto&lt;/code&gt; Placeholder, Class template parameter type, Array and pointer types, Function type&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile-Time Utilities&lt;/strong&gt;: &lt;code&gt;static_assert&lt;/code&gt;, &lt;code&gt;decltype&lt;/code&gt; Keyword, &lt;code&gt;using&lt;/code&gt; Keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Traits&lt;/strong&gt;: Overview, Type traits library, Type manipulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/10.Templates_II.pdf&#34;&gt;10. Templates and Meta-programming II - &amp;nbsp;-&amp;nbsp;Class Templates and SFINAE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Template&lt;/strong&gt;: Class specialization, Template class constructor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Template - Advanced Concepts&lt;/strong&gt;: Class + Function - Specialization, Dependent Names - &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; Keywords, Class template hierarchy and &lt;code&gt;using&lt;/code&gt;, &lt;code&gt;friend&lt;/code&gt; Keyword, Template Template Arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Meta-Programming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SFINAE: Substitution Failure Is Not An Error&lt;/strong&gt;: Function SFINAE, Class SFINAE, Class + Function SFINAE&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variadic Template&lt;/strong&gt;: Folding Expression, Variadic class template&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Concepts&lt;/strong&gt;: Overview, &lt;code&gt;concept&lt;/code&gt; Keyword, &lt;code&gt;requires&lt;/code&gt; Clause, &lt;code&gt;requires&lt;/code&gt; Expression, &lt;code&gt;requires&lt;/code&gt; Expression + Clause, &lt;code&gt;requires&lt;/code&gt; Clause + Expression, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;, Nested &lt;code&gt;requires&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/11.Translation_Units_I.pdf&#34;&gt;11. Translation Units I&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Concepts&lt;/strong&gt;: Translation unit, Local and global scope, Linkage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Storage Class and Duration&lt;/strong&gt;: Storage duration, Storage class, &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;extern&lt;/code&gt; keywords, Internal/External linkage examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkage of &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;&lt;/strong&gt;: Static Initialization Order Fiasco&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkage Summary&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dealing with Multiple Translation Units&lt;/strong&gt;: Class in multiple translation units&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One Definition Rule (ODR)&lt;/strong&gt;: Global variable issues, ODR - Point 3, &lt;code&gt;inline&lt;/code&gt; functions/variables, &lt;code&gt;constexpr&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR - Function Template&lt;/strong&gt;: Cases, &lt;code&gt;extern&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR - Class Template&lt;/strong&gt;: Cases, &lt;code&gt;extern&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR Undefined Behavior and Summary&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/12.Translation_Units_II.pdf&#34;&gt;12. Translation Units II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;#include&lt;/code&gt; Issues&lt;/strong&gt;: Forward declaration, Include guard, Circular dependencies, Common linking errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Modules&lt;/strong&gt;: Overview, Terminology, Visibility and Reachability, Module unit types, Keywords, Global module fragment, Private module fragment, Header module unit, Module partitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;: Namespace functions vs. &lt;code&gt;static&lt;/code&gt; methods, Namespace alias, Anonymous namespace, &lt;code&gt;inline&lt;/code&gt; namespace, Attributes and namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiling Multiple Translation Units&lt;/strong&gt;: Fundamental compiler flags, Compile Methods, Deal with libraries, Build static/dynamic libraries, Find dynamic library dependencies, Analyze object/executable symbols&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/13.Code_Convention.pdf&#34;&gt;13. Code Conventions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Project Organization&lt;/strong&gt;: Project directories, Project files, “Common” Project Organization Notes, Alternative - “Canonical” project organization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coding Styles and Conventions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Macro and Preprocessing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structs and Classes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern C++ Features&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Readability and Formatting&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Documentation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/14.Ecosystem_I.pdf&#34;&gt;14. Ecosystem I&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Assertion&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution debugging&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Debugging&lt;/strong&gt;: &lt;code&gt;valgrind&lt;/code&gt;, Stack protection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sanitizers&lt;/strong&gt;: Address sanitizer, Leak sanitizer, Memory sanitizers, Undefined behavior sanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging Summary&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Warnings&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Testing&lt;/strong&gt;: Unit test, Code coverage, Fuzz testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Quality&lt;/strong&gt;: &lt;code&gt;clang-tidy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/15.Ecosystem_II.pdf&#34;&gt;15. Ecosystem II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;: &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;ctest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Documentation&lt;/strong&gt;: &lt;code&gt;doxygen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Statistics&lt;/strong&gt;: Count lines of code, Cyclomatic complexity analyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other Tools&lt;/strong&gt;: Code formatting - &lt;code&gt;clang-format&lt;/code&gt;, &lt;code&gt;Compiler Explorer&lt;/code&gt;, Code transformation - &lt;code&gt;CppInsights&lt;/code&gt;, Code autocompletion - &lt;code&gt;GitHub Co-Pilot/TabNine/Kite&lt;/code&gt;, Local code search - &lt;code&gt;ripgrep&lt;/code&gt;, Code search engine - &lt;code&gt;searchcode/grep.app&lt;/code&gt;, Code benchmarking - &lt;code&gt;Quick-Bench&lt;/code&gt;, Font for Coding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/16.Utilities.pdf&#34;&gt;16. Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I/O Stream&lt;/strong&gt;: Manipulator, &lt;code&gt;ofstream/ifstream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math Libraries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt;: &lt;code&gt;std::string&lt;/code&gt;, Conversion from/to numeric values, &lt;code&gt;std::string_view&lt;/code&gt;, &lt;code&gt;std::format&lt;/code&gt;, &lt;code&gt;std::print&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Random Number&lt;/strong&gt;: Basic Concepts, C++ &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;, Seed, PRNG period and quality, Distribution, Quasi-random&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time Measuring&lt;/strong&gt;: Wall-Clock time, User time, System time&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Std Template Classes&lt;/strong&gt;: &lt;code&gt;std::byte&lt;/code&gt; &lt;code&gt;std::pair&lt;/code&gt;, &lt;code&gt;std::tuple&lt;/code&gt;, &lt;code&gt;std::variant&lt;/code&gt;, &lt;code&gt;std::optional&lt;/code&gt;, &lt;code&gt;std::any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filesystem Library&lt;/strong&gt;: Query methods, Modify methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/17.Iterators_Containers_Alg.pdf&#34;&gt;17. Containers, Iterators, and Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Containers and Iterators&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sequence Containers&lt;/strong&gt;: &lt;code&gt;std::array&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, &lt;code&gt;std::list&lt;/code&gt;, &lt;code&gt;std::deque&lt;/code&gt;, &lt;code&gt;std::forward_list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Associative Containers&lt;/strong&gt;: &lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;, &lt;code&gt;std::multiset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Adaptors&lt;/strong&gt;: &lt;code&gt;std::stack&lt;/code&gt;, &lt;code&gt;std::queue&lt;/code&gt;, &lt;code&gt;std::priority_queue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: &lt;code&gt;std::span&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implement a Custom Iterator&lt;/strong&gt;: Semantic, Implement a simple Iterator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iterator Utility Methods&lt;/strong&gt;: &lt;code&gt;std::advance&lt;/code&gt;, &lt;code&gt;std::next&lt;/code&gt;, &lt;code&gt;std::prev&lt;/code&gt;, &lt;code&gt;std::distance&lt;/code&gt;, Container access methods, Iterator traits&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Algorithms Library&lt;/strong&gt;: &lt;code&gt;std::find_if&lt;/code&gt;, &lt;code&gt;std::sort&lt;/code&gt;, &lt;code&gt;std::accumulate&lt;/code&gt;, &lt;code&gt;std::generate&lt;/code&gt;, &lt;code&gt;std::remove_if&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Ranges&lt;/strong&gt;: Key concepts, Range view, Range adaptor, Range factory, Range algorithms, Range actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/18.Advanced_Topics_I.pdf&#34;&gt;18. Advanced Topics I&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Move Semantic&lt;/strong&gt;: &lt;code&gt;lvalues&lt;/code&gt; and &lt;code&gt;rvalues&lt;/code&gt; references, Move semantic, Compiler implicitly declared, &lt;code&gt;std::move&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Universal Reference and Perfect Forwarding&lt;/strong&gt;: Universal reference, Reference collapsing rules, Perfect forwarding&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Value Categories&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; Ref-qualifiers and &lt;code&gt;volatile&lt;/code&gt; Overloading&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Elision and RVO&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Deduction&lt;/strong&gt;: Pass by-reference, Pass by-pointer, Pass by-value, &lt;code&gt;auto&lt;/code&gt; deduction&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt; Correctness&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/19.Advanced_Topics_II.pdf&#34;&gt;19. Advanced Topics II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Undefined Behavior&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: C++ Exceptions, Defining custom exceptions, &lt;code&gt;noexcept&lt;/code&gt; keyword, Memory allocation issues, Alternative error handling approaches&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Idioms&lt;/strong&gt;: Rule of zero/three/five, Singleton, PIMPL, CRTP, Template Virtual Functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart pointers&lt;/strong&gt;: &lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, &lt;code&gt;std::weak_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;: Thread Methods, Mutex, Atomic, Task-based parallelism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/20.Optimization_I.pdf&#34;&gt;20. Optimization I&amp;nbsp;-&amp;nbsp;Basic Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Introduction&lt;/strong&gt;: Moore’s Law, Moore’s Law limitations, Reasons for Optimizing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Concepts&lt;/strong&gt;: Asymptotic complexity, Time-Memory Trade-off, Developing Cycle, Ahmdal&#39;s law, Throughput, Bandwidth, Latency, Performance bounds, Arithmetic intensity&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Architecture Concepts&lt;/strong&gt;: Instruction-level parallelism (ILP), Little’s law, Data-level parallelism (SIMD), Thread-level parallelism (TLP), Single Instruction Multiple Threads (SIMT), RISC, CISC Instruction sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Hierarchy&lt;/strong&gt;: Memory hierarchy concepts, Memory locality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/21.Optimization_II.pdf&#34;&gt;21. Optimization II&amp;nbsp;-&amp;nbsp;Code Optimization&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I/O Operations&lt;/strong&gt;: &lt;code&gt;printf&lt;/code&gt;, Memory mapped I/O, Speed up raw data loading&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Optimizations&lt;/strong&gt;: Heap memory, Stack memory, Cache utilization, data alignment, Memory Prefetch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arithmetic&lt;/strong&gt;: Data types, Operations, Conversion, Floating-point, Compiler intrinsic functions, Value in a range, Lookup table&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: Loop hoisting, Loop unrolling, Branch hints, Compiler hints, Recursion&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Function call cost, Argument passing, Function optimizations, Function inlining, Pointers aliasing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Objects&lt;/strong&gt;: Object RAII optimizations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Std Library and Other Language Aspects&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/22.Optimization_III.pdf&#34;&gt;22. Optimization III -&amp;nbsp;Non-Coding Optimizations and Benchmarking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Optimizations&lt;/strong&gt;: About the compiler, Compiler optimization flags, Linker optimization flags, Architecture flags, Help the Compiler to produce better code, Profile guided optimization (PGO), Post-Processing Binary Optimizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Transformation Techniques&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Libraries and Data Structures&lt;/strong&gt;: External libraries, Std library&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Benchmarking&lt;/strong&gt;: What to test?, Workload/Dataset quality, Cache behavior, Stable CPU performance, Program, Multi-threads considerations, Program memory layout, Measurement overhead, Compiler optimizations, Metric evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Profiling&lt;/strong&gt;: &lt;code&gt;gprof&lt;/code&gt;, &lt;code&gt;uftrace&lt;/code&gt;, &lt;code&gt;callgrind&lt;/code&gt;, &lt;code&gt;cachegrind&lt;/code&gt;, &lt;code&gt;perf&lt;/code&gt; Linux profiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Computing&lt;/strong&gt;: Concurrency vs. Parallelism, Performance scaling, Gustafson’s Law, Parallel programming languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Software Design Chapter&lt;/li&gt; &#xA; &lt;li&gt;Build Aspects Chapter (e.g. reducing build time)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Essential Tool&lt;/h3&gt; &#xA;&lt;p&gt;Online compiler and execution: &lt;a href=&#34;https://godbolt.org/&#34;&gt;CompilerExplorer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for code execution: [Add new..] -&amp;gt; [execution only]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting bugs and contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you find any typo, conceptual error, or section to improve, please report them by writing directly to me or by using the &lt;code&gt;issue&lt;/code&gt; panel&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming-Material/issues&#34; alt=&#34;Issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Federico Busato&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/fedebusato&#34;&gt;twitter.com/fedebusato&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/federico-busato/&#34;&gt;www.linkedin.com/in/federico-busato/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Vaibhavs10/insanely-fast-whisper</title>
    <updated>2023-12-01T01:29:25Z</updated>
    <id>tag:github.com,2023-12-01:/Vaibhavs10/insanely-fast-whisper</id>
    <link href="https://github.com/Vaibhavs10/insanely-fast-whisper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Insanely Fast Whisper&lt;/h1&gt; &#xA;&lt;p&gt;An opinionated CLI to transcribe Audio files w/ Whisper on-device! Powered by 🤗 &lt;em&gt;Transformers&lt;/em&gt;, &lt;em&gt;Optimum&lt;/em&gt; &amp;amp; &lt;em&gt;flash-attn&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; - Transcribe &lt;strong&gt;150&lt;/strong&gt; minutes (2.5 hours) of audio in less than &lt;strong&gt;98&lt;/strong&gt; seconds - with &lt;a href=&#34;https://huggingface.co/openai/whisper-large-v3&#34;&gt;OpenAI&#39;s Whisper Large v3&lt;/a&gt;. Blazingly fast transcription is now a reality!⚡️&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://huggingface.co/datasets/reach-vb/random-images/resolve/main/insanely-fast-whisper-img.png&#34; width=&#34;615&#34; height=&#34;308&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Not convinced? Here are some benchmarks we ran on a Nvidia A100 - 80GB 👇&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Optimisation type&lt;/th&gt; &#xA;   &lt;th&gt;Time to Transcribe (150 mins of Audio)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;large-v3 (Transformers) (&lt;code&gt;fp32&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;~31 (&lt;em&gt;31 min 1 sec&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;large-v3 (Transformers) (&lt;code&gt;fp16&lt;/code&gt; + &lt;code&gt;batching [24]&lt;/code&gt; + &lt;code&gt;bettertransformer&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;~5 (&lt;em&gt;5 min 2 sec&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;large-v3 (Transformers) (&lt;code&gt;fp16&lt;/code&gt; + &lt;code&gt;batching [24]&lt;/code&gt; + &lt;code&gt;Flash Attention 2&lt;/code&gt;)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;~2 (&lt;em&gt;1 min 38 sec&lt;/em&gt;)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;distil-large-v2 (Transformers) (&lt;code&gt;fp16&lt;/code&gt; + &lt;code&gt;batching [24]&lt;/code&gt; + &lt;code&gt;bettertransformer&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;~3 (&lt;em&gt;3 min 16 sec&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;distil-large-v2 (Transformers) (&lt;code&gt;fp16&lt;/code&gt; + &lt;code&gt;batching [24]&lt;/code&gt; + &lt;code&gt;Flash Attention 2&lt;/code&gt;)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;~1 (&lt;em&gt;1 min 18 sec&lt;/em&gt;)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;large-v2 (Faster Whisper) (&lt;code&gt;fp16&lt;/code&gt; + &lt;code&gt;beam_size [1]&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;~9.23 (&lt;em&gt;9 min 23 sec&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;large-v2 (Faster Whisper) (&lt;code&gt;8-bit&lt;/code&gt; + &lt;code&gt;beam_size [1]&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;~8 (&lt;em&gt;8 min 15 sec&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;P.S. We also ran the benchmarks on a &lt;a href=&#34;https://raw.githubusercontent.com/Vaibhavs10/insanely-fast-whisper/main/notebooks/&#34;&gt;Google Colab T4 GPU&lt;/a&gt; instance too!&lt;/p&gt; &#xA;&lt;p&gt;P.P.S. This project originally started as a way to showcase benchmarks for Transformers, but has since evolved into a lightweight CLI for people to use. This is purely community driven. We add whatever community seems to have a strong demand for!&lt;/p&gt; &#xA;&lt;h2&gt;🆕 Blazingly fast transcriptions via your terminal! ⚡️&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve added a CLI to enable fast transcriptions. Here&#39;s how you can use it:&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;code&gt;insanely-fast-whisper&lt;/code&gt; with &lt;code&gt;pipx&lt;/code&gt; (&lt;code&gt;pip install pipx&lt;/code&gt; or &lt;code&gt;brew install pipx&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipx install insanely-fast-whisper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run inference from any path on your computer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;insanely-fast-whisper --file-name &amp;lt;filename or URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔥 You can run &lt;a href=&#34;https://huggingface.co/openai/whisper-large-v3&#34;&gt;Whisper-large-v3&lt;/a&gt; w/ &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;Flash Attention 2&lt;/a&gt; from this CLI too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;insanely-fast-whisper --file-name &amp;lt;filename or URL&amp;gt; --flash True &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🌟 You can run &lt;a href=&#34;https://huggingface.co/distil-whisper&#34;&gt;distil-whisper&lt;/a&gt; directly from this CLI too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;insanely-fast-whisper --model-name distil-whisper/large-v2 --file-name &amp;lt;filename or URL&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t want to install &lt;code&gt;insanely-fast-whisper&lt;/code&gt;? Just use &lt;code&gt;pipx run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipx run insanely-fast-whisper --file-name &amp;lt;filename or URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The CLI is highly opinionate and only works on NVIDIA GPUs &amp;amp; Mac. Make sure to check out the defaults and the list of options you can play around with to maximise your transcription throughput. Run &lt;code&gt;insanely-fast-whisper --help&lt;/code&gt; or &lt;code&gt;pipx run insanely-fast-whisper --help&lt;/code&gt; to get all the CLI arguments along with their defaults.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;CLI Options&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;insanely-fast-whisper&lt;/code&gt; repo provides an all round support for running Whisper in various settings. Note that as of today 26th Nov, &lt;code&gt;insanely-fast-whisper&lt;/code&gt; works on both CUDA and mps (mac) enabled devices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  -h, --help            show this help message and exit&#xA;  --file-name FILE_NAME&#xA;                        Path or URL to the audio file to be transcribed.&#xA;  --device-id DEVICE_ID&#xA;                        Device ID for your GPU. Just pass the device number when using CUDA, or &#34;mps&#34; for Macs with Apple Silicon. (default: &#34;0&#34;)&#xA;  --transcript-path TRANSCRIPT_PATH&#xA;                        Path to save the transcription output. (default: output.json)&#xA;  --model-name MODEL_NAME&#xA;                        Name of the pretrained model/ checkpoint to perform ASR. (default: openai/whisper-large-v3)&#xA;  --task {transcribe,translate}&#xA;                        Task to perform: transcribe or translate to another language. (default: transcribe)&#xA;  --language LANGUAGE   &#xA;                        Language of the input audio. (default: &#34;None&#34; (Whisper auto-detects the language))&#xA;  --batch-size BATCH_SIZE&#xA;                        Number of parallel batches you want to compute. Reduce if you face OOMs. (default: 24)&#xA;  --flash FLASH         &#xA;                        Use Flash Attention 2. Read the FAQs to see how to install FA2 correctly. (default: False)&#xA;  --timestamp {chunk,word}&#xA;                        Whisper supports both chunked as well as word level timestamps. (default: chunk)&#xA;  --hf_token&#xA;                        Provide a hf.co/settings/token for Pyannote.audio to diarise the audio clips&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to correctly install flash-attn to make it work with &lt;code&gt;insanely-fast-whisper&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure to install it via &lt;code&gt;pipx runpip insanely-fast-whisper install flash-attn --no-build-isolation&lt;/code&gt;. Massive kudos to @li-yifei for helping with this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to solve an &lt;code&gt;AssertionError: Torch not compiled with CUDA enabled&lt;/code&gt; error on Windows?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The root cause of this problem is still unkown, however, you can resolve this by manually installing torch in the virtualenv like &lt;code&gt;python -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121&lt;/code&gt;. Thanks to @pto2k for all tdebugging this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to avoid Out-Of-Memory (OOM) exceptions on Mac?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;mps&lt;/em&gt; backend isn&#39;t as optimised as CUDA, hence is way more memory hungry. Typically you can run with &lt;code&gt;--batch-size 4&lt;/code&gt; without any issues (should use roughly 12GB GPU VRAM). Don&#39;t forget to set &lt;code&gt;--device mps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use Whisper without a CLI?&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All you need to run is the below snippet:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;pip install transformers optimum accelerate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from transformers import pipeline&#xA;&#xA;pipe = pipeline(&#xA;    &#34;automatic-speech-recognition&#34;,&#xA;    model=args.model_name,&#xA;    torch_dtype=torch.float16,&#xA;    device=&#34;cuda&#34;, # or mps for Mac devices&#xA;    model_kwargs={&#34;use_flash_attention_2&#34;: True}, # set to False for old GPUs&#xA;)&#xA;&#xA;pipe.model = pipe.model.to_bettertransformer() # only if `use_flash_attention_2` is set to False&#xA;&#xA;outputs = pipe(&#34;&amp;lt;FILE_NAME&amp;gt;&#34;,&#xA;               chunk_length_s=30,&#xA;               batch_size=24,&#xA;               return_timestamps=True)&#xA;&#xA;outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;OpenAI Whisper&lt;/a&gt; team for open sourcing such a brilliant check point.&lt;/li&gt; &#xA; &lt;li&gt;Hugging Face Transformers team, specifically &lt;a href=&#34;https://github.com/ArthurZucker&#34;&gt;Arthur&lt;/a&gt;, &lt;a href=&#34;https://github.com/patrickvonplaten&#34;&gt;Patrick&lt;/a&gt;, &lt;a href=&#34;https://github.com/sanchit-gandhi&#34;&gt;Sanchit&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/ylacombe&#34;&gt;Yoach&lt;/a&gt; (alphabetical order) for continuing to maintain Whisper in Transformers.&lt;/li&gt; &#xA; &lt;li&gt;Hugging Face &lt;a href=&#34;https://github.com/huggingface/optimum&#34;&gt;Optimum&lt;/a&gt; team for making the BetterTransformer API so easily accessible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patrick91&#34;&gt;Patrick Arminio&lt;/a&gt; for helping me tremendously to put together this CLI.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Community showcase&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;@ochen1 created a brilliant MVP for a CLI here: &lt;a href=&#34;https://github.com/ochen1/insanely-fast-whisper-cli&#34;&gt;https://github.com/ochen1/insanely-fast-whisper-cli&lt;/a&gt; (Try it out now!)&lt;/li&gt; &#xA; &lt;li&gt;@arihanv created a an app (Shush) using NextJS (Frontend) &amp;amp; Modal (Backend): &lt;a href=&#34;https://github.com/arihanv/Shush&#34;&gt;https://github.com/arihanv/Shush&lt;/a&gt; (Check it outtt!)&lt;/li&gt; &#xA; &lt;li&gt;@kadirnar created a python package on top of the transformers with optimisations: &lt;a href=&#34;https://github.com/kadirnar/whisper-plus&#34;&gt;https://github.com/kadirnar/whisper-plus&lt;/a&gt; (Go go go!!!)&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>