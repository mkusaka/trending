<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:29:00Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenBMB/ToolBench</title>
    <updated>2023-08-04T01:29:00Z</updated>
    <id>tag:github.com,2023-08-04:/OpenBMB/ToolBench</id>
    <link href="https://github.com/OpenBMB/ToolBench" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open platform for training, serving, and evaluating large language model for tool learning.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; üõ†Ô∏èToolBenchü§ñ&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Tool_Num-3451-red?style=flat-square&#34; alt=&#34;Dialogues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/API_Num-16464-red?style=flat-square&#34; alt=&#34;Dialogues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Current_Dataset_Size-12K-red?style=flat-square&#34; alt=&#34;Dialogues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Total_API_Call-37K-red?style=flat-square&#34; alt=&#34;Dialogues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Average_Reasoning_Traces-4.1-red?style=flat-square&#34; alt=&#34;Dialogues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Tool_LLaMA-Released-green?style=flat-square&#34; alt=&#34;Dialogues&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/#model&#34;&gt;Model&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/#data&#34;&gt;Data Release&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/#web-ui&#34;&gt;Web Demo&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/#tool-eval&#34;&gt;Tool Eval&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/paper.pdf&#34;&gt;Paper&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/#citation&#34;&gt;Citation&lt;/a&gt; &lt;/p&gt;  &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.discordapp.com/attachments/941582479117127680/1111543600879259749/20230526075532.png&#34; width=&#34;350px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;üî®This project (ToolLLM) aims to construct &lt;strong&gt;open-source, large-scale, high-quality&lt;/strong&gt; instruction tuning SFT data to facilitate the construction of powerful LLMs with general &lt;strong&gt;tool-use&lt;/strong&gt; capability. We aim to empower open-source LLMs to master thousands of diverse real-world APIs. We achieve this by collecting a high-quality instruction-tuning dataset. It is constructed automatically using the latest ChatGPT (gpt-3.5-turbo-16k), which is upgraded with enhanced &lt;a href=&#34;https://openai.com/blog/function-calling-and-other-api-updates&#34;&gt;function call&lt;/a&gt; capabilities. We provide the dataset, the corresponding training and evaluation scripts, and a capable model ToolLLaMA fine-tuned on ToolBench.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üíÅ‚Äç‚ôÇÔ∏èüíÅüíÅ‚Äç‚ôÄÔ∏èJoint Us on &lt;a href=&#34;https://discord.gg/QSC6yTtu&#34;&gt;Discord&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ú®Here is an overview of the dataset construction, training, and evaluation.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/overview.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;‚ú®‚ú®Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Collection&lt;/strong&gt;: we gather &lt;strong&gt;16464&lt;/strong&gt; representational state transfer (REST) APIs from &lt;a href=&#34;https://rapidapi.com/hub&#34;&gt;RapidAPI&lt;/a&gt;, a platform that hosts massive real-world APIs provided by developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instruction Generation&lt;/strong&gt;: we curate instructions that involve both &lt;strong&gt;single-tool&lt;/strong&gt; and &lt;strong&gt;multi-tool&lt;/strong&gt; scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Answer Annotation&lt;/strong&gt;: we develop a novel &lt;strong&gt;depth-first search based decision tree&lt;/strong&gt; (DFSDT) to bolster the planning and reasoning ability of LLMs, which significantly improves the annotation efficiency and successfully annotates those complex instructions that cannot be answered with CoT or ReACT. We provide responses that not only include the final answer but also incorporate the model&#39;s &lt;strong&gt;reasoning process, tool execution, and tool execution results&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Retriver&lt;/strong&gt;: we incorporate API retrieval to equip ToolLLaMA with open-domain tool-using abilities.&lt;/li&gt; &#xA; &lt;li&gt;All the data is automatically generated by OpenAI API and filtered by us, the whole data creation process is easy to scale up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/comparison.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;We also provide &lt;strong&gt;A demo of using ToolLLaMA&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/OpenBMB/ToolBench/assets/25274507/f1151d85-747b-4fac-92ff-6c790d8d9a31&#34;&gt;https://github.com/OpenBMB/ToolBench/assets/25274507/f1151d85-747b-4fac-92ff-6c790d8d9a31&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Currently, our ToolLLaMA has reached the performance of ChatGPT (turbo-16k) in tool use, in the future, &lt;em&gt;we will continually improve the data quality and increase the coverage of real-world tools.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/performance.png&#34; width=&#34;300px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Here is the &lt;em&gt;&lt;a href=&#34;https://github.com/OpenBMB/ToolBench/tree/legacy&#34;&gt;Old version&lt;/a&gt;&lt;/em&gt; of ToolBench.&lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;üëêToolBench is intended solely for research and educational purposes and should not be construed as reflecting the opinions or views of the creators, owners, or contributors of this dataset. It is distributed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;CC BY NC 4.0 License&lt;/a&gt;. Below is the statistics of the data :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool Nums&lt;/th&gt; &#xA;   &lt;th&gt;API Nums&lt;/th&gt; &#xA;   &lt;th&gt;Instance Nums&lt;/th&gt; &#xA;   &lt;th&gt;Real API Call&lt;/th&gt; &#xA;   &lt;th&gt;Reasoning Traces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3451&lt;/td&gt; &#xA;   &lt;td&gt;16464&lt;/td&gt; &#xA;   &lt;td&gt;12657&lt;/td&gt; &#xA;   &lt;td&gt;37204&lt;/td&gt; &#xA;   &lt;td&gt;4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We crawl 16000+ real-world APIs from &lt;a href=&#34;https://rapidapi.com/hub&#34;&gt;RapidAPI&lt;/a&gt;, and curate realistic human instructions that involve them. Below we present a hierarchy of RapidAPI and our instruction generation process.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/instructiongeneration.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;ToolBench contains both single-tool and multi-tool scenarios. The multi-tool scenarios can be further categorized into intra-category multi-tool and intra-collection multi-tool. We utilize DFSDT method for all scenarios to our data creation. Here is an illustration for the data creation process using DFSDT method:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/answer_anno.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Data Release&lt;/h3&gt; &#xA;&lt;p&gt;Please download our dataset using the following link: &lt;a href=&#34;https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J&#34;&gt;Google Drive&lt;/a&gt; or &lt;a href=&#34;https://cloud.tsinghua.edu.cn/f/c9e50625743b40bfbe10/&#34;&gt;Tsinghua Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;G1&lt;/code&gt;,&lt;code&gt;G2&lt;/code&gt;, &lt;code&gt;G3&lt;/code&gt;data refers to single-tool, intra-category multi-tool and intra-collection multi-tool data respectively. We also have an &lt;a href=&#34;https://atlas.nomic.ai/map/58aca169-c29a-447a-8f01-0d418fc4d341/030ddad7-5305-461c-ba86-27e1ca79d899&#34;&gt;Atlas Explorer&lt;/a&gt; for visualization.&lt;/li&gt; &#xA; &lt;li&gt;We split the G1, G2 and G3 data into train, eval and test parts respectively and combine the train data for training in our main experiments. &lt;code&gt;toolllama_G123_dfs_train.json&lt;/code&gt; refers to the combined train data.&lt;/li&gt; &#xA; &lt;li&gt;The tool environment related data is in &lt;code&gt;toolenv&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;We sample 100 instances from every test set. The &lt;code&gt;test_query_ids&lt;/code&gt; directory contains query ids of the test instances in each test set.&lt;/li&gt; &#xA; &lt;li&gt;The data used for tool retrieval is included in the &lt;code&gt;retrieval&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ñModel&lt;/h2&gt; &#xA;&lt;p&gt;We release the &lt;a href=&#34;https://huggingface.co/ToolBench/ToolLLaMA-7b&#34;&gt;ToolLLaMA-7b&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/ToolBench/ToolLLaMA-7b-LoRA&#34;&gt;ToolLLaMA-7b-LoRA&lt;/a&gt; models, which are both trained on the released dataset in a multi-task fashion. We also release the &lt;a href=&#34;https://huggingface.co/ToolBench/ToolBench_IR_bert_based_uncased&#34;&gt;tool retriever&lt;/a&gt; trained under our experimental setting.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄFine-tuning&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository and navigate to the ToolBench folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:OpenBMB/ToolBench.git&#xA;cd ToolBench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Package (python&amp;gt;=3.9)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prepare the data and tool environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --no-check-certificate &#39;https://docs.google.com/uc?export=download&amp;amp;id=1Vis-RxBstXLKC1W1agIQUJNuumPJrrw0&amp;amp;confirm=yes&#39; -O data.zip&#xA;unzip data.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training Retriever&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data preprocessing:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python data/preprocess_retriever_data.py \&#xA;    --query_file data/instruction/G1_query.json \&#xA;    --index_file data/test_query_ids/G1_instruction_test_query_ids.json \&#xA;    --dataset_name G1 \&#xA;    --output_dir data/retrieval/G1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then run the following command to train the tool retriever:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python toolbench/retrieval/train.py \&#xA;    --data_path data/retrieval/G1/ \&#xA;    --model_name bert-base-uncased \&#xA;    --output_path retrieval_model \&#xA;    --num_epochs 5 \&#xA;    --train_batch_size 32 \&#xA;    --learning_rate 2e-5 \&#xA;    --warmup_steps 500 \&#xA;    --max_seq_length 256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training ToolLLaMA&lt;/h3&gt; &#xA;&lt;p&gt;Our training code is based on &lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;FastChat&lt;/a&gt;. You can use the following command to train ToolLLaMA-7b with 2 x A100 (80GB), with the preprocessed data in our &lt;a href=&#34;https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J&#34;&gt;data link&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;torchrun --nproc_per_node=2 --master_port=20001 toolbench/train/train_long_seq.py \&#xA;    --model_name_or_path huggyllama/llama-7b  \&#xA;    --data_path  data/toolllama_G123_dfs_train.json \&#xA;    --eval_data_path  data/toolllama_G123_dfs_eval.json \&#xA;    --conv_template tool-llama-single-round \&#xA;    --bf16 True \&#xA;    --output_dir toolllama \&#xA;    --num_train_epochs 2 \&#xA;    --per_device_train_batch_size 2 \&#xA;    --per_device_eval_batch_size 2 \&#xA;    --gradient_accumulation_steps 8 \&#xA;    --evaluation_strategy &#34;epoch&#34; \&#xA;    --prediction_loss_only \&#xA;    --save_strategy &#34;epoch&#34; \&#xA;    --save_total_limit 8 \&#xA;    --learning_rate 5e-5 \&#xA;    --weight_decay 0. \&#xA;    --warmup_ratio 0.04 \&#xA;    --lr_scheduler_type &#34;cosine&#34; \&#xA;    --logging_steps 1 \&#xA;    --fsdp &#34;full_shard auto_wrap&#34; \&#xA;    --fsdp_transformer_layer_cls_to_wrap &#39;LlamaDecoderLayer&#39; \&#xA;    --tf32 True \&#xA;    --model_max_length 8192 \&#xA;    --gradient_checkpointing True \&#xA;    --lazy_preprocess True \&#xA;    --report_to none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also preprocess and split the data in your own way with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python preprocess/preprocess_toolllama_data.py \&#xA;    --tool_data_dir data/answer/G1_answer \&#xA;    --method DFS_woFilter_w2 \&#xA;    --output_file data/answer/toolllama_G1_dfs.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To train lora version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;deepspeed --master_port=20001 toolbench/train/train_long_seq_lora.py \&#xA;    --model_name_or_path huggyllama/llama-7b  \&#xA;    --data_path  data/toolllama_G123_dfs_train.json \&#xA;    --eval_data_path  data/toolllama_G123_dfs_eval.json \&#xA;    --conv_template tool-llama-single-round \&#xA;    --bf16 True \&#xA;    --output_dir toolllama_lora \&#xA;    --num_train_epochs 5 \&#xA;    --per_device_train_batch_size 4 \&#xA;    --per_device_eval_batch_size 2 \&#xA;    --gradient_accumulation_steps 2 \&#xA;    --evaluation_strategy &#34;epoch&#34; \&#xA;    --prediction_loss_only \&#xA;    --save_strategy &#34;epoch&#34; \&#xA;    --save_total_limit 8 \&#xA;    --learning_rate 5e-5 \&#xA;    --weight_decay 0. \&#xA;    --warmup_ratio 0.04 \&#xA;    --lr_scheduler_type &#34;cosine&#34; \&#xA;    --logging_steps 1 \&#xA;    --model_max_length 8192 \&#xA;    --gradient_checkpointing True \&#xA;    --lazy_preprocess True \    &#xA;    --deepspeed ds_configs/stage2.json \&#xA;    --report_to none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;First prepare your rapidapi key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export RAPIDAPIKEY=&#34;your_rapidapi_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python toolbench/inference/qa_pipeline.py \&#xA;    --tool_root_dir data/toolenv/tools/ \&#xA;    --backbone_model toolllama \&#xA;    --model_path ToolBench/ToolLLaMA-7b \&#xA;    --max_observation_length 1024 \&#xA;    --method DFS_woFilter_w2 \&#xA;    --input_query_file data/instruction/inference_query_demo.json \&#xA;    --output_answer_file data/answer/toolllama_dfs \&#xA;    --rapidapi_key $RAPIDAPIKEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;strong&gt;lora&lt;/strong&gt; version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python toolbench/inference/qa_pipeline.py \&#xA;    --tool_root_dir data/toolenv/tools/ \&#xA;    --backbone_model toolllama \&#xA;    --model_path huggyllama/llama-7b \&#xA;    --lora \&#xA;    --lora_path /path/to/your/downloaded/ToolLLaMA-7b-LoRA \&#xA;    --max_observation_length 1024 \&#xA;    --method DFS_woFilter_w2 \&#xA;    --input_query_file data/instruction/inference_query_demo.json \&#xA;    --output_answer_file data/answer/toolllama_lora_dfs \&#xA;    --rapidapi_key $RAPIDAPIKEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For lora version under &lt;strong&gt;open-domain&lt;/strong&gt; setting, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python toolbench/inference/qa_pipeline_open_domain.py \&#xA;    --tool_root_dir data/toolenv/tools/ \&#xA;    --corpus_tsv_path data/retrieval/G1/corpus.tsv \&#xA;    --retrieval_model_path /path/to/your/retrival_model \&#xA;    --retrieved_api_nums 5 \&#xA;    --backbone_model toolllama \&#xA;    --model_path huggyllama/llama-7b \&#xA;    --lora \&#xA;    --lora_path /path/to/your/toolllama_lora \&#xA;    --max_observation_length 1024 \&#xA;    --method DFS_woFilter_w2 \&#xA;    --input_query_file data/instruction/inference_query_demo_open_domain.json \&#xA;    --output_answer_file data/answer/toolllama_lora_dfs_open_domain \&#xA;    --rapidapi_key $RAPIDAPIKEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up and running the interface&lt;/h2&gt; &#xA;&lt;p&gt;ToolBench contains a Web UI based on &lt;a href=&#34;https://github.com/mckaywrigley/chatbot-ui&#34;&gt;Chatbot UI&lt;/a&gt;, forked to include the use of tools in the interface. It comes in two parts: the backend server, and &lt;a href=&#34;https://github.com/lilbillybiscuit/chatbot-ui-toolllama&#34;&gt;chatbot-ui-toolllama&lt;/a&gt;. Here is a &lt;a href=&#34;https://raw.githubusercontent.com/OpenBMB/ToolBench/master/assets/toolbench-demo.mp4&#34;&gt;video demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web UI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lilbillybiscuit/chatbot-ui-toolllama&#xA;cd chatbot-ui-toolllama&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app will be available on &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backend server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=./&#xA;python toolbench/inference/toolbench_server.py \&#xA;    --tool_root_dir data/toolenv/tools/ \&#xA;    --corpus_tsv_path data/retrieval/G1/corpus.tsv \&#xA;    --retrieval_model_path /path/to/your/retrival_model \&#xA;    --retrieved_api_nums 5 \&#xA;    --backbone_model toolllama \&#xA;    --model_path huggyllama/llama-7b \&#xA;    --lora \&#xA;    --lora_path /path/to/your/toolllama_lora \&#xA;    --max_observation_length 1024 \&#xA;    --method DFS_woFilter_w2 \&#xA;    --input_query_file data/instruction/inference_query_demo_open_domain.json \&#xA;    --output_answer_file data/answer/toolllama_lora_dfs_open_domain \&#xA;    --rapidapi_key $RAPIDAPIKEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This server will be available on &lt;code&gt;http://localhost:5000/&lt;/code&gt;. To start a request, call &lt;code&gt;http://localhost:5000/stream&lt;/code&gt; with a GET or POST request containing a JSON object with the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;text&#34;: &#34;What is the weather in New York today?&#34;,&#xA;    &#34;top_k&#34;: 5,&#xA;    &#34;method&#34;: &#34;DFS_woFilter_w2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ToolEval&lt;/h2&gt; &#xA;&lt;p&gt;By fine-tuning LLaMA on ToolBench, we obtain &lt;strong&gt;ToolLLaMA&lt;/strong&gt;. Considering that human evaluation can be time-consuming, we follow &lt;a href=&#34;https://tatsu-lab.github.io/alpaca_eval/&#34;&gt;AlpacaEval&lt;/a&gt; to develop an efficient machine evaluator &lt;strong&gt;ToolEval&lt;/strong&gt;, which incorporates two evaluation metrics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pass Rate&lt;/strong&gt;: Calculates the proportion of successfully completing an instruction within limited OpenAI API calls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preference&lt;/strong&gt;: Measured by comparing two answers (action sequences) for a given instruction. We pre-define a set of criteria for a better answer, which are organized as prompts for ChatGPT. We provide the test instruction and two candidate answers to the evaluator and obtain its preference. We evaluate each answer pair multiple times to improve the reliability of our system. Then we calculate the &lt;strong&gt;Win Rate&lt;/strong&gt; (percentage of being preferred by the evaluator) and &lt;strong&gt;Standard Error&lt;/strong&gt; (the standard error of the Win Rate). More details can be found in our paper.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To validate the effectiveness of the metric &lt;strong&gt;Preference&lt;/strong&gt;, we sample among three different methods (ChatGPT+ReACT, GPT4+ReACT, and ChatGPT+DFSDT) to obtain answer pairs for &lt;em&gt;600&lt;/em&gt; test instructions. Then we engage humans to annotate human preference for them (&lt;em&gt;4&lt;/em&gt; annotations for each answer pair, &lt;em&gt;2400&lt;/em&gt; annotations in total). Our automatic evaluator, developed using ChatGPT, demonstrates a significant correlation of &lt;strong&gt;75.8%&lt;/strong&gt; with human annotators. We also obtain the agreement among different human annotators &lt;strong&gt;83.54%&lt;/strong&gt;, and the agreement between humans and our evaluator &lt;strong&gt;80.21%&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More details about ToolEval can be found in our paper.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation with ToolEval&lt;/h3&gt; &#xA;&lt;p&gt;To evaluate a model on G1-Inst. test set, for example, run the following commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pass rate:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python toolbench/tooleval/pass_rate.py --answer_dir data/answer/toolllama_dfs/G1_instruction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Win rate (Reference model: ChatGPT-ReACT):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export OPENAI_KEY=&#34;&#34;&#xA;export REF_MODEL_DATA=&#34;data/answer/chatgpt_cot/G1_instruction&#34;&#xA;export REF_MODEL_METHOD=&#34;CoT&#34;&#xA;export TEST_MODEL_DATA=&#34;data/answer/toolllama_dfs/G1_instruction&#34;&#xA;export TEST_MODEL_METHOD=&#34;DFS&#34;&#xA;python ./toolbench/tooleval/convert_to_answer_format.py \&#xA;    --method CoT \&#xA;    --answer_dir $REF_MODEL_DATA \&#xA;    --output ${REF_MODEL_DATA}_converted&#xA;&#xA;python ./toolbench/tooleval/convert_to_answer_format.py \&#xA;    --method DFS \&#xA;    --answer_dir $TEST_MODEL_DATA \&#xA;    --output ${TEST_MODEL_DATA}_converted&#xA;&#xA;python ./toolbench/tooleval/automatic_eval_sample.py \&#xA;    --output ${REF_MODEL_DATA}_converted \&#xA;    --ref_output ${TEST_MODEL_DATA}_converted \&#xA;    --method $REF_MODEL_METHOD \&#xA;    --use_existed_output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üìä Model Experiments Results&lt;/h3&gt; &#xA;&lt;p&gt;In our main experiments, ToolLLaMA demonstrates a compelling capability to handle both single-tool and complex multi-tool instructions. Below are the main results compared with ChatGPT and Text-Davinci-003.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pass Rate:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;I1-Inst.&lt;/th&gt; &#xA;   &lt;th&gt;I1-Tool.&lt;/th&gt; &#xA;   &lt;th&gt;I1-Cat.&lt;/th&gt; &#xA;   &lt;th&gt;I2-Inst.&lt;/th&gt; &#xA;   &lt;th&gt;I2-Cat.&lt;/th&gt; &#xA;   &lt;th&gt;I3-Inst.&lt;/th&gt; &#xA;   &lt;th&gt;Average&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGPT-DFSDT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;78&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;84&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;89&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;58&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;69.6&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGPT-ReACT&lt;/td&gt; &#xA;   &lt;td&gt;56&lt;/td&gt; &#xA;   &lt;td&gt;62&lt;/td&gt; &#xA;   &lt;td&gt;66&lt;/td&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;44.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-Davinci-003-DFSDT&lt;/td&gt; &#xA;   &lt;td&gt;53&lt;/td&gt; &#xA;   &lt;td&gt;58&lt;/td&gt; &#xA;   &lt;td&gt;61&lt;/td&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;39&lt;/td&gt; &#xA;   &lt;td&gt;47.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-Davinci-003-ReACT&lt;/td&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;18.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ToolLLaMA&lt;/td&gt; &#xA;   &lt;td&gt;68&lt;/td&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;   &lt;td&gt;75&lt;/td&gt; &#xA;   &lt;td&gt;47&lt;/td&gt; &#xA;   &lt;td&gt;56&lt;/td&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;61.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ToolLLaMA-LoRA&lt;/td&gt; &#xA;   &lt;td&gt;51&lt;/td&gt; &#xA;   &lt;td&gt;63&lt;/td&gt; &#xA;   &lt;td&gt;61&lt;/td&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;50.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ToolLLaMA-API Retriever&lt;/td&gt; &#xA;   &lt;td&gt;62&lt;/td&gt; &#xA;   &lt;td&gt;62&lt;/td&gt; &#xA;   &lt;td&gt;72&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;55&lt;/td&gt; &#xA;   &lt;td&gt;47&lt;/td&gt; &#xA;   &lt;td&gt;57.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Win Rate:&lt;/strong&gt; (Reference model: ChatGPT-DFSDT)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;I1-Inst.&lt;/th&gt; &#xA;   &lt;th&gt;I1-Tool.&lt;/th&gt; &#xA;   &lt;th&gt;I1-Cat.&lt;/th&gt; &#xA;   &lt;th&gt;I2-Inst.&lt;/th&gt; &#xA;   &lt;th&gt;I2-Cat.&lt;/th&gt; &#xA;   &lt;th&gt;I3-Inst.&lt;/th&gt; &#xA;   &lt;th&gt;Average&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGPT-DFSDT&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;50.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGPT-ReACT&lt;/td&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;41&lt;/td&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;30.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-Davinci-003-ReACT&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;13.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-Davinci-003-DFSDT&lt;/td&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;34&lt;/td&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;31.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ToolLLaMA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;59&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;48&lt;/td&gt; &#xA;   &lt;td&gt;46&lt;/td&gt; &#xA;   &lt;td&gt;48.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ToolLLaMA-LoRA&lt;/td&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;36.4&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ToolLLaMA-API Retriever&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;39&lt;/td&gt; &#xA;   &lt;td&gt;44&lt;/td&gt; &#xA;   &lt;td&gt;49&lt;/td&gt; &#xA;   &lt;td&gt;49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;55&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;47.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ToolLLaMA will reach GPT-4&#39;s tool-use capability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; We will train a ToolLLaMa-2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources of Tool Learning&lt;/h2&gt; &#xA;&lt;p&gt;With the powerful capabilities of foundation models, we are eager to see their applications in manipulating various tools. For more resources, please refer to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BMTools&lt;/strong&gt;. [&lt;a href=&#34;https://github.com/OpenBMB/BMTools&#34;&gt;Project&lt;/a&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tool Learning Survey&lt;/strong&gt;. [&lt;a href=&#34;https://arxiv.org/abs/2304.08354&#34;&gt;Paper&lt;/a&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tool Learning Paper List&lt;/strong&gt;. [&lt;a href=&#34;https://github.com/thunlp/ToolLearningPapers&#34;&gt;Project&lt;/a&gt;]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WebCPM&lt;/strong&gt;. [&lt;a href=&#34;https://github.com/thunlp/WebCPM&#34;&gt;Paper&lt;/a&gt;]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to cite us if you like ToolBench.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{qin2023toolllm,&#xA;      title={ToolLLM: Facilitating Large Language Models to Master 16000+ Real-world APIs}, &#xA;      author={Yujia Qin and Shihao Liang and Yining Ye and Kunlun Zhu and Lan Yan and Yaxi Lu and Yankai Lin and Xin Cong and Xiangru Tang and Bill Qian and Sihan Zhao and Runchu Tian and Ruobing Xie and Jie Zhou and Mark Gerstein and Dahai Li and Zhiyuan Liu and Maosong Sun},&#xA;      year={2023},&#xA;      eprint={2307.16789},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.AI}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{qin2023tool,&#xA;      title={Tool Learning with Foundation Models}, &#xA;      author={Yujia Qin and Shengding Hu and Yankai Lin and Weize Chen and Ning Ding and Ganqu Cui and Zheni Zeng and Yufei Huang and Chaojun Xiao and Chi Han and Yi Ren Fung and Yusheng Su and Huadong Wang and Cheng Qian and Runchu Tian and Kunlun Zhu and Shihao Liang and Xingyu Shen and Bokai Xu and Zhen Zhang and Yining Ye and Bowen Li and Ziwei Tang and Jing Yi and Yuzhang Zhu and Zhenning Dai and Lan Yan and Xin Cong and Yaxi Lu and Weilin Zhao and Yuxiang Huang and Junxi Yan and Xu Han and Xian Sun and Dahai Li and Jason Phang and Cheng Yang and Tongshuang Wu and Heng Ji and Zhiyuan Liu and Maosong Sun},&#xA;      year={2023},&#xA;      eprint={2304.08354},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/audiocraft</title>
    <updated>2023-08-04T01:29:00Z</updated>
    <id>tag:github.com,2023-08-04:/facebookresearch/audiocraft</id>
    <link href="https://github.com/facebookresearch/audiocraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audiocraft is a library for audio processing and generation with deep learning. It features the state-of-the-art EnCodec audio compressor / tokenizer, along with MusicGen, a simple and controllable music generation LM with textual and melodic conditioning.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AudioCraft&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/facebookresearch/audiocraft/workflows/audiocraft_docs/badge.svg?sanitize=true&#34; alt=&#34;docs badge&#34;&gt; &lt;img src=&#34;https://github.com/facebookresearch/audiocraft/workflows/audiocraft_linter/badge.svg?sanitize=true&#34; alt=&#34;linter badge&#34;&gt; &lt;img src=&#34;https://github.com/facebookresearch/audiocraft/workflows/audiocraft_tests/badge.svg?sanitize=true&#34; alt=&#34;tests badge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;AudioCraft is a PyTorch library for deep learning research on audio generation. AudioCraft contains inference and training code for two state-of-the-art AI generative models producing high-quality audio: AudioGen and MusicGen.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;AudioCraft requires Python 3.9, PyTorch 2.0.0. To install AudioCraft, you can run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Best to make sure you have torch installed first, in particular before installing xformers.&#xA;# Don&#39;t run this if you already have PyTorch installed.&#xA;pip install &#39;torch&amp;gt;=2.0&#39;&#xA;# Then proceed to one of the following&#xA;pip install -U audiocraft  # stable release&#xA;pip install -U git+https://git@github.com/facebookresearch/audiocraft#egg=audiocraft  # bleeding edge&#xA;pip install -e .  # or if you cloned the repo locally (mandatory if you want to train).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also recommend having &lt;code&gt;ffmpeg&lt;/code&gt; installed, either through your system or Anaconda:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install ffmpeg&#xA;# Or if you are using Anaconda or Miniconda&#xA;conda install &#39;ffmpeg&amp;lt;5&#39; -c  conda-forge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;At the moment, AudioCraft contains the training code and inference code for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/MUSICGEN.md&#34;&gt;MusicGen&lt;/a&gt;: A state-of-the-art controllable text-to-music model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/AUDIOGEN.md&#34;&gt;AudioGen&lt;/a&gt;: A state-of-the-art text-to-sound model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/ENCODEC.md&#34;&gt;EnCodec&lt;/a&gt;: A state-of-the-art high fidelity neural audio codec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/MBD.md&#34;&gt;Multi Band Diffusion&lt;/a&gt;: An EnCodec compatible decoder using diffusion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Training code&lt;/h2&gt; &#xA;&lt;p&gt;AudioCraft contains PyTorch components for deep learning research in audio and training pipelines for the developed models. For a general introduction of AudioCraft design principles and instructions to develop your own training pipeline, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/TRAINING.md&#34;&gt;AudioCraft training documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For reproducing existing work and using the developed training pipelines, refer to the instructions for each specific model that provides pointers to configuration, example grids and model/task-specific information and FAQ.&lt;/p&gt; &#xA;&lt;h2&gt;API documentation&lt;/h2&gt; &#xA;&lt;p&gt;We provide some &lt;a href=&#34;https://facebookresearch.github.io/audiocraft/api_docs/audiocraft/index.html&#34;&gt;API documentation&lt;/a&gt; for AudioCraft.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Is the training code available?&lt;/h4&gt; &#xA;&lt;p&gt;Yes! We provide the training code for &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/ENCODEC.md&#34;&gt;EnCodec&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/MUSICGEN.md&#34;&gt;MusicGen&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/MBD.md&#34;&gt;Multi Band Diffusion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Where are the models stored?&lt;/h4&gt; &#xA;&lt;p&gt;Hugging Face stored the model in a specific location, which can be overriden by setting the &lt;code&gt;AUDIOCRAFT_CACHE_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code in this repository is released under the MIT license as found in the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The models weights in this repository are released under the CC-BY-NC 4.0 license as found in the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/LICENSE_weights&#34;&gt;LICENSE_weights file&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;For the general framework of AudioCraft, please cite the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{copet2023simple,&#xA;    title={Simple and Controllable Music Generation},&#xA;    author={Jade Copet and Felix Kreuk and Itai Gat and Tal Remez and David Kant and Gabriel Synnaeve and Yossi Adi and Alexandre D√©fossez},&#xA;    year={2023},&#xA;    journal={arXiv preprint arXiv:2306.05284},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When referring to a specific model, please cite as mentioned in the model specific README, e.g &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/MUSICGEN.md&#34;&gt;./docs/MUSICGEN.md&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/audiocraft/main/docs/AUDIOGEN.md&#34;&gt;./docs/AUDIOGEN.md&lt;/a&gt;, etc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hegelai/prompttools</title>
    <updated>2023-08-04T01:29:00Z</updated>
    <id>tag:github.com,2023-08-04:/hegelai/prompttools</id>
    <link href="https://github.com/hegelai/prompttools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source tools for prompt testing and experimentation, with support for both LLMs (e.g. OpenAI, LLaMA) and vector databases (e.g. Chroma, Weaviate).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hegel-ai.com&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/5/51/Owl_of_Minerva.svg?sanitize=true&#34; width=&#34;75&#34; height=&#34;75&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; PromptTools &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;span&gt;üîß&lt;/span&gt; Test and experiment with prompts, LLMs, and vector databases. &lt;span&gt;üî®&lt;/span&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://prompttools.readthedocs.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/View%20Documentation-Docs-yellow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/7KeRPNHGdJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join%20our%20community-Discord-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/prompttools&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/prompttools&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hegelai/prompttools&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/hegelai/prompttools&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/hegel_ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/Hegel_AI?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;code&gt;prompttools&lt;/code&gt; created by &lt;a href=&#34;https://hegel-ai.com/&#34;&gt;Hegel AI&lt;/a&gt;! This repo offers a set of open-source, self-hostable tools for experimenting with, testing, and evaluating LLMs, vector databases, and prompts. The core idea is to enable developers to evaluate using familiar interfaces like &lt;em&gt;code&lt;/em&gt;, &lt;em&gt;notebooks&lt;/em&gt;, and a local &lt;em&gt;playground&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In just a few lines of codes, you can test your prompts and parameters across different models (whether you are using OpenAI, Anthropic, or LLaMA models). You can even evaluate the retrieval accuracy of vector databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prompts = [&#34;Tell me a joke.&#34;, &#34;Is 17077 a prime number?&#34;]&#xA;models = [&#34;gpt-3.5-turbo&#34;, &#34;gpt-4&#34;]&#xA;temperatures = [0.0]&#xA;openai_experiment = OpenAIChatExperiment(models, prompts, temperature=temperatures)&#xA;openai_experiment.run()&#xA;openai_experiment.visualize()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hegelai/prompttools/main/img/demo.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To stay in touch with us about issues and future updates, join the &lt;a href=&#34;https://discord.gg/7KeRPNHGdJ&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;prompttools&lt;/code&gt;, you can use &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install prompttools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a simple example of a &lt;code&gt;prompttools&lt;/code&gt; locally with the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/hegelai/prompttools.git&#xA;cd prompttools &amp;amp;&amp;amp; jupyter notebook examples/notebooks/OpenAIChatExperiment.ipynb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run the notebook in &lt;a href=&#34;https://colab.research.google.com/drive/1YVcpBew8EqbhXFN8P5NaFrOIqc1FKWeS?usp=sharing&#34;&gt;Google Colab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Playground&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hegelai/prompttools/main/img/playground.gif&#34; width=&#34;1000&#34; height=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;If you want to interact with &lt;code&gt;prompttools&lt;/code&gt; using our playground interface, you can launch it with the following commands.&lt;/p&gt; &#xA;&lt;p&gt;First, install prompttools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install prompttools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, clone the git repo and launch the streamlit app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/hegelai/prompttools.git&#xA;cd prompttools &amp;amp;&amp;amp; streamlit run prompttools/playground/playground.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access a hosted version of the playground on the &lt;a href=&#34;https://prompttools.streamlit.app/&#34;&gt;Streamlit Community Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The hosted version does not support LlamaCpp&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://prompttools.readthedocs.io/en/latest/index.html&#34;&gt;documentation website&lt;/a&gt; contains the full API reference and more description of individual components. Check it out!&lt;/p&gt; &#xA;&lt;h2&gt;Supported Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of APIs that we support with our experiments:&lt;/p&gt; &#xA;&lt;p&gt;LLMs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI (Completion, ChatCompletion) - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;LLaMA.Cpp (LLaMA 1, LLaMA 2) - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;HuggingFace (Hub API, Inference Endpoints) - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Anthropic - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google PaLM - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;LangChain - Exploratory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vector Databases and Data Utility&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chroma - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Weaviate - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;MindsDB - &lt;strong&gt;Supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Milvus - Exploratory&lt;/li&gt; &#xA; &lt;li&gt;Pinecone - Exploratory&lt;/li&gt; &#xA; &lt;li&gt;LanceDB - Exploratory&lt;/li&gt; &#xA; &lt;li&gt;LlamaIndex - Exploratory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any API that you&#39;d like to see being supported soon, please open an issue or a PR to add it. Feel free to discuss in our Discord channel as well.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions (FAQs)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Will this library forward my LLM calls to a server before sending it to OpenAI, Anthropic, and etc.?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No, the source code will be executed on your machine. Any call to LLM APIs will be directly executed from your machine without any forwarding.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does &lt;code&gt;prompttools&lt;/code&gt; store my API keys or LLM inputs and outputs to a server?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No, all data stay on your local machine. No metrics, telemetry, or usage data are collected. As a result, we would love to hear direct feedback from you. Please open an issue or join our Discord.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I persist my results?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To persist the results of your tests and experiments, you can export your &lt;code&gt;Experiment&lt;/code&gt; with the methods &lt;code&gt;to_csv&lt;/code&gt;, &lt;code&gt;to_json&lt;/code&gt;, &lt;code&gt;to_lora_json&lt;/code&gt;, or &lt;code&gt;to_mongo_db&lt;/code&gt;. We are building more persistence features and we will be happy to further discuss your use cases, pain points, and what export options may be useful for you.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome PRs and suggestions! Don&#39;t hesitate to open a PR/issue or to reach out to us &lt;a href=&#34;mailto:team@hegel-ai.com&#34;&gt;via email&lt;/a&gt;. Please have a look at our &lt;a href=&#34;https://raw.githubusercontent.com/hegelai/prompttools/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/hegelai/prompttools/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;&#34;Help Wanted&#34; issues&lt;/a&gt; to get started!&lt;/p&gt; &#xA;&lt;h2&gt;Usage and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We will be delighted to work with early adopters to shape our designs. Please reach out to us &lt;a href=&#34;mailto:team@hegel-ai.com&#34;&gt;via email&lt;/a&gt; if you&#39;re interested in using this tooling for your project or have any feedback.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;We will be gradually releasing more components to the open-source community. The current license can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hegelai/prompttools/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file. If there is any concern, please &lt;a href=&#34;mailto:eam@hegel-ai.com&#34;&gt;contact us&lt;/a&gt; and we will be happy to work with you.&lt;/p&gt;</summary>
  </entry>
</feed>