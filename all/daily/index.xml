<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-15T01:28:24Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ubicloud/ubicloud</title>
    <updated>2025-01-15T01:28:24Z</updated>
    <id>tag:github.com,2025-01-15:/ubicloud/ubicloud</id>
    <link href="https://github.com/ubicloud/ubicloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source alternative to AWS. Elastic compute, block storage (non replicated), firewall and load balancer, managed Postgres, and IAM services in public beta.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/779e73bd-c260-4729-8430-c630628f1b6b&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Ubicloud &lt;a href=&#34;https://github.com/ubicloud/ubicloud/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ubicloud/ubicloud/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ubicloud/ubicloud/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ubicloud/ubicloud/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.greptile.com/repo/ubicloud&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/learn_with-greptile-%091B12?color=%091B12&#34; alt=&#34;Learn this repo using Greptile&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Ubicloud is an open source cloud that can run anywhere. Think of it as an open alternative to cloud providers, like what Linux is to proprietary operating systems.&lt;/p&gt; &#xA;&lt;p&gt;Ubicloud provides IaaS cloud features on bare metal providers, such as Hetzner, Leaseweb, and AWS Bare Metal. You can set it up yourself on these providers or you can use our managed service. We&#39;re currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Managed platform&lt;/h3&gt; &#xA;&lt;p&gt;You can use Ubicloud without installing anything. When you do this, we pass along the underlying provider&#39;s benefits to you, such as price or location.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://console.ubicloud.com&#34;&gt;https://console.ubicloud.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build your own cloud&lt;/h3&gt; &#xA;&lt;p&gt;You can also build your own cloud. To do this, start up Ubicloud&#39;s control plane and connect to its cloud console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:ubicloud/ubicloud.git&#xA;&#xA;# Generate secrets for demo&#xA;./demo/generate_env&#xA;&#xA;# Run containers: db-migrator, app (web &amp;amp; respirate), postgresql&#xA;docker-compose -f demo/docker-compose.yml up&#xA;&#xA;# Visit localhost:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The control plane is responsible for cloudifying bare metal Linux machines. The easiest way to build your own cloud is to lease instances from one of those providers. For example: &lt;a href=&#34;https://www.hetzner.com/sb&#34;&gt;https://www.hetzner.com/sb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you lease instance(s), run the following script for each instance to cloudify the instance. By default, the script cloudifies bare metal instances leased from Hetzner. After you cloudify your instances, you can provision and manage cloud resources on these machines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Enter hostname/IP and provider, and install SSH key as instructed by script&#xA;docker exec -it ubicloud-app ./demo/cloudify_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Later when you create VMs, Ubicloud will assign them IPv6 addresses. If your ISP doesn&#39;t support IPv6, please use a VPN or tunnel broker such as Mullvad or Hurricane Electric&#39;s &lt;a href=&#34;https://tunnelbroker.net/&#34;&gt;https://tunnelbroker.net/&lt;/a&gt; to connect. Alternatively, you could lease IPv4 addresses from your provider and add them to your control plane.&lt;/p&gt; &#xA;&lt;h2&gt;Why use it&lt;/h2&gt; &#xA;&lt;p&gt;Public cloud providers like AWS, Azure, and Google Cloud have made life easier for start-ups and enterprises. But they are closed source, have you rent computers at a huge premium, and lock you in. Ubicloud offers an open source alternative, reduces your costs, and returns control of your infrastructure back to you. All without sacrificing the cloud&#39;s convenience.&lt;/p&gt; &#xA;&lt;p&gt;Today, AWS offers about two hundred cloud services. Ultimately, we will implement 10% of the cloud services that make up 80% of that consumption.&lt;/p&gt; &#xA;&lt;p&gt;Example workloads and reasons to use Ubicloud today include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You have an ephemeral workload like a CI/CD pipeline (we&#39;re integrating with GitHub Actions), or you&#39;d like to run compute/memory heavy tests. Our managed cloud is ~3x cheaper than AWS, so you save on costs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You want a portable and simple app deployment service like &lt;a href=&#34;https://github.com/basecamp/kamal&#34;&gt;Kamal&lt;/a&gt;. We&#39;re moving Ubicloud&#39;s control plane from Heroku to Kamal; and we want to provide open and portable services for Kamal&#39;s dependencies in the process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You have bare metal machines sitting somewhere. You&#39;d like to build your own cloud for portability, security, or compliance reasons.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Ubicloud is in public beta. You can provide us your feedback, get help, or ask us to support your network environment in the &lt;a href=&#34;https://github.com/ubicloud/ubicloud/discussions&#34;&gt;Community Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We follow an established architectural pattern in building public cloud services. A control plane manages a data plane, where the data plane leverages open source software. You can find our current cloud components / services below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Elastic Compute&lt;/strong&gt;: Our control plane communicates with Linux bare metal servers using SSH. We use &lt;a href=&#34;https://github.com/cloud-hypervisor/cloud-hypervisor&#34;&gt;Cloud Hypervisor&lt;/a&gt; as our virtual machine monitor (VMM); and each instance of the VMM is contained within Linux namespaces for further isolation / security.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt;: We use &lt;a href=&#34;https://en.wikipedia.org/wiki/IPsec&#34;&gt;IPsec&lt;/a&gt; tunneling to establish an encrypted and private network environment. We support IPv4 and IPv6 in a dual-stack setup and provide both public and private networking. For security, each customer’s VMs operate in their own networking namespace. For &lt;a href=&#34;https://www.ubicloud.com/blog/ubicloud-firewalls-how-linux-nftables-enables-flexible-rules&#34;&gt;firewalls&lt;/a&gt; and &lt;a href=&#34;https://www.ubicloud.com/blog/ubicloud-load-balancer-simple-and-cost-free&#34;&gt;load balancers&lt;/a&gt;, we use Linux nftables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Block Storage, non replicated&lt;/strong&gt;: We use Storage Performance Development Toolkit (&lt;a href=&#34;https://spdk.io&#34;&gt;SPDK&lt;/a&gt;) to provide virtualized block storage to VMs. SPDK enables us to add enterprise features such as snapshot and replication in the future. We follow security best practices and encrypt the data encryption key itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Attribute-Based Access Control (ABAC)&lt;/strong&gt;: With ABAC, you can define attributes, roles, and permissions for users and give them fine-grained access to resources. You can read more about our &lt;a href=&#34;https://raw.githubusercontent.com/ubicloud/ubicloud/main/doc/authorization.md&#34;&gt;ABAC design here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What&#39;s Next?&lt;/strong&gt;: We&#39;re planning to work on a managed K8s or metrics/monitoring service next. If you have a workload that would benefit from a specific cloud service, please get in touch with us through our &lt;a href=&#34;https://github.com/ubicloud/ubicloud/discussions&#34;&gt;Community Forum&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Control plane: Manages data plane services and resources. This is a Ruby program that stores its data in Postgres. We use the &lt;a href=&#34;https://roda.jeremyevans.net/&#34;&gt;Roda&lt;/a&gt; framework to serve HTTP requests and &lt;a href=&#34;http://sequel.jeremyevans.net/&#34;&gt;Sequel&lt;/a&gt; to access the database. We manage web authentication with &lt;a href=&#34;http://rodauth.jeremyevans.net/&#34;&gt;Rodauth&lt;/a&gt;. We communicate with data plane servers using SSH, via the library &lt;a href=&#34;https://github.com/net-ssh/net-ssh&#34;&gt;net-ssh&lt;/a&gt;. For our tests, we use &lt;a href=&#34;https://rspec.info/&#34;&gt;RSpec&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloud console: Server-side web app served by the Roda framework. For the visual design, we use &lt;a href=&#34;https://tailwindcss.com&#34;&gt;Tailwind CSS&lt;/a&gt; with components from &lt;a href=&#34;https://tailwindui.com&#34;&gt;Tailwind UI&lt;/a&gt;. We also use jQuery for interactivity.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you’d like to start hacking with Ubicloud, any method of obtaining Ruby and Postgres versions is acceptable. If you have no opinion on this, our development team uses &lt;code&gt;asdf-vm&lt;/code&gt; as &lt;a href=&#34;https://raw.githubusercontent.com/ubicloud/ubicloud/main/DEVELOPERS.md&#34;&gt;documented here in detail&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://greptile.com/&#34;&gt;Greptile&lt;/a&gt; provides an AI/LLM that indexes Ubicloud&#39;s source code &lt;a href=&#34;https://learnthisrepo.com/ubicloud&#34;&gt;can answer questions about it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Do you have any experience with building this sort of thing?&lt;/h3&gt; &#xA;&lt;p&gt;Our founding team comes from Azure; and worked at Amazon and Heroku before that. We also have start-up experience. We were co-founders and founding team members at &lt;a href=&#34;https://github.com/citusdata/citus&#34;&gt;Citus Data&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/item?id=18990469&#34;&gt;which got acquired by Microsoft&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How is this different than OpenStack?&lt;/h3&gt; &#xA;&lt;p&gt;We see three differences. First, Ubicloud is available as a managed service (vs boxed software). This way, you can get started in minutes rather than weeks. Since Ubicloud is designed for multi-tenancy, it comes with built-in features such as encryption at rest and in transit, virtual networking, secrets rotation, etc.&lt;/p&gt; &#xA;&lt;p&gt;Second, we&#39;re initially targeting developers. This -we hope- will give us fast feedback cycles and enable us to have 6 key services in GA form in the next two years. OpenStack is still primarily used for 3 cloud services.&lt;/p&gt; &#xA;&lt;p&gt;Last, we&#39;re designing for simplicity. With OpenStack, you pick between 10 hypervisors, 10 S3 implementations, and 5 block storage implementations. The software needs to work in a way where all of these implementations are compatible with each other. That leads to consultant-ware. We&#39;ll take a more opinionated approach with Ubicloud.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FujiwaraChoki/MoneyPrinterV2</title>
    <updated>2025-01-15T01:28:24Z</updated>
    <id>tag:github.com,2025-01-15:/FujiwaraChoki/MoneyPrinterV2</id>
    <link href="https://github.com/FujiwaraChoki/MoneyPrinterV2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automate the process of making money online.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MoneyPrinter V2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made_with-%E2%9D%A4-red?style=for-the-badge&amp;amp;labelColor=orange&#34; alt=&#34;madewithlove&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/fujicodes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy%20Me%20A%20Coffee-Donate-brightgreen?logo=buymeacoffee&#34; alt=&#34;Buy Me A Coffee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/FujiwaraChoki/MoneyPrinterV2?style=for-the-badge&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/FujiwaraChoki/MoneyPrinterV2?style=for-the-badge&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FujiwaraChoki/MoneyPrinterV2/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/FujiwaraChoki/MoneyPrinterV2?style=for-the-badge&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dsc.gg/fuji-community&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1134848537704804432?style=for-the-badge&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Application that automates the process of making money online. MPV2 (MoneyPrinter Version 2) is, as the name suggests, the second version of the MoneyPrinter project. It is a complete rewrite of the original project, with a focus on a wider range of features and a more modular architecture.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MPV2 needs Python 3.9 to function effectively. Watch the YouTube video &lt;a href=&#34;https://youtu.be/wAZ_ZSuIqfk&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Twitter Bot (with CRON Jobs =&amp;gt; &lt;code&gt;scheduler&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; YouTube Shorts Automater (with CRON Jobs =&amp;gt; &lt;code&gt;scheduler&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Affiliate Marketing (Amazon + Twitter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Find local businesses &amp;amp; cold outreach&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;MoneyPrinter has different versions for multiple languages developed by the community for the community. Here are some known versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chinese: &lt;a href=&#34;https://github.com/harry0703/MoneyPrinterTurbo&#34;&gt;MoneyPrinterTurbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to submit your own version/fork of MoneyPrinter, please open an issue describing the changes you made to the fork.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please install &lt;a href=&#34;https://visualstudio.microsoft.com/de/visual-cpp-build-tools/&#34;&gt;Microsoft Visual C++ build tools&lt;/a&gt; first, so that CoquiTTS can function correctly.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ If you are planning to reach out to scraped businesses per E-Mail, please first install the &lt;a href=&#34;https://golang.org/&#34;&gt;Go Programming Language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/FujiwaraChoki/MoneyPrinterV2.git&#xA;&#xA;# Copy Example Configuration and fill out values in config.json&#xA;cp config.example.json config.json&#xA;&#xA;# Create a virtual environment&#xA;python -m venv venv&#xA;&#xA;# Activate the virtual environment - Windows&#xA;.\venv\Scripts\activate&#xA;&#xA;# Activate the virtual environment - Unix&#xA;source venv/bin/activate&#xA;&#xA;# Install the requirements&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the application&#xA;python src/main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All relevant document can be found &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/docs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;For easier usage, there are some scripts in the &lt;code&gt;scripts&lt;/code&gt; directory, that can be used to directly access the core functionality of MPV2, without the need of user interaction.&lt;/p&gt; &#xA;&lt;p&gt;All scripts need to be run from the root directory of the project, e.g. &lt;code&gt;bash scripts/upload_video.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us. Check out &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/docs/Roadmap.md&#34;&gt;docs/Roadmap.md&lt;/a&gt; for a list of features that need to be implemented.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MoneyPrinterV2 is licensed under &lt;code&gt;Affero General Public License v3.0&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coqui-ai/TTS&#34;&gt;CoquiTTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xtekky/gpt4free&#34;&gt;gpt4free&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is for educational purposes only. The author will not be responsible for any misuse of the information provided. All the information on this website is published in good faith and for general information purpose only. The author does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (FujiwaraChoki/MoneyPrinterV2), is strictly at your own risk. The author will not be liable for any losses and/or damages in connection with the use of our website.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JoshuaC215/agent-service-toolkit</title>
    <updated>2025-01-15T01:28:24Z</updated>
    <id>tag:github.com,2025-01-15:/JoshuaC215/agent-service-toolkit</id>
    <link href="https://github.com/JoshuaC215/agent-service-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full toolkit for running an AI agent service built with LangGraph, FastAPI and Streamlit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧰 AI Agent Service Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JoshuaC215/agent-service-toolkit/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/JoshuaC215/agent-service-toolkit/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/JoshuaC215/agent-service-toolkit&#34;&gt;&lt;img src=&#34;https://codecov.io/github/JoshuaC215/agent-service-toolkit/graph/badge.svg?token=5MTJSYWD05&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JoshuaC215/agent-service-toolkit/raw/main/pyproject.toml&#34;&gt;&lt;img src=&#34;https://img.shields.io/python/required-version-toml?tomlFilePath=https%3A%2F%2Fraw.githubusercontent.com%2FJoshuaC215%2Fagent-service-toolkit%2Frefs%2Fheads%2Fmain%2Fpyproject.toml&#34; alt=&#34;Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JoshuaC215/agent-service-toolkit/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/JoshuaC215/agent-service-toolkit&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://agent-service-toolkit.streamlit.app/&#34;&gt;&lt;img src=&#34;https://static.streamlit.io/badges/streamlit_badge_black_red.svg?sanitize=true&#34; alt=&#34;Streamlit App&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A full toolkit for running an AI agent service built with LangGraph, FastAPI and Streamlit.&lt;/p&gt; &#xA;&lt;p&gt;It includes a &lt;a href=&#34;https://langchain-ai.github.io/langgraph/&#34;&gt;LangGraph&lt;/a&gt; agent, a &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt; service to serve it, a client to interact with the service, and a &lt;a href=&#34;https://streamlit.io/&#34;&gt;Streamlit&lt;/a&gt; app that uses the client to provide a chat interface. Data structures and settings are built with &lt;a href=&#34;https://github.com/pydantic/pydantic&#34;&gt;Pydantic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project offers a template for you to easily build and run your own agents using the LangGraph framework. It demonstrates a complete setup from agent definition to user interface, making it easier to get started with LangGraph-based projects by providing a full, robust toolkit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VqQti9nGoe4&#34;&gt;🎥 Watch a video walkthrough of the repo and app&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://agent-service-toolkit.streamlit.app/&#34;&gt;Try the app!&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://agent-service-toolkit.streamlit.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JoshuaC215/agent-service-toolkit/main/media/app_screenshot.png&#34; width=&#34;600&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;Run directly in python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# At least one LLM API key is required&#xA;echo &#39;OPENAI_API_KEY=your_openai_api_key&#39; &amp;gt;&amp;gt; .env&#xA;&#xA;# uv is recommended but &#34;pip install .&#34; also works&#xA;pip install uv&#xA;uv sync --frozen&#xA;# &#34;uv sync&#34; creates .venv automatically&#xA;source .venv/bin/activate&#xA;python src/run_service.py&#xA;&#xA;# In another shell&#xA;source .venv/bin/activate&#xA;streamlit run src/streamlit_app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run with docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;OPENAI_API_KEY=your_openai_api_key&#39; &amp;gt;&amp;gt; .env&#xA;docker compose watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Architecture Diagram&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JoshuaC215/agent-service-toolkit/main/media/agent_architecture.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Key Features&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;LangGraph Agent&lt;/strong&gt;: A customizable agent built using the LangGraph framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FastAPI Service&lt;/strong&gt;: Serves the agent with both streaming and non-streaming endpoints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Streaming&lt;/strong&gt;: A novel approach to support both token-based and message-based streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Content Moderation&lt;/strong&gt;: Implements LlamaGuard for content moderation (requires Groq API key).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streamlit Interface&lt;/strong&gt;: Provides a user-friendly chat interface for interacting with the agent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Agent Support&lt;/strong&gt;: Run multiple agents in the service and call by URL path&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asynchronous Design&lt;/strong&gt;: Utilizes async/await for efficient handling of concurrent requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feedback Mechanism&lt;/strong&gt;: Includes a star-based feedback system integrated with LangSmith.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Metadata&lt;/strong&gt;: &lt;code&gt;/info&lt;/code&gt; endpoint provides dynamically configured metadata about the service and available agents and models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker Support&lt;/strong&gt;: Includes Dockerfiles and a docker compose file for easy development and deployment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: Includes robust unit and integration tests for the full repo.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Key Files&lt;/h3&gt; &#xA;&lt;p&gt;The repository is structured as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/agents/&lt;/code&gt;: Defines several agents with different capabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/schema/&lt;/code&gt;: Defines the protocol schema&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/core/&lt;/code&gt;: Core modules including LLM definition and settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/service/service.py&lt;/code&gt;: FastAPI service to serve the agents&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/client/client.py&lt;/code&gt;: Client to interact with the agent service&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/streamlit_app.py&lt;/code&gt;: Streamlit app providing a chat interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/&lt;/code&gt;: Unit and integration tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why LangGraph?&lt;/h2&gt; &#xA;&lt;p&gt;AI agents are increasingly being built with more explicitly structured and tightly controlled &lt;a href=&#34;https://bair.berkeley.edu/blog/2024/02/18/compound-ai-systems/&#34;&gt;Compound AI Systems&lt;/a&gt;, with careful attention to the &lt;a href=&#34;https://blog.langchain.dev/what-is-a-cognitive-architecture/&#34;&gt;cognitive architecture&lt;/a&gt;. At the time of this repo&#39;s creation, LangGraph seems like the most advanced open source framework for building such systems, with a high degree of control as well as support for features like concurrent execution, cycles in the graph, streaming results, built-in observability, and the rich ecosystem around LangChain.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve spent a decent amount of time building with LangChain over the past year and experienced some of the commonly cited pain points. In building this out with LangGraph I found a few similar issues, but overall I like the direction and I&#39;m happy with my choice to use it.&lt;/p&gt; &#xA;&lt;p&gt;With that said, there are several other interesting projects in this space that are worth calling out, and I hope to spend more time building with them soon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex&#34;&gt;LlamaIndex Workflows&lt;/a&gt; and &lt;a href=&#34;https://github.com/run-llama/llama-agents&#34;&gt;llama-agents&lt;/a&gt;: LlamaIndex Workflows launched the day I started working on this. I&#39;ve generally really liked the experience building with LlamaIndex and this looks very promising.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stanfordnlp/dspy&#34;&gt;DSPy&lt;/a&gt;: The DSPy optimizer and approach also seems super interesting and promising. But the creator &lt;a href=&#34;https://github.com/stanfordnlp/dspy/issues/703#issuecomment-2016598529&#34;&gt;has stated&lt;/a&gt; they aren&#39;t focusing on agents yet. I will probably experiment with building some of the specific nodes in more complex agents using DSPy in the future.&lt;/li&gt; &#xA; &lt;li&gt;I know there are more springing up regularly, such as I recently came across &lt;a href=&#34;https://github.com/PrefectHQ/ControlFlow&#34;&gt;Prefect ControlFlow&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup and Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/JoshuaC215/agent-service-toolkit.git&#xA;cd agent-service-toolkit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up environment variables: Create a &lt;code&gt;.env&lt;/code&gt; file in the root directory. At least one LLM API key or configuration is required. See the &lt;a href=&#34;https://raw.githubusercontent.com/JoshuaC215/agent-service-toolkit/main/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt; file&lt;/a&gt; for a full list of available environment variables, including a variety of model provider API keys, header-based authentication, LangSmith tracing, testing and development modes, and OpenWeatherMap API key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can now run the agent service and the Streamlit app locally, either with Docker or just using Python. The Docker setup is recommended for simpler environment setup and immediate reloading of the services when you make changes to your code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Docker Setup&lt;/h3&gt; &#xA;&lt;p&gt;This project includes a Docker setup for easy development and deployment. The &lt;code&gt;compose.yaml&lt;/code&gt; file defines two services: &lt;code&gt;agent_service&lt;/code&gt; and &lt;code&gt;streamlit_app&lt;/code&gt;. The &lt;code&gt;Dockerfile&lt;/code&gt; for each is in their respective directories.&lt;/p&gt; &#xA;&lt;p&gt;For local development, we recommend using &lt;a href=&#34;https://docs.docker.com/compose/file-watch/&#34;&gt;docker compose watch&lt;/a&gt;. This feature allows for a smoother development experience by automatically updating your containers when changes are detected in your source code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have Docker and Docker Compose (&amp;gt;=&lt;a href=&#34;https://docs.docker.com/compose/release-notes/#2230&#34;&gt;2.23.0&lt;/a&gt;) installed on your system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and launch the services in watch mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose watch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The services will now automatically update when you make changes to your code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Changes in the relevant python files and directories will trigger updates for the relevantservices.&lt;/li&gt; &#xA;   &lt;li&gt;NOTE: If you make changes to the &lt;code&gt;pyproject.toml&lt;/code&gt; or &lt;code&gt;uv.lock&lt;/code&gt; files, you will need to rebuild the services by running &lt;code&gt;docker compose up --build&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access the Streamlit app by navigating to &lt;code&gt;http://localhost:8501&lt;/code&gt; in your web browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The agent service API will be available at &lt;code&gt;http://localhost:80&lt;/code&gt;. You can also use the OpenAPI docs at &lt;code&gt;http://localhost:80/redoc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;docker compose down&lt;/code&gt; to stop the services.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This setup allows you to develop and test your changes in real-time without manually restarting the services.&lt;/p&gt; &#xA;&lt;h3&gt;Local development without Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can also run the agent service and the Streamlit app locally without Docker, just using a Python virtual environment.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a virtual environment and install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install uv&#xA;uv sync --frozen&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the FastAPI server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python src/run_service.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a separate terminal, run the Streamlit app:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;streamlit run src/streamlit_app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your browser and navigate to the URL provided by Streamlit (usually &lt;code&gt;http://localhost:8501&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Development with LangGraph Studio&lt;/h3&gt; &#xA;&lt;p&gt;The agent supports &lt;a href=&#34;https://github.com/langchain-ai/langgraph-studio&#34;&gt;LangGraph Studio&lt;/a&gt;, a new IDE for developing agents in LangGraph.&lt;/p&gt; &#xA;&lt;p&gt;You can simply install LangGraph Studio, add your &lt;code&gt;.env&lt;/code&gt; file to the root directory as described above, and then launch LangGraph studio pointed at the root directory. Customize &lt;code&gt;langgraph.json&lt;/code&gt; as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Currently the tests need to be run using the local development without Docker setup. To run the tests for the agent service:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you&#39;re in the project root directory and have activated your virtual environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the development dependencies and pre-commit hooks:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install uv&#xA;uv sync --frozen&#xA;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the tests using pytest:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;To customize the agent for your own use case:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add your new agent to the &lt;code&gt;src/agents&lt;/code&gt; directory. You can copy &lt;code&gt;research_assistant.py&lt;/code&gt; or &lt;code&gt;chatbot.py&lt;/code&gt; and modify it to change the agent&#39;s behavior and tools.&lt;/li&gt; &#xA; &lt;li&gt;Import and add your new agent to the &lt;code&gt;agents&lt;/code&gt; dictionary in &lt;code&gt;src/agents/agents.py&lt;/code&gt;. Your agent can be called by &lt;code&gt;/&amp;lt;your_agent_name&amp;gt;/invoke&lt;/code&gt; or &lt;code&gt;/&amp;lt;your_agent_name&amp;gt;/stream&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Adjust the Streamlit interface in &lt;code&gt;src/streamlit_app.py&lt;/code&gt; to match your agent&#39;s capabilities.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building other apps on the AgentClient&lt;/h2&gt; &#xA;&lt;p&gt;The repo includes a generic &lt;code&gt;src/client/client.AgentClient&lt;/code&gt; that can be used to interact with the agent service. This client is designed to be flexible and can be used to build other apps on top of the agent. It supports both synchronous and asynchronous invocations, and streaming and non-streaming requests.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;src/run_client.py&lt;/code&gt; file for full examples of how to use the &lt;code&gt;AgentClient&lt;/code&gt;. A quick example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from client import AgentClient&#xA;client = AgentClient()&#xA;&#xA;response = client.invoke(&#34;Tell me a brief joke?&#34;)&#xA;response.pretty_print()&#xA;# ================================== Ai Message ==================================&#xA;#&#xA;# A man walked into a library and asked the librarian, &#34;Do you have any books on Pavlov&#39;s dogs and Schrödinger&#39;s cat?&#34;&#xA;# The librarian replied, &#34;It rings a bell, but I&#39;m not sure if it&#39;s here or not.&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get LlamaGuard working for content moderation (anyone know a reliable and fast hosted version?)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add more sophisticated tools for the research assistant&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Increase test coverage and add CI pipeline&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add support for multiple agents running on the same service, including non-chat agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Service metadata endpoint &lt;code&gt;/info&lt;/code&gt; and dynamic app configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More ideas? File an issue or create a discussion!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
</feed>