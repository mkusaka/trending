<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:28:36Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sissbruecker/linkding</title>
    <updated>2024-09-15T01:28:36Z</updated>
    <id>tag:github.com,2024-09-15:/sissbruecker/linkding</id>
    <link href="https://github.com/sissbruecker/linkding" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Self-hosted bookmark manager that is designed be to be minimal, fast, and easy to set up using Docker.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://github.com/sissbruecker/linkding&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/header.svg?sanitize=true&#34; height=&#34;50&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#using-docker&#34;&gt;Using Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#using-docker-compose&#34;&gt;Using Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#user-setup&#34;&gt;User Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#reverse-proxy-setup&#34;&gt;Reverse Proxy Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#managed-hosting-options&#34;&gt;Managed Hosting Options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#browser-extension&#34;&gt;Browser Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#acknowledgements--donations&#34;&gt;Acknowledgements + Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;linkding is a bookmark manager that you can host yourself. It&#39;s designed be to be minimal, fast, and easy to set up using Docker.&lt;/p&gt; &#xA;&lt;p&gt;The name comes from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;link&lt;/em&gt; which is often used as a synonym for URLs and bookmarks in common language&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Ding&lt;/em&gt; which is German for thing&lt;/li&gt; &#xA; &lt;li&gt;...so basically something for managing your links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Feature Overview:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean UI optimized for readability&lt;/li&gt; &#xA; &lt;li&gt;Organize bookmarks with tags&lt;/li&gt; &#xA; &lt;li&gt;Bulk editing, Markdown notes, read it later functionality&lt;/li&gt; &#xA; &lt;li&gt;Share bookmarks with other users or guests&lt;/li&gt; &#xA; &lt;li&gt;Automatically provides titles, descriptions and icons of bookmarked websites&lt;/li&gt; &#xA; &lt;li&gt;Automatically archive websites, either as local HTML file or on Internet Archive&lt;/li&gt; &#xA; &lt;li&gt;Import and export bookmarks in Netscape HTML format&lt;/li&gt; &#xA; &lt;li&gt;Installable as a Progressive Web App (PWA)&lt;/li&gt; &#xA; &lt;li&gt;Extensions for &lt;a href=&#34;https://addons.mozilla.org/firefox/addon/linkding-extension/&#34;&gt;Firefox&lt;/a&gt; and &lt;a href=&#34;https://chrome.google.com/webstore/detail/linkding-extension/beakmhbijpdhipnjhnclmhgjlddhidpe&#34;&gt;Chrome&lt;/a&gt;, as well as a bookmarklet&lt;/li&gt; &#xA; &lt;li&gt;SSO support via OIDC or authentication proxies&lt;/li&gt; &#xA; &lt;li&gt;REST API for developing 3rd party apps&lt;/li&gt; &#xA; &lt;li&gt;Admin panel for user self-service and raw data access&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; &lt;a href=&#34;https://demo.linkding.link/&#34;&gt;https://demo.linkding.link/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Screenshot:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/linkding-screenshot.png?raw=true&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;linkding is designed to be run with container solutions like &lt;a href=&#34;https://docs.docker.com/get-started/&#34;&gt;Docker&lt;/a&gt;. The Docker image is compatible with ARM platforms, so it can be run on a Raspberry Pi.&lt;/p&gt; &#xA;&lt;p&gt;linkding uses an SQLite database by default. Alternatively linkding supports PostgreSQL, see the &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/Options.md#LD_DB_ENGINE&#34;&gt;database options&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;The Docker image comes in several variants. To use a different image than the default, replace &lt;code&gt;latest&lt;/code&gt; with the desired tag in the commands below, or in the docker-compose file.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;latest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides the basic functionality of linkding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;latest-plus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Includes feature for archiving websites as HTML snapshots &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Significantly larger image size as it includes a Chromium installation&lt;/li&gt; &#xA;     &lt;li&gt;Requires more runtime memory to run Chromium&lt;/li&gt; &#xA;     &lt;li&gt;Requires more disk space for storing HTML snapshots&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;latest-alpine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;latest&lt;/code&gt;, but based on Alpine Linux. ðŸ§ª Experimental&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;latest-plus-alpine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;latest-plus&lt;/code&gt;, but based on Alpine Linux. ðŸ§ª Experimental&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To install linkding using Docker you can just run the image from &lt;a href=&#34;https://hub.docker.com/repository/docker/sissbruecker/linkding&#34;&gt;Docker Hub&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --name linkding -p 9090:9090 -v {host-data-folder}:/etc/linkding/data -d sissbruecker/linkding:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the command above, replace the &lt;code&gt;{host-data-folder}&lt;/code&gt; placeholder with an absolute path to a folder on your host system where you want to store the linkding database.&lt;/p&gt; &#xA;&lt;p&gt;If everything completed successfully, the application should now be running and can be accessed at &lt;a href=&#34;http://localhost:9090&#34;&gt;http://localhost:9090&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To upgrade the installation to a new version, remove the existing container, pull the latest version of the linkding Docker image, and then start a new container using the same command that you used above. There is a &lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/install-linkding.sh&#34;&gt;shell script&lt;/a&gt; available to automate these steps. The script can be configured using environment variables, or you can just modify it.&lt;/p&gt; &#xA;&lt;p&gt;To complete the setup, you still have to &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#user-setup&#34;&gt;create an initial user&lt;/a&gt;, so that you can access your installation.&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;To install linkding using &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, you can use the &lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docker-compose.yml&#34;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; file. Copy the &lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/.env.sample&#34;&gt;&lt;code&gt;.env.sample&lt;/code&gt;&lt;/a&gt; file to &lt;code&gt;.env&lt;/code&gt;, configure the parameters, and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To complete the setup, you still have to &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#user-setup&#34;&gt;create an initial user&lt;/a&gt;, so that you can access your installation.&lt;/p&gt; &#xA;&lt;h3&gt;User Setup&lt;/h3&gt; &#xA;&lt;p&gt;For security reasons, the linkding Docker image does not provide an initial user, so you have to create one after setting up an installation. To do so, replace the credentials in the following command and run it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec -it linkding python manage.py createsuperuser --username=joe --email=joe@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose exec linkding python manage.py createsuperuser --username=joe --email=joe@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command will prompt you for a secure password. After the command has completed you can start using the application by logging into the UI with your credentials.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can automatically create an initial superuser on startup using the &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/Options.md#LD_SUPERUSER_NAME&#34;&gt;&lt;code&gt;LD_SUPERUSER_NAME&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reverse Proxy Setup&lt;/h3&gt; &#xA;&lt;p&gt;When using a reverse proxy, such as Nginx or Apache, you may need to configure your proxy to correctly forward the &lt;code&gt;Host&lt;/code&gt; header to linkding, otherwise certain requests, such as login, might fail.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Apache&lt;/summary&gt; &#xA; &lt;p&gt;Apache2 does not change the headers by default, and should not need additional configuration.&lt;/p&gt; &#xA; &lt;p&gt;An example virtual host that proxies to linkding might look like:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:9100&amp;gt;&#xA;    &amp;lt;Proxy *&amp;gt;&#xA;        Order deny,allow&#xA;        Allow from all&#xA;    &amp;lt;/Proxy&amp;gt;&#xA;&#xA;    ProxyPass / http://linkding:9090/&#xA;    ProxyPassReverse / http://linkding:9090/&#xA;&amp;lt;/VirtualHost&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For a full example, see the docker-compose configuration in &lt;a href=&#34;https://github.com/jhauris/linkding/tree/apache2-reverse-proxy&#34;&gt;jhauris/apache2-reverse-proxy&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you still run into CSRF issues, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/Options.md#LD_CSRF_TRUSTED_ORIGINS&#34;&gt;&lt;code&gt;LD_CSRF_TRUSTED_ORIGINS&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Caddy 2&lt;/summary&gt; &#xA; &lt;p&gt;Caddy does not change the headers by default, and should not need any further configuration.&lt;/p&gt; &#xA; &lt;p&gt;If you still run into CSRF issues, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/Options.md#LD_CSRF_TRUSTED_ORIGINS&#34;&gt;&lt;code&gt;LD_CSRF_TRUSTED_ORIGINS&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nginx&lt;/summary&gt; &#xA; &lt;p&gt;Nginx by default rewrites the &lt;code&gt;Host&lt;/code&gt; header to whatever URL is used in the &lt;code&gt;proxy_pass&lt;/code&gt; directive. To forward the correct headers to linkding, add the following directives to the location block of your Nginx config:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;location /linkding {&#xA;    ...&#xA;    proxy_set_header Host $host;&#xA;    proxy_set_header X-Forwarded-Proto $scheme;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Instead of configuring header forwarding in your proxy, you can also configure the URL from which you want to access your linkding instance with the &lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/Options.md#LD_CSRF_TRUSTED_ORIGINS&#34;&gt;&lt;code&gt;LD_CSRF_TRUSTED_ORIGINS&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Managed Hosting Options&lt;/h3&gt; &#xA;&lt;p&gt;Self-hosting web applications still requires a lot of technical know-how and commitment to maintenance, in order to keep everything up-to-date and secure. This section is intended to provide simple alternatives in form of managed hosting solutions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fspoettel/linkding-on-fly&#34;&gt;linkding on fly.io&lt;/a&gt; - Guide for hosting a linkding installation on &lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt;. By &lt;a href=&#34;https://github.com/fspoettel&#34;&gt;fspoettel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pikapods.com/&#34;&gt;PikaPods.com&lt;/a&gt; - Managed hosting for linkding, EU and US regions available. &lt;a href=&#34;https://www.pikapods.com/pods?run=linkding&#34;&gt;1-click setup link&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/#pikapods&#34;&gt;Disclosure&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://caprover.com/&#34;&gt;CapRover&lt;/a&gt; - Linkding is included as a default one-click app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tianheg/linkding-on-railway&#34;&gt;linkding on railway.app&lt;/a&gt; - Guide for hosting a linkding installation on &lt;a href=&#34;https://railway.app/&#34;&gt;railway.app&lt;/a&gt;. By &lt;a href=&#34;https://github.com/tianheg&#34;&gt;tianheg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Document&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/Options.md&#34;&gt;Options&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists available options, and describes how to apply them&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/backup.md&#34;&gt;Backups&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How to backup the linkding database&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advice for troubleshooting common problems&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/how-to.md&#34;&gt;How To&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tips and tricks around using linking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/shortcuts.md&#34;&gt;Keyboard shortcuts&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of available keyboard shortcuts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/Admin.md&#34;&gt;Admin documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;User documentation for the Admin UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding/raw/master/docs/API.md&#34;&gt;API documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Documentation for the REST API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Browser Extension&lt;/h2&gt; &#xA;&lt;p&gt;linkding comes with an official browser extension that allows to quickly add bookmarks, and search bookmarks through the browser&#39;s address bar. You can get the extension here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/firefox/addon/linkding-extension/&#34;&gt;Mozilla Addon Store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/linkding-extension/beakmhbijpdhipnjhnclmhgjlddhidpe&#34;&gt;Chrome Web Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The extension is open-source as well, and can be found &lt;a href=&#34;https://github.com/sissbruecker/linkding-extension&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;This section lists community projects around using linkding, in alphabetical order. If you have a project that you want to share with the linkding community, feel free to submit a PR to add your project to this section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bachya/aiolinkding&#34;&gt;aiolinkding&lt;/a&gt; A Python3, async library to interact with the linkding REST API. By &lt;a href=&#34;https://github.com/bachya&#34;&gt;bachya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/strubbl/feed2linkding&#34;&gt;feed2linkding&lt;/a&gt; A commandline utility to add all web feed item links to linkding via API call. By &lt;a href=&#34;https://github.com/Strubbl&#34;&gt;Strubbl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charts.pascaliske.dev/charts/linkding/&#34;&gt;Helm Chart&lt;/a&gt; Helm Chart for deploying linkding inside a Kubernetes cluster. By &lt;a href=&#34;https://github.com/pascaliske&#34;&gt;pascaliske&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/andrewdolphin/a7dff49505e588d940bec55132fab8ad&#34;&gt;iOS Shortcut using API and Tagging&lt;/a&gt; An iOS shortcut using the Linkding API (no extra logins required) that pulls previously used tags and allows tagging at the time of link creation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jzck/linkding-k8s-s3&#34;&gt;k8s + s3&lt;/a&gt; - Setup for hosting stateless linkding on k8s with sqlite replicated to s3. By &lt;a href=&#34;https://github.com/jzck&#34;&gt;jzck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cmsax/linka&#34;&gt;Linka!&lt;/a&gt; Web app (also a PWA) for quickly searching &amp;amp; opening bookmarks in linkding, support multi keywords, exclude mode and other advance options. By &lt;a href=&#34;https://github.com/cmsax&#34;&gt;cmsax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bachya/linkding-cli&#34;&gt;linkding-cli&lt;/a&gt; A command-line interface (CLI) to interact with the linkding REST API. Powered by &lt;a href=&#34;https://github.com/bachya/aiolinkding&#34;&gt;aiolinkding&lt;/a&gt;. By &lt;a href=&#34;https://github.com/bachya&#34;&gt;bachya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeroenpardon/linkding-extension&#34;&gt;linkding-extension&lt;/a&gt; Chromium compatible extension that wraps the linkding bookmarklet. Tested with Chrome, Edge, Brave. By &lt;a href=&#34;https://github.com/jeroenpardon&#34;&gt;jeroenpardon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fivefold/linkding-injector&#34;&gt;linkding-injector&lt;/a&gt; Injects search results from linkding into the sidebar of search pages like google and duckduckgo. Tested with Firefox and Chrome. By &lt;a href=&#34;https://github.com/Fivefold&#34;&gt;Fivefold&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JGeek00/linkdy&#34;&gt;Linkdy&lt;/a&gt;: An open source mobile and desktop (not yet) client created with Flutter. Available at the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.jgeek00.linkdy&#34;&gt;Google Play Store&lt;/a&gt;. By &lt;a href=&#34;https://github.com/JGeek00&#34;&gt;JGeek00&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/linkthing/id1666031776&#34;&gt;LinkThing&lt;/a&gt; An iOS client for linkding. By &lt;a href=&#34;https://github.com/amoscardino&#34;&gt;amoscardino&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/ukcuddlyguy/336dd7339e6d35fc64a75ccfc9323c66&#34;&gt;Open all links bookmarklet&lt;/a&gt; A browser bookmarklet to open all links on the current Linkding page in new tabs. By &lt;a href=&#34;https://github.com/ukcuddlyguy&#34;&gt;ukcuddlyguy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fibelatti/pinboard-kotlin&#34;&gt;Pinkt&lt;/a&gt; An Android client for linkding. By &lt;a href=&#34;https://github.com/fibelatti&#34;&gt;fibelatti&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/gingerbeardman/f0b42502f3bc9344e92ce63afd4360d3&#34;&gt;Postman collection&lt;/a&gt; a group of saved request templates for API testing. By &lt;a href=&#34;https://github.com/gingerbeardman&#34;&gt;gingerbeardman&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements + Donations&lt;/h2&gt; &#xA;&lt;h3&gt;PikaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.pikapods.com/&#34;&gt;PikaPods&lt;/a&gt; has a revenue sharing agreement with this project, sharing some of their revenue from hosting linkding instances. I do not intend to profit from this project financially, so I am in turn donating that revenue. Big thanks to PikaPods for making this possible.&lt;/p&gt; &#xA;&lt;p&gt;See the table below for a list of donations.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Amount&lt;/th&gt; &#xA;   &lt;th&gt;Donated to&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pikapods.com/&#34;&gt;PikaPods&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linkding hosting June 2022 - September 2023&lt;/td&gt; &#xA;   &lt;td&gt;$163.50&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sissbruecker/linkding/master/docs/donations/2023-10-11-internet-archive.png&#34;&gt;Internet Archive&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;JetBrains&lt;/h3&gt; &#xA;&lt;p&gt;JetBrains has previously provided an open-source license of &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; for the development of linkding.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The application is open source, so you are free to modify or contribute. The application is built using the Django web framework. You can get started by checking out the excellent &lt;a href=&#34;https://docs.djangoproject.com/en/4.1/&#34;&gt;Django docs&lt;/a&gt;. The &lt;code&gt;bookmarks&lt;/code&gt; folder contains the actual bookmark application, &lt;code&gt;siteroot&lt;/code&gt; is the Django root application. Other than that the code should be self-explanatory / standard Django stuff ðŸ™‚.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.10&lt;/li&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Create a virtual environment for the application (&lt;a href=&#34;https://docs.python.org/3/tutorial/venv.html&#34;&gt;https://docs.python.org/3/tutorial/venv.html&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv ~/environments/linkding&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Activate the environment for your shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source ~/environments/linkding/bin/activate[.csh|.fish]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Within the active environment install the application dependencies from the application folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install -r requirements.txt -r requirements.dev.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install frontend dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p data&#xA;python3 manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a user for the frontend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 manage.py createsuperuser --username=joe --email=joe@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the Node.js development server (used for compiling JavaScript components like tag auto-completion) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the Django development server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 manage.py runserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The frontend is now available under &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run all tests with pytest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Format Python code with black, and JavaScript code with prettier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DevContainers&lt;/h3&gt; &#xA;&lt;p&gt;This repository also supports DevContainers: &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=git@github.com:sissbruecker/linkding.git&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once checked out, only the following commands are required to get started:&lt;/p&gt; &#xA;&lt;p&gt;Create a user for the frontend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 manage.py createsuperuser --username=joe --email=joe@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the Node.js development server (used for compiling JavaScript components like tag auto-completion) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the Django development server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 manage.py runserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The frontend is now available under &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xyflow/xyflow</title>
    <updated>2024-09-15T01:28:36Z</updated>
    <id>tag:github.com,2024-09-15:/xyflow/xyflow</id>
    <link href="https://github.com/xyflow/xyflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Flow |Â Svelte Flow - Powerful open source libraries for building node-based UIs with React (https://reactflow.dev) or Svelte (https://svelteflow.dev). Ready out-of-the-box and infinitely customizable.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2857535/279643999-ffda9f91-6b6d-447d-82be-fcbd6103edb6.svg#gh-light-mode-only&#34; alt=&#34;xyflow-header&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2857535/279644026-a01c231c-6c6e-4b41-96e0-a85c75c9acee.svg#gh-dark-mode-only&#34; alt=&#34;xyflow-header-dark&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/wbkd/react-flow?color=%23ff0072&#34; alt=&#34;GitHub License MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/reactflow?color=%23FF0072&amp;amp;label=React%20Flow%20downloads&#34; alt=&#34;npm downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/@xyflow/svelte?color=%23FF3E00&amp;amp;label=Svelte%20Flow%20downloads&#34; alt=&#34;npm downloads&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Powerful open source libraries for building node-based UIs with React or Svelte. Ready out-of-the-box and infinitely customizable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://reactflow.dev/&#34;&gt;React Flow&lt;/a&gt; Â· &lt;a href=&#34;https://svelteflow.dev/&#34;&gt;Svelte Flow&lt;/a&gt; Â· &lt;a href=&#34;https://reactflow.dev/pro&#34;&gt;React Flow Pro&lt;/a&gt; Â· &lt;a href=&#34;https://discord.gg/Bqt6xrs&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;The xyflow mono repo&lt;/h2&gt; &#xA;&lt;p&gt;The xyflow repository is the home of four packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React Flow 12 &lt;code&gt;@xyflow/react&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/packages/react&#34;&gt;packages/react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React Flow 11 &lt;code&gt;reactflow&lt;/code&gt; &lt;a href=&#34;https://github.com/xyflow/xyflow/tree/v11&#34;&gt;v11 branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Svelte Flow &lt;code&gt;@xyflow/svelte&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/packages/svelte&#34;&gt;packages/svelte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shared helper library &lt;code&gt;@xyflow/system&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/packages/system&#34;&gt;packages/system&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commercial usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Are you using React Flow or Svelte Flow for a personal project?&lt;/strong&gt; Great! No sponsorship needed, you can support us by reporting any bugs you find, sending us screenshots of your projects, and starring us on Github ðŸŒŸ&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Are you using React Flow or Svelte Flow at your organization and making money from it?&lt;/strong&gt; Awesome! We rely on your support to keep our libraries developed and maintained under an MIT License, just how we like it. For React Flow you can do that on the &lt;a href=&#34;https://reactflow.dev/pro&#34;&gt;React Flow Pro website&lt;/a&gt; and for both of our libraries you can do it through &lt;a href=&#34;https://github.com/sponsors/xyflow&#34;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The best way to get started is to check out the &lt;a href=&#34;https://reactflow.dev/learn&#34;&gt;React Flow&lt;/a&gt; or &lt;a href=&#34;https://svelteflow.dev/learn&#34;&gt;Svelte Flow&lt;/a&gt; learn section. However if you want to get a sneak peek of how to install and use the libraries you can see it here:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;React Flow&lt;/strong&gt; basic usage&lt;/summary&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @xyflow/react&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Basic usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useCallback } from &#39;react&#39;;&#xA;import {&#xA;ReactFlow,&#xA;MiniMap,&#xA;Controls,&#xA;Background,&#xA;useNodesState,&#xA;useEdgesState,&#xA;addEdge,&#xA;} from &#39;@xyflow/react&#39;;&#xA;&#xA;import &#39;@xyflow/react/dist/style.css&#39;;&#xA;&#xA;const initialNodes = [&#xA;{ id: &#39;1&#39;, position: { x: 0, y: 0 }, data: { label: &#39;1&#39; } },&#xA;{ id: &#39;2&#39;, position: { x: 0, y: 100 }, data: { label: &#39;2&#39; } },&#xA;];&#xA;&#xA;const initialEdges = [{ id: &#39;e1-2&#39;, source: &#39;1&#39;, target: &#39;2&#39; }];&#xA;&#xA;function Flow() {&#xA;const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);&#xA;const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);&#xA;&#xA;const onConnect = useCallback((params) =&amp;gt; setEdges((eds) =&amp;gt; addEdge(params, eds)), [setEdges]);&#xA;&#xA;return (&#xA;  &amp;lt;ReactFlow&#xA;    nodes={nodes}&#xA;    edges={edges}&#xA;    onNodesChange={onNodesChange}&#xA;    onEdgesChange={onEdgesChange}&#xA;    onConnect={onConnect}&#xA;  &amp;gt;&#xA;    &amp;lt;MiniMap /&amp;gt;&#xA;    &amp;lt;Controls /&amp;gt;&#xA;    &amp;lt;Background /&amp;gt;&#xA;  &amp;lt;/ReactFlow&amp;gt;&#xA;);&#xA;}&#xA;&#xA;export default Flow;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Svelte Flow&lt;/strong&gt; basic usage&lt;/summary&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @xyflow/svelte&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Basic usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-svelte&#34;&gt;&amp;lt;script lang=&#34;ts&#34;&amp;gt;&#xA;import { writable } from &#39;svelte/store&#39;;&#xA;import {&#xA;  SvelteFlow,&#xA;  Controls,&#xA;  Background,&#xA;  BackgroundVariant,&#xA;  MiniMap,&#xA;} from &#39;@xyflow/svelte&#39;;&#xA;&#xA;import &#39;@xyflow/svelte/dist/style.css&#39;&#xA;&#xA;const nodes = writable([&#xA;  {&#xA;    id: &#39;1&#39;,&#xA;    type: &#39;input&#39;,&#xA;    data: { label: &#39;Input Node&#39; },&#xA;    position: { x: 0, y: 0 }&#xA;  },&#xA;  {&#xA;    id: &#39;2&#39;,&#xA;    type: &#39;custom&#39;,&#xA;    data: { label: &#39;Node&#39; },&#xA;    position: { x: 0, y: 150 }&#xA;  }&#xA;]);&#xA;&#xA;const edges = writable([&#xA;  {&#xA;    id: &#39;1-2&#39;,&#xA;    type: &#39;default&#39;,&#xA;    source: &#39;1&#39;,&#xA;    target: &#39;2&#39;,&#xA;    label: &#39;Edge Text&#39;&#xA;  }&#xA;]);&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;SvelteFlow&#xA;{nodes}&#xA;{edges}&#xA;fitView&#xA;on:nodeclick={(event) =&amp;gt; console.log(&#39;on node click&#39;, event)}&#xA;&amp;gt;&#xA;&amp;lt;Controls /&amp;gt;&#xA;&amp;lt;Background variant={BackgroundVariant.Dots} /&amp;gt;&#xA;&amp;lt;MiniMap /&amp;gt;&#xA;&amp;lt;/SvelteFlow&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;For releasing packages we are using &lt;a href=&#34;https://github.com/changesets/changesets&#34;&gt;changesets&lt;/a&gt; in combination with the &lt;a href=&#34;https://github.com/changesets/action&#34;&gt;changeset Github action&lt;/a&gt;. The rough idea is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create PRs for new features, updates and fixes (with a changeset if relevant for changelog)&lt;/li&gt; &#xA; &lt;li&gt;merge into main&lt;/li&gt; &#xA; &lt;li&gt;changset creates a PR that bumps all packages based on the changesets&lt;/li&gt; &#xA; &lt;li&gt;merge changeset PR if you want to release to Github and npm&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;The xyflow team&lt;/h2&gt; &#xA;&lt;p&gt;React Flow and Svelte Flow are maintained by the team behind &lt;a href=&#34;https://xyflow.com&#34;&gt;xyflow&lt;/a&gt;. If you need help or want to talk to us about a collaboration, reach out through our&amp;nbsp;&lt;a href=&#34;https://xyflow.com/contact&#34;&gt;contact form&lt;/a&gt;&amp;nbsp;or by joining our &lt;a href=&#34;https://discord.gg/Bqt6xrs&#34;&gt;Discord Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Christopher â€¢&amp;nbsp;&lt;a href=&#34;https://twitter.com/chrtze&#34;&gt;Twitter&lt;/a&gt;&amp;nbsp;â€¢&amp;nbsp;&lt;a href=&#34;https://github.com/chrtze&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hayleigh â€¢&amp;nbsp;&lt;a href=&#34;https://twitter.com/hayleighdotdev&#34;&gt;Twitter&lt;/a&gt;&amp;nbsp;â€¢&amp;nbsp;&lt;a href=&#34;https://github.com/hayleigh-dot-dev&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;John â€¢&amp;nbsp;&lt;a href=&#34;https://johnrobbdesign.com/&#34;&gt;Website&lt;/a&gt;&amp;nbsp;â€¢&amp;nbsp;&lt;a href=&#34;https://mastodon.social/@johnrobbjr&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Moritz â€¢&amp;nbsp;&lt;a href=&#34;https://twitter.com/moklick&#34;&gt;Twitter&lt;/a&gt;&amp;nbsp;â€¢&amp;nbsp;&lt;a href=&#34;https://github.com/moklick&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Peter â€¢&amp;nbsp;&lt;a href=&#34;https://github.com/peterkogo&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;React Flow and Svelte Flow are &lt;a href=&#34;https://raw.githubusercontent.com/xyflow/xyflow/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/jax</title>
    <updated>2024-09-15T01:28:36Z</updated>
    <id>tag:github.com,2024-09-15:/google/jax</id>
    <link href="https://github.com/google/jax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Composable transformations of Python+NumPy programs: differentiate, vectorize, JIT to GPU/TPU, and more&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/google/jax/main/images/jax_logo_250px.png&#34; alt=&#34;logo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Transformable numerical computing at scale&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/jax/actions/workflows/ci-build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Continuous integration&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/jax&#34; alt=&#34;PyPI version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#quickstart-colab-in-the-cloud&#34;&gt;&lt;strong&gt;Quickstart&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#transformations&#34;&gt;&lt;strong&gt;Transformations&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#installation&#34;&gt;&lt;strong&gt;Install guide&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#neural-network-libraries&#34;&gt;&lt;strong&gt;Neural net libraries&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://jax.readthedocs.io/en/latest/changelog.html&#34;&gt;&lt;strong&gt;Change logs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://jax.readthedocs.io/en/latest/&#34;&gt;&lt;strong&gt;Reference docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is JAX?&lt;/h2&gt; &#xA;&lt;p&gt;JAX is a Python library for accelerator-oriented array computation and program transformation, designed for high-performance numerical computing and large-scale machine learning.&lt;/p&gt; &#xA;&lt;p&gt;With its updated version of &lt;a href=&#34;https://github.com/hips/autograd&#34;&gt;Autograd&lt;/a&gt;, JAX can automatically differentiate native Python and NumPy functions. It can differentiate through loops, branches, recursion, and closures, and it can take derivatives of derivatives of derivatives. It supports reverse-mode differentiation (a.k.a. backpropagation) via &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#automatic-differentiation-with-grad&#34;&gt;&lt;code&gt;grad&lt;/code&gt;&lt;/a&gt; as well as forward-mode differentiation, and the two can be composed arbitrarily to any order.&lt;/p&gt; &#xA;&lt;p&gt;Whatâ€™s new is that JAX uses &lt;a href=&#34;https://www.tensorflow.org/xla&#34;&gt;XLA&lt;/a&gt; to compile and run your NumPy programs on GPUs and TPUs. Compilation happens under the hood by default, with library calls getting just-in-time compiled and executed. But JAX also lets you just-in-time compile your own Python functions into XLA-optimized kernels using a one-function API, &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#compilation-with-jit&#34;&gt;&lt;code&gt;jit&lt;/code&gt;&lt;/a&gt;. Compilation and automatic differentiation can be composed arbitrarily, so you can express sophisticated algorithms and get maximal performance without leaving Python. You can even program multiple GPUs or TPU cores at once using &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#spmd-programming-with-pmap&#34;&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/a&gt;, and differentiate through the whole thing.&lt;/p&gt; &#xA;&lt;p&gt;Dig a little deeper, and you&#39;ll see that JAX is really an extensible system for &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#transformations&#34;&gt;composable function transformations&lt;/a&gt;. Both &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#automatic-differentiation-with-grad&#34;&gt;&lt;code&gt;grad&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#compilation-with-jit&#34;&gt;&lt;code&gt;jit&lt;/code&gt;&lt;/a&gt; are instances of such transformations. Others are &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#auto-vectorization-with-vmap&#34;&gt;&lt;code&gt;vmap&lt;/code&gt;&lt;/a&gt; for automatic vectorization and &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#spmd-programming-with-pmap&#34;&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/a&gt; for single-program multiple-data (SPMD) parallel programming of multiple accelerators, with more to come.&lt;/p&gt; &#xA;&lt;p&gt;This is a research project, not an official Google product. Expect bugs and &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html&#34;&gt;sharp edges&lt;/a&gt;. Please help by trying it out, &lt;a href=&#34;https://github.com/google/jax/issues&#34;&gt;reporting bugs&lt;/a&gt;, and letting us know what you think!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jax.numpy as jnp&#xA;from jax import grad, jit, vmap&#xA;&#xA;def predict(params, inputs):&#xA;  for W, b in params:&#xA;    outputs = jnp.dot(inputs, W) + b&#xA;    inputs = jnp.tanh(outputs)  # inputs to the next layer&#xA;  return outputs                # no activation on last layer&#xA;&#xA;def loss(params, inputs, targets):&#xA;  preds = predict(params, inputs)&#xA;  return jnp.sum((preds - targets)**2)&#xA;&#xA;grad_loss = jit(grad(loss))  # compiled gradient evaluation function&#xA;perex_grads = jit(vmap(grad_loss, in_axes=(None, 0, 0)))  # fast per-example grads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#quickstart-colab-in-the-cloud&#34;&gt;Quickstart: Colab in the Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#transformations&#34;&gt;Transformations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#current-gotchas&#34;&gt;Current gotchas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#neural-network-libraries&#34;&gt;Neural net libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#citing-jax&#34;&gt;Citing JAX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/#reference-documentation&#34;&gt;Reference documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart: Colab in the Cloud&lt;/h2&gt; &#xA;&lt;p&gt;Jump right in using a notebook in your browser, connected to a Google Cloud GPU. Here are some starter notebooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/quickstart.html&#34;&gt;The basics: NumPy on accelerators, &lt;code&gt;grad&lt;/code&gt; for differentiation, &lt;code&gt;jit&lt;/code&gt; for compilation, and &lt;code&gt;vmap&lt;/code&gt; for vectorization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/neural_network_with_tfds_data.ipynb&#34;&gt;Training a Simple Neural Network, with TensorFlow Dataset Data Loading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;JAX now runs on Cloud TPUs.&lt;/strong&gt; To try out the preview, see the &lt;a href=&#34;https://github.com/google/jax/tree/main/cloud_tpu_colabs&#34;&gt;Cloud TPU Colabs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a deeper dive into JAX:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/autodiff_cookbook.html&#34;&gt;The Autodiff Cookbook, Part 1: easy and powerful automatic differentiation in JAX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html&#34;&gt;Common gotchas and sharp edges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/google/jax/tree/main/docs/notebooks&#34;&gt;full list of notebooks&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Transformations&lt;/h2&gt; &#xA;&lt;p&gt;At its core, JAX is an extensible system for transforming numerical functions. Here are four transformations of primary interest: &lt;code&gt;grad&lt;/code&gt;, &lt;code&gt;jit&lt;/code&gt;, &lt;code&gt;vmap&lt;/code&gt;, and &lt;code&gt;pmap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic differentiation with &lt;code&gt;grad&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;JAX has roughly the same API as &lt;a href=&#34;https://github.com/hips/autograd&#34;&gt;Autograd&lt;/a&gt;. The most popular function is &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#jax.grad&#34;&gt;&lt;code&gt;grad&lt;/code&gt;&lt;/a&gt; for reverse-mode gradients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jax import grad&#xA;import jax.numpy as jnp&#xA;&#xA;def tanh(x):  # Define a function&#xA;  y = jnp.exp(-2.0 * x)&#xA;  return (1.0 - y) / (1.0 + y)&#xA;&#xA;grad_tanh = grad(tanh)  # Obtain its gradient function&#xA;print(grad_tanh(1.0))   # Evaluate it at x = 1.0&#xA;# prints 0.4199743&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can differentiate to any order with &lt;code&gt;grad&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(grad(grad(grad(tanh)))(1.0))&#xA;# prints 0.62162673&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced autodiff, you can use &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#jax.vjp&#34;&gt;&lt;code&gt;jax.vjp&lt;/code&gt;&lt;/a&gt; for reverse-mode vector-Jacobian products and &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#jax.jvp&#34;&gt;&lt;code&gt;jax.jvp&lt;/code&gt;&lt;/a&gt; for forward-mode Jacobian-vector products. The two can be composed arbitrarily with one another, and with other JAX transformations. Here&#39;s one way to compose those to make a function that efficiently computes &lt;a href=&#34;https://jax.readthedocs.io/en/latest/_autosummary/jax.hessian.html#jax.hessian&#34;&gt;full Hessian matrices&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jax import jit, jacfwd, jacrev&#xA;&#xA;def hessian(fun):&#xA;  return jit(jacfwd(jacrev(fun)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with &lt;a href=&#34;https://github.com/hips/autograd&#34;&gt;Autograd&lt;/a&gt;, you&#39;re free to use differentiation with Python control structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abs_val(x):&#xA;  if x &amp;gt; 0:&#xA;    return x&#xA;  else:&#xA;    return -x&#xA;&#xA;abs_val_grad = grad(abs_val)&#xA;print(abs_val_grad(1.0))   # prints 1.0&#xA;print(abs_val_grad(-1.0))  # prints -1.0 (abs_val is re-evaluated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation&#34;&gt;reference docs on automatic differentiation&lt;/a&gt; and the &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/autodiff_cookbook.html&#34;&gt;JAX Autodiff Cookbook&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Compilation with &lt;code&gt;jit&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use XLA to compile your functions end-to-end with &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit&#34;&gt;&lt;code&gt;jit&lt;/code&gt;&lt;/a&gt;, used either as an &lt;code&gt;@jit&lt;/code&gt; decorator or as a higher-order function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jax.numpy as jnp&#xA;from jax import jit&#xA;&#xA;def slow_f(x):&#xA;  # Element-wise ops see a large benefit from fusion&#xA;  return x * x + x * 2.0&#xA;&#xA;x = jnp.ones((5000, 5000))&#xA;fast_f = jit(slow_f)&#xA;%timeit -n10 -r3 fast_f(x)  # ~ 4.5 ms / loop on Titan X&#xA;%timeit -n10 -r3 slow_f(x)  # ~ 14.5 ms / loop (also on GPU via JAX)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can mix &lt;code&gt;jit&lt;/code&gt; and &lt;code&gt;grad&lt;/code&gt; and any other JAX transformation however you like.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;jit&lt;/code&gt; puts constraints on the kind of Python control flow the function can use; see the &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#python-control-flow-+-JIT&#34;&gt;Gotchas Notebook&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-vectorization with &lt;code&gt;vmap&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap&#34;&gt;&lt;code&gt;vmap&lt;/code&gt;&lt;/a&gt; is the vectorizing map. It has the familiar semantics of mapping a function along array axes, but instead of keeping the loop on the outside, it pushes the loop down into a functionâ€™s primitive operations for better performance.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vmap&lt;/code&gt; can save you from having to carry around batch dimensions in your code. For example, consider this simple &lt;em&gt;unbatched&lt;/em&gt; neural network prediction function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def predict(params, input_vec):&#xA;  assert input_vec.ndim == 1&#xA;  activations = input_vec&#xA;  for W, b in params:&#xA;    outputs = jnp.dot(W, activations) + b  # `activations` on the right-hand side!&#xA;    activations = jnp.tanh(outputs)        # inputs to the next layer&#xA;  return outputs                           # no activation on last layer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We often instead write &lt;code&gt;jnp.dot(activations, W)&lt;/code&gt; to allow for a batch dimension on the left side of &lt;code&gt;activations&lt;/code&gt;, but weâ€™ve written this particular prediction function to apply only to single input vectors. If we wanted to apply this function to a batch of inputs at once, semantically we could just write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;predictions = jnp.stack(list(map(partial(predict, params), input_batch)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But pushing one example through the network at a time would be slow! Itâ€™s better to vectorize the computation, so that at every layer weâ€™re doing matrix-matrix multiplication rather than matrix-vector multiplication.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;vmap&lt;/code&gt; function does that transformation for us. That is, if we write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jax import vmap&#xA;predictions = vmap(partial(predict, params))(input_batch)&#xA;# or, alternatively&#xA;predictions = vmap(predict, in_axes=(None, 0))(params, input_batch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then the &lt;code&gt;vmap&lt;/code&gt; function will push the outer loop inside the function, and our machine will end up executing matrix-matrix multiplications exactly as if weâ€™d done the batching by hand.&lt;/p&gt; &#xA;&lt;p&gt;Itâ€™s easy enough to manually batch a simple neural network without &lt;code&gt;vmap&lt;/code&gt;, but in other cases manual vectorization can be impractical or impossible. Take the problem of efficiently computing per-example gradients: that is, for a fixed set of parameters, we want to compute the gradient of our loss function evaluated separately at each example in a batch. With &lt;code&gt;vmap&lt;/code&gt;, itâ€™s easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;per_example_gradients = vmap(partial(grad(loss), params))(inputs, targets)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, &lt;code&gt;vmap&lt;/code&gt; can be arbitrarily composed with &lt;code&gt;jit&lt;/code&gt;, &lt;code&gt;grad&lt;/code&gt;, and any other JAX transformation! We use &lt;code&gt;vmap&lt;/code&gt; with both forward- and reverse-mode automatic differentiation for fast Jacobian and Hessian matrix calculations in &lt;code&gt;jax.jacfwd&lt;/code&gt;, &lt;code&gt;jax.jacrev&lt;/code&gt;, and &lt;code&gt;jax.hessian&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SPMD programming with &lt;code&gt;pmap&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For parallel programming of multiple accelerators, like multiple GPUs, use &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap&#34;&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/a&gt;. With &lt;code&gt;pmap&lt;/code&gt; you write single-program multiple-data (SPMD) programs, including fast parallel collective communication operations. Applying &lt;code&gt;pmap&lt;/code&gt; will mean that the function you write is compiled by XLA (similarly to &lt;code&gt;jit&lt;/code&gt;), then replicated and executed in parallel across devices.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example on an 8-GPU machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jax import random, pmap&#xA;import jax.numpy as jnp&#xA;&#xA;# Create 8 random 5000 x 6000 matrices, one per GPU&#xA;keys = random.split(random.key(0), 8)&#xA;mats = pmap(lambda key: random.normal(key, (5000, 6000)))(keys)&#xA;&#xA;# Run a local matmul on each device in parallel (no data transfer)&#xA;result = pmap(lambda x: jnp.dot(x, x.T))(mats)  # result.shape is (8, 5000, 5000)&#xA;&#xA;# Compute the mean on each device in parallel and print the result&#xA;print(pmap(jnp.mean)(result))&#xA;# prints [1.1566595 1.1805978 ... 1.2321935 1.2015157]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to expressing pure maps, you can use fast &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.lax.html#parallel-operators&#34;&gt;collective communication operations&lt;/a&gt; between devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;from jax import lax&#xA;&#xA;@partial(pmap, axis_name=&#39;i&#39;)&#xA;def normalize(x):&#xA;  return x / lax.psum(x, &#39;i&#39;)&#xA;&#xA;print(normalize(jnp.arange(4.)))&#xA;# prints [0.         0.16666667 0.33333334 0.5       ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even &lt;a href=&#34;https://colab.research.google.com/github/google/jax/blob/main/cloud_tpu_colabs/Pmap_Cookbook.ipynb#scrollTo=MdRscR5MONuN&#34;&gt;nest &lt;code&gt;pmap&lt;/code&gt; functions&lt;/a&gt; for more sophisticated communication patterns.&lt;/p&gt; &#xA;&lt;p&gt;It all composes, so you&#39;re free to differentiate through parallel computations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jax import grad&#xA;&#xA;@pmap&#xA;def f(x):&#xA;  y = jnp.sin(x)&#xA;  @pmap&#xA;  def g(z):&#xA;    return jnp.cos(z) * jnp.tan(y.sum()) * jnp.tanh(x).sum()&#xA;  return grad(lambda w: jnp.sum(g(w)))(x)&#xA;&#xA;print(f(x))&#xA;# [[ 0.        , -0.7170853 ],&#xA;#  [-3.1085174 , -0.4824318 ],&#xA;#  [10.366636  , 13.135289  ],&#xA;#  [ 0.22163185, -0.52112055]]&#xA;&#xA;print(grad(lambda x: jnp.sum(f(x)))(x))&#xA;# [[ -3.2369726,  -1.6356447],&#xA;#  [  4.7572474,  11.606951 ],&#xA;#  [-98.524414 ,  42.76499  ],&#xA;#  [ -1.6007166,  -1.2568436]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When reverse-mode differentiating a &lt;code&gt;pmap&lt;/code&gt; function (e.g. with &lt;code&gt;grad&lt;/code&gt;), the backward pass of the computation is parallelized just like the forward pass.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://colab.research.google.com/github/google/jax/blob/main/cloud_tpu_colabs/Pmap_Cookbook.ipynb&#34;&gt;SPMD Cookbook&lt;/a&gt; and the &lt;a href=&#34;https://github.com/google/jax/raw/main/examples/spmd_mnist_classifier_fromscratch.py&#34;&gt;SPMD MNIST classifier from scratch example&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Current gotchas&lt;/h2&gt; &#xA;&lt;p&gt;For a more thorough survey of current gotchas, with examples and explanations, we highly recommend reading the &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html&#34;&gt;Gotchas Notebook&lt;/a&gt;. Some standouts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;JAX transformations only work on &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;pure functions&lt;/a&gt;, which don&#39;t have side-effects and respect &lt;a href=&#34;https://en.wikipedia.org/wiki/Referential_transparency&#34;&gt;referential transparency&lt;/a&gt; (i.e. object identity testing with &lt;code&gt;is&lt;/code&gt; isn&#39;t preserved). If you use a JAX transformation on an impure Python function, you might see an error like &lt;code&gt;Exception: Can&#39;t lift Traced...&lt;/code&gt; or &lt;code&gt;Exception: Different traces at same level&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#in-place-updates&#34;&gt;In-place mutating updates of arrays&lt;/a&gt;, like &lt;code&gt;x[i] += y&lt;/code&gt;, aren&#39;t supported, but &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.ops.html&#34;&gt;there are functional alternatives&lt;/a&gt;. Under a &lt;code&gt;jit&lt;/code&gt;, those functional alternatives will reuse buffers in-place automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#random-numbers&#34;&gt;Random numbers are different&lt;/a&gt;, but for &lt;a href=&#34;https://github.com/google/jax/raw/main/docs/jep/263-prng.md&#34;&gt;good reasons&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re looking for &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/convolutions.html&#34;&gt;convolution operators&lt;/a&gt;, they&#39;re in the &lt;code&gt;jax.lax&lt;/code&gt; package.&lt;/li&gt; &#xA; &lt;li&gt;JAX enforces single-precision (32-bit, e.g. &lt;code&gt;float32&lt;/code&gt;) values by default, and &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#double-64bit-precision&#34;&gt;to enable double-precision&lt;/a&gt; (64-bit, e.g. &lt;code&gt;float64&lt;/code&gt;) one needs to set the &lt;code&gt;jax_enable_x64&lt;/code&gt; variable at startup (or set the environment variable &lt;code&gt;JAX_ENABLE_X64=True&lt;/code&gt;). On TPU, JAX uses 32-bit values by default for everything &lt;em&gt;except&lt;/em&gt; internal temporary variables in &#39;matmul-like&#39; operations, such as &lt;code&gt;jax.numpy.dot&lt;/code&gt; and &lt;code&gt;lax.conv&lt;/code&gt;. Those ops have a &lt;code&gt;precision&lt;/code&gt; parameter which can be used to approximate 32-bit operations via three bfloat16 passes, with a cost of possibly slower runtime. Non-matmul operations on TPU lower to implementations that often emphasize speed over accuracy, so in practice computations on TPU will be less precise than similar computations on other backends.&lt;/li&gt; &#xA; &lt;li&gt;Some of NumPy&#39;s dtype promotion semantics involving a mix of Python scalars and NumPy types aren&#39;t preserved, namely &lt;code&gt;np.add(1, np.array([2], np.float32)).dtype&lt;/code&gt; is &lt;code&gt;float64&lt;/code&gt; rather than &lt;code&gt;float32&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Some transformations, like &lt;code&gt;jit&lt;/code&gt;, &lt;a href=&#34;https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#control-flow&#34;&gt;constrain how you can use Python control flow&lt;/a&gt;. You&#39;ll always get loud errors if something goes wrong. You might have to use &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit&#34;&gt;&lt;code&gt;jit&lt;/code&gt;&#39;s &lt;code&gt;static_argnums&lt;/code&gt; parameter&lt;/a&gt;, &lt;a href=&#34;https://jax.readthedocs.io/en/latest/jax.lax.html#control-flow-operators&#34;&gt;structured control flow primitives&lt;/a&gt; like &lt;a href=&#34;https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html#jax.lax.scan&#34;&gt;&lt;code&gt;lax.scan&lt;/code&gt;&lt;/a&gt;, or just use &lt;code&gt;jit&lt;/code&gt; on smaller subfunctions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Linux x86_64&lt;/th&gt; &#xA;   &lt;th&gt;Linux aarch64&lt;/th&gt; &#xA;   &lt;th&gt;Mac x86_64&lt;/th&gt; &#xA;   &lt;th&gt;Mac ARM&lt;/th&gt; &#xA;   &lt;th&gt;Windows x86_64&lt;/th&gt; &#xA;   &lt;th&gt;Windows WSL2 x86_64&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google TPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMD GPU&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple GPU&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hardware&lt;/th&gt; &#xA;   &lt;th&gt;Instructions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install -U jax&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install -U &#34;jax[cuda12]&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google TPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install -U &#34;jax[tpu]&#34; -f https://storage.googleapis.com/jax-releases/libtpu_releases.html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMD GPU&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://hub.docker.com/r/rocm/jax&#34;&gt;Docker&lt;/a&gt; or &lt;a href=&#34;https://jax.readthedocs.io/en/latest/developer.html#additional-notes-for-building-a-rocm-jaxlib-for-amd-gpus&#34;&gt;build from source&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple GPU&lt;/td&gt; &#xA;   &lt;td&gt;Follow &lt;a href=&#34;https://developer.apple.com/metal/jax/&#34;&gt;Apple&#39;s instructions&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://jax.readthedocs.io/en/latest/installation.html&#34;&gt;the documentation&lt;/a&gt; for information on alternative installation strategies. These include compiling from source, installing with Docker, using other versions of CUDA, a community-supported conda build, and answers to some frequently-asked questions.&lt;/p&gt; &#xA;&lt;h2&gt;Neural network libraries&lt;/h2&gt; &#xA;&lt;p&gt;Multiple Google research groups develop and share libraries for training neural networks in JAX. If you want a fully featured library for neural network training with examples and how-to guides, try &lt;a href=&#34;https://github.com/google/flax&#34;&gt;Flax&lt;/a&gt;. Check out the new &lt;a href=&#34;https://flax.readthedocs.io/en/latest/nnx/index.html&#34;&gt;NNX&lt;/a&gt; API for a simplified development experience.&lt;/p&gt; &#xA;&lt;p&gt;Google X maintains the neural network library &lt;a href=&#34;https://github.com/patrick-kidger/equinox&#34;&gt;Equinox&lt;/a&gt;. This is used as the foundation for several other libraries in the JAX ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;In addition, DeepMind has open-sourced an &lt;a href=&#34;https://deepmind.com/blog/article/using-jax-to-accelerate-our-research&#34;&gt;ecosystem of libraries around JAX&lt;/a&gt; including &lt;a href=&#34;https://github.com/deepmind/optax&#34;&gt;Optax&lt;/a&gt; for gradient processing and optimization, &lt;a href=&#34;https://github.com/deepmind/rlax&#34;&gt;RLax&lt;/a&gt; for RL algorithms, and &lt;a href=&#34;https://github.com/deepmind/chex&#34;&gt;chex&lt;/a&gt; for reliable code and testing. (Watch the NeurIPS 2020 JAX Ecosystem at DeepMind talk &lt;a href=&#34;https://www.youtube.com/watch?v=iDxJxIyzSiM&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Citing JAX&lt;/h2&gt; &#xA;&lt;p&gt;To cite this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{jax2018github,&#xA;  author = {James Bradbury and Roy Frostig and Peter Hawkins and Matthew James Johnson and Chris Leary and Dougal Maclaurin and George Necula and Adam Paszke and Jake Vander{P}las and Skye Wanderman-{M}ilne and Qiao Zhang},&#xA;  title = {{JAX}: composable transformations of {P}ython+{N}um{P}y programs},&#xA;  url = {http://github.com/google/jax},&#xA;  version = {0.3.13},&#xA;  year = {2018},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above bibtex entry, names are in alphabetical order, the version number is intended to be that from &lt;a href=&#34;https://raw.githubusercontent.com/google/jax/main/jax/version.py&#34;&gt;jax/version.py&lt;/a&gt;, and the year corresponds to the project&#39;s open-source release.&lt;/p&gt; &#xA;&lt;p&gt;A nascent version of JAX, supporting only automatic differentiation and compilation to XLA, was described in a &lt;a href=&#34;https://mlsys.org/Conferences/2019/doc/2018/146.pdf&#34;&gt;paper that appeared at SysML 2018&lt;/a&gt;. We&#39;re currently working on covering JAX&#39;s ideas and capabilities in a more comprehensive and up-to-date paper.&lt;/p&gt; &#xA;&lt;h2&gt;Reference documentation&lt;/h2&gt; &#xA;&lt;p&gt;For details about the JAX API, see the &lt;a href=&#34;https://jax.readthedocs.io/&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For getting started as a JAX developer, see the &lt;a href=&#34;https://jax.readthedocs.io/en/latest/developer.html&#34;&gt;developer documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>