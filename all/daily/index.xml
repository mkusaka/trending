<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-10T01:29:11Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rawandahmad698/PyChatGPT</title>
    <updated>2022-12-10T01:29:11Z</updated>
    <id>tag:github.com,2022-12-10:/rawandahmad698/PyChatGPT</id>
    <link href="https://github.com/rawandahmad698/PyChatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ö°Ô∏è Python client for the unofficial ChatGPT API with auto token regeneration, conversation tracking, proxy support and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üî• PyChatGPT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/badge/python-3.8-blue.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.8-blue.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/chatgptpy&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/chatgptpy.svg?sanitize=true&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/chatgptpy&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/chatgptpy.svg?sanitize=true&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;‚≠êÔ∏è Like this repo? please star &amp;amp; consider donating to keep it maintained&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/rawandahmed&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;üí° If OpenAI change their API, I will fix it as soon as possible, so &lt;mark&gt;Watch&lt;/mark&gt; the repo if you want to be notified&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Save Conversations to a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resume conversations even after closing the program&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Proxy Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically login without involving a browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically grab Access Token&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get around the login &lt;strong&gt;captcha&lt;/strong&gt; (If you try to log in subsequently, you will be prompted to solve a captcha)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Saves the access token to a file, so you don&#39;t have to log in again&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically refreshes the access token when it expires&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uses colorama to colorize the output, because why not?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Smart Conversation Tracking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web Demo&lt;/h2&gt; &#xA;&lt;p&gt;Integrated into &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Huggingface Spaces ü§ó&lt;/a&gt; using &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. Try out the Web Demo&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/yizhangliu/chatGPT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Chatting&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.discordapp.net/attachments/1038565125482881027/1049255804366237736/image.png&#34; alt=&#34;Screenshot 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Creating a token&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.discordapp.net/attachments/1038565125482881027/1049072247442264094/image.png?width=2468&amp;amp;height=885&#34; alt=&#34;Screenshot 2&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You: Hi there, My name is Rawa&#xA;Chat GPT: Hello Rawa, nice to meet you. Is there something you would like to talk about or ask me? I&#39;m here to help with any questions you may have.&#xA;You: great, now say my name like Heisenberg&#xA;Chat GPT: Sure, Rawa like Heisenberg. Is there anything else you would like to talk about? I&#39;m here to help with any questions you may have.&#xA;You: Sorry I meant like the episode of Breaking Bad where Walter White says Heisenberg&#xA;Chat GPT: Ah, I see. In that case, you could try saying it like this: &#34;My name is Rawa, like Heisenberg.&#34; This is a reference to the character Walter White from the TV show Breaking Bad, who often used the pseudonym &#34;Heisenberg&#34; when conducting illegal activities. The character was known for his cool and calculated demeanor, so saying your name like Heisenberg in this context would mean saying it with confidence and authority.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install chatgptpy --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;strong&gt;NEW&lt;/strong&gt;] Pass a &lt;code&gt;options()&lt;/code&gt; object to the &lt;code&gt;ChatGPT()&lt;/code&gt; constructor to customize the session&lt;/p&gt; &#xA;&lt;p&gt;[&lt;strong&gt;NEW&lt;/strong&gt;] You can now save your conversations to a file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat, Options&#xA;&#xA;options = Options()&#xA;&#xA;# Track conversation&#xA;options.track = True &#xA;&#xA;# Use a proxy&#xA;options.proxies = &#39;http://localhost:8080&#39;&#xA;&#xA;# Optionally, you can pass a file path to save the conversation&#xA;# They&#39;re created if they don&#39;t exist&#xA;options.chat_log = &#34;chat_log.txt&#34;&#xA;options.id_log = &#34;id_log.txt&#34;&#xA;&#xA;# Create a Chat object&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;, options=options)&#xA;answer = chat.ask(&#34;How are you?&#34;)&#xA;print(answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[&lt;strong&gt;NEW&lt;/strong&gt;] Resume a conversation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat&#xA;&#xA;# Create a Chat object&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;, conversation_id=&#34;Previous Conversation ID&#34;, previous_convo_id=&#34;Previous Conversation ID&#34;)&#xA;answer = chat.ask(&#34;How are you?&#34;)&#xA;print(answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a CLI Session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat&#xA;&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;)&#xA;chat.cli_chat()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ask a one time question&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pychatgpt import Chat&#xA;&#xA;# Initializing the chat class will automatically log you in, check access_tokens&#xA;chat = Chat(email=&#34;email&#34;, password=&#34;password&#34;) &#xA;answer = chat.ask(&#34;Hello!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;You could also manually set, get the token&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time&#xA;from pychatgpt import OpenAI&#xA;&#xA;# Manually set the token&#xA;OpenAI.Auth.save_access_token(access_token=&#34;&#34;, expiry=time.time() + 3600)&#xA;&#xA;# Get the token, expiry&#xA;access_token, expiry = OpenAI.Auth.get_access_token()&#xA;&#xA;# Check if the token is valid&#xA;is_expired = OpenAI.Auth.token_expired() # Returns True or False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Change Log&lt;/summary&gt; &#xA; &lt;h4&gt;Update using &lt;code&gt;pip install chatgptpy --upgrade&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h4&gt;1.0.4&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixes for part 8 of token authentication&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.3&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;a new &lt;code&gt;options()&lt;/code&gt; class method to set the options for the chat session&lt;/li&gt; &#xA;  &lt;li&gt;save the conversation to a file&lt;/li&gt; &#xA;  &lt;li&gt;resume the conversation even after closing the program&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.2&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;ChatGPT API switches from &lt;code&gt;action=next&lt;/code&gt; to &lt;code&gt;action=variant&lt;/code&gt;, frequently. This library is now using &lt;code&gt;action=variant&lt;/code&gt; instead of &lt;code&gt;action=next&lt;/code&gt; to get the next response from the API.&lt;/li&gt; &#xA;  &lt;li&gt;Sometimes when the server is overloaded, the API returns a &lt;code&gt;502 Bad Gateway&lt;/code&gt; error.&lt;/li&gt; &#xA;  &lt;li&gt;Added Error handling if the auth.json file is not found/corrupt&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;1.0.0&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Initial Release via PyPi&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Other notes&lt;/h3&gt; &#xA;&lt;p&gt;If the token creation process is failing:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Try to use a proxy (I recommend using this always)&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t try to log in too fast. At least wait 10 minutes if you&#39;re being rate limited.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re still having issues, try to use a VPN. On a VPN, the script should work fine.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;What&#39;s next?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m planning to add a few more features, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A python module that can be imported and used in other projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A way to save the conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multi-user chatting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The whole process&lt;/h3&gt; &#xA;&lt;p&gt;I have been looking for a way to interact with the new Chat GPT API, but most of the sources here on GitHub require you to have a Chromium instance running in the background. or by using the Web Inspector to grab Access Token manually.&lt;/p&gt; &#xA;&lt;p&gt;No more. I have been able to reverse engineer the API and use a TLS client to mimic a real user, allowing the script to login without setting off any bot detection techniques by Auth0&lt;/p&gt; &#xA;&lt;p&gt;Basically, the script logs in on your behalf, using a TLS client, then grabs the Access Token. It&#39;s pretty fast.&lt;/p&gt; &#xA;&lt;p&gt;First, I&#39;d like to tell you that &#34;just making http&#34; requests is not going to be enough, Auth0 is smart, each process is guarded by a &lt;code&gt;state&lt;/code&gt; token, which is a JWT token. This token is used to prevent CSRF attacks, and it&#39;s also used to prevent bots from logging in. If you look at the &lt;code&gt;auth.py&lt;/code&gt; file, there are over nine functions, each one of them is responsible for a different task, and they all work together to create a token for you. &lt;code&gt;allow-redirects&lt;/code&gt; played a huge role in this, as it allowed to navigate through the login process&lt;/p&gt; &#xA;&lt;p&gt;I work at MeshMonitors.io, We make amazing tools (Check it out yo!). I decided not to spend too much time on this, but here we are.&lt;/p&gt; &#xA;&lt;h3&gt;Why did I do this?&lt;/h3&gt; &#xA;&lt;p&gt;No one has been able to do this, and I wanted to see if I could.&lt;/p&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt; for creating the ChatGPT API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FlorianREGAZ&#34;&gt;FlorianREGAZ&lt;/a&gt; for the TLS Client&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>869413421/wechatbot</title>
    <updated>2022-12-10T01:29:11Z</updated>
    <id>tag:github.com,2022-12-10:/869413421/wechatbot</id>
    <link href="https://github.com/869413421/wechatbot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∏∫‰∏™‰∫∫ÂæÆ‰ø°Êé•ÂÖ•ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wechatbot&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ÊúÄËøëchatGPTÂºÇÂ∏∏ÁÅ´ÁàÜÔºåÊú¨È°πÁõÆÂèØ‰ª•Â∞Ü‰∏™‰∫∫ÂæÆ‰ø°ÂåñË∫´GPTÊú∫Âô®‰∫∫Ôºå È°πÁõÆÂü∫‰∫é&lt;a href=&#34;https://github.com/eatmoreapple/openwechat&#34;&gt;openwechat&lt;/a&gt; ÂºÄÂèë„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/869413421/wechatbot/releases/tag/v1.0.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/869413421/wechatbot.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/869413421/wechatbot.svg?sanitize=true&#34; alt=&#34;Github stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/869413421/wechatbot.svg?style=flat-square&#34; alt=&#34;Forks&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ÁõÆÂâçÂÆûÁé∞‰∫Ü‰ª•‰∏ãÂäüËÉΩ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPTÊú∫Âô®‰∫∫Ê®°ÂûãÁÉ≠Â∫¶ÂèØÈÖçÁΩÆ&lt;/li&gt; &#xA; &lt;li&gt;ÊèêÈóÆÂ¢ûÂä†‰∏ä‰∏ãÊñáÔºåÊõ¥Êé•ËøëÂÆòÁΩëÊïàÊûú&lt;/li&gt; &#xA; &lt;li&gt;Êú∫Âô®‰∫∫Áæ§ËÅä@ÂõûÂ§ç&lt;/li&gt; &#xA; &lt;li&gt;Êú∫Âô®‰∫∫ÁßÅËÅäÂõûÂ§ç&lt;/li&gt; &#xA; &lt;li&gt;Â•ΩÂèãÊ∑ªÂä†Ëá™Âä®ÈÄöËøá&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;‰ΩøÁî®ÂâçÊèê&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;del&gt;ÁõÆÂâçÂè™ÊîØÊåÅÂú®windows‰∏äËøêË°åÂõ†‰∏∫ÈúÄË¶ÅÂºπÁ™óÊâ´Á†ÅÁôªÂΩïÂæÆ‰ø°ÔºåÂêéÁª≠‰ºöÊîØÊåÅlinux&lt;/del&gt; Â∑≤ÊîØÊåÅ&lt;/li&gt; &#xA;  &lt;li&gt;ÊúâopenaiË¥¶Âè∑ÔºåÂπ∂‰∏îÂàõÂª∫Â•Ωapi_keyÔºåÊ≥®ÂÜå‰∫ãÈ°πÂèØ‰ª•ÂèÇËÄÉ&lt;a href=&#34;https://juejin.cn/post/7173447848292253704&#34;&gt;Ê≠§ÊñáÁ´†&lt;/a&gt; „ÄÇ&lt;/li&gt; &#xA;  &lt;li&gt;ÂæÆ‰ø°ÂøÖÈ°ªÂÆûÂêçËÆ§ËØÅ„ÄÇ&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Ê≥®ÊÑè‰∫ãÈ°π&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;È°πÁõÆ‰ªÖ‰æõÂ®±‰πêÔºåÊª•Áî®ÂèØËÉΩÊúâÂæÆ‰ø°Â∞ÅÁ¶ÅÁöÑÈ£éÈô©ÔºåËØ∑ÂãøÁî®‰∫éÂïÜ‰∏öÁî®ÈÄî„ÄÇ&lt;/li&gt; &#xA;  &lt;li&gt;ËØ∑Ê≥®ÊÑèÊî∂ÂèëÊïèÊÑü‰ø°ÊÅØÔºåÊú¨È°πÁõÆ‰∏çÂÅö‰ø°ÊÅØËøáÊª§„ÄÇ&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;‰ΩøÁî®dockerËøêË°å&lt;/h1&gt; &#xA;&lt;p&gt;‰Ω†ÂèØ‰ª•‰ΩøÁî®dockerÂø´ÈÄüËøêË°åÊú¨È°πÁõÆ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Á¨¨‰∏ÄÁßçÔºöÂü∫‰∫éÁéØÂ¢ÉÂèòÈáèËøêË°å&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ËøêË°åÈ°πÁõÆÔºåÁéØÂ¢ÉÂèòÈáèÂèÇËÄÉ‰∏ãÊñπÈÖçÁΩÆËØ¥Êòé&#xA;$ docker run -itd --name wechatbot --restart=always -e APIKEY=xxxx -e AUTO_PASS=false -e SESSION_TIMEOUT=60s -e MODEL=text-davinci-003 -e MAX_TOKENS=512 -e TEMPREATURE=0.9 docker.mirrors.sjtug.sjtu.edu.cn/qingshui869413421/wechatbot:latest&#xA;&#xA;# Êü•Áúã‰∫åÁª¥Á†Å&#xA;$ docker exec -it wechatbot bash &#xA;$ tail -f -n 50 /app/run.log &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøêË°åÂëΩ‰ª§‰∏≠Êò†Â∞ÑÁöÑÈÖçÁΩÆÊñá‰ª∂ÂèÇËÄÉ‰∏ãËæπÁöÑÈÖçÁΩÆÊñá‰ª∂ËØ¥Êòé„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Á¨¨‰∫åÁßçÔºöÂü∫‰∫éÈÖçÁΩÆÊñá‰ª∂ÊåÇËΩΩËøêË°å&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂ÔºåÊ†πÊçÆËá™Â∑±ÂÆûÈôÖÊÉÖÂÜµÔºåË∞ÉÊï¥ÈÖçÁΩÆÈáåÁöÑÂÜÖÂÆπ&#xA;cp config.dev.json config.json  # ÂÖ∂‰∏≠ config.dev.json ‰ªéÈ°πÁõÆÁöÑÊ†πÁõÆÂΩïËé∑Âèñ&#xA;&#xA;# ËøêË°åÈ°πÁõÆ&#xA;docker run -itd --name wechatbot -v ./config.json:/app/config.json docker.mirrors.sjtug.sjtu.edu.cn/qingshui869413421/wechatbot:latest&#xA;&#xA;# Êü•Áúã‰∫åÁª¥Á†Å&#xA;$ docker exec -it wechatbot bash &#xA;$ tail -f -n 50 /app/run.log &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂÖ∂‰∏≠ÈÖçÁΩÆÊñá‰ª∂ÂèÇËÄÉ‰∏ãËæπÁöÑÈÖçÁΩÆÊñá‰ª∂ËØ¥Êòé„ÄÇ&lt;/p&gt; &#xA;&lt;h1&gt;Âø´ÈÄüÂºÄÂßã&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ÈùûÊäÄÊúØ‰∫∫ÂëòËØ∑Áõ¥Êé•‰∏ãËΩΩrelease‰∏≠ÁöÑ&lt;a href=&#34;https://github.com/869413421/wechatbot/releases/tag/v1.1.1&#34;&gt;ÂéãÁº©ÂåÖ&lt;/a&gt; ÔºåËß£ÂéãËøêË°å„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Ëé∑ÂèñÈ°πÁõÆ&#xA;git clone https://github.com/869413421/wechatbot.git&#xA;&#xA;# ËøõÂÖ•È°πÁõÆÁõÆÂΩï&#xA;cd wechatbot&#xA;&#xA;# Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂&#xA;copy config.dev.json config.json&#xA;&#xA;# ÂêØÂä®È°πÁõÆ&#xA;go run main.go&#xA;&#xA;# linuxÁºñËØëÔºåÂÆàÊä§ËøõÁ®ãËøêË°åÔºàÂèØÈÄâÔºâ&#xA;# ÁºñËØë&#xA;CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags &#39;-w&#39; -o wechatbot  ./main.go&#xA;# ÂÆàÊä§ËøõÁ®ãËøêË°å&#xA;nohup ./wechatbot &amp;gt; run.log &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ÈÖçÁΩÆÊñá‰ª∂ËØ¥Êòé&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;api_key&#34;: &#34;your api key&#34;,&#xA;  &#34;auto_pass&#34;: false,&#xA;  &#34;session_timeout&#34;: 60,&#xA;  &#34;max_tokens&#34;: 512,&#xA;  &#34;model&#34;: &#34;text-davinci-003&#34;,&#xA;  &#34;temperature&#34;: 0.9&#xA;}&#xA;&#xA;api_keyÔºöopenai api_key&#xA;auto_pass:ÊòØÂê¶Ëá™Âä®ÈÄöËøáÂ•ΩÂèãÊ∑ªÂä†&#xA;session_timeoutÔºö‰ºöËØùË∂ÖÊó∂Êó∂Èó¥ÔºåÈªòËÆ§60ÁßíÔºåÂçï‰ΩçÁßíÔºåÂú®‰ºöËØùÊó∂Èó¥ÂÜÖÊâÄÊúâÂèëÈÄÅÁªôÊú∫Âô®‰∫∫ÁöÑ‰ø°ÊÅØ‰ºö‰Ωú‰∏∫‰∏ä‰∏ãÊñá„ÄÇ&#xA;max_tokens: GPTÂìçÂ∫îÂ≠óÁ¨¶Êï∞ÔºåÊúÄÂ§ß2048ÔºåÈªòËÆ§ÂÄº512„ÄÇmax_tokens‰ºöÂΩ±ÂìçÊé•Âè£ÂìçÂ∫îÈÄüÂ∫¶ÔºåÂ≠óÁ¨¶Ë∂äÂ§ßÂìçÂ∫îË∂äÊÖ¢„ÄÇ&#xA;model: GTPÈÄâÁî®Ê®°ÂûãÔºåÈªòËÆ§text-davinci-003ÔºåÂÖ∑‰ΩìÈÄâÈ°πÂèÇËÄÉÂÆòÁΩëËÆ≠ÁªÉÂú∫&#xA;temperature: GTPÁÉ≠Â∫¶Ôºå0Âà∞1ÔºåÈªòËÆ§0.9„ÄÇÊï∞Â≠óË∂äÂ§ßÂàõÈÄ†ÂäõË∂äÂº∫Ôºå‰ΩÜÊõ¥ÂÅèÁ¶ªËÆ≠ÁªÉ‰∫ãÂÆûÔºåË∂ä‰ΩéË∂äÊé•ËøëËÆ≠ÁªÉ‰∫ãÂÆû&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;‰ΩøÁî®Á§∫‰æã&lt;/h1&gt; &#xA;&lt;h3&gt;ÂêëÊú∫Âô®‰∫∫ÂèëÈÄÅ&lt;code&gt;ÊàëË¶ÅÈóÆ‰∏ã‰∏Ä‰∏™ÈóÆÈ¢ò&lt;/code&gt;ÔºåÊ∏ÖÁ©∫‰ºöËØù‰ø°ÊÅØ„ÄÇ&lt;/h3&gt; &#xA;&lt;h3&gt;ÁßÅËÅä&lt;/h3&gt; &#xA;&lt;img width=&#34;300px&#34; src=&#34;https://raw.githubusercontent.com/869413421/study/master/static/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221208153022.jpg&#34;&gt; &#xA;&lt;h3&gt;Áæ§ËÅä@ÂõûÂ§ç&lt;/h3&gt; &#xA;&lt;img width=&#34;300px&#34; src=&#34;https://raw.githubusercontent.com/869413421/study/master/static/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221208153015.jpg&#34;&gt; &#xA;&lt;h3&gt;Ê∑ªÂä†ÂæÆ‰ø°ÔºàÂ§áÊ≥®: wechabotÔºâËøõÁæ§‰∫§ÊµÅ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Â¶ÇÊûú‰∫åÁª¥Á†ÅÂõæÁâáÊ≤°ÊòæÁ§∫Âá∫Êù•ÔºåËØ∑Ê∑ªÂä†ÂæÆ‰ø°Âè∑ huangyanming681925&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;210px&#34; src=&#34;https://raw.githubusercontent.com/869413421/study/master/static/qr.png&#34; align=&#34;left&#34;&gt;</summary>
  </entry>
  <entry>
    <title>paradigmxyz/reth</title>
    <updated>2022-12-10T01:29:11Z</updated>
    <id>tag:github.com,2022-12-10:/paradigmxyz/reth</id>
    <link href="https://github.com/paradigmxyz/reth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt; reth üèóÔ∏èüöß &lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The project is still work in progress, see the &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/#-warning-under-construction-&#34;&gt;disclaimer below&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/paradigmxyz/reth/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/paradigmxyz/reth/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;CI status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/paradigmxyz/reth/actions/workflows/deny.yml&#34;&gt;&lt;img src=&#34;https://github.com/paradigmxyz/reth/workflows/deny/badge.svg?sanitize=true&#34; alt=&#34;cargo-deny status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/paradigmxyz/reth&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/paradigmxyz/reth?token=c24SDcMImE&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/paradigm_reth&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;style=flat-square&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth&#34; alt=&#34;Telegram Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Reth? What are its goals?&lt;/h1&gt; &#xA;&lt;p&gt;Reth (short for Rust Ethereum, &lt;a href=&#34;https://twitter.com/kelvinfichter/status/1597653609411268608&#34;&gt;pronunciation&lt;/a&gt;) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the &lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine/specification.md&#34;&gt;Engine API&lt;/a&gt;. It is originally built and driven forward by &lt;a href=&#34;https://paradigm.xyz/&#34;&gt;Paradigm&lt;/a&gt;, and is licensed under the Apache and MIT licenses.&lt;/p&gt; &#xA;&lt;p&gt;As an full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.&lt;/p&gt; &#xA;&lt;p&gt;More concretely, our goals are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node&#39;s crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node&#39;s database, or &#34;unbundling&#34; the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project&#39;s components &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Reth aims to be fast, so we used Rust and the &lt;a href=&#34;https://erigon.substack.com/p/erigon-stage-sync-and-control-flows&#34;&gt;Erigon staged-sync&lt;/a&gt; node architecture. We also use our Ethereum libraries (including &lt;a href=&#34;https://github.com/gakonst/ethers-rs/&#34;&gt;ethers-rs&lt;/a&gt; and &lt;a href=&#34;https://github.com/bluealloy/revm/&#34;&gt;revm&lt;/a&gt;) which we‚Äôve battle-tested and optimized via &lt;a href=&#34;https://github.com/paradigmxyz/foundry/&#34;&gt;Foundry&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free for anyone to use any way they want&lt;/strong&gt;: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Client Diversity&lt;/strong&gt;: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there&#39;s a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum&#39;s antifragility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support as many EVM chains as possible&lt;/strong&gt;: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you&#39;re working on any of these projects, please reach out.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurability&lt;/strong&gt;: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via &#34;fast sync&#34;. We envision that Reth will be configurable enough and provide configurable &#34;profiles&#34; for the tradeoffs that each team faces.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;The project is not ready for use. We hope to have full sync implemented sometime in January/February 2023, followed by optimizations. In the meantime, we&#39;re working on making sure every crate of the repository is well documented, abstracted and tested.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;For Developers&lt;/h1&gt; &#xA;&lt;h2&gt;Build &amp;amp; Test&lt;/h2&gt; &#xA;&lt;p&gt;Rust minimum required version to build this project is 1.65.0 published 02.11.2022&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/paradigmxyz/reth&#xA;cd reth&#xA;cargo test --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing and Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href=&#34;https://t.me/paradigm_reth&#34;&gt;main telegram&lt;/a&gt; to chat with us about the development of Reth!&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs/repo/layout.md&#34;&gt;Project Layout&lt;/a&gt; to understand more about the repository&#39;s structure, and descriptions about each package.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, first see if the answer to your question can be found in the &lt;a href=&#34;https://paradigmxyz.github.io/reth/&#34;&gt;book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the answer is not there:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://t.me/paradigm_reth&#34;&gt;Telegram&lt;/a&gt; to get help, or&lt;/li&gt; &#xA; &lt;li&gt;Open a &lt;a href=&#34;https://github.com/paradigmxyz/reth/discussions/new&#34;&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; &#xA; &lt;li&gt;Open an issue with &lt;a href=&#34;https://github.com/paradigmxyz/reth/issues/new&#34;&gt;the bug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Guidelines on how to contribute can be found in our &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;. Get started with contributing in our &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/docs&#34;&gt;contributor docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/paradigmxyz/reth/main/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo.&lt;/p&gt; &#xA;&lt;p&gt;None of this would have been possible without them, so big shoutout to the teams below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/&#34;&gt;Geth&lt;/a&gt;: We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ledgerwatch/erigon&#34;&gt;Erigon&lt;/a&gt; (fka Turbo-Geth): Erigon pioneered the &lt;a href=&#34;https://erigon.substack.com/p/erigon-stage-sync-and-control-flows&#34;&gt;&#34;Staged Sync&#34; architecture&lt;/a&gt; that Reth is using, as well as &lt;a href=&#34;https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine&#34;&gt;introduced MDBX&lt;/a&gt; as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akula-bft/akula/&#34;&gt;Akula&lt;/a&gt;: Reth uses forks of the Apache versions of Akula&#39;s &lt;a href=&#34;https://github.com/paradigmxyz/reth/pull/132&#34;&gt;MDBX Bindings&lt;/a&gt;, &lt;a href=&#34;https://github.com/paradigmxyz/reth/pull/63&#34;&gt;FastRLP&lt;/a&gt; and &lt;a href=&#34;https://github.com/paradigmxyz/reth/pull/80&#34;&gt;ECIES&lt;/a&gt; . Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üöß WARNING: UNDER CONSTRUCTION üöß&lt;/h1&gt; &#xA;&lt;p&gt;This project is work in progress and subject to frequent changes as we are still working on wiring up each individual node component into a full syncing pipeline.&lt;/p&gt; &#xA;&lt;p&gt;It has not been audited for security purposes and should not be used in production yet.&lt;/p&gt; &#xA;&lt;p&gt;We will be updating the documentation with the completion status of each component, as well as include more contributing guidelines (design docs, architecture diagrams, repository layouts) and &#34;good first issues&#34;. See the &#34;Contributing and Getting Help&#34; section above for more.&lt;/p&gt; &#xA;&lt;p&gt;We appreciate your patience until we get there. Until then, we are happy to answer all questions in the Telegram link above.&lt;/p&gt;</summary>
  </entry>
</feed>