<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-05T01:29:49Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reflex-dev/reflex</title>
    <updated>2025-08-05T01:29:49Z</updated>
    <id>tag:github.com,2025-08-05:/reflex-dev/reflex</id>
    <link href="https://github.com/reflex-dev/reflex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üï∏Ô∏è Web apps in pure Python üêç&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/reflex-dev/reflex/main/docs/images/reflex.svg?sanitize=true&#34; alt=&#34;Reflex Logo&#34; width=&#34;300px&#34;&gt; &#xA; &lt;hr&gt; &#xA; &lt;h3&gt;&lt;strong&gt;‚ú® Performant, customizable web apps in pure Python. Deploy in seconds. ‚ú®&lt;/strong&gt;&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/reflex&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/reflex.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/reflex.svg?sanitize=true&#34; alt=&#34;versions&#34;&gt; &lt;a href=&#34;https://reflex.dev/docs/getting-started/introduction&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation%20-Introduction%20-%20%23007ec6&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/projects/reflex&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/reflex&#34; alt=&#34;PyPI Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/T5WSbC2YtQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1029853095527727165?color=%237289da&amp;amp;label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/zh/zh_cn/README.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/zh/zh_tw/README.md&#34;&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/tr/README.md&#34;&gt;T√ºrk√ße&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/in/README.md&#34;&gt;‡§π‡§ø‡§Ç‡§¶‡•Ä&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/pt/pt_br/README.md&#34;&gt;Portugu√™s (Brasil)&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/it/README.md&#34;&gt;Italiano&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/es/README.md&#34;&gt;Espa√±ol&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/kr/README.md&#34;&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/ja/README.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/de/README.md&#34;&gt;Deutsch&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/pe/README.md&#34;&gt;Persian (Ÿæÿßÿ±ÿ≥€å)&lt;/a&gt; | &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/docs/vi/README.md&#34;&gt;Ti·∫øng Vi·ªát&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] üöÄ &lt;strong&gt;Try &lt;a href=&#34;https://build.reflex.dev/&#34;&gt;Reflex Build&lt;/a&gt;&lt;/strong&gt; ‚Äì our AI-powered app builder that generates full-stack Reflex applications in seconds.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Reflex is a library to build full-stack web apps in pure Python.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pure Python&lt;/strong&gt; - Write your app&#39;s frontend and backend all in Python, no need to learn Javascript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Flexibility&lt;/strong&gt; - Reflex is easy to get started with, but can also scale to complex apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deploy Instantly&lt;/strong&gt; - After building, deploy your app with a &lt;a href=&#34;https://reflex.dev/docs/hosting/deploy-quick-start/&#34;&gt;single command&lt;/a&gt; or host it on your own server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://reflex.dev/blog/2024-03-21-reflex-architecture/#the-reflex-architecture&#34;&gt;architecture page&lt;/a&gt; to learn how Reflex works under the hood.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Installation&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal and run (Requires Python 3.10+):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install reflex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü•≥ Create your first app&lt;/h2&gt; &#xA;&lt;p&gt;Installing &lt;code&gt;reflex&lt;/code&gt; also installs the &lt;code&gt;reflex&lt;/code&gt; command line tool.&lt;/p&gt; &#xA;&lt;p&gt;Test that the install was successful by creating a new project. (Replace &lt;code&gt;my_app_name&lt;/code&gt; with your project name):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir my_app_name&#xA;cd my_app_name&#xA;reflex init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command initializes a template app in your new directory.&lt;/p&gt; &#xA;&lt;p&gt;You can run this app in development mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;reflex run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see your app running at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you can modify the source code in &lt;code&gt;my_app_name/my_app_name.py&lt;/code&gt;. Reflex has fast refreshes so you can see your changes instantly when you save your code.&lt;/p&gt; &#xA;&lt;h2&gt;ü´ß Example App&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s go over an example: creating an image generation UI around &lt;a href=&#34;https://platform.openai.com/docs/guides/images/image-generation?context=node&#34;&gt;DALL¬∑E&lt;/a&gt;. For simplicity, we just call the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/authentication&#34;&gt;OpenAI API&lt;/a&gt;, but you could replace this with an ML model run locally.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/reflex-dev/reflex/main/docs/images/dalle.gif&#34; alt=&#34;A frontend wrapper for DALL¬∑E, shown in the process of generating an image.&#34; width=&#34;550&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;Here is the complete code to create this. This is all done in one Python file!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import reflex as rx&#xA;import openai&#xA;&#xA;openai_client = openai.OpenAI()&#xA;&#xA;&#xA;class State(rx.State):&#xA;    &#34;&#34;&#34;The app state.&#34;&#34;&#34;&#xA;&#xA;    prompt = &#34;&#34;&#xA;    image_url = &#34;&#34;&#xA;    processing = False&#xA;    complete = False&#xA;&#xA;    def get_image(self):&#xA;        &#34;&#34;&#34;Get the image from the prompt.&#34;&#34;&#34;&#xA;        if self.prompt == &#34;&#34;:&#xA;            return rx.window_alert(&#34;Prompt Empty&#34;)&#xA;&#xA;        self.processing, self.complete = True, False&#xA;        yield&#xA;        response = openai_client.images.generate(&#xA;            prompt=self.prompt, n=1, size=&#34;1024x1024&#34;&#xA;        )&#xA;        self.image_url = response.data[0].url&#xA;        self.processing, self.complete = False, True&#xA;&#xA;&#xA;def index():&#xA;    return rx.center(&#xA;        rx.vstack(&#xA;            rx.heading(&#34;DALL-E&#34;, font_size=&#34;1.5em&#34;),&#xA;            rx.input(&#xA;                placeholder=&#34;Enter a prompt..&#34;,&#xA;                on_blur=State.set_prompt,&#xA;                width=&#34;25em&#34;,&#xA;            ),&#xA;            rx.button(&#xA;                &#34;Generate Image&#34;,&#xA;                on_click=State.get_image,&#xA;                width=&#34;25em&#34;,&#xA;                loading=State.processing&#xA;            ),&#xA;            rx.cond(&#xA;                State.complete,&#xA;                rx.image(src=State.image_url, width=&#34;20em&#34;),&#xA;            ),&#xA;            align=&#34;center&#34;,&#xA;        ),&#xA;        width=&#34;100%&#34;,&#xA;        height=&#34;100vh&#34;,&#xA;    )&#xA;&#xA;# Add state and page to the app.&#xA;app = rx.App()&#xA;app.add_page(index, title=&#34;Reflex:DALL-E&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Let&#39;s break this down.&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/reflex-dev/reflex/main/docs/images/dalle_colored_code_example.png&#34; alt=&#34;Explaining the differences between backend and frontend parts of the DALL-E app.&#34; width=&#34;900&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Reflex UI&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s start with the UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def index():&#xA;    return rx.center(&#xA;        ...&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;code&gt;index&lt;/code&gt; function defines the frontend of the app.&lt;/p&gt; &#xA;&lt;p&gt;We use different components such as &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;vstack&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, and &lt;code&gt;button&lt;/code&gt; to build the frontend. Components can be nested within each other to create complex layouts. And you can use keyword args to style them with the full power of CSS.&lt;/p&gt; &#xA;&lt;p&gt;Reflex comes with &lt;a href=&#34;https://reflex.dev/docs/library&#34;&gt;60+ built-in components&lt;/a&gt; to help you get started. We are actively adding more components, and it&#39;s easy to &lt;a href=&#34;https://reflex.dev/docs/wrapping-react/overview/&#34;&gt;create your own components&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;State&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Reflex represents your UI as a function of your state.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class State(rx.State):&#xA;    &#34;&#34;&#34;The app state.&#34;&#34;&#34;&#xA;    prompt = &#34;&#34;&#xA;    image_url = &#34;&#34;&#xA;    processing = False&#xA;    complete = False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The state defines all the variables (called vars) in an app that can change and the functions that change them.&lt;/p&gt; &#xA;&lt;p&gt;Here the state is comprised of a &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;image_url&lt;/code&gt;. There are also the booleans &lt;code&gt;processing&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; to indicate when to disable the button (during image generation) and when to show the resulting image.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Event Handlers&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_image(self):&#xA;    &#34;&#34;&#34;Get the image from the prompt.&#34;&#34;&#34;&#xA;    if self.prompt == &#34;&#34;:&#xA;        return rx.window_alert(&#34;Prompt Empty&#34;)&#xA;&#xA;    self.processing, self.complete = True, False&#xA;    yield&#xA;    response = openai_client.images.generate(&#xA;        prompt=self.prompt, n=1, size=&#34;1024x1024&#34;&#xA;    )&#xA;    self.image_url = response.data[0].url&#xA;    self.processing, self.complete = False, True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Within the state, we define functions called event handlers that change the state vars. Event handlers are the way that we can modify the state in Reflex. They can be called in response to user actions, such as clicking a button or typing in a text box. These actions are called events.&lt;/p&gt; &#xA;&lt;p&gt;Our DALL¬∑E app has an event handler, &lt;code&gt;get_image&lt;/code&gt; which gets this image from the OpenAI API. Using &lt;code&gt;yield&lt;/code&gt; in the middle of an event handler will cause the UI to update. Otherwise the UI will update at the end of the event handler.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Finally, we define our app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app = rx.App()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We add a page from the root of the app to the index component. We also add a title that will show up in the page preview/browser tab.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app.add_page(index, title=&#34;DALL-E&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create a multi-page app by adding more pages.&lt;/p&gt; &#xA;&lt;h2&gt;üìë Resources&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;üìë &lt;a href=&#34;https://reflex.dev/docs/getting-started/introduction&#34;&gt;Docs&lt;/a&gt; &amp;nbsp; | &amp;nbsp; üóûÔ∏è &lt;a href=&#34;https://reflex.dev/blog&#34;&gt;Blog&lt;/a&gt; &amp;nbsp; | &amp;nbsp; üì± &lt;a href=&#34;https://reflex.dev/docs/library&#34;&gt;Component Library&lt;/a&gt; &amp;nbsp; | &amp;nbsp; üñºÔ∏è &lt;a href=&#34;https://reflex.dev/templates/&#34;&gt;Templates&lt;/a&gt; &amp;nbsp; | &amp;nbsp; üõ∏ &lt;a href=&#34;https://reflex.dev/docs/hosting/deploy-quick-start&#34;&gt;Deployment&lt;/a&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;‚úÖ Status&lt;/h2&gt; &#xA;&lt;p&gt;Reflex launched in December 2022 with the name Pynecone.&lt;/p&gt; &#xA;&lt;p&gt;üöÄ Introducing &lt;a href=&#34;https://build.reflex.dev/&#34;&gt;Reflex Build&lt;/a&gt; ‚Äî Our AI-Powered Builder Reflex Build uses AI to generate complete full-stack Python applications. It helps you quickly create, customize, and refine your Reflex apps ‚Äî from frontend components to backend logic ‚Äî so you can focus on your ideas instead of boilerplate code. Whether you‚Äôre prototyping or scaling, Reflex Build accelerates development by intelligently scaffolding and optimizing your app‚Äôs entire stack.&lt;/p&gt; &#xA;&lt;p&gt;Alongside this, &lt;a href=&#34;https://cloud.reflex.dev&#34;&gt;Reflex Cloud&lt;/a&gt; launched in 2025 to offer the best hosting experience for your Reflex apps. We‚Äôre continuously improving the platform with new features and capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Reflex has new releases and features coming every week! Make sure to &lt;span&gt;‚≠ê&lt;/span&gt; star and &lt;span&gt;üëÄ&lt;/span&gt; watch this repository to stay up to date.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions of any size! Below are some good ways to get started in the Reflex community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Join Our Discord&lt;/strong&gt;: Our &lt;a href=&#34;https://discord.gg/T5WSbC2YtQ&#34;&gt;Discord&lt;/a&gt; is the best place to get help on your Reflex project and to discuss how you can contribute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub Discussions&lt;/strong&gt;: A great way to talk about features you want added or things that are confusing/need clarification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub Issues&lt;/strong&gt;: &lt;a href=&#34;https://github.com/reflex-dev/reflex/issues&#34;&gt;Issues&lt;/a&gt; are an excellent way to report bugs. Additionally, you can try and solve an existing issue and submit a PR.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are actively looking for contributors, no matter your skill level or experience. To contribute check out &lt;a href=&#34;https://github.com/reflex-dev/reflex/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;All Thanks To Our Contributors:&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/reflex-dev/reflex/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=reflex-dev/reflex&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Reflex is open-source and licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/reflex-dev/reflex/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>