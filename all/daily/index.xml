<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-30T01:26:19Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OthersideAI/self-operating-computer</title>
    <updated>2023-11-30T01:26:19Z</updated>
    <id>tag:github.com,2023-11-30:/OthersideAI/self-operating-computer</id>
    <link href="https://github.com/OthersideAI/self-operating-computer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Self-Operating Computer Framework&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;A framework to enable multimodal models to operate a computer.&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Using the same inputs and outputs of a human operator, the model views the screen and decides on a series of mouse and keyboard actions to reach an objective. &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/OthersideAI/self-operating-computer/raw/main/readme/self-operating-computer.png&#34; width=&#34;750&#34; style=&#34;margin: 10px;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Key Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility&lt;/strong&gt;: Designed for various multimodal models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integration&lt;/strong&gt;: Currently integrated with &lt;strong&gt;GPT-4v&lt;/strong&gt; as the default model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Future Plans&lt;/strong&gt;: Support for additional models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Current Challenges&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; GPT-4V&#39;s error rate in estimating XY mouse click locations is currently quite high. This framework aims to track the progress of multimodal models over time, aspiring to achieve human-level performance in computer operation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Ongoing Development&lt;/h3&gt; &#xA;&lt;p&gt;At &lt;a href=&#34;https://www.hyperwriteai.com/&#34;&gt;HyperwriteAI&lt;/a&gt;, we are developing a multimodal model with more accurate click location predictions.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Thoughts&lt;/h3&gt; &#xA;&lt;p&gt;We recognize that some operating system functions may be more efficiently executed with hotkeys such as entering the Browser Address bar using &lt;code&gt;command + L&lt;/code&gt; rather than by simulating a mouse click at the correct XY location. We plan to make these improvements over time. However, it&#39;s important to note that many actions require the accurate selection of visual elements on the screen, necessitating precise XY mouse click locations. A primary focus of this project is to refine the accuracy of determining these click locations. We believe this is essential for achieving a fully self-operating computer in the current technological landscape.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OthersideAI/self-operating-computer/assets/42594239/9e8abc96-c76a-46fb-9b13-03678b3c67e0&#34;&gt;https://github.com/OthersideAI/self-operating-computer/assets/42594239/9e8abc96-c76a-46fb-9b13-03678b3c67e0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Below are instructions to set up the Self-Operating Computer Framework locally on your computer.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone the repo&lt;/strong&gt; to a directory on your computer:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/OthersideAI/self-operating-computer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cd into directory&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd self-operating-computer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create a Python virtual environment&lt;/strong&gt;. &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;Learn more about Python virtual environment&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Activate the virtual environment&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install the project requirements&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Project and Command-Line Interface&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Then rename the &lt;code&gt;.example.env&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt; so that you can save your OpenAI key in it.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;mv .example.env .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add your Open AI key to your new &lt;code&gt;.env&lt;/code&gt; file. If you don&#39;t have one, you can obtain an OpenAI key &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=&#39;your-key-here&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run it&lt;/strong&gt;!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;operate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Final Step&lt;/strong&gt;: As a last step, the Terminal app will ask for permission for &#34;Screen Recording&#34; and &#34;Accessibility&#34; in the &#34;Security &amp;amp; Privacy&#34; page of Mac&#39;s &#34;System Preferences&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/OthersideAI/self-operating-computer/raw/main/readme/terminal-access-1.png&#34; width=&#34;300&#34; style=&#34;margin: 10px;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/OthersideAI/self-operating-computer/raw/main/readme/terminal-access-2.png&#34; width=&#34;300&#34; style=&#34;margin: 10px;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Contributions are Welcomed! Some Ideas:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt Improvements&lt;/strong&gt;: Noticed any areas for prompt improvements? Feel free to make suggestions or submit a pull request (PR).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enabling New Mouse Capabilities&lt;/strong&gt; (drag, hover, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Adding New Multimodal Models&lt;/strong&gt;: Integration of new multimodal models is welcomed. If you have a specific model in mind that you believe would be a valuable addition, please feel free to integrate it and submit a PR.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Framework Architecture Improvements&lt;/strong&gt;: Think you can enhance the framework architecture described in the intro? We welcome suggestions and PRs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For any input on improving this project, feel free to reach out to me on &lt;a href=&#34;https://twitter.com/josh_bickett&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Follow HyperWriteAI for More Updates&lt;/h3&gt; &#xA;&lt;p&gt;Stay updated with the latest developments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow HyperWriteAI on &lt;a href=&#34;https://twitter.com/HyperWriteAI&#34;&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow HyperWriteAI on &lt;a href=&#34;https://www.linkedin.com/company/othersideai/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project is only compatible with MacOS at this time.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>grpc-ecosystem/grpc-gateway</title>
    <updated>2023-11-30T01:26:19Z</updated>
    <id>tag:github.com,2023-11-30:/grpc-ecosystem/grpc-gateway</id>
    <link href="https://github.com/grpc-ecosystem/grpc-gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;gRPC-Gateway&lt;/h1&gt; &#xA; &lt;p&gt; gRPC to JSON proxy generator following the gRPC HTTP spec &lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/grpc-ecosystem/grpc-gateway/main?color=379c9c&amp;amp;label=build&amp;amp;logo=github&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://app.slack.com/client/T029RQSE6/CBATURP1D&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://slsa.dev/images/gh-badge-level3.svg&#34;&gt;&lt;img src=&#34;https://slsa.dev/images/gh-badge-level3.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The gRPC-Gateway is a plugin of the Google protocol buffers compiler &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;protoc&lt;/a&gt;. It reads protobuf service definitions and generates a reverse-proxy server which translates a RESTful HTTP API into gRPC. This server is generated according to the &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46&#34;&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotations in your service definitions.&lt;/p&gt; &#xA;&lt;p&gt;This helps you provide your APIs in both gRPC and RESTful style at the same time.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/docs/assets/images/architecture_introduction_diagram.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;You can read our docs at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/&#34;&gt;https://grpc-ecosystem.github.io/grpc-gateway/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;- William Mill, &lt;a href=&#34;http://adhocteam.us/&#34;&gt;Ad Hoc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;gRPC is great -- it generates API clients and server stubs in many programming languages, it is fast, easy-to-use, bandwidth-efficient and its design is combat-proven by Google. However, you might still want to provide a traditional RESTful JSON API as well. Reasons can range from maintaining backward-compatibility, supporting languages or clients that are not well supported by gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful JSON architecture.&lt;/p&gt; &#xA;&lt;p&gt;This project aims to provide that HTTP+JSON interface to your gRPC service. A small amount of configuration in your service to attach HTTP semantics is all that&#39;s needed to generate a reverse-proxy with this library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Compile from source&lt;/h3&gt; &#xA;&lt;p&gt;The following instructions assume you are using &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for dependency management. Use a &lt;a href=&#34;https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module&#34;&gt;tool dependency&lt;/a&gt; to track the versions of the following executable packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +build tools&#xA;&#xA;package tools&#xA;&#xA;import (&#xA;    _ &#34;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway&#34;&#xA;    _ &#34;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2&#34;&#xA;    _ &#34;google.golang.org/grpc/cmd/protoc-gen-go-grpc&#34;&#xA;    _ &#34;google.golang.org/protobuf/cmd/protoc-gen-go&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;go mod tidy&lt;/code&gt; to resolve the versions. Install by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go install \&#xA;    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \&#xA;    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \&#xA;    google.golang.org/protobuf/cmd/protoc-gen-go \&#xA;    google.golang.org/grpc/cmd/protoc-gen-go-grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download the binaries&lt;/h3&gt; &#xA;&lt;p&gt;You may alternatively download the binaries from the &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;. We generate &lt;a href=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/slsa.dev&#34;&gt;SLSA3 signatures&lt;/a&gt; using the OpenSSF&#39;s &lt;a href=&#34;https://github.com/slsa-framework/slsa-github-generator&#34;&gt;slsa-framework/slsa-github-generator&lt;/a&gt; during the release process. To verify a release binary:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the verification tool from &lt;a href=&#34;https://github.com/slsa-framework/slsa-verifier#installation&#34;&gt;slsa-framework/slsa-verifier#installation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the provenance file &lt;code&gt;attestation.intoto.jsonl&lt;/code&gt; from the &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the verifier:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;slsa-verifier -artifact-path &amp;lt;the-binary&amp;gt; -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag &amp;lt;the-tag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, see the section on remotely managed plugin versions below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1.Define your &lt;a href=&#34;https://grpc.io/docs/&#34;&gt;gRPC&lt;/a&gt; service using protocol buffers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt; syntax = &#34;proto3&#34;;&#xA; package your.service.v1;&#xA; option go_package = &#34;github.com/yourorg/yourprotos/gen/go/your/service/v1&#34;;&#xA;&#xA; message StringMessage {&#xA;   string value = 1;&#xA; }&#xA;&#xA; service YourService {&#xA;   rpc Echo(StringMessage) returns (StringMessage) {}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Generate gRPC stubs&lt;/h3&gt; &#xA;&lt;p&gt;This step generates the gRPC stubs that you can use to implement the service and consume from clients:&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example &lt;code&gt;buf.gen.yaml&lt;/code&gt; you can use to generate the stubs with &lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this file in place, you can generate your files using &lt;code&gt;buf generate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For a complete example of using &lt;code&gt;buf generate&lt;/code&gt; to generate protobuf stubs, see &lt;a href=&#34;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&#34;&gt;the boilerplate repo&lt;/a&gt;. For more information on generating the stubs with buf, see &lt;a href=&#34;https://docs.buf.build/generate-usage&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, here&#39;s an example of what a command might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . \&#xA;    --go_out ./gen/go/ --go_opt paths=source_relative \&#xA;    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Implement your service in gRPC as usual.&lt;/h3&gt; &#xA;&lt;h3&gt;4. Generate reverse-proxy using &lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;At this point, you have 3 options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no further modifications, use the default mapping to HTTP semantics (method, path, etc.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this will work on any &lt;code&gt;.proto&lt;/code&gt; file, but will not allow setting HTTP paths, request parameters or similar&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;additional &lt;code&gt;.proto&lt;/code&gt; modifications to use a custom mapping &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relies on parameters in the &lt;code&gt;.proto&lt;/code&gt; file to set custom HTTP mappings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;no &lt;code&gt;.proto&lt;/code&gt; modifications, but use an external configuration file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relies on an external configuration file to set custom HTTP mappings&lt;/li&gt; &#xA;   &lt;li&gt;mostly useful when the source proto file isn&#39;t under your control&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1. Using the default mapping&lt;/h4&gt; &#xA;&lt;p&gt;This requires no additional modification to the &lt;code&gt;.proto&lt;/code&gt; file but does require enabling a specific option when executing the plugin. The &lt;code&gt;generate_unbound_methods&lt;/code&gt; should be enabled.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - generate_unbound_methods=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    --grpc-gateway_opt generate_unbound_methods=true \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. With custom annotations&lt;/h4&gt; &#xA;&lt;p&gt;Add a &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46&#34;&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotation to your .proto file&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; syntax = &#34;proto3&#34;;&#xA; package your.service.v1;&#xA; option go_package = &#34;github.com/yourorg/yourprotos/gen/go/your/service/v1&#34;;&#xA;+&#xA;+import &#34;google/api/annotations.proto&#34;;&#xA;+&#xA; message StringMessage {&#xA;   string value = 1;&#xA; }&#xA;&#xA; service YourService {&#xA;-  rpc Echo(StringMessage) returns (StringMessage) {}&#xA;+  rpc Echo(StringMessage) returns (StringMessage) {&#xA;+    option (google.api.http) = {&#xA;+      post: &#34;/v1/example/echo&#34;&#xA;+      body: &#34;*&#34;&#xA;+    };&#xA;+  }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will need to provide the required third party protobuf files to the protobuf compiler. If you are using &lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf&lt;/a&gt;, this dependency can be added to the &lt;code&gt;deps&lt;/code&gt; array in your &lt;code&gt;buf.yaml&lt;/code&gt; under the name &lt;code&gt;buf.build/googleapis/googleapis&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;name: buf.build/yourorg/myprotos&#xA;deps:&#xA;  - buf.build/googleapis/googleapis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Always run &lt;code&gt;buf mod update&lt;/code&gt; after adding a dependency to your &lt;code&gt;buf.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/examples/internal/proto/examplepb/a_bit_of_everything.proto&#34;&gt;a_bit_of_everything.proto&lt;/a&gt; for examples of more annotations you can add to customize gateway behavior and generated OpenAPI output.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you need to ensure the required dependencies are available to the compiler at compile time. These can be found by manually cloning and copying the relevant files from the &lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;googleapis repository&lt;/a&gt;, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running. The files you will need are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;google/api/annotations.proto&#xA;google/api/field_behavior.proto&#xA;google/api/http.proto&#xA;google/api/httpbody.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;protoc&lt;/code&gt; execution might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. External configuration&lt;/h4&gt; &#xA;&lt;p&gt;If you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can alternatively use an external &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/grpc-service-config&#34;&gt;gRPC Service Configuration&lt;/a&gt; file. &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/&#34;&gt;Check our documentation&lt;/a&gt; for more information. This is best combined with the &lt;code&gt;standalone=true&lt;/code&gt; option to generate a file that can live in its own package, separate from the files generated by the source protobuf file.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - grpc_api_configuration=path/to/config.yaml&#xA;      - standalone=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \&#xA;    --grpc-gateway_opt standalone=true \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Write an entrypoint for the HTTP reverse-proxy server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;flag&#34;&#xA;  &#34;net/http&#34;&#xA;&#xA;  &#34;github.com/grpc-ecosystem/grpc-gateway/v2/runtime&#34;&#xA;  &#34;google.golang.org/grpc&#34;&#xA;  &#34;google.golang.org/grpc/credentials/insecure&#34;&#xA;  &#34;google.golang.org/grpc/grpclog&#34;&#xA;&#xA;  gw &#34;github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service&#34;  // Update&#xA;)&#xA;&#xA;var (&#xA;  // command-line options:&#xA;  // gRPC server endpoint&#xA;  grpcServerEndpoint = flag.String(&#34;grpc-server-endpoint&#34;,  &#34;localhost:9090&#34;, &#34;gRPC server endpoint&#34;)&#xA;)&#xA;&#xA;func run() error {&#xA;  ctx := context.Background()&#xA;  ctx, cancel := context.WithCancel(ctx)&#xA;  defer cancel()&#xA;&#xA;  // Register gRPC server endpoint&#xA;  // Note: Make sure the gRPC server is running properly and accessible&#xA;  mux := runtime.NewServeMux()&#xA;  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}&#xA;  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)&#xA;  if err != nil {&#xA;    return err&#xA;  }&#xA;&#xA;  // Start HTTP server (and proxy calls to gRPC server endpoint)&#xA;  return http.ListenAndServe(&#34;:8081&#34;, mux)&#xA;}&#xA;&#xA;func main() {&#xA;  flag.Parse()&#xA;&#xA;  if err := run(); err != nil {&#xA;    grpclog.Fatal(err)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6. (Optional) Generate OpenAPI definitions using &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: openapiv2&#xA;    out: gen/openapiv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the custom protobuf annotations supported by &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;, we need another dependency added to our protobuf generation step. If you are using &lt;code&gt;buf&lt;/code&gt;, you can add the &lt;code&gt;buf.build/grpc-ecosystem/grpc-gateway&lt;/code&gt; dependency to your &lt;code&gt;deps&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;name: buf.build/yourorg/myprotos&#xA;deps:&#xA;  - buf.build/googleapis/googleapis&#xA;  - buf.build/grpc-ecosystem/grpc-gateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the swagger file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --openapiv2_out ./gen/openapiv2 \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you will need to copy the protobuf files from the &lt;code&gt;protoc-gen-openapiv2/options&lt;/code&gt; directory of this repository, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running.&lt;/p&gt; &#xA;&lt;p&gt;Note that this plugin also supports generating OpenAPI definitions for unannotated methods; use the &lt;code&gt;generate_unbound_methods&lt;/code&gt; option to enable this.&lt;/p&gt; &#xA;&lt;p&gt;It is possible with the HTTP mapping for a gRPC service method to create duplicate mappings with the only difference being constraints on the path parameter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/v1/{name=projects/*}&lt;/code&gt; and &lt;code&gt;/v1/{name=organizations/*}&lt;/code&gt; both become &lt;code&gt;/v1/{name}&lt;/code&gt;. When this occurs the plugin will rename the path parameter with a &#34;_1&#34; (or &#34;_2&#34; etc) suffix to differentiate the different operations. So in the above example, the 2nd path would become &lt;code&gt;/v1/{name_1=organizations/*}&lt;/code&gt;. This can also cause OpenAPI clients to URL encode the &#34;/&#34; that is part of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to accept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or UnescapingModeLegacy (which is the default currently though may change in future versions). See &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/&#34;&gt;Customizing Your Gateway&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with remote plugins&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative to all of the above, you can use &lt;code&gt;buf&lt;/code&gt; with &lt;a href=&#34;https://docs.buf.build/configuration/v1/buf-gen-yaml#name-or-remote&#34;&gt;remote plugins&lt;/a&gt; to manage plugin versions and generation. An example &lt;code&gt;buf.gen.yaml&lt;/code&gt; using remote plugin generation looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: buf.build/protocolbuffers/go:v1.31.0&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: buf.build/grpc/go:v1.3.0&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: buf.build/grpc-ecosystem/gateway:v2.16.2&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: buf.build/grpc-ecosystem/openapiv2:v2.16.2&#xA;    out: gen/openapiv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires no local installation of any plugins. Be careful to use the same version of the generator as the runtime library, i.e. if using &lt;code&gt;v2.16.2&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the same version of the runtime in your &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that usage of remote plugins is incompatible with usage of external configuration files like &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file&#34;&gt;grpc_api_configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Video intro&lt;/h2&gt; &#xA;&lt;p&gt;This GopherCon UK 2019 presentation from our maintainer &lt;a href=&#34;https://github.com/johanbrandhorst&#34;&gt;@JohanBrandhorst&lt;/a&gt; provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: &lt;a href=&#34;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&#34;&gt;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=Pq1paKC-fXk&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Parameters and flags&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;buf&lt;/code&gt; to generate stubs, flags and parameters are passed through the &lt;code&gt;opt&lt;/code&gt; field in your &lt;code&gt;buf.gen.yaml&lt;/code&gt; file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - grpc_api_configuration=path/to/config.yaml&#xA;      - standalone=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During code generation with &lt;code&gt;protoc&lt;/code&gt;, flags to gRPC-Gateway tools must be passed through &lt;code&gt;protoc&lt;/code&gt; using one of 2 patterns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as part of the &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out&lt;/code&gt; &lt;code&gt;protoc&lt;/code&gt; parameter: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out=&amp;lt;flags&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--grpc-gateway_out=repeated_path_param_separator=ssv:.&#xA;--openapiv2_out=repeated_path_param_separator=ssv:.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using additional &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt&lt;/code&gt; parameters: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt=&amp;lt;flag&amp;gt;[,&amp;lt;flag&amp;gt;]*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--grpc-gateway_opt repeated_path_param_separator=ssv&#xA;--openapiv2_opt repeated_path_param_separator=ssv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;More examples are available under the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.proto&lt;/code&gt;: service definition &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.pb.go&lt;/code&gt;: [generated] stub of the service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/uannotated_echo_service.pb.gw.go&lt;/code&gt;: [generated] reverse proxy for the service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/unannotated_echo_service.yaml&lt;/code&gt;: gRPC API Configuration for &lt;code&gt;unannotated_echo_service.proto&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server/main.go&lt;/code&gt;: service implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main.go&lt;/code&gt;: entrypoint of the generated reverse proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use the same port for custom HTTP handlers (e.g. serving &lt;code&gt;swagger.json&lt;/code&gt;), gRPC-Gateway, and a gRPC server, see &lt;a href=&#34;https://github.com/philips/grpc-gateway-example/raw/master/cmd/serve.go&#34;&gt;this example by CoreOS&lt;/a&gt; (and its accompanying &lt;a href=&#34;https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html&#34;&gt;blog post&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mynalabsai/grpc_gateway_media_example&#34;&gt;This example by neiro.ai&lt;/a&gt; (and its accompanying &lt;a href=&#34;https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8&#34;&gt;blog post&lt;/a&gt;) shows how mediafiles using &lt;code&gt;multipart/form-data&lt;/code&gt; can be integrated into rpc messages using a middleware.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Supported&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generating JSON API handlers.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the request body.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the request path.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the query string.&lt;/li&gt; &#xA; &lt;li&gt;Enum fields in the path parameter (including repeated enum fields).&lt;/li&gt; &#xA; &lt;li&gt;Mapping streaming APIs to newline-delimited JSON streams.&lt;/li&gt; &#xA; &lt;li&gt;Mapping HTTP headers with &lt;code&gt;Grpc-Metadata-&lt;/code&gt; prefix to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optionally emitting API definitions for &lt;a href=&#34;https://swagger.io/docs/specification/2-0/basic-structure/&#34;&gt;OpenAPI (Swagger) v2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Setting &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/doc/PROTOCOL-HTTP2.md#requests&#34;&gt;gRPC timeouts&lt;/a&gt; through inbound HTTP &lt;code&gt;Grpc-Timeout&lt;/code&gt; header.&lt;/li&gt; &#xA; &lt;li&gt;Partial support for &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/grpc-service-config&#34;&gt;gRPC API Configuration&lt;/a&gt; files as an alternative to annotation.&lt;/li&gt; &#xA; &lt;li&gt;Automatically translating PATCH requests into Field Mask gRPC requests. See &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/&#34;&gt;the docs&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No plan to support&lt;/h3&gt; &#xA;&lt;p&gt;But patches are welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Method parameters in HTTP headers.&lt;/li&gt; &#xA; &lt;li&gt;Handling trailer metadata.&lt;/li&gt; &#xA; &lt;li&gt;Encoding request/response body in XML.&lt;/li&gt; &#xA; &lt;li&gt;True bi-directional streaming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mapping gRPC to HTTP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/runtime/errors.go#L15&#34;&gt;How gRPC error codes map to HTTP status codes in the response&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;HTTP request source IP is added as &lt;code&gt;X-Forwarded-For&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP request host is added as &lt;code&gt;X-Forwarded-Host&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP &lt;code&gt;Authorization&lt;/code&gt; header is added as &lt;code&gt;authorization&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;Remaining Permanent HTTP header keys (as specified by the IANA &lt;a href=&#34;http://www.iana.org/assignments/message-headers/message-headers.xhtml&#34;&gt;here&lt;/a&gt;) are prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt; and added with their values to gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP headers that start with &#39;Grpc-Metadata-&#39; are mapped to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;While configurable, the default {un,}marshaling uses &lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson&#34;&gt;protojson&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The path template used to map gRPC service methods to HTTP endpoints supports the &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto&#34;&gt;google.api.http&lt;/a&gt; path template syntax. For example, &lt;code&gt;/api/v1/{name=projects/*/topics/*}&lt;/code&gt; or &lt;code&gt;/prefix/{path=organizations/**}&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;gRPC-Gateway is licensed under the BSD 3-Clause License. See &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gto76/python-cheatsheet</title>
    <updated>2023-11-30T01:26:19Z</updated>
    <id>tag:github.com,2023-11-30:/gto76/python-cheatsheet</id>
    <link href="https://github.com/gto76/python-cheatsheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Comprehensive Python Cheatsheet&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Comprehensive Python Cheatsheet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/README.md&#34;&gt;Download text file&lt;/a&gt;, &lt;a href=&#34;https://transactions.sendowl.com/products/78175486/4422834F/view&#34;&gt;Buy PDF&lt;/a&gt;, &lt;a href=&#34;https://github.com/gto76/python-cheatsheet&#34;&gt;Fork me on GitHub&lt;/a&gt; or &lt;a href=&#34;https://github.com/gto76/python-cheatsheet/wiki/Frequently-Asked-Questions&#34;&gt;Check out FAQ&lt;/a&gt;. &lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/web/image_888.jpeg&#34; alt=&#34;Monty Python&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;1. Collections:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#list&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#dictionary&#34;&gt;&lt;code&gt;Dictionary&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#set&#34;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#tuple&#34;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#range&#34;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#enumerate&#34;&gt;&lt;code&gt;Enumerate&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#iterator&#34;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#generator&#34;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;2. Types:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#type&#34;&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#string&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#regex&#34;&gt;&lt;code&gt;Regular_Exp&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#format&#34;&gt;&lt;code&gt;Format&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#numbers-1&#34;&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#combinatorics&#34;&gt;&lt;code&gt;Combinatorics&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#datetime&#34;&gt;&lt;code&gt;Datetime&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;3. Syntax:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#arguments&#34;&gt;&lt;code&gt;Args&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#inline&#34;&gt;&lt;code&gt;Inline&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#imports&#34;&gt;&lt;code&gt;Import&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#decorator&#34;&gt;&lt;code&gt;Decorator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#class&#34;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#duck-types&#34;&gt;&lt;code&gt;Duck_Types&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#enum&#34;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#exceptions&#34;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;4. System:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#exit&#34;&gt;&lt;code&gt;Exit&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#print&#34;&gt;&lt;code&gt;Print&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#input&#34;&gt;&lt;code&gt;Input&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#command-line-arguments&#34;&gt;&lt;code&gt;Command_Line_Arguments&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#open&#34;&gt;&lt;code&gt;Open&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#paths&#34;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#os-commands&#34;&gt;&lt;code&gt;OS_Commands&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;5. Data:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#json&#34;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pickle&#34;&gt;&lt;code&gt;Pickle&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#csv&#34;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#sqlite&#34;&gt;&lt;code&gt;SQLite&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#bytes&#34;&gt;&lt;code&gt;Bytes&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#struct&#34;&gt;&lt;code&gt;Struct&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#array&#34;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#memory-view&#34;&gt;&lt;code&gt;Memory_View&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#deque&#34;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;6. Advanced:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#threading&#34;&gt;&lt;code&gt;Threading&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#operator&#34;&gt;&lt;code&gt;Operator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#introspection&#34;&gt;&lt;code&gt;Introspection&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#metaprogramming&#34;&gt;&lt;code&gt;Metaprograming&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#eval&#34;&gt;&lt;code&gt;Eval&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#coroutines&#34;&gt;&lt;code&gt;Coroutines&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;7. Libraries:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#progress-bar&#34;&gt;&lt;code&gt;Progress_Bar&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#plot&#34;&gt;&lt;code&gt;Plot&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#table&#34;&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#curses&#34;&gt;&lt;code&gt;Curses&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#logging&#34;&gt;&lt;code&gt;Logging&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#scraping&#34;&gt;&lt;code&gt;Scraping&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#web&#34;&gt;&lt;code&gt;Web&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#profiling&#34;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;8. Multimedia:&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#numpy&#34;&gt;&lt;code&gt;NumPy&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#image&#34;&gt;&lt;code&gt;Image&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#animation&#34;&gt;&lt;code&gt;Animation&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#audio&#34;&gt;&lt;code&gt;Audio&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pygame&#34;&gt;&lt;code&gt;Pygame&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pandas&#34;&gt;&lt;code&gt;Pandas&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#plotly&#34;&gt;&lt;code&gt;Plotly&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pysimplegui&#34;&gt;&lt;code&gt;PySimpleGUI&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &#39;__main__&#39;:      # Runs main() if file wasn&#39;t imported.&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = &amp;lt;list&amp;gt;[&amp;lt;slice&amp;gt;]        # Or: &amp;lt;list&amp;gt;[from_inclusive : to_exclusive : ±step]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;.append(&amp;lt;el&amp;gt;)             # Or: &amp;lt;list&amp;gt; += [&amp;lt;el&amp;gt;]&#xA;&amp;lt;list&amp;gt;.extend(&amp;lt;collection&amp;gt;)     # Or: &amp;lt;list&amp;gt; += &amp;lt;collection&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;.sort()                   # Sorts in ascending order.&#xA;&amp;lt;list&amp;gt;.reverse()                # Reverses the list in-place.&#xA;&amp;lt;list&amp;gt; = sorted(&amp;lt;collection&amp;gt;)   # Returns a new sorted list.&#xA;&amp;lt;iter&amp;gt; = reversed(&amp;lt;list&amp;gt;)       # Returns reversed iterator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum_of_elements  = sum(&amp;lt;collection&amp;gt;)&#xA;elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]&#xA;sorted_by_second = sorted(&amp;lt;collection&amp;gt;, key=lambda el: el[1])&#xA;sorted_by_both   = sorted(&amp;lt;collection&amp;gt;, key=lambda el: (el[1], el[0]))&#xA;flatter_list     = list(itertools.chain.from_iterable(&amp;lt;list&amp;gt;))&#xA;product_of_elems = functools.reduce(lambda out, el: out * el, &amp;lt;collection&amp;gt;)&#xA;list_of_chars    = list(&amp;lt;str&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For details about sorted(), min() and max() see &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#sortable&#34;&gt;sortable&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#operator&#34;&gt;operator&lt;/a&gt; provides functions itemgetter() and mul() that offer the same functionality as &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#lambda&#34;&gt;lambda&lt;/a&gt; expressions above.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;.insert(&amp;lt;int&amp;gt;, &amp;lt;el&amp;gt;)      # Inserts item at index and moves the rest to the right.&#xA;&amp;lt;el&amp;gt;  = &amp;lt;list&amp;gt;.pop([&amp;lt;int&amp;gt;])     # Removes and returns item at index or from the end.&#xA;&amp;lt;int&amp;gt; = &amp;lt;list&amp;gt;.count(&amp;lt;el&amp;gt;)      # Returns number of occurrences. Also works on strings.&#xA;&amp;lt;int&amp;gt; = &amp;lt;list&amp;gt;.index(&amp;lt;el&amp;gt;)      # Returns index of the first occurrence or raises ValueError.&#xA;&amp;lt;list&amp;gt;.remove(&amp;lt;el&amp;gt;)             # Removes first occurrence of the item or raises ValueError.&#xA;&amp;lt;list&amp;gt;.clear()                  # Removes all items. Also works on dictionary and set.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dictionary&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;view&amp;gt; = &amp;lt;dict&amp;gt;.keys()                          # Coll. of keys that reflects changes.&#xA;&amp;lt;view&amp;gt; = &amp;lt;dict&amp;gt;.values()                        # Coll. of values that reflects changes.&#xA;&amp;lt;view&amp;gt; = &amp;lt;dict&amp;gt;.items()                         # Coll. of key-value tuples that reflects chgs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;value  = &amp;lt;dict&amp;gt;.get(key, default=None)          # Returns default if key is missing.&#xA;value  = &amp;lt;dict&amp;gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.&#xA;&amp;lt;dict&amp;gt; = collections.defaultdict(&amp;lt;type&amp;gt;)        # Returns a dict with default value `&amp;lt;type&amp;gt;()`.&#xA;&amp;lt;dict&amp;gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;dict&amp;gt; = dict(&amp;lt;collection&amp;gt;)                     # Creates a dict from coll. of key-value pairs.&#xA;&amp;lt;dict&amp;gt; = dict(zip(keys, values))                # Creates a dict from two collections.&#xA;&amp;lt;dict&amp;gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;dict&amp;gt;.update(&amp;lt;dict&amp;gt;)                           # Adds items. Replaces ones with matching keys.&#xA;value = &amp;lt;dict&amp;gt;.pop(key)                         # Removes item or raises KeyError if missing.&#xA;{k for k, v in &amp;lt;dict&amp;gt;.items() if v == value}    # Returns set of keys that point to the value.&#xA;{k: v for k, v in &amp;lt;dict&amp;gt;.items() if k in keys}  # Returns a dictionary, filtered by keys.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Counter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter&#xA;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;red&#39;, &#39;red&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; counter = Counter(colors)&#xA;&amp;gt;&amp;gt;&amp;gt; counter[&#39;yellow&#39;] += 1&#xA;Counter({&#39;blue&#39;: 3, &#39;red&#39;: 2, &#39;yellow&#39;: 1})&#xA;&amp;gt;&amp;gt;&amp;gt; counter.most_common()[0]&#xA;(&#39;blue&#39;, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;set&amp;gt; = set()                                   # `{}` returns a dictionary.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;set&amp;gt;.add(&amp;lt;el&amp;gt;)                                 # Or: &amp;lt;set&amp;gt; |= {&amp;lt;el&amp;gt;}&#xA;&amp;lt;set&amp;gt;.update(&amp;lt;collection&amp;gt; [, ...])              # Or: &amp;lt;set&amp;gt; |= &amp;lt;set&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.union(&amp;lt;coll.&amp;gt;)                   # Or: &amp;lt;set&amp;gt; | &amp;lt;set&amp;gt;&#xA;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.intersection(&amp;lt;coll.&amp;gt;)            # Or: &amp;lt;set&amp;gt; &amp;amp; &amp;lt;set&amp;gt;&#xA;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.difference(&amp;lt;coll.&amp;gt;)              # Or: &amp;lt;set&amp;gt; - &amp;lt;set&amp;gt;&#xA;&amp;lt;set&amp;gt;  = &amp;lt;set&amp;gt;.symmetric_difference(&amp;lt;coll.&amp;gt;)    # Or: &amp;lt;set&amp;gt; ^ &amp;lt;set&amp;gt;&#xA;&amp;lt;bool&amp;gt; = &amp;lt;set&amp;gt;.issubset(&amp;lt;coll.&amp;gt;)                # Or: &amp;lt;set&amp;gt; &amp;lt;= &amp;lt;set&amp;gt;&#xA;&amp;lt;bool&amp;gt; = &amp;lt;set&amp;gt;.issuperset(&amp;lt;coll.&amp;gt;)              # Or: &amp;lt;set&amp;gt; &amp;gt;= &amp;lt;set&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;set&amp;gt;.pop()                              # Raises KeyError if empty.&#xA;&amp;lt;set&amp;gt;.remove(&amp;lt;el&amp;gt;)                              # Raises KeyError if missing.&#xA;&amp;lt;set&amp;gt;.discard(&amp;lt;el&amp;gt;)                             # Doesn&#39;t raise an error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frozen Set&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Is immutable and hashable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That means it can be used as a key in a dictionary or as an element in a set.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;frozenset&amp;gt; = frozenset(&amp;lt;collection&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tuple&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tuple is an immutable and hashable list.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;tuple&amp;gt; = ()                               # Empty tuple.&#xA;&amp;lt;tuple&amp;gt; = (&amp;lt;el&amp;gt;,)                          # Or: &amp;lt;el&amp;gt;,&#xA;&amp;lt;tuple&amp;gt; = (&amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt; [, ...])         # Or: &amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt; [, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Named Tuple&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tuple&#39;s subclass with named elements.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import namedtuple&#xA;&amp;gt;&amp;gt;&amp;gt; Point = namedtuple(&#39;Point&#39;, &#39;x y&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; p = Point(1, y=2)&#xA;Point(x=1, y=2)&#xA;&amp;gt;&amp;gt;&amp;gt; p[0]&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; p.x&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; getattr(p, &#39;y&#39;)&#xA;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Range&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Immutable and hashable sequence of integers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;range&amp;gt; = range(stop)                      # range(to_exclusive)&#xA;&amp;lt;range&amp;gt; = range(start, stop)               # range(from_inclusive, to_exclusive)&#xA;&amp;lt;range&amp;gt; = range(start, stop, ±step)        # range(from_inclusive, to_exclusive, ±step_size)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [i for i in range(3)]&#xA;[0, 1, 2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enumerate&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, el in enumerate(&amp;lt;collection&amp;gt; [, i_start]):&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iterator&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = iter(&amp;lt;collection&amp;gt;)                # `iter(&amp;lt;iter&amp;gt;)` returns unmodified iterator.&#xA;&amp;lt;iter&amp;gt; = iter(&amp;lt;function&amp;gt;, to_exclusive)    # A sequence of return values until &#39;to_exclusive&#39;.&#xA;&amp;lt;el&amp;gt;   = next(&amp;lt;iter&amp;gt; [, default])          # Raises StopIteration or returns &#39;default&#39; on end.&#xA;&amp;lt;list&amp;gt; = list(&amp;lt;iter&amp;gt;)                      # Returns a list of iterator&#39;s remaining elements.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Itertools&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import itertools as it&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = it.count(start=0, step=1)         # Returns updated value endlessly. Accepts floats.&#xA;&amp;lt;iter&amp;gt; = it.repeat(&amp;lt;el&amp;gt; [, times])         # Returns element endlessly or &#39;times&#39; times.&#xA;&amp;lt;iter&amp;gt; = it.cycle(&amp;lt;collection&amp;gt;)            # Repeats the sequence endlessly.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = it.chain(&amp;lt;coll&amp;gt;, &amp;lt;coll&amp;gt; [, ...])  # Empties collections in order (figuratively).&#xA;&amp;lt;iter&amp;gt; = it.chain.from_iterable(&amp;lt;coll&amp;gt;)    # Empties collections inside a collection in order.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = it.islice(&amp;lt;coll&amp;gt;, to_exclusive)   # Only returns first &#39;to_exclusive&#39; elements.&#xA;&amp;lt;iter&amp;gt; = it.islice(&amp;lt;coll&amp;gt;, from_inc, …)    # `to_exclusive, +step_size`. Indices can be None.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generator&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any function that contains a yield statement returns a generator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generators and iterators are interchangeable.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def count(start, step):&#xA;    while True:&#xA;        yield start&#xA;        start += step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = count(10, 2)&#xA;&amp;gt;&amp;gt;&amp;gt; next(counter), next(counter), next(counter)&#xA;(10, 12, 14)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Type&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything is an object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Every object has a type.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type and class are synonymous.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;type&amp;gt; = type(&amp;lt;el&amp;gt;)                          # Or: &amp;lt;el&amp;gt;.__class__&#xA;&amp;lt;bool&amp;gt; = isinstance(&amp;lt;el&amp;gt;, &amp;lt;type&amp;gt;)            # Or: issubclass(type(&amp;lt;el&amp;gt;), &amp;lt;type&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(&#39;a&#39;), &#39;a&#39;.__class__, str&#xA;(&amp;lt;class &#39;str&#39;&amp;gt;, &amp;lt;class &#39;str&#39;&amp;gt;, &amp;lt;class &#39;str&#39;&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Some types do not have built-in names, so they must be imported:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Abstract Base Classes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections.abc import Iterable, Collection, Sequence&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance([1, 2, 3], Iterable)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------+------------+------------+------------+&#xA;|                  |  Iterable  | Collection |  Sequence  |&#xA;+------------------+------------+------------+------------+&#xA;| list, range, str |    yes     |    yes     |    yes     |&#xA;| dict, set        |    yes     |    yes     |            |&#xA;| iter             |    yes     |            |            |&#xA;+------------------+------------+------------+------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from numbers import Number, Complex, Real, Rational, Integral&#xA;&amp;gt;&amp;gt;&amp;gt; isinstance(123, Number)&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------------+----------+----------+----------+----------+----------+&#xA;|                    |  Number  |  Complex |   Real   | Rational | Integral |&#xA;+--------------------+----------+----------+----------+----------+----------+&#xA;| int                |   yes    |   yes    |   yes    |   yes    |   yes    |&#xA;| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |&#xA;| float              |   yes    |   yes    |   yes    |          |          |&#xA;| complex            |   yes    |   yes    |          |          |          |&#xA;| decimal.Decimal    |   yes    |          |          |          |          |&#xA;+--------------------+----------+----------+----------+----------+----------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Immutable sequence of characters.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.strip()                       # Strips all whitespace characters from both ends.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.strip(&#39;&amp;lt;chars&amp;gt;&#39;)              # Strips passed characters. Also lstrip/rstrip().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = &amp;lt;str&amp;gt;.split()                       # Splits on one or more whitespace characters.&#xA;&amp;lt;list&amp;gt; = &amp;lt;str&amp;gt;.split(sep=None, maxsplit=-1)  # Splits on &#39;sep&#39; str at most &#39;maxsplit&#39; times.&#xA;&amp;lt;list&amp;gt; = &amp;lt;str&amp;gt;.splitlines(keepends=False)    # On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.join(&amp;lt;coll_of_strings&amp;gt;)       # Joins elements using string as a separator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = &amp;lt;sub_str&amp;gt; in &amp;lt;str&amp;gt;                  # Checks if string contains the substring.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.startswith(&amp;lt;sub_str&amp;gt;)         # Pass tuple of strings for multiple options.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.endswith(&amp;lt;sub_str&amp;gt;)           # Pass tuple of strings for multiple options.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;str&amp;gt;.find(&amp;lt;sub_str&amp;gt;)               # Returns start index of the first match or -1.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;str&amp;gt;.index(&amp;lt;sub_str&amp;gt;)              # Same, but raises ValueError if missing.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.lower()                       # Changes the case. Also upper/capitalize/title().&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.replace(old, new [, count])   # Replaces &#39;old&#39; with &#39;new&#39; at most &#39;count&#39; times.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;str&amp;gt;.translate(&amp;lt;table&amp;gt;)            # Use `str.maketrans(&amp;lt;dict&amp;gt;)` to generate table.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = chr(&amp;lt;int&amp;gt;)                          # Converts int to Unicode character.&#xA;&amp;lt;int&amp;gt;  = ord(&amp;lt;str&amp;gt;)                          # Converts Unicode character to int.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;unicodedata.normalize(&#34;NFC&#34;, &amp;lt;str&amp;gt;)&#39;&lt;/code&gt; on strings that may contain characters like &lt;code&gt;&#39;Ö&#39;&lt;/code&gt; before comparing them, because they can be stored as one or two characters.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Property Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.isdecimal()                   # Checks for [0-9].&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.isdigit()                     # Checks for [²³¹] and isdecimal().&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.isnumeric()                   # Checks for [¼½¾] and isdigit().&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.isalnum()                     # Checks for [a-zA-Z] and isnumeric().&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.isprintable()                 # Checks for [ !#$%…] and isalnum().&#xA;&amp;lt;bool&amp;gt; = &amp;lt;str&amp;gt;.isspace()                     # Checks for [ \t\n\r\f\v\x1c-\x1f\x85\xa0…].&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Regex&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions for regular expression matching.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;   = re.sub(&amp;lt;regex&amp;gt;, new, text, count=0)  # Substitutes all occurrences with &#39;new&#39;.&#xA;&amp;lt;list&amp;gt;  = re.findall(&amp;lt;regex&amp;gt;, text)            # Returns all occurrences as strings.&#xA;&amp;lt;list&amp;gt;  = re.split(&amp;lt;regex&amp;gt;, text, maxsplit=0)  # Add brackets around regex to include matches.&#xA;&amp;lt;Match&amp;gt; = re.search(&amp;lt;regex&amp;gt;, text)             # First occurrence of the pattern or None.&#xA;&amp;lt;Match&amp;gt; = re.match(&amp;lt;regex&amp;gt;, text)              # Searches only at the beginning of the text.&#xA;&amp;lt;iter&amp;gt;  = re.finditer(&amp;lt;regex&amp;gt;, text)           # Returns all occurrences as Match objects.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &#39;new&#39; can be a function that accepts a Match object and returns a string.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &lt;code&gt;&#39;flags=re.IGNORECASE&#39;&lt;/code&gt; can be used with all functions.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &lt;code&gt;&#39;flags=re.MULTILINE&#39;&lt;/code&gt; makes &lt;code&gt;&#39;^&#39;&lt;/code&gt; and &lt;code&gt;&#39;$&#39;&lt;/code&gt; match the start/end of each line.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Argument &lt;code&gt;&#39;flags=re.DOTALL&#39;&lt;/code&gt; makes &lt;code&gt;&#39;.&#39;&lt;/code&gt; also accept the &lt;code&gt;&#39;\n&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;r&#39;\1&#39;&lt;/code&gt; or &lt;code&gt;&#39;\\1&#39;&lt;/code&gt; for backreference (&lt;code&gt;&#39;\1&#39;&lt;/code&gt; returns a character with octal code 1).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add &lt;code&gt;&#39;?&#39;&lt;/code&gt; after &lt;code&gt;&#39;*&#39;&lt;/code&gt; and &lt;code&gt;&#39;+&#39;&lt;/code&gt; to make them non-greedy.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Match Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;   = &amp;lt;Match&amp;gt;.group()                      # Returns the whole match. Also group(0).&#xA;&amp;lt;str&amp;gt;   = &amp;lt;Match&amp;gt;.group(1)                     # Returns the part inside first brackets.&#xA;&amp;lt;tuple&amp;gt; = &amp;lt;Match&amp;gt;.groups()                     # Returns all bracketed parts.&#xA;&amp;lt;int&amp;gt;   = &amp;lt;Match&amp;gt;.start()                      # Returns start index of the match.&#xA;&amp;lt;int&amp;gt;   = &amp;lt;Match&amp;gt;.end()                        # Returns exclusive end index of the match.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Special Sequences&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;\d&#39; == &#39;[0-9]&#39;                                # Matches decimal characters.&#xA;&#39;\w&#39; == &#39;[a-zA-Z0-9_]&#39;                         # Matches alphanumerics and underscore.&#xA;&#39;\s&#39; == &#39;[ \t\n\r\f\v]&#39;                        # Matches whitespaces.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless &lt;code&gt;&#39;flags=re.ASCII&#39;&lt;/code&gt; argument is used.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;As shown above, it restricts all special sequence matches to the first 128 characters and prevents &lt;code&gt;&#39;\s&#39;&lt;/code&gt; from accepting &lt;code&gt;&#39;[\x1c-\x1f]&#39;&lt;/code&gt; (the so-called separator characters).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Format&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;&amp;lt;str&amp;gt; = f&#39;{&amp;lt;el_1&amp;gt;}, {&amp;lt;el_2&amp;gt;}&#39;            # Curly brackets can also contain expressions.&#xA;&amp;lt;str&amp;gt; = &#39;{}, {}&#39;.format(&amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt;)  # Or: &#39;{0}, {a}&#39;.format(&amp;lt;el_1&amp;gt;, a=&amp;lt;el_2&amp;gt;)&#xA;&amp;lt;str&amp;gt; = &#39;%s, %s&#39; % (&amp;lt;el_1&amp;gt;, &amp;lt;el_2&amp;gt;)      # Redundant and inferior C-style formatting.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Person = collections.namedtuple(&#39;Person&#39;, &#39;name height&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; person = Person(&#39;Jean-Luc&#39;, 187)&#xA;&amp;gt;&amp;gt;&amp;gt; f&#39;{person.name} is {person.height / 100} meters tall.&#39;&#xA;&#39;Jean-Luc is 1.87 meters tall.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;General Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&amp;lt;el&amp;gt;:&amp;lt;10}                               # &#39;&amp;lt;el&amp;gt;      &#39;&#xA;{&amp;lt;el&amp;gt;:^10}                               # &#39;   &amp;lt;el&amp;gt;   &#39;&#xA;{&amp;lt;el&amp;gt;:&amp;gt;10}                               # &#39;      &amp;lt;el&amp;gt;&#39;&#xA;{&amp;lt;el&amp;gt;:.&amp;lt;10}                              # &#39;&amp;lt;el&amp;gt;......&#39;&#xA;{&amp;lt;el&amp;gt;:0}                                 # &#39;&amp;lt;el&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Options can be generated dynamically: &lt;code&gt;f&#39;{&amp;lt;el&amp;gt;:{&amp;lt;str/int&amp;gt;}[…]}&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Adding &lt;code&gt;&#39;=&#39;&lt;/code&gt; to the expression prepends it to the output: &lt;code&gt;f&#39;{1+1=}&#39;&lt;/code&gt; returns &lt;code&gt;&#39;1+1=2&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Adding &lt;code&gt;&#39;!r&#39;&lt;/code&gt; to the expression converts object to string by calling its &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#class&#34;&gt;repr()&lt;/a&gt; method.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Strings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;abcde&#39;:10}                             # &#39;abcde     &#39;&#xA;{&#39;abcde&#39;:10.3}                           # &#39;abc       &#39;&#xA;{&#39;abcde&#39;:.3}                             # &#39;abc&#39;&#xA;{&#39;abcde&#39;!r:10}                           # &#34;&#39;abcde&#39;   &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numbers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{123456:10}                              # &#39;    123456&#39;&#xA;{123456:10,}                             # &#39;   123,456&#39;&#xA;{123456:10_}                             # &#39;   123_456&#39;&#xA;{123456:+10}                             # &#39;   +123456&#39;&#xA;{123456:=+10}                            # &#39;+   123456&#39;&#xA;{123456: }                               # &#39; 123456&#39;&#xA;{-123456: }                              # &#39;-123456&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Floats&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{1.23456:10.3}                           # &#39;      1.23&#39;&#xA;{1.23456:10.3f}                          # &#39;     1.235&#39;&#xA;{1.23456:10.3e}                          # &#39; 1.235e+00&#39;&#xA;{1.23456:10.3%}                          # &#39;  123.456%&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comparison of presentation types:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------+----------------+----------------+----------------+----------------+&#xA;|              |    {&amp;lt;float&amp;gt;}   |   {&amp;lt;float&amp;gt;:f}  |   {&amp;lt;float&amp;gt;:e}  |   {&amp;lt;float&amp;gt;:%}  |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;|  0.000056789 |   &#39;5.6789e-05&#39; |    &#39;0.000057&#39;  | &#39;5.678900e-05&#39; |    &#39;0.005679%&#39; |&#xA;|  0.00056789  |   &#39;0.00056789&#39; |    &#39;0.000568&#39;  | &#39;5.678900e-04&#39; |    &#39;0.056789%&#39; |&#xA;|  0.0056789   |   &#39;0.0056789&#39;  |    &#39;0.005679&#39;  | &#39;5.678900e-03&#39; |    &#39;0.567890%&#39; |&#xA;|  0.056789    |   &#39;0.056789&#39;   |    &#39;0.056789&#39;  | &#39;5.678900e-02&#39; |    &#39;5.678900%&#39; |&#xA;|  0.56789     |   &#39;0.56789&#39;    |    &#39;0.567890&#39;  | &#39;5.678900e-01&#39; |   &#39;56.789000%&#39; |&#xA;|  5.6789      |   &#39;5.6789&#39;     |    &#39;5.678900&#39;  | &#39;5.678900e+00&#39; |  &#39;567.890000%&#39; |&#xA;| 56.789       |  &#39;56.789&#39;      |   &#39;56.789000&#39;  | &#39;5.678900e+01&#39; | &#39;5678.900000%&#39; |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------+----------------+----------------+----------------+----------------+&#xA;|              |  {&amp;lt;float&amp;gt;:.2}  |  {&amp;lt;float&amp;gt;:.2f} |  {&amp;lt;float&amp;gt;:.2e} |  {&amp;lt;float&amp;gt;:.2%} |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;|  0.000056789 |    &#39;5.7e-05&#39;   |      &#39;0.00&#39;    |   &#39;5.68e-05&#39;   |      &#39;0.01%&#39;   |&#xA;|  0.00056789  |    &#39;0.00057&#39;   |      &#39;0.00&#39;    |   &#39;5.68e-04&#39;   |      &#39;0.06%&#39;   |&#xA;|  0.0056789   |    &#39;0.0057&#39;    |      &#39;0.01&#39;    |   &#39;5.68e-03&#39;   |      &#39;0.57%&#39;   |&#xA;|  0.056789    |    &#39;0.057&#39;     |      &#39;0.06&#39;    |   &#39;5.68e-02&#39;   |      &#39;5.68%&#39;   |&#xA;|  0.56789     |    &#39;0.57&#39;      |      &#39;0.57&#39;    |   &#39;5.68e-01&#39;   |     &#39;56.79%&#39;   |&#xA;|  5.6789      |    &#39;5.7&#39;       |      &#39;5.68&#39;    |   &#39;5.68e+00&#39;   |    &#39;567.89%&#39;   |&#xA;| 56.789       |    &#39;5.7e+01&#39;   |     &#39;56.79&#39;    |   &#39;5.68e+01&#39;   |   &#39;5678.90%&#39;   |&#xA;+--------------+----------------+----------------+----------------+----------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;{&amp;lt;float&amp;gt;:g}&#39;&lt;/code&gt; is &lt;code&gt;&#39;{&amp;lt;float&amp;gt;:.6}&#39;&lt;/code&gt; with stripped zeros, exponent starting at &lt;code&gt;&#39;1e+06&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes &lt;code&gt;&#39;{6.5:.0f}&#39;&lt;/code&gt; a &lt;code&gt;&#39;6&#39;&lt;/code&gt; and &lt;code&gt;&#39;{7.5:.0f}&#39;&lt;/code&gt; an &lt;code&gt;&#39;8&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;This rule only effects numbers that can be represented exactly by a float (&lt;code&gt;.5&lt;/code&gt;, &lt;code&gt;.25&lt;/code&gt;, …).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ints&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{90:c}                                   # &#39;Z&#39;&#xA;{90:b}                                   # &#39;1011010&#39;&#xA;{90:X}                                   # &#39;5A&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Numbers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int&amp;gt;      = int(&amp;lt;float/str/bool&amp;gt;)                # Or: math.floor(&amp;lt;float&amp;gt;)&#xA;&amp;lt;float&amp;gt;    = float(&amp;lt;int/str/bool&amp;gt;)                # Or: &amp;lt;int/float&amp;gt;e±&amp;lt;int&amp;gt;&#xA;&amp;lt;complex&amp;gt;  = complex(real=0, imag=0)              # Or: &amp;lt;int/float&amp;gt; ± &amp;lt;int/float&amp;gt;j&#xA;&amp;lt;Fraction&amp;gt; = fractions.Fraction(0, 1)             # Or: Fraction(numerator=0, denominator=1)&#xA;&amp;lt;Decimal&amp;gt;  = decimal.Decimal(&amp;lt;str/int&amp;gt;)           # Or: Decimal((sign, digits, exponent))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;int(&amp;lt;str&amp;gt;)&#39;&lt;/code&gt; and &lt;code&gt;&#39;float(&amp;lt;str&amp;gt;)&#39;&lt;/code&gt; raise ValueError on malformed strings.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Decimal numbers are stored exactly, unlike most floats where &lt;code&gt;&#39;1.1 + 2.2 != 3.3&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floats can be compared with: &lt;code&gt;&#39;math.isclose(&amp;lt;float&amp;gt;, &amp;lt;float&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Precision of decimal operations is set with: &lt;code&gt;&#39;decimal.getcontext().prec = &amp;lt;int&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Basic Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;num&amp;gt; = pow(&amp;lt;num&amp;gt;, &amp;lt;num&amp;gt;)                         # Or: &amp;lt;num&amp;gt; ** &amp;lt;num&amp;gt;&#xA;&amp;lt;num&amp;gt; = abs(&amp;lt;num&amp;gt;)                                # &amp;lt;float&amp;gt; = abs(&amp;lt;complex&amp;gt;)&#xA;&amp;lt;num&amp;gt; = round(&amp;lt;num&amp;gt; [, ±ndigits])                 # `round(126, -1) == 130`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Math&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import e, pi, inf, nan, isinf, isnan    # `&amp;lt;el&amp;gt; == nan` is always False.&#xA;from math import sin, cos, tan, asin, acos, atan  # Also: degrees, radians.&#xA;from math import log, log10, log2                 # Log can accept base as second arg.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Statistics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from statistics import mean, median, variance     # Also: stdev, quantiles, groupby.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Random&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import random, randint, choice        # Also: shuffle, gauss, triangular, seed.&#xA;&amp;lt;float&amp;gt; = random()                                # A float inside [0, 1).&#xA;&amp;lt;int&amp;gt;   = randint(from_inc, to_inc)               # An int inside [from_inc, to_inc].&#xA;&amp;lt;el&amp;gt;    = choice(&amp;lt;sequence&amp;gt;)                      # Keeps the sequence intact.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bin, Hex&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int&amp;gt; = ±0b&amp;lt;bin&amp;gt;                                  # Or: ±0x&amp;lt;hex&amp;gt;&#xA;&amp;lt;int&amp;gt; = int(&#39;±&amp;lt;bin&amp;gt;&#39;, 2)                          # Or: int(&#39;±&amp;lt;hex&amp;gt;&#39;, 16)&#xA;&amp;lt;int&amp;gt; = int(&#39;±0b&amp;lt;bin&amp;gt;&#39;, 0)                        # Or: int(&#39;±0x&amp;lt;hex&amp;gt;&#39;, 0)&#xA;&amp;lt;str&amp;gt; = bin(&amp;lt;int&amp;gt;)                                # Returns &#39;[-]0b&amp;lt;bin&amp;gt;&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bitwise Operators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; &amp;amp; &amp;lt;int&amp;gt;                             # And (0b1100 &amp;amp; 0b1010 == 0b1000).&#xA;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; | &amp;lt;int&amp;gt;                             # Or  (0b1100 | 0b1010 == 0b1110).&#xA;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; ^ &amp;lt;int&amp;gt;                             # Xor (0b1100 ^ 0b1010 == 0b0110).&#xA;&amp;lt;int&amp;gt; = &amp;lt;int&amp;gt; &amp;lt;&amp;lt; n_bits                           # Left shift. Use &amp;gt;&amp;gt; for right.&#xA;&amp;lt;int&amp;gt; = ~&amp;lt;int&amp;gt;                                    # Not. Also -&amp;lt;int&amp;gt; - 1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Combinatorics&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import itertools as it&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(it.product([0, 1], repeat=3))&#xA;[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),&#xA; (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(it.product(&#39;abc&#39;, &#39;abc&#39;))                    #   a  b  c&#xA;[(&#39;a&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),                  # a x  x  x&#xA; (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;),                  # b x  x  x&#xA; (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;c&#39;)]                  # c x  x  x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(it.combinations(&#39;abc&#39;, 2))                   #   a  b  c&#xA;[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),                              # a .  x  x&#xA; (&#39;b&#39;, &#39;c&#39;)]                                          # b .  .  x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(it.combinations_with_replacement(&#39;abc&#39;, 2))  #   a  b  c&#xA;[(&#39;a&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),                  # a x  x  x&#xA; (&#39;b&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;),                              # b .  x  x&#xA; (&#39;c&#39;, &#39;c&#39;)]                                          # c .  .  x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(it.permutations(&#39;abc&#39;, 2))                   #   a  b  c&#xA;[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;),                              # a .  x  x&#xA; (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;),                              # b x  .  x&#xA; (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;)]                              # c x  x  .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Datetime&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Provides &#39;date&#39;, &#39;time&#39;, &#39;datetime&#39; and &#39;timedelta&#39; classes. All are immutable and hashable.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pip3 install python-dateutil&#xA;from datetime import date, time, datetime, timedelta, timezone&#xA;from dateutil.tz import tzlocal, gettz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D&amp;gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.&#xA;&amp;lt;T&amp;gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.&#xA;&amp;lt;DT&amp;gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, …`.&#xA;&amp;lt;TD&amp;gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microseconds=0`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Aware &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; time and datetime objects have defined timezone, while naive &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; don&#39;t. If object is naive, it is presumed to be in the system&#39;s timezone!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;fold=1&#39;&lt;/code&gt; means the second pass in case of time jumping back for one hour.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Timedelta normalizes arguments to ±days, seconds (&amp;lt; 86 400) and microseconds (&amp;lt; 1M).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;&amp;lt;D/DT&amp;gt;.weekday()&#39;&lt;/code&gt; to get the day of the week as an int, with Monday being 0.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Now&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D/DTn&amp;gt;  = D/DT.today()                     # Current local date or naive DT. Also DT.now().&#xA;&amp;lt;DTa&amp;gt;    = DT.now(&amp;lt;tzinfo&amp;gt;)                 # Aware DT from current time in passed timezone.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;To extract time use &lt;code&gt;&#39;&amp;lt;DTn&amp;gt;.time()&#39;&lt;/code&gt;, &lt;code&gt;&#39;&amp;lt;DTa&amp;gt;.time()&#39;&lt;/code&gt; or &lt;code&gt;&#39;&amp;lt;DTa&amp;gt;.timetz()&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Timezone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;tzinfo&amp;gt; = timezone.utc                     # London without daylight saving time (DST).&#xA;&amp;lt;tzinfo&amp;gt; = timezone(&amp;lt;timedelta&amp;gt;)            # Timezone with fixed offset from UTC.&#xA;&amp;lt;tzinfo&amp;gt; = tzlocal()                        # Local tz with dynamic offset. Also gettz().&#xA;&amp;lt;tzinfo&amp;gt; = gettz(&#39;&amp;lt;Continent&amp;gt;/&amp;lt;City&amp;gt;&#39;)      # &#39;Continent/City_Name&#39; timezone or None.&#xA;&amp;lt;DTa&amp;gt;    = &amp;lt;DT&amp;gt;.astimezone([&amp;lt;tzinfo&amp;gt;])      # Converts DT to the passed or local fixed zone.&#xA;&amp;lt;Ta/DTa&amp;gt; = &amp;lt;T/DT&amp;gt;.replace(tzinfo=&amp;lt;tzinfo&amp;gt;)  # Changes object&#39;s timezone without conversion.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Timezones returned by gettz(), tzlocal(), and implicit local timezone of naive objects have offsets that vary through time due to DST and historical changes of the zone&#39;s base offset.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standard library&#39;s zoneinfo.ZoneInfo() can be used instead of gettz() on Python 3.9 and later. It requires &#39;tzdata&#39; package on Windows. It doesn&#39;t return local tz if arg. is omitted.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Encode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;D/T/DT&amp;gt; = D/T/DT.fromisoformat(&amp;lt;str&amp;gt;)      # Object from ISO string. Raises ValueError.&#xA;&amp;lt;DT&amp;gt;     = DT.strptime(&amp;lt;str&amp;gt;, &#39;&amp;lt;format&amp;gt;&#39;)   # Datetime from str, according to format.&#xA;&amp;lt;D/DTn&amp;gt;  = D/DT.fromordinal(&amp;lt;int&amp;gt;)          # D/DTn from days since the Gregorian NYE 1.&#xA;&amp;lt;DTn&amp;gt;    = DT.fromtimestamp(&amp;lt;float&amp;gt;)        # Local time DTn from seconds since the Epoch.&#xA;&amp;lt;DTa&amp;gt;    = DT.fromtimestamp(&amp;lt;float&amp;gt;, &amp;lt;tz&amp;gt;)  # Aware datetime from seconds since the Epoch.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ISO strings come in following forms: &lt;code&gt;&#39;YYYY-MM-DD&#39;&lt;/code&gt;, &lt;code&gt;&#39;HH:MM:SS.mmmuuu[±HH:MM]&#39;&lt;/code&gt;, or both separated by an arbitrary character. All parts following the hours are optional.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python uses the Unix Epoch: &lt;code&gt;&#39;1970-01-01 00:00 UTC&#39;&lt;/code&gt;, &lt;code&gt;&#39;1970-01-01 01:00 CET&#39;&lt;/code&gt;, ...&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Decode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;    = &amp;lt;D/T/DT&amp;gt;.isoformat(sep=&#39;T&#39;)      # Also `timespec=&#39;auto/hours/minutes/seconds/…&#39;`.&#xA;&amp;lt;str&amp;gt;    = &amp;lt;D/T/DT&amp;gt;.strftime(&#39;&amp;lt;format&amp;gt;&#39;)    # Custom string representation of the object.&#xA;&amp;lt;int&amp;gt;    = &amp;lt;D/DT&amp;gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.&#xA;&amp;lt;float&amp;gt;  = &amp;lt;DTn&amp;gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.&#xA;&amp;lt;float&amp;gt;  = &amp;lt;DTa&amp;gt;.timestamp()                # Seconds since the Epoch, from aware datetime.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; dt = datetime.strptime(&#39;2025-08-14 23:39:00.00 +0200&#39;, &#39;%Y-%m-%d %H:%M:%S.%f %z&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; dt.strftime(&#34;%dth of %B &#39;%y (%a), %I:%M %p %Z&#34;)&#xA;&#34;14th of August &#39;25 (Thu), 11:39 PM UTC+02:00&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;%z&#39;&lt;/code&gt; accepts &lt;code&gt;&#39;±HH[:]MM&#39;&lt;/code&gt; and returns &lt;code&gt;&#39;±HHMM&#39;&lt;/code&gt; or empty string if datetime is naive.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;%Z&#39;&lt;/code&gt; accepts &lt;code&gt;&#39;UTC/GMT&#39;&lt;/code&gt; and local timezone&#39;s code and returns timezone&#39;s name, &lt;code&gt;&#39;UTC[±HH:MM]&#39;&lt;/code&gt; if timezone is nameless, or an empty string if datetime is naive.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Arithmetics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt;   = &amp;lt;D/T/DTn&amp;gt; &amp;gt; &amp;lt;D/T/DTn&amp;gt;            # Ignores time jumps (fold attribute). Also ==.&#xA;&amp;lt;bool&amp;gt;   = &amp;lt;DTa&amp;gt;     &amp;gt; &amp;lt;DTa&amp;gt;                # Ignores time jumps if they share tzinfo object.&#xA;&amp;lt;TD&amp;gt;     = &amp;lt;D/DTn&amp;gt;   - &amp;lt;D/DTn&amp;gt;              # Ignores jumps. Convert to UTC for actual delta.&#xA;&amp;lt;TD&amp;gt;     = &amp;lt;DTa&amp;gt;     - &amp;lt;DTa&amp;gt;                # Ignores time jumps if they share tzinfo object.&#xA;&amp;lt;D/DT&amp;gt;   = &amp;lt;D/DT&amp;gt;    ± &amp;lt;TD&amp;gt;                 # Returned datetime can fall into missing hour.&#xA;&amp;lt;TD&amp;gt;     = &amp;lt;TD&amp;gt;      * &amp;lt;float&amp;gt;              # Also: &amp;lt;TD&amp;gt; = abs(&amp;lt;TD&amp;gt;) and &amp;lt;TD&amp;gt; = &amp;lt;TD&amp;gt; ±% &amp;lt;TD&amp;gt;.&#xA;&amp;lt;float&amp;gt;  = &amp;lt;TD&amp;gt;      / &amp;lt;TD&amp;gt;                 # How many weeks/years there are in TD. Also //.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arguments&lt;/h2&gt; &#xA;&lt;h3&gt;Inside Function Call&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;func(&amp;lt;positional_args&amp;gt;)                           # func(0, 0)&#xA;func(&amp;lt;keyword_args&amp;gt;)                              # func(x=0, y=0)&#xA;func(&amp;lt;positional_args&amp;gt;, &amp;lt;keyword_args&amp;gt;)           # func(0, y=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inside Function Definition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def func(&amp;lt;nondefault_args&amp;gt;): ...                  # def func(x, y): ...&#xA;def func(&amp;lt;default_args&amp;gt;): ...                     # def func(x=0, y=0): ...&#xA;def func(&amp;lt;nondefault_args&amp;gt;, &amp;lt;default_args&amp;gt;): ...  # def func(x, y=0): ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default values are evaluated when function is first encountered in the scope.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any mutation of a mutable default value will persist between invocations!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Splat Operator&lt;/h2&gt; &#xA;&lt;h3&gt;Inside Function Call&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;args   = (1, 2)&#xA;kwargs = {&#39;x&#39;: 3, &#39;y&#39;: 4, &#39;z&#39;: 5}&#xA;func(*args, **kwargs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Is the same as:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;func(1, 2, x=3, y=4, z=5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inside Function Definition&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(*a):&#xA;    return sum(a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add(1, 2, 3)&#xA;6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Legal argument combinations:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*args): ...               # f(1, 2, 3)&#xA;def f(x, *args): ...            # f(1, 2, 3)&#xA;def f(*args, z): ...            # f(1, 2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(**kwargs): ...            # f(x=1, y=2, z=3)&#xA;def f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)&#xA;def f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)&#xA;def f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f(*, x, y, z): ...          # f(x=1, y=2, z=3)&#xA;def f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)&#xA;def f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Uses&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;  = [*&amp;lt;coll.&amp;gt; [, ...]]    # Or: list(&amp;lt;collection&amp;gt;) [+ ...]&#xA;&amp;lt;tuple&amp;gt; = (*&amp;lt;coll.&amp;gt;, [...])     # Or: tuple(&amp;lt;collection&amp;gt;) [+ ...]&#xA;&amp;lt;set&amp;gt;   = {*&amp;lt;coll.&amp;gt; [, ...]}    # Or: set(&amp;lt;collection&amp;gt;) [| ...]&#xA;&amp;lt;dict&amp;gt;  = {**&amp;lt;dict&amp;gt; [, ...]}    # Or: dict(**&amp;lt;dict&amp;gt; [, ...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;head, *body, tail = &amp;lt;coll.&amp;gt;     # Head or tail can be omitted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inline&lt;/h2&gt; &#xA;&lt;h3&gt;Lambda&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;func&amp;gt; = lambda: &amp;lt;return_value&amp;gt;                     # A single statement function.&#xA;&amp;lt;func&amp;gt; = lambda &amp;lt;arg_1&amp;gt;, &amp;lt;arg_2&amp;gt;: &amp;lt;return_value&amp;gt;    # Also accepts default arguments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comprehensions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]&#xA;&amp;lt;iter&amp;gt; = (i for i in range(10) if i &amp;gt; 5)            # Or: iter([6, 7, 8, 9])&#xA;&amp;lt;set&amp;gt;  = {i+5 for i in range(10)}                   # Or: {5, 6, ..., 14}&#xA;&amp;lt;dict&amp;gt; = {i: i*2 for i in range(10)}                # Or: {0: 0, 1: 2, ..., 9: 18}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [l+r for l in &#39;abc&#39; for r in &#39;abc&#39;]&#xA;[&#39;aa&#39;, &#39;ab&#39;, &#39;ac&#39;, ..., &#39;cc&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Map, Filter, Reduce&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import reduce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])&#xA;&amp;lt;iter&amp;gt; = filter(lambda x: x &amp;gt; 5, range(10))         # Or: iter([6, 7, 8, 9])&#xA;&amp;lt;obj&amp;gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Any, All&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = any(&amp;lt;collection&amp;gt;)                          # Is `bool(&amp;lt;el&amp;gt;)` True for any element.&#xA;&amp;lt;bool&amp;gt; = all(&amp;lt;collection&amp;gt;)                          # Is True for all elements or empty.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Expression&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;obj&amp;gt; = &amp;lt;exp&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;exp&amp;gt;             # Only one expression gets evaluated.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [a if a else &#39;zero&#39; for a in (0, 1, 2, 3)]      # `any([0, &#39;&#39;, [], None]) == False`&#xA;[&#39;zero&#39;, 1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Named Tuple, Enum, Dataclass&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import namedtuple&#xA;Point = namedtuple(&#39;Point&#39;, &#39;x y&#39;)                  # Creates a tuple&#39;s subclass.&#xA;point = Point(0, 0)                                 # Returns its instance.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from enum import Enum&#xA;Direction = Enum(&#39;Direction&#39;, &#39;N E S W&#39;)            # Creates an enum.&#xA;direction = Direction.N                             # Returns its member.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import make_dataclass&#xA;Player = make_dataclass(&#39;Player&#39;, [&#39;loc&#39;, &#39;dir&#39;])   # Creates a class.&#xA;player = Player(point, direction)                   # Returns its instance.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Imports&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import &amp;lt;module&amp;gt;            # Imports a built-in or &#39;&amp;lt;module&amp;gt;.py&#39;.&#xA;import &amp;lt;package&amp;gt;           # Imports a built-in or &#39;&amp;lt;package&amp;gt;/__init__.py&#39;.&#xA;import &amp;lt;package&amp;gt;.&amp;lt;module&amp;gt;  # Imports a built-in or &#39;&amp;lt;package&amp;gt;/&amp;lt;module&amp;gt;.py&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Package is a collection of modules, but it can also define its own objects.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On a filesystem this corresponds to a directory of Python files with an optional init script.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Running &lt;code&gt;&#39;import &amp;lt;package&amp;gt;&#39;&lt;/code&gt; does not automatically provide access to the package&#39;s modules unless they are explicitly imported in its init script.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Closure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;We have/get a closure in Python when:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A nested function references a value of its enclosing function and then&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;the enclosing function returns the nested function.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_multiplier(a):&#xA;    def out(b):&#xA;        return a * b&#xA;    return out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; multiply_by_3 = get_multiplier(3)&#xA;&amp;gt;&amp;gt;&amp;gt; multiply_by_3(10)&#xA;30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If multiple nested functions within enclosing function reference the same value, that value gets shared.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;To dynamically access function&#39;s first free variable use &lt;code&gt;&#39;&amp;lt;function&amp;gt;.__closure__[0].cell_contents&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Partial&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;&amp;lt;function&amp;gt; = partial(&amp;lt;function&amp;gt; [, &amp;lt;arg_1&amp;gt;, &amp;lt;arg_2&amp;gt;, ...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def multiply(a, b):&#xA;...     return a * b&#xA;&amp;gt;&amp;gt;&amp;gt; multiply_by_3 = partial(multiply, 3)&#xA;&amp;gt;&amp;gt;&amp;gt; multiply_by_3(10)&#xA;30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A few examples being: &lt;code&gt;&#39;defaultdict(&amp;lt;func&amp;gt;)&#39;&lt;/code&gt;, &lt;code&gt;&#39;iter(&amp;lt;func&amp;gt;, to_exc)&#39;&lt;/code&gt; and dataclass&#39;s &lt;code&gt;&#39;field(default_factory=&amp;lt;func&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Non-Local&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a &#39;global&#39; or a &#39;nonlocal&#39;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_counter():&#xA;    i = 0&#xA;    def out():&#xA;        nonlocal i&#xA;        i += 1&#xA;        return i&#xA;    return out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = get_counter()&#xA;&amp;gt;&amp;gt;&amp;gt; counter(), counter(), counter()&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Decorator&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A decorator takes a function, adds some functionality and returns it.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It can be any &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#callable&#34;&gt;callable&lt;/a&gt;, but is usually implemented as a function that returns a &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#closure&#34;&gt;closure&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@decorator_name&#xA;def function_that_gets_passed_to_decorator():&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugger Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decorator that prints function&#39;s name every time the function is called.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps&#xA;&#xA;def debug(func):&#xA;    @wraps(func)&#xA;    def out(*args, **kwargs):&#xA;        print(func.__name__)&#xA;        return func(*args, **kwargs)&#xA;    return out&#xA;&#xA;@debug&#xA;def add(x, y):&#xA;    return x + y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Without it &lt;code&gt;&#39;add.__name__&#39;&lt;/code&gt; would return &lt;code&gt;&#39;out&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LRU Cache&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decorator that caches function&#39;s return values. All function&#39;s arguments must be hashable.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import lru_cache&#xA;&#xA;@lru_cache(maxsize=None)&#xA;def fib(n):&#xA;    return n if n &amp;lt; 2 else fib(n-2) + fib(n-1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default size of the cache is 128 values. Passing &lt;code&gt;&#39;maxsize=None&#39;&lt;/code&gt; makes it unbounded.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPython interpreter limits recursion depth to 1000 by default. To increase it use &lt;code&gt;&#39;sys.setrecursionlimit(&amp;lt;depth&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parametrized Decorator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A decorator that accepts arguments and returns a normal decorator that accepts a function.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps&#xA;&#xA;def debug(print_result=False):&#xA;    def decorator(func):&#xA;        @wraps(func)&#xA;        def out(*args, **kwargs):&#xA;            result = func(*args, **kwargs)&#xA;            print(func.__name__, result if print_result else &#39;&#39;)&#xA;            return result&#xA;        return out&#xA;    return decorator&#xA;&#xA;@debug(print_result=True)&#xA;def add(x, y):&#xA;    return x + y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Using only &lt;code&gt;&#39;@debug&#39;&lt;/code&gt; to decorate the add() function would not work here, because debug would then receive the add() function as a &#39;print_result&#39; argument. Decorators can however manually check if the argument they received is a function and act accordingly.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Class&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class &amp;lt;name&amp;gt;:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __repr__(self):&#xA;        class_name = self.__class__.__name__&#xA;        return f&#39;{class_name}({self.a!r})&#39;&#xA;    def __str__(self):&#xA;        return str(self.a)&#xA;&#xA;    @classmethod&#xA;    def get_class_name(cls):&#xA;        return cls.__name__&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Return value of repr() should be unambiguous and of str() readable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If only repr() is defined, it will also be used for str().&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Methods decorated with &lt;code&gt;&#39;@staticmethod&#39;&lt;/code&gt; do not receive &#39;self&#39; nor &#39;cls&#39; as their first arg.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Expressions that call the str() method:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;lt;el&amp;gt;)&#xA;f&#39;{&amp;lt;el&amp;gt;}&#39;&#xA;logging.warning(&amp;lt;el&amp;gt;)&#xA;csv.writer(&amp;lt;file&amp;gt;).writerow([&amp;lt;el&amp;gt;])&#xA;raise Exception(&amp;lt;el&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Expressions that call the repr() method:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print/str/repr([&amp;lt;el&amp;gt;])&#xA;print/str/repr({&amp;lt;el&amp;gt;: &amp;lt;el&amp;gt;})&#xA;f&#39;{&amp;lt;el&amp;gt;!r}&#39;&#xA;Z = dataclasses.make_dataclass(&#39;Z&#39;, [&#39;a&#39;]); print/str/repr(Z(&amp;lt;el&amp;gt;))&#xA;&amp;gt;&amp;gt;&amp;gt; &amp;lt;el&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constructor Overloading&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class &amp;lt;name&amp;gt;:&#xA;    def __init__(self, a=None):&#xA;        self.a = a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inheritance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:&#xA;    def __init__(self, name, age):&#xA;        self.name = name&#xA;        self.age  = age&#xA;&#xA;class Employee(Person):&#xA;    def __init__(self, name, age, staff_num):&#xA;        super().__init__(name, age)&#xA;        self.staff_num = staff_num&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Inheritance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class A: pass&#xA;class B: pass&#xA;class C(A, B): pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;MRO determines the order in which parent classes are traversed when searching for a method or an attribute:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; C.mro()&#xA;[&amp;lt;class &#39;C&#39;&amp;gt;, &amp;lt;class &#39;A&#39;&amp;gt;, &amp;lt;class &#39;B&#39;&amp;gt;, &amp;lt;class &#39;object&#39;&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Property&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pythonic way of implementing getters and setters.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:&#xA;    @property&#xA;    def name(self):&#xA;        return &#39; &#39;.join(self._name)&#xA;&#xA;    @name.setter&#xA;    def name(self, value):&#xA;        self._name = value.split()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; person = Person()&#xA;&amp;gt;&amp;gt;&amp;gt; person.name = &#39;\t Guido  van Rossum \n&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; person.name&#xA;&#39;Guido van Rossum&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataclass&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decorator that automatically generates init(), repr() and eq() special methods.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass, field&#xA;&#xA;@dataclass(order=False, frozen=False)&#xA;class &amp;lt;class_name&amp;gt;:&#xA;    &amp;lt;attr_name&amp;gt;: &amp;lt;type&amp;gt;&#xA;    &amp;lt;attr_name&amp;gt;: &amp;lt;type&amp;gt; = &amp;lt;default_value&amp;gt;&#xA;    &amp;lt;attr_name&amp;gt;: list/dict/set = field(default_factory=list/dict/set)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objects can be made &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#sortable&#34;&gt;sortable&lt;/a&gt; with &lt;code&gt;&#39;order=True&#39;&lt;/code&gt; and immutable with &lt;code&gt;&#39;frozen=True&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For object to be &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#hashable&#34;&gt;hashable&lt;/a&gt;, all attributes must be hashable and &#39;frozen&#39; must be True.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function field() is needed because &lt;code&gt;&#39;&amp;lt;attr_name&amp;gt;: list = []&#39;&lt;/code&gt; would make a list that is shared among all instances. Its &#39;default_factory&#39; argument can be any &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#callable&#34;&gt;callable&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For attributes of arbitrary type use &lt;code&gt;&#39;typing.Any&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Inline:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import make_dataclass&#xA;&amp;lt;class&amp;gt; = make_dataclass(&#39;&amp;lt;class_name&amp;gt;&#39;, &amp;lt;coll_of_attribute_names&amp;gt;)&#xA;&amp;lt;class&amp;gt; = make_dataclass(&#39;&amp;lt;class_name&amp;gt;&#39;, &amp;lt;coll_of_tuples&amp;gt;)&#xA;&amp;lt;tuple&amp;gt; = (&#39;&amp;lt;attr_name&amp;gt;&#39;, &amp;lt;type&amp;gt; [, &amp;lt;default_value&amp;gt;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rest of type annotations (CPython interpreter ignores them all):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import collections.abc as abc, typing as tp&#xA;&amp;lt;var_name&amp;gt;: list/set/abc.Iterable/abc.Sequence/tp.Optional[&amp;lt;type&amp;gt;] [= &amp;lt;obj&amp;gt;]&#xA;&amp;lt;var_name&amp;gt;: dict/tuple/tp.Union[&amp;lt;type&amp;gt;, ...] [= &amp;lt;obj&amp;gt;]&#xA;def func(&amp;lt;arg_name&amp;gt;: &amp;lt;type&amp;gt; [= &amp;lt;obj&amp;gt;]) -&amp;gt; &amp;lt;type&amp;gt;: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Slots&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mechanism that restricts objects to attributes listed in &#39;slots&#39; and significantly reduces their memory footprint.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyClassWithSlots:&#xA;    __slots__ = [&#39;a&#39;]&#xA;    def __init__(self):&#xA;        self.a = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from copy import copy, deepcopy&#xA;&amp;lt;object&amp;gt; = copy(&amp;lt;object&amp;gt;)&#xA;&amp;lt;object&amp;gt; = deepcopy(&amp;lt;object&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Duck Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comparable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If eq() method is not overridden, it returns &lt;code&gt;&#39;id(self) == id(other)&#39;&lt;/code&gt;, which is the same as &lt;code&gt;&#39;self is other&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That means all objects compare not equal by default.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. False is returned if both return NotImplemented.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ne() automatically works on any object that has eq() defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyComparable:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __eq__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a == other.a&#xA;        return NotImplemented&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hashable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hashable object needs both hash() and eq() methods and its hash value should never change.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hashable objects that compare equal must have the same hash value, meaning default hash() that returns &lt;code&gt;&#39;id(self)&#39;&lt;/code&gt; will not do.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;That is why Python automatically makes classes unhashable if you only implement eq().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyHashable:&#xA;    def __init__(self, a):&#xA;        self._a = a&#xA;    @property&#xA;    def a(self):&#xA;        return self._a&#xA;    def __eq__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a == other.a&#xA;        return NotImplemented&#xA;    def __hash__(self):&#xA;        return hash(self.a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sortable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;With &#39;total_ordering&#39; decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn&#39;t arise in other contexts.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For proper alphabetical order pass &lt;code&gt;&#39;key=locale.strxfrm&#39;&lt;/code&gt; to sorted() after running &lt;code&gt;&#39;locale.setlocale(locale.LC_COLLATE, &#34;en_US.UTF-8&#34;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import total_ordering&#xA;&#xA;@total_ordering&#xA;class MySortable:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __eq__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a == other.a&#xA;        return NotImplemented&#xA;    def __lt__(self, other):&#xA;        if isinstance(other, type(self)):&#xA;            return self.a &amp;lt; other.a&#xA;        return NotImplemented&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iterator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any object that has methods next() and iter() is an iterator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Next() should return next item or raise StopIteration exception.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iter() should return &#39;self&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Counter:&#xA;    def __init__(self):&#xA;        self.i = 0&#xA;    def __next__(self):&#xA;        self.i += 1&#xA;        return self.i&#xA;    def __iter__(self):&#xA;        return self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = Counter()&#xA;&amp;gt;&amp;gt;&amp;gt; next(counter), next(counter), next(counter)&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python has many different iterator objects:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sequence iterators returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#iterator&#34;&gt;iter()&lt;/a&gt; function, such as list_iterator and set_iterator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objects returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#itertools&#34;&gt;itertools&lt;/a&gt; module, such as count, repeat and cycle.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generators returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#generator&#34;&gt;generator functions&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#comprehensions&#34;&gt;generator expressions&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File objects returned by the &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#open&#34;&gt;open()&lt;/a&gt; function, etc.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Callable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All functions and classes have a call() method, hence are callable.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;When this cheatsheet uses &lt;code&gt;&#39;&amp;lt;function&amp;gt;&#39;&lt;/code&gt; as an argument, it actually means &lt;code&gt;&#39;&amp;lt;callable&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Counter:&#xA;    def __init__(self):&#xA;        self.i = 0&#xA;    def __call__(self):&#xA;        self.i += 1&#xA;        return self.i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; counter = Counter()&#xA;&amp;gt;&amp;gt;&amp;gt; counter(), counter(), counter()&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Context Manager&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;With statements only work with objects that have enter() and exit() special methods.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enter() should lock the resources and optionally return an object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exit() should release the resources.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any exception that happens inside the with block is passed to the exit() method.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The exit() method can suppress the exception by returning a true value.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyOpen:&#xA;    def __init__(self, filename):&#xA;        self.filename = filename&#xA;    def __enter__(self):&#xA;        self.file = open(self.filename)&#xA;        return self.file&#xA;    def __exit__(self, exc_type, exception, traceback):&#xA;        self.file.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with open(&#39;test.txt&#39;, &#39;w&#39;) as file:&#xA;...     file.write(&#39;Hello World!&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; with MyOpen(&#39;test.txt&#39;) as file:&#xA;...     print(file.read())&#xA;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iterable Duck Types&lt;/h2&gt; &#xA;&lt;h3&gt;Iterable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only required method is iter(). It should return an iterator of object&#39;s items.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contains() automatically works on any object that has iter() defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyIterable:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __iter__(self):&#xA;        return iter(self.a)&#xA;    def __contains__(self, el):&#xA;        return el in self.a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; obj = MyIterable([1, 2, 3])&#xA;&amp;gt;&amp;gt;&amp;gt; [el for el in obj]&#xA;[1, 2, 3]&#xA;&amp;gt;&amp;gt;&amp;gt; 1 in obj&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only required methods are iter() and len(). Len() should return the number of items.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;This cheatsheet actually means &lt;code&gt;&#39;&amp;lt;iterable&amp;gt;&#39;&lt;/code&gt; when it uses &lt;code&gt;&#39;&amp;lt;collection&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I chose not to use the name &#39;iterable&#39; because it sounds scarier and more vague than &#39;collection&#39;. The only drawback of this decision is that the reader could think a certain function doesn&#39;t accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyCollection:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __iter__(self):&#xA;        return iter(self.a)&#xA;    def __contains__(self, el):&#xA;        return el in self.a&#xA;    def __len__(self):&#xA;        return len(self.a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sequence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only required methods are getitem() and len().&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Getitem() should return an item at the passed index or raise IndexError.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iter() and contains() automatically work on any object that has getitem() defined.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reversed() automatically works on any object that has getitem() and len() defined.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MySequence:&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __iter__(self):&#xA;        return iter(self.a)&#xA;    def __contains__(self, el):&#xA;        return el in self.a&#xA;    def __len__(self):&#xA;        return len(self.a)&#xA;    def __getitem__(self, i):&#xA;        return self.a[i]&#xA;    def __reversed__(self):&#xA;        return reversed(self.a)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Discrepancies between glossary definitions and abstract base classes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Glossary defines iterable as any object with iter() or getitem() and sequence as any object with getitem() and len(). It does not define collection.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ABC Sequence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;It&#39;s a richer interface than the basic sequence.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extending it generates iter(), contains(), reversed(), index() and count().&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unlike &lt;code&gt;&#39;abc.Iterable&#39;&lt;/code&gt; and &lt;code&gt;&#39;abc.Collection&#39;&lt;/code&gt;, it is not a duck type. That is why &lt;code&gt;&#39;issubclass(MySequence, abc.Sequence)&#39;&lt;/code&gt; would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, array, memoryview and deque, because they are registered as its virtual subclasses.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import abc&#xA;&#xA;class MyAbcSequence(abc.Sequence):&#xA;    def __init__(self, a):&#xA;        self.a = a&#xA;    def __len__(self):&#xA;        return len(self.a)&#xA;    def __getitem__(self, i):&#xA;        return self.a[i]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Table of required and automatically available special methods:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------+------------+------------+------------+--------------+&#xA;|            |  Iterable  | Collection |  Sequence  | abc.Sequence |&#xA;+------------+------------+------------+------------+--------------+&#xA;| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |&#xA;| contains() |    Yes     |    Yes     |    Yes     |     Yes      |&#xA;| len()      |            |    REQ     |    REQ     |     REQ      |&#xA;| getitem()  |            |            |    REQ     |     REQ      |&#xA;| reversed() |            |            |    Yes     |     Yes      |&#xA;| index()    |            |            |            |     Yes      |&#xA;| count()    |            |            |            |     Yes      |&#xA;+------------+------------+------------+------------+--------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Names of their required methods are stored in &lt;code&gt;&#39;&amp;lt;abc&amp;gt;.__abstractmethods__&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enum&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from enum import Enum, auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class &amp;lt;enum_name&amp;gt;(Enum):&#xA;    &amp;lt;member_name&amp;gt; = auto()&#xA;    &amp;lt;member_name&amp;gt; = &amp;lt;value&amp;gt;&#xA;    &amp;lt;member_name&amp;gt; = &amp;lt;value&amp;gt;, &amp;lt;value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function auto() returns an increment of the last numeric value or 1.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accessing a member named after a reserved keyword causes SyntaxError.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Methods receive the member they were called on as the &#39;self&#39; argument.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;member&amp;gt; = &amp;lt;enum&amp;gt;.&amp;lt;member_name&amp;gt;           # Returns a member.&#xA;&amp;lt;member&amp;gt; = &amp;lt;enum&amp;gt;[&#39;&amp;lt;member_name&amp;gt;&#39;]        # Returns a member. Raises KeyError.&#xA;&amp;lt;member&amp;gt; = &amp;lt;enum&amp;gt;(&amp;lt;value&amp;gt;)                # Returns a member. Raises ValueError.&#xA;&amp;lt;str&amp;gt;    = &amp;lt;member&amp;gt;.name                  # Returns member&#39;s name.&#xA;&amp;lt;obj&amp;gt;    = &amp;lt;member&amp;gt;.value                 # Returns member&#39;s value.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;   = list(&amp;lt;enum&amp;gt;)                   # Returns enum&#39;s members.&#xA;&amp;lt;list&amp;gt;   = [a.name for a in &amp;lt;enum&amp;gt;]       # Returns enum&#39;s member names.&#xA;&amp;lt;list&amp;gt;   = [a.value for a in &amp;lt;enum&amp;gt;]      # Returns enum&#39;s member values.&#xA;&amp;lt;member&amp;gt; = random.choice(list(&amp;lt;enum&amp;gt;))    # Returns a random member.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_next_member(member):&#xA;    members = list(type(member))&#xA;    index = members.index(member) + 1&#xA;    return members[index % len(members)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inline&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Cutlery = Enum(&#39;Cutlery&#39;, &#39;FORK KNIFE SPOON&#39;)&#xA;Cutlery = Enum(&#39;Cutlery&#39;, [&#39;FORK&#39;, &#39;KNIFE&#39;, &#39;SPOON&#39;])&#xA;Cutlery = Enum(&#39;Cutlery&#39;, {&#39;FORK&#39;: 1, &#39;KNIFE&#39;: 2, &#39;SPOON&#39;: 3})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;User-defined functions cannot be values, so they must be wrapped:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;LogicOp = Enum(&#39;LogicOp&#39;, {&#39;AND&#39;: partial(lambda l, r: l and r),&#xA;                           &#39;OR&#39;:  partial(lambda l, r: l or r)})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exceptions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;    &amp;lt;code&amp;gt;&#xA;except &amp;lt;exception&amp;gt;:&#xA;    &amp;lt;code&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Complex Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;    &amp;lt;code_1&amp;gt;&#xA;except &amp;lt;exception_a&amp;gt;:&#xA;    &amp;lt;code_2_a&amp;gt;&#xA;except &amp;lt;exception_b&amp;gt;:&#xA;    &amp;lt;code_2_b&amp;gt;&#xA;else:&#xA;    &amp;lt;code_2_c&amp;gt;&#xA;finally:&#xA;    &amp;lt;code_3&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code inside the &lt;code&gt;&#39;else&#39;&lt;/code&gt; block will only be executed if &lt;code&gt;&#39;try&#39;&lt;/code&gt; block had no exceptions.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code inside the &lt;code&gt;&#39;finally&#39;&lt;/code&gt; block will always be executed (unless a signal is received).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;All variables that are initialized in executed blocks are also visible in all subsequent blocks, as well as outside the try/except clause (only function block delimits scope).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;To catch signals use &lt;code&gt;&#39;signal.signal(signal_number, &amp;lt;func&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Catching Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;except &amp;lt;exception&amp;gt;: ...&#xA;except &amp;lt;exception&amp;gt; as &amp;lt;name&amp;gt;: ...&#xA;except (&amp;lt;exception&amp;gt;, [...]): ...&#xA;except (&amp;lt;exception&amp;gt;, [...]) as &amp;lt;name&amp;gt;: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also catches subclasses of the exception.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;traceback.print_exc()&#39;&lt;/code&gt; to print the error message to stderr.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;print(&amp;lt;name&amp;gt;)&#39;&lt;/code&gt; to print just the cause of the exception (its arguments).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;logging.exception(&amp;lt;message&amp;gt;)&#39;&lt;/code&gt; to log the passed message, followed by the full error message of the caught exception.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raising Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;raise &amp;lt;exception&amp;gt;&#xA;raise &amp;lt;exception&amp;gt;()&#xA;raise &amp;lt;exception&amp;gt;(&amp;lt;el&amp;gt; [, ...])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Re-raising caught exception:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;except &amp;lt;exception&amp;gt; [as &amp;lt;name&amp;gt;]:&#xA;    ...&#xA;    raise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exception Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arguments = &amp;lt;name&amp;gt;.args&#xA;exc_type  = &amp;lt;name&amp;gt;.__class__&#xA;filename  = &amp;lt;name&amp;gt;.__traceback__.tb_frame.f_code.co_filename&#xA;func_name = &amp;lt;name&amp;gt;.__traceback__.tb_frame.f_code.co_name&#xA;line      = linecache.getline(filename, &amp;lt;name&amp;gt;.__traceback__.tb_lineno)&#xA;trace_str = &#39;&#39;.join(traceback.format_tb(&amp;lt;name&amp;gt;.__traceback__))&#xA;error_msg = &#39;&#39;.join(traceback.format_exception(type(&amp;lt;name&amp;gt;), &amp;lt;name&amp;gt;, &amp;lt;name&amp;gt;.__traceback__))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Built-in Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;BaseException&#xA; +-- SystemExit                   # Raised by the sys.exit() function.&#xA; +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).&#xA; +-- Exception                    # User-defined exceptions should be derived from this class.&#xA;      +-- ArithmeticError         # Base class for arithmetic errors such as ZeroDivisionError.&#xA;      +-- AssertionError          # Raised by `assert &amp;lt;exp&amp;gt;` if expression returns false value.&#xA;      +-- AttributeError          # Raised when object doesn&#39;t have requested attribute/method.&#xA;      +-- EOFError                # Raised by input() when it hits an end-of-file condition.&#xA;      +-- LookupError             # Base class for errors when a collection can&#39;t find an item.&#xA;      |    +-- IndexError         # Raised when a sequence index is out of range.&#xA;      |    +-- KeyError           # Raised when a dictionary key or set element is missing.&#xA;      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.&#xA;      +-- NameError               # Raised when nonexistent name (variable/func/class) is used.&#xA;      |    +-- UnboundLocalError  # Raised when local name is used before it&#39;s being defined.&#xA;      +-- OSError                 # Errors such as FileExistsError/PermissionError (see #Open).&#xA;      |    +-- ConnectionError    # Errors such as BrokenPipeError/ConnectionAbortedError.&#xA;      +-- RuntimeError            # Raised by errors that don&#39;t fall into other categories.&#xA;      |    +-- NotImplementedErr  # Can be raised by abstract methods or by unfinished code.&#xA;      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.&#xA;      +-- StopIteration           # Raised by next() when run on an empty iterator.&#xA;      +-- TypeError               # Raised when an argument is of the wrong type.&#xA;      +-- ValueError              # When argument has the right type but inappropriate value.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collections and their exceptions:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------+------------+------------+------------+&#xA;|           |    List    |    Set     |    Dict    |&#xA;+-----------+------------+------------+------------+&#xA;| getitem() | IndexError |            |  KeyError  |&#xA;| pop()     | IndexError |  KeyError  |  KeyError  |&#xA;| remove()  | ValueError |  KeyError  |            |&#xA;| index()   | ValueError |            |            |&#xA;+-----------+------------+------------+------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Useful built-in exceptions:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;raise TypeError(&#39;Argument is of the wrong type!&#39;)&#xA;raise ValueError(&#39;Argument has the right type but an inappropriate value!&#39;)&#xA;raise RuntimeError(&#39;None of above!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User-defined Exceptions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyError(Exception): pass&#xA;class MyInputError(MyError): pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exits the interpreter by raising SystemExit exception.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;sys.exit()                        # Exits with exit code 0 (success).&#xA;sys.exit(&amp;lt;el&amp;gt;)                    # Prints to stderr and exits with 1.&#xA;sys.exit(&amp;lt;int&amp;gt;)                   # Exits with the passed exit code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Print&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;lt;el_1&amp;gt;, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;file=sys.stderr&#39;&lt;/code&gt; for messages about errors.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;flush=True&#39;&lt;/code&gt; to forcibly flush the stream.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pretty Print&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pprint import pprint&#xA;pprint(&amp;lt;collection&amp;gt;, width=80, depth=None, compact=False, sort_dicts=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Levels deeper than &#39;depth&#39; get replaced by &#39;...&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Input&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reads a line from the user input or pipe if present.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt; = input(prompt=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trailing newline gets stripped.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt string is printed to the standard output before reading input.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input stream gets exhausted.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Command Line Arguments&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;scripts_path = sys.argv[0]&#xA;arguments    = sys.argv[1:]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Argument Parser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from argparse import ArgumentParser, FileType&#xA;p = ArgumentParser(description=&amp;lt;str&amp;gt;)&#xA;p.add_argument(&#39;-&amp;lt;short_name&amp;gt;&#39;, &#39;--&amp;lt;name&amp;gt;&#39;, action=&#39;store_true&#39;)  # Flag.&#xA;p.add_argument(&#39;-&amp;lt;short_name&amp;gt;&#39;, &#39;--&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;)          # Option.&#xA;p.add_argument(&#39;&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;, nargs=1)                    # First argument.&#xA;p.add_argument(&#39;&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;, nargs=&#39;+&#39;)                  # Remaining arguments.&#xA;p.add_argument(&#39;&amp;lt;name&amp;gt;&#39;, type=&amp;lt;type&amp;gt;, nargs=&#39;*&#39;)                  # Optional arguments.&#xA;args  = p.parse_args()                                            # Exits on error.&#xA;value = args.&amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;help=&amp;lt;str&amp;gt;&#39;&lt;/code&gt; to set argument description that will be displayed in help message.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;default=&amp;lt;el&amp;gt;&#39;&lt;/code&gt; to set argument&#39;s default value.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;type=FileType(&amp;lt;mode&amp;gt;)&#39;&lt;/code&gt; for files. Accepts &#39;encoding&#39;, but &#39;newline&#39; is None.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Opens the file and returns a corresponding file object.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;file&amp;gt; = open(&amp;lt;path&amp;gt;, mode=&#39;r&#39;, encoding=None, newline=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;encoding=None&#39;&lt;/code&gt; means that the default encoding is used, which is platform dependent. Best practice is to use &lt;code&gt;&#39;encoding=&#34;utf-8&#34;&#39;&lt;/code&gt; whenever possible.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;newline=None&#39;&lt;/code&gt; means all different end of line combinations are converted to &#39;\n&#39; on read, while on write all &#39;\n&#39; characters are converted to system&#39;s default line separator.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;newline=&#34;&#34;&#39;&lt;/code&gt; means no conversions take place, but input is still broken into chunks by readline() and readlines() on every &#39;\n&#39;, &#39;\r&#39; and &#39;\r\n&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt; - Read (default).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;w&#39;&lt;/code&gt; - Write (truncate).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;x&#39;&lt;/code&gt; - Write or fail if the file already exists.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt; - Append.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;w+&#39;&lt;/code&gt; - Read and write (truncate).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;r+&#39;&lt;/code&gt; - Read and write from the start.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;a+&#39;&lt;/code&gt; - Read and write from the end.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;t&#39;&lt;/code&gt; - Text mode (default).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;b&#39;&lt;/code&gt; - Binary mode (&lt;code&gt;&#39;br&#39;&lt;/code&gt;, &lt;code&gt;&#39;bw&#39;&lt;/code&gt;, &lt;code&gt;&#39;bx&#39;&lt;/code&gt;, …).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;FileNotFoundError&#39;&lt;/code&gt; can be raised when reading with &lt;code&gt;&#39;r&#39;&lt;/code&gt; or &lt;code&gt;&#39;r+&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;FileExistsError&#39;&lt;/code&gt; can be raised when writing with &lt;code&gt;&#39;x&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;IsADirectoryError&#39;&lt;/code&gt; and &lt;code&gt;&#39;PermissionError&#39;&lt;/code&gt; can be raised by any.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;OSError&#39;&lt;/code&gt; is the parent class of all listed exceptions.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;File Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;file&amp;gt;.seek(0)                      # Moves to the start of the file.&#xA;&amp;lt;file&amp;gt;.seek(offset)                 # Moves &#39;offset&#39; chars/bytes from the start.&#xA;&amp;lt;file&amp;gt;.seek(0, 2)                   # Moves to the end of the file.&#xA;&amp;lt;bin_file&amp;gt;.seek(±offset, &amp;lt;anchor&amp;gt;)  # Anchor: 0 start, 1 current position, 2 end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str/bytes&amp;gt; = &amp;lt;file&amp;gt;.read(size=-1)  # Reads &#39;size&#39; chars/bytes or until EOF.&#xA;&amp;lt;str/bytes&amp;gt; = &amp;lt;file&amp;gt;.readline()     # Returns a line or empty string/bytes on EOF.&#xA;&amp;lt;list&amp;gt;      = &amp;lt;file&amp;gt;.readlines()    # Returns a list of remaining lines.&#xA;&amp;lt;str/bytes&amp;gt; = next(&amp;lt;file&amp;gt;)          # Returns a line using buffer. Do not mix.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;file&amp;gt;.write(&amp;lt;str/bytes&amp;gt;)           # Writes a string or bytes object.&#xA;&amp;lt;file&amp;gt;.writelines(&amp;lt;collection&amp;gt;)     # Writes a coll. of strings or bytes objects.&#xA;&amp;lt;file&amp;gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Methods do not add or strip trailing newlines, not even writelines().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Read Text from File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_file(filename):&#xA;    with open(filename, encoding=&#39;utf-8&#39;) as file:&#xA;        return file.readlines()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Text to File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_file(filename, text):&#xA;    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:&#xA;        file.write(text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Paths&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os, glob&#xA;from pathlib import Path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = os.getcwd()                # Returns the current working directory.&#xA;&amp;lt;str&amp;gt;  = os.path.join(&amp;lt;path&amp;gt;, ...)  # Joins two or more pathname components.&#xA;&amp;lt;str&amp;gt;  = os.path.realpath(&amp;lt;path&amp;gt;)   # Resolves symlinks and calls path.abspath().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = os.path.basename(&amp;lt;path&amp;gt;)   # Returns final component of the path.&#xA;&amp;lt;str&amp;gt;  = os.path.dirname(&amp;lt;path&amp;gt;)    # Returns path without the final component.&#xA;&amp;lt;tup.&amp;gt; = os.path.splitext(&amp;lt;path&amp;gt;)   # Splits on last period of the final component.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = os.listdir(path=&#39;.&#39;)       # Returns filenames located at the path.&#xA;&amp;lt;list&amp;gt; = glob.glob(&#39;&amp;lt;pattern&amp;gt;&#39;)     # Returns paths matching the wildcard pattern.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = os.path.exists(&amp;lt;path&amp;gt;)     # Or: &amp;lt;Path&amp;gt;.exists()&#xA;&amp;lt;bool&amp;gt; = os.path.isfile(&amp;lt;path&amp;gt;)     # Or: &amp;lt;DirEntry/Path&amp;gt;.is_file()&#xA;&amp;lt;bool&amp;gt; = os.path.isdir(&amp;lt;path&amp;gt;)      # Or: &amp;lt;DirEntry/Path&amp;gt;.is_dir()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;stat&amp;gt; = os.stat(&amp;lt;path&amp;gt;)            # Or: &amp;lt;DirEntry/Path&amp;gt;.stat()&#xA;&amp;lt;real&amp;gt; = &amp;lt;stat&amp;gt;.st_mtime/st_size/…  # Modification time, size in bytes, ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DirEntry&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = os.scandir(path=&#39;.&#39;)       # Returns DirEntry objects located at the path.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;DirEntry&amp;gt;.path            # Returns the whole path as a string.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;DirEntry&amp;gt;.name            # Returns final component as a string.&#xA;&amp;lt;file&amp;gt; = open(&amp;lt;DirEntry&amp;gt;)           # Opens the file and returns a file object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Path Object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Path&amp;gt; = Path(&amp;lt;path&amp;gt; [, ...])       # Accepts strings, Paths and DirEntry objects.&#xA;&amp;lt;Path&amp;gt; = &amp;lt;path&amp;gt; / &amp;lt;path&amp;gt; [/ ...]    # First or second path must be a Path object.&#xA;&amp;lt;Path&amp;gt; = &amp;lt;Path&amp;gt;.resolve()           # Returns absolute path with resolved symlinks.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Path&amp;gt; = Path()                     # Returns relative cwd. Also Path(&#39;.&#39;).&#xA;&amp;lt;Path&amp;gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().&#xA;&amp;lt;Path&amp;gt; = Path.home()                # Returns user&#39;s home directory (absolute).&#xA;&amp;lt;Path&amp;gt; = Path(__file__).resolve()   # Returns script&#39;s path if cwd wasn&#39;t changed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Path&amp;gt; = &amp;lt;Path&amp;gt;.parent              # Returns Path without the final component.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Path&amp;gt;.name                # Returns final component as a string.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Path&amp;gt;.stem                # Returns final component without extension.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;Path&amp;gt;.suffix              # Returns final component&#39;s extension.&#xA;&amp;lt;tup.&amp;gt; = &amp;lt;Path&amp;gt;.parts               # Returns all components as strings.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;iter&amp;gt; = &amp;lt;Path&amp;gt;.iterdir()           # Returns directory contents as Path objects.&#xA;&amp;lt;iter&amp;gt; = &amp;lt;Path&amp;gt;.glob(&#39;&amp;lt;pattern&amp;gt;&#39;)   # Returns Paths matching the wildcard pattern.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;str&amp;gt;  = str(&amp;lt;Path&amp;gt;)                # Returns path as a string.&#xA;&amp;lt;file&amp;gt; = open(&amp;lt;Path&amp;gt;)               # Also &amp;lt;Path&amp;gt;.read/write_text/bytes().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OS Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os, shutil, subprocess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.chdir(&amp;lt;path&amp;gt;)                    # Changes the current working directory.&#xA;os.mkdir(&amp;lt;path&amp;gt;, mode=0o777)        # Creates a directory. Permissions are in octal.&#xA;os.makedirs(&amp;lt;path&amp;gt;, mode=0o777)     # Creates all path&#39;s dirs. Also `exist_ok=False`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shutil.copy(from, to)               # Copies the file. &#39;to&#39; can exist or be a dir.&#xA;shutil.copy2(from, to)              # Also copies creation and modification time.&#xA;shutil.copytree(from, to)           # Copies the directory. &#39;to&#39; must not exist.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.rename(from, to)                 # Renames/moves the file or directory.&#xA;os.replace(from, to)                # Same, but overwrites file &#39;to&#39; even on Windows.&#xA;shutil.move(from, to)               # Rename() that moves into &#39;to&#39; if it&#39;s a dir.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.remove(&amp;lt;path&amp;gt;)                   # Deletes the file.&#xA;os.rmdir(&amp;lt;path&amp;gt;)                    # Deletes the empty directory.&#xA;shutil.rmtree(&amp;lt;path&amp;gt;)               # Deletes the directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paths can be either strings, Paths or DirEntry objects.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions report OS related errors by raising either OSError or one of its &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#exceptions-1&#34;&gt;subclasses&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shell Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;pipe&amp;gt; = os.popen(&#39;&amp;lt;command&amp;gt;&#39;)      # Executes command in sh/cmd. Returns its stdout pipe.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;pipe&amp;gt;.read(size=-1)       # Reads &#39;size&#39; chars or until EOF. Also readline/s().&#xA;&amp;lt;int&amp;gt;  = &amp;lt;pipe&amp;gt;.close()             # Closes the pipe. Returns None on success (returncode 0).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sends &#39;1 + 1&#39; to the basic calculator and captures its output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; subprocess.run(&#39;bc&#39;, input=&#39;1 + 1\n&#39;, capture_output=True, text=True)&#xA;CompletedProcess(args=&#39;bc&#39;, returncode=0, stdout=&#39;2\n&#39;, stderr=&#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sends test.in to the basic calculator running in standard mode and saves its output to test.out:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from shlex import split&#xA;&amp;gt;&amp;gt;&amp;gt; os.popen(&#39;echo 1 + 1 &amp;gt; test.in&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; subprocess.run(split(&#39;bc -s&#39;), stdin=open(&#39;test.in&#39;), stdout=open(&#39;test.out&#39;, &#39;w&#39;))&#xA;CompletedProcess(args=[&#39;bc&#39;, &#39;-s&#39;], returncode=0)&#xA;&amp;gt;&amp;gt;&amp;gt; open(&#39;test.out&#39;).read()&#xA;&#39;2\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Text file format for storing collections of strings and numbers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;&amp;lt;str&amp;gt;    = json.dumps(&amp;lt;object&amp;gt;)     # Converts object to JSON string.&#xA;&amp;lt;object&amp;gt; = json.loads(&amp;lt;str&amp;gt;)        # Converts JSON string to object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Object from JSON File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_json_file(filename):&#xA;    with open(filename, encoding=&#39;utf-8&#39;) as file:&#xA;        return json.load(file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Object to JSON File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_json_file(filename, an_object):&#xA;    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:&#xA;        json.dump(an_object, file, ensure_ascii=False, indent=2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pickle&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Binary file format for storing Python objects.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle&#xA;&amp;lt;bytes&amp;gt;  = pickle.dumps(&amp;lt;object&amp;gt;)   # Converts object to bytes object.&#xA;&amp;lt;object&amp;gt; = pickle.loads(&amp;lt;bytes&amp;gt;)    # Converts bytes object to object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Object from File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_pickle_file(filename):&#xA;    with open(filename, &#39;rb&#39;) as file:&#xA;        return pickle.load(file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Object to File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_pickle_file(filename, an_object):&#xA;    with open(filename, &#39;wb&#39;) as file:&#xA;        pickle.dump(an_object, file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CSV&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Text file format for storing spreadsheets.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;reader&amp;gt; = csv.reader(&amp;lt;file&amp;gt;)       # Also: `dialect=&#39;excel&#39;, delimiter=&#39;,&#39;`.&#xA;&amp;lt;list&amp;gt;   = next(&amp;lt;reader&amp;gt;)           # Returns next row as a list of strings.&#xA;&amp;lt;list&amp;gt;   = list(&amp;lt;reader&amp;gt;)           # Returns a list of remaining rows.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;File must be opened with a &lt;code&gt;&#39;newline=&#34;&#34;&#39;&lt;/code&gt; argument, or newlines embedded inside quoted fields will not be interpreted correctly!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;To print the spreadsheet to the console use &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#table&#34;&gt;Tabulate&lt;/a&gt; library.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For XML and binary Excel files (xlsx, xlsm and xlsb) use &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#dataframe-plot-encode-decode&#34;&gt;Pandas&lt;/a&gt; library.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reader accepts any iterator of strings, not just files.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Write&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;writer&amp;gt; = csv.writer(&amp;lt;file&amp;gt;)       # Also: `dialect=&#39;excel&#39;, delimiter=&#39;,&#39;`.&#xA;&amp;lt;writer&amp;gt;.writerow(&amp;lt;collection&amp;gt;)     # Encodes objects using `str(&amp;lt;el&amp;gt;)`.&#xA;&amp;lt;writer&amp;gt;.writerows(&amp;lt;coll_of_coll&amp;gt;)  # Appends multiple rows.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;File must be opened with a &lt;code&gt;&#39;newline=&#34;&#34;&#39;&lt;/code&gt; argument, or &#39;\r&#39; will be added in front of every &#39;\n&#39; on platforms that use &#39;\r\n&#39; line endings!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open existing file with &lt;code&gt;&#39;mode=&#34;w&#34;&#39;&lt;/code&gt; to overwrite it or &lt;code&gt;&#39;mode=&#34;a&#34;&#39;&lt;/code&gt; to append to it.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;dialect&#39;&lt;/code&gt; - Master parameter that sets the default values. String or a &#39;csv.Dialect&#39; object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;delimiter&#39;&lt;/code&gt; - A one-character string used to separate fields.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;quotechar&#39;&lt;/code&gt; - Character for quoting fields that contain special characters.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;doublequote&#39;&lt;/code&gt; - Whether quotechars inside fields are/get doubled or escaped.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;skipinitialspace&#39;&lt;/code&gt; - Is space character at the start of the field stripped by the reader.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;lineterminator&#39;&lt;/code&gt; - How writer terminates rows. Reader is hardcoded to &#39;\n&#39;, &#39;\r&#39;, &#39;\r\n&#39;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;quoting&#39;&lt;/code&gt; - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;escapechar&#39;&lt;/code&gt; - Character for escaping quotechars if &#39;doublequote&#39; is False.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dialects&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------+--------------+--------------+--------------+&#xA;|                  |     excel    |   excel-tab  |     unix     |&#xA;+------------------+--------------+--------------+--------------+&#xA;| delimiter        |       &#39;,&#39;    |      &#39;\t&#39;    |       &#39;,&#39;    |&#xA;| quotechar        |       &#39;&#34;&#39;    |       &#39;&#34;&#39;    |       &#39;&#34;&#39;    |&#xA;| doublequote      |      True    |      True    |      True    |&#xA;| skipinitialspace |     False    |     False    |     False    |&#xA;| lineterminator   |    &#39;\r\n&#39;    |    &#39;\r\n&#39;    |      &#39;\n&#39;    |&#xA;| quoting          |         0    |         0    |         1    |&#xA;| escapechar       |      None    |      None    |      None    |&#xA;+------------------+--------------+--------------+--------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Rows from CSV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_csv_file(filename, dialect=&#39;excel&#39;, **params):&#xA;    with open(filename, encoding=&#39;utf-8&#39;, newline=&#39;&#39;) as file:&#xA;        return list(csv.reader(file, dialect, **params))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Rows to CSV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_csv_file(filename, rows, mode=&#39;w&#39;, dialect=&#39;excel&#39;, **params):&#xA;    with open(filename, mode, encoding=&#39;utf-8&#39;, newline=&#39;&#39;) as file:&#xA;        writer = csv.writer(file, dialect, **params)&#xA;        writer.writerows(rows)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SQLite&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A server-less database engine that stores each database into a separate file.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3&#xA;&amp;lt;conn&amp;gt; = sqlite3.connect(&amp;lt;path&amp;gt;)                # Opens existing or new file. Also &#39;:memory:&#39;.&#xA;&amp;lt;conn&amp;gt;.close()                                  # Closes the connection.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;cursor&amp;gt; = &amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)            # Can raise a subclass of sqlite3.Error.&#xA;&amp;lt;tuple&amp;gt;  = &amp;lt;cursor&amp;gt;.fetchone()                  # Returns next row. Also next(&amp;lt;cursor&amp;gt;).&#xA;&amp;lt;list&amp;gt;   = &amp;lt;cursor&amp;gt;.fetchall()                  # Returns remaining rows. Also list(&amp;lt;cursor&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)                       # Can raise a subclass of sqlite3.Error.&#xA;&amp;lt;conn&amp;gt;.commit()                                 # Saves all changes since the last commit.&#xA;&amp;lt;conn&amp;gt;.rollback()                               # Discards all changes since the last commit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with &amp;lt;conn&amp;gt;:                                    # Exits the block with commit() or rollback(),&#xA;    &amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;)                   # depending on whether any exception occurred.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Placeholders&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;list/tuple&amp;gt;)         # Replaces &#39;?&#39;s in query with values.&#xA;&amp;lt;conn&amp;gt;.execute(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;dict/namedtuple&amp;gt;)    # Replaces &#39;:&amp;lt;key&amp;gt;&#39;s with values.&#xA;&amp;lt;conn&amp;gt;.executemany(&#39;&amp;lt;query&amp;gt;&#39;, &amp;lt;coll_of_above&amp;gt;)  # Runs execute() multiple times.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bools will be stored and returned as ints and dates as &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#encode&#34;&gt;ISO formatted strings&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values are not actually saved in this example because &lt;code&gt;&#39;conn.commit()&#39;&lt;/code&gt; is omitted!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; conn = sqlite3.connect(&#39;test.db&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; conn.execute(&#39;CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; conn.execute(&#39;INSERT INTO person VALUES (NULL, ?, ?)&#39;, (&#39;Jean-Luc&#39;, 187)).lastrowid&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; conn.execute(&#39;SELECT * FROM person&#39;).fetchall()&#xA;[(1, &#39;Jean-Luc&#39;, 187)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SqlAlchemy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install sqlalchemy&#xA;from sqlalchemy import create_engine, text&#xA;&amp;lt;engine&amp;gt; = create_engine(&#39;&amp;lt;url&amp;gt;&#39;)               # Url: &#39;dialect://user:password@host/dbname&#39;.&#xA;&amp;lt;conn&amp;gt;   = &amp;lt;engine&amp;gt;.connect()                   # Creates a connection. Also &amp;lt;conn&amp;gt;.close().&#xA;&amp;lt;cursor&amp;gt; = &amp;lt;conn&amp;gt;.execute(text(&#39;&amp;lt;query&amp;gt;&#39;), …)   # Replaces &#39;:&amp;lt;key&amp;gt;&#39;s with keyword arguments.&#xA;with &amp;lt;conn&amp;gt;.begin(): ...                        # Exits the block with commit or rollback.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------+--------------+----------+----------------------------------+&#xA;| Dialect    | pip3 install | import   |           Dependencies           |&#xA;+------------+--------------+----------+----------------------------------+&#xA;| mysql      | mysqlclient  | MySQLdb  | www.pypi.org/project/mysqlclient |&#xA;| postgresql | psycopg2     | psycopg2 | www.pypi.org/project/psycopg2    |&#xA;| mssql      | pyodbc       | pyodbc   | www.pypi.org/project/pyodbc      |&#xA;| oracle     | oracledb     | oracledb | www.pypi.org/project/oracledb    |&#xA;+------------+--------------+----------+----------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bytes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt; = b&#39;&amp;lt;str&amp;gt;&#39;                          # Only accepts ASCII characters and \x00-\xff.&#xA;&amp;lt;int&amp;gt;   = &amp;lt;bytes&amp;gt;[&amp;lt;index&amp;gt;]                  # Returns an int in range from 0 to 255.&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;bytes&amp;gt;[&amp;lt;slice&amp;gt;]                  # Returns bytes even if it has only one element.&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;bytes&amp;gt;.join(&amp;lt;coll_of_bytes&amp;gt;)     # Joins elements using bytes as a separator.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;coll_of_ints&amp;gt;)             # Ints must be in range from 0 to 255.&#xA;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;str&amp;gt;, &#39;utf-8&#39;)             # Or: &amp;lt;str&amp;gt;.encode(&#39;utf-8&#39;)&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;int&amp;gt;.to_bytes(n_bytes, …)        # `byteorder=&#39;big/little&#39;, signed=False`.&#xA;&amp;lt;bytes&amp;gt; = bytes.fromhex(&#39;&amp;lt;hex&amp;gt;&#39;)            # Hex pairs can be separated by whitespaces.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;  = list(&amp;lt;bytes&amp;gt;)                     # Returns ints in range from 0 to 255.&#xA;&amp;lt;str&amp;gt;   = str(&amp;lt;bytes&amp;gt;, &#39;utf-8&#39;)             # Or: &amp;lt;bytes&amp;gt;.decode(&#39;utf-8&#39;)&#xA;&amp;lt;int&amp;gt;   = int.from_bytes(&amp;lt;bytes&amp;gt;, …)        # `byteorder=&#39;big/little&#39;, signed=False`.&#xA;&#39;&amp;lt;hex&amp;gt;&#39; = &amp;lt;bytes&amp;gt;.hex()                     # Returns hex pairs. Accepts `sep=&amp;lt;str&amp;gt;`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Bytes from File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_bytes(filename):&#xA;    with open(filename, &#39;rb&#39;) as file:&#xA;        return file.read()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Bytes to File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_bytes(filename, bytes_obj):&#xA;    with open(filename, &#39;wb&#39;) as file:&#xA;        file.write(bytes_obj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Struct&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module that performs conversions between a sequence of numbers and a bytes object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;System’s type sizes, byte order, and alignment rules are used by default.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from struct import pack, unpack&#xA;&amp;lt;bytes&amp;gt; = pack(&#39;&amp;lt;format&amp;gt;&#39;, &amp;lt;el_1&amp;gt; [, ...])  # Packages arguments or raises struct.error.&#xA;&amp;lt;tuple&amp;gt; = unpack(&#39;&amp;lt;format&amp;gt;&#39;, &amp;lt;bytes&amp;gt;)       # Use iter_unpack() for iterator of tuples.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; pack(&#39;&amp;gt;hhl&#39;, 1, 2, 3)&#xA;b&#39;\x00\x01\x00\x02\x00\x00\x00\x03&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; unpack(&#39;&amp;gt;hhl&#39;, b&#39;\x00\x01\x00\x02\x00\x00\x00\x03&#39;)&#xA;(1, 2, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format&lt;/h3&gt; &#xA;&lt;h4&gt;For standard type sizes and manual alignment (padding) start format string with:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;=&#39;&lt;/code&gt; - System&#39;s byte order (usually little-endian).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;&#39;&lt;/code&gt; - Little-endian.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;gt;&#39;&lt;/code&gt; - Big-endian (also &lt;code&gt;&#39;!&#39;&lt;/code&gt;).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Besides numbers, pack() and unpack() also support bytes objects as part of the sequence:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;c&#39;&lt;/code&gt; - A bytes object with a single element. For pad byte use &lt;code&gt;&#39;x&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;&amp;lt;n&amp;gt;s&#39;&lt;/code&gt; - A bytes object with n elements.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;b&#39;&lt;/code&gt; - char (1/1)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;h&#39;&lt;/code&gt; - short (2/2)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;i&#39;&lt;/code&gt; - int (2/4)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;l&#39;&lt;/code&gt; - long (4/4)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;q&#39;&lt;/code&gt; - long long (8/8)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Floating point types (struct always uses standard sizes):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;f&#39;&lt;/code&gt; - float (4/4)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;d&#39;&lt;/code&gt; - double (8/8)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Array&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Type sizes and byte order are always determined by the system, however bytes of each element can be swapped with byteswap() method.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from array import array&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;collection&amp;gt;)    # Array from collection of numbers.&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;bytes&amp;gt;)         # Array from bytes object.&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;array&amp;gt;)         # Treats array as a sequence of numbers.&#xA;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;array&amp;gt;)                       # Or: &amp;lt;array&amp;gt;.tobytes()&#xA;&amp;lt;file&amp;gt;.write(&amp;lt;array&amp;gt;)                          # Writes array to the binary file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory View&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A sequence object that points to the memory of another bytes-like object.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Each element can reference a single or multiple consecutive bytes, depending on format.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Order and number of elements can be changed with slicing.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Casting only works between char and other types and uses system&#39;s sizes.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Byte order is always determined by the system.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;mview&amp;gt; = memoryview(&amp;lt;bytes/bytearray/array&amp;gt;)  # Immutable if bytes, else mutable.&#xA;&amp;lt;real&amp;gt;  = &amp;lt;mview&amp;gt;[&amp;lt;index&amp;gt;]                     # Returns an int or a float.&#xA;&amp;lt;mview&amp;gt; = &amp;lt;mview&amp;gt;[&amp;lt;slice&amp;gt;]                     # Mview with rearranged elements.&#xA;&amp;lt;mview&amp;gt; = &amp;lt;mview&amp;gt;.cast(&#39;&amp;lt;typecode&amp;gt;&#39;)           # Casts memoryview to the new format.&#xA;&amp;lt;mview&amp;gt;.release()                              # Releases the object&#39;s memory buffer.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bytes&amp;gt; = bytes(&amp;lt;mview&amp;gt;)                       # Returns a new bytes object.&#xA;&amp;lt;bytes&amp;gt; = &amp;lt;bytes&amp;gt;.join(&amp;lt;coll_of_mviews&amp;gt;)       # Joins mviews using bytes object as sep.&#xA;&amp;lt;array&amp;gt; = array(&#39;&amp;lt;typecode&amp;gt;&#39;, &amp;lt;mview&amp;gt;)         # Treats mview as a sequence of numbers.&#xA;&amp;lt;file&amp;gt;.write(&amp;lt;mview&amp;gt;)                          # Writes mview to the binary file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt;  = list(&amp;lt;mview&amp;gt;)                        # Returns a list of ints or floats.&#xA;&amp;lt;str&amp;gt;   = str(&amp;lt;mview&amp;gt;, &#39;utf-8&#39;)                # Treats mview as a bytes object.&#xA;&amp;lt;int&amp;gt;   = int.from_bytes(&amp;lt;mview&amp;gt;, …)           # `byteorder=&#39;big/little&#39;, signed=False`.&#xA;&#39;&amp;lt;hex&amp;gt;&#39; = &amp;lt;mview&amp;gt;.hex()                        # Treats mview as a bytes object.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deque&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A thread-safe list with efficient appends and pops from either side. Pronounced &#34;deck&#34;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import deque&#xA;&amp;lt;deque&amp;gt; = deque(&amp;lt;collection&amp;gt;)                  # Also `maxlen=None`.&#xA;&amp;lt;deque&amp;gt;.appendleft(&amp;lt;el&amp;gt;)                       # Opposite element is dropped if full.&#xA;&amp;lt;deque&amp;gt;.extendleft(&amp;lt;collection&amp;gt;)               # Collection gets reversed.&#xA;&amp;lt;el&amp;gt; = &amp;lt;deque&amp;gt;.popleft()                       # Raises IndexError if empty.&#xA;&amp;lt;deque&amp;gt;.rotate(n=1)                            # Rotates elements to the right.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Threading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CPython interpreter can only run a single thread at a time. Using multiple threads won&#39;t result in a faster execution, unless at least one of the threads contains an I/O operation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from threading import Thread, Timer, RLock, Semaphore, Event, Barrier&#xA;from concurrent.futures import ThreadPoolExecutor, as_completed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Thread&amp;gt; = Thread(target=&amp;lt;function&amp;gt;)           # Use `args=&amp;lt;collection&amp;gt;` to set the arguments.&#xA;&amp;lt;Thread&amp;gt;.start()                               # Starts the thread.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;Thread&amp;gt;.is_alive()                   # Checks if the thread has finished executing.&#xA;&amp;lt;Thread&amp;gt;.join()                                # Waits for the thread to finish.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;kwargs=&amp;lt;dict&amp;gt;&#39;&lt;/code&gt; to pass keyword arguments to the function.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;daemon=True&#39;&lt;/code&gt;, or the program will not be able to exit while the thread is alive.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;To delay thread execution use &lt;code&gt;&#39;Timer(seconds, &amp;lt;func&amp;gt;)&#39;&lt;/code&gt; instead of Thread().&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lock&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;lock&amp;gt; = RLock()                               # Lock that can only be released by acquirer.&#xA;&amp;lt;lock&amp;gt;.acquire()                               # Waits for the lock to be available.&#xA;&amp;lt;lock&amp;gt;.release()                               # Makes the lock available again.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with &amp;lt;lock&amp;gt;:                                   # Enters the block by calling acquire() and&#xA;    ...                                        # exits it with release(), even on error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Semaphore, Event, Barrier&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Semaphore&amp;gt; = Semaphore(value=1)               # Lock that can be acquired by &#39;value&#39; threads.&#xA;&amp;lt;Event&amp;gt;     = Event()                          # Method wait() blocks until set() is called.&#xA;&amp;lt;Barrier&amp;gt;   = Barrier(n_times)                 # Wait() blocks until it&#39;s called n_times.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queue&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Queue&amp;gt; = queue.Queue(maxsize=0)               # A thread-safe first-in-first-out queue.&#xA;&amp;lt;Queue&amp;gt;.put(&amp;lt;el&amp;gt;)                              # Blocks until queue stops being full.&#xA;&amp;lt;Queue&amp;gt;.put_nowait(&amp;lt;el&amp;gt;)                       # Raises queue.Full exception if full.&#xA;&amp;lt;el&amp;gt; = &amp;lt;Queue&amp;gt;.get()                           # Blocks until queue stops being empty.&#xA;&amp;lt;el&amp;gt; = &amp;lt;Queue&amp;gt;.get_nowait()                    # Raises queue.Empty exception if empty.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread Pool Executor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Exec&amp;gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &amp;lt;name&amp;gt;: ...`&#xA;&amp;lt;iter&amp;gt; = &amp;lt;Exec&amp;gt;.map(&amp;lt;func&amp;gt;, &amp;lt;args_1&amp;gt;, ...)     # Multithreaded and non-lazy map(). Keeps order.&#xA;&amp;lt;Futr&amp;gt; = &amp;lt;Exec&amp;gt;.submit(&amp;lt;func&amp;gt;, &amp;lt;arg_1&amp;gt;, ...)   # Creates a thread and returns its Future obj.&#xA;&amp;lt;Exec&amp;gt;.shutdown()                              # Blocks until all threads finish executing.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = &amp;lt;Future&amp;gt;.done()                       # Checks if the thread has finished executing.&#xA;&amp;lt;obj&amp;gt;  = &amp;lt;Future&amp;gt;.result(timeout=None)         # Waits for thread to finish and returns result.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;Future&amp;gt;.cancel()                     # Cancels or returns False if running/finished.&#xA;&amp;lt;iter&amp;gt; = as_completed(&amp;lt;coll_of_Futures&amp;gt;)       # Next() waits for next completed Future.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Map() and as_completed() also accept &#39;timeout&#39; argument that causes TimeoutError if result isn&#39;t available in &#39;timeout&#39; seconds after next() is called.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exceptions that happen inside threads are raised when next() is called on map&#39;s iterator or when result() is called on a Future. Its exception() method returns exception or None.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProcessPoolExecutor provides true parallelism, but everything sent to/from workers must be &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#pickle&#34;&gt;pickable&lt;/a&gt;. Queues must be sent using executor&#39;s &#39;initargs&#39; and &#39;initializer&#39; parameters.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operator&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module of functions that provide the functionality of operators. Functions are ordered by operator precedence, starting with least binding.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import operator as op&#xA;&amp;lt;bool&amp;gt; = op.not_(&amp;lt;obj&amp;gt;)                                         # or, and, not (or/and missing)&#xA;&amp;lt;bool&amp;gt; = op.eq/ne/lt/le/gt/ge/contains/is_(&amp;lt;obj&amp;gt;, &amp;lt;obj&amp;gt;)        # ==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=, in, is&#xA;&amp;lt;obj&amp;gt;  = op.or_/xor/and_(&amp;lt;int/set&amp;gt;, &amp;lt;int/set&amp;gt;)                  # |, ^, &amp;amp;&#xA;&amp;lt;int&amp;gt;  = op.lshift/rshift(&amp;lt;int&amp;gt;, &amp;lt;int&amp;gt;)                         # &amp;lt;&amp;lt;, &amp;gt;&amp;gt;&#xA;&amp;lt;obj&amp;gt;  = op.add/sub/mul/truediv/floordiv/mod(&amp;lt;obj&amp;gt;, &amp;lt;obj&amp;gt;)      # +, -, *, /, //, %&#xA;&amp;lt;num&amp;gt;  = op.neg/invert(&amp;lt;num&amp;gt;)                                   # -, ~&#xA;&amp;lt;num&amp;gt;  = op.pow(&amp;lt;num&amp;gt;, &amp;lt;num&amp;gt;)                                   # **&#xA;&amp;lt;func&amp;gt; = op.itemgetter/attrgetter/methodcaller(&amp;lt;obj&amp;gt; [, ...])   # [index/key], .name, .name()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;elementwise_sum  = map(op.add, list_a, list_b)&#xA;sorted_by_second = sorted(&amp;lt;collection&amp;gt;, key=op.itemgetter(1))&#xA;sorted_by_both   = sorted(&amp;lt;collection&amp;gt;, key=op.itemgetter(1, 0))&#xA;product_of_elems = functools.reduce(op.mul, &amp;lt;collection&amp;gt;)&#xA;first_element    = op.methodcaller(&#39;pop&#39;, 0)(&amp;lt;list&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bitwise operators require objects to have or(), xor(), and(), lshift(), rshift() and invert() special methods, unlike logical operators that work on all types of objects.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Also: &lt;code&gt;&#39;&amp;lt;bool&amp;gt; = &amp;lt;bool&amp;gt; &amp;amp;|^ &amp;lt;bool&amp;gt;&#39;&lt;/code&gt; and &lt;code&gt;&#39;&amp;lt;int&amp;gt; = &amp;lt;bool&amp;gt; &amp;amp;|^ &amp;lt;int&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = dir()                             # Names of local variables, functions, classes, etc.&#xA;&amp;lt;dict&amp;gt; = vars()                            # Dict of local variables, etc. Also locals().&#xA;&amp;lt;dict&amp;gt; = globals()                         # Dict of global vars, etc. (incl. &#39;__builtins__&#39;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;list&amp;gt; = dir(&amp;lt;object&amp;gt;)                     # Names of object&#39;s attributes (including methods).&#xA;&amp;lt;dict&amp;gt; = vars(&amp;lt;object&amp;gt;)                    # Dict of writable attributes. Also &amp;lt;obj&amp;gt;.__dict__.&#xA;&amp;lt;bool&amp;gt; = hasattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;)  # Checks if getattr() raises an AttributeError.&#xA;value  = getattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;)  # Raises AttributeError if attribute is missing.&#xA;setattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;, value)    # Only works on objects with &#39;__dict__&#39; attribute.&#xA;delattr(&amp;lt;object&amp;gt;, &#39;&amp;lt;attr_name&amp;gt;&#39;)           # Same. Also `del &amp;lt;object&amp;gt;.&amp;lt;attr_name&amp;gt;`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sig&amp;gt;  = inspect.signature(&amp;lt;function&amp;gt;)     # Function&#39;s Signature object.&#xA;&amp;lt;dict&amp;gt; = &amp;lt;Sig&amp;gt;.parameters                  # Dict of Parameter objects.&#xA;&amp;lt;memb&amp;gt; = &amp;lt;Param&amp;gt;.kind                      # Member of ParameterKind enum.&#xA;&amp;lt;obj&amp;gt;  = &amp;lt;Param&amp;gt;.default                   # Default value or Parameter.empty.&#xA;&amp;lt;type&amp;gt; = &amp;lt;Param&amp;gt;.annotation                # Type or Parameter.empty.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Metaprogramming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code that generates code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;class&amp;gt; = type(&#39;&amp;lt;class_name&amp;gt;&#39;, &amp;lt;tuple_of_parents&amp;gt;, &amp;lt;dict_of_class_attributes&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Z = type(&#39;Z&#39;, (), {&#39;a&#39;: &#39;abcde&#39;, &#39;b&#39;: 12345})&#xA;&amp;gt;&amp;gt;&amp;gt; z = Z()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meta Class&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A class that creates classes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_meta_class(name, parents, attrs):&#xA;    attrs[&#39;a&#39;] = &#39;abcde&#39;&#xA;    return type(name, parents, attrs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyMetaClass(type):&#xA;    def __new__(cls, name, parents, attrs):&#xA;        attrs[&#39;a&#39;] = &#39;abcde&#39;&#xA;        return type.__new__(cls, name, parents, attrs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a &#39;self&#39; argument.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Like in our case, new() can also be called directly, usually from a new() method of a child class (&lt;/strong&gt;&lt;code&gt;def __new__(cls): return super().__new__(cls)&lt;/code&gt;&lt;strong&gt;).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metaclass Attribute&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Right before a class is created it checks if it has the &#39;metaclass&#39; attribute defined. If not, it recursively checks if any of its parents has it defined and eventually comes to type().&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyClass(metaclass=MyMetaClass):&#xA;    b = 12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; MyClass.a, MyClass.b&#xA;(&#39;abcde&#39;, 12345)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type Diagram&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(MyClass) == MyMetaClass         # MyClass is an instance of MyMetaClass.&#xA;type(MyMetaClass) == type            # MyMetaClass is an instance of type.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------+-------------+&#xA;|   Classes   | Metaclasses |&#xA;+-------------+-------------|&#xA;|   MyClass &amp;lt;-- MyMetaClass |&#xA;|             |     ^       |&#xA;|    object &amp;lt;----- type &amp;lt;+  |&#xA;|             |     | +--+  |&#xA;|     str &amp;lt;---------+       |&#xA;+-------------+-------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inheritance Diagram&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MyClass.__base__ == object           # MyClass is a subclass of object.&#xA;MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------+-------------+&#xA;|   Classes   | Metaclasses |&#xA;+-------------+-------------|&#xA;|   MyClass   | MyMetaClass |&#xA;|      ^      |     ^       |&#xA;|    object -----&amp;gt; type     |&#xA;|      v      |             |&#xA;|     str     |             |&#xA;+-------------+-------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Eval&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from ast import literal_eval&#xA;&amp;gt;&amp;gt;&amp;gt; literal_eval(&#39;[1, 2, 3]&#39;)&#xA;[1, 2, 3]&#xA;&amp;gt;&amp;gt;&amp;gt; literal_eval(&#39;1 + 2&#39;)&#xA;ValueError: malformed node or string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Coroutines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don’t use as much memory.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coroutine definition starts with &lt;code&gt;&#39;async&#39;&lt;/code&gt; and its call with &lt;code&gt;&#39;await&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;asyncio.run(&amp;lt;coroutine&amp;gt;)&#39;&lt;/code&gt; is the main entry point for asynchronous programs.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions wait(), gather() and as_completed() start multiple coroutines at the same time.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asyncio module also provides its own &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#queue&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#semaphore-event-barrier&#34;&gt;Event&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#lock&#34;&gt;Lock&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/#semaphore-event-barrier&#34;&gt;Semaphore&lt;/a&gt; classes.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Runs a terminal game where you control an asterisk that must avoid numbers:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio, collections, curses, curses.textpad, enum, random&#xA;&#xA;P = collections.namedtuple(&#39;P&#39;, &#39;x y&#39;)         # Position&#xA;D = enum.Enum(&#39;D&#39;, &#39;n e s w&#39;)                  # Direction&#xA;W, H = 15, 7                                   # Width, Height&#xA;&#xA;def main(screen):&#xA;    curses.curs_set(0)                         # Makes cursor invisible.&#xA;    screen.nodelay(True)                       # Makes getch() non-blocking.&#xA;    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.&#xA;&#xA;async def main_coroutine(screen):&#xA;    moves = asyncio.Queue()&#xA;    state = {&#39;*&#39;: P(0, 0), **{id_: P(W//2, H//2) for id_ in range(10)}}&#xA;    ai    = [random_controller(id_, moves) for id_ in range(10)]&#xA;    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]&#xA;    tasks = [asyncio.create_task(cor) for cor in ai + mvc]&#xA;    await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)&#xA;&#xA;async def random_controller(id_, moves):&#xA;    while True:&#xA;        d = random.choice(list(D))&#xA;        moves.put_nowait((id_, d))&#xA;        await asyncio.sleep(random.triangular(0.01, 0.65))&#xA;&#xA;async def human_controller(screen, moves):&#xA;    while True:&#xA;        key_mappings = {258: D.s, 259: D.n, 260: D.w, 261: D.e}&#xA;        if d := key_mappings.get(screen.getch()):&#xA;            moves.put_nowait((&#39;*&#39;, d))&#xA;        await asyncio.sleep(0.005)&#xA;&#xA;async def model(moves, state):&#xA;    while state[&#39;*&#39;] not in (state[id_] for id_ in range(10)):&#xA;        id_, d = await moves.get()&#xA;        x, y   = state[id_]&#xA;        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}&#xA;        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)&#xA;&#xA;async def view(state, screen):&#xA;    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)&#xA;    while True:&#xA;        screen.erase()&#xA;        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)&#xA;        for id_, p in state.items():&#xA;            screen.addstr(offset.y + (p.y - state[&#39;*&#39;].y + H//2) % H,&#xA;                          offset.x + (p.x - state[&#39;*&#39;].x + W//2) % W, str(id_))&#xA;        screen.refresh()&#xA;        await asyncio.sleep(0.005)&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    curses.wrapper(main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Libraries&lt;/h1&gt; &#xA;&lt;h2&gt;Progress Bar&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install tqdm&#xA;&amp;gt;&amp;gt;&amp;gt; import tqdm, time&#xA;&amp;gt;&amp;gt;&amp;gt; for el in tqdm.tqdm([1, 2, 3], desc=&#39;Processing&#39;):&#xA;...     time.sleep(1)&#xA;Processing: 100%|████████████████████| 3/3 [00:03&amp;lt;00:00,  1.00s/it]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plot&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install matplotlib&#xA;import matplotlib.pyplot as plt&#xA;plt.plot/bar/scatter(x_data, y_data [, label=&amp;lt;str&amp;gt;])  # Or: plt.plot(y_data)&#xA;plt.legend()                                          # Adds a legend.&#xA;plt.savefig(&amp;lt;path&amp;gt;)                                   # Saves the figure.&#xA;plt.show()                                            # Displays the figure.&#xA;plt.clf()                                             # Clears the figure.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table&lt;/h2&gt; &#xA;&lt;h4&gt;Prints a CSV file as an ASCII table:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install tabulate&#xA;import csv, tabulate&#xA;with open(&#39;test.csv&#39;, encoding=&#39;utf-8&#39;, newline=&#39;&#39;) as file:&#xA;    rows   = csv.reader(file)&#xA;    header = next(rows)&#xA;    table  = tabulate.tabulate(rows, header)&#xA;print(table)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Curses&lt;/h2&gt; &#xA;&lt;h4&gt;Runs a basic file explorer in the console:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pip3 install windows-curses&#xA;import curses, os&#xA;from curses import A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER&#xA;&#xA;def main(screen):&#xA;    ch, first, selected, paths = 0, 0, 0, os.listdir()&#xA;    while ch != ord(&#39;q&#39;):&#xA;        height, width = screen.getmaxyx()&#xA;        screen.erase()&#xA;        for y, filename in enumerate(paths[first : first+height]):&#xA;            color = A_REVERSE if filename == paths[selected] else 0&#xA;            screen.addnstr(y, 0, filename, width-1, color)&#xA;        ch = screen.getch()&#xA;        selected += (ch == KEY_DOWN) - (ch == KEY_UP)&#xA;        selected = max(0, min(len(paths)-1, selected))&#xA;        first += (selected &amp;gt;= first + height) - (selected &amp;lt; first)&#xA;        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, ord(&#39;\n&#39;), ord(&#39;\r&#39;)]:&#xA;            new_dir = &#39;..&#39; if ch == KEY_LEFT else paths[selected]&#xA;            if os.path.isdir(new_dir):&#xA;                os.chdir(new_dir)&#xA;                first, selected, paths = 0, 0, os.listdir()&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    curses.wrapper(main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;logging.basicConfig(filename=&amp;lt;path&amp;gt;, level=&#39;DEBUG&#39;)  # Configures the root logger (see Setup).&#xA;logging.debug/info/warning/error/critical(&amp;lt;str&amp;gt;)     # Logs to the root logger.&#xA;&amp;lt;Logger&amp;gt; = logging.getLogger(__name__)               # Logger named after the module.&#xA;&amp;lt;Logger&amp;gt;.&amp;lt;level&amp;gt;(&amp;lt;str&amp;gt;)                              # Logs to the logger.&#xA;&amp;lt;Logger&amp;gt;.exception(&amp;lt;str&amp;gt;)                            # Calls error() with caught exception.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;logging.basicConfig(&#xA;    filename=None,                                   # Logs to console (stderr) by default.&#xA;    format=&#39;%(levelname)s:%(name)s:%(message)s&#39;,     # Add &#39;%(asctime)s&#39; for local datetime.&#xA;    level=logging.WARNING,                           # Drops messages with lower priority.&#xA;    handlers=[logging.StreamHandler(sys.stderr)]     # Uses FileHandler if filename is set.&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Formatter&amp;gt; = logging.Formatter(&#39;&amp;lt;format&amp;gt;&#39;)          # Creates a Formatter.&#xA;&amp;lt;Handler&amp;gt; = logging.FileHandler(&amp;lt;path&amp;gt;, mode=&#39;a&#39;)    # Creates a Handler. Also `encoding=None`.&#xA;&amp;lt;Handler&amp;gt;.setFormatter(&amp;lt;Formatter&amp;gt;)                  # Adds Formatter to the Handler.&#xA;&amp;lt;Handler&amp;gt;.setLevel(&amp;lt;int/str&amp;gt;)                        # Processes all messages by default.&#xA;&amp;lt;Logger&amp;gt;.addHandler(&amp;lt;Handler&amp;gt;)                       # Adds Handler to the Logger.&#xA;&amp;lt;Logger&amp;gt;.setLevel(&amp;lt;int/str&amp;gt;)                         # What is sent to its/ancestor&#39;s handlers.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parent logger can be specified by naming the child logger &lt;code&gt;&#39;&amp;lt;parent&amp;gt;.&amp;lt;name&amp;gt;&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If logger doesn&#39;t have a set level it inherits it from the first ancestor that does.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Formatter also accepts: pathname, filename, funcName, lineno, thread and process.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A &lt;code&gt;&#39;handlers.RotatingFileHandler&#39;&lt;/code&gt; creates and deletes log files based on &#39;maxBytes&#39; and &#39;backupCount&#39; arguments.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Creates a logger that writes all messages to file and sends them to the root&#39;s handler that prints warnings or higher:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; logger = logging.getLogger(&#39;my_module&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; handler = logging.FileHandler(&#39;test.log&#39;, encoding=&#39;utf-8&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; formatter = logging.Formatter(&#39;%(asctime)s %(levelname)s:%(name)s:%(message)s&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; handler.setFormatter(formatter)&#xA;&amp;gt;&amp;gt;&amp;gt; logger.addHandler(handler)&#xA;&amp;gt;&amp;gt;&amp;gt; logging.basicConfig(level=&#39;DEBUG&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; logging.root.handlers[0].setLevel(&#39;WARNING&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; logger.critical(&#39;Running out of disk space.&#39;)&#xA;CRITICAL:my_module:Running out of disk space.&#xA;&amp;gt;&amp;gt;&amp;gt; print(open(&#39;test.log&#39;).read())&#xA;2023-02-07 23:21:01,430 CRITICAL:my_module:Running out of disk space.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scraping&lt;/h2&gt; &#xA;&lt;h4&gt;Scrapes Python&#39;s URL and logo from its Wikipedia page:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install requests beautifulsoup4&#xA;import requests, bs4, os, sys&#xA;&#xA;try:&#xA;    response   = requests.get(&#39;https://en.wikipedia.org/wiki/Python_(programming_language)&#39;)&#xA;    document   = bs4.BeautifulSoup(response.text, &#39;html.parser&#39;)&#xA;    table      = document.find(&#39;table&#39;, class_=&#39;infobox vevent&#39;)&#xA;    python_url = table.find(&#39;th&#39;, text=&#39;Website&#39;).next_sibling.a[&#39;href&#39;]&#xA;    logo_url   = table.find(&#39;img&#39;)[&#39;src&#39;]&#xA;    logo       = requests.get(f&#39;https:{logo_url}&#39;).content&#xA;    filename   = os.path.basename(logo_url)&#xA;    with open(filename, &#39;wb&#39;) as file:&#xA;        file.write(logo)&#xA;    print(f&#39;{python_url}, file://{os.path.abspath(filename)}&#39;)&#xA;except requests.exceptions.ConnectionError:&#xA;    print(&#34;You&#39;ve got problems with connection.&#34;, file=sys.stderr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flask is a micro web framework/server. If you just want to open a html file in a web browser use &lt;code&gt;&#39;webbrowser.open(&amp;lt;path&amp;gt;)&#39;&lt;/code&gt; instead.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install flask&#xA;import flask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app = flask.Flask(__name__)&#xA;app.run(host=None, port=None, debug=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Starts the app at &lt;code&gt;&#39;http://localhost:5000&#39;&lt;/code&gt;. Use &lt;code&gt;&#39;host=&#34;0.0.0.0&#34;&#39;&lt;/code&gt; to run externally.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install a WSGI server like &lt;a href=&#34;https://flask.palletsprojects.com/en/latest/deploying/waitress/&#34;&gt;Waitress&lt;/a&gt; and a HTTP server such as &lt;a href=&#34;https://flask.palletsprojects.com/en/latest/deploying/nginx/&#34;&gt;Nginx&lt;/a&gt; for better security.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debug mode restarts the app whenever script changes and displays errors in the browser.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Static Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/img/&amp;lt;path:filename&amp;gt;&#39;)&#xA;def serve_file(filename):&#xA;    return flask.send_from_directory(&#39;dirname/&#39;, filename)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/&amp;lt;sport&amp;gt;&#39;)&#xA;def serve_html(sport):&#xA;    return flask.render_template_string(&#39;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&#39;, title=sport)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;render_template(filename, &amp;lt;kwargs&amp;gt;)&#39;&lt;/code&gt; to render file located in templates dir.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;To return an error code use &lt;code&gt;&#39;abort(&amp;lt;int&amp;gt;)&#39;&lt;/code&gt; and to redirect use &lt;code&gt;&#39;redirect(&amp;lt;url&amp;gt;)&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;request.args[&amp;lt;str&amp;gt;]&#39;&lt;/code&gt; returns parameter from the query string (URL part after &#39;?&#39;).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;session[key] = value&#39;&lt;/code&gt; to store session data like username, etc.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;REST Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.post(&#39;/&amp;lt;sport&amp;gt;/odds&#39;)&#xA;def serve_json(sport):&#xA;    team = flask.request.form[&#39;team&#39;]&#xA;    return {&#39;team&#39;: team, &#39;odds&#39;: [2.09, 3.74, 3.68]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Starts the app in its own thread and queries its REST API:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install requests&#xA;&amp;gt;&amp;gt;&amp;gt; import threading, requests&#xA;&amp;gt;&amp;gt;&amp;gt; threading.Thread(target=app.run, daemon=True).start()&#xA;&amp;gt;&amp;gt;&amp;gt; url = &#39;http://localhost:5000/football/odds&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; request_data = {&#39;team&#39;: &#39;arsenal f.c.&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; response = requests.post(url, data=request_data)&#xA;&amp;gt;&amp;gt;&amp;gt; response.json()&#xA;{&#39;team&#39;: &#39;arsenal f.c.&#39;, &#39;odds&#39;: [2.09, 3.74, 3.68]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from time import perf_counter&#xA;start_time = perf_counter()&#xA;...&#xA;duration_in_seconds = perf_counter() - start_time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timing a Snippet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from timeit import timeit&#xA;&amp;gt;&amp;gt;&amp;gt; timeit(&#39;list(range(10000))&#39;, number=1000, globals=globals(), setup=&#39;pass&#39;)&#xA;0.19373&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Profiling by Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pip3 install line_profiler&#xA;$ echo &#39;@profile&#xA;def main():&#xA;    a = list(range(10000))&#xA;    b = set(range(10000))&#xA;main()&#39; &amp;gt; test.py&#xA;$ kernprof -lv test.py&#xA;Line #      Hits         Time  Per Hit   % Time  Line Contents&#xA;==============================================================&#xA;     1                                           @profile&#xA;     2                                           def main():&#xA;     3         1        253.4    253.4     32.2      a = list(range(10000))&#xA;     4         1        534.1    534.1     67.8      b = set(range(10000))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Call and Flame Graphs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pip3 install gprof2dot snakeviz; apt/brew install graphviz&#xA;$ tail -n 4 test.py &amp;gt; test.py&#xA;$ python3 -m cProfile -o test.prof test.py&#xA;$ gprof2dot -f pstats test.prof | dot -T png -o test.png; xdg-open/open test.png&#xA;$ snakeviz test.prof&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sampling and Memory Profilers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+--------------+----------+------------+-------------------------------+------+&#xA;| pip3 install |   Type   |   Target   |          How to run           | Live |&#xA;+--------------+----------+------------+-------------------------------+------+&#xA;| pyinstrument | Sampling |    CPU     | pyinstrument test.py          | No   |&#xA;| py-spy       | Sampling |    CPU     | py-spy top -- python3 test.py | Yes  |&#xA;| scalene      | Sampling | CPU+Memory | scalene test.py               | No   |&#xA;| memray       | Tracing  |   Memory   | memray run --live test.py     | Yes  |&#xA;+--------------+----------+------------+-------------------------------+------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NumPy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install numpy&#xA;import numpy as np&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt; = np.array(&amp;lt;list/list_of_lists/…&amp;gt;)              # Returns a 1d/2d/… NumPy array.&#xA;&amp;lt;array&amp;gt; = np.zeros/ones/empty(&amp;lt;shape&amp;gt;)                  # Also np.full(&amp;lt;shape&amp;gt;, &amp;lt;el&amp;gt;).&#xA;&amp;lt;array&amp;gt; = np.arange(from_inc, to_exc, ±step)            # Also np.linspace(start, stop, len).&#xA;&amp;lt;array&amp;gt; = np.random.randint(from_inc, to_exc, &amp;lt;shape&amp;gt;)  # Also np.random.random(&amp;lt;shape&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;view&amp;gt;  = &amp;lt;array&amp;gt;.reshape(&amp;lt;shape&amp;gt;)                      # Also `&amp;lt;array&amp;gt;.shape = &amp;lt;shape&amp;gt;`.&#xA;&amp;lt;array&amp;gt; = &amp;lt;array&amp;gt;.flatten()                             # Also `&amp;lt;view&amp;gt; = &amp;lt;array&amp;gt;.ravel()`.&#xA;&amp;lt;view&amp;gt;  = &amp;lt;array&amp;gt;.transpose()                           # Or: &amp;lt;array&amp;gt;.T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt; = np.copy/abs/sqrt/log/int64(&amp;lt;array&amp;gt;)           # Returns new array of the same shape.&#xA;&amp;lt;array&amp;gt; = &amp;lt;array&amp;gt;.sum/max/mean/argmax/all(axis)         # Passed dimension gets aggregated.&#xA;&amp;lt;array&amp;gt; = np.apply_along_axis(&amp;lt;func&amp;gt;, axis, &amp;lt;array&amp;gt;)    # Func can return a scalar or array.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt; = np.concatenate(&amp;lt;list_of_arrays&amp;gt;, axis=0)      # Links arrays along first axis (rows).&#xA;&amp;lt;array&amp;gt; = np.row_stack/column_stack(&amp;lt;list_of_arrays&amp;gt;)   # Treats 1d arrays as rows or columns.&#xA;&amp;lt;array&amp;gt; = np.tile/repeat(&amp;lt;array&amp;gt;, &amp;lt;int/list&amp;gt;)           # Tiles array or repeats its elements.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Axis is an index of the dimension that gets aggregated. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indexing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;&amp;lt;el&amp;gt;       = &amp;lt;2d_array&amp;gt;[row_index, column_index]        # &amp;lt;3d_a&amp;gt;[table_i, row_i, column_i]&#xA;&amp;lt;1d_view&amp;gt;  = &amp;lt;2d_array&amp;gt;[row_index]                      # &amp;lt;3d_a&amp;gt;[table_i, row_i]&#xA;&amp;lt;1d_view&amp;gt;  = &amp;lt;2d_array&amp;gt;[:, column_index]                # &amp;lt;3d_a&amp;gt;[table_i, :, column_i]&#xA;&amp;lt;2d_view&amp;gt;  = &amp;lt;2d_array&amp;gt;[rows_slice, columns_slice]      # &amp;lt;3d_a&amp;gt;[table_i, rows_s, columns_s]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;&amp;lt;2d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[row_indexes]                    # &amp;lt;3d_a&amp;gt;[table_i/is, row_is]&#xA;&amp;lt;2d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[:, column_indexes]              # &amp;lt;3d_a&amp;gt;[table_i/is, :, column_is]&#xA;&amp;lt;1d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[row_indexes, column_indexes]    # &amp;lt;3d_a&amp;gt;[table_i/is, row_is, column_is]&#xA;&amp;lt;1d_array&amp;gt; = &amp;lt;2d_array&amp;gt;[row_indexes, column_index]      # &amp;lt;3d_a&amp;gt;[table_i/is, row_is, column_i]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;&amp;lt;2d_bools&amp;gt; = &amp;lt;2d_array&amp;gt; &amp;gt; &amp;lt;el/1d/2d_array&amp;gt;              # 1d_array must have size of a row.&#xA;&amp;lt;1d/2d_a&amp;gt;  = &amp;lt;2d_array&amp;gt;[&amp;lt;2d/1d_bools&amp;gt;]                  # 1d_bools must have size of a column.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Indexes should not be tuples because Python converts &lt;code&gt;&#39;obj[i, j]&#39;&lt;/code&gt; to &lt;code&gt;&#39;obj[(i, j)]&#39;&lt;/code&gt;!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;:&#39;&lt;/code&gt; returns a slice of all dimension&#39;s indexes. Omitted dimensions default to &lt;code&gt;&#39;:&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Any value that is broadcastable to the indexed shape can be assigned to the selection.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Broadcasting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)&#xA;right = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1. If array shapes differ in length, left-pad the shorter shape with ones:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)&#xA;right = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &amp;lt;- !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &amp;lt;- !&#xA;         [0.6,  0.6,  0.6],&#xA;         [0.8,  0.8,  0.8]]&#xA;&#xA;right = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &amp;lt;- !&#xA;         [0.1,  0.6,  0.8],&#xA;         [0.1,  0.6,  0.8]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;h4&gt;For each point returns index of its nearest point (&lt;code&gt;[0.1, 0.6, 0.8] =&amp;gt; [1, 2, 1]&lt;/code&gt;):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; points = np.array([0.1, 0.6, 0.8])&#xA; [ 0.1,  0.6,  0.8]&#xA;&amp;gt;&amp;gt;&amp;gt; wrapped_points = points.reshape(3, 1)&#xA;[[ 0.1],&#xA; [ 0.6],&#xA; [ 0.8]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances = wrapped_points - points&#xA;[[ 0. , -0.5, -0.7],&#xA; [ 0.5,  0. , -0.2],&#xA; [ 0.7,  0.2,  0. ]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances = np.abs(distances)&#xA;[[ 0. ,  0.5,  0.7],&#xA; [ 0.5,  0. ,  0.2],&#xA; [ 0.7,  0.2,  0. ]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances[range(3), range(3)] = np.inf&#xA;[[ inf,  0.5,  0.7],&#xA; [ 0.5,  inf,  0.2],&#xA; [ 0.7,  0.2,  inf]]&#xA;&amp;gt;&amp;gt;&amp;gt; distances.argmin(1)&#xA;[1, 2, 1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pillow&#xA;from PIL import Image, ImageFilter, ImageEnhance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Image&amp;gt; = Image.new(&#39;&amp;lt;mode&amp;gt;&#39;, (width, height))    # Also `color=&amp;lt;int/tuple/str&amp;gt;`.&#xA;&amp;lt;Image&amp;gt; = Image.open(&amp;lt;path&amp;gt;)                      # Identifies format based on file contents.&#xA;&amp;lt;Image&amp;gt; = &amp;lt;Image&amp;gt;.convert(&#39;&amp;lt;mode&amp;gt;&#39;)               # Converts image to the new mode.&#xA;&amp;lt;Image&amp;gt;.save(&amp;lt;path&amp;gt;)                              # Selects format based on the path extension.&#xA;&amp;lt;Image&amp;gt;.show()                                    # Opens image in the default preview app.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;int/tuple&amp;gt; = &amp;lt;Image&amp;gt;.getpixel((x, y))            # Returns pixel&#39;s color.&#xA;&amp;lt;Image&amp;gt;.putpixel((x, y), &amp;lt;int/tuple&amp;gt;)             # Changes pixel&#39;s color.&#xA;&amp;lt;ImagingCore&amp;gt; = &amp;lt;Image&amp;gt;.getdata()                 # Returns a flattened view of all pixels.&#xA;&amp;lt;Image&amp;gt;.putdata(&amp;lt;list/ImagingCore&amp;gt;)               # Updates pixels with a copy of the sequence.&#xA;&amp;lt;Image&amp;gt;.paste(&amp;lt;Image&amp;gt;, (x, y))                    # Draws passed image at specified location.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Image&amp;gt; = &amp;lt;Image&amp;gt;.filter(&amp;lt;Filter&amp;gt;)                # `&amp;lt;Filter&amp;gt; = ImageFilter.&amp;lt;name&amp;gt;([&amp;lt;args&amp;gt;])`&#xA;&amp;lt;Image&amp;gt; = &amp;lt;Enhance&amp;gt;.enhance(&amp;lt;float&amp;gt;)              # `&amp;lt;Enhance&amp;gt; = ImageEnhance.&amp;lt;name&amp;gt;(&amp;lt;Image&amp;gt;)`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;array&amp;gt; = np.array(&amp;lt;Image&amp;gt;)                       # Creates a NumPy array from the image.&#xA;&amp;lt;Image&amp;gt; = Image.fromarray(np.uint8(&amp;lt;array&amp;gt;))      # Use &amp;lt;array&amp;gt;.clip(0, 255) to clip values.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;L&#39;&lt;/code&gt; - 8-bit pixels, greyscale.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;RGB&#39;&lt;/code&gt; - 3x8-bit pixels, true color.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;RGBA&#39;&lt;/code&gt; - 4x8-bit pixels, true color with transparency mask.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#39;HSV&#39;&lt;/code&gt; - 3x8-bit pixels, Hue, Saturation, Value color space.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Creates a PNG image of a rainbow gradient:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;WIDTH, HEIGHT = 100, 100&#xA;n_pixels = WIDTH * HEIGHT&#xA;hues = (255 * i/n_pixels for i in range(n_pixels))&#xA;img = Image.new(&#39;HSV&#39;, (WIDTH, HEIGHT))&#xA;img.putdata([(int(h), 255, 255) for h in hues])&#xA;img.convert(&#39;RGB&#39;).save(&#39;test.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adds noise to the PNG image and displays it:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import randint&#xA;add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))&#xA;img = Image.open(&#39;test.png&#39;).convert(&#39;HSV&#39;)&#xA;img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])&#xA;img.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image Draw&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import ImageDraw, ImageFont&#xA;&amp;lt;ImageDraw&amp;gt; = ImageDraw.Draw(&amp;lt;Image&amp;gt;)             # Object for adding 2D graphics to the image.&#xA;&amp;lt;ImageDraw&amp;gt;.point((x, y))                         # Draws a point. Truncates floats into ints.&#xA;&amp;lt;ImageDraw&amp;gt;.line((x1, y1, x2, y2 [, ...]))        # To get anti-aliasing use Image&#39;s resize().&#xA;&amp;lt;ImageDraw&amp;gt;.arc((x1, y1, x2, y2), deg1, deg2)     # Always draws in clockwise direction.&#xA;&amp;lt;ImageDraw&amp;gt;.rectangle((x1, y1, x2, y2))           # To rotate use Image&#39;s rotate() and paste().&#xA;&amp;lt;ImageDraw&amp;gt;.polygon((x1, y1, x2, y2, ...))        # Last point gets connected to the first.&#xA;&amp;lt;ImageDraw&amp;gt;.ellipse((x1, y1, x2, y2))             # To rotate use Image&#39;s rotate() and paste().&#xA;&amp;lt;ImageDraw&amp;gt;.text((x, y), text, font=&amp;lt;Font&amp;gt;)       # `&amp;lt;Font&amp;gt; = ImageFont.truetype(&amp;lt;path&amp;gt;, size)`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;fill=&amp;lt;color&amp;gt;&#39;&lt;/code&gt; to set the primary color.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;width=&amp;lt;int&amp;gt;&#39;&lt;/code&gt; to set the width of lines or contours.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;outline=&amp;lt;color&amp;gt;&#39;&lt;/code&gt; to set the color of the contours.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Color can be an int, tuple, &lt;code&gt;&#39;#rrggbb[aa]&#39;&lt;/code&gt; string or a color name.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Animation&lt;/h2&gt; &#xA;&lt;h4&gt;Creates a GIF of a bouncing ball:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install imageio&#xA;from PIL import Image, ImageDraw&#xA;import imageio&#xA;&#xA;WIDTH, HEIGHT, R = 126, 126, 10&#xA;frames = []&#xA;for velocity in range(1, 16):&#xA;    y = sum(range(velocity))&#xA;    frame = Image.new(&#39;L&#39;, (WIDTH, HEIGHT))&#xA;    draw = ImageDraw.Draw(frame)&#xA;    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill=&#39;white&#39;)&#xA;    frames.append(frame)&#xA;frames += reversed(frames[1:-1])&#xA;imageio.mimsave(&#39;test.gif&#39;, frames, duration=0.03)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Audio&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import wave&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Wave_read&amp;gt;  = wave.open(&#39;&amp;lt;path&amp;gt;&#39;, &#39;rb&#39;)        # Opens the WAV file.&#xA;framerate    = &amp;lt;Wave_read&amp;gt;.getframerate()       # Number of frames per second.&#xA;nchannels    = &amp;lt;Wave_read&amp;gt;.getnchannels()       # Number of samples per frame.&#xA;sampwidth    = &amp;lt;Wave_read&amp;gt;.getsampwidth()       # Sample size in bytes.&#xA;nframes      = &amp;lt;Wave_read&amp;gt;.getnframes()         # Number of frames.&#xA;&amp;lt;params&amp;gt;     = &amp;lt;Wave_read&amp;gt;.getparams()          # Immutable collection of above.&#xA;&amp;lt;bytes&amp;gt;      = &amp;lt;Wave_read&amp;gt;.readframes(nframes)  # Returns next &#39;nframes&#39; frames.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Wave_write&amp;gt; = wave.open(&#39;&amp;lt;path&amp;gt;&#39;, &#39;wb&#39;)        # Truncates existing file.&#xA;&amp;lt;Wave_write&amp;gt;.setframerate(&amp;lt;int&amp;gt;)                # 44100 for CD, 48000 for video.&#xA;&amp;lt;Wave_write&amp;gt;.setnchannels(&amp;lt;int&amp;gt;)                # 1 for mono, 2 for stereo.&#xA;&amp;lt;Wave_write&amp;gt;.setsampwidth(&amp;lt;int&amp;gt;)                # 2 for CD quality sound.&#xA;&amp;lt;Wave_write&amp;gt;.setparams(&amp;lt;params&amp;gt;)                # Sets all parameters.&#xA;&amp;lt;Wave_write&amp;gt;.writeframes(&amp;lt;bytes&amp;gt;)               # Appends frames to the file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bytes object contains a sequence of frames, each consisting of one or more samples.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;In a stereo signal, the first sample of a frame belongs to the left channel.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If sample width is one byte, then the integer should be encoded unsigned.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For all other sizes, the integer should be encoded signed with little-endian byte order.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sample Values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------+-----------+------+-----------+&#xA;| sampwidth |    min    | zero |    max    |&#xA;+-----------+-----------+------+-----------+&#xA;|     1     |         0 |  128 |       255 |&#xA;|     2     |    -32768 |    0 |     32767 |&#xA;|     3     |  -8388608 |    0 |   8388607 |&#xA;+-----------+-----------+------+-----------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Float Samples from WAV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_wav_file(filename):&#xA;    def get_int(bytes_obj):&#xA;        an_int = int.from_bytes(bytes_obj, &#39;little&#39;, signed=(sampwidth != 1))&#xA;        return an_int - 128 * (sampwidth == 1)&#xA;    with wave.open(filename, &#39;rb&#39;) as file:&#xA;        sampwidth = file.getsampwidth()&#xA;        frames = file.readframes(-1)&#xA;    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))&#xA;    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Float Samples to WAV File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):&#xA;    def get_bytes(a_float):&#xA;        a_float = max(-1, min(1 - 2e-16, a_float))&#xA;        a_float += sampwidth == 1&#xA;        a_float *= pow(2, sampwidth * 8 - 1)&#xA;        return int(a_float).to_bytes(sampwidth, &#39;little&#39;, signed=(sampwidth != 1))&#xA;    with wave.open(filename, &#39;wb&#39;) as file:&#xA;        file.setnchannels(nchannels)&#xA;        file.setsampwidth(sampwidth)&#xA;        file.setframerate(framerate)&#xA;        file.writeframes(b&#39;&#39;.join(get_bytes(f) for f in float_samples))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Saves a 440 Hz sine wave to a mono WAV file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import pi, sin&#xA;samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100_000))&#xA;write_to_wav_file(&#39;test.wav&#39;, samples_f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adds noise to the mono WAV file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import random&#xA;add_noise = lambda value: value + (random() - 0.5) * 0.03&#xA;samples_f = (add_noise(f) for f in read_wav_file(&#39;test.wav&#39;))&#xA;write_to_wav_file(&#39;test.wav&#39;, samples_f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Plays the WAV file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install simpleaudio&#xA;from simpleaudio import play_buffer&#xA;with wave.open(&#39;test.wav&#39;, &#39;rb&#39;) as file:&#xA;    p = file.getparams()&#xA;    frames = file.readframes(-1)&#xA;    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate).wait_done()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text to Speech&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pyttsx3&#xA;import pyttsx3&#xA;engine = pyttsx3.init()&#xA;engine.say(&#39;Sally sells seashells by the seashore.&#39;)&#xA;engine.runAndWait()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Synthesizer&lt;/h2&gt; &#xA;&lt;h4&gt;Plays Popcorn by Gershon Kingsley:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install simpleaudio&#xA;import array, itertools as it, math, simpleaudio&#xA;&#xA;F  = 44100&#xA;P1 = &#39;71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,&#39;&#xA;P2 = &#39;71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,&#39;&#xA;get_pause   = lambda seconds: it.repeat(0, int(seconds * F))&#xA;sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)&#xA;get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))&#xA;get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)&#xA;parse_note  = lambda note: (get_hz(note[:2]), 1/4 if &#39;♩&#39; in note else 1/8)&#xA;get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)&#xA;samples_f   = it.chain.from_iterable(get_samples(n) for n in f&#39;{P1},{P1},{P2}&#39;.split(&#39;,&#39;))&#xA;samples_i   = array.array(&#39;h&#39;, (int(f * 30000) for f in samples_f))&#xA;simpleaudio.play_buffer(samples_i, 1, 2, F).wait_done()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pygame&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pygame&#xA;import pygame as pg&#xA;&#xA;pg.init()&#xA;screen = pg.display.set_mode((500, 500))&#xA;rect = pg.Rect(240, 240, 20, 20)&#xA;while not pg.event.get(pg.QUIT):&#xA;    deltas = {pg.K_UP: (0, -20), pg.K_RIGHT: (20, 0), pg.K_DOWN: (0, 20), pg.K_LEFT: (-20, 0)}&#xA;    for event in pg.event.get(pg.KEYDOWN):&#xA;        dx, dy = deltas.get(event.key, (0, 0))&#xA;        rect = rect.move((dx, dy))&#xA;    screen.fill((0, 0, 0))&#xA;    pg.draw.rect(screen, (255, 255, 255), rect)&#xA;    pg.display.flip()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rectangle&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object for storing rectangular coordinates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Rect&amp;gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;Rect&amp;gt;.x/y/centerx/centery/…           # Top, right, bottom, left. Allows assignments.&#xA;&amp;lt;tup.&amp;gt; = &amp;lt;Rect&amp;gt;.topleft/center/…                # Topright, bottomright, bottomleft. Same.&#xA;&amp;lt;Rect&amp;gt; = &amp;lt;Rect&amp;gt;.move((delta_x, delta_y))        # Use move_ip() to move in-place.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;bool&amp;gt; = &amp;lt;Rect&amp;gt;.collidepoint((x, y))            # Checks if rectangle contains the point.&#xA;&amp;lt;bool&amp;gt; = &amp;lt;Rect&amp;gt;.colliderect(&amp;lt;Rect&amp;gt;)             # Checks if two rectangles overlap.&#xA;&amp;lt;int&amp;gt;  = &amp;lt;Rect&amp;gt;.collidelist(&amp;lt;list_of_Rect&amp;gt;)     # Returns index of first colliding Rect or -1.&#xA;&amp;lt;list&amp;gt; = &amp;lt;Rect&amp;gt;.collidelistall(&amp;lt;list_of_Rect&amp;gt;)  # Returns indexes of all colliding rectangles.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Surface&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object for representing images.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Surf&amp;gt; = pg.display.set_mode((width, height))   # Opens new window and returns its surface.&#xA;&amp;lt;Surf&amp;gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.&#xA;&amp;lt;Surf&amp;gt; = pg.image.load(&amp;lt;path/file&amp;gt;)             # Loads the image. Format depends on source.&#xA;&amp;lt;Surf&amp;gt; = pg.surfarray.make_surface(&amp;lt;np_array&amp;gt;)  # Also `&amp;lt;np_arr&amp;gt; = surfarray.pixels3d(&amp;lt;Surf&amp;gt;)`.&#xA;&amp;lt;Surf&amp;gt; = &amp;lt;Surf&amp;gt;.subsurface(&amp;lt;Rect&amp;gt;)              # Creates a new surface from the cutout.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Surf&amp;gt;.fill(color)                              # Tuple, Color(&#39;#rrggbb[aa]&#39;) or Color(&amp;lt;name&amp;gt;).&#xA;&amp;lt;Surf&amp;gt;.set_at((x, y), color)                    # Updates pixel. Also &amp;lt;Surf&amp;gt;.get_at((x, y)).&#xA;&amp;lt;Surf&amp;gt;.blit(&amp;lt;Surf&amp;gt;, (x, y))                     # Draws passed surface to the surface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pygame.transform import scale, ...&#xA;&amp;lt;Surf&amp;gt; = scale(&amp;lt;Surf&amp;gt;, (width, height))         # Returns scaled surface.&#xA;&amp;lt;Surf&amp;gt; = rotate(&amp;lt;Surf&amp;gt;, anticlock_degrees)      # Returns rotated and scaled surface.&#xA;&amp;lt;Surf&amp;gt; = flip(&amp;lt;Surf&amp;gt;, x_bool, y_bool)           # Returns flipped surface.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pygame.draw import line, ...&#xA;line(&amp;lt;Surf&amp;gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.&#xA;arc(&amp;lt;Surf&amp;gt;, color, &amp;lt;Rect&amp;gt;, from_rad, to_rad)    # Also ellipse(&amp;lt;Surf&amp;gt;, color, &amp;lt;Rect&amp;gt;, width=0).&#xA;rect(&amp;lt;Surf&amp;gt;, color, &amp;lt;Rect&amp;gt;, width=0)            # Also polygon(&amp;lt;Surf&amp;gt;, color, points, width=0).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Font&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Font&amp;gt; = pg.font.Font(&amp;lt;path/file&amp;gt;, size)        # Loads TTF file. Pass None for default font.&#xA;&amp;lt;Surf&amp;gt; = &amp;lt;Font&amp;gt;.render(text, antialias, color)  # Background color can be specified at the end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sound&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sound&amp;gt; = pg.mixer.Sound(&amp;lt;path/file/bytes&amp;gt;)     # WAV file or bytes/array of signed shorts.&#xA;&amp;lt;Sound&amp;gt;.play/stop()                             # Also &amp;lt;Sound&amp;gt;.set_volume(&amp;lt;float&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Mario Brothers Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request&#xA;from random import randint&#xA;&#xA;P = collections.namedtuple(&#39;P&#39;, &#39;x y&#39;)          # Position&#xA;D = enum.Enum(&#39;D&#39;, &#39;n e s w&#39;)                   # Direction&#xA;W, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed&#xA;&#xA;def main():&#xA;    def get_screen():&#xA;        pg.init()&#xA;        return pg.display.set_mode((W*16, H*16))&#xA;    def get_images():&#xA;        url = &#39;https://gto76.github.io/python-cheatsheet/web/mario_bros.png&#39;&#xA;        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))&#xA;        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]&#xA;    def get_mario():&#xA;        Mario = dataclasses.make_dataclass(&#39;Mario&#39;, &#39;rect spd facing_left frame_cycle&#39;.split())&#xA;        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))&#xA;    def get_tiles():&#xA;        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]&#xA;        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]&#xA;        return [get_rect(x, y) for x, y in border + platforms]&#xA;    def get_rect(x, y):&#xA;        return pg.Rect(x*16, y*16, 16, 16)&#xA;    run(get_screen(), get_images(), get_mario(), get_tiles())&#xA;&#xA;def run(screen, images, mario, tiles):&#xA;    clock = pg.time.Clock()&#xA;    pressed = set()&#xA;    while not pg.event.get(pg.QUIT) and clock.tick(28):&#xA;        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}&#xA;        pressed |= {keys.get(e.key) for e in pg.event.get(pg.KEYDOWN)}&#xA;        pressed -= {keys.get(e.key) for e in pg.event.get(pg.KEYUP)}&#xA;        update_speed(mario, tiles, pressed)&#xA;        update_position(mario, tiles)&#xA;        draw(screen, images, mario, tiles, pressed)&#xA;&#xA;def update_speed(mario, tiles, pressed):&#xA;    x, y = mario.spd&#xA;    x += 2 * ((D.e in pressed) - (D.w in pressed))&#xA;    x += (x &amp;lt; 0) - (x &amp;gt; 0)&#xA;    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10&#xA;    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))&#xA;&#xA;def update_position(mario, tiles):&#xA;    x, y = mario.rect.topleft&#xA;    n_steps = max(abs(s) for s in mario.spd)&#xA;    for _ in range(n_steps):&#xA;        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))&#xA;        mario.rect.topleft = x, y = x + (mario.spd.x / n_steps), y + (mario.spd.y / n_steps)&#xA;&#xA;def get_boundaries(rect, tiles):&#xA;    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}&#xA;    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}&#xA;&#xA;def stop_on_collision(spd, bounds):&#xA;    return P(x=0 if (D.w in bounds and spd.x &amp;lt; 0) or (D.e in bounds and spd.x &amp;gt; 0) else spd.x,&#xA;             y=0 if (D.n in bounds and spd.y &amp;lt; 0) or (D.s in bounds and spd.y &amp;gt; 0) else spd.y)&#xA;&#xA;def draw(screen, images, mario, tiles, pressed):&#xA;    def get_marios_image_index():&#xA;        if D.s not in get_boundaries(mario.rect, tiles):&#xA;            return 4&#xA;        return next(mario.frame_cycle) if {D.w, D.e} &amp;amp; pressed else 6&#xA;    screen.fill((85, 168, 255))&#xA;    mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp;amp; pressed else mario.facing_left&#xA;    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)&#xA;    for t in tiles:&#xA;        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)&#xA;    pg.display.flip()&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pandas&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pandas matplotlib&#xA;import pandas as pd, matplotlib.pyplot as plt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Series&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ordered dictionary with a name.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; pd.Series([1, 2], index=[&#39;x&#39;, &#39;y&#39;], name=&#39;a&#39;)&#xA;x    1&#xA;y    2&#xA;Name: a, dtype: int64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = pd.Series(&amp;lt;list&amp;gt;)                       # Assigns RangeIndex starting at 0.&#xA;&amp;lt;Sr&amp;gt; = pd.Series(&amp;lt;dict&amp;gt;)                       # Takes dictionary&#39;s keys for index.&#xA;&amp;lt;Sr&amp;gt; = pd.Series(&amp;lt;dict/Series&amp;gt;, index=&amp;lt;list&amp;gt;)  # Only keeps items with keys specified in index.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;Sr&amp;gt;.loc[key]                           # Or: &amp;lt;Sr&amp;gt;.iloc[index]&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.loc[keys]                          # Or: &amp;lt;Sr&amp;gt;.iloc[indexes]&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.loc[from_key : to_key_inclusive]   # Or: &amp;lt;Sr&amp;gt;.iloc[from_i : to_i_exclusive]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;Sr&amp;gt;[key/index]                         # Or: &amp;lt;Sr&amp;gt;.key&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;[keys/indexes]                      # Or: &amp;lt;Sr&amp;gt;[&amp;lt;keys_slice/slice&amp;gt;]&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;[bools]                             # Or: &amp;lt;Sr&amp;gt;.loc/iloc[bools]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt; &amp;gt; &amp;lt;el/Sr&amp;gt;                          # Returns a Series of bools.&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt; + &amp;lt;el/Sr&amp;gt;                          # Items with non-matching keys get value NaN.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = pd.concat(&amp;lt;coll_of_Sr&amp;gt;)                 # Concats multiple series into one long Series.&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.combine_first(&amp;lt;Sr&amp;gt;)                # Adds items that are not yet present.&#xA;&amp;lt;Sr&amp;gt;.update(&amp;lt;Sr&amp;gt;)                              # Updates items that are already present.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.&#xA;plt.show()                                     # Displays the plot. Also plt.savefig(&amp;lt;path&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Series — Aggregate, Transform, Map:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt; = &amp;lt;Sr&amp;gt;.sum/max/mean/idxmax/all()          # Or: &amp;lt;Sr&amp;gt;.agg(lambda &amp;lt;Sr&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.rank/diff/cumsum/ffill/interpl()   # Or: &amp;lt;Sr&amp;gt;.agg/transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;Sr&amp;gt;.fillna(&amp;lt;el&amp;gt;)                       # Or: &amp;lt;Sr&amp;gt;.agg/transform/map(lambda &amp;lt;el&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sr = pd.Series([2, 3], index=[&#39;x&#39;, &#39;y&#39;])&#xA;x    2&#xA;y    3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+---------------+-------------+-------------+---------------+&#xA;|               |    &#39;sum&#39;    |   [&#39;sum&#39;]   | {&#39;s&#39;: &#39;sum&#39;}  |&#xA;+---------------+-------------+-------------+---------------+&#xA;| sr.apply(…)   |      5      |    sum  5   |     s  5      |&#xA;| sr.agg(…)     |             |             |               |&#xA;+---------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+---------------+-------------+-------------+---------------+&#xA;|               |    &#39;rank&#39;   |   [&#39;rank&#39;]  | {&#39;r&#39;: &#39;rank&#39;} |&#xA;+---------------+-------------+-------------+---------------+&#xA;| sr.apply(…)   |             |      rank   |               |&#xA;| sr.agg(…)     |     x  1    |   x     1   |    r  x  1    |&#xA;|               |     y  2    |   y     2   |       y  2    |&#xA;+---------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keys/indexes/bools can&#39;t be tuples because &lt;code&gt;&#39;obj[x, y]&#39;&lt;/code&gt; is converted to &lt;code&gt;&#39;obj[(x, y)]&#39;&lt;/code&gt;!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Methods ffill(), interpolate(), fillna() and dropna() accept &lt;code&gt;&#39;inplace=True&#39;&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Last result has a hierarchical index. Use &lt;code&gt;&#39;&amp;lt;Sr&amp;gt;[key_1, key_2]&#39;&lt;/code&gt; to get its values.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DataFrame&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table with labeled rows and columns.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; pd.DataFrame([[1, 2], [3, 4]], index=[&#39;a&#39;, &#39;b&#39;], columns=[&#39;x&#39;, &#39;y&#39;])&#xA;   x  y&#xA;a  1  2&#xA;b  3  4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;    = pd.DataFrame(&amp;lt;list_of_rows&amp;gt;)         # Rows can be either lists, dicts or series.&#xA;&amp;lt;DF&amp;gt;    = pd.DataFrame(&amp;lt;dict_of_columns&amp;gt;)      # Columns can be either lists, dicts or series.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;el&amp;gt;    = &amp;lt;DF&amp;gt;.loc[row_key, column_key]        # Or: &amp;lt;DF&amp;gt;.iloc[row_index, column_index]&#xA;&amp;lt;Sr/DF&amp;gt; = &amp;lt;DF&amp;gt;.loc[row_key/s]                  # Or: &amp;lt;DF&amp;gt;.iloc[row_index/es]&#xA;&amp;lt;Sr/DF&amp;gt; = &amp;lt;DF&amp;gt;.loc[:, column_key/s]            # Or: &amp;lt;DF&amp;gt;.iloc[:, column_index/es]&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.loc[row_bools, column_bools]    # Or: &amp;lt;DF&amp;gt;.iloc[row_bools, column_bools]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr/DF&amp;gt; = &amp;lt;DF&amp;gt;[column_key/s]                   # Or: &amp;lt;DF&amp;gt;.column_key&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;[row_bools]                      # Keeps rows as specified by bools.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;[&amp;lt;DF_of_bools&amp;gt;]                  # Assigns NaN to items that are False in bools.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt; &amp;gt; &amp;lt;el/Sr/DF&amp;gt;                    # Returns DF of bools. Sr is treated as a row.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt; + &amp;lt;el/Sr/DF&amp;gt;                    # Items with non-matching keys get value NaN.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.set_index(column_key)           # Replaces row keys with values from the column.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.reset_index(drop=False)         # Drops or moves row keys to column named index.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.sort_index(ascending=True)      # Sorts rows by row keys. Use `axis=1` for cols.&#xA;&amp;lt;DF&amp;gt;    = &amp;lt;DF&amp;gt;.sort_values(column_key/s)       # Sorts rows by passed column/s. Also `axis=1`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DataFrame — Merge, Join, Concat:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; l = pd.DataFrame([[1, 2], [3, 4]], index=[&#39;a&#39;, &#39;b&#39;], columns=[&#39;x&#39;, &#39;y&#39;])&#xA;   x  y&#xA;a  1  2&#xA;b  3  4&#xA;&amp;gt;&amp;gt;&amp;gt; r = pd.DataFrame([[4, 5], [6, 7]], index=[&#39;b&#39;, &#39;c&#39;], columns=[&#39;y&#39;, &#39;z&#39;])&#xA;   y  z&#xA;b  4  5&#xA;c  6  7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------------+---------------+------------+------------+--------------------------+&#xA;|                        |    &#39;outer&#39;    |   &#39;inner&#39;  |   &#39;left&#39;   |       Description        |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| l.merge(r, on=&#39;y&#39;,     |    x   y   z  | x   y   z  | x   y   z  | Merges on column if &#39;on&#39; |&#xA;|            how=…)      | 0  1   2   .  | 3   4   5  | 1   2   .  | or &#39;left/right_on&#39; are   |&#xA;|                        | 1  3   4   5  |            | 3   4   5  | set, else on shared cols.|&#xA;|                        | 2  .   6   7  |            |            | Uses &#39;inner&#39; by default. |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| l.join(r, lsuffix=&#39;l&#39;, |    x yl yr  z |            | x yl yr  z | Merges on row keys.      |&#xA;|           rsuffix=&#39;r&#39;, | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses &#39;left&#39; by default.  |&#xA;|           how=…)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |&#xA;|                        | c  .  .  6  7 |            |            | treated as a column.     |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |&#xA;|           axis=0,      | a  1   2   .  |     2      |            | Uses &#39;outer&#39; by default. |&#xA;|           join=…)      | b  3   4   .  |     4      |            | A Series is treated as a |&#xA;|                        | b  .   4   5  |     4      |            | column. To add a row use |&#xA;|                        | c  .   6   7  |     6      |            | pd.concat([l, DF([sr])]).|&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |&#xA;|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses &#39;outer&#39;  |&#xA;|           join=…)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |&#xA;|                        | c  .  .  6  7 |            |            | treated as a column.     |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |&#xA;|                        | a  1   2   .  |            |            | columns. Also updates    |&#xA;|                        | b  3   4   5  |            |            | items that contain NaN.  |&#xA;|                        | c  .   6   7  |            |            | Argument r must be a DF. |&#xA;+------------------------+---------------+------------+------------+--------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DataFrame — Aggregate, Transform, Map:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;Sr&amp;gt; = &amp;lt;DF&amp;gt;.sum/max/mean/idxmax/all()          # Or: &amp;lt;DF&amp;gt;.apply/agg(lambda &amp;lt;Sr&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;DF&amp;gt;.rank/diff/cumsum/ffill/interpl()   # Or: &amp;lt;DF&amp;gt;.apply/agg/transfrm(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;DF&amp;gt;.fillna(&amp;lt;el&amp;gt;)                       # Or: &amp;lt;DF&amp;gt;.applymap(lambda &amp;lt;el&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All operations operate on columns by default. Pass &lt;code&gt;&#39;axis=1&#39;&lt;/code&gt; to process the rows instead.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([[1, 2], [3, 4]], index=[&#39;a&#39;, &#39;b&#39;], columns=[&#39;x&#39;, &#39;y&#39;])&#xA;   x  y&#xA;a  1  2&#xA;b  3  4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------------+-------------+-------------+---------------+&#xA;|                 |    &#39;sum&#39;    |   [&#39;sum&#39;]   | {&#39;x&#39;: &#39;sum&#39;}  |&#xA;+-----------------+-------------+-------------+---------------+&#xA;| df.apply(…)     |     x  4    |       x  y  |     x  4      |&#xA;| df.agg(…)       |     y  6    |  sum  4  6  |               |&#xA;+-----------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------------+-------------+-------------+---------------+&#xA;|                 |    &#39;rank&#39;   |   [&#39;rank&#39;]  | {&#39;x&#39;: &#39;rank&#39;} |&#xA;+-----------------+-------------+-------------+---------------+&#xA;| df.apply(…)     |             |      x    y |               |&#xA;| df.agg(…)       |      x  y   |   rank rank |        x      |&#xA;| df.transform(…) |   a  1  1   | a    1    1 |     a  1      |&#xA;|                 |   b  2  2   | b    2    2 |     b  2      |&#xA;+-----------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;&#39;&amp;lt;DF&amp;gt;[col_key_1, col_key_2][row_key]&#39;&lt;/code&gt; to get the fifth result&#39;s values.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DataFrame — Plot, Encode, Decode:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt;.plot.line/area/bar/hist/scatter/box()     # Also: `x=column_key, y=column_key/s`.&#xA;plt.show()                                     # Displays the plot. Also plt.savefig(&amp;lt;path&amp;gt;).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt; = pd.read_json/html(&#39;&amp;lt;str/path/url&amp;gt;&#39;)     # Run `$ pip3 install beautifulsoup4 lxml`.&#xA;&amp;lt;DF&amp;gt; = pd.read_csv(&#39;&amp;lt;path/url&amp;gt;&#39;)               # Also `names=&amp;lt;list&amp;gt;, parse_dates=False`.&#xA;&amp;lt;DF&amp;gt; = pd.read_pickle/excel(&#39;&amp;lt;path/url&amp;gt;&#39;)      # Use `sheet_name=None` to get all Excel sheets.&#xA;&amp;lt;DF&amp;gt; = pd.read_sql(&#39;&amp;lt;table/query&amp;gt;&#39;, &amp;lt;conn.&amp;gt;)   # SQLite3/SQLAlchemy connection (see #SQLite).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;dict&amp;gt; = &amp;lt;DF&amp;gt;.to_dict([&#39;d/l/s/…&#39;])             # Returns columns as dicts, lists or series.&#xA;&amp;lt;str&amp;gt;  = &amp;lt;DF&amp;gt;.to_json/html/csv([&amp;lt;path&amp;gt;])       # Also to_markdown/latex([&amp;lt;path&amp;gt;]).&#xA;&amp;lt;DF&amp;gt;.to_pickle/excel(&amp;lt;path&amp;gt;)                   # Run `$ pip3 install &#34;pandas[excel]&#34; odfpy`.&#xA;&amp;lt;DF&amp;gt;.to_sql(&#39;&amp;lt;table_name&amp;gt;&#39;, &amp;lt;connection&amp;gt;)      # Also `if_exists=&#39;fail/replace/append&#39;`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GroupBy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object that groups together rows of a dataframe based on the value of the passed column.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], list(&#39;abc&#39;), list(&#39;xyz&#39;))&#xA;&amp;gt;&amp;gt;&amp;gt; df.groupby(&#39;z&#39;).get_group(6)&#xA;   x  y  z&#xA;b  4  5  6&#xA;c  7  8  6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;GB&amp;gt; = &amp;lt;DF&amp;gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.&#xA;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.apply(&amp;lt;func&amp;gt;)                      # Maps each group. Func can return DF, Sr or el.&#xA;&amp;lt;GB&amp;gt; = &amp;lt;GB&amp;gt;[column_key]                        # Single column GB. All operations return a Sr.&#xA;&amp;lt;Sr&amp;gt; = &amp;lt;GB&amp;gt;.size()                             # A Sr of group sizes. Keys are group &#34;names&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GroupBy — Aggregate, Transform, Map:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.sum/max/mean/idxmax/all()          # Or: &amp;lt;GB&amp;gt;.agg(lambda &amp;lt;Sr&amp;gt;: &amp;lt;el&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.rank/diff/cumsum/ffill()           # Or: &amp;lt;GB&amp;gt;.transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&amp;lt;DF&amp;gt; = &amp;lt;GB&amp;gt;.fillna(&amp;lt;el&amp;gt;)                       # Or: &amp;lt;GB&amp;gt;.transform(lambda &amp;lt;Sr&amp;gt;: &amp;lt;Sr&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; gb = df.groupby(&#39;z&#39;); gb.apply(print)&#xA;   x  y  z&#xA;a  1  2  3&#xA;   x  y  z&#xA;b  4  5  6&#xA;c  7  8  6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-----------------+-------------+-------------+-------------+---------------+&#xA;|                 |    &#39;sum&#39;    |    &#39;rank&#39;   |   [&#39;rank&#39;]  | {&#39;x&#39;: &#39;rank&#39;} |&#xA;+-----------------+-------------+-------------+-------------+---------------+&#xA;| gb.agg(…)       |      x   y  |             |      x    y |               |&#xA;|                 |  z          |      x  y   |   rank rank |        x      |&#xA;|                 |  3   1   2  |   a  1  1   | a    1    1 |     a  1      |&#xA;|                 |  6  11  13  |   b  1  1   | b    1    1 |     b  1      |&#xA;|                 |             |   c  2  2   | c    2    2 |     c  2      |&#xA;+-----------------+-------------+-------------+-------------+---------------+&#xA;| gb.transform(…) |      x   y  |      x  y   |             |               |&#xA;|                 |  a   1   2  |   a  1  1   |             |               |&#xA;|                 |  b  11  13  |   b  1  1   |             |               |&#xA;|                 |  c  11  13  |   c  2  2   |             |               |&#xA;+-----------------+-------------+-------------+-------------+---------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rolling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Object for rolling window calculations.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;RSr/RDF/RGB&amp;gt; = &amp;lt;Sr/DF/GB&amp;gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.&#xA;&amp;lt;RSr/RDF/RGB&amp;gt; = &amp;lt;RDF/RGB&amp;gt;[column_key/s]        # Or: &amp;lt;RDF/RGB&amp;gt;.column_key&#xA;&amp;lt;Sr/DF&amp;gt;       = &amp;lt;R&amp;gt;.mean/sum/max()             # Or: &amp;lt;R&amp;gt;.apply/agg(&amp;lt;agg_func/str&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plotly&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install pandas plotly kaleido&#xA;import pandas as pd, plotly.express as ex&#xA;&amp;lt;Figure&amp;gt; = ex.line(&amp;lt;DF&amp;gt;, x=&amp;lt;col_name&amp;gt;, y=&amp;lt;col_name&amp;gt;)        # Or: ex.line(x=&amp;lt;list&amp;gt;, y=&amp;lt;list&amp;gt;)&#xA;&amp;lt;Figure&amp;gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0), …)  # `paper_bgcolor=&#39;rgb(0, 0, 0)&#39;`.&#xA;&amp;lt;Figure&amp;gt;.write_html/json/image(&#39;&amp;lt;path&amp;gt;&#39;)                    # Also &amp;lt;Figure&amp;gt;.show().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Displays a line chart of total coronavirus deaths per million grouped by continent:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/web/covid_deaths.png&#34; alt=&#34;Covid Deaths&#34;&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;2a950764-39fc-416d-97fe-0a6226a3095f&#34; class=&#34;plotly-graph-div&#34; style=&#34;height:312px; width:914px;&#34;&gt;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;covid = pd.read_csv(&#39;https://covid.ourworldindata.org/data/owid-covid-data.csv&#39;,&#xA;                    usecols=[&#39;iso_code&#39;, &#39;date&#39;, &#39;total_deaths&#39;, &#39;population&#39;])&#xA;continents = pd.read_csv(&#39;https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff&#39;&#xA;                         &#39;846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv&#39;,&#xA;                         usecols=[&#39;Three_Letter_Country_Code&#39;, &#39;Continent_Name&#39;])&#xA;df = pd.merge(covid, continents, left_on=&#39;iso_code&#39;, right_on=&#39;Three_Letter_Country_Code&#39;)&#xA;df = df.groupby([&#39;Continent_Name&#39;, &#39;date&#39;]).sum().reset_index()&#xA;df[&#39;Total Deaths per Million&#39;] = df.total_deaths * 1e6 / df.population&#xA;df = df[df.date &amp;gt; &#39;2020-03-14&#39;]&#xA;df = df.rename({&#39;date&#39;: &#39;Date&#39;, &#39;Continent_Name&#39;: &#39;Continent&#39;}, axis=&#39;columns&#39;)&#xA;ex.line(df, x=&#39;Date&#39;, y=&#39;Total Deaths per Million&#39;, color=&#39;Continent&#39;).show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Displays a multi-axis line chart of total coronavirus cases and changes in prices of Bitcoin, Dow Jones and gold:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gto76/python-cheatsheet/main/web/covid_cases.png&#34; alt=&#34;Covid Cases&#34;&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;e23ccacc-a456-478b-b467-7282a2165921&#34; class=&#34;plotly-graph-div&#34; style=&#34;height:287px; width:935px;&#34;&gt;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd, plotly.graph_objects as go&#xA;&#xA;def main():&#xA;    covid, bitcoin, gold, dow = scrape_data()&#xA;    display_data(wrangle_data(covid, bitcoin, gold, dow))&#xA;&#xA;def scrape_data():&#xA;    def get_covid_cases():&#xA;        url = &#39;https://covid.ourworldindata.org/data/owid-covid-data.csv&#39;&#xA;        df = pd.read_csv(url, usecols=[&#39;location&#39;, &#39;date&#39;, &#39;total_cases&#39;])&#xA;        return df[df.location == &#39;World&#39;].set_index(&#39;date&#39;).total_cases&#xA;    def get_ticker(symbol):&#xA;        url = (f&#39;https://query1.finance.yahoo.com/v7/finance/download/{symbol}?&#39;&#xA;               &#39;period1=1579651200&amp;amp;period2=9999999999&amp;amp;interval=1d&amp;amp;events=history&#39;)&#xA;        df = pd.read_csv(url, usecols=[&#39;Date&#39;, &#39;Close&#39;])&#xA;        return df.set_index(&#39;Date&#39;).Close&#xA;    out = get_covid_cases(), get_ticker(&#39;BTC-USD&#39;), get_ticker(&#39;GC=F&#39;), get_ticker(&#39;^DJI&#39;)&#xA;    return map(pd.Series.rename, out, [&#39;Total Cases&#39;, &#39;Bitcoin&#39;, &#39;Gold&#39;, &#39;Dow Jones&#39;])&#xA;&#xA;def wrangle_data(covid, bitcoin, gold, dow):&#xA;    df = pd.concat([bitcoin, gold, dow], axis=1)  # Creates table by joining columns on dates.&#xA;    df = df.sort_index().interpolate()            # Sorts table by date and interpolates NaN-s.&#xA;    df = df.loc[&#39;2020-02-23&#39;:]                    # Discards rows before &#39;2020-02-23&#39;.&#xA;    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.&#xA;    df = df.join(covid)                           # Adds column with covid cases.&#xA;    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day&#39;s value.&#xA;&#xA;def display_data(df):&#xA;    figure = go.Figure()&#xA;    for col_name in reversed(df.columns):&#xA;        yaxis = &#39;y1&#39; if col_name == &#39;Total Cases&#39; else &#39;y2&#39;&#xA;        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)&#xA;        figure.add_trace(trace)&#xA;    figure.update_layout(&#xA;        yaxis1=dict(title=&#39;Total Cases&#39;, rangemode=&#39;tozero&#39;),&#xA;        yaxis2=dict(title=&#39;%&#39;, rangemode=&#39;tozero&#39;, overlaying=&#39;y&#39;, side=&#39;right&#39;),&#xA;        legend=dict(x=1.08),&#xA;        width=944,&#xA;        height=423&#xA;    )&#xA;    figure.show()&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PySimpleGUI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install PySimpleGUI&#xA;import PySimpleGUI as sg&#xA;&#xA;layout = [[sg.Text(&#34;What&#39;s your name?&#34;)], [sg.Input()], [sg.Button(&#39;Ok&#39;)]]&#xA;window = sg.Window(&#39;Window Title&#39;, layout)&#xA;event, values = window.read()&#xA;print(f&#39;Hello {values[0]}!&#39; if event == &#39;Ok&#39; else &#39;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Cython&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Library that compiles Python code into C.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# $ pip3 install cython&#xA;import pyximport; pyximport.install()&#xA;import &amp;lt;cython_script&amp;gt;&#xA;&amp;lt;cython_script&amp;gt;.main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Definitions:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All &lt;code&gt;&#39;cdef&#39;&lt;/code&gt; definitions are optional, but they contribute to the speed-up.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Script needs to be saved with a &lt;code&gt;&#39;pyx&#39;&lt;/code&gt; extension.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cdef &amp;lt;ctype&amp;gt; &amp;lt;var_name&amp;gt; = &amp;lt;el&amp;gt;&#xA;cdef &amp;lt;ctype&amp;gt;[n_elements] &amp;lt;var_name&amp;gt; = [&amp;lt;el&amp;gt;, &amp;lt;el&amp;gt;, ...]&#xA;cdef &amp;lt;ctype/void&amp;gt; &amp;lt;func_name&amp;gt;(&amp;lt;ctype&amp;gt; &amp;lt;arg_name&amp;gt;): ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cdef class &amp;lt;class_name&amp;gt;:&#xA;    cdef public &amp;lt;ctype&amp;gt; &amp;lt;attr_name&amp;gt;&#xA;    def __init__(self, &amp;lt;ctype&amp;gt; &amp;lt;arg_name&amp;gt;):&#xA;        self.&amp;lt;attr_name&amp;gt; = &amp;lt;arg_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cdef enum &amp;lt;enum_name&amp;gt;: &amp;lt;member_name&amp;gt;, &amp;lt;member_name&amp;gt;, ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Virtual Environments&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;System for installing libraries directly into project&#39;s directory.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python3 -m venv &amp;lt;name&amp;gt;      # Creates virtual environment in current directory.&#xA;$ source &amp;lt;name&amp;gt;/bin/activate  # Activates venv. On Windows run `&amp;lt;name&amp;gt;\Scripts\activate`.&#xA;$ pip3 install &amp;lt;library&amp;gt;      # Installs the library into active environment.&#xA;$ python3 &amp;lt;path&amp;gt;              # Runs the script in active environment. Also `./&amp;lt;path&amp;gt;`.&#xA;$ deactivate                  # Deactivates the active virtual environment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Script Template&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3&#xA;#&#xA;# Usage: .py&#xA;#&#xA;&#xA;from sys import argv, exit&#xA;from collections import defaultdict, namedtuple&#xA;from dataclasses import make_dataclass&#xA;from enum import Enum&#xA;import functools as ft, itertools as it, operator as op, re&#xA;&#xA;&#xA;def main():&#xA;    pass&#xA;&#xA;&#xA;###&#xA;##  UTIL&#xA;#&#xA;&#xA;def read_file(filename):&#xA;    with open(filename, encoding=&#39;utf-8&#39;) as file:&#xA;        return file.readlines()&#xA;&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only available in the &lt;a href=&#34;https://transactions.sendowl.com/products/78175486/4422834F/view&#34;&gt;PDF&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ctrl+F / ⌘F is usually sufficient.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Searching &lt;code&gt;&#39;#&amp;lt;title&amp;gt;&#39;&lt;/code&gt; on the &lt;a href=&#34;https://gto76.github.io/python-cheatsheet/&#34;&gt;webpage&lt;/a&gt; will limit the search to the titles.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>