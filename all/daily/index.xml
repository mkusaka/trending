<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-16T01:21:31Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yoheinakajima/instagraph</title>
    <updated>2023-09-16T01:21:31Z</updated>
    <id>tag:github.com,2023-09-16:/yoheinakajima/instagraph</id>
    <link href="https://github.com/yoheinakajima/instagraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Converts text input or URL into knowledge graph and displays&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Note for non-coders: you can sign up for the waitlist at &lt;a href=&#34;https://instagraph.ai&#34;&gt;instagraph.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;InstaGraph üåê&lt;/h1&gt; &#xA;&lt;p&gt;Hello there, adventurous coder! Welcome to InstaGraph, your go-to application for converting text or URLs into insightful knowledge graphs. Curious about the relationships between entities in a complex topic? Feed the text to InstaGraph and voila! A beautiful knowledge graph is at your fingertips.&lt;/p&gt; &#xA;&lt;p&gt;See example flowcharts generated by InstaGraph &lt;a href=&#34;https://twitter.com/yoheinakajima/status/1701351068817301922&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Powered by OpenAI&#39;s GPT-3.5, this Flask application turns your text into a vividly colored graph, making it easier to visualize relationships between various entities. Enough talking‚Äîlet&#39;s get started!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Author&#39;s TL;DR&lt;/strong&gt;: If you&#39;re just looking for how the knowledge graph is generated, check out the function call parameters taking up half of main.py.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents üìö&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/#features-&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/#installation-&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/#usage-&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/#contributing-&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/#license-&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features üåü&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic Text to Graph conversion.&lt;/li&gt; &#xA; &lt;li&gt;Color-coded graph nodes and edges.&lt;/li&gt; &#xA; &lt;li&gt;Responsive design‚Äîuse it on any device.&lt;/li&gt; &#xA; &lt;li&gt;Super-duper user-friendly!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation üõ†Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;To get started, you&#39;ll need Python and pip installed.&lt;/p&gt; &#xA;&lt;h4&gt;1. Clone the repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/yoheinakajima/instagraph.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Navigate to the project directory&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd instagraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Install the required Python packages&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Set up your OpenAI API Key&lt;/h4&gt; &#xA;&lt;p&gt;Change .env.example to .env &#39;&#39;&#39; bash mv .env.example .env &#39;&#39;&#39; Add your OpenAI API key to .env file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=your-api-key-here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Run the Flask app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt; to see your app running.&lt;/p&gt; &#xA;&lt;h2&gt;Usage üéâ&lt;/h2&gt; &#xA;&lt;h3&gt;Web Interface&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open your web browser and navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Type your text or paste a URL in the input box.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Submit&#34; and wait for the magic to happen!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API Endpoints&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GET Response Data&lt;/strong&gt;: &lt;code&gt;/get_response_data&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Method: &lt;code&gt;POST&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Data Params: &lt;code&gt;{&#34;user_input&#34;: &#34;Your text here&#34;}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Response: GPT-3.5 processed data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GET Graph Data&lt;/strong&gt;: &lt;code&gt;/get_graph_data&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Method: &lt;code&gt;POST&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Response: Graph Data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing ü§ù&lt;/h2&gt; &#xA;&lt;p&gt;Best way to chat with me is on Twitter at &lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/@yoheinakajima&#34;&gt;https://twitter.com/yoheinakajima&lt;/a&gt;. I usually only code on the weekends or at night, and in pretty small chunks. I have lots ideas on what I want to add here, but obviously this would move faster with everyone. Not sure I can manage Github well given my time constraints, so please reach out if you want to help me run the Github. Now, here are a few ideas on what I think we should add based on comments...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;Store knowlege graph&lt;/del&gt; (thx @tomasonjo! 9/13/23)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Pull knowledge graph from storage&lt;/del&gt; (thx @tomasonjo! 9/13/23)&lt;/li&gt; &#xA; &lt;li&gt;Show history&lt;/li&gt; &#xA; &lt;li&gt;Ability to combine two graphs&lt;/li&gt; &#xA; &lt;li&gt;Ability to combine 2+ graphs from history&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Ability to expand on a graph&lt;/del&gt; (thx @tomasonjo! 9/13/23)&lt;/li&gt; &#xA; &lt;li&gt;Ability to expand on graph from specific nodes&lt;/li&gt; &#xA; &lt;li&gt;Fuzzy matching of nodes for combining graphs (vector match + LLM confirmation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a lot of &#34;build a chart&#34; tools out there, so instead of doing user account and custom charts, it sounds more fun for me to work on building the largest knowlege graph ever...&lt;/p&gt; &#xA;&lt;h2&gt;License üìù&lt;/h2&gt; &#xA;&lt;p&gt;MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/yoheinakajima/instagraph/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Enjoy using InstaGraph! üéâ&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nicolas-hbt/pygraft</title>
    <updated>2023-09-16T01:21:31Z</updated>
    <id>tag:github.com,2023-09-16:/nicolas-hbt/pygraft</id>
    <link href="https://github.com/nicolas-hbt/pygraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Configurable Generation of Schemas and Knowledge Graphs at Your Fingertips&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/docs/source/logo.svg?sanitize=true&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pygraft/&#34; alt=&#34;PyPI&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/pygraft.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pygraft&#34; alt=&#34;pypi downloads&#34;&gt; &lt;img alt=&#34;pypi downloads&#34; src=&#34;https://pepy.tech/badge/pygraft&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://arxiv.org/pdf/2309.03685.pdf&#34;&gt;PyGraft: Configurable Generation of Schemas and Knowledge Graphs at Your Fingertips&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the open-source implementation of PyGraft, initially presented in &lt;a href=&#34;https://arxiv.org/pdf/2309.03685.pdf&#34;&gt;this paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PyGraft is an open-source Python library for generating synthetic yet realistic schemas and (KGs) based on user-specified parameters. The generated resources are domain-agnostic, i.e. they are not tied to a specific application field.&lt;/p&gt; &#xA;&lt;p&gt;Being able to synthesize schemas and KGs is an important milestone for conducting research in domains where data is sensitive or not readily available. PyGraft allows researchers and practitioners to generate schemas and KGs on the fly, provided minimal knowledge about the desired specifications.&lt;/p&gt; &#xA;&lt;p&gt;PyGraft has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;possibility to generate a schema, a KG, or both&lt;/li&gt; &#xA; &lt;li&gt;highly-tunable process based on a broad array of user-specified parameters&lt;/li&gt; &#xA; &lt;li&gt;schemas and KGs are built with an extended set of RDFS and OWL constructs&lt;/li&gt; &#xA; &lt;li&gt;logical consistency is ensured by the use of a DL reasoner (HermiT)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The latest stable version of PyGraft can be downloaded and installed from &lt;a href=&#34;https://pypi.org/project/pygraft&#34;&gt;PyPI&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pygraft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest version of PyGraft can be installed directly from &lt;a href=&#34;https://github.com/nicolas-hbt/pygraft&#34;&gt;GitHub&lt;/a&gt; source with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/nicolas-hbt/pygraft.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PyGraft Overview&lt;/h2&gt; &#xA;&lt;p&gt;The contributions of PyGraft are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To the best of our knowledge, PyGraft is the first generator able to synthesize both schemas and KGs in a single pipeline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The generated schemas and KGs are described with an extended set of RDFS and OWL constructs, allowing for both fine-grained resource descriptions and strict compliance with common Semantic Web standards.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A broad range of parameters can be specified by the user. These allow for creating an infinite number of graphs with different characteristics. More details on parameters can be found in the &lt;a href=&#34;https://pygraft.readthedocs.io/en/latest/references/parameters.html&#34;&gt;Parameters section of the official documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From a high-level perspective, the entire PyGraft generation pipeline is depicted in Figure 1. In particular, Class and Relation Generators are initialized with user-specified parameters and used to build the schema incrementally. The logical consistency of the schema is subsequently checked using the HermiT reasoner from &lt;a href=&#34;https://github.com/pwin/owlready2/&#34;&gt;owlready2&lt;/a&gt;. If you are also interested in generating a KG based on this schema, the KG Generator is initialized with KG-related parameters and fused with the previously generated schema to sequentially build the KG. Ultimately, the logical consistency of the resulting KG is (again) assessed using HermiT.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/docs/source/img/pygraft-overview.png&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Figure 1: PyGraft Overview &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, PyGraft can be loaded with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pygraft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Importantly, you can access all the functions with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pygraft.__all__&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generating a Schema&lt;/h3&gt; &#xA;&lt;p&gt;Let us assume we are only interested in generating a schema. We first need to retrieve the template configuration file (e.g. a &lt;code&gt;.yaml&lt;/code&gt; configuration file), which is as simple as calling &lt;code&gt;create_yaml_template()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pygraft.create_yaml_template()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, the template has been generated under the current working directory, and is named &lt;code&gt;template.yml&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;This file contains all the tunable parameters. For more details on their meanings, please check the &lt;a href=&#34;https://pygraft.readthedocs.io/en/latest/references/parameters.html&#34;&gt;Parameters section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the sake of simplicity, we do not plan to modify this template and stick with the default parameter values.&lt;/p&gt; &#xA;&lt;p&gt;Generating an ontology is made possible via the &lt;code&gt;generate_schema(path)&lt;/code&gt; function, which only requires the relative path to the configuration file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] For the following steps, i.e. generating a schema and a KG, you need Java to be installed and the $JAVA_HOME environment variable to be properly assigned. This is because the HermiT reasoner currently runs using Java.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In our case, the configuration file is named &lt;code&gt;template.yml&lt;/code&gt; and is located in the current working directory, thereby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pygraft.generate_schema(&#34;template.yml&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated schema can be retrieved in &lt;code&gt;output/template/schema.rdf&lt;/code&gt;. Additional files are created during the process: &lt;code&gt;output/template/class_info.json&lt;/code&gt; and &lt;code&gt;output/template/relation_info.json&lt;/code&gt;. These files give important information about the classes and relations of the generated schema, respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Generating a KG&lt;/h3&gt; &#xA;&lt;p&gt;Let us now explore how to use PyGraft to generate a KG. In this section, we assume we already have a schema, that will serve as a blueprint for generating our KG. We can use the same configuration file as before ‚Äì as it also contained parameters related to the KG generation (although not used before, since we only asked for a schema) ‚Äì to generate a KG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pygraft.generate_kg(&#34;template.yml&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated KG can be retrieved in &lt;code&gt;output/template/full_graph.rdf&lt;/code&gt;. It combines information inherited from &lt;code&gt;output/template/schema.rdf&lt;/code&gt; (i.e. ontological information) with information related to individuals.&lt;/p&gt; &#xA;&lt;h3&gt;Full Pipeline Execution&lt;/h3&gt; &#xA;&lt;p&gt;In most cases, one wants to generate both a schema and a KG in a single process. PyGraft allows this with the &lt;code&gt;generate(path)&lt;/code&gt; function, which operates just as the aforedescribed two functions &lt;code&gt;generate_schema(path)&lt;/code&gt; and &lt;code&gt;generate_kg(path)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pygraft.generate(&#34;template.yml&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Interested in contributing to PyGraft? Please consider reaching out: &lt;a href=&#34;mailto:nicolas.hubert@univ-lorraine.fr&#34;&gt;nicolas.hubert@univ-lorraine.fr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you like PyGraft, consider downloading PyGraft and starring our GitHub repository to make it known and promote its development!&lt;/p&gt; &#xA;&lt;p&gt;If you use or mention PyGraft in a publication, cite our work as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{hubert2023pygraft,&#xA;  title={PyGraft: Configurable Generation of Schemas and Knowledge Graphs at Your Fingertips}, &#xA;  author={Nicolas Hubert and Pierre Monnin and Mathieu d&#39;Aquin and Armelle Brun and Davy Monticolo},&#xA;  year={2023},&#xA;  eprint={2309.03685},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.AI}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>dimdenGD/OldTweetDeck</title>
    <updated>2023-09-16T01:21:31Z</updated>
    <id>tag:github.com,2023-09-16:/dimdenGD/OldTweetDeck</id>
    <link href="https://github.com/dimdenGD/OldTweetDeck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Returns old TweetDeck, for free!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OldTweetDeck&lt;/h1&gt; &#xA;&lt;p&gt;Returns old TweetDeck, for free!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re interested in getting 2015-2018 Twitter back, you can also check out &lt;a href=&#34;https://github.com/dimdenGD/OldTwitter&#34;&gt;OldTwitter&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://lune.dimden.dev/9713d947d56.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other languages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dimdenGD/OldTweetDeck/main/docs/README_KO.md&#34;&gt;ÌïúÍµ≠Ïñ¥ README&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/dimdenGD/OldTweetDeck/main/docs/README_JA.md&#34;&gt;Êó•Êú¨Ë™û README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Note: Do not delete the extension files (unzipped archive for Chromium, zip file for Firefox) after installation.&lt;/p&gt; &#xA;&lt;h3&gt;Chromium (Chrome, Edge, Opera, Brave, Etc.)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/dimdenGD/OldTweetDeck/releases&#34;&gt;Release page&lt;/a&gt; and download &lt;code&gt;OldTweetDeckChrome.zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unzip the archive&lt;/li&gt; &#xA; &lt;li&gt;Go to extentions page (&lt;code&gt;chrome://extensions&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Enable developer mode (there should be switch somewhere on that page)&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Load unpacked&#34; button&lt;/li&gt; &#xA; &lt;li&gt;Select folder with unzipped archive&lt;/li&gt; &#xA; &lt;li&gt;Go to tweetdeck.twitter.com and enjoy old TweetDeck&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/dimdendev&#34;&gt;Donate to encourage continued support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Firefox&lt;/h3&gt; &#xA;&lt;h4&gt;Nightly / Developer Edition&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/dimdenGD/OldTweetDeck/releases&#34;&gt;Release page&lt;/a&gt; and download &lt;code&gt;OldTweetDeckFirefox.zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to Firefox Configuration Editor (&lt;code&gt;about:config&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change the preference &lt;code&gt;xpinstall.signatures.required&lt;/code&gt; to false&lt;/li&gt; &#xA; &lt;li&gt;Go to addons page(&lt;code&gt;about:addons&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Install Add-on From File...&#34; button&lt;/li&gt; &#xA; &lt;li&gt;Select zip file you downloaded&lt;/li&gt; &#xA; &lt;li&gt;Go to tweetdeck.twitter.com and enjoy old TweetDeck&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/dimdendev&#34;&gt;Donate to encourage continued support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Stable&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;It&#39;s not recommended to use this extension on Stable version.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;about:debugging#/runtime/this-firefox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Press &#34;Load Temporary Add-on&#34; and select zip file you downloaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Installing this way on Firefox will remove it after closing browser.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Safari&lt;/h3&gt; &#xA;&lt;p&gt;NOT SUPPORTED&lt;/p&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;p&gt;If TweetDeck&#39;s files were updated, you should receive updated files automatically without having to reinstall after refreshing tab (unless you set &lt;code&gt;localStorage.OTDalwaysUseLocalFiles = &#39;1&#39;&lt;/code&gt;).&lt;br&gt; If extension files were updated, you have to reinstall extension to get new update.&lt;/p&gt; &#xA;&lt;h2&gt;Better TweetDeck&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve made a fork of BetterTD that works with this extension, you can find it &lt;a href=&#34;https://github.com/dimdenGD/BetterTweetDeck/&#34;&gt;here&lt;/a&gt;. Install it the same way as this extension, except get archive from &lt;a href=&#34;https://github.com/dimdenGD/BetterTweetDeck/releases&#34;&gt;Releases&lt;/a&gt; page instead of &#34;Code&#34; button.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;There is a warning: Manifest version 2 is deprecated, and support will be removed in 2023.&lt;/h4&gt; &#xA;&lt;p&gt;Ignore this warning.&lt;/p&gt; &#xA;&lt;h4&gt;User or Search column aren&#39;t loading for me.&lt;/h4&gt; &#xA;&lt;p&gt;You&#39;re getting rate limited. They&#39;ll comeback after some time.&lt;/p&gt;</summary>
  </entry>
</feed>