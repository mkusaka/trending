<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-18T01:29:15Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fatedier/frp</title>
    <updated>2024-12-18T01:29:15Z</updated>
    <id>tag:github.com,2024-12-18:/fatedier/frp</id>
    <link href="https://github.com/fatedier/frp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;frp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/fatedier/frp&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/fatedier/frp.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fatedier/frp/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/fatedier/frp.svg?label=release&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/fatedier/frp&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/fatedier/frp&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://somsubhra.github.io/github-release-stats/?username=fatedier&amp;amp;repository=frp&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/fatedier/frp/total.svg?logo=github&#34; alt=&#34;GitHub Releases Stats&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/README.md&#34;&gt;README&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/README_zh.md&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;frp is an open source project with its ongoing development made possible entirely by the support of our awesome sponsors. If you&#39;d like to join them, please consider &lt;a href=&#34;https://github.com/sponsors/fatedier&#34;&gt;sponsoring frp&#39;s development&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Gold Sponsors&lt;/h3&gt; &#xA;&lt;!--gold sponsors start--&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://jb.gg/frp&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;420px&#34; src=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_jetbrains.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://workos.com/?utm_campaign=github_repo&amp;amp;utm_medium=referral&amp;amp;utm_content=frp&amp;amp;utm_source=github&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;420px&#34; src=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_workos.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/daytonaio/daytona&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;420px&#34; src=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_daytona.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/beclab/Olares&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;420px&#34; src=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_olares.jpeg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;!--gold sponsors end--&gt; &#xA;&lt;h2&gt;What is frp?&lt;/h2&gt; &#xA;&lt;p&gt;frp is a fast reverse proxy that allows you to expose a local server located behind a NAT or firewall to the Internet. It currently supports &lt;strong&gt;TCP&lt;/strong&gt; and &lt;strong&gt;UDP&lt;/strong&gt;, as well as &lt;strong&gt;HTTP&lt;/strong&gt; and &lt;strong&gt;HTTPS&lt;/strong&gt; protocols, enabling requests to be forwarded to internal services via domain name.&lt;/p&gt; &#xA;&lt;p&gt;frp also offers a P2P connect mode.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#development-status&#34;&gt;Development Status&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#about-v2&#34;&gt;About V2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#example-usage&#34;&gt;Example Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#access-your-computer-in-a-lan-network-via-ssh&#34;&gt;Access your computer in a LAN network via SSH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#multiple-ssh-services-sharing-the-same-port&#34;&gt;Multiple SSH services sharing the same port&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#accessing-internal-web-services-with-custom-domains-in-lan&#34;&gt;Accessing Internal Web Services with Custom Domains in LAN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#forward-dns-query-requests&#34;&gt;Forward DNS query requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#forward-unix-domain-socket&#34;&gt;Forward Unix Domain Socket&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#expose-a-simple-http-file-server&#34;&gt;Expose a simple HTTP file server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#enable-https-for-a-local-https-service&#34;&gt;Enable HTTPS for a local HTTP(S) service&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#expose-your-service-privately&#34;&gt;Expose your service privately&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#p2p-mode&#34;&gt;P2P Mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#configuration-files&#34;&gt;Configuration Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#using-environment-variables&#34;&gt;Using Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#split-configures-into-different-files&#34;&gt;Split Configures Into Different Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#server-dashboard&#34;&gt;Server Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#client-admin-ui&#34;&gt;Client Admin UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#monitor&#34;&gt;Monitor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#prometheus&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#authenticating-the-client&#34;&gt;Authenticating the Client&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#token-authentication&#34;&gt;Token Authentication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#oidc-authentication&#34;&gt;OIDC Authentication&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#encryption-and-compression&#34;&gt;Encryption and Compression&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#tls&#34;&gt;TLS&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#hot-reloading-frpc-configuration&#34;&gt;Hot-Reloading frpc configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#get-proxy-status-from-client&#34;&gt;Get proxy status from client&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#only-allowing-certain-ports-on-the-server&#34;&gt;Only allowing certain ports on the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#port-reuse&#34;&gt;Port Reuse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#bandwidth-limit&#34;&gt;Bandwidth Limit&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#for-each-proxy&#34;&gt;For Each Proxy&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#tcp-stream-multiplexing&#34;&gt;TCP Stream Multiplexing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#support-kcp-protocol&#34;&gt;Support KCP Protocol&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#support-quic-protocol&#34;&gt;Support QUIC Protocol&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#connection-pooling&#34;&gt;Connection Pooling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#load-balancing&#34;&gt;Load balancing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#service-health-check&#34;&gt;Service Health Check&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#rewriting-the-http-host-header&#34;&gt;Rewriting the HTTP Host Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#setting-other-http-headers&#34;&gt;Setting other HTTP Headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#get-real-ip&#34;&gt;Get Real IP&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#http-x-forwarded-for&#34;&gt;HTTP X-Forwarded-For&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#proxy-protocol&#34;&gt;Proxy Protocol&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#require-http-basic-auth-password-for-web-services&#34;&gt;Require HTTP Basic Auth (Password) for Web Services&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#custom-subdomain-names&#34;&gt;Custom Subdomain Names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#url-routing&#34;&gt;URL Routing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#tcp-port-multiplexing&#34;&gt;TCP Port Multiplexing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#connecting-to-frps-via-proxy&#34;&gt;Connecting to frps via PROXY&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#port-range-mapping&#34;&gt;Port range mapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#client-plugins&#34;&gt;Client Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#server-manage-plugins&#34;&gt;Server Manage Plugins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#ssh-tunnel-gateway&#34;&gt;SSH Tunnel Gateway&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#releated-projects&#34;&gt;Releated Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#donation&#34;&gt;Donation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#github-sponsors&#34;&gt;GitHub Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#paypal&#34;&gt;PayPal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;frp is currently under development. You can try the latest release version in the &lt;code&gt;master&lt;/code&gt; branch, or use the &lt;code&gt;dev&lt;/code&gt; branch to access the version currently in development.&lt;/p&gt; &#xA;&lt;p&gt;We are currently working on version 2 and attempting to perform some code refactoring and improvements. However, please note that it will not be compatible with version 1.&lt;/p&gt; &#xA;&lt;p&gt;We will transition from version 0 to version 1 at the appropriate time and will only accept bug fixes and improvements, rather than big feature requests.&lt;/p&gt; &#xA;&lt;h3&gt;About V2&lt;/h3&gt; &#xA;&lt;p&gt;The complexity and difficulty of the v2 version are much higher than anticipated. I can only work on its development during fragmented time periods, and the constant interruptions disrupt productivity significantly. Given this situation, we will continue to optimize and iterate on the current version until we have more free time to proceed with the major version overhaul.&lt;/p&gt; &#xA;&lt;p&gt;The concept behind v2 is based on my years of experience and reflection in the cloud-native domain, particularly in K8s and ServiceMesh. Its core is a modernized four-layer and seven-layer proxy, similar to envoy. This proxy itself is highly scalable, not only capable of implementing the functionality of intranet penetration but also applicable to various other domains. Building upon this highly scalable core, we aim to implement all the capabilities of frp v1 while also addressing the functionalities that were previously unachievable or difficult to implement in an elegant manner. Furthermore, we will maintain efficient development and iteration capabilities.&lt;/p&gt; &#xA;&lt;p&gt;In addition, I envision frp itself becoming a highly extensible system and platform, similar to how we can provide a range of extension capabilities based on K8s. In K8s, we can customize development according to enterprise needs, utilizing features such as CRD, controller mode, webhook, CSI, and CNI. In frp v1, we introduced the concept of server plugins, which implemented some basic extensibility. However, it relies on a simple HTTP protocol and requires users to start independent processes and manage them on their own. This approach is far from flexible and convenient, and real-world demands vary greatly. It is unrealistic to expect a non-profit open-source project maintained by a few individuals to meet everyone&#39;s needs.&lt;/p&gt; &#xA;&lt;p&gt;Finally, we acknowledge that the current design of modules such as configuration management, permission verification, certificate management, and API management is not modern enough. While we may carry out some optimizations in the v1 version, ensuring compatibility remains a challenging issue that requires a considerable amount of effort to address.&lt;/p&gt; &#xA;&lt;p&gt;We sincerely appreciate your support for frp.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;To begin, download the latest program for your operating system and architecture from the &lt;a href=&#34;https://github.com/fatedier/frp/releases&#34;&gt;Release&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Next, place the &lt;code&gt;frps&lt;/code&gt; binary and server configuration file on Server A, which has a public IP address.&lt;/p&gt; &#xA;&lt;p&gt;Finally, place the &lt;code&gt;frpc&lt;/code&gt; binary and client configuration file on Server B, which is located on a LAN that cannot be directly accessed from the public internet.&lt;/p&gt; &#xA;&lt;p&gt;Some antiviruses improperly mark frpc as malware and delete it. This is due to frp being a networking tool capable of creating reverse proxies. Antiviruses sometimes flag reverse proxies due to their ability to bypass firewall port restrictions. If you are using antivirus, then you may need to whitelist/exclude frpc in your antivirus settings to avoid accidental quarantine/deletion. See &lt;a href=&#34;https://github.com/fatedier/frp/issues/3637&#34;&gt;issue 3637&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Access your computer in a LAN network via SSH&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;frps.toml&lt;/code&gt; on server A by setting the &lt;code&gt;bindPort&lt;/code&gt; for frp clients to connect to:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;bindPort = 7000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frps&lt;/code&gt; on server A:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./frps -c ./frps.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;frpc.toml&lt;/code&gt; on server B and set the &lt;code&gt;serverAddr&lt;/code&gt; field to the public IP address of your frps server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh&#34;&#xA;type = &#34;tcp&#34;&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;remotePort = 6000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;localPort&lt;/code&gt; (listened on the client) and &lt;code&gt;remotePort&lt;/code&gt; (exposed on the server) are used for traffic going in and out of the frp system, while the &lt;code&gt;serverPort&lt;/code&gt; is used for communication between frps and frpc.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt; on server B:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./frpc -c ./frpc.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;To access server B from another machine through server A via SSH (assuming the username is &lt;code&gt;test&lt;/code&gt;), use the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;ssh -oPort=6000 test@x.x.x.x&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multiple SSH services sharing the same port&lt;/h3&gt; &#xA;&lt;p&gt;This example implements multiple SSH services exposed through the same port using a proxy of type tcpmux. Similarly, as long as the client supports the HTTP Connect proxy connection method, port reuse can be achieved in this way.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy frps on a machine with a public IP and modify the frps.toml file. Here is a simplified configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;bindPort = 7000&#xA;tcpmuxHTTPConnectPort = 5002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Deploy frpc on the internal machine A with the following configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh1&#34;&#xA;type = &#34;tcpmux&#34;&#xA;multiplexer = &#34;httpconnect&#34;&#xA;customDomains = [&#34;machine-a.example.com&#34;]&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Deploy another frpc on the internal machine B with the following configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh2&#34;&#xA;type = &#34;tcpmux&#34;&#xA;multiplexer = &#34;httpconnect&#34;&#xA;customDomains = [&#34;machine-b.example.com&#34;]&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To access internal machine A using SSH ProxyCommand, assuming the username is &#34;test&#34;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;ssh -o &#39;proxycommand socat - PROXY:x.x.x.x:%h:%p,proxyport=5002&#39; test@machine-a.example.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;To access internal machine B, the only difference is the domain name, assuming the username is &#34;test&#34;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;ssh -o &#39;proxycommand socat - PROXY:x.x.x.x:%h:%p,proxyport=5002&#39; test@machine-b.example.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Accessing Internal Web Services with Custom Domains in LAN&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes we need to expose a local web service behind a NAT network to others for testing purposes with our own domain name.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, we cannot resolve a domain name to a local IP. However, we can use frp to expose an HTTP(S) service.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;frps.toml&lt;/code&gt; and set the HTTP port for vhost to 8080:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;bindPort = 7000&#xA;vhostHTTPPort = 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to configure an https proxy, you need to set up the &lt;code&gt;vhostHTTPSPort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frps&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./frps -c ./frps.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;frpc.toml&lt;/code&gt; and set &lt;code&gt;serverAddr&lt;/code&gt; to the IP address of the remote frps server. Specify the &lt;code&gt;localPort&lt;/code&gt; of your web service:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 80&#xA;customDomains = [&#34;www.example.com&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./frpc -c ./frpc.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Map the A record of &lt;code&gt;www.example.com&lt;/code&gt; to either the public IP of the remote frps server or a CNAME record pointing to your original domain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit your local web service using url &lt;code&gt;http://www.example.com:8080&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Forward DNS query requests&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;frps.toml&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;bindPort = 7000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frps&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./frps -c ./frps.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;frpc.toml&lt;/code&gt; and set &lt;code&gt;serverAddr&lt;/code&gt; to the IP address of the remote frps server. Forward DNS query requests to the Google Public DNS server &lt;code&gt;8.8.8.8:53&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;dns&#34;&#xA;type = &#34;udp&#34;&#xA;localIP = &#34;8.8.8.8&#34;&#xA;localPort = 53&#xA;remotePort = 6000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start frpc:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;./frpc -c ./frpc.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Test DNS resolution using the &lt;code&gt;dig&lt;/code&gt; command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;dig @x.x.x.x -p 6000 www.google.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forward Unix Domain Socket&lt;/h3&gt; &#xA;&lt;p&gt;Expose a Unix domain socket (e.g. the Docker daemon socket) as TCP.&lt;/p&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;frps&lt;/code&gt; as above.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt; with the following configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;unix_domain_socket&#34;&#xA;type = &#34;tcp&#34;&#xA;remotePort = 6000&#xA;[proxies.plugin]&#xA;type = &#34;unix_domain_socket&#34;&#xA;unixPath = &#34;/var/run/docker.sock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Test the configuration by getting the docker version using &lt;code&gt;curl&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;curl http://x.x.x.x:6000/version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Expose a simple HTTP file server&lt;/h3&gt; &#xA;&lt;p&gt;Expose a simple HTTP file server to access files stored in the LAN from the public Internet.&lt;/p&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;frps&lt;/code&gt; as described above, then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt; with the following configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;test_static_file&#34;&#xA;type = &#34;tcp&#34;&#xA;remotePort = 6000&#xA;[proxies.plugin]&#xA;type = &#34;static_file&#34;&#xA;localPath = &#34;/tmp/files&#34;&#xA;stripPrefix = &#34;static&#34;&#xA;httpUser = &#34;abc&#34;&#xA;httpPassword = &#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Visit &lt;code&gt;http://x.x.x.x:6000/static/&lt;/code&gt; from your browser and specify correct username and password to view files in &lt;code&gt;/tmp/files&lt;/code&gt; on the &lt;code&gt;frpc&lt;/code&gt; machine.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Enable HTTPS for a local HTTP(S) service&lt;/h3&gt; &#xA;&lt;p&gt;You may substitute &lt;code&gt;https2https&lt;/code&gt; for the plugin, and point the &lt;code&gt;localAddr&lt;/code&gt; to a HTTPS endpoint.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt; with the following configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;test_https2http&#34;&#xA;type = &#34;https&#34;&#xA;customDomains = [&#34;test.example.com&#34;]&#xA;&#xA;[proxies.plugin]&#xA;type = &#34;https2http&#34;&#xA;localAddr = &#34;127.0.0.1:80&#34;&#xA;crtPath = &#34;./server.crt&#34;&#xA;keyPath = &#34;./server.key&#34;&#xA;hostHeaderRewrite = &#34;127.0.0.1&#34;&#xA;requestHeaders.set.x-from-where = &#34;frp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Visit &lt;code&gt;https://test.example.com&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Expose your service privately&lt;/h3&gt; &#xA;&lt;p&gt;To mitigate risks associated with exposing certain services directly to the public network, STCP (Secret TCP) mode requires a preshared key to be used for access to the service from other clients.&lt;/p&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;frps&lt;/code&gt; same as above.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt; on machine B with the following config. This example is for exposing the SSH service (port 22), and note the &lt;code&gt;secretKey&lt;/code&gt; field for the preshared key, and that the &lt;code&gt;remotePort&lt;/code&gt; field is removed here:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;secret_ssh&#34;&#xA;type = &#34;stcp&#34;&#xA;secretKey = &#34;abcdefg&#34;&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start another &lt;code&gt;frpc&lt;/code&gt; (typically on another machine C) with the following config to access the SSH service with a security key (&lt;code&gt;secretKey&lt;/code&gt; field):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[visitors]]&#xA;name = &#34;secret_ssh_visitor&#34;&#xA;type = &#34;stcp&#34;&#xA;serverName = &#34;secret_ssh&#34;&#xA;secretKey = &#34;abcdefg&#34;&#xA;bindAddr = &#34;127.0.0.1&#34;&#xA;bindPort = 6000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;On machine C, connect to SSH on machine B, using this command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;ssh -oPort=6000 127.0.0.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;P2P Mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;xtcp&lt;/strong&gt; is designed to transmit large amounts of data directly between clients. A frps server is still needed, as P2P here only refers to the actual data transmission.&lt;/p&gt; &#xA;&lt;p&gt;Note that it may not work with all types of NAT devices. You might want to fallback to stcp if xtcp doesn&#39;t work.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start &lt;code&gt;frpc&lt;/code&gt; on machine B, and expose the SSH port. Note that the &lt;code&gt;remotePort&lt;/code&gt; field is removed:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;# set up a new stun server if the default one is not available.&#xA;# natHoleStunServer = &#34;xxx&#34;&#xA;&#xA;[[proxies]]&#xA;name = &#34;p2p_ssh&#34;&#xA;type = &#34;xtcp&#34;&#xA;secretKey = &#34;abcdefg&#34;&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start another &lt;code&gt;frpc&lt;/code&gt; (typically on another machine C) with the configuration to connect to SSH using P2P mode:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;# set up a new stun server if the default one is not available.&#xA;# natHoleStunServer = &#34;xxx&#34;&#xA;&#xA;[[visitors]]&#xA;name = &#34;p2p_ssh_visitor&#34;&#xA;type = &#34;xtcp&#34;&#xA;serverName = &#34;p2p_ssh&#34;&#xA;secretKey = &#34;abcdefg&#34;&#xA;bindAddr = &#34;127.0.0.1&#34;&#xA;bindPort = 6000&#xA;# when automatic tunnel persistence is required, set it to true&#xA;keepTunnelOpen = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;On machine C, connect to SSH on machine B, using this command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;ssh -oPort=6000 127.0.0.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration Files&lt;/h3&gt; &#xA;&lt;p&gt;Since v0.52.0, we support TOML, YAML, and JSON for configuration. Please note that INI is deprecated and will be removed in future releases. New features will only be available in TOML, YAML, or JSON. Users wanting these new features should switch their configuration format accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Read the full example configuration files to find out even more features not described here.&lt;/p&gt; &#xA;&lt;p&gt;Examples use TOML format, but you can still use YAML or JSON.&lt;/p&gt; &#xA;&lt;p&gt;These configuration files is for reference only. Please do not use this configuration directly to run the program as it may have various issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/conf/frps_full_example.toml&#34;&gt;Full configuration file for frps (Server)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/conf/frpc_full_example.toml&#34;&gt;Full configuration file for frpc (Client)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;Environment variables can be referenced in the configuration file, using Go&#39;s standard format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;{{ .Envs.FRP_SERVER_ADDR }}&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh&#34;&#xA;type = &#34;tcp&#34;&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;remotePort = &#34;{{ .Envs.FRP_SSH_REMOTE_PORT }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the config above, variables can be passed into &lt;code&gt;frpc&lt;/code&gt; program like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export FRP_SERVER_ADDR=x.x.x.x&#xA;export FRP_SSH_REMOTE_PORT=6000&#xA;./frpc -c ./frpc.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;frpc&lt;/code&gt; will render configuration file template using OS environment variables. Remember to prefix your reference with &lt;code&gt;.Envs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Split Configures Into Different Files&lt;/h3&gt; &#xA;&lt;p&gt;You can split multiple proxy configs into different files and include them in the main file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;includes = [&#34;./confd/*.toml&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# ./confd/test.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh&#34;&#xA;type = &#34;tcp&#34;&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 22&#xA;remotePort = 6000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;Check frp&#39;s status and proxies&#39; statistics information by Dashboard.&lt;/p&gt; &#xA;&lt;p&gt;Configure a port for dashboard to enable this feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# The default value is 127.0.0.1. Change it to 0.0.0.0 when you want to access it from a public network.&#xA;webServer.addr = &#34;0.0.0.0&#34;&#xA;webServer.port = 7500&#xA;# dashboard&#39;s username and password are both optional&#xA;webServer.user = &#34;admin&#34;&#xA;webServer.password = &#34;admin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;code&gt;http://[serverAddr]:7500&lt;/code&gt; to see the dashboard, with username and password both being &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can use HTTPS port by using your domains wildcard or normal SSL certificate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;webServer.port = 7500&#xA;# dashboard&#39;s username and password are both optional&#xA;webServer.user = &#34;admin&#34;&#xA;webServer.password = &#34;admin&#34;&#xA;webServer.tls.certFile = &#34;server.crt&#34;&#xA;webServer.tls.keyFile = &#34;server.key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;code&gt;https://[serverAddr]:7500&lt;/code&gt; to see the dashboard in secure HTTPS connection, with username and password both being &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/dashboard.png&#34; alt=&#34;dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Client Admin UI&lt;/h3&gt; &#xA;&lt;p&gt;The Client Admin UI helps you check and manage frpc&#39;s configuration.&lt;/p&gt; &#xA;&lt;p&gt;Configure an address for admin UI to enable this feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;webServer.addr = &#34;127.0.0.1&#34;&#xA;webServer.port = 7400&#xA;webServer.user = &#34;admin&#34;&#xA;webServer.password = &#34;admin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;code&gt;http://127.0.0.1:7400&lt;/code&gt; to see admin UI, with username and password both being &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Monitor&lt;/h3&gt; &#xA;&lt;p&gt;When web server is enabled, frps will save monitor data in cache for 7 days. It will be cleared after process restart.&lt;/p&gt; &#xA;&lt;p&gt;Prometheus is also supported.&lt;/p&gt; &#xA;&lt;h4&gt;Prometheus&lt;/h4&gt; &#xA;&lt;p&gt;Enable dashboard first, then configure &lt;code&gt;enablePrometheus = true&lt;/code&gt; in &lt;code&gt;frps.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;http://{dashboard_addr}/metrics&lt;/code&gt; will provide prometheus monitor data.&lt;/p&gt; &#xA;&lt;h3&gt;Authenticating the Client&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 authentication methods to authenticate frpc with frps.&lt;/p&gt; &#xA;&lt;p&gt;You can decide which one to use by configuring &lt;code&gt;auth.method&lt;/code&gt; in &lt;code&gt;frpc.toml&lt;/code&gt; and &lt;code&gt;frps.toml&lt;/code&gt;, the default one is token.&lt;/p&gt; &#xA;&lt;p&gt;Configuring &lt;code&gt;auth.additionalScopes = [&#34;HeartBeats&#34;]&lt;/code&gt; will use the configured authentication method to add and validate authentication on every heartbeat between frpc and frps.&lt;/p&gt; &#xA;&lt;p&gt;Configuring &lt;code&gt;auth.additionalScopes = [&#34;NewWorkConns&#34;]&lt;/code&gt; will do the same for every new work connection between frpc and frps.&lt;/p&gt; &#xA;&lt;h4&gt;Token Authentication&lt;/h4&gt; &#xA;&lt;p&gt;When specifying &lt;code&gt;auth.method = &#34;token&#34;&lt;/code&gt; in &lt;code&gt;frpc.toml&lt;/code&gt; and &lt;code&gt;frps.toml&lt;/code&gt; - token based authentication will be used.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to specify the same &lt;code&gt;auth.token&lt;/code&gt; in &lt;code&gt;frps.toml&lt;/code&gt; and &lt;code&gt;frpc.toml&lt;/code&gt; for frpc to pass frps validation&lt;/p&gt; &#xA;&lt;h4&gt;OIDC Authentication&lt;/h4&gt; &#xA;&lt;p&gt;When specifying &lt;code&gt;auth.method = &#34;oidc&#34;&lt;/code&gt; in &lt;code&gt;frpc.toml&lt;/code&gt; and &lt;code&gt;frps.toml&lt;/code&gt; - OIDC based authentication will be used.&lt;/p&gt; &#xA;&lt;p&gt;OIDC stands for OpenID Connect, and the flow used is called &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#section-4.4&#34;&gt;Client Credentials Grant&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use this authentication type - configure &lt;code&gt;frpc.toml&lt;/code&gt; and &lt;code&gt;frps.toml&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;auth.method = &#34;oidc&#34;&#xA;auth.oidc.issuer = &#34;https://example-oidc-issuer.com/&#34;&#xA;auth.oidc.audience = &#34;https://oidc-audience.com/.default&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;auth.method = &#34;oidc&#34;&#xA;auth.oidc.clientID = &#34;98692467-37de-409a-9fac-bb2585826f18&#34; # Replace with OIDC client ID&#xA;auth.oidc.clientSecret = &#34;oidc_secret&#34;&#xA;auth.oidc.audience = &#34;https://oidc-audience.com/.default&#34;&#xA;auth.oidc.tokenEndpointURL = &#34;https://example-oidc-endpoint.com/oauth2/v2.0/token&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encryption and Compression&lt;/h3&gt; &#xA;&lt;p&gt;The features are off by default. You can turn on encryption and/or compression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh&#34;&#xA;type = &#34;tcp&#34;&#xA;localPort = 22&#xA;remotePort = 6000&#xA;transport.useEncryption = true&#xA;transport.useCompression = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TLS&lt;/h4&gt; &#xA;&lt;p&gt;Since v0.50.0, the default value of &lt;code&gt;transport.tls.enable&lt;/code&gt; and &lt;code&gt;transport.tls.disableCustomTLSFirstByte&lt;/code&gt; has been changed to true, and tls is enabled by default.&lt;/p&gt; &#xA;&lt;p&gt;For port multiplexing, frp sends a first byte &lt;code&gt;0x17&lt;/code&gt; to dial a TLS connection. This only takes effect when you set &lt;code&gt;transport.tls.disableCustomTLSFirstByte&lt;/code&gt; to false.&lt;/p&gt; &#xA;&lt;p&gt;To &lt;strong&gt;enforce&lt;/strong&gt; &lt;code&gt;frps&lt;/code&gt; to only accept TLS connections - configure &lt;code&gt;transport.tls.force = true&lt;/code&gt; in &lt;code&gt;frps.toml&lt;/code&gt;. &lt;strong&gt;This is optional.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;frpc&lt;/code&gt; TLS settings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;transport.tls.enable = true&#xA;transport.tls.certFile = &#34;certificate.crt&#34;&#xA;transport.tls.keyFile = &#34;certificate.key&#34;&#xA;transport.tls.trustedCaFile = &#34;ca.crt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;frps&lt;/code&gt; TLS settings:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;transport.tls.force = true&#xA;transport.tls.certFile = &#34;certificate.crt&#34;&#xA;transport.tls.keyFile = &#34;certificate.key&#34;&#xA;transport.tls.trustedCaFile = &#34;ca.crt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need &lt;strong&gt;a root CA cert&lt;/strong&gt; and &lt;strong&gt;at least one SSL/TLS certificate&lt;/strong&gt;. It &lt;strong&gt;can&lt;/strong&gt; be self-signed or regular (such as Let&#39;s Encrypt or another SSL/TLS certificate provider).&lt;/p&gt; &#xA;&lt;p&gt;If you using &lt;code&gt;frp&lt;/code&gt; via IP address and not hostname, make sure to set the appropriate IP address in the Subject Alternative Name (SAN) area when generating SSL/TLS Certificates.&lt;/p&gt; &#xA;&lt;p&gt;Given an example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prepare openssl config file. It exists at &lt;code&gt;/etc/pki/tls/openssl.cnf&lt;/code&gt; in Linux System and &lt;code&gt;/System/Library/OpenSSL/openssl.cnf&lt;/code&gt; in MacOS, and you can copy it to current path, like &lt;code&gt;cp /etc/pki/tls/openssl.cnf ./my-openssl.cnf&lt;/code&gt;. If not, you can build it by yourself, like:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat &amp;gt; my-openssl.cnf &amp;lt;&amp;lt; EOF&#xA;[ ca ]&#xA;default_ca = CA_default&#xA;[ CA_default ]&#xA;x509_extensions = usr_cert&#xA;[ req ]&#xA;default_bits        = 2048&#xA;default_md          = sha256&#xA;default_keyfile     = privkey.pem&#xA;distinguished_name  = req_distinguished_name&#xA;attributes          = req_attributes&#xA;x509_extensions     = v3_ca&#xA;string_mask         = utf8only&#xA;[ req_distinguished_name ]&#xA;[ req_attributes ]&#xA;[ usr_cert ]&#xA;basicConstraints       = CA:FALSE&#xA;nsComment              = &#34;OpenSSL Generated Certificate&#34;&#xA;subjectKeyIdentifier   = hash&#xA;authorityKeyIdentifier = keyid,issuer&#xA;[ v3_ca ]&#xA;subjectKeyIdentifier   = hash&#xA;authorityKeyIdentifier = keyid:always,issuer&#xA;basicConstraints       = CA:true&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build ca certificates:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl genrsa -out ca.key 2048&#xA;openssl req -x509 -new -nodes -key ca.key -subj &#34;/CN=example.ca.com&#34; -days 5000 -out ca.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build frps certificates:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl genrsa -out server.key 2048&#xA;&#xA;openssl req -new -sha256 -key server.key \&#xA;    -subj &#34;/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=server.com&#34; \&#xA;    -reqexts SAN \&#xA;    -config &amp;lt;(cat my-openssl.cnf &amp;lt;(printf &#34;\n[SAN]\nsubjectAltName=DNS:localhost,IP:127.0.0.1,DNS:example.server.com&#34;)) \&#xA;    -out server.csr&#xA;&#xA;openssl x509 -req -days 365 -sha256 \&#xA;&#x9;-in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial \&#xA;&#x9;-extfile &amp;lt;(printf &#34;subjectAltName=DNS:localhost,IP:127.0.0.1,DNS:example.server.com&#34;) \&#xA;&#x9;-out server.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build frpc certificates：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl genrsa -out client.key 2048&#xA;openssl req -new -sha256 -key client.key \&#xA;    -subj &#34;/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=client.com&#34; \&#xA;    -reqexts SAN \&#xA;    -config &amp;lt;(cat my-openssl.cnf &amp;lt;(printf &#34;\n[SAN]\nsubjectAltName=DNS:client.com,DNS:example.client.com&#34;)) \&#xA;    -out client.csr&#xA;&#xA;openssl x509 -req -days 365 -sha256 \&#xA;    -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial \&#xA;&#x9;-extfile &amp;lt;(printf &#34;subjectAltName=DNS:client.com,DNS:example.client.com&#34;) \&#xA;&#x9;-out client.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hot-Reloading frpc configuration&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;webServer&lt;/code&gt; fields are required for enabling HTTP API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;webServer.addr = &#34;127.0.0.1&#34;&#xA;webServer.port = 7400&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run command &lt;code&gt;frpc reload -c ./frpc.toml&lt;/code&gt; and wait for about 10 seconds to let &lt;code&gt;frpc&lt;/code&gt; create or update or remove proxies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that global client parameters won&#39;t be modified except &#39;start&#39;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can run command &lt;code&gt;frpc verify -c ./frpc.toml&lt;/code&gt; before reloading to check if there are config errors.&lt;/p&gt; &#xA;&lt;h3&gt;Get proxy status from client&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;frpc status -c ./frpc.toml&lt;/code&gt; to get status of all proxies. The &lt;code&gt;webServer&lt;/code&gt; fields are required for enabling HTTP API.&lt;/p&gt; &#xA;&lt;h3&gt;Only allowing certain ports on the server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;allowPorts&lt;/code&gt; in &lt;code&gt;frps.toml&lt;/code&gt; is used to avoid abuse of ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;allowPorts = [&#xA;  { start = 2000, end = 3000 },&#xA;  { single = 3001 },&#xA;  { single = 3003 },&#xA;  { start = 4000, end = 50000 }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Port Reuse&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;vhostHTTPPort&lt;/code&gt; and &lt;code&gt;vhostHTTPSPort&lt;/code&gt; in frps can use same port with &lt;code&gt;bindPort&lt;/code&gt;. frps will detect the connection&#39;s protocol and handle it correspondingly.&lt;/p&gt; &#xA;&lt;p&gt;What you need to pay attention to is that if you want to configure &lt;code&gt;vhostHTTPSPort&lt;/code&gt; and &lt;code&gt;bindPort&lt;/code&gt; to the same port, you need to first set &lt;code&gt;transport.tls.disableCustomTLSFirstByte&lt;/code&gt; to false.&lt;/p&gt; &#xA;&lt;p&gt;We would like to try to allow multiple proxies bind a same remote port with different protocols in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Bandwidth Limit&lt;/h3&gt; &#xA;&lt;h4&gt;For Each Proxy&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;ssh&#34;&#xA;type = &#34;tcp&#34;&#xA;localPort = 22&#xA;remotePort = 6000&#xA;transport.bandwidthLimit = &#34;1MB&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set &lt;code&gt;transport.bandwidthLimit&lt;/code&gt; in each proxy&#39;s configure to enable this feature. Supported units are &lt;code&gt;MB&lt;/code&gt; and &lt;code&gt;KB&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;transport.bandwidthLimitMode&lt;/code&gt; to &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; to limit bandwidth on the client or server side. Default is &lt;code&gt;client&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TCP Stream Multiplexing&lt;/h3&gt; &#xA;&lt;p&gt;frp supports tcp stream multiplexing since v0.10.0 like HTTP2 Multiplexing, in which case all logic connections to the same frpc are multiplexed into the same TCP connection.&lt;/p&gt; &#xA;&lt;p&gt;You can disable this feature by modify &lt;code&gt;frps.toml&lt;/code&gt; and &lt;code&gt;frpc.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml and frpc.toml, must be same&#xA;transport.tcpMux = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Support KCP Protocol&lt;/h3&gt; &#xA;&lt;p&gt;KCP is a fast and reliable protocol that can achieve the transmission effect of a reduction of the average latency by 30% to 40% and reduction of the maximum delay by a factor of three, at the cost of 10% to 20% more bandwidth wasted than TCP.&lt;/p&gt; &#xA;&lt;p&gt;KCP mode uses UDP as the underlying transport. Using KCP in frp:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable KCP in frps:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;bindPort = 7000&#xA;# Specify a UDP port for KCP.&#xA;kcpBindPort = 7000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;kcpBindPort&lt;/code&gt; number can be the same number as &lt;code&gt;bindPort&lt;/code&gt;, since &lt;code&gt;bindPort&lt;/code&gt; field specifies a TCP port.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;frpc.toml&lt;/code&gt; to use KCP to connect to frps:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;# Same as the &#39;kcpBindPort&#39; in frps.toml&#xA;serverPort = 7000&#xA;transport.protocol = &#34;kcp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Support QUIC Protocol&lt;/h3&gt; &#xA;&lt;p&gt;QUIC is a new multiplexed transport built on top of UDP.&lt;/p&gt; &#xA;&lt;p&gt;Using QUIC in frp:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable QUIC in frps:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;bindPort = 7000&#xA;# Specify a UDP port for QUIC.&#xA;quicBindPort = 7000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;quicBindPort&lt;/code&gt; number can be the same number as &lt;code&gt;bindPort&lt;/code&gt;, since &lt;code&gt;bindPort&lt;/code&gt; field specifies a TCP port.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;frpc.toml&lt;/code&gt; to use QUIC to connect to frps:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;# Same as the &#39;quicBindPort&#39; in frps.toml&#xA;serverPort = 7000&#xA;transport.protocol = &#34;quic&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connection Pooling&lt;/h3&gt; &#xA;&lt;p&gt;By default, frps creates a new frpc connection to the backend service upon a user request. With connection pooling, frps keeps a certain number of pre-established connections, reducing the time needed to establish a connection.&lt;/p&gt; &#xA;&lt;p&gt;This feature is suitable for a large number of short connections.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure the limit of pool count each proxy can use in &lt;code&gt;frps.toml&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;transport.maxPoolCount = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Enable and specify the number of connection pool:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;transport.poolCount = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load balancing&lt;/h3&gt; &#xA;&lt;p&gt;Load balancing is supported by &lt;code&gt;group&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature is only available for types &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;tcpmux&lt;/code&gt; now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;test1&#34;&#xA;type = &#34;tcp&#34;&#xA;localPort = 8080&#xA;remotePort = 80&#xA;loadBalancer.group = &#34;web&#34;&#xA;loadBalancer.groupKey = &#34;123&#34;&#xA;&#xA;[[proxies]]&#xA;name = &#34;test2&#34;&#xA;type = &#34;tcp&#34;&#xA;localPort = 8081&#xA;remotePort = 80&#xA;loadBalancer.group = &#34;web&#34;&#xA;loadBalancer.groupKey = &#34;123&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;loadBalancer.groupKey&lt;/code&gt; is used for authentication.&lt;/p&gt; &#xA;&lt;p&gt;Connections to port 80 will be dispatched to proxies in the same group randomly.&lt;/p&gt; &#xA;&lt;p&gt;For type &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;remotePort&lt;/code&gt; in the same group should be the same.&lt;/p&gt; &#xA;&lt;p&gt;For type &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;customDomains&lt;/code&gt;, &lt;code&gt;subdomain&lt;/code&gt;, &lt;code&gt;locations&lt;/code&gt; should be the same.&lt;/p&gt; &#xA;&lt;h3&gt;Service Health Check&lt;/h3&gt; &#xA;&lt;p&gt;Health check feature can help you achieve high availability with load balancing.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;healthCheck.type = &#34;tcp&#34;&lt;/code&gt; or &lt;code&gt;healthCheck.type = &#34;http&#34;&lt;/code&gt; to enable health check.&lt;/p&gt; &#xA;&lt;p&gt;With health check type &lt;strong&gt;tcp&lt;/strong&gt;, the service port will be pinged (TCPing):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;test1&#34;&#xA;type = &#34;tcp&#34;&#xA;localPort = 22&#xA;remotePort = 6000&#xA;# Enable TCP health check&#xA;healthCheck.type = &#34;tcp&#34;&#xA;# TCPing timeout seconds&#xA;healthCheck.timeoutSeconds = 3&#xA;# If health check failed 3 times in a row, the proxy will be removed from frps&#xA;healthCheck.maxFailed = 3&#xA;# A health check every 10 seconds&#xA;healthCheck.intervalSeconds = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With health check type &lt;strong&gt;http&lt;/strong&gt;, an HTTP request will be sent to the service and an HTTP 2xx OK response is expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;http&#34;&#xA;localIP = &#34;127.0.0.1&#34;&#xA;localPort = 80&#xA;customDomains = [&#34;test.example.com&#34;]&#xA;# Enable HTTP health check&#xA;healthCheck.type = &#34;http&#34;&#xA;# frpc will send a GET request to &#39;/status&#39;&#xA;# and expect an HTTP 2xx OK response&#xA;healthCheck.path = &#34;/status&#34;&#xA;healthCheck.timeoutSeconds = 3&#xA;healthCheck.maxFailed = 3&#xA;healthCheck.intervalSeconds = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rewriting the HTTP Host Header&lt;/h3&gt; &#xA;&lt;p&gt;By default frp does not modify the tunneled HTTP requests at all as it&#39;s a byte-for-byte copy.&lt;/p&gt; &#xA;&lt;p&gt;However, speaking of web servers and HTTP requests, your web server might rely on the &lt;code&gt;Host&lt;/code&gt; HTTP header to determine the website to be accessed. frp can rewrite the &lt;code&gt;Host&lt;/code&gt; header when forwarding the HTTP requests, with the &lt;code&gt;hostHeaderRewrite&lt;/code&gt; field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 80&#xA;customDomains = [&#34;test.example.com&#34;]&#xA;hostHeaderRewrite = &#34;dev.example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The HTTP request will have the &lt;code&gt;Host&lt;/code&gt; header rewritten to &lt;code&gt;Host: dev.example.com&lt;/code&gt; when it reaches the actual web server, although the request from the browser probably has &lt;code&gt;Host: test.example.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting other HTTP Headers&lt;/h3&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;Host&lt;/code&gt;, You can override other HTTP request and response headers with proxy type &lt;code&gt;http&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 80&#xA;customDomains = [&#34;test.example.com&#34;]&#xA;hostHeaderRewrite = &#34;dev.example.com&#34;&#xA;requestHeaders.set.x-from-where = &#34;frp&#34;&#xA;responseHeaders.set.foo = &#34;bar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, it will set header &lt;code&gt;x-from-where: frp&lt;/code&gt; in the HTTP request and &lt;code&gt;foo: bar&lt;/code&gt; in the HTTP response.&lt;/p&gt; &#xA;&lt;h3&gt;Get Real IP&lt;/h3&gt; &#xA;&lt;h4&gt;HTTP X-Forwarded-For&lt;/h4&gt; &#xA;&lt;p&gt;This feature is for &lt;code&gt;http&lt;/code&gt; proxies or proxies with the &lt;code&gt;https2http&lt;/code&gt; and &lt;code&gt;https2https&lt;/code&gt; plugins enabled.&lt;/p&gt; &#xA;&lt;p&gt;You can get user&#39;s real IP from HTTP request headers &lt;code&gt;X-Forwarded-For&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Proxy Protocol&lt;/h4&gt; &#xA;&lt;p&gt;frp supports Proxy Protocol to send user&#39;s real IP to local services. It support all types except UDP.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example for https service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;https&#34;&#xA;localPort = 443&#xA;customDomains = [&#34;test.example.com&#34;]&#xA;&#xA;# now v1 and v2 are supported&#xA;transport.proxyProtocolVersion = &#34;v2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enable Proxy Protocol support in nginx to expose user&#39;s real IP in HTTP header &lt;code&gt;X-Real-IP&lt;/code&gt;, and then read &lt;code&gt;X-Real-IP&lt;/code&gt; header in your web service for the real IP.&lt;/p&gt; &#xA;&lt;h3&gt;Require HTTP Basic Auth (Password) for Web Services&lt;/h3&gt; &#xA;&lt;p&gt;Anyone who can guess your tunnel URL can access your local web server unless you protect it with a password.&lt;/p&gt; &#xA;&lt;p&gt;This enforces HTTP Basic Auth on all requests with the username and password specified in frpc&#39;s configure file.&lt;/p&gt; &#xA;&lt;p&gt;It can only be enabled when proxy type is http.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 80&#xA;customDomains = [&#34;test.example.com&#34;]&#xA;httpUser = &#34;abc&#34;&#xA;httpPassword = &#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit &lt;code&gt;http://test.example.com&lt;/code&gt; in the browser and now you are prompted to enter the username and password.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Subdomain Names&lt;/h3&gt; &#xA;&lt;p&gt;It is convenient to use &lt;code&gt;subdomain&lt;/code&gt; configure for http and https types when many people share one frps server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;subDomainHost = &#34;frps.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resolve &lt;code&gt;*.frps.com&lt;/code&gt; to the frps server&#39;s IP. This is usually called a Wildcard DNS record.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 80&#xA;subdomain = &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can visit your web service on &lt;code&gt;test.frps.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that if &lt;code&gt;subdomainHost&lt;/code&gt; is not empty, &lt;code&gt;customDomains&lt;/code&gt; should not be the subdomain of &lt;code&gt;subdomainHost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;URL Routing&lt;/h3&gt; &#xA;&lt;p&gt;frp supports forwarding HTTP requests to different backend web services by url routing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;locations&lt;/code&gt; specifies the prefix of URL used for routing. frps first searches for the most specific prefix location given by literal strings regardless of the listed order.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;web01&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 80&#xA;customDomains = [&#34;web.example.com&#34;]&#xA;locations = [&#34;/&#34;]&#xA;&#xA;[[proxies]]&#xA;name = &#34;web02&#34;&#xA;type = &#34;http&#34;&#xA;localPort = 81&#xA;customDomains = [&#34;web.example.com&#34;]&#xA;locations = [&#34;/news&#34;, &#34;/about&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP requests with URL prefix &lt;code&gt;/news&lt;/code&gt; or &lt;code&gt;/about&lt;/code&gt; will be forwarded to &lt;strong&gt;web02&lt;/strong&gt; and other requests to &lt;strong&gt;web01&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TCP Port Multiplexing&lt;/h3&gt; &#xA;&lt;p&gt;frp supports receiving TCP sockets directed to different proxies on a single port on frps, similar to &lt;code&gt;vhostHTTPPort&lt;/code&gt; and &lt;code&gt;vhostHTTPSPort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The only supported TCP port multiplexing method available at the moment is &lt;code&gt;httpconnect&lt;/code&gt; - HTTP CONNECT tunnel.&lt;/p&gt; &#xA;&lt;p&gt;When setting &lt;code&gt;tcpmuxHTTPConnectPort&lt;/code&gt; to anything other than 0 in frps, frps will listen on this port for HTTP CONNECT requests.&lt;/p&gt; &#xA;&lt;p&gt;The host of the HTTP CONNECT request will be used to match the proxy in frps. Proxy hosts can be configured in frpc by configuring &lt;code&gt;customDomains&lt;/code&gt; and / or &lt;code&gt;subdomain&lt;/code&gt; under &lt;code&gt;tcpmux&lt;/code&gt; proxies, when &lt;code&gt;multiplexer = &#34;httpconnect&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;bindPort = 7000&#xA;tcpmuxHTTPConnectPort = 1337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;&#xA;[[proxies]]&#xA;name = &#34;proxy1&#34;&#xA;type = &#34;tcpmux&#34;&#xA;multiplexer = &#34;httpconnect&#34;&#xA;customDomains = [&#34;test1&#34;]&#xA;localPort = 80&#xA;&#xA;[[proxies]]&#xA;name = &#34;proxy2&#34;&#xA;type = &#34;tcpmux&#34;&#xA;multiplexer = &#34;httpconnect&#34;&#xA;customDomains = [&#34;test2&#34;]&#xA;localPort = 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above configuration - frps can be contacted on port 1337 with a HTTP CONNECT header such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CONNECT test1 HTTP/1.1\r\n\r\n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the connection will be routed to &lt;code&gt;proxy1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting to frps via PROXY&lt;/h3&gt; &#xA;&lt;p&gt;frpc can connect to frps through proxy if you set OS environment variable &lt;code&gt;HTTP_PROXY&lt;/code&gt;, or if &lt;code&gt;transport.proxyURL&lt;/code&gt; is set in frpc.toml file.&lt;/p&gt; &#xA;&lt;p&gt;It only works when protocol is tcp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;serverAddr = &#34;x.x.x.x&#34;&#xA;serverPort = 7000&#xA;transport.proxyURL = &#34;http://user:pwd@192.168.1.128:8080&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Port range mapping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Added in v0.56.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can use the range syntax of Go template combined with the built-in &lt;code&gt;parseNumberRangePair&lt;/code&gt; function to achieve port range mapping.&lt;/p&gt; &#xA;&lt;p&gt;The following example, when run, will create 8 proxies named &lt;code&gt;test-6000, test-6001 ... test-6007&lt;/code&gt;, each mapping the remote port to the local port.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{- range $_, $v := parseNumberRangePair &#34;6000-6006,6007&#34; &#34;6000-6006,6007&#34; }}&#xA;[[proxies]]&#xA;name = &#34;tcp-{{ $v.First }}&#34;&#xA;type = &#34;tcp&#34;&#xA;localPort = {{ $v.First }}&#xA;remotePort = {{ $v.Second }}&#xA;{{- end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client Plugins&lt;/h3&gt; &#xA;&lt;p&gt;frpc only forwards requests to local TCP or UDP ports by default.&lt;/p&gt; &#xA;&lt;p&gt;Plugins are used for providing rich features. There are built-in plugins such as &lt;code&gt;unix_domain_socket&lt;/code&gt;, &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;socks5&lt;/code&gt;, &lt;code&gt;static_file&lt;/code&gt;, &lt;code&gt;http2https&lt;/code&gt;, &lt;code&gt;https2http&lt;/code&gt;, &lt;code&gt;https2https&lt;/code&gt; and you can see &lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/#example-usage&#34;&gt;example usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using plugin &lt;strong&gt;http_proxy&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frpc.toml&#xA;&#xA;[[proxies]]&#xA;name = &#34;http_proxy&#34;&#xA;type = &#34;tcp&#34;&#xA;remotePort = 6000&#xA;[proxies.plugin]&#xA;type = &#34;http_proxy&#34;&#xA;httpUser = &#34;abc&#34;&#xA;httpPassword = &#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;httpUser&lt;/code&gt; and &lt;code&gt;httpPassword&lt;/code&gt; are configuration parameters used in &lt;code&gt;http_proxy&lt;/code&gt; plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Server Manage Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/server_plugin.md&#34;&gt;document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Find more plugins in &lt;a href=&#34;https://github.com/gofrp/plugin&#34;&gt;gofrp/plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SSH Tunnel Gateway&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;added in v0.53.0&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;frp supports listening to an SSH port on the frps side and achieves TCP protocol proxying through the SSH -R protocol, without relying on frpc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# frps.toml&#xA;sshTunnelGateway.bindPort = 2200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running &lt;code&gt;./frps -c frps.toml&lt;/code&gt;, a private key file named &lt;code&gt;.autogen_ssh_key&lt;/code&gt; will be automatically created in the current working directory. This generated private key file will be used by the SSH server in frps.&lt;/p&gt; &#xA;&lt;p&gt;Executing the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -R :80:127.0.0.1:8080 v0@{frp address} -p 2200 tcp --proxy_name &#34;test-tcp&#34; --remote_port 9090&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sets up a proxy on frps that forwards the local 8080 service to the port 9090.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frp (via SSH) (Ctrl+C to quit)&#xA;&#xA;User:&#xA;ProxyName: test-tcp&#xA;Type: tcp&#xA;RemoteAddress: :9090&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frpc tcp --proxy_name &#34;test-tcp&#34; --local_ip 127.0.0.1 --local_port 8080 --remote_port 9090&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to this &lt;a href=&#34;https://raw.githubusercontent.com/fatedier/frp/dev/doc/ssh_tunnel_gateway.md&#34;&gt;document&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Releated Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gofrp/plugin&#34;&gt;gofrp/plugin&lt;/a&gt; - A repository for frp plugins that contains a variety of plugins implemented based on the frp extension mechanism, meeting the customization needs of different scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gofrp/tiny-frpc&#34;&gt;gofrp/tiny-frpc&lt;/a&gt; - A lightweight version of the frp client (around 3.5MB at minimum) implemented using the ssh protocol, supporting some of the most commonly used features, suitable for devices with limited resources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Interested in getting involved? We would like to help you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Take a look at our &lt;a href=&#34;https://github.com/fatedier/frp/issues&#34;&gt;issues list&lt;/a&gt; and consider sending a Pull Request to &lt;strong&gt;dev branch&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you want to add a new feature, please create an issue first to describe the new feature, as well as the implementation approach. Once a proposal is accepted, create an implementation of the new features and submit it as a pull request.&lt;/li&gt; &#xA; &lt;li&gt;Sorry for my poor English. Improvements for this document are welcome, even some typo fixes.&lt;/li&gt; &#xA; &lt;li&gt;If you have great ideas, send an email to &lt;a href=&#34;mailto:fatedier@gmail.com&#34;&gt;fatedier@gmail.com&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: We prefer you to give your advise in &lt;a href=&#34;https://github.com/fatedier/frp/issues&#34;&gt;issues&lt;/a&gt;, so others with a same question can search it quickly and we don&#39;t need to answer them repeatedly.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;If frp helps you a lot, you can support us by:&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support us by &lt;a href=&#34;https://github.com/sponsors/fatedier&#34;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can have your company&#39;s logo placed on README file of this project.&lt;/p&gt; &#xA;&lt;h3&gt;PayPal&lt;/h3&gt; &#xA;&lt;p&gt;Donate money by &lt;a href=&#34;https://www.paypal.me/fatedier&#34;&gt;PayPal&lt;/a&gt; to my account &lt;strong&gt;&lt;a href=&#34;mailto:fatedier@gmail.com&#34;&gt;fatedier@gmail.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>open-telemetry/opentelemetry-collector</title>
    <updated>2024-12-18T01:29:15Z</updated>
    <id>tag:github.com,2024-12-18:/open-telemetry/opentelemetry-collector</id>
    <link href="https://github.com/open-telemetry/opentelemetry-collector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenTelemetry Collector&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://opentelemetry.io/docs/collector/getting-started/&#34;&gt;Getting Started&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md&#34;&gt;Getting Involved&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://cloud-native.slack.com/archives/C01N6P7KR6W&#34;&gt;Getting In Touch&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector/actions/workflows/build-and-test.yml?query=branch%3Amain&#34;&gt; &lt;img alt=&#34;Build Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/open-telemetry/opentelemetry-collector/build-and-test.yml?branch=main&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/open-telemetry/opentelemetry-collector&#34;&gt; &lt;img alt=&#34;Go Report Card&#34; src=&#34;https://goreportcard.com/badge/github.com/open-telemetry/opentelemetry-collector?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-collector/branch/main/&#34;&gt; &lt;img alt=&#34;Codecov Status&#34; src=&#34;https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-collector?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector/releases&#34;&gt; &lt;img alt=&#34;GitHub release (latest by date including pre-releases)&#34; src=&#34;https://img.shields.io/github/v/release/open-telemetry/opentelemetry-collector?include_prereleases&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.bestpractices.dev/projects/8404&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/8404/badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:opentelemetry&#34;&gt; &lt;img alt=&#34;Fuzzing Status&#34; src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/opentelemetry.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/vision.md&#34;&gt;Vision&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://opentelemetry.io/docs/collector/configuration/&#34;&gt;Configuration&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://opentelemetry.io/docs/collector/internal-telemetry/#use-internal-telemetry-to-monitor-the-collector&#34;&gt;Monitoring&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/security-best-practices.md&#34;&gt;Security&lt;/a&gt; &amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://pkg.go.dev/go.opentelemetry.io/collector&#34;&gt;Package&lt;/a&gt; &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://opentelemetry.io/img/logos/opentelemetry-logo-nav.png&#34; alt=&#34;OpenTelemetry Icon&#34; width=&#34;45&#34; height=&#34;&#34;&gt; OpenTelemetry Collector&lt;/h1&gt; &#xA;&lt;p&gt;The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive, process and export telemetry data. In addition, it removes the need to run, operate and maintain multiple agents/collectors in order to support open-source telemetry data formats (e.g. Jaeger, Prometheus, etc.) to multiple open-source or commercial back-ends.&lt;/p&gt; &#xA;&lt;p&gt;Objectives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usable: Reasonable default configuration, supports popular protocols, runs and collects out of the box.&lt;/li&gt; &#xA; &lt;li&gt;Performant: Highly stable and performant under varying loads and configurations.&lt;/li&gt; &#xA; &lt;li&gt;Observable: An exemplar of an observable service.&lt;/li&gt; &#xA; &lt;li&gt;Extensible: Customizable without touching the core code.&lt;/li&gt; &#xA; &lt;li&gt;Unified: Single codebase, deployable as an agent or collector with support for traces, metrics and logs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The OpenTelemetry Collector SIG is present at the &lt;a href=&#34;https://cloud-native.slack.com/archives/C01N6P7KR6W&#34;&gt;#otel-collector&lt;/a&gt; channel on the CNCF Slack and &lt;a href=&#34;https://github.com/open-telemetry/community#implementation-sigs&#34;&gt;meets once a week&lt;/a&gt; via video calls. Everyone is invited to join those calls, which typically serves the following purposes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;meet the humans behind the project&lt;/li&gt; &#xA; &lt;li&gt;get an opinion about specific proposals&lt;/li&gt; &#xA; &lt;li&gt;look for a sponsor for a proposed component after trying already via GitHub and Slack&lt;/li&gt; &#xA; &lt;li&gt;get attention to a specific pull-request that got stuck and is difficult to discuss asynchronously&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Between 11 July 2024 and 09 January 2025, we&#39;ll have our video calls rotating between three time slots, in order to allow everyone to join at least once every three meetings. The rotation order is as follows:&lt;/p&gt; &#xA;&lt;p&gt;Tuesday:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dateful.com/convert/pst-pdt-pacific-time?t=1700&#34;&gt;17:00 PT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wednesday:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dateful.com/convert/pst-pdt-pacific-time?t=0900&#34;&gt;09:00 PT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dateful.com/convert/pst-pdt-pacific-time?t=0500&#34;&gt;05:00 PT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributors to the project are also welcome to have ad-hoc meetings for synchronous discussions about specific points. Post a note in #otel-collector on Slack inviting others, specifying the topic to be discussed. Unless there are strong reasons to keep the meeting private, please make it an open invitation for other contributors to join. Try also to identify who would be the other contributors interested on that topic and in which timezones they are.&lt;/p&gt; &#xA;&lt;p&gt;Remember that our source of truth is GitHub: every decision made via Slack or video calls has to be recorded in the relevant GitHub issue. Ideally, the agenda items from the meeting notes would include a link to the issue or pull request where a discussion is happening already. We acknowledge that not everyone can join Slack or the synchronous calls and don&#39;t want them to feel excluded.&lt;/p&gt; &#xA;&lt;h2&gt;Supported OTLP version&lt;/h2&gt; &#xA;&lt;p&gt;This code base is currently built against using OTLP protocol v1.3.1, considered Stable. &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-proto?tab=readme-ov-file#stability-definition&#34;&gt;See the OpenTelemetry Protocol Stability definition here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stability levels&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/component-stability.md&#34;&gt;Stability Levels and versioning&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;When used as a library, the OpenTelemetry Collector attempts to track the currently supported versions of Go, as &lt;a href=&#34;https://go.dev/doc/devel/release#policy&#34;&gt;defined by the Go team&lt;/a&gt;. Removing support for an unsupported Go version is not considered a breaking change.&lt;/p&gt; &#xA;&lt;p&gt;Support for Go versions on the OpenTelemetry Collector is updated as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will add build and tests steps for the new Go minor version.&lt;/li&gt; &#xA; &lt;li&gt;The first release after the release of a new Go minor version &lt;code&gt;N&lt;/code&gt; will remove support for Go version &lt;code&gt;N-2&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Official OpenTelemetry Collector distro binaries will be built with a release in the latest Go minor version series.&lt;/p&gt; &#xA;&lt;h2&gt;Verifying the images signatures&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] To verify a signed artifact or blob, first &lt;a href=&#34;https://docs.sigstore.dev/cosign/system_config/installation/&#34;&gt;install Cosign&lt;/a&gt;, then follow the instructions below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We are signing the images &lt;code&gt;otel/opentelemetry-collector&lt;/code&gt; and &lt;code&gt;otel/opentelemetry-collector-contrib&lt;/code&gt; using &lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;sigstore cosign&lt;/a&gt; tool and to verify the signatures you can run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cosign verify \&#xA;  --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/&amp;lt;RELEASE_TAG&amp;gt; \&#xA;  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \&#xA;  &amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;RELEASE_TAG&amp;gt;&lt;/code&gt;: is the release that you want to validate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;OTEL_COLLECTOR_IMAGE&amp;gt;&lt;/code&gt;: is the image that you want to check&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cosign verify --certificate-identity=https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0 --certificate-oidc-issuer=https://token.actions.githubusercontent.com ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0&#xA;&#xA;Verification for ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.98.0 --&#xA;The following checks were performed on each of these signatures:&#xA;  - The cosign claims were validated&#xA;  - Existence of the claims in the transparency log was verified offline&#xA;  - The code-signing certificate was verified using trusted certificate authority certificates&#xA;&#xA;[{&#34;critical&#34;:{&#34;identity&#34;:{&#34;docker-reference&#34;:&#34;ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib&#34;},&#34;image&#34;:{&#34;docker-manifest-digest&#34;:&#34;sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a&#34;},&#34;type&#34;:&#34;cosign container image signature&#34;},&#34;optional&#34;:{&#34;1.3.6.1.4.1.57264.1.1&#34;:&#34;https://token.actions.githubusercontent.com&#34;,&#34;1.3.6.1.4.1.57264.1.2&#34;:&#34;push&#34;,&#34;1.3.6.1.4.1.57264.1.3&#34;:&#34;9e20bf5c142e53070ccb8320a20315fffb41469e&#34;,&#34;1.3.6.1.4.1.57264.1.4&#34;:&#34;Release Contrib&#34;,&#34;1.3.6.1.4.1.57264.1.5&#34;:&#34;open-telemetry/opentelemetry-collector-releases&#34;,&#34;1.3.6.1.4.1.57264.1.6&#34;:&#34;refs/tags/v0.98.0&#34;,&#34;Bundle&#34;:{&#34;SignedEntryTimestamp&#34;:&#34;MEUCIQDdlmNeKXQrHnonwWiHLhLLwFDVDNoOBCn2sv85J9P8mgIgDQFssWJImo1hn38VlojvSCL7Qq5FMmtnGu0oLsNdOm8=&#34;,&#34;Payload&#34;:{&#34;body&#34;:&#34;eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FVUNJUURFbDV6N0diMWRVYkM5KzR4c1VvbDhMcWZNV2hiTzhkdEpwdExyMXhUNWZnSWdTdEwwN1I0ZDA5R2x0ZkV0azJVbmlJSlJhQVdrVDJNWDVtRXJNSlplc2pRPSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaG9ha05EUW5jeVowRjNTVUpCWjBsVlNETkNjRFZTYlVSU1VpOXphMWg0YVdWUFlrcFhSbmRrUjNNNGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJOTlZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkUwMVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVZyWlRsSE1ubHNjMjkzYVZZMmRFOVZSazlRVVhNd2NXY3hTSEV5WmpsVUx6UTJZbEFLU1ZSNE0ybFRkVXBhV0hGc1dEUldWV2Q1VlZndmNVazJhblZ2WlZSVEswaG5XVUoyYjBseVNERTFUeTltZEd0VmVtRlBRMEpwZDNkbloxbHZUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZHTkRrMUNrdDFNRWhqTm5rek1rNUNTVTFFU21ReVpuWkxNMHBCZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwWjFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpoQ1NHOUJaVUZDTWtGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUlVOUlFVRkJVVVJCUldOM1VsRkpaMWg2Y2xaME0xQjRkU3ROWVZKRkswUkdORzlGUldNMGVucHphSGR1VDJ4bGMwZGlla2xwYnpNS0wxWmpRMGxSUkZNelJ6QmlNemRhYUhRNGFITjJUSEozYkc1UFFXYzJWRXh1U1ZSS09HTjNkMVEzTW5sMVRVdFlUbFJCUzBKblozRm9hMnBQVUZGUlJBcEJkMDV1UVVSQ2EwRnFRWGxFUkZSYVFqQlRPVXBGYkZsSGJuTnZWVmhLYm04MU5Fc3ZUVUZUTlN0RFFVMU9lbWRqUWpWQ2JrRk5OMWhNUjBoV01HRnhDbVpaY21weFkyOXFia3RaUTAxSFRWRnFjalpUVGt0Q2NVaEtZVGwxTDBSTlQySlpNa0pKTVV0ME4yTnhOemhFT0VOcVMzQmFVblJoYnpadFVVMUVZMk1LUms5M2VYWnhWalJPVld0dlpsRTlQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=&#34;,&#34;integratedTime&#34;:1712809120,&#34;logIndex&#34;:84797936,&#34;logID&#34;:&#34;c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d&#34;}},&#34;Issuer&#34;:&#34;https://token.actions.githubusercontent.com&#34;,&#34;Subject&#34;:&#34;https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0&#34;,&#34;githubWorkflowName&#34;:&#34;Release Contrib&#34;,&#34;githubWorkflowRef&#34;:&#34;refs/tags/v0.98.0&#34;,&#34;githubWorkflowRepository&#34;:&#34;open-telemetry/opentelemetry-collector-releases&#34;,&#34;githubWorkflowSha&#34;:&#34;9e20bf5c142e53070ccb8320a20315fffb41469e&#34;,&#34;githubWorkflowTrigger&#34;:&#34;push&#34;}},{&#34;critical&#34;:{&#34;identity&#34;:{&#34;docker-reference&#34;:&#34;ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib&#34;},&#34;image&#34;:{&#34;docker-manifest-digest&#34;:&#34;sha256:5cea85bcbc734a3c0a641368e5a4ea9d31b472997e9f2feca57eeb4a147fcf1a&#34;},&#34;type&#34;:&#34;cosign container image signature&#34;},&#34;optional&#34;:{&#34;1.3.6.1.4.1.57264.1.1&#34;:&#34;https://token.actions.githubusercontent.com&#34;,&#34;1.3.6.1.4.1.57264.1.2&#34;:&#34;push&#34;,&#34;1.3.6.1.4.1.57264.1.3&#34;:&#34;9e20bf5c142e53070ccb8320a20315fffb41469e&#34;,&#34;1.3.6.1.4.1.57264.1.4&#34;:&#34;Release Contrib&#34;,&#34;1.3.6.1.4.1.57264.1.5&#34;:&#34;open-telemetry/opentelemetry-collector-releases&#34;,&#34;1.3.6.1.4.1.57264.1.6&#34;:&#34;refs/tags/v0.98.0&#34;,&#34;Bundle&#34;:{&#34;SignedEntryTimestamp&#34;:&#34;MEUCIQD1ehDnPO6fzoPIpeQ3KFuYHHBiX7RcEbpo9B2r7JAlzwIgZ1bsuQz7gAXbNU1IEdsTQgfAnRk3xVXO16GnKXM2sAQ=&#34;,&#34;Payload&#34;:{&#34;body&#34;:&#34;eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiIxMzVjY2RlN2YzZTNhYjU2NmFmYzJhYWU3MDljYmJlNmFhMDZlZWMzNDA2MWNkZjMyNmRhYzM2MmY0NWM4Yjg4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FUUNJRU92QXl0aE5RVGNvNHFMdG9GZUVOV0toNCtEK2I5SUxyYWhoa09WMmVBM0FpQjNEL2FpUGd1T05zUlB5alhaWk1hdnlCam0vMkVxNFNUMkZJWHozTnpyYWc9PSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVaHBSRU5EUW5jMlowRjNTVUpCWjBsVlZuRlRLMnd4WXpoMWVFUktOWEppZDAxMlVuaDBSR3hXVW1nMGQwTm5XVWxMYjFwSmVtb3dSVUYzVFhjS1RucEZWazFDVFVkQk1WVkZRMmhOVFdNeWJHNWpNMUoyWTIxVmRWcEhWakpOVWpSM1NFRlpSRlpSVVVSRmVGWjZZVmRrZW1SSE9YbGFVekZ3WW01U2JBcGpiVEZzV2tkc2FHUkhWWGRJYUdOT1RXcFJkMDVFUlhoTlJGRjRUMFJSZVZkb1kwNU5hbEYzVGtSRmVFMUVVWGxQUkZGNVYycEJRVTFHYTNkRmQxbElDa3R2V2tsNmFqQkRRVkZaU1V0dldrbDZhakJFUVZGalJGRm5RVVYyWlRCdGJrRkdRVzl1TVZoUGRIVlRMMXBNT0djeE5YUlJkVmxPTmtRemVUUlBWM0FLT1ZSTFMwUlVkRkJHU2xST1ZrWlJkVTlKUWs1bVJqWk1ORTlGYkd4dlZuUndaSE5uYjB0NVZGTnlPR3hTV1c1S1JIRlBRMEpwTUhkbloxbHdUVUUwUndwQk1WVmtSSGRGUWk5M1VVVkJkMGxJWjBSQlZFSm5UbFpJVTFWRlJFUkJTMEpuWjNKQ1owVkdRbEZqUkVGNlFXUkNaMDVXU0ZFMFJVWm5VVlZDSzFkSENuVmtlRE5IZUcxS1RWUkpUVVJyYW13clJtdzFXRzkzZDBoM1dVUldVakJxUWtKbmQwWnZRVlV6T1ZCd2VqRlphMFZhWWpWeFRtcHdTMFpYYVhocE5Ga0tXa1E0ZDJkWldVZEJNVlZrUlZGRlFpOTNVamhOU0hGSFpVZG9NR1JJUW5wUGFUaDJXakpzTUdGSVZtbE1iVTUyWWxNNWRtTkhWblZNV0ZKc1lrZFdkQXBhV0ZKNVpWTTVkbU5IVm5Wa1IxWnpXbGN4YkdSSVNqVk1WMDUyWWtkNGJGa3pVblpqYVRGNVdsZDRiRmxZVG14amVUaDFXakpzTUdGSVZtbE1NMlIyQ21OdGRHMWlSemt6WTNrNWFWbFlUbXhNV0Vwc1lrZFdhR015VlhWbFYwWjBZa1ZDZVZwWFducE1NMUpvV2pOTmRtUnFRWFZQVkdkMVRVUkJOVUpuYjNJS1FtZEZSVUZaVHk5TlFVVkNRa04wYjJSSVVuZGplbTkyVEROU2RtRXlWblZNYlVacVpFZHNkbUp1VFhWYU1td3dZVWhXYVdSWVRteGpiVTUyWW01U2JBcGlibEYxV1RJNWRFMUNTVWREYVhOSFFWRlJRbWMzT0hkQlVVbEZRa2hDTVdNeVozZE9aMWxMUzNkWlFrSkJSMFIyZWtGQ1FYZFJiMDlYVlhsTlIwcHRDazVYVFhoT1JFcHNUbFJOZDA1NlFtcFpNa2swVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCWkVKbmIzSkNaMFZGUVZsUEwwMUJSVVVLUWtFNVUxcFhlR3haV0U1c1NVVk9kbUp1VW5saFYwbDNVRkZaUzB0M1dVSkNRVWRFZG5wQlFrSlJVWFppTTBKc1lta3hNRnBYZUd4aVYxWXdZMjVyZGdwaU0wSnNZbTVTYkdKSFZuUmFXRko1WlZNeGFtSXllSE5hVjA0d1lqTkpkR050Vm5OYVYwWjZXbGhOZDBoM1dVdExkMWxDUWtGSFJIWjZRVUpDWjFGU0NtTnRWbTFqZVRrd1dWZGtla3d6V1hkTWFtczBUR3BCZDA5M1dVdExkMWxDUWtGSFJIWjZRVUpEUVZGMFJFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVUtURzFHYW1SSGJIWmliazExV2pKc01HRklWbWxrV0U1c1kyMU9kbUp1VW14aWJsRjFXVEk1ZEUxSlIwbENaMjl5UW1kRlJVRlpUeTlOUVVWS1FraHZUUXBsUjJnd1pFaENlazlwT0haYU1td3dZVWhXYVV4dFRuWmlVemwyWTBkV2RVeFlVbXhpUjFaMFdsaFNlV1ZUT1haalIxWjFaRWRXYzFwWE1XeGtTRW8xQ2t4WFRuWmlSM2hzV1ROU2RtTnBNWGxhVjNoc1dWaE9iR041T0hWYU1td3dZVWhXYVV3elpIWmpiWFJ0WWtjNU0yTjVPV2xaV0U1c1RGaEtiR0pIVm1nS1l6SlZkV1ZYUm5SaVJVSjVXbGRhZWt3elVtaGFNMDEyWkdwQmRVOVVaM1ZOUkVFMFFtZHZja0puUlVWQldVOHZUVUZGUzBKRGIwMUxSR3hzVFdwQ2FRcGFhbFpxVFZSUmVWcFVWWHBOUkdOM1dUSk9hVTlFVFhsTlIwVjVUVVJOZUU1WFdtMWFiVWt3VFZSUk1rOVhWWGRJVVZsTFMzZFpRa0pCUjBSMmVrRkNDa04zVVZCRVFURnVZVmhTYjJSWFNYUmhSemw2WkVkV2EwMUdTVWREYVhOSFFWRlJRbWMzT0hkQlVYZEZVa0Y0UTJGSVVqQmpTRTAyVEhrNWJtRllVbThLWkZkSmRWa3lPWFJNTWpsM1dsYzBkR1JIVm5OYVZ6RnNaRWhLTlV3eU9YZGFWelV3V2xkNGJHSlhWakJqYm10MFdUSTVjMkpIVm1wa1J6bDVURmhLYkFwaVIxWm9ZekpXZWsxRVowZERhWE5IUVZGUlFtYzNPSGRCVVRCRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFJOZWtsM0NsbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCYUVKbmIzSkNaMFZGUVZsUEwwMUJSVTlDUWsxTlJWaEtiRnB1VFhaa1IwWnVZM2s1TWsxRE5EVUtUME0wZDAxQ2EwZERhWE5IUVZGUlFtYzNPSGRCVVRoRlEzZDNTazVFUVhkTmFsVjZUbXBqTWsxRVJVZERhWE5IUVZGUlFtYzNPSGRCVWtGRlNYZDNhQXBoU0ZJd1kwaE5Oa3g1T1c1aFdGSnZaRmRKZFZreU9YUk1NamwzV2xjMGRHUkhWbk5hVnpGc1pFaEtOVTFDWjBkRGFYTkhRVkZSUW1jM09IZEJVa1ZGQ2tObmQwbE9SR3MxVDFSbmQwMUVTWGRuV1hOSFEybHpSMEZSVVVKbk56aDNRVkpKUldaUmVEZGhTRkl3WTBoTk5reDVPVzVoV0ZKdlpGZEpkVmt5T1hRS1RESTVkMXBYTkhSa1IxWnpXbGN4YkdSSVNqVk1NamwzV2xjMU1GcFhlR3hpVjFZd1kyNXJkRmt5T1hOaVIxWnFaRWM1ZVV4WVNteGlSMVpvWXpKV2VncE1lVFZ1WVZoU2IyUlhTWFprTWpsNVlUSmFjMkl6WkhwTU0wcHNZa2RXYUdNeVZYUlpNamwxWkVoS2NGbHBOVFZaVnpGelVVaEtiRnB1VFhaa1IwWnVDbU41T1RKTlF6UTFUME0wZDAxRVowZERhWE5IUVZGUlFtYzNPSGRCVWsxRlMyZDNiMDlYVlhsTlIwcHRUbGROZUU1RVNteE9WRTEzVG5wQ2Fsa3lTVFFLVFhwSmQxbFVTWGROZWtVeFdtMWFiVmxxVVhoT1JGazFXbFJCVlVKbmIzSkNaMFZGUVZsUEwwMUJSVlZDUVZsTlFraENNV015WjNka1VWbExTM2RaUWdwQ1FVZEVkbnBCUWtaUlVtNUVSMVp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJZak5DYkdKcE1UQmFWM2hzWWxkV01HTnVhM1ppTTBKc0NtSnVVbXhpUjFaMFdsaFNlV1ZUTVdwaU1uaHpXbGRPTUdJelNYUmpiVlp6V2xkR2VscFlUWFpaVjA0d1lWYzVkV041T1hsa1Z6VjZUSHBuTWs1RVJYZ0tUbnBGTVU1cVkzWlpXRkl3V2xjeGQyUklUWFpOYWtGWFFtZHZja0puUlVWQldVOHZUVUZGVjBKQlowMUNia0l4V1cxNGNGbDZRMEpwZDFsTFMzZFpRZ3BDUVVoWFpWRkpSVUZuVWpsQ1NITkJaVkZDTTBGT01EbE5SM0pIZUhoRmVWbDRhMlZJU214dVRuZExhVk5zTmpRemFubDBMelJsUzJOdlFYWkxaVFpQQ2tGQlFVSnFjM1JvUjJKSlFVRkJVVVJCUldkM1VtZEphRUZQZUZNM2RteDRjVzVGYTBKVVRtSlZVRUpsUkZSbk0waGtlRlkyY0cxWk9FdGliREV6TjNBS1lWUnViMEZwUlVFelMyMUxVbU5uYWxBeVQzSmxORVpyVm5vNU4xaENNWGRsUzBOeWFXazFTMWx2UTB0bVkxRktSREJSZDBObldVbExiMXBKZW1vd1JRcEJkMDFFWVVGQmQxcFJTWGhCUzNwcVpHMUZTV2gzV21Kb1lVSlNlalk1Y1N0MWVrNVZSMmxhYlRWVk4xcE5aWFJMUTFSM1VFTkljRkZQVldvdlVERkJDa2R0YWt3elJucFFObTVpYkRGblNYZFNUbXN6UkhkNWMwOUJUMHhoUVVoR09IaHhZV0ZzT0U5WGNGRmFhRGh4TTJVMVNVSmFXR0ZWVkhocFlWbGFTM29LUXpWS1RGVlNWbnBMTURsd04wVjBUd290TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09In19fX0=&#34;,&#34;integratedTime&#34;:1712809122,&#34;logIndex&#34;:84797940,&#34;logID&#34;:&#34;c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d&#34;}},&#34;Issuer&#34;:&#34;https://token.actions.githubusercontent.com&#34;,&#34;Subject&#34;:&#34;https://github.com/open-telemetry/opentelemetry-collector-releases/.github/workflows/base-release.yaml@refs/tags/v0.98.0&#34;,&#34;githubWorkflowName&#34;:&#34;Release Contrib&#34;,&#34;githubWorkflowRef&#34;:&#34;refs/tags/v0.98.0&#34;,&#34;githubWorkflowRepository&#34;:&#34;open-telemetry/opentelemetry-collector-releases&#34;,&#34;githubWorkflowSha&#34;:&#34;9e20bf5c142e53070ccb8320a20315fffb41469e&#34;,&#34;githubWorkflowTrigger&#34;:&#34;push&#34;}}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] We started signing the images with release &lt;code&gt;v0.95.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Here is a list of community roles with current and previous members:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Triagers (&lt;a href=&#34;https://github.com/orgs/open-telemetry/teams/collector-triagers&#34;&gt;@open-telemetry/collector-triagers&lt;/a&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/andrzej-stencel&#34;&gt;Andrzej Stencel&lt;/a&gt;, Elastic&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dmathieu&#34;&gt;Damien Mathieu&lt;/a&gt;, Elastic&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jade-guiton-dd&#34;&gt;Jade Guiton&lt;/a&gt;, Datadog&lt;/li&gt; &#xA;   &lt;li&gt;Actively seeking contributors to triage issues&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emeritus Triagers:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/andrewhsu&#34;&gt;Andrew Hsu&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/alolita&#34;&gt;Alolita Sharma&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/punya&#34;&gt;Punya Biswal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/flands&#34;&gt;Steve Flanders&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Approvers (&lt;a href=&#34;https://github.com/orgs/open-telemetry/teams/collector-approvers&#34;&gt;@open-telemetry/collector-approvers&lt;/a&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/atoulme&#34;&gt;Antoine Toulme&lt;/a&gt;, Splunk&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/djaglowski&#34;&gt;Daniel Jaglowski&lt;/a&gt;, observIQ&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/evan-bradley&#34;&gt;Evan Bradley&lt;/a&gt;, Dynatrace&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jpkrohling&#34;&gt;Juraci Paixão Kröhling&lt;/a&gt;, Grafana Labs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/TylerHelmuth&#34;&gt;Tyler Helmuth&lt;/a&gt;, Honeycomb&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/songy23&#34;&gt;Yang Song&lt;/a&gt;, Datadog&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emeritus Approvers:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/james-bebbington&#34;&gt;James Bebbington&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrcamp&#34;&gt;Jay Camp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nilebox&#34;&gt;Nail Islamov&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/owais&#34;&gt;Owais Lone&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rghetia&#34;&gt;Rahul Patel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sjkaris&#34;&gt;Steven Karis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Aneurysm9&#34;&gt;Anthony Mirabella&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maintainers (&lt;a href=&#34;https://github.com/orgs/open-telemetry/teams/collector-maintainers&#34;&gt;@open-telemetry/collector-maintainers&lt;/a&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/codeboten&#34;&gt;Alex Boten&lt;/a&gt;, Honeycomb&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BogdanDrutu&#34;&gt;Bogdan Drutu&lt;/a&gt;, Snowflake&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dmitryax&#34;&gt;Dmitrii Anoshin&lt;/a&gt;, Splunk&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mx-psi&#34;&gt;Pablo Baeyens&lt;/a&gt;, DataDog&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emeritus Maintainers:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pjanotti&#34;&gt;Paulo Janotti&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tigrannajaryan&#34;&gt;Tigran Najaryan&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about roles in &lt;a href=&#34;https://github.com/open-telemetry/community/raw/main/community-membership.md&#34;&gt;Community membership&lt;/a&gt;. In addition to what is described at the organization-level, the SIG Collector requires all core approvers to take part in rotating the role of the &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/main/docs/release.md#release-manager&#34;&gt;release manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=open-telemetry/opentelemetry-collector&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>zju3dv/EasyVolcap</title>
    <updated>2024-12-18T01:29:15Z</updated>
    <id>tag:github.com,2024-12-18:/zju3dv/EasyVolcap</id>
    <link href="https://github.com/zju3dv/EasyVolcap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[SIGGRAPH Asia 2023 (Technical Communications)] EasyVolcap: Accelerating Neural Volumetric Video Research&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/de41df46-25e6-456c-a253-90d7807b2a9a&#34; alt=&#34;logo&#34; width=&#34;33%&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;: Accelerating Neural Volumetric Video Research&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/zju3dv/EasyVolcap&#34; alt=&#34;python&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/zju3dv/EasyVolcap&#34; alt=&#34;star&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zju3dv-white&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3610543.3626173&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2312.06575&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/1XxeO7TnAPvDugnxguEF5Jp89ERS9CAia/view?usp=sharing&#34;&gt;Example Dataset&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/1OFBFxes9kje02RARFpYpQ6SkmYlulYca/view?usp=sharing&#34;&gt;Pretrained Model&lt;/a&gt; | &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://zju3dv.github.io/4k4d&#34;&gt;4K4D&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;24.08.06 Multiple feature updates. See &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/misc/changelog.md&#34;&gt;changelog.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;24.02.27 &lt;a href=&#34;https://zju3dv.github.io/4k4d&#34;&gt;&lt;em&gt;&lt;strong&gt;4K4D&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; has been accepted to CVPR 2024.&lt;/li&gt; &#xA; &lt;li&gt;23.12.13 &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; will be presented at SIGGRAPH Asia 2023, Sydney.&lt;/li&gt; &#xA; &lt;li&gt;23.10.17 &lt;a href=&#34;https://zju3dv.github.io/4k4d&#34;&gt;&lt;em&gt;&lt;strong&gt;4K4D&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;, a real-time 4D view synthesis algorithm developed using &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;, has been made public.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; is a PyTorch library for accelerating neural volumetric video research, particularly in areas of &lt;strong&gt;volumetric video capturing&lt;/strong&gt;, reconstruction, and rendering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zju3dv/EasyVolcap/assets/43734697/14fdfb46-5277-4963-ba75-067ea574c87a&#34;&gt;https://github.com/zju3dv/EasyVolcap/assets/43734697/14fdfb46-5277-4963-ba75-067ea574c87a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install Using &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install only the core dependencies for running the viewer locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Editable install, with dependencies from requirements.txt&#xA;pip install -v -e . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows or older versions of Linux, you might end up with a CPU-only PyTorch installation by only running the above command since only the CPU version for Windows is available on PyPI (&lt;a href=&#34;https://github.com/pmeier/light-the-torch?tab=readme-ov-file#why-do-i-need-it&#34;&gt;more info&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To install a cuda-enabled PyTorch, append the above command with an extra search link:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -v -e . -f https://download.pytorch.org/whl/torch_stable.html&#xA;# also try directly installing PyTorch with pip install torch --index-url https://download.pytorch.org/whl/cu118 or https://download.pytorch.org/whl/cu121 if you&#39;re still unable to install a CUDA enabled version of PyTorch, as per suggested on https://pytorch.org/get-started/locally/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development Install Using &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Or install all dependencies for development (this requires you to have a valid &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/install.md#cuda-related-compilations&#34;&gt;CUDA building environment with PyTorch already installed&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that you can just run these two in tandem to take care of &lt;code&gt;PyTorch&lt;/code&gt; and &lt;code&gt;EasyVolcap&lt;/code&gt; before compiling CUDA extensions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Editable install, with dependencies from requirements-devel.txt&#xA;pip install -v -e . # will install from requirements.txt&#xA;pip install -v -r requirements-devel.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Aside from running &lt;code&gt;git pull&lt;/code&gt;, you might also need to reregister the command lines and code path by running &lt;code&gt;pip install -e . --no-build-isolation --no-deps&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;p&gt;A notable example is when updating to [&lt;em&gt;&lt;strong&gt;4K4D&lt;/strong&gt;&lt;/em&gt;](&lt;a href=&#34;https://github.com/zju3dv/4K4D%5D&#34;&gt;https://github.com/zju3dv/4K4D]&lt;/a&gt;, you&#39;re required to rerun the editable install command to use that repository instead of this one.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;In the following sections, we&#39;ll show examples of how to run &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; on a small multi-view video dataset with several of our implemented algorithms, including Instant-NGP+T, 3DGS+T, and ENeRFi (ENeRF Improved). In the documentation &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/misc/static.md&#34;&gt;&lt;code&gt;static.md&lt;/code&gt;&lt;/a&gt;, we also provide a complete example of how to prepare the dataset using COLMAP and run the above-mentioned three models using &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The example dataset for this section can be downloaded from &lt;a href=&#34;https://drive.google.com/file/d/1XxeO7TnAPvDugnxguEF5Jp89ERS9CAia/view?usp=sharing&#34;&gt;this Google Drive link&lt;/a&gt;. After downloading the example dataset, place the unzipped files inside &lt;code&gt;data/enerf_outdoor&lt;/code&gt; such that you can see files like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;data/enerf_outdoor/actor1_4_subseq/images&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data/enerf_outdoor/actor1_4_subseq/intri.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data/enerf_outdoor/actor1_4_subseq/extri.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This dataset is a small subset of the &lt;a href=&#34;https://github.com/zju3dv/ENeRF/raw/master/docs/enerf_outdoor.md&#34;&gt;ENeRF-Outdoor&lt;/a&gt; dataset released by our team. For downloading the full dataset, please follow the guide in the &lt;a href=&#34;(https://github.com/zju3dv/ENeRF/blob/master/docs/enerf_outdoor.md)&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before running the models, let&#39;s first prepare some shell variables for easy access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;expname=actor1_4_subseq&#xA;data_root=data/enerf_outdoor/actor1_4_subseq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inferencing With ENeRFi&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/68401485-85fe-477f-9144-976bb2ee8d3c&#34;&gt;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/68401485-85fe-477f-9144-976bb2ee8d3c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/6d60f2a4-6692-43e8-b682-aa27fcdf9516&#34;&gt;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/6d60f2a4-6692-43e8-b682-aa27fcdf9516&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The pre-trained model for ENeRFi on the DTU dataset can be downloaded from &lt;a href=&#34;https://drive.google.com/file/d/1OFBFxes9kje02RARFpYpQ6SkmYlulYca/view?usp=sharing&#34;&gt;this Google Drive link&lt;/a&gt;. After downloading, rename the model to &lt;code&gt;latest.npz&lt;/code&gt; and place it in &lt;code&gt;data/trained_model/enerfi_dtu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Render ENeRFi with pretrained model&#xA;evc-test -c configs/exps/enerfi/enerfi_${expname}.yaml,configs/specs/spiral.yaml,configs/specs/ibr.yaml runner_cfg.visualizer_cfg.save_tag=${expname} exp_name=enerfi_dtu&#xA;&#xA;# Render ENeRFi with GUI&#xA;evc-gui -c configs/exps/enerfi/enerfi_${expname}.yaml exp_name=enerfi_dtu val_dataloader_cfg.dataset_cfg.ratio=0.5 # 2.5 FPS on 3060&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If more performance is desired:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Slightly worst quality, faster rendering&#xA;evc-gui -c configs/exps/enerfi/enerfi_${expname}.yaml exp_name=enerfi_dtu val_dataloader_cfg.dataset_cfg.ratio=0.5 model_cfg.sampler_cfg.n_planes=32,8 model_cfg.sampler_cfg.n_samples=4,1 # 3.6 FPS on 3060&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Fine quality, faster rendering&#xA;evc-gui -c configs/exps/enerfi/enerfi_${expname}.yaml,configs/specs/fp16.yaml exp_name=enerfi_dtu val_dataloader_cfg.dataset_cfg.ratio=0.5 # 3.6 FPS on 3060&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Worst quality, fastest rendering&#xA;evc-gui -c configs/exps/enerfi/enerfi_${expname}.yaml,configs/specs/fp16.yaml exp_name=enerfi_dtu val_dataloader_cfg.dataset_cfg.ratio=0.5 model_cfg.sampler_cfg.n_planes=32,8 model_cfg.sampler_cfg.n_samples=4,1 # 5.0 FPS on 3060&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; supports WebSocket-based server-side rendering.&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/websocket.md&#34;&gt;More info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the WebSocket-based rendering, append the config &lt;code&gt;server.yaml&lt;/code&gt; to any of the native rendering commands beginning with &lt;code&gt;evc-gui&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Run the rendering server, append `configs/specs/server.yaml` to the config file list&#xA;evc-gui -c configs/exps/enerfi/enerfi_${expname}.yaml,configs/specs/server.yaml exp_name=enerfi_dtu val_dataloader_cfg.dataset_cfg.ratio=0.5 model_cfg.sampler_cfg.n_planes=32,8 model_cfg.sampler_cfg.n_samples=4,1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the viewer in your desired viewing client, tested on Windows, MacOS and Linux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Separate WebSocket Client parameter and evc parameter with --, for now, the viewer can be configured with evc&#xA;# Replace 10.76.5.252 with your server IP&#xA;# Replace -c configs/datasets/enerf_outdoor/enerf_outdoor.yaml with what ever other config to use&#xA;# The enerf_outdoor.yaml here provides a basic camera setup for the viewer&#xA;evc-ws --host 10.76.5.252 --port 1024 -- -c configs/datasets/enerf_outdoor/enerf_outdoor.yaml viewer_cfg.window_size=&#34;768,1366&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Instant-NGP+T&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that this example requires you to have &lt;code&gt;tiny-cuda-nn&lt;/code&gt; installed. &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/install.md#cuda-related-compilations&#34;&gt;Guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We extend Instant-NGP to be time-aware, as a baseline method. With the data preparation completed, we&#39;ve got an &lt;code&gt;images&lt;/code&gt; folder and a pair of &lt;code&gt;intri.yml&lt;/code&gt; and &lt;code&gt;extri.yml&lt;/code&gt; files, and we can run the l3mhet model. Note that this model is not built for dynamic scenes, we train it here mainly for extracting initialization point clouds and computing a tighter bounding box. Similar procedures can be applied to other datasets if such initialization is required.&lt;/p&gt; &#xA;&lt;p&gt;We need to write a config file for this model&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write the data-folder-related stuff inside configs/datasets. Just copy and paste &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/configs/datasets/enerf_outdoor/actor1_4_subseq.yaml&#34;&gt;&lt;code&gt;configs/datasets/enerf_outdoor/actor1_4_subseq.yaml&lt;/code&gt;&lt;/a&gt; and modify the &lt;code&gt;data_root&lt;/code&gt; and &lt;code&gt;bounds&lt;/code&gt; (bounding box), or maybe add a camera near-far threshold.&lt;/li&gt; &#xA; &lt;li&gt;Write the experiment config inside configs/exps. Just copy and paste &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/configs/exps/l3mhet/l3mhet_actor1_4_subseq.yaml&#34;&gt;&lt;code&gt;configs/exps/l3mhet/l3mhet_actor1_4_subseq.yaml&lt;/code&gt;&lt;/a&gt; and modify the &lt;code&gt;dataset&lt;/code&gt;-related line in &lt;code&gt;configs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# With your config files ready, you can run the following command to train the model&#xA;evc-train -c configs/exps/l3mhet/l3mhet_${expname}.yaml&#xA;&#xA;# Now run the following command to render some output&#xA;evc-test -c configs/exps/l3mhet/l3mhet_${expname}.yaml,configs/specs/spiral.yaml&#xA;&#xA;# And maybe render the model with GUI in lower resolution&#xA;evc-gui -c configs/exps/l3mhet/l3mhet_${expname}.yaml viewer_cfg.render_ratio=0.15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/configs/specs/spiral.yaml&#34;&gt;&lt;code&gt;configs/specs/spiral.yaml&lt;/code&gt;&lt;/a&gt;: please check this file for more details, it&#39;s a collection of configs to tell the data loader and visualizer to generate a spiral path by interpolating the given cameras&lt;/p&gt; &#xA;&lt;h3&gt;Running 3DGS+T&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that this example requires you to have &lt;code&gt;diff_gauss&lt;/code&gt; or &lt;code&gt;diff_gaussian_rasterization&lt;/code&gt; installed. &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/install.md#cuda-related-compilations&#34;&gt;Guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/acd83f13-ba34-449c-96ce-e7b7b0781de4&#34;&gt;https://github.com/dendenxu/easyvolcap.github.io.assets/assets/43734697/acd83f13-ba34-449c-96ce-e7b7b0781de4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3DGS&lt;/a&gt; uses the sparse reconstruction result of COLMAP for initialization. However, we found that the sparse reconstruction result often contains a lot of floating points, which is hard to prune for 3DGS and could easily make the model fail to converge. Thus, we opted to use the &#34;dense&#34; reconstruction result of our Instant-NGP+T implementation by computing the RGBD image for input views and concatenating them as the input of 3DGS. The script &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/scripts/fusion/volume_fusion.py&#34;&gt;&lt;code&gt;volume_fusion.py&lt;/code&gt;&lt;/a&gt; controls this process and it should work similarly on all models that support depth output.&lt;/p&gt; &#xA;&lt;p&gt;The following script block provides an example of how to prepare an initialization for our 3DGS+T implementation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Extract geometry (point cloud) for initialization from the l3mhet model&#xA;# Tune image sample rate and resizing ratio for a denser or sparser estimation&#xA;python scripts/fusion/volume_fusion.py -- -c configs/exps/l3mhet/l3mhet_${expname}.yaml val_dataloader_cfg.dataset_cfg.ratio=0.15&#xA;&#xA;# Move the rendering results to the dataset folder&#xA;source_folder=&#34;data/geometry/l3mhet_${expname}/POINT&#34;&#xA;destination_folder=&#34;${data_root}/vhulls&#34;&#xA;&#xA;# Create the destination directory if it doesn&#39;t exist&#xA;mkdir -p ${destination_folder}&#xA;&#xA;# Loop through all .ply files in the source directory&#xA;for file in ${source_folder}/*.ply; do&#xA;    number=$(echo $(basename ${file}) | sed -e &#39;s/frame\([0-9]*\).ply/\1/&#39;)&#xA;    formatted_number=$(printf &#34;%06d&#34; ${number})&#xA;    destination_file=&#34;${destination_folder}/${formatted_number}.ply&#34;&#xA;    cp ${file} ${destination_file}&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our conventions for storing initialization point clouds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raw point clouds extracted using Instant-NGP or Space Carving are placed inside the &lt;code&gt;vhulls&lt;/code&gt; folder. These files might be large. It&#39;s OK to directly optimize 3DGS+T on these.&lt;/li&gt; &#xA; &lt;li&gt;We might perform some cleanup of the point clouds and store them in the &lt;code&gt;surfs&lt;/code&gt; folder. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For 3DGS+T, the cleaned-up point clouds might be easier to optimize since 3DGS is good at growing details but not so good at dealing with floaters (removing or splitting).&lt;/li&gt; &#xA;   &lt;li&gt;For other representations, the cleaned-up point clouds work better than the visual hull (from Space Carving) but might not work so well as the raw point clouds of Instant-NGP.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, prepare an experiment config like &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/configs/exps/gaussiant/gaussiant_actor1_4_subseq.yaml&#34;&gt;&lt;code&gt;configs/exps/gaussiant/gaussiant_actor1_4_subseq.yaml&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/configs/specs/colmap.yaml&#34;&gt;&lt;code&gt;colmap.yaml&lt;/code&gt;&lt;/a&gt; provides some heuristics for large-scale static scenes. Remove these if you&#39;re not planning on using COLMAP&#39;s parameters directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Train a 3DGS model on the ${expname} dataset&#xA;evc-train -c configs/exps/gaussiant/gaussiant_${expname}.yaml # might run out of VRAM, try reducing densify until iter&#xA;&#xA;# Perform rendering on the trained ${expname} dataset&#xA;evc-test -c configs/exps/gaussiant/gaussiant_${expname}.yaml,configs/specs/superm.yaml,configs/specs/spiral.yaml&#xA;&#xA;# Perform rendering with GUI, do this on a machine with monitor, tested on Windows and Ubuntu&#xA;evc-gui -c configs/exps/gaussiant/gaussiant_${expname}.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/configs/specs/superm.yaml&#34;&gt;&lt;code&gt;superm.yaml&lt;/code&gt;&lt;/a&gt; skips the loading of input images and other initializations for network-only rendering since all the information we need is contained inside the trained model.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Customizing &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Most of the time when we want to build a new set of algorithms on top of the framework, we only have to worry about the actual network itself. Before writing your new volumetric video algorithm, we need a basic understanding of the network&#39;s input and output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We use Python dictionaries for passing in and out network input and output.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;batch&lt;/code&gt; variable stores the network input you sampled from the dataset (e.g. camera parameters).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;output&lt;/code&gt; key of the &lt;code&gt;batch&lt;/code&gt; variable should contain the network output. For each network module&#39;s output definition, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/main.md&#34;&gt;design documents&lt;/a&gt; for them (&lt;code&gt;camera&lt;/code&gt;, &lt;code&gt;sampler&lt;/code&gt;, &lt;code&gt;network&lt;/code&gt;, &lt;code&gt;renderer&lt;/code&gt;) or just see the definitions in &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/easyvolcap/models/volumetric_video_model.py&#34;&gt;&lt;code&gt;volumetric_video_model.py&lt;/code&gt;&lt;/a&gt; (the &lt;code&gt;render_rays&lt;/code&gt; function).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- There are generally two ways of developing a new algorithm: --&gt; &#xA;&lt;p&gt;&lt;strong&gt;We support purely customized network construction &amp;amp; usage and also a unified NeRF-like pipeline.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If your new network model&#39;s structure is similar to NeRF-based ones (i.e. with the separation of &lt;code&gt;sampler&lt;/code&gt;, &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;renderer&lt;/code&gt;), you can simply swap out parts of the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/easyvolcap/models/networks/volumetric_video_network.py&#34;&gt;&lt;code&gt;volumetric_video_network.py&lt;/code&gt;&lt;/a&gt; by writing a new config to swap the &lt;code&gt;type&lt;/code&gt; parameter of the &lt;code&gt;***_cfg&lt;/code&gt; dictionaries.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to build a completely new network model: to save you some hassle, we grant the &lt;code&gt;sampler&lt;/code&gt; classes the ability to directly output the core network output (&lt;code&gt;rgb_map&lt;/code&gt; stored in &lt;code&gt;batch.output&lt;/code&gt;). Define your rendering function and network structure however you like and reuse other parts of the codebase. An example: &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/easyvolcap/models/samplers/gaussiant_sampler.py&#34;&gt;&lt;code&gt;gaussiant_sampler.py&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; TODO: Replace the custom sampler with a custom network, an example: &lt;code&gt;TemporalForestGaussianSplatting&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;A miminal custom module using all other &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; components should look something like this:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from easyvolcap.engine import SAMPLERS&#xA;from easyvolcap.utils.net_utils import VolumetricVideoModule&#xA;from easyvolcap.utils.console_utils import *&#xA;&#xA;@SAMPLERS.register_module() # make the custom module callable by class name&#xA;class CustomVolumetricVideoModule(VolumetricVideoModule):&#xA;    def __init__(self,&#xA;                 network, # ignore noop_network&#xA;                 ... # configurable parameters&#xA;                 ):&#xA;        # Initialize custom network parameters&#xA;        ...&#xA;    &#xA;    def forward(self, batch: dotdict):&#xA;        # Perform network forwarding&#xA;        ...&#xA;&#xA;        # Store output for further processing&#xA;        batch.output.rgb_map = ... # store rendered image for loss (B, N, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the respective config, select this module with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;model_cfg:&#xA;    sampler_cfg:&#xA;        type: CustomVolumetricVideoModule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataset Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;data/dataset/sequence # data_root &amp;amp; data_root&#xA;├── intri.yml # required: intrinsics&#xA;├── extri.yml # required: extrinsics&#xA;└── images # required: source images&#xA; &amp;nbsp;&amp;nbsp; ├── 000000 # camera / frame&#xA; &amp;nbsp;&amp;nbsp; │   ├── 000000.jpg # image&#xA; &amp;nbsp;&amp;nbsp; │   ├── 000001.jpg # for dynamic dataset, more images can be placed here&#xA;    │   ...&#xA; &amp;nbsp;&amp;nbsp; │   ├── 000298.jpg # for dynamic dataset, more images can be placed here&#xA; &amp;nbsp;&amp;nbsp; │   └── 000299.jpg # for dynamic dataset, more images can be placed here&#xA; &amp;nbsp;&amp;nbsp; ├── 000001&#xA; &amp;nbsp;&amp;nbsp; ├── 000002&#xA;    ...&#xA; &amp;nbsp;&amp;nbsp; ├── 000058&#xA; &amp;nbsp;&amp;nbsp; └── 000059&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; is designed to work on the simplest data form: &lt;code&gt;images&lt;/code&gt; and no more. The key data preprocessing are done in the &lt;code&gt;dataloader&lt;/code&gt; and &lt;code&gt;dataset&lt;/code&gt; modules. These steps are done in the data loader&#39;s initialization&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We might correct the camera pose with their center of attention and world-up vector (&lt;code&gt;dataloader_cfg.dataset_cfg.use_aligned_cameras=True&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;We undistort read images from the disk using the intrinsic poses and store them as jpeg bytes in memory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Importing &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; now supports direct import from other locations and code bases. After installing, you can not only directly use utility modules and functions from &lt;code&gt;easyvolcap.utils&lt;/code&gt;, but also import and build upon our core modules and classes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import the logging and debugging functions&#xA;from easyvolcap.utils.console_utils import * # log, tqdm, @catch_throw&#xA;from easyvolcap.utils.timer_utils import timer  # timer.record&#xA;from easyvolcap.utils.data_utils import export_pts, export_mesh, export_npz&#xA;...&#xA;&#xA;# Import the OpenGL-based viewer and build upon it&#xA;from easyvolcap.runners.volumetric_video_viewer import VolumetricVideoViewer&#xA;&#xA;class CustomViewer(VolumetricVideoViewer):&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The import will work when actually running the code, but it might fail since some of the autocompletion modules &lt;a href=&#34;https://code.visualstudio.com/docs/python/editing#_importresolvefailure&#34;&gt;is not fully compatible with the newest editable install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you see warnings when importing &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; in your editor like VSCode, you might want to add the path of your &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; codebase to the &lt;code&gt;python.autoComplete.extraPaths&lt;/code&gt; and &lt;code&gt;python.analysis.extraPaths&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;python.autoComplete.extraPaths&#34;: [&#34;/home/zju3dv/code/easyvolcap&#34;],&#xA;    &#34;python.analysis.extraPaths&#34;: [&#34;/home/zju3dv/code/easyvolcap&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another solution is to replace the installation command of &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; with a compatible one &lt;a href=&#34;https://microsoft.github.io/pyright/#/import-resolution?id=editable-installs&#34;&gt;using a compatible editable install&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -e . --no-build-isolation --no-deps --config-settings editable_mode=compat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this is &lt;a href=&#34;https://setuptools.pypa.io/en/latest/userguide/development_mode.html#legacy-behavior&#34;&gt;marked deprecated in the PEP specification&lt;/a&gt;. Thus our recommendation is to change the setting of your editor instead.&lt;/p&gt; &#xA;&lt;h3&gt;New Projects With &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re interested in developing or researching with &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;, the recommended way is to fork the repository and modify or append to our source code directly instead of using &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; as a module.&lt;/p&gt; &#xA;&lt;p&gt;After cloning and forking, add &lt;a href=&#34;https://github.com/zju3dv/EasyVolcap&#34;&gt;https://github.com/zju3dv/EasyVolcap&lt;/a&gt; as an &lt;code&gt;upstream&lt;/code&gt; if you want to receive updates from our side. Use &lt;code&gt;git fetch upstream&lt;/code&gt; to pull and merge our updates to &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; to your new project if needed. The following code block provides an example of this development process.&lt;/p&gt; &#xA;&lt;p&gt;Our recent project &lt;a href=&#34;https://github.com/zju3dv/4K4D&#34;&gt;4K4D&lt;/a&gt; is developed in this fashion.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Prepare the name and GitHub repo of your new project&#xA;project=4K4D&#xA;repo=https://github.com/zju3dv/${project}&#xA;&#xA;# Clone EasyVolcap and add our repo as an upstream&#xA;git clone https://github.com/zju3dv/EasyVolcap ${project}&#xA;&#xA;# Setup the remote of your new project&#xA;git set-url origin ${repo}&#xA;&#xA;# Add EasyVolcap as an upstream&#xA;git remote add upstream https://github.com/zju3dv/EasyVolcap&#xA;&#xA;# If EasyVolcap updates, fetch the updates and maybe merge with it&#xA;git fetch upstream&#xA;git merge upstream/main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nevertheless, we still encourage you to read on and possibly follow the tutorials in the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/#examples&#34;&gt;Examples&lt;/a&gt; section and maybe read our design documents in the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/#design-docs&#34;&gt;Design Docs&lt;/a&gt; section to grasp an understanding of how &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; works as a project.&lt;/p&gt; &#xA;&lt;h2&gt;Documentations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Documentations are still WIP. We&#39;ll gradually add more guides and examples, especially regarding the usage of &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&#39;s various systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Design Docs&lt;/h3&gt; &#xA;&lt;p&gt;The documentation contained in the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design&#34;&gt;&lt;code&gt;docs/design&lt;/code&gt;&lt;/a&gt; directory contains explanations of design choices and various best practices when developing with &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/main.md&#34;&gt;&lt;code&gt;docs/design/main.md&lt;/code&gt;&lt;/a&gt;: Gives an overview of the structure of the &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/config.md&#34;&gt;&lt;code&gt;docs/design/config.md&lt;/code&gt;&lt;/a&gt;: Thoroughly explains the commandline and configuration API of &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/logging.md&#34;&gt;&lt;code&gt;docs/design/logging.md&lt;/code&gt;&lt;/a&gt;: Describes the functionalities of the logging system of &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/dataset.md&#34;&gt;&lt;code&gt;docs/design/dataset.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/model.md&#34;&gt;&lt;code&gt;docs/design/model.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/runner.md&#34;&gt;&lt;code&gt;docs/design/runner.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/docs/design/viewer.md&#34;&gt;&lt;code&gt;docs/design/viewer.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Project Docs&lt;/h3&gt; &#xA;&lt;h3&gt;Misc Docs&lt;/h3&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We would like to acknowledge the following inspiring prior work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zju3dv/EasyMocap&#34;&gt;EasyMocap: Make Human Motion Capture Easier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrnerf&#34;&gt;XRNeRF: OpenXRLab Neural Radiance Field (NeRF) Toolbox and Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nerfstudio-project/nerfstudio&#34;&gt;Nerfstudio: A Modular Framework for Neural Radiance Field Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui: Bloat-Free Graphical User Interface for C++ With Minimal Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zju3dv/neuralbody&#34;&gt;Neural Body: Implicit Neural Representations with Structured Latent Codes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zju3dv/ENeRF&#34;&gt;ENeRF: Efficient Neural Radiance Fields for Interactive Free-Viewpoint Video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVlabs/instant-ngp&#34;&gt;Instant Neural Graphics Primitives with a Multiresolution Hash Encoding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting for Real-Time Radiance Field Rendering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&#39;s license can be found &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/license&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the license of the algorithms or other components implemented in &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; might be different from the license of &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; itself. You will have to install their respective modules to use them in &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt; following the guide in the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/#installation&#34;&gt;installation section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to their respective licensing terms if you&#39;re planning on using them. For example, &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/easyvolcap/models/networks/embedders/hash_embedder.py&#34;&gt;own implementation of the hash embedding module&lt;/a&gt; is under the same license as &lt;em&gt;&lt;strong&gt;EasyVolcap&lt;/strong&gt;&lt;/em&gt;. However, the imported &lt;code&gt;tiny-cuda-nn&lt;/code&gt; package in the importing implementation is under the same license as the original Instant-NGP paper.&lt;/p&gt; &#xA;&lt;p&gt;All imported modules (as specified in the &lt;a href=&#34;https://raw.githubusercontent.com/zju3dv/EasyVolcap/main/requirements.txt&#34;&gt;requirement files&lt;/a&gt; or in the source code itself) are under their respective licenses. Please refer to their respective repositories for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this code useful for your research, please cite us using the following BibTeX entry. If you used our implementation of other methods, please also cite them separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{xu2023easyvolcap,&#xA;  title={EasyVolcap: Accelerating Neural Volumetric Video Research},&#xA;  author={Xu, Zhen and Xie, Tao and Peng, Sida and Lin, Haotong and Shuai, Qing and Yu, Zhiyuan and He, Guangzhao and Sun, Jiaming and Bao, Hujun and Zhou, Xiaowei},&#xA;  booktitle={SIGGRAPH Asia 2023 Technical Communications},&#xA;  year={2023}&#xA;}&#xA;&#xA;@article{xu20234k4d,&#xA;  title={4K4D: Real-Time 4D View Synthesis at 4K Resolution},&#xA;  author={Xu, Zhen and Peng, Sida and Lin, Haotong and He, Guangzhao and Sun, Jiaming and Shen, Yujun and Bao, Hujun and Zhou, Xiaowei},&#xA;  booktitle={arXiv preprint arXiv:2310.11448},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>