<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-29T01:31:04Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielmiessler/SecLists</title>
    <updated>2022-07-29T01:31:04Z</updated>
    <id>tag:github.com,2022-07-29:/danielmiessler/SecLists</id>
    <link href="https://github.com/danielmiessler/SecLists" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SecLists is the security tester&#39;s companion. It&#39;s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://danielmiessler.com/images/seclists-long.png&#34; alt=&#34;seclists.png&#34; title=&#34;seclists.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About SecLists&lt;/h3&gt; &#xA;&lt;p&gt;SecLists is the security tester&#39;s companion. It&#39;s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more. The goal is to enable a security tester to pull this repository onto a new testing box and have access to every type of list that may be needed.&lt;/p&gt; &#xA;&lt;p&gt;This project is maintained by &lt;a href=&#34;https://danielmiessler.com/&#34;&gt;Daniel Miessler&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Jhaddix&#34;&gt;Jason Haddix&lt;/a&gt;, and &lt;a href=&#34;https://blog.g0tmi1k.com/&#34;&gt;g0tmi1k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O SecList.zip \&#xA;  &amp;amp;&amp;amp; unzip SecList.zip \&#xA;  &amp;amp;&amp;amp; rm -f SecList.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Git (Small)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 \&#xA;  https://github.com/danielmiessler/SecLists.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Git (Complete)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/danielmiessler/SecLists.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kali Linux&lt;/strong&gt; (&lt;a href=&#34;https://www.kali.org/tools/seclists/&#34;&gt;Tool Page&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt -y install seclists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Attribution&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Similar Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wordlists.assetnote.io/&#34;&gt;Assetnote Wordlists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bo0oM/fuzz.txt&#34;&gt;fuzz.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fuzzdb-project/fuzzdb&#34;&gt;FuzzDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;PayloadsAllTheThings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Licensing&lt;/h3&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/SecLists/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://danielmiessler.com/images/mitlicense.png&#34; alt=&#34;MIT License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;—&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;NOTE: Downloading this repository is likely to cause a false-positive alarm by your anti-virus or anti-malware software, the filepath should be whitelisted. There is nothing in SecLists that can harm your computer as-is, however it&#39;s not recommended to store these files on a server or other important system due to the risk of local file include attacks.&lt;/sup&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rui314/chibicc</title>
    <updated>2022-07-29T01:31:04Z</updated>
    <id>tag:github.com,2022-07-29:/rui314/chibicc</id>
    <link href="https://github.com/rui314/chibicc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small C compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chibicc: A Small C Compiler&lt;/h1&gt; &#xA;&lt;p&gt;(The old master has moved to &lt;a href=&#34;https://github.com/rui314/chibicc/tree/historical/old&#34;&gt;historical/old&lt;/a&gt; branch. This is a new one uploaded in September 2020.)&lt;/p&gt; &#xA;&lt;p&gt;chibicc is yet another small C compiler that implements most C11 features. Even though it still probably falls into the &#34;toy compilers&#34; category just like other small compilers do, chibicc can compile several real-world programs, including &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://sqlite.org&#34;&gt;SQLite&lt;/a&gt;, &lt;a href=&#34;http://www.libpng.org/pub/png/libpng.html&#34;&gt;libpng&lt;/a&gt; and chibicc itself, without making modifications to the compiled programs. Generated executables of these programs pass their corresponding test suites. So, chibicc actually supports a wide variety of C11 features and is able to compile hundreds of thousands of lines of real-world C code correctly.&lt;/p&gt; &#xA;&lt;p&gt;chibicc is developed as the reference implementation for a book I&#39;m currently writing about the C compiler and the low-level programming. The book covers the vast topic with an incremental approach; in the first chapter, readers will implement a &#34;compiler&#34; that accepts just a single number as a &#34;language&#34;, which will then gain one feature at a time in each section of the book until the language that the compiler accepts matches what the C11 spec specifies. I took this incremental approach from &lt;a href=&#34;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&#34;&gt;the paper&lt;/a&gt; by Abdulaziz Ghuloum.&lt;/p&gt; &#xA;&lt;p&gt;Each commit of this project corresponds to a section of the book. For this purpose, not only the final state of the project but each commit was carefully written with readability in mind. Readers should be able to learn how a C language feature can be implemented just by reading one or a few commits of this project. For example, this is how &lt;a href=&#34;https://github.com/rui314/chibicc/commit/773115ab2a9c4b96f804311b95b20e9771f0190a&#34;&gt;while&lt;/a&gt;, &lt;a href=&#34;https://github.com/rui314/chibicc/commit/75fbd3dd6efde12eac8225d8b5723093836170a5&#34;&gt;[]&lt;/a&gt;, &lt;a href=&#34;https://github.com/rui314/chibicc/commit/1d0e942fd567a35d296d0f10b7693e98b3dd037c&#34;&gt;?:&lt;/a&gt;, and &lt;a href=&#34;https://github.com/rui314/chibicc/commit/79644e54cc1805e54428cde68b20d6d493b76d34&#34;&gt;thread-local variable&lt;/a&gt; are implemented. If you have plenty of spare time, it might be fun to read it from the &lt;a href=&#34;https://github.com/rui314/chibicc/commit/0522e2d77e3ab82d3b80a5be8dbbdc8d4180561c&#34;&gt;first commit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please consider purchasing a copy of the book when it becomes available! 😀 I publish the source code here to give people early access to it, because I was planing to do that anyway with a permissive open-source license after publishing the book. If I don&#39;t charge for the source code, it doesn&#39;t make much sense to me to keep it private. I hope to publish the book in 2021. You can sign up &lt;a href=&#34;https://forms.gle/sgrMWHGeGjeeEJcX7&#34;&gt;here&lt;/a&gt; to receive a notification when a free chapter is available online or the book is published.&lt;/p&gt; &#xA;&lt;p&gt;I pronounce chibicc as &lt;em&gt;chee bee cee cee&lt;/em&gt;. &#34;chibi&#34; means &#34;mini&#34; or &#34;small&#34; in Japanese. &#34;cc&#34; stands for C compiler.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;chibicc supports almost all mandatory features and most optional features of C11 as well as a few GCC language extensions.&lt;/p&gt; &#xA;&lt;p&gt;Features that are often missing in a small compiler but supported by chibicc include (but not limited to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preprocessor&lt;/li&gt; &#xA; &lt;li&gt;float, double and long double (x87 80-bit floating point numbers)&lt;/li&gt; &#xA; &lt;li&gt;Bit-fields&lt;/li&gt; &#xA; &lt;li&gt;alloca()&lt;/li&gt; &#xA; &lt;li&gt;Variable-length arrays&lt;/li&gt; &#xA; &lt;li&gt;Compound literals&lt;/li&gt; &#xA; &lt;li&gt;Thread-local variables&lt;/li&gt; &#xA; &lt;li&gt;Atomic variables&lt;/li&gt; &#xA; &lt;li&gt;Common symbols&lt;/li&gt; &#xA; &lt;li&gt;Designated initializers&lt;/li&gt; &#xA; &lt;li&gt;L, u, U and u8 string literals&lt;/li&gt; &#xA; &lt;li&gt;Functions that take or return structs as values, as specified by the x86-64 SystemV ABI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;chibicc does not support complex numbers, K&amp;amp;R-style function prototypes and GCC-style inline assembly. Digraphs and trigraphs are intentionally left out.&lt;/p&gt; &#xA;&lt;p&gt;chibicc outputs a simple but nice error message when it finds an error in source code.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no optimization pass. chibicc emits terrible code which is probably twice or more slower than GCC&#39;s output. I have a plan to add an optimization pass once the frontend is done.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m using Ubuntu 20.04 for x86-64 as a development platform. I made a few small changes so that chibicc works on Ubuntu 18.04, Fedora 32 and Gentoo 2.6, but portability is not my goal at this moment. It may or may not work on systems other than Ubuntu 20.04.&lt;/p&gt; &#xA;&lt;h2&gt;Internals&lt;/h2&gt; &#xA;&lt;p&gt;chibicc consists of the following stages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokenize: A tokenizer takes a string as an input, breaks it into a list of tokens and returns them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Preprocess: A preprocessor takes as an input a list of tokens and output a new list of macro-expanded tokens. It interprets preprocessor directives while expanding macros.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Parse: A recursive descendent parser constructs abstract syntax trees from the output of the preprocessor. It also adds a type to each AST node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Codegen: A code generator emits an assembly text for given AST nodes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When I find a bug in this compiler, I go back to the original commit that introduced the bug and rewrite the commit history as if there were no such bug from the beginning. This is an unusual way of fixing bugs, but as a part of a book, it is important to keep every commit bug-free.&lt;/p&gt; &#xA;&lt;p&gt;Thus, I do not take pull requests in this repo. You can send me a pull request if you find a bug, but it is very likely that I will read your patch and then apply that to my previous commits by rewriting history. I&#39;ll credit your name somewhere, but your changes will be rewritten by me before submitted to this repository.&lt;/p&gt; &#xA;&lt;p&gt;Also, please assume that I will occasionally force-push my local repository to this public one to rewrite history. If you clone this project and make local commits on top of it, your changes will have to be rebased by hand when I force-push new commits.&lt;/p&gt; &#xA;&lt;h2&gt;Design principles&lt;/h2&gt; &#xA;&lt;p&gt;chibicc&#39;s core value is its simplicity and the reability of its source code. To achieve this goal, I was careful not to be too clever when writing code. Let me explain what that means.&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes, as you get used to the code base, you are tempted to &lt;em&gt;improve&lt;/em&gt; the code using more abstractions and clever tricks. But that kind of &lt;em&gt;improvements&lt;/em&gt; don&#39;t always improve readability for first-time readers and can actually hurts it. I tried to avoid the pitfall as much as possible. I wrote this code not for me but for first-time readers.&lt;/p&gt; &#xA;&lt;p&gt;If you take a look at the source code, you&#39;ll find a couple of dumb-looking pieces of code. These are written intentionally that way (but at some places I might be actually missing something, though). Here is a few notable examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The recursive descendent parser contains many similar-looking functions for similar-looking generative grammar rules. You might be tempted to &lt;em&gt;improve&lt;/em&gt; it to reduce the duplication using higher-order functions or macros, but I thought that that&#39;s too complicated. It&#39;s better to allow small duplications instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;chibicc doesn&#39;t try too hard to save memory. An entire input source file is read to memory first before the tokenizer kicks in, for example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slow algorithms are fine if we know that n isn&#39;t too big. For example, we use a linked list as a set in the preprocessor, so the membership check takes O(n) where n is the size of the set. But that&#39;s fine because we know n is usually very small. And even if n can be very big, I stick with a simple slow algorithm until it is proved by benchmarks that that&#39;s a bottleneck.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each AST node type uses only a few members of the &lt;code&gt;Node&lt;/code&gt; struct members. Other unused &lt;code&gt;Node&lt;/code&gt; members are just a waste of memory at runtime. We could save memory using unions, but I decided to simply put everything in the same struct instead. I believe the inefficiency is negligible. Even if it matters, we can always change the code to use unions at any time. I wanted to avoid premature optimization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;chibicc always allocates heap memory using &lt;code&gt;calloc&lt;/code&gt;, which is a variant of &lt;code&gt;malloc&lt;/code&gt; that clears memory with zero. &lt;code&gt;calloc&lt;/code&gt; is slightly slower than &lt;code&gt;malloc&lt;/code&gt;, but that should be neligible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Last but not least, chibicc allocates memory using &lt;code&gt;calloc&lt;/code&gt; but never calls &lt;code&gt;free&lt;/code&gt;. Allocated heap memory is not freed until the process exits. I&#39;m sure that this memory management policy (or lack thereof) looks very odd, but it makes sense for short-lived programs such as compilers. DMD, a compiler for the D programming language, uses the same memory management scheme for the same reason, for example [1].&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About the Author&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m Rui Ueyama. I&#39;m the creator of &lt;a href=&#34;https://github.com/rui314/8cc&#34;&gt;8cc&lt;/a&gt;, which is a hobby C compiler, and also the original creator of the current version of &lt;a href=&#34;https://lld.llvm.org&#34;&gt;LLVM lld&lt;/a&gt; linker, which is a production-quality linker used by various operating systems and large-scale build systems.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bellard.org/tcc/&#34;&gt;tcc&lt;/a&gt;: A small C compiler written by Fabrice Bellard. I learned a lot from this compiler, but the design of tcc and chibicc are different. In particular, tcc is a one-pass compiler, while chibicc is a multi-pass one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/drh/lcc&#34;&gt;lcc&lt;/a&gt;: Another small C compiler. The creators wrote a &lt;a href=&#34;https://sites.google.com/site/lccretargetablecompiler/&#34;&gt;book&lt;/a&gt; about the internals of lcc, which I found a good resource to see how a compiler is implemented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&#34;&gt;An Incremental Approach to Compiler Construction&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://users.ece.utexas.edu/~adnan/pike.html&#34;&gt;Rob Pike&#39;s 5 Rules of Programming&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[1] &lt;a href=&#34;https://www.drdobbs.com/cpp/increasing-compiler-speed-by-over-75/240158941&#34;&gt;https://www.drdobbs.com/cpp/increasing-compiler-speed-by-over-75/240158941&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DMD does memory allocation in a bit of a sneaky way. Since compilers are short-lived programs, and speed is of the essence, DMD just mallocs away, and never frees.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>rustdesk/rustdesk</title>
    <updated>2022-07-29T01:31:04Z</updated>
    <id>tag:github.com,2022-07-29:/rustdesk/rustdesk</id>
    <link href="https://github.com/rustdesk/rustdesk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source virtual / remote desktop infrastructure for everyone! The open source TeamViewer alternative. Display and control your PC and Android devices from anywhere at anytime.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/logo-header.svg?sanitize=true&#34; alt=&#34;RustDesk - Your remote desktop&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#free-public-servers&#34;&gt;Servers&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#raw-steps-to-build&#34;&gt;Build&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#how-to-build-with-docker&#34;&gt;Docker&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#file-structure&#34;&gt;Structure&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/#snapshot&#34;&gt;Snapshot&lt;/a&gt;&lt;br&gt; [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-CS.md&#34;&gt;česky&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-ZH.md&#34;&gt;中文&lt;/a&gt;] | | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-HU.md&#34;&gt;Magyar&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-ES.md&#34;&gt;Español&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-FA.md&#34;&gt;فارسی&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-FR.md&#34;&gt;Français&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-DE.md&#34;&gt;Deutsch&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-PL.md&#34;&gt;Polski&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-ID.md&#34;&gt;Indonesian&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-FI.md&#34;&gt;Suomi&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-ML.md&#34;&gt;മലയാളം&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-JP.md&#34;&gt;日本語&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-NL.md&#34;&gt;Nederlands&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-IT.md&#34;&gt;Italiano&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-RU.md&#34;&gt;Русский&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-PTBR.md&#34;&gt;Português (Brasil)&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-EO.md&#34;&gt;Esperanto&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-KR.md&#34;&gt;한국어&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-AR.md&#34;&gt;العربي&lt;/a&gt;] | [&lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/README-VN.md&#34;&gt;Tiếng Việt&lt;/a&gt;]&lt;br&gt; &lt;b&gt;We need your help to translate this README, &lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/src/lang&#34;&gt;RustDesk UI&lt;/a&gt; and &lt;a href=&#34;https://github.com/rustdesk/doc.rustdesk.com&#34;&gt;Doc&lt;/a&gt; to your native language&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p&gt;Chat with us: &lt;a href=&#34;https://discord.gg/nDceKgxnkV&#34;&gt;Discord&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/rustdesk&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://www.reddit.com/r/rustdesk&#34;&gt;Reddit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/I2I04VU09&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yet another remote desktop software, written in Rust. Works out of the box, no configuration required. You have full control of your data, with no concerns about security. You can use our rendezvous/relay server, &lt;a href=&#34;https://rustdesk.com/server&#34;&gt;set up your own&lt;/a&gt;, or &lt;a href=&#34;https://github.com/rustdesk/rustdesk-server-demo&#34;&gt;write your own rendezvous/relay server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71636191/171661982-430285f0-2e12-4b1d-9957-4a58e375304d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;RustDesk welcomes contribution from everyone. See &lt;a href=&#34;https://raw.githubusercontent.com/rustdesk/rustdesk/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for help getting started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/wiki/How-does-RustDesk-work%3F&#34;&gt;&lt;strong&gt;How does RustDesk work?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/releases&#34;&gt;&lt;strong&gt;BINARY DOWNLOAD&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/en/packages/com.carriez.flutter_hbb&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Free Public Servers&lt;/h2&gt; &#xA;&lt;p&gt;Below are the servers you are using for free, it may change along the time. If you are not close to one of these, your network may be slow.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Vendor&lt;/th&gt; &#xA;   &lt;th&gt;Specification&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Seoul&lt;/td&gt; &#xA;   &lt;td&gt;AWS lightsail&lt;/td&gt; &#xA;   &lt;td&gt;1 VCPU / 0.5GB RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Singapore&lt;/td&gt; &#xA;   &lt;td&gt;Vultr&lt;/td&gt; &#xA;   &lt;td&gt;1 VCPU / 1GB RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dallas&lt;/td&gt; &#xA;   &lt;td&gt;Vultr&lt;/td&gt; &#xA;   &lt;td&gt;1 VCPU / 1GB RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Desktop versions use &lt;a href=&#34;https://sciter.com/&#34;&gt;sciter&lt;/a&gt; for GUI, please download sciter dynamic library yourself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x64/sciter.dll&#34;&gt;Windows&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so&#34;&gt;Linux&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.osx/libsciter.dylib&#34;&gt;MacOS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mobile versions use Flutter. We will migrate desktop version from Sciter to Flutter.&lt;/p&gt; &#xA;&lt;h2&gt;Raw steps to build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare your Rust development env and C++ build env&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;, and set &lt;code&gt;VCPKG_ROOT&lt;/code&gt; env variable correctly&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static&lt;/li&gt; &#xA;   &lt;li&gt;Linux/MacOS: vcpkg install libvpx libyuv opus&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;run &lt;code&gt;cargo run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://rustdesk.com/docs/en/dev/build/&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;How to build on Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 18 (Debian 10)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install -y g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora 28 (CentOS 8)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo yum -y install gcc-c++ git curl wget nasm yasm gcc gtk3-devel clang libxcb-devel libxdo-devel libXfixes-devel pulseaudio-libs-devel cmake alsa-lib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch (Manjaro)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -Syu --needed unzip git cmake gcc curl wget yasm nasm zip make pkg-config clang gtk3 xdotool libxcb libxfixes alsa-lib pulseaudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install pynput package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install pynput&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install vcpkg&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/microsoft/vcpkg&#xA;cd vcpkg&#xA;git checkout 2021.12.01&#xA;cd ..&#xA;vcpkg/bootstrap-vcpkg.sh&#xA;export VCPKG_ROOT=$HOME/vcpkg&#xA;vcpkg/vcpkg install libvpx libyuv opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fix libvpx (For Fedora)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd vcpkg/buildtrees/libvpx/src&#xA;cd *&#xA;./configure&#xA;sed -i &#39;s/CFLAGS+=-I/CFLAGS+=-fPIC -I/g&#39; Makefile&#xA;sed -i &#39;s/CXXFLAGS+=-I/CXXFLAGS+=-fPIC -I/g&#39; Makefile&#xA;make&#xA;cp libvpx.a $HOME/vcpkg/installed/x64-linux/lib/&#xA;cd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;source $HOME/.cargo/env&#xA;git clone https://github.com/rustdesk/rustdesk&#xA;cd rustdesk&#xA;mkdir -p target/debug&#xA;wget https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.lnx/x64/libsciter-gtk.so&#xA;mv libsciter-gtk.so target/debug&#xA;VCPKG_ROOT=$HOME/vcpkg cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change Wayland to X11 (Xorg)&lt;/h3&gt; &#xA;&lt;p&gt;RustDesk does not support Wayland. Check &lt;a href=&#34;https://docs.fedoraproject.org/en-US/quick-docs/configuring-xorg-as-default-gnome-session/&#34;&gt;this&lt;/a&gt; to configuring Xorg as the default GNOME session.&lt;/p&gt; &#xA;&lt;h2&gt;How to build with Docker&lt;/h2&gt; &#xA;&lt;p&gt;Begin by cloning the repository and building the docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/rustdesk/rustdesk&#xA;cd rustdesk&#xA;docker build -t &#34;rustdesk-builder&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, each time you need to build the application, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -it -v $PWD:/home/user/rustdesk -v rustdesk-git-cache:/home/user/.cargo/git -v rustdesk-registry-cache:/home/user/.cargo/registry -e PUID=&#34;$(id -u)&#34; -e PGID=&#34;$(id -g)&#34; rustdesk-builder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the first build may take longer before dependencies are cached, subsequent builds will be faster. Additionally, if you need to specify different arguments to the build command, you may do so at the end of the command in the &lt;code&gt;&amp;lt;OPTIONAL-ARGS&amp;gt;&lt;/code&gt; position. For instance, if you wanted to build an optimized release version, you would run the command above followed by &lt;code&gt;--release&lt;/code&gt;. The resulting executable will be available in the target folder on your system, and can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;target/debug/rustdesk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re running a release executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;target/release/rustdesk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please ensure that you are running these commands from the root of the RustDesk repository, otherwise the application may be unable to find the required resources. Also note that other cargo subcommands such as &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; are not currently supported via this method as they would install or run the program inside the container instead of the host.&lt;/p&gt; &#xA;&lt;h2&gt;File Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/libs/hbb_common&#34;&gt;libs/hbb_common&lt;/a&gt;&lt;/strong&gt;: video codec, config, tcp/udp wrapper, protobuf, fs functions for file transfer, and some other utility functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/libs/scrap&#34;&gt;libs/scrap&lt;/a&gt;&lt;/strong&gt;: screen capture&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/libs/enigo&#34;&gt;libs/enigo&lt;/a&gt;&lt;/strong&gt;: platform specific keyboard/mouse control&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/src/ui&#34;&gt;src/ui&lt;/a&gt;&lt;/strong&gt;: GUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/src/server&#34;&gt;src/server&lt;/a&gt;&lt;/strong&gt;: audio/clipboard/input/video services, and network connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/src/client.rs&#34;&gt;src/client.rs&lt;/a&gt;&lt;/strong&gt;: start a peer connection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/src/rendezvous_mediator.rs&#34;&gt;src/rendezvous_mediator.rs&lt;/a&gt;&lt;/strong&gt;: Communicate with &lt;a href=&#34;https://github.com/rustdesk/rustdesk-server&#34;&gt;rustdesk-server&lt;/a&gt;, wait for remote direct (TCP hole punching) or relayed connection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/src/platform&#34;&gt;src/platform&lt;/a&gt;&lt;/strong&gt;: platform specific code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/flutter&#34;&gt;flutter&lt;/a&gt;&lt;/strong&gt;: Flutter code for mobile&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/rustdesk/rustdesk/tree/master/flutter/web/js&#34;&gt;flutter/web/js&lt;/a&gt;&lt;/strong&gt;: Javascript for Flutter web client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Snapshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71636191/113112362-ae4deb80-923b-11eb-957d-ff88daad4f06.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71636191/113112619-f705a480-923b-11eb-911d-97e984ef52b6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71636191/113112857-3fbd5d80-923c-11eb-9836-768325faf906.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71636191/135385039-38fdbd72-379a-422d-b97f-33df71fb1cec.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>