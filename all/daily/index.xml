<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-25T01:29:23Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gabime/spdlog</title>
    <updated>2024-07-25T01:29:23Z</updated>
    <id>tag:github.com,2024-07-25:/gabime/spdlog</id>
    <link href="https://github.com/gabime/spdlog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast C++ logging library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spdlog&lt;/h1&gt; &#xA;&lt;p&gt;Very fast, header-only/compiled, C++ logging library. &lt;a href=&#34;https://github.com/gabime/spdlog/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/gabime/spdlog/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://ci.appveyor.com/project/gabime/spdlog&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&amp;amp;branch=v1.x&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gabime/spdlog/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/gabime/spdlog.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Header-only version&lt;/h4&gt; &#xA;&lt;p&gt;Copy the include &lt;a href=&#34;https://github.com/gabime/spdlog/tree/v1.x/include/spdlog&#34;&gt;folder&lt;/a&gt; to your build tree and use a C++11 compiler.&lt;/p&gt; &#xA;&lt;h4&gt;Compiled version (recommended - much faster compile times)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/gabime/spdlog.git&#xA;$ cd spdlog &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake .. &amp;amp;&amp;amp; make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see example &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/example/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; on how to use.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux, FreeBSD, OpenBSD, Solaris, AIX&lt;/li&gt; &#xA; &lt;li&gt;Windows (msvc 2013+, cygwin)&lt;/li&gt; &#xA; &lt;li&gt;macOS (clang 3.5+)&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Package managers:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian: &lt;code&gt;sudo apt install libspdlog-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homebrew: &lt;code&gt;brew install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MacPorts: &lt;code&gt;sudo port install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD: &lt;code&gt;pkg install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;code&gt;dnf install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo: &lt;code&gt;emerge dev-libs/spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;code&gt;pacman -S spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;openSUSE: &lt;code&gt;sudo zypper in spdlog-devel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;vcpkg: &lt;code&gt;vcpkg install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;conan: &lt;code&gt;spdlog/[&amp;gt;=1.4.1]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;conda: &lt;code&gt;conda install -c conda-forge spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;build2: &lt;code&gt;depends: spdlog ^1.8.2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very fast (see &lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#benchmarks&#34;&gt;benchmarks&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Headers only or compiled&lt;/li&gt; &#xA; &lt;li&gt;Feature-rich formatting, using the excellent &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;fmt&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous mode (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog/wiki/3.-Custom-formatting&#34;&gt;Custom&lt;/a&gt; formatting.&lt;/li&gt; &#xA; &lt;li&gt;Multi/Single threaded loggers.&lt;/li&gt; &#xA; &lt;li&gt;Various log targets: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rotating log files.&lt;/li&gt; &#xA;   &lt;li&gt;Daily log files.&lt;/li&gt; &#xA;   &lt;li&gt;Console logging (colors supported).&lt;/li&gt; &#xA;   &lt;li&gt;syslog.&lt;/li&gt; &#xA;   &lt;li&gt;Windows event log.&lt;/li&gt; &#xA;   &lt;li&gt;Windows debugger (&lt;code&gt;OutputDebugString(..)&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Log to Qt widgets (&lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#log-to-qt-with-nice-colors&#34;&gt;example&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Easily &lt;a href=&#34;https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink&#34;&gt;extendable&lt;/a&gt; with custom log targets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Log filtering - log levels can be modified at runtime as well as compile time.&lt;/li&gt; &#xA; &lt;li&gt;Support for loading log levels from argv or environment var.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#backtrace-support&#34;&gt;Backtrace&lt;/a&gt; support - store debug messages in a ring buffer and display them later on demand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage samples&lt;/h2&gt; &#xA;&lt;h4&gt;Basic usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;&#xA;int main() &#xA;{&#xA;    spdlog::info(&#34;Welcome to spdlog!&#34;);&#xA;    spdlog::error(&#34;Some error message with arg: {}&#34;, 1);&#xA;    &#xA;    spdlog::warn(&#34;Easy padding in numbers like {:08d}&#34;, 12);&#xA;    spdlog::critical(&#34;Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}&#34;, 42);&#xA;    spdlog::info(&#34;Support for floats {:03.2f}&#34;, 1.23456);&#xA;    spdlog::info(&#34;Positional args are {1} {0}..&#34;, &#34;too&#34;, &#34;supported&#34;);&#xA;    spdlog::info(&#34;{:&amp;lt;30}&#34;, &#34;left aligned&#34;);&#xA;    &#xA;    spdlog::set_level(spdlog::level::debug); // Set global log level to debug&#xA;    spdlog::debug(&#34;This message should be displayed..&#34;);    &#xA;    &#xA;    // change log pattern&#xA;    spdlog::set_pattern(&#34;[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v&#34;);&#xA;    &#xA;    // Compile time log levels&#xA;    // Note that this does not change the current log level, it will only&#xA;    // remove (depending on SPDLOG_ACTIVE_LEVEL) the call on the release code.&#xA;    SPDLOG_TRACE(&#34;Some trace message with param {}&#34;, 42);&#xA;    SPDLOG_DEBUG(&#34;Some debug message&#34;);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Create stdout/stderr logger object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;#include &#34;spdlog/sinks/stdout_color_sinks.h&#34;&#xA;void stdout_example()&#xA;{&#xA;    // create a color multi-threaded logger&#xA;    auto console = spdlog::stdout_color_mt(&#34;console&#34;);    &#xA;    auto err_logger = spdlog::stderr_color_mt(&#34;stderr&#34;);    &#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;loggers can be retrieved from a global registry using the spdlog::get(logger_name)&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Basic file logger&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/basic_file_sink.h&#34;&#xA;void basic_logfile_example()&#xA;{&#xA;    try &#xA;    {&#xA;        auto logger = spdlog::basic_logger_mt(&#34;basic_logger&#34;, &#34;logs/basic-log.txt&#34;);&#xA;    }&#xA;    catch (const spdlog::spdlog_ex &amp;amp;ex)&#xA;    {&#xA;        std::cout &amp;lt;&amp;lt; &#34;Log init failed: &#34; &amp;lt;&amp;lt; ex.what() &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Rotating files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/rotating_file_sink.h&#34;&#xA;void rotating_example()&#xA;{&#xA;    // Create a file rotating logger with 5 MB size max and 3 rotated files&#xA;    auto max_size = 1048576 * 5;&#xA;    auto max_files = 3;&#xA;    auto logger = spdlog::rotating_logger_mt(&#34;some_logger_name&#34;, &#34;logs/rotating.txt&#34;, max_size, max_files);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Daily files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;#include &#34;spdlog/sinks/daily_file_sink.h&#34;&#xA;void daily_example()&#xA;{&#xA;    // Create a daily logger - a new file is created every day at 2:30 am&#xA;    auto logger = spdlog::daily_logger_mt(&#34;daily_logger&#34;, &#34;logs/daily.txt&#34;, 2, 30);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Backtrace support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Debug messages can be stored in a ring buffer instead of being logged immediately.&#xA;// This is useful to display debug logs only when needed (e.g. when an error happens).&#xA;// When needed, call dump_backtrace() to dump them to your log.&#xA;&#xA;spdlog::enable_backtrace(32); // Store the latest 32 messages in a buffer. &#xA;// or my_logger-&amp;gt;enable_backtrace(32)..&#xA;for(int i = 0; i &amp;lt; 100; i++)&#xA;{&#xA;  spdlog::debug(&#34;Backtrace message {}&#34;, i); // not logged yet..&#xA;}&#xA;// e.g. if some error happened:&#xA;spdlog::dump_backtrace(); // log them now! show the last 32 messages&#xA;// or my_logger-&amp;gt;dump_backtrace(32)..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Periodic flush&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// periodically flush all *registered* loggers every 3 seconds:&#xA;// warning: only use if all your loggers are thread-safe (&#34;_mt&#34; loggers)&#xA;spdlog::flush_every(std::chrono::seconds(3));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Stopwatch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Stopwatch support for spdlog&#xA;#include &#34;spdlog/stopwatch.h&#34;&#xA;void stopwatch_example()&#xA;{&#xA;    spdlog::stopwatch sw;    &#xA;    spdlog::debug(&#34;Elapsed {}&#34;, sw);&#xA;    spdlog::debug(&#34;Elapsed {:.3}&#34;, sw);       &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log binary data in hex&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// many types of std::container&amp;lt;char&amp;gt; types can be used.&#xA;// ranges are supported too.&#xA;// format flags:&#xA;// {:X} - print in uppercase.&#xA;// {:s} - don&#39;t separate each byte with space.&#xA;// {:p} - don&#39;t print the position on each line start.&#xA;// {:n} - don&#39;t split the output into lines.&#xA;// {:a} - show ASCII if :n is not set.&#xA;&#xA;#include &#34;spdlog/fmt/bin_to_hex.h&#34;&#xA;&#xA;void binary_example()&#xA;{&#xA;    auto console = spdlog::get(&#34;console&#34;);&#xA;    std::array&amp;lt;char, 80&amp;gt; buf;&#xA;    console-&amp;gt;info(&#34;Binary example: {}&#34;, spdlog::to_hex(buf));&#xA;    console-&amp;gt;info(&#34;Another binary example:{:n}&#34;, spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));&#xA;    // more examples:&#xA;    // logger-&amp;gt;info(&#34;uppercase: {:X}&#34;, spdlog::to_hex(buf));&#xA;    // logger-&amp;gt;info(&#34;uppercase, no delimiters: {:Xs}&#34;, spdlog::to_hex(buf));&#xA;    // logger-&amp;gt;info(&#34;uppercase, no delimiters, no position info: {:Xsp}&#34;, spdlog::to_hex(buf));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Logger with multi sinks - each with a different format and log level&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;// create a logger with 2 targets, with different log levels and formats.&#xA;// The console will show only warnings or errors, while the file will log all.&#xA;void multi_sink_example()&#xA;{&#xA;    auto console_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt&amp;gt;();&#xA;    console_sink-&amp;gt;set_level(spdlog::level::warn);&#xA;    console_sink-&amp;gt;set_pattern(&#34;[multi_sink_example] [%^%l%$] %v&#34;);&#xA;&#xA;    auto file_sink = std::make_shared&amp;lt;spdlog::sinks::basic_file_sink_mt&amp;gt;(&#34;logs/multisink.txt&#34;, true);&#xA;    file_sink-&amp;gt;set_level(spdlog::level::trace);&#xA;&#xA;    spdlog::logger logger(&#34;multi_sink&#34;, {console_sink, file_sink});&#xA;    logger.set_level(spdlog::level::debug);&#xA;    logger.warn(&#34;this should appear in both console and file&#34;);&#xA;    logger.info(&#34;this message should not appear in the console, only in the file&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User-defined callbacks about log events&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;// create a logger with a lambda function callback, the callback will be called&#xA;// each time something is logged to the logger&#xA;void callback_example()&#xA;{&#xA;    auto callback_sink = std::make_shared&amp;lt;spdlog::sinks::callback_sink_mt&amp;gt;([](const spdlog::details::log_msg &amp;amp;msg) {&#xA;         // for example you can be notified by sending an email to yourself&#xA;    });&#xA;    callback_sink-&amp;gt;set_level(spdlog::level::err);&#xA;&#xA;    auto console_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt&amp;gt;();&#xA;    spdlog::logger logger(&#34;custom_callback_logger&#34;, {console_sink, callback_sink});&#xA;&#xA;    logger.info(&#34;some info log&#34;);&#xA;    logger.error(&#34;critical issue&#34;); // will notify you&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Asynchronous logging&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/async.h&#34;&#xA;#include &#34;spdlog/sinks/basic_file_sink.h&#34;&#xA;void async_example()&#xA;{&#xA;    // default thread pool settings can be modified *before* creating the async logger:&#xA;    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.&#xA;    auto async_file = spdlog::basic_logger_mt&amp;lt;spdlog::async_factory&amp;gt;(&#34;async_file_logger&#34;, &#34;logs/async_log.txt&#34;);&#xA;    // alternatively:&#xA;    // auto async_file = spdlog::create_async&amp;lt;spdlog::sinks::basic_file_sink_mt&amp;gt;(&#34;async_file_logger&#34;, &#34;logs/async_log.txt&#34;);   &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Asynchronous logger with multi sinks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/async.h&#34;&#xA;#include &#34;spdlog/sinks/stdout_color_sinks.h&#34;&#xA;#include &#34;spdlog/sinks/rotating_file_sink.h&#34;&#xA;&#xA;void multi_sink_example2()&#xA;{&#xA;    spdlog::init_thread_pool(8192, 1);&#xA;    auto stdout_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt &amp;gt;();&#xA;    auto rotating_sink = std::make_shared&amp;lt;spdlog::sinks::rotating_file_sink_mt&amp;gt;(&#34;mylog.txt&#34;, 1024*1024*10, 3);&#xA;    std::vector&amp;lt;spdlog::sink_ptr&amp;gt; sinks {stdout_sink, rotating_sink};&#xA;    auto logger = std::make_shared&amp;lt;spdlog::async_logger&amp;gt;(&#34;loggername&#34;, sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);&#xA;    spdlog::register_logger(logger);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User-defined types&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;template&amp;lt;&amp;gt;&#xA;struct fmt::formatter&amp;lt;my_type&amp;gt; : fmt::formatter&amp;lt;std::string&amp;gt;&#xA;{&#xA;    auto format(my_type my, format_context &amp;amp;ctx) const -&amp;gt; decltype(ctx.out())&#xA;    {&#xA;        return format_to(ctx.out(), &#34;[my_type i={}]&#34;, my.i);&#xA;    }&#xA;};&#xA;&#xA;void user_defined_example()&#xA;{&#xA;    spdlog::info(&#34;user defined type: {}&#34;, my_type(14));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User-defined flags in the log pattern&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Log patterns can contain custom flags.&#xA;// the following example will add new flag &#39;%*&#39; - which will be bound to a &amp;lt;my_formatter_flag&amp;gt; instance.&#xA;#include &#34;spdlog/pattern_formatter.h&#34;&#xA;class my_formatter_flag : public spdlog::custom_flag_formatter&#xA;{&#xA;public:&#xA;    void format(const spdlog::details::log_msg &amp;amp;, const std::tm &amp;amp;, spdlog::memory_buf_t &amp;amp;dest) override&#xA;    {&#xA;        std::string some_txt = &#34;custom-flag&#34;;&#xA;        dest.append(some_txt.data(), some_txt.data() + some_txt.size());&#xA;    }&#xA;&#xA;    std::unique_ptr&amp;lt;custom_flag_formatter&amp;gt; clone() const override&#xA;    {&#xA;        return spdlog::details::make_unique&amp;lt;my_formatter_flag&amp;gt;();&#xA;    }&#xA;};&#xA;&#xA;void custom_flags_example()&#xA;{    &#xA;    auto formatter = std::make_unique&amp;lt;spdlog::pattern_formatter&amp;gt;();&#xA;    formatter-&amp;gt;add_flag&amp;lt;my_formatter_flag&amp;gt;(&#39;*&#39;).set_pattern(&#34;[%n] [%*] [%^%l%$] %v&#34;);&#xA;    spdlog::set_formatter(std::move(formatter));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Custom error handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void err_handler_example()&#xA;{&#xA;    // can be set globally or per logger(logger-&amp;gt;set_error_handler(..))&#xA;    spdlog::set_error_handler([](const std::string &amp;amp;msg) { spdlog::get(&#34;console&#34;)-&amp;gt;error(&#34;*** LOGGER ERROR ***: {}&#34;, msg); });&#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;some invalid message to trigger an error {}{}{}{}&#34;, 3);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;syslog&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/syslog_sink.h&#34;&#xA;void syslog_example()&#xA;{&#xA;    std::string ident = &#34;spdlog-example&#34;;&#xA;    auto syslog_logger = spdlog::syslog_logger_mt(&#34;syslog&#34;, ident, LOG_PID);&#xA;    syslog_logger-&amp;gt;warn(&#34;This is warning that will end up in syslog.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Android example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/android_sink.h&#34;&#xA;void android_example()&#xA;{&#xA;    std::string tag = &#34;spdlog-android&#34;;&#xA;    auto android_logger = spdlog::android_logger_mt(&#34;android&#34;, tag);&#xA;    android_logger-&amp;gt;critical(&#34;Use \&#34;adb shell logcat\&#34; to view this message.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Load log levels from the env variable or argv&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/cfg/env.h&#34;&#xA;int main (int argc, char *argv[])&#xA;{&#xA;    spdlog::cfg::load_env_levels();&#xA;    // or from the command line:&#xA;    // ./example SPDLOG_LEVEL=info,mylogger=trace&#xA;    // #include &#34;spdlog/cfg/argv.h&#34; // for loading levels from argv&#xA;    // spdlog::cfg::load_argv_levels(argc, argv);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So then you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SPDLOG_LEVEL=info,mylogger=trace&#xA;$ ./example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log file open/close event handlers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// You can get callbacks from spdlog before/after a log file has been opened or closed. &#xA;// This is useful for cleanup procedures or for adding something to the start/end of the log file.&#xA;void file_events_example()&#xA;{&#xA;    // pass the spdlog::file_event_handlers to file sinks for open/close log file notifications&#xA;    spdlog::file_event_handlers handlers;&#xA;    handlers.before_open = [](spdlog::filename_t filename) { spdlog::info(&#34;Before opening {}&#34;, filename); };&#xA;    handlers.after_open = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(&#34;After opening\n&#34;, fstream); };&#xA;    handlers.before_close = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(&#34;Before closing\n&#34;, fstream); };&#xA;    handlers.after_close = [](spdlog::filename_t filename) { spdlog::info(&#34;After closing {}&#34;, filename); };&#xA;    auto my_logger = spdlog::basic_logger_st(&#34;some_logger&#34;, &#34;logs/events-sample.txt&#34;, true, handlers);        &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Replace the Default Logger&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void replace_default_logger_example()&#xA;{&#xA;    auto new_logger = spdlog::basic_logger_mt(&#34;new_default_logger&#34;, &#34;logs/new-default-log.txt&#34;, true);&#xA;    spdlog::set_default_logger(new_logger);&#xA;    spdlog::info(&#34;new logger log message&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log to Qt with nice colors&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;#include &#34;spdlog/sinks/qt_sinks.h&#34;&#xA;MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)&#xA;{&#xA;    setMinimumSize(640, 480);&#xA;    auto log_widget = new QTextEdit(this);&#xA;    setCentralWidget(log_widget);&#xA;    int max_lines = 500; // keep the text widget to max 500 lines. remove old lines if needed.&#xA;    auto logger = spdlog::qt_color_logger_mt(&#34;qt_logger&#34;, log_widget, max_lines);&#xA;    logger-&amp;gt;info(&#34;Some info message&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Mapped Diagnostic Context&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Mapped Diagnostic Context (MDC) is a map that stores key-value pairs (string values) in thread local storage.&#xA;// Each thread maintains its own MDC, which loggers use to append diagnostic information to log outputs.&#xA;// Note: it is not supported in asynchronous mode due to its reliance on thread-local storage.&#xA;#include &#34;spdlog/mdc.h&#34;&#xA;void mdc_example()&#xA;{&#xA;    spdlog::mdc::put(&#34;key1&#34;, &#34;value1&#34;);&#xA;    spdlog::mdc::put(&#34;key2&#34;, &#34;value2&#34;);&#xA;    // if not using the default format, use the %&amp;amp; formatter to print mdc data&#xA;    // spdlog::set_pattern(&#34;[%H:%M:%S %z] [%^%L%$] [%&amp;amp;] %v&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Below are some &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/bench/bench.cpp&#34;&gt;benchmarks&lt;/a&gt; done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz&lt;/p&gt; &#xA;&lt;h4&gt;Synchronous mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] **************************************************************&#xA;[info] Single thread, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec&#xA;[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec&#xA;[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec&#xA;[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec&#xA;[info] **************************************************************&#xA;[info] C-string (400 bytes). Single thread, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec&#xA;[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec&#xA;[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec&#xA;[info] null_st          Elapsed: 0.04 secs       27,446,957/sec&#xA;[info] **************************************************************&#xA;[info] 10 threads, competing over the same logger object, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec&#xA;[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec&#xA;[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec&#xA;[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Asynchronous mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] -------------------------------------------------&#xA;[info] Messages     : 1,000,000&#xA;[info] Threads      : 10&#xA;[info] Queue        : 8,192 slots&#xA;[info] Queue memory : 8,192 x 272 = 2,176 KB &#xA;[info] -------------------------------------------------&#xA;[info] &#xA;[info] *********************************&#xA;[info] Queue Overflow Policy: block&#xA;[info] *********************************&#xA;[info] Elapsed: 1.70784 secs     585,535/sec&#xA;[info] Elapsed: 1.69805 secs     588,910/sec&#xA;[info] Elapsed: 1.7026 secs      587,337/sec&#xA;[info] &#xA;[info] *********************************&#xA;[info] Queue Overflow Policy: overrun&#xA;[info] *********************************&#xA;[info] Elapsed: 0.372816 secs    2,682,285/sec&#xA;[info] Elapsed: 0.379758 secs    2,633,255/sec&#xA;[info] Elapsed: 0.373532 secs    2,677,147/sec&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found in the &lt;a href=&#34;https://github.com/gabime/spdlog/wiki/1.-QuickStart&#34;&gt;wiki&lt;/a&gt; pages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=spdlog&#34;&gt;JetBrains&lt;/a&gt; for donating product licenses to help develop &lt;strong&gt;spdlog&lt;/strong&gt; &lt;a href=&#34;https://www.jetbrains.com/?from=spdlog&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/logos/jetbrains-variant-4.svg?sanitize=true&#34; width=&#34;94&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Stirling-Tools/Stirling-PDF</title>
    <updated>2024-07-25T01:29:23Z</updated>
    <id>tag:github.com,2024-07-25:/Stirling-Tools/Stirling-PDF</id>
    <link href="https://github.com/Stirling-Tools/Stirling-PDF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;#1 Locally hosted web application that allows you to perform various operations on PDF files&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png&#34; width=&#34;80&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Stirling-PDF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/frooodle/s-pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/frooodle/s-pdf&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Cn8pWhQRxZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1068636748814483718?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/frooodle/s-pdf/latest&#34; alt=&#34;Docker Image Version (tag latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Stirling-Tools/stirling-pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/stirling-tools/stirling-pdf?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=MN7JPG5G6G3JL&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paypal%20Donate-yellow?style=flat&amp;amp;logo=paypal&#34; alt=&#34;Paypal Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/Frooodle&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Github%20Sponsor-yellow?style=flat&amp;amp;logo=github&#34; alt=&#34;Github Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.digitalocean.com/apps/new?repo=https://github.com/Stirling-Tools/Stirling-PDF/tree/digitalOcean&amp;amp;refcode=c3210994b1af&#34;&gt;&lt;img src=&#34;https://www.deploytodo.com/do-btn-blue.svg?sanitize=true&#34; alt=&#34;Deploy to DO&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.ssdnodes.com/manage/aff.php?aff=2216&amp;amp;register=true&#34;&gt;&lt;img src=&#34;https://www.ssdnodes.com/wp-content/uploads/2023/11/footer-logo.svg?sanitize=true&#34; alt=&#34;Name&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a robust, locally hosted web-based PDF manipulation tool using Docker. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more. This locally hosted web application has evolved to encompass a comprehensive set of features, addressing all your PDF requirements.&lt;/p&gt; &#xA;&lt;p&gt;Stirling PDF does not initiate any outbound calls for record-keeping or tracking purposes.&lt;/p&gt; &#xA;&lt;p&gt;All files and PDFs exist either exclusively on the client side, reside in server memory only during task execution, or temporarily reside in a file solely for the execution of the task. Any file downloaded by the user will have been deleted from the server by that point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/images/stirling-home.jpg&#34; alt=&#34;stirling-home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dark mode support.&lt;/li&gt; &#xA; &lt;li&gt;Custom download options&lt;/li&gt; &#xA; &lt;li&gt;Parallel file processing and downloads&lt;/li&gt; &#xA; &lt;li&gt;API for integration with external scripts&lt;/li&gt; &#xA; &lt;li&gt;Optional Login and Authentication support (see &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/tree/main#login-authentication&#34;&gt;here&lt;/a&gt; for documentation)&lt;/li&gt; &#xA; &lt;li&gt;Database Backup and Import (see &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/DATABASE.md&#34;&gt;here&lt;/a&gt; for documentation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;PDF Features&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Page Operations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View and modify PDFs - View multi page PDFs with custom viewing sorting and searching. Plus on page edit features like annotate, draw and adding text and images. (Using PDF.js with Joxit and Liberation.Liberation fonts)&lt;/li&gt; &#xA; &lt;li&gt;Full interactive GUI for merging/splitting/rotating/moving PDFs and their pages.&lt;/li&gt; &#xA; &lt;li&gt;Merge multiple PDFs together into a single resultant file.&lt;/li&gt; &#xA; &lt;li&gt;Split PDFs into multiple files at specified page numbers or extract all pages as individual files.&lt;/li&gt; &#xA; &lt;li&gt;Reorganize PDF pages into different orders.&lt;/li&gt; &#xA; &lt;li&gt;Rotate PDFs in 90-degree increments.&lt;/li&gt; &#xA; &lt;li&gt;Remove pages.&lt;/li&gt; &#xA; &lt;li&gt;Multi-page layout (Format PDFs into a multi-paged page).&lt;/li&gt; &#xA; &lt;li&gt;Scale page contents size by set %.&lt;/li&gt; &#xA; &lt;li&gt;Adjust Contrast.&lt;/li&gt; &#xA; &lt;li&gt;Crop PDF.&lt;/li&gt; &#xA; &lt;li&gt;Auto Split PDF (With physically scanned page dividers).&lt;/li&gt; &#xA; &lt;li&gt;Extract page(s).&lt;/li&gt; &#xA; &lt;li&gt;Convert PDF to a single page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Conversion Operations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convert PDFs to and from images.&lt;/li&gt; &#xA; &lt;li&gt;Convert any common file to PDF (using LibreOffice).&lt;/li&gt; &#xA; &lt;li&gt;Convert PDF to Word/Powerpoint/Others (using LibreOffice).&lt;/li&gt; &#xA; &lt;li&gt;Convert HTML to PDF.&lt;/li&gt; &#xA; &lt;li&gt;URL to PDF.&lt;/li&gt; &#xA; &lt;li&gt;Markdown to PDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Security &amp;amp; Permissions&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add and remove passwords.&lt;/li&gt; &#xA; &lt;li&gt;Change/set PDF Permissions.&lt;/li&gt; &#xA; &lt;li&gt;Add watermark(s).&lt;/li&gt; &#xA; &lt;li&gt;Certify/sign PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Sanitize PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Auto-redact text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Other Operations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add/Generate/Write signatures.&lt;/li&gt; &#xA; &lt;li&gt;Repair PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Detect and remove blank pages.&lt;/li&gt; &#xA; &lt;li&gt;Compare 2 PDFs and show differences in text.&lt;/li&gt; &#xA; &lt;li&gt;Add images to PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Compress PDFs to decrease their filesize (Using OCRMyPDF).&lt;/li&gt; &#xA; &lt;li&gt;Extract images from PDF.&lt;/li&gt; &#xA; &lt;li&gt;Extract images from Scans.&lt;/li&gt; &#xA; &lt;li&gt;Add page numbers.&lt;/li&gt; &#xA; &lt;li&gt;Auto rename file by detecting PDF header text.&lt;/li&gt; &#xA; &lt;li&gt;OCR on PDF (Using OCRMyPDF).&lt;/li&gt; &#xA; &lt;li&gt;PDF/A conversion (Using OCRMyPDF).&lt;/li&gt; &#xA; &lt;li&gt;Edit metadata.&lt;/li&gt; &#xA; &lt;li&gt;Flatten PDFs.&lt;/li&gt; &#xA; &lt;li&gt;Get all information on a PDF to view or export as JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a overview of the tasks and the technology each uses please view &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/Endpoint-groups.md&#34;&gt;Endpoint-groups.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demo of the app is available &lt;a href=&#34;https://stirlingpdf.io&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spring Boot + Thymeleaf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/pdfbox/tree/trunk&#34;&gt;PDFBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libreoffice.org/discover/libreoffice/&#34;&gt;LibreOffice&lt;/a&gt; for advanced conversions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocrmypdf/OCRmyPDF&#34;&gt;OcrMyPdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSS, JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mozilla/pdf.js&#34;&gt;PDF.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Hopding/pdf-lib&#34;&gt;PDF-LIB.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Locally&lt;/h3&gt; &#xA;&lt;p&gt;Please view &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/LocalRunGuide.md&#34;&gt;https://github.com/Stirling-Tools/Stirling-PDF/blob/main/LocalRunGuide.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker / Podman&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/frooodle/s-pdf&#34;&gt;https://hub.docker.com/r/frooodle/s-pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stirling PDF has 3 different versions, a Full version and ultra-Lite version as well as a &#39;Fat&#39; version. Depending on the types of features you use you may want a smaller image to save on space. To see what the different versions offer please look at our &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/Version-groups.md&#34;&gt;version mapping&lt;/a&gt; For people that don&#39;t mind about space optimization just use the latest tag. &lt;img src=&#34;https://img.shields.io/docker/image-size/frooodle/s-pdf/latest?label=Stirling-PDF%20Full&#34; alt=&#34;Docker Image Size (tag)&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/frooodle/s-pdf/latest-ultra-lite?label=Stirling-PDF%20Ultra-Lite&#34; alt=&#34;Docker Image Size (tag)&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/frooodle/s-pdf/latest-fat?label=Stirling-PDF%20Fat&#34; alt=&#34;Docker Image Size (tag)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please note in below examples you may need to change the volume paths as needed, current examples install them to the current working directory eg &lt;code&gt;./extraConfigs:/configs&lt;/code&gt; to &lt;code&gt;/opt/stirlingpdf/extraConfigs:/configs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  -p 8080:8080 \&#xA;  -v ./trainingData:/usr/share/tessdata \&#xA;  -v ./extraConfigs:/configs \&#xA;  -v ./logs:/logs \&#xA;  -e DOCKER_ENABLE_SECURITY=false \&#xA;  -e INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false \&#xA;  -e LANGS=en_GB \&#xA;  --name stirling-pdf \&#xA;  frooodle/s-pdf:latest&#xA;&#xA;  Can also add these for customisation but are not required&#xA;&#xA;  -v /location/of/customFiles:/customFiles \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3.3&#39;&#xA;services:&#xA;  stirling-pdf:&#xA;    image: frooodle/s-pdf:latest&#xA;    ports:&#xA;      - &#39;8080:8080&#39;&#xA;    volumes:&#xA;      - ./trainingData:/usr/share/tessdata #Required for extra OCR languages&#xA;      - ./extraConfigs:/configs&#xA;#      - ./customFiles:/customFiles/&#xA;#      - ./logs:/logs/&#xA;    environment:&#xA;      - DOCKER_ENABLE_SECURITY=false&#xA;      - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false&#xA;      - LANGS=en_GB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Podman is CLI-compatible with Docker, so simply replace &#34;docker&#34; with &#34;podman&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Enable OCR/Compression feature&lt;/h2&gt; &#xA;&lt;p&gt;Please view &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/HowToUseOCR.md&#34;&gt;https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToUseOCR.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;p&gt;Stirling PDF currently supports 33!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Progress&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (English) (en_GB)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/100&#34; alt=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (US) (en_US)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/100&#34; alt=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arabic (العربية) (ar_AR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/45&#34; alt=&#34;45%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German (Deutsch) (de_DE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/100&#34; alt=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French (Français) (fr_FR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/94&#34; alt=&#34;94%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish (Español) (es_ES)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/92&#34; alt=&#34;92%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Simplified Chinese (简体中文) (zh_CN)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/98&#34; alt=&#34;98%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traditional Chinese (繁體中文) (zh_TW)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/96&#34; alt=&#34;96%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Catalan (Català) (ca_CA)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/48&#34; alt=&#34;48%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian (Italiano) (it_IT)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/99&#34; alt=&#34;99%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swedish (Svenska) (sv_SE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/39&#34; alt=&#34;39%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish (Polski) (pl_PL)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/90&#34; alt=&#34;90%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Romanian (Română) (ro_RO)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/39&#34; alt=&#34;39%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean (한국어) (ko_KR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/84&#34; alt=&#34;84%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese Brazilian (Português) (pt_BR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/60&#34; alt=&#34;60%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese (Português) (pt_PT)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/78&#34; alt=&#34;78%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian (Русский) (ru_RU)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/84&#34; alt=&#34;84%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Basque (Euskara) (eu_ES)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/62&#34; alt=&#34;62%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese (日本語) (ja_JP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/90&#34; alt=&#34;90%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dutch (Nederlands) (nl_NL)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/96&#34; alt=&#34;96%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greek (Ελληνικά) (el_GR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/82&#34; alt=&#34;82%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish (Türkçe) (tr_TR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/99&#34; alt=&#34;99%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Indonesia (Bahasa Indonesia) (id_ID)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/76&#34; alt=&#34;76%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi (हिंदी) (hi_IN)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/77&#34; alt=&#34;77%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hungarian (Magyar) (hu_HU)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/76&#34; alt=&#34;76%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bulgarian (Български) (bg_BG)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/94&#34; alt=&#34;94%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sebian Latin alphabet (Srpski) (sr_LATN_RS)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/78&#34; alt=&#34;78%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ukrainian (Українська) (uk_UA)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/90&#34; alt=&#34;90%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slovakian (Slovensky) (sk_SK)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/92&#34; alt=&#34;92%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Czech (Česky) (cs_CZ)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/90&#34; alt=&#34;90%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Croatian (Hrvatski) (hr_HR)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/95&#34; alt=&#34;95%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Norwegian (Norsk) (no_NB)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/96&#34; alt=&#34;96%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Thai (ไทย) (th_TH)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://geps.dev/progress/100&#34; alt=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing (creating issues, translations, fixing bugs, etc.)&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Customisation&lt;/h2&gt; &#xA;&lt;p&gt;Stirling PDF allows easy customization of the app. Includes things like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom application name&lt;/li&gt; &#xA; &lt;li&gt;Custom slogans, icons, HTML, images CSS etc (via file overrides)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two options for this, either using the generated settings file &lt;code&gt;settings.yml&lt;/code&gt; This file is located in the &lt;code&gt;/configs&lt;/code&gt; directory and follows standard YAML formatting&lt;/p&gt; &#xA;&lt;p&gt;Environment variables are also supported and would override the settings file For example in the settings.yml you have&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;security:&#xA;  enableLogin: &#39;true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To have this via an environment variable you would have &lt;code&gt;SECURITY_ENABLELOGIN&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Current list of settings is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;security:&#xA;  enableLogin: false # set to &#39;true&#39; to enable login&#xA;  csrfDisabled: true # Set to &#39;true&#39; to disable CSRF protection (not recommended for production)&#xA;  loginAttemptCount: 5 # lock user account after 5 tries&#xA;  loginResetTimeMinutes: 120 # lock account for 2 hours after x attempts&#xA;  loginMethod: all # &#39;all&#39; (Login Username/Password and OAuth2[must be enabled and configured]), &#39;normal&#39;(only Login with Username/Password) or &#39;oauth2&#39;(only Login with OAuth2)&#xA;  initialLogin:&#xA;    username: &#39;&#39; # Initial username for the first login&#xA;    password: &#39;&#39; # Initial password for the first login&#xA;  oauth2:&#xA;    enabled: false # set to &#39;true&#39; to enable login (Note: enableLogin must also be &#39;true&#39; for this to work)&#xA;    client:&#xA;      keycloak:&#xA;        issuer: &#39;&#39; # URL of the Keycloak realm&#39;s OpenID Connect Discovery endpoint&#xA;        clientId: &#39;&#39; # Client ID for Keycloak OAuth2&#xA;        clientSecret: &#39;&#39; # Client Secret for Keycloak OAuth2&#xA;        scopes: openid, profile, email # Scopes for Keycloak OAuth2&#xA;        useAsUsername: preferred_username # Field to use as the username for Keycloak OAuth2&#xA;      google:&#xA;        clientId: &#39;&#39; # Client ID for Google OAuth2&#xA;        clientSecret: &#39;&#39; # Client Secret for Google OAuth2&#xA;        scopes: https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/userinfo.profile # Scopes for Google OAuth2&#xA;        useAsUsername: email # Field to use as the username for Google OAuth2&#xA;      github:&#xA;        clientId: &#39;&#39; # Client ID for GitHub OAuth2&#xA;        clientSecret: &#39;&#39; # Client Secret for GitHub OAuth2&#xA;        scopes: read:user # Scope for GitHub OAuth2&#xA;        useAsUsername: login # Field to use as the username for GitHub OAuth2&#xA;    issuer: &#39;&#39; # set to any provider that supports OpenID Connect Discovery (/.well-known/openid-configuration) end-point&#xA;    clientId: &#39;&#39; # Client ID from your provider&#xA;    clientSecret: &#39;&#39; # Client Secret from your provider&#xA;    autoCreateUser: false # set to &#39;true&#39; to allow auto-creation of non-existing users&#xA;    useAsUsername: email # Default is &#39;email&#39;; custom fields can be used as the username&#xA;    scopes: openid, profile, email # Specify the scopes for which the application will request permissions&#xA;    provider: google # Set this to your OAuth provider&#39;s name, e.g., &#39;google&#39; or &#39;keycloak&#39;&#xA;&#xA;system:&#xA;  defaultLocale: &#39;en-US&#39; # Set the default language (e.g. &#39;de-DE&#39;, &#39;fr-FR&#39;, etc)&#xA;  googlevisibility: false # &#39;true&#39; to allow Google visibility (via robots.txt), &#39;false&#39; to disallow&#xA;  enableAlphaFunctionality: false # Set to enable functionality which might need more testing before it fully goes live (This feature might make no changes)&#xA;  showUpdate: true # see when a new update is available&#xA;  showUpdateOnlyAdmin: false # Only admins can see when a new update is available, depending on showUpdate it must be set to &#39;true&#39;&#xA;  customHTMLFiles: false # enable to have files placed in /customFiles/templates override the existing template html files&#xA;&#xA;ui:&#xA;  appName: &#39;&#39; # Application&#39;s visible name&#xA;  homeDescription: &#39;&#39; # Short description or tagline shown on homepage.&#xA;  appNameNavbar: &#39;&#39; # Name displayed on the navigation bar&#xA;&#xA;endpoints:&#xA;  toRemove: [] # List endpoints to disable (e.g. [&#39;img-to-pdf&#39;, &#39;remove-pages&#39;])&#xA;  groupsToRemove: [] # List groups to disable (e.g. [&#39;LibreOffice&#39;])&#xA;&#xA;metrics:&#xA;  enabled: true # &#39;true&#39; to enable Info APIs (`/api/*`) endpoints, &#39;false&#39; to disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an additional config file &lt;code&gt;/configs/custom_settings.yml&lt;/code&gt; were users familiar with java and spring application.properties can input their own settings on-top of Stirling-PDFs existing ones&lt;/p&gt; &#xA;&lt;h3&gt;Extra notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Endpoints. Currently, the endpoints ENDPOINTS_TO_REMOVE and GROUPS_TO_REMOVE can include comma separate lists of endpoints and groups to disable as example ENDPOINTS_TO_REMOVE=img-to-pdf,remove-pages would disable both image-to-pdf and remove pages, GROUPS_TO_REMOVE=LibreOffice Would disable all things that use LibreOffice. You can see a list of all endpoints and groups &lt;a href=&#34;https://github.com/Stirling-Tools/Stirling-PDF/raw/main/Endpoint-groups.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;customStaticFilePath. Customise static files such as the app logo by placing files in the /customFiles/static/ directory. An example of customising app logo is placing a /customFiles/static/favicon.svg to override current SVG. This can be used to change any images/icons/css/fonts/js etc in Stirling-PDF&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment only parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SYSTEM_ROOTURIPATH&lt;/code&gt; ie set to &lt;code&gt;/pdf-app&lt;/code&gt; to Set the application&#39;s root URI to &lt;code&gt;localhost:8080/pdf-app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SYSTEM_CONNECTIONTIMEOUTMINUTES&lt;/code&gt; to set custom connection timeout values&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_ENABLE_SECURITY&lt;/code&gt; to tell docker to download security jar (required as true for auth login)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INSTALL_BOOK_AND_ADVANCED_HTML_OPS&lt;/code&gt; to download calibre onto stirling-pdf enabling pdf to/from book and advanced html conversion&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LANGS&lt;/code&gt; to define custom font libraries to install for use for document conversions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;For those wanting to use Stirling-PDFs backend API to link with their own custom scripting to edit PDFs you can view all existing API documentation &lt;a href=&#34;https://app.swaggerhub.com/apis-docs/Stirling-Tools/Stirling-PDF/&#34;&gt;here&lt;/a&gt; or navigate to /swagger-ui/index.html of your stirling-pdf instance for your versions documentation (Or by following the API button in your settings of Stirling-PDF)&lt;/p&gt; &#xA;&lt;h2&gt;Login authentication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/images/login-light.png&#34; alt=&#34;stirling-login&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User must have the folder ./configs volumed within docker so that it is retained during updates.&lt;/li&gt; &#xA; &lt;li&gt;Docker users must download the security jar version by setting &lt;code&gt;DOCKER_ENABLE_SECURITY&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in environment variables.&lt;/li&gt; &#xA; &lt;li&gt;Then either enable login via the settings.yml file or via setting &lt;code&gt;SECURITY_ENABLE_LOGIN&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now the initial user will be generated with username &lt;code&gt;admin&lt;/code&gt; and password &lt;code&gt;stirling&lt;/code&gt;. On login you will be forced to change the password to a new one. You can also use the environment variables &lt;code&gt;SECURITY_INITIALLOGIN_USERNAME&lt;/code&gt; and &lt;code&gt;SECURITY_INITIALLOGIN_PASSWORD&lt;/code&gt; to set your own straight away (Recommended to remove them after user creation).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the above has been done, on restart, a new stirling-pdf-DB.mv.db will show if everything worked.&lt;/p&gt; &#xA;&lt;p&gt;When you login to Stirling PDF you will be redirected to /login page to login with those default credentials. After login everything should function as normal&lt;/p&gt; &#xA;&lt;p&gt;To access your account settings go to Account settings in the settings cog menu (top right in navbar) This Account settings menu is also where you find your API key.&lt;/p&gt; &#xA;&lt;p&gt;To add new users go to the bottom of Account settings and hit &#39;Admin Settings&#39;, here you can add new users. The different roles mentioned within this are for rate limiting. This is a Work in progress which will be expanding on more in future&lt;/p&gt; &#xA;&lt;p&gt;For API usage you must provide a header with &#39;X-API-Key&#39; and the associated API key for that user.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Q1: What are your planned features?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress bar/Tracking&lt;/li&gt; &#xA; &lt;li&gt;Full custom logic pipelines to combine multiple operations together.&lt;/li&gt; &#xA; &lt;li&gt;Folder support with auto scanning to perform operations on&lt;/li&gt; &#xA; &lt;li&gt;Redact text (Via UI not just automated way)&lt;/li&gt; &#xA; &lt;li&gt;Add Forms&lt;/li&gt; &#xA; &lt;li&gt;Multi page layout (Stich PDF pages together) support x rows y columns and custom page sizing&lt;/li&gt; &#xA; &lt;li&gt;Fill forms manually or automatically&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Q2: Why is my application downloading .htm files?&lt;/h3&gt; &#xA;&lt;p&gt;This is an issue caused commonly by your NGINX configuration. The default file upload size for NGINX is 1MB, you need to add the following in your Nginx sites-available file. &lt;code&gt;client_max_body_size SIZE;&lt;/code&gt; Where &#34;SIZE&#34; is 50M for example for 50MB files.&lt;/p&gt; &#xA;&lt;h3&gt;Q3: Why is my download timing out&lt;/h3&gt; &#xA;&lt;p&gt;NGINX has timeout values by default so if you are running Stirling-PDF behind NGINX you may need to set a timeout value such as adding the config &lt;code&gt;proxy_read_timeout 3600;&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stretchr/testify</title>
    <updated>2024-07-25T01:29:23Z</updated>
    <id>tag:github.com,2024-07-25:/stretchr/testify</id>
    <link href="https://github.com/stretchr/testify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit with common assertions and mocks that plays nicely with the standard library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Testify - Thou Shalt Write Tests&lt;/h1&gt; &#xA;&lt;p&gt;ℹ️ We are working on testify v2 and would love to hear what you&#39;d like to see in it, have your say here: &lt;a href=&#34;https://cutt.ly/testify&#34;&gt;https://cutt.ly/testify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stretchr/testify/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/stretchr/testify/actions/workflows/main.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/stretchr/testify&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/stretchr/testify&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/stretchr/testify&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.&lt;/p&gt; &#xA;&lt;p&gt;Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#assert-package&#34;&gt;Easy assertions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#mock-package&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#suite-package&#34;&gt;Testing suite interfaces and functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install testify with &lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#installation&#34;&gt;one line of code&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#staying-up-to-date&#34;&gt;update it with another&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For an introduction to writing test code in Go, see &lt;a href=&#34;https://go.dev/doc/code#Testing&#34;&gt;https://go.dev/doc/code#Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the API Documentation &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify&#34;&gt;https://pkg.go.dev/github.com/stretchr/testify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/Antonboom/testifylint&#34;&gt;testifylint&lt;/a&gt; (via &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golanci-lint&lt;/a&gt;) to avoid common mistakes&lt;/li&gt; &#xA; &lt;li&gt;A little about &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test-Driven Development (TDD)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/assert&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; package provides some helpful methods that allow you to write better test code in Go.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prints friendly, easy to read failure descriptions&lt;/li&gt; &#xA; &lt;li&gt;Allows for very readable code&lt;/li&gt; &#xA; &lt;li&gt;Optionally annotate each assertion with a message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See it in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestSomething(t *testing.T) {&#xA;&#xA;  // assert equality&#xA;  assert.Equal(t, 123, 123, &#34;they should be equal&#34;)&#xA;&#xA;  // assert inequality&#xA;  assert.NotEqual(t, 123, 456, &#34;they should not be equal&#34;)&#xA;&#xA;  // assert for nil (good for errors)&#xA;  assert.Nil(t, object)&#xA;&#xA;  // assert for not nil (good when you expect something)&#xA;  if assert.NotNil(t, object) {&#xA;&#xA;    // now we know that object isn&#39;t nil, we are safe to make&#xA;    // further assertions without causing any errors&#xA;    assert.Equal(t, &#34;Something&#34;, object.Value)&#xA;&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every assert func takes the &lt;code&gt;testing.T&lt;/code&gt; object as the first argument. This is how it writes the errors out through the normal &lt;code&gt;go test&lt;/code&gt; capabilities.&lt;/li&gt; &#xA; &lt;li&gt;Every assert func returns a bool indicating whether the assertion was successful or not, this is useful for if you want to go on making further assertions under certain conditions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;if you assert many times, use the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestSomething(t *testing.T) {&#xA;  assert := assert.New(t)&#xA;&#xA;  // assert equality&#xA;  assert.Equal(123, 123, &#34;they should be equal&#34;)&#xA;&#xA;  // assert inequality&#xA;  assert.NotEqual(123, 456, &#34;they should not be equal&#34;)&#xA;&#xA;  // assert for nil (good for errors)&#xA;  assert.Nil(object)&#xA;&#xA;  // assert for not nil (good when you expect something)&#xA;  if assert.NotNil(object) {&#xA;&#xA;    // now we know that object isn&#39;t nil, we are safe to make&#xA;    // further assertions without causing any errors&#xA;    assert.Equal(&#34;Something&#34;, object.Value)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/require&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;require&lt;/code&gt; package provides same global functions as the &lt;code&gt;assert&lt;/code&gt; package, but instead of returning a boolean result they terminate current test. These functions must be called from the goroutine running the test or benchmark function, not from other goroutines created during the test. Otherwise race conditions may occur.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pkg.go.dev/testing#T.FailNow&#34;&gt;t.FailNow&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/mock&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;mock&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;mock&lt;/code&gt; package provides a mechanism for easily writing mock objects that can be used in place of real objects when writing test code.&lt;/p&gt; &#xA;&lt;p&gt;An example test function that tests a piece of code that relies on an external object &lt;code&gt;testObj&lt;/code&gt;, can set up expectations (testify) and assert that they indeed happened:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/mock&#34;&#xA;)&#xA;&#xA;/*&#xA;  Test objects&#xA;*/&#xA;&#xA;// MyMockedObject is a mocked object that implements an interface&#xA;// that describes an object that the code I am testing relies on.&#xA;type MyMockedObject struct{&#xA;  mock.Mock&#xA;}&#xA;&#xA;// DoSomething is a method on MyMockedObject that implements some interface&#xA;// and just records the activity, and returns what the Mock object tells it to.&#xA;//&#xA;// In the real object, this method would do something useful, but since this&#xA;// is a mocked object - we&#39;re just going to stub it out.&#xA;//&#xA;// NOTE: This method is not being tested here, code that uses this object is.&#xA;func (m *MyMockedObject) DoSomething(number int) (bool, error) {&#xA;&#xA;  args := m.Called(number)&#xA;  return args.Bool(0), args.Error(1)&#xA;&#xA;}&#xA;&#xA;/*&#xA;  Actual test functions&#xA;*/&#xA;&#xA;// TestSomething is an example of how to use our test object to&#xA;// make assertions about some target code we are testing.&#xA;func TestSomething(t *testing.T) {&#xA;&#xA;  // create an instance of our test object&#xA;  testObj := new(MyMockedObject)&#xA;&#xA;  // set up expectations&#xA;  testObj.On(&#34;DoSomething&#34;, 123).Return(true, nil)&#xA;&#xA;  // call the code we are testing&#xA;  targetFuncThatDoesSomethingWithObj(testObj)&#xA;&#xA;  // assert that the expectations were met&#xA;  testObj.AssertExpectations(t)&#xA;&#xA;&#xA;}&#xA;&#xA;// TestSomethingWithPlaceholder is a second example of how to use our test object to&#xA;// make assertions about some target code we are testing.&#xA;// This time using a placeholder. Placeholders might be used when the&#xA;// data being passed in is normally dynamically generated and cannot be&#xA;// predicted beforehand (eg. containing hashes that are time sensitive)&#xA;func TestSomethingWithPlaceholder(t *testing.T) {&#xA;&#xA;  // create an instance of our test object&#xA;  testObj := new(MyMockedObject)&#xA;&#xA;  // set up expectations with a placeholder in the argument list&#xA;  testObj.On(&#34;DoSomething&#34;, mock.Anything).Return(true, nil)&#xA;&#xA;  // call the code we are testing&#xA;  targetFuncThatDoesSomethingWithObj(testObj)&#xA;&#xA;  // assert that the expectations were met&#xA;  testObj.AssertExpectations(t)&#xA;&#xA;&#xA;}&#xA;&#xA;// TestSomethingElse2 is a third example that shows how you can use&#xA;// the Unset method to cleanup handlers and then add new ones.&#xA;func TestSomethingElse2(t *testing.T) {&#xA;&#xA;  // create an instance of our test object&#xA;  testObj := new(MyMockedObject)&#xA;&#xA;  // set up expectations with a placeholder in the argument list&#xA;  mockCall := testObj.On(&#34;DoSomething&#34;, mock.Anything).Return(true, nil)&#xA;&#xA;  // call the code we are testing&#xA;  targetFuncThatDoesSomethingWithObj(testObj)&#xA;&#xA;  // assert that the expectations were met&#xA;  testObj.AssertExpectations(t)&#xA;&#xA;  // remove the handler now so we can add another one that takes precedence&#xA;  mockCall.Unset()&#xA;&#xA;  // return false now instead of true&#xA;  testObj.On(&#34;DoSomething&#34;, mock.Anything).Return(false, nil)&#xA;&#xA;  testObj.AssertExpectations(t)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on how to write mock code, check out the &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/mock&#34;&gt;API documentation for the &lt;code&gt;mock&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://vektra.github.io/mockery/latest/&#34;&gt;mockery tool&lt;/a&gt; to autogenerate the mock code against an interface as well, making using mocks much quicker.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/suite&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;suite&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;suite&lt;/code&gt; package provides functionality that you might be used to from more common object-oriented languages. With it, you can build a testing suite as a struct, build setup/teardown methods and testing methods on your struct, and run them with &#39;go test&#39; as per normal.&lt;/p&gt; &#xA;&lt;p&gt;An example suite is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Basic imports&#xA;import (&#xA;    &#34;testing&#34;&#xA;    &#34;github.com/stretchr/testify/assert&#34;&#xA;    &#34;github.com/stretchr/testify/suite&#34;&#xA;)&#xA;&#xA;// Define the suite, and absorb the built-in basic suite&#xA;// functionality from testify - including a T() method which&#xA;// returns the current testing context&#xA;type ExampleTestSuite struct {&#xA;    suite.Suite&#xA;    VariableThatShouldStartAtFive int&#xA;}&#xA;&#xA;// Make sure that VariableThatShouldStartAtFive is set to five&#xA;// before each test&#xA;func (suite *ExampleTestSuite) SetupTest() {&#xA;    suite.VariableThatShouldStartAtFive = 5&#xA;}&#xA;&#xA;// All methods that begin with &#34;Test&#34; are run as tests within a&#xA;// suite.&#xA;func (suite *ExampleTestSuite) TestExample() {&#xA;    assert.Equal(suite.T(), 5, suite.VariableThatShouldStartAtFive)&#xA;}&#xA;&#xA;// In order for &#39;go test&#39; to run this suite, we need to create&#xA;// a normal test function and pass our suite to suite.Run&#xA;func TestExampleTestSuite(t *testing.T) {&#xA;    suite.Run(t, new(ExampleTestSuite))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more complete example, using all of the functionality provided by the suite package, look at our &lt;a href=&#34;https://github.com/stretchr/testify/raw/master/suite/suite_test.go&#34;&gt;example testing suite&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on writing suites, check out the &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/suite&#34;&gt;API documentation for the &lt;code&gt;suite&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Suite&lt;/code&gt; object has assertion methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Basic imports&#xA;import (&#xA;    &#34;testing&#34;&#xA;    &#34;github.com/stretchr/testify/suite&#34;&#xA;)&#xA;&#xA;// Define the suite, and absorb the built-in basic suite&#xA;// functionality from testify - including assertion methods.&#xA;type ExampleTestSuite struct {&#xA;    suite.Suite&#xA;    VariableThatShouldStartAtFive int&#xA;}&#xA;&#xA;// Make sure that VariableThatShouldStartAtFive is set to five&#xA;// before each test&#xA;func (suite *ExampleTestSuite) SetupTest() {&#xA;    suite.VariableThatShouldStartAtFive = 5&#xA;}&#xA;&#xA;// All methods that begin with &#34;Test&#34; are run as tests within a&#xA;// suite.&#xA;func (suite *ExampleTestSuite) TestExample() {&#xA;    suite.Equal(suite.VariableThatShouldStartAtFive, 5)&#xA;}&#xA;&#xA;// In order for &#39;go test&#39; to run this suite, we need to create&#xA;// a normal test function and pass our suite to suite.Run&#xA;func TestExampleTestSuite(t *testing.T) {&#xA;    suite.Run(t, new(ExampleTestSuite))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To install Testify, use &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/stretchr/testify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will then make the following packages available to you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com/stretchr/testify/assert&#xA;github.com/stretchr/testify/require&#xA;github.com/stretchr/testify/mock&#xA;github.com/stretchr/testify/suite&#xA;github.com/stretchr/testify/http (deprecated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the &lt;code&gt;testify/assert&lt;/code&gt; package into your code using this template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestSomething(t *testing.T) {&#xA;&#xA;  assert.True(t, true, &#34;True is true!&#34;)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Staying up to date&lt;/h1&gt; &#xA;&lt;p&gt;To update Testify to the latest version, use &lt;code&gt;go get -u github.com/stretchr/testify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Supported go versions&lt;/h1&gt; &#xA;&lt;p&gt;We currently support the most recent major Go versions from 1.19 onward.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please feel free to submit issues, fork the repository and send pull requests!&lt;/p&gt; &#xA;&lt;p&gt;When submitting an issue, we ask that you please include a complete test function that demonstrates the issue. Extra credit for those using Testify to write the test code that demonstrates it.&lt;/p&gt; &#xA;&lt;p&gt;Code generation is used. &lt;a href=&#34;https://github.com/search?q=repo%3Astretchr%2Ftestify%20%22Code%20generated%20with%22&amp;amp;type=code&#34;&gt;Look for &lt;code&gt;Code generated with&lt;/code&gt;&lt;/a&gt; at the top of some files. Run &lt;code&gt;go generate ./...&lt;/code&gt; to update generated files.&lt;/p&gt; &#xA;&lt;p&gt;We also chat on the &lt;a href=&#34;https://gophers.slack.com&#34;&gt;Gophers Slack&lt;/a&gt; group in the &lt;code&gt;#testify&lt;/code&gt; and &lt;code&gt;#testify-dev&lt;/code&gt; channels.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>