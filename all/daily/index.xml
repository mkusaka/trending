<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-13T01:30:11Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leminlimez/Cowabunga</title>
    <updated>2023-02-13T01:30:11Z</updated>
    <id>tag:github.com,2023-02-13:/leminlimez/Cowabunga</id>
    <link href="https://github.com/leminlimez/Cowabunga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS 14.0-15.7.1 &amp; 16.0-16.1.2 MacDirtyCow ToolBox&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/52459150/215552092-9dc1e029-da35-43da-867f-17279e3dc180.png&#34; alt=&#34;Artboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cowabunga&lt;/h1&gt; &#xA;&lt;p&gt;A Jailed toolbox application for iOS 14.0-15.7.1 and 16.0-16.1.2 using &lt;a href=&#34;https://support.apple.com/en-us/HT213530&#34;&gt;CVE-2022-46689&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable Notifications and set Location Services to &lt;strong&gt;Always&lt;/strong&gt; to keep the app running in the background, keep the dock and folder background hidden, and prevent some sound effects from reverting.&lt;/p&gt; &#xA;&lt;p&gt;Warning: Some changes are permanent on iOS 14.0-14.8.1&lt;/p&gt; &#xA;&lt;p&gt;IPA available in the &lt;a href=&#34;https://github.com/leminlimez/Cowabunga/releases/latest&#34;&gt;Releases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Running in the background to keep some changes from reverting&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;From running tests, battery loss is negligible (~1% per day on frequent), but that may vary&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Springboard&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hide dock&lt;/li&gt; &#xA;   &lt;li&gt;Hide home bar&lt;/li&gt; &#xA;   &lt;li&gt;Hide folder backgrounds&lt;/li&gt; &#xA;   &lt;li&gt;Disable folder background blur&lt;/li&gt; &#xA;   &lt;li&gt;Disable app switcher blur&lt;/li&gt; &#xA;   &lt;li&gt;Hide CC Module Backgrounds&lt;/li&gt; &#xA;   &lt;li&gt;Hide Notification Banner Background&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;App Icon Themes&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Importing folders of app icons&lt;/li&gt; &#xA;   &lt;li&gt;No WebClips!&lt;/li&gt; &#xA;   &lt;li&gt;Disclaimer: Some apps may look highly compressed. This may be fixed in the future. You could use shortcuts and disable app banner for those apps instead.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Audio&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Custom sound effects&lt;/li&gt; &#xA;   &lt;li&gt;Upload your own sounds (nearly every audio format allowed!)&lt;/li&gt; &#xA;   &lt;li&gt;Max upload audio size of 150 kb, but will not apply for audio if too big!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Passcode&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customize passcode keys&lt;/li&gt; &#xA;   &lt;li&gt;Import passcode keys files (.passthm) from TrollTools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Locks&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Importing locks from TrollLock&lt;/li&gt; &#xA;   &lt;li&gt;Custom number of frames + custom animation speeds (see below)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explore&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Find and download themes for passcodes, locks, and app icons!&lt;/li&gt; &#xA;   &lt;li&gt;If you would like to submit your own works, please &lt;a href=&#34;https://discord.gg/VyVcNjRMeg&#34;&gt;join the discord&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Status Bar&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change carrier name&lt;/li&gt; &#xA;   &lt;li&gt;Change time text&lt;/li&gt; &#xA;   &lt;li&gt;Change breadcrumb text&lt;/li&gt; &#xA;   &lt;li&gt;Hide many icons in the status bar&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other Tools&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lock Screen Footnote&lt;/li&gt; &#xA;   &lt;li&gt;Notification Badges Changer (iOS 14-15 ONLY)&lt;/li&gt; &#xA;   &lt;li&gt;Springboard Colors&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Misc&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disable shortcut banners&lt;/li&gt; &#xA;   &lt;li&gt;Turn shortcuts into app clips&lt;/li&gt; &#xA;   &lt;li&gt;Supervise Device Warning: Use the features below at your own risk!&lt;/li&gt; &#xA;   &lt;li&gt;Change system version (shows in settings, iOS 15+)&lt;/li&gt; &#xA;   &lt;li&gt;Enable iPhone X Gestures&lt;/li&gt; &#xA;   &lt;li&gt;Enable Dynamic Island (iOS 16+)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extra Tools&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lock Screen Footnote&lt;/li&gt; &#xA;   &lt;li&gt;No Lock On Respring&lt;/li&gt; &#xA;   &lt;li&gt;Numeric Wi-Fi Strength&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/Home.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/Tools.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/SpringboardTools.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/Audio_Changer.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/Passcode_Editor.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/LS_Footnote.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/Misc.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/leminlimez/Cowabunga/main/Images/Extra_Tools.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can install through AltStore, Sideloadly, Xcode, or TrollStore (if your device supports it)&lt;/p&gt; &#xA;&lt;h2&gt;Creating Custom Lock Animations&lt;/h2&gt; &#xA;&lt;p&gt;Lock animations are very simple to make. For the frames, each image must be named &#34;trollformation&#34; with a number afterwards (ie. trollformation1.png, trollformation2.png, trollformation3.png...). You can use up to 120 frames, though I am not sure of the exact size limit, which is probably much less. &lt;strong&gt;If your animation is not exactly 40 frames or you want to customize the display length of each frame, you need to define the animations.&lt;/strong&gt; This is very simple to do:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a json file named &lt;code&gt;animations.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Define the values. Format: &lt;code&gt;&#34;Frame Number&#34;: Time Interval&lt;/code&gt; Example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;1&#34;: 0,&#xA;    &#34;2&#34;: 0.025,&#xA;    &#34;10&#34;: 0.01,&#xA;    &#34;15&#34;: 0.025&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; You do not need to state the length of each frame. The only time that absolutely needs to be defined is the first frame. If you did not set a time for the frame, Cowabunga will use the time from the last frame. The &lt;code&gt;Time Interval&lt;/code&gt; is how long the frame stays on the screen for. &lt;strong&gt;Important:&lt;/strong&gt; The frame number must be a string (meaning in quotes) because of how json decoding works.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Just build like a normal Xcode project. Sign using your own team and bundle identifier. You can also build the IPA file with &lt;code&gt;ipabuild.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcelocation/TrollTools&#34;&gt;TrollTools&lt;/a&gt; for ipabuild.command, carrier changer logic, alerts UI, and update inbounds message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ginsudev/WDBFontOverwrite&#34;&gt;FontOverwrite&lt;/a&gt; for exploit code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcelocation&#34;&gt;SourceLocation&lt;/a&gt; for the redesigned springboard UI and background services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BomberFish&#34;&gt;BomberFish&lt;/a&gt; for AirPower sound.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/c22dev&#34;&gt;c22dev&lt;/a&gt; for fixing AirPower and some included audios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matteozappia/DynamicCow&#34;&gt;DynamicCow&lt;/a&gt; for DynamicIsland tweak + improved plist function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcelocation/Evyrest&#34;&gt;Evyrest&lt;/a&gt; for location based background running.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Suggestions and support&lt;/h2&gt; &#xA;&lt;p&gt;You can either create an issue on this GitHub repo, or join our &lt;a href=&#34;https://discord.gg/VyVcNjRMeg&#34;&gt;Discord server&lt;/a&gt; where us, or other members, might help you.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uutils/coreutils</title>
    <updated>2023-02-13T01:30:11Z</updated>
    <id>tag:github.com,2023-02-13:/uutils/coreutils</id>
    <link href="https://github.com/uutils/coreutils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform Rust rewrite of the GNU coreutils&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uutils coreutils&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/coreutils&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/coreutils.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/wQVJbvJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aaronepower/tokei&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/uutils/coreutils?category=code&#34; alt=&#34;LOC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.rs/repo/github/uutils/coreutils&#34;&gt;&lt;img src=&#34;https://deps.rs/repo/github/uutils/coreutils/status.svg?sanitize=true&#34; alt=&#34;dependency status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/uutils/coreutils&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/uutils/coreutils/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;CodeCov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/MSRV-1.64.0-brightgreen&#34; alt=&#34;MSRV&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- markdownlint-disable commands-show-output no-duplicate-heading --&gt; &#xA;&lt;!-- spell-checker:ignore markdownlint ; (options) DESTDIR RUNTEST UTILNAME --&gt; &#xA;&lt;p&gt;uutils is an attempt at writing universal (as in cross-platform) CLI utilities in &lt;a href=&#34;http://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt;. While all programs have been implemented, some options might be missing or different behavior might be experienced.&lt;/p&gt; &#xA;&lt;p&gt;To install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cargo install coreutils&#xA;$ ~/.cargo/bin/coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, Mac, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms. Rust was chosen not only because it is fast and safe, but is also excellent for writing cross-platform code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;uutils has both user and developer documentation available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uutils.github.io/user/&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uutils.github.io/dev/coreutils/&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both can also be generated locally, the instructions for that can be found in the &lt;a href=&#34;https://github.com/uutils/uutils.github.io&#34;&gt;coreutils docs&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;!-- ANCHOR: build (this mark is needed for mdbook) --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rust (&lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;rustc&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GNU Make (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rust Version&lt;/h3&gt; &#xA;&lt;p&gt;uutils follows Rust&#39;s release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version (MSRV) is &lt;code&gt;1.64.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;There are currently two methods to build the uutils binaries: either Cargo or GNU Make.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Building the full package, including all documentation, requires both Cargo and Gnu Make on a Unix platform.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For either method, we first need to fetch the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/uutils/coreutils&#xA;$ cd coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Building uutils using Cargo is easy because the process is the same as for every other Rust program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command builds the most portable common core set of uutils into a multicall (BusyBox-type) binary, named &#39;coreutils&#39;, on most Rust-supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform (on that platform) is as simple as specifying it as a feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --release --features macos&#xA;# or ...&#xA;$ cargo build --release --features windows&#xA;# or ...&#xA;$ cargo build --release --features unix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build --features &#34;base32 cat echo rm&#34; --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named &#34;uu_UTILNAME&#34;. To build individual utilities, use cargo to build just the specific packages (using the &lt;code&gt;--package&lt;/code&gt; [aka &lt;code&gt;-p&lt;/code&gt;] option). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo build -p uu_base32 -p uu_cat -p uu_echo -p uu_rm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;Building using &lt;code&gt;make&lt;/code&gt; is a simple process as well.&lt;/p&gt; &#xA;&lt;p&gt;To simply build all available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build all but a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build only a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Likewise, installing can simply be done using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install --path .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will install uutils into Cargo&#39;s &lt;em&gt;bin&lt;/em&gt; folder (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;$HOME/.cargo/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This does not install files necessary for shell completion. For shell completion to work, use &lt;code&gt;GNU Make&lt;/code&gt; or see &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;To install all available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install using &lt;code&gt;sudo&lt;/code&gt; switch &lt;code&gt;-E&lt;/code&gt; must be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo -E make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install all but a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install only a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install every program with a prefix (e.g. uu-echo uu-cat):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make PROG_PREFIX=PREFIX_GOES_HERE install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the multicall binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make MULTICALL=y install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set install parent directory (default value is /usr/local):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# DESTDIR is also supported&#xA;$ make PREFIX=/my/path install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing with &lt;code&gt;make&lt;/code&gt; installs shell completions for all installed utilities for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;. Completions for &lt;code&gt;elvish&lt;/code&gt; and &lt;code&gt;powershell&lt;/code&gt; can also be generated; See &lt;code&gt;Manually install shell completions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually install shell completions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;coreutils&lt;/code&gt; binary can generate completions for the &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; shells. It prints the result to stdout.&lt;/p&gt; &#xA;&lt;p&gt;The syntax is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run completion &amp;lt;utility&amp;gt; &amp;lt;shell&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, to install completions for &lt;code&gt;ls&lt;/code&gt; on &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;/usr/local/share/bash-completion/completions/ls&lt;/code&gt;, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo run completion ls bash &amp;gt; /usr/local/share/bash-completion/completions/ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Un-installation&lt;/h2&gt; &#xA;&lt;p&gt;Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;To uninstall uutils:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo uninstall uutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;To uninstall all utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall every program with a set prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make PROG_PREFIX=PREFIX_GOES_HERE uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall the multicall binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make MULTICALL=y uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To uninstall from a custom parent directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# DESTDIR is also supported&#xA;$ make PREFIX=/my/path uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ANCHOR_END: build (this mark is needed for mdbook) --&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Testing can be done using either Cargo or &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;Just like with building, we follow the standard procedure for testing using Cargo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;cargo test&lt;/code&gt; only runs the common programs. To run also platform specific tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test --features unix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would prefer to test a select few utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test --features &#34;chmod mv tail&#34; --no-default-features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want to test the core utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo test  -p uucore -p coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gdb --args target/debug/coreutils ls&#xA;(gdb) b ls.rs:79&#xA;(gdb) run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Make&lt;/h3&gt; &#xA;&lt;p&gt;To simply test all available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test all but a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make SKIP_UTILS=&#39;UTILITY_1 UTILITY_2&#39; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test only a few of the available utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include tests for unimplemented behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; SPEC=y test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Busybox Tests&lt;/h3&gt; &#xA;&lt;p&gt;This testing functionality is only available on *nix operating systems and requires &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run busybox tests for all utilities for which busybox has tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make busytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run busybox tests for a few of the available utilities&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; busytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass an argument like &#34;-v&#34; to the busybox test runtime&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make UTILS=&#39;UTILITY_1 UTILITY_2&#39; RUNTEST_ARGS=&#39;-v&#39; busytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparing with GNU&lt;/h3&gt; &#xA;&lt;p&gt;Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found &lt;a href=&#34;https://uutils.github.io/user/test_coverage.html&#34;&gt;in the user manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/uutils/coreutils-tracking/raw/main/gnu-results.png?raw=true&#34; alt=&#34;Evolution over time&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash util/build-gnu.sh&#xA;$ bash util/run-gnu-test.sh&#xA;# To run a single test:&#xA;$ bash util/run-gnu-test.sh tests/touch/not-owner.sh # for example&#xA;# To run several tests:&#xA;$ bash util/run-gnu-test.sh tests/touch/not-owner.sh tests/rm/no-give-up.sh # for example&#xA;# If this is a perl (.pl) test, to run in debug:&#xA;$ DEBUG=1 bash util/run-gnu-test.sh tests/misc/sm3sum.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it relies on individual utilities (not the multicall binary).&lt;/p&gt; &#xA;&lt;h3&gt;Improving the GNU compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The Python script &lt;code&gt;./util/remaining-gnu-error.py&lt;/code&gt; shows the list of failing tests in the CI.&lt;/p&gt; &#xA;&lt;p&gt;To improve the GNU compatibility, the following process is recommended:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Identify a test (the smaller, the better) on a program that you understand or is easy to understand. You can use the &lt;code&gt;./util/remaining-gnu-error.py&lt;/code&gt; script to help with this decision.&lt;/li&gt; &#xA; &lt;li&gt;Build both the GNU and Rust coreutils using: &lt;code&gt;bash util/build-gnu.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the test with &lt;code&gt;bash util/run-gnu-test.sh &amp;lt;your test&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start to modify &lt;code&gt;&amp;lt;your test&amp;gt;&lt;/code&gt; to understand what is wrong. Examples: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;set -v&lt;/code&gt; to have the bash verbose mode&lt;/li&gt; &#xA;   &lt;li&gt;Add &lt;code&gt;echo $?&lt;/code&gt; where needed&lt;/li&gt; &#xA;   &lt;li&gt;When the variable &lt;code&gt;fail&lt;/code&gt; is used in the test, &lt;code&gt;echo $fail&lt;/code&gt; to see when the test started to fail&lt;/li&gt; &#xA;   &lt;li&gt;Bump the content of the output (ex: &lt;code&gt;cat err&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Or, if the test is simple, extract the relevant information to create a new test case running both GNU &amp;amp; Rust implementation&lt;/li&gt; &#xA; &lt;li&gt;Start to modify the Rust implementation to match the expected behavior&lt;/li&gt; &#xA; &lt;li&gt;Add a test to make sure that we don&#39;t regress (our test suite is super quick)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute to uutils, please see &lt;a href=&#34;https://raw.githubusercontent.com/uutils/coreutils/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;p&gt;Please note that this is not fully accurate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some new options can be added / removed in the GNU implementation;&lt;/li&gt; &#xA; &lt;li&gt;Some error management might be missing;&lt;/li&gt; &#xA; &lt;li&gt;Some behaviors might be different.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/uutils/coreutils/issues/3336&#34;&gt;https://github.com/uutils/coreutils/issues/3336&lt;/a&gt; for the main meta bugs (many are missing).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Done&lt;/th&gt; &#xA;   &lt;th&gt;WIP&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;arch&lt;/td&gt; &#xA;   &lt;td&gt;cp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base32&lt;/td&gt; &#xA;   &lt;td&gt;date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base64&lt;/td&gt; &#xA;   &lt;td&gt;dd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;basename&lt;/td&gt; &#xA;   &lt;td&gt;df&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;basenc&lt;/td&gt; &#xA;   &lt;td&gt;expr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cat&lt;/td&gt; &#xA;   &lt;td&gt;install&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chcon&lt;/td&gt; &#xA;   &lt;td&gt;ls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chgrp&lt;/td&gt; &#xA;   &lt;td&gt;more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chmod&lt;/td&gt; &#xA;   &lt;td&gt;numfmt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chown&lt;/td&gt; &#xA;   &lt;td&gt;od (&lt;code&gt;--strings&lt;/code&gt; and 128-bit data types missing)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chroot&lt;/td&gt; &#xA;   &lt;td&gt;pr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cksum&lt;/td&gt; &#xA;   &lt;td&gt;printf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comm&lt;/td&gt; &#xA;   &lt;td&gt;sort&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;csplit&lt;/td&gt; &#xA;   &lt;td&gt;split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cut&lt;/td&gt; &#xA;   &lt;td&gt;tac&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dircolors&lt;/td&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dirname&lt;/td&gt; &#xA;   &lt;td&gt;dir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;du&lt;/td&gt; &#xA;   &lt;td&gt;vdir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;echo&lt;/td&gt; &#xA;   &lt;td&gt;stty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;env&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;expand&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;factor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fmt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;groups&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hashsum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;head&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;join&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kill&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;link&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ln&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;logname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;md5sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha1sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha224sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha256sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha384sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;del&gt;sha512sum&lt;/del&gt; (replaced by &lt;a href=&#34;https://github.com/uutils/coreutils/raw/main/src/uu/hashsum/src/hashsum.rs&#34;&gt;hashsum&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mkdir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mkfifo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mknod&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mktemp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nohup&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nproc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;paste&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pathchk&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pinky&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;printenv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ptx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pwd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;readlink&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;realpath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;relpath&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rmdir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runcon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shred&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shuf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sleep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stdbuf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sync&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tail&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tee&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timeout&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;touch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;truncate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tsort&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tty&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unexpand&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uniq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unlink&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uptime&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;users&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;who&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;whoami&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;uutils is licensed under the MIT License - see the &lt;code&gt;LICENSE&lt;/code&gt; file for details&lt;/p&gt; &#xA;&lt;p&gt;GNU Coreutils is licensed under the GPL 3.0 or later.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acikkaynak/deprem-yardim-backend-go</title>
    <updated>2023-02-13T01:30:11Z</updated>
    <id>tag:github.com,2023-02-13:/acikkaynak/deprem-yardim-backend-go</id>
    <link href="https://github.com/acikkaynak/deprem-yardim-backend-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;deprem-yardim-backend-go&lt;/h1&gt; &#xA;&lt;h1&gt;Proje Mimarisi&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/architecture.jpeg&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Endpointler&lt;/h1&gt; &#xA;&lt;h3&gt;/feeds/areas&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Query Params&lt;/strong&gt;: &lt;code&gt;sw_lat&lt;/code&gt; &lt;code&gt;sw_lng&lt;/code&gt; &lt;code&gt;ne_lat&lt;/code&gt; &lt;code&gt;ne_lng&lt;/code&gt; &lt;code&gt;time_stamp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;İşlenmiş lokasyon verisini afetharita.com adresine lokasyon ve time_stamp bilgisine döner. Eğer timestamp alanı boş geçilirse son 1 yıla ait kayıtlar döner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Örnek Request&lt;/strong&gt; : &lt;code&gt;/feeds/areas?ne_lat=37.62633260711298&amp;amp;ne_lng=36.97311401367188&amp;amp;sw_lat=37.558254797440675&amp;amp;sw_lng=36.82479858398438&amp;amp;time_stamp=1675807028&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;/feeds/:id&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Path variable&lt;/strong&gt;: &lt;code&gt;id (int64)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tekil bir işlenmemiş twitter verisini döner.&lt;/p&gt; &#xA;&lt;h3&gt;Run Locally&lt;/h3&gt; &#xA;&lt;p&gt;Redis: &lt;code&gt;docker run -d --name redis-stack-server -p 6379:6379 redis/redis-stack-server:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Grafana: &lt;code&gt;docker run --name grafana -i -p 3000:3000 grafana/grafana&lt;/code&gt; &lt;a href=&#34;https://grafana.com/grafana/dashboards/6671-go-processes/&#34;&gt;Dashboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prometheus: &lt;code&gt;docker run -it -d --name prometheus -p 9090:9090 -v $PWD:/etc/prometheus prom/prometheus --config.file=/etc/prometheus/prometheus.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API vs Consumer Mode&lt;/h2&gt; &#xA;&lt;p&gt;Dockerfile contains 2 executables: &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;consumer&lt;/code&gt;. One of the option can be selected via &lt;code&gt;--entrypoint&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;After building docker image, in order to run api that contains fiber endpoints;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --entrypoint &#34;/api&#34; &amp;lt;image_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In same way, if you want to run application in consumer mode, use following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --entrypoint &#34;/consumer&#34; &amp;lt;image_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;/monitor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/fiber-monitor.png&#34; alt=&#34;monitor&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;/metrics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/metrics.png&#34; alt=&#34;metrics&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swagger&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/swagger.png&#34; alt=&#34;swagger&#34;&gt; swagger klasörü altındaki dosyaları güncellemek için bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swag init -g cmd/api/main.go --output swagger&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>