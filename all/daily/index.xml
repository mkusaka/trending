<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-09T01:28:45Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gin-gonic/gin</title>
    <updated>2025-04-09T01:28:45Z</updated>
    <id>tag:github.com,2025-04-09:/gin-gonic/gin</id>
    <link href="https://github.com/gin-gonic/gin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need smashing performance, get yourself some Gin.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gin Web Framework&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;159px&#34; src=&#34;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/gin-gonic/gin/workflows/Run%20Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gin-gonic/gin&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/gin-gonic/gin?tab=doc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/gin-gonic/gin?status.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/gin-gonic/gin?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/gin-gonic/gin/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gin-gonic/gin/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/gin-gonic/gin.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/gin-gonic/gin&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gin is a web framework written in &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;. It features a martini-like API with performance that is up to 40 times faster thanks to &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;httprouter&lt;/a&gt;. If you need performance and good productivity, you will love Gin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gin&#39;s key features are:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zero allocation router&lt;/li&gt; &#xA; &lt;li&gt;Speed&lt;/li&gt; &#xA; &lt;li&gt;Middleware support&lt;/li&gt; &#xA; &lt;li&gt;Crash-free&lt;/li&gt; &#xA; &lt;li&gt;JSON validation&lt;/li&gt; &#xA; &lt;li&gt;Route grouping&lt;/li&gt; &#xA; &lt;li&gt;Error management&lt;/li&gt; &#xA; &lt;li&gt;Built-in rendering&lt;/li&gt; &#xA; &lt;li&gt;Extensible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Gin requires &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; version &lt;a href=&#34;https://go.dev/doc/devel/release#go1.23.0&#34;&gt;1.23&lt;/a&gt; or above.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Gin&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://go.dev/wiki/Modules#how-to-use-modules&#34;&gt;Go&#39;s module support&lt;/a&gt;, &lt;code&gt;go [build|run|test]&lt;/code&gt; automatically fetches the necessary dependencies when you add the import in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;import &#34;github.com/gin-gonic/gin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/gin-gonic/gin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Gin&lt;/h3&gt; &#xA;&lt;p&gt;A basic example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;net/http&#34;&#xA;&#xA;  &#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  r := gin.Default()&#xA;  r.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;    c.JSON(http.StatusOK, gin.H{&#xA;      &#34;message&#34;: &#34;pong&#34;,&#xA;    })&#xA;  })&#xA;  r.Run() // listen and serve on 0.0.0.0:8080 (for windows &#34;localhost:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the code, use the &lt;code&gt;go run&lt;/code&gt; command, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run example.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;a href=&#34;http://0.0.0.0:8080/ping&#34;&gt;&lt;code&gt;0.0.0.0:8080/ping&lt;/code&gt;&lt;/a&gt; in your browser to see the response!&lt;/p&gt; &#xA;&lt;h3&gt;See more examples&lt;/h3&gt; &#xA;&lt;h4&gt;Quick Start&lt;/h4&gt; &#xA;&lt;p&gt;Learn and practice with the &lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/docs/doc.md&#34;&gt;Gin Quick Start&lt;/a&gt;, which includes API examples and builds tag.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;A number of ready-to-run examples demonstrating various use cases of Gin are available in the &lt;a href=&#34;https://github.com/gin-gonic/examples&#34;&gt;Gin examples&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://pkg.go.dev/github.com/gin-gonic/gin&#34;&gt;API documentation on go.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is also available on &lt;a href=&#34;https://gin-gonic.com&#34;&gt;gin-gonic.com&lt;/a&gt; in several languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/docs/&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/zh-cn/docs/&#34;&gt;简体中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/zh-tw/docs/&#34;&gt;繁體中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/ja/docs/&#34;&gt;日本語&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/es/docs/&#34;&gt;Español&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/ko-kr/docs/&#34;&gt;한국어&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/tr/docs/&#34;&gt;Turkish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/fa/docs/&#34;&gt;Persian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gin-gonic.com/pt/docs/&#34;&gt;Português&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/doc/tutorial/web-service-gin&#34;&gt;Tutorial: Developing a RESTful API with Go and Gin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Gin uses a custom version of &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;HttpRouter&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/BENCHMARKS.md&#34;&gt;see all benchmarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Benchmark name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(1)&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(2)&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(3)&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(4)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGin_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;43550&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;27364 ns/op&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;0 B/op&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;0 allocs/op&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkAce_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40543&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;29670 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkAero_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;57632&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20648 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkBear_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9234&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;216179 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86448 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;943 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkBeego_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7407&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;243496 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;71456 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkBone_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;420&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2922835 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;720160 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8620 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkChi_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7620&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;238331 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;87696 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkDenco_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18355&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;64494 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20224 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;167 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkEcho_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;31251&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38479 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGocraftWeb_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4117&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;300062 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;131656 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1686 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGoji_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3274&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;416158 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;56112 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;334 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGojiv2_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1402&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;870518 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;352720 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4321 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGoJsonRest_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2976&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;401507 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;134371 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2737 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGoRestful_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;410&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2913158 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;910144 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2938 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGorillaMux_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;346&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3384987 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;251650 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1994 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGowwwRouter_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;143025 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;72144 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;501 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkHttpRouter_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55938&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21360 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkHttpTreeMux_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;153944 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;65856 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;671 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkKocha_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;106315 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;23304 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;843 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkLARS_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;47779&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;25084 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkMacaron_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3266&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;371907 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;149409 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1624 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkMartini_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;331&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3444706 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;226551 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2325 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkPat_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;273&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4381818 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1483152 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26963 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkPossum_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;164367 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;84448 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkR2router_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;160220 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;77328 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;979 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkRivet_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;14625&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;82453 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16272 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;167 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkTango_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6255&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;279611 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;63826 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1618 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkTigerTonic_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2008&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;687874 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;193856 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4474 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkTraffic_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;355&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3478508 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;820744 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;14114 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkVulcan_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6885&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;193333 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19894 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(1): Total Repetitions achieved in constant time, higher means more confident result&lt;/li&gt; &#xA; &lt;li&gt;(2): Single Repetition Duration (ns/op), lower is better&lt;/li&gt; &#xA; &lt;li&gt;(3): Heap Memory (B/op), lower is better&lt;/li&gt; &#xA; &lt;li&gt;(4): Average Allocations per Repetition (allocs/op), lower is better&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Middleware&lt;/h2&gt; &#xA;&lt;p&gt;You can find many useful Gin middlewares at &lt;a href=&#34;https://github.com/gin-contrib&#34;&gt;gin-contrib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uses&lt;/h2&gt; &#xA;&lt;p&gt;Here are some awesome projects that are using the &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt; web framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gorush&#34;&gt;gorush&lt;/a&gt;: A push notification server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fnproject/fn&#34;&gt;fnproject&lt;/a&gt;: A container native, cloud agnostic serverless platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/photoprism/photoprism&#34;&gt;photoprism&lt;/a&gt;: Personal photo management powered by Google TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luraproject/lura&#34;&gt;lura&lt;/a&gt;: Ultra performant API Gateway with middleware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoas/picfit&#34;&gt;picfit&lt;/a&gt;: An image resizing server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/distribworks/dkron&#34;&gt;dkron&lt;/a&gt;: Distributed, fault tolerant job scheduling system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Gin is the work of hundreds of contributors. We appreciate your help!&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>modelscope/FunASR</title>
    <updated>2025-04-09T01:28:45Z</updated>
    <id>tag:github.com,2025-04-09:/modelscope/FunASR</id>
    <link href="https://github.com/modelscope/FunASR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Fundamental End-to-End Speech Recognition Toolkit and Open Source SOTA Pretrained Models, Supporting Speech Recognition, Voice Activity Detection, Text Post-processing etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/README_zh.md&#34;&gt;简体中文&lt;/a&gt;|English)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Akshay090/svg-banners&#34;&gt;&lt;img src=&#34;https://svg-banners.vercel.app/api?type=origin&amp;amp;text1=FunASR%F0%9F%A4%A0&amp;amp;text2=%F0%9F%92%96%20A%20Fundamental%20End-to-End%20Speech%20Recognition%20Toolkit&amp;amp;width=800&amp;amp;height=210&#34; alt=&#34;SVG Banners&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/funasr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/funasr&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://trendshift.io/repositories/3839&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/3839&#34; alt=&#34;alibaba-damo-academy%2FFunASR | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FunASR&lt;/strong&gt; hopes to build a bridge between academic research and industrial applications on speech recognition. By supporting the training &amp;amp; finetuning of the industrial-grade speech recognition model, researchers and developers can conduct research and production of speech recognition models more conveniently, and promote the development of speech recognition ecology. ASR for Fun！&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#highlights&#34;&gt;&lt;strong&gt;Highlights&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR#whats-new&#34;&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#quick-start&#34;&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/raw/main/docs/tutorial/README.md&#34;&gt;&lt;strong&gt;Tutorial&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;&lt;strong&gt;Runtime&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#model-zoo&#34;&gt;&lt;strong&gt;Model Zoo&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#contact&#34;&gt;&lt;strong&gt;Contact&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;highlights&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FunASR is a fundamental speech recognition toolkit that offers a variety of features, including speech recognition (ASR), Voice Activity Detection (VAD), Punctuation Restoration, Language Models, Speaker Verification, Speaker Diarization and multi-talker ASR. FunASR provides convenient scripts and tutorials, supporting inference and fine-tuning of pre-trained models.&lt;/li&gt; &#xA; &lt;li&gt;We have released a vast collection of academic and industrial pretrained models on the &lt;a href=&#34;https://www.modelscope.cn/models?page=1&amp;amp;tasks=auto-speech-recognition&#34;&gt;ModelScope&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/FunASR&#34;&gt;huggingface&lt;/a&gt;, which can be accessed through our &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/raw/main/docs/model_zoo/modelscope_models.md&#34;&gt;Model Zoo&lt;/a&gt;. The representative &lt;a href=&#34;https://www.modelscope.cn/models/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary&#34;&gt;Paraformer-large&lt;/a&gt;, a non-autoregressive end-to-end speech recognition model, has the advantages of high accuracy, high efficiency, and convenient deployment, supporting the rapid construction of speech recognition services. For more details on service deployment, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme_cn.md&#34;&gt;service deployment document&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;whats-new&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s new:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024/10/29: Real-time Transcription Service 1.12 released, The 2pass-offline mode supports the SensevoiceSmal model；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;2024/10/10：Added support for the Whisper-large-v3-turbo model, a multitasking model that can perform multilingual speech recognition, speech translation, and language identification. It can be downloaded from the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/whisper/demo.py&#34;&gt;modelscope&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/whisper/demo_from_openai.py&#34;&gt;openai&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2024/09/26: Offline File Transcription Service 4.6, Offline File Transcription Service of English 1.7, Real-time Transcription Service 1.11 released, fix memory leak &amp;amp; Support the SensevoiceSmall onnx model；File Transcription Service 2.0 GPU released, Fix GPU memory leak; (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;2024/09/25：keyword spotting models are new supported. Supports fine-tuning and inference for four models: &lt;a href=&#34;https://modelscope.cn/models/iic/speech_sanm_kws_phone-xiaoyun-commands-online&#34;&gt;fsmn_kws&lt;/a&gt;, &lt;a href=&#34;https://modelscope.cn/models/iic/speech_sanm_kws_phone-xiaoyun-commands-online&#34;&gt;fsmn_kws_mt&lt;/a&gt;, &lt;a href=&#34;https://modelscope.cn/models/iic/speech_sanm_kws_phone-xiaoyun-commands-offline&#34;&gt;sanm_kws&lt;/a&gt;, &lt;a href=&#34;https://modelscope.cn/models/iic/speech_sanm_kws_phone-xiaoyun-commands-online&#34;&gt;sanm_kws_streaming&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2024/07/04：&lt;a href=&#34;https://github.com/FunAudioLLM/SenseVoice&#34;&gt;SenseVoice&lt;/a&gt; is a speech foundation model with multiple speech understanding capabilities, including ASR, LID, SER, and AED.&lt;/li&gt; &#xA; &lt;li&gt;2024/07/01: Offline File Transcription Service GPU 1.1 released, optimize BladeDISC model compatibility issues; ref to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2024/06/27: Offline File Transcription Service GPU 1.0 released, supporting dynamic batch processing and multi-threading concurrency. In the long audio test set, the single-thread RTF is 0.0076, and multi-threads&#39; speedup is 1200+ (compared to 330+ on CPU); ref to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2024/05/15：emotion recognition models are new supported. &lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_large/summary&#34;&gt;emotion2vec+large&lt;/a&gt;，&lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_base/summary&#34;&gt;emotion2vec+base&lt;/a&gt;，&lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_seed/summary&#34;&gt;emotion2vec+seed&lt;/a&gt;. currently supports the following categories: 0: angry 1: happy 2: neutral 3: sad 4: unknown.&lt;/li&gt; &#xA; &lt;li&gt;2024/05/15: Offline File Transcription Service 4.5, Offline File Transcription Service of English 1.6, Real-time Transcription Service 1.10 released, adapting to FunASR 1.0 model structure；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Full Changelog&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;2024/03/05：Added the Qwen-Audio and Qwen-Audio-Chat large-scale audio-text multimodal models, which have topped multiple audio domain leaderboards. These models support speech dialogue, &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/qwen_audio&#34;&gt;usage&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;2024/03/05：Added support for the Whisper-large-v3 model, a multitasking model that can perform multilingual speech recognition, speech translation, and language identification. It can be downloaded from the&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/whisper/demo.py&#34;&gt;modelscope&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/whisper/demo_from_openai.py&#34;&gt;openai&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;2024/03/05: Offline File Transcription Service 4.4, Offline File Transcription Service of English 1.5，Real-time Transcription Service 1.9 released，docker image supports ARM64 platform, update modelscope；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/30：funasr-1.0 has been released (&lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/discussions/1319&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/30：emotion recognition models are new supported. &lt;a href=&#34;https://www.modelscope.cn/models/iic/emotion2vec_base_finetuned/summary&#34;&gt;model link&lt;/a&gt;, modified from &lt;a href=&#34;https://github.com/ddlBoJack/emotion2vec&#34;&gt;repo&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/25: Offline File Transcription Service 4.2, Offline File Transcription Service of English 1.3 released，optimized the VAD (Voice Activity Detection) data processing method, significantly reducing peak memory usage, memory leak optimization; Real-time Transcription Service 1.7 released，optimizatized the client-side；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/09: The Funasr SDK for Windows version 2.0 has been released, featuring support for The offline file transcription service (CPU) of Mandarin 4.1, The offline file transcription service (CPU) of English 1.2, The real-time transcription service (CPU) of Mandarin 1.6. For more details, please refer to the official documentation or release notes(&lt;a href=&#34;https://www.modelscope.cn/models/damo/funasr-runtime-win-cpu-x64/summary&#34;&gt;FunASR-Runtime-Windows&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/03: File Transcription Service 4.0 released, Added support for 8k models, optimized timestamp mismatch issues and added sentence-level timestamps, improved the effectiveness of English word FST hotwords, supported automated configuration of thread parameters, and fixed known crash issues as well as memory leak problems, refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md#file-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/03: Real-time Transcription Service 1.6 released，The 2pass-offline mode supports Ngram language model decoding and WFST hotwords, while also addressing known crash issues and memory leak problems, (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md#the-real-time-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/03: Fixed known crash issues as well as memory leak problems, (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md#file-transcription-service-english-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/12/04: The Funasr SDK for Windows version 1.0 has been released, featuring support for The offline file transcription service (CPU) of Mandarin, The offline file transcription service (CPU) of English, The real-time transcription service (CPU) of Mandarin. For more details, please refer to the official documentation or release notes(&lt;a href=&#34;https://www.modelscope.cn/models/damo/funasr-runtime-win-cpu-x64/summary&#34;&gt;FunASR-Runtime-Windows&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2023/11/08: The offline file transcription service 3.0 (CPU) of Mandarin has been released, adding punctuation large model, Ngram language model, and wfst hot words. For detailed information, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#file-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/17: The offline file transcription service (CPU) of English has been released. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#file-transcription-service-english-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/13: &lt;a href=&#34;https://slidespeech.github.io/&#34;&gt;SlideSpeech&lt;/a&gt;: A large scale multi-modal audio-visual corpus with a significant amount of real-time synchronized slides.&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/10: The ASR-SpeakersDiarization combined pipeline &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/raw/main/egs_modelscope/asr_vad_spk/speech_paraformer-large-vad-punc-spk_asr_nat-zh-cn/demo.py&#34;&gt;Paraformer-VAD-SPK&lt;/a&gt; is now released. Experience the model to get recognition results with speaker information.&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/07: &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunCodec&#34;&gt;FunCodec&lt;/a&gt;: A Fundamental, Reproducible and Integrable Open-source Toolkit for Neural Speech Codec.&lt;/li&gt; &#xA;  &lt;li&gt;2023/09/01: The offline file transcription service 2.0 (CPU) of Mandarin has been released, with added support for ffmpeg, timestamp, and hotword models. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#file-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/08/07: The real-time transcription service (CPU) of Mandarin has been released. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#the-real-time-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/07/17: BAT is released, which is a low-latency and low-memory-consumption RNN-T model. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/egs/aishell/bat&#34;&gt;BAT&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/06/26: ASRU2023 Multi-Channel Multi-Party Meeting Transcription Challenge 2.0 completed the competition and announced the results. For more details, please refer to (&lt;a href=&#34;https://alibaba-damo-academy.github.io/FunASR/m2met2/index.html&#34;&gt;M2MeT2.0&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;python&amp;gt;=3.8&#xA;torch&amp;gt;=1.13&#xA;torchaudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install for pypi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -U funasr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or install from source code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/alibaba/FunASR.git &amp;amp;&amp;amp; cd FunASR&#xA;pip3 install -e ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install modelscope or huggingface_hub for the pretrained models (Optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -U modelscope huggingface_hub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model Zoo&lt;/h2&gt; &#xA;&lt;p&gt;FunASR has open-sourced a large number of pre-trained models on industrial data. You are free to use, copy, modify, and share FunASR models under the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/MODEL_LICENSE&#34;&gt;Model License Agreement&lt;/a&gt;. Below are some representative models, for more models please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/model_zoo&#34;&gt;Model Zoo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Note: ⭐ represents the ModelScope model zoo, 🤗 represents the Huggingface model zoo, 🍀 represents the OpenAI model zoo)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Task Details&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Training Data&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameters&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SenseVoiceSmall &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/iic/SenseVoiceSmall&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/FunAudioLLM/SenseVoiceSmall&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multiple speech understanding capabilities, including ASR, ITN, LID, SER, and AED, support languages such as zh, yue, en, ja, ko&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;300000 hours&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;234M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;paraformer-zh &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/damo/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/paraformer-zh&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, with timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;nobr&gt;&#xA;     paraformer-zh-streaming &#xA;     &lt;br&gt; ( &#xA;     &lt;a href=&#34;https://modelscope.cn/models/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-online/summary&#34;&gt;⭐&lt;/a&gt; &#xA;     &lt;a href=&#34;https://huggingface.co/funasr/paraformer-zh-streaming&#34;&gt;🤗&lt;/a&gt; )&#xA;    &lt;/nobr&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;paraformer-en &lt;br&gt; ( &lt;a href=&#34;https://www.modelscope.cn/models/damo/speech_paraformer-large-vad-punc_asr_nat-en-16k-common-vocab10020/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/paraformer-en&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, without timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50000 hours, English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;conformer-en &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/speech_conformer_asr-en-16k-vocab4199-pytorch/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/conformer-en&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50000 hours, English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ct-punc &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/punc_ct-transformer_cn-en-common-vocab471067-large/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/ct-punc&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;punctuation restoration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;100M, Mandarin and English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;290M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fsmn-vad &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/speech_fsmn_vad_zh-cn-16k-common-pytorch/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/fsmn-vad&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;voice activity detection&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours, Mandarin and English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.4M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fsmn-kws &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/iic/speech_charctc_kws_phone-xiaoyun/summary&#34;&gt;⭐&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;keyword spotting，streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.7M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fa-zh &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/speech_timestamp_prediction-v1-16k-offline/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/fa-zh&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;timestamp prediction&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cam++ &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/iic/speech_campplus_sv_zh-cn_16k-common/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/campplus&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speaker verification/diarization&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.2M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Whisper-large-v3 &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/iic/Whisper-large-v3/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;🍀&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, with timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1550 M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Whisper-large-v3-turbo &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/iic/Whisper-large-v3-turbo/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;🍀&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, with timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;809 M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Qwen-Audio &lt;br&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/qwen_audio/demo.py&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-Audio&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;audio-text multimodal models (pretraining)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Qwen-Audio-Chat &lt;br&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/qwen_audio/demo_chat.py&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-Audio-Chat&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;audio-text multimodal models (chat)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;emotion2vec+large &lt;br&gt; (&lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_large/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/emotion2vec/emotion2vec_plus_large&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech emotion recongintion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;40000 hours&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;300M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;quick-start&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Below is a quick start tutorial. Test audio files (&lt;a href=&#34;https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/vad_example.wav&#34;&gt;Mandarin&lt;/a&gt;, &lt;a href=&#34;https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/asr_example_en.wav&#34;&gt;English&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Command-line usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;funasr ++model=paraformer-zh ++vad_model=&#34;fsmn-vad&#34; ++punc_model=&#34;ct-punc&#34; ++input=asr_example_zh.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notes: Support recognition of single audio file, as well as file list in Kaldi-style wav.scp format: &lt;code&gt;wav_id wav_pat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Speech Recognition (Non-streaming)&lt;/h3&gt; &#xA;&lt;h4&gt;SenseVoice&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;from funasr.utils.postprocess_utils import rich_transcription_postprocess&#xA;&#xA;model_dir = &#34;iic/SenseVoiceSmall&#34;&#xA;&#xA;model = AutoModel(&#xA;    model=model_dir,&#xA;    vad_model=&#34;fsmn-vad&#34;,&#xA;    vad_kwargs={&#34;max_single_segment_time&#34;: 30000},&#xA;    device=&#34;cuda:0&#34;,&#xA;)&#xA;&#xA;# en&#xA;res = model.generate(&#xA;    input=f&#34;{model.model_path}/example/en.mp3&#34;,&#xA;    cache={},&#xA;    language=&#34;auto&#34;,  # &#34;zn&#34;, &#34;en&#34;, &#34;yue&#34;, &#34;ja&#34;, &#34;ko&#34;, &#34;nospeech&#34;&#xA;    use_itn=True,&#xA;    batch_size_s=60,&#xA;    merge_vad=True,  #&#xA;    merge_length_s=15,&#xA;)&#xA;text = rich_transcription_postprocess(res[0][&#34;text&#34;])&#xA;print(text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameter Description:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;model_dir&lt;/code&gt;: The name of the model, or the path to the model on the local disk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vad_model&lt;/code&gt;: This indicates the activation of VAD (Voice Activity Detection). The purpose of VAD is to split long audio into shorter clips. In this case, the inference time includes both VAD and SenseVoice total consumption, and represents the end-to-end latency. If you wish to test the SenseVoice model&#39;s inference time separately, the VAD model can be disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vad_kwargs&lt;/code&gt;: Specifies the configurations for the VAD model. &lt;code&gt;max_single_segment_time&lt;/code&gt;: denotes the maximum duration for audio segmentation by the &lt;code&gt;vad_model&lt;/code&gt;, with the unit being milliseconds (ms).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_itn&lt;/code&gt;: Whether the output result includes punctuation and inverse text normalization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;batch_size_s&lt;/code&gt;: Indicates the use of dynamic batching, where the total duration of audio in the batch is measured in seconds (s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge_vad&lt;/code&gt;: Whether to merge short audio fragments segmented by the VAD model, with the merged length being &lt;code&gt;merge_length_s&lt;/code&gt;, in seconds (s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ban_emo_unk&lt;/code&gt;: Whether to ban the output of the &lt;code&gt;emo_unk&lt;/code&gt; token.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Paraformer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;# paraformer-zh is a multi-functional asr model&#xA;# use vad, punc, spk or not as you need&#xA;model = AutoModel(model=&#34;paraformer-zh&#34;,  vad_model=&#34;fsmn-vad&#34;,  punc_model=&#34;ct-punc&#34;, &#xA;                  # spk_model=&#34;cam++&#34;, &#xA;                  )&#xA;res = model.generate(input=f&#34;{model.model_path}/example/asr_example.wav&#34;, &#xA;                     batch_size_s=300, &#xA;                     hotword=&#39;魔搭&#39;)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;hub&lt;/code&gt;: represents the model repository, &lt;code&gt;ms&lt;/code&gt; stands for selecting ModelScope download, &lt;code&gt;hf&lt;/code&gt; stands for selecting Huggingface download.&lt;/p&gt; &#xA;&lt;h3&gt;Speech Recognition (Streaming)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;chunk_size = [0, 10, 5] #[0, 10, 5] 600ms, [0, 8, 4] 480ms&#xA;encoder_chunk_look_back = 4 #number of chunks to lookback for encoder self-attention&#xA;decoder_chunk_look_back = 1 #number of encoder chunks to lookback for decoder cross-attention&#xA;&#xA;model = AutoModel(model=&#34;paraformer-zh-streaming&#34;)&#xA;&#xA;import soundfile&#xA;import os&#xA;&#xA;wav_file = os.path.join(model.model_path, &#34;example/asr_example.wav&#34;)&#xA;speech, sample_rate = soundfile.read(wav_file)&#xA;chunk_stride = chunk_size[1] * 960 # 600ms&#xA;&#xA;cache = {}&#xA;total_chunk_num = int(len((speech)-1)/chunk_stride+1)&#xA;for i in range(total_chunk_num):&#xA;    speech_chunk = speech[i*chunk_stride:(i+1)*chunk_stride]&#xA;    is_final = i == total_chunk_num - 1&#xA;    res = model.generate(input=speech_chunk, cache=cache, is_final=is_final, chunk_size=chunk_size, encoder_chunk_look_back=encoder_chunk_look_back, decoder_chunk_look_back=decoder_chunk_look_back)&#xA;    print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;chunk_size&lt;/code&gt; is the configuration for streaming latency.&lt;code&gt; [0,10,5]&lt;/code&gt; indicates that the real-time display granularity is &lt;code&gt;10*60=600ms&lt;/code&gt;, and the lookahead information is &lt;code&gt;5*60=300ms&lt;/code&gt;. Each inference input is &lt;code&gt;600ms&lt;/code&gt; (sample points are &lt;code&gt;16000*0.6=960&lt;/code&gt;), and the output is the corresponding text. For the last speech segment input, &lt;code&gt;is_final=True&lt;/code&gt; needs to be set to force the output of the last word.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;More Examples&lt;/summary&gt; &#xA; &lt;h3&gt;Voice Activity Detection (Non-Streaming)&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;fsmn-vad&#34;)&#xA;wav_file = f&#34;{model.model_path}/example/vad_example.wav&#34;&#xA;res = model.generate(input=wav_file)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: The output format of the VAD model is: &lt;code&gt;[[beg1, end1], [beg2, end2], ..., [begN, endN]]&lt;/code&gt;, where &lt;code&gt;begN/endN&lt;/code&gt; indicates the starting/ending point of the &lt;code&gt;N-th&lt;/code&gt; valid audio segment, measured in milliseconds.&lt;/p&gt; &#xA; &lt;h3&gt;Voice Activity Detection (Streaming)&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;chunk_size = 200 # ms&#xA;model = AutoModel(model=&#34;fsmn-vad&#34;)&#xA;&#xA;import soundfile&#xA;&#xA;wav_file = f&#34;{model.model_path}/example/vad_example.wav&#34;&#xA;speech, sample_rate = soundfile.read(wav_file)&#xA;chunk_stride = int(chunk_size * sample_rate / 1000)&#xA;&#xA;cache = {}&#xA;total_chunk_num = int(len((speech)-1)/chunk_stride+1)&#xA;for i in range(total_chunk_num):&#xA;    speech_chunk = speech[i*chunk_stride:(i+1)*chunk_stride]&#xA;    is_final = i == total_chunk_num - 1&#xA;    res = model.generate(input=speech_chunk, cache=cache, is_final=is_final, chunk_size=chunk_size)&#xA;    if len(res[0][&#34;value&#34;]):&#xA;        print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: The output format for the streaming VAD model can be one of four scenarios:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;[[beg1, end1], [beg2, end2], .., [begN, endN]]&lt;/code&gt;：The same as the offline VAD output result mentioned above.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[[beg, -1]]&lt;/code&gt;：Indicates that only a starting point has been detected.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[[-1, end]]&lt;/code&gt;：Indicates that only an ending point has been detected.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[]&lt;/code&gt;：Indicates that neither a starting point nor an ending point has been detected.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;The output is measured in milliseconds and represents the absolute time from the starting point.&lt;/p&gt; &#xA; &lt;h3&gt;Punctuation Restoration&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;ct-punc&#34;)&#xA;res = model.generate(input=&#34;那今天的会就到这里吧 happy new year 明年见&#34;)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Timestamp Prediction&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;fa-zh&#34;)&#xA;wav_file = f&#34;{model.model_path}/example/asr_example.wav&#34;&#xA;text_file = f&#34;{model.model_path}/example/text.txt&#34;&#xA;res = model.generate(input=(wav_file, text_file), data_type=(&#34;sound&#34;, &#34;text&#34;))&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Speech Emotion Recognition&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;emotion2vec_plus_large&#34;)&#xA;&#xA;wav_file = f&#34;{model.model_path}/example/test.wav&#34;&#xA;&#xA;res = model.generate(wav_file, output_dir=&#34;./outputs&#34;, granularity=&#34;utterance&#34;, extract_embedding=False)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;More usages ref to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/tutorial/README_zh.md&#34;&gt;docs&lt;/a&gt;, more examples ref to &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/tree/main/examples/industrial_data_pretraining&#34;&gt;demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Export ONNX&lt;/h2&gt; &#xA;&lt;h3&gt;Command-line usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;funasr-export ++model=paraformer ++quantize=false ++device=cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;paraformer&#34;, device=&#34;cpu&#34;)&#xA;&#xA;res = model.export(quantize=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test ONNX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pip3 install -U funasr-onnx&#xA;from funasr_onnx import Paraformer&#xA;model_dir = &#34;damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch&#34;&#xA;model = Paraformer(model_dir, batch_size=1, quantize=True)&#xA;&#xA;wav_path = [&#39;~/.cache/modelscope/hub/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch/example/asr_example.wav&#39;]&#xA;&#xA;result = model(wav_path)&#xA;print(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples ref to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/python/onnxruntime&#34;&gt;demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deployment Service&lt;/h2&gt; &#xA;&lt;p&gt;FunASR supports deploying pre-trained or further fine-tuned models for service. Currently, it supports the following types of service deployment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File transcription service, Mandarin, CPU version, done&lt;/li&gt; &#xA; &lt;li&gt;The real-time transcription service, Mandarin (CPU), done&lt;/li&gt; &#xA; &lt;li&gt;File transcription service, English, CPU version, done&lt;/li&gt; &#xA; &lt;li&gt;File transcription service, Mandarin, GPU version, in progress&lt;/li&gt; &#xA; &lt;li&gt;and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more detailed information, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;service deployment documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contact&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community Communication&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter problems in use, you can directly raise Issues on the github page.&lt;/p&gt; &#xA;&lt;p&gt;You can also scan the following DingTalk group to join the community group for communication and discussion.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;DingTalk group&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;div align=&#34;left&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/dingding.png&#34; width=&#34;250&#34;&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;div align=&#34;left&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/alibaba.png&#34; width=&#34;260&#34;&gt;&#xA;    &lt;/div&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;div align=&#34;left&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/nwpu.png&#34; width=&#34;260&#34;&gt;&#xA;    &lt;/div&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/China_Telecom.png&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/RapidAI.png&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/aihealthx.png&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/XVERSE.png&#34; width=&#34;250&#34;&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The contributors can be found in &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/Acknowledge.md&#34;&gt;contributors list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;The MIT License&lt;/a&gt;. FunASR also contains various third-party components and some code modified from other repos under other open source licenses. The use of pretraining model is subject to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/MODEL_LICENSE&#34;&gt;model license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{gao2023funasr,&#xA;  author={Zhifu Gao and Zerui Li and Jiaming Wang and Haoneng Luo and Xian Shi and Mengzhe Chen and Yabin Li and Lingyun Zuo and Zhihao Du and Zhangyu Xiao and Shiliang Zhang},&#xA;  title={FunASR: A Fundamental End-to-End Speech Recognition Toolkit},&#xA;  year={2023},&#xA;  booktitle={INTERSPEECH},&#xA;}&#xA;@inproceedings{An2023bat,&#xA;  author={Keyu An and Xian Shi and Shiliang Zhang},&#xA;  title={BAT: Boundary aware transducer for memory-efficient and low-latency ASR},&#xA;  year={2023},&#xA;  booktitle={INTERSPEECH},&#xA;}&#xA;@inproceedings{gao22b_interspeech,&#xA;  author={Zhifu Gao and ShiLiang Zhang and Ian McLoughlin and Zhijie Yan},&#xA;  title={Paraformer: Fast and Accurate Parallel Transformer for Non-autoregressive End-to-End Speech Recognition},&#xA;  year=2022,&#xA;  booktitle={Proc. Interspeech 2022},&#xA;  pages={2063--2067},&#xA;  doi={10.21437/Interspeech.2022-9996}&#xA;}&#xA;@inproceedings{shi2023seaco,&#xA;  author={Xian Shi and Yexin Yang and Zerui Li and Yanni Chen and Zhifu Gao and Shiliang Zhang},&#xA;  title={SeACo-Paraformer: A Non-Autoregressive ASR System with Flexible and Effective Hotword Customization Ability},&#xA;  year={2023},&#xA;  booktitle={ICASSP2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>chartdb/chartdb</title>
    <updated>2025-04-09T01:28:45Z</updated>
    <id>tag:github.com,2025-04-09:/chartdb/chartdb</id>
    <link href="https://github.com/chartdb/chartdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Database diagrams editor that allows you to visualize and design your DB with a single query.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://chartdb.io#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://github.com/chartdb/chartdb/raw/main/src/assets/logo-light.png&#34; width=&#34;400&#34; height=&#34;70&#34; alt=&#34;ChartDB&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://chartdb.io#%23gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://github.com/chartdb/chartdb/raw/main/src/assets/logo-dark.png&#34; width=&#34;400&#34; height=&#34;70&#34; alt=&#34;ChartDB&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Open-source database diagrams editor&lt;/b&gt; &lt;br&gt; &lt;b&gt;No installations • No Database password required.&lt;/b&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/QeFwyWSKwC&#34;&gt;Community&lt;/a&gt; • &lt;a href=&#34;https://www.chartdb.io?ref=github_readme&#34;&gt;Website&lt;/a&gt; • &lt;a href=&#34;https://chartdb.io/templates?ref=github_readme&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://app.chartdb.io?ref=github_readme&#34;&gt;Demo&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/chartdb/chartdb?tab=AGPL-3.0-1-ov-file#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/chartdb/chartdb?color=blue&#34; alt=&#34;ChartDB is released under the AGPL license.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/chartdb/chartdb/raw/main/CONTRIBUTING.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-Welcome-brightgreen&#34; alt=&#34;PRs welcome!&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/QeFwyWSKwC&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1277047413705670678?color=5865F2&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord community channel&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://x.com/chartdb_io&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/ChartDB?style=social&#34;&gt; &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700px&#34; src=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/public/chartdb.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;🎉 ChartDB&lt;/h3&gt; &#xA;&lt;p&gt;ChartDB is a powerful, web-based database diagramming editor. Instantly visualize your database schema with a single &lt;strong&gt;&#34;Smart Query.&#34;&lt;/strong&gt; Customize diagrams, export SQL scripts, and access all features—no account required. Experience seamless database design here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Instant Schema Import&lt;/strong&gt; Run a single query to instantly retrieve your database schema as JSON. This makes it incredibly fast to visualize your database schema, whether for documentation, team discussions, or simply understanding your data better.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AI-Powered Export for Easy Migration&lt;/strong&gt; Our AI-driven export feature allows you to generate the DDL script in the dialect of your choice. Whether you&#39;re migrating from MySQL to PostgreSQL or from SQLite to MariaDB, ChartDB simplifies the process by providing the necessary scripts tailored to your target database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interactive Editing&lt;/strong&gt; Fine-tune your database schema using our intuitive editor. Easily make adjustments or annotations to better visualize complex structures.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;ChartDB is currently in Public Beta. Star and watch this repository to get notified of updates.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Databases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ PostgreSQL (&lt;img src=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/src/assets/postgresql_logo_2.png&#34; width=&#34;15&#34;&gt; + &lt;img src=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/src/assets/supabase.png&#34; alt=&#34;Supabase&#34; width=&#34;15&#34;&gt; + &lt;img src=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/src/assets/timescale.png&#34; alt=&#34;Timescale&#34; width=&#34;15&#34;&gt; )&lt;/li&gt; &#xA; &lt;li&gt;✅ MySQL&lt;/li&gt; &#xA; &lt;li&gt;✅ SQL Server&lt;/li&gt; &#xA; &lt;li&gt;✅ MariaDB&lt;/li&gt; &#xA; &lt;li&gt;✅ SQLite (&lt;img src=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/src/assets/sqlite_logo_2.png&#34; width=&#34;15&#34;&gt; + &lt;img src=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/src/assets/cloudflare_d1.png&#34; alt=&#34;Cloudflare D1&#34; width=&#34;15&#34;&gt; Cloudflare D1)&lt;/li&gt; &#xA; &lt;li&gt;✅ CockroachDB&lt;/li&gt; &#xA; &lt;li&gt;✅ ClickHouse&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://app.chartdb.io?ref=github_readme_2&#34;&gt;cloud version&lt;/a&gt; or deploy locally:&lt;/p&gt; &#xA;&lt;h3&gt;How To Use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or like this if you want to have AI capabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;VITE_OPENAI_API_KEY=&amp;lt;YOUR_OPEN_AI_KEY&amp;gt; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the Docker Container&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -e OPENAI_API_KEY=&amp;lt;YOUR_OPEN_AI_KEY&amp;gt; -p 8080:80 ghcr.io/chartdb/chartdb:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build and Run locally&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t chartdb .&#xA;docker run -e OPENAI_API_KEY=&amp;lt;YOUR_OPEN_AI_KEY&amp;gt; -p 8080:80 chartdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Custom Inference Server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build&#xA;docker build \&#xA;  --build-arg VITE_OPENAI_API_ENDPOINT=&amp;lt;YOUR_ENDPOINT&amp;gt; \&#xA;  --build-arg VITE_LLM_MODEL_NAME=&amp;lt;YOUR_MODEL_NAME&amp;gt; \&#xA;  -t chartdb .&#xA;&#xA;# Run&#xA;docker run \&#xA;  -e OPENAI_API_ENDPOINT=&amp;lt;YOUR_ENDPOINT&amp;gt; \&#xA;  -e LLM_MODEL_NAME=&amp;lt;YOUR_MODEL_NAME&amp;gt; \&#xA;  -p 8080:80 chartdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You must configure either Option 1 (OpenAI API key) OR Option 2 (Custom endpoint and model name) for AI capabilities to work. Do not mix the two options.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Open your browser and navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration for a local vLLM server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VITE_OPENAI_API_ENDPOINT=http://localhost:8000/v1&#xA;VITE_LLM_MODEL_NAME=Qwen/Qwen2.5-32B-Instruct-AWQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Try it on our website&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://chartdb.io?ref=github_readme_2&#34;&gt;ChartDB.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Go to app&#34;&lt;/li&gt; &#xA; &lt;li&gt;Choose the database that you are using.&lt;/li&gt; &#xA; &lt;li&gt;Take the magic query and run it in your database.&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste the resulting JSON set into ChartDB.&lt;/li&gt; &#xA; &lt;li&gt;Enjoy Viewing &amp;amp; Editing!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;💚 Community &amp;amp; Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/QeFwyWSKwC&#34;&gt;Discord&lt;/a&gt; (For live discussion with the community and the ChartDB team)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chartdb/chartdb/issues&#34;&gt;GitHub Issues&lt;/a&gt; (For any bugs and errors you encounter using ChartDB)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/chartdb_io&#34;&gt;Twitter&lt;/a&gt; (Get news fast)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome community contributions, big or small, and are here to guide you along the way. Message us in the &lt;a href=&#34;https://discord.gg/QeFwyWSKwC&#34;&gt;ChartDB Community Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to contribute, please see our &lt;a href=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project, you agree to follow its terms.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for helping us make ChartDB better for everyone &lt;span&gt;❤️&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ChartDB is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/chartdb/chartdb/main/LICENSE&#34;&gt;GNU Affero General Public License v3.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>