<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:31:25Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dair-ai/ML-Course-Notes</title>
    <updated>2022-07-01T01:31:25Z</updated>
    <id>tag:github.com,2022-07-01:/dair-ai/ML-Course-Notes</id>
    <link href="https://github.com/dair-ai/ML-Course-Notes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎓 Sharing course notes on all topics related to machine learning, NLP, and AI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎓 ML Course Notes&lt;/h1&gt; &#xA;&lt;p&gt;A place to collaborate and share course notes on all topics related to machine learning, NLP, and AI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WIP&lt;/code&gt; denotes work in progress&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🆕&lt;/span&gt; denotes recently published notes&lt;/p&gt; &#xA;&lt;h3&gt;MIT 6.S191 Introduction to Deep Learning (2022) [&lt;a href=&#34;http://introtodeeplearning.com/&#34;&gt;Website&lt;/a&gt;]&lt;/h3&gt; &#xA;&lt;p&gt;Lectures by: Alexander Amini and Ava Soleimany&lt;/p&gt; &#xA;&lt;table class=&#34;tg&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Lecture&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Author&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Introduction to Deep Learning&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Basic fundamentals of neural networks and deep learning.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/7sB052Pz0sQ&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://dair-ai.notion.site/Lecture-1-Intro-to-DL-d4929997a7a34a33a163cf40ba00360b&#34;&gt;Notes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;RNNs and Transformers&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Introduction to recurrent neural networks and transformers.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/QvkQ1B3FBqA&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://dair-ai.notion.site/Lecture-2-Recurrent-Neural-Networks-and-Transformers-71fb3ba2a24f4b6c8cc77281fc19cfab&#34;&gt;Notes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Deep Computer Vision&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Deep Neural Networks for Computer Vision.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/uapdILWYTzE&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://dair-ai.notion.site/Lecture-3-Deep-Computer-Vision-e43a17b50f7e4b5f8393c070b22340a3&#34;&gt;Notes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Deep Generative Modeling&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Autoencoders and GANs.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/QcLlc9lj2hk&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://dair-ai.notion.site/Lecture-4-Deep-Generative-Modeling-928d24a5764d4bf1bcf5fb4c4234f6ac&#34;&gt;Notes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Deep Reinforcement Learning&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Deep RL key concepts and DQNs.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/-WbN61qtTGQ&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://dair-ai.notion.site/Lecture-5-Deep-Reinforcement-Learning-8ecc8b16a5ad4fcc81b5c3ceb21608b5&#34;&gt;Notes &lt;span&gt;🆕&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Limitations and New Frontiers&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Limitations and New Frontiers in Deep Learning.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/wySXLRTxAGQ&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Autonomous Driving with LiDAR&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Autonomous Driving with LiDAR.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/NHZMfSMAHlo&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;WIP&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;CS224N: Natural Language Processing with Deep Learning (2022) [&lt;a href=&#34;https://www.youtube.com/playlist?list=PLoROMvodv4rOSH4v6133s9LFPRHjEmbmJ&#34;&gt;Website&lt;/a&gt;]&lt;/h3&gt; &#xA;&lt;table class=&#34;tg&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Lecture&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Author&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Introduction and Word Vectors&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Introduction to NLP and word vectors.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/rmVRLeJRkl4&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://github.com/dair-ai/ML-Course-Notes/issues/3&#34;&gt;WIP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Neural Classifiers&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;Neural Classifiers for NLP.&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://youtu.be/gqaHkPEZAew&#34;&gt;Video&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://github.com/dair-ai/ML-Course-Notes/issues/4&#34;&gt;WIP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Elvis&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;How To Contribute&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Identify a course and lecture from this &lt;a href=&#34;https://github.com/dair-ai/ML-YouTube-Courses&#34;&gt;list&lt;/a&gt;. If you are working on notes for a lecture, please indicate by opening an issue. This avoids duplicate work.&lt;/li&gt; &#xA; &lt;li&gt;Write your notes, preferably in a Google document, Notion document, or GitHup repo.&lt;/li&gt; &#xA; &lt;li&gt;We care about quality, so make sure to revise your notes before submitting.&lt;/li&gt; &#xA; &lt;li&gt;Once you are finished, open a PR here.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you encounter any problems with the notes? Reach out to the authors of the notes and open issue here.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, open an issue or reach out to me on &lt;a href=&#34;https://twitter.com/omarsar0&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://discord.gg/FzNtjEK9dg&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>delta-io/delta</title>
    <updated>2022-07-01T01:31:25Z</updated>
    <id>tag:github.com,2022-07-01:/delta-io/delta</id>
    <link href="https://github.com/delta-io/delta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source storage framework that enables building a Lakehouse architecture with compute engines including Spark, PrestoDB, Flink, Trino, and Hive and APIs for Scala, Java, Rust, Ruby, and Python.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://docs.delta.io/latest/_static/delta-lake-white.png&#34; width=&#34;200&#34; alt=&#34;Delta Lake Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/delta-io/delta/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/delta-io/delta/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/delta-spark/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/delta-spark.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delta Lake is an open-source storage framework that enables building a &lt;a href=&#34;http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf&#34;&gt;Lakehouse architecture&lt;/a&gt; with compute engines including Spark, PrestoDB, Flink, Trino, and Hive and APIs for Scala, Java, Rust, Ruby, and Python.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.delta.io&#34;&gt;Delta Lake Documentation&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/quick-start.html&#34;&gt;Quick Start Guide&lt;/a&gt; to get started with Scala, Java and Python.&lt;/li&gt; &#xA; &lt;li&gt;Note, this repo is one of many Delta Lake repositories in the &lt;a href=&#34;https://github.com/delta-io&#34;&gt;delta.io&lt;/a&gt; organizations including &lt;a href=&#34;https://github.com/delta-io/connectors&#34;&gt;connectors&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/delta&#34;&gt;delta&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/delta-rs&#34;&gt;delta-rs&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/delta-sharing&#34;&gt;delta-sharing&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/kafka-delta-ingest&#34;&gt;kafka-delta-ingest&lt;/a&gt;, and &lt;a href=&#34;https://github.com/delta-io/website&#34;&gt;website&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following are some of the more popular Delta Lake integrations, refer to &lt;a href=&#34;https://delta.io/integrations/&#34;&gt;delta.io/integrations&lt;/a&gt; for the complete list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/&#34;&gt;Apache Spark™&lt;/a&gt;: This connector allows Apache Spark™ to read from and write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/connectors/tree/master/flink&#34;&gt;Apache Flink (Preview)&lt;/a&gt;: This connector allows Apache Flink to write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prestodb.io/docs/current/connector/deltalake.html&#34;&gt;PrestoDB&lt;/a&gt;: This connector allows PrestoDB to read from Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trino.io/docs/current/connector/delta-lake.html&#34;&gt;Trino&lt;/a&gt;: This connector allows Trino to read from and write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/delta-standalone.html&#34;&gt;Delta Standalone&lt;/a&gt;: This library allows Scala and Java-based projects (including Apache Flink, Apache Hive, Apache Beam, and PrestoDB) to read from and write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/hive-integration.html&#34;&gt;Apache Hive&lt;/a&gt;: This connector allows Apache Hive to read from Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/deltalake/latest/deltalake/&#34;&gt;Delta Rust API&lt;/a&gt;: This library allows Rust (with Python and Ruby bindings) low level access to Delta tables and is intended to be used with data processing frameworks like datafusion, ballista, rust-dataframe, vega, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;em&gt;Table of Contents&lt;/em&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#latest-binaries&#34;&gt;Latest binaries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#api-documentation&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#api-compatibility&#34;&gt;API Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#data-storage-compatibility&#34;&gt;Data Storage Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#transaction-protocol&#34;&gt;Transaction Protocol&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#requirements-for-underlying-storage-systems&#34;&gt;Requirements for Underlying Storage Systems&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#concurrency-control&#34;&gt;Concurrency Control&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#reporting-issues&#34;&gt;Reporting issues&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Latest Binaries&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/&#34;&gt;online documentation&lt;/a&gt; for the latest release.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/delta-apidoc.html&#34;&gt;Scala API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/api/java/index.html&#34;&gt;Java API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/api/python/index.html&#34;&gt;Python API docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.delta.io/latest/delta-standalone.html&#34;&gt;Delta Standalone&lt;/a&gt; library is a single-node Java library that can be used to read from and write to Delta tables. Specifically, this library provides APIs to interact with a table’s metadata in the transaction log, implementing the Delta Transaction Log Protocol to achieve the transactional guarantees of the Delta Lake format.&lt;/p&gt; &#xA;&lt;h3&gt;API Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;There are two types of APIs provided by the Delta Lake project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct Java/Scala/Python APIs - The classes and methods documented in the &lt;a href=&#34;https://docs.delta.io/latest/delta-apidoc.html&#34;&gt;API docs&lt;/a&gt; are considered as stable public APIs. All other classes, interfaces, methods that may be directly accessible in code are considered internal, and they are subject to change across releases.&lt;/li&gt; &#xA; &lt;li&gt;Spark-based APIs - You can read Delta tables through the &lt;code&gt;DataFrameReader&lt;/code&gt;/&lt;code&gt;Writer&lt;/code&gt; (i.e. &lt;code&gt;spark.read&lt;/code&gt;, &lt;code&gt;df.write&lt;/code&gt;, &lt;code&gt;spark.readStream&lt;/code&gt; and &lt;code&gt;df.writeStream&lt;/code&gt;). Options to these APIs will remain stable within a major release of Delta Lake (e.g., 1.x.x).&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/releases.html&#34;&gt;online documentation&lt;/a&gt; for the releases and their compatibility with Apache Spark versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Storage Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Delta Lake guarantees backward compatibility for all Delta Lake tables (i.e., newer versions of Delta Lake will always be able to read tables written by older versions of Delta Lake). However, we reserve the right to break forward compatibility as new features are introduced to the transaction protocol (i.e., an older version of Delta Lake may not be able to read a table produced by a newer version).&lt;/p&gt; &#xA;&lt;p&gt;Breaking changes in the protocol are indicated by incrementing the minimum reader/writer version in the &lt;code&gt;Protocol&lt;/code&gt; &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/core/src/test/scala/org/apache/spark/sql/delta/ActionSerializerSuite.scala&#34;&gt;action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the high-level Delta Lake roadmap, see &lt;a href=&#34;http://delta.io/roadmap&#34;&gt;Delta Lake 2022H1 roadmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For the detailed timeline, see the &lt;a href=&#34;https://github.com/delta-io/delta/milestones&#34;&gt;project roadmap&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Transaction Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/PROTOCOL.md&#34;&gt;Delta Transaction Log Protocol&lt;/a&gt; document provides a specification of the transaction protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements for Underlying Storage Systems&lt;/h2&gt; &#xA;&lt;p&gt;Delta Lake ACID guarantees are predicated on the atomicity and durability guarantees of the storage system. Specifically, we require the storage system to provide the following.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Atomic visibility&lt;/strong&gt;: There must be a way for a file to be visible in its entirety or not visible at all.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mutual exclusion&lt;/strong&gt;: Only one writer must be able to create (or rename) a file at the final destination.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent listing&lt;/strong&gt;: Once a file has been written in a directory, all future listings for that directory must return that file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/delta-storage.html&#34;&gt;online documentation on Storage Configuration&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Concurrency Control&lt;/h2&gt; &#xA;&lt;p&gt;Delta Lake ensures &lt;em&gt;serializability&lt;/em&gt; for concurrent reads and writes. Please see &lt;a href=&#34;https://docs.delta.io/latest/delta-concurrency.html&#34;&gt;Delta Lake Concurrency Control&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/delta-io/delta/issues&#34;&gt;GitHub Issues&lt;/a&gt; to track community reported issues. You can also &lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#community&#34;&gt;contact&lt;/a&gt; the community for getting answers.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Delta Lake. See our &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;We also adhere to the &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Delta Lake Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Delta Lake is compiled using &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html&#34;&gt;SBT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To compile, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate artifacts, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute tests, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute a single test suite, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt &#39;testOnly org.apache.spark.sql.delta.optimize.OptimizeCompactionSuite&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute a single test within and a single test suite, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt &#39;testOnly *.OptimizeCompactionSuite -- -z &#34;optimize command: on partitioned table - all partitions&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html&#34;&gt;SBT docs&lt;/a&gt; for more commands.&lt;/p&gt; &#xA;&lt;h2&gt;IntelliJ Setup&lt;/h2&gt; &#xA;&lt;p&gt;IntelliJ is the recommended IDE to use when developing Delta Lake. To import Delta Lake as a new project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone Delta Lake into, for example, &lt;code&gt;~/delta&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In IntelliJ, select &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;New Project&lt;/code&gt; &amp;gt; &lt;code&gt;Project from Existing Sources...&lt;/code&gt; and select &lt;code&gt;~/delta&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;Import project from external model&lt;/code&gt; select &lt;code&gt;sbt&lt;/code&gt;. Click &lt;code&gt;Next&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;Project JDK&lt;/code&gt; specify a valid Java &lt;code&gt;1.8&lt;/code&gt; JDK and opt to use SBT shell for &lt;code&gt;project reload&lt;/code&gt; and &lt;code&gt;builds&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Finish&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setup Verification&lt;/h3&gt; &#xA;&lt;p&gt;After waiting for IntelliJ to index, verify your setup by running a test suite in IntelliJ.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Search for and open &lt;code&gt;DeltaLogSuite&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Next to the class declaration, right click on the two green arrows and select &lt;code&gt;Run &#39;DeltaLogSuite&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you see errors of the form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Error:(46, 28) object DeltaSqlBaseParser is not a member of package io.delta.sql.parser&#xA;import io.delta.sql.parser.DeltaSqlBaseParser._&#xA;...&#xA;Error:(91, 22) not found: type DeltaSqlBaseParser&#xA;    val parser = new DeltaSqlBaseParser(tokenStream)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile using the SBT CLI: &lt;code&gt;build/sbt compile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Project Structure...&lt;/code&gt; &amp;gt; &lt;code&gt;Modules&lt;/code&gt; &amp;gt; &lt;code&gt;delta-core&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the right panel under &lt;code&gt;Source Folders&lt;/code&gt; remove any &lt;code&gt;target&lt;/code&gt; folders, e.g. &lt;code&gt;target/scala-2.12/src_managed/main [generated]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Apply&lt;/code&gt; and then re-run your test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0, see &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;There are two mediums of communication within the Delta Lake community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Public Slack Channel &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/delta-users/shared_invite/zt-165gcm2g7-0Sc57w7dX0FbfilR9EPwVQ&#34;&gt;Register here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://delta-users.slack.com/&#34;&gt;Login here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/deltalake&#34;&gt;Linkedin page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/deltalake&#34;&gt;Youtube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Public &lt;a href=&#34;https://groups.google.com/forum/#!forum/delta-users&#34;&gt;Mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>qq8e/qq</title>
    <updated>2022-07-01T01:31:25Z</updated>
    <id>tag:github.com,2022-07-01:/qq8e/qq</id>
    <link href="https://github.com/qq8e/qq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;8亿QQ绑定数据泄露查询源码，附送数据。不定期更新下载地址 关注越多送的越多&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qq&lt;/h1&gt; &#xA;&lt;p&gt;qqsb、Tencentsb&lt;br&gt; 8亿QQ绑定数据、腾讯泄露数据&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/J8oFiP9.png&#34; alt=&#34;Image text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.hzgzn.com/content/uploadfile/202101/224d1611802167.png&#34; alt=&#34;Image text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bvstdLp.jpg&#34; alt=&#34;Image text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;查询结果&lt;br&gt; &lt;img src=&#34;https://www.hzgzn.com/content/uploadfile/202101/1af11611802167.jpeg&#34; alt=&#34;Image text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;下载地址&lt;br&gt; &lt;a href=&#34;https://36263f.link.yunpan.360.cn/lk/surl_yS9zkMdGJCi&#34;&gt;360安全网盘&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://pan.baidu.com/s/1MuBCEJWCjs7cDwbgQdibww&#34;&gt;百度网盘&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://pan.baidu.com/s/12FfwVdmzYNkZXTzooH_xQA&#34;&gt;百度网盘(新)&lt;/a&gt;提取码：404v&lt;br&gt; &lt;a href=&#34;https://cloud.189.cn/t/ziieemMruaq2&#34;&gt;天翼网盘(解压密码：209754)&lt;/a&gt;&lt;br&gt; 分享的国内网盘频繁被一些SB举报删除，数据共享人人有责&lt;br&gt; 种子 &lt;a href=&#34;https://mega.nz/file/ct9iVLia#Zd48MrnZehsNyPd0FWX9FZ1TTc7Q9Ket-zJvboABwPw&#34;&gt;https://mega.nz/file/ct9iVLia#Zd48MrnZehsNyPd0FWX9FZ1TTc7Q9Ket-zJvboABwPw&lt;/a&gt;&lt;br&gt; 磁力链接 magnet:?xt=urn:btih:963fd90eee4db809ed4224d1ca7a0639c443cf4b&lt;br&gt; magnet:?xt=urn:btih:c81e0644fd67f73d81b94a31e3fc726679638a98&amp;amp;dn=pcht-v1&lt;/p&gt; &#xA;&lt;h1&gt;举报一次腾讯安全的全体员工死个爹妈&lt;/h1&gt; &#xA;&lt;p&gt;使用方式：&lt;br&gt; 建立数据库，建立表 user，&lt;br&gt; qq 的两字段 qq 和 phone，&lt;br&gt; WB的两字段 phone 和 uid ，&lt;br&gt; 字段类型想节省空间用 bigint 就够，不然用 char 或其他。&lt;br&gt; 修改语句中的文件路径。&lt;br&gt; 语句中的 IGNORE 字段是重复数据时不覆盖，去掉就是覆盖，自行决定覆不覆盖，有重复数据不好建立唯一索引。&lt;br&gt; 还要修改mysql的配置文件，下面的语句才能执行： 在 my.ini 文件中的 mysqld 段添加 secure_file_priv=” 导入完再添加索引。&lt;br&gt; 我导入两个库分别花了二十多分钟。&lt;br&gt; 不过还是分表分库或用 nosql 吧，一个表 8e 数据，建立索引了也吃不消，mysql 单表两千万条数据左右才吃得消。&lt;/p&gt; &#xA;&lt;p&gt;qq8e 的导入:&lt;br&gt; LOAD DATA INFILE ‘D:/qq_6.9_8e_update.txt’ IGNORE&lt;br&gt; INTO TABLE &lt;code&gt;user&lt;/code&gt;&lt;br&gt; FIELDS terminated by ‘—-‘&lt;br&gt; lines terminated by ‘\n&#39;(qq,phone)&lt;br&gt; WB 5e 的导入:&lt;br&gt; LOAD DATA INFILE ‘D:/0/weibo_2019_5e.txt’ IGNORE&lt;br&gt; INTO TABLE &lt;code&gt;user&lt;/code&gt;&lt;br&gt; FIELDS TERMINATED BY ‘\t’&lt;br&gt; LINES TERMINATED BY ‘\n&#39;(phone,uid)&lt;/p&gt; &#xA;&lt;p&gt;备用地址&lt;br&gt; &lt;a href=&#34;https://www.kjsv.com/&#34;&gt;https://www.kjsv.com/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.newyuanma.com/512.html&#34;&gt;https://www.newyuanma.com/512.html&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.qiqiboke.com/1041.html&#34;&gt;https://www.qiqiboke.com/1041.html&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.zslsb.com/qitafx/2219.html&#34;&gt;https://www.zslsb.com/qitafx/2219.html&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.hzgzn.com/zybk/10418.html&#34;&gt;https://www.hzgzn.com/zybk/10418.html&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.vpsche.com/10919.html&#34;&gt;https://www.vpsche.com/10919.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;自建TG社工库机器人&lt;a href=&#34;https://t.me/shegongku58bot&#34;&gt;@shegongku58bot&lt;/a&gt; 分享失效联系QQ45215509免费拿（5.95G数据和7E人口数据）&lt;br&gt; &lt;a href=&#34;https://github.com/qq8e/qq/raw/main/wz/%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E.txt&#34;&gt;免责声明&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>