<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T01:31:00Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sogou/workflow</title>
    <updated>2022-06-19T01:31:00Z</updated>
    <id>tag:github.com,2022-06-19:/sogou/workflow</id>
    <link href="https://github.com/sogou/workflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ Parallel Computing and Asynchronous Networking Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/README_cn.md&#34;&gt;简体中文版（推荐）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sogou C++ Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sogou/workflow/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.cppreference.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-c++-red.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/platform-linux%20%7C%20macos20%7C%20windows-lightgrey.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-lightgrey.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sogou/workflow/actions?query=workflow%3A%22ci+build%22++&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/sogou/workflow/ci%20build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As &lt;strong&gt;Sogou`s C++ server engine&lt;/strong&gt;, Sogou C++ Workflow supports almost all &lt;strong&gt;back-end C++ online services&lt;/strong&gt; of Sogou, including all search services, cloud input method, online advertisements, etc., handling more than &lt;strong&gt;10 billion&lt;/strong&gt; requests every day. This is an &lt;strong&gt;enterprise-level programming engine&lt;/strong&gt; in light and elegant design which can satisfy most C++ back-end development requirements.&lt;/p&gt; &#xA;&lt;h4&gt;You can use it:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To quickly build an &lt;strong&gt;HTTP server&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &#34;workflow/WFHttpServer.h&#34;&#xA;&#xA;int main()&#xA;{&#xA;    WFHttpServer server([](WFHttpTask *task) {&#xA;        task-&amp;gt;get_resp()-&amp;gt;append_output_body(&#34;&amp;lt;html&amp;gt;Hello World!&amp;lt;/html&amp;gt;&#34;);&#xA;    });&#xA;&#xA;    if (server.start(8888) == 0) { // start server on port 8888&#xA;        getchar(); // press &#34;Enter&#34; to end.&#xA;        server.stop();&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As a &lt;strong&gt;multifunctional asynchronous client&lt;/strong&gt;, it currently supports &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;Kafka&lt;/code&gt; protocols.&lt;/li&gt; &#xA; &lt;li&gt;To implement &lt;strong&gt;client/server on user-defined protocol&lt;/strong&gt; and build your own &lt;strong&gt;RPC system&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sogou/srpc&#34;&gt;srpc&lt;/a&gt; is based on it and it is an independent open source project, which supports srpc, brpc, trpc and thrift protocols.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To build &lt;strong&gt;asynchronous workflow&lt;/strong&gt;; support common &lt;strong&gt;series&lt;/strong&gt; and &lt;strong&gt;parallel&lt;/strong&gt; structures, and also support any &lt;strong&gt;DAG&lt;/strong&gt; structures.&lt;/li&gt; &#xA; &lt;li&gt;As a &lt;strong&gt;parallel computing tool&lt;/strong&gt;. In addition to &lt;strong&gt;networking tasks&lt;/strong&gt;, Sogou C++ Workflow also includes &lt;strong&gt;the scheduling of computing tasks&lt;/strong&gt;. All types of tasks can be put into &lt;strong&gt;the same&lt;/strong&gt; flow.&lt;/li&gt; &#xA; &lt;li&gt;As an &lt;strong&gt;asynchronous file IO tool&lt;/strong&gt; in &lt;code&gt;Linux&lt;/code&gt; system, with high performance exceeding any system call. Disk file IO is also a task.&lt;/li&gt; &#xA; &lt;li&gt;To realize any &lt;strong&gt;high-performance&lt;/strong&gt; and &lt;strong&gt;high-concurrency&lt;/strong&gt; back-end service with a very complex relationship between computing and networking.&lt;/li&gt; &#xA; &lt;li&gt;To build a &lt;strong&gt;micro service&lt;/strong&gt; system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This project has built-in &lt;strong&gt;service governance&lt;/strong&gt; and &lt;strong&gt;load balancing&lt;/strong&gt; features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wiki link : &lt;a href=&#34;https://github.com/sogou/workflow/wiki&#34;&gt;PaaS Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compiling and running environment&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project supports &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Android&lt;/code&gt; and other operating systems. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Windows&lt;/code&gt; version is currently released as an independent &lt;a href=&#34;https://github.com/sogou/workflow/tree/windows&#34;&gt;branch&lt;/a&gt;, using &lt;code&gt;iocp&lt;/code&gt; to implement asynchronous networking. All user interfaces are consistent with the &lt;code&gt;Linux&lt;/code&gt; version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports all CPU platforms, including 32 or 64-bit &lt;code&gt;x86&lt;/code&gt; processors, big-endian or little-endian &lt;code&gt;arm&lt;/code&gt; processors, &lt;code&gt;loongson&lt;/code&gt; processors.&lt;/li&gt; &#xA; &lt;li&gt;Relies on &lt;code&gt;OpenSSL&lt;/code&gt;; &lt;code&gt;OpenSSL 1.1&lt;/code&gt; and above is recommended. If you don&#39;t like SSL, you may checkout the &lt;a href=&#34;https://github.com/sogou/workflow/tree/nossl&#34;&gt;nossl&lt;/a&gt; branch. But still need to link &lt;code&gt;crypto&lt;/code&gt; for &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;sha1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uses the &lt;code&gt;C++11&lt;/code&gt; standard and therefore, it should be compiled with a compiler which supports &lt;code&gt;C++11&lt;/code&gt;. Does not rely on &lt;code&gt;boost&lt;/code&gt; or &lt;code&gt;asio&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;No other dependencies. However, if you need &lt;code&gt;Kafka&lt;/code&gt; protocol, some compression libraries should be installed, including &lt;code&gt;lz4&lt;/code&gt;, &lt;code&gt;zstd&lt;/code&gt; and &lt;code&gt;snappy&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get started (Linux, macOS):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/sogou/workflow&#xA;cd workflow&#xA;make&#xA;cd tutorial&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get started (Debian Linux, ubuntu 22.04):&lt;/h3&gt; &#xA;&lt;p&gt;Sogou C++ Workflow has been packaged for Debian Linux and ubuntu 22.04.&lt;br&gt; To install the Workflow library for development purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libworkflow-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the Workflow library for deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install libworkflow1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Tutorials&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-01-wget.md&#34;&gt;Creating your first task：wget&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-02-redis_cli.md&#34;&gt;Implementing Redis set and get：redis_cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-03-wget_to_redis.md&#34;&gt;More features about series：wget_to_redis&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Server &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-04-http_echo_server.md&#34;&gt;First server：http_echo_server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-05-http_proxy.md&#34;&gt;Asynchronous server：http_proxy&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Parallel tasks and Series　 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-06-parallel_wget.md&#34;&gt;A simple parallel wget：parallel_wget&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Important topics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-error.md&#34;&gt;About error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-timeout.md&#34;&gt;About timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-config.md&#34;&gt;About global configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-dns.md&#34;&gt;About DNS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-exit.md&#34;&gt;About exit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Computing tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-07-sort_task.md&#34;&gt;Using the build-in algorithm factory：sort_task&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-08-matrix_multiply.md&#34;&gt;User-defined computing task：matrix_multiply&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-go-task.md&#34;&gt;Use computing task in a simple way: go task&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Asynchronous File IO tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-09-http_file_server.md&#34;&gt;Http server with file IO：http_file_server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-defined protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-10-user_defined_protocol.md&#34;&gt;A simple user-defined protocol: client/server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Timing tasks and counting tasks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-timer.md&#34;&gt;About timer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-counter.md&#34;&gt;About counter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-resource-pool.md&#34;&gt;About resource pool&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-module.md&#34;&gt;About module&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Service governance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-service-governance.md&#34;&gt;About service governance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-upstream.md&#34;&gt;More documents about upstream&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Connection context &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/about-connection-context.md&#34;&gt;About connection context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in clients &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-12-mysql_cli.md&#34;&gt;Asynchronous MySQL client：mysql_cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sogou/workflow/master/docs/en/tutorial-13-kafka_cli.md&#34;&gt;Asynchronous Kafka client: kafka_cli&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Programming paradigm&lt;/h4&gt; &#xA;&lt;p&gt;We believe that a typical back-end program=protocol+algorithm+workflow and should be developed completely independently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In most cases, users use built-in common network protocols, such as HTTP, Redis or various rpc.&lt;/li&gt; &#xA;   &lt;li&gt;Users can also easily customize user-defined network protocol. In the customization, they only need to provide serialization and deserialization functions to define their own client/server.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algorithm &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In our design, the algorithm is a concept symmetrical to the protocol. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If protocol call is rpc, then algorithm call is an apc (Async Procedure Call).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;We have provided some general algorithms, such as sort, merge, psort, reduce, which can be used directly.&lt;/li&gt; &#xA;   &lt;li&gt;Compared with a user-defined protocol, a user-defined algorithm is much more common. Any complicated computation with clear boundaries should be packaged into an algorithm.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Workflow &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workflow is the actual business logic, which is to put the protocols and algorithms into the flow graph for use.&lt;/li&gt; &#xA;   &lt;li&gt;The typical workflow is a closed series-parallel graph. Complex business logic may be a non-closed DAG.&lt;/li&gt; &#xA;   &lt;li&gt;The workflow graph can be constructed directly or dynamically generated based on the results of each step. All tasks are executed asynchronously.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Basic task, task factory and complex task&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our system contains six basic tasks: networking, file IO, CPU, GPU, timer, and counter.&lt;/li&gt; &#xA; &lt;li&gt;All tasks are generated by the task factory and automatically recycled after callback. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Server task is one kind of special networking task, generated by the framework which calls the task factory, and handed over to the user through the process function.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In most cases, the task generated by the user through the task factory is a complex task, which is transparent to the user. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, an HTTP request may include many asynchronous processes (DNS, redirection), but for user, it is just a networking task.&lt;/li&gt; &#xA;   &lt;li&gt;File sorting seems to be an algorithm, but it actually includes many complex interaction processes between file IO and CPU computation.&lt;/li&gt; &#xA;   &lt;li&gt;If you think of business logic as building circuits with well-designed electronic components, then each electronic component may be a complex circuit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Asynchrony and encapsulation based on &lt;code&gt;C++11 std::function&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not based on user mode coroutines. Users need to know that they are writing asynchronous programs.&lt;/li&gt; &#xA; &lt;li&gt;All calls are executed asynchronously, and there is almost no operation that occupies a thread. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Although we also provide some facilities with semi-synchronous interfaces, they are not core features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;We try to avoid user&#39;s derivations, and encapsulate user behavior with &lt;code&gt;std::function&lt;/code&gt; instead, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The callback of any task.&lt;/li&gt; &#xA;   &lt;li&gt;Any server&#39;s process. This conforms to the &lt;code&gt;FaaS&lt;/code&gt; (Function as a Service) idea.&lt;/li&gt; &#xA;   &lt;li&gt;The realization of an algorithm is simply a &lt;code&gt;std::function&lt;/code&gt;. But the algorithm can also be implemented by derivation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Memory reclamation mechanism&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every task will be automatically reclaimed after the callback. If a task is created but a user does not want to run it, the user needs to release it through the dismiss method.&lt;/li&gt; &#xA; &lt;li&gt;Any data in the task, such as the response of the network request, will also be recycled with the task. At this time, the user can use &lt;code&gt;std::move()&lt;/code&gt; to move the required data.&lt;/li&gt; &#xA; &lt;li&gt;SeriesWork and ParallelWork are two kinds of framework objects, which are also recycled after their callback. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When a series is a branch of a parallel, it will be recycled after the callback of the parallel that it belongs to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This project doesn’t use &lt;code&gt;std::shared_ptr&lt;/code&gt; to manage memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Any other questions?&lt;/h4&gt; &#xA;&lt;p&gt;You may check the &lt;a href=&#34;https://github.com/sogou/workflow/issues/406&#34;&gt;FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/sogou/workflow/issues&#34;&gt;issues&lt;/a&gt; list first to see if you can find the answer.&lt;/p&gt; &#xA;&lt;p&gt;You are very welcome to send the problems you encounter in use to &lt;a href=&#34;https://github.com/sogou/workflow/issues&#34;&gt;issues&lt;/a&gt;, and we will answer them as soon as possible. At the same time, more issues will also help new users.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>open-goal/jak-project</title>
    <updated>2022-06-19T01:31:00Z</updated>
    <id>tag:github.com,2022-06-19:/open-goal/jak-project</id>
    <link href="https://github.com/open-goal/jak-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reviving the language that brought us the Jak &amp; Daxter Series&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; height=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/logo-text-colored-new.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://open-goal.github.io/&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-Here-informational&#34; alt=&#34;Documentation Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://github.com/open-goal/jak-project/workflows/Linux/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/open-goal/jak-project/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://github.com/open-goal/jak-project/workflows/Windows/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/open-goal/jak-project/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Coverage&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Coverage/29316d04a1644aa390c33be07289f3f5&#34; alt=&#34;Codacy Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Grade&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/29316d04a1644aa390c33be07289f3f5&#34; alt=&#34;Codacy Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VZbXMHXzWv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/756287461377703987&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs&#34; Welcome&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#project-description&#34;&gt;Project Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#current-status&#34;&gt;Current Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#whats-next&#34;&gt;What&#39;s Next&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#getting-started---linux&#34;&gt;Getting Started - Linux&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#ubuntu-2004&#34;&gt;Ubuntu (20.04)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#arch&#34;&gt;Arch&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#getting-started---windows&#34;&gt;Getting Started - Windows&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#required-software&#34;&gt;Required Software&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#setting-up-and-opening-the-project&#34;&gt;Setting up and Opening the Project&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#building-and-running-the-game&#34;&gt;Building and Running the Game&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#extract-assets&#34;&gt;Extract Assets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#build-the-game&#34;&gt;Build the Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#run-the-game&#34;&gt;Run the Game&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#connecting-the-repl-to-the-game&#34;&gt;Connecting the REPL to the Game&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-game-without-auto-booting&#34;&gt;Running the Game Without Auto-Booting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#interacting-with-the-game&#34;&gt;Interacting with the Game&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#project-layout&#34;&gt;Project Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#directory-layout&#34;&gt;Directory Layout&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Project Description&lt;/h2&gt; &#xA;&lt;p&gt;This project is to port Jak 1 (NTSC, &#34;black label&#34; version) to PC. Over 98% of this game is written in GOAL, a custom Lisp language developed by Naughty Dog. Our strategy is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decompile the original game code into human-readable GOAL code&lt;/li&gt; &#xA; &lt;li&gt;develop our own compiler for GOAL and recompile game code for x86-64&lt;/li&gt; &#xA; &lt;li&gt;create a tool to extract game assets into formats that can be easily viewed or modified&lt;/li&gt; &#xA; &lt;li&gt;create tools to repack game assets into a format that our port uses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our objectives are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make the port a &#34;native application&#34; on x86-64, with high performance. It shouldn&#39;t emulated, interpreted, or transpiled.&lt;/li&gt; &#xA; &lt;li&gt;Our GOAL compiler&#39;s performance should be around the same as unoptimized C.&lt;/li&gt; &#xA; &lt;li&gt;try to match things from the original game and development as possible. For example, the original GOAL compiler supported live modification of code while the game is running, so we do the same, even though it&#39;s not required for just porting the game.&lt;/li&gt; &#xA; &lt;li&gt;support modifications. It should be possible to make edits to the code without everything else breaking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We support both Linux and Windows on x86-64.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/FAQ.md&#34;&gt;Please read the FAQ by clicking here if you have any questions.&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We have a Discord server where we discuss development: &lt;a href=&#34;https://discord.gg/VZbXMHXzWv&#34;&gt;https://discord.gg/VZbXMHXzWv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;p&gt;So far, we&#39;ve decompiled around 400,000 lines of GOAL code, out of an estimated 500,000 total lines from the original game. We have a working OpenGL renderer which renders most of the game world and foreground. Levels are fully playable, and you can finish the game with 100% completion!&lt;/p&gt; &#xA;&lt;p&gt;Here are some screenshots of the renderer: &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;YouTube playlist: &lt;a href=&#34;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&#34;&gt;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To help with decompiling, we&#39;ve built a decompiler that can process GOAL code and unpack game assets. We manually specify function types and locations where we believe the original code had type casts (or where they feel appropriate) until the decompiler succeeds, then we clean up the output of the decompiled code by adding comments and adjusting formatting, then save it in &lt;code&gt;goal_src&lt;/code&gt;. Our decompiler is designed specifically for processing the output of the original GOAL compiler. As a result, when given correct casts, it often produces code that can be directly fed into a compiler and works perfectly. This is tested as part of our unit tests, and so far we have over 300,000 lines (460 files) that pass.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t save any assets from the game - you must bring your own copy of the game and use the decompiler to extract assets.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s Next&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug testing! The game can be beaten 100% from start to finish, but it&#39;s possible a few things do not work correctly.&lt;/li&gt; &#xA; &lt;li&gt;Improve the decompiler and clean up decompilation of GOAL code. We are always finding new features and macros in the GOAL language.&lt;/li&gt; &#xA; &lt;li&gt;Investigate and rewrite the more complicated renderers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started - Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu (20.04)&lt;/h3&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install gcc make cmake build-essential g++ nasm clang-format libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev python&#xA;sudo sh -c &#34;$(curl --location https://taskfile.dev/install.sh)&#34; -- -d -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: we have found that &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;lld&lt;/code&gt; are significantly faster to compile and link than &lt;code&gt;gcc&lt;/code&gt;, generate faster code, and have better warning messages. To install these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install lld clang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run &lt;code&gt;cmake&lt;/code&gt; (in a fresh build directory) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_SHARED_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_EXE_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch&lt;/h3&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S gcc make cmake base-devel g++ nasm python&#xA;yay -S taskfile-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started - Windows&lt;/h2&gt; &#xA;&lt;h3&gt;Required Software&lt;/h3&gt; &#xA;&lt;p&gt;We primarily use Visual Studio on Windows for C++ development. Download the latest community edition from &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will require the &lt;code&gt;Desktop development with C++&lt;/code&gt; workload. This can be selected during the installation, or after via the &lt;code&gt;Visual Studio Installer&lt;/code&gt;, modifying the Visual Studio Installation.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, it&#39;s recommended to use a package manager, we use Scoop. Follow the steps on the bottom of the homepage &lt;a href=&#34;https://scoop.sh/&#34;&gt;here&lt;/a&gt; to get it.&lt;/p&gt; &#xA;&lt;p&gt;Once Scoop is installed, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install git llvm nasm python&#xA;scoop bucket add extras&#xA;scoop install task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up and Opening the Project&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository by running the following command in your folder of choice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/open-goal/jak-project.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;jak-project&lt;/code&gt; folder, open the project as a CMake project via Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/open-project.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then build the entire project as &lt;code&gt;Windows Release (clang-cl)&lt;/code&gt;. You can also press Ctrl+Shift+B as a hotkey for Build All. We currently prefer &lt;code&gt;clang-cl&lt;/code&gt; on Windows as opposed to &lt;code&gt;msvc&lt;/code&gt;, though it should work as well!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/release-build.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/build-all.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and Running the Game&lt;/h2&gt; &#xA;&lt;p&gt;Getting a running game involves 4 steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build C++ tools (follow Getting Started steps above for your platform)&lt;/li&gt; &#xA; &lt;li&gt;Extract assets from the game&lt;/li&gt; &#xA; &lt;li&gt;Build the game&lt;/li&gt; &#xA; &lt;li&gt;Run the game&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Extract Assets&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to extract your ISO file contents into the &lt;code&gt;iso_data/&amp;lt;game-name&amp;gt;&lt;/code&gt; folder. In the case of Jak 1 this is &lt;code&gt;iso_data/jak1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once this is done, open a terminal in the &lt;code&gt;jak-project&lt;/code&gt; folder and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task extract-jak1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build the Game&lt;/h3&gt; &#xA;&lt;p&gt;The next step is to build the game itself. To do so, in the same terminal run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be greeted with a prompt like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; _____             _____ _____ _____ __&#xA;|     |___ ___ ___|   __|     |  _  |  |&#xA;|  |  | . | -_|   |  |  |  |  |     |  |__&#xA;|_____|  _|___|_|_|_____|_____|__|__|_____|&#xA;      |_|&#xA;Welcome to OpenGOAL 0.8!&#xA;Run (repl-help) for help with common commands and REPL usage.&#xA;Run (lt) to connect to the local target.&#xA;&#xA;g &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to build the game:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (mi)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the Game&lt;/h3&gt; &#xA;&lt;p&gt;Finally the game can be ran. Open a second terminal from the &lt;code&gt;jak-project&lt;/code&gt; directory and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task boot-game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The game should boot automatically if everything was done correctly.&lt;/p&gt; &#xA;&lt;h4&gt;Connecting the REPL to the Game&lt;/h4&gt; &#xA;&lt;p&gt;Connecting the REPL to the game allows you to inspect and modify code or data while the game is running.&lt;/p&gt; &#xA;&lt;p&gt;To do so, in the REPL after a successful &lt;code&gt;(mi)&lt;/code&gt;, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (lt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If successful, your prompt should change to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gc&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, running the following will print out some basic information about Jak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gc&amp;gt; *target*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Game Without Auto-Booting&lt;/h4&gt; &#xA;&lt;p&gt;You can also start up the game without booting. To do so run the following in one terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task run-game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then in your REPL run the following (after a successful &lt;code&gt;(mi)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (lt)&#xA;[Listener] Socket connected established! (took 0 tries). Waiting for version...&#xA;Got version 0.8 OK!&#xA;[Debugger] Context: valid = true, s7 = 0x147d24, base = 0x2123000000, tid = 2438049&#xA;&#xA;gc&amp;gt; (lg)&#xA;10836466        #xa559f2              0.0000        (&#34;game&#34; &#34;kernel&#34;)&#xA;&#xA;gc&amp;gt; (test-play)&#xA;(play :use-vis #t :init-game #f) has been called!&#xA;0        #x0              0.0000        0&#xA;&#xA;gc&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with the Game&lt;/h3&gt; &#xA;&lt;p&gt;In the graphics window, you can use the period key to bring up the debug menu. Controllers also work, using the same mapping as the original game.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;code&gt;pc_debug&lt;/code&gt;, &lt;code&gt;examples&lt;/code&gt; and &lt;code&gt;pc&lt;/code&gt; folders under &lt;code&gt;goal_src&lt;/code&gt; for some examples of GOAL code we wrote. The debug files that are not loaded automatically by the engine have instructions for how to run them.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;p&gt;There are four main components to the project.&lt;/p&gt; &#xA;&lt;p&gt;The first is &lt;code&gt;goalc&lt;/code&gt;, which is a GOAL compiler for x86-64. Our implementation of GOAL is called OpenGOAL. All of the compiler source code is in &lt;code&gt;goalc&lt;/code&gt;. To run the compiler on Linux, there is a script &lt;code&gt;gc.sh&lt;/code&gt;. On Windows, there is a &lt;code&gt;gc.bat&lt;/code&gt; scripts and a &lt;code&gt;gc-no-lt.bat&lt;/code&gt; script, the latter of which will not attempt to automatically attach to a running target. The compiler is controlled through a prompt which can be used to enter commands to compile, connect to a running GOAL program for interaction, run the OpenGOAL debugger, or, if you are connected to a running GOAL program, can be used as a REPL to run code interactively. In addition to compiling code files, the compiler has features to pack and build data files.&lt;/p&gt; &#xA;&lt;p&gt;The second component to the project is the decompiler. You must have a copy of the PS2 game and place all files from the DVD inside a folder corresponding to the game within &lt;code&gt;iso_data&lt;/code&gt; folder (&lt;code&gt;jak1&lt;/code&gt; for Jak 1 Black Label, etc.), as seen in this picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/iso_data-help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;decomp.sh&lt;/code&gt; (Linux) or &lt;code&gt;decomp-jak1.bat&lt;/code&gt; (Windows) to run the decompiler. The decompiler will extract assets to the &lt;code&gt;assets&lt;/code&gt; folder. These assets will be used by the compiler when building the port, and you may want to turn asset extraction off after running it once. The decompiler will output code and other data intended to be inspected by humans in the &lt;code&gt;decompiler_out&lt;/code&gt; folder. Stuff in this folder will not be used by the compiler.&lt;/p&gt; &#xA;&lt;p&gt;The third is the game source code, written in OpenGOAL. This is located in &lt;code&gt;goal_src&lt;/code&gt;. All GOAL and GOOS code should be in this folder. Right now most of this is placeholders or incomplete, but you can take a look at &lt;code&gt;kernel/gcommon.gc&lt;/code&gt; or &lt;code&gt;goal-lib.gc&lt;/code&gt; to see some in-progress source code.&lt;/p&gt; &#xA;&lt;p&gt;The final component is the &#34;runtime&#34;, located in &lt;code&gt;game&lt;/code&gt;. This is the part of the game that&#39;s written in C++. In the port, that includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &#34;C Kernel&#34;, which contains the GOAL linker and some low-level GOAL language features. GOAL has a completely custom dynamically linked object file format so in order to load the first GOAL code, you need a linker written in C++. Some low-level functions for memory allocation, communicating with the I/O Processor, symbol table, strings, and the type system are also implemented in C, as these are required for the linker. It also listens for incoming messages from the compiler and passes them to the running game. This also initializes the game, by initializing the PS2 hardware, allocating the GOAL heaps, loading the GOAL kernel off of the DVD, and executing the kernel dispatcher function. This is in the &lt;code&gt;game/kernel&lt;/code&gt; folder. This should be as close as possible to the game, and all differences should be noted with a comment.&lt;/li&gt; &#xA; &lt;li&gt;Implementation of Sony&#39;s standard library. GOAL code can call C library functions, and Naughty Dog used some Sony library functions to access files, memory cards, controllers, and communicate with the separate I/O Processor. The library functions are in &lt;code&gt;game/sce&lt;/code&gt;. Implementations of library features specific to the PC port are located in &lt;code&gt;game/system&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The I/O Processor driver, OVERLORD. The PS2 had a separate CPU called the I/O Processor (IOP) that was directly connected to the DVD drive hardware and the sound hardware. Naughty Dog created a custom driver for the IOP that handled streaming data off of the DVD. It is much more complicated than I first expected. It&#39;s located in &lt;code&gt;game/overlord&lt;/code&gt;. Like the C kernel, we try to keep this as close as possible to the actual game.&lt;/li&gt; &#xA; &lt;li&gt;Sound code. Naughty Dog used a third party library for sound called &lt;code&gt;989SND&lt;/code&gt;. Code for the library and an interface for it is located in &lt;code&gt;game/sound&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PC specific graphics code. We have a functional OpenGL renderer and context that can create a game window and display graphics on it. The specific renderers used by the game however are mostly implemented. Aside from post-processing effects, everything in the game is rendered. This is located in &lt;code&gt;game/graphics&lt;/code&gt;. While many liberties will be taken to make this work, the end result should very closely match the actual game.&lt;/li&gt; &#xA; &lt;li&gt;Extra assets used by the port in some fashion, located in &lt;code&gt;game/assets&lt;/code&gt;. These include extra text files, icons, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt;: extracted assets (textures, translated game text, audio) generated by the decompiler. Not included in the repository. This data is used when building the PC port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: C++ CMake build folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;common&lt;/code&gt;: common C++ code shared between the compiler, decompiler, and game. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;audio&lt;/code&gt;: tools for decoding the audio files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cross_os_debug&lt;/code&gt;: platform-independent library for implementing the OpenGOAL debugger. Linux and Windows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cross_sockets&lt;/code&gt;: platform-independent library for sockets. Used to connect the compiler to a running game. Linux and Windows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;goos&lt;/code&gt;: the compiler-time macro language and parser for OpenGOAL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type_system&lt;/code&gt;: the OpenGOAL type system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;texture&lt;/code&gt;: texture unpacking and format conversion.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dma&lt;/code&gt;: utilities for handling the transfer of PS2 DMA packets.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;util&lt;/code&gt;, &lt;code&gt;math&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;: Random utility functions for accessing files, timers, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;decompiler&lt;/code&gt;: Source code for the decompiler. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;analysis&lt;/code&gt;: analysis algorithms.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;config&lt;/code&gt;: JSON config files for the decompiler and type definition file.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;data&lt;/code&gt;: utilities to extract assets from the game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Disasm&lt;/code&gt;: MIPS disassembler.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Function&lt;/code&gt;: Tools for analyzing GOAL functions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gui&lt;/code&gt;: an early prototype of a Python GUI for reading the output of the decompiler.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IR2&lt;/code&gt;: the &#34;Intermediate Representation&#34; for GOAL functions and expressions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ObjectFile&lt;/code&gt;: Utilities for processing the GOAL object file format.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: Useful scripts for setting up the decompilation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;util&lt;/code&gt;: random utilities.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;VuDisasm&lt;/code&gt;: disassembler for VU code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;decompiler_out&lt;/code&gt;: output of the decompiler that&#39;s not automatically used by the compiler. This is for humans to read and use. Not included in the repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: more documentation!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;game&lt;/code&gt;: the source code for the game executable. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;common&lt;/code&gt;: shared stuff between the &lt;code&gt;kernel&lt;/code&gt; (EE) and &lt;code&gt;overlord&lt;/code&gt; (IOP).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;graphics&lt;/code&gt;: PC Port graphics.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: the part of the GOAL kernel written in C. The entry point for the game is in &lt;code&gt;kboot.cpp&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;overlord&lt;/code&gt;: the I/O processor driver used to get data off of the DVD.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sce&lt;/code&gt;: the Sony library implementation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;system&lt;/code&gt;: PC-port specific OS-level stuff, like file I/O, threads, controllers, debug network connection.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goal_src&lt;/code&gt;: The GOAL code for the game. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: info related to the GOAL build system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;engine&lt;/code&gt;: the game engine.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: The GOAL kernel.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;levels&lt;/code&gt;: Level specific code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;old&lt;/code&gt;: Unused or deleted files from the original game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dgos&lt;/code&gt;: File lists for DGOs in the build system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;examples&lt;/code&gt;: Example GOAL code we have written.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Test code we have written.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pc_debug&lt;/code&gt;: GOAL code for PC-specific debugging. Also written by us.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pc&lt;/code&gt;: GOAL code for PC-specific features. Also written by us.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;user&lt;/code&gt;: User sandboxes. Written by you! And anyone else that wishes to share their user code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goalc&lt;/code&gt;: The OpenGOAL compiler. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;compiler&lt;/code&gt;: The implementation of the OpenGOAL language.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;data_compiler&lt;/code&gt;: Tools for packing data.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;debugger&lt;/code&gt;: The OpenGOAL debugger (part of the compiler).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;emitter&lt;/code&gt;: x86-64 emitter and object file generator.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;listener&lt;/code&gt;: The OpenGOAL listener, which connects the compiler to a running GOAL program for the interactive REPL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make&lt;/code&gt;: The OpenGOAL build system, builds both code and data files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regalloc&lt;/code&gt;: Register allocator.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iso_data&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out&lt;/code&gt;: Outputs from the build process. Only the &lt;code&gt;iso&lt;/code&gt; subfolder should contain assets used by the game. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;iso&lt;/code&gt;: Final outputs that are used by the game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;obj&lt;/code&gt;: Object files generated by the compiler.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resources&lt;/code&gt;: To be removed. Contains fake versions of some files required to get things booting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: Utility scripts. Windows-specific batch files are in a &lt;code&gt;batch&lt;/code&gt; folder while Unix shell scripts are in a &lt;code&gt;shell&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Unit tests (run on GitHub Actions).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;third-party&lt;/code&gt;: Third party libraries. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CMake Code Coverage. For code coverage statistics on GitHub builds.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fmt&lt;/code&gt;. String formatting library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;googletest&lt;/code&gt;: Test framework.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;inja&lt;/code&gt;: templating library used for generating test code for compiler tests.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lzokay&lt;/code&gt;: decompression code for Jak 2 and later DGOs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mman&lt;/code&gt;: Windows library used to emulate &lt;code&gt;mmap&lt;/code&gt; on Linux.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run-clang-format&lt;/code&gt;: Utility to check and enforce code formatting.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run-clang-tidy&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;zydis&lt;/code&gt;: x86-64 disassembler used in the OpenGOAL debugger.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: A JSON library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;replxx&lt;/code&gt;: Used for the REPL input. Supports history and useful editing shortcuts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;svpng&lt;/code&gt;: Save a PNG file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ToolJet/ToolJet</title>
    <updated>2022-06-19T01:31:00Z</updated>
    <id>tag:github.com,2022-06-19:/ToolJet/ToolJet</id>
    <link href="https://github.com/ToolJet/ToolJet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensible low-code framework for building business applications. Connect to databases, cloud storages, GraphQL, API endpoints, Airtable, etc and build apps using drag and drop application builder. Built using JavaScript/TypeScript. 🚀&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7828962/143565889-f4c51c89-fc7e-471c-90b6-42ae697bca6b.png&#34; width=&#34;200&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;ToolJet is an &lt;strong&gt;open-source low-code framework&lt;/strong&gt; to build and deploy internal tools quickly without much effort from the engineering teams. You can connect to your data sources, such as databases (like PostgreSQL, MongoDB, Elasticsearch, etc), API endpoints (ToolJet supports importing OpenAPI spec &amp;amp; OAuth2 authorization), and external services (like Stripe, Slack, Google Sheets, Airtable) and use our pre-built UI widgets to build internal tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/tooljet/tooljet-ce&#34; alt=&#34;Docker Cloud Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/tooljet/tooljet&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;a href=&#34;https://github.com/ToolJet/ToolJet/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/ToolJet/ToolJet&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ToolJet/ToolJet/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ToolJet/ToolJet&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/tooljet/tooljet&#34; alt=&#34;GitHub closed issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr-raw/tooljet/tooljet&#34; alt=&#34;GitHub pull requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/tooljet/tooljet&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/tooljet/tooljet&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;a href=&#34;https://github.com/ToolJet/ToolJet&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ToolJet/ToolJet&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ToolJet&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ToolJet?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;kbd&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7828962/149466475-1d1f0b3e-8e25-49e8-a5c9-73e068f78de9.png&#34;&gt; &lt;/kbd&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Visual application builder&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;kbd&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7828962/152667206-aaa0ae52-1260-48ce-9d0d-0f2e478f9fd1.png&#34;&gt; &lt;/kbd&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7828962/152912302-625f7f3e-3659-46cc-9be6-b52c4a3c370c.png&#34; alt=&#34;2_alt&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7828962/152912291-f5019ed6-e319-4b00-910f-ee7bdb1c05d7.png&#34; alt=&#34;3&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7828962/152912265-a9d4a25f-0853-43af-b92a-322af6b0a4eb.gif&#34; alt=&#34;Final_comment_final&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7828962/152912276-e85c16a4-438f-4b88-9072-18e60017f74b.png&#34; alt=&#34;5&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7828962/152912278-422458b9-eec0-477c-9554-672091734901.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;All features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Visual app builder:&lt;/em&gt; 35+ built-in responsive widgets such as Tables, Charts, Lists, Forms, Progressbars, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;20+ data sources:&lt;/em&gt; connect to databases, cloud storages and APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Desktop &amp;amp; mobile&lt;/em&gt;: ;layout widths can be customised to support different screens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Self-host:&lt;/em&gt; (supports Docker, Kubernetes, Heroku, AWS EC2, Google Cloud Run, and more).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Collaborate:&lt;/em&gt; add comments anywhere on the canvas and tag your team members.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Extend with plugins:&lt;/em&gt;: use our &lt;a href=&#34;https://www.npmjs.com/package/@tooljet/cli&#34;&gt;commandline tool&lt;/a&gt; to easily bootstrap new connectors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Version control:&lt;/em&gt; every application have different versions with proper release cycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Run JS code:&lt;/em&gt; ability custom JavaScript snippets&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Granular access control&lt;/em&gt; on organization-level and app-level.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;low-code:&lt;/em&gt; write JS code almost anywhere in the builder. For example, the color property of text can be set to &lt;code&gt;status === &#39;success&#39; ? &#39;green&#39; : &#39;red&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;no-code query editors&lt;/em&gt; for all supported data sources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Join and transform data:&lt;/em&gt; transform query results using just JavaScript code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Secure:&lt;/em&gt; All the credentials are securely encrypted using &lt;code&gt;aes-256-gcm&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Doesn&#39;t store data:&lt;/em&gt; ToolJet acts only as a proxy and doesn&#39;t store any data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;SSO:&lt;/em&gt; Supports multiple SSO providers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started with ToolJet is by creating a &lt;a href=&#34;https://tooljet.com&#34;&gt;ToolJet Cloud&lt;/a&gt; account. ToolJet Cloud offers a hosted solution of ToolJet. If you want to self-host ToolJet, kindly proceed to &lt;a href=&#34;https://docs.tooljet.com/docs/setup/architecture&#34;&gt;deployment documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can deploy ToolJet on Heroku for free using the one-click-deployment button below.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/tooljet/tooljet/tree/main&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Try using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Want to give ToolJet a quick spin on your local machine? You can run the following command from your terminal to have ToolJet up and running right away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;  --name tooljet \&#xA;  --restart unless-stopped \&#xA;  -p 3000:3000 \&#xA;  -v tooljet_data:/var/lib/postgresql/13/main \&#xA;  tooljet/try:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tutorials and examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.tooljet.io/building-a-github-contributor-leaderboard-using-tooljet/&#34;&gt;GitHub contributor leaderboard using ToolJet&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://blog.tooljet.com/how-to-build-a-cryptocurrency-dashboard-in-10-minutes/&#34;&gt;Cryptocurrency dashboard using ToolJet&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://blog.tooljet.com/build-a-whatsapp-crm-using-tooljet-within-10-mins/&#34;&gt;WhatsApp CRM using ToolJet&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://blog.tooljet.com/building-an-app-to-view-and-upload-files-in-aws-s3-bucket/&#34;&gt;AWS S3 file explorer&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://docs.tooljet.com&#34;&gt;https://docs.tooljet.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tooljet.com&#34;&gt;Getting Started&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/data-sources/airtable/&#34;&gt;Datasource Reference&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/widgets/button&#34;&gt;Widget Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Self-hosted&lt;/h2&gt; &#xA;&lt;p&gt;You can use ToolJet cloud for a fully managed solution. If you want to self-host ToolJet, we have guides on deploying ToolJet on Kubernetes, AWS EC2, Docker, Heroku and more.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS EC2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/ec2&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS EKS (Kubernetes)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/kubernetes&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GCP GKE (Kubernetes)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/kubernetes-gke&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure AKS (Kubernetes)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/kubernetes-aks&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heroku&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/heroku&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/docker&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Cloud Run&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.tooljet.com/docs/setup/google-cloud-run&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community support&lt;/h2&gt; &#xA;&lt;p&gt;For general help using ToolJet, please refer to the official &lt;a href=&#34;https://docs.tooljet.com/docs/intro/&#34;&gt;documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/tooljet/shared_invite/zt-r2neyfcw-KD1COL6t2kgVTlTtAV5rtg&#34;&gt;Slack&lt;/a&gt; - Discussions with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ToolJet/ToolJet/issues&#34;&gt;GitHub&lt;/a&gt; - For bug reports and feature requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ToolJet&#34;&gt;Twitter&lt;/a&gt; - Get the product updates easily.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://github.com/ToolJet/ToolJet/projects/2&#34;&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones.&lt;/p&gt; &#xA;&lt;h2&gt;Branching model&lt;/h2&gt; &#xA;&lt;p&gt;We use the git-flow branching model. The base branch is &lt;code&gt;develop&lt;/code&gt;. If you are looking for a stable version, please use the main branch or tags labeled as v1.x.x.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Kindly read our &lt;a href=&#34;https://raw.githubusercontent.com/ToolJet/ToolJet/develop/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; to learn and understand about our development process, how to propose bug fixes and improvements, and how to build and test your changes to ToolJet. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/tooljet/tooljet/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=tooljet/tooljet&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ToolJet © 2022, ToolJet Solutions Inc - Released under the GNU Affero General Public License v3.0.&lt;/p&gt;</summary>
  </entry>
</feed>