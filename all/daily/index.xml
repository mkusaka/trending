<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:29:32Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>smol-ai/developer</title>
    <updated>2023-05-18T01:29:32Z</updated>
    <id>tag:github.com,2023-05-18:/smol-ai/developer</id>
    <link href="https://github.com/smol-ai/developer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;with 100k context windows on the way, it&#39;s now feasible for every dev to have their own smol developer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;smol developer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Human-centric &amp;amp; Coherent Whole Program Synthesis&lt;/strong&gt;&lt;/em&gt; aka your own personal junior developer&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://twitter.com/swyx/status/1657578738345979905&#34;&gt;Build the thing that builds the thing!&lt;/a&gt; a &lt;code&gt;smol dev&lt;/code&gt; for every dev in every situation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;this is a prototype of a &#34;junior developer&#34; agent (aka &lt;code&gt;smol dev&lt;/code&gt;) that scaffolds an entire codebase out for you once you give it a product spec, but does not end the world or overpromise AGI. instead of making and maintaining specific, rigid, one-shot starters, like &lt;code&gt;create-react-app&lt;/code&gt;, or &lt;code&gt;create-nextjs-app&lt;/code&gt;, this is basically &lt;a href=&#34;https://news.ycombinator.com/item?id=35942352&#34;&gt;&lt;code&gt;create-anything-app&lt;/code&gt;&lt;/a&gt; where you develop your scaffolding prompt in a tight loop with your smol dev.&lt;/p&gt; &#xA;&lt;p&gt;AI that is helpful, harmless, and honest is complemented by a codebase that is simple, safe, and smol - &amp;lt;200 lines of Python and Prompts, so this is easy to understand and customize.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;200&#34; src=&#34;https://pbs.twimg.com/media/FwEzVCcaMAE7t4h?format=jpg&amp;amp;name=large&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;engineering with prompts, rather than prompt engineering&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The demo example in &lt;code&gt;prompt.md&lt;/code&gt; shows the potential of AI-enabled, but still firmly human developer centric, workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Human writes a basic prompt for the app they want to build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main.py&lt;/code&gt; generates code&lt;/li&gt; &#xA; &lt;li&gt;Human runs/reads the code&lt;/li&gt; &#xA; &lt;li&gt;Human can: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;simply add to the prompt as they discover underspecified parts of the prompt&lt;/li&gt; &#xA;   &lt;li&gt;manually runs the code and identifies errors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;paste the error into the prompt&lt;/em&gt; just like they would file a GitHub issue&lt;/li&gt; &#xA;   &lt;li&gt;for extra help, they can use &lt;code&gt;debugger.py&lt;/code&gt; which reads the whole codebase to make specific code change suggestions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Loop until happiness is attained. Notice that AI is only used as long as it is adding value - once it gets in your way, just take over the codebase from your smol junior developer with no fuss and no hurt feelings. (&lt;em&gt;we could also have smol-dev take over an existing codebase and bootstrap its own prompt... but that&#39;s a Future Direction&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Not no code, not low code, but some third thing.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Perhaps a higher order evolution of programming where you still need to be technical, but no longer have to implement every detail at least to scaffold things out.&lt;/p&gt; &#xA;&lt;h2&gt;6 minute video demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/UCo7YeTy-aE&#34;&gt;https://youtu.be/UCo7YeTy-aE&lt;/a&gt; (sorry for sped up audio, we were optimizing for twitter, bad call)&lt;/p&gt; &#xA;&lt;h2&gt;arch diagram&lt;/h2&gt; &#xA;&lt;p&gt;naturally generated with gpt4, like &lt;a href=&#34;https://twitter.com/swyx/status/1648724820316786688&#34;&gt;we did for babyagi&lt;/a&gt; &lt;img src=&#34;https://github.com/smol-ai/developer/assets/6764957/f8fc68f4-77f6-43ee-852f-a35fb195430a&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;innovations and insights&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please subscribe to &lt;a href=&#34;https://latent.space/&#34;&gt;https://latent.space/&lt;/a&gt; for a fuller writeup and insights and reflections&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Markdown is all you need&lt;/strong&gt; - Markdown is the perfect way to prompt for whole program synthesis because it is easy to mix english and code (whether &lt;code&gt;variable_names&lt;/code&gt; or entire ``` code fenced code samples) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;turns out you can specify prompts in code in prompts and gpt4 obeys that to the letter&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy and paste programming&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;teaching the program to understand how to code around a new API (Anthropic&#39;s API is after GPT3&#39;s knowledge cutoff) by just pasting in the &lt;code&gt;curl&lt;/code&gt; input and output&lt;/li&gt; &#xA;   &lt;li&gt;pasting error messages into the prompt and vaguely telling the program how you&#39;d like it handled. it kind of feels like &#34;logbook driven programming&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging by &lt;code&gt;cat&lt;/code&gt;ing&lt;/strong&gt; the whole codebase with your error message and getting specific fix suggestions - particularly delightful!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tricks for whole program coherence&lt;/strong&gt; - our chosen example usecase, Chrome extensions, have a lot of indirect dependencies across files. Any hallucination of cross dependencies causes the whole program to error. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We solved this by adding an intermediate step asking GPT to think through &lt;code&gt;shared_dependencies.md&lt;/code&gt;, and then insisting on using that in generating each file. This basically means GPT is able to talk to itself...&lt;/li&gt; &#xA;   &lt;li&gt;... but it&#39;s not perfect, yet. &lt;code&gt;shared_dependencies.md&lt;/code&gt; is sometimes not comperehensive in understanding what are hard dependencies between files. So we just solved it by specifying a specific &lt;code&gt;name&lt;/code&gt; in the prompt. felt dirty at first but it works, and really it&#39;s just clear unambiguous communication at the end of the day.&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;code&gt;prompt.md&lt;/code&gt; for SOTA smol-dev prompting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low activation energy for unfamiliar APIs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;we have never really learned css animations, but now can just say we want a &#34;juicy css animated red and white candy stripe loading indicator&#34; and it does the thing.&lt;/li&gt; &#xA;   &lt;li&gt;ditto for Chrome Extension Manifest v3 - the docs are an abject mess, but fortunately we don&#39;t have to read them now to just get a basic thing done&lt;/li&gt; &#xA;   &lt;li&gt;the Anthropic docs (bad bad) were missing guidance on what return signature they have. so just curl it and dump it in the prompt lol.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modal is all you need&lt;/strong&gt; - we chose Modal to solve 4 things: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;solve python dependency hell in dev and prod&lt;/li&gt; &#xA;   &lt;li&gt;parallelizable code generation&lt;/li&gt; &#xA;   &lt;li&gt;simple upgrade path from local dev to cloud hosted endpoints (in future)&lt;/li&gt; &#xA;   &lt;li&gt;fault tolerant openai api calls with retries/backoff, and attached storage (for future use)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please subscribe to &lt;a href=&#34;https://latent.space/&#34;&gt;https://latent.space/&lt;/a&gt; for a fuller writeup and insights and reflections&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;caveats&lt;/h3&gt; &#xA;&lt;p&gt;We were working on a Chrome Extension, which requires images to be generated, so we added some usecase specific code in there to skip destroying/regenerating them, that we haven&#39;t decided how to generalize.&lt;/p&gt; &#xA;&lt;p&gt;We dont have access to GPT4-32k, but if we did, we&#39;d explore dumping entire API/SDK documentation into context.&lt;/p&gt; &#xA;&lt;p&gt;The feedback loop is very slow right now (&lt;code&gt;time&lt;/code&gt; says about 2-4 mins to generate a program with GPT4, even with parallelization due to Modal (occasionally spiking higher)), but it&#39;s a safe bet that it will go down over time (see also &#34;future directions&#34; below).&lt;/p&gt; &#xA;&lt;h2&gt;install&lt;/h2&gt; &#xA;&lt;p&gt;it&#39;s basically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/smol-ai/developer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;copy over &lt;code&gt;.example.env&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; filling in your API keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are no python dependencies to wrangle thanks to using Modal as a &lt;a href=&#34;https://www.google.com/search?q=self+provisioning+runtime&#34;&gt;self-provisioning runtime&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately this project also uses 3 waitlisted things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modal.com - &lt;code&gt;pip install modal-client&lt;/code&gt; (private beta - hit up the modal team to get an invite, and login) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can run this project w/o Modal following these instructions:&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;python main_no_modal.py YOUR_PROMPT_HERE&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GPT-4 api (private beta) - can use 3.5 but obviously wont be as good&lt;/li&gt; &#xA; &lt;li&gt;(for the demo project) anthropic claude 100k context api (private beta)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;yes, the most important skill in being an ai engineer is social engineering to get off waitlists. Modal will let you in if you say the keyword &#34;swyx&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;you&#39;ll have to adapt this code on a fork if you want to use it on other infra. please open issues/PRs and i&#39;ll happily highlight your fork here.&lt;/p&gt; &#xA;&lt;h3&gt;trying the example chrome extension&lt;/h3&gt; &#xA;&lt;p&gt;the &lt;code&gt;/generated&lt;/code&gt; and &lt;code&gt;/exampleChromeExtension&lt;/code&gt; folder contains &lt;code&gt;a Chrome Manifest V3 extension that reads the current page, and offers a popup UI that has the page title+content and a textarea for a prompt (with a default value we specify). When the user hits submit, it sends the page title+content to the Anthropic Claude API along with the up to date prompt to summarize it. The user can modify that prompt and re-send the prompt+content to get another summary view of the content.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go to Manage Extensions in Chrome&lt;/li&gt; &#xA; &lt;li&gt;load unpacked&lt;/li&gt; &#xA; &lt;li&gt;find the relevant folder in your file system and load it&lt;/li&gt; &#xA; &lt;li&gt;go to any content heavy site&lt;/li&gt; &#xA; &lt;li&gt;click the cute bird&lt;/li&gt; &#xA; &lt;li&gt;see it work&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;this entire extension was generated by the prompt in &lt;code&gt;prompt.md&lt;/code&gt; (except for the images), and was built up over time by adding more words to the prompt in an iterative process.&lt;/p&gt; &#xA;&lt;h2&gt;smol dev&lt;/h2&gt; &#xA;&lt;p&gt;basic usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;modal run main.py --prompt &#34;a Chrome extension that, when clicked, opens a small window with a page where you can enter a prompt for reading the currently open page and generating some response from openai&#34;   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;after a while of adding to your prompt, you can extract your prompt to a file, as long as your &#34;prompt&#34; ends in a .md extension we&#39;ll go look for that file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;modal run main.py --prompt prompt.md   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;each time you run this, the generated directory is deleted (except for images) and all files are rewritten from scratch.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;shared_dependencies.md&lt;/code&gt; file is a helper file that ensures coherence between files.&lt;/p&gt; &#xA;&lt;p&gt;if you make a tweak to the prompt and only want it to affect one file, and keep the rest of the files, specify the file param:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;modal run main.py --prompt prompt.md  --file popup.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;smol debugger&lt;/h2&gt; &#xA;&lt;p&gt;take the entire contents of the generated directory in context, feed in an error, get a response. this basically takes advantage of longer (32k-100k) context so we basically dont have to do any embedding of the source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;modal run debugger.py --prompt &#34;Uncaught (in promise) TypeError: Cannot destructure property &#39;pageTitle&#39; of &#39;(intermediate value)&#39; as it is undefined.    at init (popup.js:59:11)&#34;&#xA;&#xA;# gpt4&#xA;modal run debugger.py --prompt &#34;your_error msg_here&#34; --model=gpt-4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;smol pm&lt;/h2&gt; &#xA;&lt;p&gt;take the entire contents of the generated directory in context, and get a prompt back that could synthesize the whole program. basically &lt;code&gt;smol dev&lt;/code&gt;, in reverse.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;modal run code2prompt.py # ~0.5 second&#xA;&#xA;# use gpt4&#xA;modal run code2prompt.py --model=gpt-4 # 2 mins, MUCH better results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have done indicative runs of both, stored in &lt;code&gt;code2prompt-gpt3.md&lt;/code&gt; vs &lt;code&gt;code2prompt-gpt4.md&lt;/code&gt;. Note how incredibly better gpt4 is at prompt engineering its future self.&lt;/p&gt; &#xA;&lt;p&gt;Naturally, we had to try &lt;code&gt;code2prompt2code&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# add prompt... this needed a few iterations to get right&#xA;modal run code2prompt.py --prompt &#34;make sure all the id&#39;s of the DOM elements, and the data structure of the page content (stored with {pageTitle, pageContent }) , referenced/shared by the js files match up exactly. take note to only use Chrome Manifest V3 apis. rename the extension to code2prompt2code&#34; --model=gpt-4 # takes 4 mins. produces semi working chrome extension copy based purely on the model-generated description of a different codebase&#xA;&#xA;# must go deeper&#xA;modal run main.py --prompt code2prompt-gpt4.md --directory code2prompt2code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We leave the social and technical impacts of multilayer generative deep-frying of codebases as an exercise to the reader.&lt;/p&gt; &#xA;&lt;h2&gt;future directions&lt;/h2&gt; &#xA;&lt;p&gt;things to try/would accept open issue discussions and PRs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;specify .md files for each generated file&lt;/strong&gt;, with further prompts that could finetune the output in each of them &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;so basically like &lt;code&gt;popup.html.md&lt;/code&gt; and &lt;code&gt;content_script.js.md&lt;/code&gt; and so on&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bootstrap the &lt;code&gt;prompt.md&lt;/code&gt;&lt;/strong&gt; for existing codebases - write a script to read in a codebase and write a descriptive, bullet pointed prompt that generates it &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;done by &lt;code&gt;smol pm&lt;/code&gt;, but its not very good yet - would love for some focused polish/effort until we have quine smol developer that can generate itself lmao&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ability to install its own dependencies&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this leaks into depending on the execution environment, which we all know is the path to dependency madness. how to avoid? dockerize? nix? &lt;a href=&#34;https://twitter.com/litbid/status/1658154530385670150&#34;&gt;web container&lt;/a&gt;?&lt;/li&gt; &#xA;   &lt;li&gt;Modal has an interesting possibility: generate functions that speak modal which also solves the dependency thing &lt;a href=&#34;https://twitter.com/akshat_b/status/1658146096902811657&#34;&gt;https://twitter.com/akshat_b/status/1658146096902811657&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;self-heal&lt;/strong&gt; by running the code itself and use errors as information for reprompting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;however its a bit hard to get errors from the chrome extension environment so we did not try this&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;using anthropic as the coding layer&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;you can run &lt;code&gt;modal run anthropic.py --prompt prompt.md --outputdir=anthropic&lt;/code&gt; to try it&lt;/li&gt; &#xA;   &lt;li&gt;but it doesnt work because anthropic doesnt follow instructions to generate file code very well.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;make agents that autonomously run this code in a loop/watch the prompt file&lt;/strong&gt; and regenerate code each time, on a new git branch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the code could be generated on 5 simultaneous git branches and checking their output would just involve switching git branches&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DataTalksClub/mlops-zoomcamp</title>
    <updated>2023-05-18T01:29:32Z</updated>
    <id>tag:github.com,2023-05-18:/DataTalksClub/mlops-zoomcamp</id>
    <link href="https://github.com/DataTalksClub/mlops-zoomcamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free MLOps course from DataTalks.Club&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MLOps Zoomcamp&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://airtable.com/shrCb8y6eTbPKwSTL&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/images/IMG_20230323_134059_927.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://airtable.com/shrCb8y6eTbPKwSTL&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/875246/185755203-17945fd1-6b64-46f2-8377-1011dcb1a444.png&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Our MLOps Zoomcamp course&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sign up here: &lt;a href=&#34;https://airtable.com/shrCb8y6eTbPKwSTL&#34;&gt;https://airtable.com/shrCb8y6eTbPKwSTL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Register in &lt;a href=&#34;https://datatalks.club/slack.html&#34;&gt;DataTalks.Club&#39;s Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://app.slack.com/client/T01ATQK62F8/C02R98X7DS9&#34;&gt;&lt;code&gt;#course-mlops-zoomcamp&lt;/code&gt;&lt;/a&gt; channel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctt.ac/fH67W&#34;&gt;Tweet about the course!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start watching course videos! &lt;a href=&#34;https://www.youtube.com/playlist?list=PL3MmuxUbc_hIUISrluw_A7wDSmfOhErJK&#34;&gt;Course playlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/12TlBfhIiKtyBv8RnsoJR6F72bkPDGEvPOItJIxaEzE0/edit&#34;&gt;Technical FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For announcements, join our &lt;a href=&#34;https://t.me/dtc_courses&#34;&gt;Telegram channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Taking the course&lt;/h2&gt; &#xA;&lt;h3&gt;2023 Cohort&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start&lt;/strong&gt;: 15 May 2023 (Monday) at 17:00 CET&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registration link&lt;/strong&gt;: &lt;a href=&#34;https://airtable.com/shrCb8y6eTbPKwSTL&#34;&gt;https://airtable.com/shrCb8y6eTbPKwSTL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to our &lt;a href=&#34;https://calendar.google.com/calendar/?cid=M3Jzbmg0ZDA2aHVsY2M1ZjcyNDJtODNyMTRAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&#34;&gt;public Google Calendar&lt;/a&gt; (it works from Desktop only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/cohorts/2023&#34;&gt;Cohort folder&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Self-paced mode&lt;/h3&gt; &#xA;&lt;p&gt;All the materials of the course are freely available, so that you can take the course at your own pace&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the suggested syllabus (see below) week by week&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need to fill in the registration form. Just start watching the videos and join Slack&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://docs.google.com/document/d/12TlBfhIiKtyBv8RnsoJR6F72bkPDGEvPOItJIxaEzE0/edit&#34;&gt;FAQ&lt;/a&gt; if you have problems&lt;/li&gt; &#xA; &lt;li&gt;If you can&#39;t find a solution to your problem in FAQ, ask for help in Slack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Objective&lt;/h3&gt; &#xA;&lt;p&gt;Teach practical aspects of productionizing ML services — from training and experimenting to model deployment and monitoring.&lt;/p&gt; &#xA;&lt;h3&gt;Target audience&lt;/h3&gt; &#xA;&lt;p&gt;Data scientists and ML engineers. Also software engineers and data engineers interested in learning about putting ML in production.&lt;/p&gt; &#xA;&lt;h3&gt;Pre-requisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;Being comfortable with command line&lt;/li&gt; &#xA; &lt;li&gt;Prior exposure to machine learning (at work or from other courses, e.g. from &lt;a href=&#34;https://github.com/alexeygrigorev/mlbookcamp-code/tree/master/course-zoomcamp&#34;&gt;ML Zoomcamp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Prior programming experience (at least 1+ year)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Asking for help in Slack&lt;/h3&gt; &#xA;&lt;p&gt;The best way to get support is to use &lt;a href=&#34;https://datatalks.club/slack.html&#34;&gt;DataTalks.Club&#39;s Slack&lt;/a&gt;. Join the &lt;a href=&#34;https://app.slack.com/client/T01ATQK62F8/C02R98X7DS9&#34;&gt;&lt;code&gt;#course-mlops-zoomcamp&lt;/code&gt;&lt;/a&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;To make discussions in Slack more organized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/asking-questions.md&#34;&gt;these recommendations&lt;/a&gt; when asking for help&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://datatalks.club/slack/guidelines.html&#34;&gt;DataTalks.Club community guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syllabus&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/01-intro&#34;&gt;Module 1: Introduction&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is MLOps&lt;/li&gt; &#xA; &lt;li&gt;MLOps maturity model&lt;/li&gt; &#xA; &lt;li&gt;Running example: NY Taxi trips dataset&lt;/li&gt; &#xA; &lt;li&gt;Why do we need MLOps&lt;/li&gt; &#xA; &lt;li&gt;Course overview&lt;/li&gt; &#xA; &lt;li&gt;Environment preparation&lt;/li&gt; &#xA; &lt;li&gt;Homework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/01-intro&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/02-experiment-tracking&#34;&gt;Module 2: Experiment tracking and model management&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Experiment tracking intro&lt;/li&gt; &#xA; &lt;li&gt;Getting started with MLflow&lt;/li&gt; &#xA; &lt;li&gt;Experiment tracking with MLflow&lt;/li&gt; &#xA; &lt;li&gt;Saving and loading models with MLflow&lt;/li&gt; &#xA; &lt;li&gt;Model registry&lt;/li&gt; &#xA; &lt;li&gt;MLflow in practice&lt;/li&gt; &#xA; &lt;li&gt;Homework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/02-experiment-tracking&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/03-orchestration&#34;&gt;Module 3: Orchestration and ML Pipelines&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Workflow orchestration&lt;/li&gt; &#xA; &lt;li&gt;Prefect 2.0&lt;/li&gt; &#xA; &lt;li&gt;Turning a notebook into a pipeline&lt;/li&gt; &#xA; &lt;li&gt;Deployment of Prefect flow&lt;/li&gt; &#xA; &lt;li&gt;Homework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/03-orchestration&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/04-deployment&#34;&gt;Module 4: Model Deployment&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Three ways of model deployment: Online (web and streaming) and offline (batch)&lt;/li&gt; &#xA; &lt;li&gt;Web service: model deployment with Flask&lt;/li&gt; &#xA; &lt;li&gt;Streaming: consuming events with AWS Kinesis and Lambda&lt;/li&gt; &#xA; &lt;li&gt;Batch: scoring data offline&lt;/li&gt; &#xA; &lt;li&gt;Homework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/04-deployment&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/05-monitoring&#34;&gt;Module 5: Model Monitoring&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monitoring ML-based services&lt;/li&gt; &#xA; &lt;li&gt;Monitoring web services with Prometheus, Evidently, and Grafana&lt;/li&gt; &#xA; &lt;li&gt;Monitoring batch jobs with Prefect, MongoDB, and Evidently&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/05-monitoring&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/06-best-practices&#34;&gt;Module 6: Best Practices&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Testing: unit, integration&lt;/li&gt; &#xA; &lt;li&gt;Python: linting and formatting&lt;/li&gt; &#xA; &lt;li&gt;Pre-commit hooks and makefiles&lt;/li&gt; &#xA; &lt;li&gt;CI/CD (Github Actions)&lt;/li&gt; &#xA; &lt;li&gt;Infrastructure as code (Terraform)&lt;/li&gt; &#xA; &lt;li&gt;Homework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/06-best-practices&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/07-project/&#34;&gt;Project&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;End-to-end project with all the things above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/07-project/&#34;&gt;More details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instructors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cristian Martinez&lt;/li&gt; &#xA; &lt;li&gt;Jeff Hale&lt;/li&gt; &#xA; &lt;li&gt;Alexey Grigorev&lt;/li&gt; &#xA; &lt;li&gt;Emeli Dral&lt;/li&gt; &#xA; &lt;li&gt;Sejal Vaidya&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other courses from DataTalks.Club:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexeygrigorev/mlbookcamp-code/tree/master/course-zoomcamp&#34;&gt;Machine Learning Zoomcamp - free 4-month course about ML Engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DataTalksClub/data-engineering-zoomcamp/&#34;&gt;Data Engineering Zoomcamp - free 9-week course about Data Engineering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I want to start preparing for the course. What can I do?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you haven&#39;t used Flask or Docker&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/alexeygrigorev/mlbookcamp-code/tree/master/course-zoomcamp/05-deployment&#34;&gt;Module 5&lt;/a&gt; from ML Zoomcamp&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/DataTalksClub/data-engineering-zoomcamp/tree/main/week_1_basics_n_setup/2_docker_sql&#34;&gt;section about Docker&lt;/a&gt; from Data Engineering Zoomcamp could also be useful&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have no previous experience with ML&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/alexeygrigorev/mlbookcamp-code/tree/master/course-zoomcamp/01-intro&#34;&gt;Module 1&lt;/a&gt; from ML Zoomcamp for an overview&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexeygrigorev/mlbookcamp-code/tree/master/course-zoomcamp/03-classification&#34;&gt;Module 3&lt;/a&gt; will also be helpful if you want to learn Scikit-Learn (we&#39;ll use it in this course)&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ll also use XGBoost. You don&#39;t have to know it well, but if you want to learn more about it, refer to &lt;a href=&#34;https://github.com/alexeygrigorev/mlbookcamp-code/tree/master/course-zoomcamp/06-trees&#34;&gt;module 6&lt;/a&gt; of ML Zoomcamp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;I registered but haven&#39;t received an invite link. Is it normal?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes, we haven&#39;t automated it. You&#39;ll get a mail from us eventually, don&#39;t worry.&lt;/p&gt; &#xA;&lt;p&gt;If you want to make sure you don&#39;t miss anything:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register in &lt;a href=&#34;https://datatalks.club/slack.html&#34;&gt;our Slack&lt;/a&gt; and join the &lt;code&gt;#course-mlops-zoomcamp&lt;/code&gt; channel&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to &lt;a href=&#34;https://youtube.com/c/datatalksclub&#34;&gt;our YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Is it going to be live?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No and yes. There will be two parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lectures: Pre-recorded, you can watch them when it&#39;s convenient for you.&lt;/li&gt; &#xA; &lt;li&gt;Office hours: Live on Mondays (17:00 CET), but recorded, so you can watch later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;I just joined. Can I still get a certificate?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get a certificate, you need to complete a project&lt;/li&gt; &#xA; &lt;li&gt;There will be two attempts to do a project&lt;/li&gt; &#xA; &lt;li&gt;First: in July, second: in August&lt;/li&gt; &#xA; &lt;li&gt;If you manage to finish all the materials till August, and successfully finish the project, you&#39;ll get the certificate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supporters and partners&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the course sponsors for making it possible to create this course&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.prefect.io/&#34;&gt; &lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/DataTalksClub/mlops-zoomcamp/main/images/prefect.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://wandb.ai/&#34;&gt; &lt;img height=&#34;100&#34; src=&#34;https://datatalks.club/images/partners/wandb-abb.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dsdanielpark/Bard-API</title>
    <updated>2023-05-18T01:29:32Z</updated>
    <id>tag:github.com,2023-05-18:/dsdanielpark/Bard-API</id>
    <link href="https://github.com/dsdanielpark/Bard-API" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The python package that returns response of Google Bard through API.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Development Status :: 5 - Production/Stable&lt;/p&gt; &#xA;&lt;h1&gt;Google &lt;a href=&#34;https://bard.google.com/&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/adb54264fe2ad5067d07d0752fc32600b4e6250073b01ce8c386575b431e3f06/68747470733a2f2f7777772e677374617469632e636f6d2f6c616d64612f696d616765732f66617669636f6e5f76315f31353031363063646466663766323934636533302e737667&#34; height=&#34;20px&#34;&gt;&lt;/a&gt; Bard API&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a&gt;&lt;img alt=&#34;PyPI package&#34; src=&#34;https://img.shields.io/badge/pypi-BardAPI-black&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://pepy.tech/project/bardapi&#34;&gt;&lt;img alt=&#34;Downloads&#34; src=&#34;https://pepy.tech/badge/bardapi&#34;&gt;&lt;/a&gt; --&gt; &#xA; &lt;!-- &lt;a&gt;&lt;img alt=&#34;commit update&#34; src=&#34;https://img.shields.io/github/last-commit/dsdanielpark/Bard-API?color=black&#34;&gt;&lt;/a&gt; --&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img alt=&#34;Code style: black&#34; src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dsdanielpark/Bard-API&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fdsdanielpark%2FBARD_API&amp;amp;count_bg=%23000000&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=BardAPI&amp;amp;edge_flat=false&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/bardapi/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/bardapi&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The python package that returns response of &lt;a href=&#34;https://bard.google.com/&#34;&gt;Google Bard&lt;/a&gt; through API.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dsdanielpark/Bard-API/main/assets/bard_api.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I referred to &lt;a href=&#34;https://github.com/acheong08/Bard&#34;&gt;this github repository(github.com/acheong08/Bard)&lt;/a&gt; where inference process of Bard was reverse engineered. Using &lt;code&gt;__Secure-1PSID&lt;/code&gt;, you can ask questions and get answers from Google Bard. This package is designed for application to the Python package &lt;a href=&#34;https://github.com/dsdanielpark/ExceptNotifier&#34;&gt;ExceptNotifier&lt;/a&gt; and &lt;a href=&#34;https://github.com/dsdanielpark/Co-Coder&#34;&gt;Co-Coder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Do not expose the &lt;code&gt;__Secure-1PSID&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that while I referred to &lt;code&gt;__Secure-1PSID&lt;/code&gt; value as an API KEY for convenience, it is not an officially provided API KEY.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/dsdanielpark/amazing-bard-prompts&#34;&gt;Amazing Bard Prompts&lt;/a&gt; Is All You Need!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helpful prompts for Google Bard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The latest stable release (and required dependencies) can be installed from PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install bardapi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may instead want to use the development version from Github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/dsdanielpark/Bard-API.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://bard.google.com/&#34;&gt;https://bard.google.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;F12 for console&lt;/li&gt; &#xA; &lt;li&gt;Session: Application → Cookies → Copy the value of &lt;code&gt;__Secure-1PSID&lt;/code&gt; cookie.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1YIMA8aBmEQSSk90bB0Q9tznaLLQcluGA?usp=share_link&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple Usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bardapi import Bard&#xA;import os&#xA;&#xA;os.environ[&#39;_BARD_API_KEY&#39;]=&#34;xxxxxxxx&#34;&#xA;Bard().get_answer(&#34;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&#34;)[&#39;content&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import bardapi&#xA;import os&#xA;&#xA;# set your __Secure-1PSID value to key&#xA;os.environ[&#39;_BARD_API_KEY&#39;]=&#34;xxxxxxxx&#34;&#xA;&#xA;# set your input text&#xA;input_text = &#34;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&#34;&#xA;&#xA;# Send an API request and get a response.&#xA;response = bardapi.core.Bard().get_answer(input_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Addressing errors caused by delayed responses in environments like Google Colab and containers. If an error occurs despite following the proper procedure, utilize the timeout argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bardapi import Bard&#xA;import os&#xA;os.environ[&#39;_BARD_API_KEY&#39;]=&#34;xxxxxxxx&#34;&#xA;&#xA;bard = Bard(timeout=10) # Set timeout in seconds&#xA;bard.get_answer(&#34;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&#34;)[&#39;content&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Futher&lt;/h2&gt; &#xA;&lt;h3&gt;Behind a proxy&lt;/h3&gt; &#xA;&lt;p&gt;If you are working behind a proxy, use the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bardapi import Bard&#xA;import os&#xA;&#xA;os.environ[&#39;_BARD_API_KEY&#39;]=&#34;xxxxxxxx&#34;&#xA;# Change &#39;http://127.0.0.1:1080&#39; to your http proxy&#xA;# timeout in seconds&#xA;bard = Bard(proxies={&#39;http&#39;:&#39;http://127.0.0.1:1080&#39;, &#39;https&#39;:&#39;http://127.0.0.1:1080&#39;}, timeout=10)&#xA;bard.get_answer(&#34;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&#34;)[&#39;content&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reusable session object&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bardapi import Bard&#xA;import os&#xA;import requests&#xA;&#xA;os.environ[&#39;_BARD_API_KEY&#39;] = &#39;xxxxxxxxxxx&#39;&#xA;session = requests.Session()&#xA;session.headers = {&#xA;            &#34;Host&#34;: &#34;bard.google.com&#34;,&#xA;            &#34;X-Same-Domain&#34;: &#34;1&#34;,&#xA;            &#34;User-Agent&#34;: &#34;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36&#34;,&#xA;            &#34;Content-Type&#34;: &#34;application/x-www-form-urlencoded;charset=UTF-8&#34;,&#xA;            &#34;Origin&#34;: &#34;https://bard.google.com&#34;,&#xA;            &#34;Referer&#34;: &#34;https://bard.google.com/&#34;,&#xA;        }&#xA;session.cookies.set(&#34;__Secure-1PSID&#34;, os.environ[&#34;_BARD_API_KEY&#34;])&#xA;&#xA;bard = Bard(session=session)&#xA;bard.get_answer(&#34;나와 내 동년배들이 좋아하는 뉴진스에 대해서 알려줘&#34;)[&#39;content&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple Example &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bard.google.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dsdanielpark/Bard-API/main/assets/bardimg.png&#34; height=&#34;600px&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://bard.google.com/&#34;&gt; &lt;br&gt; &lt;h2&gt;Scripts&lt;/h2&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bard.google.com/&#34;&gt;In the scripts &lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dsdanielpark/Bard-API/main/scripts/&#34;&gt;folder&lt;/a&gt;, I have released a script to help you compare &lt;a href=&#34;https://raw.githubusercontent.com/dsdanielpark/Bard-API/main/scripts/openai_api.ipynb&#34;&gt;OpenAI-ChatGPT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/dsdanielpark/Bard-API/main/scripts/google_api.ipynb&#34;&gt;Google-Bard&lt;/a&gt;. I hope they will help more developers.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;MIT&lt;/a&gt; &lt;br&gt; I hold no legal responsibility; for more information, please refer to the bottom of the readme file. I just want you to give me and &lt;a href=&#34;https://github.com/acheong08/Bard&#34;&gt;them&lt;/a&gt; a star.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and Issues&lt;/h2&gt; &#xA;&lt;p&gt;Sincerely grateful for any reports on new features or bugs. Your valuable feedback on the code is highly appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core maintainer: &lt;a href=&#34;https://github.com/DSDanielPark&#34;&gt;Daniel Park, South Korea&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;E-mail: &lt;a href=&#34;mailto:parkminwoo1991@gmail.com&#34;&gt;parkminwoo1991@gmail.com&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;[1] &lt;a href=&#34;https://github.com/acheong08/Bard&#34;&gt;https://github.com/acheong08/Bard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Important Notice&lt;/h3&gt; &#xA;&lt;p&gt;The user assumes all legal responsibilities associated with using the BardAPI package. This Python package merely facilitates easy access to Google Bard for developers. Users are solely responsible for managing data and using the package appropriately. For further information, please consult the Google Bard Official Document.&lt;/p&gt; &#xA;&lt;h4&gt;Could you kindly add this badge to your repository?&lt;/h4&gt; &#xA;&lt;p&gt;markdown&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;![BardAPI](https://img.shields.io/badge/pypi-BardAPI-black)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;html&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&#34;https://github.com/dsdanielpark/Bard-API&#34;&amp;gt;&amp;lt;img alt=&#34;PyPI package&#34; src=&#34;https://img.shields.io/badge/pypi-BardAPI-black&#34;&amp;gt;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thank you for your interest.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Copyright (c) 2023 MinWoo Park, South Korea&lt;/em&gt;&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
</feed>