<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-11T01:29:40Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sismo-core/sismo-protocol</title>
    <updated>2023-01-11T01:29:40Z</updated>
    <id>tag:github.com,2023-01-11:/sismo-core/sismo-protocol</id>
    <link href="https://github.com/sismo-core/sismo-protocol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Contracts of the Sismo Attestation Protocol&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/sismo-core/sismo-protocol/main/docs/top.png&#34; alt=&#34;Logo&#34; width=&#34;100&#34; height=&#34;100&#34; style=&#34;borderRadius: 20px&#34;&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; Sismo Protocol Contracts &lt;/h3&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Made by &lt;a href=&#34;https://www.sismo.io/&#34; target=&#34;_blank&#34;&gt;Sismo&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/sismo&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/sismo_eth&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Twitter-1DA1F2?style=for-the-badge&amp;amp;logo=twitter&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;a href=&#34;https://www.sismo.io/&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; This repository contains the smart contracts of the Sismo Protocol. &#xA;&lt;p&gt;There are three core contracts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;core/AttestationsRegistry.sol&lt;/code&gt;: The registry stores all attestations. It is owned by the governance that authorizes/unauthorize issuers to record in it&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;core/Attester.sol&lt;/code&gt; The standard abstract contract must be inherited by attesters. Attesters are issuers of attestations. They verify user requests and build attestations that will be recorded in the registry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;core/Badges.sol&lt;/code&gt; Reads the registry. Stateless Non Transferable Token view of attestations (ERC1155)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also contains implementations of attester in &lt;code&gt;attesters/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HydraS1SimpleAttester.sol&lt;/code&gt;: ZK Attester using the &lt;a href=&#34;https://hydra-s1.docs.sismo.io&#34;&gt;Hydra S1 Proving Scheme&lt;/a&gt; and the notion of nullifiers. Users must provide a ZK Proof along with their request to generate attestations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HydraS1AccountboundAttester.sol&lt;/code&gt;: Accountbound version of the Simple Hydra S1 Simple Attester. (Users can update at will where the attestation is stored)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sismo protocol&lt;/h2&gt; &#xA;&lt;p&gt;A complete overview of the protocol is available in our &lt;a href=&#34;https://protocol.docs.sismo.io&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deployed contracts&lt;/h2&gt; &#xA;&lt;p&gt;Deployed contracts can be found &lt;a href=&#34;https://docs.sismo.io/sismo-docs/deployed-contract-addresses&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile contracts&lt;/h3&gt; &#xA;&lt;p&gt;Compile contracts using hardhat&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;Launch all tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Print storage layout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn storage-layout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy on local chain&lt;/h3&gt; &#xA;&lt;p&gt;Terminal tab 1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn chain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Terminal tab 2&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn deploy:local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create a new Attester&lt;/h2&gt; &#xA;&lt;p&gt;To develop a new attester, you must inherit the &lt;code&gt;core/Attester.sol&lt;/code&gt; abstract contract and implement the following functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;_verifyRequest(request, proofData)&lt;/code&gt;: You must implement the user request verification against the proof provided by the user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buildAttestations(request, proofData)&lt;/code&gt;: You must build the attestations that will be recorded from a verified user request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other optional hook functions that can be implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;_beforeRecordAttestations(request, proofData)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_afterRecordAttestations(request, proofData)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;/attesters/hydra-s1/HydraS1SimpleAttester.sol&lt;/code&gt; is a good example of an attester implementing those functions.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://attesters.docs.sismo.io&#34;&gt;guide&lt;/a&gt; is offered in our documentation.&lt;/p&gt; &#xA;&lt;p&gt;Feel free open a PR with your new attester in &lt;code&gt;/attester&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please, feel free to open issues, PRs or simply provide feedback!&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Prefer &lt;a href=&#34;https://discord.gg/sismo&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/sismo_eth&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://static.sismo.io/readme/bottom-main.png&#34; alt=&#34;bottom&#34; width=&#34;100%&#34;&gt;</summary>
  </entry>
  <entry>
    <title>google/cdc-file-transfer</title>
    <updated>2023-01-11T01:29:40Z</updated>
    <id>tag:github.com,2023-01-11:/google/cdc-file-transfer</id>
    <link href="https://github.com/google/cdc-file-transfer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for synching and streaming files from Windows to Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CDC File Transfer&lt;/h1&gt; &#xA;&lt;p&gt;Born from the ashes of Stadia, this repository contains tools for syncing and streaming files from Windows to Linux. They are based on Content Defined Chunking (CDC), in particular &lt;a href=&#34;https://www.usenix.org/conference/atc16/technical-sessions/presentation/xia&#34;&gt;FastCDC&lt;/a&gt;, to split up files into chunks.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;At Stadia, game developers had access to Linux cloud instances to run games. Most developers wrote their games on Windows, though. Therefore, they needed a way to make them available on the remote Linux instance.&lt;/p&gt; &#xA;&lt;p&gt;As developers had SSH access to those instances, they could use &lt;code&gt;scp&lt;/code&gt; to copy the game content. However, this was impractical, especially with the shift to working from home during the pandemic with sub-par internet connections. &lt;code&gt;scp&lt;/code&gt; always copies full files, there is no &#34;delta mode&#34; to copy only the things that changed, it is slow for many small files, and there is no fast compression.&lt;/p&gt; &#xA;&lt;p&gt;To help this situation, we developed two tools, &lt;code&gt;cdc_rsync&lt;/code&gt; and &lt;code&gt;cdc_stream&lt;/code&gt;, which enable developers to quickly iterate on their games without repeatedly incurring the cost of transmitting dozens of GBs.&lt;/p&gt; &#xA;&lt;h2&gt;CDC RSync&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cdc_rsync&lt;/code&gt; is a tool to sync files from a Windows machine to a Linux device, similar to the standard Linux &lt;a href=&#34;https://linux.die.net/man/1/rsync&#34;&gt;rsync&lt;/a&gt;. It is basically a copy tool, but optimized for the case where there is already an old version of the files available in the target directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It quickly skips files if timestamp and file size match.&lt;/li&gt; &#xA; &lt;li&gt;It uses fast compression for all data transfer.&lt;/li&gt; &#xA; &lt;li&gt;If a file changed, it determines which parts changed and only transfers the differences.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/cdc_rsync_recursive_upload_demo.gif&#34; alt=&#34;cdc_rsync demo&#34; width=&#34;688&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The remote diffing algorithm is based on CDC. In our tests, it is up to 30x faster than the one used in &lt;code&gt;rsync&lt;/code&gt; (1500 MB/s vs 50 MB/s).&lt;/p&gt; &#xA;&lt;p&gt;The following chart shows a comparison of &lt;code&gt;cdc_rsync&lt;/code&gt; and Linux &lt;code&gt;rsync&lt;/code&gt; running under Cygwin on Windows. The test data consists of 58 development builds of some game provided to us for evaluation purposes. The builds are 40-45 GB large. For this experiment, we uploaded the first build, then synced the second build with each of the two tools and measured the time. For example, syncing from build 1 to build 2 took 210 seconds with the Cygwin &lt;code&gt;rsync&lt;/code&gt;, but only 75 seconds with &lt;code&gt;cdc_rsync&lt;/code&gt;. The three outliers are probably feature drops from another development branch, where the delta was much higher. Overall, &lt;code&gt;cdc_rsync&lt;/code&gt; syncs files about &lt;strong&gt;3 times faster&lt;/strong&gt; than Cygwin &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/cdc_rsync_vs_cygwin_rsync.png&#34; alt=&#34;Comparison of cdc_rsync and Linux rsync running in Cygwin&#34; width=&#34;753&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;We also ran the experiment with the native Linux &lt;code&gt;rsync&lt;/code&gt;, i.e syncing Linux to Linux, to rule out issues with Cygwin. Linux &lt;code&gt;rsync&lt;/code&gt; performed on average 35% worse than Cygwin &lt;code&gt;rsync&lt;/code&gt;, which can be attributed to CPU differences. We did not include it in the figure because of this, but you can find it &lt;a href=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/cdc_rsync_vs_cygwin_rsync_vs_linux_rsync.png&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work and why is it faster?&lt;/h3&gt; &#xA;&lt;p&gt;The standard Linux &lt;code&gt;rsync&lt;/code&gt; splits a file into fixed-size chunks of typically several KB.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/fixed_size_chunks.png&#34; alt=&#34;Linux rsync uses fixed size chunks&#34; width=&#34;258&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;If the file is modified in the middle, e.g. by inserting &lt;code&gt;xxxx&lt;/code&gt; after &lt;code&gt;567&lt;/code&gt;, this usually means that &lt;span style=&#34;color: red&#34;&gt;the modified chunks as well as all subsequent chunks&lt;/span&gt; change.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/fixed_size_chunks_inserted.png&#34; alt=&#34;Fixed size chunks after inserting data&#34; width=&#34;301&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The standard &lt;code&gt;rsync&lt;/code&gt; algorithm hashes the chunks of the remote &#34;old&#34; file and sends the hashes to the local device. The local device then figures out which parts of the &#34;new&#34; file matches known chunks.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/linux_rsync_animation.gif&#34; alt=&#34;Syncing a file with the standard Linux rsync&#34; width=&#34;855&#34;&gt; &lt;br&gt; Standard rsync algorithm &lt;/p&gt; &#xA;&lt;p&gt;This is a simplification. The actual algorithm is more complicated and uses two hashes, a weak rolling hash and a strong hash, see &lt;a href=&#34;https://rsync.samba.org/tech_report/&#34;&gt;here&lt;/a&gt; for a great overview. What makes &lt;code&gt;rsync&lt;/code&gt; relatively slow is the &#34;no match&#34; situation where the rolling hash does not match any remote hash, and the algorithm has to roll the hash forward and perform a hash map lookup for each byte. &lt;code&gt;rsync&lt;/code&gt; goes to &lt;a href=&#34;https://github.com/librsync/librsync/raw/master/src/hashtable.h&#34;&gt;great lengths&lt;/a&gt; optimizing lookups.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cdc_rsync&lt;/code&gt; does not use fixed-size chunks, but instead variable-size, content-defined chunks. That means, chunk boundaries are determined by the &lt;em&gt;local content&lt;/em&gt; of the file, in practice a 64 byte sliding window. For more details, see &lt;a href=&#34;https://www.usenix.org/conference/atc16/technical-sessions/presentation/xia&#34;&gt;the FastCDC paper&lt;/a&gt; or take a look at &lt;a href=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/fastcdc/fastcdc.h&#34;&gt;our implementation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/variable_size_chunks.png&#34; alt=&#34;cdc_rsync uses variable, content-defined size chunks&#34; width=&#34;260&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;If the file is modified in the middle, only &lt;span style=&#34;color: red&#34;&gt;the modified chunks&lt;/span&gt;, but not &lt;span style=&#34;color: #38761d&#34;&gt;subsequent chunks&lt;/span&gt; change (unless they are less than 64 bytes away from the modifications).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/variable_size_chunks_inserted.png&#34; alt=&#34;Content-defined chunks after inserting data&#34; width=&#34;314&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Computing the chunk boundaries is cheap and involves only a left-shift, a memory lookup, an &lt;code&gt;add&lt;/code&gt; and an &lt;code&gt;and&lt;/code&gt; operation for each input byte. This is cheaper than the hash map lookup for the standard &lt;code&gt;rsync&lt;/code&gt; algorithm.&lt;/p&gt; &#xA;&lt;p&gt;Because of this, the &lt;code&gt;cdc_rsync&lt;/code&gt; algorithm is faster than the standard &lt;code&gt;rsync&lt;/code&gt;. It is also simpler. Since chunk boundaries move along with insertions or deletions, the task to match local and remote hashes is a trivial set difference operation. It does not involve a per-byte hash map lookup.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/cdc_rsync_animation.gif&#34; alt=&#34;Syncing a file with cdc_rsync&#34; width=&#34;857&#34;&gt; &lt;br&gt; cdc_rsync algorithm &lt;/p&gt; &#xA;&lt;h2&gt;CDC Stream&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cdc_stream&lt;/code&gt; is a tool to stream files and directories from a Windows machine to a Linux device. Conceptually, it is similar to &lt;a href=&#34;https://github.com/libfuse/sshfs&#34;&gt;sshfs&lt;/a&gt;, but it is optimized for read speed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It caches streamed data on the Linux device.&lt;/li&gt; &#xA; &lt;li&gt;If a file is re-read on Linux after it changed on Windows, only the differences are streamed again. The rest is read from the cache.&lt;/li&gt; &#xA; &lt;li&gt;Stat operations are very fast since the directory metadata (filenames, permissions etc.) is provided in a streaming-friendly way.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To efficiently determine which parts of a file changed, the tool uses the same CDC-based diffing algorithm as &lt;code&gt;cdc_rsync&lt;/code&gt;. Changes to Windows files are almost immediately reflected on Linux, with a delay of roughly (0.5s + 0.7s x total size of changed files in GB).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/cdc_stream_demo.gif&#34; alt=&#34;cdc_stream demo&#34; width=&#34;688&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The tool does not support writing files back from Linux to Windows; the Linux directory is readonly.&lt;/p&gt; &#xA;&lt;p&gt;The following chart compares times from starting a game to reaching the menu. In one case, the game is streamed via &lt;code&gt;sshfs&lt;/code&gt;, in the other case we use &lt;code&gt;cdc_stream&lt;/code&gt;. Overall, we see a &lt;strong&gt;2x to 5x speedup&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/cdc-file-transfer/main/docs/cdc_stream_vs_sshfs.png&#34; alt=&#34;Comparison of cdc_stream and sshfs&#34; width=&#34;752&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Download the precompiled binaries from the &lt;a href=&#34;https://github.com/google/cdc-file-transfer/releases&#34;&gt;latest release&lt;/a&gt;. We currently provide Linux binaries compiled on &lt;a href=&#34;https://github.com/actions/runner-images&#34;&gt;Github&#39;s latest Ubuntu&lt;/a&gt; version. If the binaries work for you, you can skip the following two sections.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the project can be built from source. Some binaries have to be built on Windows, some on Linux.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To build the tools from source, the following steps have to be executed on &lt;strong&gt;both Windows and Linux&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and install Bazel from &lt;a href=&#34;https://bazel.build/install&#34;&gt;here&lt;/a&gt;. See &lt;a href=&#34;https://github.com/google/cdc-file-transfer/actions&#34;&gt;workflow logs&lt;/a&gt; for the currently used version.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository. &lt;pre&gt;&lt;code&gt;git clone https://github.com/google/cdc-file-transfer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Initialize submodules. &lt;pre&gt;&lt;code&gt;cd cdc-file-transfer&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, install an SSH client on the Windows device if not present. The file transfer tools require &lt;code&gt;ssh.exe&lt;/code&gt; and &lt;code&gt;scp.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The two tools can be built and used independently.&lt;/p&gt; &#xA;&lt;h3&gt;CDC RSync&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build Linux components &lt;pre&gt;&lt;code&gt;bazel build --config linux --compilation_mode=opt --linkopt=-Wl,--strip-all --copt=-fdata-sections --copt=-ffunction-sections --linkopt=-Wl,--gc-sections //cdc_rsync_server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build Windows components &lt;pre&gt;&lt;code&gt;bazel build --config windows --compilation_mode=opt --copt=/GL //cdc_rsync&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Copy the Linux build output file &lt;code&gt;cdc_rsync_server&lt;/code&gt; from &lt;code&gt;bazel-bin/cdc_rsync_server&lt;/code&gt; on the Linux system to &lt;code&gt;bazel-bin\cdc_rsync&lt;/code&gt; on the Windows machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CDC Stream&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build Linux components &lt;pre&gt;&lt;code&gt;bazel build --config linux --compilation_mode=opt --linkopt=-Wl,--strip-all --copt=-fdata-sections --copt=-ffunction-sections --linkopt=-Wl,--gc-sections //cdc_fuse_fs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build Windows components &lt;pre&gt;&lt;code&gt;bazel build --config windows --compilation_mode=opt --copt=/GL //cdc_stream&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Copy the Linux build output files &lt;code&gt;cdc_fuse_fs&lt;/code&gt; and &lt;code&gt;libfuse.so&lt;/code&gt; from &lt;code&gt;bazel-bin/cdc_fuse_fs&lt;/code&gt; on the Linux system to &lt;code&gt;bazel-bin\cdc_stream&lt;/code&gt; on the Windows machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The tools require a setup where you can use SSH and SCP from the Windows machine to the Linux device without entering a password, e.g. by using key-based authentication.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring SSH and SCP&lt;/h3&gt; &#xA;&lt;p&gt;By default, the tools search &lt;code&gt;ssh.exe&lt;/code&gt; and &lt;code&gt;scp.exe&lt;/code&gt; from the path environment variable. If you can run the following commands in a Windows cmd without entering your password, you are all set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh user@linux.device.com&#xA;scp somefile.txt user@linux.device.com:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;user&lt;/code&gt; is the Linux user and &lt;code&gt;linux.device.com&lt;/code&gt; is the Linux host to SSH into or copy the file to.&lt;/p&gt; &#xA;&lt;p&gt;If additional arguments are required, it is recommended to provide an SSH config file. By default, both &lt;code&gt;ssh.exe&lt;/code&gt; and &lt;code&gt;scp.exe&lt;/code&gt; use the file at &lt;code&gt;%USERPROFILE%\.ssh\config&lt;/code&gt; on Windows, if it exists. A possible config file that sets a username, a port, an identity file and a known host file could look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host linux_device&#xA;&#x9;HostName linux.device.com&#xA;&#x9;User user&#xA;&#x9;Port 12345&#xA;&#x9;IdentityFile C:\path\to\id_rsa&#xA;&#x9;UserKnownHostsFile C:\path\to\known_hosts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;ssh.exe&lt;/code&gt; or &lt;code&gt;scp.exe&lt;/code&gt; cannot be found, you can specify the full paths via the command line arguments &lt;code&gt;--ssh-command&lt;/code&gt; and &lt;code&gt;--scp-command&lt;/code&gt; for &lt;code&gt;cdc_rsync&lt;/code&gt; and &lt;code&gt;cdc_stream start&lt;/code&gt; (see below), or set the environment variables &lt;code&gt;CDC_SSH_COMMAND&lt;/code&gt; and &lt;code&gt;CDC_SCP_COMMAND&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set CDC_SSH_COMMAND=&#34;C:\path with space\to\ssh.exe&#34;&#xA;set CDC_SCP_COMMAND=&#34;C:\path with space\to\scp.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can also specify SSH configuration via the environment variables instead of using a config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set CDC_SSH_COMMAND=C:\path\to\ssh.exe -p 12345 -i C:\path\to\id_rsa -oUserKnownHostsFile=C:\path\to\known_hosts&#xA;set CDC_SCP_COMMAND=C:\path\to\scp.exe -P 12345 -i C:\path\to\id_rsa -oUserKnownHostsFile=C:\path\to\known_hosts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the small &lt;code&gt;-p&lt;/code&gt; for &lt;code&gt;ssh.exe&lt;/code&gt; and the capital &lt;code&gt;-P&lt;/code&gt; for &lt;code&gt;scp.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Google Specific&lt;/h4&gt; &#xA;&lt;p&gt;For Google internal usage, set the following environment variables to enable SSH authentication using a Google security key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set CDC_SSH_COMMAND=C:\gnubby\bin\ssh.exe&#xA;set CDC_SCP_COMMAND=C:\gnubby\bin\scp.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you will have to touch the security key multiple times during the first run. Subsequent runs only require a single touch.&lt;/p&gt; &#xA;&lt;h3&gt;CDC RSync&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cdc_rsync&lt;/code&gt; is used similar to &lt;code&gt;scp&lt;/code&gt; or the Linux &lt;code&gt;rsync&lt;/code&gt; command. To sync a single Windows file &lt;code&gt;C:\path\to\file.txt&lt;/code&gt; to the home directory &lt;code&gt;~&lt;/code&gt; on the Linux device &lt;code&gt;linux.device.com&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_rsync C:\path\to\file.txt user@linux.device.com:~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;cdc_rsync&lt;/code&gt; understands the usual Windows wildcards &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_rsync C:\path\to\*.txt user@linux.device.com:~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To sync the contents of the Windows directory &lt;code&gt;C:\path\to\assets&lt;/code&gt; recursively to &lt;code&gt;~/assets&lt;/code&gt; on the Linux device, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_rsync C:\path\to\assets\* user@linux.device.com:~/assets -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get per file progress, add &lt;code&gt;-v&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_rsync C:\path\to\assets\* user@linux.device.com:~/assets -vr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDC Stream&lt;/h3&gt; &#xA;&lt;p&gt;To stream the Windows directory &lt;code&gt;C:\path\to\assets&lt;/code&gt; to &lt;code&gt;~/assets&lt;/code&gt; on the Linux device, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_stream start C:\path\to\assets user@linux.device.com:~/assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This makes all files and directories in &lt;code&gt;C:\path\to\assets&lt;/code&gt; available on &lt;code&gt;~/assets&lt;/code&gt; immediately, as if it were a local copy. However, data is streamed from Windows to Linux as files are accessed.&lt;/p&gt; &#xA;&lt;p&gt;To stop the streaming session, enter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_stream stop user@linux.device.com:~/assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command also accepts wildcards. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_stream stop user@*:*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;stops all existing streaming sessions for the given user.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;On first run, &lt;code&gt;cdc_stream&lt;/code&gt; starts a background service, which does all the work. The &lt;code&gt;cdc_stream start&lt;/code&gt; and &lt;code&gt;cdc_stream stop&lt;/code&gt; commands are just RPC clients that talk to the service.&lt;/p&gt; &#xA;&lt;p&gt;The service logs to &lt;code&gt;%APPDATA%\cdc-file-transfer\logs&lt;/code&gt; by default. The logs are useful to investigate issues with asset streaming. To pass custom arguments, or to debug the service, create a JSON config file at &lt;code&gt;%APPDATA%\cdc-file-transfer\cdc_stream.json&lt;/code&gt; with command line flags. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &#34;verbosity&#34;:3 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instructs the service to log debug messages. Try &lt;code&gt;cdc_stream start-service -h&lt;/code&gt; for a list of available flags. Alternatively, run the service manually with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdc_stream start-service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and pass the flags as command line arguments. When you run the service manually, the flag &lt;code&gt;--log-to-stdout&lt;/code&gt; is particularly useful as it logs to the console instead of to the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cdc_rsync&lt;/code&gt; always logs to the console. To increase log verbosity, pass &lt;code&gt;-vvv&lt;/code&gt; for debug logs or &lt;code&gt;-vvvv&lt;/code&gt; for verbose logs.&lt;/p&gt; &#xA;&lt;p&gt;For both sync and stream, the debug logs contain all SSH and SCP commands that are attempted to run, which is very useful for troubleshooting. If a command fails unexpectedly, copy it and run it in isolation. Pass &lt;code&gt;-vv&lt;/code&gt; or &lt;code&gt;-vvv&lt;/code&gt; for additional debug output.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fastlane/fastlane</title>
    <updated>2023-01-11T01:29:40Z</updated>
    <id>tag:github.com,2023-01-11:/fastlane/fastlane</id>
    <link href="https://github.com/fastlane/fastlane" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 The easiest way to automate building and releasing your iOS and Android apps&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png&#34;&gt; &lt;img src=&#34;https://github.com/fastlane/fastlane/raw/master/fastlane/assets/fastlane_text.png?raw=true&#34; alt=&#34;fastlane Logo&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/FastlaneTools&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@FastlaneTools-blue.svg?style=flat&#34; alt=&#34;Twitter: @FastlaneTools&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastlane/fastlane/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/fastlane&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/fastlane.svg?style=flat&#34; alt=&#34;Gem&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/fastlane&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/fastlane.json&amp;amp;query=$.versions.stable&amp;amp;label=homebrew&#34; alt=&#34;Homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/fastlane/fastlane&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/fastlane/fastlane/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fastlane/fastlane/raw/master/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs welcome!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;fastlane&lt;/em&gt; is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; ✨ All fastlane docs were moved to &lt;a href=&#34;https://docs.fastlane.tools/&#34;&gt;docs.fastlane.tools&lt;/a&gt; ✨ &lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;p&gt;Before submitting a new GitHub issue, please make sure to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://docs.fastlane.tools&#34;&gt;docs.fastlane.tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search for &lt;a href=&#34;https://github.com/fastlane/fastlane/issues&#34;&gt;existing GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the above doesn&#39;t help, please &lt;a href=&#34;https://github.com/fastlane/fastlane/issues&#34;&gt;submit an issue&lt;/a&gt; on GitHub and provide information about your setup, in particular the output of the &lt;code&gt;fastlane env&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you want to report a regression in &lt;em&gt;fastlane&lt;/em&gt; (something that has worked before, but broke with a new release), please mark your issue title as such using &lt;code&gt;[Regression] Your title here&lt;/code&gt;. This enables us to quickly detect and fix regressions.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;fastlane&lt;/em&gt; team&lt;/h2&gt; &#xA;&lt;!-- This table is regenerated and resorted on each release --&gt; &#xA;&lt;table id=&#34;team&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td id=&#34;łukasz-grabowski&#34;&gt; &lt;a href=&#34;https://github.com/lucgrabowski&#34;&gt; &lt;img src=&#34;https://github.com/lucgrabowski.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;Łukasz Grabowski&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;luka-mirosevic&#34;&gt; &lt;a href=&#34;https://github.com/lmirosevic&#34;&gt; &lt;img src=&#34;https://github.com/lmirosevic.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/lmirosevic&#34;&gt;Luka Mirosevic&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;satoshi-namai&#34;&gt; &lt;a href=&#34;https://github.com/ainame&#34;&gt; &lt;img src=&#34;https://github.com/ainame.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/ainame&#34;&gt;Satoshi Namai&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;olivier-halligon&#34;&gt; &lt;a href=&#34;https://github.com/AliSoftware&#34;&gt; &lt;img src=&#34;https://github.com/AliSoftware.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/aligatr&#34;&gt;Olivier Halligon&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;daniel-jankowski&#34;&gt; &lt;a href=&#34;https://github.com/mollyIV&#34;&gt; &lt;img src=&#34;https://github.com/mollyIV.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/mollyIV&#34;&gt;Daniel Jankowski&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td id=&#34;kohki-miki&#34;&gt; &lt;a href=&#34;https://github.com/giginet&#34;&gt; &lt;img src=&#34;https://github.com/giginet.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/giginet&#34;&gt;Kohki Miki&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;stefan-natchev&#34;&gt; &lt;a href=&#34;https://github.com/snatchev&#34;&gt; &lt;img src=&#34;https://github.com/snatchev.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/snatchev&#34;&gt;Stefan Natchev&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;felix-krause&#34;&gt; &lt;a href=&#34;https://github.com/KrauseFx&#34;&gt; &lt;img src=&#34;https://github.com/KrauseFx.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/KrauseFx&#34;&gt;Felix Krause&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;danielle-tomlinson&#34;&gt; &lt;a href=&#34;https://github.com/endocrimes&#34;&gt; &lt;img src=&#34;https://github.com/endocrimes.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/endocrimes&#34;&gt;Danielle Tomlinson&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;jimmy-dee&#34;&gt; &lt;a href=&#34;https://github.com/jdee&#34;&gt; &lt;img src=&#34;https://github.com/jdee.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;Jimmy Dee&lt;/h4&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td id=&#34;matthew-ellis&#34;&gt; &lt;a href=&#34;https://github.com/matthewellis&#34;&gt; &lt;img src=&#34;https://github.com/matthewellis.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/mellis1995&#34;&gt;Matthew Ellis&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;jérôme-lacoste&#34;&gt; &lt;a href=&#34;https://github.com/lacostej&#34;&gt; &lt;img src=&#34;https://github.com/lacostej.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/lacostej&#34;&gt;Jérôme Lacoste&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;andrew-mcburney&#34;&gt; &lt;a href=&#34;https://github.com/armcburney&#34;&gt; &lt;img src=&#34;https://github.com/armcburney.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/armcburney&#34;&gt;Andrew McBurney&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;manu-wallner&#34;&gt; &lt;a href=&#34;https://github.com/milch&#34;&gt; &lt;img src=&#34;https://github.com/milch.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/acrooow&#34;&gt;Manu Wallner&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;max-ott&#34;&gt; &lt;a href=&#34;https://github.com/max-ott&#34;&gt; &lt;img src=&#34;https://github.com/max-ott.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/ott_max&#34;&gt;Max Ott&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td id=&#34;jorge-revuelta-h&#34;&gt; &lt;a href=&#34;https://github.com/minuscorp&#34;&gt; &lt;img src=&#34;https://github.com/minuscorp.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/minuscorp&#34;&gt;Jorge Revuelta H&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;manish-rathi&#34;&gt; &lt;a href=&#34;https://github.com/crazymanish&#34;&gt; &lt;img src=&#34;https://github.com/crazymanish.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/iammanishrathi&#34;&gt;Manish Rathi&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;joshua-liebowitz&#34;&gt; &lt;a href=&#34;https://github.com/taquitos&#34;&gt; &lt;img src=&#34;https://github.com/taquitos.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/taquitos&#34;&gt;Joshua Liebowitz&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;iulian-onofrei&#34;&gt; &lt;a href=&#34;https://github.com/revolter&#34;&gt; &lt;img src=&#34;https://github.com/revolter.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/Revolt666&#34;&gt;Iulian Onofrei&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;maksym-grebenets&#34;&gt; &lt;a href=&#34;https://github.com/mgrebenets&#34;&gt; &lt;img src=&#34;https://github.com/mgrebenets.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/mgrebenets&#34;&gt;Maksym Grebenets&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td id=&#34;roger-oba&#34;&gt; &lt;a href=&#34;https://github.com/rogerluan&#34;&gt; &lt;img src=&#34;https://github.com/rogerluan.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogerluan_&#34;&gt;Roger Oba&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;aaron-brager&#34;&gt; &lt;a href=&#34;https://github.com/getaaron&#34;&gt; &lt;img src=&#34;https://github.com/getaaron.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/getaaron&#34;&gt;Aaron Brager&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;josh-holtz&#34;&gt; &lt;a href=&#34;https://github.com/joshdholtz&#34;&gt; &lt;img src=&#34;https://github.com/joshdholtz.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/joshdholtz&#34;&gt;Josh Holtz&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;fumiya-nakamura&#34;&gt; &lt;a href=&#34;https://github.com/nafu&#34;&gt; &lt;img src=&#34;https://github.com/nafu.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/nafu003&#34;&gt;Fumiya Nakamura&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;   &lt;td id=&#34;jan-piotrowski&#34;&gt; &lt;a href=&#34;https://github.com/janpio&#34;&gt; &lt;img src=&#34;https://github.com/janpio.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/Sujan&#34;&gt;Jan Piotrowski&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td id=&#34;helmut-januschka&#34;&gt; &lt;a href=&#34;https://github.com/hjanuschka&#34;&gt; &lt;img src=&#34;https://github.com/hjanuschka.png&#34; width=&#34;140px;&#34;&gt; &lt;/a&gt; &lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/hjanuschka&#34;&gt;Helmut Januschka&lt;/a&gt;&lt;/h4&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Special thanks to all &lt;a href=&#34;https://github.com/fastlane/fastlane/graphs/contributors&#34;&gt;contributors&lt;/a&gt; for extending and improving &lt;em&gt;fastlane&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to &lt;em&gt;fastlane&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/fastlane/fastlane/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to help with &lt;em&gt;fastlane&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Help us keep &lt;em&gt;fastlane&lt;/em&gt; open and inclusive. Please read and follow our &lt;a href=&#34;https://github.com/fastlane/fastlane/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Metrics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;fastlane&lt;/em&gt; tracks a few key metrics to understand how developers are using the tool and to help us know what areas need improvement. No personal/sensitive information is ever collected. Metrics that are collected include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The number of &lt;em&gt;fastlane&lt;/em&gt; runs&lt;/li&gt; &#xA; &lt;li&gt;A salted hash of the app identifier or package name, which helps us anonymously identify unique usage of &lt;em&gt;fastlane&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can easily opt-out of metrics collection by adding &lt;code&gt;opt_out_usage&lt;/code&gt; at the top of your &lt;code&gt;Fastfile&lt;/code&gt; or by setting the environment variable &lt;code&gt;FASTLANE_OPT_OUT_USAGE&lt;/code&gt;. &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/fastlane_core/lib/fastlane_core/analytics&#34;&gt;Check out the metrics code on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/fastlane/fastlane/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; ✨ All fastlane docs were moved to &lt;a href=&#34;https://docs.fastlane.tools/&#34;&gt;docs.fastlane.tools&lt;/a&gt; ✨ &lt;/h2&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>