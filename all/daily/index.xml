<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-19T01:29:23Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YimMenu/YimMenuV2</title>
    <updated>2025-06-19T01:29:23Z</updated>
    <id>tag:github.com,2025-06-19:/YimMenu/YimMenuV2</id>
    <link href="https://github.com/YimMenu/YimMenuV2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental menu for GTA 5: Enhanced&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YimMenuV2&lt;/h1&gt; &#xA;&lt;p&gt;Experimental menu for GTA 5: Enhanced&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version of FSL from &lt;a href=&#34;https://www.unknowncheats.me/forum/grand-theft-auto-v/616977-fsl-local-gtao-saves.html&#34;&gt;here&lt;/a&gt; and place version.dll in your GTA V directory. Using FSL is now optional but highly recommended for account safety&lt;/li&gt; &#xA; &lt;li&gt;Download YimMenuV2 from &lt;a href=&#34;https://github.com/YimMenu/YimMenuV2/releases/tag/nightly&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download an injector, such as &lt;a href=&#34;https://www.unknowncheats.me/forum/general-programming-and-reversing/124013-xenos-injector-v2-3-2-a.html&#34;&gt;Xenos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Rockstar Launcher, select Grand Theft Auto V Enhanced, go to settings, and disable BattlEye. If you are using Steam or Epic Games, you may have to pass the -nobattleye command line parameter as well&lt;/li&gt; &#xA; &lt;li&gt;Launch GTA V, then use your injector to inject YimMenuV2.dll at the main menu&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to open the menu?&lt;/h2&gt; &#xA;&lt;p&gt;Press the &lt;code&gt;INSERT&lt;/code&gt; key or &lt;code&gt;Ctrl+\&lt;/code&gt; to open the menu&lt;/p&gt; &#xA;&lt;h2&gt;Common issues&lt;/h2&gt; &#xA;&lt;h3&gt;I keep getting desynced from public sessions every five minutes&lt;/h3&gt; &#xA;&lt;p&gt;We currently do not have a BattlEye bypass, and legitimate hosts will eventually remove you due to a heartbeat failure. There is currently no way to stop this other than using an actual (private) bypass&lt;/p&gt; &#xA;&lt;h3&gt;I removed FSL and all my progress disappeared!&lt;/h3&gt; &#xA;&lt;p&gt;FSL reroutes account save data to disk, so any progress made with FSL will only show up if you have FSL enabled. If you don&#39;t want this, you can also use YimMenuV2 without FSL, but this is not recommended&lt;/p&gt; &#xA;&lt;h3&gt;I removed FSL and the game doesn&#39;t start up anymore&lt;/h3&gt; &#xA;&lt;p&gt;This is a known issue; delete &#34;Documents/GTAV Enhanced/Profiles&#34; to fix&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/lowcode-engine</title>
    <updated>2025-06-19T01:29:23Z</updated>
    <id>tag:github.com,2025-06-19:/alibaba/lowcode-engine</id>
    <link href="https://github.com/alibaba/lowcode-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An enterprise-class low-code technology stack with scale-out design / ‰∏ÄÂ•óÈù¢ÂêëÊâ©Â±ïËÆæËÆ°ÁöÑ‰ºÅ‰∏öÁ∫ß‰Ωé‰ª£Á†ÅÊäÄÊúØ‰ΩìÁ≥ª&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://lowcode-engine.cn&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://img.alicdn.com/imgextra/i3/O1CN01i8K9cD1d0HU7TjDtv_!!6000000003673-2-tps-500-591.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;LowCodeEngine&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;An enterprise-class low-code technology stack with scale-out design&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://npmjs.org/package/@alilc/lowcode-engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@alilc/lowcode-engine.svg?style=flat-square&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/@alilc/lowcode-engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@alilc/lowcode-engine.svg?style=flat-square&#34; alt=&#34;NPM downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/actions-cool/issues-helper&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/using-issues--helper-orange?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alibaba/lowcode-engine/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/label-issues/alibaba/lowcode-engine/help%20wanted/open&#34; alt=&#34;Issues need help&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/alibaba/lowcode-engine&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alibaba/lowcode-engine/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lowcode-workspace/awesome-lowcode-engine&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://opensource.alibaba.com/contribution_leaderboard/details?projectValue=lowcode-engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LowCodeEngine-Check%20Your%20Contribution-orange&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://lowcode-engine.cn&#34;&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i2/O1CN01UhoS7C1sNNhySvfWi_!!6000000005754-2-tps-2878-1588.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/lowcode-engine/main/packages/engine/README-zh_CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåà An extension-oriented kernel engine extracted from an enterprise-level low-code platform, pursuing the design concept of the smallest kernel and the strongest ecology&lt;/li&gt; &#xA; &lt;li&gt;üì¶ Out-of-the-box high-quality ecological elements, including material systems, setters, plugins, etc.&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è A complete tool chain, supporting the full-link R&amp;amp;D cycle of ecological elements such as material systems, setters, and plug-ins&lt;/li&gt; &#xA; &lt;li&gt;üîå Powerful expansion capability, has supported nearly 100 various vertical low-code platforms&lt;/li&gt; &#xA; &lt;li&gt;üõ° Developed with TypeScript, providing complete type definition files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéØ Compatible Environments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern browsers (Chrome &amp;gt;= 80, Edge &amp;gt;= 80, last 2 safari versions, last 2 firefox versions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Engine Protocol&lt;/h2&gt; &#xA;&lt;p&gt;The engine fully implements the &#34;LowCodeEngine Basic Construction Protocol Specification&#34; and &#34;LowCodeEngine Material Protocol Specification&#34;. The protocol stack is a key part of whether materials in the low-code field can be circulated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/imgextra/i3/O1CN01IisBcy1dNBIg16QFM_!!6000000003723-2-tps-1916-1070.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üå∞ Usage example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @alilc/lowcode-engine --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIPS: Only cdn import is supported, npm package is used to provide code hinting capabilities such as typings&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { init, skeleton } from &#39;@alilc/lowcode-engine&#39;;&#xA;&#xA;skeleton.add({&#xA;  area: &#39;topArea&#39;,&#xA;  type: &#39;Widget&#39;,&#xA;  name: &#39;logo&#39;,&#xA;  content: YourFantasticLogo,&#xA;  contentProps: {&#xA;    logo:&#xA;      &#39;https://img.alicdn.com/tfs/TB1_SocGkT2gK0jSZFkXXcIQFXa-66-66.png&#39;,&#xA;    href: &#39;/&#39;,&#xA;  },&#xA;  props: {&#xA;    align: &#39;left&#39;,&#xA;    width: 100,&#xA;  },&#xA;});&#xA;&#xA;init(document.getElementById(&#39;lce&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Engineering configuration:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;externals&#34;: {&#xA;    &#34;@alilc/lowcode-engine&#34;: &#34;var window.AliLowCodeEngine&#34;,&#xA;    &#34;@alilc/lowcode-engine-ext&#34;: &#34;var window.AliLowCodeEngineExt&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cdn optional method:&lt;/h3&gt; &#xA;&lt;h4&gt;Method 1: alifd cdn&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;https://alifd.alicdn.com/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js&#xA;&#xA;https://alifd.alicdn.com/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Method 2: uipaas cdn&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;https://uipaas-assets.com/prod/npm/@alilc/lowcode-engine/1.0.18/dist/js/engine-core.js&#xA;&#xA;https://uipaas-assets.com/prod/npm/@alilc/lowcode-react-simulator-renderer/1.0.18/dist/js/react-simulator-renderer.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Method 3: unpkg&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;https://unpkg.com/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js&#xA;&#xA;https://unpkg.com/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Method 4: jsdelivr&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;https://cdn.jsdelivr.net/npm/@alilc/lowcode-engine@1.0.18/dist/js/engine-core.js&#xA;&#xA;https://cdn.jsdelivr.net/npm/@alilc/lowcode-react-simulator-renderer@1.0.18/dist/js/react-simulator-renderer.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Method 5: Use your own cdn&lt;/h4&gt; &#xA;&lt;p&gt;Pass the files under packages/engine/dist and packages/react-simulator-renderer/dist in the source code to your cdn provider&lt;/p&gt; &#xA;&lt;h2&gt;üîó Related Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lowcode-engine.cn/&#34;&gt;Official website home page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lowcode-engine.cn/demo&#34;&gt;Demo Play Now&lt;/a&gt; | &lt;a href=&#34;https://github.com/alibaba/lowcode-demo&#34;&gt;Engine Demo Repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/lowcode-materials&#34;&gt;Official Materials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/lowcode-engine-ext&#34;&gt;official setter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/lowcode-plugins&#34;&gt;Official plugin (plugin)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lowcode-engine.cn/site/docs/guide/expand/editor/cli&#34;&gt;Ecological elements (materials, setters, plugins) toolchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lowcode-engine.cn/doc&#34;&gt;User Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lowcode-engine.cn/site/docs/api/&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/lowcode-workspace/awesome-lowcode-engine&#34;&gt;awesome-lowcode-engine&lt;/a&gt; page links to a repository which records all of the tools\materials\solutions that use or built for the lowcode-engine, PR is welcomed.&lt;/p&gt; &#xA;&lt;h2&gt;üíª Local debugging&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:alibaba/lowcode-engine.git&#xA;$ cd lowcode-engine&#xA;$ npm install&#xA;$ npm run setup&#xA;$ npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üì¢ npm access speed is slow, Alibaba employees can use tnpm, other students recommend using cnpm or specifying a mirror registry.&lt;/p&gt; &#xA; &lt;p&gt;üì¢ Windows environment must use &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL&lt;/a&gt;, other terminals are not guaranteed to work normally&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;After lowcode-engine is started, several umd files are provided, which can be debugged in combination with the &lt;a href=&#34;https://github.com/alibaba/lowcode-demo&#34;&gt;lowcode-demo&lt;/a&gt; project. Refer to the file proxy rules &lt;a href=&#34;https://lowcode-engine.cn/site/docs/participate/prepare&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Participation&lt;/h2&gt; &#xA;&lt;p&gt;Please read first:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lowcode-engine.cn/site/docs/participate/prepare&#34;&gt;How to configure the engine debugging environment? &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lowcode-engine.cn/site/docs/participate/flow&#34;&gt;About the R&amp;amp;D collaboration process of the engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lowcode-engine.cn/site/docs/participate/config&#34;&gt;Engineering Configuration of Engine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Strongly recommend reading &lt;a href=&#34;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&#34;&gt;&#34;The Wisdom of Asking Questions&#34;&lt;/a&gt;, [&#34;How to Ask Questions to the Open Source Community&#34;](https: //github.com/seajs/seajs/issues/545) and &lt;a href=&#34;http://www.chiark.greenend.org.uk/%7Esgtatham/bugs-cn.html&#34;&gt;How to Report Bugs Effectively&lt;/a&gt;, &lt;a href=&#34;https://zhuanlan.zhihu.com/p/25795393&#34;&gt; &#34;How to Submit Unanswerable Questions to Open Source Projects&#34;&lt;/a&gt;, better questions are easier to get help. (This paragraph refers to &lt;a href=&#34;https://github.com/ant-design/ant-design&#34;&gt;antd&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;About Pull Request:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;set the target branch to &lt;strong&gt;develop&lt;/strong&gt; other than &lt;strong&gt;main&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ù§Ô∏è Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to everyone who contributed to this project.&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/alibaba/lowcode-engine/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=alibaba/lowcode-engine&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moby/buildkit</title>
    <updated>2025-06-19T01:29:23Z</updated>
    <id>tag:github.com,2025-06-19:/moby/buildkit</id>
    <link href="https://github.com/moby/buildkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;concurrent, cache-efficient, and Dockerfile-agnostic builder toolkit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/gPEIEo1NzmDTUu2bEPsUboqmU&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/gPEIEo1NzmDTUu2bEPsUboqmU.png&#34; alt=&#34;asciicinema example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BuildKit &#xA; &lt;!-- omit in toc --&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/moby/buildkit/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/moby/buildkit.svg?style=flat-square&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/moby/buildkit/client/llb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-docs-007d9c?style=flat-square&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/moby/buildkit/actions?query=workflow%3Abuildkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/moby/buildkit/buildkit.yml?label=buildkit&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;CI BuildKit Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/moby/buildkit/actions?query=workflow%3Afrontend&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/moby/buildkit/frontend.yml?label=frontend&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;CI Frontend Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/moby/buildkit&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/moby/buildkit?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/moby/buildkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/moby/buildkit?logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic garbage collection&lt;/li&gt; &#xA; &lt;li&gt;Extendable frontend formats&lt;/li&gt; &#xA; &lt;li&gt;Concurrent dependency resolution&lt;/li&gt; &#xA; &lt;li&gt;Efficient instruction caching&lt;/li&gt; &#xA; &lt;li&gt;Build cache import/export&lt;/li&gt; &#xA; &lt;li&gt;Nested build job invocations&lt;/li&gt; &#xA; &lt;li&gt;Distributable workers&lt;/li&gt; &#xA; &lt;li&gt;Multiple output formats&lt;/li&gt; &#xA; &lt;li&gt;Pluggable architecture&lt;/li&gt; &#xA; &lt;li&gt;Execution without root privileges&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read the proposal from &lt;a href=&#34;https://github.com/moby/moby/issues/32925&#34;&gt;https://github.com/moby/moby/issues/32925&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Introductory blog post &lt;a href=&#34;https://blog.mobyproject.org/introducing-buildkit-17e056cc5317&#34;&gt;https://blog.mobyproject.org/introducing-buildkit-17e056cc5317&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;code&gt;#buildkit&lt;/code&gt; channel on &lt;a href=&#34;https://dockr.ly/comm-slack&#34;&gt;Docker Community Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you are visiting this repo for the usage of BuildKit-only Dockerfile features like &lt;code&gt;RUN --mount=type=(bind|cache|tmpfs|secret|ssh)&lt;/code&gt;, please refer to the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;code&gt;docker build&lt;/code&gt; &lt;a href=&#34;https://docs.docker.com/build/architecture/&#34;&gt;uses Buildx and BuildKit by default&lt;/a&gt; since Docker Engine 23.0. You don&#39;t need to read this document unless you want to use the full-featured standalone version of BuildKit.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#used-by&#34;&gt;Used by&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#quick-start&#34;&gt;Quick start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#linux-setup&#34;&gt;Linux Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#windows-setup&#34;&gt;Windows Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#macos-setup&#34;&gt;macOS Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#exploring-llb&#34;&gt;Exploring LLB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#exploring-dockerfiles&#34;&gt;Exploring Dockerfiles&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#building-a-dockerfile-with-buildctl&#34;&gt;Building a Dockerfile with &lt;code&gt;buildctl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#building-a-dockerfile-using-external-frontend&#34;&gt;Building a Dockerfile using external frontend&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#output&#34;&gt;Output&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#imageregistry&#34;&gt;Image/Registry&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#local-directory&#34;&gt;Local directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#docker-tarball&#34;&gt;Docker tarball&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#oci-tarball&#34;&gt;OCI tarball&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#containerd-image-store&#34;&gt;containerd image store&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#cache&#34;&gt;Cache&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#garbage-collection&#34;&gt;Garbage collection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#export-cache&#34;&gt;Export cache&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#inline-push-image-and-cache-together&#34;&gt;Inline (push image and cache together)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#registry-push-image-and-cache-separately&#34;&gt;Registry (push image and cache separately)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#local-directory-1&#34;&gt;Local directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#github-actions-cache-experimental&#34;&gt;GitHub Actions cache (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#s3-cache-experimental&#34;&gt;S3 cache (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#azure-blob-storage-cache-experimental&#34;&gt;Azure Blob Storage cache (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#consistent-hashing&#34;&gt;Consistent hashing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#metadata&#34;&gt;Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#systemd-socket-activation&#34;&gt;Systemd socket activation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#expose-buildkit-as-a-tcp-service&#34;&gt;Expose BuildKit as a TCP service&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#load-balancing&#34;&gt;Load balancing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#containerizing-buildkit&#34;&gt;Containerizing BuildKit&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#podman&#34;&gt;Podman&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#nerdctl&#34;&gt;Nerdctl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#kubernetes&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#daemonless&#34;&gt;Daemonless&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#opentelemetry-support&#34;&gt;OpenTelemetry support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#running-buildkit-without-root-privileges&#34;&gt;Running BuildKit without root privileges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#building-multi-platform-images&#34;&gt;Building multi-platform images&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#configuring-buildctl&#34;&gt;Configuring &lt;code&gt;buildctl&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#color-output-controls&#34;&gt;Color Output Controls&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#number-of-log-lines-for-active-steps-in-tty-mode&#34;&gt;Number of log lines (for active steps in tty mode)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Used by&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit is used by the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moby/moby/pull/37151&#34;&gt;Moby &amp;amp; Docker&lt;/a&gt; (&lt;code&gt;DOCKER_BUILDKIT=1 docker build&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/genuinetools/img&#34;&gt;img&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openfaas/openfaas-cloud&#34;&gt;OpenFaaS Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerbuilding/cbi&#34;&gt;container build interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;Tekton Pipelines&lt;/a&gt; (formerly &lt;a href=&#34;https://github.com/knative/build-templates&#34;&gt;Knative Build Templates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/distributed-containers-inc/sanic&#34;&gt;the Sanic build tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stellarproject/vab&#34;&gt;vab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/rio&#34;&gt;Rio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/kim&#34;&gt;kim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/pouch&#34;&gt;PouchContainer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/buildx&#34;&gt;Docker buildx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://okteto.com/&#34;&gt;Okteto Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladaionescu/earthly&#34;&gt;Earthly earthfiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gitpod-io/gitpod&#34;&gt;Gitpod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dagger.io&#34;&gt;Dagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorchord/envd/&#34;&gt;envd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://depot.dev&#34;&gt;Depot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://namespace.so&#34;&gt;Namespace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org&#34;&gt;Unikraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devzero.io&#34;&gt;DevZero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r2d4/dacc&#34;&gt;dacc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;‚Ñπ&lt;/span&gt; For Kubernetes deployments, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/kubernetes&#34;&gt;&lt;code&gt;examples/kubernetes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;BuildKit is composed of the &lt;code&gt;buildkitd&lt;/code&gt; daemon and the &lt;code&gt;buildctl&lt;/code&gt; client. While the &lt;code&gt;buildctl&lt;/code&gt; client is available for Linux, macOS, and Windows, the &lt;code&gt;buildkitd&lt;/code&gt; daemon is only available for Linux and *Windows currently.&lt;/p&gt; &#xA;&lt;p&gt;The latest binaries of BuildKit are available &lt;a href=&#34;https://github.com/moby/buildkit/releases&#34;&gt;here&lt;/a&gt; for Linux, macOS, and Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Setup&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;buildkitd&lt;/code&gt; daemon requires the following components to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt; or &lt;a href=&#34;https://github.com/containers/crun&#34;&gt;crun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/containerd&#34;&gt;containerd&lt;/a&gt; (if you want to use containerd worker)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Starting the &lt;code&gt;buildkitd&lt;/code&gt; daemon:&lt;/strong&gt; You need to run &lt;code&gt;buildkitd&lt;/code&gt; as the root user on the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo buildkitd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run &lt;code&gt;buildkitd&lt;/code&gt; as a non-root user, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The buildkitd daemon supports two worker backends: OCI (runc) and containerd.&lt;/p&gt; &#xA;&lt;p&gt;By default, the OCI (runc) worker is used. You can set &lt;code&gt;--oci-worker=false --containerd-worker=true&lt;/code&gt; to use the containerd worker.&lt;/p&gt; &#xA;&lt;p&gt;We are open to adding more backends.&lt;/p&gt; &#xA;&lt;p&gt;To start the buildkitd daemon using systemd socket activation, you can install the buildkit systemd unit files. See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#systemd-socket-activation&#34;&gt;Systemd socket activation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The buildkitd daemon listens gRPC API on &lt;code&gt;/run/buildkit/buildkitd.sock&lt;/code&gt; by default, but you can also use TCP sockets. See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#expose-buildkit-as-a-tcp-service&#34;&gt;Expose BuildKit as a TCP service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows Setup&lt;/h3&gt; &#xA;&lt;p&gt;See instructions and notes at &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/windows.md&#34;&gt;&lt;code&gt;docs/windows.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS Setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/buildkit&#34;&gt;Homebrew formula&lt;/a&gt; (unofficial) is available for macOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install buildkit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Homebrew formula does not contain the daemon (&lt;code&gt;buildkitd&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://lima-vm.io&#34;&gt;Lima&lt;/a&gt; can be used for launching the daemon inside a Linux VM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install lima&#xA;limactl start template://buildkit&#xA;export BUILDKIT_HOST=&#34;unix://$HOME/.lima/buildkit/sock/buildkitd.sock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;To build BuildKit from source, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/.github/CONTRIBUTING.md&#34;&gt;&lt;code&gt;.github/CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a &lt;code&gt;buildctl&lt;/code&gt; reference, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/reference/buildctl.md&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Exploring LLB&lt;/h3&gt; &#xA;&lt;p&gt;BuildKit builds are based on a binary intermediate format called LLB that is used for defining the dependency graph for processes running part of your build. tl;dr: LLB is to Dockerfile what LLVM IR is to C.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marshaled as Protobuf messages&lt;/li&gt; &#xA; &lt;li&gt;Concurrently executable&lt;/li&gt; &#xA; &lt;li&gt;Efficiently cacheable&lt;/li&gt; &#xA; &lt;li&gt;Vendor-neutral (i.e. non-Dockerfile languages can be easily implemented)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/solver/pb/ops.proto&#34;&gt;&lt;code&gt;solver/pb/ops.proto&lt;/code&gt;&lt;/a&gt; for the format definition, and see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/README.md&#34;&gt;&lt;code&gt;./examples/README.md&lt;/code&gt;&lt;/a&gt; for example LLB applications.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following high-level languages have been implemented for LLB:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dockerfile (See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#exploring-dockerfiles&#34;&gt;Exploring Dockerfiles&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tonistiigi/buildkit-pack&#34;&gt;Buildpacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matt-rickard.com/building-a-new-dockerfile-frontend/&#34;&gt;Mockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/po3rin/gockerfile&#34;&gt;Gockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/talos-systems/bldr/&#34;&gt;bldr (Pkgfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openllb/hlb&#34;&gt;HLB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/earthly/earthly&#34;&gt;Earthfile (Earthly)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denzp/cargo-wharf&#34;&gt;Cargo Wharf (Rust)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reproducible-containers/buildkit-nix&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cmdjulian/mopy&#34;&gt;mopy (Python)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorchord/envd/&#34;&gt;envd (starlark)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.wikimedia.org/repos/releng/blubber&#34;&gt;Blubber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vito/bass&#34;&gt;Bass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unikraft/kraftkit/tree/staging/tools/dockerfile-llb-frontend&#34;&gt;kraft.yaml (Unikraft)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r2d4/llb&#34;&gt;r2d4/llb (JSON Gateway)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marxarelli/masse&#34;&gt;Mass√©&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(open a PR to add your own language)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exploring Dockerfiles&lt;/h3&gt; &#xA;&lt;p&gt;Frontends are components that run inside BuildKit and convert any build definition to LLB. There is a special frontend called gateway (&lt;code&gt;gateway.v0&lt;/code&gt;) that allows using any image as a frontend.&lt;/p&gt; &#xA;&lt;p&gt;During development, Dockerfile frontend (&lt;code&gt;dockerfile.v0&lt;/code&gt;) is also part of the BuildKit repo. In the future, this will be moved out, and Dockerfiles can be built using an external image.&lt;/p&gt; &#xA;&lt;h4&gt;Building a Dockerfile with &lt;code&gt;buildctl&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build \&#xA;    --frontend=dockerfile.v0 \&#xA;    --local context=. \&#xA;    --local dockerfile=.&#xA;# or&#xA;buildctl build \&#xA;    --frontend=dockerfile.v0 \&#xA;    --local context=. \&#xA;    --local dockerfile=. \&#xA;    --opt target=foo \&#xA;    --opt build-arg:foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--local&lt;/code&gt; exposes local source files from client to the builder. &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;dockerfile&lt;/code&gt; are the names Dockerfile frontend looks for build context and Dockerfile location.&lt;/p&gt; &#xA;&lt;p&gt;If the Dockerfile has a different filename it can be specified with &lt;code&gt;--opt filename=./Dockerfile-alternative&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Building a Dockerfile using external frontend&lt;/h4&gt; &#xA;&lt;p&gt;External versions of the Dockerfile frontend are pushed to &lt;a href=&#34;https://hub.docker.com/r/docker/dockerfile-upstream&#34;&gt;https://hub.docker.com/r/docker/dockerfile-upstream&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/docker/dockerfile&#34;&gt;https://hub.docker.com/r/docker/dockerfile&lt;/a&gt; and can be used with the gateway frontend. The source for the external frontend is currently located in &lt;code&gt;./frontend/dockerfile/cmd/dockerfile-frontend&lt;/code&gt; but will move out of this repository in the future (&lt;a href=&#34;https://github.com/moby/buildkit/issues/163&#34;&gt;#163&lt;/a&gt;). For automatic build from master branch of this repository &lt;code&gt;docker/dockerfile-upstream:master&lt;/code&gt; or &lt;code&gt;docker/dockerfile-upstream:master-labs&lt;/code&gt; image can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build \&#xA;    --frontend gateway.v0 \&#xA;    --opt source=docker/dockerfile \&#xA;    --local context=. \&#xA;    --local dockerfile=.&#xA;buildctl build \&#xA;    --frontend gateway.v0 \&#xA;    --opt source=docker/dockerfile \&#xA;    --opt context=https://github.com/moby/moby.git \&#xA;    --opt build-arg:APT_MIRROR=cdn-fastly.deb.debian.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;By default, the build result and intermediate cache will only remain internally in BuildKit. An output needs to be specified to retrieve the result.&lt;/p&gt; &#xA;&lt;h4&gt;Image/Registry&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=image,name=docker.io/username/image,push=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To export the image to multiple registries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=image,\&#34;name=docker.io/username/image,docker.io/username2/image2\&#34;,push=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To export the cache embed with the image and pushing them to registry together, type &lt;code&gt;registry&lt;/code&gt; is required to import the cache, you should specify &lt;code&gt;--export-cache type=inline&lt;/code&gt; and &lt;code&gt;--import-cache type=registry,ref=...&lt;/code&gt;. To export the cache to a local directly, you should specify &lt;code&gt;--export-cache type=local&lt;/code&gt;. Details in &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#export-cache&#34;&gt;Export cache&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ...\&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=inline \&#xA;  --import-cache type=registry,ref=docker.io/username/image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keys supported by image output:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;value&amp;gt;&lt;/code&gt;: specify image name(s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push=true&lt;/code&gt;: push after creating the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push-by-digest=true&lt;/code&gt;: push unnamed image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;registry.insecure=true&lt;/code&gt;: push to insecure HTTP registry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-mediatypes=true&lt;/code&gt;: use OCI mediatypes in configuration JSON instead of Docker&#39;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-artifact=false&lt;/code&gt;: use OCI artifact format for attestations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unpack=true&lt;/code&gt;: unpack image after creation (for use with containerd)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dangling-name-prefix=&amp;lt;value&amp;gt;&lt;/code&gt;: name image with &lt;code&gt;prefix@&amp;lt;digest&amp;gt;&lt;/code&gt;, used for anonymous images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name-canonical=true&lt;/code&gt;: add additional canonical name &lt;code&gt;name@&amp;lt;digest&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression=&amp;lt;uncompressed|gzip|estargz|zstd&amp;gt;&lt;/code&gt;: choose compression type for layers newly created and cached, gzip is default value. estargz should be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression-level=&amp;lt;value&amp;gt;&lt;/code&gt;: compression level for gzip, estargz (0-9) and zstd (0-22)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rewrite-timestamp=true&lt;/code&gt;: rewrite the file timestamps to the &lt;code&gt;SOURCE_DATE_EPOCH&lt;/code&gt; value. See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/build-repro.md&#34;&gt;&lt;code&gt;docs/build-repro.md&lt;/code&gt;&lt;/a&gt; for how to specify the &lt;code&gt;SOURCE_DATE_EPOCH&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-compression=true&lt;/code&gt;: forcefully apply &lt;code&gt;compression&lt;/code&gt; option to all layers (including already existing layers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store=true&lt;/code&gt;: store the result images to the worker&#39;s (e.g. containerd) image store as well as ensures that the image has all blobs in the content store (default &lt;code&gt;true&lt;/code&gt;). Ignored if the worker doesn&#39;t have image store (e.g. OCI worker).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;annotation.&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;: attach an annotation with the respective &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to the built image &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using the extended syntaxes, &lt;code&gt;annotation-&amp;lt;type&amp;gt;.&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;annotation[&amp;lt;platform&amp;gt;].&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; and both combined with &lt;code&gt;annotation-&amp;lt;type&amp;gt;[&amp;lt;platform&amp;gt;].&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;, allows configuring exactly where to attach the annotation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; specifies what object to attach to, and can be any of &lt;code&gt;manifest&lt;/code&gt; (the default), &lt;code&gt;manifest-descriptor&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;index-descriptor&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; specifies which objects to attach to (by default, all), and is the same key passed into the &lt;code&gt;platform&lt;/code&gt; opt, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/multi-platform.md&#34;&gt;&lt;code&gt;docs/multi-platform.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/annotations.md&#34;&gt;&lt;code&gt;docs/annotations.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If credentials are required, &lt;code&gt;buildctl&lt;/code&gt; will attempt to read Docker configuration file &lt;code&gt;$DOCKER_CONFIG/config.json&lt;/code&gt;. &lt;code&gt;$DOCKER_CONFIG&lt;/code&gt; defaults to &lt;code&gt;~/.docker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Local directory&lt;/h4&gt; &#xA;&lt;p&gt;The local client will copy the files directly to the client. This is useful if BuildKit is being used for building something else than container images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=local,dest=path/to/output-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To export specific files use multi-stage builds with a scratch stage and copy the needed files into that stage with &lt;code&gt;COPY --from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;...&#xA;FROM scratch as testresult&#xA;&#xA;COPY --from=builder /usr/src/app/testresult.xml .&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --opt target=testresult --output type=local,dest=path/to/output-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/multi-platform.md&#34;&gt;multi-platform build&lt;/a&gt;, a subfolder matching each target platform will be created in the destination directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM busybox AS build&#xA;ARG TARGETOS&#xA;ARG TARGETARCH&#xA;RUN mkdir /out &amp;amp;&amp;amp; echo foo &amp;gt; /out/hello-$TARGETOS-$TARGETARCH&#xA;&#xA;FROM scratch&#xA;COPY --from=build /out /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ buildctl build \&#xA;  --frontend dockerfile.v0 \&#xA;  --opt platform=linux/amd64,linux/arm64 \&#xA;  --output type=local,dest=./bin/release&#xA;&#xA;$ tree ./bin&#xA;./bin/&#xA;‚îî‚îÄ‚îÄ release&#xA;    ‚îú‚îÄ‚îÄ linux_amd64&#xA;    ‚îÇ   ‚îî‚îÄ‚îÄ hello-linux-amd64&#xA;    ‚îî‚îÄ‚îÄ linux_arm64&#xA;        ‚îî‚îÄ‚îÄ hello-linux-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;platform-split=false&lt;/code&gt; to merge files from all platforms together into same directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ buildctl build \&#xA;  --frontend dockerfile.v0 \&#xA;  --opt platform=linux/amd64,linux/arm64 \&#xA;  --output type=local,dest=./bin/release,platform-split=false&#xA;&#xA;$ tree ./bin&#xA;./bin/&#xA;‚îî‚îÄ‚îÄ release&#xA;    ‚îú‚îÄ‚îÄ hello-linux-amd64&#xA;    ‚îî‚îÄ‚îÄ hello-linux-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tar exporter is similar to local exporter but transfers the files through a tarball.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=tar,dest=out.tar&#xA;buildctl build ... --output type=tar &amp;gt; out.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker tarball&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# exported tarball is also compatible with OCI spec&#xA;buildctl build ... --output type=docker,name=myimage | docker load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OCI tarball&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=oci,dest=path/to/output.tar&#xA;buildctl build ... --output type=oci &amp;gt; output.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;containerd image store&lt;/h4&gt; &#xA;&lt;p&gt;The containerd worker needs to be used&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=image,name=docker.io/username/image&#xA;ctr --namespace=buildkit images ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the containerd namespace, you need to change &lt;code&gt;worker.containerd.namespace&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/buildkitd.toml.md&#34;&gt;&lt;code&gt;/etc/buildkit/buildkitd.toml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cache&lt;/h2&gt; &#xA;&lt;p&gt;To show local build cache (&lt;code&gt;/var/lib/buildkit&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl du -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To prune local build cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl prune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Garbage collection&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/buildkitd.toml.md&#34;&gt;&lt;code&gt;./docs/buildkitd.toml.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Export cache&lt;/h3&gt; &#xA;&lt;p&gt;BuildKit supports the following cache exporters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;inline&lt;/code&gt;: embed the cache into the image, and push them to the registry together&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;registry&lt;/code&gt;: push the image and the cache separately&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local&lt;/code&gt;: export to a local directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gha&lt;/code&gt;: export to GitHub Actions cache&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In most case you want to use the &lt;code&gt;inline&lt;/code&gt; cache exporter. However, note that the &lt;code&gt;inline&lt;/code&gt; cache exporter only supports &lt;code&gt;min&lt;/code&gt; cache mode. To enable &lt;code&gt;max&lt;/code&gt; cache mode, push the image and the cache separately by using &lt;code&gt;registry&lt;/code&gt; cache exporter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;registry&lt;/code&gt; exporters both store the cache in the registry. For importing the cache, &lt;code&gt;type=registry&lt;/code&gt; is sufficient for both, as specifying the cache format is not necessary.&lt;/p&gt; &#xA;&lt;h4&gt;Inline (push image and cache together)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=inline \&#xA;  --import-cache type=registry,ref=docker.io/username/image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the inline cache is not imported unless &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#registry-push-image-and-cache-separately&#34;&gt;&lt;code&gt;--import-cache type=registry,ref=...&lt;/code&gt;&lt;/a&gt; is provided.&lt;/p&gt; &#xA;&lt;p&gt;Inline cache embeds cache metadata into the image config. The layers in the image will be left untouched compared to the image with no cache information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚Ñπ&lt;/span&gt; Docker-integrated BuildKit (&lt;code&gt;DOCKER_BUILDKIT=1 docker build&lt;/code&gt;) and &lt;code&gt;docker buildx&lt;/code&gt;requires &lt;code&gt;--build-arg BUILDKIT_INLINE_CACHE=1&lt;/code&gt; to be specified to enable the &lt;code&gt;inline&lt;/code&gt; cache exporter. However, the standalone &lt;code&gt;buildctl&lt;/code&gt; does NOT require &lt;code&gt;--opt build-arg:BUILDKIT_INLINE_CACHE=1&lt;/code&gt; and the build-arg is simply ignored.&lt;/p&gt; &#xA;&lt;h4&gt;Registry (push image and cache separately)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=localhost:5000/myrepo:image,push=true \&#xA;  --export-cache type=registry,ref=localhost:5000/myrepo:buildcache \&#xA;  --import-cache type=registry,ref=localhost:5000/myrepo:buildcache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=registry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ref=&amp;lt;ref&amp;gt;&lt;/code&gt;: specify repository reference to store cache, e.g. &lt;code&gt;docker.io/user/image:tag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image-manifest=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to export cache manifest as an OCI-compatible image manifest rather than a manifest list/index (default: &lt;code&gt;true&lt;/code&gt; since BuildKit &lt;code&gt;v0.21&lt;/code&gt;, must be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-mediatypes=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to use OCI mediatypes in exported manifests (default: &lt;code&gt;true&lt;/code&gt;, since BuildKit &lt;code&gt;v0.8&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression=&amp;lt;uncompressed|gzip|estargz|zstd&amp;gt;&lt;/code&gt;: choose compression type for layers newly created and cached, gzip is default value. estargz and zstd should be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression-level=&amp;lt;value&amp;gt;&lt;/code&gt;: choose compression level for gzip, estargz (0-9) and zstd (0-22)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-compression=true&lt;/code&gt;: forcibly apply &lt;code&gt;compression&lt;/code&gt; option to all layers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=registry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ref=&amp;lt;ref&amp;gt;&lt;/code&gt;: specify repository reference to retrieve cache from, e.g. &lt;code&gt;docker.io/user/image:tag&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Local directory&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --export-cache type=local,dest=path/to/output-dir&#xA;buildctl build ... --import-cache type=local,src=path/to/input-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The directory layout conforms to OCI Image Spec v1.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dest=&amp;lt;path&amp;gt;&lt;/code&gt;: destination directory for cache exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&amp;lt;tag&amp;gt;&lt;/code&gt;: specify custom tag of image to write to local index (default: &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image-manifest=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to export cache manifest as an OCI-compatible image manifest rather than a manifest list/index (default: &lt;code&gt;true&lt;/code&gt; since BuildKit &lt;code&gt;v0.21&lt;/code&gt;, must be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-mediatypes=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to use OCI mediatypes in exported manifests (default &lt;code&gt;true&lt;/code&gt;, since BuildKit &lt;code&gt;v0.8&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression=&amp;lt;uncompressed|gzip|estargz|zstd&amp;gt;&lt;/code&gt;: choose compression type for layers newly created and cached, gzip is default value. estargz and zstd should be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression-level=&amp;lt;value&amp;gt;&lt;/code&gt;: compression level for gzip, estargz (0-9) and zstd (0-22)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-compression=true&lt;/code&gt;: forcibly apply &lt;code&gt;compression&lt;/code&gt; option to all layers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src=&amp;lt;path&amp;gt;&lt;/code&gt;: source directory for cache importer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&amp;lt;tag&amp;gt;&lt;/code&gt;: specify custom tag of image to read from local index (default: &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;digest=sha256:&amp;lt;sha256digest&amp;gt;&lt;/code&gt;: specify explicit digest of the manifest list to import&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GitHub Actions cache (experimental)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=gha \&#xA;  --import-cache type=gha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GitHub Actions cache saves both cache metadata and layers to GitHub&#39;s Cache service. This cache currently has a &lt;a href=&#34;https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy&#34;&gt;size limit of 10GB&lt;/a&gt; that is shared across different caches in the repo. If you exceed this limit, GitHub will save your cache but will begin evicting caches until the total size is less than 10 GB. Recycling caches too often can result in slower runtimes overall.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to using &lt;a href=&#34;https://github.com/actions/cache&#34;&gt;actions/cache&lt;/a&gt;, caches are &lt;a href=&#34;https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache&#34;&gt;scoped by branch&lt;/a&gt;, with the default and target branches being available to every branch.&lt;/p&gt; &#xA;&lt;p&gt;Following attributes are required to authenticate against the &lt;a href=&#34;https://github.com/tonistiigi/go-actions-cache/raw/master/api.md#authentication&#34;&gt;GitHub Actions Cache service API&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt;: Cache server URL (default &lt;code&gt;$ACTIONS_CACHE_URL&lt;/code&gt; or fallback to &lt;code&gt;$ACTIONS_RESULTS_URL&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url_v2&lt;/code&gt;: Cache v2 server URL if &lt;code&gt;$ACTIONS_CACHE_SERVICE_V2&lt;/code&gt; set on the runner (default &lt;code&gt;$ACTIONS_RESULTS_URL&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;token&lt;/code&gt;: Access token (default &lt;code&gt;$ACTIONS_RUNTIME_TOKEN&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;‚Ñπ&lt;/span&gt; This type of cache can be used with &lt;a href=&#34;https://github.com/docker/build-push-action&#34;&gt;Docker Build Push Action&lt;/a&gt; where &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt; will be automatically set. To use this backend in an inline &lt;code&gt;run&lt;/code&gt; step, you have to include &lt;a href=&#34;https://github.com/crazy-max/ghaction-github-runtime&#34;&gt;crazy-max/ghaction-github-runtime&lt;/a&gt; in your workflow to expose the runtime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=gha&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scope=&amp;lt;scope&amp;gt;&lt;/code&gt;: which scope cache object belongs to (default &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout=&amp;lt;duration&amp;gt;&lt;/code&gt;: sets the timeout duration for cache export (default: &lt;code&gt;10m&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=gha&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scope=&amp;lt;scope&amp;gt;&lt;/code&gt;: which scope cache object belongs to (default &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout=&amp;lt;duration&amp;gt;&lt;/code&gt;: sets the timeout duration for cache import (default: &lt;code&gt;10m&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;S3 cache (experimental)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=s3,region=eu-west-1,bucket=my_bucket,name=my_image \&#xA;  --import-cache type=s3,region=eu-west-1,bucket=my_bucket,name=my_image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following attributes are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bucket&lt;/code&gt;: AWS S3 bucket (default: &lt;code&gt;$AWS_BUCKET&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region&lt;/code&gt;: AWS region (default: &lt;code&gt;$AWS_REGION&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Storage locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blobs: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;blobs_prefix&amp;gt;/&amp;lt;sha256&amp;gt;&lt;/code&gt;, default: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/blobs/&amp;lt;sha256&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;manifests: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;manifests_prefix&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt;, default: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/manifests/&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;S3 configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix&lt;/code&gt;: global prefix to store / read blobs on s3 (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix&lt;/code&gt;: global prefix to store / read manifests on s3 (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;endpoint_url&lt;/code&gt;: specify a specific S3 endpoint (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_path_style&lt;/code&gt;: if set to &lt;code&gt;true&lt;/code&gt;, put the bucket name in the URL instead of in the hostname (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AWS Authentication:&lt;/p&gt; &#xA;&lt;p&gt;BuildKit relies on the [AWS Go SDK](&lt;a href=&#34;https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html%5D(https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/config#EnvConfig)&#34;&gt;https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html](https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/config#EnvConfig)&lt;/a&gt;. This means that all standard authentication methods through environment variables or config files are supported. This is especially true for AWS EC2 IAM Profile and AWS Web Identity Token (IAM roles in Kubernetes).&lt;/p&gt; &#xA;&lt;p&gt;Beware, these configurations must be available at buildkit daemon level, not at client level.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following attributes can be used to forward static credentials from a buildkit client to the daemon (buildx for example). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;access_key_id&lt;/code&gt;: Access Key ID&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;secret_access_key&lt;/code&gt;: Secret Access Key&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;session_token&lt;/code&gt;: Session Token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=s3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on s3 (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: specify name of the manifest to use (default &lt;code&gt;buildkit&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multiple manifest names can be specified at the same time, separated by &lt;code&gt;;&lt;/code&gt;. The standard use case is to use the git sha1 as name, and the branch name as duplicate, and load both with 2 &lt;code&gt;import-cache&lt;/code&gt; commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;touch_refresh=24h&lt;/code&gt;: Instead of being uploaded again when not changed, blobs files will be &#34;touched&#34; on s3 every &lt;code&gt;touch_refresh&lt;/code&gt;, default is 24h. Due to this, an expiration policy can be set on the S3 bucket to cleanup useless files automatically. Manifests files are systematically rewritten, there is no need to touch them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;upload_parallelism=4&lt;/code&gt;: This parameter changes the number of layers uploaded to s3 in parallel. Each individual layer is uploaded with 5 threads, using the Upload manager provided by the AWS SDK.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=s3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on s3 (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read blobs on s3 (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read manifests on s3 (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: name of the manifest to use (default &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Azure Blob Storage cache (experimental)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=azblob,account_url=https://myaccount.blob.core.windows.net,name=my_image \&#xA;  --import-cache type=azblob,account_url=https://myaccount.blob.core.windows.net,name=my_image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following attributes are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;account_url&lt;/code&gt;: The Azure Blob Storage account URL (default: &lt;code&gt;$BUILDKIT_AZURE_STORAGE_ACCOUNT_URL&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Storage locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blobs: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;blobs_prefix&amp;gt;/&amp;lt;sha256&amp;gt;&lt;/code&gt;, default: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/blobs/&amp;lt;sha256&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;manifests: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;manifests_prefix&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt;, default: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/manifests/&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Azure Blob Storage configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;container&lt;/code&gt;: The Azure Blob Storage container name (default: &lt;code&gt;buildkit-cache&lt;/code&gt; or &lt;code&gt;$BUILDKIT_AZURE_STORAGE_CONTAINER&lt;/code&gt; if set)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix&lt;/code&gt;: Global prefix to store / read blobs on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix&lt;/code&gt;: Global prefix to store / read blobs on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Azure Blob Storage authentication:&lt;/p&gt; &#xA;&lt;p&gt;There are 2 options supported for Azure Blob Storage authentication:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any system using environment variables supported by the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication&#34;&gt;Azure SDK for Go&lt;/a&gt;. The configuration must be available for the buildkit daemon, not for the client.&lt;/li&gt; &#xA; &lt;li&gt;Secret Access Key, using the &lt;code&gt;secret_access_key&lt;/code&gt; attribute to specify the primary or secondary account key for your Azure Blob Storage account. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage&#34;&gt;Azure Blob Storage account keys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Account name can also be specified with &lt;code&gt;account_name&lt;/code&gt; attribute (or &lt;code&gt;$BUILDKIT_AZURE_STORAGE_ACCOUNT_NAME&lt;/code&gt;) if it is not part of the account URL host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=azblob&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: specify name of the manifest to use (default: &lt;code&gt;buildkit&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multiple manifest names can be specified at the same time, separated by &lt;code&gt;;&lt;/code&gt;. The standard use case is to use the git sha1 as name, and the branch name as duplicate, and load both with 2 &lt;code&gt;import-cache&lt;/code&gt; commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=azblob&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read blobs on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read manifests on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: name of the manifest to use (default: &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Consistent hashing&lt;/h3&gt; &#xA;&lt;p&gt;If you have multiple BuildKit daemon instances, but you don&#39;t want to use registry for sharing cache across the cluster, consider client-side load balancing using consistent hashing.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/kubernetes/consistenthash&#34;&gt;&lt;code&gt;./examples/kubernetes/consistenthash&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;To output build metadata such as the image digest, pass the &lt;code&gt;--metadata-file&lt;/code&gt; flag. The metadata will be written as a JSON object to the specified file. The directory of the specified file must already exist and be writable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --metadata-file metadata.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jq &#39;.&#39; metadata.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;containerimage.config.digest&#34;: &#34;sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66&#34;,&#xA;  &#34;containerimage.descriptor&#34;: {&#xA;    &#34;annotations&#34;: {&#xA;      &#34;config.digest&#34;: &#34;sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66&#34;,&#xA;      &#34;org.opencontainers.image.created&#34;: &#34;2022-02-08T21:28:03Z&#34;&#xA;    },&#xA;    &#34;digest&#34;: &#34;sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3&#34;,&#xA;    &#34;mediaType&#34;: &#34;application/vnd.oci.image.manifest.v1+json&#34;,&#xA;    &#34;size&#34;: 506&#xA;  },&#xA;  &#34;containerimage.digest&#34;: &#34;sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Systemd socket activation&lt;/h2&gt; &#xA;&lt;p&gt;On Systemd based systems, you can communicate with the daemon via &lt;a href=&#34;http://0pointer.de/blog/projects/socket-activation.html&#34;&gt;Systemd socket activation&lt;/a&gt;, use &lt;code&gt;buildkitd --addr fd://&lt;/code&gt;. You can find examples of using Systemd socket activation with BuildKit and Systemd in &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/systemd&#34;&gt;&lt;code&gt;./examples/systemd&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Expose BuildKit as a TCP service&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;buildkitd&lt;/code&gt; daemon can listen the gRPC API on a TCP socket.&lt;/p&gt; &#xA;&lt;p&gt;It is highly recommended to create TLS certificates for both the daemon and the client (mTLS). Enabling TCP without mTLS is dangerous because the executor containers (aka Dockerfile &lt;code&gt;RUN&lt;/code&gt; containers) can call BuildKit API as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildkitd \&#xA;  --addr tcp://0.0.0.0:1234 \&#xA;  --tlscacert /path/to/ca.pem \&#xA;  --tlscert /path/to/cert.pem \&#xA;  --tlskey /path/to/key.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl \&#xA;  --addr tcp://example.com:1234 \&#xA;  --tlscacert /path/to/ca.pem \&#xA;  --tlscert /path/to/clientcert.pem \&#xA;  --tlskey /path/to/clientkey.pem \&#xA;  build ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load balancing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;buildctl build&lt;/code&gt; can be called against randomly load balanced &lt;code&gt;buildkitd&lt;/code&gt; daemons.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#consistent-hashing&#34;&gt;Consistent hashing&lt;/a&gt; for client-side load balancing.&lt;/p&gt; &#xA;&lt;h2&gt;Containerizing BuildKit&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit can also be used by running the &lt;code&gt;buildkitd&lt;/code&gt; daemon inside a Docker container and accessing it remotely.&lt;/p&gt; &#xA;&lt;p&gt;We provide the container images as &lt;a href=&#34;https://hub.docker.com/r/moby/buildkit/tags/&#34;&gt;&lt;code&gt;moby/buildkit&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:latest&lt;/code&gt;: built from the latest regular &lt;a href=&#34;https://github.com/moby/buildkit/releases&#34;&gt;release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:rootless&lt;/code&gt;: same as &lt;code&gt;latest&lt;/code&gt; but runs as an unprivileged user, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:master&lt;/code&gt;: built from the master branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:master-rootless&lt;/code&gt;: same as master but runs as an unprivileged user, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run daemon in a container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name buildkitd --privileged moby/buildkit:latest&#xA;export BUILDKIT_HOST=docker-container://buildkitd&#xA;buildctl build --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Podman&lt;/h3&gt; &#xA;&lt;p&gt;To connect to a BuildKit daemon running in a Podman container, use &lt;code&gt;podman-container://&lt;/code&gt; instead of &lt;code&gt;docker-container://&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run -d --name buildkitd --privileged moby/buildkit:latest&#xA;buildctl --addr=podman-container://buildkitd build --frontend dockerfile.v0 --local context=. --local dockerfile=. --output type=oci | podman load foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; is not required.&lt;/p&gt; &#xA;&lt;h3&gt;Nerdctl&lt;/h3&gt; &#xA;&lt;p&gt;To connect to a BuildKit daemon running in a Nerdctl container, use &lt;code&gt;nerdctl-container://&lt;/code&gt; instead of &lt;code&gt;docker-container://&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nerdctl run -d --name buildkitd --privileged moby/buildkit:latest&#xA;buildctl --addr=nerdctl-container://buildkitd build --frontend dockerfile.v0 --local context=. --local dockerfile=. --output type=oci | nerdctl load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; is not required.&lt;/p&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;For Kubernetes deployments, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/kubernetes&#34;&gt;&lt;code&gt;examples/kubernetes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Daemonless&lt;/h3&gt; &#xA;&lt;p&gt;To run the client and an ephemeral daemon in a single container (&#34;daemonless mode&#34;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;    -it \&#xA;    --rm \&#xA;    --privileged \&#xA;    -v /path/to/dir:/tmp/work \&#xA;    --entrypoint buildctl-daemonless.sh \&#xA;    moby/buildkit:master \&#xA;        build \&#xA;        --frontend dockerfile.v0 \&#xA;        --local context=/tmp/work \&#xA;        --local dockerfile=/tmp/work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;    -it \&#xA;    --rm \&#xA;    --security-opt seccomp=unconfined \&#xA;    --security-opt apparmor=unconfined \&#xA;    -e BUILDKITD_FLAGS=--oci-worker-no-process-sandbox \&#xA;    -v /path/to/dir:/tmp/work \&#xA;    --entrypoint buildctl-daemonless.sh \&#xA;    moby/buildkit:master-rootless \&#xA;        build \&#xA;        --frontend \&#xA;        dockerfile.v0 \&#xA;        --local context=/tmp/work \&#xA;        --local dockerfile=/tmp/work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OpenTelemetry support&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit supports &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; for buildkitd gRPC API and buildctl commands. To capture the trace to &lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;Jaeger&lt;/a&gt;, set &lt;code&gt;JAEGER_TRACE&lt;/code&gt; environment variable to the collection address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p6831:6831/udp -p16686:16686 jaegertracing/all-in-one:latest&#xA;export JAEGER_TRACE=0.0.0.0:6831&#xA;# restart buildkitd and buildctl so they know JAEGER_TRACE&#xA;# any buildctl command should be traced to http://127.0.0.1:16686/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;On Windows, if you are running Jaeger outside of a container, &lt;a href=&#34;https://www.jaegertracing.io/docs/1.57/getting-started/#all-in-one&#34;&gt;&lt;code&gt;jaeger-all-in-one.exe&lt;/code&gt;&lt;/a&gt;, set the environment variable &lt;code&gt;setx -m JAEGER_TRACE &#34;0.0.0.0:6831&#34;&lt;/code&gt;, restart &lt;code&gt;buildkitd&lt;/code&gt; in a new terminal and the traces will be collected automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running BuildKit without root privileges&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building multi-platform images&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/multi-platform.md&#34;&gt;&lt;code&gt;docs/multi-platform.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring &lt;code&gt;buildctl&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Color Output Controls&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;buildctl&lt;/code&gt; has support for modifying the colors that are used to output information to the terminal. You can set the environment variable &lt;code&gt;BUILDKIT_COLORS&lt;/code&gt; to something like &lt;code&gt;run=green:warning=yellow:error=red:cancel=255,165,0&lt;/code&gt; to set the colors that you would like to use. Setting &lt;code&gt;NO_COLOR&lt;/code&gt; to anything will disable any colorized output as recommended by &lt;a href=&#34;https://no-color.org/&#34;&gt;no-color.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parsing errors will be reported but ignored. This will result in default color values being used where needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moby/buildkit/raw/master/util/progress/progressui/colors.go&#34;&gt;The list of pre-defined colors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Number of log lines (for active steps in tty mode)&lt;/h4&gt; &#xA;&lt;p&gt;You can change how many log lines are visible for active steps in tty mode by setting &lt;code&gt;BUILDKIT_TTY_LOG_LINES&lt;/code&gt; to a number (default: 6).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute to BuildKit? Awesome! You can find information about contributing to this project in the &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>