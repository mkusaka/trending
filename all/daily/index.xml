<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-03T01:30:02Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zlib-searcher/zlib-searcher</title>
    <updated>2023-01-03T01:30:02Z</updated>
    <id>tag:github.com,2023-01-03:/zlib-searcher/zlib-searcher</id>
    <link href="https://github.com/zlib-searcher/zlib-searcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;search zlib/libgen index to get ipfs_cid.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zlib(libgen) searcher&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zlib-searcher/zlib-searcher&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/zlib-searcher/zlib-searcher&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/zlib-searcher/zlib-searcher&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/zlib-searcher/zlib-searcher&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/zlib-searcher/zlib-searcher&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search &lt;code&gt;zlib&lt;/code&gt;/&lt;code&gt;libgen&lt;/code&gt; index to get &lt;code&gt;ipfs_cid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t save and provide files, we provide search.&lt;/p&gt; &#xA;&lt;p&gt;I hope everyone have a copy of the index locally, so that no need to rely on any centralized service.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy with Docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/zlib-searcher/zlib-searcher.git &amp;amp;&amp;amp; cd zlib-searcher&#xA;wget https://github.com/zlib-searcher/zlib-searcher/releases/download/0.6.0/index_0.6.zip &amp;amp;&amp;amp; unzip index_0.6.zip&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now &lt;code&gt;zlib-searcher&lt;/code&gt; it will listen to &lt;code&gt;0.0.0.0:7070&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Download the pre-compiled binary from &lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/releases&#34;&gt;Release&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;Or you can compile by yourself. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/zlib-searcher/zlib-searcher/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;2. Download the &lt;code&gt;index&lt;/code&gt; file that has been created.&lt;/h3&gt; &#xA;&lt;p&gt;We will give the corresponding &lt;code&gt;index&lt;/code&gt; download links for each version in the release page.&lt;/p&gt; &#xA;&lt;p&gt;Or you can make your own via &lt;code&gt;zlib-searcher index&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extract the &lt;code&gt;index&lt;/code&gt; folder to the same level as the program, it should look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zlib_searcher_dir&#xA;├── index&#xA;│&amp;nbsp;&amp;nbsp; ├── some index files...&#xA;│&amp;nbsp;&amp;nbsp; └── meta.json&#xA;└── zlib-searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Run &lt;code&gt;zlib-searcher run&lt;/code&gt;, it will listen to &lt;code&gt;127.0.0.1:7070&lt;/code&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;Access &lt;a href=&#34;http://127.0.0.1:7070/&#34;&gt;http://127.0.0.1:7070/&lt;/a&gt; to use webui, or you can use the original api.&lt;/p&gt; &#xA;&lt;h4&gt;original search api&lt;/h4&gt; &#xA;&lt;p&gt;You can search by the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;title&lt;/li&gt; &#xA; &lt;li&gt;author&lt;/li&gt; &#xA; &lt;li&gt;publisher&lt;/li&gt; &#xA; &lt;li&gt;extension&lt;/li&gt; &#xA; &lt;li&gt;language&lt;/li&gt; &#xA; &lt;li&gt;isbn&lt;/li&gt; &#xA; &lt;li&gt;zlib_id&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=余华&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=title:机器学习 extension:azw3 publisher:清华&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=zlib_id:18557063&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://127.0.0.1:7070/search?limit=30&amp;amp;query=isbn:9787302423287&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;1. Build &lt;code&gt;zlib-searcher&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;First build frontend&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make frontend_preinstall frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build zlib-searcher&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TARGET=release make&#xA;&#xA;# move the compiled binary to the project root directory&#xA;mv target/release/zlib-searcher .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Build &lt;code&gt;index&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;code&gt;zlib_index_books.csv.zip&lt;/code&gt; and &lt;code&gt;libgen_index_books.csv.zip&lt;/code&gt; and extract the &lt;code&gt;csv&lt;/code&gt; files to the project root directory.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;zlib-searcher index&lt;/code&gt;. You may need to &lt;code&gt;rm index/*&lt;/code&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;If you have other csv files, you can run &lt;code&gt;zlib-searcher index -f *.csv&lt;/code&gt; to index them.&lt;/p&gt; &#xA;&lt;p&gt;The finally folder structure should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zlib_searcher_dir // in the example above, it is project root directory.&#xA;├── index&#xA;│&amp;nbsp;&amp;nbsp; ├── some index files...&#xA;│&amp;nbsp;&amp;nbsp; └── meta.json&#xA;└── zlib-searcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raw data&lt;/h2&gt; &#xA;&lt;p&gt;We downloaded &lt;code&gt;libgen&lt;/code&gt; sql and &lt;code&gt;zlib&lt;/code&gt; sql and exported the necessary data from them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;id, title, author, publisher, extension, filesize, language, year, pages, isbn, ipfs_cid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This raw data is used to generate our &lt;code&gt;index&lt;/code&gt;, you can download the raw data from here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/releases/download/0.4.0/zlib_index_books.csv.zip&#34;&gt;zlib_index_books.csv.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/releases/download/0.4.0/libgen_index_books.csv.zip&#34;&gt;libgen_index_books.csv.zip&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;zlib-searcher&lt;/strong&gt; © &lt;a href=&#34;https://github.com/zlib-searcher/zlib-searcher/graphs/contributors&#34;&gt;zlib-searcher&#39;s authors&lt;/a&gt;, Released under the &lt;a href=&#34;https://raw.githubusercontent.com/zlib-searcher/zlib-searcher/master/LICENSE&#34;&gt;MIT&lt;/a&gt; License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>2dust/v2rayNG</title>
    <updated>2023-01-03T01:30:02Z</updated>
    <id>tag:github.com,2023-01-03:/2dust/v2rayNG</id>
    <link href="https://github.com/2dust/v2rayNG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A V2Ray client for Android, support Xray core and v2fly core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2rayNG&lt;/h1&gt; &#xA;&lt;p&gt;A V2Ray client for Android, support &lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;Xray core&lt;/a&gt; and &lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;v2fly core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/about/versions/lollipop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-21%2B-yellow.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Kotlin-1.6.21-blue.svg?sanitize=true&#34; alt=&#34;Kotlin Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/2dust/v2rayNG/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/2dust/v2rayNG&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/2dust/v2rayng&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/2dust/v2rayng/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/2dust/v2rayNG/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/2dust/v2rayNG/latest/total?logo=github&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/v2rayn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg?sanitize=true&#34; alt=&#34;Chat on Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.v2ray.ang&#34;&gt; &lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34; width=&#34;165&#34; height=&#34;64&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Telegram Channel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/github_2dust&#34;&gt;github_2dust&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Geoip and Geosite&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;geoip.dat and geosite.dat files are in &lt;code&gt;Android/data/com.v2ray.ang/files/assets&lt;/code&gt; (path may differ on some Android device)&lt;/li&gt; &#xA; &lt;li&gt;download feature will get enhanced version in this &lt;a href=&#34;https://github.com/Loyalsoldier/v2ray-rules-dat&#34;&gt;repo&lt;/a&gt; (Note it need a working proxy)&lt;/li&gt; &#xA; &lt;li&gt;latest official &lt;a href=&#34;https://github.com/v2fly/domain-list-community&#34;&gt;domain list&lt;/a&gt; and &lt;a href=&#34;https://github.com/v2fly/geoip&#34;&gt;ip list&lt;/a&gt; can be imported manually&lt;/li&gt; &#xA; &lt;li&gt;possible to use third party dat file in the same folder, like &lt;a href=&#34;https://guide.v2fly.org/routing/sitedata.html#%E5%A4%96%E7%BD%AE%E7%9A%84%E5%9F%9F%E5%90%8D%E6%96%87%E4%BB%B6&#34;&gt;h2y&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More in our &lt;a href=&#34;https://github.com/2dust/v2rayNG/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Development guide&lt;/h3&gt; &#xA;&lt;p&gt;Android project under V2rayNG folder can be compiled directly in Android Studio, or using Gradle wrapper. But the v2ray core inside the aar is (probably) outdated.&lt;br&gt; The aar can be compiled from the Golang project &lt;a href=&#34;https://github.com/2dust/AndroidLibV2rayLite&#34;&gt;AndroidLibV2rayLite&lt;/a&gt; or &lt;a href=&#34;https://github.com/2dust/AndroidLibXrayLite&#34;&gt;AndroidLibXrayLite&lt;/a&gt;. For a quick start, read guide for &lt;a href=&#34;https://github.com/golang/go/wiki/Mobile&#34;&gt;Go Mobile&lt;/a&gt; and &lt;a href=&#34;https://tutorialedge.net/golang/makefiles-for-go-developers/&#34;&gt;Makefiles for Go Developers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;v2rayNG can run on Android Emulators. For WSA, VPN permission need to be granted via &lt;code&gt;appops set [package name] ACTIVATE_VPN allow&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pmndrs/zustand</title>
    <updated>2023-01-03T01:30:02Z</updated>
    <id>tag:github.com,2023-01-03:/pmndrs/zustand</id>
    <link href="https://github.com/pmndrs/zustand" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐻 Bear necessities for state management in React&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/bear.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pmndrs/zustand/actions?query=workflow%3ALint&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/pmndrs/zustand/Lint?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=zustand&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&amp;amp;style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Build Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/zustand&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/zustand?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/zustand&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/zustand.svg?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/poimandres&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740090768164651008?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn&#39;t boilerplatey or opinionated.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t disregard it because it&#39;s cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded &lt;a href=&#34;https://react-redux.js.org/api/hooks#stale-props-and-zombie-children&#34;&gt;zombie child problem&lt;/a&gt;, &lt;a href=&#34;https://github.com/bvaughn/rfcs/raw/useMutableSource/text/0000-use-mutable-source.md&#34;&gt;react concurrency&lt;/a&gt;, and &lt;a href=&#34;https://github.com/facebook/react/issues/13332&#34;&gt;context loss&lt;/a&gt; between mixed renderers. It may be the one state-manager in the React space that gets all of these right.&lt;/p&gt; &#xA;&lt;p&gt;You can try a live demo &lt;a href=&#34;https://githubbox.com/pmndrs/zustand/tree/main/examples/demo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install zustand # or yarn add zustand&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This readme is written for JavaScript users. If you are a TypeScript user, don&#39;t miss &lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/#typescript-usage&#34;&gt;TypeScript Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;First create a store&lt;/h2&gt; &#xA;&lt;p&gt;Your store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the &lt;code&gt;set&lt;/code&gt; function &lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/immutable-state-and-merging.md&#34;&gt;merges state&lt;/a&gt; to help it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import create from &#39;zustand&#39;&#xA;&#xA;const useBearStore = create((set) =&amp;gt; ({&#xA;  bears: 0,&#xA;  increasePopulation: () =&amp;gt; set((state) =&amp;gt; ({ bears: state.bears + 1 })),&#xA;  removeAllBears: () =&amp;gt; set({ bears: 0 }),&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then bind your components, and that&#39;s it!&lt;/h2&gt; &#xA;&lt;p&gt;Use the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function BearCounter() {&#xA;  const bears = useBearStore((state) =&amp;gt; state.bears)&#xA;  return &amp;lt;h1&amp;gt;{bears} around here ...&amp;lt;/h1&amp;gt;&#xA;}&#xA;&#xA;function Controls() {&#xA;  const increasePopulation = useBearStore((state) =&amp;gt; state.increasePopulation)&#xA;  return &amp;lt;button onClick={increasePopulation}&amp;gt;one up&amp;lt;/button&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Why zustand over redux?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple and un-opinionated&lt;/li&gt; &#xA; &lt;li&gt;Makes hooks the primary means of consuming state&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t wrap your app in context providers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/#transient-updates-for-often-occurring-state-changes&#34;&gt;Can inform components transiently (without causing render)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why zustand over context?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Less boilerplate&lt;/li&gt; &#xA; &lt;li&gt;Renders components only on changes&lt;/li&gt; &#xA; &lt;li&gt;Centralized, action-based state management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Recipes&lt;/h1&gt; &#xA;&lt;h2&gt;Fetching everything&lt;/h2&gt; &#xA;&lt;p&gt;You can, but bear in mind that it will cause the component to update on every state change!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const state = useBearStore()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Selecting multiple state slices&lt;/h2&gt; &#xA;&lt;p&gt;It detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const nuts = useBearStore((state) =&amp;gt; state.nuts)&#xA;const honey = useBearStore((state) =&amp;gt; state.honey)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to construct a single object with multiple state-picks inside, similar to redux&#39;s mapStateToProps, you can tell zustand that you want the object to be diffed shallowly by passing the &lt;code&gt;shallow&lt;/code&gt; equality function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import shallow from &#39;zustand/shallow&#39;&#xA;&#xA;// Object pick, re-renders the component when either state.nuts or state.honey change&#xA;const { nuts, honey } = useBearStore(&#xA;  (state) =&amp;gt; ({ nuts: state.nuts, honey: state.honey }),&#xA;  shallow&#xA;)&#xA;&#xA;// Array pick, re-renders the component when either state.nuts or state.honey change&#xA;const [nuts, honey] = useBearStore(&#xA;  (state) =&amp;gt; [state.nuts, state.honey],&#xA;  shallow&#xA;)&#xA;&#xA;// Mapped picks, re-renders the component when state.treats changes in order, count or keys&#xA;const treats = useBearStore((state) =&amp;gt; Object.keys(state.treats), shallow)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more control over re-rendering, you may provide any custom equality function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const treats = useBearStore(&#xA;  (state) =&amp;gt; state.treats,&#xA;  (oldTreats, newTreats) =&amp;gt; compare(oldTreats, newTreats)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overwriting state&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;set&lt;/code&gt; function has a second argument, &lt;code&gt;false&lt;/code&gt; by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import omit from &#39;lodash-es/omit&#39;&#xA;&#xA;const useFishStore = create((set) =&amp;gt; ({&#xA;  salmon: 1,&#xA;  tuna: 2,&#xA;  deleteEverything: () =&amp;gt; set({}, true), // clears the entire store, actions included&#xA;  deleteTuna: () =&amp;gt; set((state) =&amp;gt; omit(state, [&#39;tuna&#39;]), true),&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Async actions&lt;/h2&gt; &#xA;&lt;p&gt;Just call &lt;code&gt;set&lt;/code&gt; when you&#39;re ready, zustand doesn&#39;t care if your actions are async or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const useFishStore = create((set) =&amp;gt; ({&#xA;  fishies: {},&#xA;  fetch: async (pond) =&amp;gt; {&#xA;    const response = await fetch(pond)&#xA;    set({ fishies: await response.json() })&#xA;  },&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Read from state in actions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;set&lt;/code&gt; allows fn-updates &lt;code&gt;set(state =&amp;gt; result)&lt;/code&gt;, but you still have access to state outside of it through &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const useSoundStore = create((set, get) =&amp;gt; ({&#xA;  sound: &#34;grunt&#34;,&#xA;  action: () =&amp;gt; {&#xA;    const sound = get().sound&#xA;    // ...&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading/writing state and reacting to changes outside of components&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you need to access state in a non-reactive way, or act upon the store. For these cases the resulting hook has utility functions attached to its prototype.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const useDogStore = create(() =&amp;gt; ({ paw: true, snout: true, fur: true }))&#xA;&#xA;// Getting non-reactive fresh state&#xA;const paw = useDogStore.getState().paw&#xA;// Listening to all changes, fires synchronously on every change&#xA;const unsub1 = useDogStore.subscribe(console.log)&#xA;// Updating state, will trigger listeners&#xA;useDogStore.setState({ paw: false })&#xA;// Unsubscribe listeners&#xA;unsub1()&#xA;// Destroying the store (removing all listeners)&#xA;useDogStore.destroy()&#xA;&#xA;// You can of course use the hook as you always would&#xA;const Component = () =&amp;gt; {&#xA;  const paw = useDogStore((state) =&amp;gt; state.paw)&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using subscribe with selector&lt;/h3&gt; &#xA;&lt;p&gt;If you need to subscribe with selector, &lt;code&gt;subscribeWithSelector&lt;/code&gt; middleware will help.&lt;/p&gt; &#xA;&lt;p&gt;With this middleware &lt;code&gt;subscribe&lt;/code&gt; accepts an additional signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;subscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { subscribeWithSelector } from &#39;zustand/middleware&#39;&#xA;const useDogStore = create(&#xA;  subscribeWithSelector(() =&amp;gt; ({ paw: true, snout: true, fur: true }))&#xA;)&#xA;&#xA;// Listening to selected changes, in this case when &#34;paw&#34; changes&#xA;const unsub2 = useDogStore.subscribe((state) =&amp;gt; state.paw, console.log)&#xA;// Subscribe also exposes the previous value&#xA;const unsub3 = useDogStore.subscribe(&#xA;  (state) =&amp;gt; state.paw,&#xA;  (paw, previousPaw) =&amp;gt; console.log(paw, previousPaw)&#xA;)&#xA;// Subscribe also supports an optional equality function&#xA;const unsub4 = useDogStore.subscribe(&#xA;  (state) =&amp;gt; [state.paw, state.fur],&#xA;  console.log,&#xA;  { equalityFn: shallow }&#xA;)&#xA;// Subscribe and fire immediately&#xA;const unsub5 = useDogStore.subscribe((state) =&amp;gt; state.paw, console.log, {&#xA;  fireImmediately: true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using zustand without React&lt;/h2&gt; &#xA;&lt;p&gt;Zustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import create from &#39;zustand/vanilla&#39;&#xA;&#xA;const store = create(() =&amp;gt; ({ ... }))&#xA;const { getState, setState, subscribe, destroy } = store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even consume an existing vanilla store with React:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import create from &#39;zustand&#39;&#xA;import vanillaStore from &#39;./vanillaStore&#39;&#xA;&#xA;const useBoundStore = create(vanillaStore)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note that middlewares that modify &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; are not applied to &lt;code&gt;getState&lt;/code&gt; and &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Transient updates (for often occurring state-changes)&lt;/h2&gt; &#xA;&lt;p&gt;The subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a &lt;a href=&#34;https://codesandbox.io/s/peaceful-johnson-txtws&#34;&gt;drastic&lt;/a&gt; performance impact when you are allowed to mutate the view directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const useScratchStore = create(set =&amp;gt; ({ scratches: 0, ... }))&#xA;&#xA;const Component = () =&amp;gt; {&#xA;  // Fetch initial state&#xA;  const scratchRef = useRef(useScratchStore.getState().scratches)&#xA;  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference&#xA;  useEffect(() =&amp;gt; useScratchStore.subscribe(&#xA;    state =&amp;gt; (scratchRef.current = state.scratches)&#xA;  ), [])&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sick of reducers and changing nested state? Use Immer!&lt;/h2&gt; &#xA;&lt;p&gt;Reducing nested structures is tiresome. Have you tried &lt;a href=&#34;https://github.com/mweststrate/immer&#34;&gt;immer&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import produce from &#39;immer&#39;&#xA;&#xA;const useLushStore = create((set) =&amp;gt; ({&#xA;  lush: { forest: { contains: { a: &#39;bear&#39; } } },&#xA;  clearForest: () =&amp;gt;&#xA;    set(&#xA;      produce((state) =&amp;gt; {&#xA;        state.lush.forest.contains = null&#xA;      })&#xA;    ),&#xA;}))&#xA;&#xA;const clearForest = useLushStore((state) =&amp;gt; state.clearForest)&#xA;clearForest()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/updating-state.md#with-immer&#34;&gt;Alternatively, there are some other solutions.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Middleware&lt;/h2&gt; &#xA;&lt;p&gt;You can functionally compose your store any way you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// Log every time state is changed&#xA;const log = (config) =&amp;gt; (set, get, api) =&amp;gt;&#xA;  config(&#xA;    (...args) =&amp;gt; {&#xA;      console.log(&#39;  applying&#39;, args)&#xA;      set(...args)&#xA;      console.log(&#39;  new state&#39;, get())&#xA;    },&#xA;    get,&#xA;    api&#xA;  )&#xA;&#xA;const useBeeStore = create(&#xA;  log((set) =&amp;gt; ({&#xA;    bees: false,&#xA;    setBees: (input) =&amp;gt; set({ bees: input }),&#xA;  }))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Persist middleware&lt;/h2&gt; &#xA;&lt;p&gt;You can persist your store&#39;s data using any kind of storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import create from &#39;zustand&#39;&#xA;import { persist, createJSONStorage } from &#39;zustand/middleware&#39;&#xA;&#xA;const useFishStore = create(&#xA;  persist(&#xA;    (set, get) =&amp;gt; ({&#xA;      fishes: 0,&#xA;      addAFish: () =&amp;gt; set({ fishes: get().fishes + 1 }),&#xA;    }),&#xA;    {&#xA;      name: &#39;food-storage&#39;, // unique name&#xA;      storage: createJSONStorage(() =&amp;gt; sessionStorage), // (optional) by default, &#39;localStorage&#39; is used&#xA;    }&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/integrations/persisting-store-data.md&#34;&gt;See the full documentation for this middleware.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Immer middleware&lt;/h2&gt; &#xA;&lt;p&gt;Immer is available as middleware too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import create from &#39;zustand&#39;&#xA;import { immer } from &#39;zustand/middleware/immer&#39;&#xA;&#xA;const useBeeStore = create(&#xA;  immer((set) =&amp;gt; ({&#xA;    bees: 0,&#xA;    addBees: (by) =&amp;gt;&#xA;      set((state) =&amp;gt; {&#xA;        state.bees += by&#xA;      }),&#xA;  }))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Can&#39;t live without redux-like reducers and action types?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const types = { increase: &#39;INCREASE&#39;, decrease: &#39;DECREASE&#39; }&#xA;&#xA;const reducer = (state, { type, by = 1 }) =&amp;gt; {&#xA;  switch (type) {&#xA;    case types.increase:&#xA;      return { grumpiness: state.grumpiness + by }&#xA;    case types.decrease:&#xA;      return { grumpiness: state.grumpiness - by }&#xA;  }&#xA;}&#xA;&#xA;const useGrumpyStore = create((set) =&amp;gt; ({&#xA;  grumpiness: 0,&#xA;  dispatch: (args) =&amp;gt; set((state) =&amp;gt; reducer(state, args)),&#xA;}))&#xA;&#xA;const dispatch = useGrumpyStore((state) =&amp;gt; state.dispatch)&#xA;dispatch({ type: types.increase, by: 2 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, just use our redux-middleware. It wires up your main-reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { redux } from &#39;zustand/middleware&#39;&#xA;&#xA;const useGrumpyStore = create(redux(reducer, initialState))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redux devtools&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { devtools } from &#39;zustand/middleware&#39;&#xA;&#xA;// Usage with a plain action store, it will log actions as &#34;setState&#34;&#xA;const usePlainStore = create(devtools(store))&#xA;// Usage with a redux store, it will log full action types&#xA;const useReduxStore = create(devtools(redux(reducer, initialState)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One redux devtools connection for multiple stores&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { devtools } from &#39;zustand/middleware&#39;&#xA;&#xA;// Usage with a plain action store, it will log actions as &#34;setState&#34;&#xA;const usePlainStore1 = create(devtools(store), { name, store: storeName1 })&#xA;const usePlainStore2 = create(devtools(store), { name, store: storeName2 })&#xA;// Usage with a redux store, it will log full action types&#xA;const useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName3 })&#xA;const useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName4 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.&lt;/p&gt; &#xA;&lt;p&gt;devtools takes the store function as its first argument, optionally you can name the store or configure &lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension/raw/master/docs/API/Arguments.md#serialize&#34;&gt;serialize&lt;/a&gt; options with a second argument.&lt;/p&gt; &#xA;&lt;p&gt;Name store: &lt;code&gt;devtools(store, {name: &#34;MyStore&#34;})&lt;/code&gt;, which will create a separate instance named &#34;MyStore&#34; in the devtools.&lt;/p&gt; &#xA;&lt;p&gt;Serialize options: &lt;code&gt;devtools(store, { serialize: { options: true } })&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Logging Actions&lt;/h4&gt; &#xA;&lt;p&gt;devtools will only log actions from each separated store unlike in a typical &lt;em&gt;combined reducers&lt;/em&gt; redux store. See an approach to combining stores &lt;a href=&#34;https://github.com/pmndrs/zustand/issues/163&#34;&gt;https://github.com/pmndrs/zustand/issues/163&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can log a specific action type for each &lt;code&gt;set&lt;/code&gt; function by passing a third parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const createBearSlice = (set, get) =&amp;gt; ({&#xA;  eatFish: () =&amp;gt;&#xA;    set(&#xA;      (prev) =&amp;gt; ({ fishes: prev.fishes &amp;gt; 1 ? prev.fishes - 1 : 0 }),&#xA;      false,&#xA;      &#39;bear/eatFish&#39;&#xA;    ),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also log the action&#39;s type along with its payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const createBearSlice = (set, get) =&amp;gt; ({&#xA;  addFishes: (count) =&amp;gt;&#xA;    set((prev) =&amp;gt; ({ fishes: prev.fishes + count }), false, {&#xA;      type: &#39;bear/addFishes&#39;,&#xA;      count,&#xA;    }),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an action type is not provided, it is defaulted to &#34;anonymous&#34;. You can customize this default value by providing an &lt;code&gt;anonymousActionType&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;devtools(..., { anonymousActionType: &#39;unknown&#39;, ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to disable devtools (on production for instance). You can customize this setting by providing the &lt;code&gt;enabled&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;devtools(..., { enabled: false, ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;React context&lt;/h2&gt; &#xA;&lt;p&gt;The store created with &lt;code&gt;create&lt;/code&gt; doesn&#39;t require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.&lt;/p&gt; &#xA;&lt;p&gt;The recommended method available since v4 is to use the vanilla store.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { createContext, useContext } from &#39;react&#39;&#xA;import { createStore, useStore } from &#39;zustand&#39;&#xA;&#xA;const store = createStore(...) // vanilla store without hooks&#xA;&#xA;const StoreContext = createContext()&#xA;&#xA;const App = () =&amp;gt; (&#xA;  &amp;lt;StoreContext.Provider value={store}&amp;gt;&#xA;    ...&#xA;  &amp;lt;/StoreContext.Provider&amp;gt;&#xA;)&#xA;&#xA;const Component = () =&amp;gt; {&#xA;  const store = useContext(StoreContext)&#xA;  const slice = useStore(store, selector)&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/previous-versions/zustand-v3-create-context.md&#34;&gt;Alternatively, a special createContext is provided.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript Usage&lt;/h2&gt; &#xA;&lt;p&gt;Basic typescript usage doesn&#39;t require anything special except for writing &lt;code&gt;create&amp;lt;State&amp;gt;()(...)&lt;/code&gt; instead of &lt;code&gt;create(...)&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import create from &#39;zustand&#39;&#xA;import { devtools, persist } from &#39;zustand/middleware&#39;&#xA;&#xA;interface BearState {&#xA;  bears: number&#xA;  increase: (by: number) =&amp;gt; void&#xA;}&#xA;&#xA;const useBearStore = create&amp;lt;BearState&amp;gt;()(&#xA;  devtools(&#xA;    persist(&#xA;      (set) =&amp;gt; ({&#xA;        bears: 0,&#xA;        increase: (by) =&amp;gt; set((state) =&amp;gt; ({ bears: state.bears + by })),&#xA;      }),&#xA;      {&#xA;        name: &#39;bear-storage&#39;,&#xA;      }&#xA;    )&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A more complete TypeScript guide is &lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/typescript.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Best practices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may wonder how to organize your code for better maintenance: &lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/slices-pattern.md&#34;&gt;Splitting the store into separate slices&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Recommended usage for this unopinionated library: &lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/flux-inspired-practice.md&#34;&gt;Flux inspired practice&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/event-handler-in-pre-react-18.md&#34;&gt;Calling actions outside a React event handler in pre React 18&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/guides/testing.mdx&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Third-Party Libraries&lt;/h2&gt; &#xA;&lt;p&gt;Some users may want to extends Zustand&#39;s feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit &lt;a href=&#34;https://raw.githubusercontent.com/pmndrs/zustand/main/docs/integrations/third-party-libraries.md&#34;&gt;the doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with other libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/zustand/wiki/Difference-between-zustand-and-valtio&#34;&gt;Difference between zustand and valtio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>