<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-29T01:28:48Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ollama/ollama-python</title>
    <updated>2024-11-29T01:28:48Z</updated>
    <id>tag:github.com,2024-11-29:/ollama/ollama-python</id>
    <link href="https://github.com/ollama/ollama-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ollama Python library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ollama Python Library&lt;/h1&gt; &#xA;&lt;p&gt;The Ollama Python library provides the easiest way to integrate Python 3.8+ projects with &lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;Ollama&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ollama.com/download&#34;&gt;Ollama&lt;/a&gt; should be installed and running&lt;/li&gt; &#xA; &lt;li&gt;Pull a model to use with the library: &lt;code&gt;ollama pull &amp;lt;model&amp;gt;&lt;/code&gt; e.g. &lt;code&gt;ollama pull llama3.2&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://ollama.com/search&#34;&gt;Ollama.com&lt;/a&gt; for more information on the models available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install ollama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ollama import chat&#xA;from ollama import ChatResponse&#xA;&#xA;response: ChatResponse = chat(model=&#39;llama3.2&#39;, messages=[&#xA;  {&#xA;    &#39;role&#39;: &#39;user&#39;,&#xA;    &#39;content&#39;: &#39;Why is the sky blue?&#39;,&#xA;  },&#xA;])&#xA;print(response[&#39;message&#39;][&#39;content&#39;])&#xA;# or access fields directly from the response object&#xA;print(response.message.content)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ollama/ollama-python/main/ollama/_types.py&#34;&gt;_types.py&lt;/a&gt; for more information on the response types.&lt;/p&gt; &#xA;&lt;h2&gt;Streaming responses&lt;/h2&gt; &#xA;&lt;p&gt;Response streaming can be enabled by setting &lt;code&gt;stream=True&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Streaming Tool/Function calling is not yet supported.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ollama import chat&#xA;&#xA;stream = chat(&#xA;    model=&#39;llama3.2&#39;,&#xA;    messages=[{&#39;role&#39;: &#39;user&#39;, &#39;content&#39;: &#39;Why is the sky blue?&#39;}],&#xA;    stream=True,&#xA;)&#xA;&#xA;for chunk in stream:&#xA;  print(chunk[&#39;message&#39;][&#39;content&#39;], end=&#39;&#39;, flush=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom client&lt;/h2&gt; &#xA;&lt;p&gt;A custom client can be created by instantiating &lt;code&gt;Client&lt;/code&gt; or &lt;code&gt;AsyncClient&lt;/code&gt; from &lt;code&gt;ollama&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All extra keyword arguments are passed into the &lt;a href=&#34;https://www.python-httpx.org/api/#client&#34;&gt;&lt;code&gt;httpx.Client&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ollama import Client&#xA;client = Client(&#xA;  host=&#39;http://localhost:11434&#39;,&#xA;  headers={&#39;x-some-header&#39;: &#39;some-value&#39;}&#xA;)&#xA;response = client.chat(model=&#39;llama3.2&#39;, messages=[&#xA;  {&#xA;    &#39;role&#39;: &#39;user&#39;,&#xA;    &#39;content&#39;: &#39;Why is the sky blue?&#39;,&#xA;  },&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Async client&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;AsyncClient&lt;/code&gt; class is used to make asynchronous requests. It can be configured with the same fields as the &lt;code&gt;Client&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;from ollama import AsyncClient&#xA;&#xA;async def chat():&#xA;  message = {&#39;role&#39;: &#39;user&#39;, &#39;content&#39;: &#39;Why is the sky blue?&#39;}&#xA;  response = await AsyncClient().chat(model=&#39;llama3.2&#39;, messages=[message])&#xA;&#xA;asyncio.run(chat())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;stream=True&lt;/code&gt; modifies functions to return a Python asynchronous generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;from ollama import AsyncClient&#xA;&#xA;async def chat():&#xA;  message = {&#39;role&#39;: &#39;user&#39;, &#39;content&#39;: &#39;Why is the sky blue?&#39;}&#xA;  async for part in await AsyncClient().chat(model=&#39;llama3.2&#39;, messages=[message], stream=True):&#xA;    print(part[&#39;message&#39;][&#39;content&#39;], end=&#39;&#39;, flush=True)&#xA;&#xA;asyncio.run(chat())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The Ollama Python library&#39;s API is designed around the &lt;a href=&#34;https://github.com/ollama/ollama/raw/main/docs/api.md&#34;&gt;Ollama REST API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.chat(model=&#39;llama3.2&#39;, messages=[{&#39;role&#39;: &#39;user&#39;, &#39;content&#39;: &#39;Why is the sky blue?&#39;}])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.generate(model=&#39;llama3.2&#39;, prompt=&#39;Why is the sky blue?&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.list()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.show(&#39;llama3.2&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;modelfile=&#39;&#39;&#39;&#xA;FROM llama3.2&#xA;SYSTEM You are mario from super mario bros.&#xA;&#39;&#39;&#39;&#xA;&#xA;ollama.create(model=&#39;example&#39;, modelfile=modelfile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.copy(&#39;llama3.2&#39;, &#39;user/llama3.2&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.delete(&#39;llama3.2&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pull&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.pull(&#39;llama3.2&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Push&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.push(&#39;user/llama3.2&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embed&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.embed(model=&#39;llama3.2&#39;, input=&#39;The sky is blue because of rayleigh scattering&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Embed (batch)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.embed(model=&#39;llama3.2&#39;, input=[&#39;The sky is blue because of rayleigh scattering&#39;, &#39;Grass is green because of chlorophyll&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ps&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ollama.ps()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Errors&lt;/h2&gt; &#xA;&lt;p&gt;Errors are raised if requests return an error status or if an error is detected while streaming.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = &#39;does-not-yet-exist&#39;&#xA;&#xA;try:&#xA;  ollama.chat(model)&#xA;except ollama.ResponseError as e:&#xA;  print(&#39;Error:&#39;, e.error)&#xA;  if e.status_code == 404:&#xA;    ollama.pull(model)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>myhhub/stock</title>
    <updated>2024-11-29T01:28:48Z</updated>
    <id>tag:github.com,2024-11-29:/myhhub/stock</id>
    <link href="https://github.com/myhhub/stock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;stock股票.获取股票数据,计算股票指标,识别股票形态,综合选股,选股策略,股票验证回测,股票自动交易,支持PC及移动设备。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;InStock股票系统&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;InStock股票系统，抓取每日股票、ETF关键数据，计算股票各种指标，识别K线各种形态，综合选股，内置多种选股策略，支持选股验证回测，支持自动交易，支持批量时间，运行高效，支持PC、平板、手机移动设备显示，同时提供Docker镜像方便安装，是量化投资的好帮手。&lt;/p&gt; &#xA;&lt;p&gt;本项目地址：&lt;a href=&#34;https://github.com/myhhub/stock&#34;&gt;https://github.com/myhhub/stock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker镜像：&lt;a href=&#34;https://hub.docker.com/r/mayanghua/instock&#34;&gt;https://hub.docker.com/r/mayanghua/instock&lt;/a&gt; &lt;strong&gt;镜像优化构建仅170M&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;功能介绍&lt;/h1&gt; &#xA;&lt;h2&gt;一：综合选股&lt;/h2&gt; &#xA;&lt;p&gt;综合选股支持股票范围、基本面、技术面、消息面、人气指标、行情数据等方面共200多个信息栏目进行自由组合选股。选股条件分为以下大类：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.股票范围&#xA;市场、 行业、地区、 概念、 风格、指数成份、 上市时间。&#xA;2.基本面&#xA;估值指标、每股指标、盈利能力、成长能力、资本结构与偿债能力、股本股东。&#xA;3.技术面&#xA;MACD金叉、KDJ金叉、放量突破、低位资金净流入、高位资金净流出、向上突破均线、均线多头排列、均线空头排列、连涨放量、下跌无量、一根大阳线、两根大阳线、旭日东升、强势多方、炮拨云见日、七仙女下凡(七连阴)、八仙过海(八连阳)、九阳神功(九连阳)、四串阳、天量法则、放量上攻、穿头破脚、倒转锤头、射击之星、黄昏之星、曙光初现、身怀六甲、乌云盖顶、早晨之星、窄幅整理。&#xA;4.消息面&#xA;公告大事、机构关注情况、机构持股家数、机构持股比例。&#xA;5.人气指标&#xA;股吧人气排名、人气排名变化、人气排名连涨、人气排名连跌、人气排名创新高、人气排名创新低、新晋粉丝占比、铁杆粉丝占比、7日关注排名、今日浏览排名。&#xA;6.行情数据&#xA;股价表现、成交情况、资金流向、行情统计、沪深股通。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/a3.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/a2.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/a1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;二：股票每日数据&lt;/h2&gt; &#xA;&lt;p&gt;包括每日股票数据、股票资金流向、股票分红配送、股票龙虎榜、股票大宗交易、股票基本面数据、行业资金流向、概念资金流向、每日ETF数据。&lt;/p&gt; &#xA;&lt;p&gt;抓取A股票每日数据，主要为一些关键数据，同时封装抓取方法，方便扩展系统获取个人关注的数据。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/00.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/12.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;三：股票指标计算&lt;/h2&gt; &#xA;&lt;p&gt;基于talib、pandas 计算指标，计算高效准确。调整个别指标公式，确保结果和同花顺、通信达结果一致。 指标：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、MACD 2、KDJ 3、BOLL 4、TRIX，TRMA 5、CR 6、SMA 7、RSI &#xA;8、VR，MAVR 9、ROC 10、DMI，+DI，-DI，DX，ADX，ADXR 11、W&amp;amp;R &#xA;12、CCI 13、TR、ATR 14、DMA、AMA 15、OBV 16、SAR 17、PSY &#xA;18、BRAR 19、EMV 20、BIAS 21、TEMA  22、MFI 23、VWMA&#xA;24、PPO 25、WT 26、Supertrend  27、DPO  28、VHF  29、RVI&#xA;30、FI 31、ENE 32、STOCHRSI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/01.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/06.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/13.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/10.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;四：判断买入卖出的股票&lt;/h2&gt; &#xA;&lt;p&gt;根据指标判定可能买入卖出的股票，具体筛选条件如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;KDJ:&#xA;1、超买区：K值在80以上，D值在70以上，J值大于90时为超买。一般情况下，股价有可能下跌。投资者应谨慎行事，局外人不应再追涨，局内人应适时卖出。&#xA;2、超卖区：K值在20以下，D值在30以下为超卖区。一般情况下，股价有可能上涨，反弹的可能性增大。局内人不应轻易抛出股票，局外人可寻机入场。&#xA;RSI:&#xA;1、当六日指标上升到达80时，表示股市已有超买现象，如果一旦继续上升，超过90以上时，则表示已到严重超买的警戒区，股价已形成头部，极可能在短期内反转回转。&#xA;2、当六日强弱指标下降至20时，表示股市有超卖现象，如果一旦继续下降至10以下时则表示已到严重超卖区域，股价极可能有止跌回升的机会。&#xA;CCI:&#xA;1、当CCI＞﹢100时，表明股价已经进入非常态区间——超买区间，股价的异动现象应多加关注。&#xA;2、当CCI＜﹣100时，表明股价已经进入另一个非常态区间——超卖区间，投资者可以逢低吸纳股票。&#xA;CR:&#xA;1、跌穿a、b、c、d四条线，再由低点向上爬升160时，为短线获利的一个良机，应适当卖出股票。&#xA;2、CR跌至40以下时，是建仓良机。&#xA;WR:&#xA;1、当％R线达到20时，市场处于超买状况，走势可能即将见顶。&#xA;2、当％R线达到80时，市场处于超卖状况，股价走势随时可能见底。&#xA;VR:&#xA;1、获利区域160－450根据情况获利了结。&#xA;2、低价区域40－70可以买进。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/05.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;五：K线形态识别&lt;/h2&gt; &#xA;&lt;p&gt;精准识别61种K线形态，支持用户自选形态识别。&lt;/p&gt; &#xA;&lt;p&gt;识别形态:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、两只乌鸦2、三只乌鸦3、三内部上涨和下跌4、三线打击5、三外部上涨和下跌6、南方三星7、三个白兵8、弃婴&#xA;9、大敌当前10、捉腰带线11、脱离12、收盘缺影线13、藏婴吞没14、反击线15、乌云压顶16、十字17、十字星&#xA;18、蜻蜓十字/T形十字19、吞噬模式20、十字暮星  21、暮星22、向上/下跳空并列阳线23、墓碑十字/倒T十字&#xA;24、锤头25、上吊线26、母子线27、十字孕线28、风高浪大线29、陷阱30、修正陷阱31、家鸽32、三胞胎乌鸦&#xA;33、颈内线34、倒锤头35、反冲形态36、由较长缺影线决定的反冲形态37、梯底38、长脚十字39、长蜡烛&#xA;40、光头光脚/缺影线 41、相同低价42、铺垫43、十字晨星44、晨星45、颈上线46、刺透形态47、黄包车夫&#xA;48、上升/下降三法49、分离线50、射击之星51、短蜡烛52、纺锤53、停顿形态54、条形三明治55、探水竿&#xA;56、跳空并列阴阳线57、插入58、三星59、奇特三河床60、向上跳空的两只乌鸦61、上升/下降跳空三法 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;形态识别结果：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;负：出现卖出信号&#xA;0：没有出现该形态&#xA;正：出现买入信号&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/09.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/06.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;六：策略选股&lt;/h2&gt; &#xA;&lt;p&gt;内置放量上涨、停机坪、回踩年线、突破平台、放量跌停等多种选股策略，同时封装了策略模板，方便扩展实现自己的策略。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、放量上涨&#xA;    1）当日比前一天上涨小于2%或收盘价小于开盘价。&#xA;    2）当日成交额不低于2亿。&#xA;    3）当日成交量/5日平均成交量&amp;gt;=2。&#xA;2、均线多头&#xA;    MA30向上&#xA;    1）30日前的30日均线&amp;lt;20日前的30日均线&amp;lt;10日前的30日均线&amp;lt;当日的30日均线。&#xA;    2）(当日的30日均线/30日前的30日均线)&amp;gt;1.2。&#xA;3、停机坪&#xA;    1）最近15日有涨幅大于9.5%，且必须是放量上涨。&#xA;    2）紧接的下个交易日必须高开，收盘价必须上涨，且与开盘价不能大于等于相差3%。&#xA;    3）接下2、3个交易日必须高开，收盘价必须上涨，且与开盘价不能大于等于相差3%，且每天涨跌幅在5%间。&#xA;4、回踩年线&#xA;    1）分2个时间段：前段=最近60交易日最高收盘价之前交易日(长度&amp;gt;0)，后段=最高价当日及后面的交易日。&#xA;    2）前段由年线(250日)以下向上突破。&#xA;    3）后段必须在年线以上运行，且后段最低价日与最高价日相差必须在10-50日间。&#xA;    4）回踩伴随缩量：最高价日交易量/后段最低价日交易量&amp;gt;2,后段最低价/最高价&amp;lt;0.8。&#xA;5、突破平台&#xA;    1）60日内某日收盘价&amp;gt;=60日均线&amp;gt;开盘价。&#xA;    2）且【1】放量上涨。&#xA;    3）且【1】间之前时间，任意一天收盘价与60日均线偏离在-5%~20%之间。&#xA;6、无大幅回撤&#xA;    1）当日收盘价比60日前的收盘价的涨幅小于0.6。&#xA;    2）最近60日，不能有单日跌幅超7%、高开低走7%、两日累计跌幅10%、两日高开低走累计10%。&#xA;7、海龟交易法则&#xA;    最后一个交易日收市价为指定区间内最高价。&#xA;    1）当日收盘价&amp;gt;=最近60日最高收盘价。&#xA;8、高而窄的旗形&#xA;    1）必须至少上市交易60日。&#xA;    2）当日收盘价/之前24~10日的最低价&amp;gt;=1.9。&#xA;    3）之前24~10日必须连续两天涨幅大于等于9.5%。&#xA;9、放量跌停。&#xA;    1）跌&amp;gt;9.5%。&#xA;    2）成交额不低于2亿。&#xA;    3）成交量至少是5日平均成交量的4倍。&#xA;10、低ATR成长&#xA;    1）必须至少上市交易250日。&#xA;    2）最近10个交易日的最高收盘价必须比最近10个交易日的最低收盘价高1.1倍。&#xA;11、股票基本面选股&#xA;    1）市盈率小于等于20，且大于0。&#xA;    2）市净率小于等于10。&#xA;    3）净资产收益率大于等于15。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/04.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;七：选股验证&lt;/h2&gt; &#xA;&lt;p&gt;对指标、策略等选出的股票进行回测，验证策略的成功率，是否可用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/05.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;八：自动交易&lt;/h2&gt; &#xA;&lt;p&gt;支持自动交易，内置自动打新股的策略及示例策略，由于&lt;strong&gt;涉及金钱&lt;/strong&gt;，规避可能存在风险，没有提供其他交易策略。&lt;/p&gt; &#xA;&lt;p&gt;具有交易日志，以及支持为每个交易策略配置交易日志。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;特别提醒&lt;/strong&gt;：交易日10:00点会触发打新，不想打新的删除stagging.py或不要启动“交易服务”。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/11.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;九：关注功能&lt;/h2&gt; &#xA;&lt;p&gt;支持股票关注，关注股票在各个模块(含有的)置顶、标红显示。&lt;/p&gt; &#xA;&lt;h2&gt;十：支持批量&lt;/h2&gt; &#xA;&lt;p&gt;可以通过时间段、枚举时间、当前时间进行指标计算、策略选股及回测等。同时支持智能识别交易日，可以输入任意日期。&lt;/p&gt; &#xA;&lt;p&gt;具体执行设置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;------整体作业，支持批量作业------&#xA;当前时间作业 python execute_daily_job.py&#xA;单个时间作业 python execute_daily_job.py 2022-03-01&#xA;枚举时间作业 python execute_daily_job.py 2022-01-01,2021-02-08,2022-03-12&#xA;区间时间作业 python execute_daily_job.py 2022-01-01 2022-03-01&#xA;&#xA;------单功能作业，支持批量作业，回测数据自动填补到当前&#xA;基础数据实时作业 python basic_data_daily_job.py&#xA;基础数据非实时作业 python basic_data_other_daily_job.py&#xA;指标数据作业 python indicators_data_daily_job.py&#xA;K线形态作业 klinepattern_data_daily_job.py&#xA;策略数据作业 python strategy_data_daily_job.py&#xA;回测数据 python backtest_data_daily_job.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;十一：存储采用数据库设计&lt;/h2&gt; &#xA;&lt;p&gt;数据存储采用数据库设计，能保存历史数据，以及对数据进行扩展分析、统计、挖掘。系统实现自动创建数据库、数据表，封装了批量更新、插入数据，方便业务扩展。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/07.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;十二：展示采用web设计&lt;/h2&gt; &#xA;&lt;p&gt;采用web设计，可视化展示结果。对展示进行封装，添加新的业务表单，只需要配置视图字典就可自动出现业务可视化界面，方便业务功能扩展。&lt;/p&gt; &#xA;&lt;h2&gt;十三：运行高效&lt;/h2&gt; &#xA;&lt;p&gt;采用多线程、单例共享资源有效提高运算效率。1天数据的抓取、计算指标、形态识别、策略选股、回测等全部任务运行时间大概4分钟（普通笔记本），计算天数越多效率越高。&lt;/p&gt; &#xA;&lt;h2&gt;十四：方便调试&lt;/h2&gt; &#xA;&lt;p&gt;系统运行的重要日志记录在stock_execute_job.log(数据抓取、处理、分析)、stock_web.log(web服务)、stock_trade.log(交易服务)，方便调试发现问题。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/08.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;安装说明&lt;/h1&gt; &#xA;&lt;p&gt;本系统支持Windows、Linux、MacOS，同时本系统创建了Docker镜像，按自己需要选择安装方式。&lt;/p&gt; &#xA;&lt;p&gt;下面按分常规安装方式、docker镜像安装方式进行一一说明。&lt;/p&gt; &#xA;&lt;h2&gt;一：常规安装方式&lt;/h2&gt; &#xA;&lt;p&gt;建议windows下安装，方便操作及使用系统，同时安装也非常简单。&lt;/p&gt; &#xA;&lt;p&gt;以下安装及运行以windows为例进行介绍。&lt;/p&gt; &#xA;&lt;h3&gt;1.安装python&lt;/h3&gt; &#xA;&lt;p&gt;项目开发使用python 3.11，建议最新版。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;（1）在官网 https://www.python.org/downloads/ 下载安装包，一键安装即可，安装切记勾选自动设置环境变量。&#xA;（2）配置永久全局国内镜像库（因为有墙，无法正常安装库文件），执行如下dos命令：&#xA;python pip config --global set  global.index-url https://mirrors.aliyun.com/pypi/simple/&#xA;# 如果你只想为当前用户设置，你也可以去掉下面的&#34;--global&#34;选项&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.安装mysql&lt;/h3&gt; &#xA;&lt;p&gt;建议最新版。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;在官网 https://dev.mysql.com/downloads/mysql/ 下载安装包，一键安装即可。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.安装依赖库&lt;/h3&gt; &#xA;&lt;p&gt;依赖库都是目前最新版本。&lt;/p&gt; &#xA;&lt;p&gt;a.安装依赖库：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#dos切换到本系统的根目录，执行下面命令：&#xA;python pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b.若想升级项目依赖库至最新版，可以通过下面方法：&lt;/p&gt; &#xA;&lt;p&gt;先打开requirements.txt，然后修改文件中的“==”为“&amp;gt;=”，接着执行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python pip install -r requirements.txt --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;c.若扩展了本项目，可以通过下面方法生成项目依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#使用pipreqs生成项目相关依赖的requirements.txt&#xA;&#xA;python pip install pipreqs&#xA;# 安装pipreqs，若有安装可跳过&#xA;&#xA;python  pipreqs --encoding utf-8 --force ./ &#xA;# 本项目是utf-8编码&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.安装 talib&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;第一种方法. pip 下安装&#xA;（1）https://www.ta-lib.org/下载并解压ta-lib-0.4.0-msvc.zip&#xA;（2）解压并将ta_lib放在C盘根目录&#xA;（3）https://visualstudio.microsoft.com/zh-hans/downloads/下载并安装Visual Studio Community，安装切记勾选Visual C++功能&#xA;（4）Build TA-Lib Library # 构建 TA-Lib 库&#xA;    ①在开始菜单中搜索并打开[Native Tools Command Prompt](根据操作系统选择32位或64位)&#xA;    ②输入 cd C:\ta-lib\c\make\cdr\win32\msvc&#xA;    ③构建库，输入 nmake&#xA;（5）安装完成。&#xA;第二种方法. Anaconda 下安装&#xA;（1）打开Anaconda Prompt终端。&#xA;（2）在终端输入命令行conda install -c conda-forge ta-lib 。&#xA;（3）此处确认是否继续安装？输入y 继续安装，直到完成&#xA;（4）安装完成。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.安装 Navicat（可选）&lt;/h3&gt; &#xA;&lt;p&gt;Navicat可以方便管理数据库，以及可以手工对数据进行查看、处理、分析、挖掘。&lt;/p&gt; &#xA;&lt;p&gt;Navicat是一套可创建多个连接的数据库管理工具，用以方便管理 MySQL、Oracle、PostgreSQL、SQLite、SQL Server、MariaDB 和 MongoDB 等不同类型的数据库&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;（1）在官网 https://www.navicat.com.cn/download/navicat-premium 下载安装包，一键安装即可。&#xA;&#xA;（2）然后下载破解补丁: https://pan.baidu.com/s/18XpTHrm9OiLEl3u6z_uxnw 提取码: 8888 ，破解即可。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.配置数据库&lt;/h3&gt; &#xA;&lt;p&gt;一般可能会修改的信息是”数据库访问密码“。&lt;/p&gt; &#xA;&lt;p&gt;修改database.py相关信息:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;db_host = &#34;localhost&#34;  # 数据库服务主机&#xA;db_user = &#34;root&#34;  # 数据库访问用户&#xA;db_password = &#34;root&#34;  # 数据库访问密码&#xA;db_port = 3306  # 数据库服务端口&#xA;db_charset = &#34;utf8mb4&#34;  # 数据库字符集&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.安装自动交易（可选）&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.安装交易软件&#xA;    1.1 通用同花顺客户端券商的客户&#xA;        通用同花顺客户端:&#xA;        https://activity.ths123.com/acmake/cache/1361.html&#xA;    1.2 专用同花顺客户端券商的客户&#xA;        自行去券商官网找同花顺专用版&#xA;        例如：广发的下载核新独立委托端(同花顺版):&#xA;        http://www.gf.com.cn/softdownload/index?tab=1&#xA;2.安装tesseract(自动识别验证码)&#xA;    第一种方法.下载编译好的&#xA;        在下面链接页，根据操作系统选择相应版本&#xA;        https://digi.bib.uni-mannheim.de/tesseract/&#xA;    第二种方法.用源码编译&#xA;        下载源码：https://github.com/tesseract-ocr/tesseract&#xA;    注意：&#xA;        安装完要将安装路径设置到PATH环境变量里。&#xA;        下面提供dos命令设置，以管理员身份运行cmd，输入:&#xA;        setx /m PATH &#34;%PATH%;C:\Program Files\Tesseract-OCR&#34;&#xA;3.设置交易配置   &#xA;    3.1.修改trade_client.json&#xA;        &#34;user&#34;: &#34;888888888888&#34;,               #交易账号&#xA;        &#34;password&#34;: &#34;888888&#34;,                 #交易密码&#xA;        &#34;exe_path&#34;: &#34;C:/gfzqrzrq/xiadan.exe&#34;  #交易软件路径&#xA;    3.2.修改trade_service.py&#xA;        broker = &#39;gf_client&#39; #这是广发&#xA;        详情参阅usage.md，配置对应券商&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;8.运行说明&lt;/h3&gt; &#xA;&lt;h4&gt;8.1.执行数据抓取、处理、分析、识别&lt;/h4&gt; &#xA;&lt;p&gt;支持批量作业，具体参见run_job.bat中的注释说明。&lt;/p&gt; &#xA;&lt;p&gt;建议将其加入到任务计划中，工作日的每天17：00执行。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;数据抓取、处理原则：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;1).开盘即有且无历史数据的：综合选股、每日股票数据、股票资金流向、股票分红配送、龙虎榜、每日ETF数据；&lt;/p&gt; &#xA;&lt;p&gt;2).收盘即有且有历史数据的：股票指标数据、股票K线形态、股票策略数据；&lt;/p&gt; &#xA;&lt;p&gt;3).收盘后1~2小时才有且有历史数据的：大宗交易。&lt;/p&gt; &#xA;&lt;p&gt;运行run_job.bat，会依据上面原则获取各模块当前或前个交易日的数据。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;运行 run_job.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若想看开盘后的当前实时数据，可以运行下面，很快大概1秒：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#基础数据作业 &#xA;python basic_data_daily_job.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8.2.启动web服务&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;运行 run_web.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动服务后，打开浏览器，输入：&lt;a href=&#34;http://localhost:9988/&#34;&gt;http://localhost:9988/&lt;/a&gt; ，即可使用本系统的可视化功能。&lt;/p&gt; &#xA;&lt;h4&gt;8.3.启动交易服务&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;运行 run_trade.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;二：docker镜像安装方式&lt;/h2&gt; &#xA;&lt;p&gt;没有docker环境，可以参考：&lt;a href=&#34;https://www.ljjyy.com/archives/2019/10/100590.html&#34;&gt;VirtualBox虚拟机安装Ubuntu&lt;/a&gt;，里面也介绍了python、docker等常用软件的安装，若想在Windows下安装docker自行百度。&lt;/p&gt; &#xA;&lt;h3&gt;1.安装数据库镜像&lt;/h3&gt; &#xA;&lt;p&gt;如果已经有Mysql、mariadb数据库可以跳过本步。&lt;/p&gt; &#xA;&lt;p&gt;运行下面命令：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;特别提醒：执行命令的用户要有root权限，其他命令也如此。例如：ubuntu系统在命令前加上sudo&lt;/strong&gt; ，sudo docker......&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d --name InStockDbService \&#xA;    -v /data/mariadb/data:/var/lib/instockdb \&#xA;    -e MYSQL_ROOT_PASSWORD=root \&#xA;    library/mariadb:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.安装本系统镜像&lt;/h3&gt; &#xA;&lt;p&gt;a.若按上面【1.安装数据库镜像】装的数据库，运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -dit --name InStock --link=InStockDbService \&#xA;    -p 9988:9988 \&#xA;    -e db_host=InStockDbService \&#xA;    mayanghua/instock:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b.已经有Mysql、mariadb数据库，运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -dit --name InStock \&#xA;    -p 9988:9988 \&#xA;    -e db_host=localhost \&#xA;    -e db_user=root \&#xA;    -e db_password=root \&#xA;    -e db_database=instockdb \&#xA;    -e db_port=3306 \&#xA;    mayanghua/instock:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;docker -e 参数说明：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;db_host       # 数据库服务主机&#xA;db_user       # 数据库访问用户&#xA;db_password   # 数据库访问密码&#xA;db_database   # 数据库名称&#xA;db_port       # 数据库服务端口&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;按自己数据库实际情况配置参数。&lt;/p&gt; &#xA;&lt;h3&gt;3. 系统运行&lt;/h3&gt; &#xA;&lt;p&gt;启动容器后，会自动运行，首先会初始化数据、启动web服务。然后每小时执行“基础数据抓取”，每天17:30执行所有的数据抓取、处理、分析、识别、回测。&lt;/p&gt; &#xA;&lt;p&gt;打开浏览器，输入：&lt;a href=&#34;http://localhost:9988/&#34;&gt;http://localhost:9988/&lt;/a&gt; ，即可使用本系统的可视化功能。&lt;/p&gt; &#xA;&lt;h3&gt;4.历史数据&lt;/h3&gt; &#xA;&lt;p&gt;历史数据抓取、处理、分析、识别、回测，运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it InStock bash &#xA;cat InStock/instock/bin/run_job.sh&#xA;#查看run_job.sh注释,自己选择作业&#xA;------整体作业，支持批量作业------&#xA;当前时间作业 python execute_daily_job.py&#xA;单个时间作业 python execute_daily_job.py 2022-03-01&#xA;枚举时间作业 python execute_daily_job.py 2022-01-01,2021-02-08,2022-03-12&#xA;区间时间作业 python execute_daily_job.py 2022-01-01 2022-03-01&#xA;------单功能作业，支持批量作业，回测数据自动填补到当前&#xA;综合选股作业 python selection_data_daily_job.py&#xA;基础数据实时作业 python basic_data_daily_job.py&#xA;基础数据收盘2小时后作业 python backtest_data_daily_job.py&#xA;基础数据非实时作业 python basic_data_other_daily_job.py&#xA;指标数据作业 python indicators_data_daily_job.py&#xA;K线形态作业 klinepattern_data_daily_job.py&#xA;策略数据作业 python strategy_data_daily_job.py&#xA;回测数据 python backtest_data_daily_job.py&#xA;第一种方法：&#xA;python execute_daily_job.py 2023-03-01,2023-03-02&#xA;第二种方法：&#xA;修改run_job.sh，然后运行 bash InStock/instock/bin/run_job.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.查看日志&lt;/h3&gt; &#xA;&lt;p&gt;运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it InStock bash &#xA;cat InStock/instock/log/stock_execute_job.log&#xA;cat InStock/instock/log/stock_web.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.docker常用命令&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container stop InStock InStockDbService&#xA;#停止容器&#xA;docker container prune&#xA;#回收容器&#xA;docker rmi mayanghua/instock:latest library/mariadb:latest&#xA;#删除镜像&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;具体参见：&lt;a href=&#34;https://www.ljjyy.com/archives/2018/06/100208.html&#34;&gt;Docker基础之 二.镜像及容器的基本操作&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7.自动交易&lt;/h3&gt; &#xA;&lt;p&gt;目前只支持windows。参考常规安装方式,只需安装python、依赖库，&lt;strong&gt;不需安装mysql、talib等&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;特别声明&lt;/h1&gt; &#xA;&lt;p&gt;股市有风险投资需谨慎，本系统只能用于学习、股票分析，投资盈亏概不负责。&lt;/p&gt; &#xA;&lt;p&gt;本系统中的表格为第三方商业控件，仅使用了评估版进行学习及测试。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Alamofire/Alamofire</title>
    <updated>2024-11-29T01:28:48Z</updated>
    <id>tag:github.com,2024-11-29:/Alamofire/Alamofire</id>
    <link href="https://github.com/Alamofire/Alamofire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant HTTP Networking in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/AlamofireLogo.png&#34; alt=&#34;Alamofire: Elegant Networking in Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/badge/Swift-5.9_5.10_6.0-Orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.9_5.10_6.0-orange?style=flat-square&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_vision_OS_Linux_Windows_Android-Green?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_visionOS_Linux_Windows_Android-yellowgreen?style=flat-square&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/Alamofire.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire/37&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Forums-Alamofire-orange?style=flat-square&#34; alt=&#34;Swift Forums&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#component-libraries&#34;&gt;Component Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#using-alamofire&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#introduction&#34;&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#making-requests&#34;&gt;Making Requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-handling&#34;&gt;Response Handling&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-validation&#34;&gt;Response Validation&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-caching&#34;&gt;Response Caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-methods&#34;&gt;HTTP Methods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#%23request-parameters-and-parameter-encoders&#34;&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-headers&#34;&gt;HTTP Headers&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#downloading-data-to-a-file&#34;&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#uploading-data-to-a-server&#34;&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#statistical-metrics&#34;&gt;Statistical Metrics&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#curl-command-output&#34;&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#session&#34;&gt;Session Manager&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#sessiondelegate&#34;&gt;Session Delegate&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#request&#34;&gt;Request&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#routing-requests&#34;&gt;Routing Requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests-with-requestinterceptor&#34;&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#customizing-response-handlers&#34;&gt;Custom Response Handlers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Advanced Concurrency -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-swift-concurrency&#34;&gt;Swift Concurrency&lt;/a&gt; and &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-combine&#34;&gt;Combine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#security&#34;&gt;Security&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#network-reachability&#34;&gt;Network Reachability&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#open-radars&#34;&gt;Open Radars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chainable Request / Response Methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Swift Concurrency Support Back to iOS 13, macOS 10.15, tvOS 13, and watchOS 6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Combine Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; URL / JSON Parameter Encoding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download File using Request or Resume Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication with &lt;code&gt;URLCredential&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Response Validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload and Download Progress Closures with Progress&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cURL Command Output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamically Adapt and Retry Requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TLS Certificate and Public Key Pinning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Network Reachability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://alamofire.github.io/Alamofire&#34;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Write Requests Fast!&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire&#39;s compact syntax and extensive feature set allow requests with powerful features like automatic retry to be written in just a few lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Automatic String to URL conversion, Swift concurrency support, and automatic retry.&#xA;let response = await AF.request(&#34;https://httpbin.org/get&#34;, interceptor: .retryPolicy)&#xA;                       // Automatic HTTP Basic Auth.&#xA;                       .authenticate(username: &#34;user&#34;, password: &#34;pass&#34;)&#xA;                       // Caching customization.&#xA;                       .cacheResponse(using: .cache)&#xA;                       // Redirect customization.&#xA;                       .redirect(using: .follow)&#xA;                       // Validate response code and Content-Type.&#xA;                       .validate()&#xA;                       // Produce a cURL command for the request.&#xA;                       .cURLDescription { description in&#xA;                         print(description)&#xA;                       }&#xA;                       // Automatic Decodable support with background parsing.&#xA;                       .serializingDecodable(DecodableType.self)&#xA;                       // Await the full response with metrics and a parsed body.&#xA;                       .response&#xA;// Detailed response description for easy debugging.&#xA;debugPrint(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Component Libraries&lt;/h2&gt; &#xA;&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href=&#34;https://github.com/Alamofire/Foundation&#34;&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/AlamofireImage&#34;&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache, and a priority-based image downloading system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/AlamofireNetworkActivityIndicator&#34;&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Swift Version&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/td&gt; &#xA;   &lt;td&gt;5.9 / Xcode 15.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#manually&#34;&gt;Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fully Tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Known Issues on Linux and Windows&lt;/h4&gt; &#xA;&lt;p&gt;Alamofire builds on Linux, Windows, and Android but there are missing features and many issues in the underlying &lt;code&gt;swift-corelibs-foundation&lt;/code&gt; that prevent full functionality and may cause crashes. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ServerTrustManager&lt;/code&gt; and associated certificate functionality is unavailable, so there is no certificate pinning and no client certificate support.&lt;/li&gt; &#xA; &lt;li&gt;Various methods of HTTP authentication may crash, including HTTP Basic and HTTP Digest. Crashes may occur if responses contain server challenges.&lt;/li&gt; &#xA; &lt;li&gt;Cache control through &lt;code&gt;CachedResponseHandler&lt;/code&gt; and associated APIs is unavailable, as the underlying delegate methods aren&#39;t called.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; are never gathered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebSocketRequest&lt;/code&gt; is not available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Due to these issues, Alamofire is unsupported on Linux, Windows, and Android. Please report any crashes to the &lt;a href=&#34;https://bugs.swift.org&#34;&gt;Swift bug reporter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%205.0%20Migration%20Guide.md&#34;&gt;Alamofire 5.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%204.0%20Migration%20Guide.md&#34;&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%203.0%20Migration%20Guide.md&#34;&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%202.0%20Migration%20Guide.md&#34;&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/alamofire&#34;&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href=&#34;http://alamofire.github.io/Alamofire/&#34;&gt;our documentation&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/documentation/foundation/url_loading_system&#34;&gt;Apple&#39;s documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt; &#xA; &lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt; or the Package list in Xcode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/Alamofire/Alamofire.git&#34;, .upToNextMajor(from: &#34;5.10.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normally you&#39;ll want to depend on the &lt;code&gt;Alamofire&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.product(name: &#34;Alamofire&#34;, package: &#34;Alamofire&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But if you want to force Alamofire to be dynamically linked (do not do this unless you&#39;re sure you need it), you can depend on the &lt;code&gt;AlamofireDynamic&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.product(name: &#34;AlamofireDynamic&#34;, package: &#34;Alamofire&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Alamofire&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Alamofire/Alamofire&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt; &#xA;&lt;h4&gt;Embedded Framework&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &#34;if&#34; your project is not initialized as a git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Alamofire as a git &lt;a href=&#34;https://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt;, or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before contributing to Alamofire, please read the instructions detailed in our &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open Radars&lt;/h2&gt; &#xA;&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openradar.me/radar?id=5517037090635776&#34;&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in the test case&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resolved Radars&lt;/h2&gt; &#xA;&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openradar.me/radar?id=5010235949318144&#34;&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://openradar.appspot.com/radar?id=4942308441063424&#34;&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FB7624529&lt;/code&gt; - &lt;code&gt;urlSession(_:task:didFinishCollecting:)&lt;/code&gt; never called on watchOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): Metrics now collected on watchOS 7+.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;What&#39;s the origin of the name Alamofire?&lt;/h3&gt; &#xA;&lt;p&gt;Alamofire is named after the &lt;a href=&#34;https://aggie-horticulture.tamu.edu/wildseed/alamofire.html&#34;&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire is owned and maintained by the &lt;a href=&#34;http://alamofire.org&#34;&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href=&#34;https://twitter.com/AlamofireSF&#34;&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt; &#xA;&lt;h3&gt;Security Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href=&#34;mailto:security@alamofire.org&#34;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/Alamofire/Foundation#members&#34;&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization. Registering will allow Foundation members to gain some legal protections and also allow us to put donations to use, tax-free. Sponsoring the ASF will enable us to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt; &#xA; &lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt; &#xA; &lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt; &#xA; &lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The community adoption of the ASF libraries has been amazing. We are greatly humbled by your enthusiasm around the projects and want to continue to do everything we can to move the needle forward. With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members. If you use any of our libraries for work, see if your employers would be interested in donating. Any amount you can donate, whether once or monthly, to help us reach our goal would be greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/Alamofire&#34;&gt;Sponsor Alamofire&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://macstadium.com&#34;&gt;MacStadium&lt;/a&gt; provides Alamofire with a free, hosted Mac mini.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/MacStadiumLogo.png&#34; alt=&#34;Powered by MacStadium&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire is released under the MIT license. &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/LICENSE&#34;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>