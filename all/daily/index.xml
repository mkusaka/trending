<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-16T01:24:17Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PWhiddy/PokemonRedExperiments</title>
    <updated>2023-10-16T01:24:17Z</updated>
    <id>tag:github.com,2023-10-16:/PWhiddy/PokemonRedExperiments</id>
    <link href="https://github.com/PWhiddy/PokemonRedExperiments" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Playing Pokemon Red with Reinforcement Learning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Train RL agents to play Pokemon Red!&lt;/h1&gt; &#xA;&lt;a href=&#34;https://youtu.be/DcYLT37ImBY&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PWhiddy/PokemonRedExperiments/master/assets/poke_map.gif?raw=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Watch the &lt;a href=&#34;https://youtu.be/DcYLT37ImBY&#34;&gt;Video on Youtube!&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;a href=&#34;https://youtu.be/DcYLT37ImBY&#34;&gt; &lt;img src=&#34;/assets/Pokemon YT5 FFFFinal.jpg?raw=true&#34; width=&#34;256&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Running the Pretrained Model Interactively üéÆ&lt;/h2&gt; &#xA;&lt;p&gt;üêç Python 3.10 is recommended. Other versions may work but have not been tested.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy your legally obtained Pokemon Red ROM into the base directory. You can find this using google, it should be 1MB. Rename it to &lt;code&gt;PokemonRed.gb&lt;/code&gt; if it is not already. The sha1 sum should be &lt;code&gt;ea9bcae617fdf159b045185467ae58b2e4a48b9a&lt;/code&gt;, which you can verify by running &lt;code&gt;shasum PokemonRed.gb&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Move into the &lt;code&gt;baselines/&lt;/code&gt; directory:&lt;br&gt; &lt;code&gt;cd baselines&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies:&lt;br&gt; &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;br&gt; It may be necessary in some cases to separately install the SDL libraries.&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;br&gt; &lt;code&gt;python run_pretrained_interactive.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default the game with terminate after 32K steps, or ~1 hour. You can increase this by adjusting the &lt;code&gt;ep_length&lt;/code&gt; variable, but it will also use more memory.&lt;/p&gt; &#xA;&lt;p&gt;Interact with the emulator using the arrow keys and the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt; keys (A and B buttons).&lt;br&gt; You can pause the AI&#39;s input during the game by editing &lt;code&gt;agent_enabled.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: the Pokemon.gb file MUST be in the main directory and your current directory MUST be the &lt;code&gt;baselines/&lt;/code&gt; directory in order for this to work.&lt;/p&gt; &#xA;&lt;h2&gt;Training the Model üèãÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;Note: By default this can use up to ~100G of RAM. You can decrease this by reducing the &lt;code&gt;num_cpu&lt;/code&gt; or &lt;code&gt;ep_length&lt;/code&gt;, but it may affect the results. Also, the model behavior may become degenerate for up to the first 50 training iterations or so before starting to improve. This could likely be fixed with better hyperparameters but I haven&#39;t had the time or resources to sweep these.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Previous steps 1-3&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;br&gt; &lt;code&gt;python run_baseline_parallel.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tracking Training Progress üìà&lt;/h2&gt; &#xA;&lt;p&gt;You can view the current state of each emulator, plot basic stats, and compare to previous runs using the &lt;code&gt;VisualizeProgress.ipynb&lt;/code&gt; notebook.&lt;/p&gt; &#xA;&lt;h2&gt;Extra üêú&lt;/h2&gt; &#xA;&lt;p&gt;Map visualization code can be found in &lt;code&gt;visualization/&lt;/code&gt; directory.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iam-veeramalla/python-for-devops</title>
    <updated>2023-10-16T01:24:17Z</updated>
    <id>tag:github.com,2023-10-16:/iam-veeramalla/python-for-devops</id>
    <link href="https://github.com/iam-veeramalla/python-for-devops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn Python from DevOps Engineer point of you.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python Zero to Hero for DevOps Engineers&lt;/h1&gt; &#xA;&lt;img width=&#34;1141&#34; alt=&#34;Screenshot 2023-10-12 at 9 57 40 PM&#34; src=&#34;https://github.com/iam-veeramalla/python-for-devops/assets/43399466/d70f5fe2-0ba3-449d-b41f-413a38fc4584&#34;&gt; &#xA;&lt;h2&gt;Day 1: Introduction to Python, Installation, and Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to Python and its role in DevOps.&lt;/li&gt; &#xA; &lt;li&gt;Installing Python and setting up a development environment.&lt;/li&gt; &#xA; &lt;li&gt;Writing your first Python program.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 2: Working with Strings and Numbers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String data type in Python.&lt;/li&gt; &#xA; &lt;li&gt;String manipulation and formatting.&lt;/li&gt; &#xA; &lt;li&gt;Regular expressions for text processing.&lt;/li&gt; &#xA; &lt;li&gt;Numeric data types in Python (int, float).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 3: Variables&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understanding variables in Python.&lt;/li&gt; &#xA; &lt;li&gt;Variable scope and lifetime.&lt;/li&gt; &#xA; &lt;li&gt;Variable naming conventions and best practices.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Using variables to store and manipulate configuration data in a DevOps context.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 4: Functions, Modules and Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What are differences between function, modules and packages ?&lt;/li&gt; &#xA; &lt;li&gt;How to import a package ?&lt;/li&gt; &#xA; &lt;li&gt;What are Python workspaces ?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 5: Environment Variables and Command Line Arguments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reading and writing environment variables in Python.&lt;/li&gt; &#xA; &lt;li&gt;Using the os and dotenv modules.&lt;/li&gt; &#xA; &lt;li&gt;Securing sensitive information in environment variables.&lt;/li&gt; &#xA; &lt;li&gt;Handling command line arguments in Python.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Developing a Python script that accepts command line arguments to customize DevOps automation tasks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 6: Operators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to operators in Python.&lt;/li&gt; &#xA; &lt;li&gt;Arithmetic, comparison, and logical operators.&lt;/li&gt; &#xA; &lt;li&gt;Bitwise and assignment operators.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Using operators to perform calculations and comparisons in a DevOps script.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 7: Conditional Handling using if, elif and else&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conditional statements (if, elif, else).&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Automating a server shutdown if it&#39;s running out of disk space.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 8: Working with Lists (Part 1)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understanding lists and list data structure.&lt;/li&gt; &#xA; &lt;li&gt;List manipulation and common list operations.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Writing a script to manage a list of user accounts in a DevOps environment.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 9: Loops&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Loops in Python (for and while).&lt;/li&gt; &#xA; &lt;li&gt;Loop control statements (break, continue).&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Automating a log file analysis with a loop to find errors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 10: Working with Lists (Part 2)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List comprehensions.&lt;/li&gt; &#xA; &lt;li&gt;Nested lists and advanced list operations.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Parsing a complex configuration file with nested lists.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 11: Working with Dictionaries and Sets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dictionaries and key-value pairs.&lt;/li&gt; &#xA; &lt;li&gt;Sets and set operations.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Managing a dictionary of server configurations and optimizing retrieval.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 12: Functions and Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to functions in Python.&lt;/li&gt; &#xA; &lt;li&gt;Writing functions and function parameters.&lt;/li&gt; &#xA; &lt;li&gt;Return values and modular code.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Creating a function to automate server status checks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 13: Functions and Modules (Part 2)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced function topics (recursion, lambda functions).&lt;/li&gt; &#xA; &lt;li&gt;Function libraries and built-in functions.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Developing a library of custom functions for DevOps automation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 14: Python Libraries for DevOps (Part 1)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to external libraries like Paramiko, Fabric, and Boto3.&lt;/li&gt; &#xA; &lt;li&gt;Automating SSH connections with Paramiko.&lt;/li&gt; &#xA; &lt;li&gt;Running commands on remote servers.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Using Paramiko to create a secure remote backup solution.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 15: Python Libraries for DevOps (Part 2)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using Fabric for remote task automation.&lt;/li&gt; &#xA; &lt;li&gt;AWS automation with Boto3.&lt;/li&gt; &#xA; &lt;li&gt;Managing EC2 instances, S3 buckets, and more.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Creating a Fabric script for deploying applications to remote servers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 16: Working with RESTful APIs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to RESTful APIs.&lt;/li&gt; &#xA; &lt;li&gt;Making HTTP requests using Python.&lt;/li&gt; &#xA; &lt;li&gt;Parsing JSON responses and error handling.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Developing a script to monitor RESTful API endpoints for your DevOps tools.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 17: Data Serialization and Configuration Files&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serializing and deserializing data (JSON, YAML).&lt;/li&gt; &#xA; &lt;li&gt;Managing configuration data.&lt;/li&gt; &#xA; &lt;li&gt;DevOps use cases for configuration files.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Building a configuration manager to handle application settings in JSON format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 18: Automation with Cron Jobs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scheduling automated tasks using cron.&lt;/li&gt; &#xA; &lt;li&gt;Creating Python scripts for scheduled automation.&lt;/li&gt; &#xA; &lt;li&gt;Handling periodic tasks and reports.&lt;/li&gt; &#xA; &lt;li&gt;Practice exercises and examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: Using cron and Python to schedule regular backups of your data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Day 19: Python Interview Questions &amp;amp; Answers&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>adrianhajdin/travel_ui_ux</title>
    <updated>2023-10-16T01:24:17Z</updated>
    <id>tag:github.com,2023-10-16:/adrianhajdin/travel_ui_ux</id>
    <link href="https://github.com/adrianhajdin/travel_ui_ux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build and Deploy a Fully Responsive Modern UI/UX Website, React.js, Next.js 13, Tailwind CSS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Build and Deploy a Fully Responsive Modern UI/UX Website | React.js, Next.js 13, Tailwind CSS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/cuzw4vL1z5E&#34;&gt;&lt;img src=&#34;https://i.ibb.co/wrGZhPP/YT-Thumbnails-5.png&#34; alt=&#34;Travel Website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;If you‚Äôve ever struggled with creating a sleek UI that also performs flawlessly, you&#39;re not alone.&lt;/p&gt; &#xA;&lt;p&gt;Your stunning travel will include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An appealing hero section&lt;/li&gt; &#xA; &lt;li&gt;A camp section featuring various camps to explore&lt;/li&gt; &#xA; &lt;li&gt;An engaging travel guide section&lt;/li&gt; &#xA; &lt;li&gt;A complex feature-rich section&lt;/li&gt; &#xA; &lt;li&gt;A call to action section for mobile apps&lt;/li&gt; &#xA; &lt;li&gt;And a big footer section with many site and social links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, is this just a simple landing page? Not at all.&lt;/p&gt; &#xA;&lt;p&gt;While developing the app, you‚Äôll:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;implement Next.js 13 most modern best practices&lt;/li&gt; &#xA; &lt;li&gt;improve your code architecture and make your components reusable&lt;/li&gt; &#xA; &lt;li&gt;utilize Tailwind CSS&lt;/li&gt; &#xA; &lt;li&gt;start with the mobile-first approach for maximum responsiveness&lt;/li&gt; &#xA; &lt;li&gt;make use of TypeScript&lt;/li&gt; &#xA; &lt;li&gt;and many more best practices that set you apart in the industry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The only thing you need to follow along? The basics of React.&lt;/p&gt; &#xA;&lt;p&gt;So, &lt;a href=&#34;https://youtu.be/cuzw4vL1z5E&#34;&gt;watch the video now&lt;/a&gt; because we‚Äôll start simple and go through each of these skills step by step with in-depth explanations so you‚Äôll not only learn the fundamentals but be able to create your own amazing Next.js, Tailwind, and TypeScript-powered applications.&lt;/p&gt; &#xA;&lt;p&gt;And don&#39;t overlook the fact that, by the end of this video, you&#39;ll have an impressive project ready to be featured in your portfolio and impress your friends, clients, and even potential employers.&lt;/p&gt; &#xA;&lt;h2&gt;Want to land your dream programming job in 3 - 6 months?&lt;/h2&gt; &#xA;&lt;p&gt;‚≠ê JSM Masterclass Experience - &lt;a href=&#34;https://jsmastery.pro/masterclass&#34;&gt;https://jsmastery.pro/masterclass&lt;/a&gt; Become a Software Engineer. Guaranteed.&lt;/p&gt;</summary>
  </entry>
</feed>