<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-10T01:30:48Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kyujin-cho/pixel-volte-patch</title>
    <updated>2023-02-10T01:30:48Z</updated>
    <id>tag:github.com,2023-02-10:/kyujin-cho/pixel-volte-patch</id>
    <link href="https://github.com/kyujin-cho/pixel-volte-patch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rootless replacement for persist.dbg.volte_avail_ovr patch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pixel 6 &amp;amp; 7 LG U+ VoLTE 활성화&lt;/h1&gt; &#xA;&lt;p&gt;English version available &lt;a href=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/README.en.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;개요&lt;/h2&gt; &#xA;&lt;p&gt;이 문서에서는 Android 내부 API 중 &lt;code&gt;telephony.ICarrierConfigLoader.overrideConfig()&lt;/code&gt; API를 이용하여 루팅 혹은 부트로더 변조 없이 LG U+ 회선에서의 VoLTE (IMS) 기능을 활성화 하는 법에 대해 설명합니다.&lt;/p&gt; &#xA;&lt;h2&gt;적용 방법&lt;/h2&gt; &#xA;&lt;h3&gt;준비물&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Google Tensor Chipset이 적용되었으며 Android 11 이상이 설치된 Pixel 단말기 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Google Pixel 6&lt;/li&gt; &#xA;   &lt;li&gt;Google Pixel 6a&lt;/li&gt; &#xA;   &lt;li&gt;Google Pixel 6 Pro&lt;/li&gt; &#xA;   &lt;li&gt;Google Pixel 7&lt;/li&gt; &#xA;   &lt;li&gt;Google Pixel 7 Pro&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/command-line/adb&#34;&gt;Android Platform Tools&lt;/a&gt; 이 설치된 Windows, macOS 혹은 Linux 컴퓨터&lt;/li&gt; &#xA; &lt;li&gt;데이터 통신이 가능한 USB-A to USB-C 혹은 USB-C to USB-C 케이블&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shizuku 설치&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shizuku.rikka.app/&#34;&gt;Shizuku&lt;/a&gt; 는 ADB 혹은 루트 권한으로 동작하는 서비스를 통하여 일반적인 경로로는 접근할 수 없는 시스템 API를 호출할 수 있도록 하는 서비스입니다. 이 방법을 사용하기 위해서는 시스템 API의 호출이 필요합니다.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;VoLTE 패치를 적용할 Pixel 단말기의 Google Play Store 를 실행한 후 &lt;a href=&#34;https://play.google.com/store/apps/details?id=moe.shizuku.privileged.api&#34;&gt;Shizuku&lt;/a&gt; 어플리케이션을 설치합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035249.png&#34; alt=&#34;image-1&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;설치한 Shizuku 어플리케이션을 실행합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035312.png&#34; alt=&#34;image-2&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pixel 단말기와 컴퓨터 간 ADB 통신이 가능한 상태로 준비 후 Pixel 단말기와 컴퓨터를 연결합니다. ADB 통신이 가능한 상태로 준비하는 방법에 대해서는 &lt;a href=&#34;https://shizuku.rikka.app/guide/setup/#start-by-connecting-to-a-computer&#34;&gt;Shizuku 문서 (영문)&lt;/a&gt; 을 참고하세요.&lt;/li&gt; &#xA; &lt;li&gt;다음 명령어를 입력하여 Shizuku 서비스를 실행합니다.&lt;br&gt; &lt;code&gt;adb shell sh /sdcard/Android/data/moe.shizuku.privileged.api/start.sh&lt;/code&gt; &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot%202023-02-06%20at%203.54.00%20AM.png&#34; alt=&#34;image-3&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shizuku 어플리케이션의 화면에 다음과 같은 문구가 표시되는 것을 확인합니다. &lt;pre&gt;&lt;code&gt;Shizuku is running&#xA;Version &amp;lt;임의의 버전 번호&amp;gt;, adb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035351.png&#34; alt=&#34;image-4&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;이제 케이블을 연결한 채로 다음 단계로 이동합니다.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;패치 어플리케이션 설치&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyujin-cho/pixel-volte-patch/releases/download/1.2.0/dev.bluehouse.enablevolte.apk&#34;&gt;다음 링크&lt;/a&gt; 혹은 이 Github Repository의 Releases 탭으로 이동하여 최신 패치 어플리케이션의 설치를 위한 APK 파일을 Pixel 단말기에 다운로드 받습니다.&lt;/li&gt; &#xA; &lt;li&gt;다운로드 받은 APK 파일을 설치합니다.&lt;/li&gt; &#xA; &lt;li&gt;설치한 어플리케이션을 실행합니다.&lt;/li&gt; &#xA; &lt;li&gt;다음과 같이 Shizuku 권한을 묻는 팝업 창이 뜰 경우 &#34;모든 경우에 허용&#34; 을 선택합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230208-235239.png&#34; alt=&#34;image-5&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;VoLTE를 활성화 할 SIM의 페이지로 이동합니다. &#34;Enable VoLTE&#34; 토글을 활성화합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230208-234343.png&#34; alt=&#34;image-6&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;VoLTE가 작동하는 것을 확인할 때 까지 5분 간격으로 2-3회 Pixel 기기를 다시 시작합니다.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;자주 묻는 질문&lt;/h2&gt; &#xA;&lt;h3&gt;추가적인 질문, 건의 사항, 버그 제보 등이 있습니다.&lt;/h3&gt; &#xA;&lt;p&gt;이 패치에 대해 문의할 사항이 있으시면 다음 기능을 활용해 주세요. 목적을 구분하지 않은 게시글 작성의 경우 삭제될 수 있습니다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;버그 제보, 기능 추가 요청: &lt;a href=&#34;https://github.com/kyujin-cho/pixel-volte-patch&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;그 외의 모든 것: &lt;a href=&#34;https://github.com/kyujin-cho/pixel-volte-patch/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;U+ 이외의 다른 통신사를 사용하는 경우에도 VoLTE 패치가 가능한가요?&lt;/h3&gt; &#xA;&lt;p&gt;아니오. 지원 대상은 LG U+ 및 U+ 통신망을 사용하는 MVNO (알뜰폰) 으로 한정됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;VoLTE가 적용되었는지 확인 가능한 방법이 있나요?&lt;/h3&gt; &#xA;&lt;p&gt;어플리케이션의 Home 페이지에서 &lt;code&gt;IMS Status&lt;/code&gt; 항목이 &lt;code&gt;Registered&lt;/code&gt; 이면 VoLTE가 성공적으로 활성화 된 것입니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230208-234340.png&#34; alt=&#34;image-7&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;더욱 상세한 정보가 필요할 경우, Pixel 단말기에 내장 제공되는 통신 정보 확인용 내부 어플리케이션을 이용할 수 있습니다.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pixel 단말기의 기본 전화 어플리케이션을 실행합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035705.png&#34; alt=&#34;image-8&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;키패드에서 &lt;code&gt;*#*#4636#*#*&lt;/code&gt; 키를 차례대로 입력합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035701.png&#34; alt=&#34;image-9&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Phone information&#34; 항목을 터치합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035650.png&#34; alt=&#34;image-10&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;우측 상단의 삼점 메뉴를 터치 후 &#34;IMS Service Status&#34; 항목을 터치합니다. &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-030524.png&#34; alt=&#34;image-11&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;다음과 같은 문구가 표시된다면 VoLTE가 활성화 된 것입니다.&lt;br&gt; &lt;code&gt;IMS Registration: Registered&lt;/code&gt; &lt;img src=&#34;https://github.com/kyujin-cho/pixel-volte-patch/raw/main/assets/Screenshot_20230206-035645.png&#34; alt=&#34;image-12&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;해당 패치는 재부팅 시 마다 다시 실행하여야 하나요?&lt;/h3&gt; &#xA;&lt;p&gt;아니오.&lt;/p&gt; &#xA;&lt;h3&gt;해당 패치는 시스템 업데이트 시 마다 다시 실행하여야 하나요?&lt;/h3&gt; &#xA;&lt;p&gt;확실하지 않습니다.&lt;/p&gt; &#xA;&lt;h3&gt;해당 패치의 작동 원리가 어떻게 되나요?&lt;/h3&gt; &#xA;&lt;p&gt;Android에서 VoLTE (IMS) 가 활성화 되기 위해서는 &lt;code&gt;ImsManager.isVolteEnabledByPlatform(Context)&lt;/code&gt; 메서드가 true를 반환해야 합니다. 해당 메서드의 구현을 살펴보면 다음과 같습니다 (ref: &lt;a href=&#34;https://android.googlesource.com/platform/frameworks/opt/net/ims/+/002b204/src/java/com/android/ims/ImsManager.java&#34;&gt;googlesource.com&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;persist.dbg.volte_avail_ovr&lt;/code&gt; System Property가 true인지 확인 (기존의 setprop을 이용한 VoLTE 패치 방식) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;그럴 경우 true 반환&lt;/li&gt; &#xA;   &lt;li&gt;아닐 경우 계속&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;기기 자체에서 VoLTE 기능을 지원하는지 확인 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;아닐 경우 false 반환&lt;/li&gt; &#xA;   &lt;li&gt;그럴 경우 계속&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;통신사에서 VoLTE 기능을 지원하는지 확인 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;아닐 경우 false 반환&lt;/li&gt; &#xA;   &lt;li&gt;그럴 경우 계속&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;통신사에서 IMS 활성화를 위해 GBA capable SIM을 요구하는지 확인 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;아닐 경우 true 반환&lt;/li&gt; &#xA;   &lt;li&gt;그럴 경우 계속&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;EF IST에 GBA bit이 활성화 되어 있는지 확인 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;그럴 경우 true 반환&lt;/li&gt; &#xA;   &lt;li&gt;아닐 경우 false 반환&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;대한민국에서 Tensor Chip을 탑재한 Pixel로 LG U+를 사용하려는 경우, 기기에서는 VoLTE를 지원하지만 통신사에서 자체 설정을 프로비전하지 않아 3번 &#34;통신사에서 VoLTE 기능을 지원하는지 확인&#34; 이 false로 처리되어 기기에서 IMS가 비활성화됩니다. LG U+의 경우에는 Pixel에 내장된 VoLTE 기능을 사용할 수 있지만 통신사의 추가적인 설정이 없어 VoLTE가 비활성화 되는 것이므로, 이 어플리케이션은 위에서 언급한 Shizuku와 &lt;code&gt;CarrierConfigLoader&lt;/code&gt;의 설정 강제 활성화 API를 조합하여 해당 설정을 강제로 true로 변경하여 시스템에서 VoLTE 활성화를 시도할 수 있도록 처리합니다.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shajen/rtl-sdr-scanner-cpp</title>
    <updated>2023-02-10T01:30:48Z</updated>
    <id>tag:github.com,2023-02-10:/shajen/rtl-sdr-scanner-cpp</id>
    <link href="https://github.com/shajen/rtl-sdr-scanner-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This project contains sdr scanner written in &lt;code&gt;c++&lt;/code&gt; to &lt;strong&gt;scan and record multiple interesting frequencies bandwidth in the same time&lt;/strong&gt; (eg. 108 MHz, 144 MHz, 440 Mhz, etc). This is possible by switching quickly between frequencies bandwidth.&lt;/p&gt; &#xA;&lt;p&gt;Sdr scanner also allows you to record multiple transmissions simultaneously (if they are transmitted on the same band). For example, if one transmission is on 145.200 MHz and the other is on 145.600 MHz, the scanner will record and save both!&lt;/p&gt; &#xA;&lt;p&gt;It also provides easy but very powerful &lt;strong&gt;web panel&lt;/strong&gt; to explore recordings and spectrograms.&lt;/p&gt; &#xA;&lt;h1&gt;Supported devices&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rtl-sdr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HackRF&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sample data collected&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=TSDbcb7wSjs&#34;&gt;YouTube video&lt;/a&gt; (old version)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spectrogram&lt;/th&gt; &#xA;   &lt;th&gt;Transmission&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/spectrograms.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/transmissions.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/spectrogram.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/transmission.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;h2&gt;Install docker&lt;/h2&gt; &#xA;&lt;p&gt;If you do not have &lt;code&gt;docker&lt;/code&gt; installed, follow the instructions available at &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;https://docs.docker.com/desktop/&lt;/a&gt; to install &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Download sample configuration and docker file, then run it. Customize &lt;code&gt;config.json&lt;/code&gt; to your needs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p sdr&#xA;cd sdr&#xA;wget https://github.com/shajen/rtl-sdr-scanner-cpp/raw/master/config.json&#xA;wget https://github.com/shajen/rtl-sdr-scanner-cpp/raw/master/docker-compose.yml&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update docker images to latest version type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also remember to update &lt;code&gt;docker-compose.yml&lt;/code&gt; and &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Panel&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:8000/sdr/spectrograms/&#34;&gt;http://localhost:8000/sdr/spectrograms/&lt;/a&gt; and wait for data to collect.&lt;/p&gt; &#xA;&lt;p&gt;Admin panel available at &lt;a href=&#34;http://localhost:8000/admin/&#34;&gt;http://localhost:8000/admin/&lt;/a&gt;. Username: &lt;code&gt;admin&lt;/code&gt;, password: &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;h2&gt;Blacklist kernel modules&lt;/h2&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;rtl-sdr&lt;/code&gt; remember to blacklist &lt;code&gt;rtl2832&lt;/code&gt; modules. Then reboot system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo nano /etc/modprobe.d/blacklist-rtl2832.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;blacklist rtl2832&#xA;blacklist dvb_usb_rtl28xxu&#xA;blacklist rtl2832_sdr&#xA;blacklist rtl8xxxu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RaspberryPi&lt;/h2&gt; &#xA;&lt;p&gt;Docker version should work on &lt;code&gt;RaspberryPi&lt;/code&gt;, but keep in mind that &lt;code&gt;RaspberryPi&lt;/code&gt; is &lt;strong&gt;not powefull machine&lt;/strong&gt; and is &lt;strong&gt;not good&lt;/strong&gt; for sdr data processing. &lt;code&gt;sdr&lt;/code&gt; device can produce &lt;strong&gt;40 megabytes per second&lt;/strong&gt;! It&#39;s a lot of data for &lt;code&gt;RaspberryPi&lt;/code&gt; to processing in real time. It&#39;s a lot of data even for some desktop computers.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do this, please replace the &lt;code&gt;SD&lt;/code&gt; card with a fast one and make sure you have a strong version of &lt;code&gt;RaspberryPi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Better idea is to build &lt;code&gt;sdr-scanner&lt;/code&gt; from sources via &lt;code&gt;cmake&lt;/code&gt; and run natively on &lt;code&gt;RaspberryPi&lt;/code&gt;. Next run &lt;code&gt;sdr-monitor&lt;/code&gt; and &lt;code&gt;mqtt-broker&lt;/code&gt; on any other machine (even in the cloud) and connect &lt;code&gt;sdr-scanner&lt;/code&gt; to them (you have to set valid mqtt data in &lt;code&gt;config.json&lt;/code&gt; and maybe manipulate in &lt;code&gt;docker-compose.yml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Noise learner&lt;/h2&gt; &#xA;&lt;p&gt;To auto-detect transmissions, sdr scanner has to learn noise level every run. It takes first &lt;code&gt;n&lt;/code&gt; seconds (defined in &lt;code&gt;config.json&lt;/code&gt; as &lt;code&gt;noise_learning_time_seconds&lt;/code&gt; default is &lt;code&gt;30&lt;/code&gt; seconds). So if any transmission will appear in this period it&#39;s may not be detected by scanner later.&lt;/p&gt; &#xA;&lt;h2&gt;Torn transmissions detector&lt;/h2&gt; &#xA;&lt;p&gt;Sdr scanner has feature to avoid recording torn transmission like below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/images/torn_transmission.png?raw=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It takes first &lt;code&gt;n&lt;/code&gt; seconds (defined in &lt;code&gt;config.json&lt;/code&gt; as &lt;code&gt;torn_transmission_learning_time_seconds&lt;/code&gt; default is &lt;code&gt;60&lt;/code&gt; seconds) seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Auto-recording&lt;/h2&gt; &#xA;&lt;p&gt;So sdr scanner starts auto-recording transsmions after &lt;code&gt;noise_learning_time_seconds&lt;/code&gt; + &lt;code&gt;torn_transmission_learning_time_seconds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Required resources&lt;/h2&gt; &#xA;&lt;p&gt;Using this software with &lt;code&gt;HackRF&lt;/code&gt; and &lt;code&gt;sample rate&lt;/code&gt; &lt;code&gt;10 MHz&lt;/code&gt; and above needs strong PC. In most casies, &lt;code&gt;Raspberry Pi&lt;/code&gt; will not be enough.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;HackRF&lt;/code&gt; with &lt;code&gt;sample rate&lt;/code&gt; &lt;code&gt;20 Mhz&lt;/code&gt; generates about &lt;code&gt;40 MB&lt;/code&gt; of data every second, and processing it in real-time needs a strong CPU with multiple cores and some memory resources.&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;p&gt;All of the following examples should be used in the &lt;code&gt;config.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;rtl-sdr&lt;/h2&gt; &#xA;&lt;h3&gt;single frequency range&lt;/h3&gt; &#xA;&lt;p&gt;To scan single frequency range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ppm and gain&lt;/h3&gt; &#xA;&lt;p&gt;To set &lt;code&gt;ppm&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;gain&lt;/code&gt; to &lt;code&gt;49.6&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;devices&#34;: {&#xA;    &#34;rtl_sdr&#34;: {&#xA;      &#34;ppm_error&#34;: 5,&#xA;      &#34;tuner_gain&#34;: 49.6,&#xA;      &#34;offset&#34;: 0&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HackRF&lt;/h2&gt; &#xA;&lt;h3&gt;single frequency range&lt;/h3&gt; &#xA;&lt;p&gt;To scan single frequency range:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 430000000,&#xA;          &#34;stop&#34;: 450000000,&#xA;          &#34;sample_rate&#34;: 20480000&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;gain&lt;/h3&gt; &#xA;&lt;p&gt;To set &lt;code&gt;lna&lt;/code&gt; to &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;gain&lt;/code&gt; to &lt;code&gt;42&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;devices&#34;: {&#xA;    &#34;hack_rf&#34;: {&#xA;      &#34;lna_gain&#34;: 16,&#xA;      &#34;vga_gain&#34;: 42,&#xA;      &#34;offset&#34;: 0&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignored frequencies&lt;/h2&gt; &#xA;&lt;p&gt;To ignore annoying frequency that you are not interested use &lt;code&gt;ignored_frequencies&lt;/code&gt;. For example to ignore frequency &lt;code&gt;144 Mhz&lt;/code&gt; with width &lt;code&gt;20 kHz&lt;/code&gt; and &lt;code&gt;145.350 Mhz&lt;/code&gt; with width &lt;code&gt;50 kHz&lt;/code&gt; use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;ignored_frequencies&#34;: [&#xA;    {&#xA;      &#34;frequency&#34;: 144000000,&#xA;      &#34;bandwidth&#34;: 20000&#xA;    },&#xA;    {&#xA;      &#34;frequency&#34;: 145350000,&#xA;      &#34;bandwidth&#34;: 50000&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use multipe devices&lt;/h2&gt; &#xA;&lt;p&gt;To use two dongles with serials &lt;code&gt;11111111&lt;/code&gt; and &lt;code&gt;22222222&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;11111111&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;22222222&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 440000000,&#xA;          &#34;stop&#34;: 442000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have multiple &lt;code&gt;rtl-sdr&lt;/code&gt; dongles with the same serial you can change it with &lt;code&gt;rtl_eeprom -s 12345678&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scan multipe frequencies ranges&lt;/h2&gt; &#xA;&lt;p&gt;To scan &lt;code&gt;144 Mhz - 146 Mhz&lt;/code&gt; and &lt;code&gt;440 Mhz - 442 Mhz&lt;/code&gt; in the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        },&#xA;        {&#xA;          &#34;start&#34;: 440000000,&#xA;          &#34;stop&#34;: 442000000,&#xA;          &#34;sample_rate&#34;: 2048000&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom fft&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to set custom fft on spectrogram.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;scanner_frequencies_ranges&#34;: [&#xA;    {&#xA;      &#34;device_serial&#34;: &#34;auto&#34;,&#xA;      &#34;ranges&#34;: [&#xA;        {&#xA;          &#34;start&#34;: 144000000,&#xA;          &#34;stop&#34;: 146000000,&#xA;          &#34;sample_rate&#34;: 2048000,&#xA;          &#34;fft&#34;: 16384&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;p&gt;If you have some problems with this software follow the steps to get debug log.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;&#34;console_log_level&#34;: &#34;trace&#34;&lt;/code&gt; in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run app normally by &lt;code&gt;docker compose up&lt;/code&gt;. After the error run &lt;code&gt;docker compose logs &amp;gt; logs.txt&lt;/code&gt;. Please attach &lt;code&gt;logs.txt&lt;/code&gt; if you create a new issue. Do not paste logs directly to issue. Upload it to any file host service (&lt;a href=&#34;https://file.io/&#34;&gt;https://file.io/&lt;/a&gt;, &lt;a href=&#34;https://pastebin.com/&#34;&gt;https://pastebin.com/&lt;/a&gt; or any you like).&lt;/p&gt; &#xA;&lt;h1&gt;Timezone&lt;/h1&gt; &#xA;&lt;p&gt;If timezone detection not work correctly and it seems to use &lt;code&gt;UTC&lt;/code&gt; instead your timezone please set timezone in host system. To set &lt;code&gt;Europe/Warsaw&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;Europe/Warsaw&#34; &amp;gt; /etc/timezone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced usage&lt;/h1&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;Build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential cmake ccache libfftw3-dev libspdlog-dev librtlsdr-dev libhackrf-dev libliquid-dev nlohmann-json3-dev libmosquitto-dev libgtest-dev libgmock-dev libboost-all-dev&#xA;git clone https://github.com/shajen/rtl-sdr-scanner-cpp sdr-scanner&#xA;cd sdr-scanner&#xA;cmake -B build -DCMAKE_BUILD_TYPE=Release .&#xA;cmake --build build -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/auto-sdr config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Build&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/shajen/rtl-sdr-scanner-cpp sdr-scanner&#xA;cd sdr-scanner&#xA;docker build -t shajen/sdr-scanner -f Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v ${PWD}/config.json:/config.json --device /dev/bus/usb:/dev/bus/usb shajen/sdr-scanner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distributed application system&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to run every module (&lt;code&gt;sdr-broker&lt;/code&gt;, &lt;code&gt;sdr-scanner&lt;/code&gt; and &lt;code&gt;sdr-monitor&lt;/code&gt;) on different machines and connect them. Please familiar with &lt;a href=&#34;https://raw.githubusercontent.com/shajen/rtl-sdr-scanner-cpp/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; to do it.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;In general don&#39;t be afraid to send pull request. Use the &#34;fork-and-pull&#34; Git workflow.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt; the repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone&lt;/strong&gt; the project to your own machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt; changes to your own branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Push&lt;/strong&gt; your work back up to your fork&lt;/li&gt; &#xA; &lt;li&gt;Submit a &lt;strong&gt;Pull request&lt;/strong&gt; so that we can review your changes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: Be sure to merge the &lt;strong&gt;latest&lt;/strong&gt; from &lt;strong&gt;upstream&lt;/strong&gt; before making a pull request!&lt;/p&gt; &#xA;&lt;h1&gt;Donations&lt;/h1&gt; &#xA;&lt;p&gt;If you enjoy this project and want to thanks, please use follow link:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=6JQ963AU688QN&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/webstatic/en_US/i/buttons/pp-acceptance-medium.png&#34; alt=&#34;Support via PayPal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/:license-GPLv3-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;GPLv3 license&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>samim23/polymath</title>
    <updated>2023-02-10T01:30:48Z</updated>
    <id>tag:github.com,2023-02-10:/samim23/polymath</id>
    <link href="https://github.com/samim23/polymath" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert any music library into a music production sample-library with ML&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Polymath&lt;/h1&gt; &#xA;&lt;p&gt;Polymath uses machine learning to convert any music library (&lt;em&gt;e.g from Hard-Drive or YouTube&lt;/em&gt;) into a music production sample-library. The tool automatically separates songs into stems (&lt;em&gt;beats, bass, etc.&lt;/em&gt;), quantizes them to the same tempo and beat-grid (&lt;em&gt;e.g. 120bpm&lt;/em&gt;) and analyzes musical structure (&lt;em&gt;e.g. verse, chorus, etc.&lt;/em&gt;), key (&lt;em&gt;e.g C4, E3, etc.&lt;/em&gt;) and other infos (&lt;em&gt;timbre, loudness, etc.&lt;/em&gt;). The result is a searchable sample library that streamlines the workflow for music producers, DJs, and ML audio developers.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;95%&#34; src=&#34;https://samim.io/static/upload/Frame_15.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use-cases&lt;/h2&gt; &#xA;&lt;p&gt;Polymath makes it effortless to combine elements from different songs to create unique new compositions: Simply grab a beat from a Funkadelic track, a bassline from a Tito Puente piece, and fitting horns from a Fela Kuti song, and seamlessly integrate them into your DAW in record time. Using Polymath&#39;s search capability to discover related tracks, it is a breeze to create a polished, hour-long mash-up DJ set. For ML developers, Polymath simplifies the process of creating a large music dataset, for training generative models, etc.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Music Source Separation is performed with the &lt;a href=&#34;https://github.com/facebookresearch/demucs&#34;&gt;Demucs&lt;/a&gt; neural network&lt;/li&gt; &#xA; &lt;li&gt;Music Structure Segmentation/Labeling is performed with the &lt;a href=&#34;https://github.com/wayne391/sf_segmenter&#34;&gt;sf_segmenter&lt;/a&gt; neural network&lt;/li&gt; &#xA; &lt;li&gt;Music Pitch Tracking and Key Detection are performed with &lt;a href=&#34;https://github.com/marl/crepe&#34;&gt;Crepe&lt;/a&gt; neural network&lt;/li&gt; &#xA; &lt;li&gt;Music Quantization and Alignment are performed with &lt;a href=&#34;https://github.com/bmcfee/pyrubberband&#34;&gt;pyrubberband&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Music Info retrieval and processing is performed with &lt;a href=&#34;https://github.com/librosa/librosa&#34;&gt;librosa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You will need at least Python 3.7. From your terminal run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:samim23/polymath.git&#xA;cd polymath&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Polymath&lt;/h2&gt; &#xA;&lt;h3&gt;1. Add songs to the Polymath Library&lt;/h3&gt; &#xA;&lt;h5&gt;Add YouTube video to library (auto-download)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -a n6DAqMFe97E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add audio file (wav or mp3)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -a /path/to/audiolib/song.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add multiple files at once&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -a n6DAqMFe97E,eaPzCHEQExs,RijB8wnJCN0&#xA;python polymath.py -a /path/to/audiolib/song1.wav,/path/to/audiolib/song2.wav&#xA;python polymath.py -a /path/to/audiolib/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Songs are automatically analyzed once which takes some time. Once in the database, they can be access rapidly. The database is stored in the folder &#34;/library/database.p&#34;. To reset everything, simply delete it.&lt;/p&gt; &#xA;&lt;h3&gt;2. Quantize songs in the Polymath Library&lt;/h3&gt; &#xA;&lt;h5&gt;Quantize a specific songs in the library to tempo 120 BPM (-q = database audio file ID, -t = tempo in BPM)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -q n6DAqMFe97E -t 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Quantize all songs in the library to tempo 120 BPM&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -q all -t 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Quantize a specific songs in the library to the tempo of the song (-k)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -q n6DAqMFe97E -k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Songs are automatically quantized to the same tempo and beat-grid and saved to the folder “/processed”.&lt;/p&gt; &#xA;&lt;h3&gt;3. Search for similar songs in the Polymath Library&lt;/h3&gt; &#xA;&lt;h5&gt;Search for 10 similar songs based on a specific songs in the library (-s = database audio file ID, -sa = results amount)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -s n6DAqMFe97E -sa 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Search for similar songs based on a specific songs in the library and quantize all of them to tempo 120 BPM&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -s n6DAqMFe97E -sa 10 -q all -t 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Include BPM as search criteria (-st)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python polymath.py -s n6DAqMFe97E -sa 10 -q all -t 120 -st -k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar songs are automatically found and optionally quantized and saved to the folder &#34;/processed&#34;. This makes it easy to create for example an hour long mix of songs that perfectly match one after the other.&lt;/p&gt; &#xA;&lt;h2&gt;Audio Features&lt;/h2&gt; &#xA;&lt;h3&gt;Extracted Stems&lt;/h3&gt; &#xA;&lt;p&gt;The Demucs Neural Net has settings that can be adjusted in the python file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;- bass&#xA;- drum&#xA;- guitare&#xA;- other&#xA;- piano&#xA;- vocals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extracted Features&lt;/h3&gt; &#xA;&lt;p&gt;The audio feature extractors have settings that can be adjusted in the python file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;- tempo&#xA;- duration&#xA;- timbre&#xA;- timbre_frames&#xA;- pitch&#xA;- pitch_frames&#xA;- intensity&#xA;- intensity_frames&#xA;- volume&#xA;- avg_volume&#xA;- loudness&#xA;- beats&#xA;- segments_boundaries&#xA;- segments_labels&#xA;- frequency_frames&#xA;- frequency&#xA;- key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Polymath is released under the MIT license as found in the &lt;a href=&#34;https://github.com/samim23/polymath/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>