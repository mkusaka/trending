<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-24T01:27:36Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/mimalloc</title>
    <updated>2024-08-24T01:27:36Z</updated>
    <id>tag:github.com,2024-08-24:/microsoft/mimalloc</id>
    <link href="https://github.com/microsoft/mimalloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mimalloc is a compact general purpose allocator with excellent performance.&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/mimalloc-logo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Daan0324/mimalloc/_build?definitionId=1&amp;amp;_a=summary&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://dev.azure.com/Daan0324/mimalloc/_apis/build/status/microsoft.mimalloc?branchName=dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mimalloc&lt;/h1&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;mimalloc (pronounced &#34;me-malloc&#34;) is a general purpose allocator with excellent &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#performance&#34;&gt;performance&lt;/a&gt; characteristics. Initially developed by Daan Leijen for the runtime systems of the &lt;a href=&#34;https://koka-lang.github.io&#34;&gt;Koka&lt;/a&gt; and &lt;a href=&#34;https://github.com/leanprover/lean&#34;&gt;Lean&lt;/a&gt; languages.&lt;/p&gt; &#xA;&lt;p&gt;Latest release tag: &lt;code&gt;v2.1.7&lt;/code&gt; (2024-05-21).&lt;br&gt; Latest v1 tag: &lt;code&gt;v1.8.7&lt;/code&gt; (2024-05-21).&lt;/p&gt; &#xA;&lt;p&gt;mimalloc is a drop-in replacement for &lt;code&gt;malloc&lt;/code&gt; and can be used in other programs without code changes, for example, on dynamically linked ELF-based systems (Linux, BSD, etc.) you can use it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; LD_PRELOAD=/usr/lib/libmimalloc.so  myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also includes a robust way to override the default allocator in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#override_on_windows&#34;&gt;Windows&lt;/a&gt;. Notable aspects of the design include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;small and consistent&lt;/strong&gt;: the library is about 8k LOC using simple and consistent data structures. This makes it very suitable to integrate and adapt in other projects. For runtime systems it provides hooks for a monotonic &lt;em&gt;heartbeat&lt;/em&gt; and deferred freeing (for bounded worst-case times with reference counting). Partly due to its simplicity, mimalloc has been ported to many systems (Windows, macOS, Linux, WASM, various BSD&#39;s, Haiku, MUSL, etc) and has excellent support for dynamic overriding. At the same time, it is an industrial strength allocator that runs (very) large scale distributed services on thousands of machines with excellent worst case latencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;free list sharding&lt;/strong&gt;: instead of one big free list (per size class) we have many smaller lists per &#34;mimalloc page&#34; which reduces fragmentation and increases locality -- things that are allocated close in time get allocated close in memory. (A mimalloc page contains blocks of one size class and is usually 64KiB on a 64-bit system).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;free list multi-sharding&lt;/strong&gt;: the big idea! Not only do we shard the free list per mimalloc page, but for each page we have multiple free lists. In particular, there is one list for thread-local &lt;code&gt;free&lt;/code&gt; operations, and another one for concurrent &lt;code&gt;free&lt;/code&gt; operations. Free-ing from another thread can now be a single CAS without needing sophisticated coordination between threads. Since there will be thousands of separate free lists, contention is naturally distributed over the heap, and the chance of contending on a single location will be low -- this is quite similar to randomized algorithms like skip lists where adding a random oracle removes the need for a more complex algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;eager page purging&lt;/strong&gt;: when a &#34;page&#34; becomes empty (with increased chance due to free list sharding) the memory is marked to the OS as unused (reset or decommitted) reducing (real) memory pressure and fragmentation, especially in long running programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;secure&lt;/strong&gt;: &lt;em&gt;mimalloc&lt;/em&gt; can be built in secure mode, adding guard pages, randomized allocation, encrypted free lists, etc. to protect against various heap vulnerabilities. The performance penalty is usually around 10% on average over our benchmarks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;first-class heaps&lt;/strong&gt;: efficiently create and use multiple heaps to allocate across different regions. A heap can be destroyed at once instead of deallocating each object separately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bounded&lt;/strong&gt;: it does not suffer from &lt;em&gt;blowup&lt;/em&gt; [1], has bounded worst-case allocation times (&lt;em&gt;wcat&lt;/em&gt;) (upto OS primitives), bounded space overhead (~0.2% meta-data, with low internal fragmentation), and has no internal points of contention using only atomic operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fast&lt;/strong&gt;: In our benchmarks (see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#performance&#34;&gt;below&lt;/a&gt;), &lt;em&gt;mimalloc&lt;/em&gt; outperforms other leading allocators (&lt;em&gt;jemalloc&lt;/em&gt;, &lt;em&gt;tcmalloc&lt;/em&gt;, &lt;em&gt;Hoard&lt;/em&gt;, etc), and often uses less memory. A nice property is that it does consistently well over a wide range of benchmarks. There is also good huge OS page support for larger server programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://microsoft.github.io/mimalloc&#34;&gt;documentation&lt;/a&gt; gives a full overview of the API. You can read more on the design of &lt;em&gt;mimalloc&lt;/em&gt; in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action&#34;&gt;technical report&lt;/a&gt; which also has detailed benchmark results.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: latest stable release (based on &lt;code&gt;dev-slice&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: development branch for mimalloc v1. Use this branch for submitting PR&#39;s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev-slice&lt;/code&gt;: development branch for mimalloc v2. This branch is downstream of &lt;code&gt;dev&lt;/code&gt; (and is essentially equal to &lt;code&gt;dev&lt;/code&gt; except for &lt;code&gt;src/segment.c&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Note: the &lt;code&gt;v2.x&lt;/code&gt; version has a different algorithm for managing internal mimalloc pages (as slices) that tends to use reduce memory usage and fragmentation compared to mimalloc &lt;code&gt;v1.x&lt;/code&gt; (especially for large workloads). Should otherwise have similar performance (see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#performance&#34;&gt;below&lt;/a&gt;); please report if you observe any significant performance regression.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2024-05-21, &lt;code&gt;v1.8.7&lt;/code&gt;, &lt;code&gt;v2.1.7&lt;/code&gt;: Fix build issues on less common platforms. Started upstreaming patches from the CPython &lt;a href=&#34;https://github.com/python/cpython/issues/113141#issuecomment-2119255217&#34;&gt;integration&lt;/a&gt;. Upstream &lt;code&gt;vcpkg&lt;/code&gt; patches.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2024-05-13, &lt;code&gt;v1.8.6&lt;/code&gt;, &lt;code&gt;v2.1.6&lt;/code&gt;: Fix build errors on various (older) platforms. Refactored aligned allocation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2024-04-22, &lt;code&gt;v1.8.4&lt;/code&gt;, &lt;code&gt;v2.1.4&lt;/code&gt;: Fixes various bugs and build issues. Add &lt;code&gt;MI_LIBC_MUSL&lt;/code&gt; cmake flag for musl builds. Free-ing code is refactored into a separate module (&lt;code&gt;free.c&lt;/code&gt;). Mimalloc page info is simplified with the block size directly available (and new &lt;code&gt;block_size_shift&lt;/code&gt; to improve aligned block free-ing). New approach to collection of abandoned segments: When a thread terminates the segments it owns are abandoned (containing still live objects) and these can be reclaimed by other threads. We no longer use a list of abandoned segments but this is now done using bitmaps in arena&#39;s which is more concurrent (and more aggressive). Abandoned memory can now also be reclaimed if a thread frees an object in an abandoned page (which can be disabled using &lt;code&gt;mi_option_abandoned_reclaim_on_free&lt;/code&gt;). The option &lt;code&gt;mi_option_max_segment_reclaim&lt;/code&gt; gives a maximum percentage of abandoned segments that can be reclaimed per try (=10%).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2023-04-24, &lt;code&gt;v1.8.2&lt;/code&gt;, &lt;code&gt;v2.1.2&lt;/code&gt;: Fixes build issues on freeBSD, musl, and C17 (UE 5.1.1). Reduce code size/complexity by removing regions and segment-cache&#39;s and only use arenas with improved memory purging -- this may improve memory usage as well for larger services. Renamed options for consistency. Improved Valgrind and ASAN checking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2023-04-03, &lt;code&gt;v1.8.1&lt;/code&gt;, &lt;code&gt;v2.1.1&lt;/code&gt;: Fixes build issues on some platforms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2023-03-29, &lt;code&gt;v1.8.0&lt;/code&gt;, &lt;code&gt;v2.1.0&lt;/code&gt;: Improved support dynamic overriding on Windows 11. Improved tracing precision with &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#asan&#34;&gt;asan&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#valgrind&#34;&gt;Valgrind&lt;/a&gt;, and added Windows event tracing &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#ETW&#34;&gt;ETW&lt;/a&gt; (contributed by Xinglong He). Created an OS abstraction layer to make it easier to port and separate platform dependent code (in &lt;code&gt;src/prim&lt;/code&gt;). Fixed C++ STL compilation on older Microsoft C++ compilers, and various small bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-12-23, &lt;code&gt;v1.7.9&lt;/code&gt;, &lt;code&gt;v2.0.9&lt;/code&gt;: Supports building with &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#asan&#34;&gt;asan&lt;/a&gt; and improved &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#valgrind&#34;&gt;Valgrind&lt;/a&gt; support. Support arbitrary large alignments (in particular for &lt;code&gt;std::pmr&lt;/code&gt; pools). Added C++ STL allocators attached to a specific heap (thanks @vmarkovtsev). Heap walks now visit all object (including huge objects). Support Windows nano server containers (by Johannes Schindelin,@dscho). Various small bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-11-03, &lt;code&gt;v1.7.7&lt;/code&gt;, &lt;code&gt;v2.0.7&lt;/code&gt;: Initial support for &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#valgrind&#34;&gt;Valgrind&lt;/a&gt; for leak testing and heap block overflow detection. Initial support for attaching heaps to a speficic memory area (only in v2). Fix &lt;code&gt;realloc&lt;/code&gt; behavior for zero size blocks, remove restriction to integral multiple of the alignment in &lt;code&gt;alloc_align&lt;/code&gt;, improved aligned allocation performance, reduced contention with many threads on few processors (thank you @dposluns!), vs2022 support, support &lt;code&gt;pkg-config&lt;/code&gt;, .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-04-14, &lt;code&gt;v1.7.6&lt;/code&gt;, &lt;code&gt;v2.0.6&lt;/code&gt;: fix fallback path for aligned OS allocation on Windows, improve Windows aligned allocation even when compiling with older SDK&#39;s, fix dynamic overriding on macOS Monterey, fix MSVC C++ dynamic overriding, fix warnings under Clang 14, improve performance if many OS threads are created and destroyed, fix statistics for large object allocations, using MIMALLOC_VERBOSE=1 has no maximum on the number of error messages, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2022-02-14, &lt;code&gt;v1.7.5&lt;/code&gt;, &lt;code&gt;v2.0.5&lt;/code&gt; (alpha): fix malloc override on Windows 11, fix compilation with musl, potentially reduced committed memory, add &lt;code&gt;bin/minject&lt;/code&gt; for Windows, improved wasm support, faster aligned allocation, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/#older-release-notes&#34;&gt;Older release notes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devnexen.blogspot.com/&#34;&gt;David Carlier&lt;/a&gt; (@devnexen) for his many contributions, and making mimalloc work better on many less common operating systems, like Haiku, Dragonfly, etc.&lt;/li&gt; &#xA; &lt;li&gt;Mary Feofanova (@mary3000), Evgeniy Moiseenko, and Manuel Pöter (@mpoeter) for making mimalloc TSAN checkable, and finding memory model bugs using the &lt;a href=&#34;https://plv.mpi-sws.org/genmc/&#34;&gt;genMC&lt;/a&gt; model checker.&lt;/li&gt; &#xA; &lt;li&gt;Weipeng Liu (@pongba), Zhuowei Li, Junhua Wang, and Jakub Szymanski, for their early support of mimalloc and deployment at large scale services, leading to many improvements in the mimalloc algorithms for large workloads.&lt;/li&gt; &#xA; &lt;li&gt;Jason Gibson (@jasongibson) for exhaustive testing on large scale workloads and server environments, and finding complex bugs in (early versions of) &lt;code&gt;mimalloc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manuel Pöter (@mpoeter) and Sam Gross(@colesbury) for finding an ABA concurrency issue in abandoned segment reclamation. Sam also created the &lt;a href=&#34;https://github.com/colesbury/nogil&#34;&gt;no GIL&lt;/a&gt; Python fork which uses mimalloc internally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;mimalloc is used in various large scale low-latency services and programs, for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bing.com&#34;&gt;&lt;img height=&#34;50&#34; align=&#34;left&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e9/Bing_logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://azure.microsoft.com/&#34;&gt;&lt;img height=&#34;50&#34; align=&#34;left&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a8/Microsoft_Azure_Logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deathstrandingpc.505games.com&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/ds-logo.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.unrealengine.com/4.26/en-US/WhatsNew/Builds/ReleaseNotes/4_25/&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/unreal-logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cab.spbu.ru/software/spades/&#34;&gt;&lt;img height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/spades-logo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Open &lt;code&gt;ide/vs2022/mimalloc.sln&lt;/code&gt; in Visual Studio 2022 and build. The &lt;code&gt;mimalloc&lt;/code&gt; project builds a static library (in &lt;code&gt;out/msvc-x64&lt;/code&gt;), while the &lt;code&gt;mimalloc-override&lt;/code&gt; project builds a DLL for overriding malloc in the entire program.&lt;/p&gt; &#xA;&lt;h2&gt;macOS, Linux, BSD, etc.&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://cmake.org&#34;&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; as the build system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/release&#xA;&amp;gt; cd out/release&#xA;&amp;gt; cmake ../..&#xA;&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the library as a shared (dynamic) library (&lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dylib&lt;/code&gt;), a static library (&lt;code&gt;.a&lt;/code&gt;), and as a single object file (&lt;code&gt;.o&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;gt; sudo make install&lt;/code&gt; (install the library and header files in &lt;code&gt;/usr/local/lib&lt;/code&gt; and &lt;code&gt;/usr/local/include&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;You can build the debug version which does many internal checks and maintains detailed statistics as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/debug&#xA;&amp;gt; cd out/debug&#xA;&amp;gt; cmake -DCMAKE_BUILD_TYPE=Debug ../..&#xA;&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will name the shared library as &lt;code&gt;libmimalloc-debug.so&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can build a &lt;em&gt;secure&lt;/em&gt; version that uses guard pages, encrypted free lists, etc., as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir -p out/secure&#xA;&amp;gt; cd out/secure&#xA;&amp;gt; cmake -DMI_SECURE=ON ../..&#xA;&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will name the shared library as &lt;code&gt;libmimalloc-secure.so&lt;/code&gt;. Use &lt;code&gt;ccmake&lt;/code&gt;&lt;sup&gt;2&lt;/sup&gt; instead of &lt;code&gt;cmake&lt;/code&gt; to see and customize all the available build options.&lt;/p&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install CMake: &lt;code&gt;sudo apt-get install cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install CCMake: &lt;code&gt;sudo apt-get install cmake-curses-gui&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Single source&lt;/h2&gt; &#xA;&lt;p&gt;You can also directly build the single &lt;code&gt;src/static.c&lt;/code&gt; file as part of your project without needing &lt;code&gt;cmake&lt;/code&gt; at all. Make sure to also add the mimalloc &lt;code&gt;include&lt;/code&gt; directory to the include path.&lt;/p&gt; &#xA;&lt;h1&gt;Using the library&lt;/h1&gt; &#xA;&lt;p&gt;The preferred usage is including &lt;code&gt;&amp;lt;mimalloc.h&amp;gt;&lt;/code&gt;, linking with the shared- or static library, and using the &lt;code&gt;mi_malloc&lt;/code&gt; API exclusively for allocation. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; gcc -o myprogram -lmimalloc myfile.c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mimalloc uses only safe OS calls (&lt;code&gt;mmap&lt;/code&gt; and &lt;code&gt;VirtualAlloc&lt;/code&gt;) and can co-exist with other allocators linked to the same program. If you use &lt;code&gt;cmake&lt;/code&gt;, you can simply use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(mimalloc 1.4 REQUIRED)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your &lt;code&gt;CMakeLists.txt&lt;/code&gt; to find a locally installed mimalloc. Then use either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target_link_libraries(myapp PUBLIC mimalloc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to link with the shared (dynamic) library, or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target_link_libraries(myapp PUBLIC mimalloc-static)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to link with the static library. See &lt;code&gt;test\CMakeLists.txt&lt;/code&gt; for an example.&lt;/p&gt; &#xA;&lt;p&gt;For best performance in C++ programs, it is also recommended to override the global &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; operators. For convenience, mimalloc provides &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc-new-delete.h&#34;&gt;&lt;code&gt;mimalloc-new-delete.h&lt;/code&gt;&lt;/a&gt; which does this for you -- just include it in a single(!) source file in your project. In C++, mimalloc also provides the &lt;code&gt;mi_stl_allocator&lt;/code&gt; struct which implements the &lt;code&gt;std::allocator&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;You can pass environment variables to print verbose messages (&lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt;) and statistics (&lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;) (in the debug version):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_SHOW_STATS=1 ./cfrac 175451865205073170563711388363&#xA;&#xA;175451865205073170563711388363 = 374456281610909315237213 * 468551&#xA;&#xA;heap stats:     peak      total      freed       unit&#xA;normal   2:    16.4 kb    17.5 mb    17.5 mb      16 b   ok&#xA;normal   3:    16.3 kb    15.2 mb    15.2 mb      24 b   ok&#xA;normal   4:      64 b      4.6 kb     4.6 kb      32 b   ok&#xA;normal   5:      80 b    118.4 kb   118.4 kb      40 b   ok&#xA;normal   6:      48 b       48 b       48 b       48 b   ok&#xA;normal  17:     960 b      960 b      960 b      320 b   ok&#xA;&#xA;heap stats:     peak      total      freed       unit&#xA;    normal:    33.9 kb    32.8 mb    32.8 mb       1 b   ok&#xA;      huge:       0 b        0 b        0 b        1 b   ok&#xA;     total:    33.9 kb    32.8 mb    32.8 mb       1 b   ok&#xA;malloc requested:         32.8 mb&#xA;&#xA; committed:    58.2 kb    58.2 kb    58.2 kb       1 b   ok&#xA;  reserved:     2.0 mb     2.0 mb     2.0 mb       1 b   ok&#xA;     reset:       0 b        0 b        0 b        1 b   ok&#xA;  segments:       1          1          1&#xA;-abandoned:       0&#xA;     pages:       6          6          6&#xA;-abandoned:       0&#xA;     mmaps:       3&#xA; mmap fast:       0&#xA; mmap slow:       1&#xA;   threads:       0&#xA;   elapsed:     2.022s&#xA;   process: user: 1.781s, system: 0.016s, faults: 756, reclaims: 0, rss: 2.7 mb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above model of using the &lt;code&gt;mi_&lt;/code&gt; prefixed API is not always possible though in existing programs that already use the standard malloc interface, and another option is to override the standard malloc interface completely and redirect all calls to the &lt;em&gt;mimalloc&lt;/em&gt; library instead .&lt;/p&gt; &#xA;&lt;h2&gt;Environment Options&lt;/h2&gt; &#xA;&lt;p&gt;You can set further options either programmatically (using &lt;a href=&#34;https://microsoft.github.io/mimalloc/group__options.html&#34;&gt;&lt;code&gt;mi_option_set&lt;/code&gt;&lt;/a&gt;), or via environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;: show statistics when the program terminates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt;: show verbose messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_SHOW_ERRORS=1&lt;/code&gt;: show error and warning messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advanced options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_ARENA_EAGER_COMMIT=2&lt;/code&gt;: turns on eager commit for the large arenas (usually 1GiB) from which mimalloc allocates segments and pages. Set this to 2 (default) to only enable this on overcommit systems (e.g. Linux). Set this to 1 to enable explicitly on other systems as well (like Windows or macOS) which may improve performance (as the whole arena is committed at once). Note that eager commit only increases the commit but not the actual the peak resident set (rss) so it is generally ok to enable this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_PURGE_DELAY=N&lt;/code&gt;: the delay in &lt;code&gt;N&lt;/code&gt; milli-seconds (by default &lt;code&gt;10&lt;/code&gt;) after which mimalloc will purge OS pages that are not in use. This signals to the OS that the underlying physical memory can be reused which can reduce memory fragmentation especially in long running (server) programs. Setting &lt;code&gt;N&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; purges immediately when a page becomes unused which can improve memory usage but also decreases performance. Setting &lt;code&gt;N&lt;/code&gt; to a higher value like &lt;code&gt;100&lt;/code&gt; can improve performance (sometimes by a lot) at the cost of potentially using more memory at times. Setting it to &lt;code&gt;-1&lt;/code&gt; disables purging completely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_PURGE_DECOMMITS=1&lt;/code&gt;: By default &#34;purging&#34; memory means unused memory is decommitted (&lt;code&gt;MEM_DECOMMIT&lt;/code&gt; on Windows, &lt;code&gt;MADV_DONTNEED&lt;/code&gt; (which decresease rss immediately) on &lt;code&gt;mmap&lt;/code&gt; systems). Set this to 0 to instead &#34;reset&#34; unused memory on a purge (&lt;code&gt;MEM_RESET&lt;/code&gt; on Windows, generally &lt;code&gt;MADV_FREE&lt;/code&gt; (which does not decrease rss immediately) on &lt;code&gt;mmap&lt;/code&gt; systems). Mimalloc generally does not &#34;free&#34; OS memory but only &#34;purges&#34; OS memory, in other words, it tries to keep virtual address ranges and decommits within those ranges (to make the underlying physical memory available to other processes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Further options for large workloads and services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_USE_NUMA_NODES=N&lt;/code&gt;: pretend there are at most &lt;code&gt;N&lt;/code&gt; NUMA nodes. If not set, the actual NUMA nodes are detected at runtime. Setting &lt;code&gt;N&lt;/code&gt; to 1 may avoid problems in some virtual environments. Also, setting it to a lower number than the actual NUMA nodes is fine and will only cause threads to potentially allocate more memory across actual NUMA nodes (but this can happen in any case as NUMA local allocation is always a best effort but not guaranteed).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_ALLOW_LARGE_OS_PAGES=1&lt;/code&gt;: use large OS pages (2 or 4MiB) when available; for some workloads this can significantly improve performance. When this option is disabled, it also disables transparent huge pages (THP) for the process (on Linux and Android). Use &lt;code&gt;MIMALLOC_VERBOSE&lt;/code&gt; to check if the large OS pages are enabled -- usually one needs to explicitly give permissions for large OS pages (as on &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows?view=sql-server-2017&#34;&gt;Windows&lt;/a&gt; and &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/tuning_and_optimizing_red_hat_enterprise_linux_for_oracle_9i_and_10g_databases/sect-oracle_9i_and_10g_tuning_guide-large_memory_optimization_big_pages_and_huge_pages-configuring_huge_pages_in_red_hat_enterprise_linux_4_or_5&#34;&gt;Linux&lt;/a&gt;). However, sometimes the OS is very slow to reserve contiguous physical memory for large OS pages so use with care on systems that can have fragmented memory (for that reason, we generally recommend to use &lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES&lt;/code&gt; instead whenever possible).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES=N&lt;/code&gt;: where &lt;code&gt;N&lt;/code&gt; is the number of 1GiB &lt;em&gt;huge&lt;/em&gt; OS pages. This reserves the huge pages at startup and sometimes this can give a large (latency) performance improvement on big workloads. Usually it is better to not use &lt;code&gt;MIMALLOC_ALLOW_LARGE_OS_PAGES=1&lt;/code&gt; in combination with this setting. Just like large OS pages, use with care as reserving contiguous physical memory can take a long time when memory is fragmented (but reserving the huge pages is done at startup only once). Note that we usually need to explicitly give permission for huge OS pages (as on &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows?view=sql-server-2017&#34;&gt;Windows&lt;/a&gt; and &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/tuning_and_optimizing_red_hat_enterprise_linux_for_oracle_9i_and_10g_databases/sect-oracle_9i_and_10g_tuning_guide-large_memory_optimization_big_pages_and_huge_pages-configuring_huge_pages_in_red_hat_enterprise_linux_4_or_5&#34;&gt;Linux&lt;/a&gt;)). With huge OS pages, it may be beneficial to set the setting &lt;code&gt;MIMALLOC_EAGER_COMMIT_DELAY=N&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt; is 1 by default) to delay the initial &lt;code&gt;N&lt;/code&gt; segments (of 4MiB) of a thread to not allocate in the huge OS pages; this prevents threads that are short lived and allocate just a little to take up space in the huge OS page area (which cannot be purged as huge OS pages are pinned to physical memory). The huge pages are usually allocated evenly among NUMA nodes. We can use &lt;code&gt;MIMALLOC_RESERVE_HUGE_OS_PAGES_AT=N&lt;/code&gt; where &lt;code&gt;N&lt;/code&gt; is the numa node (starting at 0) to allocate all the huge pages at a specific numa node instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use caution when using &lt;code&gt;fork&lt;/code&gt; in combination with either large or huge OS pages: on a fork, the OS uses copy-on-write for all pages in the original process including the huge OS pages. When any memory is now written in that area, the OS will copy the entire 1GiB huge page (or 2MiB large page) which can cause the memory usage to grow in large increments.&lt;/p&gt; &#xA;&lt;h2&gt;Secure Mode&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;mimalloc&lt;/em&gt; can be build in secure mode by using the &lt;code&gt;-DMI_SECURE=ON&lt;/code&gt; flags in &lt;code&gt;cmake&lt;/code&gt;. This build enables various mitigations to make mimalloc more robust against exploits. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All internal mimalloc pages are surrounded by guard pages and the heap metadata is behind a guard page as well (so a buffer overflow exploit cannot reach into the metadata).&lt;/li&gt; &#xA; &lt;li&gt;All free list pointers are &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/783e3377f79ee82af43a0793910a9f2d01ac7863/include/mimalloc-internal.h#L396&#34;&gt;encoded&lt;/a&gt; with per-page keys which is used both to prevent overwrites with a known pointer, as well as to detect heap corruption.&lt;/li&gt; &#xA; &lt;li&gt;Double free&#39;s are detected (and ignored).&lt;/li&gt; &#xA; &lt;li&gt;The free lists are initialized in a random order and allocation randomly chooses between extension and reuse within a page to mitigate against attacks that rely on a predicable allocation order. Similarly, the larger heap blocks allocated by mimalloc from the OS are also address randomized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As always, evaluate with care as part of an overall security strategy as all of the above are mitigations but not guarantees.&lt;/p&gt; &#xA;&lt;h2&gt;Debug Mode&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;em&gt;mimalloc&lt;/em&gt; is built using debug mode, various checks are done at runtime to catch development errors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Statistics are maintained in detail for each object size. They can be shown using &lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt; at runtime.&lt;/li&gt; &#xA; &lt;li&gt;All objects have padding at the end to detect (byte precise) heap block overflows.&lt;/li&gt; &#xA; &lt;li&gt;Double free&#39;s, and freeing invalid heap pointers are detected.&lt;/li&gt; &#xA; &lt;li&gt;Corrupted free-lists and some forms of use-after-free are detected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overriding Standard Malloc&lt;/h1&gt; &#xA;&lt;p&gt;Overriding the standard &lt;code&gt;malloc&lt;/code&gt; (and &lt;code&gt;new&lt;/code&gt;) can be done either &lt;em&gt;dynamically&lt;/em&gt; or &lt;em&gt;statically&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic override&lt;/h2&gt; &#xA;&lt;p&gt;This is the recommended way to override the standard malloc interface.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Override on Linux, BSD&lt;/h3&gt; &#xA;&lt;p&gt;On these ELF-based systems we preload the mimalloc shared library so all calls to the standard &lt;code&gt;malloc&lt;/code&gt; interface are resolved to the &lt;em&gt;mimalloc&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env LD_PRELOAD=/usr/lib/libmimalloc.so myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set extra environment variables to check that mimalloc is running, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_VERBOSE=1 LD_PRELOAD=/usr/lib/libmimalloc.so myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or run with the debug version to get detailed statistics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env MIMALLOC_SHOW_STATS=1 LD_PRELOAD=/usr/lib/libmimalloc-debug.so myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Override on MacOS&lt;/h3&gt; &#xA;&lt;p&gt;On macOS we can also preload the mimalloc shared library so all calls to the standard &lt;code&gt;malloc&lt;/code&gt; interface are resolved to the &lt;em&gt;mimalloc&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; env DYLD_INSERT_LIBRARIES=/usr/lib/libmimalloc.dylib myprogram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that certain security restrictions may apply when doing this from the &lt;a href=&#34;https://stackoverflow.com/questions/43941322/dyld-insert-libraries-ignored-when-calling-application-through-bash&#34;&gt;shell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Override on Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span id=&#34;override_on_windows&#34;&gt;Dynamically overriding on mimalloc on Windows&lt;/span&gt; is robust and has the particular advantage to be able to redirect all malloc/free calls that go through the (dynamic) C runtime allocator, including those from other DLL&#39;s or libraries. As it intercepts all allocation calls on a low level, it can be used reliably on large programs that include other 3rd party components. There are four requirements to make the overriding work robustly:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the C-runtime library as a DLL (using the &lt;code&gt;/MD&lt;/code&gt; or &lt;code&gt;/MDd&lt;/code&gt; switch).&lt;/li&gt; &#xA; &lt;li&gt;Link your program explicitly with &lt;code&gt;mimalloc-override.dll&lt;/code&gt; library. To ensure the &lt;code&gt;mimalloc-override.dll&lt;/code&gt; is loaded at run-time it is easiest to insert some call to the mimalloc API in the &lt;code&gt;main&lt;/code&gt; function, like &lt;code&gt;mi_version()&lt;/code&gt; (or use the &lt;code&gt;/INCLUDE:mi_version&lt;/code&gt; switch on the linker). See the &lt;code&gt;mimalloc-override-test&lt;/code&gt; project for an example on how to use this.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/bin&#34;&gt;&lt;code&gt;mimalloc-redirect.dll&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;mimalloc-redirect32.dll&lt;/code&gt;) must be put in the same folder as the main &lt;code&gt;mimalloc-override.dll&lt;/code&gt; at runtime (as it is a dependency of that DLL). The redirection DLL ensures that all calls to the C runtime malloc API get redirected to mimalloc functions (which reside in &lt;code&gt;mimalloc-override.dll&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Ensure the &lt;code&gt;mimalloc-override.dll&lt;/code&gt; comes as early as possible in the import list of the final executable (so it can intercept all potential allocations).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For best performance on Windows with C++, it is also recommended to also override the &lt;code&gt;new&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt; operations (by including &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/include/mimalloc-new-delete.h&#34;&gt;&lt;code&gt;mimalloc-new-delete.h&lt;/code&gt;&lt;/a&gt; a single(!) source file in your project).&lt;/p&gt; &#xA;&lt;p&gt;The environment variable &lt;code&gt;MIMALLOC_DISABLE_REDIRECT=1&lt;/code&gt; can be used to disable dynamic overriding at run-time. Use &lt;code&gt;MIMALLOC_VERBOSE=1&lt;/code&gt; to check if mimalloc was successfully redirected.&lt;/p&gt; &#xA;&lt;p&gt;We cannot always re-link an executable with &lt;code&gt;mimalloc-override.dll&lt;/code&gt;, and similarly, we cannot always ensure the the DLL comes first in the import table of the final executable. In many cases though we can patch existing executables without any recompilation if they are linked with the dynamic C runtime (&lt;code&gt;ucrtbase.dll&lt;/code&gt;) -- just put the &lt;code&gt;mimalloc-override.dll&lt;/code&gt; into the import table (and put &lt;code&gt;mimalloc-redirect.dll&lt;/code&gt; in the same folder) Such patching can be done for example with &lt;a href=&#34;https://ntcore.com/?page_id=388&#34;&gt;CFF Explorer&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/bin&#34;&gt;&lt;code&gt;minject&lt;/code&gt;&lt;/a&gt; program.&lt;/p&gt; &#xA;&lt;h2&gt;Static override&lt;/h2&gt; &#xA;&lt;p&gt;On Unix-like systems, you can also statically link with &lt;em&gt;mimalloc&lt;/em&gt; to override the standard malloc interface. The recommended way is to link the final program with the &lt;em&gt;mimalloc&lt;/em&gt; single object file (&lt;code&gt;mimalloc.o&lt;/code&gt;). We use an object file instead of a library file as linkers give preference to that over archives to resolve symbols. To ensure that the standard malloc interface resolves to the &lt;em&gt;mimalloc&lt;/em&gt; library, link it as the first object file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; gcc -o myprogram mimalloc.o  myfile1.c ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to override statically that works on all platforms, is to link statically to mimalloc (as shown in the introduction) and include a header file in each source file that re-defines &lt;code&gt;malloc&lt;/code&gt; etc. to &lt;code&gt;mi_malloc&lt;/code&gt;. This is provided by &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc-override.h&#34;&gt;&lt;code&gt;mimalloc-override.h&lt;/code&gt;&lt;/a&gt;. This only works reliably though if all sources are under your control or otherwise mixing of pointers from different heaps may occur!&lt;/p&gt; &#xA;&lt;h1&gt;Tools&lt;/h1&gt; &#xA;&lt;p&gt;Generally, we recommend using the standard allocator with memory tracking tools, but mimalloc can also be build to support the &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizer&#34;&gt;address sanitizer&lt;/a&gt; or the excellent &lt;a href=&#34;https://valgrind.org/&#34;&gt;Valgrind&lt;/a&gt; tool. Moreover, it can be build to support Windows event tracing (&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/test/wpt/event-tracing-for-windows&#34;&gt;ETW&lt;/a&gt;). This has a small performance overhead but does allow detecting memory leaks and byte-precise buffer overflows directly on final executables. See also the &lt;code&gt;test/test-wrong.c&lt;/code&gt; file to test with various tools.&lt;/p&gt; &#xA;&lt;h2&gt;Valgrind&lt;/h2&gt; &#xA;&lt;p&gt;To build with &lt;a href=&#34;https://valgrind.org/&#34;&gt;valgrind&lt;/a&gt; support, use the &lt;code&gt;MI_TRACK_VALGRIND=ON&lt;/code&gt; cmake option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -DMI_TRACK_VALGRIND=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be combined with secure mode or debug mode. You can then run your programs directly under valgrind:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; valgrind &amp;lt;myprogram&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you rely on overriding &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt; by mimalloc (instead of using the &lt;code&gt;mi_malloc&lt;/code&gt;/&lt;code&gt;mi_free&lt;/code&gt; API directly), you also need to tell &lt;code&gt;valgrind&lt;/code&gt; to not intercept those calls itself, and use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; MIMALLOC_SHOW_STATS=1 valgrind  --soname-synonyms=somalloc=*mimalloc* -- &amp;lt;myprogram&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting the &lt;code&gt;MIMALLOC_SHOW_STATS&lt;/code&gt; environment variable you can check that mimalloc is indeed used and not the standard allocator. Even though the &lt;a href=&#34;https://valgrind.org/docs/manual/manual-core.html#opt.soname-synonyms&#34;&gt;Valgrind option&lt;/a&gt; is called &lt;code&gt;--soname-synonyms&lt;/code&gt;, this also works when overriding with a static library or object file. Unfortunately, it is not possible to dynamically override mimalloc using &lt;code&gt;LD_PRELOAD&lt;/code&gt; together with &lt;code&gt;valgrind&lt;/code&gt;. See also the &lt;code&gt;test/test-wrong.c&lt;/code&gt; file to test with &lt;code&gt;valgrind&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Valgrind support is in its initial development -- please report any issues.&lt;/p&gt; &#xA;&lt;h2&gt;ASAN&lt;/h2&gt; &#xA;&lt;p&gt;To build with the address sanitizer, use the &lt;code&gt;-DMI_TRACK_ASAN=ON&lt;/code&gt; cmake option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cmake ../.. -DMI_TRACK_ASAN=ON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be combined with secure mode or debug mode. You can then run your programs as:&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; ASAN_OPTIONS=verbosity=1 &amp;lt;myprogram&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you link a program with an address sanitizer build of mimalloc, you should generally compile that program too with the address sanitizer enabled. For example, assuming you build mimalloc in &lt;code&gt;out/debug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;clang -g -o test-wrong -Iinclude test/test-wrong.c out/debug/libmimalloc-asan-debug.a -lpthread -fsanitize=address -fsanitize-recover=address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the address sanitizer redirects the standard allocation functions, on some platforms (macOSX for example) it is required to compile mimalloc with &lt;code&gt;-DMI_OVERRIDE=OFF&lt;/code&gt;. Adress sanitizer support is in its initial development -- please report any issues.&lt;/p&gt; &#xA;&lt;h2&gt;ETW&lt;/h2&gt; &#xA;&lt;p&gt;Event tracing for Windows (&lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/test/wpt/event-tracing-for-windows&#34;&gt;ETW&lt;/a&gt;) provides a high performance way to capture all allocations though mimalloc and analyze them later. To build with ETW support, use the &lt;code&gt;-DMI_TRACK_ETW=ON&lt;/code&gt; cmake option.&lt;/p&gt; &#xA;&lt;p&gt;You can then capture an allocation trace using the Windows performance recorder (WPR), using the &lt;code&gt;src/prim/windows/etw-mimalloc.wprp&lt;/code&gt; profile. In an admin prompt, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; wpr -start src\prim\windows\etw-mimalloc.wprp -filemode&#xA;&amp;gt; &amp;lt;my_mimalloc_program&amp;gt;&#xA;&amp;gt; wpr -stop &amp;lt;my_mimalloc_program&amp;gt;.etl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then open &lt;code&gt;&amp;lt;my_mimalloc_program&amp;gt;.etl&lt;/code&gt; in the Windows Performance Analyzer (WPA), or use a tool like &lt;a href=&#34;https://github.com/xinglonghe/TraceControl&#34;&gt;TraceControl&lt;/a&gt; that is specialized for analyzing mimalloc traces.&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Last update: 2021-01-30&lt;/p&gt; &#xA;&lt;p&gt;We tested &lt;em&gt;mimalloc&lt;/em&gt; against many other top allocators over a wide range of benchmarks, ranging from various real world programs to synthetic benchmarks that see how the allocator behaves under more extreme circumstances. In our benchmark suite, &lt;em&gt;mimalloc&lt;/em&gt; outperforms other leading allocators (&lt;em&gt;jemalloc&lt;/em&gt;, &lt;em&gt;tcmalloc&lt;/em&gt;, &lt;em&gt;Hoard&lt;/em&gt;, etc), and has a similar memory footprint. A nice property is that it does consistently well over the wide range of benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;General memory allocators are interesting as there exists no algorithm that is optimal -- for a given allocator one can usually construct a workload where it does not do so well. The goal is thus to find an allocation strategy that performs well over a wide range of benchmarks without suffering from (too much) underperformance in less common situations.&lt;/p&gt; &#xA;&lt;p&gt;As always, interpret these results with care since some benchmarks test synthetic or uncommon situations that may never apply to your workloads. For example, most allocators do not do well on &lt;code&gt;xmalloc-testN&lt;/code&gt; but that includes even the best industrial allocators like &lt;em&gt;jemalloc&lt;/em&gt; and &lt;em&gt;tcmalloc&lt;/em&gt; that are used in some of the world&#39;s largest systems (like Chrome or FreeBSD).&lt;/p&gt; &#xA;&lt;p&gt;Also, the benchmarks here do not measure the behaviour on very large and long-running server workloads, or worst-case latencies of allocation. Much work has gone into &lt;code&gt;mimalloc&lt;/code&gt; to work well on such workloads (for example, to reduce virtual memory fragmentation on long-running services) but such optimizations are not always reflected in the current benchmark suite.&lt;/p&gt; &#xA;&lt;p&gt;We show here only an overview -- for more specific details and further benchmarks we refer to the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action&#34;&gt;technical report&lt;/a&gt;. The benchmark suite is automated and available separately as &lt;a href=&#34;https://github.com/daanx/mimalloc-bench&#34;&gt;mimalloc-bench&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark Results on a 16-core AMD 5950x (Zen3)&lt;/h2&gt; &#xA;&lt;p&gt;Testing on the 16-core AMD 5950x processor at 3.4Ghz (4.9Ghz boost), with with 32GiB memory at 3600Mhz, running Ubuntu 20.04 with glibc 2.31 and GCC 9.3.0.&lt;/p&gt; &#xA;&lt;p&gt;We measure three versions of &lt;em&gt;mimalloc&lt;/em&gt;: the main version &lt;code&gt;mi&lt;/code&gt; (tag:v1.7.0), the new v2.0 beta version as &lt;code&gt;xmi&lt;/code&gt; (tag:v2.0.0), and the main version in secure mode as &lt;code&gt;smi&lt;/code&gt; (tag:v1.7.0).&lt;/p&gt; &#xA;&lt;p&gt;The other allocators are Google&#39;s &lt;a href=&#34;https://github.com/gperftools/gperftools&#34;&gt;&lt;em&gt;tcmalloc&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;tc&lt;/code&gt;, tag:gperftools-2.8.1) used in Chrome, Facebook&#39;s &lt;a href=&#34;https://github.com/jemalloc/jemalloc&#34;&gt;&lt;em&gt;jemalloc&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;je&lt;/code&gt;, tag:5.2.1) by Jason Evans used in Firefox and FreeBSD, the Intel thread building blocks &lt;a href=&#34;https://github.com/intel/tbb&#34;&gt;allocator&lt;/a&gt; (&lt;code&gt;tbb&lt;/code&gt;, tag:v2020.3), &lt;a href=&#34;https://github.com/mjansson/rpmalloc&#34;&gt;rpmalloc&lt;/a&gt; (&lt;code&gt;rp&lt;/code&gt;,tag:1.4.1) by Mattias Jansson, the original scalable &lt;a href=&#34;https://github.com/emeryberger/Hoard&#34;&gt;&lt;em&gt;Hoard&lt;/em&gt;&lt;/a&gt; (git:d880f72) allocator by Emery Berger [1], the memory compacting &lt;a href=&#34;https://github.com/plasma-umass/Mesh&#34;&gt;&lt;em&gt;Mesh&lt;/em&gt;&lt;/a&gt; (git:67ff31a) allocator by Bobby Powers &lt;em&gt;et al&lt;/em&gt; [8], and finally the default system allocator (&lt;code&gt;glibc&lt;/code&gt;, 2.31) (based on &lt;em&gt;PtMalloc2&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/bench-2021/bench-amd5950x-2021-01-30-a.svg?sanitize=true&#34;&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/bench-2021/bench-amd5950x-2021-01-30-b.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;Any benchmarks ending in &lt;code&gt;N&lt;/code&gt; run on all 32 logical cores in parallel. Results are averaged over 10 runs and reported relative to mimalloc (where 1.2 means it took 1.2× longer to run). The legend also contains the &lt;em&gt;overall relative score&lt;/em&gt; between the allocators where 100 points is the maximum if an allocator is fastest on all benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;The single threaded &lt;em&gt;cfrac&lt;/em&gt; benchmark by Dave Barrett is an implementation of continued fraction factorization which uses many small short-lived allocations. All allocators do well on such common usage, where &lt;em&gt;mimalloc&lt;/em&gt; is just a tad faster than &lt;em&gt;tcmalloc&lt;/em&gt; and &lt;em&gt;jemalloc&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;leanN&lt;/em&gt; program is interesting as a large realistic and concurrent workload of the &lt;a href=&#34;https://github.com/leanprover/lean&#34;&gt;Lean&lt;/a&gt; theorem prover compiling its own standard library, and there is a 13% speedup over &lt;em&gt;tcmalloc&lt;/em&gt;. This is quite significant: if Lean spends 20% of its time in the allocator that means that &lt;em&gt;mimalloc&lt;/em&gt; is 1.6× faster than &lt;em&gt;tcmalloc&lt;/em&gt; here. (This is surprising as that is not measured in a pure allocation benchmark like &lt;em&gt;alloc-test&lt;/em&gt;. We conjecture that we see this outsized improvement here because &lt;em&gt;mimalloc&lt;/em&gt; has better locality in the allocation which improves performance for the &lt;em&gt;other&lt;/em&gt; computations in a program as well).&lt;/p&gt; &#xA;&lt;p&gt;The single threaded &lt;em&gt;redis&lt;/em&gt; benchmark again show that most allocators do well on such workloads.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;larsonN&lt;/em&gt; server benchmark by Larson and Krishnan [2] allocates and frees between threads. They observed this behavior (which they call &lt;em&gt;bleeding&lt;/em&gt;) in actual server applications, and the benchmark simulates this. Here, &lt;em&gt;mimalloc&lt;/em&gt; is quite a bit faster than &lt;em&gt;tcmalloc&lt;/em&gt; and &lt;em&gt;jemalloc&lt;/em&gt; probably due to the object migration between different threads.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;mstressN&lt;/em&gt; workload performs many allocations and re-allocations, and migrates objects between threads (as in &lt;em&gt;larsonN&lt;/em&gt;). However, it also creates and destroys the &lt;em&gt;N&lt;/em&gt; worker threads a few times keeping some objects alive beyond the life time of the allocating thread. We observed this behavior in many larger server applications.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/mjansson/rpmalloc-benchmark&#34;&gt;&lt;em&gt;rptestN&lt;/em&gt;&lt;/a&gt; benchmark by Mattias Jansson is a allocator test originally designed for &lt;em&gt;rpmalloc&lt;/em&gt;, and tries to simulate realistic allocation patterns over multiple threads. Here the differences between allocators become more apparent.&lt;/p&gt; &#xA;&lt;p&gt;The second benchmark set tests specific aspects of the allocators and shows even more extreme differences between them.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;alloc-test&lt;/em&gt;, by &lt;a href=&#34;http://ithare.com/testing-memory-allocators-ptmalloc2-tcmalloc-hoard-jemalloc-while-trying-to-simulate-real-world-loads/&#34;&gt;OLogN Technologies AG&lt;/a&gt;, is a very allocation intensive benchmark doing millions of allocations in various size classes. The test is scaled such that when an allocator performs almost identically on &lt;em&gt;alloc-test1&lt;/em&gt; as &lt;em&gt;alloc-testN&lt;/em&gt; it means that it scales linearly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;sh6bench&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; benchmarks are developed by &lt;a href=&#34;http://www.microquill.com/&#34;&gt;MicroQuill&lt;/a&gt; as part of SmartHeap. In &lt;em&gt;sh6bench&lt;/em&gt; &lt;em&gt;mimalloc&lt;/em&gt; does much better than the others (more than 2.5× faster than &lt;em&gt;jemalloc&lt;/em&gt;). We cannot explain this well but believe it is caused in part by the &#34;reverse&#34; free-ing pattern in &lt;em&gt;sh6bench&lt;/em&gt;. The &lt;em&gt;sh8bench&lt;/em&gt; is a variation with object migration between threads; whereas &lt;em&gt;tcmalloc&lt;/em&gt; did well on &lt;em&gt;sh6bench&lt;/em&gt;, the addition of object migration causes it to be 10× slower than before.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;xmalloc-testN&lt;/em&gt; benchmark by Lever and Boreham [5] and Christian Eder, simulates an asymmetric workload where some threads only allocate, and others only free -- they observed this pattern in larger server applications. Here we see that the &lt;em&gt;mimalloc&lt;/em&gt; technique of having non-contended sharded thread free lists pays off as it outperforms others by a very large margin. Only &lt;em&gt;rpmalloc&lt;/em&gt;, &lt;em&gt;tbb&lt;/em&gt;, and &lt;em&gt;glibc&lt;/em&gt; also scale well on this benchmark.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;cache-scratch&lt;/em&gt; benchmark by Emery Berger [1], and introduced with the Hoard allocator to test for &lt;em&gt;passive-false&lt;/em&gt; sharing of cache lines. With a single thread they all perform the same, but when running with multiple threads the potential allocator induced false sharing of the cache lines can cause large run-time differences. Crundal [6] describes in detail why the false cache line sharing occurs in the &lt;em&gt;tcmalloc&lt;/em&gt; design, and also discusses how this can be avoided with some small implementation changes. Only the &lt;em&gt;tbb&lt;/em&gt;, &lt;em&gt;rpmalloc&lt;/em&gt; and &lt;em&gt;mesh&lt;/em&gt; allocators also avoid the cache line sharing completely, while &lt;em&gt;Hoard&lt;/em&gt; and &lt;em&gt;glibc&lt;/em&gt; seem to mitigate the effects. Kukanov and Voss [7] describe in detail how the design of &lt;em&gt;tbb&lt;/em&gt; avoids the false cache line sharing.&lt;/p&gt; &#xA;&lt;h2&gt;On a 36-core Intel Xeon&lt;/h2&gt; &#xA;&lt;p&gt;For completeness, here are the results on a big Amazon &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types/#Compute_Optimized&#34;&gt;c5.18xlarge&lt;/a&gt; instance consisting of a 2×18-core Intel Xeon (Cascade Lake) at 3.4GHz (boost 3.5GHz) with 144GiB ECC memory, running Ubuntu 20.04 with glibc 2.31, GCC 9.3.0, and Clang 10.0.0. This time, the mimalloc allocators (mi, xmi, and smi) were compiled with the Clang compiler instead of GCC. The results are similar to the AMD results but it is interesting to see the differences in the &lt;em&gt;larsonN&lt;/em&gt;, &lt;em&gt;mstressN&lt;/em&gt;, and &lt;em&gt;xmalloc-testN&lt;/em&gt; benchmarks.&lt;/p&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/bench-2021/bench-c5-18xlarge-2021-01-30-a.svg?sanitize=true&#34;&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/bench-2021/bench-c5-18xlarge-2021-01-30-b.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;Peak Working Set&lt;/h2&gt; &#xA;&lt;p&gt;The following figure shows the peak working set (rss) of the allocators on the benchmarks (on the c5.18xlarge instance).&lt;/p&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/bench-2021/bench-c5-18xlarge-2021-01-30-rss-a.svg?sanitize=true&#34;&gt; &#xA;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/microsoft/mimalloc/dev/doc/bench-2021/bench-c5-18xlarge-2021-01-30-rss-b.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;Note that the &lt;em&gt;xmalloc-testN&lt;/em&gt; memory usage should be disregarded as it allocates more the faster the program runs. Similarly, memory usage of &lt;em&gt;larsonN&lt;/em&gt;, &lt;em&gt;mstressN&lt;/em&gt;, &lt;em&gt;rptestN&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; can vary depending on scheduling and speed. Nevertheless, we hope to improve the memory usage on &lt;em&gt;mstressN&lt;/em&gt; and &lt;em&gt;rptestN&lt;/em&gt; (just as &lt;em&gt;cfrac&lt;/em&gt;, &lt;em&gt;larsonN&lt;/em&gt; and &lt;em&gt;sh8bench&lt;/em&gt; have a small working set which skews the results).&lt;/p&gt; &#xA;&lt;!--&#xA;# Previous Benchmarks&#xA;&#xA;Todo: should we create a separate page for this?&#xA;&#xA;## Benchmark Results on 36-core Intel: 2020-01-20&#xA;&#xA;Testing on a big Amazon EC2 compute instance&#xA;([c5.18xlarge](https://aws.amazon.com/ec2/instance-types/#Compute_Optimized))&#xA;consisting of a 72 processor Intel Xeon at 3GHz&#xA;with 144GiB ECC memory, running&#x9;Ubuntu 18.04.1 with glibc 2.27 and GCC 7.4.0.&#xA;The measured allocators are _mimalloc_ (xmi, tag:v1.4.0, page reset enabled)&#xA;and its secure build as _smi_,&#xA;Google&#39;s [_tcmalloc_](https://github.com/gperftools/gperftools) (tc, tag:gperftools-2.7) used in Chrome,&#xA;Facebook&#39;s [_jemalloc_](https://github.com/jemalloc/jemalloc) (je, tag:5.2.1) by Jason Evans used in Firefox and FreeBSD,&#xA;the Intel thread building blocks [allocator](https://github.com/intel/tbb) (tbb, tag:2020),&#xA;[rpmalloc](https://github.com/mjansson/rpmalloc) (rp,tag:1.4.0) by Mattias Jansson,&#xA;the original scalable [_Hoard_](https://github.com/emeryberger/Hoard) (tag:3.13) allocator by Emery Berger \[1],&#xA;the memory compacting [_Mesh_](https://github.com/plasma-umass/Mesh) (git:51222e7) allocator by&#xA;Bobby Powers _et al_ \[8],&#xA;and finally the default system allocator (glibc, 2.27) (based on _PtMalloc2_).&#xA;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-a.svg&#34;/&gt;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-b.svg&#34;/&gt;&#xA;&#xA;The following figure shows the peak working set (rss) of the allocators&#xA;on the benchmarks (on the c5.18xlarge instance).&#xA;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-rss-a.svg&#34;/&gt;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-c5-18xlarge-2020-01-20-rss-b.svg&#34;/&gt;&#xA;&#xA;&#xA;## On 24-core AMD Epyc, 2020-01-16&#xA;&#xA;For completeness, here are the results on a&#xA;[r5a.12xlarge](https://aws.amazon.com/ec2/instance-types/#Memory_Optimized) instance&#xA;having a 48 processor AMD Epyc 7000 at 2.5GHz with 384GiB of memory.&#xA;The results are similar to the Intel results but it is interesting to&#xA;see the differences in the _larsonN_, _mstressN_, and _xmalloc-testN_ benchmarks.&#xA;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-r5a-12xlarge-2020-01-16-a.svg&#34;/&gt;&#xA;&lt;img width=&#34;90%&#34; src=&#34;doc/bench-2020/bench-r5a-12xlarge-2020-01-16-b.svg&#34;/&gt;&#xA;&#xA;--&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[1] Emery D. Berger, Kathryn S. McKinley, Robert D. Blumofe, and Paul R. Wilson. &lt;em&gt;Hoard: A Scalable Memory Allocator for Multithreaded Applications&lt;/em&gt; the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-IX). Cambridge, MA, November 2000. &lt;a href=&#34;http://www.cs.utexas.edu/users/mckinley/papers/asplos-2000.pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[2] P. Larson and M. Krishnan. &lt;em&gt;Memory allocation for long-running server applications&lt;/em&gt;. In ISMM, Vancouver, B.C., Canada, 1998. &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.45.1947&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[3] D. Grunwald, B. Zorn, and R. Henderson. &lt;em&gt;Improving the cache locality of memory allocation&lt;/em&gt;. In R. Cartwright, editor, Proceedings of the Conference on Programming Language Design and Implementation, pages 177–186, New York, NY, USA, June 1993. &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.43.6621&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[4] J. Barnes and P. Hut. &lt;em&gt;A hierarchical O(n*log(n)) force-calculation algorithm&lt;/em&gt;. Nature, 324:446-449, 1986.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[5] C. Lever, and D. Boreham. &lt;em&gt;Malloc() Performance in a Multithreaded Linux Environment.&lt;/em&gt; In USENIX Annual Technical Conference, Freenix Session. San Diego, CA. Jun. 2000. Available at &lt;a href=&#34;https://github.com/kuszmaul/SuperMalloc/tree/master/tests&#34;&gt;https://github.com/kuszmaul/SuperMalloc/tree/master/tests&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[6] Timothy Crundal. &lt;em&gt;Reducing Active-False Sharing in TCMalloc&lt;/em&gt;. 2016. CS16S1 project at the Australian National University. &lt;a href=&#34;http://courses.cecs.anu.edu.au/courses/CSPROJECTS/16S1/Reports/Timothy_Crundal_Report.pdf&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[7] Alexey Kukanov, and Michael J Voss. &lt;em&gt;The Foundations for Scalable Multi-Core Software in Intel Threading Building Blocks.&lt;/em&gt; Intel Technology Journal 11 (4). 2007&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[8] Bobby Powers, David Tench, Emery D. Berger, and Andrew McGregor. &lt;em&gt;Mesh: Compacting Memory Management for C/C++&lt;/em&gt; In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI&#39;19), June 2019, pages 333-–346.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;- \[9] Paul Liétar, Theodore Butler, Sylvan Clebsch, Sophia Drossopoulou, Juliana Franco, Matthew J Parkinson,&#xA;  Alex Shamis, Christoph M Wintersteiger, and David Chisnall.&#xA;  _Snmalloc: A Message Passing Allocator._&#xA;  In Proceedings of the 2019 ACM SIGPLAN International Symposium on Memory Management, 122–135. ACM. 2019.&#xA;--&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;h1&gt;Older Release Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-11-14, &lt;code&gt;v1.7.3&lt;/code&gt;, &lt;code&gt;v2.0.3&lt;/code&gt; (beta): improved WASM support, improved macOS support and performance (including M1), improved performance for v2 for large objects, Python integration improvements, more standard installation directories, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-06-17, &lt;code&gt;v1.7.2&lt;/code&gt;, &lt;code&gt;v2.0.2&lt;/code&gt; (beta): support M1, better installation layout on Linux, fix thread_id on Android, prefer 2-6TiB area for aligned allocation to work better on pre-windows 8, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-04-06, &lt;code&gt;v1.7.1&lt;/code&gt;, &lt;code&gt;v2.0.1&lt;/code&gt; (beta): fix bug in arena allocation for huge pages, improved aslr on large allocations, initial M1 support (still experimental).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-01-31, &lt;code&gt;v2.0.0&lt;/code&gt;: beta release 2.0: new slice algorithm for managing internal mimalloc pages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2021-01-31, &lt;code&gt;v1.7.0&lt;/code&gt;: stable release 1.7: support explicit user provided memory regions, more precise statistics, improve macOS overriding, initial support for Apple M1, improved DragonFly support, faster memcpy on Windows, various small fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-09-24, &lt;code&gt;v1.6.7&lt;/code&gt;: stable release 1.6: using standard C atomics, passing tsan testing, improved handling of failing to commit on Windows, add &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/master/include/mimalloc.h#L156&#34;&gt;&lt;code&gt;mi_process_info&lt;/code&gt;&lt;/a&gt; api call.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-08-06, &lt;code&gt;v1.6.4&lt;/code&gt;: stable release 1.6: improved error recovery in low-memory situations, support for IllumOS and Haiku, NUMA support for Vista/XP, improved NUMA detection for AMD Ryzen, ubsan support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-05-05, &lt;code&gt;v1.6.3&lt;/code&gt;: stable release 1.6: improved behavior in out-of-memory situations, improved malloc zones on macOS, build PIC static libraries by default, add option to abort on out-of-memory, line buffered statistics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-04-20, &lt;code&gt;v1.6.2&lt;/code&gt;: stable release 1.6: fix compilation on Android, MingW, Raspberry, and Conda, stability fix for Windows 7, fix multiple mimalloc instances in one executable, fix &lt;code&gt;strnlen&lt;/code&gt; overload, fix aligned debug padding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-02-17, &lt;code&gt;v1.6.1&lt;/code&gt;: stable release 1.6: minor updates (build with clang-cl, fix alignment issue for small objects).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-02-09, &lt;code&gt;v1.6.0&lt;/code&gt;: stable release 1.6: fixed potential memory leak, improved overriding and thread local support on FreeBSD, NetBSD, DragonFly, and macOSX. New byte-precise heap block overflow detection in debug mode (besides the double-free detection and free-list corruption detection). Add &lt;code&gt;nodiscard&lt;/code&gt; attribute to most allocation functions. Enable &lt;code&gt;MIMALLOC_PAGE_RESET&lt;/code&gt; by default. New reclamation strategy for abandoned heap pages for better memory footprint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-02-09, &lt;code&gt;v1.5.0&lt;/code&gt;: stable release 1.5: improved free performance, small bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-01-22, &lt;code&gt;v1.4.0&lt;/code&gt;: stable release 1.4: improved performance for delayed OS page reset, more eager concurrent free, addition of STL allocator, fixed potential memory leak.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-01-15, &lt;code&gt;v1.3.0&lt;/code&gt;: stable release 1.3: bug fixes, improved randomness and &lt;a href=&#34;https://github.com/microsoft/mimalloc/raw/783e3377f79ee82af43a0793910a9f2d01ac7863/include/mimalloc-internal.h#L396&#34;&gt;stronger free list encoding&lt;/a&gt; in secure mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-12-22, &lt;code&gt;v1.2.2&lt;/code&gt;: stable release 1.2: minor updates.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-11-22, &lt;code&gt;v1.2.0&lt;/code&gt;: stable release 1.2: bug fixes, improved secure mode (free list corruption checks, double free mitigation). Improved dynamic overriding on Windows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-10-07, &lt;code&gt;v1.1.0&lt;/code&gt;: stable release 1.1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-09-01, &lt;code&gt;v1.0.8&lt;/code&gt;: pre-release 8: more robust windows dynamic overriding, initial huge page support.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-08-10, &lt;code&gt;v1.0.6&lt;/code&gt;: pre-release 6: various performance improvements.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Phi-3CookBook</title>
    <updated>2024-08-24T01:27:36Z</updated>
    <id>tag:github.com,2024-08-24:/microsoft/Phi-3CookBook</id>
    <link href="https://github.com/microsoft/Phi-3CookBook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a Phi-3 book for getting started with Phi-3. Phi-3, a family of open AI models developed by Microsoft. Phi-3 models are the most capable and cost-effective small language models (SLMs) available, outperforming models of the same size and next size up across a variety of language, reasoning, coding, and math benchmarks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Phi-3 Cookbook: Hands-On Examples with Microsoft&#39;s Phi-3 Models&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codespaces.new/microsoft/phi-3cookbook&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open and use the samples in GitHub Codespaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/phi-3cookbook&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=for-the-badge&amp;amp;label=Dev%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Dev Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://GitHub.com/microsoft/phi-3cookbook/graphs/contributors/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/microsoft/phi-3cookbook.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/microsoft/phi-3cookbook/issues/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/microsoft/phi-3cookbook.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/microsoft/phi-3cookbook/pulls/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/microsoft/phi-3cookbook.svg?sanitize=true&#34; alt=&#34;GitHub pull-requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://GitHub.com/microsoft/phi-3cookbook/watchers/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/microsoft/phi-3cookbook.svg?style=social&amp;amp;label=Watch&#34; alt=&#34;GitHub watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/microsoft/phi-3cookbook/network/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/microsoft/phi-3cookbook.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/microsoft/phi-3cookbook/stargazers/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/microsoft/phi-3cookbook?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/ByRwuEEgH4?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/ByRwuEEgH4&#34; alt=&#34;Azure AI Community Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Phi, is a family of open AI models developed by Microsoft. Phi models are the most capable and cost-effective small language models (SLMs) available, outperforming models of the same size and next size up across a variety of language, reasoning, coding, and math benchmarks. The Phi-3 Family includes mini, small, medium and vision versions, trained based on different parameter amounts to serve various application scenarios. For more detailed information about Microsoft&#39;s Phi family, please visit the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/Phi3Family.md&#34;&gt;Welcome to the Phi Family&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/imgs/00/Phi3getstarted.png&#34; alt=&#34;Phi3Family&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/EnvironmentSetup.md&#34;&gt;Setting up your environment&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/Phi3Family.md&#34;&gt;Welcome to the Phi Family&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/Understandingtech.md&#34;&gt;Understanding Key Technologies&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/AISafety.md&#34;&gt;AI Safety for Phi Models&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/Hardwaresupport.md&#34;&gt;Phi-3 Hardware Support&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/Edgeandcloud.md&#34;&gt;Phi-3 Models &amp;amp; Availability across platforms&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/01.Introduce/Guidance.md&#34;&gt;Using Guidance-ai and Phi&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Start&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/GitHubModel_QuickStart.md&#34;&gt;Using Phi-3 in GitHub Model Catalog&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/Huggingface_QuickStart.md&#34;&gt;Using Phi-3 in Hugging face&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/OpenAISDK_Quickstart.md&#34;&gt;Using Phi-3 with OpenAI SDK&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/HttpAPI_QuickStart.md&#34;&gt;Using Phi-3 with Http Requests&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/AzureAIStudio_QuickStart.md&#34;&gt;Using Phi-3 in Azure AI Studio&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/AzureModel_Inference.md&#34;&gt;Using Phi-3 Model Inference with Azure MaaS or MaaP&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/AzureAIStudio_MaaS.md&#34;&gt;Deploying Phi-3 models as serverless APIs in Azure AI Studio&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/Ollama_QuickStart.md&#34;&gt;Using Phi-3 in Ollama&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/LMStudio_QuickStart.md&#34;&gt;Using Phi-3 in LM Studio&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/AITookit_QuickStart.md&#34;&gt;Using Phi-3 in AI Toolkit VSCode&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/LiteLLM_QuickStart.md&#34;&gt;Using Phi-3 and LiteLLM&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/overview.md&#34;&gt;Inference Phi-3&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/iOS_Inference.md&#34;&gt;Inference Phi-3 in iOS&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/Jetson_Inference.md&#34;&gt;Inference Phi-3 in Jetson&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/AIPC_Inference.md&#34;&gt;Inference Phi-3 in AI PC&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/MLX_Inference.md&#34;&gt;Inference Phi-3 with Apple MLX Framework&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/Local_Server_Inference.md&#34;&gt;Inference Phi-3 in Local Server&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/Remote_Interence.md&#34;&gt;Inference Phi-3 in Remote Server using AI Toolkit&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/Rust_Inference.md&#34;&gt;Inference Phi-3 with Rust&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/Vision_Inference.md&#34;&gt;Inference Phi-3-Vision in Local&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/03.Inference/Kaito_Inference.md&#34;&gt;Inference Phi-3 with Kaito AKS, Azure Containers(official support)&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Inference_ORT.md&#34;&gt;Inference Your Fine-tuning ONNX Runtime Model&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fine-tuning Phi-3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/CreatingSampleData.md&#34;&gt;Downloading &amp;amp; Creating Sample Data Set&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_Scenarios.md&#34;&gt;Fine-tuning Scenarios&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_vs_RAG.md&#34;&gt;Fine-tuning vs RAG&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/LetPhi3gotoIndustriy.md&#34;&gt;Fine-tuning Let Phi-3 become an industry expert&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/Finetuning_VSCodeaitoolkit.md&#34;&gt;Fine-tuning Phi-3 with AI Toolkit for VS Code&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/Introduce_AzureML.md&#34;&gt;Fine-tuning Phi-3 with Azure Machine Learning Service&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_Lora.md&#34;&gt;Fine-tuning Phi-3 with Lora&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_Qlora.md&#34;&gt;Fine-tuning Phi-3 with QLora&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_AIStudio.md&#34;&gt;Fine-tuning Phi-3 with Azure AI Studio&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_MLSDK.md&#34;&gt;Fine-tuning Phi-3 with Azure ML CLI/SDK&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_MicrosoftOlive.md&#34;&gt;Fine-tuning with Microsoft Olive&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_Phi-3-visionWandB.md&#34;&gt;Fine-tuning Phi-3-vision with Weights and Bias&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_MLX.md&#34;&gt;Fine-tuning Phi-3 with Apple MLX Framework&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_Vision.md&#34;&gt;Fine-tuning Phi-3-vision (official support)&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/04.Fine-tuning/FineTuning_Kaito.md&#34;&gt;Fine-Tuning Phi-3 with Kaito AKS , Azure Containers(official Support)&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Evaluation Phi-3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/05.Evaluation/ResponsibleAI.md&#34;&gt;Introduction to Responsible AI&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/05.Evaluation/Promptflow.md&#34;&gt;Introduction to Promptflow&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/05.Evaluation/AzureAIStudio.md&#34;&gt;Introduction to Azure AI Studio for evaluation&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;E2E Samples for Phi-3-mini&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Introduction.md&#34;&gt;Introduction to End to End Samples&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Datasets.md&#34;&gt;Prepare your industry data&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_LoRA&amp;amp;QLoRA_Config_With_Olive.md&#34;&gt;Use Microsoft Olive to architect your projects&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime-inference-examples/tree/main/mobile/examples/phi-3/android&#34;&gt;Local Chatbot on Android with Phi-3, ONNXRuntime Mobile and ONNXRuntime Generate API&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/spaces/Xenova/experimental-phi3-webgpu&#34;&gt;Hugging Face Space WebGPU and Phi-3-mini Demo- Phi-3-mini provides the user with a private (and powerful) chatbot experience. You can try it out&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js/chat&#34;&gt;Local Chatbot in the browser using Phi3, ONNX Runtime Web and WebGPU&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_OpenVino_Chat.md&#34;&gt;OpenVino Chat&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Phi-3-mini_with_whisper.md&#34;&gt;Multi Model - Interactive Phi-3-mini and OpenAI Whisper&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Phi-3-MLflow.md&#34;&gt;MLFlow - Building a wrapper and using Phi-3 with MLFlow&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/Olive/tree/main/examples/phi3&#34;&gt;Model Optimization - How to optimize Phi-3-min model for ONNX Runtime Web with Olive&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/Phi3-Chat-WinUI3-Sample/&#34;&gt;WinUI3 App with Phi-3 mini-4k-instruct-onnx&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/ai-powered-notes-winui3-sample&#34;&gt;WinUI3 Multi Model AI Powered Notes App Sample&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Phi-3-FineTuning_PromptFlow_Integration.md&#34;&gt;Fine-tune and Integrate custom Phi-3 models with Prompt flow&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Phi-3-FineTuning_PromptFlow_Integration_AIstudio.md&#34;&gt;Fine-tune and Integrate custom Phi-3 models with Prompt flow in Azure AI Studio&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/code/09.UpdateSamples/Aug/phi3-instruct-demo.ipynb&#34;&gt;Phi-3.5-mini-instruct language prediction sample (Chinese/English)&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;E2E Samples for Phi-3-vision&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/code/06.E2E/E2E_Phi-3-vision-image-text-to-text-online-endpoint.ipynb&#34;&gt;Phi-3-vision-Image text to text&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://onnxruntime.ai/docs/genai/tutorials/phi3-v.html&#34;&gt;Phi-3-vision-ONNX&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Phi-3-Embedding_Images_with_CLIPVision.md&#34;&gt;Phi-3-vision CLIP Embedding&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jennifermarsman/PhiRecycling/&#34;&gt;DEMO: Phi-3 Recycling&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.openvino.ai/nightly/notebooks/phi-3-vision-with-output.html&#34;&gt;Phi-3-vision - Visual language assistant with Phi3-Vision and OpenVINO&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_Nvidia_NIM_Vision.md&#34;&gt;Phi-3 Vision Nvidia NIM&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/06.E2ESamples/E2E_OpenVino_Phi3Vision.md&#34;&gt;Phi-3 Vision OpenVino&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/code/09.UpdateSamples/Aug/phi3-vision-demo.ipynb&#34;&gt;Phi-3.5 Vision multi-frame or multi-image sample&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;E2E Samples for Phi-3.5-MoE&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/code/09.UpdateSamples/Aug/phi3_moe_demo.ipynb&#34;&gt;Phi-3.5 Mixture of Experts Models (MoEs) Social Media Sample&lt;/a&gt;(✅)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Labs and workshops samples Phi-3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/07.Labs/Csharp/csharplabs.md&#34;&gt;C# .NET Labs&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/07.Labs/VSCode/README.md&#34;&gt;Build your own Visual Studio Code GitHub Copilot Chat with Microsoft Phi-3 Family&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/code/08.RAG/rag_webgpu_chat/README.md&#34;&gt;Local WebGPU Phi-3 Mini RAG Chatbot Samples with Local RAG File&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://onnxruntime.ai/docs/genai/tutorials/phi3-python.html&#34;&gt;Phi-3 ONNX Tutorial&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://onnxruntime.ai/docs/genai/tutorials/phi3-v.html&#34;&gt;Phi-3-vision ONNX Tutorial&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime-genai/raw/main/examples/python/phi-3-tutorial.md&#34;&gt;Run the Phi-3 models with the ONNX Runtime generate() API&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime-genai/tree/main/examples/chat_app&#34;&gt;Phi-3 ONNX Multi Model LLM Chat UI, This is a chat demo&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime-genai/tree/main/examples/csharp/HelloPhi&#34;&gt;C# Hello Phi-3 ONNX example Phi-3&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/onnxruntime-genai/tree/main/examples/csharp/HelloPhi3V&#34;&gt;C# API Phi-3 ONNX example to support Phi3-Vision&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/07.Labs/CsharpOllamaCodeSpaces/CsharpOllamaCodeSpaces.md&#34;&gt;Run C# Phi-3 samples in a CodeSpace&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/code/07.Lab/RAG_with_PromptFlow_and_AISearch/README.md&#34;&gt;Using Phi-3 with Promptflow and Azure AI Search&lt;/a&gt;(✅)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.microsoft.com/windows/ai/?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;Windows AI-PC APIs with Windows Copilot Library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Phi-3 Models&lt;/h2&gt; &#xA;&lt;h3&gt;Phi-3 on Azure AI Studio&lt;/h3&gt; &#xA;&lt;p&gt;You can learn how to use Microsoft Phi-3 and how to build E2E solutions in your different hardware devices. To experience Phi-3 for yourself, start by playing with the model and customizing Phi-3 for your scenarios using the &lt;a href=&#34;https://aka.ms/phi3-azure-ai&#34;&gt;Azure AI Studio, Azure AI Model Catalog&lt;/a&gt; you can learn more at Getting Started with &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/AzureAIStudio_QuickStart.md&#34;&gt;Azure AI Studio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt; Each model has a dedicated playground to test the model &lt;a href=&#34;https://aka.ms/try-phi3&#34;&gt;Azure AI Playground&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Phi-3 on GitHub Models&lt;/h3&gt; &#xA;&lt;p&gt;You can learn how to use Microsoft Phi-3 and how to build E2E solutions in your different hardware devices. To experience Phi-3 for yourself, start by playing with the model and customizing Phi-3 for your scenarios using the &lt;a href=&#34;https://github.com/marketplace/models?WT.mc_id=aiml-137032-kinfeylo&#34;&gt;GitHub Model Catalog&lt;/a&gt; you can learn more at Getting Started with &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/GitHubModel_QuickStart.md&#34;&gt;GitHub Model Catalog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt; Each model has a dedicated &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/md/02.QuickStart/GitHubModel_QuickStart.md&#34;&gt;playground to test the model&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Phi-3 on Hugging Face&lt;/h3&gt; &#xA;&lt;p&gt;You can also find the model on the &lt;a href=&#34;https://huggingface.co/microsoft&#34;&gt;Hugging Face&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt; &lt;a href=&#34;https://huggingface.co/chat/models/microsoft/Phi-3-mini-4k-instruct&#34;&gt;Hugging Chat playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Multi-Language Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;   &lt;th&gt;Translation&lt;/th&gt; &#xA;   &lt;th&gt;Translators&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traditional Chinese&lt;/td&gt; &#xA;   &lt;td&gt;zh-tw&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/translations/zh-tw/README.md&#34;&gt;閱讀正體中文&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/doggy8088&#34;&gt;@doggy8088&lt;/a&gt; (MVP &amp;amp; RD)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Simplified Chinese&lt;/td&gt; &#xA;   &lt;td&gt;zh-cn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Phi-3CookBook/main/translations/zh-cn/README.md&#34;&gt;阅读简体中文&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shijiong&#34;&gt;@shijiong&lt;/a&gt; (MVP), &lt;a href=&#34;https://github.com/JamboChen&#34;&gt;@JamboChen&lt;/a&gt; (Student Ambassador)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>amnezia-vpn/amnezia-client</title>
    <updated>2024-08-24T01:27:36Z</updated>
    <id>tag:github.com,2024-08-24:/amnezia-vpn/amnezia-client</id>
    <link href="https://github.com/amnezia-vpn/amnezia-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Amnezia VPN Client (Desktop+Mobile)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amnezia VPN&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;em&gt;The best client for self-hosted VPN&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/actions/workflows/deploy.yml?query=branch:dev&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/actions/workflows/deploy.yml/badge.svg?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/amnezia-vpn/amnezia-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Amnezia is an open-source VPN client, with a key feature that enables you to deploy your own VPN server on your server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/uipic4.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/releases/download/4.6.0.3/AmneziaVPN_4.6.0.3_x64.exe&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/win.png&#34; width=&#34;150&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/releases/download/4.6.0.3/AmneziaVPN_4.6.0.3.dmg&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/mac.png&#34; width=&#34;150&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/releases/download/4.6.0.3/AmneziaVPN_Linux_4.6.0.3.tar.zip&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/lin.png&#34; width=&#34;150&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/releases/tag/4.6.0.3&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/andr.png&#34; width=&#34;150&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/search?q=amnezia+vpn&amp;amp;c=apps&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/play.png&#34; width=&#34;150&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/us/app/amneziavpn/id1600529900&#34;&gt;&lt;img src=&#34;https://github.com/amnezia-vpn/amnezia-client/raw/dev/metadata/img-readme/apl.png&#34; width=&#34;150&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/releases&#34;&gt;All releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very easy to use - enter your IP address, SSH login, password and Amnezia will automatically install VPN docker containers to your server and connect to the VPN.&lt;/li&gt; &#xA; &lt;li&gt;Classic VPN-protocols: OpenVPN, WireGuard and IKEv2 protocols.&lt;/li&gt; &#xA; &lt;li&gt;Protocols with traffic Masking (Obfuscation): OpenVPN over &lt;a href=&#34;https://github.com/cbeuw/Cloak&#34;&gt;Cloak&lt;/a&gt; plugin, Shadowsocks (OpenVPN over Shadowsocks), &lt;a href=&#34;https://docs.amnezia.org/documentation/amnezia-wg/&#34;&gt;AmneziaWG&lt;/a&gt; and XRay.&lt;/li&gt; &#xA; &lt;li&gt;Split tunneling support - add any sites to the client to enable VPN only for them or add Apps (only for Android and Desktop).&lt;/li&gt; &#xA; &lt;li&gt;Windows, MacOS, Linux, Android, iOS releases.&lt;/li&gt; &#xA; &lt;li&gt;Support for AmneziaWG protocol configuration on &lt;a href=&#34;https://docs.keenetic.com/ua/air/kn-1611/en/6319-latest-development-release.html#UUID-186c4108-5afd-c10b-f38a-cdff6c17fab3_section-idm33192196168192-improved&#34;&gt;Keenetic beta firmware&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amnezia.org&#34;&gt;https://amnezia.org&lt;/a&gt; - project website&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/AmneziaVPN&#34;&gt;https://www.reddit.com/r/AmneziaVPN&lt;/a&gt; - Reddit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/amnezia_vpn_en&#34;&gt;https://t.me/amnezia_vpn_en&lt;/a&gt; - Telegram support channel (English)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/amnezia_vpn_ir&#34;&gt;https://t.me/amnezia_vpn_ir&lt;/a&gt; - Telegram support channel (Farsi)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/amnezia_vpn_mm&#34;&gt;https://t.me/amnezia_vpn_mm&lt;/a&gt; - Telegram support channel (Myanmar)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/amnezia_vpn&#34;&gt;https://t.me/amnezia_vpn&lt;/a&gt; - Telegram support channel (Russian)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vpnpay.io/en/amnezia-premium/&#34;&gt;https://vpnpay.io/en/amnezia-premium/&lt;/a&gt; - Amnezia Premium&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech&lt;/h2&gt; &#xA;&lt;p&gt;AmneziaVPN uses several open-source projects to work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openvpn.net/&#34;&gt;OpenVPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shadowsocks.org/&#34;&gt;Shadowsocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libssh.org&#34;&gt;LibSsh&lt;/a&gt; - forked from Qt Creator&lt;/li&gt; &#xA; &lt;li&gt;and more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Checking out the source code&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to pull all submodules after checking out the repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Help with translations&lt;/h3&gt; &#xA;&lt;p&gt;Download the most actual translation files.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/amnezia-vpn/amnezia-client/actions?query=is%3Asuccess+branch%3Adev&#34;&gt;&#34;Actions&#34; tab&lt;/a&gt;, click on the first line. Then scroll down to the &#34;Artifacts&#34; section and download &#34;AmneziaVPN_translations&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Unzip this file. Each *.ts file contains strings for one corresponding language.&lt;/p&gt; &#xA;&lt;p&gt;Translate or correct some strings in one or multiple *.ts files and commit them back to this repository into the &lt;code&gt;client/translations&lt;/code&gt; folder. You can do it via a web-interface or any other method you&#39;re familiar with.&lt;/p&gt; &#xA;&lt;h3&gt;Building sources and deployment&lt;/h3&gt; &#xA;&lt;p&gt;Check deploy folder for build scripts.&lt;/p&gt; &#xA;&lt;h3&gt;How to build an iOS app from source code on MacOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, make sure you have &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;XCode&lt;/a&gt; installed, at least version 14 or higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We use QT to generate the XCode project. We need QT version 6.6.2. Install QT for MacOS &lt;a href=&#34;https://doc.qt.io/qt-6/macos.html&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://www.qt.io/download-open-source&#34;&gt;QT Online Installer&lt;/a&gt;. Required modules:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MacOS&lt;/li&gt; &#xA;   &lt;li&gt;iOS&lt;/li&gt; &#xA;   &lt;li&gt;Qt 5 Compatibility Module&lt;/li&gt; &#xA;   &lt;li&gt;Qt Shader Tools&lt;/li&gt; &#xA;   &lt;li&gt;Additional Libraries: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Qt Image Formats&lt;/li&gt; &#xA;     &lt;li&gt;Qt Multimedia&lt;/li&gt; &#xA;     &lt;li&gt;Qt Remote Objects&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install CMake if required. We recommend CMake version 3.25. You can install CMake &lt;a href=&#34;https://cmake.org/download/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You also need to install go &amp;gt;= v1.16. If you don&#39;t have it installed already, download go from the &lt;a href=&#34;https://golang.org/dl/&#34;&gt;official website&lt;/a&gt; or use Homebrew. The latest version is recommended. Install gomobile&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:~/go/bin&#xA;go install golang.org/x/mobile/cmd/gomobile@latest&#xA;gomobile init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Build the project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export QT_BIN_DIR=&#34;&amp;lt;PATH-TO-QT-FOLDER&amp;gt;/Qt/&amp;lt;QT-VERSION&amp;gt;/ios/bin&#34;&#xA;export QT_MACOS_ROOT_DIR=&#34;&amp;lt;PATH-TO-QT-FOLDER&amp;gt;/Qt/&amp;lt;QT-VERSION&amp;gt;/macos&#34;&#xA;export QT_IOS_BIN=$QT_BIN_DIR&#xA;export PATH=$PATH:~/go/bin&#xA;mkdir build-ios&#xA;$QT_IOS_BIN/qt-cmake . -B build-ios -GXcode -DQT_HOST_PATH=$QT_MACOS_ROOT_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace PATH-TO-QT-FOLDER and QT-VERSION to your environment&lt;/p&gt; &#xA;&lt;p&gt;If you get &lt;code&gt;gomobile: command not found&lt;/code&gt; make sure to set PATH to the location of the bin folder where gomobile was installed. Usually, it&#39;s in &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$(PATH):/path/to/GOPATH/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Open the XCode project. You can then run /test/archive/ship the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If the build fails with the following error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make: *** &#xA;[$(PROJECTDIR)/client/build/AmneziaVPN.build/Debug-iphoneos/wireguard-go-bridge/goroot/.prepared] &#xA;Error 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a user-defined variable to both AmneziaVPN and WireGuardNetworkExtension targets&#39; build settings with key &lt;code&gt;PATH&lt;/code&gt; and value &lt;code&gt;${PATH}/path/to/bin/folder/with/go/executable&lt;/code&gt;, e.g. &lt;code&gt;${PATH}:/usr/local/go/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;if the above error persists on your M1 Mac, then most probably you need to install arch based CMake&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;arch -arm64 brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build might fail with the &#34;source files not found&#34; error the first time you try it, because the modern XCode build system compiles dependencies in parallel, and some dependencies end up being built after the ones that require them. In this case, simply restart the build.&lt;/p&gt; &#xA;&lt;h2&gt;How to build the Android app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tested on Mac OS&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Android app has the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11&lt;/li&gt; &#xA; &lt;li&gt;Android platform SDK 33&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.25.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After you have installed QT, QT Creator, and Android Studio, you need to configure QT Creator correctly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click in the top menu bar on &lt;code&gt;QT Creator&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Devices&lt;/code&gt; and select the tab &lt;code&gt;Android&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set path to JDK 11&lt;/li&gt; &#xA; &lt;li&gt;Set path to Android SDK (&lt;code&gt;$ANDROID_HOME&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you get errors regarding missing SDK or &#39;SDK manager not running&#39;, you cannot fix them by correcting the paths. If you have some spare GBs on your disk, you can let QT Creator install all requirements by choosing an empty folder for &lt;code&gt;Android SDK location&lt;/code&gt; and clicking on &lt;code&gt;Set Up SDK&lt;/code&gt;. Be aware: This will install a second Android SDK and NDK on your machine!&amp;nbsp; Double-check that the right CMake version is configured: &amp;nbsp;Click on &lt;code&gt;QT Creator&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; and click on the side menu on &lt;code&gt;Kits&lt;/code&gt;. Under the center content view&#39;s &lt;code&gt;Kits&lt;/code&gt; tab, you&#39;ll find an entry for &lt;code&gt;CMake Tool&lt;/code&gt;. If the default selected CMake version is lower than 3.25.0, install on your system CMake &amp;gt;= 3.25.0 and choose &lt;code&gt;System CMake at &amp;lt;path&amp;gt;&lt;/code&gt; from the drop-down list. If this entry is missing, you either have not installed CMake yet or QT Creator hasn&#39;t found the path to it. In that case, click in the preferences window on the side menu item &lt;code&gt;CMake&lt;/code&gt;, then on the tab &lt;code&gt;Tools&lt;/code&gt; in the center content view, and finally on the button &lt;code&gt;Add&lt;/code&gt; to set the path to your installed CMake.&amp;nbsp; Please make sure that you have selected Android Platform SDK 33 for your project: click in the main view&#39;s side menu on &lt;code&gt;Projects&lt;/code&gt;, and on the left, you&#39;ll see a section &lt;code&gt;Build &amp;amp; Run&lt;/code&gt; showing different Android build targets. You can select any of them, Amnezia VPN&#39;s project setup is designed in a way that all Android targets will be built. Click on the targets submenu item &lt;code&gt;Build&lt;/code&gt; and scroll in the center content view to &lt;code&gt;Build Steps&lt;/code&gt;. Click on &lt;code&gt;Details&lt;/code&gt; at the end of the headline &lt;code&gt;Build Android APK&lt;/code&gt; (the &lt;code&gt;Details&lt;/code&gt; button might be hidden in case the QT Creator Window is not running in full screen!). Here we are: Choose &lt;code&gt;android-33&lt;/code&gt; as &lt;code&gt;Android Build Platform SDK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! You should be ready to compile the project from QT Creator!&lt;/p&gt; &#xA;&lt;h3&gt;Development flow&lt;/h3&gt; &#xA;&lt;p&gt;After you&#39;ve hit the build button, QT-Creator copies the whole project to a folder in the repository parent directory. The folder should look something like &lt;code&gt;build-amnezia-client-Android_Qt_&amp;lt;version&amp;gt;_Clang_&amp;lt;architecture&amp;gt;-&amp;lt;BuildType&amp;gt;&lt;/code&gt;. If you want to develop Amnezia VPNs Android components written in Kotlin, such as components using system APIs, you need to import the generated project in Android Studio with &lt;code&gt;build-amnezia-client-Android_Qt_&amp;lt;version&amp;gt;_Clang_&amp;lt;architecture&amp;gt;-&amp;lt;BuildType&amp;gt;/client/android-build&lt;/code&gt; as the projects root directory. While you should be able to compile the generated project from Android Studio, you cannot work directly in the repository&#39;s Android project. So whenever you are confident with your work in the generated project, you&#39;ll need to copy and paste the affected files to the corresponding path in the repository&#39;s Android project so that you can add and commit your changes!&lt;/p&gt; &#xA;&lt;p&gt;You may face compiling issues in QT Creator after you&#39;ve worked in Android Studio on the generated project. Just do a &lt;code&gt;./gradlew clean&lt;/code&gt; in the generated project&#39;s root directory (&lt;code&gt;&amp;lt;path&amp;gt;/client/android-build/.&lt;/code&gt;) and you should be good to go.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPL v3.0&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/amneziavpn&#34;&gt;https://www.patreon.com/amneziavpn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bitcoin: bc1q26eevjcg9j0wuyywd2e3uc9cs2w58lpkpjxq6p &lt;br&gt; USDT BEP20: 0x6abD576765a826f87D1D95183438f9408C901bE4 &lt;br&gt; USDT TRC20: TELAitazF1MZGmiNjTcnxDjEiH5oe7LC9d &lt;br&gt; XMR: 48spms39jt1L2L5vyw2RQW6CXD6odUd4jFu19GZcDyKKQV9U88wsJVjSbL4CfRys37jVMdoaWVPSvezCQPhHXUW5UKLqUp3&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This project is tested with BrowserStack. We express our gratitude to &lt;a href=&#34;https://www.browserstack.com&#34;&gt;BrowserStack&lt;/a&gt; for supporting our project.&lt;/p&gt;</summary>
  </entry>
</feed>