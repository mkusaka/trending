<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-26T01:28:16Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yassinebenaid/bunster</title>
    <updated>2025-01-26T01:28:16Z</updated>
    <id>tag:github.com,2025-01-26:/yassinebenaid/bunster</id>
    <link href="https://github.com/yassinebenaid/bunster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compile shell scripts to static binaries.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/yassinebenaid/bunster/master/docs/public/logo.png&#34;&gt; &#xA; &lt;h1&gt;Bunster&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/yassinebenaid/bunster/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/yassinebenaid/bunster/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bunster.netlify.app&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-e57884?logo=BookStack&amp;amp;logoColor=9c2e5c&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Have you ever wished your shell scripts could be faster, more portable, and secure ? &lt;strong&gt;Bunster&lt;/strong&gt; brings this to life by transforming your shell scripts into efficient, standalone binaries that are easy to distribute and deploy across platforms &lt;em&gt;(only unix is supported at the moment)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other tools, &lt;strong&gt;Bunster&lt;/strong&gt; doesn’t just wrap your scripts in a binary—it compiles them down to efficient native machine code, leveraging the powerful Go toolchain. This ensures performance, portability, and robustness.&lt;/p&gt; &#xA;&lt;p&gt;Technically speaking, &lt;strong&gt;Bunster&lt;/strong&gt; in fact is a &lt;code&gt;shell-to-Go&lt;/code&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Source-to-source_compiler&#34;&gt;Transpiler&lt;/a&gt; that generates &lt;a href=&#34;https://go.dev&#34;&gt;Go&lt;/a&gt; source out of your scripts. Then, optionally uses the &lt;a href=&#34;https://go.dev/dl&#34;&gt;Go Toolchain&lt;/a&gt; to compile the code to an executable program.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bunster&lt;/strong&gt; targets &lt;code&gt;bash&lt;/code&gt; scripts in particular. The current syntax and features are all inherited from &lt;code&gt;bash&lt;/code&gt;. additional shells will be supported as soon as we release v1.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yassinebenaid/bunster/master/docs/public/bunster.gif&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bunster.netlify.app&#34;&gt;Learn more about the usage of bunster.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the shell features, We aim to add several custom features to make shell scripts feel like any modern programming language. These features are either supported or are planned to be implemented in future. (&lt;em&gt;consider contributing to help us speed up the development cycle&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Different Shells support&lt;/strong&gt;: Bunster currently aims to be compatible with &lt;code&gt;bash&lt;/code&gt; as a starting move. Then additional shells in future.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modules&lt;/strong&gt;: Something shell scripts lack is a module system, we aim to introduce a module system that allow you to publish and consume scripts as libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static Asset Embedding&lt;/strong&gt;: This feature allows you to embed a file&#39;s content to a variable at build time. (&lt;a href=&#34;https://pkg.go.dev/embed&#34;&gt;Go has one already&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Password and Expiration Lock&lt;/strong&gt;: Surprisingly, some people have asked for this feature. Basically, It allows you to choose an expiry date at build time. the generated program will not work after that date. Also you can choose to lock the script using a password. whenever you try to run it, it prompts for the password.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standard library&lt;/strong&gt;: we aim to add first-class support for a variety of frequently used/needed commands as builtins. you no longer need external programs to use them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This project is in its early stages of development, and is not yet ready for production. Not all features are implemented yet. But, plenty of them are. &lt;a href=&#34;https://bunster.netlify.app/supported-features.html&#34;&gt;see what features are implemented so far&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Bunster follows &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt; system for release versioning. On each minor release &lt;code&gt;v0.x.0&lt;/code&gt;, You should expect adding new features. Code optimization and build improvements. On each patch release &lt;code&gt;v0.N.x&lt;/code&gt;, you should expect bug fixes and/or other minor enhancements.&lt;/p&gt; &#xA;&lt;p&gt;Once we reach the stable release &lt;code&gt;v1.0.0&lt;/code&gt;, you must expect your bash scripts to be fully compatible with Bunster (&lt;em&gt;there might be some caveats&lt;/em&gt;). All features mentioned above to be implemented unless the community agreed on skipping some of them.&lt;/p&gt; &#xA;&lt;p&gt;Adding support for additional shells is not planned until our first stable release &lt;code&gt;v1&lt;/code&gt;. All regarding contributions will remain open until then.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://bunster.netlify.app/installation&#34;&gt;documentation&lt;/a&gt; for different ways of installation.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Thank you for considering contributing to the Bunster project! The contribution guide can be found in the &lt;a href=&#34;https://bunster.netlify.app/contributing&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is developed and maintained by the public community, which includes you. Anything in this repository is subject to criticism. Including features, the implementation, the code style, the way we manage code reviews, The documentation and anything else in this regard.&lt;/p&gt; &#xA;&lt;p&gt;Hence, if you think that we&#39;re doing something wrong, or have a suggestion that can make this project better. Please consider opening an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Code Of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;In order to ensure that the Bunster community is welcoming to all, please review and abide by the &lt;a href=&#34;https://github.com/yassinebenaid/bunster/tree/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within Bunster, please send an e-mail to Yassine Benaid via &lt;a href=&#34;mailto:yassinebenaide3@gmail.com&#34;&gt;yassinebenaide3@gmail.com&lt;/a&gt;. All security vulnerabilities will be promptly addressed.&lt;/p&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://github.com/yassinebenaid/bunster/tree/master/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;The Bunster project is open-sourced software licensed under &lt;a href=&#34;https://opensource.org/license/bsd-3-clause&#34;&gt;The 3-Clause BSD License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lightpanda-io/browser</title>
    <updated>2025-01-26T01:28:16Z</updated>
    <id>tag:github.com,2025-01-26:/lightpanda-io/browser</id>
    <link href="https://github.com/lightpanda-io/browser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightpanda: the headless browser designed for AI and automation&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://lightpanda.io&#34;&gt;&lt;img src=&#34;https://cdn.lightpanda.io/assets/images/logo/lpd-logo.png&#34; alt=&#34;Logo&#34; height=&#34;170&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Lightpanda Browser&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://lightpanda.io/&#34;&gt;lightpanda.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/lightpanda-io/browser/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/lightpanda-io/browser&#34; alt=&#34;Commit Activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lightpanda-io/browser/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/lightpanda-io/browser&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/lightpanda_io&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/lightpanda_io&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lightpanda-io/browser&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/lightpanda-io/browser&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Lightpanda is the open-source browser made for headless usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Javascript execution&lt;/li&gt; &#xA; &lt;li&gt;Support of Web APIs (partial, WIP)&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Playwright, Puppeteer through CDP (WIP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fast web automation for AI agents, LLM training, scraping and testing with minimal memory footprint:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ultra-low memory footprint (9x less than Chrome)&lt;/li&gt; &#xA; &lt;li&gt;Exceptionally fast execution (11x faster than Chrome) &amp;amp; instant startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;500px&#34; src=&#34;https://cdn.lightpanda.io/assets/images/benchmark_2024-12-04.png&#34;&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lightpanda-io/demo&#34;&gt;benchmark details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Install from the nightly builds&lt;/h3&gt; &#xA;&lt;p&gt;You can download the last binary from the &lt;a href=&#34;https://github.com/lightpanda-io/browser/releases/tag/nightly&#34;&gt;nightly builds&lt;/a&gt; for Linux x86_64 and MacOS aarch64.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Download the binary&#xA;$ wget https://github.com/lightpanda-io/browser/releases/download/nightly/lightpanda-x86_64-linux&#xA;$ chmod a+x ./lightpanda-x86_64-linux&#xA;$ ./lightpanda-x86_64-linux -h&#xA;usage: ./lightpanda-x86_64-linux [options] [URL]&#xA;&#xA;  start Lightpanda browser&#xA;&#xA;  * if an url is provided the browser will fetch the page and exit&#xA;  * otherwhise the browser starts a CDP server&#xA;&#xA;  -h, --help      Print this help message and exit.&#xA;  --host          Host of the CDP server (default &#34;127.0.0.1&#34;)&#xA;  --port          Port of the CDP server (default &#34;9222&#34;)&#xA;  --timeout       Timeout for incoming connections of the CDP server (in seconds, default &#34;3&#34;)&#xA;  --dump          Dump document in stdout (fetch mode only)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dump an URL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./lightpanda-x86_64-linux --dump https://lightpanda.io&#xA;info(browser): GET https://lightpanda.io/ http.Status.ok&#xA;info(browser): fetch script https://api.website.lightpanda.io/js/script.js: http.Status.ok&#xA;info(browser): eval remote https://api.website.lightpanda.io/js/script.js: TypeError: Cannot read properties of undefined (reading &#39;pushState&#39;)&#xA;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start a CDP server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./lightpanda-x86_64-linux --host 127.0.0.1 --port 9222&#xA;info(websocket): starting blocking worker to listen on 127.0.0.1:9222&#xA;info(server): accepting new conn...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the CDP server started, you can run a Puppeteer script by configuring the &lt;code&gt;browserWSEndpoint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;use strict&#39;&#xA;&#xA;import puppeteer from &#39;puppeteer-core&#39;;&#xA;&#xA;// use browserWSEndpoint to pass the Lightpanda&#39;s CDP server address.&#xA;const browser = await puppeteer.connect({&#xA;  browserWSEndpoint: &#34;ws://127.0.0.1:9222&#34;,&#xA;});&#xA;&#xA;// The rest of your script remains the same.&#xA;const context = await browser.createBrowserContext();&#xA;const page = await context.newPage();&#xA;&#xA;await page.goto(&#39;https://wikipedia.com/&#39;);&#xA;&#xA;await page.close();&#xA;await context.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Lightpanda is written with &lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt; &lt;code&gt;0.13.0&lt;/code&gt;. You have to install it with the right version in order to build the project.&lt;/p&gt; &#xA;&lt;p&gt;Lightpanda also depends on &lt;a href=&#34;https://github.com/lightpanda-io/zig-js-runtime/&#34;&gt;zig-js-runtime&lt;/a&gt; (with v8), &lt;a href=&#34;https://www.netsurf-browser.org/&#34;&gt;Netsurf libs&lt;/a&gt; and &lt;a href=&#34;https://microsoft.github.io/mimalloc&#34;&gt;Mimalloc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To be able to build the v8 engine for zig-js-runtime, you have to install some libs:&lt;/p&gt; &#xA;&lt;p&gt;For Debian/Ubuntu based Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install xz-utils \&#xA;    python3 ca-certificates git \&#xA;    pkg-config libglib2.0-dev \&#xA;    gperf libexpat1-dev \&#xA;    cmake clang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For MacOS, you only need cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install and build dependencies&lt;/h3&gt; &#xA;&lt;h4&gt;All in one build&lt;/h4&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;make install&lt;/code&gt; to install deps all in one (or &lt;code&gt;make install-dev&lt;/code&gt; if you need the development versions).&lt;/p&gt; &#xA;&lt;p&gt;Be aware that the build task is very long and cpu consuming, as you will build from sources all dependancies, including the v8 Javascript engine.&lt;/p&gt; &#xA;&lt;h4&gt;Step by step build dependancy&lt;/h4&gt; &#xA;&lt;p&gt;The project uses git submodules for dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To init or update the submodules in the &lt;code&gt;vendor/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install-submodule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Netsurf libs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netsurf libs are used for HTML parsing and DOM tree generation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install-netsurf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For dev env, use &lt;code&gt;make install-netsurf-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mimalloc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mimalloc is used as a C memory allocator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install-mimalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For dev env, use &lt;code&gt;make install-mimalloc-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: when Mimalloc is built in dev mode, you can dump memory stats with the env var &lt;code&gt;MIMALLOC_SHOW_STATS=1&lt;/code&gt;. See &lt;a href=&#34;https://microsoft.github.io/mimalloc/environment.html&#34;&gt;https://microsoft.github.io/mimalloc/environment.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;zig-js-runtime&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our own Zig/Javascript runtime, which includes the v8 Javascript engine.&lt;/p&gt; &#xA;&lt;p&gt;This build task is very long and cpu consuming, as you will build v8 from sources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install-zig-js-runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For dev env, use &lt;code&gt;make iinstall-zig-js-runtime-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;h3&gt;Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;You can test Lightpanda by running &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web Platform Tests&lt;/h3&gt; &#xA;&lt;p&gt;Lightpanda is tested against the standardized &lt;a href=&#34;https://web-platform-tests.org/&#34;&gt;Web Platform Tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The relevant tests cases are committed in a &lt;a href=&#34;https://github.com/lightpanda-io/wpt&#34;&gt;dedicated repository&lt;/a&gt; which is fetched by the &lt;code&gt;make install-submodule&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;All the tests cases executed are located in the &lt;code&gt;tests/wpt&lt;/code&gt; sub-directory.&lt;/p&gt; &#xA;&lt;p&gt;For reference, you can easily execute a WPT test case with your browser via &lt;a href=&#34;https://wpt.live&#34;&gt;wpt.live&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Run WPT test suite&lt;/h4&gt; &#xA;&lt;p&gt;To run all the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make wpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or one specific test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make wpt Node-childNodes.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add a new WPT test case&lt;/h4&gt; &#xA;&lt;p&gt;We add new relevant tests cases files when we implemented changes in Lightpanda.&lt;/p&gt; &#xA;&lt;p&gt;To add a new test, copy the file you want from the &lt;a href=&#34;https://github.com/web-platform-tests/wpt&#34;&gt;WPT repo&lt;/a&gt; into the &lt;code&gt;tests/wpt&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Please keep the original directory tree structure of &lt;code&gt;tests/wpt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Lightpanda accepts pull requests through GitHub.&lt;/p&gt; &#xA;&lt;p&gt;You have to sign our &lt;a href=&#34;https://raw.githubusercontent.com/lightpanda-io/browser/main/CLA.md&#34;&gt;CLA&lt;/a&gt; during the pull request process otherwise we&#39;re not able to accept your contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;h3&gt;Javascript execution is mandatory for the modern web&lt;/h3&gt; &#xA;&lt;p&gt;In the good old days, scraping a webpage was as easy as making an HTTP request, cURL-like. It’s not possible anymore, because Javascript is everywhere, like it or not:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ajax, Single Page App, infinite loading, “click to display”, instant search, etc.&lt;/li&gt; &#xA; &lt;li&gt;JS web frameworks: React, Vue, Angular &amp;amp; others&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chrome is not the right tool&lt;/h3&gt; &#xA;&lt;p&gt;If we need Javascript, why not use a real web browser? Take a huge desktop application, hack it, and run it on the server. Hundreds or thousands of instances of Chrome if you use it at scale. Are you sure it’s such a good idea?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Heavy on RAM and CPU, expensive to run&lt;/li&gt; &#xA; &lt;li&gt;Hard to package, deploy and maintain at scale&lt;/li&gt; &#xA; &lt;li&gt;Bloated, lots of features are not useful in headless usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lightpanda is built for performance&lt;/h3&gt; &#xA;&lt;p&gt;If we want both Javascript and performance in a true headless browser, we need to start from scratch. Not another iteration of Chromium, really from a blank page. Crazy right? But that’s what we did:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not based on Chromium, Blink or WebKit&lt;/li&gt; &#xA; &lt;li&gt;Low-level system programming language (Zig) with optimisations in mind&lt;/li&gt; &#xA; &lt;li&gt;Opinionated: without graphical rendering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Lightpanda is still a work in progress and is currently at a Beta stage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; You should expect most websites to fail or crash.&lt;/p&gt; &#xA;&lt;p&gt;Here are the key features we have implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP loader&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTML parser and DOM tree (based on Netsurf libs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Javascript support (v8)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic DOM APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ajax &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; XHR API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fetch API&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DOM dump&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic CDP/websockets server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: There are hundreds of Web APIs. Developing a browser (even just for headless mode) is a huge task. Coverage will increase over time.&lt;/p&gt; &#xA;&lt;p&gt;You can also follow the progress of our Javascript support in our dedicated &lt;a href=&#34;https://github.com/lightpanda-io/zig-js-runtime#development&#34;&gt;zig-js-runtime&lt;/a&gt; project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>php/php-src</title>
    <updated>2025-01-26T01:28:16Z</updated>
    <id>tag:github.com,2025-01-26:/php/php-src</id>
    <link href="https://github.com/php/php-src" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The PHP Interpreter&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.php.net&#34;&gt; &lt;img alt=&#34;PHP&#34; src=&#34;https://www.php.net/images/logos/new-php-logo.svg?sanitize=true&#34; width=&#34;150&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;The PHP Interpreter&lt;/h1&gt; &#xA;&lt;p&gt;PHP is a popular general-purpose scripting language that is especially suited to web development. Fast, flexible and pragmatic, PHP powers everything from your blog to the most popular websites in the world. PHP is distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/LICENSE&#34;&gt;PHP License v3.01&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/php/php-src/actions/workflows/push.yml&#34;&gt;&lt;img src=&#34;https://github.com/php/php-src/actions/workflows/push.yml/badge.svg?sanitize=true&#34; alt=&#34;Push&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:php&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/php.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The PHP manual is available at &lt;a href=&#34;https://www.php.net/docs&#34;&gt;php.net/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prebuilt packages and binaries&lt;/h3&gt; &#xA;&lt;p&gt;Prebuilt packages and binaries can be used to get up and running fast with PHP.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, the PHP binaries can be obtained from &lt;a href=&#34;https://windows.php.net&#34;&gt;windows.php.net&lt;/a&gt;. After extracting the archive the &lt;code&gt;*.exe&lt;/code&gt; files are ready to use.&lt;/p&gt; &#xA;&lt;p&gt;For other systems, see the &lt;a href=&#34;https://www.php.net/install&#34;&gt;installation chapter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building PHP source code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;For Windows, see &lt;a href=&#34;https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2&#34;&gt;Build your own PHP on Windows&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a minimal PHP build from Git, you will need autoconf, bison, and re2c. For a default build, you will additionally need libxml2 and libsqlite3.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, you can install these using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install -y pkg-config build-essential autoconf bison re2c \&#xA;                    libxml2-dev libsqlite3-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora, you can install these using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf install re2c bison autoconf make libtool ccache libxml2-devel sqlite-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate configure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./buildconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure your build. &lt;code&gt;--enable-debug&lt;/code&gt; is recommended for development, see &lt;code&gt;./configure --help&lt;/code&gt; for a full list of options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# For development&#xA;./configure --enable-debug&#xA;# For production&#xA;./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build PHP. To speed up the build, specify the maximum number of jobs using &lt;code&gt;-j&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The number of jobs should usually match the number of available cores, which can be determined using &lt;code&gt;nproc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing PHP source code&lt;/h2&gt; &#xA;&lt;p&gt;PHP ships with an extensive test suite, the command &lt;code&gt;make test&lt;/code&gt; is used after successful compilation of the sources to run this test suite.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to run tests using multiple cores by setting &lt;code&gt;-jN&lt;/code&gt; in &lt;code&gt;TEST_PHP_ARGS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make TEST_PHP_ARGS=-j4 test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shall run &lt;code&gt;make test&lt;/code&gt; with a maximum of 4 concurrent jobs: Generally the maximum number of jobs should not exceed the number of cores available.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://qa.php.net&#34;&gt;qa.php.net&lt;/a&gt; site provides more detailed info about testing and quality assurance.&lt;/p&gt; &#xA;&lt;h2&gt;Installing PHP built from source&lt;/h2&gt; &#xA;&lt;p&gt;After a successful build (and test), PHP may be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your permissions and prefix, &lt;code&gt;make install&lt;/code&gt; may need super user permissions.&lt;/p&gt; &#xA;&lt;h2&gt;PHP extensions&lt;/h2&gt; &#xA;&lt;p&gt;Extensions provide additional functionality on top of PHP. PHP consists of many essential bundled extensions. Additional extensions can be found in the PHP Extension Community Library - &lt;a href=&#34;https://pecl.php.net&#34;&gt;PECL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The PHP source code is located in the Git repository at &lt;a href=&#34;https://github.com/php/php-src&#34;&gt;github.com/php/php-src&lt;/a&gt;. Contributions are most welcome by forking the repository and sending a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Discussions are done on GitHub, but depending on the topic can also be relayed to the official PHP developer mailing list &lt;a href=&#34;mailto:internals@lists.php.net&#34;&gt;internals@lists.php.net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New features require an RFC and must be accepted by the developers. See &lt;a href=&#34;https://wiki.php.net/rfc&#34;&gt;Request for comments - RFC&lt;/a&gt; and &lt;a href=&#34;https://wiki.php.net/rfc/voting&#34;&gt;Voting on PHP features&lt;/a&gt; for more information on the process.&lt;/p&gt; &#xA;&lt;p&gt;Bug fixes don&#39;t require an RFC. If the bug has a GitHub issue, reference it in the commit message using &lt;code&gt;GH-NNNNNN&lt;/code&gt;. Use &lt;code&gt;#NNNNNN&lt;/code&gt; for tickets in the old &lt;a href=&#34;https://bugs.php.net&#34;&gt;bugs.php.net&lt;/a&gt; bug tracker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fix GH-7815: php_uname doesn&#39;t recognise latest Windows versions&#xA;Fix #55371: get_magic_quotes_gpc() throws deprecation warning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wiki.php.net/vcs/gitworkflow&#34;&gt;Git workflow&lt;/a&gt; for details on how pull requests are merged.&lt;/p&gt; &#xA;&lt;h3&gt;Guidelines for contributors&lt;/h3&gt; &#xA;&lt;p&gt;See further documents in the repository for more information on how to contribute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/CONTRIBUTING.md&#34;&gt;Contributing to PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/CODING_STANDARDS.md&#34;&gt;PHP coding standards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://php.github.io/php-src/&#34;&gt;Internal documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/docs/mailinglist-rules.md&#34;&gt;Mailing list rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/php/php-src/master/docs/release-process.md&#34;&gt;PHP release process&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;For the list of people who&#39;ve put work into PHP, please see the &lt;a href=&#34;https://www.php.net/credits.php&#34;&gt;PHP credits page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>