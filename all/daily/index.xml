<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-22T01:29:01Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mozilla-Ocho/llamafile</title>
    <updated>2024-07-22T01:29:01Z</updated>
    <id>tag:github.com,2024-07-22:/Mozilla-Ocho/llamafile</id>
    <link href="https://github.com/Mozilla-Ocho/llamafile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distribute and run LLMs with a single file.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llamafile&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Mozilla-Ocho/llamafile/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci status&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://discord.gg/YuMNeuKStr&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/YuMNeuKStr&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/llamafile/llamafile-640x640.png&#34; width=&#34;320&#34; height=&#34;320&#34; alt=&#34;[line drawing of llama animal head in front of slightly open manilla folder filled with files]&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;llamafile lets you distribute and run LLMs with a single file. (&lt;a href=&#34;https://hacks.mozilla.org/2023/11/introducing-llamafile/&#34;&gt;announcement blog post&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to make open LLMs much more accessible to both developers and end users. We&#39;re doing that by combining &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; with &lt;a href=&#34;https://github.com/jart/cosmopolitan&#34;&gt;Cosmopolitan Libc&lt;/a&gt; into one framework that collapses all the complexity of LLMs down to a single-file executable (called a &#34;llamafile&#34;) that runs locally on most computers, with no installation.&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://future.mozilla.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/llamafile/mozilla-logo-bw-rgb.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;br&gt; llamafile is a Mozilla Builders project.&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to try it for yourself is to download our example llamafile for the &lt;a href=&#34;https://llava-vl.github.io/&#34;&gt;LLaVA&lt;/a&gt; model (license: &lt;a href=&#34;https://ai.meta.com/resources/models-and-libraries/llama-downloads/&#34;&gt;LLaMA 2&lt;/a&gt;, &lt;a href=&#34;https://openai.com/policies/terms-of-use&#34;&gt;OpenAI&lt;/a&gt;). LLaVA is a new LLM that can do more than just chat; you can also upload images and ask it questions about them. With llamafile, this all happens locally; no data ever leaves your computer.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile/resolve/main/llava-v1.5-7b-q4.llamafile?download=true&#34;&gt;llava-v1.5-7b-q4.llamafile&lt;/a&gt; (4.29 GB).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your computer&#39;s terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using macOS, Linux, or BSD, you&#39;ll need to grant permission for your computer to execute this new file. (You only need to do this once.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod +x llava-v1.5-7b-q4.llamafile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re on Windows, rename the file by adding &#34;.exe&#34; on the end.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the llamafile. e.g.:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./llava-v1.5-7b-q4.llamafile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Your browser should open automatically and display a chat interface. (If it doesn&#39;t, just open your browser and point it at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you&#39;re done chatting, return to your terminal and hit &lt;code&gt;Control-C&lt;/code&gt; to shut down llamafile.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Having trouble? See the &#34;Gotchas&#34; section below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;JSON API Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;When llamafile is started, in addition to hosting a web UI chat server at &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt;, an &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;OpenAI API&lt;/a&gt; compatible chat completions endpoint is provided too. It&#39;s designed to support the most common OpenAI API use cases, in a way that runs entirely locally. We&#39;ve also extended it to include llama.cpp specific features (e.g. mirostat) that may also be used. For further details on what fields and endpoints are available, refer to both the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;OpenAI documentation&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/llama.cpp/server/README.md#api-endpoints&#34;&gt;llamafile server README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Curl API Client Example&lt;/summary&gt; &#xA; &lt;p&gt;The simplest way to get started using the API is to copy and paste the following curl command into your terminal.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl http://localhost:8080/v1/chat/completions \&#xA;-H &#34;Content-Type: application/json&#34; \&#xA;-H &#34;Authorization: Bearer no-key&#34; \&#xA;-d &#39;{&#xA;  &#34;model&#34;: &#34;LLaMA_CPP&#34;,&#xA;  &#34;messages&#34;: [&#xA;      {&#xA;          &#34;role&#34;: &#34;system&#34;,&#xA;          &#34;content&#34;: &#34;You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.&#34;&#xA;      },&#xA;      {&#xA;          &#34;role&#34;: &#34;user&#34;,&#xA;          &#34;content&#34;: &#34;Write a limerick about python exceptions&#34;&#xA;      }&#xA;    ]&#xA;}&#39; | python3 -c &#39;&#xA;import json&#xA;import sys&#xA;json.dump(json.load(sys.stdin), sys.stdout, indent=2)&#xA;print()&#xA;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The response that&#39;s printed should look like the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;choices&#34; : [&#xA;      {&#xA;         &#34;finish_reason&#34; : &#34;stop&#34;,&#xA;         &#34;index&#34; : 0,&#xA;         &#34;message&#34; : {&#xA;            &#34;content&#34; : &#34;There once was a programmer named Mike\nWho wrote code that would often choke\nHe used try and except\nTo handle each step\nAnd his program ran without any hike.&#34;,&#xA;            &#34;role&#34; : &#34;assistant&#34;&#xA;         }&#xA;      }&#xA;   ],&#xA;   &#34;created&#34; : 1704199256,&#xA;   &#34;id&#34; : &#34;chatcmpl-Dt16ugf3vF8btUZj9psG7To5tc4murBU&#34;,&#xA;   &#34;model&#34; : &#34;LLaMA_CPP&#34;,&#xA;   &#34;object&#34; : &#34;chat.completion&#34;,&#xA;   &#34;usage&#34; : {&#xA;      &#34;completion_tokens&#34; : 38,&#xA;      &#34;prompt_tokens&#34; : 78,&#xA;      &#34;total_tokens&#34; : 116&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Python API Client example&lt;/summary&gt; &#xA; &lt;p&gt;If you&#39;ve already developed your software using the &lt;a href=&#34;https://pypi.org/project/openai/&#34;&gt;&lt;code&gt;openai&lt;/code&gt; Python package&lt;/a&gt; (that&#39;s published by OpenAI) then you should be able to port your app to talk to llamafile instead, by making a few changes to &lt;code&gt;base_url&lt;/code&gt; and &lt;code&gt;api_key&lt;/code&gt;. This example assumes you&#39;ve run &lt;code&gt;pip3 install openai&lt;/code&gt; to install OpenAI&#39;s client software, which is required by this example. Their package is just a simple Python wrapper around the OpenAI API interface, which can be implemented by any server.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3&#xA;from openai import OpenAI&#xA;client = OpenAI(&#xA;    base_url=&#34;http://localhost:8080/v1&#34;, # &#34;http://&amp;lt;Your api-server IP&amp;gt;:port&#34;&#xA;    api_key = &#34;sk-no-key-required&#34;&#xA;)&#xA;completion = client.chat.completions.create(&#xA;    model=&#34;LLaMA_CPP&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are ChatGPT, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.&#34;},&#xA;        {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Write a limerick about python exceptions&#34;}&#xA;    ]&#xA;)&#xA;print(completion.choices[0].message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The above code will return a Python object like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ChatCompletionMessage(content=&#39;There once was a programmer named Mike\nWho wrote code that would often strike\nAn error would occur\nAnd he\&#39;d shout &#34;Oh no!&#34;\nBut Python\&#39;s exceptions made it all right.&#39;, role=&#39;assistant&#39;, function_call=None, tool_calls=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Other example llamafiles&lt;/h2&gt; &#xA;&lt;p&gt;We also provide example llamafiles for other models, so you can easily try out llamafile with different kinds of LLMs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;llamafile&lt;/th&gt; &#xA;   &lt;th&gt;other quants&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaVA 1.5&lt;/td&gt; &#xA;   &lt;td&gt;3.97 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ai.meta.com/resources/models-and-libraries/llama-downloads/&#34;&gt;LLaMA 2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile/resolve/main/llava-v1.5-7b-q4.llamafile?download=true&#34;&gt;llava-v1.5-7b-q4.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/llava-v1.5-7b-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TinyLlama-1.1B&lt;/td&gt; &#xA;   &lt;td&gt;2.05 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://choosealicense.com/licenses/apache-2.0/&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/TinyLlama-1.1B-Chat-v1.0-llamafile/resolve/main/TinyLlama-1.1B-Chat-v1.0.F16.llamafile?download=true&#34;&gt;TinyLlama-1.1B-Chat-v1.0.F16.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/TinyLlama-1.1B-Chat-v1.0-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mistral-7B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;3.85 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://choosealicense.com/licenses/apache-2.0/&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Mistral-7B-Instruct-v0.2-llamafile/resolve/main/mistral-7b-instruct-v0.2.Q4_0.llamafile?download=true&#34;&gt;mistral-7b-instruct-v0.2.Q4_0.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Mistral-7B-Instruct-v0.2-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phi-3-mini-4k-instruct&lt;/td&gt; &#xA;   &lt;td&gt;7.67 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Phi-3-mini-4k-instruct-llamafile/blob/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Phi-3-mini-4k-instruct-llamafile/resolve/main/Phi-3-mini-4k-instruct.F16.llamafile?download=true&#34;&gt;Phi-3-mini-4k-instruct.F16.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Phi-3-mini-4k-instruct-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mixtral-8x7B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;30.03 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://choosealicense.com/licenses/apache-2.0/&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Mixtral-8x7B-Instruct-v0.1-llamafile/resolve/main/mixtral-8x7b-instruct-v0.1.Q5_K_M.llamafile?download=true&#34;&gt;mixtral-8x7b-instruct-v0.1.Q5_K_M.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Mixtral-8x7B-Instruct-v0.1-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardCoder-Python-34B&lt;/td&gt; &#xA;   &lt;td&gt;22.23 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ai.meta.com/resources/models-and-libraries/llama-downloads/&#34;&gt;LLaMA 2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/WizardCoder-Python-34B-V1.0-llamafile/resolve/main/wizardcoder-python-34b-v1.0.Q5_K_M.llamafile?download=true&#34;&gt;wizardcoder-python-34b-v1.0.Q5_K_M.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/WizardCoder-Python-34B-V1.0-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardCoder-Python-13B&lt;/td&gt; &#xA;   &lt;td&gt;7.33 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ai.meta.com/resources/models-and-libraries/llama-downloads/&#34;&gt;LLaMA 2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/jartine/wizardcoder-13b-python/resolve/main/wizardcoder-python-13b.llamafile?download=true&#34;&gt;wizardcoder-python-13b.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/jartine/wizardcoder-13b-python&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-3-Instruct-70B&lt;/td&gt; &#xA;   &lt;td&gt;37.25 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Meta-Llama-3-8B-Instruct-llamafile/blob/main/Meta-Llama-3-Community-License-Agreement.txt&#34;&gt;llama3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Meta-Llama-3-70B-Instruct-llamafile/resolve/main/Meta-Llama-3-70B-Instruct.Q4_0.llamafile?download=true&#34;&gt;Meta-Llama-3-70B-Instruct.Q4_0.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Meta-Llama-3-70B-Instruct-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-3-Instruct-8B&lt;/td&gt; &#xA;   &lt;td&gt;5.37 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Meta-Llama-3-8B-Instruct-llamafile/blob/main/Meta-Llama-3-Community-License-Agreement.txt&#34;&gt;llama3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Meta-Llama-3-8B-Instruct-llamafile/resolve/main/Meta-Llama-3-8B-Instruct.Q5_K_M.llamafile?download=true&#34;&gt;Meta-Llama-3-8B-Instruct.Q5_K_M.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/Meta-Llama-3-8B-Instruct-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rocket-3B&lt;/td&gt; &#xA;   &lt;td&gt;1.89 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.en&#34;&gt;cc-by-sa-4.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/rocket-3B-llamafile/resolve/main/rocket-3b.Q5_K_M.llamafile?download=true&#34;&gt;rocket-3b.Q5_K_M.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/rocket-3B-llamafile&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Text Embedding Models&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;E5-Mistral-7B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;5.16 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/e5-mistral-7b-instruct/resolve/main/e5-mistral-7b-instruct-Q5_K_M.llamafile?download=true&#34;&gt;e5-mistral-7b-instruct-Q5_K_M.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/e5-mistral-7b-instruct&#34;&gt;See HF repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mxbai-embed-large-v1&lt;/td&gt; &#xA;   &lt;td&gt;0.7 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://choosealicense.com/licenses/apache-2.0/&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/mxbai-embed-large-v1-llamafile/resolve/main/mxbai-embed-large-v1-f16.llamafile?download=true&#34;&gt;mxbai-embed-large-v1-f16.llamafile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Mozilla/mxbai-embed-large-v1-llamafile&#34;&gt;See HF Repo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here is an example for the Mistral command-line llamafile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./mistral-7b-instruct-v0.2.Q5_K_M.llamafile --temp 0.7 -p &#39;[INST]Write a story about llamas[/INST]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is an example for WizardCoder-Python command-line llamafile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./wizardcoder-python-13b.llamafile --temp 0 -e -r &#39;```\n&#39; -p &#39;```c\nvoid *memcpy_sse2(char *dst, const char *src, size_t size) {\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here&#39;s an example for the LLaVA command-line llamafile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./llava-v1.5-7b-q4.llamafile --temp 0.2 --image lemurs.jpg -e -p &#39;### User: What do you see?\n### Assistant:&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, macOS, Linux, and BSD users will need to use the &#34;chmod&#34; command to grant execution permissions to the file before running these llamafiles for the first time.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, Windows users cannot make use of many of these example llamafiles because Windows has a maximum executable file size of 4GB, and all of these examples exceed that size. (The LLaVA llamafile works on Windows because it is 30MB shy of the size limit.) But don&#39;t lose heart: llamafile allows you to use external weights; this is described later in this document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Having trouble? See the &#34;Gotchas&#34; section below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How llamafile works&lt;/h2&gt; &#xA;&lt;p&gt;A llamafile is an executable LLM that you can run on your own computer. It contains the weights for a given open LLM, as well as everything needed to actually run that model on your computer. There&#39;s nothing to install or configure (with a few caveats, discussed in subsequent sections of this document).&lt;/p&gt; &#xA;&lt;p&gt;This is all accomplished by combining llama.cpp with Cosmopolitan Libc, which provides some useful capabilities:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;llamafiles can run on multiple CPU microarchitectures. We added runtime dispatching to llama.cpp that lets new Intel systems use modern CPU features without trading away support for older computers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;llamafiles can run on multiple CPU architectures. We do that by concatenating AMD64 and ARM64 builds with a shell script that launches the appropriate one. Our file format is compatible with WIN32 and most UNIX shells. It&#39;s also able to be easily converted (by either you or your users) to the platform-native format, whenever required.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;llamafiles can run on six OSes (macOS, Windows, Linux, FreeBSD, OpenBSD, and NetBSD). If you make your own llama files, you&#39;ll only need to build your code once, using a Linux-style toolchain. The GCC-based compiler we provide is itself an Actually Portable Executable, so you can build your software for all six OSes from the comfort of whichever one you prefer most for development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The weights for an LLM can be embedded within the llamafile. We added support for PKZIP to the GGML library. This lets uncompressed weights be mapped directly into memory, similar to a self-extracting archive. It enables quantized weights distributed online to be prefixed with a compatible version of the llama.cpp software, thereby ensuring its originally observed behaviors can be reproduced indefinitely.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, with the tools included in this project you can create your &lt;em&gt;own&lt;/em&gt; llamafiles, using any compatible model weights you want. You can then distribute these llamafiles to other people, who can easily make use of them regardless of what kind of computer they have.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using llamafile with external weights&lt;/h2&gt; &#xA;&lt;p&gt;Even though our example llamafiles have the weights built-in, you don&#39;t &lt;em&gt;have&lt;/em&gt; to use llamafile that way. Instead, you can download &lt;em&gt;just&lt;/em&gt; the llamafile software (without any weights included) from our releases page. You can then use it alongside any external weights you may have on hand. External weights are particularly useful for Windows users because they enable you to work around Windows&#39; 4GB executable file size limit.&lt;/p&gt; &#xA;&lt;p&gt;For Windows users, here&#39;s an example for the Mistral LLM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L -o llamafile.exe https://github.com/Mozilla-Ocho/llamafile/releases/download/0.6/llamafile-0.6&#xA;curl -L -o mistral.gguf https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.1-GGUF/resolve/main/mistral-7b-instruct-v0.1.Q4_K_M.gguf&#xA;./llamafile.exe -m mistral.gguf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows users may need to change &lt;code&gt;./llamafile.exe&lt;/code&gt; to &lt;code&gt;.\llamafile.exe&lt;/code&gt; when running the above command.&lt;/p&gt; &#xA;&lt;h2&gt;Gotchas&lt;/h2&gt; &#xA;&lt;p&gt;On macOS with Apple Silicon you need to have Xcode Command Line Tools installed for llamafile to be able to bootstrap itself.&lt;/p&gt; &#xA;&lt;p&gt;If you use zsh and have trouble running llamafile, try saying &lt;code&gt;sh -c ./llamafile&lt;/code&gt;. This is due to a bug that was fixed in zsh 5.9+. The same is the case for Python &lt;code&gt;subprocess&lt;/code&gt;, old versions of Fish, etc.&lt;/p&gt; &#xA;&lt;p&gt;On some Linux systems, you might get errors relating to &lt;code&gt;run-detectors&lt;/code&gt; or WINE. This is due to &lt;code&gt;binfmt_misc&lt;/code&gt; registrations. You can fix that by adding an additional registration for the APE file format llamafile uses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo wget -O /usr/bin/ape https://cosmo.zip/pub/cosmos/bin/ape-$(uname -m).elf&#xA;sudo chmod +x /usr/bin/ape&#xA;sudo sh -c &#34;echo &#39;:APE:M::MZqFpD::/usr/bin/ape:&#39; &amp;gt;/proc/sys/fs/binfmt_misc/register&#34;&#xA;sudo sh -c &#34;echo &#39;:APE-jart:M::jartsr::/usr/bin/ape:&#39; &amp;gt;/proc/sys/fs/binfmt_misc/register&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As mentioned above, on Windows you may need to rename your llamafile by adding &lt;code&gt;.exe&lt;/code&gt; to the filename.&lt;/p&gt; &#xA;&lt;p&gt;Also as mentioned above, Windows also has a maximum file size limit of 4GB for executables. The LLaVA server executable above is just 30MB shy of that limit, so it&#39;ll work on Windows, but with larger models like WizardCoder 13B, you need to store the weights in a separate file. An example is provided above; see &#34;Using llamafile with external weights.&#34;&lt;/p&gt; &#xA;&lt;p&gt;On WSL, it&#39;s recommended that the WIN32 interop feature be disabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo sh -c &#34;echo -1 &amp;gt; /proc/sys/fs/binfmt_misc/WSLInterop&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the instance of getting a &lt;code&gt;Permission Denied&lt;/code&gt; on disabling interop through CLI, it can be permanently disabled by adding the following in &lt;code&gt;/etc/wsl.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[interop]&#xA;enabled=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Raspberry Pi, if you get &#34;mmap error 12&#34; then it means your kernel is configured with fewer than 48 bits of address space. You need to upgrade to RPI 5. You can still use RPI 4 if you either (1) rebuild your kernel, or (2) get your SDcard OS image directly from Ubuntu (don&#39;t use RPI OS).&lt;/p&gt; &#xA;&lt;p&gt;On any platform, if your llamafile process is immediately killed, check if you have CrowdStrike and then ask to be whitelisted.&lt;/p&gt; &#xA;&lt;h2&gt;Supported OSes&lt;/h2&gt; &#xA;&lt;p&gt;llamafile supports the following operating systems, which require a minimum stock install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux 2.6.18+ (i.e. every distro since RHEL5 c. 2007)&lt;/li&gt; &#xA; &lt;li&gt;Darwin (macOS) 23.1.0+ [1] (GPU is only supported on ARM64)&lt;/li&gt; &#xA; &lt;li&gt;Windows 8+ (AMD64 only)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD 13+&lt;/li&gt; &#xA; &lt;li&gt;NetBSD 9.2+ (AMD64 only)&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD 7+ (AMD64 only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Windows, llamafile runs as a native portable executable. On UNIX systems, llamafile extracts a small loader program named &lt;code&gt;ape&lt;/code&gt; to &lt;code&gt;$TMPDIR/.llamafile&lt;/code&gt; or &lt;code&gt;~/.ape-1.9&lt;/code&gt; which is used to map your model into memory.&lt;/p&gt; &#xA;&lt;p&gt;[1] Darwin kernel versions 15.6+ &lt;em&gt;should&lt;/em&gt; be supported, but we currently have no way of testing that.&lt;/p&gt; &#xA;&lt;h2&gt;Supported CPUs&lt;/h2&gt; &#xA;&lt;p&gt;llamafile supports the following CPUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AMD64&lt;/strong&gt; microprocessors must have AVX. Otherwise llamafile will print an error and refuse to run. This means that if you have an Intel CPU, it needs to be Intel Sandybridge or newer (circa 2011+), and if you have an AMD CPU, then it needs to be Bulldozer or newer (circa 2011+). Support for AVX512, AVX2, FMA, F16C, and VNNI are conditionally enabled at runtime if you have a newer CPU.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ARM64&lt;/strong&gt; microprocessors must have ARMv8a+. This means everything from Apple Silicon to 64-bit Raspberry Pis will work, provided your weights fit into memory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GPU support&lt;/h2&gt; &#xA;&lt;p&gt;llamafile supports the following kinds of GPUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple Metal&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA&lt;/li&gt; &#xA; &lt;li&gt;AMD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPU on MacOS ARM64 is supported by compiling a small module using the Xcode Command Line Tools, which need to be installed. This is a one time cost that happens the first time you run your llamafile. The DSO built by llamafile is stored in &lt;code&gt;$TMPDIR/.llamafile&lt;/code&gt; or &lt;code&gt;$HOME/.llamafile&lt;/code&gt;. Offloading to GPU is enabled by default when a Metal GPU is present. This can be disabled by passing &lt;code&gt;-ngl 0&lt;/code&gt; or &lt;code&gt;--gpu disable&lt;/code&gt; to force llamafile to perform CPU inference.&lt;/p&gt; &#xA;&lt;p&gt;Owners of NVIDIA and AMD graphics cards need to pass the &lt;code&gt;-ngl 999&lt;/code&gt; flag to enable maximum offloading. If multiple GPUs are present then the work will be divided evenly among them by default, so you can load larger models. Multiple GPU support may be broken on AMD Radeon systems. If that happens to you, then use &lt;code&gt;export HIP_VISIBLE_DEVICES=0&lt;/code&gt; which forces llamafile to only use the first GPU.&lt;/p&gt; &#xA;&lt;p&gt;Windows users are encouraged to use our release binaries, because they contain prebuilt DLLs for both NVIDIA and AMD graphics cards, which only depend on the graphics driver being installed. If llamafile detects that NVIDIA&#39;s CUDA SDK or AMD&#39;s ROCm HIP SDK are installed, then llamafile will try to build a faster DLL that uses cuBLAS or rocBLAS. In order for llamafile to successfully build a cuBLAS module, it needs to be run on the x64 MSVC command prompt. You can use CUDA via WSL by enabling &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl&#34;&gt;Nvidia CUDA on WSL&lt;/a&gt; and running your llamafiles inside of WSL. Using WSL has the added benefit of letting you run llamafiles greater than 4GB on Windows.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, NVIDIA users will need to install the CUDA SDK (ideally using the shell script installer) and ROCm users need to install the HIP SDK. They&#39;re detected by looking to see if &lt;code&gt;nvcc&lt;/code&gt; or &lt;code&gt;hipcc&lt;/code&gt; are on the PATH.&lt;/p&gt; &#xA;&lt;p&gt;If you have both an AMD GPU &lt;em&gt;and&lt;/em&gt; an NVIDIA GPU in your machine, then you may need to qualify which one you want used, by passing either &lt;code&gt;--gpu amd&lt;/code&gt; or &lt;code&gt;--gpu nvidia&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the event that GPU support couldn&#39;t be compiled and dynamically linked on the fly for any reason, llamafile will fall back to CPU inference.&lt;/p&gt; &#xA;&lt;h2&gt;Source installation&lt;/h2&gt; &#xA;&lt;p&gt;Developing on llamafile requires a modern version of the GNU &lt;code&gt;make&lt;/code&gt; command (called &lt;code&gt;gmake&lt;/code&gt; on some systems), &lt;code&gt;sha256sum&lt;/code&gt; (otherwise &lt;code&gt;cc&lt;/code&gt; will be used to build it), &lt;code&gt;wget&lt;/code&gt; (or &lt;code&gt;curl&lt;/code&gt;), and &lt;code&gt;unzip&lt;/code&gt; available at &lt;a href=&#34;https://cosmo.zip/pub/cosmos/bin/&#34;&gt;https://cosmo.zip/pub/cosmos/bin/&lt;/a&gt;. Windows users need &lt;a href=&#34;https://justine.lol/cosmo3/&#34;&gt;cosmos bash&lt;/a&gt; shell too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make -j8&#xA;sudo make install PREFIX=/usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to generate code for a libc function using the llama.cpp command line interface, utilizing WizardCoder-Python-13B weights:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;llamafile \&#xA;  -m wizardcoder-python-13b-v1.0.Q8_0.gguf \&#xA;  --temp 0 -r &#39;}\n&#39; -r &#39;```\n&#39; \&#xA;  -e -p &#39;```c\nvoid *memcpy(void *dst, const void *src, size_t size) {\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a similar example that instead utilizes Mistral-7B-Instruct weights for prose composition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;llamafile -ngl 9999 \&#xA;  -m mistral-7b-instruct-v0.1.Q4_K_M.gguf \&#xA;  -p &#39;[INST]Write a story about llamas[/INST]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of how llamafile can be used as an interactive chatbot that lets you query knowledge contained in training data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;llamafile -m llama-65b-Q5_K.gguf -p &#39;&#xA;The following is a conversation between a Researcher and their helpful AI assistant Digital Athena which is a large language model trained on the sum of human knowledge.&#xA;Researcher: Good morning.&#xA;Digital Athena: How can I help you today?&#xA;Researcher:&#39; --interactive --color --batch_size 1024 --ctx_size 4096 \&#xA;--keep -1 --temp 0 --mirostat 2 --in-prefix &#39; &#39; --interactive-first \&#xA;--in-suffix &#39;Digital Athena:&#39; --reverse-prompt &#39;Researcher:&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of how you can use llamafile to summarize HTML URLs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(&#xA;  echo &#39;[INST]Summarize the following text:&#39;&#xA;  links -codepage utf-8 \&#xA;        -force-html \&#xA;        -width 500 \&#xA;        -dump https://www.poetryfoundation.org/poems/48860/the-raven |&#xA;    sed &#39;s/   */ /g&#39;&#xA;  echo &#39;[/INST]&#39;&#xA;) | llamafile -ngl 9999 \&#xA;      -m mistral-7b-instruct-v0.2.Q5_K_M.gguf \&#xA;      -f /dev/stdin \&#xA;      -c 0 \&#xA;      --temp 0 \&#xA;      -n 500 \&#xA;      --no-display-prompt 2&amp;gt;/dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s how you can use llamafile to describe a jpg/png/gif/bmp image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;llamafile -ngl 9999 --temp 0 \&#xA;  --image ~/Pictures/lemurs.jpg \&#xA;  -m llava-v1.5-7b-Q4_K.gguf \&#xA;  --mmproj llava-v1.5-7b-mmproj-Q4_0.gguf \&#xA;  -e -p &#39;### User: What do you see?\n### Assistant: &#39; \&#xA;  --no-display-prompt 2&amp;gt;/dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s possible to use BNF grammar to enforce the output is predictable and safe to use in your shell script. The simplest grammar would be &lt;code&gt;--grammar &#39;root ::= &#34;yes&#34; | &#34;no&#34;&#39;&lt;/code&gt; to force the LLM to only print to standard output either &lt;code&gt;&#34;yes\n&#34;&lt;/code&gt; or &lt;code&gt;&#34;no\n&#34;&lt;/code&gt;. Another example is if you wanted to write a script to rename all your image files, you could say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;llamafile -ngl 9999 --temp 0 \&#xA;    --image lemurs.jpg \&#xA;    -m llava-v1.5-7b-Q4_K.gguf \&#xA;    --mmproj llava-v1.5-7b-mmproj-Q4_0.gguf \&#xA;    --grammar &#39;root ::= [a-z]+ (&#34; &#34; [a-z]+)+&#39; \&#xA;    -e -p &#39;### User: What do you see?\n### Assistant: &#39; \&#xA;    --no-display-prompt 2&amp;gt;/dev/null |&#xA;  sed -e&#39;s/ /_/g&#39; -e&#39;s/$/.jpg/&#39;&#xA;a_baby_monkey_on_the_back_of_a_mother.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to run llama.cpp&#39;s built-in HTTP server. This example uses LLaVA v1.5-7B, a multimodal LLM that works with llama.cpp&#39;s recently-added support for image inputs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;llamafile -ngl 9999 \&#xA;  -m llava-v1.5-7b-Q8_0.gguf \&#xA;  --mmproj llava-v1.5-7b-mmproj-Q8_0.gguf \&#xA;  --host 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command will launch a browser tab on your personal computer to display a web interface. It lets you chat with your LLM and upload images to it.&lt;/p&gt; &#xA;&lt;h2&gt;Creating llamafiles&lt;/h2&gt; &#xA;&lt;p&gt;If you want to be able to just say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./llava.llamafile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and have it run the web server without having to specify arguments, then you can embed both the weights and a special &lt;code&gt;.args&lt;/code&gt; inside, which specifies the default arguments. First, let&#39;s create a file named &lt;code&gt;.args&lt;/code&gt; which has this content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;-m&#xA;llava-v1.5-7b-Q8_0.gguf&#xA;--mmproj&#xA;llava-v1.5-7b-mmproj-Q8_0.gguf&#xA;--host&#xA;0.0.0.0&#xA;-ngl&#xA;9999&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As we can see above, there&#39;s one argument per line. The &lt;code&gt;...&lt;/code&gt; argument optionally specifies where any additional CLI arguments passed by the user are to be inserted. Next, we&#39;ll add both the weights and the argument file to the executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp /usr/local/bin/llamafile llava.llamafile&#xA;&#xA;zipalign -j0 \&#xA;  llava.llamafile \&#xA;  llava-v1.5-7b-Q8_0.gguf \&#xA;  llava-v1.5-7b-mmproj-Q8_0.gguf \&#xA;  .args&#xA;&#xA;./llava.llamafile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Congratulations. You&#39;ve just made your own LLM executable that&#39;s easy to share with your friends.&lt;/p&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;p&gt;One good way to share a llamafile with your friends is by posting it on Hugging Face. If you do that, then it&#39;s recommended that you mention in your Hugging Face commit message what git revision or released version of llamafile you used when building your llamafile. That way everyone online will be able verify the provenance of its executable content. If you&#39;ve made changes to the llama.cpp or cosmopolitan source code, then the Apache 2.0 license requires you to explain what changed. One way you can do that is by embedding a notice in your llamafile using &lt;code&gt;zipalign&lt;/code&gt; that describes the changes, and mention it in your Hugging Face commit.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a manual page for each of the llamafile programs installed when you run &lt;code&gt;sudo make install&lt;/code&gt;. The command manuals are also typeset as PDF files that you can download from our GitHub releases page. Lastly, most commands will display that information when passing the &lt;code&gt;--help&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Running llamafile with models downloaded by third-party applications&lt;/h2&gt; &#xA;&lt;p&gt;This section answers the question &lt;em&gt;&#34;I already have a model downloaded locally by application X, can I use it with llamafile?&#34;&lt;/em&gt;. The general answer is &#34;yes, as long as those models are locally stored in GGUF format&#34; but its implementation can be more or less hacky depending on the application. A few examples (tested on a Mac) follow.&lt;/p&gt; &#xA;&lt;h3&gt;LM Studio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lmstudio.ai/&#34;&gt;LM Studio&lt;/a&gt; stores downloaded models in &lt;code&gt;~/.cache/lm-studio/models&lt;/code&gt;, in subdirectories with the same name of the models (following HuggingFace&#39;s &lt;code&gt;account_name/model_name&lt;/code&gt; format), with the same filename you saw when you chose to download the file.&lt;/p&gt; &#xA;&lt;p&gt;So if you have downloaded e.g. the &lt;code&gt;llama-2-7b.Q2_K.gguf&lt;/code&gt; file for &lt;code&gt;TheBloke/Llama-2-7B-GGUF&lt;/code&gt;, you can run llamafile as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/.cache/lm-studio/models/TheBloke/Llama-2-7B-GGUF&#xA;llamafile -m llama-2-7b.Q2_K.gguf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ollama&lt;/h3&gt; &#xA;&lt;p&gt;When you download a new model with &lt;a href=&#34;https://ollama.com&#34;&gt;ollama&lt;/a&gt;, all its metadata will be stored in a manifest file under &lt;code&gt;~/.ollama/models/manifests/registry.ollama.ai/library/&lt;/code&gt;. The directory and manifest file name are the model name as returned by &lt;code&gt;ollama list&lt;/code&gt;. For instance, for &lt;code&gt;llama3:latest&lt;/code&gt; the manifest file will be named &lt;code&gt;.ollama/models/manifests/registry.ollama.ai/library/llama3/latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The manifest maps each file related to the model (e.g. GGUF weights, license, prompt template, etc) to a sha256 digest. The digest corresponding to the element whose &lt;code&gt;mediaType&lt;/code&gt; is &lt;code&gt;application/vnd.ollama.image.model&lt;/code&gt; is the one referring to the model&#39;s GGUF file.&lt;/p&gt; &#xA;&lt;p&gt;Each sha256 digest is also used as a filename in the &lt;code&gt;~/.ollama/models/blobs&lt;/code&gt; directory (if you look into that directory you&#39;ll see &lt;em&gt;only&lt;/em&gt; those sha256-* filenames). This means you can directly run llamafile by passing the sha256 digest as the model filename. So if e.g. the &lt;code&gt;llama3:latest&lt;/code&gt; GGUF file digest is &lt;code&gt;sha256-00e1317cbf74d901080d7100f57580ba8dd8de57203072dc6f668324ba545f29&lt;/code&gt;, you can run llamafile as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/.ollama/models/blobs&#xA;llamafile -m sha256-00e1317cbf74d901080d7100f57580ba8dd8de57203072dc6f668324ba545f29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Technical details&lt;/h2&gt; &#xA;&lt;p&gt;Here is a succinct overview of the tricks we used to create the fattest executable format ever. The long story short is llamafile is a shell script that launches itself and runs inference on embedded weights in milliseconds without needing to be copied or installed. What makes that possible is mmap(). Both the llama.cpp executable and the weights are concatenated onto the shell script. A tiny loader program is then extracted by the shell script, which maps the executable into memory. The llama.cpp executable then opens the shell script again as a file, and calls mmap() again to pull the weights into memory and make them directly accessible to both the CPU and GPU.&lt;/p&gt; &#xA;&lt;h3&gt;ZIP weights embedding&lt;/h3&gt; &#xA;&lt;p&gt;The trick to embedding weights inside llama.cpp executables is to ensure the local file is aligned on a page size boundary. That way, assuming the zip file is uncompressed, once it&#39;s mmap()&#39;d into memory we can pass pointers directly to GPUs like Apple Metal, which require that data be page size aligned. Since no existing ZIP archiving tool has an alignment flag, we had to write about &lt;a href=&#34;https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/llamafile/zipalign.c&#34;&gt;500 lines of code&lt;/a&gt; to insert the ZIP files ourselves. However, once there, every existing ZIP program should be able to read them, provided they support ZIP64. This makes the weights much more easily accessible than they otherwise would have been, had we invented our own file format for concatenated files.&lt;/p&gt; &#xA;&lt;h3&gt;Microarchitectural portability&lt;/h3&gt; &#xA;&lt;p&gt;On Intel and AMD microprocessors, llama.cpp spends most of its time in the matmul quants, which are usually written thrice for SSSE3, AVX, and AVX2. llamafile pulls each of these functions out into a separate file that can be &lt;code&gt;#include&lt;/code&gt;ed multiple times, with varying &lt;code&gt;__attribute__((__target__(&#34;arch&#34;)))&lt;/code&gt; function attributes. Then, a wrapper function is added which uses Cosmopolitan&#39;s &lt;code&gt;X86_HAVE(FOO)&lt;/code&gt; feature to runtime dispatch to the appropriate implementation.&lt;/p&gt; &#xA;&lt;h3&gt;Architecture portability&lt;/h3&gt; &#xA;&lt;p&gt;llamafile solves architecture portability by building llama.cpp twice: once for AMD64 and again for ARM64. It then wraps them with a shell script which has an MZ prefix. On Windows, it&#39;ll run as a native binary. On Linux, it&#39;ll extract a small 8kb executable called &lt;a href=&#34;https://github.com/jart/cosmopolitan/raw/master/ape/loader.c&#34;&gt;APE Loader&lt;/a&gt; to &lt;code&gt;${TMPDIR:-${HOME:-.}}/.ape&lt;/code&gt; that&#39;ll map the binary portions of the shell script into memory. It&#39;s possible to avoid this process by running the &lt;a href=&#34;https://github.com/jart/cosmopolitan/raw/master/tool/build/assimilate.c&#34;&gt;&lt;code&gt;assimilate&lt;/code&gt;&lt;/a&gt; program that comes included with the &lt;code&gt;cosmocc&lt;/code&gt; compiler. What the &lt;code&gt;assimilate&lt;/code&gt; program does is turn the shell script executable into the host platform&#39;s native executable format. This guarantees a fallback path exists for traditional release processes when it&#39;s needed.&lt;/p&gt; &#xA;&lt;h3&gt;GPU support&lt;/h3&gt; &#xA;&lt;p&gt;Cosmopolitan Libc uses static linking, since that&#39;s the only way to get the same executable to run on six OSes. This presents a challenge for llama.cpp, because it&#39;s not possible to statically link GPU support. The way we solve that is by checking if a compiler is installed on the host system. For Apple, that would be Xcode, and for other platforms, that would be &lt;code&gt;nvcc&lt;/code&gt;. llama.cpp has a single file implementation of each GPU module, named &lt;code&gt;ggml-metal.m&lt;/code&gt; (Objective C) and &lt;code&gt;ggml-cuda.cu&lt;/code&gt; (Nvidia C). llamafile embeds those source files within the zip archive and asks the platform compiler to build them at runtime, targeting the native GPU microarchitecture. If it works, then it&#39;s linked with platform C library dlopen() implementation. See &lt;a href=&#34;https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/llamafile/cuda.c&#34;&gt;llamafile/cuda.c&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/llamafile/metal.c&#34;&gt;llamafile/metal.c&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the platform-specific dlopen() function, we need to ask the platform-specific compiler to build a small executable that exposes these interfaces. On ELF platforms, Cosmopolitan Libc maps this helper executable into memory along with the platform&#39;s ELF interpreter. The platform C library then takes care of linking all the GPU libraries, and then runs the helper program which longjmp()&#39;s back into Cosmopolitan. The executable program is now in a weird hybrid state where two separate C libraries exist which have different ABIs. For example, thread local storage works differently on each operating system, and programs will crash if the TLS register doesn&#39;t point to the appropriate memory. The way Cosmopolitan Libc solves that on AMD is by using SSE to recompile the executable at runtime to change &lt;code&gt;%fs&lt;/code&gt; register accesses into &lt;code&gt;%gs&lt;/code&gt; which takes a millisecond. On ARM, Cosmo uses the &lt;code&gt;x28&lt;/code&gt; register for TLS which can be made safe by passing the &lt;code&gt;-ffixed-x28&lt;/code&gt; flag when compiling GPU modules. Lastly, llamafile uses the &lt;code&gt;__ms_abi__&lt;/code&gt; attribute so that function pointers passed between the application and GPU modules conform to the Windows calling convention. Amazingly enough, every compiler we tested, including nvcc on Linux and even Objective-C on MacOS, all support compiling WIN32 style functions, thus ensuring your llamafile will be able to talk to Windows drivers, when it&#39;s run on Windows, without needing to be recompiled as a separate file for Windows. See &lt;a href=&#34;https://github.com/jart/cosmopolitan/raw/master/libc/dlopen/dlopen.c&#34;&gt;cosmopolitan/dlopen.c&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;A note about models&lt;/h2&gt; &#xA;&lt;p&gt;The example llamafiles provided above should not be interpreted as endorsements or recommendations of specific models, licenses, or data sets on the part of Mozilla.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;llamafile adds pledge() and SECCOMP sandboxing to llama.cpp. This is enabled by default. It can be turned off by passing the &lt;code&gt;--unsecure&lt;/code&gt; flag. Sandboxing is currently only supported on Linux and OpenBSD on systems without GPUs; on other platforms it&#39;ll simply log a warning.&lt;/p&gt; &#xA;&lt;p&gt;Our approach to security has these benefits:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;After it starts up, your HTTP server isn&#39;t able to access the filesystem at all. This is good, since it means if someone discovers a bug in the llama.cpp server, then it&#39;s much less likely they&#39;ll be able to access sensitive information on your machine or make changes to its configuration. On Linux, we&#39;re able to sandbox things even further; the only networking related system call the HTTP server will allowed to use after starting up, is accept(). That further limits an attacker&#39;s ability to exfiltrate information, in the event that your HTTP server is compromised.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The main CLI command won&#39;t be able to access the network at all. This is enforced by the operating system kernel. It also won&#39;t be able to write to the file system. This keeps your computer safe in the event that a bug is ever discovered in the GGUF file format that lets an attacker craft malicious weights files and post them online. The only exception to this rule is if you pass the &lt;code&gt;--prompt-cache&lt;/code&gt; flag without also specifying &lt;code&gt;--prompt-cache-ro&lt;/code&gt;. In that case, security currently needs to be weakened to allow &lt;code&gt;cpath&lt;/code&gt; and &lt;code&gt;wpath&lt;/code&gt; access, but network access will remain forbidden.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Therefore your llamafile is able to protect itself against the outside world, but that doesn&#39;t mean you&#39;re protected from llamafile. Sandboxing is self-imposed. If you obtained your llamafile from an untrusted source then its author could have simply modified it to not do that. In that case, you can run the untrusted llamafile inside another sandbox, such as a virtual machine, to make sure it behaves how you expect.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;While the llamafile project is Apache 2.0-licensed, our changes to llama.cpp are licensed under MIT (just like the llama.cpp project itself) so as to remain compatible and upstreamable in the future, should that be desired.&lt;/p&gt; &#xA;&lt;p&gt;The llamafile logo on this page was generated with the assistance of DALL·E 3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Mozilla-Ocho/llamafile&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Mozilla-Ocho/llamafile&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PathOfBuildingCommunity/PathOfBuilding</title>
    <updated>2024-07-22T01:29:01Z</updated>
    <id>tag:github.com,2024-07-22:/PathOfBuildingCommunity/PathOfBuilding</id>
    <link href="https://github.com/PathOfBuildingCommunity/PathOfBuilding" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offline build planner for Path of Exile.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Path of Building Community Fork&lt;/h1&gt; &#xA;&lt;h2&gt;Formerly known as LocalIdentity Fork&lt;/h2&gt; &#xA;&lt;p&gt;This is a fork of Openarl&#39;s Path Of Building that includes many extra features not in the base version of PoB&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adds support for new and updated uniques from league 3.8 onwards&lt;/li&gt; &#xA; &lt;li&gt;Pantheon support&lt;/li&gt; &#xA; &lt;li&gt;Impale DPS support&lt;/li&gt; &#xA; &lt;li&gt;Enemy armour and physical damage reduction calculations&lt;/li&gt; &#xA; &lt;li&gt;Catalysts&lt;/li&gt; &#xA; &lt;li&gt;Dual influence crafting&lt;/li&gt; &#xA; &lt;li&gt;Search for all dropdown boxes&lt;/li&gt; &#xA; &lt;li&gt;Barrage Support skill gem&lt;/li&gt; &#xA; &lt;li&gt;Ensnaring Arrow support&lt;/li&gt; &#xA; &lt;li&gt;Thread of Hope support&lt;/li&gt; &#xA; &lt;li&gt;Crimson Dance support&lt;/li&gt; &#xA; &lt;li&gt;Void Shot support&lt;/li&gt; &#xA; &lt;li&gt;Delve helmet mod support&lt;/li&gt; &#xA; &lt;li&gt;Breakdown for aura and curse effect&lt;/li&gt; &#xA; &lt;li&gt;List of recently imported accounts to the Import/Export Build tab&lt;/li&gt; &#xA; &lt;li&gt;More tree highlighting options for node power&lt;/li&gt; &#xA; &lt;li&gt;Support for fossil mods in the crafting window. Including correct parsing for some mods that previously didn&#39;t work (e.g., 60% chance to deal 100% more poison/bleed damage)&lt;/li&gt; &#xA; &lt;li&gt;Add parsing for more nodes on the tree (i.e., Slayer, Champion, Berserker, Chieftain, Hierophant, Trickster, Assassin, Necromancer and Elementalist ascendancy nodes)&lt;/li&gt; &#xA; &lt;li&gt;Add oil combinations to notables on the passive tree&lt;/li&gt; &#xA; &lt;li&gt;Support for Elusive and Nightblade support gem&lt;/li&gt; &#xA; &lt;li&gt;Incremental shock values (not a locked 50%)&lt;/li&gt; &#xA; &lt;li&gt;Fixed Close Combat and Multistrike to have their correct damage values&lt;/li&gt; &#xA; &lt;li&gt;Logic for melee distance scaling attack multipliers (Close Combat and Slayer&#39;s Impact node)&lt;/li&gt; &#xA; &lt;li&gt;Withered now shows on the configuration screen&lt;/li&gt; &#xA; &lt;li&gt;Support for Ryslatha&#39;s Coil, Vaal Arc Lucky Buff, Perquil&#39;s Toe and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://github.com/PathOfBuildingCommunity/PathOfBuilding/releases&#34;&gt;Releases&lt;/a&gt; page to download the install wizard or portable zip.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can find instructions on how to contribute code and bug reports &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding/dev/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full version history &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding/dev/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Path of Building, an offline build planner for Path of Exile!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comprehensive offence + defence calculations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Calculate your skill DPS, damage over time, life/mana/ES totals and much more!&lt;/li&gt; &#xA;   &lt;li&gt;Can factor in auras, buffs, charges, curses, monster resistances and more, to estimate your effective DPS&lt;/li&gt; &#xA;   &lt;li&gt;Also calculates life/mana reservations&lt;/li&gt; &#xA;   &lt;li&gt;Shows a summary of character stats in the side bar, as well as a detailed calculations breakdown tab which can show you how the stats were derived&lt;/li&gt; &#xA;   &lt;li&gt;Supports all skills and support gems, and most passives and item modifiers &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Throughout the program, supported modifiers will show in blue and unsupported ones in red&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Full support for minions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Passive skill tree planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for jewels including most radius/conversion jewels&lt;/li&gt; &#xA;   &lt;li&gt;Features alternate path tracing (mouse over a sequence of nodes while holding shift, then click to allocate them all)&lt;/li&gt; &#xA;   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how each node will affect your character!&lt;/li&gt; &#xA;   &lt;li&gt;Can import PathOfExile.com and PoEPlanner.com passive tree links; links shortened with PoEURL.com also work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Skill planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add any number of main or supporting skills to your build&lt;/li&gt; &#xA;   &lt;li&gt;Supporting skills (auras, curses, buffs) can be toggled on and off&lt;/li&gt; &#xA;   &lt;li&gt;Automatically applies Socketed Gem modifiers from the item a skill is socketed into&lt;/li&gt; &#xA;   &lt;li&gt;Automatically applies support gems granted by items&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Item planner: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add items from in game by copying and pasting them straight into the program!&lt;/li&gt; &#xA;   &lt;li&gt;Automatically adds quality to non-corrupted items&lt;/li&gt; &#xA;   &lt;li&gt;Fully integrated with the offence/defence calculations; see exactly how much of an upgrade a given item is!&lt;/li&gt; &#xA;   &lt;li&gt;Contains a searchable database of all uniques that are currently in game (and some that aren&#39;t yet!) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can choose the modifier rolls when you add a unique to your build&lt;/li&gt; &#xA;     &lt;li&gt;Includes all league-specific items and legacy variants&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Features an item crafting system: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You can select from any of the game&#39;s base item types&lt;/li&gt; &#xA;     &lt;li&gt;You can select prefix/suffix modifiers from lists&lt;/li&gt; &#xA;     &lt;li&gt;Custom modifiers can be added, with Master and Essence modifiers available&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Also contains a database of rare item templates: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Allows you to create rare items for your build to approximate the gear you will be using&lt;/li&gt; &#xA;     &lt;li&gt;Choose which modifiers appear on each item, and the rolls for each modifier, to suit your needs&lt;/li&gt; &#xA;     &lt;li&gt;Has templates that should cover the majority of builds (inb4 &#39;why is there no coral amulet?&#39;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can import passive tree, items, and skills from existing characters&lt;/li&gt; &#xA;   &lt;li&gt;Share builds with other users by generating a share code&lt;/li&gt; &#xA;   &lt;li&gt;Automatic updating; most updates will only take a couple of seconds to apply&lt;/li&gt; &#xA;   &lt;li&gt;Somewhat more open source than usual (look in &#34;%ProgramData%\Path of Building&#34; if you&#39;re interested)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23911/153694681-cbc7b83a-970c-4020-b9e3-2a09f0808e38.png&#34; alt=&#34;ss1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/23911/153694692-0309bab1-6776-43ac-bb5a-6cc40265c7c7.png&#34; alt=&#34;ss2&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/23911/153694693-2471e491-6ed9-47ae-abcc-a3bff81cdc7c.png&#34; alt=&#34;ss3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For 3rd-party licences, see &lt;a href=&#34;https://raw.githubusercontent.com/PathOfBuildingCommunity/PathOfBuilding/dev/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt;. The licencing information is considered to be part of the documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qmk/qmk_firmware</title>
    <updated>2024-07-22T01:29:01Z</updated>
    <id>tag:github.com,2024-07-22:/qmk/qmk_firmware</id>
    <link href="https://github.com/qmk/qmk_firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source keyboard firmware for Atmel AVR and Arm USB families&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quantum Mechanical Keyboard Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qmk/qmk_firmware/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Uq7gcHh&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/440868230475677696.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.qmk.fm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-ready-orange.svg?sanitize=true&#34; alt=&#34;Docs Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulse/monthly&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/qmk/qmk_firmware.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qmk/qmk_firmware/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/qmk/qmk_firmware.svg?style=social&amp;amp;label=Fork&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a keyboard firmware based on the &lt;a href=&#34;https://github.com/tmk/tmk_keyboard&#34;&gt;tmk_keyboard firmware&lt;/a&gt; with some useful features for Atmel AVR and ARM controllers, and more specifically, the &lt;a href=&#34;https://olkb.com&#34;&gt;OLKB product line&lt;/a&gt;, the &lt;a href=&#34;https://ergodox-ez.com&#34;&gt;ErgoDox EZ&lt;/a&gt; keyboard, and the Clueboard product line.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.qmk.fm&#34;&gt;See the official documentation on docs.qmk.fm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The docs are powered by &lt;a href=&#34;https://vitepress.dev/&#34;&gt;VitePress&lt;/a&gt;. They are also viewable offline; see &lt;a href=&#34;https://docs.qmk.fm/#/contributing?id=previewing-the-documentation&#34;&gt;Previewing the Documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can request changes by making a fork and opening a &lt;a href=&#34;https://github.com/qmk/qmk_firmware/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Keyboards&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/planck/&#34;&gt;Planck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/preonic/&#34;&gt;Preonic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/ergodox_ez/&#34;&gt;ErgoDox EZ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/&#34;&gt;Clueboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/clueboard/17/&#34;&gt;Cluepad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/atreus/&#34;&gt;Atreus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The project also includes community support for &lt;a href=&#34;https://raw.githubusercontent.com/qmk/qmk_firmware/master/keyboards/&#34;&gt;lots of other keyboards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;QMK is developed and maintained by Jack Humbert of OLKB with contributions from the community, and of course, &lt;a href=&#34;https://github.com/tmk&#34;&gt;Hasu&lt;/a&gt;. The OLKB product firmwares are maintained by &lt;a href=&#34;https://github.com/jackhumbert&#34;&gt;Jack Humbert&lt;/a&gt;, the Ergodox EZ by &lt;a href=&#34;https://github.com/zsa&#34;&gt;ZSA Technology Labs&lt;/a&gt;, the Clueboard by &lt;a href=&#34;https://github.com/skullydazed&#34;&gt;Zach White&lt;/a&gt;, and the Atreus by &lt;a href=&#34;https://github.com/technomancy&#34;&gt;Phil Hagelberg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Official Website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qmk.fm&#34;&gt;qmk.fm&lt;/a&gt; is the official website of QMK, where you can find links to this page, the documentation, and the keyboards supported by QMK.&lt;/p&gt;</summary>
  </entry>
</feed>