<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:29:13Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NARKOZ/hacker-scripts</title>
    <updated>2023-04-09T01:29:13Z</updated>
    <id>tag:github.com,2023-04-09:/NARKOZ/hacker-scripts</id>
    <link href="https://github.com/NARKOZ/hacker-scripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Based on a true story&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/NARKOZ/hacker-scripts/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Hacker Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Based on a &lt;em&gt;&lt;a href=&#34;https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/&#34;&gt;true story&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: OK, so, our build engineer has left for another company. The dude was literally living inside the terminal. You know, that type of a guy who loves Vim, creates diagrams in Dot and writes wiki-posts in Markdown... If something - anything - requires more than 90 seconds of his time, he writes a script to automate that.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: So we&#39;re sitting here, looking through his, uhm, &#34;legacy&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: You&#39;re gonna love this&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: &lt;a href=&#34;https://github.com/NARKOZ/hacker-scripts/raw/master/smack-my-bitch-up.sh&#34;&gt;&lt;code&gt;smack-my-bitch-up.sh&lt;/code&gt;&lt;/a&gt; - sends a text message &#34;late at work&#34; to his wife (apparently). Automatically picks reasons from an array of strings, randomly. Runs inside a cron-job. The job fires if there are active SSH-sessions on the server after 9pm with his login.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: &lt;a href=&#34;https://github.com/NARKOZ/hacker-scripts/raw/master/kumar-asshole.sh&#34;&gt;&lt;code&gt;kumar-asshole.sh&lt;/code&gt;&lt;/a&gt; - scans the inbox for emails from &#34;Kumar&#34; (a DBA at our clients). Looks for keywords like &#34;help&#34;, &#34;trouble&#34;, &#34;sorry&#34; etc. If keywords are found - the script SSHes into the clients server and rolls back the staging database to the latest backup. Then sends a reply &#34;no worries mate, be careful next time&#34;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: &lt;a href=&#34;https://github.com/NARKOZ/hacker-scripts/raw/master/hangover.sh&#34;&gt;&lt;code&gt;hangover.sh&lt;/code&gt;&lt;/a&gt; - another cron-job that is set to specific dates. Sends automated emails like &#34;not feeling well/gonna work from home&#34; etc. Adds a random &#34;reason&#34; from another predefined array of strings. Fires if there are no interactive sessions on the server at 8:45am.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: (and the oscar goes to) &lt;a href=&#34;https://github.com/NARKOZ/hacker-scripts/raw/master/fucking-coffee.sh&#34;&gt;&lt;code&gt;fucking-coffee.sh&lt;/code&gt;&lt;/a&gt; - this one waits exactly 17 seconds (!), then opens a telnet session to our coffee-machine (we had no frikin idea the coffee machine is on the network, runs linux and has a TCP socket up and running) and sends something like &lt;code&gt;sys brew&lt;/code&gt;. Turns out this thing starts brewing a mid-sized half-caf latte and waits another 24 (!) seconds before pouring it into a cup. The timing is exactly how long it takes to walk to the machine from the dudes desk.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;xxx: holy sh*t I&#39;m keeping those&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Original: &lt;a href=&#34;http://bash.im/quote/436725&#34;&gt;http://bash.im/quote/436725&lt;/a&gt; (in Russian) (Archive.org &lt;a href=&#34;https://web.archive.org/web/20210226092253/http://bash.im/quote/436725&#34;&gt;link&lt;/a&gt;) Pull requests with other implementations (Python, Perl, Shell, etc) are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You need these environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# used in `smack-my-bitch-up` and `hangover` scripts&#xA;TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;TWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&#xA;&#xA;# used in `kumar_asshole` script&#xA;GMAIL_USERNAME=admin@example.org&#xA;GMAIL_PASSWORD=password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Ruby scripts you need to install gems: &lt;code&gt;gem install dotenv twilio-ruby gmail&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cron jobs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Runs `smack-my-bitch-up.sh` monday to friday at 9:20 pm.&#xA;20 21 * * 1-5 /path/to/scripts/smack-my-bitch-up.sh &amp;gt;&amp;gt; /path/to/smack-my-bitch-up.log 2&amp;gt;&amp;amp;1&#xA;&#xA;# Runs `hangover.sh` monday to friday at 8:45 am.&#xA;45 8 * * 1-5 /path/to/scripts/hangover.sh &amp;gt;&amp;gt; /path/to/hangover.log 2&amp;gt;&amp;amp;1&#xA;&#xA;# Runs `kumar-asshole.sh` every 10 minutes.&#xA;*/10 * * * * /path/to/scripts/kumar-asshole.sh&#xA;&#xA;# Runs `fucking-coffee.sh` hourly from 9am to 6pm on weekdays.&#xA;0 9-18 * * 1-5 /path/to/scripts/fucking-coffee.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Code is released under WTFPL.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/buck2</title>
    <updated>2023-04-09T01:29:13Z</updated>
    <id>tag:github.com,2023-04-09:/facebook/buck2</id>
    <link href="https://github.com/facebook/buck2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build system, successor to Buck&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Buck2 &lt;a href=&#34;https://app.circleci.com/pipelines/github/facebook/buck2&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/buck2.svg?style=svg&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains the code for the Buck2 build system - the successor to the original &lt;a href=&#34;https://buck.build&#34;&gt;Buck build system&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To understand why Buck2 might be interesting, see &lt;a href=&#34;https://buck2.build/docs/why/&#34;&gt;this explainer&lt;/a&gt; or &lt;a href=&#34;https://engineering.fb.com/2023/04/06/open-source/buck2-open-source-large-scale-build-system&#34;&gt;our introductory blog post&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For our user-facing documentation see &lt;a href=&#34;https://buck2.build/&#34;&gt;https://buck2.build/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;re keen for you to give Buck2 a go and &lt;a href=&#34;https://github.com/facebook/buck2/issues&#34;&gt;let us know&lt;/a&gt; any problems you run into.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Buck2 is written in Rust, which requires &lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup&lt;/a&gt; to compile.&lt;/p&gt; &#xA;&lt;p&gt;You can either build &lt;code&gt;buck2&lt;/code&gt; from a clone of the Buck2 repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/facebook/buck2.git&#xA;cd buck2/&#xA;cargo install --path=app/buck2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively install it directly from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup install nightly-2023-01-24&#xA;cargo +nightly-2023-01-24 install --git https://github.com/facebook/buck2.git buck2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build uses prebuilt &lt;code&gt;protoc&lt;/code&gt; binary from &lt;a href=&#34;https://crates.io/crates/protoc-bin-vendored&#34;&gt;protoc-bin-vendored&lt;/a&gt; crate. If these binaries to do not work on your machine (for example, when building for NixOS), path to &lt;code&gt;protoc&lt;/code&gt; binary and protobuf include path can be specified via &lt;code&gt;BUCK2_BUILD_PROTOC&lt;/code&gt; and &lt;code&gt;BUCK2_BUILD_PROTOC_INCLUDE&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;To build a project with &lt;code&gt;buck2&lt;/code&gt;, go to the &lt;a href=&#34;https://buck2.build/docs/getting_started/&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Terminology conventions&lt;/h2&gt; &#xA;&lt;p&gt;Frequently used terms and their definitions can be found in the &lt;a href=&#34;https://buck2.build/docs/concepts/glossary/&#34;&gt;glossary page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Coding conventions&lt;/h2&gt; &#xA;&lt;p&gt;Beyond the obvious (well-tested, easy to read) we prefer guidelines that are automatically enforced, e.g. through &lt;code&gt;rust fmt&lt;/code&gt;, Clippy or the custom linter we have written. Some rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the utilities from Gazebo where they are useful, in particular, &lt;code&gt;dupe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Prefer &lt;code&gt;to_owned&lt;/code&gt; to convert &lt;code&gt;&amp;amp;str&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Qualify &lt;code&gt;anyhow::Result&lt;/code&gt; rather than &lt;code&gt;use anyhow::Result&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Most errors should be returned as &lt;code&gt;anyhow::Result&lt;/code&gt;. Inspecting errors outside tests and the top-level error handler is strongly discouraged.&lt;/li&gt; &#xA; &lt;li&gt;Most errors should be constructed with &lt;code&gt;thiserror&lt;/code&gt; deriving &lt;code&gt;enum&lt;/code&gt; values, not raw &lt;code&gt;anyhow!&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We use the &lt;code&gt;derivative&lt;/code&gt; library to derive the &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt; traits when some fields should be ignored.&lt;/li&gt; &#xA; &lt;li&gt;Prefer &lt;code&gt;use crate::foo::bar&lt;/code&gt; over &lt;code&gt;use super::bar&lt;/code&gt; or &lt;code&gt;use crate::foo::*&lt;/code&gt;, apart from test modules which often have &lt;code&gt;use super::*&lt;/code&gt; at the top.&lt;/li&gt; &#xA; &lt;li&gt;Modules should either have submodules or types/functions/constants, but not both.&lt;/li&gt; &#xA; &lt;li&gt;Prefer &lt;code&gt;anyhow::Error&lt;/code&gt; for checking internal invariants that are maintained between multiple files, while &lt;code&gt;panic!&lt;/code&gt;/&lt;code&gt;unreachable!&lt;/code&gt; are reasonable if the invariant is file-local.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Error messages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Names (of variables, targets, files, etc) should be quoted with backticks, e.g. &lt;code&gt;Variable `x` not defined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Lists should use square brackets, e.g. &lt;code&gt;Available targets: [`aa`, `bb`]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Error messages should start with an upper case letter. Error messages should not end with a period.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Buck2 is both MIT and Apache License, Version 2.0 licensed, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/buck2/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/facebook/buck2/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; files.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>guangzhengli/ChatFiles</title>
    <updated>2023-04-09T01:29:13Z</updated>
    <id>tag:github.com,2023-04-09:/guangzhengli/ChatFiles</id>
    <link href="https://github.com/guangzhengli/ChatFiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Have a conversation with files ｜与你的文件对话&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://skillicons.dev&#34;&gt;&lt;img src=&#34;https://skillicons.dev/icons?i=nextjs,tailwind,react,python,flask&#34; alt=&#34;My Skills&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ChatFiles&lt;/h1&gt; &#xA;&lt;p&gt;EN | &lt;a href=&#34;https://raw.githubusercontent.com/guangzhengli/ChatFiles/main/README.zh.md&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;this repository use &lt;a href=&#34;https://github.com/jerryjliu/llama_index&#34;&gt;jerryjliu/llama_index&lt;/a&gt;, based on &lt;a href=&#34;https://github.com/mckaywrigley/chatbot-ui&#34;&gt;mckaywrigley/chatbot-ui&lt;/a&gt;, inspired by &lt;a href=&#34;https://github.com/madawei2699/myGPTReader&#34;&gt;madawei2699/myGPTReader&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/guangzhengli/ChatFiles/main/doc/chatfiles.png&#34; alt=&#34;Chatfiles&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upload your file and have a conversation with it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;create a .env file on root path.&lt;/li&gt; &#xA; &lt;li&gt;put your OpenAI Key to .env file with OPENAI_API_KEY=&#39;your token&#39;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;run this project with docker compose.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;open browser with &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;chat with file&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;upload a file.&lt;/li&gt; &#xA; &lt;li&gt;have a conversation with it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;chat with GPT&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;send message without upload file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to run locally&lt;/h2&gt; &#xA;&lt;h3&gt;chatfiles-ui&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd chatfiles-ui&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;chatfiles&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd chatfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;create a file named .env with value(OPENAI_API_KEY=your token)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with GPT-3.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with file by llama_index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Upload multiple files to one index, chat with multiple files.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>