<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-06T01:25:23Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>samuelcolvin/FastUI</title>
    <updated>2023-12-06T01:25:23Z</updated>
    <id>tag:github.com,2023-12-06:/samuelcolvin/FastUI</id>
    <link href="https://github.com/samuelcolvin/FastUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build better UIs faster.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/samuelcolvin/FastUI/actions?query=event%3Apush+branch%3Amain+workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/samuelcolvin/FastUI/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/fastui&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/fastui.svg?sanitize=true&#34; alt=&#34;pypi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/samuelcolvin/FastUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/fastui.svg?sanitize=true&#34; alt=&#34;versions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/samuelcolvin/FastUI/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/samuelcolvin/FastUI.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; FastUI is still an active work in progress, do not expect it to be complete.&lt;/p&gt; &#xA;&lt;h2&gt;The Principle (short version)&lt;/h2&gt; &#xA;&lt;p&gt;You can see a simple demo of an application built with FastUI &lt;a href=&#34;https://fastui-demo.onrender.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;FastUI is a new way to build web application user interfaces defined by declarative Python code.&lt;/p&gt; &#xA;&lt;p&gt;This means:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you&#39;re a Python developer&lt;/strong&gt; — you can build responsive web applications using React without writing a single line of JavaScript, or touching &lt;code&gt;npm&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you&#39;re a frontend developer&lt;/strong&gt; — you can concentrate on building magical components that are truly reusable, no copy-pasting components for each view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For everyone&lt;/strong&gt; — a true separation of concerns, the backend defines the entire application; while the frontend is free to implement just the user interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At its heart, FastUI is a set of matching &lt;a href=&#34;https://docs.pydantic.dev&#34;&gt;Pydantic&lt;/a&gt; models and TypeScript interfaces that allow you to define a user interface. This interface is validated at build time by TypeScript and pyright/mypy and at runtime by Pydantic.&lt;/p&gt; &#xA;&lt;h2&gt;The Practice — Usage&lt;/h2&gt; &#xA;&lt;p&gt;FastUI is made up of 4 things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/fastui&#34;&gt;&lt;code&gt;fastui&lt;/code&gt; PyPI package&lt;/a&gt; — Pydantic models for UI components, and some utilities. While it works well with &lt;a href=&#34;https://fastapi.tiangolo.com&#34;&gt;FastAPI&lt;/a&gt; it doesn&#39;t depend on FastAPI, and most of it could be used with any python web framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@pydantic/fastui&#34;&gt;&lt;code&gt;@pydantic/fastui&lt;/code&gt; npm package&lt;/a&gt; — a React TypeScript package that let&#39;s you reuse the machinery and types of FastUI while implementing your own components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@pydantic/fastui-bootstrap&#34;&gt;&lt;code&gt;@pydantic/fastui-bootstrap&lt;/code&gt; npm package&lt;/a&gt; — implementation/customisation of all FastUI components using &lt;a href=&#34;https://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jsdelivr.com/package/npm/@pydantic/fastui-prebuilt&#34;&gt;&lt;code&gt;@pydantic/fastui-prebuilt&lt;/code&gt; npm package&lt;/a&gt; (available on &lt;a href=&#34;https://www.jsdelivr.com/package/npm/@pydantic/fastui-prebuilt&#34;&gt;jsdelivr.com CDN&lt;/a&gt;) providing a pre-built version of the FastUI React app so you can use it without installing any npm packages or building anything yourself. The Python package provides a simple HTML page to serve this app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s a simple but complete FastAPI application that uses FastUI to show some user profiles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import date&#xA;&#xA;from fastapi import FastAPI, HTTPException&#xA;from fastapi.responses import HTMLResponse&#xA;from fastui import FastUI, AnyComponent, prebuilt_html, components as c&#xA;from fastui.components.display import DisplayMode, DisplayLookup&#xA;from fastui.events import GoToEvent, BackEvent&#xA;from pydantic import BaseModel, Field&#xA;&#xA;app = FastAPI()&#xA;&#xA;&#xA;class User(BaseModel):&#xA;    id: int&#xA;    name: str&#xA;    dob: date = Field(title=&#39;Date of Birth&#39;)&#xA;&#xA;&#xA;# define some users&#xA;users = [&#xA;    User(id=1, name=&#39;John&#39;, dob=date(1990, 1, 1)),&#xA;    User(id=2, name=&#39;Jack&#39;, dob=date(1991, 1, 1)),&#xA;    User(id=3, name=&#39;Jill&#39;, dob=date(1992, 1, 1)),&#xA;    User(id=4, name=&#39;Jane&#39;, dob=date(1993, 1, 1)),&#xA;]&#xA;&#xA;&#xA;@app.get(&#34;/api/&#34;, response_model=FastUI, response_model_exclude_none=True)&#xA;def users_table() -&amp;gt; list[AnyComponent]:&#xA;    &#34;&#34;&#34;&#xA;    Show a table of four users, `/api` is the endpoint the frontend will connect to&#xA;    when a user fixes `/` to fetch components to render.&#xA;    &#34;&#34;&#34;&#xA;    return [&#xA;        c.Page(  # Page provides a basic container for components&#xA;            components=[&#xA;                c.Heading(text=&#39;Users&#39;, level=2),  # renders `&amp;lt;h2&amp;gt;Users&amp;lt;/h2&amp;gt;`&#xA;                c.Table[User](  # c.Table is a generic component parameterized with the model used for rows&#xA;                    data=users,&#xA;                    # define two columns for the table&#xA;                    columns=[&#xA;                        # the first is the users, name rendered as a link to their profile&#xA;                        DisplayLookup(field=&#39;name&#39;, on_click=GoToEvent(url=&#39;/user/{id}/&#39;)),&#xA;                        # the second is the date of birth, rendered as a date&#xA;                        DisplayLookup(field=&#39;dob&#39;, mode=DisplayMode.date),&#xA;                    ],&#xA;                ),&#xA;            ]&#xA;        ),&#xA;    ]&#xA;&#xA;&#xA;@app.get(&#34;/api/user/{user_id}/&#34;, response_model=FastUI, response_model_exclude_none=True)&#xA;def user_profile(user_id: int) -&amp;gt; list[AnyComponent]:&#xA;    &#34;&#34;&#34;&#xA;    User profile page, the frontend will fetch this when the user visits `/user/{id}/`.&#xA;    &#34;&#34;&#34;&#xA;    try:&#xA;        user = next(u for u in users if u.id == user_id)&#xA;    except StopIteration:&#xA;        raise HTTPException(status_code=404, detail=&#34;User not found&#34;)&#xA;    return [&#xA;        c.Page(&#xA;            components=[&#xA;                c.Heading(text=user.name, level=2),&#xA;                c.Link(components=[c.Text(text=&#39;Back&#39;)], on_click=BackEvent()),&#xA;                c.Details(data=user),&#xA;            ]&#xA;        ),&#xA;    ]&#xA;&#xA;&#xA;@app.get(&#39;/{path:path}&#39;)&#xA;async def html_landing() -&amp;gt; HTMLResponse:&#xA;    &#34;&#34;&#34;Simple HTML page which serves the React app, comes last as it matches all paths.&#34;&#34;&#34;&#xA;    return HTMLResponse(prebuilt_html(title=&#39;FastUI Demo&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which renders like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samuelcolvin/FastUI/main/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Of course, that&#39;s a very simple application, the &lt;a href=&#34;https://fastui-demo.onrender.com&#34;&gt;full demo&lt;/a&gt; is more complete.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;FastUI already defines the following components, all are shown in the &lt;a href=&#34;https://fastui-demo.onrender.com&#34;&gt;demo app&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Text&lt;/code&gt; — renders a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Paragraph&lt;/code&gt; — renders a string as a paragraph&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PageTitle&lt;/code&gt; — renders nothing, sets the HTML page title&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Div&lt;/code&gt; — renders a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with arbitrary components inside&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Page&lt;/code&gt; — a container for components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Heading&lt;/code&gt; — renders a heading &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Markdown&lt;/code&gt; — renders markdown, &lt;a href=&#34;https://fastui-demo.onrender.com&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Code&lt;/code&gt; — renders code with highlighting in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Button&lt;/code&gt; — renders a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Link&lt;/code&gt; — renders a link &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LinkList&lt;/code&gt; — renders a list of links&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Navbar&lt;/code&gt; — renders a navbar &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Modal&lt;/code&gt; — renders a modal dialog that opens triggered by an event&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ServerLoad&lt;/code&gt; — render components fetched from the server, also provides SSE mode to update components based on server sent events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Table&lt;/code&gt; — renders a table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Details&lt;/code&gt; — renders a table of key/value pairs as a &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Display&lt;/code&gt; — renders a value based on a display mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Table&lt;/code&gt; — renders a table from a list of Pydantic models&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pagination&lt;/code&gt; — renders a pagination component&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormFieldInput&lt;/code&gt; — renders a form field using &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormFieldBoolean&lt;/code&gt; — renders a form field for a boolean using &lt;code&gt;&amp;lt;input type=&#34;checkbox&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormFieldSelect&lt;/code&gt; — renders a form field using &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; or &lt;a href=&#34;https://react-select.com&#34;&gt;react-select&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormFieldSelectSearch&lt;/code&gt; — renders a form field using &lt;a href=&#34;https://react-select.com&#34;&gt;react-select&lt;/a&gt; with options updated from the server on search&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Form&lt;/code&gt; — renders a form using a list of &lt;code&gt;FormField&lt;/code&gt; components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ModelForm&lt;/code&gt; — renders a form based on a Pydantic model; the model&#39;s JSON Schema is used to build a list of &lt;code&gt;FormField&lt;/code&gt; components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Principle (long version)&lt;/h2&gt; &#xA;&lt;p&gt;FastUI is an implementation of the RESTful principle; but not as it&#39;s usually understood, instead I mean the principle defined in the original &lt;a href=&#34;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;PhD dissertation&lt;/a&gt; by Roy Fielding, and excellently summarised in &lt;a href=&#34;https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/&#34;&gt;this essay on htmx.org&lt;/a&gt; (HTMX people, I&#39;m sorry to use your article to promote React which I know you despise 🙏).&lt;/p&gt; &#xA;&lt;p&gt;The RESTful principle as described in the HTMX article is that the frontend doesn&#39;t need to (and shouldn&#39;t) know anything about the application you&#39;re building. Instead, it should just provide all the components you need to construct the interface, the backend can then tell the frontend what to do.&lt;/p&gt; &#xA;&lt;p&gt;Think of your frontend as a puppet, and the backend as the hand within it — the puppet doesn&#39;t need to know what to say, that&#39;s kind of the point.&lt;/p&gt; &#xA;&lt;p&gt;Building an application this way has a number of significant advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You only need to write code in one place to build a new feature — add a new view, change the behavior of an existing view or alter the URL structure&lt;/li&gt; &#xA; &lt;li&gt;Deploying the front and backend can be completely decoupled, provided the frontend knows how to render all the components the backend is going to ask it to use, you&#39;re good to go&lt;/li&gt; &#xA; &lt;li&gt;You should be able to reuse a rich set of opensource components, they should end up being better tested and more reliable than anything you could build yourself, this is possible because the components need no context about how they&#39;re going to be used (note: since FastUI is brand new, this isn&#39;t true yet, hopefully we get there)&lt;/li&gt; &#xA; &lt;li&gt;We can use Pydantic, TypeScript and JSON Schema to provide guarantees that the two sides are communicating with an agreed schema (note: this is not complete yet, see &lt;a href=&#34;https://github.com/samuelcolvin/FastUI/issues/18&#34;&gt;#18&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the abstract, FastUI is like the opposite of GraphQL but with the same goal — GraphQL lets frontend developers extend an application without any new backend development; FastUI lets backend developers extend an application without any new frontend development.&lt;/p&gt; &#xA;&lt;h3&gt;Beyond Python and React&lt;/h3&gt; &#xA;&lt;p&gt;Of course, this principle shouldn&#39;t be limited to Python and React applications — provided we use the same set of agreed schemas and encoding to communicate, we should be able to use any frontend and backend that implements the schema. Interchangeably.&lt;/p&gt; &#xA;&lt;p&gt;This could mean:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementing a web frontend using another JS framework like Vue — lots of work, limited value IMHO&lt;/li&gt; &#xA; &lt;li&gt;Implementing a web frontend using an edge server, so the browser just sees HTML — lots of work but very valuable&lt;/li&gt; &#xA; &lt;li&gt;Implementing frontends for other platforms like mobile or IOT — lots of work, no idea if it&#39;s actually a good idea?&lt;/li&gt; &#xA; &lt;li&gt;Implementing the component models in another language like Rust or Go — since there&#39;s actually not that much code in the backend, so this would be a relatively small and mechanical task&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xaoyaoo/PyWxDump</title>
    <updated>2023-12-06T01:25:23Z</updated>
    <id>tag:github.com,2023-12-06:/xaoyaoo/PyWxDump</id>
    <link href="https://github.com/xaoyaoo/PyWxDump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;获取微信账号信息(昵称/账号/手机/邮箱/数据库密钥/wxid)；PC微信数据库读取、解密脚本；聊天记录查看工具；聊天记录导出为html(包含语音图片)。支持多账户信息获取，支持所有微信版本。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;center&gt;&#xA;  PyWxDump&#xA; &lt;/center&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3-blue.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/xaoyaoo/pywxdump&#34; alt=&#34;GitHub code size in bytes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xaoyaoo/pywxdump/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xaoyaoo/PyWxDump.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xaoyaoo/PyWxDump.svg?sanitize=true&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/xaoyaoo/PyWxDump&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pywxdump/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pywxdump&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pywxdump/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/wheel/pywxdump&#34; alt=&#34;Wheel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/pywxdump&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/pywxdump&#34; alt=&#34;PyPI-Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/pywxdump&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;更新日志(点击展开)：&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;2023.12.03 增加分析聊天记录的功能，生成词云、绘制折线图等&lt;/li&gt; &#xA;  &lt;li&gt;2023.12.03 修复部分bug,更改获取wx文件夹方式 &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/34&#34;&gt;#34&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.12.01 为exe添加图标&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.30 优化命令行界面&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.29 添加异形wxid获取方式，添加用户路径自动获取，重建说明文档，对新手更友好&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.28 修改wxid获取方式，修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.27 解决相对导入包的问题,完善错误提示&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.25 聊天记录查看工具bootstrap更换国内cdn&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.22 添加all命令中解密错误数据日志写入文件,修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.16 增加聊天记录导出为html&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.15 添加test文件，添加自动构建可执行文件的脚本,添加版本描述&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.15 [v2.2.5变化较大]重构解密脚本的返回值，重构命令行参数&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.15 修复无法获取wxid的bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.14 修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.11 添加聊天记录解析，查看工具,修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.10 修复wxdump wx_db命令行参数错误 &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/19&#34;&gt;#19&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.08 增加3.9.8.15版本支持&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.31 修复3.9.2.*版本无法正常运行&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.28 添加自动发布到pypi的github action&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.28 修复3.9.5.91版本的偏移&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.24 add auto get bias addr ,not need input key or wx folder path.&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.17 add LICENSE&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.16 添加&#34;3.9.7.15&#34;版本的偏移&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/12&#34;&gt;#12&lt;/a&gt; ,感谢@&lt;a href=&#34;https://github.com/GentlemanII&#34;&gt;GentlemanII&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.15 将整个项目作为包安装，增加命令行统一操作&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.14 整体重构项目，优化代码，增加命令行统一操作&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.11 添加&#34;3.9.5.81&#34;版本的偏移&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/10&#34;&gt;#10&lt;/a&gt; ,感谢@&lt;a href=&#34;https://github.com/sv3nbeast&#34;&gt;sv3nbeast&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.09 获取key基址偏移可以根据微信文件夹获取，不需要输入key&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.09 优化代码，删减没必要代码，重新修改获取基址代码，加快运行速度（需要安装新的库 pymem）&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.07 修改获取基址内存搜索方式，防止进入死循环&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.07 增加了3.9.7.29版本的偏移地址&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.06 增加命令行解密数据库&lt;/li&gt; &#xA;  &lt;li&gt;2023.09.28 增加了数据库部分解析&lt;/li&gt; &#xA;  &lt;li&gt;2023.09.15 增加了3.9.7.25版本的偏移地址&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;更新计划&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.每个人聊天记录分析，生成词云。&lt;/li&gt; &#xA; &lt;li&gt;2.分析每个人每天的聊天数量，生成折线图（天-聊天数量）&lt;/li&gt; &#xA; &lt;li&gt;3.分析不同的人的月聊天数量，年聊天数量，生成折线图&lt;/li&gt; &#xA; &lt;li&gt;4.生成年度可视化报告&lt;/li&gt; &#xA; &lt;li&gt;5.创建GUI图形界面，方便使用&lt;/li&gt; &#xA; &lt;li&gt;6.查看群聊中具体发言成员的ID &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/31&#34;&gt;#31&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;7.增加数据库合并功能，方便查看&lt;/li&gt; &#xA; &lt;li&gt;8.增加企业微信的支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;注: 欢迎大家提供更多的想法，或者提供代码，一起完善这个项目。&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;贡献代码方法(点击展开)：&lt;/summary&gt; &#xA; &lt;p&gt;提交拉取请求（Pull Request），请按照以下步骤进行操作：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Fork 仓库：首先，在项目的 GitHub 页面上点击 &#34;Fork&#34; 按钮，将项目的代码仓库 fork 到你自己的 GitHub 账号下。&lt;/li&gt; &#xA;  &lt;li&gt;克隆仓库：在你自己的 GitHub 账号下找到 fork 后的项目，点击 &lt;code&gt;Clone or download&lt;/code&gt;按钮，获取仓库的 URL。然后在本地使用 Git 命令克隆仓库到你的电脑上：&lt;code&gt;git clone 仓库的URL&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;创建分支：在本地仓库中创建一个新的分支，用于进行你的修改：&lt;code&gt;git checkout -b 你的分支名&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;进行修改：在新创建的分支中进行你需要的修改，包括修复错误、改进现有功能或添加新功能。&lt;/li&gt; &#xA;  &lt;li&gt;提交修改：使用 &lt;code&gt;git add&lt;/code&gt; 和 &lt;code&gt;git commit&lt;/code&gt; 命令将修改提交到本地仓库中： &lt;pre&gt;&lt;code&gt;git add .&#xA;git commit -m &#34;提交信息&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;推送分支：使用 &lt;code&gt;git push&lt;/code&gt; 命令将你的本地分支推送到你的 GitHub 仓库中：&lt;code&gt;git push origin 你的分支名&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;提交拉取请求：在你的 GitHub 仓库页面上切换到你刚刚推送的分支，点击 &#34;New pull request&#34; 按钮，填写一些说明信息，然后点击 &lt;code&gt;Create pull request&lt;/code&gt; 按钮，即可提交拉取请求。&lt;/li&gt; &#xA;  &lt;li&gt;等待审核：等待项目维护者审核你的拉取请求，如果通过审核，你的修改将会被合并到项目的主分支中&lt;/li&gt; &#xA;  &lt;li&gt;接着你就可以在右边的&lt;code&gt;contributors&lt;/code&gt;中看到你的名字了。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;欢迎加入交流qq群：577704006 or 点击链接加入群聊&lt;a href=&#34;https://s.xaoyo.top/gOLUDl&#34;&gt;pywxdump功能交流&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s.xaoyo.top/gOLUDl&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/doc/qq.png&#34; alt=&#34;QQ群&#34; title=&#34;加入QQ群&#34; height=&#34;280&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;一、项目介绍&lt;/h1&gt; &#xA;&lt;h2&gt;1. 项目简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;PyWxDump&lt;/a&gt;是一款用于获取账号信息(昵称/账号/手机/邮箱/数据库密钥) 、解密数据库、查看聊天记录、备份导出聊天记录为html的工具。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;big&gt; 超级想要star，走过路过，帮忙点个&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xaoyaoo/PyWxDump.svg?style=social&amp;amp;label=Star&#34; alt=&#34;Star&#34;&gt;&lt;/a&gt; 呗，谢谢啦~&lt;/big&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. 功能介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）获取微信昵称、微信账号、微信手机号、微信邮箱、微信KEY的基址偏移&lt;/li&gt; &#xA; &lt;li&gt;（2）获取微信的微信昵称、微信账号、微信手机号、微信邮箱、微信KEY、微信原始ID（wxid_******）&lt;/li&gt; &#xA; &lt;li&gt;（3）获取微信文件夹路径&lt;/li&gt; &#xA; &lt;li&gt;（4）支持查看聊天记录查看&lt;/li&gt; &#xA; &lt;li&gt;（5）根据key解密微信数据库&lt;/li&gt; &#xA; &lt;li&gt;（6）提供数据库部分字段说明&lt;/li&gt; &#xA; &lt;li&gt;（7）支持微信多开场景，获取多用户信息等&lt;/li&gt; &#xA; &lt;li&gt;（8）微信需要登录状态才能获取数据库密钥&lt;/li&gt; &#xA; &lt;li&gt;（9）支持导出聊天记录为html,备份微信聊天记录,方便查看&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;版本差异&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;版本 &amp;lt; 3.7.0.30 只运行不登录能获取个人信息，登录后可以获取数据库密钥&lt;/li&gt; &#xA; &lt;li&gt;版本 &amp;gt; 3.7.0.30 只运行不登录不能获取个人信息，登录后都能获取&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;利用场景&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;钓鱼攻击(通过钓鱼控到的机器通常都是登录状态)&lt;/li&gt; &#xA; &lt;li&gt;渗透到运维机器(有些运维机器会日常登录自己的微信)&lt;/li&gt; &#xA; &lt;li&gt;某些工作需要取证(数据库需要拷贝到本地)&lt;/li&gt; &#xA; &lt;li&gt;自行备份(日常备份自己留存)&lt;/li&gt; &#xA; &lt;li&gt;等等...............&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3. 项目结构&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;PyWxDump&#xA;├─ pywxdump                        # 项目代码,存放各个模块&#xA;│  ├─ analyse                     # 解析数据库&#xA;│  │  └─ parse.py                     # 解析数据库脚本，可以解析语音、图片、聊天记录等&#xA;│  ├─ bias_addr                   # 获取偏移地址&#xA;│  │  └─ get_bias_addr.py             # 获取偏移地址脚本&#xA;│  ├─ decrypted                   # 解密数据库&#xA;│  │  ├─ decrypt.py                   # 解密数据库脚本&#xA;│  │  └─ get_wx_decrypted_db.py       # 直接读取当前登录微信的数据库，解密后保存到当前目录下的decrypted文件夹中&#xA;│  ├─ wx_info                     # 获取微信基本信息&#xA;│  │  ├─ get_wx_info.py               # 获取微信基本信息脚本&#xA;│  │  └─ get_wx_db.py                 # 获取本地所有的微信相关数据库&#xA;│  ├─ show_records                # 显示聊天记录&#xA;│  │  ├─ main_window.py               # 显示聊天记录的窗口&#xA;│  │  └─ templates                    # 显示聊天记录的html模板&#xA;│  ├─ command.py                  # 命令行入口&#xA;│  └─ version_list.json           # 微信版本列表 (十进制)按顺序代表：微信昵称、微信账号、微信手机号、微信邮箱（默认0）、微信KEY、微信原始ID（wxid_******）&#xA;├─ doc                        # 项目文档&#xA;│  ├─ python1.0_README.md         # python1.0版本的README&#xA;│  ├─ wx数据库简述.md               # wx数据库简述&#xA;│  └─ CE获取基址.md                 # CE获取基址&#xA;├─ README.md              &#xA;├─ setup.py                   # 安装脚本&#xA;└─ requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;4. 其他&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;PyWxDump&lt;/a&gt;是&lt;a href=&#34;https://github.com/AdminTest0/SharpWxDump&#34;&gt;SharpWxDump&lt;/a&gt; 的经过重构python语言版本，同时添加了一些新的功能。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;项目地址：&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;https://github.com/xaoyaoo/PyWxDump&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;目前只在windows下测试过，mac、linux下可能会存在问题。&lt;/li&gt; &#xA; &lt;li&gt;如发现&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/pywxdump/version_list.json&#34;&gt;version_list.json&lt;/a&gt;缺失或错误, 请提交&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;如发现bug或有改进意见, 请提交&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;如有其他想要的功能, 请提交&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;提交issues方法(点击展开)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/assets/37209452/22d15ea6-05d6-4f30-8b24-04a51a59d56d&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/assets/37209452/9bdc2961-694a-4104-a1c7-05403220c0fe&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/assets/37209452/be1d8913-5a6e-4fff-9fcd-00edb33d255b&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Star History(click to expand)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://star-history.com/#xaoyaoo/pywxdump&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=xaoyaoo/pywxdump&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;二、使用说明&lt;/h1&gt; &#xA;&lt;h2&gt;1. 安装&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 从pypi安装(安装稳定版)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U pywxdump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2 从源码安装(安装最新版)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U git+git://github.com/xaoyaoo/PyWxDump.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;或&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/xaoyaoo/PyWxDump.git&#xA;cd PyWxDump&#xA;python -m pip install -U .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;1.3 使用可执行文件exe&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;1.下载&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/releases&#34;&gt;release&lt;/a&gt;中的exe文件&lt;/li&gt; &#xA;  &lt;li&gt;2.或者自行打包，打包脚本见： &lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/tests/build_exe.py&#34;&gt;build_exe.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd tests&#xA;python build_exe.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;2. 使用&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 命令行&lt;/h3&gt; &#xA;&lt;p&gt;激活虚拟环境后（如果有的话），在项目根目录下运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wxdump 模式 [参数]&#xA;#  运行模式(mode):&#xA;#    bias      获取微信基址偏移&#xA;#    info      获取微信信息&#xA;#    db_path   获取微信文件夹路径&#xA;#    decrypt   解密微信数据库&#xA;#    dbshow    聊天记录查看&#xA;#    export    聊天记录导出为html&#xA;#    all       获取微信信息，解密微信数据库，查看聊天记录&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;示例&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开示例&lt;/summary&gt; &#xA; &lt;p&gt;以下是示例命令：&lt;/p&gt; &#xA; &lt;h5&gt;获取微信基址偏移&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump bias --mobile &amp;lt;手机号&amp;gt; --name &amp;lt;微信昵称&amp;gt; --account &amp;lt;微信账号&amp;gt; [--key &amp;lt;密钥&amp;gt;] [--db_path &amp;lt;已登录账号的微信文件夹路径&amp;gt;] [--version_list_path &amp;lt;微信版本偏移文件路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;获取微信信息&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump info [--version_list_path &amp;lt;微信版本偏移文件路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;获取微信文件夹路径&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump db_path [-r &amp;lt;需要的数据库名称&amp;gt;] [-wf &amp;lt;WeChat Files 路径&amp;gt;] [-id &amp;lt;wxid_&amp;gt;] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;解密微信数据库&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump decrypt -k &amp;lt;密钥&amp;gt; -i &amp;lt;数据库路径(目录or文件)&amp;gt; [-o &amp;lt;输出路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;查看聊天记录&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump dbshow -msg &amp;lt;解密后的 MSG.db 的路径&amp;gt; -micro &amp;lt;解密后的 MicroMsg.db 的路径&amp;gt; -media &amp;lt;解密后的 MediaMSG.db 的路径&amp;gt; [-fs &amp;lt;FileStorage 路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;导出聊天记录为 HTML&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump export -u &amp;lt;微信账号&amp;gt; -o &amp;lt;导出路径&amp;gt; -msg &amp;lt;解密后的 MSG.db 的路径&amp;gt; -micro &amp;lt;解密后的 MicroMsg.db 的路径&amp;gt; -media &amp;lt;解密后的 MediaMSG.db 的路径&amp;gt; [-fs &amp;lt;FileStorage 路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;获取微信信息、解密数据库、查看聊天记录，一条命令搞定，开放端口5000，浏览器访问查看聊天记录（支持局域网其他机器访问）&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;2.2 python API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;import调用示例&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开示例&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 单独使用各模块，返回值一般为字典，参数参考命令行&#xA;from pywxdump import *&#xA;&#xA;# ************************************************************************************************ #&#xA;# 获取微信基址偏移&#xA;args = {&#xA;    &#34;mode&#34;: &#34;bias&#34;,&#xA;    &#34;mobile&#34;: &#34;13800138000&#34;,  # 手机号&#xA;    &#34;name&#34;: &#34;微信昵称&#34;,  # 微信昵称&#xA;    &#34;account&#34;: &#34;微信账号&#34;,  # 微信账号&#xA;    &#34;key&#34;: &#34;密钥&#34;,  # 密钥（可选）&#xA;    &#34;db_path&#34;: &#34;已登录账号的微信文件夹路径&#34;,  # 微信文件夹路径（可选）&#xA;    &#34;version_list_path&#34;: &#34;微信版本偏移文件路径&#34;  # 微信版本偏移文件路径（可选）&#xA;}&#xA;bias_addr = BiasAddr(args[&#34;account&#34;], args[&#34;mobile&#34;], args[&#34;name&#34;], args[&#34;key&#34;], args[&#34;db_path&#34;])&#xA;result = bias_addr.run(True, args[&#34;version_list_path&#34;])&#xA;# ************************************************************************************************ #&#xA;# 获取微信信息&#xA;wx_info = read_info(VERSION_LIST, True)&#xA;&#xA;# 获取微信文件夹路径&#xA;args = {&#xA;    &#34;mode&#34;: &#34;db_path&#34;,&#xA;    &#34;require_list&#34;: &#34;all&#34;,  # 需要的数据库名称（可选）&#xA;    &#34;wx_files&#34;: &#34;WeChat Files&#34;,  # &#39;WeChat Files&#39;路径（可选）&#xA;    &#34;wxid&#34;: &#34;wxid_&#34;,  # wxid_，用于确认用户文件夹（可选）&#xA;}&#xA;user_dirs = get_wechat_db(args[&#34;require_list&#34;], args[&#34;wx_files&#34;], args[&#34;wxid&#34;], True)&#xA;# ************************************************************************************************ #&#xA;# 解密微信数据库&#xA;args = {&#xA;    &#34;mode&#34;: &#34;decrypt&#34;,&#xA;    &#34;key&#34;: &#34;密钥&#34;,  # 密钥&#xA;    &#34;db_path&#34;: &#34;数据库路径(目录or文件)&#34;,  # 数据库路径&#xA;    &#34;out_path&#34;: &#34;/path/to/decrypted&#34;  # 输出路径（必须是目录）[默认为当前路径下decrypted文件夹]&#xA;}&#xA;result = batch_decrypt(args[&#34;key&#34;], args[&#34;db_path&#34;], args[&#34;out_path&#34;], True)&#xA;# ************************************************************************************************ #&#xA;# 查看聊天记录&#xA;args = {&#xA;    &#34;mode&#34;: &#34;dbshow&#34;,&#xA;    &#34;msg_path&#34;: &#34;解密后的 MSG.db 的路径&#34;,  # 解密后的 MSG.db 的路径&#xA;    &#34;micro_path&#34;: &#34;解密后的 MicroMsg.db 的路径&#34;,  # 解密后的 MicroMsg.db 的路径&#xA;    &#34;media_path&#34;: &#34;解密后的 MediaMSG.db 的路径&#34;,  # 解密后的 MediaMSG.db 的路径&#xA;    &#34;filestorage_path&#34;: &#34;文件夹FileStorage的路径&#34;  # 文件夹 FileStorage 的路径（用于显示图片）&#xA;}&#xA;from flask import Flask, request, jsonify, render_template, g&#xA;import logging&#xA;&#xA;app = Flask(__name__, template_folder=&#39;./show_chat/templates&#39;)&#xA;app.logger.setLevel(logging.ERROR)&#xA;&#xA;&#xA;@app.before_request&#xA;def before_request():&#xA;    g.MSG_ALL_db_path = args[&#34;msg_path&#34;]&#xA;    g.MicroMsg_db_path = args[&#34;micro_path&#34;]&#xA;    g.MediaMSG_all_db_path = args[&#34;media_path&#34;]&#xA;    g.FileStorage_path = args[&#34;filestorage_path&#34;]&#xA;    g.USER_LIST = get_user_list(args[&#34;msg_path&#34;], args[&#34;micro_path&#34;])&#xA;&#xA;&#xA;app.register_blueprint(app_show_chat)&#xA;print(&#34;[+] 请使用浏览器访问 http://127.0.0.1:5000/ 查看聊天记录&#34;)&#xA;app.run(debug=False)&#xA;# ************************************************************************************************ #&#xA;# 导出聊天记录为 HTML&#xA;args = {&#xA;    &#34;mode&#34;: &#34;export&#34;,&#xA;    &#34;username&#34;: &#34;微信账号&#34;,  # 微信账号（聊天对象账号）&#xA;    &#34;outpath&#34;: &#34;/path/to/export&#34;,  # 导出路径&#xA;    &#34;msg_path&#34;: &#34;解密后的 MSG.db 的路径&#34;,  # 解密后的 MSG.db 的路径&#xA;    &#34;micro_path&#34;: &#34;解密后的 MicroMsg.db 的路径&#34;,  # 解密后的 MicroMsg.db 的路径&#xA;    &#34;media_path&#34;: &#34;解密后的 MediaMSG.db 的路径&#34;,  # 解密后的 MediaMSG.db 的路径&#xA;    &#34;filestorage_path&#34;: &#34;文件夹FileStorage的路径&#34;  # 文件夹 FileStorage 的路径（用于显示图片）&#xA;}&#xA;export(args[&#34;username&#34;], args[&#34;outpath&#34;], args[&#34;msg_path&#34;], args[&#34;micro_path&#34;], args[&#34;media_path&#34;],&#xA;       args[&#34;filestorage_path&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;更多使用方法参考&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/tests&#34;&gt;tests&lt;/a&gt;文件夹下的&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/tests/&#34;&gt;test_*.py&lt;/a&gt;文件&lt;/p&gt; &#xA;&lt;h3&gt;2.3 可执行文件exe&lt;/h3&gt; &#xA;&lt;p&gt;进入exe文件所在目录，运行： &lt;code&gt;wxdump.exe 模式 [参数]&lt;/code&gt;，方法同&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/#21-%E5%91%BD%E4%BB%A4%E8%A1%8C&#34;&gt;命令行&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.4 其他说明&lt;/h3&gt; &#xA;&lt;p&gt;【注】:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关于基址使用cheat engine获取，参考&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/doc/CE%E8%8E%B7%E5%8F%96%E5%9F%BA%E5%9D%80.md&#34;&gt;CE获取基址.md&lt;/a&gt;（该方法一般可用&lt;code&gt;wxdump bias&lt;/code&gt;命令代替，仅用作学习原理）&lt;/li&gt; &#xA; &lt;li&gt;关于数据库解析，参考&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/doc/wx%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E8%BF%B0.md&#34;&gt;wx数据库简述.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;三、免责声明（非常重要！！！！！！！）&lt;/h1&gt; &#xA;&lt;p&gt;本项目仅供学习交流使用，请勿用于非法用途，否则后果自负。&lt;/p&gt; &#xA;&lt;p&gt;您应该在下载保存，编译使用本项目的24小时内，删除本项目的源代码和（编译出的）程序。&lt;/p&gt; &#xA;&lt;p&gt;本项目仅允许在授权情况下对数据库进行备份，严禁用于非法目的，否则自行承担所有相关责任。&lt;/p&gt; &#xA;&lt;p&gt;下载、保存、进一步浏览源代码或者下载安装、编译使用本程序，表示你同意本警告，并承诺遵守它;&lt;/p&gt; &#xA;&lt;p&gt;请勿利用本项目的相关技术从事非法测试，如因此产生的一切不良后果与项目作者无关。&lt;/p&gt; &#xA;&lt;h1&gt;四、许可证&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;MIT License&#xA;&#xA;Copyright (c) 2023 xaoyaoo&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;PyWxDump is hosted at: https://github.com/xaoyaoo/PyWxDump&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/TaskWeaver</title>
    <updated>2023-12-06T01:25:23Z</updated>
    <id>tag:github.com,2023-12-06:/microsoft/TaskWeaver</id>
    <link href="https://github.com/microsoft/TaskWeaver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A code-first agent framework for seamlessly planning and executing data analytics tasks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TaskWeaver&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;strong&gt;code-first&lt;/strong&gt; agent framework for seamlessly planning and executing data analytics tasks. This innovative framework interprets user requests through coded snippets and efficiently coordinates a variety of plugins in the form of functions to execute data analytics tasks&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Highlighted Features&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Rich data structure&lt;/strong&gt; - TaskWeaver allows you to work with rich data structures in Python, such as DataFrames, instead of having to work with text strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Customized algorithms&lt;/strong&gt; - TaskWeaver allows you to encapsulate your own algorithms into plugins (in the form of Python functions), and orchestrate them to achieve complex tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Incorporating domain-specific knowledge&lt;/strong&gt; - TaskWeaver is designed to be easily incorporating domain-specific knowledge, such as the knowledge of execution flow, to improve the reliability of the AI copilot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Stateful conversation&lt;/strong&gt; - TaskWeaver is designed to support stateful conversation. It can remember the context of the conversation and leverage it to improve the user experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Code verification&lt;/strong&gt; - TaskWeaver is designed to verify the generated code before execution. It can detect potential issues in the generated code and provide suggestions to fix them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy to use&lt;/strong&gt; - TaskWeaver is designed to be easy to use. We provide a set of sample plugins and a tutorial to help you get started. Users can easily create their own plugins based on the sample plugins. TaskWeaver offers an open-box experience, allowing users to run a service immediately after installation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy to debug&lt;/strong&gt; - TaskWeaver is designed to be easy to debug. We have detailed logs to help you understand what is going on during calling the LLM, the code generation, and execution process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Security consideration&lt;/strong&gt; - TaskWeaver supports a basic session management to keep different users&#39; data separate. The code execution is separated into different processes in order not to interfere with each other.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy extension&lt;/strong&gt; - TaskWeaver is designed to be easily extended to accomplish more complex tasks. You can create multiple AI copilots to act in different roles, and orchestrate them to achieve complex tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;News&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2023-11-30] TaskWeaver is released on GitHub🎈.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.10 or above&lt;/li&gt; &#xA; &lt;li&gt;OpenAI (or Azure OpenAI) access with GPT-3.5 above models. However, it is strongly recommended to use the GPT-4, which is more stable.&lt;/li&gt; &#xA; &lt;li&gt;Other requirements can be found in the &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;OpenAI API had a major &lt;a href=&#34;https://github.com/openai/openai-python&#34;&gt;update&lt;/a&gt; from 0.xx to 1.xx in November 2023. Please make sure you are not using an old version because the API is not backward compatible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install TaskWeaver by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/microsoft/TaskWeaver.git&#xA;cd TaskWeaver&#xA;# install the requirements&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Project Directory&lt;/h3&gt; &#xA;&lt;p&gt;TaskWeaver runs as a process, you need to create a project directory to store plugins and configuration files. We provided a sample project directory in the &lt;code&gt;project&lt;/code&gt; folder. You can copy the &lt;code&gt;project&lt;/code&gt; folder to your workspace. A project directory typically contains the following files and folders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;📦project&#xA; ┣ 📜taskweaver_config.json # the configuration file for TaskWeaver&#xA; ┣ 📂plugins # the folder to store plugins&#xA; ┣ 📂planner_examples # the folder to store planner examples&#xA; ┣ 📂codeinterpreter_examples # the folder to store code interpreter examples&#xA; ┣ 📂sample_data # the folder to store sample data used for evaluations&#xA; ┣ 📂logs # the folder to store logs, will be generated after program starts&#xA; ┗ 📂workspace # the directory stores session data， will be generated after program starts&#xA;    ┗ 📂 session_id &#xA;      ┣ 📂ces # the folder used by the code execution service&#xA;      ┗ 📂cwd # the current working directory to run the generated code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OpenAI Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Before running TaskWeaver, you need to provide your OpenAI API key and other necessary information. You can do this by editing the &lt;code&gt;taskweaver_config.json&lt;/code&gt; file. If you are using Azure OpenAI, you need to set the following parameters in the &lt;code&gt;taskweaver_config.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;h4&gt;Azure OpenAI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#34;llm.api_base&#34;: &#34;https://xxx.openai.azure.com/&#34;,&#xA;&#34;llm.api_key&#34;: &#34;your_api_key&#34;,&#xA;&#34;llm.api_type&#34;: &#34;azure&#34;,&#xA;&#34;llm.api_version&#34;: &#34;the api version&#34;,&#xA;&#34;llm.model&#34;: &#34;the model name, e.g., gpt-4&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenAI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#34;llm.api_key&#34;: &#34;the api key&#34;,&#xA;&#34;llm.model&#34;: &#34;the model name, e.g., gpt-4&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 Only the latest OpenAI API supports the &lt;code&gt;json_object&lt;/code&gt; response format. If you are using an older version of OpenAI API, you need to set the &lt;code&gt;llm.response_format&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;More configuration options can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TaskWeaver/main/docs/configuration.md&#34;&gt;configuration documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start TaskWeaver&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# assume you are in the taskweaver folder&#xA;# -p is the path to the project directory&#xA;python -m taskweaver -p ./project/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the TaskWeaver process and you can interact with it through the command line interface. If everything goes well, you will see the following prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=========================================================&#xA; _____         _     _       __&#xA;|_   _|_ _ ___| | _ | |     / /__  ____ __   _____  _____&#xA;  | |/ _` / __| |/ /| | /| / / _ \/ __ `/ | / / _ \/ ___/&#xA;  | | (_| \__ \   &amp;lt; | |/ |/ /  __/ /_/ /| |/ /  __/ /&#xA;  |_|\__,_|___/_|\_\|__/|__/\___/\__,_/ |___/\___/_/&#xA;=========================================================&#xA;TaskWeaver: I am TaskWeaver, an AI assistant. To get started, could you please enter your request?&#xA;Human: ___&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Two Walkthrough Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Example 1: Pull data from a database and apply an anomaly detection algorithm&lt;/h4&gt; &#xA;&lt;p&gt;In this example, we will show you how to use TaskWeaver to pull data from a database and apply an anomaly detection algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/TaskWeaver/assets/7489260/9f854acf-f2bf-4566-9d16-f84e915d0f4e&#34;&gt;Anomaly Detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to follow this example, you need to configure the &lt;code&gt;sql_pull_data&lt;/code&gt; plugin in the &lt;code&gt;project/plugins/sql_pull_data.yaml&lt;/code&gt; file. You need to provide the following information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api_type: azure or openai&#xA;api_base: ...&#xA;api_key: ...&#xA;api_version: ...&#xA;deployment_name: ...&#xA;sqlite_db_path: sqlite:///../../../sample_data/anomaly_detection.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;sql_pull_data&lt;/code&gt; plugin is a plugin that pulls data from a database. It takes a natural language request as input and returns a DataFrame as output.&lt;/p&gt; &#xA;&lt;p&gt;This plugin is implemented based on &lt;a href=&#34;https://www.langchain.com/&#34;&gt;Langchain&lt;/a&gt;. If you want to follow this example, you need to install the Langchain package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install langchain&#xA;pip install tabulate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example 2: Forecast QQQ&#39;s price in the next week&lt;/h4&gt; &#xA;&lt;p&gt;In this example, we will show you how to use TaskWeaver to forecast QQQ&#39;s price in the next week using the ARIMA algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/TaskWeaver/assets/7489260/c2b09615-52d8-491f-bbbf-e86ba282e59a&#34;&gt;Nasdaq 100 Index Price Forecasting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to follow this example, you need to you have two requirements installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install yfinance&#xA;pip install statsmodels&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples, please refer to our &lt;a href=&#34;http://export.arxiv.org/abs/2311.17541&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 The planning of TaskWeaver are based on the LLM model. Therefore, if you want to repeat the examples, the execution process may be different from what you see in the videos. Typically, more concrete prompts will help the model to generate better plans and code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to use TaskWeaver in your project&lt;/h2&gt; &#xA;&lt;h3&gt;Using TaskWeaver as a library&lt;/h3&gt; &#xA;&lt;p&gt;After cloning the TaskWeaver repository, you can install TaskWeaver as a library by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# clone the repository&#xA;cd TaskWeaver&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can follow the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TaskWeaver/main/docs/taskweaver_as_a_lib.md&#34;&gt;documentation&lt;/a&gt; to use TaskWeaver in your code.&lt;/p&gt; &#xA;&lt;h3&gt;Using TaskWeaver as a service&lt;/h3&gt; &#xA;&lt;p&gt;TaskWeaver can be used as a service that can be called by other programs. More details are TBD.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing TaskWeaver&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to customize TaskWeaver: creating plugins and creating examples.&lt;/p&gt; &#xA;&lt;h3&gt;Creating Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Since TaskWeaver can already perform some basic tasks, you can create plugins to extend its capabilities. A plugin is a python function that takes a set of arguments and returns a set of results.&lt;/p&gt; &#xA;&lt;p&gt;Typically, you only need to write a plugin in the following example scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to encapsulate your own algorithm into a plugin.&lt;/li&gt; &#xA; &lt;li&gt;You want to import a python package that is not supported by TaskWeaver.&lt;/li&gt; &#xA; &lt;li&gt;You want to connect to an external data source to pull data.&lt;/li&gt; &#xA; &lt;li&gt;You want to query a web API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TaskWeaver/main/docs/plugin.md&#34;&gt;plugin documentation&lt;/a&gt; for more details. Otherwise, you can leverage TaskWeaver&#39;s code generation capability to perform tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Creating Examples&lt;/h3&gt; &#xA;&lt;p&gt;The purpose of examples is to help LLMs understand how to perform tasks especially when the tasks are complex and need domain-specific knowledge.&lt;/p&gt; &#xA;&lt;p&gt;There are two types of examples: (1) planning examples and (2) code interpreter examples. Planning examples are used to demonstrate how to use TaskWeaver to plan for a specific task. Code generation examples are used to demonstrate how to generate code or orchestrate plugins to perform a specific task.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TaskWeaver/main/docs/example.md&#34;&gt;example documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Our paper could be found &lt;a href=&#34;http://export.arxiv.org/abs/2311.17541&#34;&gt;here&lt;/a&gt;. If you use TaskWeaver in your research, please cite our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{taskweaver,&#xA;  title={TaskWeaver: A Code-First Agent Framework},&#xA;  author={Bo Qiao, Liqun Li, Xu Zhang, Shilin He, Yu Kang, Chaoyun Zhang, Fangkai Yang, Hang Dong, Jue Zhang, Lu Wang, Minghua Ma, Pu Zhao, Si Qin, Xiaoting Qin, Chao Du, Yong Xu, Qingwei Lin, Saravan Rajmohan, Dongmei Zhang},&#xA;  journal={arXiv preprint arXiv:2311.17541},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
</feed>