<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-19T01:30:56Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SHI-Labs/Versatile-Diffusion</title>
    <updated>2022-11-19T01:30:56Z</updated>
    <id>tag:github.com,2022-11-19:/SHI-Labs/Versatile-Diffusion</id>
    <link href="https://github.com/SHI-Labs/Versatile-Diffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Versatile Diffusion: Text, Images and Variations All in One Diffusion Model, 2022&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Versatile Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/shi-labs/Versatile-Diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Huggingface%20Space-cyan.svg?sanitize=true&#34; alt=&#34;Huggingface space&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pytorch.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Framework-PyTorch-orange.svg?sanitize=true&#34; alt=&#34;Framework: PyTorch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo hosts the official implementary of:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ifp-uiuc.github.io/&#34;&gt;Xingqian Xu&lt;/a&gt;, Atlas Wang, Eric Zhang, Kai Wang, and &lt;a href=&#34;https://www.humphreyshi.com/home&#34;&gt;Humphrey Shi&lt;/a&gt;, &lt;strong&gt;Versatile Diffusion: Text, Images and Variations All in One Diffusion Model&lt;/strong&gt;, &lt;a href=&#34;https://arxiv.org/abs/2211.08332&#34;&gt;Paper arXiv Link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2022.11.16]: Our demo is up and running on &lt;a href=&#34;https://huggingface.co/spaces/shi-labs/Versatile-Diffusion&#34;&gt;🤗HuggingFace&lt;/a&gt;!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2022.11.14]: Part of our evaluation code and models are released!&lt;/li&gt; &#xA; &lt;li&gt;[2022.11.12]: Repo initiated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We built &lt;strong&gt;Versatile Diffusion (VD), the first unified multi-flow multimodal diffusion framework&lt;/strong&gt;, as a step towards &lt;strong&gt;Universal Generative AI&lt;/strong&gt;. Versatile Diffusion can natively support image-to-text, image-variation, text-to-image, and text-variation, and can be further extended to other applications such as semantic-style disentanglement, image-text dual-guided generation, latent image-to-text-to-image editing, and more. Future versions will support more modalities such as speech, music, video and 3D.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/teaser.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Network and Framework&lt;/h2&gt; &#xA;&lt;p&gt;One single flow of Versatile Diffusion contains a VAE, a diffuser, and a context encoder, and thus handles one task (e.g., text-to-image) under one data type (e.g., image) and one context type (e.g., text). The multi-flow structure of Versatile Diffusion shows in the following diagram:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/VD_framework.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;According to Versatile Diffusion, we further proposed a generalized multi-flow multimodal framework with VAEs, context encoders, and diffusers containing three layers (i.e., global, data, and context layers). To involve a new multimodal task in this framework, we bring out the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The design of the core diffuser should contain shared global layers, swappable data, and context layers that will be correspondingly activated based on data and context types.&lt;/li&gt; &#xA; &lt;li&gt;The choice of VAEs should smoothly map data onto highly interpretable latent spaces.&lt;/li&gt; &#xA; &lt;li&gt;The choice of context encoders should jointly minimize the cross-modal statistical distance on all supported content types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/qcompare1.png&#34; width=&#34;99%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/qcompare2.png&#34; width=&#34;99%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SHI-Labs/Versatile-Diffusion/master/assets/figures/qcompare3.png&#34; width=&#34;99%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;We use Laion2B-en with customized data filters as our main dataset. Since Laion2B is very large and typical training is less than one epoch, we usually do not need to download the complete dataset for training. Same story for VDs.&lt;/p&gt; &#xA;&lt;p&gt;Directory of Laion2B for our code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── data&#xA;│&amp;nbsp;&amp;nbsp; └── laion2b&#xA;│&amp;nbsp;&amp;nbsp;     └── data&#xA;│    &amp;nbsp;&amp;nbsp;     └── 00000.tar&#xA;│    &amp;nbsp;&amp;nbsp;     └── 00000.parquet&#xA;│    &amp;nbsp;&amp;nbsp;     └── 00000_stats.jsom_&#xA;│    &amp;nbsp;&amp;nbsp;     └── 00001.tar&#xA;│    &amp;nbsp;&amp;nbsp;     └── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These compressed data are generated with img2dataset API &lt;a href=&#34;https://github.com/rom1504/img2dataset&#34;&gt;official github link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n versatile-diffusion python=3.8&#xA;conda activate versatile-diffusion&#xA;conda install pytorch==1.12.1 torchvision=0.13.1 -c pytorch&#xA;pip install -r requirement.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pretrained models&lt;/h2&gt; &#xA;&lt;p&gt;All useful pretrained models can be downloaded from this &lt;a href=&#34;https://drive.google.com/drive/folders/1SloRnOO9UnonfvubPWfw0uFpLco_2JvH?usp=sharing&#34;&gt;link&lt;/a&gt;. The pretrained folder should include the following files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── pretrained&#xA;│&amp;nbsp;&amp;nbsp; └── kl-f8.pth&#xA;│&amp;nbsp;&amp;nbsp; └── optimus-vae.pth&#xA;│   └── sd-v1-4.pth&#xA;│   └── sd-variation-ema.pth&#xA;│   └── vd-dc.pth&#xA;│   └── vd-official.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Here are the one-line shell commands to evaluate SD baselines with multiple GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --config sd_eval --gpu 0 1 2 3 4 5 6 7 --eval 99999&#xA;python main.py --config sd_variation_eval --gpu 0 1 2 3 4 5 6 7 --eval 99999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are the one-line shell commands to evaluate VD models with multiple GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --config vd_dc_eval --gpu 0 1 2 3 4 5 6 7 --eval 99999&#xA;python main.py --config vd_official_eval --gpu 0 1 2 3 4 5 6 7 --eval 99999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All corresponding evaluation configs can be found in &lt;code&gt;./configs/experiment&lt;/code&gt;. There are useful information in the config. You can easy customized it and run your own batched evaluations.&lt;/p&gt; &#xA;&lt;p&gt;For the commands above, you also need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;./pretrained&lt;/code&gt; and move all downloaded pretrained models in it.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;./log/sd_nodataset/99999_eval&lt;/code&gt; for baseline evaluations on Stable Diffusion&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;./log/vd_nodataset/99999_eval&lt;/code&gt; for evaluations on Versatile Diffusion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{xu2022versatile,&#xA;&#x9;title        = {Versatile Diffusion: Text, Images and Variations All in One Diffusion Model},&#xA;&#x9;author       = {Xingqian Xu, Zhangyang Wang, Eric Zhang, Kai Wang, Humphrey Shi},&#xA;&#x9;year         = 2022,&#xA;&#x9;url          = {https://arxiv.org/abs/2211.08332},&#xA;&#x9;eprint       = {2211.08332},&#xA;&#x9;archiveprefix = {arXiv},&#xA;&#x9;primaryclass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Part of the codes reorganizes/reimplements code from the following repositories: &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;LDM official Github&lt;/a&gt;, which also oriented from &lt;a href=&#34;https://github.com/lucidrains/denoising-diffusion-pytorch&#34;&gt;DDPM official Github&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iranxray/hope</title>
    <updated>2022-11-19T01:30:56Z</updated>
    <id>tag:github.com,2022-11-19:/iranxray/hope</id>
    <link href="https://github.com/iranxray/hope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;پروژه امید&lt;/h1&gt; &#xA;&lt;p&gt;ما در پروژه امید خواهان فراهم آوردن اینترنت آزاد برای همه ایران هستیم. هدف ما ساده‌سازی و همگانی کردن دانش عبور از فیلترینگ جمهوری اسلامی است. اینجا محفلی است برای به اشتراک گذاری تکنولوژی‌هایی که برای عبور از فیلترینگ حاکمیت ایران موثر هستند. هویت ما هیچگاه مشخص نخواهد شد و تا روز آزادی تلاش‌مان را برای گسترش اینترنت آزاد در ایران ادامه خواهیم داد.&lt;/p&gt; &#xA;&lt;p&gt;از همه متخصصین تقاضا می‌کنیم که با مشارکت در این repo دانش خود را در زمینه عبور از فیلترینگ با همه به اشتراک بگذارند.&lt;/p&gt; &#xA;&lt;h1&gt;اگر عجله دارید&lt;/h1&gt; &#xA;&lt;p&gt;در قسمت‌های بعدی توضیحات به نسبت کاملی در مورد تکنولوژی فیلترینگ در ایران ارائه شده است اما اگه عجله دارید خلاصه‌اش می‌شود اینکه جمهوری اسلامی سیستم فیلترینگ چینی GFW را استفاده می‌کند. در مقابل، ما هم در ایران از روش‌هایی که گروه‌های مقاومت چینی ابداع کرده‌اند بهره می‌گیریم تا سیستم فیلترینگ را دور بزنیم. به لینک‌های زیر رجوع کنید تا نحوه نصب و راه‌اندازی تکنولوژی های عبور از فیلترینگ را بیاموزید.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;گام اول &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/buy-server.md&#34;&gt;خرید یک server‌ لینوکسی&lt;/a&gt; می‌باشد. در مقاله &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/buy-server-vultr.md&#34;&gt;خرید از Vultr&lt;/a&gt; توضیح داده‌ایم که چطور با ده دلار می‌توانیم سرور مناسب را خریداری کنیم.&lt;/li&gt; &#xA; &lt;li&gt;گام دوم &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/install-xui.md&#34;&gt;نصب Xray&lt;/a&gt; بر روی یک سیستم لینوکسی است.&lt;/li&gt; &#xA; &lt;li&gt;گام سوم، &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/create-trojan.md&#34;&gt;راه اندازی Trojan&lt;/a&gt; و یا &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/create-vless.md&#34;&gt;راه اندازی VLESS&lt;/a&gt; می‌باشد.&lt;/li&gt; &#xA; &lt;li&gt;گام چهارم، &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/install-android.md&#34;&gt;نصب کلاینت بر روی اندروید&lt;/a&gt; و یا &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/install-iphone.md&#34;&gt;نصب کلاینت بر روی آیفون&lt;/a&gt; و یا &lt;a href=&#34;&#34;&gt;نصب کلاینت بر روی ویندوز&lt;/a&gt; می‌باشد.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;دیواره آتش فیلترینگ&lt;/h1&gt; &#xA;&lt;p&gt;سامانه فیلترینگی که در ایران استفاده می‌شود، در واقع یک سیستم چینی است موسوم به &lt;a href=&#34;https://en.wikipedia.org/wiki/Great_Firewall&#34;&gt;Great Firewall یا GFW&lt;/a&gt;. نام این هیولا، اشاره به دیوار باستانی چین دارد که بر دور کشور کشیده شد تا از دشمنانش مصون بماند. این سامانه در سال ۱۹۹۸ کلید ‌می‌خورد و ساخت فاز اولیه تا سال ۲۰۰۶ به طول می‌انجامد. به لطف سرمایه‌گذاری عظیم حزب کمونیست چین، سامانه GFW هر سال به روش‌های پیچیده‌تری برای فیلترینگ هوشمند تجهیز می‌شود و می‌تواند با جزییات بسیار بالا ترافیک عظیم جمعیت چند میلیادری چین را در لحظه مانیتور کرده، ترافیک مشکوک را ببندد و یا به مقامات به صورت خودکار گزارش ارسال کند. این دیواره آتش در واقع اژدهای هفت‌سری است که در دروازه‌های اینرنت ما هم ایستاده و از چرخش آزاد داده‌ها جلوگیری می‌کند.&lt;/p&gt; &#xA;&lt;p&gt;اما هر جا سیاهی باشد، جنگجویان روشنایی هم خواهند بود. داستان الهام‌بخش و البته کمترشنیده برای ما ایرانی‌ها این هست که متخصصان امنیت در تمام این سال‌ها در حال نبردی پیدا و پنهان با حزب کمونیست چین بوده‌اند. آن ها با ابداع روش‌های نوین در دور زدن GFW همواره توانسته‌اند دروازه‌های جهان آزاد را به روی مردم چین باز نگه دارند. هر بار حزب کمونیست سعی می‌کند با تقویت الگوریتم‌های GFW روش‌های ابداعی گروه مقاومت را بی‌اثر کند اما هر بار گروه مقاومت با روشی جدیدتر باز‌ می‌گردد. دانستن این نکات برای شهروند ایرانی از آن جهت حائز اهمیت هست که ما می‌توانیم از تمام این گنجینه‌ای که توسط متخصصان چینی و غربی برای فریب GFW فراهم شده استفاده کنیم تا دسترسی به اینترنت آزاد را برای مردم ایران به ارمغان بیاوریم.&lt;/p&gt; &#xA;&lt;p&gt;شاید گفتن این نکته خالی از لطف نباشد که فیلترشکن‌هایی که در سال‌های گذشته در ایران رواج داشتند، مثل Freegate، Lantern، Ultrasurf و Psiphon همگی برنامه‌هایی بودند که توسط متخصصان برای عبور از دیواره آتش چینی طراحی شده بودند و برای همین هم در دور زدن سامانه فیلترینگ جمهوری اسلامی موثر عمل می‌کردند. حتی خیلی از این نرم‌افزار‌ها به طور پیشفرض از الفبای چینی استفاده می‌کردند، چون اساسا برای مخاطب چینی پیاده‌سازی شده بودند. اما به هر روی، همین نرم‌افزار‌ها در سال ۸۸ و پس از آن از ابزارهای اصلی مردم ایران برای دور زدن فیلترینگ جمهوری اسلامی بوده اند.&lt;/p&gt; &#xA;&lt;p&gt;نحوه کارکرد GFW به طور دقیق مشخص نیست. مقاله‌های آکادمیک متعددی سعی کرده‌اند تا با آزمایش‌های متعدد از درون شبکه داخلی چین بتوانند از روی بروز رفتار بیرونی GFW به جزییات درونی سیستم آگاهی پیدا بکنند. از خلال این آزمایش‌ها، درک عظیمی نسبت به کارکرد این هیولا به دست آمده و منجر به تولد روش‌های موثر عبور از فیلترینگ هم شده. اما در این بازی موش و گربه، همواره GFW هم تلاش کرده تا با پیچیده‌تر کردن مکانیزم‌های فیلترینگ روش‌های دور زدن را یکی بعد از دیگری ابطال کند. برای همین، روشی که سال‌ها پیش موثر بوده، دیگر کارا نیست. روشی هم که امروز موثر هست، احتمالا فردا بسته خواهد شد. چیزی که به ما امید می‌دهد این هست که با همه دشواری‌ها در این تعقیب و گریز، بهترین و &lt;a href=&#34;https://gfw.report/&#34;&gt;فداکارترین متخصصان&lt;/a&gt; هر بار راهی پیدا خواهند کرد تا یک قدم جلوتر از سرکوب‌گران آزادی قرار بگیرند و مجراهای اطلاعاتی هیچ‌گاه به طور کامل بسته نخواهد بود. مقالات زیر درک دقیق‌تری از نحوه کارکرد GFW به ما می‌دهند.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.tufts.edu/comp/116/archive/fall2016/ctang.pdf&#34;&gt;تحلیل عمقی از ساختار GFW، تهیه شده در سال ۲۰۱۶&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://therecord.media/academics-discover-hidden-layer-in-chinas-great-firewall/&#34;&gt;کشف گروه تحقیقی دانشگاه Maryland در مورد چگونگی فیلتر کردن ترافیک HTTPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://therecord.media/academics-discover-hidden-layer-in-chinas-great-firewall/&#34;&gt;مقاله تحقیقی دانشگاه تورنتو در مورد تغییرات شبکه GFW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gfw.report/blog/gfw_esni_blocking/en/&#34;&gt;تحقیقی که مشخص می‌کند GFW ترافیک TSL 1.3 را بدون استثنا فیلتر می‌کند&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;مکانیزم فیلترینگ در GFW&lt;/h2&gt; &#xA;&lt;p&gt;مهم‌ترین ابزارهای فیلترینگ در GFW به شرح زیر هستند.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;حمله DNS Spoofing&lt;/li&gt; &#xA; &lt;li&gt;بستن IP&lt;/li&gt; &#xA; &lt;li&gt;‌بررسی حضور کلیدواژه‌های حساس&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Deep_packet_inspection&#34;&gt;تکنیک Deep Packet Inspection&lt;/a&gt;: این روز‌ها قسمتی اعظمی از ترافیک اینترنت بر روی پروتکل ایمن HTTPS منتقل می‌شود. مزیت این پروتکل این می‌باشد که تمامی داده‌های ارسالی و دریافتی کاربر را رمز می‌کند. در نتیجه، دیگر GFW قادر به مشاهده محتویات داده‌های کاربر نیست. مثلا، به علت اینکه اپلیکیشن Twitter تماما از HTTPS‌ استفاده می کند، GFW هیچ راهی نخواهد داشت که بفهمد شما بر روی این پلتفرم چه فعالیتی انجام می‌دهید. دقیقا همینجاست که تکنیک Deep Packet Inspection به کمک GFW می‌آید. این تکنیک پیشرفته به GFW این امکان را می‌دهد که با استفاده از الگوهای مدرن Machine Learning داده‌های رمزنگاری شده را اسکن کند تا به یک تحلیل کلی راجع به داده کاربر دست پیدا کند. اگر خروجی این تحلیل این باشد که این داده غیرمجاز است، آنگاه از انتقال داده جلوگیری می‌شود. تاکید می‌کنیم، که این روش راهی برای پی بردن به داده کاربر نیست. فقط براساس حدس‌هایی می‌تواند داده را به مجاز و غیرمجاز تقسیم می‌کند.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;مکانیزم‌های دور زدن GFW&lt;/h1&gt; &#xA;&lt;p&gt;در این قسمت روش‌هایی را که برای عبور از دیواره آتش GFW وجود دارد به طور خلاصه مرور می ‌کنیم. پیش از بررسی، روش‌های مختلف لازم هست این نکته را ذکر کنیم که پروتکل‌های VPN به آسانی توسط GFW شناسایی می‌شوند. پروتکل‌هایی که ما در ادامه تشریح خواهیم کرد، از نظر علمی و فنی VPN نمی‌باشند، هر چند که همه روش‌های عبور از فیلترینگ در عامه به عنوان VPN شناخته می شود.&lt;/p&gt; &#xA;&lt;p&gt;البته بر روی اینترنت &lt;a href=&#34;https://therecord.media/academics-discover-hidden-layer-in-chinas-great-firewall/&#34;&gt;گزارش‌هایی&lt;/a&gt; هست که برخی VPN های تجاری مانند ExpressVPN به خوبی در چین کار می‌کنند. دلیل این امر چندان مشخص نیست. در ایران هم ExpressVPN از معدود روش‌های تجاری است که می‌توانید استفاده کنید.&lt;/p&gt; &#xA;&lt;p&gt;همه روش هایی که در زیر توضیح داده می‌شوند از یک ایده کلی پیروی می‌کنند. در همه این‌ها راه حل مبتنی بر این ایده پیاده سازی شده که بتواند مکانیزم Deep Packet Inspection تعبیه شده در GFW را فریب بدهد. به طور دقیق‌تر، روش‌های ذیل با تغییر ظاهر داده‌های کاربر سعی می‌کنند به GFW تلقین کنند که داده کاربر مجاز می‌باشد. شبیه این که اگر پلیس دنبال شخصی باشد، شما شاید با گریم و تغییر ظاهر مطنون بتوانید پلیس را فریب دهید. این روش‌ها بر این فرض استوار شده‌اند که GFW فقط وقتی مانع از خروج داده می‌شود که با درصد بسیار بالایی نسبت به غیرمجاز بودن آن اطمینان داشته باشد. از آنجایی که روش Deep Packet Inspection مبتنی بر حدس و گمان می‌باشد، قطع داده‌ها بدون اطمینان بسیار بالا می‌تواند منجر به قطع کلی ارتباط با خارج شود. این هزینه بسیار هنگفتی را به کشور وارد می‌کند و حزب کمونیست چین مایل به قرار گرفتن در این سناریو نیست.&lt;/p&gt; &#xA;&lt;h2&gt;پروتکل Shadowsocks (غیر ایمن &lt;span&gt;💀&lt;/span&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;این پروژه در سال ۲۰۱۲ شروع به کار کرد تا یکی از اولین پروتکل‌هایی باشد که در چین برای بالا پریدن از دیوار GFW طراحی می‌شود. علی‌رغم موفقیت بالا، برنامه‌نویس ناشناس این پروژه با شناسه clowwindy به دلایل نامعلومی مجبور شد که این پروژه را متوقف کند. امروز استفاده از Shadaowsocks به هیچ عنوان توصیه نمی‌شود، چون GFW به حدی توانمند شده که ترافیک این پروکسی دیگر از چشم‌هایش پنهان نماند. این امر می‌تواند خطر امنیتی برای مصرف‌کننده به همراه داشته باشد. نسل دوم این پروژه به نام ShadowsocksR تعدادی از مشکلات امنیتی نسل اول را برطرف کرده ولی حتی با این حال استفاده از آن توصیه نمی‌شود. از مزایای مهم Shadowsocks این می‌باشد که می‌تواند بر روی هر دو بستر انتقال TCP و UDP کار کند.&lt;/p&gt; &#xA;&lt;h2&gt;پلتفرم V2Ray&lt;/h2&gt; &#xA;&lt;p&gt;در سال ۲۰۱۵ این &lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;پروژه‌&lt;/a&gt; توسط گروه ناشناس Project V معرفی می‌شود تا جایگزینی برای Shadowsocks باشد. برخلاف Shadowsocks، این پروژه صرفا یک پروتکل برای دور زدن GFW نیست بلکه یک پلتفرم است. پلتفرم بودن به این معنا است که این پروژه محدود به یک پروتکل مشخص نیست بلکه این امکان را فراهم می‌آورد که پروتکل‌های مختلف به صورت plug and play به سیستم اضافه بشوند. این پروژه با این ذهنیت متولد شد که دیر یا زود GFW در شکار هر پروتکلی موفق خواهد شد، پس ما باید پلتفرمی طراحی کنیم که این امکان را فراهم کند تا متخصصین بتوانند به آسانی پروتکل‌های جدید‌شان را به پلتفرم V2Ray اضافه کنند. این چابکی به V2Ray اجازه می‌داد تا به سرعت تغییرات جدید را در اختیار همگان قرار بگذارد.&lt;/p&gt; &#xA;&lt;p&gt;با استفاده از این پلتفرم می‌توانیم پروتکل‌هایی نظیر SOCKS4، SOCKS5، ShadowSocks، پروکسی تلگرام MTProto و VMESS را برای کاربران بسازیم.&lt;/p&gt; &#xA;&lt;h3&gt;پروتکل VMESS (غیر ایمن &lt;span&gt;💀&lt;/span&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;این پروتکل در سال ۲۰۱۵ توسط گروه Project V طراحی شد تا به عنوان جایگزین Shadowsocks در پلتفرم V2Ray مورد استفاده قرار بگیرد. گاهی V2Ray و VMESS به جای یکدیگر در متون استفاده می‌شوند اما لازم است تاکید کنیم که این اشتباهی مصطلح هست. یکی پلتفرم هست و دیگری پروتکل. در زمان تولد، VMESS قادر بود تا با تغییر محتویات بسته‌های داده از اسکن Deep Packet Inspection که توسط GFW انجام می‌گرفت فرار کند. اما این پروتکل از سال ۲۰۲۰ به این سو دیگر &lt;a href=&#34;https://github.com/net4people/bbs/issues/36#issuecomment-644929739&#34;&gt;امن در نظر گرفته نمی‌شود&lt;/a&gt; و ترافیک آن توسط GFW قابل شناسایی است. در &lt;a href=&#34;https://gfw.report/blog/v2ray_weaknesses/en/&#34;&gt;مقاله‌ای ضعف‌های امنیتی VMESS&lt;/a&gt; به تشریح آورده شده اند.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; به هر روی، ویژگی‌های جالب این پروتکل به شرح زیر می‌باشد.&lt;/p&gt; &#xA;&lt;p&gt;۱. رمزنگاری یا Encryption: پروتکل VMESS از یک روش رمزنگاری استفاده می‌کند تا داده‌ها را از GFW پنهان نگه دارد.&lt;/p&gt; &#xA;&lt;p&gt;۲. در این پروتکل، کاربران نیازی به استفاده از پسورد ندارند تا بتوانند به server‌ متصل شوند. در VMESS به هر کاربر یک شناسه کاربری داده می‌شود که همان و فقط همان برای اتصال به server کافی است.&lt;/p&gt; &#xA;&lt;p&gt;۳. پروتکل VMESS الزام می‌کند که زمان سیستم کاربر و server بیشتر از ۹۰ ثانیه اختلاف نداشته باشند. اگر اختلاف زمانی در محدوده مجاز نباشد، آنگاه پروتکل تمام درخواست‌های کاربر را قطع خواهد کرد. این پروتکل، از زمان برای رمزنگاری داده‌ها استفاده می‌کند.&lt;/p&gt; &#xA;&lt;p&gt;۴. پروتکل VMESS برای نقل و انتقال داده از لایه TCP استفاده می‌کند. ترافیکی که به UDP نیاز داشته باشد با تکنیک UDP over TCP منتقل خواهد شد. این موضوع یکی از تفاوت‌ها با Shadowsocks می‌باشد که قادر بود بر روی هر دو بستر TCP و UDP داده‌ها را منتقل کند.&lt;/p&gt; &#xA;&lt;h2&gt;پلتفرم Xray&lt;/h2&gt; &#xA;&lt;p&gt;در نوامبر ۲۰۲۰، گروهی ناشناس به نام Project X پروژه V2Ray را fork می‌کنند تا با رفع یک سری کاستی‌ها نسخه‌ خودشان به نام &lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;پروژه Xray&lt;/a&gt; را عرضه کنند. در واقع، پلتفرم Xray superset پلتفرم V2Ray می‌باشد که با داشتن همه خوبی‌های آن و رفع نواقصش تبدیل به پلتفرم غالب شده است. از نقاط قوت این پلتفرم جدید می توان این را گفت که Xray تا ۳۰ درصد کارایی بهتری نسبت به V2Ray دارد. همچنین، با ابداع پروتکلی جایگزین برای TLS‌ به نام XTLS این اجازه را می‌دهد تا داده‌های کاربران از امنیت بالاتری برخوردار باشند. برای دیدن اینکه چه پروتکل‌هایی بر روی پلتفرم Xray قابلیت تنظیم دارند، &lt;a href=&#34;https://github.com/XTLS/Xray-examples&#34;&gt;به اینجا رجوع کنید&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;پروتکل VLESS (ایمن &lt;span&gt;😎&lt;/span&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;در همان نوامبر ۲۰۲۰، گروه ناشناس Project X، پروتکل VLESS را به عنوان جایگزینی برای پروتکل VMESS طراحی کرد. این پروتکل هیچ کدام از معایت امنیتی VMESS را ندارد و هنوز GFW قادر به شناسایی داده‌های رمزنگاری شده با VLESS‌ نیست. بعلاوه، VLESS به گونه‌ای بسیار کاراتر طراحی شده و به server اجازه می‌دهد تا به نسبت VMESS تعداد کاربران بیشتری را بر روی یک server میزبانی کند. دقت کنید که به عنوان یه اشتباه مصطلح گاهی در متون Xray و VLESS به جای یکدیگر استفاده می‌شوند بااینکه یکی پلتفرم هست و دیگری پروتکل.&lt;/p&gt; &#xA;&lt;p&gt;در این لحظه پروتکل VLESS به همراه XTLS و بر روی TCP یکی از روش‌های کارا برای دور زدن GFW در ایران می‌باشد. می‌توانید به &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/create-configs.md&#34;&gt;مقاله ما برای راه‌اندازی VLESS&lt;/a&gt; امن رجوع کنید.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; برخلاف VMESS، در این پروتکل رمزنگاری بر روی داده انجام نمی‌شود. پس حتما برای آنکه از امنیت کاربران‌تان مطمئن شوید باید ترافیک VLESS را بر روی بستر XTLS‌ عبور دهید.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; یک نکته جالب دیگر در مورد VLESS، وجود این نکته هست که می‌توانید آن را بر روی پورت 443 میزبانی کنید. این به شما اجازه می‌دهد که برای پنهان سازی بیشتر از GFW یک وب سایت عادی بر روی پورت 443 بالا بیاورید. وقتی کاربر با مرورگر به آدرس شما می‌رود، یک وب‌سایت مجاز می‌بیند. اما در پشت پرده، کاربران می‌توانند از این پورت به عنوان دری پنهان استفاده کنند. &lt;a href=&#34;https://henrywithu.com/coexistence-of-web-applications-and-vless-tcp-xtls/&#34;&gt;این تکنیک در این مقاله&lt;/a&gt; توضیح داده شده است.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; لینک‌های مفید:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xtls.github.io/&#34;&gt;وب سایت Project X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xtls.github.io/config/&#34;&gt;توضیحات فنی برای تنظیمات Xray&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;پروتکل Trojan (ایمن &lt;span&gt;😎&lt;/span&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;در ۲۰۱۷، &lt;a href=&#34;https://github.com/trojan-gfw/trojan&#34;&gt;پروتکل Trojan&lt;/a&gt; توسعه داده شد و تا امروز هم در کنار VLESS روش بسیار موثر دیگری برای دور زدن GFW می‌باشد. پروتکل Trojan ترافیک داده عبوری را به شکل ترافیک HTTPS مچاز درمیاورد تا مکانیزم Deep Packet Inspection در GFW داده را به عنوان ترافیک مجاز در نظر بگیرد. مطابق بر این پروتکل، در آغاز TLS Handshake به صورت کامل انجام می‌گیرد تا GFW تصور کند که ترافیک عبور HTTPS‌ مجاز می‌باشد. به طور خلاصه، عملکرد یک Trojan Server از نظر ناظر بیرونی کاملا شبیه به یک Web Server عادی به نظر می‌رسد و همین کمک می‌کند که GFW به Server شما مشکوک نشود. این پروتکل هر دو لایه انتقال TCP و UDP رو پشتیبانی می‌کند. می‌توانید به &lt;a href=&#34;https://github.com/iranxray/hope/raw/main/create-trojan.md&#34;&gt;مقاله ما برای راه‌اندازه Trojan&lt;/a&gt; رجوع کنید.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; لینک‌های مفید:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trojan-gfw/trojan&#34;&gt;پروژه Trojan در GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trojan-gfw/trojan/issues/14&#34;&gt;نخستین Issue بر روی GitHub پروژه که دلایل تولد Trojan را توضیح می‌دهد&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trojan-gfw.github.io/trojan/protocol.html&#34;&gt;تشریح پروتکل&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; &lt;a href=&#34;https://github.com/p4gefau1t/trojan-go&#34;&gt;پروژه‌ دیگری به نام Trojan-Go&lt;/a&gt; بر پایه پروژه Trojan و با زبان GO نوشته شده است. این پروژه نسبت به نسخه اولیه امکاناتی نظیر پشتیبانی از WebSocket و استفاده از CDN را هم اضافه کرده است.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>odoo/odoo</title>
    <updated>2022-11-19T01:30:56Z</updated>
    <id>tag:github.com,2022-11-19:/odoo/odoo</id>
    <link href="https://github.com/odoo/odoo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Odoo. Open Source Apps To Grow Your Business.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://runbot.odoo.com/runbot&#34;&gt;&lt;img src=&#34;https://runbot.odoo.com/runbot/badge/flat/1/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.odoo.com/documentation/16.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-docs-875A7B.svg?style=flat&amp;amp;colorA=8F8F8F&#34; alt=&#34;Tech Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.odoo.com/forum/help-1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-help-875A7B.svg?style=flat&amp;amp;colorA=8F8F8F&#34; alt=&#34;Help&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nightly.odoo.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-nightly-875A7B.svg?style=flat&amp;amp;colorA=8F8F8F&#34; alt=&#34;Nightly Builds&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Odoo&lt;/h2&gt; &#xA;&lt;p&gt;Odoo is a suite of web based open source business apps.&lt;/p&gt; &#xA;&lt;p&gt;The main Odoo Apps include an &lt;a href=&#34;https://www.odoo.com/page/crm&#34;&gt;Open Source CRM&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/website&#34;&gt;Website Builder&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/ecommerce&#34;&gt;eCommerce&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/inventory&#34;&gt;Warehouse Management&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/project&#34;&gt;Project Management&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/accounting&#34;&gt;Billing &amp;amp; Accounting&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/point-of-sale-shop&#34;&gt;Point of Sale&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/employees&#34;&gt;Human Resources&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/social-marketing&#34;&gt;Marketing&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/manufacturing&#34;&gt;Manufacturing&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/&#34;&gt;...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Odoo Apps can be used as stand-alone applications, but they also integrate seamlessly so you get a full-featured &lt;a href=&#34;https://www.odoo.com&#34;&gt;Open Source ERP&lt;/a&gt; when you install several Apps.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started with Odoo&lt;/h2&gt; &#xA;&lt;p&gt;For a standard installation please follow the &lt;a href=&#34;https://www.odoo.com/documentation/16.0/administration/install/install.html&#34;&gt;Setup instructions&lt;/a&gt; from the documentation.&lt;/p&gt; &#xA;&lt;p&gt;To learn the software, we recommend the &lt;a href=&#34;https://www.odoo.com/slides&#34;&gt;Odoo eLearning&lt;/a&gt;, or &lt;a href=&#34;https://www.odoo.com/page/scale-up-business-game&#34;&gt;Scale-up&lt;/a&gt;, the &lt;a href=&#34;https://www.odoo.com/page/scale-up-business-game&#34;&gt;business game&lt;/a&gt;. Developers can start with &lt;a href=&#34;https://www.odoo.com/documentation/16.0/developer/howtos.html&#34;&gt;the developer tutorials&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>