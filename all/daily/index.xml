<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-20T01:29:55Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jfecher/ante</title>
    <updated>2022-06-20T01:29:55Z</updated>
    <id>tag:github.com,2022-06-20:/jfecher/ante</id>
    <link href="https://github.com/jfecher/ante" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A safe, easy systems language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ante&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://actions-badge.atrox.dev/jfecher/ante/goto&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fjfecher%2Fante%2Fbadge&amp;amp;style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Ante is a low-level functional language for exploring refinement types, lifetime inference, and other fun features. Here&#39;s a quick taste:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;type Person = name: string, job: ref string&#xA;&#xA;// Infer that the data referenced via `&amp;amp;` should not be freed inside this function&#xA;make_person name =&#xA;    Person name &amp;amp;&#34;programmer&#34;&#xA;&#xA;// bob is only used at this scope, so it can be safely freed afterward&#xA;bob = make_person &#34;bob&#34;&#xA;&#xA;// unlike ownership systems, aliasing is allowed with lifetime inference&#xA;bob_twin = bob&#xA;assert (bob.name == bob_twin.name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In general, ante is low-level (no GC, values aren&#39;t boxed by default) while also trying to be as readable as possible by encouraging high-level approaches that can be optimized with low-level details later on.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://antelang.org&#34;&gt;website&lt;/a&gt; and &lt;a href=&#34;https://antelang.org/docs/language/&#34;&gt;language tour&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Whitespace-sensitive lexer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Name Resolution&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Full type inference &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Traits with multiple parameters and limited functional dependencies&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Compiler option to write inferred types into program source after successful compilation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LLVM Codegen&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No Garbage Collector &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Region Inference for &lt;code&gt;ref&lt;/code&gt;s&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; RAII to allow &lt;code&gt;Rc t&lt;/code&gt; or &lt;code&gt;Box t&lt;/code&gt; when necessary&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Language &lt;a href=&#34;https://antelang.org/docs/language/&#34;&gt;Documentation&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://antelang.org/docs/language/#line-continuations&#34;&gt;Article on Ante&#39;s use of whitespace for line continuations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://antelang.org/docs/language/#loops&#34;&gt;Article on the sugar for immediately invoked recursive functions (loop/recur)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Article on interactions between &lt;code&gt;mut&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, and passing by reference&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Article on autoboxing recursive types for polymorphic pointer types&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[~] Refinement Types (in progress)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cranelift backend for faster debug builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Algebraic Effects&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Incremental compilation metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nice to have but not currently required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Reasonable automatic C/C++ interop with clang api&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build system built into standard library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ante should always be able to build itself along with any required libraries, the main question is how should a build system facilitate the more complex tasks of building other languages or running arbitrary programs like yacc/bison.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;The compiler is still in a rather early state so any contributors are greatly welcome. Feel free to contribute to either any known issues/improvements (some are listed in the &#34;Quick Tasks&#34; list below) or any standard library functions you think may be useful.&lt;/p&gt; &#xA;&lt;p&gt;Each file in the codebase is prefixed with a module comment explaining the purpose of the file and any algorithms used. &lt;code&gt;src/main.rs&lt;/code&gt; is a good place to start reading.&lt;/p&gt; &#xA;&lt;p&gt;Make sure any PRs pass the tests in the &lt;code&gt;examples&lt;/code&gt; directory. These tests have commands in them which the &lt;a href=&#34;https://github.com/jfecher/golden-tests&#34;&gt;goldentests&lt;/a&gt; library uses to run the ante compiler and check its output for each file against the expected output contained within comments of that file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jfecher/ante/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;&lt;strong&gt;Quick Tasks&lt;/strong&gt;&lt;/a&gt; to contribute to&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;The best place to follow ante&#39;s development is in the official discord: &lt;a href=&#34;https://discord.gg/BN97fKnEH2&#34;&gt;https://discord.gg/BN97fKnEH2&lt;/a&gt;. There is also the mostly inactive subreddit at &lt;a href=&#34;https://reddit.com/r/ante&#34;&gt;/r/ante&lt;/a&gt; which is mainly used for questions about the language rather than development updates. You can also feel to file issues or ask questions on this repository.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Ante currently optionally requires llvm 13.0 while building. If you already have this installed with sources, you may be fine building with &lt;code&gt;cargo install --path .&lt;/code&gt; alone. If cargo complains about not finding any suitable llvm version, you can either choose to build ante without the llvm backend via &lt;code&gt;cargo install --path . --no-default-features&lt;/code&gt; or you can build llvm from source, either via &lt;code&gt;llvmenv&lt;/code&gt; or &lt;code&gt;cmake&lt;/code&gt; as covered in the next sections.&lt;/p&gt; &#xA;&lt;h4&gt;Linux and Mac&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cargo install llvmenv&#xA;$ llvmenv init&#xA;$ llvmenv build-entry -G Makefile -j7 13.0.0&#xA;$ llvmenv global 13.0.0&#xA;$ LLVM_SYS_130_PREFIX=$(llvmenv prefix)&#xA;$ cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;llvmenv prefix&lt;/code&gt; defaults to a path with spaces in it, you may get an error during &lt;code&gt;cargo build&lt;/code&gt; complaining it cannot find the path to llvm. If this happens, try manually moving the installation in &lt;code&gt;llvmenv prefix&lt;/code&gt; to a new directory without spaces, updating &lt;code&gt;LLVM_SYS_130_PREFIX&lt;/code&gt; to this new location and re-running &lt;code&gt;cargo build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Note: LLVM is notoriously difficult to build on windows. If you&#39;re a windows user who has tried the following and still cannot build llvm, I highly recommend trying out ante without the llvm backend via &lt;code&gt;cargo install --path . --no-default-features&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That being said, here is one way to build llvm via llvmenv on windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cargo install llvmenv&#xA;$ llvmenv init&#xA;$ llvmenv build-entry -G VisualStudio -j7 13.0.0&#xA;$ llvmenv global 13.0.0&#xA;$ for /f &#34;tokens=*&#34; %a in (&#39;llvmenv prefix&#39;) do (set LLVM_SYS_130_PREFIX=%a)&#xA;$ cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can confirm your current version of llvm by running &lt;code&gt;llvmenv version&lt;/code&gt; or &lt;code&gt;llvm-config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;CMake&lt;/h5&gt; &#xA;&lt;p&gt;If the above steps don&#39;t work for you, you can try &lt;a href=&#34;https://www.llvm.org/docs/CMake.html&#34;&gt;building llvm from source with cmake&lt;/a&gt;. If you&#39;re on windows this requires you to have Visual Studio 2017 or later installed already.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/llvm/llvm-project --branch=release/10.x&#xA;$ mkdir llvm-build&#xA;$ cd llvm-build&#xA;$ cmake ../llvm-project/llvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, cmake may error that it failed to find z3, or the windows SDK in which case you may need to install them. For the windows SDK, you can install it via the Visual Studio Installer (under Modify -&amp;gt; Individual Components). I used version 10.0.17763.0, though it is likely newer versions will work as well. Rerun the last cmake command to test that everything is installed right. Once this is done, move on to compiling llvm and ante:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake --build .&#xA;$ cmake --build . --target install&#xA;$ cd ..&#xA;$ set LLVM_SYS_130_PREFIX=/absolute/path/to/llvm-build&#xA;$ cargo build&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>girliemac/a-picture-is-worth-a-1000-words</title>
    <updated>2022-06-20T01:29:55Z</updated>
    <id>tag:github.com,2022-06-20:/girliemac/a-picture-is-worth-a-1000-words</id>
    <link href="https://github.com/girliemac/a-picture-is-worth-a-1000-words" rel="alternate"></link>
    <summary type="html">&lt;p&gt;I am trying to describe complex matters in simple doodles!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/header.png&#34; alt=&#34;header image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Doodles-as-A-Service Repo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC BY-SA 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👋 Aloha, this is where you can grab most of my tech doodles and sketchnotes.&lt;/p&gt; &#xA;&lt;p&gt;I have been posting my tech doodles on &lt;a href=&#34;https://twitter.com/girlie_mac&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://github.com/microsoft/&#34;&gt;Microsoft open-source projects&lt;/a&gt; and I am repeatedly asked where to get the original images, especially from people who saw some of my works out of context on some social media, so I decided to put all together on one GitHub repo.&lt;/p&gt; &#xA;&lt;p&gt;Here are some of the latest giditally created handdrawn doodles, as well as photos of analog ones.&lt;/p&gt; &#xA;&lt;p&gt;All my doodles are under Creative Commons license. So please share with attributions. And I definitely don&#39;t want you to NFT them without my permission (and I won&#39;t permit you because you don&#39;t own them. They are open-sourced to be freely available for educational purpose only!)&lt;/p&gt; &#xA;&lt;p&gt;Enjoy 🌺&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/algorithms&#34;&gt;/algorithms&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁algorithms&#xA;    ├── 📁png&#xA;    │&amp;nbsp;&amp;nbsp; ├── 📄algorithm101_file.png&#xA;    │&amp;nbsp;&amp;nbsp; └── 📄...&#xA;    └── 📁tiff&#xA;        ├── 📄algorithm101_file.tiff&#xA;        └── 📄...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Big O Notation: O(n)&lt;/li&gt; &#xA; &lt;li&gt;Big O Natation: O(1) and O(n²)&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Array&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Linked List&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Stack&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Queue&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Hash Table (1/2)&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Hash Table (2/2)&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Binary Heap (1/2)&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Binary Heap (2/2)&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Binary Search Tree (1/2)&lt;/li&gt; &#xA; &lt;li&gt;Data Structures: Binary Search Tree (2/2)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Web Development for Beginners&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/webdev&#34;&gt;/webdev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These images are created for the project at Microsoft I was in, &lt;a href=&#34;https://github.com/microsoft/Web-Dev-For-Beginners&#34;&gt;Web Dev for Beginners&lt;/a&gt; curriculum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁webdev&#xA;    ├── 📁png&#xA;    │&amp;nbsp;&amp;nbsp; ├── webdev101-programmingml-history.png&#xA;    │&amp;nbsp;&amp;nbsp; └── 📄...&#xA;    └── 📁tiff&#xA;        ├── 📄webdev101-programming.tiff&#xA;        └── 📄...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Introduction to Programming Languages and Tools of the Trade&lt;/li&gt; &#xA; &lt;li&gt;Introduction to GitHub&lt;/li&gt; &#xA; &lt;li&gt;Creating Accessible Webpages&lt;/li&gt; &#xA; &lt;li&gt;JavaScript Basics: Data Types&lt;/li&gt; &#xA; &lt;li&gt;JavaScript Basics: Methods and Functions&lt;/li&gt; &#xA; &lt;li&gt;JavaScript Basics: Making Decisions&lt;/li&gt; &#xA; &lt;li&gt;JavaScript Basics: Arrays and Loops&lt;/li&gt; &#xA; &lt;li&gt;Introduction to HTML&lt;/li&gt; &#xA; &lt;li&gt;Introduction to CSS&lt;/li&gt; &#xA; &lt;li&gt;DOM Manipulation and a Closure&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Machine Learning for Beginners&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/ml&#34;&gt;/ml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These images are created for another project at Microsoft I was in, &lt;a href=&#34;https://github.com/microsoft/ML-For-Beginners&#34;&gt;Machine Learning for Beginners&lt;/a&gt; curriculum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁ml&#xA;    ├── 📁png&#xA;    │&amp;nbsp;&amp;nbsp; ├── 📄ml-history.png&#xA;    │&amp;nbsp;&amp;nbsp; └── 📄...&#xA;    └── 📁tiff&#xA;        ├── 📄ml-history.tiff&#xA;        └── 📄...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Machine Learning history&lt;/li&gt; &#xA; &lt;li&gt;Faireness in ML&lt;/li&gt; &#xA; &lt;li&gt;Regression&lt;/li&gt; &#xA; &lt;li&gt;Reinforcement&lt;/li&gt; &#xA; &lt;li&gt;Time series&lt;/li&gt; &#xA; &lt;li&gt;ML in the real world&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Git Purr - Git Explained with Cats!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/git-purr&#34;&gt;/git-purr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This series is my ealier work and everything is drawn in very analog way.&lt;/p&gt; &#xA;&lt;p&gt;I am planning to recreate digitally someday. Git cherrypick is the only one that digitally handdrawn after I got an iPad with Pencil.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁git-purr&#xA;    ├── 📄git-purr.jpg   &#xA; &amp;nbsp;&amp;nbsp; └── 📄...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;git purr (git pull)&lt;/li&gt; &#xA; &lt;li&gt;git meowge (git merge &amp;amp; git rebase)&lt;/li&gt; &#xA; &lt;li&gt;git puss (git push)&lt;/li&gt; &#xA; &lt;li&gt;git cherry-pick &amp;amp; git log&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Microsoft Teams&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/teams&#34;&gt;/teams&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁teams&#xA;    ├── 📄teams-toolkit-v3-doodle.png  &#xA; &amp;nbsp;&amp;nbsp; └── 📄...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;What&#39;s New in Teams Toolkit v3&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Live Sketchnotes from Conferences and Classes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/sketchnotes&#34;&gt;/sketchnotes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;These are some of my old sketchnotes from the past. I don&#39;t have all of my drawings but post as I find somewhere in my HD or cloud spaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁sketchnotes  &#xA; &amp;nbsp;&amp;nbsp; └── 📄...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HTTP Status Cats 🐱&lt;/h2&gt; &#xA;&lt;p&gt;This is one of my first personal project to make technology into cats. Although this is &lt;em&gt;not&lt;/em&gt; doodling, I thought it was worth mentioning here!&lt;/p&gt; &#xA;&lt;p&gt;All HTTP Cats are now hosted at &lt;a href=&#34;https://http.cat&#34;&gt;HTTP.cat&lt;/a&gt; because the domain name is awesome.&lt;/p&gt; &#xA;&lt;p&gt;All images (except a few) are originally created by me a decade ago! Read the story on &lt;a href=&#34;https://knowyourmeme.com/memes/http-status-cats&#34;&gt;Know Your Meme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Slack API Zine&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/girliemac/a-picture-is-worth-a-1000-words/main/slack&#34;&gt;/slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;└── 📁slack  &#xA; &amp;nbsp;&amp;nbsp; └── 📄...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are something I did while working at Slack. I created the zine (as physical printed books) to be distribute at Slack-sponcered events and conferences, but never get fully approved. Well, the global pandemic forced us to give up all in-person events anyway.&lt;/p&gt; &#xA;&lt;p&gt;The content is outdated as of 2022 so view them with cautions.&lt;/p&gt; &#xA;&lt;h2&gt;🖨 Printing&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Updated on August 27, 2021:&lt;/p&gt; &#xA; &lt;p&gt;GitHub warned me that my Git LFS is disabled as the bandwidth exceeded exceeded your data plan by 150%+. So now the high-res version in TIFF is temporary unavailable. I will move them somewhere when I have time. Thank you! 🙇‍♀️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;del&gt;The &lt;em&gt;tiff&lt;/em&gt; files are for printing. I set them in 5.83 x 8.27 inches, which should fit in A5 paper size. They are large files and stored as LFS files so you won&#39;t download the actual files when you &lt;code&gt;git clone&lt;/code&gt; so please download manually from GitHub.&lt;/del&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This work is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;img src=&#34;https://licensebuttons.net/l/by-sa/4.0/88x31.png&#34; alt=&#34;CC BY-SA 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>foundry-rs/foundry</title>
    <updated>2022-06-20T01:29:55Z</updated>
    <id>tag:github.com,2022-06-20:/foundry-rs/foundry</id>
    <link href="https://github.com/foundry-rs/foundry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/.github/logo.png&#34; alt=&#34;Foundry logo&#34; align=&#34;right&#34; width=&#34;120&#34;&gt; &#xA;&lt;h2&gt;Foundry&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/foundry-rs/foundry/test?style=flat-square&#34; alt=&#34;Github Actions&#34;&gt; &lt;a href=&#34;https://t.me/foundry_rs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=chat&amp;amp;style=flat-square&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Ffoundry_rs&#34; alt=&#34;Telegram Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/foundry_support&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?color=neon&amp;amp;logo=telegram&amp;amp;label=support&amp;amp;style=flat-square&amp;amp;url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Ffoundry_support&#34; alt=&#34;Telegram Support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Foundry consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/forge&#34;&gt;&lt;strong&gt;Forge&lt;/strong&gt;&lt;/a&gt;: Ethereum testing framework (like Truffle, Hardhat and DappTools).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/cast&#34;&gt;&lt;strong&gt;Cast&lt;/strong&gt;&lt;/a&gt;: Swiss army knife for interacting with EVM smart contracts, sending transactions and getting chain data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/anvil&#34;&gt;&lt;strong&gt;Anvil&lt;/strong&gt;&lt;/a&gt;: local Ethereum node, akin to Ganache, Hardhat Network.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Need help getting started with Foundry? Read the &lt;a href=&#34;https://book.getfoundry.sh&#34;&gt;📖 Foundry Book&lt;/a&gt; (WIP)!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/.github/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Having issues? See the &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/#troubleshooting-installation&#34;&gt;troubleshooting section&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First run the command below to get &lt;code&gt;foundryup&lt;/code&gt;, the Foundry toolchain installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://foundry.paradigm.xyz | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not want to use the redirect, feel free to manually download the foundryup installation script from &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, run &lt;code&gt;foundryup&lt;/code&gt; in a new terminal session or after reloading your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other ways to use &lt;code&gt;foundryup&lt;/code&gt;, and other documentation, can be found &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup&#34;&gt;here&lt;/a&gt;. Happy forging!&lt;/p&gt; &#xA;&lt;h3&gt;Installing from Source&lt;/h3&gt; &#xA;&lt;p&gt;For people that want to install from source, you can do so like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/foundry-rs/foundry&#xA;cd foundry&#xA;# install cast + forge&#xA;cargo install --path ./cli --bins --locked --force&#xA;# install anvil&#xA;cargo install --path ./anvil --locked --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via &lt;code&gt;cargo install --git https://github.com/foundry-rs/foundry --locked foundry-cli anvil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing for CI in Github Action&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/foundry-rs/foundry-toolchain&#34;&gt;https://github.com/foundry-rs/foundry-toolchain&lt;/a&gt; GitHub Action.&lt;/p&gt; &#xA;&lt;h3&gt;Installing via Docker&lt;/h3&gt; &#xA;&lt;p&gt;Foundry maintains a &lt;a href=&#34;https://github.com/foundry-rs/foundry/pkgs/container/foundry&#34;&gt;Docker image repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can pull the latest release image like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull ghcr.io/foundry-rs/foundry:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples and guides on using this image, see the &lt;a href=&#34;https://book.getfoundry.sh/tutorials/foundry-docker.html&#34;&gt;Docker section&lt;/a&gt; in the book.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Download&lt;/h3&gt; &#xA;&lt;p&gt;You can manually download nightly releases &lt;a href=&#34;https://github.com/foundry-rs/foundry/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Forge&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast &amp;amp; flexible compilation pipeline&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic Solidity compiler version detection &amp;amp; installation (under &lt;code&gt;~/.svm&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Incremental compilation &amp;amp; caching&lt;/strong&gt;: Only changed files are re-compiled&lt;/li&gt; &#xA;   &lt;li&gt;Parallel compilation&lt;/li&gt; &#xA;   &lt;li&gt;Non-standard directory structures support (e.g. &lt;a href=&#34;https://twitter.com/gakonst/status/1461289225337421829&#34;&gt;Hardhat repos&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tests are written in Solidity&lt;/strong&gt; (like in DappTools)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast fuzz testing&lt;/strong&gt; with shrinking of inputs &amp;amp; printing of counter-examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast remote RPC forking mode&lt;/strong&gt;, leveraging Rust&#39;s async infrastructure like tokio&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible debug logging&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DappTools-style, using &lt;code&gt;DsTest&lt;/code&gt;&#39;s emitted logs&lt;/li&gt; &#xA;   &lt;li&gt;Hardhat-style, using the popular &lt;code&gt;console.sol&lt;/code&gt; contract&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable (5-10MB) &amp;amp; easy to install&lt;/strong&gt; without requiring Nix or any other package manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast CI&lt;/strong&gt; with the &lt;a href=&#34;https://github.com/foundry-rs/foundry-toolchain&#34;&gt;Foundry GitHub action&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How Fast?&lt;/h3&gt; &#xA;&lt;p&gt;Forge is quite fast at both compiling (leveraging &lt;a href=&#34;https://github.com/gakonst/ethers-rs/tree/master/ethers-solc/&#34;&gt;ethers-solc&lt;/a&gt;) and testing.&lt;/p&gt; &#xA;&lt;p&gt;See the benchmarks below. More benchmarks can be found in the &lt;a href=&#34;https://www.paradigm.xyz/2022/03/foundry-02#blazing-fast-compilation--testing&#34;&gt;v0.2.0 announcement post&lt;/a&gt; and in the &lt;a href=&#34;https://github.com/mds1/convex-shutdown-simulation&#34;&gt;Convex Shutdown Simulation&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Testing Benchmarks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Forge&lt;/th&gt; &#xA;   &lt;th&gt;DappTools&lt;/th&gt; &#xA;   &lt;th&gt;Speedup&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/maple-labs/loan&#34;&gt;maple-labs/loan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;800ms&lt;/td&gt; &#xA;   &lt;td&gt;4m28s&lt;/td&gt; &#xA;   &lt;td&gt;335x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Rari-Capital/solmate/&#34;&gt;Rari-Capital/solmate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.8s&lt;/td&gt; &#xA;   &lt;td&gt;6m34s&lt;/td&gt; &#xA;   &lt;td&gt;140x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/reflexer-labs/geb&#34;&gt;reflexer-labs/geb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.4s&lt;/td&gt; &#xA;   &lt;td&gt;23s&lt;/td&gt; &#xA;   &lt;td&gt;57.5x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rari-capital/vaults&#34;&gt;Rari-Capital/vaults&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;0.28s&lt;/td&gt; &#xA;   &lt;td&gt;6.5s&lt;/td&gt; &#xA;   &lt;td&gt;23x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: In the above benchmarks, compilation was always skipped&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compilation Benchmarks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;Compilation benchmarks&#34; src=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/.github/compilation-benchmark.png&#34; height=&#34;420px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Takeaway: Forge compilation is consistently faster by a factor of 1.7-11.3x, depending on the amount of caching involved.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cast&lt;/h2&gt; &#xA;&lt;p&gt;Cast is a swiss army knife for interacting with Ethereum applications from the command line.&lt;/p&gt; &#xA;&lt;p&gt;More documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/cast&#34;&gt;cast package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;foundry.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Foundry is designed to be very configurable. You can configure Foundry using a file called &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/config&#34;&gt;&lt;code&gt;foundry.toml&lt;/code&gt;&lt;/a&gt; in the root of your project, or any other parent director. See &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/config/README.md#all-options&#34;&gt;config package&lt;/a&gt; for all available options.&lt;/p&gt; &#xA;&lt;p&gt;Configuration can be arbitrarily namespaced by profiles. The default profile is named &lt;code&gt;default&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/config/README.md#default-profile&#34;&gt;&#34;Default Profile&#34;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can select another profile using the &lt;code&gt;FOUNDRY_PROFILE&lt;/code&gt; environment variable. You can also override parts of your configuration using &lt;code&gt;FOUNDRY_&lt;/code&gt; or &lt;code&gt;DAPP_&lt;/code&gt; prefixed environment variables, like &lt;code&gt;FOUNDRY_SRC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;forge init&lt;/code&gt; creates a basic, extendable &lt;code&gt;foundry.toml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;To see your current configuration, run &lt;code&gt;forge config&lt;/code&gt;. To see only basic options (as set with &lt;code&gt;forge init&lt;/code&gt;), run &lt;code&gt;forge config --basic&lt;/code&gt;. This can be used to create a new &lt;code&gt;foundry.toml&lt;/code&gt; file with &lt;code&gt;forge config --basic &amp;gt; foundry.toml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default &lt;code&gt;forge config&lt;/code&gt; shows the currently selected foundry profile and its values. It also accepts the same arguments as &lt;code&gt;forge build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;DappTools Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;You can re-use your &lt;code&gt;.dapprc&lt;/code&gt; environment variabless by running &lt;code&gt;source .dapprc&lt;/code&gt; beforehand using a Foundry tool.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can find additional setup and configurations guides in the &lt;a href=&#34;https://book.getfoundry.sh&#34;&gt;Foundry Book&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.getfoundry.sh/config/vscode.html&#34;&gt;Setting up VSCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.getfoundry.sh/config/shell-autocompletion.html&#34;&gt;Shell autocompletions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Troubleshooting Installation&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;libusb&lt;/code&gt; Error When Running &lt;code&gt;forge&lt;/code&gt;/&lt;code&gt;cast&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are using the binaries as released, you may see the following error on MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dyld: Library not loaded: /usr/local/opt/libusb/lib/libusb-1.0.0.dylib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to fix this, you must install &lt;code&gt;libusb&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install libusb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Out of Date &lt;code&gt;GLIBC&lt;/code&gt; Error When Running &lt;code&gt;forge&lt;/code&gt; From Default &lt;code&gt;foundryup&lt;/code&gt; Install:&lt;/h4&gt; &#xA;&lt;p&gt;If you run into an error resembling the following when using &lt;code&gt;foundryup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;forge: /lib/x86_64-linux-gnu/libc.so.6: version &#39;GLIBC_2.29&#39; not found (required by forge)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are 2 workarounds:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Building from source: &lt;code&gt;foundryup -b master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.getfoundry.sh/getting-started/installation.html#using-with-docker&#34;&gt;Using Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/foundry-rs/foundry/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;First, see if the answer to your question can be found in &lt;a href=&#34;https://book.getfoundry.sh&#34;&gt;book&lt;/a&gt;, or in the relevant crate.&lt;/p&gt; &#xA;&lt;p&gt;If the answer is not there:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://t.me/foundry_support&#34;&gt;support Telegram&lt;/a&gt; to get help, or&lt;/li&gt; &#xA; &lt;li&gt;Open a &lt;a href=&#34;https://github.com/foundry-rs/foundry/discussions/new&#34;&gt;discussion&lt;/a&gt; with your question, or&lt;/li&gt; &#xA; &lt;li&gt;Open an issue with &lt;a href=&#34;https://github.com/foundry-rs/foundry/issues/new&#34;&gt;the bug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to contribute, or follow along with contributor discussion, you can use our &lt;a href=&#34;https://t.me/foundry_rs&#34;&gt;main telegram&lt;/a&gt; to chat with us about the development of Foundry!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Foundry is a clean-room rewrite of the testing framework &lt;a href=&#34;https://github.com/dapphub/dapptools&#34;&gt;DappTools&lt;/a&gt;. None of this would have been possible without the DappHub team&#39;s work over the years.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mattsse_&#34;&gt;Matthias Seitz&lt;/a&gt;: Created &lt;a href=&#34;https://github.com/gakonst/ethers-rs/tree/master/ethers-solc/&#34;&gt;ethers-solc&lt;/a&gt; which is the backbone of our compilation pipeline, as well as countless contributions to ethers, in particular the &lt;code&gt;abigen&lt;/code&gt; macros.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/rohitnarurkar&#34;&gt;Rohit Narurkar&lt;/a&gt;: Created the Rust Solidity version manager &lt;a href=&#34;https://github.com/roynalnaruto/svm-rs&#34;&gt;svm-rs&lt;/a&gt; which we use to auto-detect and manage multiple Solidity versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/brockjelmore&#34;&gt;Brock Elmore&lt;/a&gt;: For extending the VM&#39;s cheatcodes and implementing &lt;a href=&#34;https://github.com/foundry-rs/foundry/pull/192&#34;&gt;structured call tracing&lt;/a&gt;, a critical feature for debugging smart contract calls.&lt;/li&gt; &#xA; &lt;li&gt;All the other &lt;a href=&#34;https://github.com/foundry-rs/foundry/graphs/contributors&#34;&gt;contributors&lt;/a&gt; to the &lt;a href=&#34;https://github.com/gakonst/ethers-rs&#34;&gt;ethers-rs&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/foundry-rs/foundry&#34;&gt;foundry&lt;/a&gt; repositories and chatrooms.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>