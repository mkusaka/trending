<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-08T01:24:02Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pagefaultgames/pokerogue</title>
    <updated>2024-04-08T01:24:02Z</updated>
    <id>tag:github.com,2024-04-08:/pagefaultgames/pokerogue</id>
    <link href="https://github.com/pagefaultgames/pokerogue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&#xA; &lt;picture&gt;&#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/pagefaultgames/pokerogue/main/public/images/logo.png&#34; width=&#34;300&#34; alt=&#34;Pok√©Rogue&#34;&gt;&#xA; &lt;/picture&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pok√©Rogue is a browser based Pok√©mon fangame heavily inspired by the roguelite genre. Battle endlessly while gathering stacking items, exploring many different biomes, fighting trainers, bosses, and more!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Development&lt;/h2&gt; &#xA;&lt;p&gt;If you have the motivation and experience with Typescript/Javascript (or are willing to learn) please feel free to fork the repository and make pull requests with contributions. If you don&#39;t know what to work on but want to help, reference the below &lt;strong&gt;To-Do&lt;/strong&gt; section or the &lt;strong&gt;#vote&lt;/strong&gt; channel in the discord.&lt;/p&gt; &#xA;&lt;h3&gt;üíª Environment Setup&lt;/h3&gt; &#xA;&lt;p&gt;node: 18.3.0&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo and in the root directory run &lt;code&gt;npm install&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;if you run into any errors, reach out in the &lt;strong&gt;#dev-corner&lt;/strong&gt; channel in discord&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run start:dev&lt;/code&gt; to locally run the project in &lt;code&gt;localhost:8000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;‚ùî FAQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I test a new _______?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;code&gt;battle-scene.ts&lt;/code&gt; file there are overrides for most values you&#39;ll need to change for testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü™ß To Do&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://trello.com/b/z10B703R/pokerogue-board&#34;&gt;Trello Board&lt;/a&gt; to see what we&#39;re working on&lt;/p&gt; &#xA;&lt;h1&gt;üìù Credits&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If this project contains assets you have produced and you do not see your name here, &lt;strong&gt;please&lt;/strong&gt; reach out.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üéµ BGM&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pok√©mon Mystery Dungeon: Explorers of Sky &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arata Iiyoshi&lt;/li&gt; &#xA;   &lt;li&gt;Hideki Sakamoto&lt;/li&gt; &#xA;   &lt;li&gt;Keisuke Ito&lt;/li&gt; &#xA;   &lt;li&gt;Ken-ichi Saito&lt;/li&gt; &#xA;   &lt;li&gt;Yoshihiro Maeda&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Black/White &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go Ichinose&lt;/li&gt; &#xA;   &lt;li&gt;Hitomi Sato&lt;/li&gt; &#xA;   &lt;li&gt;Shota Kageyama&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Mystery Dungeon: Rescue Team DX &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keisuke Ito&lt;/li&gt; &#xA;   &lt;li&gt;Arata Iiyoshi&lt;/li&gt; &#xA;   &lt;li&gt;Atsuhiro Ishizuna&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Black/White 2&lt;/li&gt; &#xA; &lt;li&gt;edifette (Title screen music)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üéµ Sound Effects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pok√©mon Emerald&lt;/li&gt; &#xA; &lt;li&gt;Pok√©mon Black/White&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üé® Backgrounds&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Squip (Paid Commissions)&lt;/li&gt; &#xA; &lt;li&gt;Contributions by Someonealive-QN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GAMEFREAK&lt;/li&gt; &#xA; &lt;li&gt;LJ Birdman&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üé® Game Logo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gonstar (Paid Commission)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üé® Trainer Sprites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GAMEFREAK (Pok√©mon Black/White 2, Pok√©mon Diamond/Pearl)&lt;/li&gt; &#xA; &lt;li&gt;kyledove&lt;/li&gt; &#xA; &lt;li&gt;Brumirage&lt;/li&gt; &#xA; &lt;li&gt;pkmn_realidea (Paid Commissions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üé® Trainer Portraits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pkmn_realidea (Paid Commissions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üé® Pokemon Sprites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GAMEFREAK (Pok√©mon Black/White 2)&lt;/li&gt; &#xA; &lt;li&gt;Smogon Sprite Project (Various Artists)&lt;/li&gt; &#xA; &lt;li&gt;Skyflyer&lt;/li&gt; &#xA; &lt;li&gt;Nolo33&lt;/li&gt; &#xA; &lt;li&gt;Ebaru&lt;/li&gt; &#xA; &lt;li&gt;EricLostie&lt;/li&gt; &#xA; &lt;li&gt;KingOfThe-X-Roads&lt;/li&gt; &#xA; &lt;li&gt;kiriaura&lt;/li&gt; &#xA; &lt;li&gt;Caruban&lt;/li&gt; &#xA; &lt;li&gt;Sopita_Yorita&lt;/li&gt; &#xA; &lt;li&gt;Azrita&lt;/li&gt; &#xA; &lt;li&gt;AshnixsLaw&lt;/li&gt; &#xA; &lt;li&gt;Hellfire0raptor&lt;/li&gt; &#xA; &lt;li&gt;RetroNC&lt;/li&gt; &#xA; &lt;li&gt;Franark122k&lt;/li&gt; &#xA; &lt;li&gt;OldSoulja&lt;/li&gt; &#xA; &lt;li&gt;PKMarioG&lt;/li&gt; &#xA; &lt;li&gt;ItsYugen&lt;/li&gt; &#xA; &lt;li&gt;lucasomi&lt;/li&gt; &#xA; &lt;li&gt;Pkm Sinfonia&lt;/li&gt; &#xA; &lt;li&gt;Poki Papillon&lt;/li&gt; &#xA; &lt;li&gt;Fleimer_&lt;/li&gt; &#xA; &lt;li&gt;bizcoeindoloro&lt;/li&gt; &#xA; &lt;li&gt;mangalos810&lt;/li&gt; &#xA; &lt;li&gt;Involuntary-Twitch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Move Animations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pok√©mon Reborn&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jrouwe/JoltPhysics</title>
    <updated>2024-04-08T01:24:02Z</updated>
    <id>tag:github.com,2024-04-08:/jrouwe/JoltPhysics</id>
    <link href="https://github.com/jrouwe/JoltPhysics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi core friendly rigid body physics and collision detection library, written in C++, suitable for games and VR applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cla-assistant.io/jrouwe/JoltPhysics&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/jrouwe/JoltPhysics&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jrouwe/JoltPhysics/actions/&#34;&gt;&lt;img src=&#34;https://github.com/jrouwe/JoltPhysics/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=jrouwe_JoltPhysics&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jrouwe_JoltPhysics&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=jrouwe_JoltPhysics&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jrouwe_JoltPhysics&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=jrouwe_JoltPhysics&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=jrouwe_JoltPhysics&amp;amp;metric=code_smells&#34; alt=&#34;Code Smells&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Jolt Physics&lt;/h1&gt; &#xA;&lt;p&gt;A multi core friendly rigid body physics and collision detection library suitable for games and VR applications, used by Horizon Forbidden West.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.playstation.com/en-us/games/horizon-forbidden-west/&#34;&gt;&lt;img src=&#34;https://jrouwe.nl/jolt/Horizon_Forbidden_West.png&#34; alt=&#34;Horizon Forbidden West Cover Art&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pwyCW0yNKMA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/pwyCW0yNKMA/hqdefault.jpg&#34; alt=&#34;Ragdoll Pile&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;A YouTube video showing a ragdoll pile simulated with Jolt Physics.&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more demos and &lt;a href=&#34;https://www.youtube.com/watch?v=pwyCW0yNKMA&amp;amp;list=PLYXVwtOr1CBxbA50jVg2dKUQvHW_5OOom&#34;&gt;videos&lt;/a&gt; go to the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/Samples.md&#34;&gt;Samples&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Design Considerations&lt;/h2&gt; &#xA;&lt;p&gt;So why create yet another physics engine? First of all, this has been a personal learning project and secondly I wanted to address some issues that I had with existing physics engines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In games we usually need to do many more things than to simulate the physics world and we need to do this across multiple threads. We therefore place a lot of emphasis on concurrently accessing the physics simulation data outside of the main physics simulation update: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sections of the world can be loaded / unloaded in the background. A batch of physics bodies can be prepared on a background thread without locking or affecting the physics simulation and then inserted into the world all at once with a minimal impact on performance.&lt;/li&gt; &#xA;   &lt;li&gt;Collision queries can run in parallel with other operations like insertion / removal of bodies. The query code is guaranteed to see a body in a consistent state, but when a body is changed during a collision query there is no guarantee if the change is visible to the query or not. If a thread modifies the position of a body and then does a collision query, it will immediately see the updated state (this is often a problem when working with a read version and a write version of the world).&lt;/li&gt; &#xA;   &lt;li&gt;It is also possible to run collision queries in parallel to the main physics simulation by doing the broad phase query before the simulation step. This way, long running processes (like navigation mesh generation) can be spread out across multiple frames while still running the physics simulation every frame.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;One of the main sources of performance problems we found was waking up too many bodies while loading / unloading content. Therefore, bodies will not automatically wake up when created and neighboring bodies will not be woken up when bodies are removed. This can be triggered manually if desired.&lt;/li&gt; &#xA; &lt;li&gt;The simulation runs deterministically, so you could replicate a simulation to a remote client by merely replicating the inputs to the simulation. Read the &lt;a href=&#34;https://jrouwe.github.io/JoltPhysics/#deterministic-simulation&#34;&gt;Deterministic Simulation&lt;/a&gt; section to understand the limits of this.&lt;/li&gt; &#xA; &lt;li&gt;The simulation of this physics engine tries to simulate behavior of rigid bodies in the real world but makes approximations in the simulation so should mainly be used for games or VR simulations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulation of rigid bodies of various shapes using continuous collision detection: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sphere.&lt;/li&gt; &#xA;   &lt;li&gt;Box.&lt;/li&gt; &#xA;   &lt;li&gt;Capsule.&lt;/li&gt; &#xA;   &lt;li&gt;Tapered-capsule.&lt;/li&gt; &#xA;   &lt;li&gt;Cylinder.&lt;/li&gt; &#xA;   &lt;li&gt;Convex hull.&lt;/li&gt; &#xA;   &lt;li&gt;Compound.&lt;/li&gt; &#xA;   &lt;li&gt;Mesh (triangle).&lt;/li&gt; &#xA;   &lt;li&gt;Terrain (height field).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Simulation of constraints between bodies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fixed.&lt;/li&gt; &#xA;   &lt;li&gt;Point.&lt;/li&gt; &#xA;   &lt;li&gt;Distance (including springs).&lt;/li&gt; &#xA;   &lt;li&gt;Hinge.&lt;/li&gt; &#xA;   &lt;li&gt;Slider (also called prismatic).&lt;/li&gt; &#xA;   &lt;li&gt;Cone.&lt;/li&gt; &#xA;   &lt;li&gt;Rack and Pinion.&lt;/li&gt; &#xA;   &lt;li&gt;Gear.&lt;/li&gt; &#xA;   &lt;li&gt;Pulley.&lt;/li&gt; &#xA;   &lt;li&gt;Smooth spline paths.&lt;/li&gt; &#xA;   &lt;li&gt;Swing-twist (for humanoid shoulders).&lt;/li&gt; &#xA;   &lt;li&gt;6 DOF.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Motors to drive the constraints.&lt;/li&gt; &#xA; &lt;li&gt;Collision detection: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Casting rays.&lt;/li&gt; &#xA;   &lt;li&gt;Testing shapes vs shapes.&lt;/li&gt; &#xA;   &lt;li&gt;Casting a shape vs another shape.&lt;/li&gt; &#xA;   &lt;li&gt;Broadphase only tests for quickly determining which objects may intersect.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sensors (trigger volumes).&lt;/li&gt; &#xA; &lt;li&gt;Animated ragdolls: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hard keying (kinematic only rigid bodies).&lt;/li&gt; &#xA;   &lt;li&gt;Soft keying (setting velocities on dynamic rigid bodies).&lt;/li&gt; &#xA;   &lt;li&gt;Driving constraint motors to an animated pose.&lt;/li&gt; &#xA;   &lt;li&gt;Mapping a high detail (animation) skeleton onto a low detail (ragdoll) skeleton and vice versa.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Game character simulation (capsule) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rigid body character. Moves during the physics simulation. Cheapest option and most accurate collision response between character and dynamic bodies.&lt;/li&gt; &#xA;   &lt;li&gt;Virtual character. Does not have a rigid body in the world but simulates one using collision checks. Updated outside of the physics update for more control. Less accurate interaction with dynamic bodies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vehicles &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Wheeled vehicles.&lt;/li&gt; &#xA;   &lt;li&gt;Tracked vehicles.&lt;/li&gt; &#xA;   &lt;li&gt;Motorcycles.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Soft body simulation (e.g. a soft ball or piece of cloth). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Edge constraints.&lt;/li&gt; &#xA;   &lt;li&gt;Dihedral bend constraints.&lt;/li&gt; &#xA;   &lt;li&gt;Tetrahedron volume constraints.&lt;/li&gt; &#xA;   &lt;li&gt;Long range attachment constraints (also called tethers).&lt;/li&gt; &#xA;   &lt;li&gt;Limiting the simulation to stay within a certain range of a skinned vertex.&lt;/li&gt; &#xA;   &lt;li&gt;Internal pressure.&lt;/li&gt; &#xA;   &lt;li&gt;Collision with simulated rigid bodies.&lt;/li&gt; &#xA;   &lt;li&gt;Collision tests against soft bodies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Water buoyancy calculations.&lt;/li&gt; &#xA; &lt;li&gt;An optional double precision mode that allows large worlds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (VS2019, VS2022) x86/x64/ARM32/ARM64 (Desktop/UWP)&lt;/li&gt; &#xA; &lt;li&gt;Linux (tested on Ubuntu 22.04) x64/ARM64&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD&lt;/li&gt; &#xA; &lt;li&gt;Android (tested on Android 14) x86/x64/ARM32/ARM64&lt;/li&gt; &#xA; &lt;li&gt;Platform Blue (a popular game console) x64&lt;/li&gt; &#xA; &lt;li&gt;macOS (tested on Monterey) x64/ARM64&lt;/li&gt; &#xA; &lt;li&gt;iOS (tested on iOS 15) x64/ARM64&lt;/li&gt; &#xA; &lt;li&gt;WebAssembly, see &lt;a href=&#34;https://github.com/jrouwe/JoltPhysics.js&#34;&gt;this&lt;/a&gt; separate project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Required CPU features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On x86 the minimal requirements are SSE2 but the library can be compiled using SSE4.1, SSE4.2, AVX, AVX2, or AVX512.&lt;/li&gt; &#xA; &lt;li&gt;On ARM64 the library by default compiles with NEON and FP16, on ARM32 it can be compiled without any special CPU instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Jolt go to the &lt;a href=&#34;https://jrouwe.github.io/JoltPhysics/&#34;&gt;Architecture and API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get started, look at the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/HelloWorld/HelloWorld.cpp&#34;&gt;HelloWorld&lt;/a&gt; example. A &lt;a href=&#34;https://github.com/jrouwe/JoltPhysicsHelloWorld&#34;&gt;HelloWorld example using CMake FetchContent&lt;/a&gt; is also available to show how you can integrate Jolt Physics in a CMake project.&lt;/p&gt; &#xA;&lt;p&gt;Some algorithms used by Jolt are described in detail in my GDC 2022 talk Architecting Jolt Physics for &#39;Horizon Forbidden West&#39; (&lt;a href=&#34;https://gdcvault.com/play/1027560/Architecting-Jolt-Physics-for-Horizon&#34;&gt;slides&lt;/a&gt;, &lt;a href=&#34;https://jrouwe.nl/architectingjolt/ArchitectingJoltPhysics_Rouwe_Jorrit_Notes.pdf&#34;&gt;slides with speaker notes&lt;/a&gt;, &lt;a href=&#34;https://gdcvault.com/play/1027891/Architecting-Jolt-Physics-for-Horizon&#34;&gt;video&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The library has been tested to compile with Cl (Visual Studio 2019-2022), Clang 10+ and GCC 9+.&lt;/li&gt; &#xA; &lt;li&gt;It uses C++17 and only depends on the standard template library.&lt;/li&gt; &#xA; &lt;li&gt;It doesn&#39;t make use of compiler generated RTTI or exceptions.&lt;/li&gt; &#xA; &lt;li&gt;If you want to run on Platform Blue you&#39;ll need to provide your own build environment and PlatformBlue.h file due to NDA requirements (see Core.h for further info).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For build instructions go to the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Build/README.md&#34;&gt;Build&lt;/a&gt; section. When upgrading from an older version of the library go to the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/ReleaseNotes.md&#34;&gt;Release Notes&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/APIChanges.md&#34;&gt;API Changes&lt;/a&gt; sections.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in how Jolt scales with multiple CPUs and compares to other physics engines, take a look at &lt;a href=&#34;https://jrouwe.nl/jolt/JoltPhysicsMulticoreScaling.pdf&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assets - This folder contains assets used by the TestFramework, Samples and JoltViewer.&lt;/li&gt; &#xA; &lt;li&gt;Build - Contains everything needed to build the library, see the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Build/README.md&#34;&gt;Build&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Docs - Contains documentation for the library.&lt;/li&gt; &#xA; &lt;li&gt;HelloWorld - A simple application demonstrating how to use the Jolt Physics library.&lt;/li&gt; &#xA; &lt;li&gt;Jolt - All source code for the library is in this folder.&lt;/li&gt; &#xA; &lt;li&gt;JoltViewer - It is possible to record the output of the physics engine using the DebugRendererRecorder class (a .jor file), this folder contains the source code to an application that can visualize a recording. This is useful for e.g. visualizing the output of the PerformanceTest from different platforms. Currently available on Windows only.&lt;/li&gt; &#xA; &lt;li&gt;PerformanceTest - Contains a simple application that runs a &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/PerformanceTest.md&#34;&gt;performance test&lt;/a&gt; and collects timing information.&lt;/li&gt; &#xA; &lt;li&gt;Samples - This contains the sample application, see the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/Samples.md&#34;&gt;Samples&lt;/a&gt; section. Currently available on Windows only.&lt;/li&gt; &#xA; &lt;li&gt;TestFramework - A rendering framework to visualize the results of the physics engine. Used by Samples and JoltViewer. Currently available on Windows only.&lt;/li&gt; &#xA; &lt;li&gt;UnitTests - A set of unit tests to validate the behavior of the physics engine.&lt;/li&gt; &#xA; &lt;li&gt;WebIncludes - A number of JavaScript resources used by the internal profiling framework of the physics engine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bindings For Other Languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C &lt;a href=&#34;https://github.com/michal-z/zig-gamedev/tree/main/libs/zphysics/libs&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/amerkoleci/JoltPhysicsSharp/tree/main/src/joltc&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amerkoleci/JoltPhysicsSharp&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aecsocket/jolt-java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrouwe/JoltPhysics.js&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michal-z/zig-gamedev/tree/main/libs/zphysics&#34;&gt;Zig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations in Other Engines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/godot-jolt/godot-jolt&#34;&gt;Godot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Joshua-Ashton/VPhysics-Jolt&#34;&gt;Source Engine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/Docs/ProjectsUsingJolt.md&#34;&gt;a list of projects that use Jolt Physics here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcome! If you intend to make larger changes, please discuss first in the GitHub Discussion section. For non-trivial changes, we require that you agree to a &lt;a href=&#34;https://raw.githubusercontent.com/jrouwe/JoltPhysics/master/ContributorAgreement.md&#34;&gt;Contributor Agreement&lt;/a&gt;. When you create a PR, &lt;a href=&#34;https://cla-assistant.io/&#34;&gt;CLA assistant&lt;/a&gt; will prompt you to sign it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudflare/orange</title>
    <updated>2024-04-08T01:24:02Z</updated>
    <id>tag:github.com,2024-04-08:/cloudflare/orange</id>
    <link href="https://github.com/cloudflare/orange" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Orange Meets&lt;/h1&gt; &#xA;&lt;p&gt;Orange Meets is a demo application built using &lt;a href=&#34;https://developers.cloudflare.com/calls/&#34;&gt;Cloudflare Calls&lt;/a&gt;. To build your own WebRTC application using Cloudflare Calls, get started in the &lt;a href=&#34;https://dash.cloudflare.com/?to=/:account/calls&#34;&gt;Cloudflare Dashboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.orange.cloudflare.dev&#34;&gt;Try the demo here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudflare/orange/main/orange-meets.png&#34; alt=&#34;A screenshot showing a room in Orange Meets&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://dash.cloudflare.com/?to=/:account/calls&#34;&gt;Cloudflare Calls dashboard&lt;/a&gt; and create an application.&lt;/p&gt; &#xA;&lt;p&gt;Put these variables into &lt;code&gt;.dev.vars&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CALLS_APP_ID=&amp;lt;APP_ID_GOES_HERE&amp;gt;&#xA;CALLS_APP_SECRET=&amp;lt;SECRET_GOES_HERE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open up &lt;a href=&#34;http://127.0.0.1:8787&#34;&gt;http://127.0.0.1:8787&lt;/a&gt; and you should be ready to go!&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you&#39;ve installed &lt;code&gt;wrangler&lt;/code&gt; and are logged in by running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wrangler login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;account_id&lt;/code&gt; and &lt;code&gt;CALLS_APP_ID&lt;/code&gt; in &lt;code&gt;wrangler.toml&lt;/code&gt; to use your own Cloudflare Account ID and Calls App ID&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will also need to set the token as a secret by running:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wrangler secret put CALLS_APP_SECRET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Then you can run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run deploy&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>