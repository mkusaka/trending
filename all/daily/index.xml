<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-22T01:28:34Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linera-io/linera-protocol</title>
    <updated>2025-01-22T01:28:34Z</updated>
    <id>tag:github.com,2025-01-22:/linera-io/linera-protocol</id>
    <link href="https://github.com/linera-io/linera-protocol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main repository for the Linera protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/assets/1105398/fe08c941-93af-4114-bb83-bcc0eaec95f9&#34; width=&#34;250&#34; height=&#34;90&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/documentation.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/dynamodb.yml&#34;&gt;&lt;img src=&#34;https://github.com/linera-io/linera-protocol/actions/workflows/dynamodb.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status for DynamoDB&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Build Status for Kubernetes](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml/badge.svg)](https://github.com/linera-io/linera-protocol/actions/workflows/kubernetes.yml) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linera.io&#34;&gt;Linera&lt;/a&gt; is a decentralized blockchain infrastructure designed for highly scalable, low-latency Web3 applications.&lt;/p&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;https://linera.dev&#34;&gt;developer page&lt;/a&gt; and read our &lt;a href=&#34;https://linera.io/whitepaper&#34;&gt;whitepaper&lt;/a&gt; to learn more about the Linera protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;The main crates and directories of this repository can be summarized as follows: (listed from low to high levels in the dependency graph)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_base/index.html&#34;&gt;&lt;code&gt;linera-base&lt;/code&gt;&lt;/a&gt; Base definitions, including cryptography.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_version/index.html&#34;&gt;&lt;code&gt;linera-version&lt;/code&gt;&lt;/a&gt; A library to manage version infos in binaries and services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_views/index.html&#34;&gt;&lt;code&gt;linera-views&lt;/code&gt;&lt;/a&gt; A library mapping complex data structures onto a key-value store. The corresponding procedural macros are implemented in &lt;code&gt;linera-views-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_execution/index.html&#34;&gt;&lt;code&gt;linera-execution&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logics for runtime and execution of Linera applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_chain/index.html&#34;&gt;&lt;code&gt;linera-chain&lt;/code&gt;&lt;/a&gt; Persistent data and the corresponding logics for chains of blocks, certificates, and cross-chain messaging.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_storage/index.html&#34;&gt;&lt;code&gt;linera-storage&lt;/code&gt;&lt;/a&gt; Defines the storage abstractions for the protocol on top of &lt;code&gt;linera-chain&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_core/index.html&#34;&gt;&lt;code&gt;linera-core&lt;/code&gt;&lt;/a&gt; The core Linera protocol, including client and server logic, node synchronization, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_rpc/index.html&#34;&gt;&lt;code&gt;linera-rpc&lt;/code&gt;&lt;/a&gt; Defines the data-type for RPC messages (currently all client ↔ proxy ↔ chain ↔ chain interactions), and track the corresponding data schemas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_client/index.html&#34;&gt;&lt;code&gt;linera-client&lt;/code&gt;&lt;/a&gt; Library for writing Linera clients. Used for the command-line client and the node service in &lt;code&gt;linera-service&lt;/code&gt;, as well as the Web client in &lt;a href=&#34;https://github.com/linera-io/linera-web/&#34;&gt;&lt;code&gt;linera-web&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_service/index.html&#34;&gt;&lt;code&gt;linera-service&lt;/code&gt;&lt;/a&gt; Executable for clients (aka CLI wallets), proxy (aka validator frontend) and servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://linera-io.github.io/linera-protocol/linera_sdk/index.html&#34;&gt;&lt;code&gt;linera-sdk&lt;/code&gt;&lt;/a&gt; The library to develop Linera applications written in Rust for the Wasm virtual machine. The corresponding procedural macros are implemented in &lt;code&gt;linera-sdk-derive&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt; Examples of Linera applications written in Rust.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart with the Linera service CLI&lt;/h2&gt; &#xA;&lt;p&gt;The following commands set up a local test network and run some transfers between the microchains owned by a single wallet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Make sure to compile the Linera binaries and add them in the $PATH.&#xA;# cargo build -p linera-storage-service -p linera-service --bins --features storage-service&#xA;export PATH=&#34;$PWD/target/debug:$PATH&#34;&#xA;&#xA;# Import the optional helper function `linera_spawn_and_read_wallet_variables`.&#xA;source /dev/stdin &amp;lt;&amp;lt;&amp;lt;&#34;$(linera net helper 2&amp;gt;/dev/null)&#34;&#xA;&#xA;# Run a local test network with the default parameters and a number of microchains&#xA;# owned by the default wallet. (The helper function `linera_spawn_and_read_wallet_variables`&#xA;# is used to set the two environment variables LINERA_{WALLET,STORAGE}.)&#xA;linera_spawn_and_read_wallet_variables \&#xA;linera net up&#xA;&#xA;# Print the set of validators.&#xA;linera query-validators&#xA;&#xA;# Query the chain balance of some of the chains.&#xA;CHAIN1=&#34;e476187f6ddfeb9d588c7b45d3df334d5501d6499b3f9ad5595cae86cce16a65&#34;&#xA;CHAIN2=&#34;69705f85ac4c9fef6c02b4d83426aaaf05154c645ec1c61665f8e450f0468bc0&#34;&#xA;linera query-balance &#34;$CHAIN1&#34;&#xA;linera query-balance &#34;$CHAIN2&#34;&#xA;&#xA;# Transfer 10 units then 5 back&#xA;linera transfer 10 --from &#34;$CHAIN1&#34; --to &#34;$CHAIN2&#34;&#xA;linera transfer 5 --from &#34;$CHAIN2&#34; --to &#34;$CHAIN1&#34;&#xA;&#xA;# Query balances again&#xA;linera query-balance &#34;$CHAIN1&#34;&#xA;linera query-balance &#34;$CHAIN2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex examples may be found in our &lt;a href=&#34;https://linera.dev&#34;&gt;developer manual&lt;/a&gt; as well as the &lt;a href=&#34;https://raw.githubusercontent.com/linera-io/linera-protocol/main/examples&#34;&gt;example applications&lt;/a&gt; in this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emcie-co/parlant</title>
    <updated>2025-01-22T01:28:34Z</updated>
    <id>tag:github.com,2025-01-22:/emcie-co/parlant</id>
    <link href="https://github.com/emcie-co/parlant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The behavior guidance framework for customer-facing LLM agents&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;Parlant Logo&#34; src=&#34;https://github.com/emcie-co/parlant/raw/e0fefba25efd1b956ead881964025baae5dc4119/banner.png&#34;&gt; &#xA; &lt;h2&gt;Parlant: The Behavior Guidance Framework for Customer-Facing Agents&lt;/h2&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://www.parlant.io/&#34; target=&#34;_blank&#34;&gt;Website&lt;/a&gt; — &lt;a href=&#34;https://www.parlant.io/docs/quickstart/introduction&#34; target=&#34;_blank&#34;&gt;Introduction&lt;/a&gt; — &lt;a href=&#34;https://www.parlant.io/docs/quickstart/installation&#34; target=&#34;_blank&#34;&gt;Installation&lt;/a&gt; — &lt;a href=&#34;https://www.parlant.io/docs/tutorial/getting_started/overview&#34; target=&#34;_blank&#34;&gt;Tutorial&lt;/a&gt; — &lt;a href=&#34;https://www.parlant.io/docs/about&#34; target=&#34;_blank&#34;&gt;About&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://pypi.org/project/parlant/&#34; alt=&#34;Parlant on PyPi&#34;&gt;&lt;img alt=&#34;PyPI - Version&#34; src=&#34;https://img.shields.io/pypi/v/parlant&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;PyPI - Python Version&#34; src=&#34;https://img.shields.io/pypi/pyversions/parlant&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;Apache 2 License&#34; src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;GitHub commit activity&#34; src=&#34;https://img.shields.io/github/commit-activity/w/emcie-co/parlant?label=commits&#34;&gt; &lt;img alt=&#34;PyPI - Downloads&#34; src=&#34;https://img.shields.io/pypi/dm/parlant&#34;&gt; &lt;a href=&#34;https://discord.gg/duxWqxKk6J&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1312378700993663007?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;label=discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE:&lt;/strong&gt; Parlant is in active development by a team of (currently) 12 contributors (developers, researchers, and QA) from leading institutions, such as Microsoft, Check Point, and Dynamic Yield. We&#39;re looking for more contributors to help get customer-facing agents under control! Please consider joining our Discord server and participating in our development.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Take Control of AI Agent Decisions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parlant is a framework that transforms how AI agents make decisions in customer-facing scenarios.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With Parlant, you can not only spin up and serve an LLM agent in minutes—with a full-fledged &amp;amp; responsive conversation management API—but, more importantly, you can continuously guide and improve its decision making and general behavior, easily and reliably.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unlike traditional approaches that rely on prompt engineering or conversational flow charts, Parlant introduces a dynamic control system that ensures agents follow your specific business rules, in the form of behavioral guidelines that you provide, by matching and activating the appropriate combination of guidelines for every specific context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;    API(Parlant REST API) --&amp;gt;|React to Session Trigger| Engine[AI Response Engine]&#xA;    Engine --&amp;gt;|Load Domain Terminology| GlossaryStore&#xA;    Engine --&amp;gt;|Match Guidelines| GuidelineProposer&#xA;    Engine --&amp;gt;|Infer &amp;amp; Call Tools| ToolCaller&#xA;    Engine --&amp;gt;|Tailor Guided Message| MessageGenerator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When an agent needs to respond to a customer, Parlant&#39;s engine evaluates the situation, checks relevant guidelines, gathers necessary information through your tools, and continuously re-evaluates its approach based on your guidelines as new information emerges. When it&#39;s time to generate a message, Parlant implements self-critique mechanisms to ensure that the agent&#39;s responses precisely align with your intended behavior as given by the contextually-matched guidelines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;📚 More technical docs on the architecture and API are available under &lt;a href=&#34;https://raw.githubusercontent.com/emcie-co/parlant/develop/docs&#34;&gt;docs/&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📦 Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Parlant comes pre-built with responsive session (conversation) management, a detection mechanism for incoherence and contradictions in guidelines, content-filtering, jailbreak protection, an integrated sandbox UI for behavioral testing, native API clients in Python and TypeScript, and other goodies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install parlant&#xA;$ parlant-server&#xA;$ # Open the sandbox UI at http://localhost:8800 and play&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Parlant Preview&#34; src=&#34;https://github.com/emcie-co/parlant/raw/02c0e11116e03f3622077436ce9d61811bceb519/preview.gif&#34;&gt; &#xA;&lt;h2&gt;🙋‍♂️🙋‍♀️ Who Is Parlant For?&lt;/h2&gt; &#xA;&lt;p&gt;Parlant is the right tool for the job if you&#39;re building an LLM-based chat agent, and:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🎯 Your use case places a &lt;strong&gt;high importance on behavioral precision and consistency&lt;/strong&gt;, particularly in customer-facing scenarios&lt;/li&gt; &#xA; &lt;li&gt;🔄 Your agent is expected to undergo &lt;strong&gt;continuous behavioral refinements and changes&lt;/strong&gt;, and you need a way to implement those changes efficiently and confidently&lt;/li&gt; &#xA; &lt;li&gt;📈 You&#39;re expected to maintain a &lt;strong&gt;growing set of behavioral guidelines&lt;/strong&gt;, and you need to maintain them coherently and with version-tracking&lt;/li&gt; &#xA; &lt;li&gt;💬 Conversational UX and user-engagmeent is an important concern for your use case, and you want to easily &lt;strong&gt;control the flow and tone of conversations&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;⭐ Help Us Pick Up Pace!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#emcie-co/parlant&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=emcie-co/parlant&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤔 What Makes Parlant Different?&lt;/h2&gt; &#xA;&lt;p&gt;In a word: &lt;strong&gt;&lt;em&gt;Guidance.&lt;/em&gt;&lt;/strong&gt; 🧭🚦🤝&lt;/p&gt; &#xA;&lt;p&gt;Parlant&#39;s engine revolves around solving one key problem: How can we &lt;em&gt;reliably guide&lt;/em&gt; customer-facing agents to behave in alignment with our needs and intentions.&lt;/p&gt; &#xA;&lt;p&gt;Hence Parlant&#39;s fundamentally different approach to agent building: &lt;a href=&#34;https://www.parlant.io/docs/concepts/customization/guidelines&#34;&gt;Managed Guidelines&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ parlant guideline create \&#xA;    --agent-id MY_AGENT_ID \&#xA;    --condition &#34;the customer wants to return an item&#34; \&#xA;    --action &#34;get the order number and item name and then help them return it&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By giving structure to behavioral guidelines, and &lt;em&gt;granularizing&lt;/em&gt; guidelines (i.e. making each behavioral guideline a first-class entity in the engine), Parlant&#39;s engine is able to offer unprecedented control, quality, and efficiency in building LLM-based agents:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🛡️ &lt;strong&gt;Reliability:&lt;/strong&gt; Running focused self-critique in real-time, per guideline, to ensure it is actually followed&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;strong&gt;Explainability:&lt;/strong&gt; Providing feedback around its interpretation of guidelines in each real-life context, which helps in troubleshooting and improvement&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;strong&gt;Maintainability:&lt;/strong&gt; Helping you maintain a coherent set of guidelines by detecting and alerting you to possible contradictions (gross or subtle) in your instructions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🚀 Real-world impact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.revenued.com&#34;&gt;Revenued&lt;/a&gt;, a business capital provider, uses Parlant for their Sales Copilot. They leverage Parlant&#39;s structured CLI to modify the agent&#39;s behavior quickly and easily based on feedback from company stakeholders.&lt;/p&gt; &#xA;&lt;h2&gt;💪 Key benefits&lt;/h2&gt; &#xA;&lt;h3&gt;Control that actually works&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;: Control responses by writing contextual rules - like &#34;offer limited time coupons if it&#39;s a holiday&#34; or &#34;make it very clear we don&#39;t offer loans if a customer asks about it&#34;. By using condition/action definitions, you define exactly when and how your agent should respond&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Glossary&lt;/strong&gt;: Teach your agent your business-specific terminology so that both you and your customers can speak to it naturally in your language&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coherence checks&lt;/strong&gt;: Catch conflicts by having Parlant evaluate new guidelines against existing ones before they&#39;re applied&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic context&lt;/strong&gt;: Make your agent context-aware by setting user-specific variables like customer account or subscription tier. These shape how your agent responds to each user&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Guided tool use&lt;/strong&gt;: Control API access by linking tools to specific guidelines. This way, your agent only calls APIs when appropriate and with clear intent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developer friendly&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;See changes instantly&lt;/strong&gt;: Modify behavior on the fly by updating guidelines directly, no retraining or redeployment needed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Track changes in Git&lt;/strong&gt;: Manage agent behavior like code by storing configuration as JSON in your repo. Review, rollback, branch, and merge just like any other code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clean architecture&lt;/strong&gt;: Separate concerns by keeping business logic in tools and conversation patterns in guidelines. Each piece does what it does best&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type safety&lt;/strong&gt;: Build rapidly using native TypeScript/JavaScript SDKs with proper type definitions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploy with confidence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable at scale&lt;/strong&gt;: Parlant filters and selects guidelines per context, allowing you to scale your agent&#39;s complexity and use-cases while maintaining consistent, focused behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debug with ease&lt;/strong&gt;: Troubleshoot effectively by tracing which guidelines were applied and why for any given response&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Test before deploy&lt;/strong&gt;: Validate changes using the built-in chat UI to test new behaviors before they reach customers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤖 Works with all major LLM providers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/overview&#34;&gt;OpenAI&lt;/a&gt; (also via &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/&#34;&gt;Azure&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.google.dev/&#34;&gt;Gemini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.llama.com/&#34;&gt;Meta Llama 3&lt;/a&gt; (via &lt;a href=&#34;https://www.together.ai/&#34;&gt;Together AI&lt;/a&gt; or &lt;a href=&#34;https://cerebras.ai/&#34;&gt;Cerebras&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;Anthropic&lt;/a&gt; (also via &lt;a href=&#34;https://aws.amazon.com/bedrock/&#34;&gt;AWS Bedrock&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📚 Learning Parlant&lt;/h2&gt; &#xA;&lt;p&gt;To start learning and building with Parlant, visit our &lt;a href=&#34;https://parlant.io/docs/quickstart/introduction&#34;&gt;documentation portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Need help? Ask us anything on &lt;a href=&#34;https://discord.gg/duxWqxKk6J&#34;&gt;Discord&lt;/a&gt;. We&#39;re happy to answer questions and help you get up and running!&lt;/p&gt; &#xA;&lt;h2&gt;💻 Usage Example&lt;/h2&gt; &#xA;&lt;p&gt;Adding a guideline for an agent—for example, to ask a counter-question to get more info when a customer asks a question:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;parlant guideline create \&#xA;    --agent-id CUSTOMER_SUCCESS_AGENT_ID \&#xA;    --condition &#34;a free-tier customer is asking how to use our product&#34; \&#xA;    --action &#34;first seek to understand what they&#39;re trying to achieve&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Parlant, Customer-Agent interaction happens asynchronously, to enable more natural customer interactions, rather than forcing a strict and unnatural request-reply mode.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a basic example of a simple client (using the TypeScript client SDK):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { ParlantClient } from &#39;parlant-client&#39;;&#xA;&#xA;const client = ParlantClient({ environment: SERVER_ADDRESS });&#xA;&#xA;session_id = &#34;...&#34;;&#xA;&#xA;// Post customer message&#xA;const customerEvent = await client.sessions.createEvent(session_id, {&#xA;   kind: &#34;message&#34;,&#xA;   source: &#34;customer&#34;,&#xA;   message: &#34;How do you use this product?&#34;,&#xA;});&#xA;&#xA;// Wait for and get the agent&#39;s reply&#xA;const [agentEvent] = (await client.sessions.listEvents(session_id, {&#xA;   kinds: &#34;message&#34;,&#xA;   source: &#34;ai_agent&#34;,&#xA;   minOffset: customerEvent.offset,&#xA;   waitForData: 60 // Wait up to 60 seconds for an answer&#xA;}));&#xA;&#xA;// Print the agent&#39;s reply&#xA;const { agentMessage } = agentEvent.data as { message: string };&#xA;console.log(agentMessage);&#xA;&#xA;// Inspect the details of the message generation process&#xA;const { trace } = await client.sessions.inspectEvent(&#xA;   session_id,&#xA;   agentEvent.id&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👋 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We use the Linux-standard Developer Certificate of Origin (&lt;a href=&#34;https://raw.githubusercontent.com/emcie-co/parlant/develop/DCO.md&#34;&gt;DCO.md&lt;/a&gt;), so that, by contributing, you confirm that you have the rights to submit your contribution under the Apache 2.0 license (i.e., the code you&#39;re contributing is truly yours to share with the project).&lt;/p&gt; &#xA;&lt;p&gt;Please consult &lt;a href=&#34;https://raw.githubusercontent.com/emcie-co/parlant/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Can&#39;t wait to get involved? Join us on &lt;a href=&#34;https://discord.gg/duxWqxKk6J&#34;&gt;Discord&lt;/a&gt; and let&#39;s discuss how you can help shape Parlant. We&#39;re excited to work with contributors directly while we set up our formal processes!&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, feel free to start a discussion or open an issue here on GitHub—freestyle 😎.&lt;/p&gt;</summary>
  </entry>
</feed>