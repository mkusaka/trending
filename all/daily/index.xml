<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:26:35Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotnet-smartcomponents/smartcomponents</title>
    <updated>2024-03-24T01:26:35Z</updated>
    <id>tag:github.com,2024-03-24:/dotnet-smartcomponents/smartcomponents</id>
    <link href="https://github.com/dotnet-smartcomponents/smartcomponents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental, end-to-end AI features for .NET apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smart Components&lt;/h1&gt; &#xA;&lt;p&gt;Smart Components lets you &lt;strong&gt;add genuinely useful AI-powered features to your .NET apps quickly, easily, and without risking wasted effort.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to spend weeks of dev time redesigning your UX or researching machine learning and prompt engineering. Smart Components are prebuilt end-to-end AI features that you can drop into your existing UIs to upgrade them, truly making your app more productive for your end users.&lt;/p&gt; &#xA;&lt;p&gt;This is an experiment from the .NET team, and is initially available for &lt;strong&gt;ASP.NET Core 6.0 and later&lt;/strong&gt; with either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blazor&lt;/strong&gt; (see: &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/getting-started-blazor.md&#34;&gt;Getting started with Smart Controls and Blazor&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MVC / Razor Pages&lt;/strong&gt; (see: &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/getting-started-mvc-razor-pages.md&#34;&gt;Getting started with Smart Controls and MVC/Razor Pages&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We may add support for other UI tech (e.g., native apps) later, depending on feedback.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s included&lt;/h2&gt; &#xA;&lt;p&gt;The set of components and features may expand over time. Currently, Smart Components includes:&lt;/p&gt; &#xA;&lt;h3&gt;Smart Paste&lt;/h3&gt; &#xA;&lt;p&gt;A button that fills out forms automatically using data from the user&#39;s clipboard. You can use this with any existing form in your web app. This helps users add data from external sources without re-typing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/images/smart-paste-address.gif&#34; alt=&#34;Screen capture of Smart Paste feature&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn more: &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/smart-paste.md&#34;&gt;Smart Paste docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Smart TextArea&lt;/h3&gt; &#xA;&lt;p&gt;An intelligent upgrade to the traditional textarea. You can configure how it should autocomplete whole sentences using your own preferred tone, policies, URLs, and so on. This helps users type faster and not have to remember URLs etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/images/smart-textarea-hr.gif&#34; alt=&#34;Screen capture of Smart TextArea feature&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn more: &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/smart-textarea.md&#34;&gt;Smart TextArea docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Smart ComboBox&lt;/h3&gt; &#xA;&lt;p&gt;Upgrades the traditional combobox by making suggestions based on semantic matching. This helps users find what they&#39;re looking for.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/images/smart-combobox-expenses.gif&#34; alt=&#34;Screen capture of Smart ComboBox feature&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn more: &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/smart-combobox.md&#34;&gt;Smart ComboBox docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Local Embeddings&lt;/h3&gt; &#xA;&lt;p&gt;Computes the level of semantic similarity between two natural language strings, or finds the closest match from a set of candidates. &lt;strong&gt;This runs entirely locally on your server&#39;s CPU&lt;/strong&gt;, so doesn&#39;t need any external AI service.&lt;/p&gt; &#xA;&lt;p&gt;Example: evaluating the semantic similarity between two strings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var article1 = embedder.Embed(&#34;Vacation allowance policy&#34;);&#xA;var article2 = embedder.Embed(&#34;Returning a company vehicle&#34;);&#xA;var article3 = embedder.Embed(&#34;How to get your boss fired&#34;);&#xA;&#xA;var searchTerm = embedder.Embed(&#34;car&#34;);&#xA;Console.WriteLine(searchTerm.Similarity(article1)); // Outputs: 0.41&#xA;Console.WriteLine(searchTerm.Similarity(article2)); // Outputs: 0.70&#xA;Console.WriteLine(searchTerm.Similarity(article3)); // Outputs: 0.38&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: finding closest matches&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Find closest matches to &#34;ball game&#34;&#xA;var candidates = embedder.EmbedRange([&#34;Soccer&#34;, &#34;Tennis&#34;, &#34;Swimming&#34;, &#34;Horse riding&#34;, &#34;Golf&#34;, &#34;Gymnastics&#34;]);&#xA;&#xA;var closest = LocalEmbedder.FindClosest(&#xA;    embedder.Embed(&#34;ball game&#34;), candidates, maxResults: 3);&#xA;&#xA;Console.WriteLine(string.Join(&#34;, &#34;, closest)); // &#34;Soccer, Golf, Tennis&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike the others, this isn&#39;t a prebuilt end-to-end UI feature; it&#39;s a general capability you can use to power your own features, such as search or &lt;a href=&#34;https://en.wikipedia.org/wiki/Prompt_engineering#Retrieval-augmented_generation&#34;&gt;retrieval-augmented generation (RAG)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Learn more: &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/local-embeddings.md&#34;&gt;Local Embeddings docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running the samples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t already have it, install a current &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;.NET SDK for Windows, Linux, or Mac&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repo&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/dotnet-smartcomponents/smartcomponents.git&#xA;cd smartcomponents&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to run the Smart Paste or Smart TextArea samples, edit the &lt;code&gt;RepoSharedConfig.json&lt;/code&gt; file at the root of the solution to add your API key. See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/configure-openai-backend.md&#34;&gt;How to configure an OpenAI backend&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can skip this if you only want to run the Smart ComboBox or Local Embeddings samples, since they run entirely locally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run it&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd samples/ExampleBlazorApp&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once you&#39;re ready to add Smart Components to your own app, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/getting-started-blazor.md&#34;&gt;Getting started with Smart Controls and Blazor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-smartcomponents/smartcomponents/main/docs/getting-started-mvc-razor-pages.md&#34;&gt;Getting started with Smart Controls and MVC/Razor Pages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback and support&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of this experiment is to assess whether/how the .NET community would want to use prebuilt UI components for AI features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please give us your feedback, even if it&#39;s just to say &#34;&lt;em&gt;Yes I want this&lt;/em&gt;&#34; or &#34;&lt;em&gt;I won&#39;t use this because...&lt;/em&gt;&#34;&lt;/strong&gt;. To give feedback, &lt;a href=&#34;https://github.com/dotnet-smartcomponents/smartcomponents/issues&#34;&gt;post an issue here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Smart Components isn&#39;t yet an officially supported part of .NET. Whether or not it graduates to full support depends on community feedback and usage levels.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jgthms/bulma</title>
    <updated>2024-03-24T01:26:35Z</updated>
    <id>tag:github.com,2024-03-24:/jgthms/bulma</id>
    <link href="https://github.com/jgthms/bulma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern CSS framework based on Flexbox&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://bulma.io&#34;&gt;Bulma&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Bulma is a &lt;strong&gt;modern CSS framework&lt;/strong&gt; based on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&#34;&gt;Flexbox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/jgthms/bulma?logo=Bulma&#34; alt=&#34;Github&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/bulma&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/bulma.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/bulma&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/bulma.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/bulma&#34;&gt;&lt;img src=&#34;https://data.jsdelivr.com/v1/package/npm/bulma/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/awesome-css-group/awesome-css&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/jgthms/bulma&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/jgthms/bulma.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/jgthms/bulma&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/jgthms/bulma&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jgthms/bulma.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bulma.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jgthms/bulma/master/docs/images/bulma-banner.png&#34; alt=&#34;Bulma: a Flexbox CSS framework&#34; style=&#34;max-width:100%;&#34; width=&#34;600&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick install&lt;/h2&gt; &#xA;&lt;p&gt;Bulma is constantly in development! Try it out now:&lt;/p&gt; &#xA;&lt;h3&gt;NPM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install bulma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Yarn&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add bulma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bower&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bower install bulma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Import&lt;/h3&gt; &#xA;&lt;p&gt;After installation, you can import the CSS file into your project using this snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;@import &#39;bulma/css/bulma.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jsdelivr.com/package/npm/bulma&#34;&gt;https://www.jsdelivr.com/package/npm/bulma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to raise an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;CSS only&lt;/h2&gt; &#xA;&lt;p&gt;Bulma is a &lt;strong&gt;CSS&lt;/strong&gt; framework. As such, the sole output is a single CSS file: &lt;a href=&#34;https://github.com/jgthms/bulma/raw/master/css/bulma.css&#34;&gt;bulma.css&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can either use that file, &#34;out of the box&#34;, or download the Sass source files to customize the &lt;a href=&#34;https://bulma.io/documentation/overview/variables/&#34;&gt;variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is &lt;strong&gt;no&lt;/strong&gt; JavaScript included. People generally want to use their own JS implementation (and usually already have one). Bulma can be considered &#34;environment agnostic&#34;: it&#39;s just the style layer on top of the logic.&lt;/p&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;p&gt;Bulma uses &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;autoprefixer&lt;/a&gt; to make (most) Flexbox features compatible with earlier browser versions. According to &lt;a href=&#34;https://caniuse.com/#feat=flexbox&#34;&gt;Can I use&lt;/a&gt;, Bulma is compatible with &lt;strong&gt;recent&lt;/strong&gt; versions of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome&lt;/li&gt; &#xA; &lt;li&gt;Edge&lt;/li&gt; &#xA; &lt;li&gt;Firefox&lt;/li&gt; &#xA; &lt;li&gt;Opera&lt;/li&gt; &#xA; &lt;li&gt;Safari&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internet Explorer (10+) is only partially supported.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation resides in the &lt;a href=&#34;https://raw.githubusercontent.com/jgthms/bulma/main/docs&#34;&gt;docs&lt;/a&gt; directory, and is built with the Ruby-based &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;p&gt;Browse the &lt;a href=&#34;https://bulma.io/documentation/start/overview/&#34;&gt;online documentation here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/j5bot/bulma-attribute-selectors&#34;&gt;Bulma with Attribute Modules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds support for attribute-based selectors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/joshuajansen/bulma-rails&#34;&gt;Bulma with Rails&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integrates Bulma with the rails asset pipeline&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/loogn/bulmarazor&#34;&gt;BulmaRazor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A lightweight component library based on Bulma and Blazor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vue-bulma/vue-admin&#34;&gt;Vue Admin (dead)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vue Admin framework powered by Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jenil/bulmaswatch&#34;&gt;Bulmaswatch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free themes for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Caiyeon/goldfish&#34;&gt;Goldfish (read-only)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vault UI with Bulma, Golang, and Vue Admin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/open-tux/ember-bulma&#34;&gt;ember-bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ember addon providing a collection of UI components for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bloomer.js.org&#34;&gt;Bloomer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A set of React components for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kulakowka/react-bulma&#34;&gt;React-bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;React.js components for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://buefy.org/&#34;&gt;Buefy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lightweight UI components for Vue.js based on Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vouill/vue-bulma-components&#34;&gt;vue-bulma-components&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma components for Vue.js with straightforward syntax&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VizuaaLOG/BulmaJS&#34;&gt;BulmaJS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Javascript integration for Bulma. Written in ES6 with a data-* API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/postare/bulma-modal-fx&#34;&gt;Bulma-modal-fx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A set of modal window effects with CSS transitions and animations for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groenroos/bulma-stylus&#34;&gt;Bulma Stylus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Up-to-date 1:1 translation to Stylus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/log1x/bulma.styl&#34;&gt;Bulma.styl (read-only)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1:1 Stylus translation of Bulma 0.6.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/surprisetalk/elm-bulma&#34;&gt;elm-bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma + Elm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ahstro/elm-bulma-classes&#34;&gt;elm-bulma-classes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma classes prepared for usage with Elm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bulma-customizer.bstash.io/&#34;&gt;Bulma Customizer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma Customizer – Create your own &lt;strong&gt;bespoke&lt;/strong&gt; Bulma build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://fulma.github.io/Fulma/&#34;&gt;Fulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Wrapper around Bulma for &lt;a href=&#34;https://github.com/fable-compiler/fable-react&#34;&gt;fable-react&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laravel-enso/enso&#34;&gt;Laravel Enso&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SPA Admin Panel built with Bulma, VueJS and Laravel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/timonweb/django-bulma&#34;&gt;Django Bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integrates Bulma with Django&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dansup/bulma-templates&#34;&gt;Bulma Templates&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free Templates for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/couds/react-bulma-components&#34;&gt;React Bulma Components&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Another React wrap on React for Bulma.io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sectore/purescript-bulma&#34;&gt;purescript-bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PureScript bindings for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/laravel-enso/vuedatatable&#34;&gt;Vue Datatable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma themed datatable based on Vue, Laravel &amp;amp; JSON templates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mubaidr.github.io/bulma-fluent/&#34;&gt;bulma-fluent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fluent Design Theme for Bulma inspired by Microsoft’s Fluent Design System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/4d11/csskrt-csskrt&#34;&gt;csskrt-csskrt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically add Bulma classes to HTML files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hipstersmoothie/bulma-pagination-react&#34;&gt;bulma-pagination-react&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma pagination as a react component&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jmaczan/bulma-helpers&#34;&gt;bulma-helpers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functional / Atomic CSS classes for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hipstersmoothie/bulma-swatch-hook&#34;&gt;bulma-swatch-hook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma swatches as a react hook and a component&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tomhrtly/BulmaWP&#34;&gt;BulmaWP (read-only)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starter WordPress theme for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aldi/ralma&#34;&gt;Ralma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stateless Ractive.js Components for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/python-discord/django-simple-bulma&#34;&gt;Django Simple Bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lightweight integration of Bulma and Bulma-Extensions for your Django app&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dfee.github.io/rbx&#34;&gt;rbx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comprehensive React UI Framework written in TypeScript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aldi/awesome-bulma-templates&#34;&gt;Awesome Bulma Templates&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free real-world Templates built with Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fibo/trunx&#34;&gt;Trunx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Super Saiyan React components, son of awesome Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/web-padawan/aybolit/tree/master/packages/bulma&#34;&gt;@aybolit/bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Web Components library inspired by Bulma and Bulma-extensions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.drupal.org/project/drulma&#34;&gt;Drulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drupal theme for Bulma.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/textbook/bulrush&#34;&gt;Bulrush&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Bulma-based Python Pelican blog theme&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/service-paradis/bulma-variables-export&#34;&gt;Bulma Variable Export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Access Bulma Variables in Javascript/Typescript in project using Webpack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gomah/bulmil&#34;&gt;Bulmil&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An agnostic UI components library based on Web Components, made with Bulma &amp;amp; Stencil.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elcobvg/svelte-bulma-components&#34;&gt;Svelte Bulma Components&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Library of UI components to be used in &lt;a href=&#34;https://svelte.technology/&#34;&gt;Svelte.js&lt;/a&gt; or standalone.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benninkcorien/nunjucks-starter-kit&#34;&gt;Bulma Nunjucks Starterkit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starterkit for Nunjucks with Bulma.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aldi/bulma-social&#34;&gt;Bulma-Social&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Social Buttons and Colors for Bulma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://divjoy.com/?kit=bulma&#34;&gt;Divjoy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;React codebase generator with Bulma templates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Megabit/Blazorise&#34;&gt;Blazorise&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blazor component library with the support for Bulma CSS framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/oruga-ui/theme-bulma&#34;&gt;Oruga-Bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma theme for &lt;a href=&#34;https://oruga.io&#34;&gt;Oruga UI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/daniil4udo/bulvar/tree/master/packages/bulma&#34;&gt;@bulvar/bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&#34;&gt;CSS Variables&lt;/a&gt; support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://quinnjr.github.io/angular-bulma&#34;&gt;@angular-bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://angular.io/&#34;&gt;Angular&lt;/a&gt; directives and components to use in your Bulma projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eliutdev/bulma-css-class-completion&#34;&gt;Bulma CSS Class Completion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CSS class name completion for the HTML class attribute based on Bulma CSS classes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ckrybus/crispy-bulma&#34;&gt;Crispy-Bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bulma template pack for django-crispy-forms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://case.app&#34;&gt;CASE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CASE is Lightweight Backend-as-a-Service with essential features: DB, Admin panel, API, JS SDK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NicolasOmar/reactive-bulma&#34;&gt;Reactive Bulma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A component library based on React, Bulma, Typescript and Rollup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Copyright and license &lt;img src=&#34;https://img.shields.io/github/license/jgthms/bulma?logo=Github&#34; alt=&#34;Github&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Code copyright 2023 Jeremy Thomas. Code released under &lt;a href=&#34;https://github.com/jgthms/bulma/raw/master/LICENSE&#34;&gt;the MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenInterpreter/01</title>
    <updated>2024-03-24T01:26:35Z</updated>
    <id>tag:github.com,2024-03-24:/OpenInterpreter/01</id>
    <link href="https://github.com/OpenInterpreter/01" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open-source language model computer&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;○&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/Hvz9Axh84z&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1146610656779440188?logo=discord&amp;amp;style=social&amp;amp;logoColor=black&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;The open-source language model computer.&lt;/strong&gt;&lt;br&gt; &#xA; &lt;!-- &lt;br&gt;&lt;a href=&#34;https://openinterpreter.com&#34;&gt;Preorder the Light&lt;/a&gt;‎ ‎ |‎ ‎ &lt;a href=&#34;https://openinterpreter.com&#34;&gt;Get Updates&lt;/a&gt;‎ ‎ |‎ ‎ &lt;a href=&#34;https://docs.openinterpreter.com/&#34;&gt;Documentation&lt;/a&gt;&lt;br&gt; --&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.openinterpreter.com/OI-O1-BannerDemo-3.jpg&#34; alt=&#34;OI-O1-BannerDemo-2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We want to help you build. &lt;a href=&#34;https://0ggfznkwh4j.typeform.com/to/kkStE8WF&#34;&gt;Apply for 1-on-1 support.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;WARNING:&lt;/strong&gt; This experimental project is under rapid development and lacks basic safeguards. Until a stable &lt;code&gt;1.0&lt;/code&gt; release, &lt;strong&gt;ONLY&lt;/strong&gt; run this repository on devices without sensitive information or access to paid services. ⚠️&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;The 01 Project&lt;/strong&gt; is building an open-source ecosystem for AI devices.&lt;/p&gt; &#xA;&lt;p&gt;Our flagship operating system can power conversational devices like the Rabbit R1, Humane Pin, or &lt;a href=&#34;https://www.youtube.com/watch?v=1ZXugicgn6U&#34;&gt;Star Trek computer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We intend to become the GNU/Linux of this space by staying open, modular, and free.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Software&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/OpenInterpreter/01 # Clone the repository&#xA;cd 01/software # CD into the source directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &gt; Not working? Read our [setup guide](https://docs.openinterpreter.com/getting-started/setup). --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install portaudio ffmpeg cmake # Install Mac OSX dependencies&#xA;poetry install # Install Python dependencies&#xA;export OPENAI_API_KEY=sk... # OR run `poetry run 01 --local` to run everything locally&#xA;poetry run 01 # Runs the 01 Light simulator (hold your spacebar, speak, release)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Hardware&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;strong&gt;01 Light&lt;/strong&gt; is an ESP32-based voice interface. &lt;a href=&#34;https://github.com/OpenInterpreter/01/tree/main/hardware/light&#34;&gt;Build instructions are here.&lt;/a&gt; It works in tandem with the &lt;strong&gt;01 Server&lt;/strong&gt; (&lt;a href=&#34;https://github.com/OpenInterpreter/01/raw/main/README.md#01-server&#34;&gt;setup guide below&lt;/a&gt;) running on your home computer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac OSX&lt;/strong&gt; and &lt;strong&gt;Ubuntu&lt;/strong&gt; are supported by running &lt;code&gt;poetry run 01&lt;/code&gt;. This uses your spacebar to simulate the 01 Light.&lt;/li&gt; &#xA; &lt;li&gt;(coming soon) The &lt;strong&gt;01 Heavy&lt;/strong&gt; is a standalone device that runs everything locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We need your help supporting &amp;amp; building more hardware.&lt;/strong&gt; The 01 should be able to run on any device with input (microphone, keyboard, etc.), output (speakers, screens, motors, etc.), and an internet connection (or sufficient compute to run everything locally). &lt;a href=&#34;https://github.com/OpenInterpreter/01/raw/main/CONTRIBUTING.md&#34;&gt;Contribution Guide →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;What does it do?&lt;/h1&gt; &#xA;&lt;p&gt;The 01 exposes a speech-to-speech websocket at &lt;code&gt;localhost:10001&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you stream raw audio bytes to &lt;code&gt;/&lt;/code&gt; in &lt;a href=&#34;https://docs.openinterpreter.com/protocols/lmc-messages&#34;&gt;LMC format&lt;/a&gt;, you will receive its response in the same format.&lt;/p&gt; &#xA;&lt;p&gt;Inspired in part by &lt;a href=&#34;https://twitter.com/karpathy/status/1723140519554105733&#34;&gt;Andrej Karpathy&#39;s LLM OS&lt;/a&gt;, we run a &lt;a href=&#34;https://github.com/OpenInterpreter/open-interpreter&#34;&gt;code-interpreting language model&lt;/a&gt;, and call it when certain events occur at your computer&#39;s &lt;a href=&#34;https://github.com/OpenInterpreter/01/raw/main/software/source/server/utils/kernel.py&#34;&gt;kernel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The 01 wraps this in a voice interface:&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img width=&#34;100%&#34; alt=&#34;LMC&#34; src=&#34;https://github.com/OpenInterpreter/01/assets/63927363/52417006-a2ca-4379-b309-ffee3509f5d4&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Protocols&lt;/h1&gt; &#xA;&lt;h2&gt;LMC Messages&lt;/h2&gt; &#xA;&lt;p&gt;To communicate with different components of this system, we introduce &lt;a href=&#34;https://docs.openinterpreter.com/protocols/lmc-messages&#34;&gt;LMC Messages&lt;/a&gt; format, which extends OpenAI’s messages format to include a &#34;computer&#34; role.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic System Messages&lt;/h2&gt; &#xA;&lt;p&gt;Dynamic System Messages enable you to execute code inside the LLM&#39;s system message, moments before it appears to the AI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Edit the following settings in i.py&#xA;interpreter.system_message = r&#34; The time is {{time.time()}}. &#34; # Anything in double brackets will be executed as Python&#xA;interpreter.chat(&#34;What time is it?&#34;) # It will know, without making a tool/API call&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Guides&lt;/h1&gt; &#xA;&lt;h2&gt;01 Server&lt;/h2&gt; &#xA;&lt;p&gt;To run the server on your Desktop and connect it to your 01 Light, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install ngrok/ngrok/ngrok&#xA;ngrok authtoken ... # Use your ngrok authtoken&#xA;poetry run 01 --server --expose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The final command will print a server URL. You can enter this into your 01 Light&#39;s captive WiFi portal to connect to your 01 Server.&lt;/p&gt; &#xA;&lt;h2&gt;Local Mode&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;poetry run 01 --local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run local speech-to-text using Whisper, you must install Rust. Follow the instructions given &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customizations&lt;/h2&gt; &#xA;&lt;p&gt;To customize the behavior of the system, edit the &lt;a href=&#34;https://docs.openinterpreter.com/settings/all-settings&#34;&gt;system message, model, skills library path,&lt;/a&gt; etc. in &lt;code&gt;i.py&lt;/code&gt;. This file sets up an interpreter, and is powered by Open Interpreter.&lt;/p&gt; &#xA;&lt;h2&gt;Ubuntu Dependencies&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install portaudio19-dev ffmpeg cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenInterpreter/01/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=OpenInterpreter/01&amp;amp;max=2000&#34; alt=&#34;01 project contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/01/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for more details on how to get involved.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/01/main/ROADMAP.md&#34;&gt;our roadmap&lt;/a&gt; to see the future of the 01.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/KillianLucas/01/raw/main/CONTEXT.md&#34;&gt;Context ↗&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The story of devices that came before the 01.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/KillianLucas/01/tree/main/INSPIRATION.md&#34;&gt;Inspiration ↗&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Things we want to steal great ideas from.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;○&lt;/p&gt;</summary>
  </entry>
</feed>