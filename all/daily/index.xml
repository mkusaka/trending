<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-30T01:29:01Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>localsend/localsend</title>
    <updated>2023-01-30T01:29:01Z</updated>
    <id>tag:github.com,2023-01-30:/localsend/localsend</id>
    <link href="https://github.com/localsend/localsend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source cross-platform alternative to AirDrop&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LocalSend&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/localsend/localsend/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Links: &lt;a href=&#34;https://localsend.org&#34;&gt;Homepage&lt;/a&gt; | &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.localsend.localsend_app&#34;&gt;Play Store&lt;/a&gt; | &lt;a href=&#34;https://f-droid.org/packages/org.localsend.localsend_app&#34;&gt;F-Droid&lt;/a&gt; | &lt;a href=&#34;https://apps.apple.com/us/app/localsend/id1661733229&#34;&gt;App Store&lt;/a&gt; | &lt;a href=&#34;https://www.microsoft.com/store/apps/9NCB4Z0TZ6RR&#34;&gt;Windows Store&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Share files to nearby devices. Free, open source, cross-platform.&lt;/p&gt; &#xA;&lt;p&gt;This app allows you to send files and messages over the local LAN network.&lt;/p&gt; &#xA;&lt;p&gt;No internet required, no external servers needed.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;div style=&#34;display:flex&#34;&gt; &#xA; &lt;img src=&#34;https://localsend.org/img/screenshot-iphone.png&#34; alt=&#34;screenshot1&#34; height=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://localsend.org/img/screenshot-pc.png&#34; alt=&#34;screenshot2&#34; height=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Protocol&lt;/h2&gt; &#xA;&lt;p&gt;Devices communicate with each other using a REST API.&lt;/p&gt; &#xA;&lt;p&gt;Everything is sent securely over HTTPS. The TLS/SSL certificate is generated on the fly on each device.&lt;/p&gt; &#xA;&lt;p&gt;For more information: &lt;a href=&#34;https://github.com/localsend/protocol&#34;&gt;LocalSend Protocol v1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;After you have installed &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;, then you can start this app by typing the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter pub get&#xA;flutter pub run build_runner build&#xA;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Translation&lt;/h3&gt; &#xA;&lt;p&gt;You can help translating this app to other languages!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Preparation &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Add missing translations in existing languages: &lt;a href=&#34;https://github.com/localsend/localsend/raw/main/assets/i18n/_missing_translations.json&#34;&gt;assets/i18n/_missing_translations.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Fix existing translations in &lt;a href=&#34;https://github.com/localsend/localsend/tree/main/assets/i18n&#34;&gt;assets/i18n&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add new languages: &lt;a href=&#34;https://saimana.com/list-of-country-locale-code/&#34;&gt;locale codes&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fork this repository&lt;/li&gt; &#xA; &lt;li&gt;Create or update the translation file in &lt;a href=&#34;https://github.com/localsend/localsend/tree/main/assets/i18n&#34;&gt;assets/i18n&lt;/a&gt; (format: &lt;code&gt;strings_XXX.i18n.json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optional: Re-run this app &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Make sure you have &lt;a href=&#34;https://raw.githubusercontent.com/localsend/localsend/main/#run&#34;&gt;run&lt;/a&gt; this app once.&lt;/li&gt; &#xA;   &lt;li&gt;Update translations via &lt;code&gt;flutter pub run slang&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Run app via &lt;code&gt;flutter run&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For convenience, you can use this link: &lt;a href=&#34;https://github.com/localsend/localsend/new/main/assets/i18n&#34;&gt;https://github.com/localsend/localsend/new/main/assets/i18n&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bug fixes&lt;/h3&gt; &#xA;&lt;p&gt;Any bug fix is welcome! Please describe how and why your fix is needed in the PR.&lt;/p&gt; &#xA;&lt;h3&gt;Improvements&lt;/h3&gt; &#xA;&lt;p&gt;This app is very simple and should stay that way.&lt;/p&gt; &#xA;&lt;p&gt;Please create an issue first so we can discuss why this improvement is needed.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;These commands are mostly for the maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please ensure that &lt;code&gt;flutter pub run build_runner build&lt;/code&gt; has been run. Otherwise, files will be missing.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Traditional APK&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AppBundle for Google Play&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build appbundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build ipa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Traditional&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Local MSIX App&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter pub run msix:create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Store ready&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter pub run msix:create --store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Traditional&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;AppImage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;appimage-builder --recipe AppImageBuilder.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Snap&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to open a pull request. There is a &lt;code&gt;snap&lt;/code&gt; branch to play with.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fathyb/carbonyl</title>
    <updated>2023-01-30T01:29:01Z</updated>
    <id>tag:github.com,2023-01-30:/fathyb/carbonyl</id>
    <link href="https://github.com/fathyb/carbonyl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chromium running inside your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;carbonyl&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Carbonyl is a Chromium based browser built to run in a terminal. &lt;a href=&#34;https://fathy.fr/carbonyl&#34;&gt;Read the blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It supports pretty much all Web APIs including WebGL, WebGPU, audio and video playback, animations, etc..&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s snappy, starts in less than a second, runs at 60 FPS, and idles at 0% CPU usage. It does not require a window server (i.e. works in a safe-mode console), and even runs through SSH.&lt;/p&gt; &#xA;&lt;p&gt;Carbonyl originally started as &lt;a href=&#34;https://github.com/fathyb/html2svg&#34;&gt;&lt;code&gt;html2svg&lt;/code&gt;&lt;/a&gt; and is now the runtime behind it.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Watch YouTube inside a Docker container&#xA;$ docker run -ti fathyb/carbonyl https://youtube.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://user-images.githubusercontent.com/5746414/213682926-f1cc2de7-a38c-4125-9257-92faecfc7e24.mp4&#34;&gt; &#xA;    &lt;/video&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://user-images.githubusercontent.com/5746414/213682913-398d3d11-1af8-4ae6-a0cd-a7f878efd88b.mp4&#34;&gt; &#xA;    &lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; &#xA;    &lt;video src=&#34;https://user-images.githubusercontent.com/5746414/213682918-d6396a4f-ee23-431d-828e-4ad6a00e690e.mp4&#34;&gt; &#xA;    &lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Know issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fullscreen mode not supported yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Few notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to build Chromium&lt;/li&gt; &#xA; &lt;li&gt;Building Carbonyl is almost the same as building Chromium with extra steps to patch and bundle the Rust library. Scripts in the &lt;code&gt;scripts/&lt;/code&gt; directory are simple wrappers around &lt;code&gt;gn&lt;/code&gt;, &lt;code&gt;ninja&lt;/code&gt;, etc..&lt;/li&gt; &#xA; &lt;li&gt;Building Chromium for arm64 on Linux requires an amd64 processor&lt;/li&gt; &#xA; &lt;li&gt;Carbonyl is only tested on Linux and macOS, other platforms likely require code changes to Chromium&lt;/li&gt; &#xA; &lt;li&gt;Chromium is huge and takes a long time to build, making your computer mostly unresponsive. An 8-core CPU such as an M1 Max or an i9 9900k with 10 Gbps fiber takes around ~1 hour to fetch and build. It requires around 100 GB of disk space.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fetch&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Fetch Chromium&#39;s code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./scripts/gclient.sh sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apply patches&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Any changes made to Chromium will be reverted, make sure to save any changes you made.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./scripts/patches.sh apply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./scripts/gn.sh args out/Default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Default&lt;/code&gt; is the target name, you can use multiple ones and pick any name you&#39;d like, i.e.:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./scripts/gn.sh args out/release&#xA;$ ./scripts/gn.sh args out/debug&#xA;# or if you&#39;d like to build a multi-platform image&#xA;$ ./scripts/gn.sh args out/arm64&#xA;$ ./scripts/gn.sh args out/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When prompted, enter the following arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gn&#34;&gt;import(&#34;//carbonyl/src/browser/args.gn&#34;)&#xA;&#xA;# uncomment this to build for arm64&#xA;# target_cpu=&#34;arm64&#34;&#xA;&#xA;# uncomment this to enable ccache&#xA;# cc_wrapper=&#34;env CCACHE_SLOPPINESS=time_macros ccache&#34;&#xA;&#xA;# uncomment this if you&#39;re building for macOS&#xA;# use_lld=false&#xA;&#xA;# uncomment this for a release build&#xA;# is_debug=false&#xA;# symbol_level=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build binaries&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./scripts/build.sh Default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should produce the following outputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;out/Default/headless_shell&lt;/code&gt;: browser binary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out/Default/icudtl.dat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out/Default/libEGL.so&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out/Default/libGLESv2.so&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out/Default/v8_context_snapshot.bin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Docker image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Build arm64 Docker image using binaries from the Default target&#xA;$ ./scripts/docker.sh arm64 Default&#xA;# Build amd64 Docker image using binaries from the Default target&#xA;$ ./scripts/docker.sh amd64 Default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./scripts/run.sh Default https://wikipedia.org&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hwchase17/chat-langchain</title>
    <updated>2023-01-30T01:29:01Z</updated>
    <id>tag:github.com,2023-01-30:/hwchase17/chat-langchain</id>
    <link href="https://github.com/hwchase17/chat-langchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatLangChain&lt;/h1&gt; &#xA;&lt;p&gt;This repo is an implementation of a chatbot specifically focused on question answering over the &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/&#34;&gt;LangChain documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Important Links&lt;/h2&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://chat.langchain.dev&#34;&gt;chat.langchain.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hugging Face Spage: &lt;a href=&#34;https://huggingface.co/spaces/hwchase17/chat-langchain&#34;&gt;huggingface.co/spaces/hwchase17/chat-langchain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Post: &lt;a href=&#34;https://blog.langchain.dev/langchain-chat/&#34;&gt;blog.langchain.dev/langchain-chat/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📚 Technical description&lt;/h2&gt; &#xA;&lt;p&gt;There are two components: ingestion and question-answering.&lt;/p&gt; &#xA;&lt;p&gt;Ingestion has the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pull html from documentation site&lt;/li&gt; &#xA; &lt;li&gt;Parse html with BeautifulSoup&lt;/li&gt; &#xA; &lt;li&gt;Split documents with LangChain&#39;s &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/modules/utils/combine_docs_examples/textsplitter.html&#34;&gt;TextSplitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a vectorstore of embeddings, using LangChain&#39;s &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/modules/utils/combine_docs_examples/vectorstores.html&#34;&gt;vectorstore wrapper&lt;/a&gt; (with OpenAI&#39;s embeddings and Weaviate&#39;s vectorstore)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Question-Answering has the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Given the chat history and new user input, determine what a standalone question would be (using GPT-3)&lt;/li&gt; &#xA; &lt;li&gt;Given that standalone question, look up relevant documents from the vectorstore&lt;/li&gt; &#xA; &lt;li&gt;Pass the standalone question and relevant documents to GPT-3 to generate a final answer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🧠 How to Extend to your documentation&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon.&lt;/p&gt;</summary>
  </entry>
</feed>