<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-23T01:29:24Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kanaries/pygwalker</title>
    <updated>2023-02-23T01:29:24Z</updated>
    <id>tag:github.com,2023-02-23:/Kanaries/pygwalker</id>
    <link href="https://github.com/Kanaries/pygwalker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PyGWalker: Turn your pandas dataframe into a Tableau-style User Interface for visual analysis&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker&#34;&gt;&lt;img width=&#34;100%&#34; alt=&#34;&#34; src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/frontpage-rendered.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;PyGWalker: A Python Library for Exploratory Data Analysis with Visualization&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://badge.fury.io/py/pygwalker&#34;&gt; &lt;img src=&#34;https://badge.fury.io/py/pygwalker.svg?sanitize=true&#34; alt=&#34;PyPI version&#34; height=&#34;18&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/Kanaries/pygwalker/main&#34;&gt; &lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;binder&#34; height=&#34;18&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/Z4ngFWXz2U&#34;&gt; &lt;img alt=&#34;discord invitation link&#34; src=&#34;https://dcbadge.vercel.app/api/server/Z4ngFWXz2U?style=flat&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F&amp;amp;ref_src=twsrc%5Etfw&amp;amp;screen_name=kanaries_data&amp;amp;tw_p=followbutton&#34;&gt; &lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/kanaries_data?style=social&#34; align=&#34;center&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker&#34;&gt;&lt;strong&gt;PyGWalker&lt;/strong&gt;&lt;/a&gt; can simplify your Jupyter Notebook data analysis and data visualization workflow. By turning your pandas dataframe into a Tableau-style User Interface for visual exploration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PyGWalker&lt;/strong&gt; (pronounced like &#34;Pig Walker&#34;, just for fun) is named as an abbreviation of &#34;&lt;strong&gt;Py&lt;/strong&gt;thon binding of &lt;strong&gt;G&lt;/strong&gt;raphic &lt;strong&gt;Walker&lt;/strong&gt;&#34;. It integrates Jupyter Notebook (or other jupyter-based notebooks) with &lt;a href=&#34;https://github.com/Kanaries/graphic-walker&#34;&gt;Graphic Walker&lt;/a&gt;, a different type of open-source alternative to Tableau. It allows data scientists to analyze data and visualize patterns with simple drag-and-drop operations.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;Google Colab&lt;/a&gt;, &lt;a href=&#34;https://www.kaggle.com/asmdef/pygwalker-test&#34;&gt;Kaggle Code&lt;/a&gt;, &lt;a href=&#34;https://mybinder.org/v2/gh/Kanaries/pygwalker/main?labpath=tests%2Fmain.ipynb&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt; or &lt;a href=&#34;https://graphic-walker.kanaries.net/&#34;&gt;Graphic Walker Online Demo&lt;/a&gt; to test it out!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PyGWalker will add more support such as R in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Tested Environments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Notebook&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Google Colab&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kaggle Code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Lab (WIP: There&#39;re still some tiny CSS issues)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Databricks Notebook (Since version &lt;code&gt;0.1.4a0&lt;/code&gt;, needs more tests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jupyter Extension for Visual Studio Code (Since version &lt;code&gt;0.1.4a1&lt;/code&gt;, needs more tests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ...feel free to raise an issue for more environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; &lt;a href=&#34;https://www.kaggle.com/asmdef/pygwalker-test&#34;&gt;Run in Kaggle&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt; &lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;Run in Colab&lt;/a&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.kaggle.com/asmdef/pygwalker-test&#34;&gt; &lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/kaggle.png&#34; alt=&#34;Kaggle Code&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt; &lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/colab.png&#34; alt=&#34;Google Colab&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Setup pygwalker&lt;/h2&gt; &#xA;&lt;p&gt;Before using pygwalker, make sure to install the packages through the command line using pip.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pygwalker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;For an early trial, you could install with &lt;code&gt;pip install pygwalker --pre&lt;/code&gt; for pre-releases or even &lt;code&gt;pip install git+https://github.com/Kanaries/pygwalker@main&lt;/code&gt; to obtain latest features and bug-fixes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Use pygwalker in Jupyter Notebook&lt;/h2&gt; &#xA;&lt;p&gt;Import pygwalker and pandas to your Jupyter Notebook to get started.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;import pygwalker as pyg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use pygwalker without changing your existing workflow. For example, you can call up Graphic Walker with the dataframe loaded in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;./bike_sharing_dc.csv&#39;, parse_dates=[&#39;date&#39;])&#xA;gwalker = pyg.walk(df)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even try it online, simply visiting &lt;a href=&#34;https://mybinder.org/v2/gh/Kanaries/pygwalker/main?labpath=tests%2Fmain.ipynb&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt;, &lt;a href=&#34;https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing&#34;&gt;Google Colab&lt;/a&gt; or &lt;a href=&#34;https://www.kaggle.com/code/asmdef/notebook1cc9d36936&#34;&gt;Kaggle Code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- ![](https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/screenshot-top-img.png) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/1-8ms.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. Now you have a Tableau-like user interface to analyze and visualize data by dragging and dropping variables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/2-8ms.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.kanaries.net/graphic-walker/overview&#34;&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/drag-and-drop.gif&#34; alt=&#34;Manually explore your data with a Tableau-like UI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cool things you can do with Graphic Walker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can change the mark type into others to make different charts, for example, a line chart:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ![graphic walker line chart](https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-line-01.png) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/fullscreen-timeseries.png&#34; alt=&#34;graphic walker line chart&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To compare different measures, you can create a concat view by adding more than one measure into rows/columns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ![graphic walker area chart](https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-area-01.png) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/fullscreen2-timeseries-area.png&#34; alt=&#34;graphic walker area chart&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To make a facet view of several subviews divided by the value in dimension, put dimensions into rows or columns to make a facets view. The rules are similar to Tableau.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ![graphic walker scatter chart](https://docs-us.oss-us-west-1.aliyuncs.com/images/graphic-walker/gw-scatter-01.png) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/fullscreen-scatter-3.png&#34; alt=&#34;graphic walker scatter chart&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can save the data exploration result to a local file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more detailed instructions, visit the &lt;a href=&#34;https://github.com/Kanaries/graphic-walker&#34;&gt;Graphic Walker GitHub page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kanaries/pygwalker/raw/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out more resources about Graphic Walker on &lt;a href=&#34;https://github.com/Kanaries/graphic-walker&#34;&gt;Graphic Walker GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;We are also working on &lt;a href=&#34;https://kanaries.net&#34;&gt;RATH&lt;/a&gt;: an Open Source, Automate exploratory data analysis tool that redefines the workflow of data wrangling, exploration and visualization with AI-powered automation. Check out the &lt;a href=&#34;https://kanaries.net&#34;&gt;Kanaries website&lt;/a&gt; and &lt;a href=&#34;https://github.com/Kanaries/Rath&#34;&gt;RATH GitHub&lt;/a&gt; for more!&lt;/li&gt; &#xA; &lt;li&gt;If you encounter any issues and need support, join our &lt;a href=&#34;https://join.slack.com/t/kanaries/shared_invite/zt-1k60sgaxu-aGcuS7CwGeJUccE61iGopg&#34;&gt;Slack&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/Z4ngFWXz2U&#34;&gt;Discord&lt;/a&gt; channels.&lt;/li&gt; &#xA; &lt;li&gt;Share pygwalker on these social media platforms:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reddit.com/submit?url=https://github.com/Kanaries/pygwalker&amp;amp;title=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-like%20UI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-reddit-red?style=flat-square&amp;amp;logo=reddit&#34; alt=&#34;Reddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/submitlink?u=https://github.com/Kanaries/pygwalker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-hacker%20news-orange?style=flat-square&amp;amp;logo=ycombinator&#34; alt=&#34;HackerNews&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/share?url=https://github.com/Kanaries/pygwalker&amp;amp;text=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-like%20UI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-twitter-03A9F4?style=flat-square&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/sharer/sharer.php?u=https://github.com/Kanaries/pygwalker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-facebook-1976D2?style=flat-square&amp;amp;logo=facebook&#34; alt=&#34;Facebook&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/shareArticle?url=https://github.com/Kanaries/pygwalker&amp;amp;&amp;amp;title=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-like%20UI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-linkedin-3949AB?style=flat-square&amp;amp;logo=linkedin&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>amazon-science/mm-cot</title>
    <updated>2023-02-23T01:29:24Z</updated>
    <id>tag:github.com,2023-02-23:/amazon-science/mm-cot</id>
    <link href="https://github.com/amazon-science/mm-cot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official implementation for &#34;Multimodal Chain-of-Thought Reasoning in Language Models&#34; (stay tuned and more will be updated)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multimodal Chain-of-Thought Reasoning in Language Models&lt;/h1&gt; &#xA;&lt;h5 align=&#34;center&#34;&gt;&lt;i&gt;&#34;Imagine learning a textbook without figures or tables.&#34;&lt;/i&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Multimodal-CoT incorporates vision features in a decoupled training framework. The framework consists of two training stages: (i) rationale generation and (ii) answer inference. Both stages share the same model architecture but differ in the input and output.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amazon-science/mm-cot/main/vision_features/mm-cot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Install all required python dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Datasets&lt;/h2&gt; &#xA;&lt;p&gt;Download the dataset from the following repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/lupantech/ScienceQA/tree/main/data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the extracted vision features from &lt;a href=&#34;https://drive.google.com/file/d/13B0hc_F_45-UlqPLKSgRz-ALtFQ8kIJr/view?usp=share_link&#34;&gt;vision_features&lt;/a&gt; and unzip the files under &lt;code&gt;vision_features&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# rationale generation&#xA;CUDA_VISIBLE_DEVICES=0,1 python main.py \&#xA;    --model allenai/unifiedqa-t5-base \&#xA;    --user_msg rationale --img_type detr \&#xA;    --bs 8 --eval_bs 4 --eval_acc 10 --output_len 512 \&#xA;    --final_eval --prompt_format QCM-LE&#xA;&#xA;# answer inference&#xA;CUDA_VISIBLE_DEVICES=0,1 python main.py \&#xA;    --model allenai/unifiedqa-t5-base \&#xA;    --user_msg answer --img_type detr \&#xA;    --bs 8 --eval_bs 4 --eval_acc 10 --output_len 64 \&#xA;    --final_eval --prompt_format QCMG-A \&#xA;    --eval_le experiments/rationale_allenai-unifiedqa-t5-base_detr_QCM-LE_lr5e-05_bs16_op512_ep20/predictions_ans_eval.json \&#xA;    --test_le experiments/rationale_allenai-unifiedqa-t5-base_detr_QCM-LE_lr5e-05_bs16_op512_ep20/predictions_ans_test.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inference&lt;/h3&gt; &#xA;&lt;p&gt;Our trained models are available at &lt;a href=&#34;https://drive.google.com/file/d/1FtTYOJPHnWnFfCxNC6M3gar4RAX5E21b/view?usp=share_link&#34;&gt;models&lt;/a&gt;. To use our trained models, please put the them under the &lt;code&gt;models&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# rationale generation&#xA;CUDA_VISIBLE_DEVICES=0,1 python main.py \&#xA;    --model allenai/unifiedqa-t5-base \&#xA;    --user_msg rationale --img_type detr \&#xA;    --bs 8 --eval_bs 4 --eval_acc 10 --output_len 512 \&#xA;    --final_eval --prompt_format QCM-LE \&#xA;    --evaluate_dir models/MM-CoT-UnifiedQA-base-Rationale&#xA;&#xA;# answer inference&#xA;CUDA_VISIBLE_DEVICES=0,1 python main.py \&#xA;    --model allenai/unifiedqa-t5-base \&#xA;    --user_msg answer --img_type detr \&#xA;    --bs 8 --eval_bs 4 --eval_acc 10 --output_len 64 \&#xA;    --final_eval --prompt_format QCMG-A \&#xA;    --eval_le models/rationale/predictions_ans_eval.json \&#xA;    --test_le models/rationale/predictions_ans_test.json \&#xA;    --evaluate_dir models/MM-CoT-UnifiedQA-base-Answer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citing MM-CoT&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{zhang2023multicot,&#xA;  title={Multimodal Chain-of-Thought Reasoning in Language Models},&#xA;  author={Zhang, Zhuosheng and Zhang, Aston and Li, Mu and Zhao, Hai and Karypis, George and Smola, Alex},&#xA;  journal={arXiv preprint arXiv:2302.00923},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Part of our codes are adapted from &lt;a href=&#34;https://github.com/lupantech/ScienceQA&#34;&gt;ScienceQA&lt;/a&gt; and &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;Transformers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We thank Pan Lu for providing parameter size for ScienceQA baselines.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>total-typescript/ts-reset</title>
    <updated>2023-02-23T01:29:24Z</updated>
    <id>tag:github.com,2023-02-23:/total-typescript/ts-reset</id>
    <link href="https://github.com/total-typescript/ts-reset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A &#39;CSS reset&#39; for TypeScript, improving types for common JavaScript API&#39;s&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;ts-reset&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;TypeScript&#39;s built-in typings are not perfect. &lt;code&gt;ts-reset&lt;/code&gt; makes them better.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Without &lt;code&gt;ts-reset&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚨 &lt;code&gt;.json&lt;/code&gt; (in &lt;code&gt;fetch&lt;/code&gt;) and &lt;code&gt;JSON.parse&lt;/code&gt; both return &lt;code&gt;any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;🤦 &lt;code&gt;.filter(Boolean)&lt;/code&gt; doesn&#39;t behave how you expect&lt;/li&gt; &#xA; &lt;li&gt;😡 &lt;code&gt;array.includes&lt;/code&gt; often breaks on readonly arrays&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-reset&lt;/code&gt; smooths over these hard edges, just like a CSS reset does in the browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;ts-reset&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;👍 &lt;code&gt;.json&lt;/code&gt; (in &lt;code&gt;fetch&lt;/code&gt;) and &lt;code&gt;JSON.parse&lt;/code&gt; both return &lt;code&gt;unknown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;code&gt;.filter(Boolean)&lt;/code&gt; behaves EXACTLY how you expect&lt;/li&gt; &#xA; &lt;li&gt;🥹 &lt;code&gt;array.includes&lt;/code&gt; is widened to be more ergonomic&lt;/li&gt; &#xA; &lt;li&gt;🚀 And several more changes!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Import in a single file, then across your whole project...&#xA;import &#34;@total-typescript/ts-reset&#34;;&#xA;&#xA;// .filter just got smarter!&#xA;const filteredArray = [1, 2, undefined].filter(Boolean); // number[]&#xA;&#xA;// Get rid of the any&#39;s in JSON.parse and fetch&#xA;const result = JSON.parse(&#34;{}&#34;); // unknown&#xA;&#xA;fetch(&#34;/&#34;)&#xA;  .then((res) =&amp;gt; res.json())&#xA;  .then((json) =&amp;gt; {&#xA;    console.log(json); // unknown&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install: &lt;code&gt;npm i -D @total-typescript/ts-reset&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;reset.d.ts&lt;/code&gt; file in your project with these contents:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Enjoy improved typings across your &lt;em&gt;entire&lt;/em&gt; project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing only certain rules&lt;/h3&gt; &#xA;&lt;p&gt;By importing from &lt;code&gt;@total-typescript/ts-reset&lt;/code&gt;, you&#39;re bundling &lt;em&gt;all&lt;/em&gt; the recommended rules.&lt;/p&gt; &#xA;&lt;p&gt;To only import the rules you want, you can import like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// Makes JSON.parse return unknown&#xA;import &#34;@total-typescript/ts-reset/json-parse&#34;;&#xA;&#xA;// Makes await fetch().then(res =&amp;gt; res.json()) return unknown&#xA;import &#34;@total-typescript/ts-reset/fetch&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For these imports to work, you&#39;ll need to ensure that, in your &lt;code&gt;tsconfig.json&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt; is set to &lt;code&gt;NodeNext&lt;/code&gt; or &lt;code&gt;Node16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is a full list of all the rules available.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;Use &lt;code&gt;ts-reset&lt;/code&gt; in applications, not libraries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ts-reset&lt;/code&gt; is designed to be used in application code, not library code. Each rule you include will make changes to the global scope. That means that, simply by importing your library, your user will be unknowingly opting in to &lt;code&gt;ts-reset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;JSON.parse&lt;/code&gt; return &lt;code&gt;unknown&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/json-parse&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;JSON.parse&lt;/code&gt; returning &lt;code&gt;any&lt;/code&gt; can cause nasty, subtle bugs. Frankly, any &lt;code&gt;any&lt;/code&gt;&#39;s can cause bugs because they disable typechecking on the values they describe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const result = JSON.parse(&#34;{}&#34;); // any&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By changing the result of &lt;code&gt;JSON.parse&lt;/code&gt; to &lt;code&gt;unknown&lt;/code&gt;, we&#39;re now forced to either validate the &lt;code&gt;unknown&lt;/code&gt; to ensure it&#39;s the correct type (perhaps using &lt;a href=&#34;https://github.com/colinhacks/zod&#34;&gt;&lt;code&gt;zod&lt;/code&gt;&lt;/a&gt;), or cast it with &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/json-parse&#34;;&#xA;&#xA;const result = JSON.parse(&#34;{}&#34;); // unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;.json()&lt;/code&gt; return &lt;code&gt;unknown&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/fetch&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like &lt;code&gt;JSON.parse&lt;/code&gt;, &lt;code&gt;.json()&lt;/code&gt; returning &lt;code&gt;any&lt;/code&gt; introduces unwanted &lt;code&gt;any&lt;/code&gt;&#39;s into your application code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;fetch(&#34;/&#34;)&#xA;  .then((res) =&amp;gt; res.json())&#xA;  .then((json) =&amp;gt; {&#xA;    console.log(json); // any&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By forcing &lt;code&gt;res.json&lt;/code&gt; to return &lt;code&gt;unknown&lt;/code&gt;, we&#39;re encouraged to distrust its results, making us more likely to validate the results of &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/fetch&#34;;&#xA;&#xA;fetch(&#34;/&#34;)&#xA;  .then((res) =&amp;gt; res.json())&#xA;  .then((json) =&amp;gt; {&#xA;    console.log(json); // unknown&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;.filter(Boolean)&lt;/code&gt; filter out falsy values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/filter-boolean&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default behaviour of &lt;code&gt;.filter&lt;/code&gt; can feel pretty frustrating. Given the code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const filteredArray = [1, 2, undefined].filter(Boolean); // (number | undefined)[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It feels natural that TypeScript should understand that you&#39;ve filtered out the &lt;code&gt;undefined&lt;/code&gt; from &lt;code&gt;filteredArray&lt;/code&gt;. You can make this work, but you need to mark it as a type predicate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const filteredArray = [1, 2, undefined].filter((item): item is number =&amp;gt; {&#xA;  return !!item;&#xA;}); // number[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;.filter(Boolean)&lt;/code&gt; is a really common shorthand for this. So, this rule makes it so &lt;code&gt;.filter(Boolean)&lt;/code&gt; acts like a type predicate on the array passed in, removing any falsy values from the array member.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/filter-boolean&#34;;&#xA;&#xA;const filteredArray = [1, 2, undefined].filter(Boolean); // number[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;.includes&lt;/code&gt; on &lt;code&gt;as const&lt;/code&gt; arrays less strict&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/array-includes&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This rule improves on TypeScript&#39;s default &lt;code&gt;.includes&lt;/code&gt; behaviour. Without this rule enabled, the argument passed to &lt;code&gt;.includes&lt;/code&gt; MUST be a member of the array it&#39;s being tested against.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const users = [&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const;&#xA;&#xA;// Argument of type &#39;&#34;bryan&#34;&#39; is not assignable to&#xA;// parameter of type &#39;&#34;matt&#34; | &#34;sofia&#34; | &#34;waqas&#34;&#39;.&#xA;users.includes(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can often feel extremely awkward. But with the rule enabled, &lt;code&gt;.includes&lt;/code&gt; now takes a widened version of the literals in the &lt;code&gt;const&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/array-includes&#34;;&#xA;&#xA;const users = [&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const;&#xA;&#xA;// .includes now takes a string as the first parameter&#xA;users.includes(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means you can test non-members of the array safely.&lt;/p&gt; &#xA;&lt;p&gt;It also makes &lt;code&gt;.includes&lt;/code&gt; a type predicate, meaning you can use it to narrow wider types to a set enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/array-includes&#34;;&#xA;&#xA;const users = [&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const;&#xA;&#xA;const isUser = (input: string) =&amp;gt; {&#xA;  if (users.includes(input)) {&#xA;    // input is narrowed to &#34;matt&#34; | &#34;sofia&#34; | &#34;waqas&#34;&#xA;    console.log(input);&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make &lt;code&gt;Set.has()&lt;/code&gt; less strict&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/set-has&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;.includes&lt;/code&gt;, &lt;code&gt;Set.has()&lt;/code&gt; doesn&#39;t let you pass members that don&#39;t exist in the set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;const userSet = new Set([&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const);&#xA;&#xA;// Argument of type &#39;&#34;bryan&#34;&#39; is not assignable to&#xA;// parameter of type &#39;&#34;matt&#34; | &#34;sofia&#34; | &#34;waqas&#34;&#39;.&#xA;userSet.has(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the rule enabled, &lt;code&gt;Set&lt;/code&gt; is much smarter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/set-has&#34;;&#xA;&#xA;const userSet = new Set([&#34;matt&#34;, &#34;sofia&#34;, &#34;waqas&#34;] as const);&#xA;&#xA;// .has now takes a string as the argument!&#xA;userSet.has(&#34;bryan&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Removing &lt;code&gt;any[]&lt;/code&gt; from &lt;code&gt;Array.isArray()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#34;@total-typescript/ts-reset/is-array&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re using &lt;code&gt;Array.isArray&lt;/code&gt;, you can introduce subtle &lt;code&gt;any&lt;/code&gt;&#39;s into your app&#39;s code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// BEFORE&#xA;&#xA;const validate = (input: unknown) =&amp;gt; {&#xA;  if (Array.isArray(input)) {&#xA;    console.log(input); // any[]&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;is-array&lt;/code&gt; enabled, this check will now mark the value as &lt;code&gt;unknown[]&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// AFTER&#xA;import &#34;@total-typescript/ts-reset/is-array&#34;;&#xA;&#xA;const validate = (input: unknown) =&amp;gt; {&#xA;  if (Array.isArray(input)) {&#xA;    console.log(input); // unknown[]&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rules we won&#39;t add&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;Object.keys&lt;/code&gt;/&lt;code&gt;Object.entries&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A common ask is to provide &#39;better&#39; typings for &lt;code&gt;Object.keys&lt;/code&gt;, so that it returns &lt;code&gt;Array&amp;lt;keyof T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt;. Same for &lt;code&gt;Object.entries&lt;/code&gt;. &lt;code&gt;ts-reset&lt;/code&gt; won&#39;t be including rules to change this.&lt;/p&gt; &#xA;&lt;p&gt;TypeScript is a structural typing system. One of the effects of this is that TypeScript can&#39;t always guarantee that your object types don&#39;t contain excess properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Func = () =&amp;gt; {&#xA;  id: string;&#xA;};&#xA;&#xA;const func: Func = () =&amp;gt; {&#xA;  return {&#xA;    id: &#34;123&#34;,&#xA;    // No error on an excess property!&#xA;    name: &#34;Hello!&#34;,&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, the only reasonable type for &lt;code&gt;Object.keys&lt;/code&gt; to return is &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Generics for &lt;code&gt;JSON.parse&lt;/code&gt;, &lt;code&gt;Response.json&lt;/code&gt; etc&lt;/h3&gt; &#xA;&lt;p&gt;A common request is for &lt;code&gt;ts-reset&lt;/code&gt; to add type arguments to functions like &lt;code&gt;JSON.parse&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const str = JSON.parse&amp;lt;string&amp;gt;(&#39;&#34;hello&#34;&#39;);&#xA;&#xA;console.log(str); // string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This appears to improve the DX by giving you autocomplete on the thing that gets returned from &lt;code&gt;JSON.parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, we argue that this is a lie to the compiler and so, unsafe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;JSON.parse&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; represent &lt;em&gt;validation boundaries&lt;/em&gt; - places where unknown data can enter your application code.&lt;/p&gt; &#xA;&lt;p&gt;If you &lt;em&gt;really&lt;/em&gt; know what data is coming back from a &lt;code&gt;JSON.parse&lt;/code&gt;, then an &lt;code&gt;as&lt;/code&gt; assertion feels like the right call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const str = JSON.parse(&#39;&#34;hello&#34;&#39;) as string;&#xA;&#xA;console.log(str); // string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This provides the types you intend and also signals to the developer that this is &lt;em&gt;slightly&lt;/em&gt; unsafe.&lt;/p&gt;</summary>
  </entry>
</feed>