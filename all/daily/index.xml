<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-17T01:33:51Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>svcvit/Awesome-Dify-Workflow</title>
    <updated>2025-04-17T01:33:51Z</updated>
    <id>tag:github.com,2025-04-17:/svcvit/Awesome-Dify-Workflow</id>
    <link href="https://github.com/svcvit/Awesome-Dify-Workflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;分享一些好用的 Dify DSL 工作流程，自用、学习两相宜。 Sharing some Dify workflows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome-Dify-Workflow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/README_EN.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/README.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;分享一些好用的 Dify 工作流程，自用、学习两相宜，请使用 Dify 0.13.0 及以上版本导入。已支持多 &lt;strong&gt;任务并行&lt;/strong&gt;、&lt;strong&gt;会话变量&lt;/strong&gt;、&lt;strong&gt;表单&lt;/strong&gt;、&lt;strong&gt;echart渲染&lt;/strong&gt; 相关特性。Agent节点为1.0版本之后功能，请尽可能使用最新版DIFY导入。&lt;/p&gt; &#xA;&lt;p&gt;所有的 Workflow 基本都可以 &lt;strong&gt;免费&lt;/strong&gt; 使用，更多 Workflow 收集整理中……&lt;/p&gt; &#xA;&lt;h2&gt;分享群&lt;/h2&gt; &#xA;&lt;p&gt;开了一个分享群，有兴趣可以加入，如果你有关于 workflow 的问题也可以一起讨论。（2025/04/16 更新）&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;主群都超200了，加群主好友，备注 dify，拉你到人多一些的群。不过微信风控，有时候加不上，可以稍后再试。&lt;/li&gt; &#xA; &lt;li&gt;当然，也可以加新群，目前人少一点，基本3-7天左右一个群就能满200. &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-04-16_16-41-33.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;视频教程&lt;/h2&gt; &#xA;&lt;p&gt;最近计划更新一个DIFY使用系列教程，基本上有手就会，里面包含很多我个人使用过程中的一些理解，相信不管你是新手小白，还是企业用户，都会有所收货。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;视频&lt;/th&gt; &#xA;   &lt;th&gt;文字摘要版&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01课 - DIFY的本地化部署与启动&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6LnHVay289w&#34;&gt;https://www.youtube.com/watch?v=6LnHVay289w&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.vcvit.me/2025/04/09/01-dify-local-deployment-and-startup/&#34;&gt;https://blog.vcvit.me/2025/04/09/01-dify-local-deployment-and-startup/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02课 - DIFY模型配置&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4I2DgPR3qDA&#34;&gt;https://www.youtube.com/watch?v=4I2DgPR3qDA&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.vcvit.me/2025/04/10/02-dify-model-configuration/&#34;&gt;https://blog.vcvit.me/2025/04/10/02-dify-model-configuration/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03课 - chatflow和workfow的区别&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=quEA_7LVWA8&#34;&gt;https://www.youtube.com/watch?v=quEA_7LVWA8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.vcvit.me/2025/04/11/03-dify-workflow-vs-chatflow/&#34;&gt;https://blog.vcvit.me/2025/04/11/03-dify-workflow-vs-chatflow/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;这里总结了一些群里常见的问题，不定期更新，内容不会很多，希望对你有帮助。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zerozzz.win/ai-%E6%B5%81%E7%A8%8B%E5%B9%B3%E5%8F%B0%E5%AF%B9%E6%AF%94dify%E3%80%81fastgpt%E3%80%81ragflow&#34;&gt;AI 流程平台对比——Dify、Fastgpt、Ragflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dify 有没有国内的镜像源配置呀?&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/images/Xnip2024-11-19_10-14-02.jpg&#34; alt=&#34;示例图片&#34; width=&#34;400&#34;&gt; &#xA; &lt;p&gt;A：我一般把所有image，前面的链接加上 dockerpull.org&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;sandbox 如何安装pandas这些第三方库？&lt;/summary&gt; A：打开 /docker/volumes/sandbox/dependencies/python-requirements.txt 填入需要安装的依赖，重启sandbox即可。 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;定时任务可以如何处理？我希望定时执行某个流程。&lt;/summary&gt; A：可以参考项目 https://github.com/leochen-g/dify-schedule &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;节点间传递string数据，提示超限制，如何处理&lt;/summary&gt; A：修改 .env 中的一段： CODE_MAX_STRING_LENGTH: 1000000 TEMPLATE_TRANSFORM_MAX_LENGTH: 1000000 重启容器 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;拿到图片URL后能在聊天窗口显示吗，试了下markdown但什么都没显示出来。&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/images/image001.png&#34; alt=&#34;示例图片&#34; width=&#34;400&#34;&gt; &#xA; &lt;p&gt;A：你的做法是对的，只是你的图片不支持跨域，所以没渲染出来&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;请教一个问题，知识库上传大文件提出报错，修改配置文件后，还是无法上传大文件，如下是配置文件中修改上传文件地方；&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/images/002.png&#34; alt=&#34;示例图片&#34; width=&#34;400&#34;&gt; &#xA; &lt;p&gt;A:nginx 也要改；在.env里面；搜 nginx，应该能找到&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;知识库永久排队问题&lt;/summary&gt; A：修改 .env 中的一段：LOG_FILE=/app/logs/server.log；重启容器 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;在哪里可以自学Dify?&lt;/summary&gt; A：可以参考 https://dify101.com &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dify生成图表有什么好方案？&lt;/summary&gt; A：Dify自带了一些绘图功能，包括柱状图、曲线图等。 也可以自己写一个Echarts插件，从数据库读取数据并画图。 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dify知识库上传PDF乱码怎么办？&lt;/summary&gt; A： 可以使用工具将PDF转换成Markdown格式再上传。 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;DuckDuckGo 翻译 现在是不可用了吗&lt;/summary&gt; A：应该是服务器挂了代理，但是dify是启在docker里面的，没挂。 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;探索 Dify 的官方示例应用全部是英文，怎么切换成中文？&lt;/summary&gt; A：点击右上角，头像，设置，语言，先切换成其它语言，再切换成中文，即可。 &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;管理员密码忘记了怎么搞？&lt;/summary&gt; A：执行下面的指令：docker exec -it docker-api-1 flask reset-password &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;SANDBOX&lt;/h2&gt; &#xA;&lt;p&gt;sandbox 运行pandas，numpy&amp;gt;2.0，matplotlib，scikit-learn 代码老报错，可以使用我开发的另外一个简单版&lt;a href=&#34;https://github.com/svcvit/dify-sandbox-py&#34;&gt;dify-sandbox-py&lt;/a&gt;，这些依赖已经测试可以使用。&lt;/p&gt; &#xA;&lt;h2&gt;DIFY 1.0 插件&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/svcvit/dify_plugin_collection&#34;&gt;dify_plugin_collection&lt;/a&gt; 仓库存放着 DIFY 的&lt;a href=&#34;https://marketplace.dify.ai/&#34;&gt;官方市场&lt;/a&gt; 插件安装包，方便离线用户自由选择，不定期更新。&lt;/p&gt; &#xA;&lt;p&gt;如果你希望开发插件，我有2个插件的源码 &lt;a href=&#34;https://github.com/svcvit/dify-plugin-google_translate&#34;&gt;google翻译&lt;/a&gt;、&lt;a href=&#34;https://github.com/svcvit/dify-plugin-tod_agent&#34;&gt;对话Agent&lt;/a&gt; 希望可以给你参考。&lt;/p&gt; &#xA;&lt;h2&gt;模型&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;你可以使用最近火热的deepseek-R1，硅基流动提供免费2000万Tokens，如果使用邀请注册，你和我都会获赠免费2000万token的额度：&lt;a href=&#34;https://cloud.siliconflow.cn/i/MwADckCi&#34;&gt;https://cloud.siliconflow.cn/i/MwADckCi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果你希望体验 OpenAI 或 Anthropic 的模型，可以使用我搭建的服务 &lt;a href=&#34;https://one.coffbox.com/&#34;&gt;CoffBox&lt;/a&gt; 的服务 配置方式参考 &lt;a href=&#34;https://blog.vcvit.me/2024/11/13/how-to-use-one-api-in-dify/&#34;&gt;如何在Dify中使用CoffBox的服务&lt;/a&gt; 这个方式仅供个人使用，如果你需要大规模使用，&lt;a href=&#34;https://openrouter.ai/&#34;&gt;openrouter&lt;/a&gt;会是个更好的选择。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考截图&lt;/h2&gt; &#xA;&lt;p&gt;所有 DSL 都为工作流模式，可以方便的发布为工具后，嵌入 ChatBot 流程。工作流会包含基础的输入、条件判断、变量聚合器、输出等内容。&lt;/p&gt; &#xA;&lt;h1&gt;DSL 目录&lt;/h1&gt; &#xA;&lt;p&gt;你可以参考下面每个 yml 的描述，找到你需要的 Workflow，然后在 DSL 文件夹中找到对应的文件，复制文件的 URL，导入自己的 Dify 账号即可。&lt;/p&gt; &#xA;&lt;h2&gt;2025-04-16更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP-amap.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用&lt;a href=&#34;https://marketplace.dify.ai/plugins/hjlarry/agent&#34;&gt;MCP Agent 策略&lt;/a&gt;进行MCP工具的调用示例，MCP使用&lt;a href=&#34;https://lbs.amap.com/api/mcp-server/gettingstarted&#34;&gt;高德地图&lt;/a&gt; 提供的在线服务，你可以先注册一个开发者账号，申请一个免费的Key。替换下图中马赛克部分 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-04-16_17-05-45.jpg&#34; alt=&#34;&#34;&gt; 这里还有一个官方示例&lt;a href=&#34;https://mp.weixin.qq.com/s/CDhqmLO1JXSB__aUMqoGoQ&#34;&gt;Dify MCP 插件指南：一键连接 Zapier，轻松调用 7000+ App 工具&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2025-04-07更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;图文知识库&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;如果你希望检索知识库后，是图配文的效果，你需要在知识库里加上图片的远程连接即可。可参考本示例，包含一个markdown文件。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/WechatIMG9731.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2025-03-21更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Demo-tod_agent.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用dify 1.0 的Agent节点，针对对话场景优化的Agent策略，例如：多轮对话、上下文理解、信息收集等。&lt;a href=&#34;https://marketplace.dify.ai/plugins/svcvit/agent&#34;&gt;https://marketplace.dify.ai/plugins/svcvit/agent&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-03-21_10-28-13.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2025-02-24更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Deep Researcher On Dify .yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deep Researcher 工作流复现方案 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-02-24_10-12-56.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AdamPlatin123/Open-Deep-Research-workflow-on-Dify&#34;&gt;@AdamPlatin123&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2025-02-17更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Agent工具调用.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用dify 1.0 的Agent节点，使用FC调用不同的工具，进行回复。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-02-17_16-51-30.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2025-01-23更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;旅行Demo.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用dify 1.0 的Agent节点，演示旅行信息收集，Tool调用，对话历史上下文存储。将对话消息存入对话变量，纳入Agent的思考上下文。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-01-23_13-22-24.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-01-23_13-22-47.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2025-01-21更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;春联生成器.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;春联生成工具，注意字体需要电脑有，可以按需修改字体。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-01-21_09-21-11.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信群@Junjie.M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;春联生成器 (“福”到了版本).yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-01-21_09-22-59.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信群@Junjie.M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;完蛋！我被LLM包围了！ .yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;【完蛋！我被LLM包围了！】借鉴了：&lt;a href=&#34;https://github.com/modelscope/modelscope/tree/master/examples/apps/llm_riddles&#34;&gt;https://github.com/modelscope/modelscope/tree/master/examples/apps/llm_riddles&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2025-01-21_09-39-18.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信群@Junjie.M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-12-05更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;File_read.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用sandbox读取文件并解析，需要使用&lt;a href=&#34;https://github.com/svcvit/dify-sandbox-py&#34;&gt;dify-sandbox-py&lt;/a&gt;，挂在上传目录，这是一个pandas读取csv的示例，具体方法参考右侧来源链接 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-12-05_09-26-33.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-12-05_09-22-43.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.vcvit.me/2024/12/05/use-dify-sandbox-to-parse-files/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runLLMCode.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用LLM生成的Code，再通过sandbox去执行。因为code节点无法直接引用LLM的代码，所以通过HTTP请求的方式执行，这里有一个分析csv的示例。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-12-05_10-16-16.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-12-05_10-16-25.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;数据分析.7z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;数据分析的示例，可以根据需求查询数据库，生成对应的解读和图表。示例中包括流程文件和flask的服务。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-12-05_11-10-39.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-12-05_11-12-55.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信群：简单&amp;amp;平凡@&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-11-29更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LanguageConsistencyChecker.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;三语言检查器，主要处理翻译的内容优化，它还有一个web端配套 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-29_11-40-06.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-29_11-42-42.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stvlynn/langfixer&#34;&gt;langfixer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-11-22更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;matplotlib.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用matplotlib画图，将图片输出为base64，再通过回复渲染图片。注意，官方sandbox权限比较复杂，安装完matplotlib也无法使用，请使用&lt;a href=&#34;https://github.com/svcvit/dify-sandbox-py&#34;&gt;dify-sandbox-py&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-21_09-35-09.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jieba.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jieba 分词示例，请使用&lt;a href=&#34;https://github.com/svcvit/dify-sandbox-py&#34;&gt;dify-sandbox-py&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-22_13-44-07.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-11-20更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json-repair.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;大模型输出的JSON格式不标准，少个引号，多个括号，通过这个流程修复为可解析的的JSON &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-20_09-45-48.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-11-15更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json_translate.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;解析JSON中的需要翻译的内容，使用迭代器进行翻译，再组合成新的JSON，保持原有JSON的结构 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-15_18-16-26.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-11-14更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;腾讯云SubtitleInfo.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;这是一个代码相关的示例，通过腾讯云的授权信息加密，获取需要的内容信息参考。如果你需要使用代码节点，可以参考用法。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-14_14-03-53.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;微信分享群&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;chart_demo.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;通过回复内容渲染charts的图表内容。当然你可以可以根据sql查询数据，拼接成需要的内容 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-14_15-17-39.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;2024-11-12更新&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Form表单聊天Demo.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;在对话框登录之后有权限访问模型 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-11-12_10-47-42.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://vcvit.me/&#34;&gt;@svcvit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;翻译&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;中译英.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;通过宝玉的 Prompt，直译-&amp;gt;反思-&amp;gt;意译，将中文翻译成高质量的英文。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-24_13-04-11.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;暂无&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DuckDuckGo 翻译+LLM 二次翻译.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;与三步翻译类似，但是把第一步的直译变成传统翻译引擎翻译，节省 Token，提高翻译效率，同时提高翻译质量。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_13-42-06.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;暂无&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;translation_workflow.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;使用吴恩达提出 Agentic Workflow 制作的翻译工具，录入&lt;code&gt;输入语言&lt;/code&gt;、&lt;code&gt;目标语言&lt;/code&gt;、&lt;code&gt;国家&lt;/code&gt;、&lt;code&gt;原始文本&lt;/code&gt; 4 个参数，提供更细致的翻译结果 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_16-58-05.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/andrewyng/translation-agent&#34;&gt;translation-agent&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;宝玉的英译中优化版.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;宝玉的科技文章翻译优化版本，主要优化了提示词和 xml 标签 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-08-01_13-47-25.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://baoyu.io/blog/prompt-engineering/translator-gpt-prompt-v2-1-improvement&#34;&gt;翻译 GPT 的提示词更新和优化&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;全书翻译.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DIFY 官方示例，切分长文本，再迭代器内翻译 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-10-30_18-02-24.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DIFY 官方探索内容&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;工具&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SEO Slug Generator.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;给自己的博文生成 url slug，参考来源于宝玉的 X &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-24_13-06-35.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://x.com/dotey/status/1801280536125608265&#34;&gt;twitter&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Document_chat_template.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一个通过知识库聊天的模版 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-24_13-08-49.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Winson-030/dify-DSL&#34;&gt;Winson-030&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;搜索大师.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;通过 SearXNG 进行搜索，再通过 jina 获取搜索内容 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-24_13-07-55.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Winson-030/dify-DSL&#34;&gt;Winson-030&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;标题党创作.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一位爆款网文作家 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-10-31_17-45-53.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ghostviper/dify-workflow&#34;&gt;ghostviper&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;文章仿写-单图_多图自动搭配.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;文章仿写 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-10-31_17-46-30.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ghostviper/dify-workflow&#34;&gt;ghostviper&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Text to Card Iteration.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;自动生成小红书这种卡片。&lt;/td&gt; &#xA;   &lt;td&gt;🔥Dify Workflow-Agent 设计交流 @Arthur&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Dify 运营一条龙.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;小红书、抖音、微博、B 站一条龙运营。（2024/11/21更新，主流程已经不能用了，因为图片生成那个服务问题很多，而且限制了分辨率，导致生成图完全不对了，全当看个思路。） &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-24_16-34-29.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kCrQp8YZTsQ&#34;&gt;Dify 一键生成多尺寸 Cover 与全平台文案&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Jina Reader Jinja.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一个基于 TavilySearch 和 Jina 的问答流程 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-29_14-43-54.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🔥Dify Workflow-Agent 设计交流群分享&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;llm2o1.cn.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;任务拆解→提取步骤→迭代步骤执行→归纳总结→输出结果 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-09-30_09-44-00.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://x.com/okooo5km/status/1838801763778072862&#34;&gt;@okooo5km&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dify_course_demo.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;自动化生成全套教程。 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/GZvTSh3aYAEMAQ5.jpeg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pekingmuge/dify_course&#34;&gt;dify_course&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;simple-kimi.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;简易自制 Kimi &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-10-31_17-33-34.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aws-samples/dify-aws-tool/tree/main/workflow&#34;&gt;aws-samples&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Claude3 Code Translation.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;不同代码种类之间的翻译工作流 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-10-31_17-38-34.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aws-samples/dify-aws-tool/tree/main/workflow&#34;&gt;aws-samples&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;聊天机器人&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;根据用户的意图进行回复.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;根据用户的聊天内容，进行意图判定，根据意图选择不同的工作流路径进行回复，再风格化聊天机器人话术 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/WechatIMG4894.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;无&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mem0ai&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;一个有记忆的聊天流程，完整代码见来源链接 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/WechatIMG6110.jpg&#34; alt=&#34;mem0ai&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tonori/dify-plugin-mem0ai&#34;&gt;dify-plugin-mem0ai&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;记忆测试.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;添加短期记忆，CoT 思维链的示例，自动问答机器人也可以主动触达，根据上下文选择最佳回复 &lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-09-19_12-03-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;来自微信 svcvit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;代码&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;来源&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Python Coding Prompt.yml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;通过聊天对话方式生成 Python 代码&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.reddit.com/r/ClaudeAI/comments/1dwra38/sonnet_35_for_coding_system_prompt/&#34;&gt;Sonnet 3.5 for Coding 😍 - System Prompt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;注册 &lt;a href=&#34;https://cloud.dify.ai/&#34;&gt;Dify&lt;/a&gt; 账号，添加模型。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_13-17-53.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_13-17-10.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;下载本项目至本地，导入 DLS 文件即可，当然，你可以进行必要的调整，例如模版的调整，或提示词的调整。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_13-15-39.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_12-45-29.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svcvit/Awesome-Dify-Workflow/main/snapshots/Xnip2024-07-16_12-45-37.jpg&#34; alt=&#34;snap&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NirDiamant/RAG_Techniques</title>
    <updated>2025-04-17T01:33:51Z</updated>
    <id>tag:github.com,2025-04-17:/NirDiamant/RAG_Techniques</id>
    <link href="https://github.com/NirDiamant/RAG_Techniques" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository showcases various advanced techniques for Retrieval-Augmented Generation (RAG) systems. RAG systems combine information retrieval with generative models to provide accurate and contextually rich responses.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/nir-diamant-759323134/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LinkedIn-Connect-blue&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/NirDiamantAI&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/NirDiamantAI?label=Follow%20@NirDiamantAI&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cA6Aa4uyDX&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-Join%20our%20community-7289da?style=flat-square&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/NirDiamant&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;color=ff69b4&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🌟 &lt;strong&gt;Support This Project:&lt;/strong&gt; Your sponsorship fuels innovation in RAG technologies. &lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/NirDiamant&#34;&gt;Become a sponsor&lt;/a&gt;&lt;/strong&gt; to help maintain and expand this valuable resource!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsors ❤️&lt;/h2&gt; &#xA;&lt;p&gt;A big thank you to the wonderful sponsor(s) who support this project!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/Eisenh&#34;&gt;&lt;img src=&#34;https://github.com/Eisenh.png&#34; style=&#34;border-radius: 50%;&#34; width=&#34;64&#34; height=&#34;64&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Advanced RAG Techniques: Elevating Your Retrieval-Augmented Generation Systems 🚀&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to one of the most comprehensive and dynamic collections of Retrieval-Augmented Generation (RAG) tutorials available today. This repository serves as a hub for cutting-edge techniques aimed at enhancing the accuracy, efficiency, and contextual richness of RAG systems.&lt;/p&gt; &#xA;&lt;h2&gt;📫 Stay Updated!&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;🚀&lt;br&gt;&lt;b&gt;Cutting-edge&lt;br&gt;Updates&lt;/b&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;💡&lt;br&gt;&lt;b&gt;Expert&lt;br&gt;Insights&lt;/b&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;🎯&lt;br&gt;&lt;b&gt;Top 0.1%&lt;br&gt;Content&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://diamantai.substack.com/?r=336pe4&amp;amp;utm_campaign=pub-share-checklist&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/images/subscribe-button.svg?sanitize=true&#34; alt=&#34;Subscribe to DiamantAI Newsletter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Join over 20,000 of AI enthusiasts getting unique cutting-edge insights and free tutorials!&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Plus, subscribers get exclusive early access and special 33% discounts to my book and the upcoming RAG Techniques course!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://diamantai.substack.com/?r=336pe4&amp;amp;utm_campaign=pub-share-checklist&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/images/substack_image.png&#34; alt=&#34;DiamantAI&#39;s newsletter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Retrieval-Augmented Generation (RAG) is revolutionizing the way we combine information retrieval with generative AI. This repository showcases a curated collection of advanced techniques designed to supercharge your RAG systems, enabling them to deliver more accurate, contextually relevant, and comprehensive responses.&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to provide a valuable resource for researchers and practitioners looking to push the boundaries of what&#39;s possible with RAG. By fostering a collaborative environment, we aim to accelerate innovation in this exciting field.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;🖋️ Check out my &lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/Prompt_Engineering&#34;&gt;Prompt Engineering Techniques guide&lt;/a&gt;&lt;/strong&gt; for a comprehensive collection of prompting strategies, from basic concepts to advanced techniques, enhancing your ability to interact effectively with AI language models.&lt;/p&gt; &#xA;&lt;p&gt;🤖 Explore my &lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/GenAI_Agents&#34;&gt;GenAI Agents Repository&lt;/a&gt;&lt;/strong&gt; to discover a variety of AI agent implementations and tutorials, showcasing how different AI technologies can be combined to create powerful, interactive systems.&lt;/p&gt; &#xA;&lt;h2&gt;A Community-Driven Knowledge Hub&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This repository grows stronger with your contributions!&lt;/strong&gt; Join our vibrant Discord community — the central hub for shaping and advancing this project together 🤝&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/cA6Aa4uyDX&#34;&gt;RAG Techniques Discord Community&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether you&#39;re an expert or just starting out, your insights can shape the future of RAG. Join us to propose ideas, get feedback, and collaborate on innovative techniques. For contribution guidelines, please refer to our &lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/strong&gt; file. Let&#39;s advance RAG technology together!&lt;/p&gt; &#xA;&lt;p&gt;🔗 For discussions on GenAI, RAG, or custom agents, or to explore knowledge-sharing opportunities, feel free to &lt;strong&gt;&lt;a href=&#34;https://www.linkedin.com/in/nir-diamant-759323134/&#34;&gt;connect on LinkedIn&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🧠 State-of-the-art RAG enhancements&lt;/li&gt; &#xA; &lt;li&gt;📚 Comprehensive documentation for each technique&lt;/li&gt; &#xA; &lt;li&gt;🛠️ Practical implementation guidelines&lt;/li&gt; &#xA; &lt;li&gt;🌟 Regular updates with the latest advancements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Techniques&lt;/h2&gt; &#xA;&lt;p&gt;Explore our extensive list of cutting-edge RAG techniques:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Technique&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Foundational 🌱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/simple_rag.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/simple_rag_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/simple_rag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Basic RAG implementation with LangChain and LlamaIndex&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Foundational 🌱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/simple_csv_rag.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/simple_csv_rag_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RAG implementation using CSV files as data source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Foundational 🌱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/reliable_rag.ipynb&#34;&gt;Reliable RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enhanced RAG with validation and refinement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Foundational 🌱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/choose_chunk_size.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/choose_chunk_size.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optimizing text chunk sizes for better retrieval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Foundational 🌱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/proposition_chunking.ipynb&#34;&gt;Proposition Chunking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Breaking text into meaningful propositions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Query Enhancement 🔍&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/query_transformations.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/query_transformations.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enhancing queries through various transformations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;Query Enhancement 🔍&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/HyDe_Hypothetical_Document_Embedding.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/HyDe_Hypothetical_Document_Embedding.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using hypothetical questions for better retrieval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;Query Enhancement 🔍&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/HyPE_Hypothetical_Prompt_Embedding.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/HyPE_Hypothetical_Prompt_Embedding.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Precomputing hypothetical prompts at indexing stage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Context Enrichment 📚&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/contextual_chunk_headers.ipynb&#34;&gt;Contextual Chunk Headers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adding context headers to document chunks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Context Enrichment 📚&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/relevant_segment_extraction.ipynb&#34;&gt;Relevant Segment Extraction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Extracting relevant multi-chunk segments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;Context Enrichment 📚&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/context_enrichment_window_around_chunk.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/context_enrichment_window_around_chunk_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/context_enrichment_window_around_chunk.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enhancing context around retrieved chunks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;Context Enrichment 📚&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/semantic_chunking.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/semantic_chunking.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dividing documents based on semantic coherence&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;Context Enrichment 📚&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/contextual_compression.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/contextual_compression.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compressing information while preserving relevance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;Context Enrichment 📚&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/document_augmentation.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/document_augmentation.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enhancing documents through question generation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/fusion_retrieval.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/fusion_retrieval_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/fusion_retrieval.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Combining different retrieval methods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/reranking.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/reranking_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/reranking.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advanced scoring mechanisms for better ranking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/multi_faceted_filtering.ipynb&#34;&gt;Multi-faceted Filtering&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Applying various filtering techniques&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/hierarchical_indices.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/hierarchical_indices.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Multi-tiered system for efficient retrieval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/ensemble_retrieval.ipynb&#34;&gt;Ensemble Retrieval&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Combining multiple retrieval models&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/dartboard.ipynb&#34;&gt;Dartboard Retrieval&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optimizing for relevant information gain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Retrieval 🚀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/multi_model_rag_with_captioning.ipynb&#34;&gt;Multi-modal Retrieval&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Handling diverse data types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;Iterative Techniques 🔁&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/retrieval_with_feedback_loop.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/retrieval_with_feedback_loop.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Learning from user interactions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;Iterative Techniques 🔁&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/adaptive_retrieval.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/adaptive_retrieval.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic adjustment of retrieval strategies&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;Iterative Techniques 🔁&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/iterative_retrieval.ipynb&#34;&gt;Iterative Retrieval&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Multiple rounds of retrieval refinement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;Evaluation 📊&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/evaluation/evaluation_deep_eval.ipynb&#34;&gt;DeepEval Evaluation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comprehensive RAG system evaluation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;Evaluation 📊&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/evaluation/evaluation_grouse.ipynb&#34;&gt;GroUSE Evaluation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contextually-grounded LLM evaluation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td&gt;Explainability 🔬&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/explainable_retrieval.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/explainable_retrieval.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Providing transparency in retrieval process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Architecture 🏗️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/graph_rag.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/graph_rag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incorporating structured knowledge graphs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Architecture 🏗️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/Microsoft_GraphRag.ipynb&#34;&gt;GraphRag (Microsoft)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Microsoft&#39;s advanced RAG with knowledge graphs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Architecture 🏗️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/raptor.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/raptor.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tree-organized retrieval with recursive processing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;31&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Architecture 🏗️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/self_rag.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/self_rag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic combination of retrieval and generation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;Advanced Architecture 🏗️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/crag.ipynb&#34;&gt;LangChain&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/crag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic evaluation and correction of retrieval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;33&lt;/td&gt; &#xA;   &lt;td&gt;Special Technique 🌟&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NirDiamant/Controllable-RAG-Agent&#34;&gt;Sophisticated Controllable Agent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Advanced RAG solution for complex questions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🌱 Foundational RAG Techniques&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple RAG 🌱&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/simple_rag.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/simple_rag_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques_runnable_scripts/simple_rag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Introducing basic RAG techniques ideal for newcomers.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Start with basic retrieval queries and integrate incremental learning mechanisms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple RAG using a CSV file 🧩&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/simple_csv_rag.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/simple_csv_rag_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Introducing basic RAG using CSV files.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;This uses CSV files to create basic retrieval and integrates with openai to create question and answering system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/reliable_rag.ipynb&#34;&gt;Reliable RAG 🏷️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Enhances the Simple RAG by adding validation and refinement to ensure the accuracy and relevance of retrieved information.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Check for retrieved document relevancy and highlight the segment of docs used for answering.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose Chunk Size 📏&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/choose_chunk_size.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/choose_chunk_size.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Selecting an appropriate fixed size for text chunks to balance context preservation and retrieval efficiency.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Experiment with different chunk sizes to find the optimal balance between preserving context and maintaining retrieval speed for your specific use case.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/proposition_chunking.ipynb&#34;&gt;Proposition Chunking ⛓️‍💥&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Breaking down the text into concise, complete, meaningful sentences allowing for better control and handling of specific queries (especially extracting knowledge).&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;💪 &lt;strong&gt;Proposition Generation:&lt;/strong&gt; The LLM is used in conjunction with a custom prompt to generate factual statements from the document chunks.&lt;/li&gt; &#xA;   &lt;li&gt;✅ &lt;strong&gt;Quality Checking:&lt;/strong&gt; The generated propositions are passed through a grading system that evaluates accuracy, clarity, completeness, and conciseness.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://open.substack.com/pub/diamantai/p/the-propositions-method-enhancing?r=336pe4&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&#34;&gt;The Propositions Method: Enhancing Information Retrieval for AI Systems&lt;/a&gt;&lt;/strong&gt; - A comprehensive blog post exploring the benefits and implementation of proposition chunking in RAG systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🔍 Query Enhancement&lt;/h3&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Query Transformations 🔄&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/query_transformations.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/query_transformations.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Modifying and expanding queries to improve retrieval effectiveness.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;✍️ &lt;strong&gt;Query Rewriting:&lt;/strong&gt; Reformulate queries to improve retrieval.&lt;/li&gt; &#xA;   &lt;li&gt;🔙 &lt;strong&gt;Step-back Prompting:&lt;/strong&gt; Generate broader queries for better context retrieval.&lt;/li&gt; &#xA;   &lt;li&gt;🧩 &lt;strong&gt;Sub-query Decomposition:&lt;/strong&gt; Break complex queries into simpler sub-queries.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hypothetical Questions (HyDE Approach) ❓&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/HyDe_Hypothetical_Document_Embedding.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/HyDe_Hypothetical_Document_Embedding.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Generating hypothetical questions to improve alignment between queries and data.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Create hypothetical questions that point to relevant locations in the data, enhancing query-data matching.&lt;/p&gt; &lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://open.substack.com/pub/diamantai/p/hyde-exploring-hypothetical-document?r=336pe4&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&#34;&gt;HyDE: Exploring Hypothetical Document Embeddings for AI Retrieval&lt;/a&gt;&lt;/strong&gt; - A short blog post explaining this method clearly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;📚 Context and Content Enrichment&lt;/h3&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Hypothetical Prompt Embeddings (HyPE) ❓🚀&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/HyPE_Hypothetical_Prompt_Embeddings.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/HyPE_Hypothetical_Prompt_Embeddings.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;HyPE (Hypothetical Prompt Embeddings) is an enhancement to traditional RAG retrieval that &lt;strong&gt;precomputes hypothetical prompts at the indexing stage&lt;/strong&gt;, but inseting the chunk in their place. This transforms retrieval into a &lt;strong&gt;question-question matching task&lt;/strong&gt;. This avoids the need for runtime synthetic answer generation, reducing inference-time computational overhead while &lt;strong&gt;improving retrieval alignment&lt;/strong&gt;.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;📖 &lt;strong&gt;Precomputed Questions:&lt;/strong&gt; Instead of embedding document chunks, HyPE &lt;strong&gt;generates multiple hypothetical queries per chunk&lt;/strong&gt; at indexing time.&lt;/li&gt; &#xA;   &lt;li&gt;🔍 &lt;strong&gt;Question-Question Matching:&lt;/strong&gt; User queries are matched against stored hypothetical questions, leading to &lt;strong&gt;better retrieval alignment&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;⚡ &lt;strong&gt;No Runtime Overhead:&lt;/strong&gt; Unlike HyDE, HyPE does &lt;strong&gt;not require LLM calls at query time&lt;/strong&gt;, making retrieval &lt;strong&gt;faster and cheaper&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;📈 &lt;strong&gt;Higher Precision &amp;amp; Recall:&lt;/strong&gt; Improves retrieval &lt;strong&gt;context precision by up to 42 percentage points&lt;/strong&gt; and &lt;strong&gt;claim recall by up to 45 percentage points&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5139335&#34;&gt;Preprint: Hypothetical Prompt Embeddings (HyPE)&lt;/a&gt;&lt;/strong&gt; - Research paper detailing the method, evaluation, and benchmarks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/contextual_chunk_headers.ipynb&#34;&gt;Contextual Chunk Headers &lt;span&gt;🏷&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Contextual chunk headers (CCH) is a method of creating document-level and section-level context, and prepending those chunk headers to the chunks prior to embedding them.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Create a chunk header that includes context about the document and/or section of the document, and prepend that to each chunk in order to improve the retrieval accuracy.&lt;/p&gt; &lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/D-Star-AI/dsRAG&#34;&gt;dsRAG&lt;/a&gt;&lt;/strong&gt;: open-source retrieval engine that implements this technique (and a few other advanced RAG techniques)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/relevant_segment_extraction.ipynb&#34;&gt;Relevant Segment Extraction 🧩&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Relevant segment extraction (RSE) is a method of dynamically constructing multi-chunk segments of text that are relevant to a given query.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Perform a retrieval post-processing step that analyzes the most relevant chunks and identifies longer multi-chunk segments to provide more complete context to the LLM.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Context Enrichment Techniques 📝&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/context_enrichment_window_around_chunk.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/context_enrichment_window_around_chunk_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/context_enrichment_window_around_chunk.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Overview 🔎&lt;/h4&gt; &#xA;&lt;p&gt;Enhancing retrieval accuracy by embedding individual sentences and extending context to neighboring sentences.&lt;/p&gt; &#xA;&lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;&lt;p&gt;Retrieve the most relevant sentence while also accessing the sentences before and after it in the original text.&lt;/p&gt; &#xA;&lt;ol start=&#34;12&#34;&gt; &#xA; &lt;li&gt;Semantic Chunking 🧠&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/semantic_chunking.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques_runnable_scripts/semantic_chunking.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Overview 🔎&lt;/h4&gt; &#xA;&lt;p&gt;Dividing documents based on semantic coherence rather than fixed sizes.&lt;/p&gt; &#xA;&lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;&lt;p&gt;Use NLP techniques to identify topic boundaries or coherent sections within documents for more meaningful retrieval units.&lt;/p&gt; &#xA;&lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://open.substack.com/pub/diamantai/p/semantic-chunking-improving-ai-information?r=336pe4&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&#34;&gt;Semantic Chunking: Improving AI Information Retrieval&lt;/a&gt;&lt;/strong&gt; - A comprehensive blog post exploring the benefits and implementation of semantic chunking in RAG systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;13&#34;&gt; &#xA; &lt;li&gt;Contextual Compression 🗜️&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/contextual_compression.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/contextual_compression.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Overview 🔎&lt;/h4&gt; &#xA;&lt;p&gt;Compressing retrieved information while preserving query-relevant content.&lt;/p&gt; &#xA;&lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;&lt;p&gt;Use an LLM to compress or summarize retrieved chunks, preserving key information relevant to the query.&lt;/p&gt; &#xA;&lt;ol start=&#34;14&#34;&gt; &#xA; &lt;li&gt;Document Augmentation through Question Generation for Enhanced Retrieval&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/document_augmentation.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/document_augmentation.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Overview 🔎&lt;/h4&gt; &#xA;&lt;p&gt;This implementation demonstrates a text augmentation technique that leverages additional question generation to improve document retrieval within a vector database. By generating and incorporating various questions related to each text fragment, the system enhances the standard retrieval process, thus increasing the likelihood of finding relevant documents that can be utilized as context for generative question answering.&lt;/p&gt; &#xA;&lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;&lt;p&gt;Use an LLM to augment text dataset with all possible questions that can be asked to each document.&lt;/p&gt; &#xA;&lt;h3&gt;🚀 Advanced Retrieval Methods&lt;/h3&gt; &#xA;&lt;ol start=&#34;15&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Fusion Retrieval 🔗&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/fusion_retrieval.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/fusion_retrieval_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/fusion_retrieval.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Optimizing search results by combining different retrieval methods.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Combine keyword-based search with vector-based search for more comprehensive and accurate retrieval.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Intelligent Reranking 📈&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/reranking.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/reranking_with_llamaindex.ipynb&#34;&gt;LlamaIndex&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/reranking.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Applying advanced scoring mechanisms to improve the relevance ranking of retrieved results.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🧠 &lt;strong&gt;LLM-based Scoring:&lt;/strong&gt; Use a language model to score the relevance of each retrieved chunk.&lt;/li&gt; &#xA;   &lt;li&gt;🔀 &lt;strong&gt;Cross-Encoder Models:&lt;/strong&gt; Re-encode both the query and retrieved documents jointly for similarity scoring.&lt;/li&gt; &#xA;   &lt;li&gt;🏆 &lt;strong&gt;Metadata-enhanced Ranking:&lt;/strong&gt; Incorporate metadata into the scoring process for more nuanced ranking.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://open.substack.com/pub/diamantai/p/relevance-revolution-how-re-ranking?r=336pe4&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&#34;&gt;Relevance Revolution: How Re-ranking Transforms RAG Systems&lt;/a&gt;&lt;/strong&gt; - A comprehensive blog post exploring the power of re-ranking in enhancing RAG system performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multi-faceted Filtering 🔍&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Applying various filtering techniques to refine and improve the quality of retrieved results.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🏷️ &lt;strong&gt;Metadata Filtering:&lt;/strong&gt; Apply filters based on attributes like date, source, author, or document type.&lt;/li&gt; &#xA;   &lt;li&gt;📊 &lt;strong&gt;Similarity Thresholds:&lt;/strong&gt; Set thresholds for relevance scores to keep only the most pertinent results.&lt;/li&gt; &#xA;   &lt;li&gt;📄 &lt;strong&gt;Content Filtering:&lt;/strong&gt; Remove results that don&#39;t match specific content criteria or essential keywords.&lt;/li&gt; &#xA;   &lt;li&gt;🌈 &lt;strong&gt;Diversity Filtering:&lt;/strong&gt; Ensure result diversity by filtering out near-duplicate entries.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hierarchical Indices 🗂️&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/hierarchical_indices.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/hierarchical_indices.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Creating a multi-tiered system for efficient information navigation and retrieval.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Implement a two-tiered system for document summaries and detailed chunks, both containing metadata pointing to the same location in the data.&lt;/p&gt; &lt;h4&gt;Additional Resources 📚&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://open.substack.com/pub/diamantai/p/hierarchical-indices-enhancing-rag?r=336pe4&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&#34;&gt;Hierarchical Indices: Enhancing RAG Systems&lt;/a&gt;&lt;/strong&gt; - A comprehensive blog post exploring the power of hierarchical indices in enhancing RAG system performance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensemble Retrieval 🎭&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Combining multiple retrieval models or techniques for more robust and accurate results.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Apply different embedding models or retrieval algorithms and use voting or weighting mechanisms to determine the final set of retrieved documents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dartboard Retrieval 🎯&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/raw/main/all_rag_techniques/dartboard.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Optimizing over Relevant Information Gain in Retrieval&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Combine both relevance and diversity into a single scoring function and directly optimize for it.&lt;/li&gt; &#xA;   &lt;li&gt;POC showing plain simple RAG underperforming when the database is dense, and the dartboard retrieval outperforming it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multi-modal Retrieval 📽️&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Extending RAG capabilities to handle diverse data types for richer responses.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/multi_model_rag_with_captioning.ipynb&#34;&gt;Multi-model RAG with Multimedia Captioning&lt;/a&gt;&lt;/strong&gt; - Caption and store all the other multimedia data like pdfs, ppts, etc., with text data in vector store and retrieve them together.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/multi_model_rag_with_colpali.ipynb&#34;&gt;Multi-model RAG with Colpali&lt;/a&gt;&lt;/strong&gt; - Instead of captioning convert all the data into image, then find the most relevant images and pass them to a vision large language model.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🔁 Iterative and Adaptive Techniques&lt;/h3&gt; &#xA;&lt;ol start=&#34;22&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Retrieval with Feedback Loops 🔁&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/retrieval_with_feedback_loop.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/retrieval_with_feedback_loop.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Implementing mechanisms to learn from user interactions and improve future retrievals.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Collect and utilize user feedback on the relevance and quality of retrieved documents and generated responses to fine-tune retrieval and ranking models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adaptive Retrieval 🎯&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/adaptive_retrieval.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/adaptive_retrieval.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Dynamically adjusting retrieval strategies based on query types and user contexts.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Classify queries into different categories and use tailored retrieval strategies for each, considering user context and preferences.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Iterative Retrieval 🔄&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Performing multiple rounds of retrieval to refine and enhance result quality.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Use the LLM to analyze initial results and generate follow-up queries to fill in gaps or clarify information.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;📊 Evaluation&lt;/h3&gt; &#xA;&lt;ol start=&#34;25&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/evaluation/evaluation_deep_eval.ipynb&#34;&gt;DeepEval Evaluation&lt;/a&gt;&lt;/strong&gt; 📘&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Performing evaluations Retrieval-Augmented Generation systems, by covering several metrics and creating test cases.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Use the &lt;code&gt;deepeval&lt;/code&gt; library to conduct test cases on correctness, faithfulness and contextual relevancy of RAG systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/evaluation/evaluation_grouse.ipynb&#34;&gt;GroUSE Evaluation&lt;/a&gt;&lt;/strong&gt; 🐦&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Evaluate the final stage of Retrieval-Augmented Generation using metrics of the GroUSE framework and meta-evaluate your custom LLM judge on GroUSE unit tests.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Use the &lt;code&gt;grouse&lt;/code&gt; package to evaluate contextually-grounded LLM generations with GPT-4 on the 6 metrics of the GroUSE framework and use unit tests to evaluate a custom Llama 3.1 405B evaluator.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🔬 Explainability and Transparency&lt;/h3&gt; &#xA;&lt;ol start=&#34;27&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Explainable Retrieval 🔍&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/explainable_retrieval.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/explainable_retrieval.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Providing transparency in the retrieval process to enhance user trust and system refinement.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Explain why certain pieces of information were retrieved and how they relate to the query.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🏗️ Advanced Architectures&lt;/h3&gt; &#xA;&lt;ol start=&#34;28&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Knowledge Graph Integration (Graph RAG) 🕸️&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/graph_rag.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/graph_rag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Incorporating structured data from knowledge graphs to enrich context and improve retrieval.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Retrieve entities and their relationships from a knowledge graph relevant to the query, combining this structured data with unstructured text for more informative responses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GraphRag (Microsoft) 🎯&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/Microsoft_GraphRag.ipynb&#34;&gt;GraphRag&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Microsoft GraphRAG (Open Source) is an advanced RAG system that integrates knowledge graphs to improve the performance of LLMs&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;• Analyze an input corpus by extracting entities, relationships from text units. generates summaries of each community and its constituents from the bottom-up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RAPTOR: Recursive Abstractive Processing for Tree-Organized Retrieval 🌳&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/raptor.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/raptor.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;Implementing a recursive approach to process and organize retrieved information in a tree structure.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;Use abstractive summarization to recursively process and summarize retrieved documents, organizing the information in a tree structure for hierarchical context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Self RAG 🔁&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/self_rag.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/self_rag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;A dynamic approach that combines retrieval-based and generation-based methods, adaptively deciding whether to use retrieved information and how to best utilize it in generating responses.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;• Implement a multi-step process including retrieval decision, document retrieval, relevance evaluation, response generation, support assessment, and utility evaluation to produce accurate, relevant, and useful outputs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Corrective RAG 🔧&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques/crag.ipynb&#34;&gt;LangChain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/all_rag_techniques_runnable_scripts/crag.py&#34;&gt;Runnable Script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;A sophisticated RAG approach that dynamically evaluates and corrects the retrieval process, combining vector databases, web search, and language models for highly accurate and context-aware responses.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;• Integrate Retrieval Evaluator, Knowledge Refinement, Web Search Query Rewriter, and Response Generator components to create a system that adapts its information sourcing strategy based on relevance scores and combines multiple sources when necessary.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🌟 Special Advanced Technique 🌟&lt;/h2&gt; &#xA;&lt;ol start=&#34;33&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NirDiamant/Controllable-RAG-Agent&#34;&gt;Sophisticated Controllable Agent for Complex RAG Tasks 🤖&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;Overview 🔎&lt;/h4&gt; &lt;p&gt;An advanced RAG solution designed to tackle complex questions that simple semantic similarity-based retrieval cannot solve. This approach uses a sophisticated deterministic graph as the &#34;brain&#34; 🧠 of a highly controllable autonomous agent, capable of answering non-trivial questions from your own data.&lt;/p&gt; &lt;h4&gt;Implementation 🛠️&lt;/h4&gt; &lt;p&gt;• Implement a multi-step process involving question anonymization, high-level planning, task breakdown, adaptive information retrieval and question answering, continuous re-planning, and rigorous answer verification to ensure grounded and accurate responses.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To begin implementing these advanced RAG techniques in your projects:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository: &lt;pre&gt;&lt;code&gt;git clone https://github.com/NirDiamant/RAG_Techniques.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to the technique you&#39;re interested in: &lt;pre&gt;&lt;code&gt;cd all_rag_techniques/technique-name&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Follow the detailed implementation guide in each technique&#39;s directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community! If you have a new technique or improvement to suggest:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch: &lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes: &lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch: &lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NirDiamant/RAG_Techniques/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=NirDiamant/RAG_Techniques&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under a custom non-commercial license - see the &lt;a href=&#34;https://raw.githubusercontent.com/NirDiamant/RAG_Techniques/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⭐️ If you find this repository helpful, please consider giving it a star!&lt;/p&gt; &#xA;&lt;p&gt;Keywords: RAG, Retrieval-Augmented Generation, NLP, AI, Machine Learning, Information Retrieval, Natural Language Processing, LLM, Embeddings, Semantic Search&lt;/p&gt;</summary>
  </entry>
</feed>