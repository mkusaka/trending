<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-31T01:31:14Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>faridrashidi/kaggle-solutions</title>
    <updated>2022-10-31T01:31:14Z</updated>
    <id>tag:github.com,2022-10-31:/faridrashidi/kaggle-solutions</id>
    <link href="https://github.com/faridrashidi/kaggle-solutions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèÖ Collection of Kaggle Solutions and Ideas üèÖ&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://farid.one/kaggle-solutions/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/assets/images/logo.png&#34; height=&#34;150&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34; style=&#34; border-bottom: 0px;&#34;&gt;The Most Comprehensive List of Kaggle Solutions and Ideas&lt;/h3&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/#Overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/#Usage&#34;&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/#Guideline&#34;&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/#Suggestion&#34;&gt;&lt;strong&gt;Contribution&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/faridrashidi/kaggle-solutions/raw/gh-pages/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jekyll/jekyll&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-Jekyll-red.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-Markdown-green.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://farid.one/kaggle-solutions/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/assets/images/homepage1.png&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://farid.one/kaggle-solutions/resources/videos.html&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/faridrashidi/kaggle-solutions/gh-pages/assets/images/homepage2.png&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repo consists of almost all available solutions and ideas shared by top performers in the past Kaggle competitions. This list gets updated as soon as a new competition finishes. It allows you to search over the Kaggle past competition solutions and ideas.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;What you only need to do is fork the repo. Then it automatically comes to your Github website to which you can access &lt;code&gt;https://&amp;lt;YOUR_USER_NAME&amp;gt;.github.io/kaggle-solutions&lt;/code&gt;. After that, you would be able to start learning from the past solutions of each competition and take a note in markdown language.&lt;/p&gt; &#xA;&lt;h2&gt;Suggestion&lt;/h2&gt; &#xA;&lt;p&gt;If you want to learn a lot from the past competitions, try carefully read the following for every single competition:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Description (Task)&lt;/li&gt; &#xA; &lt;li&gt;Evaluation (Metric)&lt;/li&gt; &#xA; &lt;li&gt;Data&lt;/li&gt; &#xA; &lt;li&gt;Check top performers&#39; profile in Leaderboard&lt;/li&gt; &#xA; &lt;li&gt;Most voted Discussion&lt;/li&gt; &#xA; &lt;li&gt;Most voted Kernels&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you found any solution besides the ones listed here, I would suggest you contribute to this repo by making a pull request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acmesh-official/acme.sh</title>
    <updated>2022-10-31T01:31:14Z</updated>
    <id>tag:github.com,2022-10-31:/acmesh-official/acme.sh</id>
    <link href="https://github.com/acmesh-official/acme.sh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure Unix shell script implementing ACME client protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;An ACME Shell script: acme.sh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;FreeBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;NetBSD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg?sanitize=true&#34; alt=&#34;Solaris&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;DragonFlyBSD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/workflows/Shellcheck/badge.svg?sanitize=true&#34; alt=&#34;Shellcheck&#34;&gt; &lt;img src=&#34;https://github.com/acmesh-official/acme.sh/workflows/PebbleStrict/badge.svg?sanitize=true&#34; alt=&#34;PebbleStrict&#34;&gt; &lt;img src=&#34;https://github.com/acmesh-official/acme.sh/workflows/Build%20DockerHub/badge.svg?sanitize=true&#34; alt=&#34;DockerHub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/acmesh&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/all/badge.svg?label=financial+contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/acme-sh/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/acme-sh/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/acme-sh/Lobby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/neilpang/acme.sh&#34; title=&#34;Click to view the image on Docker Hub&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/neilpang/acme.sh.svg?sanitize=true&#34; alt=&#34;Docker stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/neilpang/acme.sh&#34; title=&#34;Click to view the image on Docker Hub&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/neilpang/acme.sh.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An ACME protocol client written purely in Shell (Unix shell) language.&lt;/li&gt; &#xA; &lt;li&gt;Full ACME protocol implementation.&lt;/li&gt; &#xA; &lt;li&gt;Support ECDSA certs&lt;/li&gt; &#xA; &lt;li&gt;Support SAN and wildcard certs&lt;/li&gt; &#xA; &lt;li&gt;Simple, powerful and very easy to use. You only need 3 minutes to learn it.&lt;/li&gt; &#xA; &lt;li&gt;Bash, dash and sh compatible.&lt;/li&gt; &#xA; &lt;li&gt;Purely written in Shell with no dependencies on python.&lt;/li&gt; &#xA; &lt;li&gt;Just one script to issue, renew and install your certificates automatically.&lt;/li&gt; &#xA; &lt;li&gt;DOES NOT require &lt;code&gt;root/sudoer&lt;/code&gt; access.&lt;/li&gt; &#xA; &lt;li&gt;Docker ready&lt;/li&gt; &#xA; &lt;li&gt;IPv6 ready&lt;/li&gt; &#xA; &lt;li&gt;Cron job notifications for renewal or error etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s probably the &lt;code&gt;easiest &amp;amp; smartest&lt;/code&gt; shell script to automatically issue &amp;amp; renew the free certificates.&lt;/p&gt; &#xA;&lt;p&gt;Wiki: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Docker Fans: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Run-acme.sh-in-docker&#34;&gt;acme.sh &lt;span&gt;üíï&lt;/span&gt; Docker &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/neilpangxa&#34;&gt;@neilpangxa&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E&#34;&gt;‰∏≠ÊñáËØ¥Êòé&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Who:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.crashed.org/letsencrypt-in-freebsd-org/&#34;&gt;FreeBSD.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruby-china.org/topics/31983&#34;&gt;ruby-china.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pve.proxmox.com/wiki/Certificate_Management&#34;&gt;Proxmox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pfsense/FreeBSD-ports/pull/89&#34;&gt;pfsense&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.webfaction.com/questions/19988/using-letsencrypt&#34;&gt;webfaction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.loadbalancer.org/blog/loadbalancer-org-with-lets-encrypt-quick-and-dirty&#34;&gt;Loadbalancer.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://meta.discourse.org/t/setting-up-lets-encrypt/40709&#34;&gt;discourse.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://centminmod.com/letsencrypt-acmetool-https.html&#34;&gt;Centminmod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.splynx.com/t/free-ssl-cert-for-splynx-lets-encrypt/297&#34;&gt;splynx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.archlinux.org/packages/community/any/acme.sh&#34;&gt;archlinux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opnsense/plugins/tree/master/security/acme-client/src/opnsense/scripts/OPNsense/AcmeClient&#34;&gt;opnsense.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://centos-webpanel.com/&#34;&gt;CentOS Web Panel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lnmp.org/&#34;&gt;lnmp.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Blogs-and-tutorials&#34;&gt;more...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tested OS&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NO&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mac OSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows (cygwin with curl, openssl and crontab included)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;FreeBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg?sanitize=true&#34; alt=&#34;Solaris&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Solaris&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;   &lt;td&gt;pfsense&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;NetBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NetBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg?sanitize=true&#34; alt=&#34;DragonFlyBSD&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DragonFlyBSD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CentOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alpine Linux (with curl)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Archlinux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fedora&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Kali Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Oracle Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mageia&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ClearLinux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;-----&lt;/td&gt; &#xA;   &lt;td&gt;Cloud Linux &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/issues/111&#34;&gt;https://github.com/acmesh-official/acme.sh/issues/111&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;-----&lt;/td&gt; &#xA;   &lt;td&gt;OpenWRT: Tested and working. See &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-run-on-OpenWRT&#34;&gt;wiki page&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/acmesh-official/letest#here-are-the-latest-status&#34;&gt;&lt;img src=&#34;https://acmesh-official.github.io/acmetest/status/proxmox.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Proxmox: See Proxmox VE Wiki. Version &lt;a href=&#34;https://pve.proxmox.com/wiki/HTTPS_Certificate_Configuration_(Version_4.x,_5.0_and_5.1)#Let.27s_Encrypt_using_acme.sh&#34;&gt;4.x, 5.0, 5.1&lt;/a&gt;, version &lt;a href=&#34;https://pve.proxmox.com/wiki/Certificate_Management&#34;&gt;5.2 and up&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://github.com/acmesh-official/acmetest&#34;&gt;testing project&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acmetest&#34;&gt;https://github.com/acmesh-official/acmetest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supported CA&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA&#34;&gt;ZeroSSL.com CA&lt;/a&gt;(default)&lt;/li&gt; &#xA; &lt;li&gt;Letsencrypt.org CA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/BuyPass.com-CA&#34;&gt;BuyPass.com CA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/SSL.com-CA&#34;&gt;SSL.com CA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA&#34;&gt;Google.com Public CA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/letsencrypt/pebble&#34;&gt;Pebble strict Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any other &lt;a href=&#34;https://tools.ietf.org/html/rfc8555&#34;&gt;RFC8555&lt;/a&gt;-compliant CA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported modes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webroot mode&lt;/li&gt; &#xA; &lt;li&gt;Standalone mode&lt;/li&gt; &#xA; &lt;li&gt;Standalone tls-alpn mode&lt;/li&gt; &#xA; &lt;li&gt;Apache mode&lt;/li&gt; &#xA; &lt;li&gt;Nginx mode&lt;/li&gt; &#xA; &lt;li&gt;DNS mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode&#34;&gt;DNS alias mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Stateless-Mode&#34;&gt;Stateless mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1. How to install&lt;/h1&gt; &#xA;&lt;h3&gt;1. Install online&lt;/h3&gt; &#xA;&lt;p&gt;Check this project: &lt;a href=&#34;https://github.com/acmesh-official/get.acme.sh&#34;&gt;https://github.com/acmesh-official/get.acme.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://get.acme.sh | sh -s email=my@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O -  https://get.acme.sh | sh -s email=my@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Or, Install from git&lt;/h3&gt; &#xA;&lt;p&gt;Clone this project and launch installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/acmesh-official/acme.sh.git&#xA;cd ./acme.sh&#xA;./acme.sh --install -m my@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You &lt;code&gt;don&#39;t have to be root&lt;/code&gt; then, although &lt;code&gt;it is recommended&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Advanced Installation: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-install&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The installer will perform 3 actions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create and copy &lt;code&gt;acme.sh&lt;/code&gt; to your home dir (&lt;code&gt;$HOME&lt;/code&gt;): &lt;code&gt;~/.acme.sh/&lt;/code&gt;. All certs will be placed in this folder too.&lt;/li&gt; &#xA; &lt;li&gt;Create alias for: &lt;code&gt;acme.sh=~/.acme.sh/acme.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create daily cron job to check and renew the certs if needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Cron entry example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 0 * * * &#34;/home/user/.acme.sh&#34;/acme.sh --cron --home &#34;/home/user/.acme.sh&#34; &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the installation, you must close the current terminal and reopen it to make the alias take effect.&lt;/p&gt; &#xA;&lt;p&gt;Ok, you are ready to issue certs now.&lt;/p&gt; &#xA;&lt;p&gt;Show help message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@v1:~# acme.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;2. Just issue a cert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; Single domain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -w /home/wwwroot/example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -w /home/username/public_html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -w /var/www/html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; Multiple domains in the same cert.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -d example.com -d www.example.com -d cp.example.com -w /home/wwwroot/example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parameter &lt;code&gt;/home/wwwroot/example.com&lt;/code&gt; or &lt;code&gt;/home/username/public_html&lt;/code&gt; or &lt;code&gt;/var/www/html&lt;/code&gt; is the web root folder where you host your website files. You &lt;strong&gt;MUST&lt;/strong&gt; have &lt;code&gt;write access&lt;/code&gt; to this folder.&lt;/p&gt; &#xA;&lt;p&gt;Second argument &lt;strong&gt;&#34;example.com&#34;&lt;/strong&gt; is the main domain you want to issue the cert for. You must have at least one domain there.&lt;/p&gt; &#xA;&lt;p&gt;You must point and bind all the domains to the same webroot dir: &lt;code&gt;/home/wwwroot/example.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The certs will be placed in &lt;code&gt;~/.acme.sh/example.com/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The certs will be renewed automatically every &lt;strong&gt;60&lt;/strong&gt; days.&lt;/p&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;3. Install the cert to Apache/Nginx etc.&lt;/h1&gt; &#xA;&lt;p&gt;After the cert is generated, you probably want to install/copy the cert to your Apache/Nginx or other servers. You &lt;strong&gt;MUST&lt;/strong&gt; use this command to copy the certs to the target files, &lt;strong&gt;DO NOT&lt;/strong&gt; use the certs files in &lt;strong&gt;~/.acme.sh/&lt;/strong&gt; folder, they are for internal use only, the folder structure may change in the future.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apache&lt;/strong&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --install-cert -d example.com \&#xA;--cert-file      /path/to/certfile/in/apache/cert.pem  \&#xA;--key-file       /path/to/keyfile/in/apache/key.pem  \&#xA;--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \&#xA;--reloadcmd     &#34;service apache2 force-reload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --install-cert -d example.com \&#xA;--key-file       /path/to/keyfile/in/nginx/key.pem  \&#xA;--fullchain-file /path/to/fullchain/nginx/cert.pem \&#xA;--reloadcmd     &#34;service nginx force-reload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only the domain is required, all the other parameters are optional.&lt;/p&gt; &#xA;&lt;p&gt;The ownership and permission info of existing files are preserved. You can pre-create the files to define the ownership and permission.&lt;/p&gt; &#xA;&lt;p&gt;Install/copy the cert/key to the production Apache or Nginx path.&lt;/p&gt; &#xA;&lt;p&gt;The cert will be renewed every &lt;strong&gt;60&lt;/strong&gt; days by default (which is configurable). Once the cert is renewed, the Apache/Nginx service will be reloaded automatically by the command: &lt;code&gt;service apache2 force-reload&lt;/code&gt; or &lt;code&gt;service nginx force-reload&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please take care: The reloadcmd is very important. The cert can be automatically renewed, but, without a correct &#39;reloadcmd&#39; the cert may not be flushed to your server(like nginx or apache), then your website will not be able to show renewed cert in 60 days.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;4. Use Standalone server to issue cert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer or have permission to listen on port 80 (TCP))&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Port &lt;code&gt;80&lt;/code&gt; (TCP) &lt;strong&gt;MUST&lt;/strong&gt; be free to listen on, otherwise you will be prompted to free it and try again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue --standalone -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;5. Use Standalone ssl server to issue cert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer or have permission to listen on port 443 (TCP))&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Port &lt;code&gt;443&lt;/code&gt; (TCP) &lt;strong&gt;MUST&lt;/strong&gt; be free to listen on, otherwise you will be prompted to free it and try again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue --alpn -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;6. Use Apache mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer, since it is required to interact with Apache server)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running a web server, it is recommended to use the &lt;code&gt;Webroot mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Particularly, if you are running an Apache server, you can use Apache mode instead. This mode doesn&#39;t write any files to your web root folder.&lt;/p&gt; &#xA;&lt;p&gt;Just set string &#34;apache&#34; as the second argument and it will force use of apache plugin automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --issue --apache -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This apache mode is only to issue the cert, it will not change your apache config files. You will need to configure your website config files to use the cert by yourself. We don&#39;t want to mess with your apache server, don&#39;t worry.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;7. Use Nginx mode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;(requires you to be root/sudoer, since it is required to interact with Nginx server)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running a web server, it is recommended to use the &lt;code&gt;Webroot mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Particularly, if you are running an nginx server, you can use nginx mode instead. This mode doesn&#39;t write any files to your web root folder.&lt;/p&gt; &#xA;&lt;p&gt;Just set string &#34;nginx&#34; as the second argument.&lt;/p&gt; &#xA;&lt;p&gt;It will configure nginx server automatically to verify the domain and then restore the nginx config to the original version.&lt;/p&gt; &#xA;&lt;p&gt;So, the config is not changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --issue --nginx -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This nginx mode is only to issue the cert, it will not change your nginx config files. You will need to configure your website config files to use the cert by yourself. We don&#39;t want to mess with your nginx server, don&#39;t worry.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;More examples: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;8. Automatic DNS API integration&lt;/h1&gt; &#xA;&lt;p&gt;If your DNS provider supports API access, we can use that API to automatically issue the certs.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to do anything manually!&lt;/p&gt; &#xA;&lt;h3&gt;Currently acme.sh supports most of the dns providers:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/dnsapi&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/dnsapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;9. Use DNS manual mode:&lt;/h1&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;If your dns provider doesn&#39;t support any api access, you can add the txt record by hand.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue --dns -d example.com -d www.example.com -d cp.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get an output like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Add the following txt record:&#xA;Domain:_acme-challenge.example.com&#xA;Txt value:9ihDbjYfTExAYeDs4DBUeuTo18KBzwvTEjUnSwd32-c&#xA;&#xA;Add the following txt record:&#xA;Domain:_acme-challenge.www.example.com&#xA;Txt value:9ihDbjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;&#xA;Please add those txt records to the domains. Waiting for the dns to take effect.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just rerun with &lt;code&gt;renew&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --renew -d example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ok, it&#39;s done.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Take care, this is dns manual mode, it can not be renewed automatically. you will have to add a new txt record to your domain by your hand when you renew your cert.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please use dns api mode instead.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;10. Issue ECC certificates&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Let&#39;s Encrypt&lt;/code&gt; can now issue &lt;strong&gt;ECDSA&lt;/strong&gt; certificates.&lt;/p&gt; &#xA;&lt;p&gt;And we support them too!&lt;/p&gt; &#xA;&lt;p&gt;Just set the &lt;code&gt;keylength&lt;/code&gt; parameter with a prefix &lt;code&gt;ec-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;h3&gt;Single domain ECC certificate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -w /home/wwwroot/example.com -d example.com --keylength ec-256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SAN multi domain ECC certificate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --issue -w /home/wwwroot/example.com -d example.com -d www.example.com --keylength ec-256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please look at the &lt;code&gt;keylength&lt;/code&gt; parameter above.&lt;/p&gt; &#xA;&lt;p&gt;Valid values are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;ec-256 (prime256v1, &#34;ECDSA P-256&#34;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ec-384 (secp384r1, &#34;ECDSA P-384&#34;)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ec-521 (secp521r1, &#34;ECDSA P-521&#34;, which is not supported by Let&#39;s Encrypt yet.)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;11. Issue Wildcard certificates&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s simple, just give a wildcard domain as the &lt;code&gt;-d&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh  --issue -d example.com  -d &#39;*.example.com&#39;  --dns dns_cf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;12. How to renew the certs&lt;/h1&gt; &#xA;&lt;p&gt;No, you don&#39;t need to renew the certs manually. All the certs will be renewed automatically every &lt;strong&gt;60&lt;/strong&gt; days.&lt;/p&gt; &#xA;&lt;p&gt;However, you can also force to renew a cert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --renew -d example.com --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, for ECC cert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --renew -d example.com --force --ecc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;13. How to stop cert renewal&lt;/h1&gt; &#xA;&lt;p&gt;To stop renewal of a cert, you can execute the following to remove the cert from the renewal list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --remove -d example.com [--ecc]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cert/key file is not removed from the disk.&lt;/p&gt; &#xA;&lt;p&gt;You can remove the respective directory (e.g. &lt;code&gt;~/.acme.sh/example.com&lt;/code&gt;) by yourself.&lt;/p&gt; &#xA;&lt;h1&gt;14. How to upgrade &lt;code&gt;acme.sh&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;acme.sh is in constant development, so it&#39;s strongly recommended to use the latest code.&lt;/p&gt; &#xA;&lt;p&gt;You can update acme.sh to the latest code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enable auto upgrade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --upgrade --auto-upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;strong&gt;acme.sh&lt;/strong&gt; will be kept up to date automatically.&lt;/p&gt; &#xA;&lt;p&gt;Disable auto upgrade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;acme.sh --upgrade --auto-upgrade 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;15. Issue a cert from an existing CSR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Issue-a-cert-from-existing-CSR&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/Issue-a-cert-from-existing-CSR&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;16. Send notifications in cronjob&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/notify&#34;&gt;https://github.com/acmesh-official/acme.sh/wiki/notify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;17. Under the Hood&lt;/h1&gt; &#xA;&lt;p&gt;Speak ACME language using shell, directly to &#34;Let&#39;s Encrypt&#34;.&lt;/p&gt; &#xA;&lt;p&gt;TODO:&lt;/p&gt; &#xA;&lt;h1&gt;18. Acknowledgments&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Acme-tiny: &lt;a href=&#34;https://github.com/diafygi/acme-tiny&#34;&gt;https://github.com/diafygi/acme-tiny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ACME protocol: &lt;a href=&#34;https://github.com/ietf-wg-acme/acme&#34;&gt;https://github.com/ietf-wg-acme/acme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/acmesh/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/acmesh&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/acmesh/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/acmesh/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/acmesh/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/acmesh/organization/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.quantumca.com.cn/?__utm_source=acmesh-donation&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8305679/183255712-634ee1db-bb61-4c03-bca0-bacce99e078c.svg?sanitize=true&#34; alt=&#34;quantumca-acmesh-logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;19. License &amp;amp; Others&lt;/h1&gt; &#xA;&lt;p&gt;License is GPLv3&lt;/p&gt; &#xA;&lt;p&gt;Please Star and Fork me.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/issues&#34;&gt;Issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/pulls&#34;&gt;pull requests&lt;/a&gt; are welcome.&lt;/p&gt; &#xA;&lt;h1&gt;20. Donate&lt;/h1&gt; &#xA;&lt;p&gt;Your donation makes &lt;strong&gt;acme.sh&lt;/strong&gt; better:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PayPal/Alipay(ÊîØ‰ªòÂÆù)/Wechat(ÂæÆ‰ø°): &lt;a href=&#34;https://donate.acme.sh/&#34;&gt;https://donate.acme.sh/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Donate-list&#34;&gt;Donate List&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>charmbracelet/vhs</title>
    <updated>2022-10-31T01:31:14Z</updated>
    <id>tag:github.com,2022-10-31:/charmbracelet/vhs</id>
    <link href="https://github.com/charmbracelet/vhs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your CLI home video recorder üìº&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VHS&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/42545625/198402537-12ca2f6c-0779-4eb8-a67c-8db9cb3df13c.png#gh-dark-mode-only&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/42545625/198402542-a305f669-a05a-4d91-b18b-ca76e72b655a.png#gh-light-mode-only&#34; width=&#34;500&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/vhs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/vhs.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/vhs?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;Go Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/vhs/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/vhs/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Write terminal GIFs as code for integration testing and demoing your CLI tools.&lt;/p&gt; &#xA;&lt;img alt=&#34;Welcome to VHS&#34; src=&#34;https://stuff.charm.sh/vhs/examples/neofetch_3.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;The above example was generated with VHS (&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/examples/neofetch/neofetch.tape&#34;&gt;view source&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;To get started, &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#installation&#34;&gt;install VHS&lt;/a&gt; and create a new &lt;code&gt;.tape&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vhs new demo.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the &lt;code&gt;.tape&lt;/code&gt; file with your favorite &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim demo.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tape files consist of a series of &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#vhs-command-reference&#34;&gt;commands&lt;/a&gt;. The commands are instructions for VHS to perform on its virtual terminal. For a list of all possible commands see &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#vhs-command-reference&#34;&gt;the command reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# Where should we write the GIF?&#xA;Output demo.gif&#xA;&#xA;# Set up a 1200x600 terminal with 46px font.&#xA;Set FontSize 46&#xA;Set Width 1200&#xA;Set Height 600&#xA;&#xA;# Type a command in the terminal.&#xA;Type &#34;echo &#39;Welcome to VHS!&#39;&#34;&#xA;&#xA;# Pause for dramatic effect...&#xA;Sleep 500ms&#xA;&#xA;# Run the command by pressing enter.&#xA;Enter&#xA;&#xA;# Admire the output for a bit.&#xA;Sleep 5s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve finished, save the file and feed it into VHS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vhs &amp;lt; demo.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All done! You should see a new file called &lt;code&gt;demo.gif&lt;/code&gt; (or whatever you named the &lt;code&gt;Output&lt;/code&gt;) in the directory.&lt;/p&gt; &#xA;&lt;img alt=&#34;A GIF produced by the VHS code above&#34; src=&#34;https://stuff.charm.sh/vhs/examples/demo.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;For more examples see the &lt;a href=&#34;https://github.com/charmbracelet/vhs/tree/main/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; VHS requires &lt;a href=&#34;https://github.com/tsl0922/ttyd&#34;&gt;&lt;code&gt;ttyd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://ffmpeg.org&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; to be installed and available on your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use a package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# macOS or Linux&#xA;brew install charmbracelet/tap/vhs ffmpeg&#xA;brew install ttyd --HEAD&#xA;&#xA;# Arch Linux (btw)&#xA;yay -S vhs-bin&#xA;&#xA;# Nix&#xA;nix-env -iA nixpkgs.vhs&#xA;&#xA;# Debian/Ubuntu&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg&#xA;echo &#34;deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *&#34; | sudo tee /etc/apt/sources.list.d/charm.list&#xA;# Install ttyd from https://github.com/tsl0922/ttyd/releases&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install vhs ffmpeg&#xA;&#xA;# Fedora/RHEL&#xA;echo &#39;[charm]&#xA;name=Charm&#xA;baseurl=https://repo.charm.sh/yum/&#xA;enabled=1&#xA;gpgcheck=1&#xA;gpgkey=https://repo.charm.sh/yum/gpg.key&#39; | sudo tee /etc/yum.repos.d/charm.repo&#xA;# Install ttyd from https://github.com/tsl0922/ttyd/releases&#xA;sudo yum install vhs ffmpeg&#xA;&#xA;# Void Linux&#xA;sudo xbps-install vhs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, use Docker to run VHS directly, dependencies included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v $PWD:/vhs ghcr.io/charmbracelet/vhs &amp;lt;cassette&amp;gt;.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, download it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs/releases&#34;&gt;Packages&lt;/a&gt; are available in Debian and RPM formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs/releases&#34;&gt;Binaries&lt;/a&gt; are available for Linux, macOS, and Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or, just install it with &lt;code&gt;go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/charmbracelet/vhs@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The VHS Server&lt;/h2&gt; &#xA;&lt;p&gt;VHS has an SSH server built in! When you self host VHS you can access it as though it were installed locally. VHS will have access to commands and applications on the host so you don&#39;t need to install them on your machine.&lt;/p&gt; &#xA;&lt;p&gt;To start the server run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vhs serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Configuration Options&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_PORT&lt;/code&gt;: The port to listen on (&lt;code&gt;1976&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_HOST&lt;/code&gt;: The host to listen on (&lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_GID&lt;/code&gt;: The Group ID to run the server as (current user&#39;s GID)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_UID&lt;/code&gt;: The User ID to run the server as (current user&#39;s UID)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_KEY_PATH&lt;/code&gt;: The path to the SSH key to use (&lt;code&gt;.ssh/vhs_ed25519&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_AUTHORIZED_KEYS_PATH&lt;/code&gt;: The path to the authorized keys file (empty, publicly accessible)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Then, simply access VHS from a different machine via &lt;code&gt;ssh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh vhs.example.com &amp;lt; demo.tape &amp;gt; demo.gif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VHS Command Reference&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You can view all VHS documentation on the command line with &lt;code&gt;vhs manual&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are a few basic types of VHS commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#output&#34;&gt;&lt;code&gt;Output &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/a&gt;: specify file output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#require&#34;&gt;&lt;code&gt;Require &amp;lt;program&amp;gt;&lt;/code&gt;&lt;/a&gt;: specify required programs for tape file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#settings&#34;&gt;&lt;code&gt;Set &amp;lt;Setting&amp;gt; Value&lt;/code&gt;&lt;/a&gt;: set recording settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#type&#34;&gt;&lt;code&gt;Type &#34;&amp;lt;characters&amp;gt;&#34;&lt;/code&gt;&lt;/a&gt;: emulate typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Left&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Right&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Up&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Down&lt;/code&gt;&lt;/a&gt;: arrow keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#backspace&#34;&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#enter&#34;&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#tab&#34;&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#space&#34;&gt;&lt;code&gt;Space&lt;/code&gt;&lt;/a&gt;: special keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#ctrl&#34;&gt;&lt;code&gt;Ctrl+&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/a&gt;: press control + key&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#sleep&#34;&gt;&lt;code&gt;Sleep &amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt;: wait for a certain amount of time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#hide&#34;&gt;&lt;code&gt;Hide&lt;/code&gt;&lt;/a&gt;: hide commands from output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#show&#34;&gt;&lt;code&gt;Show&lt;/code&gt;&lt;/a&gt;: stop hiding commands from output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Output&lt;/code&gt; command allows you to specify the location and file format of the render. You can specify more than one output in a tape file which will render them to the respective locations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Output out.gif&#xA;Output out.mp4&#xA;Output out.webm&#xA;Output frames/ # a directory of frames as a PNG sequence&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Require&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Require&lt;/code&gt; command allows you to specify dependencies for your tape file. These are useful to fail early if a required program is missing from the &lt;code&gt;$PATH&lt;/code&gt; and it is certain that the VHS execution will not work as expected.&lt;/p&gt; &#xA;&lt;p&gt;Require commands must be defined at the top of a tape file, before any non- setting or non-output command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# A tape file that requires gum and glow to be in the $PATH&#xA;Require gum&#xA;Require glow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Set&lt;/code&gt; command allows you to change global aspects of the terminal, such as the font settings, window dimensions, and GIF output location.&lt;/p&gt; &#xA;&lt;p&gt;Setting must be administered at the top of the tape file. Any setting (except &lt;code&gt;TypingSpeed&lt;/code&gt;) applied after a non-setting or non-output command will be ignored.&lt;/p&gt; &#xA;&lt;h4&gt;Set Font Size&lt;/h4&gt; &#xA;&lt;p&gt;Set the font size with the &lt;code&gt;Set FontSize &amp;lt;number&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set FontSize 10&#xA;Set FontSize 20&#xA;Set FontSize 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of setting the font size to 10 pixels&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-size-10.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;img alt=&#34;Example of setting the font size to 20 pixels&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-size-20.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;img alt=&#34;Example of setting the font size to 40 pixels&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-size-40.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Font Family&lt;/h4&gt; &#xA;&lt;p&gt;Set the font family with the &lt;code&gt;Set FontFamily &#34;&amp;lt;font&amp;gt;&#34;&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set FontFamily &#34;Monoflow&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the font family to Monoflow&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-family.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Width&lt;/h4&gt; &#xA;&lt;p&gt;Set the width of the terminal with the &lt;code&gt;Set Width&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Width 300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the width of the terminal&#34; src=&#34;https://stuff.charm.sh/vhs/examples/width.gif&#34; width=&#34;300&#34;&gt; &#xA;&lt;h4&gt;Set Height&lt;/h4&gt; &#xA;&lt;p&gt;Set the height of the terminal with the &lt;code&gt;Set Height&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Height 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the height of the terminal&#34; src=&#34;https://stuff.charm.sh/vhs/examples/height.gif&#34; width=&#34;300&#34;&gt; &#xA;&lt;h4&gt;Set Letter Spacing&lt;/h4&gt; &#xA;&lt;p&gt;Set the spacing between letters (tracking) with the &lt;code&gt;Set LetterSpacing&lt;/code&gt; Command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set LetterSpacing 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the letter spacing to 20 pixels between characters&#34; src=&#34;https://stuff.charm.sh/vhs/examples/letter-spacing.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Line Height&lt;/h4&gt; &#xA;&lt;p&gt;Set the spacing between lines with the &lt;code&gt;Set LineHeight&lt;/code&gt; Command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set LineHeight 1.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the line height to 1.8&#34; src=&#34;https://stuff.charm.sh/vhs/examples/line-height.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Typing Speed&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set TypingSpeed 500ms # 500ms&#xA;Set TypingSpeed 1s    # 1s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the typing speed of seconds per key press. For example, a typing speed of &lt;code&gt;0.1&lt;/code&gt; would result in a &lt;code&gt;0.1s&lt;/code&gt; (&lt;code&gt;100ms&lt;/code&gt;) delay between each character being typed.&lt;/p&gt; &#xA;&lt;p&gt;This setting can also be overwritten per command with the &lt;code&gt;@&amp;lt;time&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set TypingSpeed 0.1&#xA;Type &#34;100ms delay per character&#34;&#xA;Type@500ms &#34;500ms delay per character&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the typing speed to type different words&#34; src=&#34;https://stuff.charm.sh/vhs/examples/typing-speed.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Theme&lt;/h4&gt; &#xA;&lt;p&gt;Set the theme of the terminal with the &lt;code&gt;Set Theme&lt;/code&gt; command. The theme value should be a JSON string with the base 16 colors and foreground + background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Theme { &#34;name&#34;: &#34;Whimsy&#34;, &#34;black&#34;: &#34;#535178&#34;, &#34;red&#34;: &#34;#ef6487&#34;, &#34;green&#34;: &#34;#5eca89&#34;, &#34;yellow&#34;: &#34;#fdd877&#34;, &#34;blue&#34;: &#34;#65aef7&#34;, &#34;purple&#34;: &#34;#aa7ff0&#34;, &#34;cyan&#34;: &#34;#43c1be&#34;, &#34;white&#34;: &#34;#ffffff&#34;, &#34;brightBlack&#34;: &#34;#535178&#34;, &#34;brightRed&#34;: &#34;#ef6487&#34;, &#34;brightGreen&#34;: &#34;#5eca89&#34;, &#34;brightYellow&#34;: &#34;#fdd877&#34;, &#34;brightBlue&#34;: &#34;#65aef7&#34;, &#34;brightPurple&#34;: &#34;#aa7ff0&#34;, &#34;brightCyan&#34;: &#34;#43c1be&#34;, &#34;brightWhite&#34;: &#34;#ffffff&#34;, &#34;background&#34;: &#34;#29283b&#34;, &#34;foreground&#34;: &#34;#b3b0d6&#34;, &#34;selectionBackground&#34;: &#34;#3d3c58&#34;, &#34;cursorColor&#34;: &#34;#b3b0d6&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the theme to Whimsy&#34; src=&#34;https://stuff.charm.sh/vhs/examples/theme.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Padding&lt;/h4&gt; &#xA;&lt;p&gt;Set the padding (in pixels) of the terminal frame with the &lt;code&gt;Set Padding&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Padding 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of setting padding to 0&#34; src=&#34;https://stuff.charm.sh/vhs/examples/padding.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Framerate&lt;/h4&gt; &#xA;&lt;p&gt;Set the rate at which VHS captures frames with the &lt;code&gt;Set Framerate&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Framerate 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set Playback Speed&lt;/h4&gt; &#xA;&lt;p&gt;Set the playback speed of the final render.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set PlaybackSpeed 0.5 # Make output 2 times slower&#xA;Set PlaybackSpeed 1.0 # Keep output at normal speed (default)&#xA;Set PlaybackSpeed 2.0 # Make output 2 times faster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Type&lt;/code&gt; to emulate key presses. That is, you can use &lt;code&gt;Type&lt;/code&gt; to script typing in a terminal. Type is handy for both entering commands and interacting with prompts and TUIs in the terminal. The command takes a string argument of the characters to type.&lt;/p&gt; &#xA;&lt;p&gt;You can set the standard typing speed with &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#set-typing-speed&#34;&gt;&lt;code&gt;Set TypingSpeed&lt;/code&gt;&lt;/a&gt; and override it in places with a &lt;code&gt;@time&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# Type something&#xA;Type &#34;Whatever you want&#34;&#xA;&#xA;# Type something really slowly!&#xA;Type@500ms &#34;Slow down there, partner.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of using the Type command in VHS&#34; src=&#34;https://stuff.charm.sh/vhs/examples/type.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Keys&lt;/h3&gt; &#xA;&lt;p&gt;Key commands take an optional &lt;code&gt;@time&lt;/code&gt; and optional repeat &lt;code&gt;count&lt;/code&gt; for repeating the key press every interval of &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Key[@&amp;lt;time&amp;gt;] [count]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Backspace&lt;/h4&gt; &#xA;&lt;p&gt;Press the backspace key with the &lt;code&gt;Backspace&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Backspace 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the Backspace key 18 times&#34; src=&#34;https://stuff.charm.sh/vhs/examples/backspace.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Ctrl&lt;/h4&gt; &#xA;&lt;p&gt;You can access the control modifier and send control sequences with the &lt;code&gt;Ctrl&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Ctrl+R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the Ctrl+R key to reverse search&#34; src=&#34;https://stuff.charm.sh/vhs/examples/ctrl.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Enter&lt;/h4&gt; &#xA;&lt;p&gt;Press the enter key with the &lt;code&gt;Enter&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Enter 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the Enter key twice&#34; src=&#34;https://stuff.charm.sh/vhs/examples/enter.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Arrow Keys&lt;/h4&gt; &#xA;&lt;p&gt;Press any of the arrow keys with the &lt;code&gt;Up&lt;/code&gt;, &lt;code&gt;Down&lt;/code&gt;, &lt;code&gt;Left&lt;/code&gt;, &lt;code&gt;Right&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Up 2&#xA;Down 2&#xA;Left&#xA;Right&#xA;Left&#xA;Right&#xA;Type &#34;B&#34;&#xA;Type &#34;A&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the arrow keys to navigate text&#34; src=&#34;https://stuff.charm.sh/vhs/examples/arrow.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Tab&lt;/h4&gt; &#xA;&lt;p&gt;Enter a tab with the &lt;code&gt;Tab&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Tab@500ms 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the tab key twice for autocomplete&#34; src=&#34;https://stuff.charm.sh/vhs/examples/tab.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Space&lt;/h4&gt; &#xA;&lt;p&gt;Press the space bar with the &lt;code&gt;Space&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Space 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the space key&#34; src=&#34;https://stuff.charm.sh/vhs/examples/space.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Sleep&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Sleep&lt;/code&gt; command allows you to continue capturing frames without interacting with the terminal. This is useful when you need to wait on something to complete while including it in the recording like a spinner or loading state. The command takes a number argument in seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Sleep 0.5   # 500ms&#xA;Sleep 2     # 2s&#xA;Sleep 100ms # 100ms&#xA;Sleep 1s    # 1s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Hide&lt;/code&gt; command allows you to exclude commands from the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Hide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command is helpful for performing any setup and cleanup required to record a GIF, such as building the latest version of a binary and removing the binary once the demo is recorded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Output example.gif&#xA;&#xA;# Setup&#xA;Hide&#xA;Type &#34;go build -o example . &amp;amp;&amp;amp; clear&#34;&#xA;Enter&#xA;Show&#xA;&#xA;# Recording...&#xA;Type &#39;Running ./example&#39;&#xA;...&#xA;Enter&#xA;&#xA;# Cleanup&#xA;Hide&#xA;Type &#39;rm example&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Show&lt;/code&gt; command allows you to specify that the following commands should be un-hidden in the output. Since commands are shown by default, this command is really only useful after using the &lt;code&gt;Hide&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Hide&#xA;Type &#34;You won&#39;t see this being typed.&#34;&#xA;Show&#xA;Type &#34;You will see this being typed.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of typing something while hidden&#34; src=&#34;https://stuff.charm.sh/vhs/examples/hide.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;You can hook up VHS to your CI pipeline to keep your GIFs up-to-date with the official VHS GitHub Action:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs-action&#34;&gt;‚öôÔ∏è charmbracelet/vhs-action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;VHS can also be used for integration testing. Use the &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.ascii&lt;/code&gt; output to generate golden files. Store these files in a git repository to ensure there are no diffs between runs of the tape file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Output golden.ascii&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Syntax Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;There‚Äôs a tree-sitter grammar for &lt;code&gt;.tape&lt;/code&gt; files available for editors that support syntax highlighting with tree-sitter:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/tree-sitter-vhs&#34;&gt;üå≥ charmbracelet/tree-sitter-vhs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It works great with Neovim, Emacs, and so on!&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We‚Äôd love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@charmcli&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/chat&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://charm.sh/&#34;&gt; &lt;img alt=&#34;The Charm logo&#34; width=&#34;400&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;CharmÁÉ≠Áà±ÂºÄÊ∫ê ‚Ä¢ Charm loves open source&lt;/p&gt;</summary>
  </entry>
</feed>