<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:30:46Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ggerganov/llama.cpp</title>
    <updated>2023-03-26T01:30:46Z</updated>
    <id>tag:github.com,2023-03-26:/ggerganov/llama.cpp</id>
    <link href="https://github.com/ggerganov/llama.cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Port of Facebook&#39;s LLaMA model in C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llama.cpp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/actions&#34;&gt;&lt;img src=&#34;https://github.com/ggerganov/llama.cpp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inference of &lt;a href=&#34;https://arxiv.org/abs/2302.13971&#34;&gt;LLaMA&lt;/a&gt; model in pure C/C++&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hot topics:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/457&#34;&gt;Roadmap (short-term)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;New C-style API is now available: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/pull/370&#34;&gt;https://github.com/ggerganov/llama.cpp/pull/370&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cache input prompts for faster initialization: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/64&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;llama.cpp&lt;/code&gt; logo: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/105&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/105&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;The main goal is to run the model using 4-bit quantization on a MacBook&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plain C/C++ implementation without dependencies&lt;/li&gt; &#xA; &lt;li&gt;Apple silicon first-class citizen - optimized via ARM NEON and Accelerate framework&lt;/li&gt; &#xA; &lt;li&gt;AVX2 support for x86 architectures&lt;/li&gt; &#xA; &lt;li&gt;Mixed F16 / F32 precision&lt;/li&gt; &#xA; &lt;li&gt;4-bit quantization support&lt;/li&gt; &#xA; &lt;li&gt;Runs on the CPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This was &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/33#issuecomment-1465108022&#34;&gt;hacked in an evening&lt;/a&gt; - I have no idea if it works correctly. Please do not make conclusions about the models based on the results from this implementation. For all I know, it can be completely wrong. This project is for educational purposes. New features will probably be added mostly through community contributions.&lt;/p&gt; &#xA;&lt;p&gt;Supported platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mac OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows (via CMake)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here is a typical run using LLaMA-7B:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;make -j &amp;amp;&amp;amp; ./main -m ./models/7B/ggml-model-q4_0.bin -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;I llama.cpp build info:&#xA;I UNAME_S:  Darwin&#xA;I UNAME_P:  arm&#xA;I UNAME_M:  arm64&#xA;I CFLAGS:   -I.              -O3 -DNDEBUG -std=c11   -fPIC -pthread -DGGML_USE_ACCELERATE&#xA;I CXXFLAGS: -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC -pthread&#xA;I LDFLAGS:   -framework Accelerate&#xA;I CC:       Apple clang version 14.0.0 (clang-1400.0.29.202)&#xA;I CXX:      Apple clang version 14.0.0 (clang-1400.0.29.202)&#xA;&#xA;make: Nothing to be done for `default&#39;.&#xA;main: seed = 1678486056&#xA;llama_model_load: loading model from &#39;./models/7B/ggml-model-q4_0.bin&#39; - please wait ...&#xA;llama_model_load: n_vocab = 32000&#xA;llama_model_load: n_ctx   = 512&#xA;llama_model_load: n_embd  = 4096&#xA;llama_model_load: n_mult  = 256&#xA;llama_model_load: n_head  = 32&#xA;llama_model_load: n_layer = 32&#xA;llama_model_load: n_rot   = 128&#xA;llama_model_load: f16     = 2&#xA;llama_model_load: n_ff    = 11008&#xA;llama_model_load: ggml ctx size = 4529.34 MB&#xA;llama_model_load: memory_size =   512.00 MB, n_mem = 16384&#xA;llama_model_load: .................................... done&#xA;llama_model_load: model size =  4017.27 MB / num tensors = 291&#xA;&#xA;main: prompt: &#39;Building a website can be done in 10 simple steps:&#39;&#xA;main: number of tokens in prompt = 15&#xA;     1 -&amp;gt; &#39;&#39;&#xA;  8893 -&amp;gt; &#39;Build&#39;&#xA;   292 -&amp;gt; &#39;ing&#39;&#xA;   263 -&amp;gt; &#39; a&#39;&#xA;  4700 -&amp;gt; &#39; website&#39;&#xA;   508 -&amp;gt; &#39; can&#39;&#xA;   367 -&amp;gt; &#39; be&#39;&#xA;  2309 -&amp;gt; &#39; done&#39;&#xA;   297 -&amp;gt; &#39; in&#39;&#xA; 29871 -&amp;gt; &#39; &#39;&#xA; 29896 -&amp;gt; &#39;1&#39;&#xA; 29900 -&amp;gt; &#39;0&#39;&#xA;  2560 -&amp;gt; &#39; simple&#39;&#xA;  6576 -&amp;gt; &#39; steps&#39;&#xA; 29901 -&amp;gt; &#39;:&#39;&#xA;&#xA;sampling parameters: temp = 0.800000, top_k = 40, top_p = 0.950000&#xA;&#xA;&#xA;Building a website can be done in 10 simple steps:&#xA;1) Select a domain name and web hosting plan&#xA;2) Complete a sitemap&#xA;3) List your products&#xA;4) Write product descriptions&#xA;5) Create a user account&#xA;6) Build the template&#xA;7) Start building the website&#xA;8) Advertise the website&#xA;9) Provide email support&#xA;10) Submit the website to search engines&#xA;A website is a collection of web pages that are formatted with HTML. HTML is the code that defines what the website looks like and how it behaves.&#xA;The HTML code is formatted into a template or a format. Once this is done, it is displayed on the user&#39;s browser.&#xA;The web pages are stored in a web server. The web server is also called a host. When the website is accessed, it is retrieved from the server and displayed on the user&#39;s computer.&#xA;A website is known as a website when it is hosted. This means that it is displayed on a host. The host is usually a web server.&#xA;A website can be displayed on different browsers. The browsers are basically the software that renders the website on the user&#39;s screen.&#xA;A website can also be viewed on different devices such as desktops, tablets and smartphones.&#xA;Hence, to have a website displayed on a browser, the website must be hosted.&#xA;A domain name is an address of a website. It is the name of the website.&#xA;The website is known as a website when it is hosted. This means that it is displayed on a host. The host is usually a web server.&#xA;A website can be displayed on different browsers. The browsers are basically the software that renders the website on the user’s screen.&#xA;A website can also be viewed on different devices such as desktops, tablets and smartphones. Hence, to have a website displayed on a browser, the website must be hosted.&#xA;A domain name is an address of a website. It is the name of the website.&#xA;A website is an address of a website. It is a collection of web pages that are formatted with HTML. HTML is the code that defines what the website looks like and how it behaves.&#xA;The HTML code is formatted into a template or a format. Once this is done, it is displayed on the user’s browser.&#xA;A website is known as a website when it is hosted&#xA;&#xA;main: mem per token = 14434244 bytes&#xA;main:     load time =  1332.48 ms&#xA;main:   sample time =  1081.40 ms&#xA;main:  predict time = 31378.77 ms / 61.41 ms per token&#xA;main:    total time = 34036.74 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is another demo of running both LLaMA-7B and &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; on a single M1 Pro MacBook:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/224442907-7693d4be-acaa-4e01-8b4f-add84093ffff.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/224442907-7693d4be-acaa-4e01-8b4f-add84093ffff.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are the step for the LLaMA-7B model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build this repo&#xA;git clone https://github.com/ggerganov/llama.cpp&#xA;cd llama.cpp&#xA;make&#xA;&#xA;# obtain the original LLaMA model weights and place them in ./models&#xA;ls ./models&#xA;65B 30B 13B 7B tokenizer_checklist.chk tokenizer.model&#xA;&#xA;# install Python dependencies&#xA;python3 -m pip install torch numpy sentencepiece&#xA;&#xA;# convert the 7B model to ggml FP16 format&#xA;python3 convert-pth-to-ggml.py models/7B/ 1&#xA;&#xA;# quantize the model to 4-bits&#xA;python3 quantize.py 7B&#xA;&#xA;# run the inference&#xA;./main -m ./models/7B/ggml-model-q4_0.bin -n 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, it&#39;s best to use Python 3.9 or Python 3.10, as &lt;code&gt;sentencepiece&lt;/code&gt; has not yet published a wheel for Python 3.11.&lt;/p&gt; &#xA;&lt;p&gt;When running the larger models, make sure you have enough disk space to store all the intermediate files.&lt;/p&gt; &#xA;&lt;h3&gt;Memory/Disk Requirements&lt;/h3&gt; &#xA;&lt;p&gt;As the models are currently fully loaded into memory, you will need adequate disk space to save them and sufficient RAM to load them. At the moment, memory and disk requirements are the same.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;original size&lt;/th&gt; &#xA;   &lt;th&gt;quantized size (4-bit)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;13 GB&lt;/td&gt; &#xA;   &lt;td&gt;3.9 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;24 GB&lt;/td&gt; &#xA;   &lt;td&gt;7.8 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30B&lt;/td&gt; &#xA;   &lt;td&gt;60 GB&lt;/td&gt; &#xA;   &lt;td&gt;19.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;65B&lt;/td&gt; &#xA;   &lt;td&gt;120 GB&lt;/td&gt; &#xA;   &lt;td&gt;38.5 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Interactive mode&lt;/h3&gt; &#xA;&lt;p&gt;If you want a more ChatGPT-like experience, you can run in interactive mode by passing &lt;code&gt;-i&lt;/code&gt; as a parameter. In this mode, you can always interrupt generation by pressing Ctrl+C and enter one or more lines of text which will be converted into tokens and appended to the current context. You can also specify a &lt;em&gt;reverse prompt&lt;/em&gt; with the parameter &lt;code&gt;-r &#34;reverse prompt string&#34;&lt;/code&gt;. This will result in user input being prompted whenever the exact tokens of the reverse prompt string are encountered in the generation. A typical use is to use a prompt which makes LLaMa emulate a chat between multiple users, say Alice and Bob, and pass &lt;code&gt;-r &#34;Alice:&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example few-shot interaction, invoked with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# default arguments using 7B model&#xA;./examples/chat.sh&#xA;&#xA;# advanced chat with 13B model&#xA;./examples/chat-13B.sh&#xA;&#xA;# custom arguments using 13B model&#xA;./main -m ./models/13B/ggml-model-q4_0.bin -n 256 --repeat_penalty 1.0 --color -i -r &#34;User:&#34; -f prompts/chat-with-bob.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of &lt;code&gt;--color&lt;/code&gt; to distinguish between user input and generated text.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1991296/224575029-2af3c7dc-5a65-4f64-a6bb-517a532aea38.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Instruction mode with Alpaca&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First, download the &lt;code&gt;ggml&lt;/code&gt; Alpaca model into the &lt;code&gt;./models&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;main&lt;/code&gt; tool like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./examples/alpaca.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;== Running in interactive mode. ==&#xA; - Press Ctrl+C to interject at any time.&#xA; - Press Return to return control to LLaMa.&#xA; - If you want to submit another line, end your input in &#39;\&#39;.&#xA;&#xA; Below is an instruction that describes a task. Write a response that appropriately completes the request.&#xA;&#xA;&amp;gt; How many letters are there in the English alphabet?&#xA;There 26 letters in the English Alphabet&#xA;&amp;gt; What is the most common way of transportation in Amsterdam?&#xA;The majority (54%) are using public transit. This includes buses, trams and metros with over 100 lines throughout the city which make it very accessible for tourists to navigate around town as well as locals who commute by tram or metro on a daily basis&#xA;&amp;gt; List 5 words that start with &#34;ca&#34;.&#xA;cadaver, cauliflower, cabbage (vegetable), catalpa (tree) and Cailleach.&#xA;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Obtaining and verifying the Facebook LLaMA original model and Stanford Alpaca model data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Under no circumstances share IPFS, magnet links, or any other links to model downloads anywhere in this respository, including in issues, discussions or pull requests. They will be immediately deleted.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The LLaMA models are officially distributed by Facebook and will &lt;strong&gt;never&lt;/strong&gt; be provided through this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refer to &lt;a href=&#34;https://github.com/facebookresearch/llama/pull/73/files&#34;&gt;Facebook&#39;s LLaMA repository&lt;/a&gt; if you need to request access to the model data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please verify the sha256 checksums of all downloaded model files to confirm that you have the correct model data files before creating an issue relating to your model files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The following command will verify if you have all possible latest files in your self-installed &lt;code&gt;./models&lt;/code&gt; subdirectory:&lt;/p&gt; &lt;p&gt;&lt;code&gt;sha256sum --ignore-missing -c SHA256SUMS&lt;/code&gt; on Linux&lt;/p&gt; &lt;p&gt;or&lt;/p&gt; &lt;p&gt;&lt;code&gt;shasum -a 256 --ignore-missing -c SHA256SUMS&lt;/code&gt; on macOS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your issue is with model generation quality then please at least scan the following links and papers to understand the limitations of LLaMA models. This is especially important when choosing an appropriate model size and appreciating both the significant and subtle differences between LLaMA models and ChatGPT:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LLaMA: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://ai.facebook.com/blog/large-language-model-llama-meta-ai/&#34;&gt;Introducing LLaMA: A foundational, 65-billion-parameter large language model&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.13971&#34;&gt;LLaMA: Open and Efficient Foundation Language Models&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GPT-3 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2005.14165&#34;&gt;Language Models are Few-Shot Learners&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GPT-3.5 / InstructGPT / ChatGPT: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://openai.com/research/instruction-following&#34;&gt;Aligning language models to follow instructions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2203.02155&#34;&gt;Training language models to follow instructions with human feedback&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Perplexity (Measuring model quality)&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;--perplexity&lt;/code&gt; as a command line option to measure perplexity over the given prompt. For more background, see &lt;a href=&#34;https://huggingface.co/docs/transformers/perplexity&#34;&gt;https://huggingface.co/docs/transformers/perplexity&lt;/a&gt;. However, in general, lower perplexity is better for LLMs.&lt;/p&gt; &#xA;&lt;h4&gt;Latest measurements&lt;/h4&gt; &#xA;&lt;p&gt;The latest perplexity scores for the various model sizes and quantizations are being tracked in &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/406&#34;&gt;discussion #406&lt;/a&gt;. &lt;code&gt;llama.cpp&lt;/code&gt; is measuring very well compared to the baseline implementations. Quantization has a small negative impact to quality, but, as you can see, running 13B at q4_0 beats the 7B f16 model by a significant amount.&lt;/p&gt; &#xA;&lt;p&gt;All measurements are done against wikitext2 test dataset (&lt;a href=&#34;https://paperswithcode.com/dataset/wikitext-2&#34;&gt;https://paperswithcode.com/dataset/wikitext-2&lt;/a&gt;), with default options (512 length context). Note that the changing the context length will have a significant impact on perplexity (longer context = better perplexity).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Perplexity - model options&#xA;5.5985 - 13B, q4_0&#xA;5.9565 - 7B, f16&#xA;6.3001 - 7B, q4_1&#xA;6.5949 - 7B, q4_0&#xA;6.5995 - 7B, q4_0, --memory_f16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to run&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download/extract: &lt;a href=&#34;https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-2-raw-v1.zip?ref=salesforce-research&#34;&gt;https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-2-raw-v1.zip?ref=salesforce-research&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./main --perplexity -m models/7B/ggml-model-q4_0.bin -f wiki.test.raw&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Calculating perplexity over 655 chunks&#xA;24.43 seconds per pass - ETA 4.45 hours&#xA;[1]4.5970,[2]5.1807,[3]6.0382,...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And after 4.45 hours, you will have the final perplexity.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You can easily run &lt;code&gt;llama.cpp&lt;/code&gt; on Android device with &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;termux&lt;/a&gt;. First, obtain the &lt;a href=&#34;https://developer.android.com/ndk&#34;&gt;Android NDK&lt;/a&gt; and then build with CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build-android&#xA;$ cd build-android&#xA;$ export NDK=&amp;lt;your_ndk_directory&amp;gt;&#xA;$ cmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_C_FLAGS=-march=armv8.4a+dotprod ..&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;termux&lt;/a&gt; on your device and run &lt;code&gt;termux-setup-storage&lt;/code&gt; to get access to your SD card. Finally, copy the &lt;code&gt;llama&lt;/code&gt; binary and the model files to your device storage. Here is a demo of an interactive session running on Pixel 5 phone:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/271616/225014776-1d567049-ad71-4ef2-b050-55b0b3b9274c.mp4&#34;&gt;https://user-images.githubusercontent.com/271616/225014776-1d567049-ad71-4ef2-b050-55b0b3b9274c.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker must be installed and running on your system.&lt;/li&gt; &#xA; &lt;li&gt;Create a folder to store big models &amp;amp; intermediate files (in ex. im using /llama/models)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Images&lt;/h4&gt; &#xA;&lt;p&gt;We have two Docker images available for this project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:full&lt;/code&gt;: This image includes both the main executable file and the tools to convert LLaMA models into ggml and convert into 4-bit quantization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/ggerganov/llama.cpp:light&lt;/code&gt;: This image only includes the main executable file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to download the models, convert them to ggml and optimize them is with the --all-in-one command which includes the full docker image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /llama/models:/models ghcr.io/ggerganov/llama.cpp:full --all-in-one &#34;/models/&#34; 7B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On complete, you are ready to play!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /llama/models:/models ghcr.io/ggerganov/llama.cpp:full --run -m /models/7B/ggml-model-q4_0.bin -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with light image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /llama/models:/models ghcr.io/ggerganov/llama.cpp:light -m /models/7B/ggml-model-q4_0.bin -p &#34;Building a website can be done in 10 simple steps:&#34; -n 512&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributors can open PRs&lt;/li&gt; &#xA; &lt;li&gt;Collaborators can push to branches in the &lt;code&gt;llama.cpp&lt;/code&gt; repo and merge PRs into the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;Collaborators will be invited based on contributions&lt;/li&gt; &#xA; &lt;li&gt;Any help with managing issues and PRs is very appreciated!&lt;/li&gt; &#xA; &lt;li&gt;Make sure to read this: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/205&#34;&gt;Inference at the edge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A bit of backstory for those who are interested: &lt;a href=&#34;https://changelog.com/podcast/532&#34;&gt;Changelog podcast&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coding guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoid adding third-party dependencies, extra files, extra headers, etc.&lt;/li&gt; &#xA; &lt;li&gt;Always consider cross-compatibility with other operating systems and architectures&lt;/li&gt; &#xA; &lt;li&gt;Avoid fancy looking modern STL constructs, use basic &lt;code&gt;for&lt;/code&gt; loops, avoid templates, keep it simple&lt;/li&gt; &#xA; &lt;li&gt;There are no strict rules for the code style, but try to follow the patterns in the code (indentation, spaces, etc.). Vertical alignment makes things more readable and easier to batch edit&lt;/li&gt; &#xA; &lt;li&gt;Clean-up any trailing whitespaces, use 4 spaces indentation, brackets on same line, &lt;code&gt;void * ptr&lt;/code&gt;, &lt;code&gt;int &amp;amp; a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; for tasks suitable for first contributions&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>programthink/zhao</title>
    <updated>2023-03-26T01:30:46Z</updated>
    <id>tag:github.com,2023-03-26:/programthink/zhao</id>
    <link href="https://github.com/programthink/zhao" rel="alternate"></link>
    <summary type="html">&lt;p&gt;【编程随想】整理的《太子党关系网络》，专门揭露赵国的权贵&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= 俺整理的《太子党关系网络》 =&lt;/p&gt; &#xA;&lt;p&gt;== 简介 ==&lt;/p&gt; &#xA;&lt;p&gt;此项目创建于2016年2月，专门用来揭露天朝的权贵（也就是传说中的“赵家人”）。&lt;/p&gt; &#xA;&lt;p&gt;俺把这几年收集整理的数据开源到 GitHub，便于多人协作——大伙儿群策群力，一起来曝光权贵家族。&lt;/p&gt; &#xA;&lt;p&gt;初次上传的数据包括：700多个数据文件（ &#39;&#39;&#39;对应700多人，130多个家族&#39;&#39;&#39; ），另有200多张图片（人物头像）。随着俺不断完善，数据会越来越多。&lt;/p&gt; &#xA;&lt;p&gt;对这个项目，俺会【持续更新】。比如朝廷每次换届的时候，俺都会补充新的素材。&lt;/p&gt; &#xA;&lt;p&gt;为了确保数据的可信度，俺主要参考“维基百科”以及一些国际权威媒体的报道（比如《纽约时报》、《华尔街日版》、《金融时报》等等）。&lt;/p&gt; &#xA;&lt;p&gt;另外，对于某些客观事实（比如：生卒年月、简历、亲戚关系），俺也参考了天朝政府的官方网站，以及墙内的“百度百科”。&lt;/p&gt; &#xA;&lt;p&gt;== 下载说明 ==&lt;/p&gt; &#xA;&lt;p&gt;GitHub 提供了“下载整个项目”的功能，但是会比较大。&lt;/p&gt; &#xA;&lt;p&gt;如果你仅仅想看《太子党关系网络》这份文档，只需在首页上方点击进入 &#39;&#39;&#39;download&#39;&#39;&#39; 这个目录。&lt;/p&gt; &#xA;&lt;p&gt;该目录下有 &#39;&#39;&#39;pdf&#39;&#39;&#39; 和 &#39;&#39;&#39;jpg&#39;&#39;&#39; 两个子目录，分别存放对应的 &#39;&#39;&#39;【文件类型】&#39;&#39;&#39; 。你想要看哪一种文件格式，就进入哪个子目录里面。&lt;/p&gt; &#xA;&lt;p&gt;进入【文件类型】的子目录之后，会看到一个文件列表（目前有13个文件）。先点击你想要的某个文件，会进入该文件的页面。&lt;/p&gt; &#xA;&lt;p&gt;然后在【右上方】你会看到一个 &#39;&#39;&#39;Raw 按钮&#39;&#39;&#39; ，在这个按钮上点【右键】，在【右键菜单】里面选“保存”或“另存为”，就可以把这个文件下载到你本机。&lt;/p&gt; &#xA;&lt;p&gt;== 多人协作说明 ==&lt;/p&gt; &#xA;&lt;p&gt;俺非常希望有更多的网友参与该项目，大伙儿一起来完善天朝权贵家族的资料。&lt;/p&gt; &#xA;&lt;p&gt;想要参与的同学，可以通过如下方式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;到[https://program-think.blogspot.com/ 俺博客]留言进行反馈，补充信息或反馈错误。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在[https://github.com/programthink/zhao/issues 本项目发一个 issue]，补充信息或反馈错误。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork 该项目，进行修改，然后向俺发一个 Pull Request&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;（后面两种方式，你需要有 GitHub 的帐号）&lt;/p&gt; &#xA;&lt;p&gt;== 数据格式说明 ==&lt;/p&gt; &#xA;&lt;p&gt;本项目的数据文件，全部采用[https://zh.wikipedia.org/wiki/YAML YAML 格式]。这种格式非常简洁明了，有利于完全不懂技术的网友参与编辑。&lt;/p&gt; &#xA;&lt;p&gt;而且俺在每一个 YAML 格式的文件中都写了详细的注释，便于其他网友修改。&lt;/p&gt; &#xA;&lt;p&gt;== 目录说明 ==&lt;/p&gt; &#xA;&lt;p&gt;=== data 目录 ===&lt;/p&gt; &#xA;&lt;p&gt;data 目录用来保存数据文件，该目录下另有如下三个子目录：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;person&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个目录存放个人的资料，每个人一个目录，目录名就是人名。对于偶尔有同名的情况，在目录名末尾追加数字序号来区分。&lt;/p&gt; &#xA;&lt;p&gt;每个目录下都有一个 brief.yaml 文件，包含此人的简介。&lt;/p&gt; &#xA;&lt;p&gt;有些目录下还有一个 portrait.png 文件，对应此人的头像。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;company&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个目录存放与太子党有关的公司或组织机构。目录结构与 person 类似。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;family&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个目录存放家族关系的信息。每个家族是一个 yaml 格式的文件。&lt;/p&gt; &#xA;&lt;p&gt;=== bin 目录 ===&lt;/p&gt; &#xA;&lt;p&gt;该目录存放编译脚本。该脚本的使用参见下面的章节。&lt;/p&gt; &#xA;&lt;p&gt;=== download 目录 ===&lt;/p&gt; &#xA;&lt;p&gt;该目录存放制作好的文件，目前先提供 jpg 和 pdf 两种格式。&lt;/p&gt; &#xA;&lt;p&gt;如果你需要其它格式，可以用 bin 目录下的编译脚本自行搞定（编译脚本的使用，参见下面的章节）。&lt;/p&gt; &#xA;&lt;p&gt;== 编译脚本使用说明 ==&lt;/p&gt; &#xA;&lt;p&gt;（俺是在 Linux 上编写该脚本，尚未在 Windows 上进行测试）&lt;/p&gt; &#xA;&lt;p&gt;如果你在 Windows 上使用碰到问题，可以到[https://program-think.blogspot.com/ 俺博客]留言进行反馈。也可以在[https://github.com/programthink/zhao/issues 本项目发一个 issue]。&lt;/p&gt; &#xA;&lt;p&gt;=== 脚本的命令行参数 ===&lt;/p&gt; &#xA;&lt;p&gt;俺使用 python 作为编译脚本，该脚本位于 bin 目录下。&lt;/p&gt; &#xA;&lt;p&gt;通过该脚本可以把原始数据生成为 dot 语言的脚本。然后再调用 Graphviz 把 dot 脚本生成各种格式（比如：pdf、jpeg）。&lt;/p&gt; &#xA;&lt;p&gt;要使用该脚本，先在命令行模式下进入 bin 目录，然后运行如下命令：&lt;/p&gt; &#xA;&lt;p&gt;（生成 pdf 格式的示例）&lt;/p&gt; &#xA;&lt;p&gt;&#39;&#39;&#39;python make.py pdf&#39;&#39;&#39;&lt;/p&gt; &#xA;&lt;p&gt;（生成 jpg 格式的示例）&lt;/p&gt; &#xA;&lt;p&gt;&#39;&#39;&#39;python make.py jpg&#39;&#39;&#39;&lt;/p&gt; &#xA;&lt;p&gt;=== 依赖的软件 ===&lt;/p&gt; &#xA;&lt;p&gt;要使用上述脚本，你需要事先安装相关的软件（如下）&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python（2 或 3）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;因为俺用的是 Python 脚本，所以你需要先安装 python 软件。&lt;/p&gt; &#xA;&lt;p&gt;目前 Python 有两种大版本——python2 和 python3——俺的编译脚本 &#39;&#39;&#39;【同时兼容】&#39;&#39;&#39; 这两种 Python 的大版本。&lt;/p&gt; &#xA;&lt;p&gt;对于 Python 的小版本，俺本人在 &#39;&#39;&#39;2.7&#39;&#39;&#39; 和 &#39;&#39;&#39;3.5&#39;&#39;&#39; 上测试通过。2.6 和 3.4 估计也可以。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyYAML&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这是一个基于 python 开发的软件包，专门用来处理 YAML 格式的文件。&lt;/p&gt; &#xA;&lt;p&gt;你需要在你的 python 环境中安装该软件包。其官方链接如下：&lt;/p&gt; &#xA;&lt;p&gt;[http://pyyaml.org/wiki/PyYAML PyYAML 的官网的 wiki]&lt;/p&gt; &#xA;&lt;p&gt;[https://pypi.python.org/pypi/PyYAML Python 官网的 PYPI]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Graphviz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个软件是用来生成【关系图】的。关于该这个软件，俺已经写了一篇扫盲教程：&lt;/p&gt; &#xA;&lt;p&gt;《[https://program-think.blogspot.com/2016/02/opensource-review-graphviz.html 开源项目：【自动】绘图工具Graphviz——《太子党关系网络》就是用它制作]》&lt;/p&gt; &#xA;&lt;p&gt;== 致“反对此项目的墙内程序员” ==&lt;/p&gt; &#xA;&lt;p&gt;本项目上线第二天，就收获 363 个 star 兼 88 个 fork，甚至还挤进 GitHub 的“当日 Trending”——俺很荣幸，也很高兴有这么多人给俺捧场。&lt;/p&gt; &#xA;&lt;p&gt;但是在[https://github.com/programthink/zhao/issues 本项目的 issue 列表]中也看到好几个反对此项目的程序员（应该都来自墙内），他们担心这个项目导致 GitHub 被 GFW 封杀。&lt;/p&gt; &#xA;&lt;p&gt;这几年来，类似的言论俺已经看了不少。就好比强盗拿刀杀人，围观者不但没有谴责强盗，反而去谴责卖刀的店家——这就是传说中的“斯德哥尔摩综合症”。&lt;/p&gt; &#xA;&lt;p&gt;有兴趣的同学，可以看俺之前的博文——《[https://program-think.blogspot.com/2012/06/stockholm-syndrome.html 天朝民众的心理分析：斯德哥尔摩综合症]》&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nsarrazin/serge</title>
    <updated>2023-03-26T01:30:46Z</updated>
    <id>tag:github.com,2023-03-26:/nsarrazin/serge</id>
    <link href="https://github.com/nsarrazin/serge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web interface for chatting with Alpaca through llama.cpp. Fully dockerized, with an easy to use API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Serge - LLaMa made easy 🦙&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/nsarrazin/serge&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://discord.gg/62Hc6FEYQH&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1088427963801948201?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A chat interface based on &lt;code&gt;llama.cpp&lt;/code&gt; for running Alpaca models. Entirely self-hosted, no API keys needed. Fits on 4GB of RAM and runs on the CPU.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;SvelteKit&lt;/strong&gt; frontend&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; for storing chat history &amp;amp; parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FastAPI + beanie&lt;/strong&gt; for the API, wrapping calls to &lt;code&gt;llama.cpp&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/25119303/226897188-914a6662-8c26-472c-96bd-f51fc020abf6.webm&#34;&gt;demo.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Setting up Serge is very easy. TLDR for running it with Alpaca 7B:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/nsarrazin/serge.git&#xA;cd serge&#xA;&#xA;docker compose up -d&#xA;docker compose exec serge python3 /usr/src/app/api/utils/download.py tokenizer 7B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; For cloning on windows, use &lt;code&gt;git clone https://github.com/nsarrazin/serge.git --config core.autocrlf=input&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have docker desktop installed, WSL2 configured and enough free RAM to run models. (see below)&lt;/p&gt; &#xA;&lt;h3&gt;Using serge&lt;/h3&gt; &#xA;&lt;p&gt;(You can pass &lt;code&gt;7B 13B 30B&lt;/code&gt; as an argument to the &lt;code&gt;download.py&lt;/code&gt; script to download multiple models.)&lt;/p&gt; &#xA;&lt;p&gt;Then just go to &lt;a href=&#34;http://localhost:8008/&#34;&gt;http://localhost:8008/&lt;/a&gt; and you&#39;re good to go!&lt;/p&gt; &#xA;&lt;p&gt;The API is available at &lt;a href=&#34;http://localhost:8008/api/&#34;&gt;http://localhost:8008/api/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;Currently only the 7B, 13B and 30B alpaca models are supported. There&#39;s a download script for downloading them inside of the container, described above.&lt;/p&gt; &#xA;&lt;p&gt;If you have existing weights from another project you can add them to the &lt;code&gt;serge_weights&lt;/code&gt; volume using &lt;code&gt;docker cp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;⚠&lt;/span&gt; A note on &lt;em&gt;memory usage&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;p&gt;llama will just crash if you don&#39;t have enough available memory for your model.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;7B requires about 4.5GB of free RAM&lt;/li&gt; &#xA; &lt;li&gt;13B requires about 12GB free&lt;/li&gt; &#xA; &lt;li&gt;30B requires about 20GB free&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to join the discord if you need help with the setup: &lt;a href=&#34;https://discord.gg/62Hc6FEYQH&#34;&gt;https://discord.gg/62Hc6FEYQH&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s next&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Front-end to interface with the API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pass model parameters when creating a chat&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; User profiles &amp;amp; authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Different prompt options&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LangChain integration with a custom LLM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for other llama models, quantization, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a lot more!&lt;/p&gt;</summary>
  </entry>
</feed>