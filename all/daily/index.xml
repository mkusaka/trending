<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-01T01:29:21Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yetone/avante.nvim</title>
    <updated>2025-04-01T01:29:21Z</updated>
    <id>tag:github.com,2025-04-01:/yetone/avante.nvim</id>
    <link href="https://github.com/yetone/avante.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use your Neovim like using Cursor AI IDE!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;logo&#34; width=&#34;120&#34; src=&#34;https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de&#34;&gt; &#xA; &lt;h1&gt;avante.nvim&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://neovim.io/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=Neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&#34; alt=&#34;Neovim: v0.10+&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/yetone/avante.nvim/actions/workflows/lua.yaml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&amp;amp;logo=lua&amp;amp;logoColor=c7c7c7&amp;amp;label=Lua+CI&amp;amp;labelColor=1E40AF&amp;amp;color=347D39&amp;amp;event=push&#34; alt=&#34;Lua CI status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/yetone/avante.nvim/actions/workflows/rust.yaml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&amp;amp;logo=rust&amp;amp;logoColor=ffffff&amp;amp;label=Rust+CI&amp;amp;labelColor=BC826A&amp;amp;color=347D39&amp;amp;event=push&#34; alt=&#34;Rust CI status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/yetone/avante.nvim/actions/workflows/python.yaml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/python.yaml?style=flat-square&amp;amp;logo=python&amp;amp;logoColor=ffffff&amp;amp;label=Python+CI&amp;amp;labelColor=3672A5&amp;amp;color=347D39&amp;amp;event=push&#34; alt=&#34;Python CI status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/QfnEFEdSjz&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1302530866362323016?style=flat-square&amp;amp;logo=discord&amp;amp;label=Discord&amp;amp;logoColor=ffffff&amp;amp;labelColor=7376CF&amp;amp;color=268165&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://dotfyle.com/plugins/yetone/avante.nvim&#34;&gt; &lt;img src=&#34;https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;avante.nvim&lt;/strong&gt; is a Neovim plugin designed to emulate the behaviour of the &lt;a href=&#34;https://www.cursor.com&#34;&gt;Cursor&lt;/a&gt; AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/README_zh.md&#34;&gt;Êü•Áúã‰∏≠ÊñáÁâà&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;ü•∞ This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&#34;&gt;https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&#34;&gt;https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;If you like this project, please consider supporting me on Patreon, as it helps me to continue maintaining and improving it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://patreon.com/yetone&#34;&gt;Sponsor me&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI-Powered Code Assistance&lt;/strong&gt;: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One-Click Application&lt;/strong&gt;: Quickly apply the AI&#39;s suggested changes to your source code with a single command, streamlining the editing process and saving time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For building binary if you wish to build from source, then &lt;code&gt;cargo&lt;/code&gt; is required. Otherwise &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; will be used to get prebuilt binary from GitHub.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; (recommended)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;yetone/avante.nvim&#34;,&#xA;  event = &#34;VeryLazy&#34;,&#xA;  version = false, -- Never set this value to &#34;*&#34;! Never!&#xA;  opts = {&#xA;    -- add any opts here&#xA;    -- for example&#xA;    provider = &#34;openai&#34;,&#xA;    openai = {&#xA;      endpoint = &#34;https://api.openai.com/v1&#34;,&#xA;      model = &#34;gpt-4o&#34;, -- your desired model (or use gpt-4o, etc.)&#xA;      timeout = 30000, -- Timeout in milliseconds, increase this for reasoning models&#xA;      temperature = 0,&#xA;      max_tokens = 8192, -- Increase this to include reasoning tokens (for reasoning models)&#xA;      --reasoning_effort = &#34;medium&#34;, -- low|medium|high, only used for reasoning models&#xA;    },&#xA;  },&#xA;  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`&#xA;  build = &#34;make&#34;,&#xA;  -- build = &#34;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&#34; -- for windows&#xA;  dependencies = {&#xA;    &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;    &#34;stevearc/dressing.nvim&#34;,&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;    --- The below dependencies are optional,&#xA;    &#34;echasnovski/mini.pick&#34;, -- for file_selector provider mini.pick&#xA;    &#34;nvim-telescope/telescope.nvim&#34;, -- for file_selector provider telescope&#xA;    &#34;hrsh7th/nvim-cmp&#34;, -- autocompletion for avante commands and mentions&#xA;    &#34;ibhagwan/fzf-lua&#34;, -- for file_selector provider fzf&#xA;    &#34;nvim-tree/nvim-web-devicons&#34;, -- or echasnovski/mini.icons&#xA;    &#34;zbirenbaum/copilot.lua&#34;, -- for providers=&#39;copilot&#39;&#xA;    {&#xA;      -- support for image pasting&#xA;      &#34;HakonHarnes/img-clip.nvim&#34;,&#xA;      event = &#34;VeryLazy&#34;,&#xA;      opts = {&#xA;        -- recommended settings&#xA;        default = {&#xA;          embed_image_as_base64 = false,&#xA;          prompt_for_file_name = false,&#xA;          drag_and_drop = {&#xA;            insert_mode = true,&#xA;          },&#xA;          -- required for Windows users&#xA;          use_absolute_path = true,&#xA;        },&#xA;      },&#xA;    },&#xA;    {&#xA;      -- Make sure to set this up properly if you have lazy=true&#xA;      &#39;MeanderingProgrammer/render-markdown.nvim&#39;,&#xA;      opts = {&#xA;        file_types = { &#34;markdown&#34;, &#34;Avante&#34; },&#xA;      },&#xA;      ft = { &#34;markdown&#34;, &#34;Avante&#34; },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#xA;&#34; Deps&#xA;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;Plug &#39;stevearc/dressing.nvim&#39;&#xA;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;MunifTanjim/nui.nvim&#39;&#xA;Plug &#39;MeanderingProgrammer/render-markdown.nvim&#39;&#xA;&#xA;&#34; Optional deps&#xA;Plug &#39;hrsh7th/nvim-cmp&#39;&#xA;Plug &#39;nvim-tree/nvim-web-devicons&#39; &#34;or Plug &#39;echasnovski/mini.icons&#39;&#xA;Plug &#39;HakonHarnes/img-clip.nvim&#39;&#xA;Plug &#39;zbirenbaum/copilot.lua&#39;&#xA;&#xA;&#34; Yay, pass source=true if you want to build from source&#xA;Plug &#39;yetone/avante.nvim&#39;, { &#39;branch&#39;: &#39;main&#39;, &#39;do&#39;: &#39;make&#39; }&#xA;autocmd! User avante.nvim lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;avante&#39;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.deps&#34;&gt;mini.deps&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local add, later, now = MiniDeps.add, MiniDeps.later, MiniDeps.now&#xA;&#xA;add({&#xA;  source = &#39;yetone/avante.nvim&#39;,&#xA;  monitor = &#39;main&#39;,&#xA;  depends = {&#xA;    &#39;nvim-treesitter/nvim-treesitter&#39;,&#xA;    &#39;stevearc/dressing.nvim&#39;,&#xA;    &#39;nvim-lua/plenary.nvim&#39;,&#xA;    &#39;MunifTanjim/nui.nvim&#39;,&#xA;    &#39;echasnovski/mini.icons&#39;&#xA;  },&#xA;  hooks = { post_checkout = function() vim.cmd(&#39;make&#39;) end }&#xA;})&#xA;--- optional&#xA;add({ source = &#39;hrsh7th/nvim-cmp&#39; })&#xA;add({ source = &#39;zbirenbaum/copilot.lua&#39; })&#xA;add({ source = &#39;HakonHarnes/img-clip.nvim&#39; })&#xA;add({ source = &#39;MeanderingProgrammer/render-markdown.nvim&#39; })&#xA;&#xA;later(function() require(&#39;render-markdown&#39;).setup({...}) end)&#xA;later(function()&#xA;  require(&#39;img-clip&#39;).setup({...}) -- config img-clip&#xA;  require(&#34;copilot&#34;).setup({...}) -- setup copilot to your liking&#xA;  require(&#34;avante&#34;).setup({...}) -- config for avante.nvim&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#xA;  -- Required plugins&#xA;  use &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;  use &#39;stevearc/dressing.nvim&#39;&#xA;  use &#39;nvim-lua/plenary.nvim&#39;&#xA;  use &#39;MunifTanjim/nui.nvim&#39;&#xA;  use &#39;MeanderingProgrammer/render-markdown.nvim&#39;&#xA;&#xA;  -- Optional dependencies&#xA;  use &#39;hrsh7th/nvim-cmp&#39;&#xA;  use &#39;nvim-tree/nvim-web-devicons&#39; -- or use &#39;echasnovski/mini.icons&#39;&#xA;  use &#39;HakonHarnes/img-clip.nvim&#39;&#xA;  use &#39;zbirenbaum/copilot.lua&#39;&#xA;&#xA;  -- Avante.nvim with build process&#xA;  use {&#xA;    &#39;yetone/avante.nvim&#39;,&#xA;    branch = &#39;main&#39;,&#xA;    run = &#39;make&#39;,&#xA;    config = function()&#xA;      require(&#39;avante&#39;).setup()&#xA;    end&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://github.com/nix-community/home-manager&#34;&gt;Home Manager&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;programs.neovim = {&#xA;  plugins = [&#xA;    {&#xA;      plugin = pkgs.vimPlugins.avante-nvim;&#xA;      type = &#34;lua&#34;;&#xA;      config = &#39;&#39;&#xA;              require(&#34;avante_lib&#34;).load()&#xA;              require(&#34;avante&#34;).setup()&#xA;      &#39;&#39; # or builtins.readFile ./plugins/avante.lua;&#xA;    }&#xA;  ];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://nix-community.github.io/nixvim/plugins/avante/index.html&#34;&gt;Nixvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;  plugins.avante.enable = true;&#xA;  plugins.avante.settings = {&#xA;    # setup options here&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Lua&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- deps:&#xA;require(&#39;cmp&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;img-clip&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;copilot&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;render-markdown&#39;).setup ({&#xA;  -- use recommended settings from above&#xA;})&#xA;require(&#39;avante&#39;).setup ({&#xA;  -- Your config here!&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;avante.nvim&lt;/code&gt; is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;When loading the plugin synchronously, we recommend &lt;code&gt;require&lt;/code&gt;ing it sometime after your colorscheme.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- views can only be fully collapsed with the global statusline&#xA;vim.opt.laststatus = 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype &lt;code&gt;Avante&lt;/code&gt;. See &lt;a href=&#34;https://github.com/yetone/avante.nvim/issues/175&#34;&gt;https://github.com/yetone/avante.nvim/issues/175&lt;/a&gt; and &lt;a href=&#34;https://github.com/yetone/avante.nvim/issues/175#issuecomment-2313749363&#34;&gt;this comment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Default setup configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/config.lua&#34;&gt;config.lua#L9&lt;/a&gt; for the full config&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Default configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ---@alias Provider &#34;claude&#34; | &#34;openai&#34; | &#34;azure&#34; | &#34;gemini&#34; | &#34;cohere&#34; | &#34;copilot&#34; | string&#xA;  provider = &#34;claude&#34;, -- The provider used in Aider mode or in the planning phase of Cursor Planning Mode&#xA;  -- WARNING: Since auto-suggestions are a high-frequency operation and therefore expensive,&#xA;  -- currently designating it as `copilot` provider is dangerous because: https://github.com/yetone/avante.nvim/issues/1048&#xA;  -- Of course, you can reduce the request frequency by increasing `suggestion.debounce`.&#xA;  auto_suggestions_provider = &#34;claude&#34;,&#xA;  cursor_applying_provider = nil, -- The provider used in the applying phase of Cursor Planning Mode, defaults to nil, when nil uses Config.provider as the provider for the applying phase&#xA;  claude = {&#xA;    endpoint = &#34;https://api.anthropic.com&#34;,&#xA;    model = &#34;claude-3-5-sonnet-20241022&#34;,&#xA;    temperature = 0,&#xA;    max_tokens = 4096,&#xA;  },&#xA;  ---Specify the special dual_boost mode&#xA;  ---1. enabled: Whether to enable dual_boost mode. Default to false.&#xA;  ---2. first_provider: The first provider to generate response. Default to &#34;openai&#34;.&#xA;  ---3. second_provider: The second provider to generate response. Default to &#34;claude&#34;.&#xA;  ---4. prompt: The prompt to generate response based on the two reference outputs.&#xA;  ---5. timeout: Timeout in milliseconds. Default to 60000.&#xA;  ---How it works:&#xA;  --- When dual_boost is enabled, avante will generate two responses from the first_provider and second_provider respectively. Then use the response from the first_provider as provider1_output and the response from the second_provider as provider2_output. Finally, avante will generate a response based on the prompt and the two reference outputs, with the default Provider as normal.&#xA;  ---Note: This is an experimental feature and may not work as expected.&#xA;  dual_boost = {&#xA;    enabled = false,&#xA;    first_provider = &#34;openai&#34;,&#xA;    second_provider = &#34;claude&#34;,&#xA;    prompt = &#34;Based on the two reference outputs below, generate a response that incorporates elements from both but reflects your own judgment and unique perspective. Do not provide any explanation, just give the response directly. Reference Output 1: [{{provider1_output}}], Reference Output 2: [{{provider2_output}}]&#34;,&#xA;    timeout = 60000, -- Timeout in milliseconds&#xA;  },&#xA;  behaviour = {&#xA;    auto_suggestions = false, -- Experimental stage&#xA;    auto_set_highlight_group = true,&#xA;    auto_set_keymaps = true,&#xA;    auto_apply_diff_after_generation = false,&#xA;    support_paste_from_clipboard = false,&#xA;    minimize_diff = true, -- Whether to remove unchanged lines when applying a code block&#xA;    enable_token_counting = true, -- Whether to enable token counting. Default to true.&#xA;    enable_cursor_planning_mode = false, -- Whether to enable Cursor Planning Mode. Default to false.&#xA;    enable_claude_text_editor_tool_mode = false, -- Whether to enable Claude Text Editor Tool Mode.&#xA;  },&#xA;  mappings = {&#xA;    --- @class AvanteConflictMappings&#xA;    diff = {&#xA;      ours = &#34;co&#34;,&#xA;      theirs = &#34;ct&#34;,&#xA;      all_theirs = &#34;ca&#34;,&#xA;      both = &#34;cb&#34;,&#xA;      cursor = &#34;cc&#34;,&#xA;      next = &#34;]x&#34;,&#xA;      prev = &#34;[x&#34;,&#xA;    },&#xA;    suggestion = {&#xA;      accept = &#34;&amp;lt;M-l&amp;gt;&#34;,&#xA;      next = &#34;&amp;lt;M-]&amp;gt;&#34;,&#xA;      prev = &#34;&amp;lt;M-[&amp;gt;&#34;,&#xA;      dismiss = &#34;&amp;lt;C-]&amp;gt;&#34;,&#xA;    },&#xA;    jump = {&#xA;      next = &#34;]]&#34;,&#xA;      prev = &#34;[[&#34;,&#xA;    },&#xA;    submit = {&#xA;      normal = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;      insert = &#34;&amp;lt;C-s&amp;gt;&#34;,&#xA;    },&#xA;    cancel = {&#xA;      normal = { &#34;&amp;lt;C-c&amp;gt;&#34;, &#34;&amp;lt;Esc&amp;gt;&#34;, &#34;q&#34; },&#xA;      insert = { &#34;&amp;lt;C-c&amp;gt;&#34; },&#xA;    },&#xA;    sidebar = {&#xA;      apply_all = &#34;A&#34;,&#xA;      apply_cursor = &#34;a&#34;,&#xA;      retry_user_request = &#34;r&#34;,&#xA;      edit_user_request = &#34;e&#34;,&#xA;      switch_windows = &#34;&amp;lt;Tab&amp;gt;&#34;,&#xA;      reverse_switch_windows = &#34;&amp;lt;S-Tab&amp;gt;&#34;,&#xA;      remove_file = &#34;d&#34;,&#xA;      add_file = &#34;@&#34;,&#xA;      close = { &#34;&amp;lt;Esc&amp;gt;&#34;, &#34;q&#34; },&#xA;      close_from_input = nil, -- e.g., { normal = &#34;&amp;lt;Esc&amp;gt;&#34;, insert = &#34;&amp;lt;C-d&amp;gt;&#34; }&#xA;    },&#xA;  },&#xA;  hints = { enabled = true },&#xA;  windows = {&#xA;    ---@type &#34;right&#34; | &#34;left&#34; | &#34;top&#34; | &#34;bottom&#34;&#xA;    position = &#34;right&#34;, -- the position of the sidebar&#xA;    wrap = true, -- similar to vim.o.wrap&#xA;    width = 30, -- default % based on available width&#xA;    sidebar_header = {&#xA;      enabled = true, -- true, false to enable/disable the header&#xA;      align = &#34;center&#34;, -- left, center, right for title&#xA;      rounded = true,&#xA;    },&#xA;    input = {&#xA;      prefix = &#34;&amp;gt; &#34;,&#xA;      height = 8, -- Height of the input window in vertical layout&#xA;    },&#xA;    edit = {&#xA;      border = &#34;rounded&#34;,&#xA;      start_insert = true, -- Start insert mode when opening the edit window&#xA;    },&#xA;    ask = {&#xA;      floating = false, -- Open the &#39;AvanteAsk&#39; prompt in a floating window&#xA;      start_insert = true, -- Start insert mode when opening the ask window&#xA;      border = &#34;rounded&#34;,&#xA;      ---@type &#34;ours&#34; | &#34;theirs&#34;&#xA;      focus_on_apply = &#34;ours&#34;, -- which diff to focus after applying&#xA;    },&#xA;  },&#xA;  highlights = {&#xA;    ---@type AvanteConflictHighlights&#xA;    diff = {&#xA;      current = &#34;DiffText&#34;,&#xA;      incoming = &#34;DiffAdd&#34;,&#xA;    },&#xA;  },&#xA;  --- @class AvanteConflictUserConfig&#xA;  diff = {&#xA;    autojump = true,&#xA;    ---@type string | fun(): any&#xA;    list_opener = &#34;copen&#34;,&#xA;    --- Override the &#39;timeoutlen&#39; setting while hovering over a diff (see :help timeoutlen).&#xA;    --- Helps to avoid entering operator-pending mode with diff mappings starting with `c`.&#xA;    --- Disable by setting to -1.&#xA;    override_timeoutlen = 500,&#xA;  },&#xA;  suggestion = {&#xA;    debounce = 600,&#xA;    throttle = 600,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Blink.cmp users&lt;/h2&gt; &#xA;&lt;p&gt;For blink cmp users (nvim-cmp alternative) view below instruction for configuration This is achieved by emulating nvim-cmp using blink.compat or you can use &lt;a href=&#34;https://github.com/Kaiser-Yang/blink-cmp-avante&#34;&gt;Kaiser-Yang/blink-cmp-avante&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Lua&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      file_selector = {&#xA;        --- @alias FileSelectorProvider &#34;native&#34; | &#34;fzf&#34; | &#34;mini.pick&#34; | &#34;snacks&#34; | &#34;telescope&#34; | string | fun(params: avante.file_selector.IParams|nil): nil&#xA;        provider = &#34;fzf&#34;,&#xA;        -- Options override for custom providers&#xA;        provider_opts = {},&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To create a customized file_selector, you can specify a customized function to launch a picker to select items and pass the selected items to the &lt;code&gt;handler&lt;/code&gt; callback.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      file_selector = {&#xA;        ---@param params avante.file_selector.IParams&#xA;        provider = function(params)&#xA;          local filepaths = params.filepaths ---@type string[]&#xA;          local title = params.title ---@type string&#xA;          local handler = params.handler ---@type fun(selected_filepaths: string[]|nil): nil&#xA;&#xA;          -- Launch your customized picker with the items built from `filepaths`, then in the `on_confirm` callback,&#xA;          -- pass the selected items (convert back to file paths) to the `handler` function.&#xA;&#xA;          local items = __your_items_formatter__(filepaths)&#xA;          __your_picker__({&#xA;            items = items,&#xA;            on_cancel = function()&#xA;              handler(nil)&#xA;            end,&#xA;            on_confirm = function(selected_items)&#xA;              local selected_filepaths = {}&#xA;              for _, item in ipairs(selected_items) do&#xA;                table.insert(selected_filepaths, item.filepath)&#xA;              end&#xA;              handler(selected_filepaths)&#xA;            end&#xA;          })&#xA;        end,&#xA;        ---below is optional&#xA;        provider_opts = {&#xA;          ---@param params avante.file_selector.opts.IGetFilepathsParams&#xA;          get_filepaths = function(params)&#xA;            local cwd = params.cwd ---@type string&#xA;            local selected_filepaths = params.selected_filepaths ---@type string[]&#xA;            local cmd = string.format(&#34;fd --base-directory &#39;%s&#39; --hidden&#34;, vim.fn.fnameescape(cwd))&#xA;            local output = vim.fn.system(cmd)&#xA;            local filepaths = vim.split(output, &#34;\n&#34;, { trimempty = true })&#xA;            return vim&#xA;              .iter(filepaths)&#xA;              :filter(function(filepath)&#xA;                return not vim.tbl_contains(selected_filepaths, filepath)&#xA;              end)&#xA;              :totable()&#xA;          end&#xA;        }&#xA;        end&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Choose a selector other that native, the default as that currently has an issue For lazyvim users copy the full config for blink.cmp from the website or extend the options&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      compat = {&#xA;        &#34;avante_commands&#34;,&#xA;        &#34;avante_mentions&#34;,&#xA;        &#34;avante_files&#34;,&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For other users just add a custom provider&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      default = {&#xA;        ...&#xA;        &#34;avante_commands&#34;,&#xA;        &#34;avante_mentions&#34;,&#xA;        &#34;avante_files&#34;,&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      providers = {&#xA;        avante_commands = {&#xA;          name = &#34;avante_commands&#34;,&#xA;          module = &#34;blink.compat.source&#34;,&#xA;          score_offset = 90, -- show at a higher priority than lsp&#xA;          opts = {},&#xA;        },&#xA;        avante_files = {&#xA;          name = &#34;avante_files&#34;,&#xA;          module = &#34;blink.compat.source&#34;,&#xA;          score_offset = 100, -- show at a higher priority than lsp&#xA;          opts = {},&#xA;        },&#xA;        avante_mentions = {&#xA;          name = &#34;avante_mentions&#34;,&#xA;          module = &#34;blink.compat.source&#34;,&#xA;          score_offset = 1000, -- show at a higher priority than lsp&#xA;          opts = {},&#xA;        }&#xA;        ...&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Given its early stage, &lt;code&gt;avante.nvim&lt;/code&gt; currently supports the following basic functionalities:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;Avante will only support Claude, and OpenAI (and its variants including azure)out-of-the-box due to its high code quality generation. For all OpenAI-compatible providers, see &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki/Custom-providers&#34;&gt;wiki&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;&lt;del&gt;Due to the poor performance of other models, avante.nvim only recommends using the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;All features can only be guaranteed to work properly on the claude-3.5-sonnet model.&lt;/del&gt; &amp;gt; &lt;del&gt;We do not accept changes to the code or prompts to accommodate other models. Otherwise, it will greatly increase our maintenance costs.&lt;/del&gt; &amp;gt; &lt;del&gt;We hope everyone can understand. Thank you!&lt;/del&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;Since avante.nvim now supports &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&#34;&gt;cursor planning mode&lt;/a&gt;, the above statement is no longer valid! avante.nvim now supports most models! If you encounter issues with normal usage, please try enabling &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&#34;&gt;cursor planning mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;p&gt;For most consistency between neovim session, it is recommended to set the environment variables in your shell file. By default, &lt;code&gt;Avante&lt;/code&gt; will prompt you at startup to input the API key for the provider you have selected.&lt;/p&gt; &#xA; &lt;p&gt;For Claude:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ANTHROPIC_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For OpenAI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OPENAI_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For Azure OpenAI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export AZURE_OPENAI_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For Amazon Bedrock:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export BEDROCK_KEYS=aws_access_key_id,aws_secret_access_key,aws_region[,aws_session_token]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: The aws_session_token is optional and only needed when using temporary AWS credentials&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open a code file in Neovim.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;:AvanteAsk&lt;/code&gt; command to query the AI about the code.&lt;/li&gt; &#xA; &lt;li&gt;Review the AI&#39;s suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Apply the recommended changes directly to your code with a simple command or key binding.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves.&lt;/p&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The following key bindings are available for use with &lt;code&gt;avante.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key Binding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;show sidebar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle sidebar visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;refresh sidebar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;switch sidebar focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;select model&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;edit selected blocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Leader&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;S&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;stop current AI request&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose ours&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose theirs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose all theirs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;choose cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move to previous conflict&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;move to next conflict&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to previous codeblocks (results window)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jump to next codeblocks (results windows)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;If you are using &lt;code&gt;lazy.nvim&lt;/code&gt;, then all keymap here will be safely set, meaning if &lt;code&gt;&amp;lt;leader&amp;gt;aa&lt;/code&gt; is already binded, then avante.nvim won&#39;t bind this mapping. In this case, user will be responsible for setting up their own. See &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki#keymaps-and-api-i-guess&#34;&gt;notes on keymaps&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Neotree shortcut&lt;/h3&gt; &#xA;&lt;p&gt;In the neotree sidebar, you can also add a new keyboard shortcut to quickly add &lt;code&gt;file/folder&lt;/code&gt; to &lt;code&gt;Avante Selected Files&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neotree configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#39;nvim-neo-tree/neo-tree.nvim&#39;,&#xA;    config = function()&#xA;      require(&#39;neo-tree&#39;).setup({&#xA;        filesystem = {&#xA;          commands = {&#xA;            avante_add_files = function(state)&#xA;              local node = state.tree:get_node()&#xA;              local filepath = node:get_id()&#xA;              local relative_path = require(&#39;avante.utils&#39;).relative_path(filepath)&#xA;&#xA;              local sidebar = require(&#39;avante&#39;).get()&#xA;&#xA;              local open = sidebar:is_open()&#xA;              -- ensure avante sidebar is open&#xA;              if not open then&#xA;                require(&#39;avante.api&#39;).ask()&#xA;                sidebar = require(&#39;avante&#39;).get()&#xA;              end&#xA;&#xA;              sidebar.file_selector:add_selected_file(relative_path)&#xA;&#xA;              -- remove neo tree buffer&#xA;              if not open then&#xA;                sidebar.file_selector:remove_selected_file(&#39;neo-tree filesystem [1]&#39;)&#xA;              end&#xA;            end,&#xA;          },&#xA;          window = {&#xA;            mappings = {&#xA;              [&#39;oa&#39;] = &#39;avante_add_files&#39;,&#xA;            },&#xA;          },&#xA;        },&#xA;      })&#xA;    end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteAsk [question] [position]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ask AI about your code. Optional &lt;code&gt;position&lt;/code&gt; set window position and &lt;code&gt;ask&lt;/code&gt; enable/disable direct asking mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteAsk position=right Refactor this code here&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteBuild&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build dependencies for the project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteChat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Start a chat session with AI about your codebase. Default is &lt;code&gt;ask&lt;/code&gt;=false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteClear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the chat history&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteEdit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Edit the selected code blocks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteFocus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch focus to/from the sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteRefresh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Refresh all Avante windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteStop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stop the current AI request&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteSwitchProvider&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch AI provider (e.g. openai)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteShowRepoMap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show repo map for project&#39;s structure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteToggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle the Avante sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:AvanteModels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show model list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Highlight Groups&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteTitle&lt;/td&gt; &#xA;   &lt;td&gt;Title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteReversedTitle&lt;/td&gt; &#xA;   &lt;td&gt;Used for rounded border&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteSubtitle&lt;/td&gt; &#xA;   &lt;td&gt;Selected code title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteReversedSubtitle&lt;/td&gt; &#xA;   &lt;td&gt;Used for rounded border&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteThirdTitle&lt;/td&gt; &#xA;   &lt;td&gt;Prompt title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteReversedThirdTitle&lt;/td&gt; &#xA;   &lt;td&gt;Used for rounded border&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictCurrent&lt;/td&gt; &#xA;   &lt;td&gt;Current conflict highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.current&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictIncoming&lt;/td&gt; &#xA;   &lt;td&gt;Incoming conflict highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to &lt;code&gt;Config.highlights.diff.incoming&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictCurrentLabel&lt;/td&gt; &#xA;   &lt;td&gt;Current conflict label highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictCurrent&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteConflictIncomingLabel&lt;/td&gt; &#xA;   &lt;td&gt;Incoming conflict label highlight&lt;/td&gt; &#xA;   &lt;td&gt;Default to shade of &lt;code&gt;AvanteConflictIncoming&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvantePopupHint&lt;/td&gt; &#xA;   &lt;td&gt;Usage hints in popup menus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AvanteInlineHint&lt;/td&gt; &#xA;   &lt;td&gt;The end-of-line hint displayed in visual mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/lua/avante/highlights.lua&#34;&gt;highlights.lua&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Ollama&lt;/h2&gt; &#xA;&lt;p&gt;ollama is a first-class provider for avante.nvim. You can use it by setting &lt;code&gt;provider = &#34;ollama&#34;&lt;/code&gt; in the configuration, and set the &lt;code&gt;model&lt;/code&gt; field in &lt;code&gt;ollama&lt;/code&gt; to the model you want to use. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;provider = &#34;ollama&#34;,&#xA;ollama = {&#xA;  model = &#34;qwq:32b&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you use ollama, the code planning effect may not be ideal, so it is strongly recommended that you enable &lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/cursor-planning-mode.md&#34;&gt;cursor-planning-mode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;AiHubMix&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s.kiiro.ai/r/PPELHy&#34;&gt;AiHubMix&lt;/a&gt; is a built-in provider for avante.nvim. You can register an account on the &lt;a href=&#34;https://s.kiiro.ai/r/PPELHy&#34;&gt;AiHubMix official website&lt;/a&gt;, then create an API Key within the website, and set this API Key in your environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export AIHUBMIX_API_KEY=your_api_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your configuration, set &lt;code&gt;provider = &#34;aihubmix&#34;&lt;/code&gt;, and set the &lt;code&gt;model&lt;/code&gt; field to the model name you want to use, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;provider = &#34;aihubmix&#34;,&#xA;aihubmix = {&#xA;  model = &#34;gpt-4o-2024-11-20&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom providers&lt;/h2&gt; &#xA;&lt;p&gt;Avante provides a set of default providers, but users can also create their own providers.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki/Custom-providers&#34;&gt;Custom Providers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cursor planning mode&lt;/h2&gt; &#xA;&lt;p&gt;Because avante.nvim has always used Aider‚Äôs method for planning applying, but its prompts are very picky with models and require ones like claude-3.5-sonnet or gpt-4o to work properly.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, I have adopted Cursor‚Äôs method to implement planning applying. For details on the implementation, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/cursor-planning-mode.md&#34;&gt;cursor-planning-mode.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;RAG Service&lt;/h2&gt; &#xA;&lt;p&gt;Avante provides a RAG service, which is a tool for obtaining the required context for the AI to generate the codes. By default, it is not enabled. You can enable it this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;rag_service = {&#xA;  enabled = false, -- Enables the RAG service&#xA;  host_mount = os.getenv(&#34;HOME&#34;), -- Host mount path for the rag service&#xA;  provider = &#34;openai&#34;, -- The provider to use for RAG service (e.g. openai or ollama)&#xA;  llm_model = &#34;&#34;, -- The LLM model to use for RAG service&#xA;  embed_model = &#34;&#34;, -- The embedding model to use for RAG service&#xA;  endpoint = &#34;https://api.openai.com/v1&#34;, -- The API endpoint for RAG service&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your rag_service provider is &lt;code&gt;openai&lt;/code&gt;, then you need to set the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable!&lt;/p&gt; &#xA;&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, you need to set the endpoint to &lt;code&gt;http://localhost:11434&lt;/code&gt; (note there is no &lt;code&gt;/v1&lt;/code&gt; at the end) or any address of your own ollama server.&lt;/p&gt; &#xA;&lt;p&gt;If your rag_service provider is &lt;code&gt;ollama&lt;/code&gt;, when &lt;code&gt;llm_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;llama3&lt;/code&gt;, and when &lt;code&gt;embed_model&lt;/code&gt; is empty, it defaults to &lt;code&gt;nomic-embed-text&lt;/code&gt;. Please make sure these models are available in your ollama server.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, RAG Service also depends on Docker! (For macOS users, OrbStack is recommended as a Docker alternative).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;host_mount&lt;/code&gt; is the path that will be mounted to the container, and the default is the home directory. The mount is required for the RAG service to access the files in the host machine. It is up to the user to decide if you want to mount the whole &lt;code&gt;/&lt;/code&gt; directory, just the project directory, or the home directory. If you plan using avante and RAG event for projects stored outside your home directory, you will need to set the &lt;code&gt;host_mount&lt;/code&gt; to the root directory of your file system.&lt;/p&gt; &#xA;&lt;p&gt;The mount will be read only.&lt;/p&gt; &#xA;&lt;p&gt;After changing the rag_service configuration, you need to manually delete the rag_service container to ensure the new configuration is used: &lt;code&gt;docker rm -fv avante-rag-service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web Search Engines&lt;/h2&gt; &#xA;&lt;p&gt;Avante&#39;s tools include some web search engines, currently support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serpapi.com/&#34;&gt;SerpApi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.searchapi.io/&#34;&gt;SearchAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google&#39;s &lt;a href=&#34;https://developers.google.com/custom-search/v1/overview&#34;&gt;Programmable Search Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.kagi.com/kagi/api/search.html&#34;&gt;Kagi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-dashboard.search.brave.com/app/documentation/web-search/get-started&#34;&gt;Brave Search&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default is Tavily, and can be changed through configuring &lt;code&gt;Config.web_search_engine.provider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;web_search_engine = {&#xA;  provider = &#34;tavily&#34;, -- tavily, serpapi, searchapi, google or kagi&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Environment variables required for providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tavily: &lt;code&gt;TAVILY_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;SerpApi: &lt;code&gt;SERPAPI_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;SearchAPI: &lt;code&gt;SEARCHAPI_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_API_KEY&lt;/code&gt; as the &lt;a href=&#34;https://developers.google.com/custom-search/v1/overview&#34;&gt;API key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOOGLE_SEARCH_ENGINE_ID&lt;/code&gt; as the &lt;a href=&#34;https://programmablesearchengine.google.com&#34;&gt;search engine&lt;/a&gt; ID&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Kagi: &lt;code&gt;KAGI_API_KEY&lt;/code&gt; as the &lt;a href=&#34;https://kagi.com/settings?p=api&#34;&gt;API Token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brave Search: &lt;code&gt;BRAVE_API_KEY&lt;/code&gt; as the &lt;a href=&#34;https://api-dashboard.search.brave.com/app/keys&#34;&gt;API key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disable Tools&lt;/h2&gt; &#xA;&lt;p&gt;Avante enables tools by default, but some LLM models do not support tools. You can disable tools by setting &lt;code&gt;disable_tools = true&lt;/code&gt; for the provider. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  claude = {&#xA;    endpoint = &#34;https://api.anthropic.com&#34;,&#xA;    model = &#34;claude-3-5-sonnet-20241022&#34;,&#xA;    timeout = 30000, -- Timeout in milliseconds&#xA;    temperature = 0,&#xA;    max_tokens = 4096,&#xA;    disable_tools = true, -- disable tools!&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you want to ban some tools to avoid its usage (like Claude 3.7 overusing the python tool) you can disable just specific tools&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  disabled_tools = { &#34;python&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tool list&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;rag_search, python, git_diff, git_commit, list_files, search_files, search_keyword, read_file_toplevel_symbols, read_file, create_file, rename_file, delete_file, create_dir, rename_dir, delete_dir, bash, web_search, fetch&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom Tools&lt;/h2&gt; &#xA;&lt;p&gt;Avante allows you to define custom tools that can be used by the AI during code generation and analysis. These tools can execute shell commands, run scripts, or perform any custom logic you need.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Go Test Runner&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Here&#39;s an example of a custom tool that runs Go unit tests:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  custom_tools = {&#xA;    {&#xA;      name = &#34;run_go_tests&#34;,  -- Unique name for the tool&#xA;      description = &#34;Run Go unit tests and return results&#34;,  -- Description shown to AI&#xA;      command = &#34;go test -v ./...&#34;,  -- Shell command to execute&#xA;      param = {  -- Input parameters (optional)&#xA;        type = &#34;table&#34;,&#xA;        fields = {&#xA;          {&#xA;            name = &#34;target&#34;,&#xA;            description = &#34;Package or directory to test (e.g. &#39;./pkg/...&#39; or &#39;./internal/pkg&#39;)&#34;,&#xA;            type = &#34;string&#34;,&#xA;            optional = true,&#xA;          },&#xA;        },&#xA;      },&#xA;      returns = {  -- Expected return values&#xA;        {&#xA;          name = &#34;result&#34;,&#xA;          description = &#34;Result of the fetch&#34;,&#xA;          type = &#34;string&#34;,&#xA;        },&#xA;        {&#xA;          name = &#34;error&#34;,&#xA;          description = &#34;Error message if the fetch was not successful&#34;,&#xA;          type = &#34;string&#34;,&#xA;          optional = true,&#xA;        },&#xA;      },&#xA;      func = function(params, on_log, on_complete)  -- Custom function to execute&#xA;        local target = params.target or &#34;./...&#34;&#xA;        return vim.fn.system(string.format(&#34;go test -v %s&#34;, target))&#xA;      end,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;MCP&lt;/h2&gt; &#xA;&lt;p&gt;Now you can integrate MCP functionality for Avante through &lt;code&gt;mcphub.nvim&lt;/code&gt;. For detailed documentation, please refer to &lt;a href=&#34;https://github.com/ravitemer/mcphub.nvim#avante-integration&#34;&gt;mcphub.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Claude Text Editor Tool Mode&lt;/h2&gt; &#xA;&lt;p&gt;Avante leverages &lt;a href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/tool-use/text-editor-tool&#34;&gt;Claude Text Editor Tool&lt;/a&gt; to provide a more elegant code editing experience. You can now enable this feature by setting &lt;code&gt;enable_claude_text_editor_tool_mode&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;behaviour&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  behaviour = {&#xA;    enable_claude_text_editor_tool_mode = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] To enable &lt;strong&gt;Claude Text Editor Tool Mode&lt;/strong&gt;, you must use the &lt;code&gt;claude-3-5-sonnet-*&lt;/code&gt; or &lt;code&gt;claude-3-7-sonnet-*&lt;/code&gt; model with the &lt;code&gt;claude&lt;/code&gt; provider! This feature is not supported by any other models!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom prompts&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;avante.nvim&lt;/code&gt; provides three different modes to interact with: &lt;code&gt;planning&lt;/code&gt;, &lt;code&gt;editing&lt;/code&gt;, and &lt;code&gt;suggesting&lt;/code&gt;, followed with three different prompts per mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;planning&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).toggle()&lt;/code&gt; on sidebar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;editing&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).edit()&lt;/code&gt; on selection codeblock&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suggesting&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).get_suggestion():suggest()&lt;/code&gt; on Tab flow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursor-planning&lt;/code&gt;: Used with &lt;code&gt;require(&#34;avante&#34;).toggle()&lt;/code&gt; on Tab flow, but only when cursor planning mode is enabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Users can customize the system prompts via &lt;code&gt;Config.system_prompt&lt;/code&gt;. We recommend calling this in a custom Autocmds depending on your need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;  pattern = &#34;ToggleMyPrompt&#34;,&#xA;  callback = function() require(&#34;avante.config&#34;).override({system_prompt = &#34;MY CUSTOM SYSTEM PROMPT&#34;}) end,&#xA;})&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;am&#34;, function() vim.api.nvim_exec_autocmds(&#34;User&#34;, { pattern = &#34;ToggleMyPrompt&#34; }) end, { desc = &#34;avante: toggle my prompt&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If one wish to custom prompts for each mode, &lt;code&gt;avante.nvim&lt;/code&gt; will check for project root based on the given buffer whether it contains the following patterns: &lt;code&gt;*.{mode}.avanterules&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The rules for root hierarchy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lsp workspace folders&lt;/li&gt; &#xA; &lt;li&gt;lsp root_dir&lt;/li&gt; &#xA; &lt;li&gt;root pattern of filename of the current buffer&lt;/li&gt; &#xA; &lt;li&gt;root pattern of cwd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example folder structure for custom prompt&lt;/summary&gt; &#xA; &lt;p&gt;If you have the following structure:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.&#xA;‚îú‚îÄ‚îÄ .git/&#xA;‚îú‚îÄ‚îÄ typescript.planning.avanterules&#xA;‚îú‚îÄ‚îÄ snippets.editing.avanterules&#xA;‚îú‚îÄ‚îÄ suggesting.avanterules&#xA;‚îî‚îÄ‚îÄ src/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;typescript.planning.avanterules&lt;/code&gt; will be used for &lt;code&gt;planning&lt;/code&gt; mode&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;snippets.editing.avanterules&lt;/code&gt; will be used for &lt;code&gt;editing&lt;/code&gt; mode&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;suggesting.avanterules&lt;/code&gt; will be used for &lt;code&gt;suggesting&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!important]&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;*.avanterules&lt;/code&gt; is a jinja template file, in which will be rendered using &lt;a href=&#34;https://github.com/mitsuhiko/minijinja&#34;&gt;minijinja&lt;/a&gt;. See &lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates&#34;&gt;templates&lt;/a&gt; for example on how to extend current templates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with current file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apply diff patch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with the selected block&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Slash commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit the selected block&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Smart Tab (Cursor Flow)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with project (You can use &lt;code&gt;@codebase&lt;/code&gt; to chat with the whole project)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat with selected files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tool use&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MCP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better codebase indexing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced AI Interactions&lt;/strong&gt;: Improve the depth of AI analysis and recommendations for more complex coding scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LSP + Tree-sitter + LLM Integration&lt;/strong&gt;: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to avante.nvim are welcome! If you&#39;re interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/yetone/avante.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more recipes and tricks.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nvim Plugin&lt;/th&gt; &#xA;   &lt;th&gt;License&lt;/th&gt; &#xA;   &lt;th&gt;Functionality&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akinsho/git-conflict.nvim&#34;&gt;git-conflict.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No License&lt;/td&gt; &#xA;   &lt;td&gt;Diff comparison functionality&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/diff.lua&#34;&gt;lua/avante/diff.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackMort/ChatGPT.nvim&#34;&gt;ChatGPT.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apache 2.0 License&lt;/td&gt; &#xA;   &lt;td&gt;Calculation of tokens count&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/utils/tokens.lua&#34;&gt;lua/avante/utils/tokens.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/HakonHarnes/img-clip.nvim&#34;&gt;img-clip.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Clipboard image support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/clipboard.lua&#34;&gt;lua/avante/clipboard.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zbirenbaum/copilot.lua&#34;&gt;copilot.lua&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Copilot support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/copilot.lua&#34;&gt;lua/avante/providers/copilot.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/HiPhish/jinja.vim&#34;&gt;jinja.vim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Template filetype support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/syntax/jinja.vim&#34;&gt;syntax/jinja.vim&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/olimorris/codecompanion.nvim&#34;&gt;codecompanion.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MIT License&lt;/td&gt; &#xA;   &lt;td&gt;Secrets logic support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/providers/init.lua&#34;&gt;lua/avante/providers/init.lua&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/paul-gauthier/aider&#34;&gt;aider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apache 2.0 License&lt;/td&gt; &#xA;   &lt;td&gt;Planning mode user prompt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yetone/avante.nvim/raw/main/lua/avante/templates/planning.avanterules&#34;&gt;lua/avante/templates/planning.avanterules&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The high quality and ingenuity of these projects&#39; source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward.&lt;/p&gt; &#xA;&lt;h2&gt;Business Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://s.kiiro.ai/r/ylVbT6&#34; target=&#34;_blank&#34;&gt; &lt;img height=&#34;80&#34; src=&#34;https://github.com/user-attachments/assets/1abd8ede-bd98-4e6e-8ee0-5a661b40344a&#34; alt=&#34;Meshy AI&#34;&gt;&lt;br&gt; &lt;strong&gt;Meshy AI&lt;/strong&gt; &#xA;     &lt;div&gt;&#xA;      &amp;nbsp;&#xA;     &lt;/div&gt; &#xA;     &lt;div&gt;&#xA;      The #1 AI 3D Model Generator for Creators&#xA;     &lt;/div&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://s.kiiro.ai/r/mGPJOd&#34; target=&#34;_blank&#34;&gt; &lt;img height=&#34;80&#34; src=&#34;https://github.com/user-attachments/assets/7b7bd75e-1fd2-48cc-a71a-cff206e4fbd7&#34; alt=&#34;BabelTower API&#34;&gt;&lt;br&gt; &lt;strong&gt;BabelTower API&lt;/strong&gt; &#xA;     &lt;div&gt;&#xA;      &amp;nbsp;&#xA;     &lt;/div&gt; &#xA;     &lt;div&gt;&#xA;      No account needed, use any model instantly&#xA;     &lt;/div&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/yetone/avante.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Star History&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://star-history.com/#yetone/avante.nvim&amp;amp;Date&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;   &lt;img alt=&#34;NebulaGraph Data Intelligence Suite(ngdi)&#34; src=&#34;https://api.star-history.com/svg?repos=yetone/avante.nvim&amp;amp;type=Date&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>th-ch/youtube-music</title>
    <updated>2025-04-01T01:29:21Z</updated>
    <id>tag:github.com,2025-04-01:/th-ch/youtube-music</id>
    <link href="https://github.com/th-ch/youtube-music" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YouTube Music Desktop App bundled with custom plugins (and built-in ad blocker / downloader)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;YouTube Music&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/th-ch/youtube-music/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/th-ch/youtube-music.svg?style=for-the-badge&amp;amp;logo=youtube-music&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/th-ch/youtube-music/raw/master/license&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/th-ch/youtube-music.svg?style=for-the-badge&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/th-ch/youtube-music/raw/master/eslint.config.mjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-eslint-5ed9c7.svg?style=for-the-badge&#34; alt=&#34;eslint code style&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/th-ch/youtube-music/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/th-ch/youtube-music/build.yml?branch=master&amp;amp;style=for-the-badge&amp;amp;logo=youtube-music&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/th-ch/youtube-music/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/th-ch/youtube-music/total?style=for-the-badge&amp;amp;logo=youtube-music&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/youtube-music-bin&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/youtube-music-bin?color=blueviolet&amp;amp;style=for-the-badge&amp;amp;logo=youtube-music&#34; alt=&#34;AUR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/th-ch/youtube-music&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/th-ch/youtube-music/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/web/screenshot.png&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/th-ch/youtube-music/releases/latest&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/web/youtube-music.svg?sanitize=true&#34; width=&#34;400&#34; height=&#34;100&#34; alt=&#34;YouTube Music SVG&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Read this in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/docs/readme/README-ko.md&#34;&gt;üá∞üá∑&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/docs/readme/README-fr.md&#34;&gt;üá´üá∑&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/docs/readme/README-is.md&#34;&gt;üáÆüá∏&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/docs/readme/README-es.md&#34;&gt;üá®üá± üá™üá∏&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/docs/readme/README-ru.md&#34;&gt;üá∑üá∫&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/docs/readme/README-hu.md&#34;&gt;üá≠üá∫&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Electron wrapper around YouTube Music featuring:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native look &amp;amp; feel, aims at keeping the original interface&lt;/li&gt; &#xA; &lt;li&gt;Framework for custom plugins: change YouTube Music to your needs (style, content, features), enable/disable plugins in one click&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo Image&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Player Screen (album color theme &amp;amp; ambient light)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/th-ch/youtube-music/assets/16558115/53efdf73-b8fa-4d7b-a235-b96b91ea77fc&#34; alt=&#34;Screenshot1&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#available-plugins&#34;&gt;Available plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#download&#34;&gt;Download&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#arch-linux&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#macos&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#how-to-install-without-a-network-connection-in-windows&#34;&gt;How to install without a network connection? (in Windows)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#themes&#34;&gt;Themes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#dev&#34;&gt;Dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#build-your-own-plugins&#34;&gt;Build your own plugins&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#creating-a-plugin&#34;&gt;Creating a plugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#common-use-cases&#34;&gt;Common use cases&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#production-preview&#34;&gt;Production Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/th-ch/youtube-music/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Auto confirm when paused&lt;/strong&gt; (Always Enabled): disable the &lt;a href=&#34;https://user-images.githubusercontent.com/61631665/129977894-01c60740-7ec6-4bf0-9a2c-25da24491b0e.png&#34;&gt;&#34;Continue Watching?&#34;&lt;/a&gt; popup that pause music after a certain time&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And more ...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available plugins:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ad Blocker&lt;/strong&gt;: Block all ads and tracking out of the box&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Album Actions&lt;/strong&gt;: Adds Undislike, Dislike, Like, and Unlike buttons to apply this to all songs in a playlist or album&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Album Color Theme&lt;/strong&gt;: Applies a dynamic theme and visual effects based on the album color palette&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ambient Mode&lt;/strong&gt;: Applies a lighting effect by casting gentle colors from the video, into your screen‚Äôs background&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Audio Compressor&lt;/strong&gt;: Apply compression to audio (lowers the volume of the loudest parts of the signal and raises the volume of the softest parts)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Blur Navigation Bar&lt;/strong&gt;: makes navigation bar transparent and blurry&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bypass Age Restrictions&lt;/strong&gt;: bypass YouTube&#39;s age verification&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Captions Selector&lt;/strong&gt;: Enable captions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Compact Sidebar&lt;/strong&gt;: Always set the sidebar in compact mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Crossfade&lt;/strong&gt;: Crossfade between songs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Disable Autoplay&lt;/strong&gt;: Makes every song start in &#34;paused&#34; mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.com/&#34;&gt;Discord&lt;/a&gt; Rich Presence&lt;/strong&gt;: Show your friends what you listen to with &lt;a href=&#34;https://user-images.githubusercontent.com/28219076/104362104-a7a0b980-5513-11eb-9744-bb89eabe0016.png&#34;&gt;Rich Presence&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Downloader&lt;/strong&gt;: downloads MP3 &lt;a href=&#34;https://user-images.githubusercontent.com/61631665/129977677-83a7d067-c192-45e1-98ae-b5a4927393be.png&#34;&gt;directly from the interface&lt;/a&gt; &lt;a href=&#34;https://github.com/ytdl-org/youtube-dl&#34;&gt;(youtube-dl)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Equalizer&lt;/strong&gt;: add filters to boost or cut specific range of frequencies (e.g. bass booster)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Exponential Volume&lt;/strong&gt;: Makes the volume slider &lt;a href=&#34;https://greasyfork.org/en/scripts/397686-youtube-music-fix-volume-ratio/&#34;&gt;exponential&lt;/a&gt; so it&#39;s easier to select lower volumes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;In-App Menu&lt;/strong&gt;: &lt;a href=&#34;https://user-images.githubusercontent.com/78568641/112215894-923dbf00-8c29-11eb-95c3-3ce15db27eca.png&#34;&gt;gives bars a fancy, dark look&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;(see &lt;a href=&#34;https://github.com/th-ch/youtube-music/issues/410#issuecomment-952060709&#34;&gt;this post&lt;/a&gt; if you have problem accessing the menu after enabling this plugin and hide-menu option)&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scrobbler&lt;/strong&gt;: Adds scrobbling support for &lt;a href=&#34;https://www.last.fm/&#34;&gt;Last.fm&lt;/a&gt; and &lt;a href=&#34;https://listenbrainz.org/&#34;&gt;ListenBrainz&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lumia Stream&lt;/strong&gt;: Adds &lt;a href=&#34;https://lumiastream.com/&#34;&gt;Lumia Stream&lt;/a&gt; support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lyrics Genius&lt;/strong&gt;: Adds lyrics support for most songs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Music Together&lt;/strong&gt;: Share a playlist with others. When the host plays a song, everyone else will hear the same song&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;: Next/Back navigation arrows directly integrated in the interface, like in your favorite browser&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Google Login&lt;/strong&gt;: Remove Google login buttons and links from the interface&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Notifications&lt;/strong&gt;: Display a notification when a song starts playing (&lt;a href=&#34;https://user-images.githubusercontent.com/78568641/114102651-63ce0e00-98d0-11eb-9dfe-c5a02bb54f9c.png&#34;&gt;interactive notifications&lt;/a&gt; are available on windows)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Picture-in-picture&lt;/strong&gt;: allows to switch the app to picture-in-picture mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Playback Speed&lt;/strong&gt;: Listen fast, listen slow! &lt;a href=&#34;https://user-images.githubusercontent.com/61631665/129976003-e55db5ba-bf42-448c-a059-26a009775e68.png&#34;&gt;Adds a slider that controls song speed&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Precise Volume&lt;/strong&gt;: Control the volume precisely using mousewheel/hotkeys, with a custom hud and customizable volume steps&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shortcuts (&amp;amp; MPRIS)&lt;/strong&gt;: Allows setting global hotkeys for playback (play/pause/next/previous) + disable &lt;a href=&#34;https://user-images.githubusercontent.com/84923831/128601225-afa38c1f-dea8-4209-9f72-0f84c1dd8b54.png&#34;&gt;media osd&lt;/a&gt; by overriding media keys + enable Ctrl/CMD + F to search + enable linux mpris support for mediakeys + &lt;a href=&#34;https://github.com/Araxeus/youtube-music/raw/1e591d6a3df98449bcda6e63baab249b28026148/providers/song-controls.js#L13-L50&#34;&gt;custom hotkeys&lt;/a&gt; for &lt;a href=&#34;https://github.com/th-ch/youtube-music/issues/106#issuecomment-952156902&#34;&gt;advanced users&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Skip Disliked Song&lt;/strong&gt;: Skips disliked songs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Skip Silences&lt;/strong&gt;: Automatically skip silenced sections&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ajayyy/SponsorBlock&#34;&gt;&lt;strong&gt;SponsorBlock&lt;/strong&gt;&lt;/a&gt;: Automatically Skips non-music parts like intro/outro or parts of music videos where the song isn&#39;t playing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Synced Lyrics&lt;/strong&gt;: Provides synced lyrics to songs, using providers like &lt;a href=&#34;https://lrclib.net&#34;&gt;LRClib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Taskbar Media Control&lt;/strong&gt;: Control playback from your &lt;a href=&#34;https://user-images.githubusercontent.com/78568641/111916130-24a35e80-8a82-11eb-80c8-5021c1aa27f4.png&#34;&gt;Windows taskbar&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TouchBar&lt;/strong&gt;: Custom TouchBar layout for macOS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tuna OBS&lt;/strong&gt;: Integration with &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS&lt;/a&gt;&#39;s plugin &lt;a href=&#34;https://obsproject.com/forum/resources/tuna.843/&#34;&gt;Tuna&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Video Quality Changer&lt;/strong&gt;: Allows changing the video quality with a &lt;a href=&#34;https://user-images.githubusercontent.com/78568641/138574366-70324a5e-2d64-4f6a-acdd-dc2a2b9cecc5.png&#34;&gt;button&lt;/a&gt; on the video overlay&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Video Toggle&lt;/strong&gt;: Adds a &lt;a href=&#34;https://user-images.githubusercontent.com/28893833/173663950-63e6610e-a532-49b7-9afa-54cb57ddfc15.png&#34;&gt;button&lt;/a&gt; to switch between Video/Song mode. can also optionally remove the whole video tab&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visualizer&lt;/strong&gt;: Different music visualizers&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;You can help with translation on &lt;a href=&#34;https://hosted.weblate.org/projects/youtube-music/&#34;&gt;Hosted Weblate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/youtube-music/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widget/youtube-music/i18n/multi-auto.svg?sanitize=true&#34; alt=&#34;translation status&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widget/youtube-music/i18n/287x66-black.png&#34; alt=&#34;translation status 2&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can check out the &lt;a href=&#34;https://github.com/th-ch/youtube-music/releases/latest&#34;&gt;latest release&lt;/a&gt; to quickly find the latest version.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://aur.archlinux.org/packages/youtube-music-bin&#34;&gt;&lt;code&gt;youtube-music-bin&lt;/code&gt;&lt;/a&gt; package from the AUR. For AUR installation instructions, take a look at this &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_packages&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;You can install the app using Homebrew (see the &lt;a href=&#34;https://github.com/th-ch/homebrew-youtube-music&#34;&gt;cask definition&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install th-ch/youtube-music/youtube-music&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you install the app manually and get an error &#34;is damaged and can‚Äôt be opened.&#34; when launching the app, run the following in the Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/xattr -cr /Applications/YouTube\ Music.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop package manager&lt;/a&gt; to install the &lt;code&gt;youtube-music&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/ScoopInstaller/Extras&#34;&gt;&lt;code&gt;extras&lt;/code&gt; bucket&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop bucket add extras&#xA;scoop install extras/youtube-music&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately you can use &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/winget/&#34;&gt;Winget&lt;/a&gt;, Windows 11s official CLI package manager to install the &lt;code&gt;th-ch.YouTubeMusic&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Microsoft Defender SmartScreen might block the installation since it is from an &#34;unknown publisher&#34;. This is also true for the manual installation when trying to run the executable(.exe) after a manual download here on github (same file).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winget install th-ch.YouTubeMusic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to install without a network connection? (in Windows)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;*.nsis.7z&lt;/code&gt; file for &lt;em&gt;your device architecture&lt;/em&gt; in &lt;a href=&#34;https://github.com/th-ch/youtube-music/releases/latest&#34;&gt;release page&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;x64&lt;/code&gt; for 64-bit Windows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ia32&lt;/code&gt; for 32-bit Windows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;arm64&lt;/code&gt; for ARM64 Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download installer in release page. (&lt;code&gt;*-Setup.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Place them in the &lt;strong&gt;same directory&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Themes&lt;/h2&gt; &#xA;&lt;p&gt;You can load CSS files to change the look of the application (Options &amp;gt; Visual Tweaks &amp;gt; Themes).&lt;/p&gt; &#xA;&lt;p&gt;Some predefined themes are available in &lt;a href=&#34;https://github.com/kerichdev/themes-for-ytmdesktop-player&#34;&gt;https://github.com/kerichdev/themes-for-ytmdesktop-player&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dev&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/th-ch/youtube-music&#xA;cd youtube-music&#xA;pnpm install --frozen-lockfile&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build your own plugins&lt;/h2&gt; &#xA;&lt;p&gt;Using plugins, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;manipulate the app - the &lt;code&gt;BrowserWindow&lt;/code&gt; from electron is passed to the plugin handler&lt;/li&gt; &#xA; &lt;li&gt;change the front by manipulating the HTML/CSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating a plugin&lt;/h3&gt; &#xA;&lt;p&gt;Create a folder in &lt;code&gt;src/plugins/YOUR-PLUGIN-NAME&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index.ts&lt;/code&gt;: the main file of the plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import style from &#39;./style.css?inline&#39;; // import style as inline&#xA;&#xA;import { createPlugin } from &#39;@/utils&#39;;&#xA;&#xA;export default createPlugin({&#xA;  name: &#39;Plugin Label&#39;,&#xA;  restartNeeded: true, // if value is true, ytmusic show restart dialog&#xA;  config: {&#xA;    enabled: false,&#xA;  }, // your custom config&#xA;  stylesheets: [style], // your custom style,&#xA;  menu: async ({ getConfig, setConfig }) =&amp;gt; {&#xA;    // All *Config methods are wrapped Promise&amp;lt;T&amp;gt;&#xA;    const config = await getConfig();&#xA;    return [&#xA;      {&#xA;        label: &#39;menu&#39;,&#xA;        submenu: [1, 2, 3].map((value) =&amp;gt; ({&#xA;          label: `value ${value}`,&#xA;          type: &#39;radio&#39;,&#xA;          checked: config.value === value,&#xA;          click() {&#xA;            setConfig({ value });&#xA;          },&#xA;        })),&#xA;      },&#xA;    ];&#xA;  },&#xA;  backend: {&#xA;    start({ window, ipc }) {&#xA;      window.maximize();&#xA;&#xA;      // you can communicate with renderer plugin&#xA;      ipc.handle(&#39;some-event&#39;, () =&amp;gt; {&#xA;        return &#39;hello&#39;;&#xA;      });&#xA;    },&#xA;    // it fired when config changed&#xA;    onConfigChange(newConfig) { /* ... */ },&#xA;    // it fired when plugin disabled&#xA;    stop(context) { /* ... */ },&#xA;  },&#xA;  renderer: {&#xA;    async start(context) {&#xA;      console.log(await context.ipc.invoke(&#39;some-event&#39;));&#xA;    },&#xA;    // Only renderer available hook&#xA;    onPlayerApiReady(api: YoutubePlayer, context: RendererContext) {&#xA;      // set plugin config easily&#xA;      context.setConfig({ myConfig: api.getVolume() });&#xA;    },&#xA;    onConfigChange(newConfig) { /* ... */ },&#xA;    stop(_context) { /* ... */ },&#xA;  },&#xA;  preload: {&#xA;    async start({ getConfig }) {&#xA;      const config = await getConfig();&#xA;    },&#xA;    onConfigChange(newConfig) {},&#xA;    stop(_context) {},&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common use cases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;injecting custom CSS: create a &lt;code&gt;style.css&lt;/code&gt; file in the same folder then:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// index.ts&#xA;import style from &#39;./style.css?inline&#39;; // import style as inline&#xA;&#xA;import { createPlugin } from &#39;@/utils&#39;;&#xA;&#xA;export default createPlugin({&#xA;  name: &#39;Plugin Label&#39;,&#xA;  restartNeeded: true, // if value is true, ytmusic will show a restart dialog&#xA;  config: {&#xA;    enabled: false,&#xA;  }, // your custom config&#xA;  stylesheets: [style], // your custom style&#xA;  renderer() {} // define renderer hook&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to change the HTML:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { createPlugin } from &#39;@/utils&#39;;&#xA;&#xA;export default createPlugin({&#xA;  name: &#39;Plugin Label&#39;,&#xA;  restartNeeded: true, // if value is true, ytmusic will show the restart dialog&#xA;  config: {&#xA;    enabled: false,&#xA;  }, // your custom config&#xA;  renderer() {&#xA;    // Remove the login button&#xA;    document.querySelector(&#34;.sign-in-link.ytmusic-nav-bar&#34;).remove();&#xA;  } // define renderer hook&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;communicating between the front and back: can be done using the ipcMain module from electron. See &lt;code&gt;index.ts&lt;/code&gt; file and example in &lt;code&gt;sponsorblock&lt;/code&gt; plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://pnpm.io/installation&#34;&gt;this guide&lt;/a&gt; to install &lt;code&gt;pnpm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm install --frozen-lockfile&lt;/code&gt; to install dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm build:OS&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm dist:win&lt;/code&gt; - Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm dist:linux&lt;/code&gt; - Linux (amd64)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm dist:linux:deb-arm64&lt;/code&gt; - Linux (arm64 for Debian)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm dist:linux:rpm-arm64&lt;/code&gt; - Linux (arm64 for Fedora)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm dist:mac&lt;/code&gt; - macOS (amd64)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm dist:mac:arm64&lt;/code&gt; - macOS (arm64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Builds the app for macOS, Linux, and Windows, using &lt;a href=&#34;https://github.com/electron-userland/electron-builder&#34;&gt;electron-builder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Production Preview&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uses &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; to test the app.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT ¬© &lt;a href=&#34;https://github.com/th-ch/youtube-music&#34;&gt;th-ch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why apps menu isn&#39;t showing up?&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;Hide Menu&lt;/code&gt; option is on - you can show the menu with the &lt;kbd&gt;alt&lt;/kbd&gt; key (or &lt;kbd&gt;`&lt;/kbd&gt; [backtick] if using the in-app-menu plugin)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>supabase-community/postgres-language-server</title>
    <updated>2025-04-01T01:29:21Z</updated>
    <id>tag:github.com,2025-04-01:/supabase-community/postgres-language-server</id>
    <link href="https://github.com/supabase-community/postgres-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Language Server for Postgres&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supabase-community/postgres-language-server/main/docs/images/pls-github.png&#34; alt=&#34;Postgres Language Server&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Postgres Language Server&lt;/h1&gt; &#xA;&lt;p&gt;A collection of language tools and a Language Server Protocol (LSP) implementation for Postgres, focusing on developer experience and reliable SQL tooling.&lt;/p&gt; &#xA;&lt;p&gt;Docs: &lt;a href=&#34;https://pgtools.dev/&#34;&gt;pgtools.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install: &lt;a href=&#34;https://pgtools.dev/#installation&#34;&gt;instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase-community/postgres-language-server/releases&#34;&gt;CLI releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Supabase.postgrestools&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/configs.md#postgres_lsp&#34;&gt;Neovim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;LSP Demo&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CLI Demo&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supabase-community/postgres-language-server/main/docs/images/lsp-demo.gif&#34; alt=&#34;LSP Demo&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supabase-community/postgres-language-server/main/docs/images/cli-demo.png&#34; alt=&#34;CLI Demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This project provides a toolchain for Postgres development, built on Postgres&#39; own parser &lt;code&gt;libpg_query&lt;/code&gt; to ensure 100% syntax compatibility. It is built on a Server-Client architecture with a transport-agnostic design. This means all features can be accessed not only through the &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt;, but also through other interfaces like a CLI, HTTP APIs, or a WebAssembly module. The goal is to make all the great Postgres tooling out there as accessible as possible, and to build anything that is missing ourselves.&lt;/p&gt; &#xA;&lt;p&gt;The following features are implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Autocompletion&lt;/li&gt; &#xA; &lt;li&gt;Syntax Error Highlighting&lt;/li&gt; &#xA; &lt;li&gt;Type-checking (via &lt;code&gt;EXPLAIN&lt;/code&gt; error insights)&lt;/li&gt; &#xA; &lt;li&gt;Linter, inspired by &lt;a href=&#34;https://squawkhq.com&#34;&gt;Squawk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our current focus is on refining and enhancing these core features while building a robust and easily accessible infrastructure. For future plans and opportunities to contribute, please check out the issues and discussions. Any contributions are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psteinroe&#34;&gt;psteinroe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juleswritescode&#34;&gt;juleswritescode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;A big thanks to the following projects, without which this project wouldn&#39;t have been possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pganalyze/libpg_query&#34;&gt;libpg_query&lt;/a&gt;: For extracting the Postgres&#39; parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/biomejs/biome&#34;&gt;Biome&lt;/a&gt;: For implementing a toolchain infrastructure we could copy from&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sbdchd/squawk&#34;&gt;Squawk&lt;/a&gt;: For the linter inspiration&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>