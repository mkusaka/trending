<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-17T01:28:22Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JetBrains/kotlin</title>
    <updated>2024-10-17T01:28:22Z</updated>
    <id>tag:github.com,2024-10-17:/JetBrains/kotlin</id>
    <link href="https://github.com/JetBrains/kotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Kotlin Programming Language.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://teamcity.jetbrains.com/buildConfiguration/Kotlin_KotlinPublic_Compiler?branch=%3Cdefault%3E&amp;amp;buildTypeTab=overview&amp;amp;mode=builds&#34;&gt;&lt;img src=&#34;https://img.shields.io/teamcity/http/teamcity.jetbrains.com/s/Kotlin_KotlinPublic_Compiler.svg?sanitize=true&#34; alt=&#34;TeamCity (simple build status)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.jetbrains.kotlin%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlin/kotlin-maven-plugin.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ge.jetbrains.com/scans?search.rootProjectNames=Kotlin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&amp;amp;labelColor=02303A&#34; alt=&#34;Revved up by Develocity&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kotlin Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt;!&lt;br&gt; It is an open-source, statically typed programming language supported and developed by &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; and open-source contributors.&lt;/p&gt; &#xA;&lt;p&gt;Some handy links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin Site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started.html&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.kotlinlang.org/&#34;&gt;Try Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/index.html&#34;&gt;Kotlin Standard Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtrack.jetbrains.com/issues/KT&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw&#34;&gt;Kotlin YouTube Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.kotlinlang.org/&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/kotlin/&#34;&gt;Kotlin Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw&#34;&gt;Subscribe to Kotlin YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/kotlin&#34;&gt;Follow Kotlin on Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.kotlinlang.org/&#34;&gt;Public Slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://teamcity.jetbrains.com/project.html?tab=projectOverview&amp;amp;projectId=Kotlin&#34;&gt;TeamCity CI build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kotlin Multiplatform capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Support for multiplatform programming is one of Kotlin’s key benefits. It reduces time spent writing and maintaining the same code for &lt;a href=&#34;https://kotlinlang.org/docs/reference/mpp-supported-platforms.html&#34;&gt;different platforms&lt;/a&gt; while retaining the flexibility and benefits of native programming.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/lp/mobile/&#34;&gt;Kotlin Multiplatform Mobile&lt;/a&gt; for sharing code between Android and iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/mobile/create-first-app.html&#34;&gt;Getting Started with Kotlin Multiplatform Mobile Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/multiplatform.html&#34;&gt;Kotlin Multiplatform Benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/mpp-share-on-platforms.html#share-code-on-all-platforms&#34;&gt;Share code on all platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/mpp-share-on-platforms.html#share-code-on-similar-platforms&#34;&gt;Share code on similar platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Editing Kotlin&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started.html&#34;&gt;Kotlin IntelliJ IDEA Plugin&lt;/a&gt; (&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/master/plugins/kotlin&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started-eclipse.html&#34;&gt;Kotlin Eclipse Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vkostyukov/kotlin-sublime-package&#34;&gt;Kotlin Sublime Text Package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build environment requirements&lt;/h2&gt; &#xA;&lt;p&gt;This repository is using &lt;a href=&#34;https://docs.gradle.org/current/userguide/toolchains.html&#34;&gt;Gradle toolchains&lt;/a&gt; feature to select and auto-provision required JDKs from &lt;a href=&#34;https://adoptopenjdk.net&#34;&gt;AdoptOpenJdk&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, it is still possible to only provide required JDKs via environment variables (see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/gradle.properties#L5&#34;&gt;gradle.properties&lt;/a&gt; for supported variable names). To ensure Gradle uses only JDKs from environmental variables - disable Gradle toolchain auto-detection by passing &lt;code&gt;-Porg.gradle.java.installations.auto-detect=false&lt;/code&gt; option (or put it into &lt;code&gt;$GRADLE_USER_HOME/gradle.properties&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On Windows you might need to add long paths setting to the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config core.longpaths true &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The project is built with Gradle. Run Gradle to build the project and to run the tests using the following command on Unix/macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew &amp;lt;tasks-and-options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the following command on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gradlew &amp;lt;tasks-and-options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the first project configuration gradle will download and setup the dependencies on&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;intellij-core&lt;/code&gt; is a part of command line compiler and contains only necessary APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idea-full&lt;/code&gt; is a full blown IntelliJ IDEA Community Edition to be used in the plugin module.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These dependencies are quite large, so depending on the quality of your internet connection you might face timeouts getting them. In this case, you can increase timeout by specifying the following command line parameters on the first run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew -Dhttp.socketTimeout=60000 -Dhttp.connectionTimeout=60000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Important gradle tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clean&lt;/code&gt; - clean build results&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dist&lt;/code&gt; - assembles the compiler distribution into &lt;code&gt;dist/kotlinc/&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;install&lt;/code&gt; - build and install all public artifacts into local maven repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;coreLibsTest&lt;/code&gt; - build and run stdlib, reflect and kotlin-test tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradlePluginTest&lt;/code&gt; - build and run gradle plugin tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compilerTest&lt;/code&gt; - build and run all compiler tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To reproduce TeamCity build use &lt;code&gt;-Pteamcity=true&lt;/code&gt; flag. Local builds don&#39;t run proguard and have jar compression disabled by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OPTIONAL:&lt;/strong&gt; Some artifacts, mainly Maven plugin ones, are built separately with Maven. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/libraries/ReadMe.md&#34;&gt;libraries/ReadMe.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;To build Kotlin/Native, see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/kotlin-native/README.md#building-from-source&#34;&gt;kotlin-native/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;working-in-idea&#34;&gt;&lt;/a&gt; Working with the project in IntelliJ IDEA&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended to use the latest released version of Intellij IDEA (Community or Ultimate Edition). You can download IntelliJ IDEA &lt;a href=&#34;https://www.jetbrains.com/idea/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After cloning the project, import the project in IntelliJ by choosing the project directory in the Open project dialog.&lt;/p&gt; &#xA;&lt;p&gt;For handy work with compiler tests it&#39;s recommended to use &lt;a href=&#34;https://github.com/demiurg906/test-data-helper-plugin&#34;&gt; Kotlin Compiler Test Helper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency verification&lt;/h3&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_verification.html&#34;&gt;dependencies verification&lt;/a&gt; feature enabled in the repository for all Gradle builds. Gradle will check hashes (md5 and sha256) of used dependencies and will fail builds with &lt;code&gt;Dependency verification failed&lt;/code&gt; errors when local artifacts are absent or have different hashes listed in the &lt;a href=&#34;https://github.com/JetBrains/kotlin/raw/master/gradle/verification-metadata.xml&#34;&gt;verification-metadata.xml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s expected that &lt;code&gt;verification-metadata.xml&lt;/code&gt; should only be updated with the commits that modify the build. There are some tips how to perform such updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Delete &lt;code&gt;components&lt;/code&gt; section of &lt;code&gt;verification-metadata.xml&lt;/code&gt; to avoid stockpiling of old unused dependencies. You may use the following command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#macOS&#xA;sed -i &#39;&#39; -e &#39;/&amp;lt;components&amp;gt;/,/&amp;lt;\/components&amp;gt;/d&#39; gradle/verification-metadata.xml&#xA;#Linux &amp;amp; Git for Windows&#xA;sed -i -e &#39;/&amp;lt;components&amp;gt;/,/&amp;lt;\/components&amp;gt;/d&#39; gradle/verification-metadata.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Re-generate dependencies with Gradle&#39;s &lt;code&gt;--write-verification-metadata&lt;/code&gt; command (verify update relates to your changes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew --write-verification-metadata sha256,md5 -Pkotlin.native.enabled=true resolveDependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;resolveDependencies&lt;/code&gt; task resolves dependencies for all platforms including dependencies downloaded by plugins.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;./scripts/update-verification-metadata.sh&lt;/code&gt; script which includes both of these steps&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you’re adding a dependency with OS mentioned in an artifact name (&lt;code&gt;darwin&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt;, &lt;code&gt;osx&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;), remember to add them to &lt;code&gt;implicitDependencies&lt;/code&gt; configuration or update &lt;code&gt;resolveDependencies&lt;/code&gt; task if needed. &lt;code&gt;resolveDependencies&lt;/code&gt; should resolve all dependencies including dependencies for different platforms.&lt;/li&gt; &#xA; &lt;li&gt;If you have a &lt;code&gt;local.properties&lt;/code&gt; file in your Kotlin project folder, make sure that it doesn&#39;t contain &lt;code&gt;kotlin.native.enabled=false&lt;/code&gt;. Otherwise, native-only dependencies may not be added to the verification metadata. This is because &lt;code&gt;local.properties&lt;/code&gt; has higher precedence than the &lt;code&gt;-Pkotlin.native.enabled=true&lt;/code&gt; specified in the Gradle command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using -dev versions&lt;/h2&gt; &#xA;&lt;p&gt;We publish &lt;code&gt;-dev&lt;/code&gt; versions frequently.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;-dev&lt;/code&gt; versions you can use the &lt;a href=&#34;https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap/org/jetbrains/kotlin/kotlin-compiler/maven-metadata.xml&#34;&gt;list of available versions&lt;/a&gt; and include this maven repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;maven(&#34;https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Kotlin is distributed under the terms of the Apache License (Version 2.0). See &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/license/README.md&#34;&gt;license folder&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please be sure to review Kotlin&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/docs/contributing.md&#34;&gt;contributing guidelines&lt;/a&gt; to learn how to help the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dagster-io/dagster</title>
    <updated>2024-10-17T01:28:22Z</updated>
    <id>tag:github.com,2024-10-17:/dagster-io/dagster</id>
    <link href="https://github.com/dagster-io/dagster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An orchestration platform for the development, production, and observation of data assets.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- Note: Do not try adding the dark mode version here with the `picture` element, it will break formatting in PyPI --&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://dagster.io&#34; style=&#34;background:none&#34;&gt; &lt;img alt=&#34;dagster logo&#34; src=&#34;https://raw.githubusercontent.com/dagster-io/dagster/master/.github/dagster-readme-header.svg?sanitize=true&#34; width=&#34;auto&#34; height=&#34;100%&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dagster-io/dagster&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/dagster-io/dagster?labelColor=4F43DD&amp;amp;color=163B36&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dagster-io/dagster/raw/master/LICENSE&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?label=license&amp;amp;labelColor=4F43DD&amp;amp;color=163B36&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://pypi.org/project/dagster/&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/dagster?labelColor=4F43DD&amp;amp;color=163B36&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://pypi.org/project/dagster/&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/dagster?labelColor=4F43DD&amp;amp;color=163B36&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/dagster&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-dagster-blue.svg?labelColor=4F43DD&amp;amp;color=163B36&amp;amp;logo=twitter&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://dagster.io/slack&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/slack-dagster-blue.svg?labelColor=4F43DD&amp;amp;color=163B36&amp;amp;logo=slack&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://linkedin.com/showcase/dagster&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/linkedin-dagster-blue.svg?labelColor=4F43DD&amp;amp;color=163B36&amp;amp;logo=linkedin&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dagster is a cloud-native data pipeline orchestrator for the whole development lifecycle, with integrated lineage and observability, a declarative programming model, and best-in-class testability.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is designed for &lt;strong&gt;developing and maintaining data assets&lt;/strong&gt;, such as tables, data sets, machine learning models, and reports.&lt;/p&gt; &#xA;&lt;p&gt;With Dagster, you declare—as Python functions—the data assets that you want to build. Dagster then helps you run your functions at the right time and keep your assets up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a graph of three assets defined in Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dagster import asset&#xA;from pandas import DataFrame, read_html, get_dummies&#xA;from sklearn.linear_model import LinearRegression&#xA;&#xA;@asset&#xA;def country_populations() -&amp;gt; DataFrame:&#xA;    df = read_html(&#34;https://tinyurl.com/mry64ebh&#34;)[0]&#xA;    df.columns = [&#34;country&#34;, &#34;pop2022&#34;, &#34;pop2023&#34;, &#34;change&#34;, &#34;continent&#34;, &#34;region&#34;]&#xA;    df[&#34;change&#34;] = df[&#34;change&#34;].str.rstrip(&#34;%&#34;).str.replace(&#34;−&#34;, &#34;-&#34;).astype(&#34;float&#34;)&#xA;    return df&#xA;&#xA;@asset&#xA;def continent_change_model(country_populations: DataFrame) -&amp;gt; LinearRegression:&#xA;    data = country_populations.dropna(subset=[&#34;change&#34;])&#xA;    return LinearRegression().fit(get_dummies(data[[&#34;continent&#34;]]), data[&#34;change&#34;])&#xA;&#xA;@asset&#xA;def continent_stats(country_populations: DataFrame, continent_change_model: LinearRegression) -&amp;gt; DataFrame:&#xA;    result = country_populations.groupby(&#34;continent&#34;).sum()&#xA;    result[&#34;pop_change_factor&#34;] = continent_change_model.coef_&#xA;    return result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The graph loaded into Dagster&#39;s web UI:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100%&#34; alt=&#34;An example asset graph as rendered in the Dagster UI&#34; src=&#34;https://raw.githubusercontent.com/dagster-io/dagster/master/.github/example-lineage.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Dagster is built to be used at every stage of the data development lifecycle - local development, unit tests, integration tests, staging environments, all the way up to production.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start:&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re new to Dagster, we recommend reading about its &lt;a href=&#34;https://docs.dagster.io/concepts&#34;&gt;core concepts&lt;/a&gt; or learning with the hands-on &lt;a href=&#34;https://docs.dagster.io/tutorial&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dagster is available on PyPI and officially supports Python 3.8 through Python 3.12.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install dagster dagster-webserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs two packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dagster&lt;/code&gt;: The core programming model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dagster-webserver&lt;/code&gt;: The server that hosts Dagster&#39;s web UI for developing and operating Dagster jobs and assets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running on a Mac with an Apple silicon chip? Check the &lt;a href=&#34;https://docs.dagster.io/getting-started/install#installing-dagster-into-an-existing-python-environment&#34;&gt;install details here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full Dagster documentation &lt;a href=&#34;https://docs.dagster.io&#34;&gt;here&lt;/a&gt;, including the &lt;a href=&#34;https://docs.dagster.io/getting-started&#34;&gt;&#39;getting started&#39; guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Key Features:&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100%&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/dagster-io/dagster/master/.github/key-features-cards.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Dagster as a productivity platform&lt;/h3&gt; &#xA;&lt;p&gt;Identify the key assets you need to create using a declarative approach, or you can focus on running basic tasks. Embrace CI/CD best practices from the get-go: build reusable components, spot data quality issues, and flag bugs early.&lt;/p&gt; &#xA;&lt;h3&gt;Dagster as a robust orchestration engine&lt;/h3&gt; &#xA;&lt;p&gt;Put your pipelines into production with a robust multi-tenant, multi-tool engine that scales technically and organizationally.&lt;/p&gt; &#xA;&lt;h3&gt;Dagster as a unified control plane&lt;/h3&gt; &#xA;&lt;p&gt;Maintain control over your data as the complexity scales. Centralize your metadata in one tool with built-in observability, diagnostics, cataloging, and lineage. Spot any issues and identify performance improvement opportunities.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Master the Modern Data Stack with integrations&lt;/h2&gt; &#xA;&lt;p&gt;Dagster provides a growing library of integrations for today’s most popular data tools. Integrate with the tools you already use, and deploy to your infrastructure.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://dagster.io/integrations&#34; style=&#34;background:none&#34;&gt; &lt;img width=&#34;100%&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/dagster-io/dagster/master/.github/integrations-bar-for-readme.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Connect with thousands of other data practitioners building with Dagster. Share knowledge, get help, and contribute to the open-source project. To see featured material and upcoming events, check out our &lt;a href=&#34;https://dagster.io/community&#34;&gt;Dagster Community&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Join our community here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🌟 &lt;a href=&#34;https://github.com/dagster-io/dagster&#34;&gt;Star us on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📥 &lt;a href=&#34;https://dagster.io/newsletter-signup&#34;&gt;Subscribe to our Newsletter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🐦 &lt;a href=&#34;https://twitter.com/dagster&#34;&gt;Follow us on Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🕴️ &lt;a href=&#34;https://linkedin.com/showcase/dagster&#34;&gt;Follow us on LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📺 &lt;a href=&#34;https://www.youtube.com/@dagsterio&#34;&gt;Subscribe to our YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📚 &lt;a href=&#34;https://dagster.io/blog&#34;&gt;Read our blog posts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;👋 &lt;a href=&#34;https://dagster.io/slack&#34;&gt;Join us on Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🗃 &lt;a href=&#34;https://discuss.dagster.io&#34;&gt;Browse Slack archives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✏️ &lt;a href=&#34;https://github.com/dagster-io/dagster/discussions&#34;&gt;Start a GitHub Discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For details on contributing or running the project for development, check out our &lt;a href=&#34;https://docs.dagster.io/community/contributing/&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Dagster is &lt;a href=&#34;https://github.com/dagster-io/dagster/raw/master/LICENSE&#34;&gt;Apache 2.0 licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>3b1b/videos</title>
    <updated>2024-10-17T01:28:22Z</updated>
    <id>tag:github.com,2024-10-17:/3b1b/videos</id>
    <link href="https://github.com/3b1b/videos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for the manim-generated scenes used in 3blue1brown videos&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This project contains the code used to generate the explanatory math videos found on &lt;a href=&#34;https://www.3blue1brown.com/&#34;&gt;3Blue1Brown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This almost entirely consists of scenes generated using the library &lt;a href=&#34;https://github.com/3b1b/manim&#34;&gt;Manim&lt;/a&gt;. See also the community maintained version at &lt;a href=&#34;https://github.com/ManimCommunity/manim/&#34;&gt;ManimCommunity&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Older projects may have code dependent on older versions of manim, and so may not run out of the box here.&lt;/p&gt; &#xA;&lt;p&gt;Note, while the library Manim itself is &lt;a href=&#34;https://opensource.org/osd&#34;&gt;open source&lt;/a&gt; software and under the &lt;a href=&#34;https://github.com/3b1b/manim/raw/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;, the contents of this repository are available under the &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img src=&#34;https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png&#34; alt=&#34;CC BY-NC-SA 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;I made &lt;a href=&#34;https://youtu.be/rbu7Zu5X1zI&#34;&gt;this video&lt;/a&gt; to show more of how I use manim. Note that I&#39;m using 3b1b/manim, not the community edition, some functionality may differ between the two. Aside from &lt;a href=&#34;https://github.com/3b1b/manim?tab=readme-ov-file#installation&#34;&gt;installing manim itself&lt;/a&gt;, replicating the workflow involves some custom plugins with Sublime, the text editor I use.&lt;/p&gt; &#xA;&lt;p&gt;If you use another text editor, the same functionality can be mimicked. The key is to make use of two facts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Running &lt;code&gt;manimgl (file name) (scene name) -se (line_number)&lt;/code&gt; will drop you into an interactive mode at that line of the file, like a debugger, with an iPython terminal that can be used to interact with the scene.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within that interactive mode, if you enter &#34;checkpoint_paste()&#34; to the terminal, it will run whatever bit of code is copied to the clipboard. Moreover, if that copied code begins with a comment, the first time it sees that comment it will save the state of the scene at that point, and for all future calls on code beginning with the same comment, it will first revert to that state of the scene before running the code.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The argument &#34;skip&#34; of checkpoint_paste will mean it runs the code without animating, as if all run times set to 0.&lt;/li&gt; &#xA;   &lt;li&gt;The argument &#34;record&#34; of checkpoint_paste will cause whatever animations are run with that copied code to be rendered to file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For my own workflow, I set up some keyboard shortcuts to kick off each of these commands. For those who want to try it out themselves, here&#39;s what&#39;s involved.&lt;/p&gt; &#xA;&lt;h3&gt;Sublime-specific instructions&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://packagecontrol.io/packages/Terminus&#34;&gt;Terminus&lt;/a&gt; (via package control). This is a terminal run within sublime, and it lets us write some plugins that take the state in sublime, like where your cursor is, what&#39;s highlighted, etc., and use that to run a desired command line instruction.&lt;/p&gt; &#xA;&lt;p&gt;Take the files in the &#34;sublime_custom_commands&#34; sub-directory of this repo, and copy them into the Packages/User/ directory of your Sublime Application. This should be a directory with a path that looks something like /wherever/your/sublime/lives/Packages/User/&lt;/p&gt; &#xA;&lt;p&gt;Add some keybindings to reference these commands. Here&#39;s what I have inside my key_bindings file, you can find your own under the menu Sublime Text -&amp;gt; Settings -&amp;gt; Keybindings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    { &#34;keys&#34;: [&#34;shift+super+r&#34;], &#34;command&#34;: &#34;manim_run_scene&#34; },&#xA;    { &#34;keys&#34;: [&#34;super+r&#34;], &#34;command&#34;: &#34;manim_checkpoint_paste&#34; },&#xA;    { &#34;keys&#34;: [&#34;super+alt+r&#34;], &#34;command&#34;: &#34;manim_recorded_checkpoint_paste&#34; },&#xA;    { &#34;keys&#34;: [&#34;super+ctrl+r&#34;], &#34;command&#34;: &#34;manim_skipped_checkpoint_paste&#34; },&#xA;    { &#34;keys&#34;: [&#34;super+e&#34;], &#34;command&#34;: &#34;manim_exit&#34; },&#xA;    { &#34;keys&#34;: [&#34;super+option+/&#34;], &#34;command&#34;: &#34;comment_fold&#34;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, I bind the &#34;command + shift + R&#34; to a custom &#34;manim_run_scene&#34; command. If the cursor is inside a line of a scene, this will drop you into the interactive mode at that point of the scene. If the cursor is on the line defining the scene, it will copy to the clipboard the command needed to render that full scene to file.&lt;/p&gt; &#xA;&lt;p&gt;I bind &#34;command + R&#34; to a &#34;manim_checkpoint_paste&#34; command, which will copy whatever bit of code is highlighted, and run &#34;checkpoint_paste()&#34; in the interactive terminal.&lt;/p&gt; &#xA;&lt;p&gt;Of course, you could set these to whatever keyboard shortcuts you prefer.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2024 3Blue1Brown&lt;/p&gt;</summary>
  </entry>
</feed>