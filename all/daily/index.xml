<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-21T03:09:15Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>code100x/chess</title>
    <updated>2024-04-21T03:09:15Z</updated>
    <id>tag:github.com,2024-04-21:/code100x/chess</id>
    <link href="https://github.com/code100x/chess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multiplayer chess platform similar to https://chess.com/&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Chess&lt;/h2&gt; &#xA;&lt;p&gt;Building a platform where people can&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign up&lt;/li&gt; &#xA; &lt;li&gt;Create a new match/get connected to an existing match&lt;/li&gt; &#xA; &lt;li&gt;During the match, let users play moves&lt;/li&gt; &#xA; &lt;li&gt;Have a rating system that goes up and down similar to standard chess rating&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s keep it simple&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;React for Frontend&lt;/li&gt; &#xA; &lt;li&gt;Node.js for Backend&lt;/li&gt; &#xA; &lt;li&gt;Typescript as the language&lt;/li&gt; &#xA; &lt;li&gt;Saparate Websocket servers for handling real time games&lt;/li&gt; &#xA; &lt;li&gt;Redis for storing all moves of a game in a queue&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>timpaul/form-extractor-prototype</title>
    <updated>2024-04-21T03:09:15Z</updated>
    <id>tag:github.com,2024-04-21:/timpaul/form-extractor-prototype</id>
    <link href="https://github.com/timpaul/form-extractor-prototype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Form Extractor Prototype&lt;/h1&gt; &#xA;&lt;p&gt;This tool extracts the structure from an image of a form.&lt;/p&gt; &#xA;&lt;p&gt;It uses the &lt;a href=&#34;https://claude.ai&#34;&gt;Claude 3 LLM&lt;/a&gt; model by Anthropic.&lt;/p&gt; &#xA;&lt;p&gt;A single extraction of an A4 form costs about 10p.&lt;/p&gt; &#xA;&lt;p&gt;It replicates the form structue in JSON, following the schema used by &lt;a href=&#34;https://www.forms.service.gov.uk/&#34;&gt;GOV.UK Forms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It then uses that to generate a multi-page web form in the GOV.UK style.&lt;/p&gt; &#xA;&lt;h2&gt;Run locally&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need an &lt;a href=&#34;https://www.anthropic.com/api&#34;&gt;Anthropic API key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the key as a local environment variable called ANTHROPIC_API_KEY.&lt;/p&gt; &#xA;&lt;p&gt;Install the app locally with &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Start the app with &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;ll be available at &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it can only process images of forms, not documents&lt;/li&gt; &#xA; &lt;li&gt;it only knows about certain kinds of question types&lt;/li&gt; &#xA; &lt;li&gt;you can&#39;t provide your own API key via the UI&lt;/li&gt; &#xA; &lt;li&gt;you can&#39;t browse previous form extractions&lt;/li&gt; &#xA; &lt;li&gt;like a lot of Gen AI, it can be unpredictable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer: This is a prototype and I am not a developer ;-).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The main UI is in &lt;code&gt;app/views/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional CSS styles are in &lt;code&gt;public/assets/style.css&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The form in &lt;code&gt;index.html&lt;/code&gt; is intercepted by the script in &lt;code&gt;public/assets/scripts.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It sends the image at the URL provided by the user to the Claude API.&lt;/p&gt; &#xA;&lt;p&gt;It does this via the &#39;SendToClaude&#39; function in &lt;code&gt;server.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function makes use of the &#39;tools&#39; feature of Claude.&lt;/p&gt; &#xA;&lt;p&gt;That allows you to specify a JSON schema that you&#39;d like it&#39;s response to conform to.&lt;/p&gt; &#xA;&lt;p&gt;The results are saved as files in subfolders in &lt;code&gt;app/views/results&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Those files are then loaded by &lt;code&gt;scripts.js&lt;/code&gt; into iframes in &lt;code&gt;app/views/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;To do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;switch from saving files to better use of routes&lt;/li&gt; &#xA; &lt;li&gt;let users add an API key via the UI, so I can host the app somewhere&lt;/li&gt; &#xA; &lt;li&gt;add more question types - eg. radio and checkbox lists&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>harperreed/photo-similarity-search</title>
    <updated>2024-04-21T03:09:15Z</updated>
    <id>tag:github.com,2024-04-21:/harperreed/photo-similarity-search</id>
    <link href="https://github.com/harperreed/photo-similarity-search" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Super simple MLX (apple silicon) CLIP based photo similarity web app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📸 Embed-Photos 🖼️&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/harperreed/embed-photos/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Embed-Photos, a powerful photo similarity search engine built by &lt;a href=&#34;https://github.com/harperreed&#34;&gt;@harperreed&lt;/a&gt;! 🎉 This project leverages the CLIP (Contrastive Language-Image Pre-training) model to find visually similar images based on textual descriptions. 🔍🖼️&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 Fast and efficient image search using the CLIP model&lt;/li&gt; &#xA; &lt;li&gt;💻 Works on Apple Silicon (MLX) only&lt;/li&gt; &#xA; &lt;li&gt;💾 Persistent storage of image embeddings using SQLite and Chroma&lt;/li&gt; &#xA; &lt;li&gt;🌐 Web interface for easy interaction and exploration&lt;/li&gt; &#xA; &lt;li&gt;🔒 Secure image serving and handling&lt;/li&gt; &#xA; &lt;li&gt;📊 Logging and monitoring for performance analysis&lt;/li&gt; &#xA; &lt;li&gt;🔧 Configurable settings using environment variables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/harperreed/photo-similarity-search/assets/18504/7df51659-84b0-4efb-9647-58a544743ea5&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📂 Repository Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;embed-photos/&#xA;├── README.md&#xA;├── generate_embeddings.py&#xA;├── requirements.txt&#xA;├── start_web.py&#xA;└── templates&#xA;    ├── README.md&#xA;    ├── base.html&#xA;    ├── display_image.html&#xA;    ├── index.html&#xA;    ├── output.txt&#xA;    └── query_results.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;generate_embeddings.py&lt;/code&gt;: Script to generate image embeddings using the CLIP model&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;: Lists the required Python dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;start_web.py&lt;/code&gt;: Flask web application for the photo similarity search&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;templates/&lt;/code&gt;: Contains HTML templates for the web interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/harperreed/embed-photos.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the required dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the application by setting the necessary environment variables in a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate image embeddings:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python generate_embeddings.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the web application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python start_web.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your web browser and navigate to &lt;code&gt;http://localhost:5000&lt;/code&gt; to explore the photo similarity search!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use siglip instead of clip&lt;/li&gt; &#xA; &lt;li&gt;add a more robust config&lt;/li&gt; &#xA; &lt;li&gt;make mlx optional&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🙏 Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The Embed-Photos project builds upon the work of the Apple (mlx!), the CLIP model and leverages various open-source libraries. We extend our gratitude to the authors and contributors of these projects.&lt;/p&gt; &#xA;&lt;p&gt;Happy searching! 🔍✨&lt;/p&gt;</summary>
  </entry>
</feed>