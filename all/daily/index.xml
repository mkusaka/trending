<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:30:59Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>codecrafters-io/build-your-own-x</title>
    <updated>2022-07-11T01:30:59Z</updated>
    <id>tag:github.com,2022-07-11:/codecrafters-io/build-your-own-x</id>
    <link href="https://github.com/codecrafters-io/build-your-own-x" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Master programming by recreating your favorite technologies from scratch.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codecrafters.io/github-banner&#34;&gt;&lt;img src=&#34;https://codecrafters.vercel.app/for/github-repo-banner.png&#34; alt=&#34;CodeCrafters.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is a compilation of well-written, step-by-step guides for re-creating our favorite technologies from scratch. It&#39;s a great way to learn. Submissions welcome, just send a PR.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;What I cannot create, I do not understand — Richard Feynman.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents: Build your own X&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-3d-renderer&#34;&gt;3D Renderer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-augmented-reality&#34;&gt;Augmented Reality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-bittorrent-client&#34;&gt;BitTorrent Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-blockchain--cryptocurrency&#34;&gt;Blockchain / Cryptocurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-bot&#34;&gt;Bot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-command-line-tool&#34;&gt;Command-Line Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-emulator--virtual-machine&#34;&gt;Emulator / Virtual Machine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-front-end-framework--library&#34;&gt;Front-end Framework / Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-game&#34;&gt;Game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-network-stack&#34;&gt;Network Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-neural-network&#34;&gt;Neural Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-operating-system&#34;&gt;Operating System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-physics-engine&#34;&gt;Physics Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-programming-language&#34;&gt;Programming Language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-regex-engine&#34;&gt;Regex Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-search-engine&#34;&gt;Search Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-shell&#34;&gt;Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-template-engine&#34;&gt;Template Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-text-editor&#34;&gt;Text Editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-visual-recognition-system&#34;&gt;Visual Recognition System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-voxel-engine&#34;&gt;Voxel Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-web-search-engine&#34;&gt;Web Search Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#build-your-own-web-server&#34;&gt;Web Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/codecrafters-io/build-your-own-x/master/#uncategorized&#34;&gt;Uncategorized&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;3D Renderer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Introduction to Ray Tracing: a Simple Method for Creating 3D Images&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ssloy/tinyrenderer/wiki&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How OpenGL works: software rendering in 500 lines of code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lodev.org/cgtutor/raycasting.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Raycasting engine of Wolfenstein 3D&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pbr-book.org/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Physically Based Rendering:From Theory To Implementation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Rasterization: a Practical Implementation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.davrous.com/2013/06/13/tutorial-series-learning-how-to-write-a-3d-soft-engine-from-scratch-in-c-typescript-or-javascript/&#34;&gt;&lt;strong&gt;C# / TypeScript / JavaScript&lt;/strong&gt;: &lt;em&gt;Learning how to write a 3D soft engine from scratch in C#, TypeScript or JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avik-das.github.io/build-your-own-raytracer/&#34;&gt;&lt;strong&gt;Java / JavaScript&lt;/strong&gt;: &lt;em&gt;Build your own 3D renderer&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.rogach.org/2015/08/how-to-create-your-own-simple-3d-render.html&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;How to create your own simple 3D render engine in pure Java&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gabrielgambetta.com/computer-graphics-from-scratch/introduction.html&#34;&gt;&lt;strong&gt;JavaScript / Pseudocode&lt;/strong&gt;: &lt;em&gt;Computer Graphics from scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/a-3d-modeller.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A 3D Modeller&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Augmented Reality&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uXNjNcqW4kY&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;How To: Augmented Reality App Tutorial for Beginners with Vuforia and Unity 3D&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLKIKuXdn4ZMjuUAtdQfK1vwTZPQn_rgSv&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;How To Unity ARCore&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLPCqNOwwN794Gz5fzUSi1p4OqLU0HTmvn&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;AR Portal Tutorial with Unity&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qTSDPkPyPqs&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;How to create a Dragon in Augmented Reality in Unity ARCore&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Z5AmqMuNi08&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;How to Augmented Reality AR Tutorial: ARKit Portal to the Upside Down&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitesofcode.wordpress.com/2017/09/12/augmented-reality-with-python-and-opencv-part-1/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Augmented Reality with Python and OpenCV&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;BitTorrent Client&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.seanjoflynn.com/research/bittorrent.html&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Building a BitTorrent client from scratch in C#&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.jse.li/posts/torrent/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Building a BitTorrent client from the ground up in Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day02_bencode.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a Bencode Parser&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://allenkim67.github.io/programming/2016/05/04/how-to-make-your-own-bittorrent-client.html&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Write your own bittorrent client&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://markuseliasson.se/article/bittorrent-in-python/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A BitTorrent client in Python 3.5&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Blockchain / Cryptocurrency&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.observablehq.com/@galletti94/functional-blockchain&#34;&gt;&lt;strong&gt;ATS&lt;/strong&gt;: &lt;em&gt;Functional Blockchain&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://programmingblockchain.gitbooks.io/programmingblockchain/&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Programming The Blockchain in C#&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@bradford_hamilton/write-your-own-blockchain-and-pow-algorithm-using-crystal-d53d5d9d0c52&#34;&gt;&lt;strong&gt;Crystal&lt;/strong&gt;: &lt;em&gt;Write your own blockchain and PoW algorithm using Crystal&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jeiwan.net/posts/building-blockchain-in-go-part-1/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Building Blockchain in Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Code your own blockchain in less than 200 lines of Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/programmers-blockchain/create-simple-blockchain-java-tutorial-from-scratch-6eeed3cb03fa&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;Creating Your First Blockchain with Java&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conradoqg/naivecoin&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;A cryptocurrency implementation in less than 1500 lines of code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nambrot/blockchain-in-js&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build your own Blockchain in JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/digital-alchemy-holdings/learn-build-a-javascript-blockchain-part-1-ca61c285821e&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Learn &amp;amp; Build a JavaScript Blockchain&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SavjeeTutorials/SavjeeCoin&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Creating a blockchain with JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/how-to-launch-your-own-production-ready-cryptocurrency-ab97cb773371&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How To Launch Your Own Production-Ready Cryptocurrency&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackdoor.io/articles/writing-a-blockchain-in-nodejs-6512fec33307&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Writing a Blockchain in Node.js&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@vasilyf/lets-implement-a-cryptocurrency-in-kotlin-part-1-blockchain-8704069f8580&#34;&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;: &lt;em&gt;Let’s implement a cryptocurrency in Kotlin&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/learn-blockchains-by-building-one-117428612f46&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Learn Blockchains by Building One&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ecomunsing.com/build-your-own-blockchain&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Build your own blockchain: a Python tutorial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://adilmoujahid.com/posts/2018/03/intro-blockchain-bitcoin-python/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A Practical Introduction to Blockchain with Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/crypto-currently/lets-build-the-tiniest-blockchain-e70965a248b&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Let’s Build the Tiniest Blockchain&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yukimotopress/programming-blockchains-step-by-step&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Programming Blockchains Step-by-Step (Manuscripts Book Edition)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/how-to-build-a-simple-actor-based-blockchain-aac1e996c177&#34;&gt;&lt;strong&gt;Scala&lt;/strong&gt;: &lt;em&gt;How to build a simple actor-based blockchain&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lhartikk.github.io/&#34;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: &lt;em&gt;Naivecoin: a tutorial for building a cryptocurrency&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://naivecoinstake.learn.uno/&#34;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: &lt;em&gt;NaivecoinStake: a tutorial for building a cryptocurrency with the Proof of Stake consensus&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Bot&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/Roll_your_own_IRC_bot&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;: &lt;em&gt;Roll your own IRC bot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@SeloSlav/how-to-make-a-scary-russian-twitter-bot-with-java-b7b62768a3ac&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;How To Make a Scary Russian Twitter Bot With Java&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tutorials.botsfloor.com/creating-a-simple-facebook-messenger-ai-bot-with-api-ai-in-node-js-50ae2fa5c80d&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Creating a Simple Facebook Messenger AI Bot with API.ai in Node.js&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sohamkamani.com/blog/2016/09/21/making-a-telegram-bot/&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;How to make a responsive telegram bot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discordjs.guide/&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Create a Discord bot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.scottlogic.com/2017/05/22/gifbot-github-integration.html&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;gifbot - Building a GitHub App&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2017/08/ai-chatbot-web-speech-api-node-js/&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Building A Simple AI Chatbot With Web Speech API And Node.js&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fullstackpython.com/blog/build-first-slack-bot-python.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;How to Build Your First Slack Bot with Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/freehunch/how-to-build-a-slack-bot-with-python-using-slack-events-api-django-under-20-minute-code-included-269c3a9bf64e&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;How to build a Slack Bot with Python using Slack Events API &amp;amp; Django under 20 minute&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pythonforengineers.com/build-a-reddit-bot-part-1/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Build a Reddit Bot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=krTUf7BpTc0&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;How To Make A Reddit Bot&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://khashtamov.com/en/how-to-create-a-telegram-bot-using-python/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;How To Create a Telegram Bot Using Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/creating-a-twitter-bot-in-python-with-tweepy-ac524157a607&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Create a Twitter Bot in Python Using Tweepy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLIFBTFgFpoJ9vmYYlfxRFV6U_XhG-4fpP&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Creating Reddit Bot with Python &amp;amp; PRAW&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/build-a-cryptocurrency-trading-bot-with-r-1445c429e1b1&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;: &lt;em&gt;Build A Cryptocurrency Trading Bot with R&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://habr.com/en/post/436254/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;A bot for Starcraft in Rust, C or any other language&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Command-Line Tool&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flaviocopes.com/go-git-contributions/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Visualize your local git contributions with Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flaviocopes.com/go-tutorial-lolcat/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Build a command line app with Go: lolcat&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flaviocopes.com/go-tutorial-cowsay/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Building a cli command with Go: cowsay&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flaviocopes.com/go-tutorial-fortune/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Go CLI tutorial: fortune clone&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day06_nistow.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a stow alternative to manage dotfiles&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Database&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cstack.github.io/db_tutorial/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Let&#39;s Build a Simple Database&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Implementing a Key-Value Store&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/1029838/Build-Your-Own-Database&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Build Your Own Database&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/an-archaeology-inspired-database.html&#34;&gt;&lt;strong&gt;Clojure&lt;/strong&gt;: &lt;em&gt;An Archaeology-Inspired Database&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@marceloboeira/why-you-should-build-your-own-nosql-database-9bbba42039f5&#34;&gt;&lt;strong&gt;Crystal&lt;/strong&gt;: &lt;em&gt;Why you should build your own NoSQL Database&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Dagoba: an in-memory graph database&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/dbdb-dog-bed-database.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;DBDB: Dog Bed Database&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://charlesleifer.com/blog/building-a-simple-redis-server-with-python/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Write your own miniature Redis with Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Docker&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.lizzie.io/linux-containers-in-500-loc.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Linux containers in 500 lines of code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/build-a-container-golang&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Build Your Own Container Using Less than 100 Lines of Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8fi7uSYlOdc&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Building a container from scratch in Go&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fewbytes/rubber-docker&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A workshop on Linux containers: Rebuild Docker from Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tonybaloney/mocker&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A proof-of-concept imitation of Docker, written in 100% Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p8952/bocker&#34;&gt;&lt;strong&gt;Shell&lt;/strong&gt;: &lt;em&gt;Docker implemented in around 100 lines of bash&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Emulator / Virtual Machine&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.felixangell.com/virtual-machine-in-c/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Virtual machine in C&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://justinmeiners.github.io/lc3-vm/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Write your Own Virtual Machine&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cturt.github.io/cinoop.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Writing a Game Boy emulator, Cinoop&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How to write an emulator (CHIP-8 interpreter)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.codeslinger.co.uk/pages/projects/chip8.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Emulation tutorial (CHIP-8 interpreter)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.codeslinger.co.uk/pages/projects/gameboy.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Emulation tutorial (GameBoy emulator)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.codeslinger.co.uk/pages/projects/mastersystem/memory.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Emulation tutorial (Master System emulator)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLrOv9FMX8xJHqMvSGB_9G9nZZ_4IgteYf&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;NES Emulator From Scratch&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stevelosh.com/blog/2016/12/chip8-cpu/&#34;&gt;&lt;strong&gt;Common Lisp&lt;/strong&gt;: &lt;em&gt;CHIP-8 in Common Lisp&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://imrannazar.com/GameBoy-Emulation-in-JavaScript&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;GameBoy Emulation in JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://omokute.blogspot.com.br/2012/06/emulation-basics-write-your-own-chip-8.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Emulation Basics: Write your own Chip 8 Emulator/Interpreter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Front-end Framework / Library&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jasonformat.com/wtf-is-jsx/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;WTF is JSX (Let&#39;s Build a JSX Renderer)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hexacta/didact&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;A DIY guide to build your own React&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_MAD4Oly9yg&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Building React From Scratch&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@sweetpalma/gooact-react-in-160-lines-of-javascript-44e0742ad60f&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Gooact: React in 160 lines of JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mattgreer.org/articles/react-internals-part-one-basic-rendering/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;React Internals&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/learn-you-some-custom-react-renderers-aed7164a4199&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Learn how React Reconciler package works by building your own lightweight React DOM&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zapier.com/engineering/how-to-build-redux/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build Yourself a Redux&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jamasoftware.com/blog/lets-write-redux/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Let’s Write Redux!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/react-redux-implementing-store-from-scratch&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Redux: Implementing Store from Scratch&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.mgechev.com/2015/03/09/build-learn-your-own-light-lightweight-angularjs/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build Your own Simplified AngularJS in 200 Lines of JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://teropa.info/blog/2013/11/03/make-your-own-angular-part-1-scopes-and-digest.html&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Make Your Own AngularJS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How to write your own Virtual DOM&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfrachet.github.io/create-frontend-framework/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Building a frontend framework, from scratch, with components (templating, state, VDOM)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pomb.us/build-your-own-react/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build your own React&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/CGpMlWVcHok&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Building a Custom React Renderer&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Game&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://handmadehero.org/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Handmade Hero&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nesdoug.com/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;How to Program an NES game in C&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZ1QII7yudbc-Ky058TEaOstZHVbT-2hg&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Chess Engine In C&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLSkJey49cOgTSj465v2KbLZ7LMn10bCF9&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Let&#39;s Make: Dangerous Dave&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLT6WFYYZE6uLMcPGS3qfpYm7T_gViYMMt&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Learn Video Game Programming in C&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLkTXsX7igf8edTYU92nU-f5Ntzuf-RKvW&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Coding A Sudoku Solver in C&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLkTXsX7igf8erbWGYT4iSAhpnJLJ0Nk5G&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Coding a Rogue/Nethack RPG in C&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brennan.io/2015/06/12/tetris-reimplementation/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;On Tetris and Reimplementation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learnopengl.com/In-Practice/2D-Game/Breakout&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Breakout&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lazyfoo.net/tutorials/SDL/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Beginning Game Programming v2.0&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://javilop.com/gamedev/tetris-tutorial-in-c-platform-independent-focused-in-game-logic-for-beginners/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Tetris tutorial in C++ platform independent focused in game logic for beginners&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ETvApbD5xRo&amp;amp;list=PLNOBk_id22bw6LXhrGfhVwqQIa-M2MsLa&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Remaking Cavestory in C++&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL006xsVEsbKjSKBmLu1clo85yLrwjY67X&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Reconstructing Cave Story&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nicktasios.nl/posts/space-invaders-from-scratch-part-1.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Space Invaders from Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://scottlilly.com/learn-c-by-building-a-simple-rpg-index/&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Learn C# by Building a Simple RPG&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://roguesharp.wordpress.com/&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Creating a Roguelike Game in C#&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scottlilly.com/build-a-cwpf-rpg/&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Build a C#/WPF RPG&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gameswithgo.org/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Games With Go&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lwjglgamedev.gitbooks.io/3d-game-development-with-lwjgl/content/&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;3D Game Development with LWJGL 3&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;2D breakout game using Phaser&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lessmilk.com/tutorial/flappy-bird-phaser-1&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How to Make Flappy Bird in HTML5 With Phaser&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/developing-games-with-react-redux-and-svg-part-1/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Developing Games with React, Redux, and SVG&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aXwCrtAo4Wc&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build your own 8-Ball Pool game from scratch&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gamedevelopment.tutsplus.com/tutorials/how-to-make-your-first-roguelike--gamedev-13677&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How to Make Your First Roguelike&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/think-like-a-programmer-how-to-build-snake-using-only-javascript-html-and-css-7b1479c3339e&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Think like a programmer: How to build Snake using only JavaScript, HTML &amp;amp; CSS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SSYGEN/blog/issues/30&#34;&gt;&lt;strong&gt;Lua&lt;/strong&gt;: &lt;em&gt;BYTEPATH&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonprogramming.net/pygame-python-3-part-1-intro/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Developing Games With PyGame&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inventwithpython.com/makinggames.pdf&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Making Games with Python &amp;amp; Pygame&lt;/em&gt;&lt;/a&gt; [pdf]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rogueliketutorials.com/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Roguelike Tutorial Revised&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/developing-games-with-ruby/read&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Developing Games With Ruby&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.diatomenterprises.com/gamedev-on-ruby-why-not/&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Ruby Snake&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://a5huynh.github.io/posts/2018/adventures-in-rust/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Adventures in Rust: A Basic 2D Game&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tomassedovic.github.io/roguelike-tutorial/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Roguelike Tutorial in Rust + tcod&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Git&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;: &lt;em&gt;Reimplementing “git clone” in Haskell from the bottom up&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gitlet.maryrosecook.com/docs/gitlet.html&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Gitlet&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kushagra.dev/blog/build-git-learn-git/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build GIT - Learn GIT&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://benhoyt.com/writings/pygit/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Just enough of a Git client to create a repo, commit, and push itself to GitHub&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wyag.thb.lt/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Write yourself a Git!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://robots.thoughtbot.com/rebuilding-git-in-ruby&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Rebuilding Git in Ruby&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Network Stack&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://beej.us/guide/bgnet/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Beej&#39;s Guide to Network Programming&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Let&#39;s code a TCP/IP stack&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/geckoboard-under-the-hood/how-to-build-a-network-stack-in-ruby-f73aeb1b661b&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;How to build a network stack in Ruby&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Neural Network&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/11285/Neural-Network-OCR&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Neural Network OCR&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/building-neural-networks-in-f-part-1-a2832ae972e6&#34;&gt;&lt;strong&gt;F#&lt;/strong&gt;: &lt;em&gt;Building Neural Networks in F#&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://made2591.github.io/posts/neuralnetwork&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Build a multilayer perceptron with Golang&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sausheong.github.io/posts/how-to-build-a-simple-artificial-neural-network-with-go/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;How to build a simple artificial neural network with Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datadan.io/blog/neural-net-with-go&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Building a Neural Net from Scratch in Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLRqwX-V7Uu6aCibgK1PTWWu9by6XFdCfh&#34;&gt;&lt;strong&gt;JavaScript / Java&lt;/strong&gt;: &lt;em&gt;Neural Networks - The Nature of Code&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/neural-networks-from-scratch-for-javascript-linguists-part1-the-perceptron-632a4d1fbad2&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Neural networks from scratch for JavaScript linguists (Part1 — The Perceptron)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iamtrask.github.io/2015/07/12/basic-python-network/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A Neural Network in 11 lines of Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://victorzhou.com/blog/intro-to-neural-networks/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Implement a Neural Network from Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/optical-character-recognition-ocr.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Optical Character Recognition (OCR)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://navoshta.com/traffic-signs-classification/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Traffic signs classification with a convolutional network&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/how-to-generate-music-using-a-lstm-neural-network-in-keras-68786834d4c5&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Generate Music using LSTM Neural Network in Keras&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://victorzhou.com/blog/intro-to-cnns-part-1/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;An Introduction to Convolutional Neural Networks&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Operating System&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://joebergeron.io/posts/post_two.html&#34;&gt;&lt;strong&gt;Assembly&lt;/strong&gt;: &lt;em&gt;Writing a Tiny x86 Bootloader&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/index.html&#34;&gt;&lt;strong&gt;Assembly&lt;/strong&gt;: &lt;em&gt;Baking Pi – Operating Systems Development&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZjwvMcP3Nf0&amp;amp;list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Building a software and hardware stack for a simple computer from scratch&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tuhdo.github.io/os01/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Operating Systems: From 0 to 1&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://littleosbook.github.io/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;The little book about OS development&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jamesmolloy.co.uk/tutorial_html/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Roll your own toy UNIX-clone OS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Kernel 101 – Let’s write a Kernel&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arjunsreedharan.org/post/99370248137/kernel-201-lets-write-a-kernel-with-keyboard&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Kernel 201 – Let’s write a Kernel with keyboard and screen support&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jserv/mini-arm-os&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Build a minimal multi-tasking kernel for ARM from scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cfenollosa/os-tutorial&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;How to create an OS from scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://danluu.com/malloc-tutorial/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Malloc tutorial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Hack the virtual memory&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-matyukevich/raspberry-pi-os&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Learning operating system development using Linux kernel and Raspberry Pi&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@lduck11007/operating-systems-development-for-dummies-3d4d786e8ac&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Operating systems development for Dummies&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLHh55M_Kq4OApWScZyPl5HhgsTJS9MZ6M&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Write your own Operating System&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://3zanders.co.uk/2017/10/13/writing-a-bootloader/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Writing a Bootloader&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Writing an OS in Rust&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Physics Engine&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.toptal.com/game/video-game-physics-part-i-an-introduction-to-rigid-body-dynamics&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Video Game Physics Tutorial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://allenchou.net/game-physics-series/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Game physics series by Allen Chou&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gamedevelopment.tutsplus.com/series/how-to-create-a-custom-physics-engine--gamedev-12715&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How to Create a Custom Physics Engine&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLEETnX-uPtBXm1KEr_2zQ6K_0hoGH6JJ0&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;3D Physics Engine Tutorial&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://buildnewgames.com/gamephysics/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How Physics Engines Work&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://buildnewgames.com/broad-phase-collision-detection/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Broad Phase Collision Detection Using Spatial Partitioning&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/library/wa-build2dphysicsengine/index.html&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build a simple 2D physics engine for JavaScript games&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Programming Language&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kanaka/mal#mal---make-a-lisp&#34;&gt;&lt;strong&gt;(any)&lt;/strong&gt;: &lt;em&gt;mal - Make a Lisp&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nornagon/jonesforth/raw/master/jonesforth.S&#34;&gt;&lt;strong&gt;Assembly&lt;/strong&gt;: &lt;em&gt;Jonesforth&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Baby&#39;s First Garbage Collector&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.buildyourownlisp.com/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Build Your Own Lisp: Learn C and build your own programming language in 1000 lines of code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://maplant.com/gc.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Writing a Simple Garbage Collector in C&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;C interpreter that interprets itself.&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lotabout/Let-s-build-a-compiler&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;A C &amp;amp; x86 version of the &#34;Let&#39;s Build a Compiler&#34; by Jack Crenshaw&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DoctorWkt/acwj&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;A journey explaining how to build a compiler from scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gnuu.org/2009/09/18/writing-your-own-toy-compiler/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Writing Your Own Toy Compiler Using Flex&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eF9qWbuQLuw&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How to Create a Compiler&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Kaleidoscope: Implementing a Language with LLVM&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharpforfunandprofit.com/posts/understanding-parser-combinators/&#34;&gt;&lt;strong&gt;F#&lt;/strong&gt;: &lt;em&gt;Understanding Parser Combinators&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zMJYoYwOCd4&#34;&gt;&lt;strong&gt;Elixir&lt;/strong&gt;: &lt;em&gt;Demystifying compilers by writing your own&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hazbo/the-super-tiny-compiler&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;The Super Tiny Compiler&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HxaD_trXwRE&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Lexical Scanning in Go&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://g-ford.github.io/cradle/&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;: &lt;em&gt;Let&#39;s Build a Compiler&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;: &lt;em&gt;Write You a Haskell&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;: &lt;em&gt;Write Yourself a Scheme in 48 Hours&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wespiser.com/writings/wyas/home.html&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;: &lt;em&gt;Write You A Scheme&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.craftinginterpreters.com/&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;Crafting interpreters: A handbook for making programming languages&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jakubdziworski.github.io/categories.html#Enkel-ref&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;Creating JVM Language&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jamiebuilds/the-super-tiny-compiler&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;The Super Tiny Compiler&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/keyanzhang/the-super-tiny-interpreter&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;The Super Tiny Interpreter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maryrosecook.com/blog/post/little-lisp-interpreter&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Little Lisp interpreter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lisperator.net/pltut/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How to implement a programming language in JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://norasandler.com/2017/11/29/Write-a-Compiler.html&#34;&gt;&lt;strong&gt;OCaml&lt;/strong&gt;: &lt;em&gt;Writing a C Compiler&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bernsteinbear.com/blog/lisp/&#34;&gt;&lt;strong&gt;OCaml&lt;/strong&gt;: &lt;em&gt;Writing a Lisp, the series&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://compilers.iecc.com/crenshaw/&#34;&gt;&lt;strong&gt;Pascal&lt;/strong&gt;: &lt;em&gt;Let&#39;s Build a Compiler&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/a-python-interpreter-written-in-python.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A Python Interpreter Written in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://khamidou.com/compilers/lisp.py/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;lisp.py: Make your own Lisp interpreter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://norvig.com/lispy.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;How to Write a Lisp Interpreter in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruslanspivak.com/lsbasi-part1/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Let’s Build A Simple Interpreter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dj9CBS3ikGA&amp;amp;list=PLZQftyCk7_SdoVexSmwy_tBgs7P0b97yD&amp;amp;index=1&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Make Your Own Simple Interpreted Programming Language&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beautifulracket.com/&#34;&gt;&lt;strong&gt;Racket&lt;/strong&gt;: &lt;em&gt;Beautiful Racket: How to make your own programming languages with Racket&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.destroyallsoftware.com/screencasts/catalog/a-compiler-from-scratch&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;A Compiler From Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.beezwax.net/2017/07/07/writing-a-markdown-compiler/&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Markdown compiler from scratch in Ruby&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.subnetzero.io/post/building-language-vm-part-00/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;So You Want to Build a Language VM&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bodil.lol/parser-combinators/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Learning Parser Combinators With Rust&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uraimo.com/2017/02/05/building-a-lisp-from-scratch-with-swift/&#34;&gt;&lt;strong&gt;Swift&lt;/strong&gt;: &lt;em&gt;Building a LISP from scratch with Swift&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html&#34;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: &lt;em&gt;Build your own WebAssembly Compiler&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Regex Engine&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;A Regular Expression Matcher&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swtch.com/~rsc/regexp/regexp1.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Regular Expression Matching Can Be Simple And Fast&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nickdrane.com/build-your-own-regex/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build a Regex Engine in Less than 40 Lines of Code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dpk.io/dregs/toydregs&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How to implement regular expressions in functional javascript using derivatives&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Implementing a Regular Expression Engine&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://perl.plover.com/Regex/article.html&#34;&gt;&lt;strong&gt;Perl&lt;/strong&gt;: &lt;em&gt;How Regexes Work&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rcoh.svbtle.com/no-magic-regular-expressions&#34;&gt;&lt;strong&gt;Scala&lt;/strong&gt;: &lt;em&gt;No Magic: Regular Expressions&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Search Engine&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stories.algolia.com/a-search-engine-in-css-b5ec4e902e97&#34;&gt;&lt;strong&gt;CSS&lt;/strong&gt;: &lt;em&gt;A search engine in CSS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.dr-josiah.com/2010/07/building-search-engine-using-redis-and.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Building a search engine using Redis and redis-py&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boyter.org/2010/08/build-vector-space-search-engine-python/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Building a Vector Space Indexing Engine in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cY7pE7vX6MU&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Building A Python-Based Search Engine&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/filament-ai/making-text-search-learn-from-feedback-4fe210fd87b0&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Making text search learn from feedback&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stevenloria.com/tf-idf/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Finding Important Words in Text Using TF-IDF&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Shell&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brennan.io/2015/01/16/write-a-shell-in-c/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Tutorial - Write a Shell in C&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kamalmarhubi/shell-workshop&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Let&#39;s build a shell!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://indradhanush.github.io/blog/writing-a-unix-shell-part-1/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Writing a UNIX Shell&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tokenrove/build-your-own-shell&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Build Your Own Shell&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sj14.gitlab.io/post/2018-07-01-go-unix-shell/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;: &lt;em&gt;Writing a simple shell in Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.joshmcguigan.com/blog/build-your-own-shell-rust/&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Build Your Own Shell using Rust&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Template Engine&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://krasimirtsonev.com/blog/article/Javascript-template-engine-in-just-20-line&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;JavaScript template engine in just 20 lines&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/wdstack/understanding-javascript-micro-templating-f37a37b3b40e&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Understanding JavaScript Micro-Templating&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://alexmic.net/building-a-template-engine/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Approach: Building a toy template engine in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/a-template-engine.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A Template Engine&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bits.citrusbyte.com/how-to-write-a-template-library/&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;How to write a template engine in less than 30 lines of code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Text Editor&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://viewsourcecode.org/snaptoken/kilo/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Build Your Own Text Editor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.fltk.org/doc-1.1/editor.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Designing a Simple Text Editor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xqDonHEYPgA&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Python Tutorial: Make Your Own Text Editor&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.instructables.com/id/Create-a-Simple-Python-Text-Editor/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Create a Simple Python Text Editor!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.aha.io/text-editor/&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Build a Collaborative Text Editor Using Rails&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Visual Recognition System&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.devcenter.co/developing-a-license-plate-recognition-system-with-machine-learning-in-python-787833569ccd&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Developing a License Plate Recognition System with Machine Learning in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/building-a-facial-recognition-pipeline-with-deep-learning-in-tensorflow-66e7645015b8&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Building a Facial Recognition Pipeline with Deep Learning in Tensorflow&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Voxel Engine&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/letsmakeavoxelengine/home&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Let&#39;s Make a Voxel Engine&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=C_Fo9PcrVXA&amp;amp;list=PLXa65xzz2vplye7cn1HH4GyE6_FjnDSug&amp;amp;index=1&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;Let&#39;s make a voxel engine&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QZ4Vk2PkPZk&amp;amp;list=PL80Zqpd23vJfyWQi-8FKDbeO_ZQamLKJL&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;Java Voxel Engine Tutorial&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build your own &lt;code&gt;Web Server&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/859108/Writing-a-Web-Server-from-Scratch&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Writing a Web Server from Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codementor.io/ziad-saab/let-s-code-a-web-server-from-scratch-with-nodejs-streams-h4uc9utji&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Let&#39;s code a web server from scratch with NodeJS Streams&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antoaravinth/lets-build-express&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;lets-build-express&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://station.clancats.com/writing-a-webserver-in-pure-php/&#34;&gt;&lt;strong&gt;PHP&lt;/strong&gt;: &lt;em&gt;Writing a webserver in pure PHP&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/a-simple-web-server.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A Simple Web Server&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ruslanspivak.com/lsbaws-part1/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Let’s Build A Web Server.&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://defn.io/2018/02/25/web-app-from-scratch-01/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Web application from scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://joaoventura.net/blog/2017/python-webserver/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Building a basic HTTP Server from scratch in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.luisrei.com/articles/flaskrest.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Implementing a RESTful Web API with Python &amp;amp; Flask&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.honeybadger.io/building-a-simple-websockets-server-from-scratch-in-ruby/&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Building a simple websockets server from scratch in Ruby&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Uncategorized&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nand2tetris.org/&#34;&gt;&lt;strong&gt;(any)&lt;/strong&gt;: &lt;em&gt;From NAND to Tetris: Building a Modern Computer From First Principles&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/the-same-origin-policy.html&#34;&gt;&lt;strong&gt;Alloy&lt;/strong&gt;: &lt;em&gt;The Same-Origin Policy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dranger.com/ffmpeg/ffmpeg.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;How to Write a Video Player in Less Than 1000 Lines&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jamesroutley/write-a-hash-table&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Learn how to write a hash table in C&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uninformativ.de/blog/postings/2018-02-24/0/POSTING-en.html&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;The very basics of a terminal emulator&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brennan.io/2016/11/14/kernel-dev-ep3/&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Write a System Call&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codepr.github.io/posts/sol-mqtt-broker&#34;&gt;&lt;strong&gt;C&lt;/strong&gt;: &lt;em&gt;Sol - An MQTT broker from scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/relativty/Relativ&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Build your own VR headset for $200&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://seasonofcode.com/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How X Window Managers work and how to write one&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;Writing a Linux Debugger&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lofibucket.com/articles/64k_intro.html&#34;&gt;&lt;strong&gt;C++&lt;/strong&gt;: &lt;em&gt;How a 64k intro is made&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://16bpp.net/tutorials/csharp-networking&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;C# Networking: Create a TCP chater server, TCP games, UDP Pong and more&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.seanjoflynn.com/research/skeletal-animation.html&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;: &lt;em&gt;Loading and rendering 3D skeletal animations from scratch in C# and GLSL&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bernhardwenzel.com/articles/clojure-spellchecker/&#34;&gt;&lt;strong&gt;Clojure&lt;/strong&gt;: &lt;em&gt;Building a spell-checker&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kasvith.github.io/posts/lets-create-a-simple-lb-go/&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;, &lt;em&gt;Let&#39;s Create a Simple Load Balancer&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLgCYzUzKIBE9HUJU-upNvl3TRVAo9W47y&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;em&gt;How to Build an Android Reddit App&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ronami/minipack&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build Your Own Module Bundler - Minipack&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Learn JavaScript Promises by Building a Promise from Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mauriciopoppe.com/notes/computer-science/computation/promises/&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Implementing promises from scratch (TDD way)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.usejournal.com/implement-your-own-call-apply-and-bind-method-in-javascript-42cc85dba1b&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Implement your own — call(), apply() and bind() method in JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;JavaScript Algorithms and Data Structures&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xLHCMMGuN0Q&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;How to Make an Evolutionary Tetris AI&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pusher.com/tutorials/ride-hailing-react-native&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: &lt;em&gt;Build a ride hailing app with React Native&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kezhenxu94/cache-lite&#34;&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;: &lt;em&gt;Build Your Own Cache&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day12_resp.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a Redis Protocol Parser&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day11_buildsystem.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a Build system&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day08_minitest.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a MiniTest Framework&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day01_dmidecode.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a DMIDecode Parser&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day05_iniparser.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a INI Parser&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day04_asynclinkschecker.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a Link Checker&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonader.github.io/nimdays/day07_shorturl.html&#34;&gt;&lt;strong&gt;Nim&lt;/strong&gt;: &lt;em&gt;Writing a URL Shortening Service&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.webdevdrops.com/en/build-static-site-generator-nodejs-8969ebe34b22/&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Build a static site generator in 40 lines with Node.js&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeburst.io/building-a-simple-single-sign-on-sso-server-and-solution-from-scratch-in-node-js-ea6ee5fdf340&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;Building A Simple Single Sign On(SSO) Server And Solution From Scratch In Node.js.&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/how-to-create-a-real-world-node-cli-app-with-node-391b727bbed3&#34;&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: &lt;em&gt;How to create a real-world Node CLI app with Node&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chaitya62.github.io/2018/04/29/Writing-your-own-MVC-from-Scratch-in-PHP.html&#34;&gt;&lt;strong&gt;PHP&lt;/strong&gt;: &lt;em&gt;Write your own MVC from scratch in PHP&lt;/em&gt; &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ilovephp.jondh.me.uk/en/tutorial/make-your-own-blog&#34;&gt;&lt;strong&gt;PHP&lt;/strong&gt;: &lt;em&gt;Make your own blog&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kevinsmith.io/modern-php-without-a-framework&#34;&gt;&lt;strong&gt;PHP&lt;/strong&gt;: &lt;em&gt;Modern PHP Without a Framework&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boyter.org/2013/01/code-for-a-search-engine-in-php-part-1/&#34;&gt;&lt;strong&gt;PHP&lt;/strong&gt;: &lt;em&gt;Code a Web Search Engine in PHP&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o64FV-ez6Gw&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Build a Deep Learning Library&lt;/em&gt;&lt;/a&gt; [video]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;How to Build a Kick-Ass Mobile Document Scanner in Just 5 Minutes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/a-continuous-integration-system.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Continuous Integration System&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.datacamp.com/community/tutorials/recommender-systems-python&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Recommender Systems in Python: Beginner Tutorial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@kopilov.vlad/detect-sms-spam-in-kaggle-with-scikit-learn-5f6afa7a3ca2&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Write SMS-spam detector with Scikit-learn&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.untrod.com/2016/06/simple-similar-products-recommendation-engine-in-python.html&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;A Simple Content-Based Recommendation Engine in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.datacamp.com/community/tutorials/lstm-python-stock-market&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Stock Market Predictions with LSTM in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://franpapers.com/en/algorithmic/2018-introduction-to-fountain-codes-lt-codes-with-python/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Build your own error-correction fountain code with Luby Transform Codes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.paperspace.com/implementing-gans-in-tensorflow/&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Building a simple Generative Adversial Network (GAN) using Tensorflow&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lethalbrains.com/learn-ml-algorithms-by-coding-decision-trees-439ac503c9a4&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;Learn ML Algorithms by coding: Decision Trees&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cheery/json-algorithm&#34;&gt;&lt;strong&gt;Python&lt;/strong&gt;: &lt;em&gt;JSON Decoding Algorithm&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aosabook.org/en/500L/a-pedometer-in-the-real-world.html&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;A Pedometer in the Real World&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iridakos.com/tutorials/2018/01/25/creating-a-gtk-todo-application-with-ruby&#34;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;: &lt;em&gt;Creating a Linux Desktop application with Ruby&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Let&#39;s build a browser engine&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmilHernvall/dnsguide/raw/master/README.md&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Building a DNS server in Rust&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nbaksalyar.github.io/2015/07/10/writing-chat-in-rust.html&#34;&gt;&lt;strong&gt;Rust&lt;/strong&gt;: &lt;em&gt;Writing Scalable Chat Service from Scratch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g-plane/tiny-package-manager&#34;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: &lt;em&gt;Tiny Package Manager: Learns how npm or Yarn works&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Submissions welcome, just send a PR, or &lt;a href=&#34;https://github.com/codecrafters-io/build-your-own-x/issues/new&#34;&gt;create an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Help us review &lt;a href=&#34;https://github.com/codecrafters-io/build-your-own-x/issues&#34;&gt;pending submissions&lt;/a&gt; by leaving comments and &#34;reactions&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Origins &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;&lt;img src=&#34;http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg?sanitize=true&#34; alt=&#34;CC0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is the work of &lt;a href=&#34;https://github.com/codecrafters-io/build-your-own-x/graphs/contributors&#34;&gt;many contributors&lt;/a&gt;. It was started by &lt;a href=&#34;https://github.com/danistefanovic&#34;&gt;Daniel Stefanovic&lt;/a&gt;, and is now maintained by &lt;a href=&#34;https://codecrafters.io&#34;&gt;CodeCrafters, Inc.&lt;/a&gt; To the extent possible under law, &lt;a href=&#34;https://codecrafters.io&#34;&gt;CodeCrafters, Inc.&lt;/a&gt; has waived all copyright and related or neighboring rights to this work.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sensity-ai/dot</title>
    <updated>2022-07-11T01:30:59Z</updated>
    <id>tag:github.com,2022-07-11:/sensity-ai/dot</id>
    <link href="https://github.com/sensity-ai/dot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Deepfake Offensive Toolkit&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; Deepfake Offensive Toolkit &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/sensity-ai/dot/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/sensity-ai/dot&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sensity-ai/dot/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD_3--Clause-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-3812/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.8-blue.svg?sanitize=true&#34; alt=&#34;Python 3.8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sensity-ai/dot/actions/workflows/build_dot.yaml&#34;&gt;&lt;img src=&#34;https://github.com/sensity-ai/dot/actions/workflows/build_dot.yaml/badge.svg?sanitize=true&#34; alt=&#34;build-dot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sensity-ai/dot/actions/workflows/code_check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/sensity-ai/dot/actions/workflows/code_check.yaml/badge.svg?sanitize=true&#34; alt=&#34;code-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/sensity-ai/dot/blob/main/notebooks/colab_demo.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; height=&#34;20&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;dot&lt;/em&gt; (aka Deepfake Offensive Toolkit) makes real-time, controllable deepfakes ready for virtual cameras injection. &lt;em&gt;dot&lt;/em&gt; is created for performing penetration testing against e.g. identity verification and video conferencing systems, for the use by security analysts, Red Team members, and biometrics researchers.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more about &lt;em&gt;dot&lt;/em&gt; is used for penetration tests with deepfakes in the industry, read these articles by &lt;a href=&#34;https://www.theverge.com/2022/5/18/23092964/deepfake-attack-facial-recognition-liveness-test-banks-sensity-report&#34;&gt;The Verge&lt;/a&gt; and &lt;a href=&#34;https://www.biometricupdate.com/202205/sensity-alleges-biometric-onboarding-providers-downplaying-deepfake-threat&#34;&gt;Biometric Update&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;dot &lt;em&gt;is developed for research and demonstration purposes. As an end user, you have the responsibility to obey all applicable laws when using this program. Authors and contributing developers assume no liability and are not responsible for any misuse or damage caused by the use of this program.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/assets/dot_intro.gif&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;In a nutshell, &lt;em&gt;dot&lt;/em&gt; works like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    __________________      _____________________________      __________________________&#xA;   | your webcam feed | -&amp;gt; | suite of realtime deepfakes | -&amp;gt; | virtual camera injection |&#xA;    ------------------      -----------------------------      --------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All deepfakes supported by &lt;em&gt;dot&lt;/em&gt; do not require additional training. They can be used in real-time on the fly on a photo that becomes the target of face impersonation. Supported methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;face swap (via &lt;a href=&#34;https://github.com/neuralchen/SimSwap&#34;&gt;SimSwap&lt;/a&gt;), at resolutions &lt;code&gt;224&lt;/code&gt; and &lt;code&gt;512&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;with the option of face superresolution (via &lt;a href=&#34;https://github.com/yangxy/GPEN&#34;&gt;GPen&lt;/a&gt;) at resolutions &lt;code&gt;256&lt;/code&gt; and &lt;code&gt;512&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;lower quality face swap (via OpenCV)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliaksandrSiarohin/first-order-model&#34;&gt;FOMM&lt;/a&gt;, First Order Motion Model for image animation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install Pre-requisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install ffmpeg cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MacOS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ffmpeg cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create Conda Environment&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The instructions assumes that you have Miniconda installed on your machine. If you don&#39;t, you can refer to this &lt;a href=&#34;https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html&#34;&gt;link&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;With GPU Support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create -f envs/environment-gpu.yaml&#xA;conda activate dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;torch&lt;/code&gt; and &lt;code&gt;torchvision&lt;/code&gt; dependencies based on the CUDA version installed on your machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;cudatoolkit&lt;/code&gt; from &lt;code&gt;conda&lt;/code&gt;: &lt;code&gt;conda install cudatoolkit=&amp;lt;cuda_version_no&amp;gt;&lt;/code&gt; (replace &lt;code&gt;&amp;lt;cuda_version_no&amp;gt;&lt;/code&gt; with the version on your machine)&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;torch&lt;/code&gt; and &lt;code&gt;torchvision&lt;/code&gt; dependencies: &lt;code&gt;pip install torch==1.9.0+&amp;lt;cuda_tag&amp;gt; torchvision==0.10.0+&amp;lt;cuda_tag&amp;gt; -f https://download.pytorch.org/whl/torch_stable.html&lt;/code&gt;, where &lt;code&gt;&amp;lt;cuda_tag&amp;gt;&lt;/code&gt; is the CUDA tag defined by Pytorch. For example, &lt;code&gt;pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html&lt;/code&gt; for CUDA 11.1. See &lt;a href=&#34;https://pytorch.org/get-started/previous-versions/&#34;&gt;here&lt;/a&gt; for a list of all available &lt;code&gt;torch&lt;/code&gt; and &lt;code&gt;torchvision&lt;/code&gt; versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To check that &lt;code&gt;torch&lt;/code&gt; and &lt;code&gt;torchvision&lt;/code&gt; are installed correctly, run the following command: &lt;code&gt;python -c &#34;import torch; print(torch.cuda.is_available())&#34;&lt;/code&gt;. If the output is &lt;code&gt;True&lt;/code&gt;, the dependencies are installed with CUDA support.&lt;/p&gt; &#xA;&lt;h4&gt;With CPU Support (slow, not recommended)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create -f envs/environment-cpu.yaml&#xA;conda activate dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install dot&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download Models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download GitHub Release binaries from &lt;a href=&#34;https://github.com/sensity-ai/dot/releases/tag/1.0.0&#34;&gt;here&lt;/a&gt; or use the following &lt;code&gt;wget&lt;/code&gt; commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/sensity-ai/dot/releases/download/1.0.0/dot_model_checkpoints.z01 \&#xA;&amp;amp;&amp;amp; wget https://github.com/sensity-ai/dot/releases/download/1.0.0/dot_model_checkpoints.z02 \&#xA;&amp;amp;&amp;amp; wget https://github.com/sensity-ai/dot/releases/download/1.0.0/dot_model_checkpoints.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unzip the binaries and place them in the root directory of the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zip -s 0 dot_model_checkpoints.zip --out saved_models.zip \&#xA;&amp;amp;&amp;amp; unzip saved_models.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clean up the downloaded binaries:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf *.z*&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running dot&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;dot --help&lt;/code&gt; to get a full list of available options.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Simswap&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dot \&#xA;-c ./configs/simswap.yaml \&#xA;--target 0 \&#xA;--source &#34;./data&#34; \&#xA;--show_fps \&#xA;--use_gpu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SimSwapHQ&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dot \&#xA;-c ./configs/simswaphq.yaml \&#xA;--target 0 \&#xA;--source &#34;./data&#34; \&#xA;--show_fps \&#xA;--use_gpu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FOMM&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dot \&#xA;-c ./configs/fomm.yaml \&#xA;--target 0 \&#xA;--source &#34;./data&#34; \&#xA;--show_fps \&#xA;--use_gpu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FaceSwap&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dot \&#xA;-c ./configs/faceswap.yaml \&#xA;--target 0 \&#xA;--source &#34;./data&#34; \&#xA;--show_fps \&#xA;--use_gpu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To enable face superresolution, use the flag &lt;code&gt;--gpen_type gpen_256&lt;/code&gt; or &lt;code&gt;--gpen_type gpen_512&lt;/code&gt;. To use &lt;em&gt;dot&lt;/em&gt; on CPU (not recommended), do not pass the &lt;code&gt;--use_gpu&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;Controlling dot&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: We use the &lt;code&gt;SimSwap&lt;/code&gt; technique for the following demonstration&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Running &lt;em&gt;dot&lt;/em&gt; via any of the above methods generates real-time Deepfake on the input video feed using source images from the &lt;code&gt;data/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/assets/dot_run.gif&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;When running &lt;em&gt;dot&lt;/em&gt; a list of available control options appear on the terminal window as shown above. You can toggle through and select different source images by pressing the associated control key.&lt;/p&gt; &#xA;&lt;p&gt;Watch the following demo video for better understanding of the control options:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/assets/dot_demo.gif&#34; width=&#34;480&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Virtual Camera Injection&lt;/h2&gt; &#xA;&lt;p&gt;Instructions vary depending on your operating system.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS Studio&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://obsproject.com/forum/resources/obs-virtualcam.539/&#34;&gt;VirtualCam plugin&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Choose &lt;code&gt;Install and register only 1 virtual camera&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run OBS Studio.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Sources section, press on Add button (&#34;+&#34; sign),&lt;/p&gt; &lt;p&gt;select Windows Capture and press OK. In the appeared window, choose &#34;[python.exe]: fomm&#34; in Window drop-down menu and press OK. Then select Edit -&amp;gt; Transform -&amp;gt; Fit to screen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In OBS Studio, go to Tools -&amp;gt; VirtualCam. Check AutoStart,&lt;/p&gt; &lt;p&gt;set Buffered Frames to 0 and press Start.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now &lt;code&gt;OBS-Camera&lt;/code&gt; camera should be available in Zoom&lt;/p&gt; &lt;p&gt;(or other videoconferencing software).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt install v4l-utils v4l2loopback-dkms v4l2loopback-utils&#xA;sudo modprobe v4l2loopback devices=1 card_label=&#34;OBS Cam&#34; exclusive_caps=1&#xA;v4l2-ctl --list-devices&#xA;sudo add-apt-repository ppa:obsproject/obs-studio&#xA;sudo apt install obs-studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;OBS Studio&lt;/code&gt; and check if &lt;code&gt;tools --&amp;gt; v4l2sink&lt;/code&gt; exists. If it doesn&#39;t follow these instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.config/obs-studio/plugins/v4l2sink/bin/64bit/&#xA;ln -s /usr/lib/obs-plugins/v4l2sink.so ~/.config/obs-studio/plugins/v4l2sink/bin/64bit/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the virtual camera with &lt;code&gt;OBS Studio&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;code&gt;OBS Studio&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;tools --&amp;gt; v4l2sink&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;/dev/video2&lt;/code&gt; and &lt;code&gt;YUV420&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join a meeting and select &lt;code&gt;OBS Cam&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and install OBS Studio for MacOS from &lt;a href=&#34;https://obsproject.com/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open OBS and follow the first-time setup (you might be required to enable certain permissions in &lt;em&gt;System Preferences&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;em&gt;dot&lt;/em&gt; with &lt;code&gt;--use_cam&lt;/code&gt; flag to enable camera feed&lt;/li&gt; &#xA; &lt;li&gt;Click the &#34;+&#34; button in the sources section → select &#34;Windows Capture&#34;, create a new source and enter &#34;OK&#34; → select window with &#34;python&#34; included in the name and enter OK&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Start Virtual Camera&#34; button in the controls section&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;OBS Cam&#34; as default camera in the video settings of the application target of the injection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This is not a commercial Sensity product, and it is distributed freely with no warranties&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The software is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/LICENSE&#34;&gt;BSD 3-Clause&lt;/a&gt;. &lt;em&gt;dot&lt;/em&gt; utilizes several open source libraries. If you use &lt;em&gt;dot&lt;/em&gt;, make sure you agree with their licenses too. In particular, this codebase is built on top of the following research projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliaksandrSiarohin/first-order-model&#34;&gt;https://github.com/AliaksandrSiarohin/first-order-model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alievk/avatarify-python&#34;&gt;https://github.com/alievk/avatarify-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neuralchen/SimSwap&#34;&gt;https://github.com/neuralchen/SimSwap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yangxy/GPEN&#34;&gt;https://github.com/yangxy/GPEN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This repository follows the &lt;a href=&#34;https://google.github.io/styleguide/pyguide.html&#34;&gt;Google Python Style Guide&lt;/a&gt; for code formatting.&lt;/p&gt; &#xA;&lt;p&gt;If you have ideas for improving &lt;em&gt;dot&lt;/em&gt;, feel free to open relevant Issues and PRs. Please read &lt;a href=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before contributing to the repository.&lt;/p&gt; &#xA;&lt;p&gt;If you are working on improving the speed of &lt;em&gt;dot&lt;/em&gt;, please read first our guide on &lt;a href=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/docs/profiling.md&#34;&gt;code profiling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Changelog&lt;/h3&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; to track changes in the repository.&lt;/p&gt; &#xA;&lt;h3&gt;Setup Dev-Tools&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Dev Requirements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements-dev.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Pre-Commit Hooks&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Unit Tests (with coverage)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest --cov=dot --cov-report=term --cov-fail-under=10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Maintainers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghassen1302&#34;&gt;@ghassen1302&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vassilispapadop&#34;&gt;@vassilispapadop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/giorgiop&#34;&gt;@giorgiop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AjinkyaIndulkar&#34;&gt;@AjinkyaIndulkar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kjod&#34;&gt;@kjod&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sensity-ai/dot/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/sensity-ai/dot&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/sensity-ai/dot/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=sensity-ai/dot&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Research&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sensity-ai/dot/main/docs/run_without_camera.md&#34;&gt;Run &lt;em&gt;dot&lt;/em&gt; on image and video files instead of camera feed&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>facundoolano/software-papers</title>
    <updated>2022-07-11T01:30:59Z</updated>
    <id>tag:github.com,2022-07-11:/facundoolano/software-papers</id>
    <link href="https://github.com/facundoolano/software-papers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📚 A curated list of papers for Software Engineers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Papers for Software Engineers &lt;a href=&#34;https://github.com/facundoolano/software-papers/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/facundoolano/software-papers/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;workflow&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A curated list of papers that may be of interest to Software Engineering students or professionals.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Computing Machinery and Intelligence&lt;/strong&gt;. &lt;a href=&#34;https://www.csee.umbc.edu/courses/471/papers/turing.pdf&#34;&gt;Turing (1950)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Some Moral and Technical Consequences of Automation. &lt;a href=&#34;https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf&#34;&gt;Wiener (1960)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;ELIZA—a computer program for the study of natural language communication between man and machine. &lt;a href=&#34;http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf&#34;&gt;Weizenbaum (1966)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Education of a Computer&lt;/strong&gt;. &lt;a href=&#34;https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf&#34;&gt;Hopper (1952)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recursive Programming. &lt;a href=&#34;https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf&#34;&gt;Dijkstra (1960)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Goto Statement Considered Harmful. &lt;a href=&#34;https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Program development by stepwise refinement. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/wirth-refinement.html&#34;&gt;Wirth (1971)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Method for the Construction of Minimum-Redundancy Codes&lt;/strong&gt;. &lt;a href=&#34;https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/10_04051119.pdf&#34;&gt;Huffman (1952)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Universal Algorithm for Sequential Data Compression. &lt;a href=&#34;https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf&#34;&gt;Ziv, Lempel (1977)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem&lt;/strong&gt;. &lt;a href=&#34;http://5010.mathed.usu.edu/Fall2018/THigham/Krukskal.pdf&#34;&gt;Kruskal (1956)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Note on Two Problems in Connexion with Graphs. &lt;a href=&#34;http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf&#34;&gt;Dijkstra (1959)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Reducibility among Combinatorial Problems. &lt;a href=&#34;https://cgi.di.uoa.gr/~sgk/teaching/grad/handouts/karp.pdf&#34;&gt;Karp (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Big Omicron and big Omega and big Theta. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1008328.1008329&#34;&gt;Knuth (1976)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Amortized Computational Complexity. &lt;a href=&#34;http://www.cs.duke.edu/courses/fall11/cps234/reading/Tarjan85_AmortizedComplexity.pdf&#34;&gt;Tarjan (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recursive Functions of Symbolic Expressions and Their Computation by Machine&lt;/strong&gt;. &lt;a href=&#34;http://jmc.stanford.edu/articles/recursive/recursive.pdf&#34;&gt;McCarthy (1960)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Art of the Interpreter. &lt;a href=&#34;http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/ai/aim/AIM-453.pdf&#34;&gt;Steele, Sussman (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cramming More Components onto Integrated Circuits&lt;/strong&gt;. &lt;a href=&#34;https://newsroom.intel.com/wp-content/uploads/sites/11/2018/05/moores-law-electronics.pdf&#34;&gt;Moore (1965)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Validity of the Single Processor Approach to Achieving Large-Scale Computing Capabilities. &lt;a href=&#34;https://www3.cs.stonybrook.edu/~rezaul/Spring-2012/CSE613/reading/Amdahl-1967.pdf&#34;&gt;Amdahl (1967)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A Simple Capacity Model of Massively Parallel Transaction Systems. &lt;a href=&#34;http://www.perfdynamics.com/Papers/njgCMG93.pdf&#34;&gt;Gunther (1993)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Relational Model of Data for Large Shared Data Banks&lt;/strong&gt;. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf&#34;&gt;Codd (1970)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Granularity of Locks and Degrees of Consistency in a Shared Data Base. &lt;a href=&#34;https://www.alexdelis.eu/M149/gray.pdf&#34;&gt;Gray et al (1975)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;System R: Relational Approach to Database Management. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/cis650/papers/System-R.PDF&#34;&gt;Astrahan et al. (1976)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Access Path Selection in a Relational Database Management System. &lt;a href=&#34;https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf&#34;&gt;Selinger et al (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Transaction Concept: Virtues and Limitations. &lt;a href=&#34;https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf&#34;&gt;Gray (1981)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The design of POSTGRES. &lt;a href=&#34;https://dsf.berkeley.edu/papers/ERL-M85-95.pdf&#34;&gt;Stonebraker, Rowe (1986)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On the Criteria To Be Used in Decomposing Systems into Modules&lt;/strong&gt;. &lt;a href=&#34;https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf&#34;&gt;Parnas (1971)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Information Distribution Aspects of Design Methodology. &lt;a href=&#34;https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF&#34;&gt;Parnas (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Designing Software for Ease of Extension and Contraction. &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf&#34;&gt;Parnas (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Modular Structure of Complex Systems. &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.40.3812&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Parnas, Clements, Weiss (1984)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Software Aging. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/SoftwareAging.pdf&#34;&gt;Parnas (1994)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The UNIX Time- Sharing System&lt;/strong&gt;. &lt;a href=&#34;https://dsf.berkeley.edu/cs262/unix.pdf&#34;&gt;Ritchie, Thompson (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An Experimental Time-Sharing System. &lt;a href=&#34;http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/&#34;&gt;Corbató, Merwin Daggett, Daley (1962)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Structure of the &#34;THE&#34;-Multiprogramming System. &lt;a href=&#34;https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Reflections on Trusting Trust. &lt;a href=&#34;https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf&#34;&gt;Thompson (1984)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Design and Implementation of a Log-Structured File System. &lt;a href=&#34;https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf&#34;&gt;Rosenblum, Ousterhout (1991)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Protocol for Packet Network Intercommunication&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf&#34;&gt;Cerf, Kahn (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ethernet: Distributed packet switching for local computer networks. &lt;a href=&#34;https://ethernethistory.typepad.com/papers/EthernetPaper.pdf&#34;&gt;Metcalfe, Boggs (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;An algorithm for distributed computation of a Spanning Tree in an Extended LAN. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/319056.319004&#34;&gt;Perlman (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Programming with Abstract Data Types&lt;/strong&gt;. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/942572.807045&#34;&gt;Liskov, Zilles (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Design Methodology for Reliable Software Systems. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1479992.1480018&#34;&gt;Liskov (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The paradigms of programming. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1283920.1283934&#34;&gt;Floyd (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;On understanding types, data abstraction, and polymorphism. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/6041.6042&#34;&gt;Cardelli, Wegner (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;SELF: The Power of Simplicity. &lt;a href=&#34;https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps&#34;&gt;Ungar, Smith (1991)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Computer Programming as an Art&lt;/strong&gt;. &lt;a href=&#34;http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf&#34;&gt;Knuth (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An Axiomatic Basis for Computer Programming. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf&#34;&gt;Hoare (1969)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Humble Programmer. &lt;a href=&#34;http://rkka21.ru/docs/turing-award/ed1972e.pdf&#34;&gt;Dijkstra (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Emperor’s Old Clothes. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/358549.358561&#34;&gt;Hoare (1981)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Literate Programming. &lt;a href=&#34;http://www.literateprogramming.com/knuthweb.pdf&#34;&gt;Knuth (1984)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Programming as Theory Building. &lt;a href=&#34;https://pages.cs.wisc.edu/~remzi/Naur.pdf&#34;&gt;Naur (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Software Engineering: An Unconsummated Marriage. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/267896.267897&#34;&gt;Parnas (1997)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Mythical Man Month&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/MythicalManMonth.pdf&#34;&gt;Brooks (1975)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How do committees invent?. &lt;a href=&#34;https://www.melconway.com/Home/pdf/committees.pdf&#34;&gt;Conway (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Managing the Development of Large Software Systems. &lt;a href=&#34;https://www.praxisframework.org/files/royce1970.pdf&#34;&gt;Royce (1970)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Lisp: Good news, bad news, how to win big. &lt;a href=&#34;https://www.dreamsongs.com/Files/LispGoodNewsBadNews.pdf&#34;&gt;Gabriel (1991)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Cathedral and the Bazaar. &lt;a href=&#34;http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/cathedral-bazaar.ps&#34;&gt;Raymond (1998)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;New Directions in Cryptography&lt;/strong&gt;. &lt;a href=&#34;https://ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;Diffie, Hellman (1976)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. &lt;a href=&#34;https://people.csail.mit.edu/rivest/Rsapaper.pdf&#34;&gt;Rivest, Shamir, Adleman (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;How To Share A Secret. &lt;a href=&#34;https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf&#34;&gt;Shamir (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A Certified Digital Signature. &lt;a href=&#34;https://link.springer.com/content/pdf/10.1007/0-387-34805-0_21.pdf&#34;&gt;Merkle (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;K-Anonymity: A Model For Protecting Privacy. &lt;a href=&#34;https://epic.org/wp-content/uploads/privacy/reidentification/Sweeney_Article.pdf&#34;&gt;Sweeney (2002)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Communicating sequential processes&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf&#34;&gt;Hoare (1976)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Solution Of a Problem in Concurrent Program Control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/365559.365617&#34;&gt;Dijkstra (1965)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Monitors: An operating system structuring concept. &lt;a href=&#34;https://www.cs.ubc.ca/~norm/508/2009W1/summaries/monitors.pdf&#34;&gt;Hoare (1974)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;On the Duality of Operating System Structures. &lt;a href=&#34;https://courses.cs.vt.edu/~cs5204/fall07-gback/papers/p3-lauer.pdf&#34;&gt;Lauer, Needham (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Software Transactional Memory. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf&#34;&gt;Shavit, Touitou (1997)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time, Clocks, and the Ordering of Events in a Distributed System&lt;/strong&gt;. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Lamport (1978)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Self-stabilizing systems in spite of distributed control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/361179.361202&#34;&gt;Dijkstra (1974)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Byzantine Generals Problem. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/byz.pdf&#34;&gt;Lamport, Shostak, Pease (1982)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Impossibility of Distributed Consensus With One Faulty Process. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf&#34;&gt;Fisher, Lynch, Patterson (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;How to Build a Highly Available System Using Consensus. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/1996/10/Acrobat-58-Copy.pdf&#34;&gt;Lampson (1996)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Part-Time Parliament. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf&#34;&gt;Lamport (1998)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Paxos made simple. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&#34;&gt;Lamport (2001)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;In Search of an Understandable Consensus Algorithm. &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;Ongaro, Ousterhout (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Ubiquitous B-Tree&lt;/strong&gt;. &lt;a href=&#34;http://carlosproal.com/ir/papers/p121-comer.pdf&#34;&gt;Comer (1979)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scatter storage techniques. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/362851.362882&#34;&gt;Morris (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Space/Time Trade-offs in Hash Coding with Allowable Errors. &lt;a href=&#34;https://cs.pwr.edu.pl/cichon/2021_22_a/BigData/Bloom.pdf&#34;&gt;Bloom (1970)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Ordered hash tables. &lt;a href=&#34;https://academic.oup.com/comjnl/article-pdf/17/2/135/1405739/170135.pdf&#34;&gt;Amble, Knuth (1974)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Making data structures persistent. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/12130.12142&#34;&gt;Driscoll et al (1986)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-To-End Arguments in System Design&lt;/strong&gt;. &lt;a href=&#34;https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf&#34;&gt;Saltzer, Reed, Clark (1984)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Note on Distributed Computing. &lt;a href=&#34;https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf&#34;&gt;Waldo et al (1994)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Network is Reliable. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2655736&#34;&gt;Bailis, Kingsbury (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No Silver Bullet: Essence and Accidents of Software Engineering&lt;/strong&gt;. &lt;a href=&#34;http://www.cs.unc.edu/techreports/86-020.pdf&#34;&gt;Brooks (1987)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hints for Computer System Design. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/hints-for-computer-system-design/&#34;&gt;Lampson (1983)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Out of the Tar Pit. &lt;a href=&#34;http://curtclifton.net/papers/MoseleyMarks06a.pdf&#34;&gt;Moseley, Marks (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Why Functional Programming Matters&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&#34;&gt;Hughes (1990)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can Programming Be Liberated from the von Neumann Style?. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/359576.359579&#34;&gt;Backus (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Semantic Elegance of Applicative Languages. &lt;a href=&#34;http://nsl.com/misc/sasl/paraffins-turner.pdf&#34;&gt;Turner (1981)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Church&#39;s Thesis and Functional Programming. &lt;a href=&#34;https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet&#34;&gt;Turner (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The anatomy of a large-scale hypertextual Web search engine&lt;/strong&gt;. &lt;a href=&#34;https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf&#34;&gt;Brin, Page (1998)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As We May Think. &lt;a href=&#34;https://web.mit.edu/STS.035/www/PDFs/think.pdf&#34;&gt;Bush (1945)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The PageRank Citation Ranking: Bringing Order to the Web. &lt;a href=&#34;http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf&#34;&gt;Page, Brin, Motwani (1999)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Harvest, Yield, and Scalable Tolerant Systems&lt;/strong&gt;. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/FOX_Brewer_99-Harvest_Yield_and_Scalable_Tolerant_Systems.pdf&#34;&gt;Fox, Brewer (1999)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CAP Twelve Years Later: How the &#34;Rules&#34; Have Changed. &lt;a href=&#34;https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf&#34;&gt;Brewer (2012)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A Critique of the CAP Theorem. &lt;a href=&#34;https://www.cl.cam.ac.uk/research/dtg/www/files/publications/public/mk428/cap-critique.pdf&#34;&gt;Martin Kleppmann (2015)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamo, Amazon’s Highly Available Key-value store&lt;/strong&gt;. &lt;a href=&#34;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;DeCandia et al (2007)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Google File System. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;Ghemawat, Gobioff, Leung (2003)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;MapReduce: Simplified Data Processing on Large Clusters. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf&#34;&gt;Dean, Ghemawat (2004)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Bigtable: A Distributed Storage System for Structured Data. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;Chang et al (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;ZooKeeper: wait-free coordination for internet scale systems. &lt;a href=&#34;https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf&#34;&gt;Hunt et al (2010)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Kafka: a Distributed Messaging System for Log Processing. &lt;a href=&#34;http://notes.stephenholiday.com/Kafka.pdf&#34;&gt;Kreps, Narkhede, Rao (2011)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases. &lt;a href=&#34;https://web.stanford.edu/class/cs245/readings/aurora.pdf&#34;&gt;Verbitski et al (2017)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On Designing and Deploying Internet Scale Services&lt;/strong&gt;. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf&#34;&gt;Hamilton (2007)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ironies of automation. &lt;a href=&#34;https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf&#34;&gt;Bainbridge (1983)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;How Complex Systems Fail. &lt;a href=&#34;https://www.adaptivecapacitylabs.com/HowComplexSystemsFail.pdf&#34;&gt;Cook (2000)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. &lt;a href=&#34;http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf&#34;&gt;Patterson et al (2002)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Crash-Only Software. &lt;a href=&#34;https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf&#34;&gt;Candea, Fox (2003)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Nines are Not Enough: Meaningful Metrics for Clouds. &lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/f647d24ee7eeb338acebf1eb73a5d11b357620b0.pdf&#34;&gt;Mogul, Wilkes (2019)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bitcoin, A peer-to-peer electronic cash system&lt;/strong&gt;. &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;Nakomoto (2008)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. &lt;a href=&#34;https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf&#34;&gt;Buterin (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thinking Methodically about Performance&lt;/strong&gt;. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2413037&#34;&gt;Gregg (2012)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Performance Anti-Patterns. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1117403&#34;&gt;Smaalders (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Thinking Clearly about Performance. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1854041&#34;&gt;Millsap (2010)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show full list in chronological order &lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;As We May Think. &lt;a href=&#34;https://web.mit.edu/STS.035/www/PDFs/think.pdf&#34;&gt;Bush (1945)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Computing Machinery and Intelligence. &lt;a href=&#34;https://www.csee.umbc.edu/courses/471/papers/turing.pdf&#34;&gt;Turing (1950)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Education of a Computer. &lt;a href=&#34;https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf&#34;&gt;Hopper (1952)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Method for the Construction of Minimum-Redundancy Codes. &lt;a href=&#34;https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/10_04051119.pdf&#34;&gt;Huffman (1952)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem. &lt;a href=&#34;http://5010.mathed.usu.edu/Fall2018/THigham/Krukskal.pdf&#34;&gt;Kruskal (1956)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Note on Two Problems in Connexion with Graphs. &lt;a href=&#34;http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf&#34;&gt;Dijkstra (1959)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Recursive Functions of Symbolic Expressions and Their Computation by Machine. &lt;a href=&#34;http://jmc.stanford.edu/articles/recursive/recursive.pdf&#34;&gt;McCarthy (1960)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Some Moral and Technical Consequences of Automation. &lt;a href=&#34;https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf&#34;&gt;Wiener (1960)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Recursive Programming. &lt;a href=&#34;https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf&#34;&gt;Dijkstra (1960)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;An Experimental Time-Sharing System. &lt;a href=&#34;http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/&#34;&gt;Corbató, Merwin Daggett, Daley (1962)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Cramming More Components onto Integrated Circuits. &lt;a href=&#34;https://newsroom.intel.com/wp-content/uploads/sites/11/2018/05/moores-law-electronics.pdf&#34;&gt;Moore (1965)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Solution Of a Problem in Concurrent Program Control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/365559.365617&#34;&gt;Dijkstra (1965)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;ELIZA—a computer program for the study of natural language communication between man and machine. &lt;a href=&#34;http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf&#34;&gt;Weizenbaum (1966)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Validity of the Single Processor Approach to Achieving Large-Scale Computing Capabilities. &lt;a href=&#34;https://www3.cs.stonybrook.edu/~rezaul/Spring-2012/CSE613/reading/Amdahl-1967.pdf&#34;&gt;Amdahl (1967)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Goto Statement Considered Harmful. &lt;a href=&#34;https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Structure of the &#34;THE&#34;-Multiprogramming System. &lt;a href=&#34;https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How do committees invent?. &lt;a href=&#34;https://www.melconway.com/Home/pdf/committees.pdf&#34;&gt;Conway (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Scatter storage techniques. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/362851.362882&#34;&gt;Morris (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;An Axiomatic Basis for Computer Programming. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf&#34;&gt;Hoare (1969)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Relational Model of Data for Large Shared Data Banks. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf&#34;&gt;Codd (1970)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Managing the Development of Large Software Systems. &lt;a href=&#34;https://www.praxisframework.org/files/royce1970.pdf&#34;&gt;Royce (1970)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Space/Time Trade-offs in Hash Coding with Allowable Errors. &lt;a href=&#34;https://cs.pwr.edu.pl/cichon/2021_22_a/BigData/Bloom.pdf&#34;&gt;Bloom (1970)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On the Criteria To Be Used in Decomposing Systems into Modules. &lt;a href=&#34;https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf&#34;&gt;Parnas (1971)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Program development by stepwise refinement. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/wirth-refinement.html&#34;&gt;Wirth (1971)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Reducibility among Combinatorial Problems. &lt;a href=&#34;https://cgi.di.uoa.gr/~sgk/teaching/grad/handouts/karp.pdf&#34;&gt;Karp (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Information Distribution Aspects of Design Methodology. &lt;a href=&#34;https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF&#34;&gt;Parnas (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Design Methodology for Reliable Software Systems. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1479992.1480018&#34;&gt;Liskov (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Humble Programmer. &lt;a href=&#34;http://rkka21.ru/docs/turing-award/ed1972e.pdf&#34;&gt;Dijkstra (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The UNIX Time- Sharing System. &lt;a href=&#34;https://dsf.berkeley.edu/cs262/unix.pdf&#34;&gt;Ritchie, Thompson (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Protocol for Packet Network Intercommunication. &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf&#34;&gt;Cerf, Kahn (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Programming with Abstract Data Types. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/942572.807045&#34;&gt;Liskov, Zilles (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Computer Programming as an Art. &lt;a href=&#34;http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf&#34;&gt;Knuth (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Monitors: An operating system structuring concept. &lt;a href=&#34;https://www.cs.ubc.ca/~norm/508/2009W1/summaries/monitors.pdf&#34;&gt;Hoare (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Self-stabilizing systems in spite of distributed control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/361179.361202&#34;&gt;Dijkstra (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ordered hash tables. &lt;a href=&#34;https://academic.oup.com/comjnl/article-pdf/17/2/135/1405739/170135.pdf&#34;&gt;Amble, Knuth (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Mythical Man Month. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/MythicalManMonth.pdf&#34;&gt;Brooks (1975)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Granularity of Locks and Degrees of Consistency in a Shared Data Base. &lt;a href=&#34;https://www.alexdelis.eu/M149/gray.pdf&#34;&gt;Gray et al (1975)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;New Directions in Cryptography. &lt;a href=&#34;https://ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;Diffie, Hellman (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Communicating sequential processes. &lt;a href=&#34;https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf&#34;&gt;Hoare (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Big Omicron and big Omega and big Theta. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1008328.1008329&#34;&gt;Knuth (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;System R: Relational Approach to Database Management. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/cis650/papers/System-R.PDF&#34;&gt;Astrahan et al. (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Universal Algorithm for Sequential Data Compression. &lt;a href=&#34;https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf&#34;&gt;Ziv, Lempel (1977)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Time, Clocks, and the Ordering of Events in a Distributed System. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Lamport (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Art of the Interpreter. &lt;a href=&#34;http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/ai/aim/AIM-453.pdf&#34;&gt;Steele, Sussman (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ethernet: Distributed packet switching for local computer networks. &lt;a href=&#34;https://ethernethistory.typepad.com/papers/EthernetPaper.pdf&#34;&gt;Metcalfe, Boggs (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. &lt;a href=&#34;https://people.csail.mit.edu/rivest/Rsapaper.pdf&#34;&gt;Rivest, Shamir, Adleman (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On the Duality of Operating System Structures. &lt;a href=&#34;https://courses.cs.vt.edu/~cs5204/fall07-gback/papers/p3-lauer.pdf&#34;&gt;Lauer, Needham (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Can Programming Be Liberated from the von Neumann Style?. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/359576.359579&#34;&gt;Backus (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Ubiquitous B-Tree. &lt;a href=&#34;http://carlosproal.com/ir/papers/p121-comer.pdf&#34;&gt;Comer (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Access Path Selection in a Relational Database Management System. &lt;a href=&#34;https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf&#34;&gt;Selinger et al (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Designing Software for Ease of Extension and Contraction. &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf&#34;&gt;Parnas (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The paradigms of programming. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1283920.1283934&#34;&gt;Floyd (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How To Share A Secret. &lt;a href=&#34;https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf&#34;&gt;Shamir (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Certified Digital Signature. &lt;a href=&#34;https://link.springer.com/content/pdf/10.1007/0-387-34805-0_21.pdf&#34;&gt;Merkle (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Transaction Concept: Virtues and Limitations. &lt;a href=&#34;https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf&#34;&gt;Gray (1981)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Emperor’s Old Clothes. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/358549.358561&#34;&gt;Hoare (1981)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Semantic Elegance of Applicative Languages. &lt;a href=&#34;http://nsl.com/misc/sasl/paraffins-turner.pdf&#34;&gt;Turner (1981)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Byzantine Generals Problem. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/byz.pdf&#34;&gt;Lamport, Shostak, Pease (1982)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Hints for Computer System Design. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/hints-for-computer-system-design/&#34;&gt;Lampson (1983)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ironies of automation. &lt;a href=&#34;https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf&#34;&gt;Bainbridge (1983)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;End-To-End Arguments in System Design. &lt;a href=&#34;https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf&#34;&gt;Saltzer, Reed, Clark (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Modular Structure of Complex Systems. &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.40.3812&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Parnas, Clements, Weiss (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Reflections on Trusting Trust. &lt;a href=&#34;https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf&#34;&gt;Thompson (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Literate Programming. &lt;a href=&#34;http://www.literateprogramming.com/knuthweb.pdf&#34;&gt;Knuth (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Amortized Computational Complexity. &lt;a href=&#34;http://www.cs.duke.edu/courses/fall11/cps234/reading/Tarjan85_AmortizedComplexity.pdf&#34;&gt;Tarjan (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;An algorithm for distributed computation of a Spanning Tree in an Extended LAN. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/319056.319004&#34;&gt;Perlman (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On understanding types, data abstraction, and polymorphism. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/6041.6042&#34;&gt;Cardelli, Wegner (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Programming as Theory Building. &lt;a href=&#34;https://pages.cs.wisc.edu/~remzi/Naur.pdf&#34;&gt;Naur (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Impossibility of Distributed Consensus With One Faulty Process. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf&#34;&gt;Fisher, Lynch, Patterson (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The design of POSTGRES. &lt;a href=&#34;https://dsf.berkeley.edu/papers/ERL-M85-95.pdf&#34;&gt;Stonebraker, Rowe (1986)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Making data structures persistent. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/12130.12142&#34;&gt;Driscoll et al (1986)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;No Silver Bullet: Essence and Accidents of Software Engineering. &lt;a href=&#34;http://www.cs.unc.edu/techreports/86-020.pdf&#34;&gt;Brooks (1987)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Why Functional Programming Matters. &lt;a href=&#34;https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&#34;&gt;Hughes (1990)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Design and Implementation of a Log-Structured File System. &lt;a href=&#34;https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf&#34;&gt;Rosenblum, Ousterhout (1991)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;SELF: The Power of Simplicity. &lt;a href=&#34;https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps&#34;&gt;Ungar, Smith (1991)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Lisp: Good news, bad news, how to win big. &lt;a href=&#34;https://www.dreamsongs.com/Files/LispGoodNewsBadNews.pdf&#34;&gt;Gabriel (1991)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Simple Capacity Model of Massively Parallel Transaction Systems. &lt;a href=&#34;http://www.perfdynamics.com/Papers/njgCMG93.pdf&#34;&gt;Gunther (1993)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Software Aging. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/SoftwareAging.pdf&#34;&gt;Parnas (1994)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Note on Distributed Computing. &lt;a href=&#34;https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf&#34;&gt;Waldo et al (1994)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How to Build a Highly Available System Using Consensus. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/1996/10/Acrobat-58-Copy.pdf&#34;&gt;Lampson (1996)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Software Engineering: An Unconsummated Marriage. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/267896.267897&#34;&gt;Parnas (1997)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Software Transactional Memory. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf&#34;&gt;Shavit, Touitou (1997)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The anatomy of a large-scale hypertextual Web search engine. &lt;a href=&#34;https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf&#34;&gt;Brin, Page (1998)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Cathedral and the Bazaar. &lt;a href=&#34;http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/cathedral-bazaar.ps&#34;&gt;Raymond (1998)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Part-Time Parliament. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf&#34;&gt;Lamport (1998)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Harvest, Yield, and Scalable Tolerant Systems. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/FOX_Brewer_99-Harvest_Yield_and_Scalable_Tolerant_Systems.pdf&#34;&gt;Fox, Brewer (1999)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The PageRank Citation Ranking: Bringing Order to the Web. &lt;a href=&#34;http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf&#34;&gt;Page, Brin, Motwani (1999)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How Complex Systems Fail. &lt;a href=&#34;https://www.adaptivecapacitylabs.com/HowComplexSystemsFail.pdf&#34;&gt;Cook (2000)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Paxos made simple. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&#34;&gt;Lamport (2001)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;K-Anonymity: A Model For Protecting Privacy. &lt;a href=&#34;https://epic.org/wp-content/uploads/privacy/reidentification/Sweeney_Article.pdf&#34;&gt;Sweeney (2002)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. &lt;a href=&#34;http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf&#34;&gt;Patterson et al (2002)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Google File System. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;Ghemawat, Gobioff, Leung (2003)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Crash-Only Software. &lt;a href=&#34;https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf&#34;&gt;Candea, Fox (2003)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;MapReduce: Simplified Data Processing on Large Clusters. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf&#34;&gt;Dean, Ghemawat (2004)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Out of the Tar Pit. &lt;a href=&#34;http://curtclifton.net/papers/MoseleyMarks06a.pdf&#34;&gt;Moseley, Marks (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Church&#39;s Thesis and Functional Programming. &lt;a href=&#34;https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet&#34;&gt;Turner (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Bigtable: A Distributed Storage System for Structured Data. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;Chang et al (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Performance Anti-Patterns. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1117403&#34;&gt;Smaalders (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dynamo, Amazon’s Highly Available Key-value store. &lt;a href=&#34;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;DeCandia et al (2007)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On Designing and Deploying Internet Scale Services. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf&#34;&gt;Hamilton (2007)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Bitcoin, A peer-to-peer electronic cash system. &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;Nakomoto (2008)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;ZooKeeper: wait-free coordination for internet scale systems. &lt;a href=&#34;https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf&#34;&gt;Hunt et al (2010)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Thinking Clearly about Performance. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1854041&#34;&gt;Millsap (2010)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Kafka: a Distributed Messaging System for Log Processing. &lt;a href=&#34;http://notes.stephenholiday.com/Kafka.pdf&#34;&gt;Kreps, Narkhede, Rao (2011)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Thinking Methodically about Performance. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2413037&#34;&gt;Gregg (2012)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;CAP Twelve Years Later: How the &#34;Rules&#34; Have Changed. &lt;a href=&#34;https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf&#34;&gt;Brewer (2012)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;In Search of an Understandable Consensus Algorithm. &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;Ongaro, Ousterhout (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Network is Reliable. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2655736&#34;&gt;Bailis, Kingsbury (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. &lt;a href=&#34;https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf&#34;&gt;Buterin (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Critique of the CAP Theorem. &lt;a href=&#34;https://www.cl.cam.ac.uk/research/dtg/www/files/publications/public/mk428/cap-critique.pdf&#34;&gt;Martin Kleppmann (2015)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases. &lt;a href=&#34;https://web.stanford.edu/class/cs245/readings/aurora.pdf&#34;&gt;Verbitski et al (2017)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Nines are Not Enough: Meaningful Metrics for Clouds. &lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/f647d24ee7eeb338acebf1eb73a5d11b357620b0.pdf&#34;&gt;Mogul, Wilkes (2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;This list was inspired by (and draws from) the &lt;a href=&#34;https://paperswelove.org/&#34;&gt;Papers We Love&lt;/a&gt; project and the &lt;a href=&#34;https://mitpress.mit.edu/books/ideas-created-future&#34;&gt;Ideas That Created the Future&lt;/a&gt; book by Harry R. Lewis. I also found &lt;a href=&#34;https://blog.acolyer.org/&#34;&gt;the morning paper&lt;/a&gt; blog to be an extremly useful resource. For distributed systems I used &lt;a href=&#34;http://book.mixu.net/distsys/index.html&#34;&gt;Distributed systems for fun and profit&lt;/a&gt; and for Relational Data Bases I used the &lt;a href=&#34;http://www.redbook.io/&#34;&gt;Red Book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Meta reads&lt;/h2&gt; &#xA;&lt;p&gt;A few interesting resources about reading papers from Papers We Love and elsewhere:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://michaelrbernste.in/2014/10/21/should-i-read-papers.html&#34;&gt;Should I read papers?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/&#34;&gt;How to Read an Academic Article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;How to Read a Paper. &lt;a href=&#34;http://ccr.sigcomm.org/online/files/p83-keshavA.pdf&#34;&gt;Keshav (2007)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Efficient Reading of Papers in Science and Technology. &lt;a href=&#34;https://www.cs.columbia.edu/~hgs/netbib/efficientReading.pdf&#34;&gt;Hanson (1999)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On ICSE’s “Most Influential Papers”. &lt;a href=&#34;http://sei.pku.edu.cn/~yaoguo/PhDReading07/parnas-review.pdf&#34;&gt;Parnas (1995)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Selection criteria&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The list should stay short. Let&#39;s say no more than 30 papers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The idea is not to include every interesting paper that I come across but rather to keep a representative list that&#39;s possible to read from start to finish with a similar level of effort as reading a technical book from cover to cover.&lt;/li&gt; &#xA;   &lt;li&gt;I tried to include one paper per each major topic and author. Since in the process I found a lot of noteworthy alternative, related or follow-up papers and I wanted to keep track of those as well, I included them as sublist items (some of these sublists are currently longer than they should).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The papers shouldn&#39;t be too long. For the same reasons as the previous item, I try to avoid papers longer than 20 or 30 pages.&lt;/li&gt; &#xA; &lt;li&gt;They should be self-contained and readable enough to be approachable by the casual technical reader.&lt;/li&gt; &#xA; &lt;li&gt;They should be freely available online.&lt;/li&gt; &#xA; &lt;li&gt;Although historical relevance was taken into account, I omitted seminal papers in the cases where I found them hard to approach, when the main subject of the paper wasn&#39;t the thing that made them influential, etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That being said, where possible I preferred the original paper on each subject over modern updates or summary papers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;I tended to prefer topics that I can relate to my professional practice, typically papers originated in the industry or about innovations that later saw wide adoption. Likewise I tended to skip more theoretical papers, those focused on mathematical foundations for Computer Science, on electronic aspects of hardware, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Disclaimer: I&#39;m not a frequent paper reader, so I made this list as a sort of roadmap for myself. I haven&#39;t read all of the papers in the list yet; as I do, I may find than some don&#39;t meet the described criteria after all and remove them, or decide to add new ones.&lt;/p&gt; &#xA;&lt;p&gt;And, yes, this repository is a way to procrastinate on the actual reading after I finished making the list.&lt;/p&gt;</summary>
  </entry>
</feed>