<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-24T01:29:06Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Leizhenpeng/feishu-chatgpt</title>
    <updated>2023-03-24T01:29:06Z</updated>
    <id>tag:github.com,2023-03-24:/Leizhenpeng/feishu-chatgpt</id>
    <link href="https://github.com/Leizhenpeng/feishu-chatgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎒飞书 ×（GPT-3.5 + DALL·E + Whisper）= 飞一般的工作体验 🚀 语音对话、角色扮演、多话题讨论、图片创作、表格分析、文档导出 🚀&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatgpt/master/docs/img3.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;details align=&#34;center&#34;&gt; &#xA; &lt;summary&gt; 📷 点击展开完整功能截图&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/224493411-085ba405-81cd-4972-b87b-74a2e811f23d.png&#34; alt=&#34;语音对话&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223590381-ed38db74-39f3-4e77-bd3a-aaa54d679286.png&#34; alt=&#34;角色扮演&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223590817-37a56eac-ab6e-4293-862a-de0988ac50b7.png&#34; alt=&#34;文字成图&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/224531308-378a5bc3-2964-4e32-905f-8237dafc3f91.png&#34; alt=&#34;图片变体&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/224531775-3f0e1e1b-a373-4774-a8f0-e120ccba6670.png&#34; alt=&#34;帮助菜单&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 飞书 ×（GPT-3.5 + DALL·E + Whisper） &lt;br&gt; &lt;br&gt; 🚀 Feishu OpenAI 🚀 &lt;/p&gt; &#xA;&lt;h2&gt;👻 机器人功能&lt;/h2&gt; &#xA;&lt;p&gt;🗣 语音交流：私人直接与机器人畅所欲言&lt;/p&gt; &#xA;&lt;p&gt;💬 多话题对话：支持私人和群聊多话题讨论，高效连贯&lt;/p&gt; &#xA;&lt;p&gt;🖼 文本成图：支持文本成图和以图搜图&lt;/p&gt; &#xA;&lt;p&gt;🎭 角色扮演：支持场景模式，增添讨论乐趣和创意&lt;/p&gt; &#xA;&lt;p&gt;🔄 上下文保留：回复对话框即可继续同一话题讨论&lt;/p&gt; &#xA;&lt;p&gt;⏰ 自动结束：超时自动结束对话，支持清除讨论历史&lt;/p&gt; &#xA;&lt;p&gt;📝 富文本卡片：支持富文本卡片回复，信息更丰富多彩&lt;/p&gt; &#xA;&lt;p&gt;👍 交互式反馈：即时获取机器人处理结果&lt;/p&gt; &#xA;&lt;p&gt;🏞 场景预设：内置丰富场景预设，方便用户管理场景 🚧&lt;/p&gt; &#xA;&lt;p&gt;🔙 历史回档：轻松回档历史对话，继续话题讨论 🚧&lt;/p&gt; &#xA;&lt;p&gt;🔒 管理员模式：内置管理员模式，使用更安全可靠 🚧&lt;/p&gt; &#xA;&lt;p&gt;🌐 多token负载均衡：优化生产级别的高频调用场景&lt;/p&gt; &#xA;&lt;p&gt;↩️ 支持反向代理：为不同地区的用户提供更快、更稳定的访问体验&lt;/p&gt; &#xA;&lt;p&gt;📚 与飞书文档互动：成为企业员工的超级助手 🚧&lt;/p&gt; &#xA;&lt;p&gt;🎥 话题内容秒转PPT：让你的汇报从此变得更加简单 🚧&lt;/p&gt; &#xA;&lt;p&gt;📊 表格分析：轻松导入飞书表格，提升数据分析效率 🚧&lt;/p&gt; &#xA;&lt;h2&gt;🌟 项目特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🍏 基于 OpenAI-&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;gpt-3.5-turbo&lt;/a&gt; 接口&lt;/li&gt; &#xA; &lt;li&gt;🍎 通过 lark，将 ChatGPT 接入&lt;a href=&#34;https://open.feishu.cn/app&#34;&gt;飞书&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🥒 支持&lt;a href=&#34;https://github.com/serverless-devs/serverless-devs&#34;&gt;Serverless 云函数&lt;/a&gt;、&lt;a href=&#34;https://dashboard.cpolar.com/login&#34;&gt;本地环境&lt;/a&gt;、&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;、&lt;a href=&#34;https://github.com/Leizhenpeng/feishu-chatgpt/releases/&#34;&gt;二进制安装包&lt;/a&gt;多种渠道部署&lt;/li&gt; &#xA; &lt;li&gt;🍋 基于&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;goCache&lt;/a&gt;内存键值对缓存&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目部署&lt;/h2&gt; &#xA;&lt;h6&gt;有关飞书的配置文件说明，&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatgpt/master/#%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4&#34;&gt;➡︎ 点击查看&lt;/a&gt;&lt;/strong&gt;&lt;/h6&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;本地部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:Leizhenpeng/feishu-chatgpt.git&#xA;cd feishu-chatgpt/code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;如果你的服务器没有公网 IP，可以使用反向代理的方式&lt;/p&gt; &#xA; &lt;p&gt;飞书的服务器在国内对 ngrok 的访问速度很慢，所以推荐使用一些国内的反向代理服务商&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://dashboard.cpolar.com/&#34;&gt;cpolar&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://natapp.cn/&#34;&gt;natapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 配置config.yaml&#xA;mv config.example.yaml config.yaml&#xA;&#xA;//测试部署&#xA;go run main.go&#xA;cpolar http 9000&#xA;&#xA;//正式部署&#xA;nohup cpolar http 9000 -log=stdout &amp;amp;&#xA;&#xA;//查看服务器状态&#xA;https://dashboard.cpolar.com/status&#xA;&#xA;// 下线服务&#xA;ps -ef | grep cpolar&#xA;kill -9 PID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;更多详细介绍，参考&lt;a href=&#34;https://www.bilibili.com/video/BV1nW4y1378T/&#34;&gt;飞书上的小计算器: Go 机器人来啦&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;serverless云函数(阿里云等)部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:Leizhenpeng/feishu-chatgpt.git&#xA;cd feishu-chatgpt/code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;安装&lt;a href=&#34;https://docs.serverless-devs.com/serverless-devs/quick_start&#34;&gt;severless&lt;/a&gt;工具&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 配置config.yaml&#xA;mv config.example.yaml config.yaml&#xA;# 安装severless cli&#xA;npm install @serverless-devs/s -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;安装完成后，请根据您本地环境，根据下面教程部署&lt;code&gt;severless&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;本地 &lt;code&gt;linux&lt;/code&gt;/&lt;code&gt;mac os&lt;/code&gt; 环境&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;修改&lt;code&gt;s.yaml&lt;/code&gt;中的部署地区和部署秘钥&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;edition: 1.0.0&#xA;name: feishuBot-chatGpt&#xA;access: &#34;aliyun&#34; #  修改自定义的秘钥别称&#xA;&#xA;vars: # 全局变量&#xA;region: &#34;cn-hongkong&#34; # 修改云函数想要部署地区&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;一键部署&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ..&#xA;s deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;本地&lt;code&gt;windows&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;首先打开本地&lt;code&gt;cmd&lt;/code&gt;命令提示符工具，运行&lt;code&gt;go env&lt;/code&gt;检查你电脑上 go 环境变量设置, 确认以下变量和值&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;set GO111MODULE=on&#xA;set GOARCH=amd64&#xA;set GOOS=linux&#xA;set CGO_ENABLED=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;如果值不正确，比如您电脑上为&lt;code&gt;set GOOS=windows&lt;/code&gt;, 请运行以下命令设置&lt;code&gt;GOOS&lt;/code&gt;变量值&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;go env -w GOOS=linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;修改&lt;code&gt;s.yaml&lt;/code&gt;中的部署地区和部署秘钥&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;edition: 1.0.0&#xA;name: feishuBot-chatGpt&#xA;access: &#34;aliyun&#34; #  修改自定义的秘钥别称&#xA;&#xA;vars: # 全局变量&#xA;  region: &#34;cn-hongkong&#34; #  修改云函数想要部署地区&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;修改&lt;code&gt;s.yaml&lt;/code&gt;中的&lt;code&gt;pre-deploy&lt;/code&gt;, 去除第二步&lt;code&gt;run&lt;/code&gt;前面的环变量改置部分&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;  pre-deploy:&#xA;        - run: go mod tidy&#xA;          path: ./code&#xA;        - run: go build -o&#xA;            target/main main.go  # 删除GO111MODULE=on GOOS=linux GOARCH=amd64 CGO_ENABLED=0&#xA;          path: ./code&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;一键部署&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ..&#xA;s deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;更多详细介绍，参考&lt;a href=&#34;https://www.bilibili.com/video/BV1nW4y1378T/&#34;&gt;仅需 1min，用 Serverless 部署基于 gin 的飞书机器人&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;使用 Railway 平台一键部署&lt;/summary&gt; &#xA; &lt;p&gt;Railway 是一家国外的 Serverless 平台，支持多种语言，可以一键将 Github 上的代码仓库部署到 Railway 平台，然后在 Railway 平台上配置环境变量即可。部署本项目的流程如下：&lt;/p&gt; &#xA; &lt;h4&gt;1. 生成 Railway 项目&lt;/h4&gt; &#xA; &lt;p&gt;点击下方按钮即可创建一个对应的 Railway 项目，其会自动 Fork 本项目到你的 Github 账号下。&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://railway.app/template/10D-TF?referralCode=oMcVS2&#34;&gt;&lt;img src=&#34;https://railway.app/button.svg?sanitize=true&#34; alt=&#34;Deploy on Railway&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h4&gt;2. 配置环境变量&lt;/h4&gt; &#xA; &lt;p&gt;在打开的页面中，配置环境变量，每个变量的说明如下图所示：&lt;/p&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/225005602-88d8678f-9d17-4dc5-8d1e-4abf64fb84fd.png&#34; alt=&#34;Railway 环境变量&#34; width=&#34;500px&#34;&gt; &#xA; &lt;h4&gt;3. 部署项目&lt;/h4&gt; &#xA; &lt;p&gt;填写完环境变量后，点击 Deploy 就完成了项目的部署。部署完成后还需获取对应的域名用于飞书机器人访问，如下图所示：&lt;/p&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/225006236-57cb3c8a-1b7d-4bfe-9c9b-099cb9179027.png&#34; alt=&#34;Railway 域名&#34; width=&#34;500px&#34;&gt; &#xA; &lt;p&gt;如果不确定自己部署是否成功，可以通过访问上述获取到的域名 (&lt;a href=&#34;https://xxxxxxxx.railway.app/ping&#34;&gt;https://xxxxxxxx.railway.app/ping&lt;/a&gt;) 来查看是否返回了&lt;code&gt;pong&lt;/code&gt;，如果返回了&lt;code&gt;pong&lt;/code&gt;，说明部署成功。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;docker部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t feishu-chatgpt:latest .&#xA;docker run -d --name feishu-chatgpt -p 9000:9000 \&#xA;--env APP_ID=xxx \&#xA;--env APP_SECRET=xxx \&#xA;--env APP_ENCRYPT_KEY=xxx \&#xA;--env APP_VERIFICATION_TOKEN=xxx \&#xA;--env BOT_NAME=chatGpt \&#xA;--env OPENAI_KEY=&#34;sk-xxx1,sk-xxx2,sk-xxx3&#34; \&#xA;--env API_URL=&#34;https://api.openai.com&#34; \&#xA;--env HTTP_PROXY=&#34;&#34; \&#xA;feishu-chatgpt:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;注意:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;BOT_NAME&lt;/code&gt; 为飞书机器人名称，例如 &lt;code&gt;chatGpt&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;OPENAI_KEY&lt;/code&gt; 为openai key，多个key用逗号分隔，例如 &lt;code&gt;sk-xxx1,sk-xxx2,sk-xxx3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;HTTP_PROXY&lt;/code&gt; 为宿主机的proxy地址，例如 &lt;code&gt;http://host.docker.internal:7890&lt;/code&gt;,没有代理的话，可以不用设置&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;API_URL&lt;/code&gt; 为openai api 接口地址，例如 &lt;code&gt;https://api.openai.com&lt;/code&gt;, 没有反向代理的话，可以不用设置&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;小白简易化 docker 部署&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;docker 地址: &lt;a href=&#34;https://hub.docker.com/r/leizhenpeng/feishu-chatgpt&#34;&gt;https://hub.docker.com/r/leizhenpeng/feishu-chatgpt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --restart=always --name feishu-chatgpt2 -p 9000:9000 -v /etc/localtime:/etc/localtim:ro  \&#xA;--env APP_ID=xxx \&#xA;--env APP_SECRET=xxx \&#xA;--env APP_ENCRYPT_KEY=xxx \&#xA;--env APP_VERIFICATION_TOKEN=xxx \&#xA;--env BOT_NAME=chatGpt \&#xA;--env OPENAI_KEY=&#34;sk-xxx1,sk-xxx2,sk-xxx3&#34; \&#xA;--env API_URL=https://api.openai.com \&#xA;--env HTTP_PROXY=&#34;&#34; \&#xA;dockerproxy.com/leizhenpeng/feishu-chatgpt:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;事件回调地址: &lt;a href=&#34;http://IP:9000/webhook/event&#34;&gt;http://IP:9000/webhook/event&lt;/a&gt; 卡片回调地址: &lt;a href=&#34;http://IP:9000/webhook/card&#34;&gt;http://IP:9000/webhook/card&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;把它填入飞书后台 &lt;br&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;docker-compose部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;直接在config.example.yml中配置好环境变量，然后运行下面的命令即可&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 构建镜像&#xA;docker compose build&#xA;&#xA;# 启动服务&#xA;docker compose up -d&#xA;&#xA;# 停止服务&#xA;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;事件回调地址: &lt;a href=&#34;http://IP:9000/webhook/event&#34;&gt;http://IP:9000/webhook/event&lt;/a&gt; 卡片回调地址: &lt;a href=&#34;http://IP:9000/webhook/card&#34;&gt;http://IP:9000/webhook/card&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;二进制安装包部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;进入&lt;a href=&#34;https://github.com/Leizhenpeng/feishu-chatgpt/releases/&#34;&gt;release 页面&lt;/a&gt; 下载对应的安装包&lt;/li&gt; &#xA;  &lt;li&gt;解压安装包,修改 config.example.yml 中配置信息,另存为 config.yml&lt;/li&gt; &#xA;  &lt;li&gt;运行程序入口文件 &lt;code&gt;feishu-chatgpt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;事件回调地址: &lt;a href=&#34;http://IP:9000/webhook/event&#34;&gt;http://IP:9000/webhook/event&lt;/a&gt; 卡片回调地址: &lt;a href=&#34;http://IP:9000/webhook/card&#34;&gt;http://IP:9000/webhook/card&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;详细配置步骤&lt;/h2&gt; &#xA;&lt;details align=&#34;left&#34;&gt; &#xA; &lt;summary&gt; 📸 点击展开飞书机器人配置的分步截图指导&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223943381-39e0466f-2a5e-472a-9863-94eafb5f17b0.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223943448-228de5cb-0929-4d80-8087-8d8624dd6ddf.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223943485-ef331784-7940-4657-b128-70c98391e72f.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223943527-60e6653a-eb6e-4062-a076-b6c9da934352.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223943972-f49adf9f-af5f-463a-8c7a-c1f0cac0e8c3.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944060-7ef630a4-4248-4509-852b-cad8bfffeefc.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944230-aff586be-31cc-40de-9b1a-7d4e259d54dd.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944350-917d115c-6c82-4d8b-9ec8-b5c82331a2dc.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944381-97396156-f5e2-467f-aaf6-b1f6e1c446b2.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223945122-f7ab3d9a-6742-43d2-970e-ddb0f284c7fa.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944507-8d1a08d7-8b5b-4f32-a90d-fd338164ec82.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944515-fb505e84-c840-484a-8df5-612f60bf27ea.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/50035229/223944590-ad61320f-c14a-4542-80ad-dee2e6469b67.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;获取 &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI&lt;/a&gt; 的 KEY&lt;/li&gt; &#xA; &lt;li&gt;创建 &lt;a href=&#34;https://open.feishu.cn/&#34;&gt;飞书&lt;/a&gt; 机器人 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;前往&lt;a href=&#34;https://open.feishu.cn/app?lang=zh-CN&#34;&gt;开发者平台&lt;/a&gt;创建应用,并获取到 APPID 和 Secret&lt;/li&gt; &#xA;   &lt;li&gt;前往&lt;code&gt;应用功能-机器人&lt;/code&gt;, 创建机器人&lt;/li&gt; &#xA;   &lt;li&gt;从 cpolar、serverless 或 Railway 获得公网地址，在飞书机器人后台的 &lt;code&gt;事件订阅&lt;/code&gt; 板块填写。例如， &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;http://xxxx.r6.cpolar.top&lt;/code&gt;为 cpolar 暴露的公网地址&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;/webhook/event&lt;/code&gt;为统一的应用路由&lt;/li&gt; &#xA;     &lt;li&gt;最终的回调地址为 &lt;code&gt;http://xxxx.r6.cpolar.top/webhook/event&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;在飞书机器人后台的 &lt;code&gt;机器人&lt;/code&gt; 板块，填写消息卡片请求网址。例如， &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;http://xxxx.r6.cpolar.top&lt;/code&gt;为 cpolar 暴露的公网地址&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;/webhook/card&lt;/code&gt;为统一的应用路由&lt;/li&gt; &#xA;     &lt;li&gt;最终的消息卡片请求网址为 &lt;code&gt;http://xxxx.r6.cpolar.top/webhook/card&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;在事件订阅板块，搜索三个词&lt;code&gt;机器人进群&lt;/code&gt;、 &lt;code&gt;接收消息&lt;/code&gt;、 &lt;code&gt;消息已读&lt;/code&gt;, 把他们后面所有的权限全部勾选。 进入权限管理界面，搜索&lt;code&gt;图片&lt;/code&gt;, 勾选&lt;code&gt;获取与上传图片或文件资源&lt;/code&gt;。 最终会添加下列回调事件 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;im:resource(获取与上传图片或文件资源)&lt;/li&gt; &#xA;     &lt;li&gt;im:message&lt;/li&gt; &#xA;     &lt;li&gt;im:message.group_at_msg(获取群组中所有消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:message.group_at_msg:readonly(接收群聊中@机器人消息事件)&lt;/li&gt; &#xA;     &lt;li&gt;im:message.p2p_msg(获取用户发给机器人的单聊消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:message.p2p_msg:readonly(读取用户发给机器人的单聊消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:message:send_as_bot(获取用户在群组中@机器人的消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:chat:readonly(获取群组信息)&lt;/li&gt; &#xA;     &lt;li&gt;im:chat(获取与更新群组信息)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;发布版本，等待企业管理员审核通过&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;更多介绍，参考&lt;a href=&#34;https://www.bilibili.com/video/BV12M41187rV/&#34;&gt;飞书上的小计算器: Go 机器人来啦&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更多交流&lt;/h2&gt; &#xA;&lt;p&gt;如需协助部署，或者其他定制服务，可联系下面的WeChat，支持发票~&lt;/p&gt; &#xA;&lt;p&gt;遇到问题，可以加入飞书群沟通~&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatgpt/master/docs/talk.png&#34; alt=&#34;&#34; width=&#34;200&#34;&gt; &#xA;&lt;h2&gt;交朋友 或者 鼓励一下&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得这个项目对你有帮助，可以请作者买本书~&lt;/p&gt; &#xA;&lt;img width=&#34;400&#34; src=&#34;https://user-images.githubusercontent.com/50035229/224462896-28f7b2d5-f443-4cc2-9790-7b72e5c53f15.png&#34;&gt; &#xA;&lt;p&gt;😚 谢谢你啦 😚&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typst/typst</title>
    <updated>2023-03-24T01:29:06Z</updated>
    <id>tag:github.com,2023-03-24:/typst/typst</id>
    <link href="https://github.com/typst/typst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new markup-based typesetting system that is powerful and easy to learn.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;Typst&#34; src=&#34;https://user-images.githubusercontent.com/17899797/226108480-722b770e-6313-40d7-84f2-26bebb55a281.png&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://typst.app/docs/&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=docs&amp;amp;up_color=007aff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app%2Fdocs&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://typst.app/&#34;&gt; &lt;img alt=&#34;Typst App&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=typst.app&amp;amp;up_color=239dad&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/2uDybryKPe&#34;&gt; &lt;img alt=&#34;Discord Server&#34; src=&#34;https://img.shields.io/discord/1054443721975922748?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=555&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/typst/typst/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;Apache-2 License&#34; src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Typst is a new markup-based typsetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in markup for the most common formatting tasks&lt;/li&gt; &#xA; &lt;li&gt;Flexible functions for everything else&lt;/li&gt; &#xA; &lt;li&gt;A tightly integrated scripting system&lt;/li&gt; &#xA; &lt;li&gt;Math typesetting, bibliography management, and more&lt;/li&gt; &#xA; &lt;li&gt;Fast compile times thanks to incremental compilation&lt;/li&gt; &#xA; &lt;li&gt;Friendly error messages in case something goes wrong&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains the Typst compiler and its CLI, which is everything you need to compile Typst documents locally. For the best writing experience, consider signing up to our &lt;a href=&#34;https://typst.app/&#34;&gt;collaborative online editor&lt;/a&gt; for free. It is currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://typst.app/docs/tutorial/&#34;&gt;gentle introduction&lt;/a&gt; to Typst is available in our documentation. However, if you want to see the power of Typst encapsulated in one image, here it is:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Example&#34; width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/38260698/226794868-90911832-433a-4575-be88-42d582589403.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s dissect what&#39;s going on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;em&gt;set rules&lt;/em&gt; to configure element properties like the size of pages or the numbering of headings. By setting the page height to &lt;code&gt;auto&lt;/code&gt;, it scales to fit the content. Set rules accommodate the most common configurations. If you need full control, you can also use &lt;a href=&#34;https://typst.app/docs/reference/styling/#show-rules&#34;&gt;show rules&lt;/a&gt; to completely redefine the appearance of an element.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We insert a heading with the &lt;code&gt;= Heading&lt;/code&gt; syntax. One equals sign creates a top level heading, two create a subheading and so on. Typst has more lightweight markup like this, see the &lt;a href=&#34;https://typst.app/docs/reference/syntax/&#34;&gt;syntax&lt;/a&gt; reference for a full list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://typst.app/docs/reference/math/&#34;&gt;Mathematical equations&lt;/a&gt; are enclosed in dollar signs. By adding extra spaces around the contents of a equation, we can put it into a separate block. Multi-letter identifiers are interpreted as Typst definitions and functions unless put into quotes. This way, we don&#39;t need backslashes for things like &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;sqrt&lt;/code&gt;. And &lt;code&gt;phi.alt&lt;/code&gt; applies the &lt;code&gt;alt&lt;/code&gt; modifier to the &lt;code&gt;phi&lt;/code&gt; to select a particular symbol variant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we get to some &lt;a href=&#34;https://typst.app/docs/reference/scripting/&#34;&gt;scripting&lt;/a&gt;. To input code into a Typst document, we can write a hashtag followed by an expression. We define two variables and a recursive function to compute the n-th fibonacci number. Then, we display the results in a center-aligned table. The table function takes its cells row-by-row. Therefore, we first pass the formulas &lt;code&gt;$F_1$&lt;/code&gt; to &lt;code&gt;$F_10$&lt;/code&gt; and then the computed fibonacci numbers. We apply the spreading operator (&lt;code&gt;..&lt;/code&gt;) to both because they are arrays and we want to pass the arrays&#39; items as individual arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Text version of the code example.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#set page(width: 10cm, height: auto)&#xA;#set heading(numbering: &#34;1.&#34;)&#xA;&#xA;= Fibonacci sequence&#xA;The Fibonacci sequence is defined through the&#xA;_recurrence relation_ $F_n = F_(n-1) + F_(n-2)$.&#xA;It can also be expressed in closed form:&#xA;&#xA;$ F_n = floor(1 / sqrt(5) phi.alt^n), quad&#xA;  phi.alt = (1 + sqrt(5)) / 2 $&#xA;&#xA;#let count = 10&#xA;#let nums = range(1, count + 1)&#xA;#let fib(n) = (&#xA;  if n &amp;lt;= 2 { 1 }&#xA;  else { fib(n - 1) + fib(n - 2) }&#xA;)&#xA;&#xA;The first #count numbers of the sequence are:&#xA;&#xA;#align(center, table(&#xA;  columns: count,&#xA;  ..nums.map(n =&amp;gt; $F_#n$),&#xA;  ..nums.map(n =&amp;gt; str(fib(n))),&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Install and use&lt;/h2&gt; &#xA;&lt;p&gt;You can get sources and pre-built binaries for the latest release of Typst from the &lt;a href=&#34;https://github.com/typst/typst/releases/&#34;&gt;releases page&lt;/a&gt;. This will give you Typst&#39;s CLI which converts Typst sources into PDFs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Creates `file.pdf` in working directory.&#xA;typst file.typ&#xA;&#xA;# Creates PDF file at the desired path.&#xA;typst path/to/source.typ path/to/output.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also watch source files and automatically recompile on changes. This is faster than compiling from scratch each time because Typst has incremental compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Watches source files and recompiles on changes.&#xA;typst --watch file.typ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer an integrated IDE-like experience with autocompletion and instant preview, you can also check out the &lt;a href=&#34;https://typst.app/&#34;&gt;Typst web app&lt;/a&gt;, which is currently in public beta.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;To build Typst yourself, you need to have the &lt;a href=&#34;https://rustup.rs/&#34;&gt;latest stable Rust&lt;/a&gt; installed. Then, you can build the CLI with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo build -p typst-cli --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optimized binary will be stored in &lt;code&gt;target/release/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love to see contributions from the community. If you experience bugs, feel free to open an issue or send a PR with a fix. For new features, we would invite you to open an issue first so we can explore the design space together. If you want to contribute and are wondering how everything works, also check out the &lt;a href=&#34;https://github.com/typst/typst/raw/main/ARCHITECTURE.md&#34;&gt;&lt;code&gt;ARCHITECTURE.md&lt;/code&gt;&lt;/a&gt; file. It explains how the compiler works.&lt;/p&gt; &#xA;&lt;h2&gt;Design Principles&lt;/h2&gt; &#xA;&lt;p&gt;All of Typst has been designed with three key goals in mind: Power, simplicity, and performance. We think it&#39;s time for a system that matches the power of LaTeX, is easy to learn and use, all while being fast enough to realize instant preview. To achieve these goals, we follow three core design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplicity through Consistency:&lt;/strong&gt; If you know how to do one thing in Typst, you should be able to transfer that knowledge to other things. If there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other. E.g. it&#39;s okay that &lt;code&gt;= Introduction&lt;/code&gt; and &lt;code&gt;#heading[Introduction]&lt;/code&gt; do the same thing because the former is just syntax sugar for the latter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Power through Composability:&lt;/strong&gt; There are two ways to make something flexible: Have a knob for everything or have a few knobs that you can combine in many ways. Typst is designed with the second way in mind. We provide systems that you can compose in ways we&#39;ve never even thought of. TeX is also in the second category, but it&#39;s a bit low-level and therefore people use LaTeX instead. But there, we don&#39;t really have that much composability. Instead, there&#39;s a package for everything (&lt;code&gt;\usepackage{knob}&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance through Incrementality:&lt;/strong&gt; All Typst language features must accommodate for incremental compilation. Luckily we have &lt;a href=&#34;https://github.com/typst/comemo/&#34;&gt;&lt;code&gt;comemo&lt;/code&gt;&lt;/a&gt;, a system for incremental compilation which does most of the hard work in the background.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIAGameWorks/Path-Tracing-SDK</title>
    <updated>2023-03-24T01:29:06Z</updated>
    <id>tag:github.com,2023-03-24:/NVIDIAGameWorks/Path-Tracing-SDK</id>
    <link href="https://github.com/NVIDIAGameWorks/Path-Tracing-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time path tracing library and sample&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Path Tracing SDK v1.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIAGameWorks/Path-Tracing-SDK/main/images/r-title.png&#34; alt=&#34;Title&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Path Tracing SDK is a code sample that strives to embody years of ray tracing and neural graphics research and experience. It is intended as a starting point for a path tracer integration, as a reference for various integrated SDKs, and/or for learning and experimentation.&lt;/p&gt; &#xA;&lt;p&gt;The base path tracing implementation derives from NVIDIA’s &lt;a href=&#34;https://github.com/NVIDIAGameWorks/Falcor&#34;&gt;Falcor Research Path Tracer&lt;/a&gt;, ported to approachable C++/HLSL &lt;a href=&#34;https://github.com/NVIDIAGameWorks/donut&#34;&gt;Donut framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DirectX 12 and Vulkan back-ends&lt;/li&gt; &#xA; &lt;li&gt;Reference and real-time modes&lt;/li&gt; &#xA; &lt;li&gt;Simple BSDF model that is easy to extend&lt;/li&gt; &#xA; &lt;li&gt;Simple asset pipeline based on glTF 2.0 (support for a subset of glTF extensions including animation)&lt;/li&gt; &#xA; &lt;li&gt;NEE/visibility rays and importance sampling for environment maps with MIS&lt;/li&gt; &#xA; &lt;li&gt;Basic volumes and nested dielectrics with priority&lt;/li&gt; &#xA; &lt;li&gt;RayCone for texture MIP selection&lt;/li&gt; &#xA; &lt;li&gt;Basic analytic lights (directional, spot, point)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/RTXDI&#34;&gt;RTXDI&lt;/a&gt; integration for ReSTIR DI (light importance sampling) and and ReSTIR GI (indirect lighting)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/Opacity-MicroMap-SDK&#34;&gt;OMM&lt;/a&gt; integration for fast ray traced alpha testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/RayTracingDenoiser&#34;&gt;NRD&lt;/a&gt; ReLAX and ReBLUR denoiser integration with up to 3-layer path space decomposition (Stable Planes)&lt;/li&gt; &#xA; &lt;li&gt;Reference mode &#39;photo-mode screenshot&#39; with basic &lt;a href=&#34;https://developer.nvidia.com/optix-denoiser&#34;&gt;OptiX denoiser&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;Basic TAA, tone mapping, etc.&lt;/li&gt; &#xA; &lt;li&gt;Streamline + DLSS integration (coming very soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DLSS is currently not enabled due to upgrade to Streamline 2.0; integration is work in progress&lt;/li&gt; &#xA; &lt;li&gt;SER support on Vulkan is currently work in progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 20H1 (version 2004-10.0.19041) or newer&lt;/li&gt; &#xA; &lt;li&gt;DXR Capable GPU&lt;/li&gt; &#xA; &lt;li&gt;GeForce Game Ready Driver 531.18 or newer&lt;/li&gt; &#xA; &lt;li&gt;DirectX 12 or Vulkan API&lt;/li&gt; &#xA; &lt;li&gt;DirectX Raytracing 1.1 API, or higher&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2019 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/bin&lt;/td&gt; &#xA;   &lt;td&gt;default folder for binaries and compiled shaders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/build&lt;/td&gt; &#xA;   &lt;td&gt;default folder for build files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/donut&lt;/td&gt; &#xA;   &lt;td&gt;code for a custom version of the Donut framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/donut/nvrhi&lt;/td&gt; &#xA;   &lt;td&gt;code for the NVRHI rendering API layer (a git submodule)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/external&lt;/td&gt; &#xA;   &lt;td&gt;external libraries and SDKs, including NRD, RTXDI, and OMM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/media&lt;/td&gt; &#xA;   &lt;td&gt;models, textures, scene files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/tools&lt;/td&gt; &#xA;   &lt;td&gt;optional command line tools (denoiser, texture compressor, etc)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/pt_sdk&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Path Tracing SDK core; Sample.cpp/.h/.hlsl contain entry points&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/pt_sdk/PathTracer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core path tracing shaders&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;At the moment, only Windows builds are supported. We are going to add Linux support in the future.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository &lt;strong&gt;with all submodules recursively&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/NVIDIAGameWorks/Path-Tracing-SDK.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the media files from Packman:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd Path-Tracing-SDK&#xA;update_dependencies.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a build folder.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Any folder name works, but git is configured to ignore folders named &lt;code&gt;build\*&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use CMake to configure the build and generate the project files.&lt;/p&gt; &lt;p&gt;Use of CMake GUI is recommended but &lt;code&gt;cmake ..&lt;/code&gt; works too. Make sure to select the x64 platform for the generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the solution generated by CMake in the build folder.&lt;/p&gt; &lt;p&gt;Open the generated solution (i.e. &lt;code&gt;build/PathTracingSDK.sln&lt;/code&gt;) with Visual Studio and build it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select and run the &lt;code&gt;pt_sdk&lt;/code&gt; project. Binaries get built to the &lt;code&gt;bin&lt;/code&gt; folder. Media is loaded from &lt;code&gt;media&lt;/code&gt; folder.&lt;/p&gt; &lt;p&gt;If making a binary build, the &lt;code&gt;media&lt;/code&gt; and &lt;code&gt;tools&lt;/code&gt; folders can be placed into &lt;code&gt;bin&lt;/code&gt; and packed up together (i.e. the sample app will search for both &lt;code&gt;media\&lt;/code&gt; and &lt;code&gt;..\media\&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Interface&lt;/h2&gt; &#xA;&lt;p&gt;Once the application is running, most of the SDK features can be accessed via the UI window on the left hand side and drop-down controls in the top-center.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIAGameWorks/Path-Tracing-SDK/main/images/r-ui.png&#34; alt=&#34;UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Camera can be moved using W/S/A/D keys and rotated by dragging with the left mouse cursor.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-debug&lt;/code&gt; to enable the graphics API debug layer or runtime, and the &lt;a href=&#34;https://github.com/NVIDIAGameWorks/nvrhi&#34;&gt;NVRHI&lt;/a&gt; validation layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-fullscreen&lt;/code&gt; to start in full screen mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-no-vsync&lt;/code&gt; to start without VSync (can be toggled in the GUI).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-print-graph&lt;/code&gt; to print the scene graph into the output log on startup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-width&lt;/code&gt; and &lt;code&gt;-height&lt;/code&gt; to set the window size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;FileName&amp;gt;&lt;/code&gt; to load any supported model or scene from the given file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We are working on more detailed SDK developer documentation - watch this space!&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Path Tracing SDK is under active development. Please report any issues directly through GitHub issue tracker, and for any information, suggestions or general requests please feel free to contact us at &lt;a href=&#34;mailto:pathtracing-sdk-support@nvidia.com&#34;&gt;pathtracing-sdk-support@nvidia.com&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIAGameWorks/Path-Tracing-SDK/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>