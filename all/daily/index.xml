<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:30:31Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Code-Pop/Intro-to-Vue-3</title>
    <updated>2022-07-26T01:30:31Z</updated>
    <id>tag:github.com,2022-07-26:/Code-Pop/Intro-to-Vue-3</id>
    <link href="https://github.com/Code-Pop/Intro-to-Vue-3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for Vue Mastery&#39;s Intro to Vue 3 course:&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>BetaSu/big-react</title>
    <updated>2022-07-26T01:30:31Z</updated>
    <id>tag:github.com,2022-07-26:/BetaSu/big-react</id>
    <link href="https://github.com/BetaSu/big-react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;跟着我，从0实现React18&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Big-React&lt;/h1&gt; &#xA;&lt;p&gt;从零实现 React v18 的核心功能，特点如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;👬 与 React 源码最接近的极简实现&lt;/li&gt; &#xA; &lt;li&gt;💪 虽然实现极简，但功能完备，当前可跑通官方测试用例数量：25&lt;/li&gt; &#xA; &lt;li&gt;🚶 按&lt;code&gt;Git Tag&lt;/code&gt;划分迭代步骤，记录从 0 实现的每个功能&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO List&lt;/h2&gt; &#xA;&lt;h3&gt;工程类需求&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;内容&lt;/th&gt; &#xA;   &lt;th&gt;完成情况&lt;/th&gt; &#xA;   &lt;th&gt;在哪个版本实现的&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;架构&lt;/td&gt; &#xA;   &lt;td&gt;monorepo（pnpm 实现）&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;eslint&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;prettier&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;commitlint + husky&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;lint-staged&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;tsc&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;测试&lt;/td&gt; &#xA;   &lt;td&gt;jest 环境搭建&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;tsc&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建&lt;/td&gt; &#xA;   &lt;td&gt;babel 配置&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建&lt;/td&gt; &#xA;   &lt;td&gt;Dev 环境包的构建&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建&lt;/td&gt; &#xA;   &lt;td&gt;Prod 环境包的构建&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;部署&lt;/td&gt; &#xA;   &lt;td&gt;Github Action 执行 lint 与 test&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;部署&lt;/td&gt; &#xA;   &lt;td&gt;Github Action 根据 tag 发布 npm 包&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;框架需求&lt;/h3&gt; &#xA;&lt;p&gt;当前跑通 React 官方测试用例 17 个&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;内容&lt;/th&gt; &#xA;   &lt;th&gt;完成情况&lt;/th&gt; &#xA;   &lt;th&gt;在哪个版本实现的&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;JSX 转换&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;React.isValidElement&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的插入&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v2&#34;&gt;v2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的移动&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的属性变化&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的删除&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;ReactTestUtils&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactNoop&lt;/td&gt; &#xA;   &lt;td&gt;ReactNoop Renderer&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Fiber 架构&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;事件模型&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v6&#34;&gt;v6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;onClick 事件支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v6&#34;&gt;v6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;input 元素 onChange 事件支持&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Lane 模型&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;基础 Update 机制&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;带优先级的 Update 机制&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入单节点的 mount 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入多节点的 mount 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入单节点的 reconcile 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入多节点的 reconcile 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;删除节点的 reconcile 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;HostText 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v2&#34;&gt;v2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;HostComponent 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;HostRoot 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;FunctionComponent 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;Hooks 架构 mount 时实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;Hooks 架构 update 时实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useState 实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useEffect 实现&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useRef 实现&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Legacy 调度流程&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Concurrent 调度流程&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;异常处理流程&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useErrorBoundary 实现&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;调试&lt;/h2&gt; &#xA;&lt;p&gt;提供 3 种调试方式：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;实时调试&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;执行&lt;code&gt;pnpm demo&lt;/code&gt;会运行项目&lt;code&gt;demos&lt;/code&gt;目录下的示例项目（默认项目是针对&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;的调试项目）&lt;/p&gt; &#xA;&lt;p&gt;这种方式的好处是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;控制台会打印各个主要步骤的执行信息，可以直观看到执行流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;热更新（包括示例代码和源码代码）&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;pnpm link&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;通过&lt;code&gt;CRA&lt;/code&gt;或&lt;code&gt;Vite&lt;/code&gt;起一个&lt;code&gt;React&lt;/code&gt;测试项目后，在本项目执行&lt;code&gt;pnpm run build:dev&lt;/code&gt;打包&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;，在测试项目中通过&lt;code&gt;pnpm link&lt;/code&gt;将项目依赖的&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;替换为我们打包的&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;这种方式的好处是：最贴合项目中实际使用&lt;code&gt;React&lt;/code&gt;的情况&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;跑&lt;code&gt;React&lt;/code&gt;官方的测试用例&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;执行&lt;code&gt;pnpm test&lt;/code&gt;跑官方的测试用例，用例中引用的是执行&lt;code&gt;pnpm run build:dev&lt;/code&gt;打包的&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;这种方式的好处是：可以从官方用例的角度观察框架实现的细节、各种边界情况&lt;/p&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现了多节点 reconcile 流程（俗称的 Diff 算法），包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了 update 时 onClick 回调不更新的 bug&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插入多节点的 mount 流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插入多节点的 reconcile 流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;浏览器环境 DOM 的移动&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Diff 算法的测试用例还依赖 useEffect、useRef 的实现，放在后面再实现&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v6&#34;&gt;v6&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现事件系统，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;事件模型&lt;/li&gt; &#xA; &lt;li&gt;onClick 事件支持（以及 onClickCapture 事件）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现单节点 update，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;浏览器环境 DOM 的删除（比如 h3 变为 p，那么就要经历删除 h3、插入 p）&lt;/li&gt; &#xA; &lt;li&gt;插入单节点的 reconcile 流程（包括 HostComponent、HostText）&lt;/li&gt; &#xA; &lt;li&gt;删除节点的 reconcile 流程（为后续 ref、useEffect 特性做准备，实现的比较完备）&lt;/li&gt; &#xA; &lt;li&gt;Hooks 架构 update 时实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;初始化测试相关架构，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实现 React.isValidElement&lt;/li&gt; &#xA; &lt;li&gt;jest 环境搭建&lt;/li&gt; &#xA; &lt;li&gt;babel 配置&lt;/li&gt; &#xA; &lt;li&gt;ReactTestUtils&lt;/li&gt; &#xA; &lt;li&gt;跑通关于 jsx 的 17 个官方用例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现 useState 的 mount 时流程，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FunctionComponent 类型支持&lt;/li&gt; &#xA; &lt;li&gt;Hooks 架构 mount 时实现&lt;/li&gt; &#xA; &lt;li&gt;useState 实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v2&#34;&gt;v2&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;插入单节点的 mount 流程（可以在浏览器环境渲染 DOM），包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;浏览器环境 DOM 的插入&lt;/li&gt; &#xA; &lt;li&gt;HostText 类型支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;插入单节点的 render 阶段 mount 流程，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSX 转换&lt;/li&gt; &#xA; &lt;li&gt;Fiber 架构&lt;/li&gt; &#xA; &lt;li&gt;插入单节点的 reconcile 流程&lt;/li&gt; &#xA; &lt;li&gt;HostComponent 类型支持&lt;/li&gt; &#xA; &lt;li&gt;HostRoot 类型支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;注：还未实现浏览器环境下的渲染&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>crystal-lang/crystal</title>
    <updated>2022-07-26T01:30:31Z</updated>
    <id>tag:github.com,2022-07-26:/crystal-lang/crystal</id>
    <link href="https://github.com/crystal-lang/crystal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Crystal Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Crystal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/crystal-lang/crystal/actions?query=workflow%3A%22Linux+CI%22+event%3Apush+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/crystal-lang/crystal/workflows/Linux%20CI/badge.svg?sanitize=true&#34; alt=&#34;Linux CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/crystal-lang/crystal/actions?query=workflow%3A%22macOS+CI%22+event%3Apush+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/crystal-lang/crystal/workflows/macOS%20CI/badge.svg?sanitize=true&#34; alt=&#34;macOS CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/crystal-lang/crystal/actions?query=workflow%3A%22AArch64+CI%22+event%3Apush+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/crystal-lang/crystal/workflows/AArch64%20CI/badge.svg?sanitize=true&#34; alt=&#34;AArch64 CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/crystal-lang/crystal/actions?query=workflow%3A%22Windows+CI%22+event%3Apush+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/crystal-lang/crystal/workflows/Windows%20CI/badge.svg?sanitize=true&#34; alt=&#34;Windows CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/crystal-lang/crystal&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/crystal-lang/crystal/tree/master.svg?style=shield&#34; alt=&#34;CircleCI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/crystal-lang/crystal&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/crystal-lang/crystal.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/crystal-lang/crystal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/crystal-lang/crystal&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/crystal-lang/crystal/badges/users.svg?sanitize=true&#34; alt=&#34;Code Triagers Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://manas.tech/&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/209371/13291809/022e2360-daf8-11e5-8be7-d02c1c8b38fb.png&#34; alt=&#34;Crystal - Born and raised at Manas&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Crystal is a programming language with the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have a syntax similar to Ruby (but compatibility with it is not a goal)&lt;/li&gt; &#xA; &lt;li&gt;Statically type-checked but without having to specify the type of variables or method arguments.&lt;/li&gt; &#xA; &lt;li&gt;Be able to call C code by writing bindings to it in Crystal.&lt;/li&gt; &#xA; &lt;li&gt;Have compile-time evaluation and generation of code, to avoid boilerplate code.&lt;/li&gt; &#xA; &lt;li&gt;Compile to efficient native code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;We love Ruby&#39;s efficiency for writing code.&lt;/p&gt; &#xA;&lt;p&gt;We love C&#39;s efficiency for running code.&lt;/p&gt; &#xA;&lt;p&gt;We want the best of both worlds.&lt;/p&gt; &#xA;&lt;p&gt;We want the compiler to understand what we mean without having to specify types everywhere.&lt;/p&gt; &#xA;&lt;p&gt;We want full OOP.&lt;/p&gt; &#xA;&lt;p&gt;Oh, and we don&#39;t want to write C code to make the code run faster.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;Within a major version, language features won&#39;t be removed or changed in any way that could prevent a Crystal program written with that version from compiling and working. The built-in standard library might be enriched, but it will always be done with backwards compatibility in mind.&lt;/p&gt; &#xA;&lt;p&gt;Development of the Crystal language is possible thanks to the community&#39;s effort and the continued support of &lt;a href=&#34;https://www.84codes.com/&#34;&gt;84codes&lt;/a&gt;, &lt;a href=&#34;https://nikolamotor.com/&#34;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&#34;https://crystal-lang.org/sponsors&#34;&gt;sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crystal-lang.org/install&#34;&gt;Follow these installation instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Try it online&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.crystal-lang.org/&#34;&gt;play.crystal-lang.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://crystal-lang.org/reference&#34;&gt;Language Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crystal-lang.org/api&#34;&gt;Standard library API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crystal-lang/crystal/wiki/Roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Have any questions or suggestions? Ask on the &lt;a href=&#34;https://forum.crystal-lang.org&#34;&gt;Crystal Forum&lt;/a&gt;, on our &lt;a href=&#34;https://gitter.im/crystal-lang/crystal&#34;&gt;Gitter channel&lt;/a&gt; or IRC channel &lt;a href=&#34;https://web.libera.chat/#crystal-lang&#34;&gt;#crystal-lang&lt;/a&gt; at irc.libera.chat, or on Stack Overflow under the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/crystal-lang&#34;&gt;crystal-lang&lt;/a&gt; tag. There is also an archived &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/crystal-lang&#34;&gt;Google Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The Crystal repository is hosted at &lt;a href=&#34;https://github.com/crystal-lang/crystal&#34;&gt;crystal-lang/crystal&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Read the general &lt;a href=&#34;https://github.com/crystal-lang/crystal/raw/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;, and then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it (&lt;a href=&#34;https://github.com/crystal-lang/crystal/fork&#34;&gt;https://github.com/crystal-lang/crystal/fork&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>