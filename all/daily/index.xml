<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:26:35Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stitionai/devika</title>
    <updated>2024-03-24T01:26:35Z</updated>
    <id>tag:github.com,2024-03-24:/stitionai/devika</id>
    <link href="https://github.com/stitionai/devika" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Devika is an Agentic AI Software Engineer that can understand high-level human instructions, break them down into steps, research relevant information, and write code to achieve the given objective. Devika aims to be a competitive open-source alternative to Devin by Cognition AI.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stitionai/devika/main/.assets/devika-avatar.png&#34; alt=&#34;Devika Logo&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;üöÄ Devika - Agentic AI Software Engineer üë©‚Äçüíª&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stitionai/devika/main/.assets/devika-screenshot.png&#34; alt=&#34;devika screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; This project is currently in a very early development/experimental stage. There are a lot of unimplemented/broken features at the moment. Contributions are welcome to help out with the progress!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#system-architecture&#34;&gt;System Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#under-the-hood&#34;&gt;Under The Hood&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#ai-planning-and-reasoning&#34;&gt;AI Planning and Reasoning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#keyword-extraction&#34;&gt;Keyword Extraction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#browser-interaction&#34;&gt;Browser Interaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#code-writing&#34;&gt;Code Writing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#community-discord-server&#34;&gt;Community Discord Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Devika is an advanced AI software engineer that can understand high-level human instructions, break them down into steps, research relevant information, and write code to achieve the given objective. Devika utilizes large language models, planning and reasoning algorithms, and web browsing abilities to intelligently develop software.&lt;/p&gt; &#xA;&lt;p&gt;Devika aims to revolutionize the way we build software by providing an AI pair programmer who can take on complex coding tasks with minimal human guidance. Whether you need to create a new feature, fix a bug, or develop an entire project from scratch, Devika is here to assist you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Devika is modeled after &lt;a href=&#34;https://www.cognition-labs.com/introducing-devin&#34;&gt;Devin&lt;/a&gt; by Cognition AI. This project aims to be an open-source alternative to Devin with an &#34;overly ambitious&#34; goal to meet the same score as Devin in the &lt;a href=&#34;https://www.swebench.com/&#34;&gt;SWE-bench&lt;/a&gt; Benchmarks... and eventually beat it?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stitionai/devika/assets/26198477/cfed6945-d53b-4189-9fbe-669690204206&#34;&gt;https://github.com/stitionai/devika/assets/26198477/cfed6945-d53b-4189-9fbe-669690204206&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü§ñ Supports &lt;strong&gt;Claude 3&lt;/strong&gt;, &lt;strong&gt;GPT-4&lt;/strong&gt;, &lt;strong&gt;GPT-3.5&lt;/strong&gt;, and &lt;strong&gt;Local LLMs&lt;/strong&gt; via &lt;a href=&#34;https://ollama.com&#34;&gt;Ollama&lt;/a&gt;. For optimal performance: Use the &lt;strong&gt;Claude 3&lt;/strong&gt; family of models.&lt;/li&gt; &#xA; &lt;li&gt;üß† Advanced AI planning and reasoning capabilities&lt;/li&gt; &#xA; &lt;li&gt;üîç Contextual keyword extraction for focused research&lt;/li&gt; &#xA; &lt;li&gt;üåê Seamless web browsing and information gathering&lt;/li&gt; &#xA; &lt;li&gt;üíª Code writing in multiple programming languages&lt;/li&gt; &#xA; &lt;li&gt;üìä Dynamic agent state tracking and visualization&lt;/li&gt; &#xA; &lt;li&gt;üí¨ Natural language interaction via chat interface&lt;/li&gt; &#xA; &lt;li&gt;üìÇ Project-based organization and management&lt;/li&gt; &#xA; &lt;li&gt;üîå Extensible architecture for adding new features and integrations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Devika&#39;s system architecture consists of the following key components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: A web-based chat interface for interacting with Devika, viewing project files, and monitoring the agent&#39;s state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agent Core&lt;/strong&gt;: The central component that orchestrates the AI planning, reasoning, and execution process. It communicates with various sub-agents and modules to accomplish tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Large Language Models&lt;/strong&gt;: Devika leverages state-of-the-art language models like &lt;strong&gt;Claude&lt;/strong&gt;, &lt;strong&gt;GPT-4&lt;/strong&gt;, and &lt;strong&gt;Local LLMs via Ollama&lt;/strong&gt; for natural language understanding, generation, and reasoning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Planning and Reasoning Engine&lt;/strong&gt;: Responsible for breaking down high-level objectives into actionable steps and making decisions based on the current context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Research Module&lt;/strong&gt;: Utilizes keyword extraction and web browsing capabilities to gather relevant information for the task at hand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Writing Module&lt;/strong&gt;: Generates code based on the plan, research findings, and user requirements. Supports multiple programming languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Browser Interaction Module&lt;/strong&gt;: Enables Devika to navigate websites, extract information, and interact with web elements as needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Knowledge Base&lt;/strong&gt;: Stores and retrieves project-specific information, code snippets, and learned knowledge for efficient access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: Persists project data, agent states, and configuration settings.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://github.com/stitionai/devika/raw/main/ARCHITECTURE.md&#34;&gt;&lt;strong&gt;ARCHITECTURE.md&lt;/strong&gt;&lt;/a&gt; for the detailed documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to run the project locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt; - Python Package manager (&lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;https://github.com/astral-sh/uv&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;bun&lt;/code&gt; - JavaScript runtime (&lt;a href=&#34;https://bun.sh/&#34;&gt;https://bun.sh/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install and setup &lt;code&gt;Ollama&lt;/code&gt; (&lt;a href=&#34;https://ollama.com/&#34;&gt;https://ollama.com/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Set the API Keys in the &lt;code&gt;config.toml&lt;/code&gt; file. (This will soon be moving to the UI where you can set these keys from the UI itself without touching the command-line, want to implement it? See this issue: &lt;a href=&#34;https://github.com/stitionai/devika/issues/3&#34;&gt;https://github.com/stitionai/devika/issues/3&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Then execute the following set of command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ollama serve&#xA;git clone https://github.com/stitionai/devika.git&#xA;cd devika/&#xA;uv venv&#xA;uv pip install -r requirements.txt&#xA;cd ui/&#xA;bun install&#xA;bun run dev&#xA;python3 devika.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker images will be released soon. &lt;span&gt;üôå&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Devika requires the following things as dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ollama (follow the instructions here to install it: &lt;a href=&#34;https://ollama.com/&#34;&gt;https://ollama.com/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bun (follow the instructions here to install it: &lt;a href=&#34;https://bun.sh/&#34;&gt;https://bun.sh/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install Devika, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the Devika repository: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/stitionai/devika.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to the project directory: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd devika&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the required dependencies: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;playwright install --with-deps # installs browsers in playwright (and their deps) if required&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set up the necessary API keys and configuration (see &lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section).&lt;/li&gt; &#xA; &lt;li&gt;Start the Devika server: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python devika.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compile and run the UI server: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ui/&#xA;bun install&#xA;bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access the Devika web interface by opening a browser and navigating to &lt;code&gt;http://127.0.0.1:3000&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To start using Devika, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Devika web interface in your browser.&lt;/li&gt; &#xA; &lt;li&gt;Create a new project by clicking on the &#34;New Project&#34; button and providing a name for your project.&lt;/li&gt; &#xA; &lt;li&gt;Select the desired programming language and model configuration for your project.&lt;/li&gt; &#xA; &lt;li&gt;In the chat interface, provide a high-level objective or task description for Devika to work on.&lt;/li&gt; &#xA; &lt;li&gt;Devika will process your request, break it down into steps, and start working on the task.&lt;/li&gt; &#xA; &lt;li&gt;Monitor Devika&#39;s progress, view generated code, and provide additional guidance or feedback as needed.&lt;/li&gt; &#xA; &lt;li&gt;Once Devika completes the task, review the generated code and project files.&lt;/li&gt; &#xA; &lt;li&gt;Iterate and refine the project as desired by providing further instructions or modifications.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Devika requires certain configuration settings and API keys to function properly. Update the &lt;code&gt;config.toml&lt;/code&gt; file with the following information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;: Your OpenAI API key for accessing GPT models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLAUDE_API_KEY&lt;/code&gt;: Your Anthropic API key for accessing Claude models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BING_API_KEY&lt;/code&gt;: Your Bing Search API key for web searching capabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt;: The URL for your database connection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_DIRECTORY&lt;/code&gt;: The directory where Devika&#39;s logs will be stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PROJECT_DIRECTORY&lt;/code&gt;: The directory where Devika&#39;s projects will be stored.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure to keep your API keys secure and do not share them publicly.&lt;/p&gt; &#xA;&lt;h2&gt;Under The Hood&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s dive deeper into some of the key components and techniques used in Devika:&lt;/p&gt; &#xA;&lt;h3&gt;AI Planning and Reasoning&lt;/h3&gt; &#xA;&lt;p&gt;Devika employs advanced AI planning and reasoning algorithms to break down high-level objectives into actionable steps. The planning process involves the following stages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objective Understanding&lt;/strong&gt;: Devika analyzes the given objective or task description to understand the user&#39;s intent and requirements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Context Gathering&lt;/strong&gt;: Relevant context is collected from the conversation history, project files, and knowledge base to inform the planning process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step Generation&lt;/strong&gt;: Based on the objective and context, Devika generates a sequence of high-level steps to accomplish the task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Refinement and Validation&lt;/strong&gt;: The generated steps are refined and validated to ensure their feasibility and alignment with the objective.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution&lt;/strong&gt;: Devika executes each step in the plan, utilizing various sub-agents and modules as needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The reasoning engine constantly evaluates the progress and makes adjustments to the plan based on new information or feedback received during execution.&lt;/p&gt; &#xA;&lt;h3&gt;Keyword Extraction&lt;/h3&gt; &#xA;&lt;p&gt;To enable focused research and information gathering, Devika employs keyword extraction techniques. The process involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;: The input text (objective, conversation history, or project files) is preprocessed by removing stop words, tokenizing, and normalizing the text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyword Identification&lt;/strong&gt;: Devika uses the BERT (Bidirectional Encoder Representations from Transformers) model to identify important keywords and phrases from the preprocessed text. BERT&#39;s pre-training on a large corpus allows it to capture semantic relationships and understand the significance of words in the given context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyword Ranking&lt;/strong&gt;: The identified keywords are ranked based on their relevance and importance to the task at hand. Techniques like TF-IDF (Term Frequency-Inverse Document Frequency) and TextRank are used to assign scores to each keyword.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyword Selection&lt;/strong&gt;: The top-ranked keywords are selected as the most relevant and informative for the current context. These keywords are used to guide the research and information gathering process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By extracting contextually relevant keywords, Devika can focus its research efforts and retrieve pertinent information to assist in the task completion.&lt;/p&gt; &#xA;&lt;h3&gt;Browser Interaction&lt;/h3&gt; &#xA;&lt;p&gt;Devika incorporates browser interaction capabilities to navigate websites, extract information, and interact with web elements. The browser interaction module leverages the Playwright library to automate web interactions. The process involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Navigation&lt;/strong&gt;: Devika uses Playwright to navigate to specific URLs or perform searches based on the keywords or requirements provided.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Element Interaction&lt;/strong&gt;: Playwright allows Devika to interact with web elements such as clicking buttons, filling forms, and extracting text from specific elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Page Parsing&lt;/strong&gt;: Devika parses the HTML structure of the web pages visited to extract relevant information. It uses techniques like CSS selectors and XPath to locate and extract specific data points.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JavaScript Execution&lt;/strong&gt;: Playwright enables Devika to execute JavaScript code within the browser context, allowing for dynamic interactions and data retrieval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Screenshot Capture&lt;/strong&gt;: Devika can capture screenshots of the web pages visited, which can be useful for visual reference or debugging purposes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The browser interaction module empowers Devika to gather information from the web, interact with online resources, and incorporate real-time data into its decision-making and code generation processes.&lt;/p&gt; &#xA;&lt;h3&gt;Code Writing&lt;/h3&gt; &#xA;&lt;p&gt;Devika&#39;s code writing module generates code based on the plan, research findings, and user requirements. The process involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Language Selection&lt;/strong&gt;: Devika identifies the programming language specified by the user or infers it based on the project context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Structure Generation&lt;/strong&gt;: Based on the plan and language-specific patterns, Devika generates the high-level structure of the code, including classes, functions, and modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Population&lt;/strong&gt;: Devika fills in the code structure with specific logic, algorithms, and data manipulation statements. It leverages the research findings, code snippets from the knowledge base, and its own understanding of programming concepts to generate meaningful code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Formatting&lt;/strong&gt;: The generated code is formatted according to the language-specific conventions and best practices to ensure readability and maintainability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Review and Refinement&lt;/strong&gt;: Devika reviews the generated code for syntax errors, logical inconsistencies, and potential improvements. It iteratively refines the code based on its own analysis and any feedback provided by the user.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Devika&#39;s code writing capabilities enable it to generate functional and efficient code in various programming languages, taking into account the specific requirements and context of each project.&lt;/p&gt; &#xA;&lt;h1&gt;Community Discord Server&lt;/h1&gt; &#xA;&lt;p&gt;We have a Discord server for the Devika community, where you can connect with other users, share your experiences, ask questions, and collaborate on the project. To join the server, please follow these guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be respectful: Treat all members of the community with kindness and respect. Harassment, hate speech, and other forms of inappropriate behavior will not be tolerated.&lt;/li&gt; &#xA; &lt;li&gt;Contribute positively: Share your ideas, insights, and feedback to help improve Devika. Offer assistance to other community members when possible.&lt;/li&gt; &#xA; &lt;li&gt;Maintain privacy: Respect the privacy of others and do not share personal information without their consent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To join the Devika community Discord server, &lt;a href=&#34;https://discord.com/invite/8eYNbPuB&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to enhance Devika&#39;s capabilities and improve its performance. To contribute, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Devika repository on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your feature or bug fix.&lt;/li&gt; &#xA; &lt;li&gt;Make your changes and ensure that the code passes all tests.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request describing your changes and their benefits.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please adhere to the coding conventions, maintain clear documentation, and provide thorough testing for your contributions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Devika is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We hope you find Devika to be a valuable tool in your software development journey. If you have any questions, feedback, or suggestions, please don&#39;t hesitate to reach out. Happy coding with Devika!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenInterpreter/open-interpreter</title>
    <updated>2024-03-24T01:26:35Z</updated>
    <id>tag:github.com,2024-03-24:/OpenInterpreter/open-interpreter</id>
    <link href="https://github.com/OpenInterpreter/open-interpreter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A natural language interface for computers&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;‚óè Open Interpreter&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/Hvz9Axh84z&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1146610656779440188?logo=discord&amp;amp;style=flat&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/open-interpreter/main/docs/README_JA.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/„Éâ„Ç≠„É•„É°„É≥„Éà-Êó•Êú¨Ë™û-white.svg&#34; alt=&#34;JA doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/open-interpreter/main/docs/README_ZH.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ÊñáÊ°£-‰∏≠ÊñáÁâà-white.svg&#34; alt=&#34;ZH doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/open-interpreter/main/docs/README_IN.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Hindi-white.svg?sanitize=true&#34; alt=&#34;IN doc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=AGPL&amp;amp;color=white&amp;amp;style=flat&#34; alt=&#34;License&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;strong&gt;Today we launched a new computer (the 01) with Open Interpreter at the center. &lt;a href=&#34;https://github.com/OpenInterpreter/01&#34;&gt;Star the repo ‚Üí&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;br&gt;&lt;a href=&#34;https://openinterpreter.com&#34;&gt;Get early access to the desktop app&lt;/a&gt;‚Äé ‚Äé |‚Äé ‚Äé &lt;a href=&#34;https://docs.openinterpreter.com/&#34;&gt;Documentation&lt;/a&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/KillianLucas/open-interpreter/assets/63927363/08f0d493-956b-4d49-982e-67d4b20c4b56&#34; alt=&#34;poster&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!--&lt;p align=&#34;center&#34;&gt;&#xA;&lt;strong&gt;The New Computer Update&lt;/strong&gt; introduces &lt;strong&gt;&lt;code&gt;--os&lt;/code&gt;&lt;/strong&gt; and a new &lt;strong&gt;Computer API&lt;/strong&gt;. &lt;a href=&#34;https://changes.openinterpreter.com/log/the-new-computer-update&#34;&gt;Read On ‚Üí&lt;/a&gt;&#xA;&lt;/p&gt;--&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install open-interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not working? Read our &lt;a href=&#34;https://docs.openinterpreter.com/getting-started/setup&#34;&gt;setup guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open Interpreter&lt;/strong&gt; lets LLMs run code (Python, Javascript, Shell, and more) locally. You can chat with Open Interpreter through a ChatGPT-like interface in your terminal by running &lt;code&gt;$ interpreter&lt;/code&gt; after installing.&lt;/p&gt; &#xA;&lt;p&gt;This provides a natural-language interface to your computer&#39;s general-purpose capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and edit photos, videos, PDFs, etc.&lt;/li&gt; &#xA; &lt;li&gt;Control a Chrome browser to perform research&lt;/li&gt; &#xA; &lt;li&gt;Plot, clean, and analyze large datasets&lt;/li&gt; &#xA; &lt;li&gt;...etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Note: You&#39;ll be asked to approve code before it&#39;s run.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/KillianLucas/open-interpreter/assets/63927363/37152071-680d-4423-9af3-64836a6f7b60&#34;&gt;https://github.com/KillianLucas/open-interpreter/assets/63927363/37152071-680d-4423-9af3-64836a6f7b60&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;An interactive demo is also available on Google Colab:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1WKmRXZgsErej2xUriKzxrEAXdxMSgWbb?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Along with an example voice interface, inspired by &lt;em&gt;Her&lt;/em&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1NojYGHDgxH6Y1G1oxThEBBb2AtyODBIK&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install open-interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal&lt;/h3&gt; &#xA;&lt;p&gt;After installation, simply run &lt;code&gt;interpreter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from interpreter import interpreter&#xA;&#xA;interpreter.chat(&#34;Plot AAPL and META&#39;s normalized stock prices&#34;) # Executes a single command&#xA;interpreter.chat() # Starts an interactive chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comparison to ChatGPT&#39;s Code Interpreter&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI&#39;s release of &lt;a href=&#34;https://openai.com/blog/chatgpt-plugins#code-interpreter&#34;&gt;Code Interpreter&lt;/a&gt; with GPT-4 presents a fantastic opportunity to accomplish real-world tasks with ChatGPT.&lt;/p&gt; &#xA;&lt;p&gt;However, OpenAI&#39;s service is hosted, closed-source, and heavily restricted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No internet access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wfhbrian.com/mastering-chatgpts-code-interpreter-list-of-python-packages/&#34;&gt;Limited set of pre-installed packages&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;100 MB maximum upload, 120.0 second runtime limit.&lt;/li&gt; &#xA; &lt;li&gt;State is cleared (along with any generated files or links) when the environment dies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Open Interpreter overcomes these limitations by running in your local environment. It has full access to the internet, isn&#39;t restricted by time or file size, and can utilize any package or library.&lt;/p&gt; &#xA;&lt;p&gt;This combines the power of GPT-4&#39;s Code Interpreter with the flexibility of your local development environment.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The Generator Update (0.1.5) introduced streaming:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;message = &#34;What operating system are we on?&#34;&#xA;&#xA;for chunk in interpreter.chat(message, display=False, stream=True):&#xA;  print(chunk)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interactive Chat&lt;/h3&gt; &#xA;&lt;p&gt;To start an interactive chat in your terminal, either run &lt;code&gt;interpreter&lt;/code&gt; from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or &lt;code&gt;interpreter.chat()&lt;/code&gt; from a .py file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.chat()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also stream each chunk:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;message = &#34;What operating system are we on?&#34;&#xA;&#xA;for chunk in interpreter.chat(message, display=False, stream=True):&#xA;  print(chunk)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Programmatic Chat&lt;/h3&gt; &#xA;&lt;p&gt;For more precise control, you can pass messages directly to &lt;code&gt;.chat(message)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.chat(&#34;Add subtitles to all videos in /videos.&#34;)&#xA;&#xA;# ... Streams output to your terminal, completes task ...&#xA;&#xA;interpreter.chat(&#34;These look great but can you make the subtitles bigger?&#34;)&#xA;&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start a New Chat&lt;/h3&gt; &#xA;&lt;p&gt;In Python, Open Interpreter remembers conversation history. If you want to start fresh, you can reset it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.messages = []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Save and Restore Chats&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;interpreter.chat()&lt;/code&gt; returns a List of messages, which can be used to resume a conversation with &lt;code&gt;interpreter.messages = messages&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;messages = interpreter.chat(&#34;My name is Killian.&#34;) # Save messages to &#39;messages&#39;&#xA;interpreter.messages = [] # Reset interpreter (&#34;Killian&#34; will be forgotten)&#xA;&#xA;interpreter.messages = messages # Resume chat from &#39;messages&#39; (&#34;Killian&#34; will be remembered)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize System Message&lt;/h3&gt; &#xA;&lt;p&gt;You can inspect and configure Open Interpreter&#39;s system message to extend its functionality, modify permissions, or give it more context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.system_message += &#34;&#34;&#34;&#xA;Run shell commands with -y so the user doesn&#39;t have to confirm them.&#xA;&#34;&#34;&#34;&#xA;print(interpreter.system_message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change your Language Model&lt;/h3&gt; &#xA;&lt;p&gt;Open Interpreter uses &lt;a href=&#34;https://docs.litellm.ai/docs/providers/&#34;&gt;LiteLLM&lt;/a&gt; to connect to hosted language models.&lt;/p&gt; &#xA;&lt;p&gt;You can change the model by setting the model parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter --model gpt-3.5-turbo&#xA;interpreter --model claude-2&#xA;interpreter --model command-nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Python, set the model on the object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interpreter.llm.model = &#34;gpt-3.5-turbo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/&#34;&gt;Find the appropriate &#34;model&#34; string for your language model here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running Open Interpreter locally&lt;/h3&gt; &#xA;&lt;h4&gt;Terminal&lt;/h4&gt; &#xA;&lt;p&gt;Open Interpreter can use OpenAI-compatible server to run models locally. (LM Studio, jan.ai, ollama etc)&lt;/p&gt; &#xA;&lt;p&gt;Simply run &lt;code&gt;interpreter&lt;/code&gt; with the api_base URL of your inference server (for LM studio it is &lt;code&gt;http://localhost:1234/v1&lt;/code&gt; by default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter --api_base &#34;http://localhost:1234/v1&#34; --api_key &#34;fake_key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can use Llamafile without installing any third party software just by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter --local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for a more detailed guide check out &lt;a href=&#34;https://www.youtube.com/watch?v=CEs51hGWuGU?si=cN7f6QhfT4edfG5H&#34;&gt;this video by Mike Bird&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to run LM Studio in the background.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://lmstudio.ai/&#34;&gt;https://lmstudio.ai/&lt;/a&gt; then start it.&lt;/li&gt; &#xA; &lt;li&gt;Select a model then click &lt;strong&gt;‚Üì Download&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;strong&gt;‚ÜîÔ∏è&lt;/strong&gt; button on the left (below üí¨).&lt;/li&gt; &#xA; &lt;li&gt;Select your model at the top, then click &lt;strong&gt;Start Server&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once the server is running, you can begin your conversation with Open Interpreter.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Local mode sets your &lt;code&gt;context_window&lt;/code&gt; to 3000, and your &lt;code&gt;max_tokens&lt;/code&gt; to 1000. If your model has different requirements, set these parameters manually (see below).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;p&gt;Our Python package gives you more control over each setting. To replicate and connect to LM Studio, use these settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from interpreter import interpreter&#xA;&#xA;interpreter.offline = True # Disables online features like Open Procedures&#xA;interpreter.llm.model = &#34;openai/x&#34; # Tells OI to send messages in OpenAI&#39;s format&#xA;interpreter.llm.api_key = &#34;fake_key&#34; # LiteLLM, which we use to talk to LM Studio, requires this&#xA;interpreter.llm.api_base = &#34;http://localhost:1234/v1&#34; # Point this at any OpenAI compatible server&#xA;&#xA;interpreter.chat()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Context Window, Max Tokens&lt;/h4&gt; &#xA;&lt;p&gt;You can modify the &lt;code&gt;max_tokens&lt;/code&gt; and &lt;code&gt;context_window&lt;/code&gt; (in tokens) of locally running models.&lt;/p&gt; &#xA;&lt;p&gt;For local mode, smaller context windows will use less RAM, so we recommend trying a much shorter window (~1000) if it&#39;s failing / if it&#39;s slow. Make sure &lt;code&gt;max_tokens&lt;/code&gt; is less than &lt;code&gt;context_window&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;interpreter --local --max_tokens 1000 --context_window 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verbose mode&lt;/h3&gt; &#xA;&lt;p&gt;To help you inspect Open Interpreter we have a &lt;code&gt;--verbose&lt;/code&gt; mode for debugging.&lt;/p&gt; &#xA;&lt;p&gt;You can activate verbose mode by using its flag (&lt;code&gt;interpreter --verbose&lt;/code&gt;), or mid-chat:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ interpreter&#xA;...&#xA;&amp;gt; %verbose true &amp;lt;- Turns on verbose mode&#xA;&#xA;&amp;gt; %verbose false &amp;lt;- Turns off verbose mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interactive Mode Commands&lt;/h3&gt; &#xA;&lt;p&gt;In the interactive mode, you can use the below commands to enhance your experience. Here&#39;s a list of available commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Available Commands:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%verbose [true/false]&lt;/code&gt;: Toggle verbose mode. Without arguments or with &lt;code&gt;true&lt;/code&gt; it enters verbose mode. With &lt;code&gt;false&lt;/code&gt; it exits verbose mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%reset&lt;/code&gt;: Resets the current session&#39;s conversation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%undo&lt;/code&gt;: Removes the previous user message and the AI&#39;s response from the message history.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%tokens [prompt]&lt;/code&gt;: (&lt;em&gt;Experimental&lt;/em&gt;) Calculate the tokens that will be sent with the next prompt as context and estimate their cost. Optionally calculate the tokens and estimated cost of a &lt;code&gt;prompt&lt;/code&gt; if one is provided. Relies on &lt;a href=&#34;https://docs.litellm.ai/docs/completion/token_usage#2-cost_per_token&#34;&gt;LiteLLM&#39;s &lt;code&gt;cost_per_token()&lt;/code&gt; method&lt;/a&gt; for estimated costs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%help&lt;/code&gt;: Show the help message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration / Profiles&lt;/h3&gt; &#xA;&lt;p&gt;Open Interpreter allows you to set default behaviors using &lt;code&gt;yaml&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;This provides a flexible way to configure the interpreter without changing command-line arguments every time.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to open the profiles directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;interpreter --profiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add &lt;code&gt;yaml&lt;/code&gt; files there. The default profile is named &lt;code&gt;default.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Multiple Profiles&lt;/h4&gt; &#xA;&lt;p&gt;Open Interpreter supports multiple &lt;code&gt;yaml&lt;/code&gt; files, allowing you to easily switch between configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;interpreter --profile my_profile.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample FastAPI Server&lt;/h2&gt; &#xA;&lt;p&gt;The generator update enables Open Interpreter to be controlled via HTTP REST endpoints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;&#xA;from fastapi import FastAPI&#xA;from fastapi.responses import StreamingResponse&#xA;from interpreter import interpreter&#xA;&#xA;app = FastAPI()&#xA;&#xA;@app.get(&#34;/chat&#34;)&#xA;def chat_endpoint(message: str):&#xA;    def event_stream():&#xA;        for result in interpreter.chat(message, stream=True):&#xA;            yield f&#34;data: {result}\n\n&#34;&#xA;&#xA;    return StreamingResponse(event_stream(), media_type=&#34;text/event-stream&#34;)&#xA;&#xA;@app.get(&#34;/history&#34;)&#xA;def history_endpoint():&#xA;    return interpreter.messages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install fastapi uvicorn&#xA;uvicorn server:app --reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also start a server identical to the one above by simply running &lt;code&gt;interpreter.server()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;The step-by-step guide for installing Open Interpreter on your Android device can be found in the &lt;a href=&#34;https://github.com/MikeBirdTech/open-interpreter-termux&#34;&gt;open-interpreter-termux repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Safety Notice&lt;/h2&gt; &#xA;&lt;p&gt;Since generated code is executed in your local environment, it can interact with your files and system settings, potentially leading to unexpected outcomes like data loss or security risks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Open Interpreter will ask for user confirmation before executing code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;interpreter -y&lt;/code&gt; or set &lt;code&gt;interpreter.auto_run = True&lt;/code&gt; to bypass this confirmation, in which case:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be cautious when requesting commands that modify files or system settings.&lt;/li&gt; &#xA; &lt;li&gt;Watch Open Interpreter like a self-driving car, and be prepared to end the process by closing your terminal.&lt;/li&gt; &#xA; &lt;li&gt;Consider running Open Interpreter in a restricted environment like Google Colab or Replit. These environments are more isolated, reducing the risks of executing arbitrary code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is &lt;strong&gt;experimental&lt;/strong&gt; support for a &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/open-interpreter/main/docs/SAFE_MODE.md&#34;&gt;safe mode&lt;/a&gt; to help mitigate some risks.&lt;/p&gt; &#xA;&lt;h2&gt;How Does it Work?&lt;/h2&gt; &#xA;&lt;p&gt;Open Interpreter equips a &lt;a href=&#34;https://platform.openai.com/docs/guides/gpt/function-calling&#34;&gt;function-calling language model&lt;/a&gt; with an &lt;code&gt;exec()&lt;/code&gt; function, which accepts a &lt;code&gt;language&lt;/code&gt; (like &#34;Python&#34; or &#34;JavaScript&#34;) and &lt;code&gt;code&lt;/code&gt; to run.&lt;/p&gt; &#xA;&lt;p&gt;We then stream the model&#39;s messages, code, and your system&#39;s outputs to the terminal as Markdown.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Thank you for your interest in contributing! We welcome involvement from the community.&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/OpenInterpreter/open-interpreter/main/docs/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for more details on how to get involved.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://github.com/KillianLucas/open-interpreter/raw/main/docs/ROADMAP.md&#34;&gt;our roadmap&lt;/a&gt; to preview the future of Open Interpreter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This software is not affiliated with OpenAI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/KillianLucas/open-interpreter/assets/63927363/1b19a5db-b486-41fd-a7a1-fe2028031686&#34; alt=&#34;thumbnail-ncu&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Having access to a junior programmer working at the speed of your fingertips ... can make new workflows effortless and efficient, as well as open the benefits of programming to new audiences.&lt;/p&gt; &#xA; &lt;p&gt;‚Äî &lt;em&gt;OpenAI&#39;s Code Interpreter Release&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>unit-mesh/auto-dev</title>
    <updated>2024-03-24T01:26:35Z</updated>
    <id>tag:github.com,2024-03-24:/unit-mesh/auto-dev</id>
    <link href="https://github.com/unit-mesh/auto-dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üßô‚ÄçAutoDev: The AI-powered coding wizard with multilingual support üåê, auto code generation üèóÔ∏è, and a helpful bug-slaying assistant üêû! Customizable prompts üé® and a magic Auto Dev/Testing/Document/Agent feature üß™ included! üöÄ&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/auto-dev/master/plugin/src/main/resources/META-INF/pluginIcon.svg?sanitize=true&#34; width=&#34;160px&#34; height=&#34;160px&#34; alt=&#34;logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;AutoDev&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/unit-mesh/auto-dev&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/unit-mesh/auto-dev/graph/badge.svg?token=5RzcndjFPx&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/unit-mesh/auto-dev/actions/workflows/build.yml&#34;&gt; &lt;img src=&#34;https://github.com/unit-mesh/auto-dev/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/21520-autodev&#34;&gt; &lt;img src=&#34;https://img.shields.io/jetbrains/plugin/v/21520-autodev.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/21520-autodev&#34;&gt; &lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/21520-autodev.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/unit-mesh/chocolate-factory&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/powered_by-chocolate_factory-blue?logo=kotlin&amp;amp;logoColor=fff&#34; alt=&#34;Powered By&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üßô‚ÄçAutoDev: The AI-powered coding wizard with multilingual support üåê, auto code generation üèóÔ∏è, and a helpful bug-slaying assistant üêû! Customizable prompts üé® and a magic Auto Dev/Testing/Document/Agent feature üß™ included! üöÄ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ide.unitmesh.cc/quick-start&#34;&gt;Quick Start ‚Üí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ide.unitmesh.cc/devins&#34;&gt;DevIns ‚Äî AI Agent language for AutoDevelopment ‚Üí&lt;/a&gt; which you can use follow syntax as bridges for Human-AI-IDE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/write:src/main/java/cc/unitmesh/Controller.java#L1-L12&#xA;&#xA;```java&#xA;public class Controller {&#xA;    public void method() {&#xA;        System.out.println(&#34;Hello, World!&#34;);&#xA;    }&#xA;}&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With built-in syntax highlighting and auto-completion, you can use DevIns as next-generation AI Agent language.&lt;/p&gt; &#xA;&lt;h2&gt;AutoDev Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Here is the AutoDev architecture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/auto-dev/master/docs/autodev-arch.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AutoDev Feature Overview&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/auto-dev/master/docs/autodev-overview.svg?sanitize=true&#34; width=&#34;100%&#34; height=&#34;100%&#34; alt=&#34;Overview&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Languages support: Java, Kotlin, JavaScript/TypeScript, Rust, Python, Golang, C/C++/OC, or others...&lt;/li&gt; &#xA; &lt;li&gt;Auto development mode. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AutoCRUD(Spring frameworkÔºâ. With DevTi Protocol (like &lt;code&gt;devti://story/github/1102&lt;/code&gt;) will auto generate Model-Controller-Service-Repository code.&lt;/li&gt; &#xA;   &lt;li&gt;AutoSQL. Context-aware SQL generation.&lt;/li&gt; &#xA;   &lt;li&gt;AutoPage (React). Context-aware Web Page generation.&lt;/li&gt; &#xA;   &lt;li&gt;AutoArkUI (Mobile UI framework). Auto generate HarmonyOS ArkUI code.&lt;/li&gt; &#xA;   &lt;li&gt;AutoTesting. create unit test intention, auto run unit test and try to fix test.&lt;/li&gt; &#xA;   &lt;li&gt;AutoDocument. Auto generate document.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Copilot mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AutoDev will help you find bug, explain code, trace exception, generate commits, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Pattern specific. Based on your code context like (Controller, Service &lt;code&gt;import&lt;/code&gt;), AutoDev will suggest the best code to you.&lt;/li&gt; &#xA;   &lt;li&gt;Related code. Based on recent file changes, AutoDev will call calculate similar chunk to generate the best code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Chat mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chat with AI.&lt;/li&gt; &#xA;   &lt;li&gt;Chat with selection code.&lt;/li&gt; &#xA;   &lt;li&gt;Chat with code context-aware (To be implemented).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Customize. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Custom specification of prompt. For example, Controller, Service, Repository, Model, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Custom intention action. You can add your own intention action.&lt;/li&gt; &#xA;   &lt;li&gt;Custom LLM Server. You can customize your LLM Server in &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;AutoDev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Custom Living documentation.&lt;/li&gt; &#xA;   &lt;li&gt;Team prompts. Customize your team prompts in codebase, and distribute to your team.&lt;/li&gt; &#xA;   &lt;li&gt;Custom AI Agent. You can integrate your own AI Agent into AutoDev.&lt;/li&gt; &#xA;   &lt;li&gt;Prompt override. You can override AutoDev&#39;s prompt in your codebase.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Infrastructure / DevOps &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CI/CD support. AutoDev will auto generate CI/CD config file.&lt;/li&gt; &#xA;   &lt;li&gt;Dockerfile support. AutoDev will auto generate Dockerfile.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DevIns language &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Executable AI Agent language.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in LLM Fine-tune &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-eval&#34;&gt;UnitEval&lt;/a&gt; evaluate llm result&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-gen&#34;&gt;UnitGen&lt;/a&gt; generate code-llm fine-tune data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AutoDev fine-tune models:&lt;/p&gt; &#xA;&lt;p&gt;download from &lt;a href=&#34;https://huggingface.co/unit-mesh&#34;&gt;HuggingFace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;model download (HuggingFace)&lt;/th&gt; &#xA;   &lt;th&gt;finetune Notebook&lt;/th&gt; &#xA;   &lt;th&gt;model download (OpenBayes)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DeepSeek 6.7B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/unit-mesh/autodev-coder&#34;&gt;AutoDev Coder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/auto-dev/master/finetunes/deepseek&#34;&gt;finetune.ipynb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openbayes.com/console/phodal/models/rCmer1KQSgp/9/overview&#34;&gt;AutoDev Coder&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Language Features&lt;/h2&gt; &#xA;&lt;h3&gt;Language Support&lt;/h3&gt; &#xA;&lt;p&gt;We follow &lt;a href=&#34;https://github.com/phodal/chapi&#34;&gt;Chapi&lt;/a&gt; AST analysis engine for language support tier.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;   &lt;th&gt;Java&lt;/th&gt; &#xA;   &lt;th&gt;Python&lt;/th&gt; &#xA;   &lt;th&gt;Go&lt;/th&gt; &#xA;   &lt;th&gt;Kotlin&lt;/th&gt; &#xA;   &lt;th&gt;JS/TS&lt;/th&gt; &#xA;   &lt;th&gt;C/C++&lt;/th&gt; &#xA;   &lt;th&gt;C#&lt;/th&gt; &#xA;   &lt;th&gt;Scala&lt;/th&gt; &#xA;   &lt;th&gt;Rust&lt;/th&gt; &#xA;   &lt;th&gt;ArkTS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chat Language Context&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Structure AST&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Doc Generation&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Precision Test Generation&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Precision Code Generation&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AutoCRUD&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;see in &lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/auto-dev/master/exts&#34;&gt;exts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;DevIns Language demo (Bilibili) - ‰∏≠Êñá&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12H4y1W7sE/&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/gVBTBdFV5hA/sddefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Video demo (YouTube) ‚Äî English&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/gVBTBdFV5hA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/gVBTBdFV5hA/sddefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Video demo (Bilibili) - ‰∏≠Êñá&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1yV4y1i74c/&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/gVBTBdFV5hA/sddefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thakkarparth007/copilot-explorer&#34;&gt;Copilot-Explorer&lt;/a&gt; Hacky repo to see what the Copilot extension sends to the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saschaschramm/github-copilot&#34;&gt;GitHub Copilot&lt;/a&gt; a small part of Copilot Performance logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mengjian-github/copilot-analysis&#34;&gt;Ëä±‰∫ÜÂ§ßÂçä‰∏™ÊúàÔºåÊàëÁªà‰∫éÈÄÜÂêëÂàÜÊûê‰∫ÜGithub Copilot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is using AutoDev?&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to add your company here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thoughtworks, a leading technology consultancy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatUI based on: &lt;a href=&#34;https://github.com/Cspeisman/chatgpt-intellij-plugin&#34;&gt;https://github.com/Cspeisman/chatgpt-intellij-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple target inspired by: &lt;a href=&#34;https://github.com/intellij-rust/intellij-rust&#34;&gt;https://github.com/intellij-rust/intellij-rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SimilarFile inspired by: JetBrains and GitHub Copilot&lt;/li&gt; &#xA; &lt;li&gt;DevIn Language refs on &lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/master/platform/markdown-utils&#34;&gt;JetBrains&#39; Markdown Util&lt;/a&gt;, which is licensed under the Apache 2.0 license.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Known License issues&lt;/strong&gt;: JetBrain plugin development is no walk in the park! Oops, we cheekily borrowed some code from the JetBrains Community version and the super cool JetBrains AI Assistant plugin in our codebase. But fret not, we are working our magic to clean it up diligently! üßô‚Äç‚ôÇÔ∏è‚ú®.&lt;/p&gt; &#xA;&lt;p&gt;Those codes will be removed in the future, you can check it in &lt;code&gt;src/main/kotlin/com/intellij/temporary&lt;/code&gt;, if you want to use this plugin in your company, please remove those codes to avoid any legal issues.&lt;/p&gt; &#xA;&lt;p&gt;This code is distributed under the MPL 2.0 license. See &lt;code&gt;LICENSE&lt;/code&gt; in this directory.&lt;/p&gt;</summary>
  </entry>
</feed>