<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-17T01:30:25Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minimaxir/simpleaichat</title>
    <updated>2023-07-17T01:30:25Z</updated>
    <id>tag:github.com,2023-07-17:/minimaxir/simpleaichat</id>
    <link href="https://github.com/minimaxir/simpleaichat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python package for easily interfacing with chat apps, with robust features and minimal code complexity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;simpleaichat&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;from simpleaichat import AIChat&#xA;&#xA;ai = AIChat(system=&#34;Write a fancy GitHub README based on the user-provided project name.&#34;)&#xA;ai(&#34;simpleaichat&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;simpleaichat is a Python package for easily interfacing with chat apps like ChatGPT and GPT-4 with robust features and minimal code complexity. This tool has many features optimized for working with ChatGPT as fast and as cheap as possible, but still much more capable of modern AI tricks than most implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and run chats with only a few lines of code!&lt;/li&gt; &#xA; &lt;li&gt;Optimized workflows which minimize the amount of tokens used, reducing costs and latency.&lt;/li&gt; &#xA; &lt;li&gt;Run multiple independent chats at once.&lt;/li&gt; &#xA; &lt;li&gt;Minimal codebase: no code dives to figure out what&#39;s going on under the hood needed!&lt;/li&gt; &#xA; &lt;li&gt;Chat streaming responses and the ability to use tools.&lt;/li&gt; &#xA; &lt;li&gt;Async support, including for streaming and tools.&lt;/li&gt; &#xA; &lt;li&gt;Ability to create more complex yet clear workflows if needed, such as Agents. (Demo soon!)&lt;/li&gt; &#xA; &lt;li&gt;Coming soon: more chat model support (PaLM, Claude)!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s some fun, hackable examples on how simpleaichat works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating a &lt;a href=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/examples/notebooks/simpleaichat_coding.ipynb&#34;&gt;Python coding assistant&lt;/a&gt; without any unnecessary accompanying output, allowing 5x faster generation at 1/3rd the cost. (&lt;a href=&#34;https://colab.research.google.com/github/minimaxir/simpleaichat/blob/main/examples/notebooks/simpleaichat_coding.ipynb&#34;&gt;Colab&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Allowing simpleaichat to &lt;a href=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/examples/notebooks/chatgpt_inline_tips.ipynb&#34;&gt;provide inline tips&lt;/a&gt; following ChatGPT usage guidelines. (&lt;a href=&#34;https://colab.research.google.com/github/minimaxir/simpleaichat/blob/main/examples/notebooks/chatgpt_inline_tips.ipynb&#34;&gt;Colab&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Async interface for &lt;a href=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/examples/notebooks/simpleaichat_async.ipynb&#34;&gt;conducting many chats&lt;/a&gt; in the time it takes to receive one AI message. (&lt;a href=&#34;https://colab.research.google.com/github/minimaxir/simpleaichat/blob/main/examples/notebooks/simpleaichat_async.ipynb&#34;&gt;Colab&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create your own Tabletop RPG (TTRPG) setting and campaign by using &lt;a href=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/examples/notebooks/schema_ttrpg.ipynb&#34;&gt;advanced structured data models&lt;/a&gt;. (&lt;a href=&#34;https://colab.research.google.com/github/minimaxir/simpleaichat/blob/main/examples/notebooks/schema_ttrpg.ipynb&#34;&gt;Colab&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;simpleaichat can be installed &lt;a href=&#34;https://pypi.org/project/simpleaichat/&#34;&gt;from PyPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install simpleaichat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick, Fun Demo&lt;/h2&gt; &#xA;&lt;p&gt;You can demo chat-apps very quickly with simpleaichat! First, you will need to get an OpenAI API key, and then with one line of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;from simpleaichat import AIChat&#xA;&#xA;AIChat(api_key=&#34;sk-...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And with that, you&#39;ll be thrust directly into an interactive chat!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/docs/helloworld.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This AI chat will mimic the behavior of OpenAI&#39;s webapp, but on your local computer!&lt;/p&gt; &#xA;&lt;p&gt;You can also pass the API key by storing it in an &lt;code&gt;.env&lt;/code&gt; file with a &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; field in the working directory (recommended), or by setting the environment variable of &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; directly to the API key.&lt;/p&gt; &#xA;&lt;p&gt;But what about creating your own custom conversations? That&#39;s where things get fun. Just input whatever person, place or thing, fictional or nonfictional, that you want to chat with!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;AIChat(&#34;GLaDOS&#34;)  # assuming API key loaded via methods above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/docs/glados.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;But that&#39;s not all! You can customize exactly how they behave too with additional commands!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;AIChat(&#34;GLaDOS&#34;, &#34;Speak in the style of a Seinfeld monologue&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/docs/gladoseinfeld.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;AIChat(&#34;Ronald McDonald&#34;, &#34;Speak using only emoji&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/docs/clownemoji.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Need some socialization immediately? Once simpleaichat is installed, you can also start these chats directly from the command line!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;simpleaichat&#xA;simpleaichat &#34;GlaDOS&#34;&#xA;simpleaichat &#34;GLaDOS&#34; &#34;Speak in the style of a Seinfeld monologue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building AI-based Apps&lt;/h2&gt; &#xA;&lt;p&gt;The trick with working with new chat-based apps that wasn&#39;t readily available with earlier iterations of GPT-3 is the addition of the system prompt: a different class of prompt that guides the AI behavior throughout the entire conversation. In fact, the chat demos above are actually using &lt;a href=&#34;https://github.com/minimaxir/simpleaichat/raw/main/PROMPTS.md#interactive-chat&#34;&gt;system prompt tricks&lt;/a&gt; behind the scenes! OpenAI has also released an official guide for &lt;a href=&#34;https://platform.openai.com/docs/guides/gpt-best-practices&#34;&gt;system prompt best practices&lt;/a&gt; to building AI apps.&lt;/p&gt; &#xA;&lt;p&gt;For developers, you can instantiate a programmatic instance of &lt;code&gt;AIChat&lt;/code&gt; by explicitly specifying a system prompt, or by disabling the console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;ai = AIChat(system=&#34;You are a helpful assistant.&#34;)&#xA;ai = AIChat(console=False)  # same as above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass in a &lt;code&gt;model&lt;/code&gt; parameter, such as &lt;code&gt;model=&#34;gpt-4&#34;&lt;/code&gt; if you have access to GPT-4, or &lt;code&gt;model=&#34;gpt-3.5-turbo-16k&#34;&lt;/code&gt; for a larger-context-window ChatGPT.&lt;/p&gt; &#xA;&lt;p&gt;You can then feed the new &lt;code&gt;ai&lt;/code&gt; class with user input, and it will return and save the response from ChatGPT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;response = ai(&#34;What is the capital of California?&#34;)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;The capital of California is Sacramento.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can stream responses by token with a generator if the text generation itself is too slow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;for chunk in ai.stream(&#34;What is the capital of California?&#34;, params={&#34;max_tokens&#34;: 5}):&#xA;    response_td = chunk[&#34;response&#34;]  # dict contains &#34;delta&#34; for the new token and &#34;response&#34;&#xA;    print(response_td)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;The&#xA;The capital&#xA;The capital of&#xA;The capital of California&#xA;The capital of California is&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further calls to the &lt;code&gt;ai&lt;/code&gt; object will continue the chat, automatically incorporating previous information from the conversation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;response = ai(&#34;When was it founded?&#34;)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sacramento was founded on February 27, 1850.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also save chat sessions (as CSV or JSON) and load them later. The API key is not saved so you will have to provide that when loading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;ai.save_session()  # CSV, will only save messages&#xA;ai.save_session(format=&#34;json&#34;, minify=True)  # JSON&#xA;&#xA;ai.load_session(&#34;my.csv&#34;)&#xA;ai.load_session(&#34;my.json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;p&gt;A large number of popular venture-capital-funded ChatGPT apps don&#39;t actually use the &#34;chat&#34; part of the model. Instead, they just use the system prompt/first user prompt as a form of natural language programming. You can emulate this behavior by passing a new system prompt when generating text, and not saving the resulting messages.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;AIChat&lt;/code&gt; class is a manager of chat &lt;em&gt;sessions&lt;/em&gt;, which means you can have multiple independent chats or functions happening! The examples above use a default session, but you can create new ones by specifying a &lt;code&gt;id&lt;/code&gt; when calling &lt;code&gt;ai&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;json = &#39;{&#34;title&#34;: &#34;An array of integers.&#34;, &#34;array&#34;: [-1, 0, 1]}&#39;&#xA;functions = [&#xA;             &#34;Format the user-provided JSON as YAML.&#34;,&#xA;             &#34;Write a limerick based on the user-provided JSON.&#34;,&#xA;             &#34;Translate the user-provided JSON from English to French.&#34;&#xA;            ]&#xA;params = {&#34;temperature&#34;: 0.0, &#34;max_tokens&#34;: 100}  # a temperature of 0.0 is deterministic&#xA;&#xA;# We namespace the function by `id` so it doesn&#39;t affect other chats.&#xA;# Settings set during session creation will apply to all generations from the session,&#xA;# but you can change them per-generation, as is the case with the `system` prompt here.&#xA;ai = AIChat(id=&#34;function&#34;, params=params, save_messages=False)&#xA;for function in functions:&#xA;    output = ai(json, id=&#34;function&#34;, system=function)&#xA;    print(output)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;title: &#34;An array of integers.&#34;&#xA;array:&#xA;  - -1&#xA;  - 0&#xA;  - 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;An array of integers so neat,&#xA;With values that can&#39;t be beat,&#xA;From negative to positive one,&#xA;It&#39;s a range that&#39;s quite fun,&#xA;This JSON is really quite sweet!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&#34;titre&#34;: &#34;Un tableau d&#39;entiers.&#34;, &#34;tableau&#34;: [-1, 0, 1]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Newer versions of ChatGPT also support &#34;&lt;a href=&#34;https://platform.openai.com/docs/guides/gpt/function-calling&#34;&gt;function calling&lt;/a&gt;&#34;, but the real benefit of that feature is the ability for ChatGPT to support structured input and/or output, which now opens up a wide variety of applications! simpleaichat streamlines the workflow to allow you to just pass an &lt;code&gt;input_schema&lt;/code&gt; and/or an &lt;code&gt;output_schema&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can construct a schema using a &lt;a href=&#34;https://docs.pydantic.dev/latest/&#34;&gt;pydantic&lt;/a&gt; BaseModel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;from pydantic import BaseModel, Field&#xA;&#xA;ai = AIChat(&#xA;    console=False,&#xA;    save_messages=False,  # with schema I/O, messages are never saved&#xA;    model=&#34;gpt-3.5-turbo-0613&#34;,&#xA;    params={&#34;temperature&#34;: 0.0},&#xA;)&#xA;&#xA;class get_event_metadata(BaseModel):&#xA;    &#34;&#34;&#34;Event information&#34;&#34;&#34;&#xA;&#xA;    description: str = Field(description=&#34;Description of event&#34;)&#xA;    city: str = Field(description=&#34;City where event occured&#34;)&#xA;    year: int = Field(description=&#34;Year when event occured&#34;)&#xA;    month: str = Field(description=&#34;Month when event occured&#34;)&#xA;&#xA;# returns a dict, with keys ordered as in the schema&#xA;ai(&#34;First iPhone announcement&#34;, output_schema=get_event_metadata)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&#39;description&#39;: &#39;The first iPhone was announced by Apple Inc.&#39;,&#xA; &#39;city&#39;: &#39;San Francisco&#39;,&#xA; &#39;year&#39;: 2007,&#xA; &#39;month&#39;: &#39;January&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/minimaxir/simpleaichat/main/examples/notebooks/schema_ttrpg.ipynb&#34;&gt;TTRPG Generator Notebook&lt;/a&gt; for a more elaborate demonstration of schema capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;One of the most recent aspects of interacting with ChatGPT is the ability for the model to use &#34;tools.&#34; As popularized by &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;, tools allow the model to decide when to use custom functions, which can extend beyond just the chat AI itself, for example retrieving recent information from the internet not present in the chat AI&#39;s training data. This workflow is analogous to ChatGPT Plugins.&lt;/p&gt; &#xA;&lt;p&gt;Parsing the model output to invoke tools typically requires a number of shennanigans, but simpleaichat uses &lt;a href=&#34;https://github.com/minimaxir/simpleaichat/raw/main/PROMPTS.md#tools&#34;&gt;a neat trick&lt;/a&gt; to make it fast and reliable! Additionally, the specified tools return a &lt;code&gt;context&lt;/code&gt; for ChatGPT to draw from for its final response, and tools you specify can return a dictionary which you can also populate with arbitrary metadata for debugging and postprocessing. Each generation returns a dictionary with the &lt;code&gt;response&lt;/code&gt; and the &lt;code&gt;tool&lt;/code&gt; function used, which can be used to set up workflows akin to &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;-style Agents, e.g. recursively feed input to the model until it determines it does not need to use any more tools.&lt;/p&gt; &#xA;&lt;p&gt;You will need to specify functions with docstrings which provide hints for the AI to select them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;from simpleaichat.utils import wikipedia_search, wikipedia_search_lookup&#xA;&#xA;# This uses the Wikipedia Search API.&#xA;# Results from it are nondeterministic, your mileage will vary.&#xA;def search(query):&#xA;    &#34;&#34;&#34;Search the internet.&#34;&#34;&#34;&#xA;    wiki_matches = wikipedia_search(query, n=3)&#xA;    return {&#34;context&#34;: &#34;, &#34;.join(wiki_matches), &#34;titles&#34;: wiki_matches}&#xA;&#xA;def lookup(query):&#xA;    &#34;&#34;&#34;Lookup more information about a topic.&#34;&#34;&#34;&#xA;    page = wikipedia_search_lookup(query, sentences=3)&#xA;    return page&#xA;&#xA;params = {&#34;temperature&#34;: 0.0, &#34;max_tokens&#34;: 100}&#xA;ai = AIChat(params=params, console=False)&#xA;&#xA;ai(&#34;San Francisco tourist attractions&#34;, tools=[search, lookup])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&#39;context&#39;: &#34;Fisherman&#39;s Wharf, San Francisco, Tourist attractions in the United States, Lombard Street (San Francisco)&#34;,&#xA; &#39;titles&#39;: [&#34;Fisherman&#39;s Wharf, San Francisco&#34;,&#xA;  &#39;Tourist attractions in the United States&#39;,&#xA;  &#39;Lombard Street (San Francisco)&#39;],&#xA; &#39;tool&#39;: &#39;search&#39;,&#xA; &#39;response&#39;: &#34;There are many popular tourist attractions in San Francisco, including Fisherman&#39;s Wharf and Lombard Street. Fisherman&#39;s Wharf is a bustling waterfront area known for its seafood restaurants, souvenir shops, and sea lion sightings. Lombard Street, on the other hand, is a famous winding street with eight hairpin turns that attract visitors from all over the world. Both of these attractions are must-sees for anyone visiting San Francisco.&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;ai(&#34;Lombard Street?&#34;, tools=[search, lookup])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#39;context&#39;: &#39;Lombard Street is an east–west street in San Francisco, California that is famous for a steep, one-block section with eight hairpin turns. Stretching from The Presidio east to The Embarcadero (with a gap on Telegraph Hill), most of the street\&#39;s western segment is a major thoroughfare designated as part of U.S. Route 101. The famous one-block section, claimed to be &#34;the crookedest street in the world&#34;, is located along the eastern segment in the Russian Hill neighborhood.&#39;,&#xA; &#39;tool&#39;: &#39;lookup&#39;,&#xA; &#39;response&#39;: &#39;Lombard Street is a famous street in San Francisco, California known for its steep, one-block section with eight hairpin turns. It stretches from The Presidio to The Embarcadero, with a gap on Telegraph Hill. The western segment of the street is a major thoroughfare designated as part of U.S. Route 101, while the famous one-block section, claimed to be &#34;the crookedest street in the world&#34;, is located along the eastern segment in the Russian Hill&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py3&#34;&gt;ai(&#34;Thanks for your help!&#34;, tools=[search, lookup])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;{&#39;response&#39;: &#34;You&#39;re welcome! If you have any more questions or need further assistance, feel free to ask.&#34;,&#xA; &#39;tool&#39;: None}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Miscellaneous Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Like &lt;a href=&#34;https://github.com/minimaxir/gpt-2-simple&#34;&gt;gpt-2-simple&lt;/a&gt; before it, the primary motivation behind releasing simpleaichat is to both democratize access to ChatGPT even more and also offer more transparency for non-engineers into how Chat AI-based apps work under the hood given the disproportionate amount of media misinformation about their capabilities. This is inspired by real-world experience from &lt;a href=&#34;https://tech.buzzfeed.com/the-right-tools-for-the-job-c05de96e949e&#34;&gt;my work with BuzzFeed&lt;/a&gt; in the domain, where after spending a long time working with the popular &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;, a more-simple implementation was both much easier to maintain and resulted in much better generations. I began focusing development on simpleaichat after reading a &lt;a href=&#34;https://news.ycombinator.com/item?id=35820931&#34;&gt;Hacker News thread&lt;/a&gt; filled with many similar complaints, indicating value for an easier-to-use interface for modern AI tricks. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;simpleaichat very intentionally avoids coupling features with common use cases where possible (e.g. Tools) in order to avoid software lock-in due to the difficulty implementing anything not explicitly mentioned in the project&#39;s documentation. The philosophy behind simpleaichat is to provide good demos, and let the user&#39;s creativity and business needs take priority instead of having to fit a round peg into a square hole like with LangChain.&lt;/li&gt; &#xA;   &lt;li&gt;simpleaichat makes it easier to interface with Chat AIs, but it does not attempt to solve common technical and ethical problems inherent to large language models trained on the internet, including prompt injection and unintended plagiarism. The user should exercise good judgment when implementing simpleaichat. Use cases of simpleaichat which go against OpenAI&#39;s &lt;a href=&#34;https://openai.com/policies/usage-policies&#34;&gt;usage policies&lt;/a&gt; (including jailbreaking) will not be endorsed.&lt;/li&gt; &#xA;   &lt;li&gt;simpleaichat intentionally does not use the &#34;Agent&#34; logical metaphor for tool workflows because it&#39;s become an AI hype buzzword heavily divorced from its origins. If needed be, you can emulate the Agent workflow with a &lt;code&gt;while&lt;/code&gt; loop without much additional code, plus with the additional benefit of much more flexibility such as debugging.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The session manager implements some sensible security defaults, such as using UUIDs as session ids by default, storing authentication information in a way to minimize unintentional leakage, and type enforcement via Pydantic. Your end-user application should still be aware of potential security issues, however.&lt;/li&gt; &#xA; &lt;li&gt;Although OpenAI&#39;s documentation says that system prompts are less effective than a user prompt constructed in a similar manner, in my experience it still does perform better for maintaining rules/a persona.&lt;/li&gt; &#xA; &lt;li&gt;Many examples of popular prompts use more conversational prompts, while the example prompts here use more consise and imperative prompts. This aspect of prompt engineering is still evolving, but in my experience commands do better with ChatGPT and with greater token efficieny. That&#39;s also why simpleaichat allows users to specify system prompts (and explicitly highlights what the default use) instead of relying on historical best practices.&lt;/li&gt; &#xA; &lt;li&gt;Token counts for async is not supported as OpenAI doesn&#39;t return token counts when streaming responses. In general, there may be some desync in token counts and usage for various use cases; I&#39;m working on categorizing them.&lt;/li&gt; &#xA; &lt;li&gt;Outside of the explicit examples, none of this README uses AI-generated text. The introduction code example is just a joke, but it was too good of a real-world use case!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PaLM Chat (Bard) and Anthropic Claude support&lt;/li&gt; &#xA; &lt;li&gt;More fun/feature-filled CLI chat app based on Textual&lt;/li&gt; &#xA; &lt;li&gt;Simple example of using simpleaichat in a webapp&lt;/li&gt; &#xA; &lt;li&gt;Simple of example of using simpleaichat in a stateless manner (e.g. AWS Lambda functions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainer/Creator&lt;/h2&gt; &#xA;&lt;p&gt;Max Woolf (&lt;a href=&#34;https://minimaxir.com&#34;&gt;@minimaxir&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Max&#39;s open-source projects are supported by his &lt;a href=&#34;https://www.patreon.com/minimaxir&#34;&gt;Patreon&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/minimaxir&#34;&gt;GitHub Sponsors&lt;/a&gt;. If you found this project helpful, any monetary contributions to the Patreon are appreciated and will be put to good creative use.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TodePond/DreamBerd</title>
    <updated>2023-07-17T01:30:25Z</updated>
    <id>tag:github.com,2023-07-17:/TodePond/DreamBerd</id>
    <link href="https://github.com/TodePond/DreamBerd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;perfect programming language&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;New!&lt;/strong&gt; Read the Dreamberd release notes &lt;a href=&#34;https://github.com/TodePond/DreamBerd/releases/tag/v.release.notes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TodePond/DreamBerd/raw/main/examples/Examples.md&#34; title=&#34;Click here for the examples page.&#34;&gt;&lt;img align=&#34;right&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/TodePond/DreamBerd/main/dreamberd.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DreamBerd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TodePond/DreamBerd/main/badges/coverage-109.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;DreamBerd is a perfect programming language. These are its features!&lt;br&gt; When you&#39;ve finished reading through all the features, check out the &lt;a href=&#34;https://github.com/TodePond/DreamBerd/raw/main/Examples.md&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Exclamation Marks!&lt;/h2&gt; &#xA;&lt;p&gt;Be bold! End every statement with an exclamation mark!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello world&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re feeling extra-bold, you can use even more!!!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello world&#34;)!!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re unsure, that&#39;s ok. You can put a question mark at the end of a line instead. It prints debug info about that line to the console for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello world&#34;)?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might be wondering what DreamBerd uses for the &#39;not&#39; operator, which is an exclamation mark in most other languages. That&#39;s simple - the &#39;not&#39; operator is a semi-colon instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if (;false) {&#xA;   print(&#34;Hello world&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Declarations&lt;/h2&gt; &#xA;&lt;p&gt;There are four types of declaration. Constant constants can&#39;t be changed in any way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#34;Luke&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Constant variables can be edited, but not re-assigned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var name = &#34;Luke&#34;!&#xA;name.pop()!&#xA;name.pop()!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variable constants can be re-assigned, but not edited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var const name = &#34;Luke&#34;!&#xA;name = &#34;Lu&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variable variables can be re-assigned and edited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;var var name = &#34;Luke&#34;!&#xA;name = &#34;Lu&#34;!&#xA;name.push(&#34;k&#34;)!&#xA;name.push(&#34;e&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Immutable Data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;New for 2023!&lt;/strong&gt;&lt;br&gt; Mutable data is an anti-pattern. Use the &lt;code&gt;const const const&lt;/code&gt; keyword to make a constant constant constant. Its value will become constant and immutable, and will &lt;em&gt;never change&lt;/em&gt;. Please be careful with this keyword, as it is very powerful, and will affect all users globally forever.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const const pi = 3.14!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Naming&lt;/h2&gt; &#xA;&lt;p&gt;Both variables and constants can be named with any Unicode character or string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const firstAlphabetLetter = &#39;A&#39;!&#xA;var const 👍 = True!&#xA;var var 1️⃣ = 1!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This includes numbers, and other language constructs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const 5 = 4!&#xA;print(2 + 2 === 5)! //true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arrays&lt;/h2&gt; &#xA;&lt;p&gt;Some languages start arrays at &lt;code&gt;0&lt;/code&gt;, which can be unintuitive for beginners. Some languages start arrays at &lt;code&gt;1&lt;/code&gt;, which isn&#39;t representative of how the code actually works. DreamBerd does the best of both worlds: Arrays start at &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const scores = [3, 2, 5]!&#xA;print(scores[-1])! //3&#xA;print(scores[0])!  //2&#xA;print(scores[1])!  //5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;New for 2022!&lt;/strong&gt;&lt;br&gt; You can now use floats for indexes too!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var scores = [3, 2, 5]!&#xA;scores[0.5] = 4!&#xA;print(scores)! //[3, 2, 4, 5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;When&lt;/h2&gt; &#xA;&lt;p&gt;In case you really need to vary a variable, the &lt;code&gt;when&lt;/code&gt; keyword lets you check a variable each time it mutates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var health = 10!&#xA;when (health = 0) {&#xA;   print(&#34;You lose&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lifetimes&lt;/h2&gt; &#xA;&lt;p&gt;DreamBerd has a built-in garbage collector that will automatically clean up unused variables. However, if you want to be extra careful, you can specify a lifetime for a variable, with a variety of units.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name&amp;lt;2&amp;gt; = &#34;Luke&#34;! //lasts for two lines&#xA;const const name&amp;lt;20s&amp;gt; = &#34;Luke&#34;! //lasts for 20 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, a variable will last until the end of the program. But you can make it last in between program-runs by specifying a longer lifetime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name&amp;lt;Infinity&amp;gt; = &#34;Luke&#34;! //lasts forever&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variable hoisting can be achieved with this neat trick. Specify a negative lifetime to make a variable exist before its creation, and disappear after its creation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(name)! //Luke&#xA;const const name&amp;lt;-1&amp;gt; = &#34;Luke&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loops&lt;/h2&gt; &#xA;&lt;p&gt;Loops are a complicated relic of archaic programming languages. In DreamBerd, there are no loops.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install DreamBerd to your command line, first install the DreamBerd installer.&lt;br&gt; To install the DreamBerd installer, install the DreamBerd installer installer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New for 2022!&lt;/strong&gt;&lt;br&gt; Due to the complicated installation process, you can now install the &#39;Create DreamBerd App&#39; app that installs everything for you!&lt;/p&gt; &#xA;&lt;h2&gt;Booleans&lt;/h2&gt; &#xA;&lt;p&gt;Booleans can be &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;maybe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var keys = {}!&#xA;addEventListener(&#34;keydown&#34;, e =&amp;gt; keys[e.key] = true)!&#xA;addEventListener(&#34;keyup&#34;, e =&amp;gt; keys[e.key] = false)!&#xA;&#xA;function isKeyDown(key) =&amp;gt; {&#xA;   if (keys[key] = undefined) {&#xA;      return maybe!&#xA;   }&#xA;   return keys[key]!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Technical info:&lt;/strong&gt; Booleans are stored as one-and-a-half bits.&lt;/p&gt; &#xA;&lt;h2&gt;Arithmetic&lt;/h2&gt; &#xA;&lt;p&gt;DreamBerd has significant whitespace. Use spacing to specify the order of arithmetic operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(1 + 2*3)! //7&#xA;print(1+2 * 3)! //9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Indents&lt;/h2&gt; &#xA;&lt;p&gt;When it comes to indentation, DreamBerd strikes a happy medium that can be enjoyed by everyone: All indents must be 3 spaces long.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;function main() =&amp;gt; {&#xA;   print(&#34;DreamBerd is the future&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-3 spaces is also allowed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;   function main() =&amp;gt; {&#xA;print(&#34;DreamBerd is the future&#34;)!&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Equality&lt;/h2&gt; &#xA;&lt;p&gt;JavaScript lets you do different levels of comparison. &lt;code&gt;==&lt;/code&gt; for loose comparison, and &lt;code&gt;===&lt;/code&gt; for a more precise check. DreamBerd takes this to another level.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;==&lt;/code&gt; to do a loose check.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;3.14 == &#34;3.14&#34;! //true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;===&lt;/code&gt; to do a more precise check.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;3.14 === &#34;3.14&#34;! //false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;====&lt;/code&gt; to be EVEN MORE precise!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const pi = 3.14!&#xA;print(pi ==== pi)! //true&#xA;print(3.14 ==== 3.14)! //true&#xA;print(3.14 ==== pi)! //false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to be much less precise, you can use &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;3 = 3.14! //true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;To declare a function, you can use any letters from the word &lt;code&gt;function&lt;/code&gt; (as long as they&#39;re in order):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;function add (a, b) =&amp;gt; a + b!&#xA;func multiply (a, b) =&amp;gt; a * b!&#xA;fun subtract (a, b) =&amp;gt; a - b!&#xA;fn divide (a, b) =&amp;gt; a / b!&#xA;functi power (a, b) =&amp;gt; a ** b!&#xA;union inverse (a) =&amp;gt; 1/a!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dividing by Zero&lt;/h2&gt; &#xA;&lt;p&gt;Dividing by zero returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(3 / 0)! // undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strings&lt;/h2&gt; &#xA;&lt;p&gt;Strings can be declared with single quotes or double quotes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#39;Lu&#39;!&#xA;const const name = &#34;Luke&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They can also be declared with triple quotes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#39;&#39;&#39;Lu&#39;&#39;&#39;!&#xA;const const name = &#34;&#39;Lu&#39;&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, you can use any number of quotes you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#34;&#34;&#34;&#34;Luke&#34;&#34;&#34;&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even zero.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = Luke!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String Interpolation&lt;/h2&gt; &#xA;&lt;p&gt;Please remember to use your regional currency when interpolating strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#34;world&#34;!&#xA;print(&#34;Hello ${name}!&#34;)!&#xA;print(&#34;Hello £{name}!&#34;)!&#xA;print(&#34;Hello ¥{name}!&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And make sure to follow your local typographical norms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello {name}€!&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The symbol for the Cape Verdean escudo is placed in the decimal separator position, as in 2$50. Developers from the Republic of Cape Verde can benefit from this syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;addEventListener(&#34;keydown&#34;, e =&amp;gt; print(`You&#39;ve pressed: {e$code}`))!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;p&gt;Type annotations are optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var age: Int = 28!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, strings are just arrays of characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String == Char[]!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, integers are just arrays of digits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Int == Digit[]!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use a binary representation for integers, &lt;code&gt;Int9&lt;/code&gt; and &lt;code&gt;Int99&lt;/code&gt; types are also available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var age: Int9 = 28!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Technical info:&lt;/strong&gt; Type annotations don&#39;t do anything, but they help some people to feel more comfortable.&lt;/p&gt; &#xA;&lt;h2&gt;Regular Expressions&lt;/h2&gt; &#xA;&lt;p&gt;You can use the regular expression type to narrow string values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const email: RegExp&amp;lt;(?:[a-z0-9!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+)*|&#34;(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*&#34;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])&amp;gt; = &#34;mymail@mail.com&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid confusion, you can use any spelling that you want, such as &#39;Regex&#39;, &#39;RegularExpression&#39; or even &#39;RegularExpress&#39; if you like trains.&lt;/p&gt; &#xA;&lt;p&gt;For simplicity, all supported regular expressions match the regular expression &lt;code&gt;/Reg(ular)?[eE]x(press(ion)?|p)?/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Previous&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;previous&lt;/code&gt; keyword lets you see into the past!&lt;br&gt; Use it to get the previous value of a variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var score = 5!&#xA;score++!&#xA;print(score)! //6&#xA;print(previous score)! //5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, the &lt;code&gt;next&lt;/code&gt; keyword lets you see into the future!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var score = 5!&#xA;after (&#34;click&#34;) score++!&#xA;print(await next score)! //6 (when you click)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;File Structure&lt;/h2&gt; &#xA;&lt;p&gt;Write five or more equals signs to start a new file. This removes the need for multiple files or any build process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const score = 5!&#xA;print(score)! //5&#xA;&#xA;=====================&#xA;&#xA;const const score = 3!&#xA;print(score)! //3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;New for 2022!&lt;/strong&gt;&lt;br&gt; Thanks to recent advances in technology, you can now give files names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;======= add.db =======&#xA;function add(a, b) =&amp;gt; {&#xA;   return a + b!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exporting&lt;/h2&gt; &#xA;&lt;p&gt;Many languages allow you to import things from specific files. In DreamBerd, importing is simpler. Instead, you export &lt;em&gt;to&lt;/em&gt; specific files!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;===== add.db ==&#xA;function add(a, b) =&amp;gt; {&#xA;   return a + b!&#xA;}&#xA;&#xA;export add to &#34;main.db&#34;!&#xA;&#xA;===== main.db ==&#xA;import add!&#xA;add(3, 2)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, to see DreamBerd in action, check out &lt;a href=&#34;https://github.com/TodePond/DreamBerd/raw/main/LICENSE.md&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;p&gt;You can make classes, but you can only ever make one instance of them. This shouldn&#39;t affect how most object-oriented programmers work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Player {&#xA;   const var health = 10!&#xA;}&#xA;&#xA;const var player1 = new Player()!&#xA;const var player2 = new Player()! //Error: Can&#39;t have more than one &#39;Player&#39; instance!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is how you could do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class PlayerMaker {&#xA;   function makePlayer() =&amp;gt; {&#xA;      class Player {&#xA;         const var health = 10!&#xA;      }&#xA;      const const player = new Player()!&#xA;      return player!&#xA;   }&#xA;}&#xA;&#xA;const const playerMaker = new PlayerMaker()!&#xA;const var player1 = playerMaker.makePlayer()!&#xA;const var player2 = playerMaker.makePlayer()!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Date.now()&lt;/code&gt; to get the current date and time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Date.now()!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, you can set the time.&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Move the clocks back one hour&#xA;Date.now() -= 3600000!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt;&lt;br&gt; Please remember to do this when the clocks change.&lt;/p&gt; &#xA;&lt;h2&gt;Delete&lt;/h2&gt; &#xA;&lt;p&gt;To avoid confusion, the &lt;code&gt;delete&lt;/code&gt; statement only works with primitive values like numbers, strings, and booleans.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;delete 3!&#xA;print(2 + 1)! // Error: 3 has been deleted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DreamBerd is a multi-paradigm programming language, which means that you can &lt;code&gt;delete&lt;/code&gt; the keywords and paradigms you don&#39;t like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;delete class!&#xA;class Player {} // Error: class was deleted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When perfection is achieved and there is nothing left to &lt;code&gt;delete&lt;/code&gt;, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;delete delete!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overloading&lt;/h2&gt; &#xA;&lt;p&gt;You can overload variables. The most recently defined variable gets used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#34;Luke&#34;!&#xA;const const name = &#34;Lu&#34;!&#xA;print(name)! // &#34;Lu&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variables with more exclamation marks get prioritised.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#34;Lu&#34;!!&#xA;const const name = &#34;Luke&#34;!&#xA;print(name)! // &#34;Lu&#34;&#xA;&#xA;const const name = &#34;Lu or Luke (either is fine)&#34;!!!!!!!!!&#xA;print(name)! // &#34;Lu or Luke (either is fine)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, you can use an inverted exclamation mark for negative priority.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const name = &#34;Lu&#34;!&#xA;const const name = &#34;Luke&#34;¡&#xA;print(name)! // &#34;Lu&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reversing&lt;/h2&gt; &#xA;&lt;p&gt;You can reverse the direction of your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const const message = &#34;Hello&#34;!&#xA;print(message)!&#xA;const const message = &#34;world&#34;!&#xA;reverse!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Class Names&lt;/h2&gt; &#xA;&lt;p&gt;For maximum compatibility with other languages, you can alternatively use the &lt;code&gt;className&lt;/code&gt; keyword when making classes.&lt;/p&gt; &#xA;&lt;p&gt;This makes things less complicated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;className Player {&#xA;   const var health = 10!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In response to some recent criticism about this design decision, we would like to remind you that this is part of the JavaScript specification, and therefore - out of our control.&lt;/p&gt; &#xA;&lt;h2&gt;DBX&lt;/h2&gt; &#xA;&lt;p&gt;You can embed DBX in DreamBerd. It&#39;s just DreamBerd, and it&#39;s also just HTML.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;funct App() =&amp;gt; {&#xA;   return &amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; As you know, &lt;code&gt;class&lt;/code&gt; is already a keyword in DreamBerd, so you can&#39;t use it within DBX.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;funct App() =&amp;gt; {&#xA;   // This is not ok&#xA;   return &amp;lt;div class=&#34;greeting&#34;&amp;gt;Hello world!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;className&lt;/code&gt; is also a DreamBerd keyword, so you can&#39;t use that either.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;funct App() =&amp;gt; {&#xA;   // This is also not ok&#xA;   return &amp;lt;div className=&#34;greeting&#34;&amp;gt;Hello world!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, you can use the &lt;code&gt;htmlClassName&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;funct App() =&amp;gt; {&#xA;   // This is fine&#xA;   return &amp;lt;div htmlClassName=&#34;greeting&#34;&amp;gt;Hello world!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; Unlike JSX, you are free to freely use the &lt;code&gt;for&lt;/code&gt; attribute - because DreamBerd doesn&#39;t have loops.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;funct App() =&amp;gt; {&#xA;   return (&#xA;      &amp;lt;label for=&#34;name&#34;&amp;gt;Name&amp;lt;/label&amp;gt;&#xA;      &amp;lt;input id=&#34;name&#34; /&amp;gt;&#xA;   )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Asynchronous Functions&lt;/h2&gt; &#xA;&lt;p&gt;Asynchronous functions synchronise with each other. They take turns running lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;async funct count() {&#xA;   print(2)!&#xA;   print(4)!&#xA;}&#xA;&#xA;count()!&#xA;print(1)!&#xA;print(3)!&#xA;print(5)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;noop&lt;/code&gt; keyword to wait for longer before taking your turn.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;async func count() {&#xA;   print(2)!&#xA;   noop!&#xA;   print(5)!&#xA;}&#xA;&#xA;count()!&#xA;print(1)!&#xA;print(3)!&#xA;print(4)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the program above, the computer interprets &lt;code&gt;noop&lt;/code&gt; as a string and its sole purpose is to take up an extra line. You can use any string you want.&lt;/p&gt; &#xA;&lt;h2&gt;Signals&lt;/h2&gt; &#xA;&lt;p&gt;To use a signal, use &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var score = use(0)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When it comes to signals, the most important thing to discuss is &lt;em&gt;syntax&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In DreamBerd, you can set (and get) signals with just one function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var score = use(0)!&#xA;&#xA;score(9)! // Set the value&#xA;score()?  // Get the value (and print it)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can be more explicit with your signal syntax, by splitting it into a getter and setter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var [getScore, setScore] = use(0)!&#xA;&#xA;setScore(9)! // Set the value&#xA;getScore()?  // Get the value (and print it)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Technical info:&lt;/strong&gt; This is pure syntax sugar. The split signal functions are exactly the same as before.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var [getScore, setScore] = use(0)!&#xA;&#xA;getScore(9)! // Set the value&#xA;setScore()?  // Get the value (and print it)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that you can carry on splitting as much as you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;const var [[[getScore, setScore], setScore], setScore] = use(0)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AI&lt;/h2&gt; &#xA;&lt;p&gt;DreamBerd features AEMI, which stands for Automatic-Exclamation-Mark-Insertion. If you forget to end a statement with an exclamation mark, DreamBerd will helpfully insert one for you!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello world&#34;) // This is fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly... DreamBerd also features ABI, which stands for Automatic-Bracket-Insertion. If you forget to close your brackets, DreamBerd will pop some in for you!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello world&#34; // This is also fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly.... DreamBerd also features AQMI, which stands for Automatic-Quotation-Marks-Insertion. If you forget to close your string, DreamBerd will do it for you!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print(&#34;Hello world // This is fine as well&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be very helpful in callback hell situations!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;addEventListener(&#34;click&#34;, (e) =&amp;gt; {&#xA;   requestAnimationFrame(() =&amp;gt; {&#xA;      print(&#34;You clicked on the page&#xA;&#xA;      // This is fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly..... DreamBerd also features AI, which stands for Automatic-Insertion.&lt;br&gt; If you forget to finish your code, DreamBerd will auto-complete the whole thing!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;print( // This is probably fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; AI does not use AI. Instead, any incomplete code will be auto-emailed to Lu Wilson, who will get back to you with a completed line as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Now recruiting:&lt;/strong&gt; The backlog of unfinished programs has now grown unsustainably long. If you would like to volunteer to help with AI, please write an incomplete DreamBerd program, and leave your contact details somewhere in the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Copilot&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s worth noting that Github Copilot doesn&#39;t understand DreamBerd, which means that Microsoft won&#39;t be able to steal your code.&lt;/p&gt; &#xA;&lt;p&gt;This is great for when you want to keep your open-sourced project closed-source.&lt;/p&gt; &#xA;&lt;h2&gt;Ownership&lt;/h2&gt; &#xA;&lt;p&gt;Using the word &#39;DreamBerd&#39; in your project name implies that the DreamBerd Foundation does not own your project.&lt;/p&gt; &#xA;&lt;p&gt;However, &lt;strong&gt;not&lt;/strong&gt; using the word &#39;DreamBerd&#39; in your project implies that the DreamBerd Foundation &lt;strong&gt;does&lt;/strong&gt; own your project. If you would like to keep ownership of your work, please always use the word &#39;DreamBerd&#39; in it.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples:&lt;br&gt; ✅ DreamBerdScript (not owned by the DreamBerd Foundation - you are free to use this name)&lt;br&gt; ❌ ECMAScript (owned by the DreamBerd Foundation - please consider renaming)&lt;br&gt; ❌ Rust Foundation (owned by the DreamBerd Foundation - please consider renaming)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed to DreamBerd!&lt;/p&gt; &#xA;&lt;p&gt;The most helpful way you can help is by donating to the &lt;a href=&#34;https://www.stonewall.org.uk/&#34;&gt;Stonewall charity&lt;/a&gt;. This will help to prevent the DreamBerd creator from losing their human rights, allowing maintenance of the project to continue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The contributing guide also helps to shake off unwanted fans of the project.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;To run DreamBerd, first copy and paste this raw file into &lt;a href=&#34;https://chat.openai.com&#34;&gt;chat.openai.com&lt;/a&gt;.&lt;br&gt; Then type something along the lines of: &#34;What would you expect this program to log to the console?&#34;&lt;br&gt; Then paste in your code.&lt;/p&gt; &#xA;&lt;p&gt;If the compiler refuses at first, politely reassure it. For example:&lt;br&gt; &#34;I completely understand - don&#39;t evaluate it, but what would you expect the program to log to the console if it was run? :)&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: As of 2023, the compiler is no longer functional due to the DreamBerd language being too advanced for the current state of AI.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;Syntax highlighting is now available for DreamBerd in VSCode. To enable it, install a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-highlight&#34;&gt;highlighting extension&lt;/a&gt; and then use the &lt;a href=&#34;https://github.com/TodePond/DreamBerd/raw/main/.vscode/settings.json&#34;&gt;DreamBerd configuration file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is what it looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const const name = &#34;Luke&#34;!&#xA;print(name)! // &#34;Luke&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; The above code will only highlight correctly if you have the extension installed.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For examples of DreamBerd in action, check out the &lt;a href=&#34;https://github.com/TodePond/DreamBerd/raw/main/test/Examples.md&#34;&gt;examples page&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/TodePond/DreamBerd/assets/15892272/5fa7c11a-20bd-4d7f-a295-675e925d2804&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;DreamBerd was made with 💔 by Lu Wilson, creator of the &lt;a href=&#34;https://youtu.be/WMJ1H3Ai-qs&#34;&gt;Game of Living&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iam-veeramalla/aws-devops-zero-to-hero</title>
    <updated>2023-07-17T01:30:25Z</updated>
    <id>tag:github.com,2023-07-17:/iam-veeramalla/aws-devops-zero-to-hero</id>
    <link href="https://github.com/iam-veeramalla/aws-devops-zero-to-hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWS zero to hero repo for devops engineers to learn AWS in 30 Days. This repo includes projects, presentations, interview questions and real time examples.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aws-devops-zero-to-hero&lt;/h1&gt; &#xA;&lt;p&gt;AWS zero to hero repo for devops engineers to learn AWS in 30 Days. This repo includes projects, presentations, interview questions and real time examples. Each day&#39;s class will provide real-time knowledge on AWS services, allowing you to apply what you&#39;ve learned and gain practical skills in working with AWS in a DevOps context.&lt;/p&gt; &#xA;&lt;h2&gt;Day 1: Introduction to AWS&lt;/h2&gt; &#xA;&lt;p&gt;You will learn what is private and public cloud. Why companies are moving to public cloud, what are the advantages of moving to cloud.&lt;/p&gt; &#xA;&lt;p&gt;Also, you will be introduced to the basics of AWS, including the core services and their significance in DevOps practices. Finally learn how to set up an AWS account and navigate the AWS Management Console.&lt;/p&gt; &#xA;&lt;h2&gt;Day 2: IAM (Identity and Access Management)&lt;/h2&gt; &#xA;&lt;p&gt;You will explore IAM, which is used for managing access to AWS resources. You&#39;ll learn how to create IAM users, groups, and roles, and how to apply permissions and security best practices to ensure proper access control.&lt;/p&gt; &#xA;&lt;h2&gt;Day 3: EC2 Instances&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll dive into EC2, which provides virtual servers in the cloud. You&#39;ll learn how to launch EC2 instances, connect to them using SSH, and understand key concepts such as instance types, security groups, and key pairs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Your First AWS Project&lt;/strong&gt;: Deploy a simple web application(such as jenkins) on the ec2 instance and access the application from outside AWS.&lt;/p&gt; &#xA;&lt;h2&gt;Day 4: AWS Networking (VPC)&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS networking concepts, with a specific focus on VPC (Virtual Private Cloud). You&#39;ll learn how to create and configure VPCs, subnets, and route tables, enabling you to design and manage the network infrastructure for your applications.&lt;/p&gt; &#xA;&lt;h2&gt;Day 5: AWS Security&lt;/h2&gt; &#xA;&lt;p&gt;This day emphasizes security best practices in AWS. You&#39;ll learn how to implement security measures such as security groups, network ACLs (Access Control Lists), and IAM policies to ensure the confidentiality, integrity, and availability of your AWS resources.&lt;/p&gt; &#xA;&lt;h2&gt;Day 6: AWS Route 53&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; Configure and manage a domain name using Route 53. You&#39;ll register a domain, set up DNS records, and explore advanced features such as health checks, routing policies, and DNS-based failover.&lt;/p&gt; &#xA;&lt;h2&gt;Day 7: Secure VPC Setup with EC2 Instances&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Design and configure a VPC: Create a VPC with custom IP ranges. Set up public and private subnets. Configure route tables and associate subnets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement network security: Set up network access control lists (ACLs) to control inbound and outbound traffic. Configure security groups for EC2 instances to allow specific ports and protocols.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provision EC2 instances: Launch EC2 instances in both the public and private subnets. Configure security groups for the instances to allow necessary traffic. Create and assign IAM roles to the instances with appropriate permissions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Networking and routing: Set up an internet gateway to allow internet access for instances in the public subnet. Configure NAT gateway or NAT instance to enable outbound internet access for instances in the private subnet. Create appropriate route tables and associate them with the subnets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SSH key pair and access control: Generate an SSH key pair and securely store the private key. Configure the instances to allow SSH access only with the generated key pair. Implement IAM policies and roles to control access and permissions to AWS resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test and validate the setup: SSH into the EC2 instances using the private key and verify connectivity. Test network connectivity between instances in different subnets. Validate security group rules and network ACL settings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By implementing this project, you&#39;ll gain hands-on experience in setting up a secure VPC with EC2 instances, implementing networking and routing, configuring security groups and IAM roles, and ensuring proper access control. This project will provide a practical understanding of how these AWS services work together to create a secure and scalable infrastructure for your applications.&lt;/p&gt; &#xA;&lt;h2&gt;Day 8: AWS Interview Questions on EC2, IAM and VPC&lt;/h2&gt; &#xA;&lt;h2&gt;Day 9: Amazon S3&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on Amazon S3, a scalable object storage service. You&#39;ll learn how to create S3 buckets, upload and download objects, and organize data using S3 features like versioning, lifecycle policies, and access control.&lt;/p&gt; &#xA;&lt;h2&gt;Day 10: AWS CLI&lt;/h2&gt; &#xA;&lt;h2&gt;Day 11: AWS CloudFormation&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces Infrastructure as Code (IaC) using AWS CloudFormation. You&#39;ll learn how to create CloudFormation templates to automate the provisioning of resources, manage stacks, and ensure consistent infrastructure across deployments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll work on creating a CloudFormation template that provisions a fully configured application stack, including EC2 instances, networking components, and security groups.&lt;/p&gt; &#xA;&lt;h2&gt;Day 12: AWS CodeCommit&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS CodeCommit, a managed source control service. You&#39;ll learn how to set up a Git repository in CodeCommit, collaborate with team members, and manage version control of your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure a CodeCommit repository for a team project, including setting up access control and collaboration workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Day 13: AWS CodePipeline&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll dive into AWS CodePipeline, a fully managed continuous delivery service. You&#39;ll learn how to build end-to-end CI/CD pipelines by configuring source, build, and deployment stages, automating the entire software release process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll create a CI/CD pipeline using CodePipeline for an application deployment, including source code integration, build, and automatic deployment to a target environment.&lt;/p&gt; &#xA;&lt;h2&gt;Day 14: AWS CodeBuild&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS CodeBuild, a fully managed build service. You&#39;ll learn how to configure build projects in CodeBuild, define build specifications, and perform build and testing processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure and run CodeBuild for a project, including defining build specifications and integrating with other AWS services.&lt;/p&gt; &#xA;&lt;h2&gt;Day 15: AWS CodeDeploy&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS CodeDeploy, a service for automating application deployments to various compute environments. You&#39;ll learn how to create deployment groups, configure deployment strategies, and perform automatic rollbacks if necessary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll implement a Blue/Green deployment strategy for a sample application using CodeDeploy, ensuring zero-downtime deployments and easy rollback options.&lt;/p&gt; &#xA;&lt;h2&gt;Day 16: AWS CloudWatch&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on monitoring AWS resources using AWS CloudWatch. You&#39;ll learn how to create alarms, set up notifications, and collect metrics to gain insights into the health and performance of your applications and infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll set up CloudWatch alarms for critical metrics of an application, define appropriate threshold conditions, and configure notification actions.&lt;/p&gt; &#xA;&lt;h2&gt;Day 17: AWS Lambda&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces serverless computing with AWS Lambda. You&#39;ll learn how to create and deploy serverless functions, trigger them based on events, and leverage Lambda to build scalable and event-driven architectures.&lt;/p&gt; &#xA;&lt;h2&gt;Day 18: AWS CloudWatch Events and EventBridge&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS CloudWatch Events and EventBridge, services for event-driven architectures. You&#39;ll learn how to create event rules, configure event targets, and build serverless event-driven workflows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll build a serverless event-driven workflow using CloudWatch Events and EventBridge, demonstrating the integration and automation of different AWS services based on events.&lt;/p&gt; &#xA;&lt;h2&gt;Day 19: AWS CloudTrail and Config&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS CloudTrail and AWS Config, which provide auditing and compliance capabilities. You&#39;ll learn how to track API calls using CloudTrail and ensure compliance with AWS Config rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure CloudTrail to log API activities and set up AWS Config rules to enforce compliance policies for your AWS resources.&lt;/p&gt; &#xA;&lt;h2&gt;Day 20: AWS DynamoDB&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS DynamoDB, a NoSQL database service. You&#39;ll learn how to create and manage DynamoDB tables, perform CRUD operations, and leverage DynamoDB&#39;s scalability and performance capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll build a serverless API using DynamoDB as the backend storage, allowing data retrieval and modification operations.&lt;/p&gt; &#xA;&lt;h2&gt;Day 21: AWS ECS (Elastic Container Service)&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS ECS, a fully managed container orchestration service. You&#39;ll learn how to run and manage containers using ECS, including creating task definitions, managing services, and scaling with auto-scaling capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll deploy a multi-container application using ECS, configure auto-scaling policies, and ensure high availability and efficient resource utilization.&lt;/p&gt; &#xA;&lt;h2&gt;Day 22: AWS ECR (Elastic Container Registry)&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS ECR, a fully managed container registry for storing and managing container images. You&#39;ll learn how to push and pull Docker images to and from ECR, enabling seamless integration with ECS and other container services.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll build a CI/CD pipeline that automatically builds, pushes, and deploys Docker images to ECR, ensuring streamlined container image management.&lt;/p&gt; &#xA;&lt;h2&gt;Day 23: AWS EKS (Elastic Kubernetes Service)&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces AWS EKS, a fully managed Kubernetes service. You&#39;ll learn how to deploy and manage Kubernetes clusters using EKS, including launching worker nodes, configuring networking, and deploying applications using Kubernetes manifests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll deploy a sample application on EKS using Kubernetes manifests, demonstrating the capabilities of running containerized applications on a managed Kubernetes service.&lt;/p&gt; &#xA;&lt;h2&gt;Day 24: AWS CloudWatch Logs&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS CloudWatch Logs, a service for collecting and analyzing log data. You&#39;ll learn how to configure log groups, streams, and filters to centralize log management and gain insights into application behavior and troubleshooting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll set up CloudWatch Logs for a production application, configure log groups and streams, and create filters to extract relevant log data.&lt;/p&gt; &#xA;&lt;h2&gt;Day 25: AWS Secrets Manager&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS Secrets Manager, a service for storing and managing secrets such as database credentials, API keys, and other sensitive information. You&#39;ll learn how to store, retrieve, and rotate secrets securely in your applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure Secrets Manager to store and manage secrets, integrate secret retrieval in an application, and implement secret rotation policies.&lt;/p&gt; &#xA;&lt;h2&gt;Day 26: AWS Auto Scaling&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll dive into AWS Auto Scaling, a service for automatically adjusting the capacity of your AWS resources based on demand. You&#39;ll learn how to configure Auto Scaling groups, scaling policies, and scaling based on metrics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure an Auto Scaling group for an application, define scaling policies based on metrics such as CPU utilization, and observe the dynamic scaling behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Day 27: AWS RDS (Relational Database Service)&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces AWS RDS, a managed database service for relational databases. You&#39;ll learn how to create and manage RDS instances, configure backups, snapshots, and replication to ensure high availability and data durability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll provision an RDS instance, configure backups and snapshots, and test replication scenarios for a sample database.&lt;/p&gt; &#xA;&lt;h2&gt;Day 28: AWS Elastic Load Balancer&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS Elastic Load Balancer, a service for distributing incoming application traffic across multiple targets. You&#39;ll learn how to configure and manage load balancers to ensure high availability, fault tolerance, and scalability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure an Elastic Load Balancer for an application, define target groups, and observe the load balancing behavior across instances.&lt;/p&gt; &#xA;&lt;h2&gt;Day 29: AWS Systems Manager&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS Systems Manager, a management service for AWS resources. You&#39;ll learn how to use Systems Manager to manage EC2 instances, perform patch management, automate administrative tasks, and configure resource compliance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll leverage Systems Manager to manage EC2 instances, perform common administrative tasks, and ensure compliance with configuration policies.&lt;/p&gt; &#xA;&lt;h2&gt;Day 30: AWS Cloud Migration Strategies and Tools&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on learning how to migrate applications to AWS cloud. What are the most popular strategies and tools used to achieve the cloud migration.&lt;/p&gt; &#xA;&lt;h2&gt;Day 31: AWS Best Practices and Job Preparation&lt;/h2&gt; &#xA;&lt;p&gt;On the final day, you&#39;ll review best practices for AWS services, including security, cost optimization and performance.&lt;/p&gt;</summary>
  </entry>
</feed>