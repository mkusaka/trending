<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T01:31:41Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>charmbracelet/gum</title>
    <updated>2022-08-01T01:31:41Z</updated>
    <id>tag:github.com,2022-08-01:/charmbracelet/gum</id>
    <link href="https://github.com/charmbracelet/gum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for glamorous shell scripts 🎀&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gum&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://stuff.charm.sh/gum/nutritional-information.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://stuff.charm.sh/gum/gum.png&#34; alt=&#34;Gum Image&#34; width=&#34;450&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/gum/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/gum.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/gum?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;Go Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/gum/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/gum/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A tool for glamorous shell scripts. Leverage the power of &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;Bubbles&lt;/a&gt; and &lt;a href=&#34;https://github.com/charmbracelet/lipgloss&#34;&gt;Lip Gloss&lt;/a&gt; in your scripts and aliases without writing any Go code!&lt;/p&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/demo.gif&#34; width=&#34;600&#34; alt=&#34;Shell running the ./demo.sh script&#34;&gt; &#xA;&lt;p&gt;The above example is running from a single shell script (&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/gum/main/examples/demo.sh&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Gum provides highly configurable, ready-to-use utilities to help you write useful shell scripts and dotfiles aliases with just a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s build a simple script to help you write &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/#summary&#34;&gt;Conventional Commits&lt;/a&gt; for your dotfiles.&lt;/p&gt; &#xA;&lt;p&gt;Start with a &lt;code&gt;#!/bin/sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ask for the commit type with &lt;code&gt;gum choose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum choose &#34;fix&#34; &#34;feat&#34; &#34;docs&#34; &#34;style&#34; &#34;refactor&#34; &#34;test&#34; &#34;chore&#34; &#34;revert&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tip: this command itself will print to &lt;code&gt;stdout&lt;/code&gt; which is not all that useful. To make use of the command later on you can save the stdout to a &lt;code&gt;$VARIABLE&lt;/code&gt; or &lt;code&gt;file.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Prompt for an (optional) scope for the commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input --placeholder &#34;scope&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt for a commit message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input --placeholder &#34;Summary of this change&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt for a detailed (multi-line) explanation of the changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum write --placeholder &#34;Details of this change&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt for a confirmation before committing:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;gum confirm&lt;/code&gt; exits with status &lt;code&gt;0&lt;/code&gt; if confirmed and status &lt;code&gt;1&lt;/code&gt; if cancelled.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum confirm &#34;Commit changes?&#34; &amp;amp;&amp;amp; git commit -m &#34;$SUMMARY&#34; -m &#34;$DESCRIPTION&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Putting it all together...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;TYPE=$(gum choose &#34;fix&#34; &#34;feat&#34; &#34;docs&#34; &#34;style&#34; &#34;refactor&#34; &#34;test&#34; &#34;chore&#34; &#34;revert&#34;)&#xA;SCOPE=$(gum input --placeholder &#34;scope&#34;)&#xA;&#xA;# Since the scope is optional, wrap it in parentheses if it has a value.&#xA;test -n &#34;$SCOPE&#34; &amp;amp;&amp;amp; SCOPE=&#34;($SCOPE)&#34;&#xA;&#xA;# Pre-populate the input with the type(scope): so that the user may change it&#xA;SUMMARY=$(gum input --value &#34;$TYPE$SCOPE: &#34; --placeholder &#34;Summary of this change&#34;)&#xA;DESCRIPTION=$(gum write --placeholder &#34;Details of this change&#34;)&#xA;&#xA;# Commit these changes&#xA;gum confirm &#34;Commit changes?&#34; &amp;amp;&amp;amp; git commit -m &#34;$SUMMARY&#34; -m &#34;$DESCRIPTION&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/commit_2.gif&#34; width=&#34;600&#34; alt=&#34;Running the ./examples/commit.sh script to commit to git&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use a package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# macOS or Linux&#xA;brew install gum&#xA;&#xA;# Arch Linux (btw)&#xA;yay -S gum-bin&#xA;&#xA;# Nix&#xA;nix-env -iA nixpkgs.gum&#xA;&#xA;# Debian/Ubuntu&#xA;echo &#39;deb [trusted=yes] https://repo.charm.sh/apt/ /&#39; | sudo tee /etc/apt/sources.list.d/charm.list&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install gum&#xA;&#xA;# Fedora&#xA;echo &#39;[charm]&#xA;name=Charm&#xA;baseurl=https://repo.charm.sh/yum/&#xA;enabled=1&#xA;gpgcheck=0&#39; | sudo tee /etc/yum.repos.d/charm.repo&#xA;sudo yum install gum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/gum/releases&#34;&gt;Packages&lt;/a&gt; are available in Debian and RPM formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/gum/releases&#34;&gt;Binaries&lt;/a&gt; are available for Linux, macOS, and Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or just install it with &lt;code&gt;go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/charmbracelet/gum@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;gum&lt;/code&gt; is designed to be embedded in scripts and supports all sorts of use cases. Components are configurable and customizable to fit your theme and use case.&lt;/p&gt; &#xA;&lt;p&gt;You can customize with &lt;code&gt;--flags&lt;/code&gt;. See &lt;code&gt;gum &amp;lt;command&amp;gt; --help&lt;/code&gt; for a full view of each command&#39;s customization and configuration options.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s use an &lt;code&gt;input&lt;/code&gt; and change the cursor color, prompt color, prompt indicator, placeholder text, width, and pre-populate the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input --cursor.foreground &#34;#FF0&#34; --prompt.foreground &#34;#0FF&#34; --prompt &#34;* &#34; \&#xA;    --placeholder &#34;What&#39;s up?&#34; --width 80 --value &#34;Not much, hby?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/customization.gif&#34; width=&#34;600&#34; alt=&#34;Gum input displaying most customization options&#34;&gt; &#xA;&lt;h2&gt;Interaction&lt;/h2&gt; &#xA;&lt;h4&gt;Input&lt;/h4&gt; &#xA;&lt;p&gt;Prompt for input with a simple command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input &amp;gt; answer.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/input_1.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum input typing Not much, you?&#34;&gt; &#xA;&lt;h4&gt;Write&lt;/h4&gt; &#xA;&lt;p&gt;Prompt for some multi-line text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum write &amp;gt; story.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/write.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum write typing a story&#34;&gt; &#xA;&lt;h4&gt;Filter&lt;/h4&gt; &#xA;&lt;p&gt;Use fuzzy matching to filter a list of values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo Strawberry &amp;gt;&amp;gt; flavors.text&#xA;echo Banana &amp;gt;&amp;gt; flavors.text&#xA;echo Cherry &amp;gt;&amp;gt; flavors.text&#xA;cat flavors.text | gum filter &amp;gt; selection.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/filter.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum filter on different bubble gum flavors&#34;&gt; &#xA;&lt;h4&gt;Choose&lt;/h4&gt; &#xA;&lt;p&gt;Choose an option from a list of choices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Pick a card, any card...&#34;&#xA;CARD=$(gum choose --height 15 {{A,K,Q,J},{10..2}}&#34; &#34;{♠,♥,♣,♦})&#xA;echo &#34;Was your card the $CARD?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also select multiple items with the &lt;code&gt;--limit&lt;/code&gt; flag, which determines the maximum of items that can be chosen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Pick your top 5 songs.&#34;&#xA;cat songs.txt | gum choose --limit 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, allow any number of selections with the &lt;code&gt;--no-limit&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;What do you need from the grocery store?&#34;&#xA;cat foods.txt | gum choose --no-limit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/choose.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum choose with numbers and gum flavors&#34;&gt; &#xA;&lt;h4&gt;Confirm&lt;/h4&gt; &#xA;&lt;p&gt;Confirm whether to perform an action. Exits with code &lt;code&gt;0&lt;/code&gt; (affirmative) or &lt;code&gt;1&lt;/code&gt; (negative) depending on selection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum confirm &amp;amp;&amp;amp; rm file.txt || echo &#34;File not removed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/confirm_2.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum confirm&#34;&gt; &#xA;&lt;h4&gt;Spin&lt;/h4&gt; &#xA;&lt;p&gt;Display a spinner while running a script or command. The spinner will automatically stop after the given command exits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum spin --spinner dot --title &#34;Buying Bubble Gum...&#34; -- sleep 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/spin.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum spin while sleeping for 5 seconds&#34;&gt; &#xA;&lt;p&gt;Available spinner types include: &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;, &lt;code&gt;minidot&lt;/code&gt;, &lt;code&gt;jump&lt;/code&gt;, &lt;code&gt;pulse&lt;/code&gt;, &lt;code&gt;points&lt;/code&gt;, &lt;code&gt;globe&lt;/code&gt;, &lt;code&gt;moon&lt;/code&gt;, &lt;code&gt;monkey&lt;/code&gt;, &lt;code&gt;meter&lt;/code&gt;, &lt;code&gt;hamburger&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Styling&lt;/h2&gt; &#xA;&lt;h4&gt;Style&lt;/h4&gt; &#xA;&lt;p&gt;Pretty print any string with any layout with one command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum style \&#xA;&#x9;--foreground 212 --border-foreground 212 --border double \&#xA;&#x9;--align center --width 50 --margin &#34;1 2&#34; --padding &#34;2 4&#34; \&#xA;&#x9;&#39;Bubble Gum (1¢)&#39; &#39;So sweet and so fresh!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/style.gif&#34; width=&#34;600&#34; alt=&#34;Bubble Gum, So sweet and so fresh!&#34;&gt; &#xA;&lt;h2&gt;Layout&lt;/h2&gt; &#xA;&lt;h4&gt;Join&lt;/h4&gt; &#xA;&lt;p&gt;Combine text vertically or horizontally. Use this command with &lt;code&gt;gum style&lt;/code&gt; to build layouts and pretty output.&lt;/p&gt; &#xA;&lt;p&gt;Tip: Always wrap the output of &lt;code&gt;gum style&lt;/code&gt; in quotes to preserve newlines (&lt;code&gt;\n&lt;/code&gt;) when using it as an argument in the &lt;code&gt;join&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;I=$(gum style --padding &#34;1 5&#34; --border double --border-foreground 212 &#34;I&#34;)&#xA;LOVE=$(gum style --padding &#34;1 4&#34; --border double --border-foreground 57 &#34;LOVE&#34;)&#xA;BUBBLE=$(gum style --padding &#34;1 8&#34; --border double --border-foreground 255 &#34;Bubble&#34;)&#xA;GUM=$(gum style --padding &#34;1 5&#34; --border double --border-foreground 240 &#34;Gum&#34;)&#xA;&#xA;I_LOVE=$(gum join &#34;$I&#34; &#34;$LOVE&#34;)&#xA;BUBBLE_GUM=$(gum join &#34;$BUBBLE&#34; &#34;$GUM&#34;)&#xA;gum join --align center --vertical &#34;$I_LOVE&#34; &#34;$BUBBLE_GUM&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/join.gif&#34; width=&#34;600&#34; alt=&#34;I LOVE Bubble Gum written out in four boxes with double borders around them.&#34;&gt; &#xA;&lt;h2&gt;Format&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;format&lt;/code&gt; processes and formats bodies of text. &lt;code&gt;gum format&lt;/code&gt; can parse markdown, template strings, and named emojis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Format some markdown&#xA;gum format -- &#34;# Gum Formats&#34; &#34;- Markdown&#34; &#34;- Code&#34; &#34;- Template&#34; &#34;- Emoji&#34;&#xA;echo &#34;# Gum Formats\n- Markdown\n- Code\n- Template\n- Emoji&#34; | gum format&#xA;&#xA;# Syntax highlight some code&#xA;cat main.go | gum format -t code&#xA;&#xA;# Render text any way you want with templates&#xA;echo &#39;{{ Bold &#34;Tasty&#34; }} {{ Italic &#34;Bubble&#34; }} {{ Color &#34;99&#34; &#34;0&#34; &#34; Gum &#34; }}&#39; \&#xA;    | gum format -t template&#xA;&#xA;# Display your favorite emojis!&#xA;echo &#39;I &lt;span&gt;❤️&lt;/span&gt; Bubble Gum &lt;span&gt;🍬&lt;/span&gt;&#39; | gum format -t emoji&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on template helpers, see the &lt;a href=&#34;https://github.com/muesli/termenv#template-helpers&#34;&gt;Termenv docs&lt;/a&gt;. For a full list of named emojis see the &lt;a href=&#34;https://api.github.com/emojis&#34;&gt;GitHub API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/format.gif&#34; width=&#34;600&#34; alt=&#34;Running gum format for different types of formats&#34;&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/gum/main/examples/&#34;&gt;examples&lt;/a&gt; directory for more real world use cases.&lt;/p&gt; &#xA;&lt;p&gt;How to use &lt;code&gt;gum&lt;/code&gt; in your daily workflows:&lt;/p&gt; &#xA;&lt;h4&gt;Write a commit message&lt;/h4&gt; &#xA;&lt;p&gt;Prompt for input to write git commit messages with a short summary and longer details with &lt;code&gt;gum input&lt;/code&gt; and &lt;code&gt;gum write&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bonus points: use &lt;code&gt;gum filter&lt;/code&gt; with the &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/#summary&#34;&gt;Conventional Commits Specification&lt;/a&gt; as a prefix for your commit message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &#34;$(gum input --width 50 --placeholder &#34;Summary of changes&#34;)&#34; \&#xA;           -m &#34;$(gum write --width 80 --placeholder &#34;Details of changes&#34;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Open files in your &lt;code&gt;$EDITOR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;gum filter&lt;/code&gt; will display a list of all files (searched recursively) through your current directory, with some sensible ignore settings (&lt;code&gt;.git&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;). You can use this command to easily to pick a file and open it in your &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$EDITOR $(gum filter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Connect to a TMUX session&lt;/h4&gt; &#xA;&lt;p&gt;Pick from a running &lt;code&gt;tmux&lt;/code&gt; session and attach to it. Or, if you&#39;re already in a &lt;code&gt;tmux&lt;/code&gt; session, switch sessions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SESSION=$(tmux list-sessions -F \#S | gum filter --placeholder &#34;Pick session...&#34;)&#xA;tmux switch-client -t $SESSION || tmux attach -t $SESSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/pick-tmux-session.gif&#34; width=&#34;600&#34; alt=&#34;Picking a tmux session with gum filter&#34;&gt; &#xA;&lt;h4&gt;Pick commit hash from your Git history&lt;/h4&gt; &#xA;&lt;p&gt;Filter through your git history searching for commit messages, copying the commit hash of the commit you select.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git log --oneline | gum filter | cut -d&#39; &#39; -f1 # | copy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/pick-commit.gif&#34; width=&#34;600&#34; alt=&#34;Picking a commit with gum filter&#34;&gt; &#xA;&lt;h4&gt;Choose packages to uninstall&lt;/h4&gt; &#xA;&lt;p&gt;List all packages installed by your package manager (we&#39;ll use &lt;code&gt;brew&lt;/code&gt;) and choose which packages to uninstall.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew list | gum choose --no-limit | xargs brew uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Choose branches to delete&lt;/h4&gt; &#xA;&lt;p&gt;List all branches and choose which branches to delete.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git branch | cut -c 3- | gum choose --no-limit | xargs git branch -D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.technology/@charm&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/slack&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/gum/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trustwallet/assets</title>
    <updated>2022-08-01T01:31:41Z</updated>
    <id>tag:github.com,2022-08-01:/trustwallet/assets</id>
    <link href="https://github.com/trustwallet/assets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive, up-to-date collection of information about several thousands (!) of crypto tokens.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trust Wallet Assets Info&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/trustwallet/assets/workflows/Check/badge.svg?sanitize=true&#34; alt=&#34;Check&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Trust Wallet token repository is a comprehensive, up-to-date collection of information about several thousands (!) of crypto tokens.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trustwallet.com&#34;&gt;Trust Wallet&lt;/a&gt; uses token logos from this source, alongside a number of other projects.&lt;/p&gt; &#xA;&lt;p&gt;The repository contains token info from several blockchains, info on dApps, staking validators, etc. For every token a logo and optional additional information is available (such data is not available on-chain).&lt;/p&gt; &#xA;&lt;p&gt;Such a large collection can be maintained only through a community effort, so &lt;em&gt;feel free to add your token&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;center&gt;&#xA; &lt;img src=&#34;https://trustwallet.com/assets/images/media/assets/horizontal_blue.png&#34; height=&#34;200&#34;&gt;&#xA;&lt;/center&gt; &#xA;&lt;h2&gt;How to add token&lt;/h2&gt; &#xA;&lt;p&gt;Please note that &lt;strong&gt;brand new tokens are not accepted&lt;/strong&gt;, the projects have to be sound, with information available, and &lt;strong&gt;non-minimal circulation&lt;/strong&gt; (for limit details see &lt;a href=&#34;https://developer.trustwallet.com/assets/requirements&#34;&gt;https://developer.trustwallet.com/assets/requirements&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Assets App&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://assets.trustwallet.com&#34;&gt;Assets web app&lt;/a&gt; can be used for most new token additions (Github account is needed).&lt;/p&gt; &#xA;&lt;h3&gt;Quick starter&lt;/h3&gt; &#xA;&lt;p&gt;Details of the repository structure and contribution guidelines are listed on the &lt;a href=&#34;https://developer.trustwallet.com/assets/new-asset&#34;&gt;Developers site&lt;/a&gt;. Here is a quick starter summary for the most common use case.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For details, see the &lt;a href=&#34;https://developer.trustwallet.com&#34;&gt;Developers site&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://developer.trustwallet.com/assets/repository_details&#34;&gt;Contribution guidelines&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://developer.trustwallet.com/assets/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;There are several scripts available for maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make check&lt;/code&gt; -- Execute validation checks; also used in continuous integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make fix&lt;/code&gt; -- Perform automatic fixes where possible&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make update-auto&lt;/code&gt; -- Run automatic updates from external sources, executed regularly (GitHub action)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make add-token asset_id=c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53&lt;/code&gt; -- Create &lt;code&gt;info.json&lt;/code&gt; file as asset template.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make add-tokenlist asset_id=c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53&lt;/code&gt; -- Adds a token to tokenlist.json.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make add-tokenlist-extended asset_id=c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53&lt;/code&gt; -- Adds a token to tokenlist-extended.json.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;On Checks&lt;/h2&gt; &#xA;&lt;p&gt;This repo contains a set of scripts for verification of all the information. Implemented as Golang scripts, available through &lt;code&gt;make check&lt;/code&gt;, and executed in CI build; checks the whole repo. There are similar check logic implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in assets-management app; for checking changed token files in PRs, or when creating a PR. Checks diffs, can be run from browser environment.&lt;/li&gt; &#xA; &lt;li&gt;in merge-fee-bot, which runs as a GitHub app shows result in PR comment. Executes in a non-browser environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trading pair maintenance&lt;/h2&gt; &#xA;&lt;p&gt;Info on supported trading pairs are stored in &lt;code&gt;tokenlist.json&lt;/code&gt; files. Trading pairs can be updated -- from Uniswap/Ethereum and PancakeSwap/Smartchain -- using update script (and checking in changes). Minimal limit values for trading pair inclusion are set in the &lt;a href=&#34;https://github.com/trustwallet/assets/raw/master/.github/assets.config.yaml&#34;&gt;config file&lt;/a&gt;. There are also options for force-include and force-exclude in the config.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Trust Wallet team allows anyone to submit new assets to this repository. However, this does not mean that we are in direct partnership with all of the projects.&lt;/p&gt; &#xA;&lt;p&gt;Trust Wallet team will reject projects that are deemed as scam or fraudulent after careful review. Trust Wallet team reserves the right to change the terms of asset submissions at any time due to changing market conditions, risk of fraud, or any other factors we deem relevant.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, spam-like behavior, including but not limited to mass distribution of tokens to random addresses will result in the asset being flagged as spam and possible removal from the repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tabler/tabler</title>
    <updated>2022-08-01T01:31:41Z</updated>
    <id>tag:github.com,2022-08-01:/tabler/tabler</id>
    <link href="https://github.com/tabler/tabler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tabler is free and open-source HTML Dashboard UI Kit built on Bootstrap&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tabler/tabler&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tabler/tabler/dev/src/static/logo.svg?sanitize=true&#34; alt=&#34;A premium and open source dashboard template with a responsive and high-quality UI.&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt; A premium and open source dashboard template with a responsive and high-quality UI. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@tabler/core&#34; target=&#34;__blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@tabler/core?color=1864ab&amp;amp;label=Latest+version&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@tabler/core&#34; target=&#34;__blank&#34;&gt;&lt;img alt=&#34;NPM Downloads&#34; src=&#34;https://img.shields.io/npm/dm/@tabler/core?color=1971c2&amp;amp;label=Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://preview.tabler.io&#34; target=&#34;__blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Demo&amp;amp;message=preview&amp;amp;color=228be6&#34; alt=&#34;Tabler preview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tabler/tabler/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/tabler.svg?label=License&amp;amp;message=MIT&amp;amp;color=1c7ed6&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tabler/tabler/archive/dev.zip&#34; target=&#34;__blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Download&amp;amp;message=ZIP&amp;amp;color=339af0&#34; alt=&#34;Tabler preview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tabler/tabler/actions/workflows/preview.yml&#34; target=&#34;__blank&#34;&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://github.com/tabler/tabler/actions/workflows/preview.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tabler/tabler&#34; target=&#34;__blank&#34;&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/tabler/tabler?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/codecalm&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tabler/static/main/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;Tabler is fully responsive and compatible with all modern browsers. Thanks to its modern, user-friendly design you can create a fully functional interface that users will love! Choose the layouts and components you need and customize them to make your design consistent and eye-catching. Every component has been created with attention to detail to make your interface beautiful! &lt;a href=&#34;https://preview.tabler.io&#34;&gt;Show me demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://preview.tabler.io&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tabler/tabler/dev/src/static/tabler-preview.png&#34; alt=&#34;Tabler preview&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve created this admin panel for everyone who wants to create templates based on our pre-made components. Our mission is to deliver a user-friendly, clear and easy administration panel that can be used by both simple websites and sophisticated systems. The only requirement is basic HTML and CSS (and some &lt;a href=&#34;https://github.com/Shopify/liquid/wiki&#34;&gt;Liquid&lt;/a&gt;) knowledge — as a reward, you&#39;ll be able to manage and visualise different types of data in the easiest possible way!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsive:&lt;/strong&gt; With the support for mobile, tablet and desktop displays, it doesn’t matter what device you’re using. Tabler is responsive in all major browsers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross Browser:&lt;/strong&gt; Our theme works perfectly with the latest Chrome, Firefox+, latest Safari, Opera, Edge and mobile browsers. We work hard to to provide continuous support for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTML5 &amp;amp; CSS3:&lt;/strong&gt; We use only modern web technologies, such as HTML5 and CSS3. Our theme includes some subtle CSS3 animations, which will help you attract attention.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clean Code:&lt;/strong&gt; We followed Bootstrap’s guidelines carefully to make your integration as easy as possible. All code is handwritten and W3C valid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Demo pages&lt;/strong&gt;: Tabler features over 20 individual pages using various components, which gives you the freedom to choose and combine. All components can vary in color and styling that you can easily modify using Sass. Sky is the limit!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single Page Application versions:&lt;/strong&gt; &lt;a href=&#34;https://github.com/tabler/tabler-react&#34;&gt;Tabler React&lt;/a&gt; has React components for Tabler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is available as a part of Tabler preview: &lt;a href=&#34;https://preview.tabler.io/docs/&#34;&gt;https://preview.tabler.io/docs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Tabler&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/codecalm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tabler/tabler/main/src/static/sponsor-banner-readme.png?raw=true&#34; alt=&#34;Sponsor Tabler&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up in this README with a link to your website. &lt;a href=&#34;https://opencollective.com/tabler#sponsor&#34;&gt;Become a sponsor!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tabler/tiers/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup environment&lt;/h2&gt; &#xA;&lt;p&gt;To use our build system and run our documentation locally, you&#39;ll need a copy of Tabler&#39;s source files. Follow the steps below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/download/&#34;&gt;Install Node.js&lt;/a&gt;, which we use to manage our dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the root &lt;code&gt;/tabler&lt;/code&gt; directory and run &lt;code&gt;npm install&lt;/code&gt; to install our local dependencies listed in &lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;Install Ruby&lt;/a&gt; - the recommended version is &lt;a href=&#34;https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.6.tar.gz&#34;&gt;2.7.6&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bundler.io&#34;&gt;Install Bundler&lt;/a&gt; with &lt;code&gt;gem install bundler&lt;/code&gt; and finally run &lt;code&gt;bundle install&lt;/code&gt;. It will install all Ruby dependencies, such as &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll and plugins&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;OSX users&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NPM &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install Ruby (2.5.* recommended) &lt;code&gt;brew install ruby @2.5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install bundler &lt;code&gt;gem install bundler&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if bundler get any errors try&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo rm -rf /Library/Developer/CommandLineTools&#xA;sudo xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run NPM &lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows users&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Install Git&lt;/a&gt; in &lt;code&gt;C:\Program Files\git\bin&lt;/code&gt; directory and run &lt;code&gt;npm config set script-shell &#34;C:\\Program Files\\git\\bin\\bash.exe&#34;&lt;/code&gt; to change the default shell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubyinstaller.org/downloads/&#34;&gt;Install Ruby+Devkit&lt;/a&gt; - the recommended version is &lt;a href=&#34;https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.6-1/rubyinstaller-devkit-2.7.6-1-x64.exe&#34;&gt;2.7.6&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/docs/installation/windows/&#34;&gt;Read guide&lt;/a&gt; to get Jekyll up and running without problems.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once you complete the setup, you&#39;ll be able to run the various commands provided from the command line.&lt;/p&gt; &#xA;&lt;h2&gt;Build locally&lt;/h2&gt; &#xA;&lt;p&gt;You need to have &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; installed.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the root &lt;code&gt;/tabler&lt;/code&gt; directory, run installation in the command line:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bundler install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Then execute &lt;code&gt;npm run start-plugins&lt;/code&gt; to start up the application stack.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser, and voilà.&lt;/li&gt; &#xA; &lt;li&gt;Any change in the &lt;code&gt;/src&lt;/code&gt; directory will build the application and refresh the page.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Run &lt;code&gt;npm run build&lt;/code&gt; for reforms a one off build application without refresh. Open &lt;a href=&#34;http://localhost:3001&#34;&gt;http://localhost:3001&lt;/a&gt; to configure the Web server.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Tabler is distributed via npm.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save @tabler/core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN support&lt;/h3&gt; &#xA;&lt;p&gt;All files included in &lt;code&gt;@tabler/core&lt;/code&gt; npm package are available over a CDN.&lt;/p&gt; &#xA;&lt;h4&gt;Javascript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/@tabler/core@latest/dist/js/tabler.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Styles&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/@tabler/core@latest/dist/css/tabler.min.css&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tabler.canny.io/feature-requests&#34;&gt;https://tabler.canny.io/feature-requests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Found a bug or have a feature request? &lt;a href=&#34;https://github.com/tabler/tabler/issues/new&#34;&gt;Please open a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Creators&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Paweł Kuna&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/codecalm&#34;&gt;https://twitter.com/codecalm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codecalm&#34;&gt;https://github.com/codecalm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codecalm.net&#34;&gt;https://codecalm.net&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;img src=&#34;https://opencollective.com/tabler/contributors.svg?width=890&amp;amp;button=false&#34;&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 &lt;a href=&#34;https://opencollective.com/tabler#backer&#34;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tabler#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tabler/tiers/backer.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.chromatic.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/321738/84662277-e3db4f80-af1b-11ea-88f5-91d67a5e59f6.png&#34; width=&#34;153&#34; height=&#34;30&#34; alt=&#34;Chromatic&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.chromatic.com/&#34;&gt;Chromatic&lt;/a&gt; for providing the visual testing platform that helps us review UI changes and catch visual regressions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/tabler/tabler/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>