<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-02T01:28:11Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bregman-arie/sre-checklist</title>
    <updated>2023-08-02T01:28:11Z</updated>
    <id>tag:github.com,2023-08-02:/bregman-arie/sre-checklist</id>
    <link href="https://github.com/bregman-arie/sre-checklist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A checklist of anyone practicing Site Reliability Engineering&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/images/sre_checklist.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸŽ¯&lt;/span&gt; &lt;strong&gt;Repository Purpose&lt;/strong&gt;: Provide teams and individuals an idea on what to take into consideration and what to aspire for in the SRE field and work&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: these checklists are &lt;strong&gt;opinionated&lt;/strong&gt;. They are based on my own opinion and experience and are not universal truth (duh! &lt;span&gt;ðŸ˜„&lt;/span&gt;). So you should definitely doubt anything you read here and you are more than welcome to add your own opinion on the matter, by starting a discussion or proposing a change to the project&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸš§&lt;/span&gt; You may say this repository is still in progress. I wouldn&#39;t treat it as complete source at this point or anything close to that. Contributions are more than welcome!&lt;/p&gt; &#xA;&lt;!-- ALL-TOPICS-LIST:START --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;center&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#team&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/images/logos/team.png&#34; width=&#34;75px;&#34; height=&#34;75px;&#34; alt=&#34;Team&#34;&gt;&lt;br&gt;&lt;b&gt;Team&lt;/b&gt;&lt;br&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#responsibilities&#34;&gt;- Responsibilities&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#skills&#34;&gt;- Skills&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#team&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/images/logos/production.png&#34; width=&#34;75px;&#34; height=&#34;75px;&#34; alt=&#34;Team&#34;&gt;&lt;br&gt;&lt;b&gt;Production&lt;/b&gt;&lt;br&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#requirements&#34;&gt;- Requirements&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#provisioning&#34;&gt;- Provisioning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#git&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/images/logos/git.png&#34; width=&#34;75px;&#34; height=&#34;75px;&#34; alt=&#34;Kubernetes&#34;&gt;&lt;br&gt;&lt;b&gt;Git&lt;/b&gt;&lt;br&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#ci&#34;&gt;- CI&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#kubernetes&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/images/logos/cloud.png&#34; width=&#34;75px;&#34; height=&#34;75px;&#34; alt=&#34;Kubernetes&#34;&gt;&lt;br&gt;&lt;b&gt;Cloud&lt;/b&gt;&lt;br&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#scaling&#34;&gt;- Provisioning&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#kubernetes&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/images/logos/kubernetes.png&#34; width=&#34;75px;&#34; height=&#34;75px;&#34; alt=&#34;Kubernetes&#34;&gt;&lt;br&gt;&lt;b&gt;Kubernetes&lt;/b&gt;&lt;br&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#scaling&#34;&gt;- Scaling&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA;&lt;/center&gt; &#xA;&lt;!-- markdownlint-enable --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-TOPICS-LIST:END --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#team-couple&#34;&gt;Team &lt;span&gt;ðŸ‘«&lt;/span&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#responsibilities&#34;&gt;Responsibilities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#skills&#34;&gt;Skills&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#must&#34;&gt;Must&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#processes&#34;&gt;Processes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#sre-team-goals&#34;&gt;SRE Team Goals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#sre-lead&#34;&gt;SRE Lead&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#new-sre-team-member&#34;&gt;New SRE Team Member&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#production&#34;&gt;Production&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#provisioning&#34;&gt;Provisioning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#resiliency&#34;&gt;Resiliency&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#technologies-computer&#34;&gt;Technologies &lt;span&gt;ðŸ’»&lt;/span&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#git-repositories&#34;&gt;Git Repositories&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#ci&#34;&gt;CI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#automation&#34;&gt;Automation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#cloud&#34;&gt;Cloud&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#provisioning-1&#34;&gt;Provisioning&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#tracking-and-monitoring&#34;&gt;Tracking and Monitoring&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#accounts&#34;&gt;Accounts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#reliability&#34;&gt;Reliability&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#kubernetes&#34;&gt;Kubernetes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#resource-management&#34;&gt;Resource Management&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#cicd&#34;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#cluster-management&#34;&gt;Cluster Management&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#gitops---argocd&#34;&gt;GitOps - ArgoCD&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#git-repositories-1&#34;&gt;Git Repositories&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#gitops-management&#34;&gt;GitOps Management&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#sync-strategy&#34;&gt;Sync Strategy&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#monitoring&#34;&gt;Monitoring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#chaos-engineering&#34;&gt;Chaos Engineering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#iac&#34;&gt;IaC&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#the-chosen-one&#34;&gt;The Chosen One&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#implementation&#34;&gt;Implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#terraform&#34;&gt;Terraform&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#development-and-cicd&#34;&gt;Development and CI/CD&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#state&#34;&gt;State&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#terraform-projects-file-structure&#34;&gt;Terraform Projects File Structure&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#terraform-code&#34;&gt;Terraform Code&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#cloud-1&#34;&gt;Cloud&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/#secrets&#34;&gt;Secrets&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;h3&gt;Responsibilities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Decide on responsibilities&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Common &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Infrastructure management&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Monitoring&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Incident Management&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Infra and Reliability related automation&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Arguable &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; App Performance - Arguable because some organizations treat it as dev responsibility&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Documented/Written&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure to write down the responsibilities of the team somewhere. That will be useful for many things like new members joining, recruiting, clarity for the organization and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Skills&lt;/h3&gt; &#xA;&lt;h4&gt;Must&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Coding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It doesn&#39;t matter what language! it seems market right now leaning towards Go mostly, for SRE and Devops, but Python is also quite common and eventually whatever works best for the team is what matters&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Monitoring &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To achieve good reliability and improve it, monitoring should be performed continuously. This makes it to quite critical skill to own&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CI/CD &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CI/CD today is integrated in every development process, whether it&#39;s of the application itself or the automation and infra managed by SRE and DevOps teams&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; IaC, CM &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;IaC and CM is how you manage infra and operations through code. If you do your work as SRE manually and using ad-hoc commands or UI, you probably want to reconsider your approach and obtain some IaC (Infrastructure as Code) and CM (configuration management) skills and knowledge&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;p&gt;Some will argue that the following skills and topics shouldn&#39;t be optional and are 100% must, but in my personal view they very much depend on your responsibilities as SRE and your work environment. If your environment consists mostly of bare metal (physical) servers for example and there are no containers, then why containers is a must for you?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cloud&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Virtualization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Processes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Incident Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There must be a well defined process to how incidents are managed. Some thoughts: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Where incidents are reported/raised?&lt;/li&gt; &#xA;     &lt;li&gt;Who monitors the alerts at any given point of time?&lt;/li&gt; &#xA;     &lt;li&gt;Do you need 100% time coverage?&lt;/li&gt; &#xA;     &lt;li&gt;Is there any team that gets the alerts before the SRE team and tries to handle the issue?&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Is the process automated? &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Do you need to manually open a ticket?&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Do you need to go to incidents platform/page or do you get an alert?&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Do you schedule a meeting to talk about&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SRE Team Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Set goals &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Define SLO (Service Level Objective)&lt;/li&gt; &#xA;   &lt;li&gt;100% reliability is not a good goal! (not sustainable + not feasible. One example: maybe you can drive 100% reliability for the service you own, but most of the time not for its dependencies)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SRE Lead&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Is there an onboarding page for SREs joining the team?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Schedule 1:1 meeting with team (probably...manager or lead? TBD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Identify Possible Gaps. Few things to watch our for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Does development team waits on SRE for infra related operations?&lt;/li&gt; &#xA;   &lt;li&gt;Basically going over other check lists in this page :)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Identify SRE team maturity and work on improving it &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Step 1: Operations: SRE is focused on resolving issues, dealing with requests &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;At this step you&#39;ll be mainly focused on making sure you and the team are able to respond to any issue raised&lt;/li&gt; &#xA;     &lt;li&gt;Slowly you&#39;ll automated processes, fixes and move towards step 2&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Step 2: Automation: SRE is moving towards automation and self-service. Providing tooling, documentation, etc. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;In this step you focus on building the mindset of automating fixes, documenting what the team and others parties in the organization should be aware of&lt;/li&gt; &#xA;     &lt;li&gt;This step is probably the most long one. Don&#39;t expect to achieve it in short time, just make sure you have consistent progress towards next step&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Step 3: Product: SRE is focused on improving the product itself - reliability, performances, etc. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Congratulations. Processes are automated, you respond quickly to issue, .., you are living the dream. Now you can go deeper and focus on the product itself&lt;/li&gt; &#xA;     &lt;li&gt;This not for everyone but definitely a feasible step and one to aspire for&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Keep learning ALL THE TIME &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Learn how others are doing it! &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/upgundecha/howtheysre&#34;&gt;https://github.com/upgundecha/howtheysre&lt;/a&gt; - so many good examples!&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;New SRE Team Member&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Welcome :)&lt;/li&gt; &#xA; &lt;li&gt;Have a mentor? Great. If not, ask for one&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Do the onboarding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No onboarding? maybe you can be the first to add one&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Learn about the product &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;What it does?&lt;/li&gt; &#xA;   &lt;li&gt;Is it SaaS? On-Premise? ...&lt;/li&gt; &#xA;   &lt;li&gt;How it&#39;s delivered and deployed?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Time to deep dive into operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;TODO: add some items :)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Production&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; What are the requirements for going to production?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Provisioning&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; How do you provision the infrastructure required for deploying the application? (Terraform, Pulumi, CloudFormation, ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; How to install the application and its dependencies? (Container, Bash Script, Ansible, ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; How to deploy the application or the application service? (k8s, cloud instances)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; How to configure the application? (k8s, Ansible, ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resiliency&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Your app is able to withstand outages (usually by implement multi-region or multi-cloud architectures)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Your app will scale up and down in response to load change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technologies &lt;span&gt;ðŸ’»&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Git Repositories&lt;/h3&gt; &#xA;&lt;h4&gt;CI&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Is there CI for every project? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Linting and Styling&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Unit tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; E2E testing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Security&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Least Privilege and Zero Trust &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make sure only people from team/company have access to the repositories&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Automation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This is quite advanced but still, you may want to consider automating repositories creation and access control (using technologies like Terraform or programming languages, you can automate fully the process of repositories management)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cloud&lt;/h3&gt; &#xA;&lt;h4&gt;Provisioning&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Resources managed through IaC technologies such as Terrform, Pulumi, etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If at any point you need restore you entire infrastructure you have the code to do so and can perform it quite quickly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tracking and Monitoring&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Resources are tagged, labeled &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Env (e.g. staging, prod, dev)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Owner (e.g. team)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Accounts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Separate &lt;strong&gt;accounts&lt;/strong&gt; for dev, staging, production, ... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Why? better isolation, granular and accurate authentication and authorization, reporting per env, ...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Resources&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Resources Quotas are set (no one wants to hit high bills)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Important resources are protected from being removed - whether directly, using internal cleanup tooling or any other method &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One option: Prevent allowing to delete a resource if there is no label called &#39;can_be_deleted&#39; on it&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Another option: Enforce users to write the resource name when removing it (this is something that is already implemented by some cloud providers, but you can implement in your tooling as well)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reliability&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No single point of failure &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Resources deployed across availability zones, regions, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;h4&gt;Resource Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Apply/Add labels for every type of resources. You may use this &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels&#34;&gt;page&lt;/a&gt; as a suggestion to which labels you should be adding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Every workload has requests defined for CPU and memory (this ensures the workload gets the resources it requires and it&#39;s scheduled on the right node)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Every workload has limits defined for memory (but NOT CPU)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CI/CD&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CI/CD for Cluster bootstraping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CD process for manifests/configurations (using something like Flux, ArgoCD) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make sure cluster bootstraping (the process of preparing the cluster) is managed fully using GitOps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cluster Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cluster for each environment? Dev, QA, Staging, Production &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Per region? Per cloud? How distributed your environment should be?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cluster Policy Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Networking Policies&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Storage Policies&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Scaling&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cluster Scaling &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Choose between manually managing scaling or completely managed scaling&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For different reasons, you might want to consider setting minimum node and max nodes for your node pool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Application/Pod Scaling &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; VPA (Vertical Pod Autoscaler)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; HPA (Horizontal)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Chaos Engineering&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Choose Chaos Engineering framework that is compatible with Kubernetes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://chaos-mesh.org&#34;&gt;Chaos-Mesh&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://litmuschaos.github.io/litmus&#34;&gt;Litmus Experiments&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GitOps - ArgoCD&lt;/h3&gt; &#xA;&lt;h4&gt;Git Repositories&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Infra code (Manifests, Configurations, etc.) is in a separate repository (and not in application repository)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GitOps Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;GitOps adopted for GitOps agents themselves and not only for app related code and infra&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;DON&#39;T install ArgoCD with kubectl commands&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Helm chart not recommended as it lags behind official releases of new ArgoCD releases&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Consider:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hosted Argo CD instance (pros: maintenance is on others. cons: make sure you have some money in the wallet)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ArgoCD for managing ArgoCD (pros: easy DR, rollbacks, ... and full audit and changelog. cons: maintenance) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Consider using &lt;a href=&#34;https://argocd-autopilot.readthedocs.io/en/stable&#34;&gt;Argo CD Pilot&lt;/a&gt; for that which is &#34;opinionated way of installing Argo-CD and managing GitOps repositories&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Think about:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One ArgoCD to control multiple clusters (why not: single point of failure)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Argo CD per cluster (why not: a lot of maintenance and basically over complexity)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sync Strategy&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto Prune (resources deleted when files/content deleted)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Self-heal (cluster state corrected based on Git state and when manual changes done to the cluster)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Choose monitoring solution &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you can afford it, consider going for ready monitoring solutions like DataDog, NewRelic, ...&lt;/li&gt; &#xA;   &lt;li&gt;Be aware of maintenance and how much time you are willing to invest in developing and maintaining monitoring solution&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Alerts/Monitors &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Critical alerts defined&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Team gets notifications on critical alerts (Slack, Phone, Email, ... perhaps all. whatever works best for the team)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Incident Management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Dashboards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chaos Engineering&lt;/h3&gt; &#xA;&lt;p&gt;The interesting topic of ensuring your environment can withstand unexpected disruptions&lt;/p&gt; &#xA;&lt;p&gt;TODO: insert a list of steps to go towards the process of establishing and integrating chaos engineering in your environments&lt;/p&gt; &#xA;&lt;h3&gt;IaC&lt;/h3&gt; &#xA;&lt;h4&gt;The Chosen One&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Things to consider when choosing IaC technology: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Maturity (new vs. well established and known)&lt;/li&gt; &#xA;   &lt;li&gt;Community and support&lt;/li&gt; &#xA;   &lt;li&gt;Number of integrations, plugins, providers, modules, ...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implementation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Follow DRY (Don&#39;t Repeat Yourself) principle as in make sure there are no code duplication so when you change parameter&#39;s value for example, you don&#39;t need to change it in two different place&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Readable code - use naming conventions, formatting, ... make sure anyone can read the code and doesn&#39;t suffer much in doing so :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Terraform&lt;/h3&gt; &#xA;&lt;h4&gt;Development and CI/CD&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CI pipeline to test Terraform changes (syntax, lint, ...) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consider inserting cost considerations (e.g. test whether a change will raise the bill significantly if you are using a public cloud)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CD pipeline to deploy/apply Terraform changes after the change is merged&lt;/li&gt; &#xA; &lt;li&gt;To apply changes as part of a pull request (without merging a change) you can use something like &lt;a href=&#34;https://www.runatlantis.io&#34;&gt;Atlantis&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This way you can avoid using local configurations and credentials&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Needless to say, but once you started to use Terraform in your org, you should use only that and not allow users to make changes manually in the providers you are using (that will lead to errors when running &lt;code&gt;terraform apply&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;State&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Stored in a private secured location &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Encrypted&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Public access blocked&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Stored in a shared location as it may be updated by different team members&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Backed up (e.g. by having versioning)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Never edited directly/manually (as it should be managed and updated by Terraform itself as part of the Terraform lifecycle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Terraform Projects File Structure&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Separate directory for each environment (staging, production, ...)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Separate backend for each environment (as you don&#39;t want share the same authentication and access controls for all environments)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Separate directory in each environment for each component and application&lt;/p&gt; &lt;pre&gt;&lt;code&gt;staging/&#xA;  networking/&#xA;  applications/&#xA;  databases/&#xA;&#xA;production/&#xA;  networking/&#xA;  applications/&#xA;    web-app-1/&#xA;    web-app-2/&#xA;  databases/&#xA;    mongo/&#xA;    mysql/&#xA;&#xA;global/&#xA;  user_access_management/&#xA;&#xA;modules/&#xA;  applications/&#xA;    web-app-1/...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;You don&#39;t put everything in main.tf&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Terraform configuration files themselves can be organized in many ways&lt;/li&gt; &#xA;   &lt;li&gt;Possible files: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;main.tf&lt;/li&gt; &#xA;     &lt;li&gt;outputs.tf&lt;/li&gt; &#xA;     &lt;li&gt;variables.tf&lt;/li&gt; &#xA;     &lt;li&gt;providers.tf&lt;/li&gt; &#xA;     &lt;li&gt;dependencies.tf&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Files can be further divided (avoid managing very long files)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Terraform Code&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Variables have description (to document what they are used for)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Set lifecycle &#34;prevent_destroy&#34; on resources that should never be deleted (e.g. Terraform state source like S3 bucket)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try not including shell scripts inline (some tend to grow quite a lot over time). Use instead templatefile function to render a script from a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No hardcoded repeated values (common examples are ports, CIDR blocks, etc.). Instead use the concept of &lt;code&gt;locals&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Prefer using &lt;code&gt;for_each&lt;/code&gt; instead of &lt;code&gt;count&lt;/code&gt;. &lt;code&gt;count&lt;/code&gt; is very limited in modifying lists as it uses list position/index to rely on while &lt;code&gt;for_each&lt;/code&gt; is map, set based so it based on specific keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Consistent naming, code style conventions and formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Set tagging standards &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Decide on which tags to use. Some ideas: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;owner (team, department, ...)&lt;/li&gt; &#xA;     &lt;li&gt;generted_by/managed_by/... = &#34;terraform&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Rather than specifying tags for each resources, consider setting them at provder level with &lt;code&gt;default_tags&lt;/code&gt;. This will help you manage tags at scale&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Modules&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Avoid duplication of Terraform code/configuration by using modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try to make modules reusable as much as possible &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Don&#39;t include provider code in a reusable module. Different teams and organizations can use different provider versions and constraints (e.g. different default tags)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Avoid hardcoding values, especially in the case reusable modules. To make them reusable, values will have to come from input variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Consider using only separate resources in a module and not inline blocks as they may limit you at some point or another when reusing the module&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Don&#39;t use relative paths! use &lt;code&gt;path references&lt;/code&gt; (e.g. &lt;code&gt;path.module&lt;/code&gt;, &lt;code&gt;path.root&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Try avoiding using latest version of a module. Instead stick for example to tags. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Branches can be also used, but since anyone can introduce a change to them, they considered less stable than tags&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recommended repositories layout: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Separate Repository for modules&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Separate Repository for environments (this repository makes use of the modules repository mentioned above)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Consider using Git tags &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; They can be used for specifying specific versions of modules&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cloud&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Don&#39;t hardcode image IDs (it&#39;s hard to maintain long term). Instead use filters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;data &#34;cloud_image&#34; &#34;image_data&#34; {&#xA;  provider = ...&#xA;  filter {&#xA;    name = &#34;name&#34;&#xA;    values = [&#34;some-image-you-would-like-to-use&#34;]&#xA;}&#xA;&#xA;resource &#34;some_instance&#34; &#34;instance&#34; {&#xA;  image = data.cloud_image.image_data.id&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Secrets&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Basics!&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; DON&#39;T store credentials in Terraform configuration as it&#39;s highly insecure&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Eventually sensitive data will end up in your state file, for this reason make sure it&#39;s encrypted and only visible to those who should be able to access it &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Same applies for plan files&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Provider Credentials&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For local Terraform work/development, you can use generic secret-management tools/CLIs like 1Password or provider-specific options like aws-vault&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For CI/CD that&#39;s highly depends on the CI/CD solution/service you are using: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GitHub Actions: Use Open ID Connect (OIDC) to establish connection with your provider. You then can specify in your GitHub Actions workflow the following:&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;- uses: aws-actions/configure-aws-credentials@v1&#xA;  with:&#xA;    role-to-assume: arn:aws:iam::someIamRole&#xA;    aws-region: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Jenkins: If Jenkins runs on the provider, you can use the provider access entities (like roles, policies, ...) to grant the instance, on which Jenkins is running, access control&lt;/li&gt; &#xA;   &lt;li&gt;CircleCI: you can use &lt;code&gt;CircleCI Context&lt;/code&gt; and then specify it in your CircleCI config file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;context:&#xA;  - some-context&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Secrets in Terraform Configuration&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Consider how you would like to manage secrets inside Terraform configuration files &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Environment Variables&lt;/strong&gt; - you define Terraform variables (with &lt;code&gt;sensitive = true&lt;/code&gt;) and pass values with environment variables &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;pros: simple to use, no need to store sensitive data inside Terraform code&lt;/li&gt; &#xA;       &lt;li&gt;cons: managed outside of Terraform so tracking, enforcing, managing for different environments, ... is challenging or not feasible&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Encrypted Files&lt;/strong&gt; - encrypting the secret and storing the encrypted secrets in Terraform configurations &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;pros: secrets are encrypted and are of Terraform code and part of the version control system&lt;/li&gt; &#xA;       &lt;li&gt;cons: working this way can be cumbersome (to modify, you first have to decrypt, makes the changes and then encrypt it again). Still holds security risk if someone gets their hands on the decryption key&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Secret Store&lt;/strong&gt; - centralized secret store &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;pros: no plain text secrets in Terraform configurations. Easy to standardize practices and policies around secrets if they are all in the same place&lt;/li&gt; &#xA;       &lt;li&gt;cons: not managed as part of the repository, version control, ... makes it easier to makes mistakes in regards to different environments. Costs&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Logos credits can be found &lt;a href=&#34;https://raw.githubusercontent.com/bregman-arie/sre-checklist/main/credits.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Manisso/fsociety</title>
    <updated>2023-08-02T01:28:11Z</updated>
    <id>tag:github.com,2023-08-02:/Manisso/fsociety</id>
    <link href="https://github.com/Manisso/fsociety" rel="alternate"></link>
    <summary type="html">&lt;p&gt;fsociety Hacking Tools Pack â€“ A Penetration Testing Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fsociety Hacking Tools Pack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-2714/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-2.7-green.svg?style=flat-square&#34; alt=&#34;Python2.7&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Tested%20On-Linux%20%7C%20OSX%20%7C%20Windows%20%7C%20Android-yellowgreen.svg?style=flat-square&#34; alt=&#34;OS&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/automated/jrottenberg/ffmpeg.svg?style=flat-square&#34; alt=&#34;Docker&#34;&gt; &lt;a href=&#34;https://github.com/Manisso/fsociety/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Penetration Testing Framework, you will have every script that a hacker needs. Works with Python 2. For a Python 3 version see our updated version at &lt;a href=&#34;https://github.com/fsociety-team/fsociety&#34;&gt;&lt;code&gt;fsociety-team/fsociety&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fsociety Contains All Tools Used in Mr. Robot Series&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wikipedia.org/wiki/Mr._Robot&#34;&gt;&lt;img src=&#34;http://nikolaskama.me/content/images/2016/07/mr-robot-1.gif&#34; alt=&#34;Mr. Robot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Menu&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Information Gathering&lt;/li&gt; &#xA; &lt;li&gt;Password Attacks&lt;/li&gt; &#xA; &lt;li&gt;Wireless Testing&lt;/li&gt; &#xA; &lt;li&gt;Exploitation Tools&lt;/li&gt; &#xA; &lt;li&gt;Sniffing &amp;amp; Spoofing&lt;/li&gt; &#xA; &lt;li&gt;Web Hacking&lt;/li&gt; &#xA; &lt;li&gt;Private Web Hacking&lt;/li&gt; &#xA; &lt;li&gt;Post Exploitation&lt;/li&gt; &#xA; &lt;li&gt;Contributors&lt;/li&gt; &#xA; &lt;li&gt;Install &amp;amp; Update&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Information Gathering:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nmap&lt;/li&gt; &#xA; &lt;li&gt;Setoolkit&lt;/li&gt; &#xA; &lt;li&gt;Host To IP&lt;/li&gt; &#xA; &lt;li&gt;WPScan&lt;/li&gt; &#xA; &lt;li&gt;CMS Scanner&lt;/li&gt; &#xA; &lt;li&gt;XSStrike&lt;/li&gt; &#xA; &lt;li&gt;Dork - Google Dorks Passive Vulnerability Auditor&lt;/li&gt; &#xA; &lt;li&gt;Scan A server&#39;s Users&lt;/li&gt; &#xA; &lt;li&gt;Crips&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Password Attacks:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cupp&lt;/li&gt; &#xA; &lt;li&gt;Ncrack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wireless Testing:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reaver&lt;/li&gt; &#xA; &lt;li&gt;Pixiewps&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Honeypot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exploitation Tools:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ATSCAN&lt;/li&gt; &#xA; &lt;li&gt;sqlmap&lt;/li&gt; &#xA; &lt;li&gt;Shellnoob&lt;/li&gt; &#xA; &lt;li&gt;Commix&lt;/li&gt; &#xA; &lt;li&gt;FTP Auto Bypass&lt;/li&gt; &#xA; &lt;li&gt;JBoss Autopwn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sniffing &amp;amp; Spoofing:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setoolkit&lt;/li&gt; &#xA; &lt;li&gt;SSLtrip&lt;/li&gt; &#xA; &lt;li&gt;pyPISHER&lt;/li&gt; &#xA; &lt;li&gt;SMTP Mailer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web Hacking:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drupal Hacking&lt;/li&gt; &#xA; &lt;li&gt;Inurlbr&lt;/li&gt; &#xA; &lt;li&gt;Wordpress &amp;amp; Joomla Scanner&lt;/li&gt; &#xA; &lt;li&gt;Gravity Form Scanner&lt;/li&gt; &#xA; &lt;li&gt;File Upload Checker&lt;/li&gt; &#xA; &lt;li&gt;Wordpress Exploit Scanner&lt;/li&gt; &#xA; &lt;li&gt;Wordpress Plugins Scanner&lt;/li&gt; &#xA; &lt;li&gt;Shell and Directory Finder&lt;/li&gt; &#xA; &lt;li&gt;Joomla! 1.5 - 3.4.5 remote code execution&lt;/li&gt; &#xA; &lt;li&gt;Vbulletin 5.X remote code execution&lt;/li&gt; &#xA; &lt;li&gt;BruteX - Automatically brute force all services running on a target&lt;/li&gt; &#xA; &lt;li&gt;Arachni - Web Application Security Scanner Framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Private Web Hacking:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get all websites&lt;/li&gt; &#xA; &lt;li&gt;Get joomla websites&lt;/li&gt; &#xA; &lt;li&gt;Get wordpress websites&lt;/li&gt; &#xA; &lt;li&gt;Control Panel Finder&lt;/li&gt; &#xA; &lt;li&gt;Zip Files Finder&lt;/li&gt; &#xA; &lt;li&gt;Upload File Finder&lt;/li&gt; &#xA; &lt;li&gt;Get server users&lt;/li&gt; &#xA; &lt;li&gt;SQli Scanner&lt;/li&gt; &#xA; &lt;li&gt;Ports Scan (range of ports)&lt;/li&gt; &#xA; &lt;li&gt;Ports Scan (common ports)&lt;/li&gt; &#xA; &lt;li&gt;Get server Info&lt;/li&gt; &#xA; &lt;li&gt;Bypass Cloudflare&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Post Exploitation:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell Checker&lt;/li&gt; &#xA; &lt;li&gt;POET&lt;/li&gt; &#xA; &lt;li&gt;Weeman&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Installation &lt;a href=&#34;https://wikipedia.org/wiki/Linux&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://fr.wikipedia.org/wiki/Linux&#34;&gt;&lt;img src=&#34;http://icons.iconarchive.com/icons/dakirby309/simply-styled/32/OS-Linux-icon.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(wget -qO- https://git.io/vAtmB)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;Termux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(wget -qO- https://git.io/vAtmB)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow this video &lt;a href=&#34;https://www.youtube.com/watch?v=JwK5oOBjpgQ&#34;&gt;Arif - Tech&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation &lt;a href=&#34;https://wikipedia.org/wiki/Microsoft_Windows&#34;&gt;Windows&lt;/a&gt;&lt;a href=&#34;https://fr.wikipedia.org/wiki/Microsoft_Windows&#34;&gt;&lt;img src=&#34;http://icons.iconarchive.com/icons/yootheme/social-bookmark/32/social-windows-button-icon.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Download Linux Bash Like &lt;a href=&#34;https://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://www.python.org/downloads/release/python-2714/&#34;&gt;Python&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use Google Cloud Console &lt;a href=&#34;https://console.cloud.google.com/cloudshell/editor?project=&amp;amp;pli=1&amp;amp;shellonly=true&#34;&gt;Cloud Shell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or use free Ubuntu VPS &lt;a href=&#34;https://c9.io/&#34;&gt;c9.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Docker_(software)&#34;&gt;Docker&lt;/a&gt; Usage &lt;img src=&#34;https://png.icons8.com/color/50/000000/docker.png&#34; alt=&#34;docker logo&#34;&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Dependecies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker-compose&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build&#xA;docker-compose up -d&#xA;docker-compose exec fsociety fsociety&#xA;docker-compose down # destroys instance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/URj2nvpbYpeJyJe43KlASZ7fz&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/URj2nvpbYpeJyJe43KlASZ7fz.png&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/xT0xeFxyHAKirrLa24/giphy.gif&#34; alt=&#34;alt logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alexcreek&#34;&gt;alexcreek&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mswell&#34;&gt;mswell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Ev3&#34;&gt;Ev3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/huangsam&#34;&gt;huangsam&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RyanFilho&#34;&gt;RyanFilho&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gabru-md&#34;&gt;gabru-md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jdrago999&#34;&gt;jdrago999&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CRO-THEHACKER&#34;&gt;CRO-TheHacker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Manisso/fsociety/raw/master/LICENSE&#34;&gt;MIT Licence&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>netbox-community/netbox</title>
    <updated>2023-08-02T01:28:11Z</updated>
    <id>tag:github.com,2023-08-02:/netbox-community/netbox</id>
    <link href="https://github.com/netbox-community/netbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The premier source of truth powering network automation. Open source under Apache 2. Public demo: https://demo.netbox.dev&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/netbox_logo.svg?sanitize=true&#34; width=&#34;400&#34; alt=&#34;NetBox logo&#34;&gt; &#xA; &lt;p&gt;The premiere source of truth powering network automation&lt;/p&gt; &#xA; &lt;img src=&#34;https://github.com/netbox-community/netbox/workflows/CI/badge.svg?branch=master&#34; alt=&#34;CI status&#34;&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;NetBox is the leading solution for modeling and documenting modern networks. By combining the traditional disciplines of IP address management (IPAM) and datacenter infrastructure management (DCIM) with powerful APIs and extensions, NetBox provides the ideal &#34;source of truth&#34; to power network automation. Available as open source software under the Apache 2.0 license, NetBox serves as the cornerstone for network automation in thousands of organizations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Physical infrastructure:&lt;/strong&gt; Accurately model the physical world, from global regions down to individual racks of gear. Then connect everything - network, console, and power!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern IPAM:&lt;/strong&gt; All the standard IPAM functionality you expect, plus VRF import/export tracking, VLAN management, and overlay support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data circuits:&lt;/strong&gt; Confidently manage the delivery of critical circuits from various service providers, modeled seamlessly alongside your own infrastructure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Power tracking:&lt;/strong&gt; Map the distribution of power from upstream sources to individual feeds and outlets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Organization:&lt;/strong&gt; Manage tenant and contact assignments natively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful search:&lt;/strong&gt; Easily find anything you need using a single global search function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive logging:&lt;/strong&gt; Leverage both automatic change logging and user-submitted journal entries to track your network&#39;s growth over time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Endless customization:&lt;/strong&gt; Custom fields, custom links, tags, export templates, custom validation, reports, scripts, and more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible permissions:&lt;/strong&gt; An advanced permissions systems enables very flexible delegation of permissions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations:&lt;/strong&gt; Easily connect NetBox to your other tooling via its REST &amp;amp; GraphQL APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugins:&lt;/strong&gt; Not finding what you need in the core application? Try one of many community plugins - or build your own!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/media/screenshots/netbox-ui.png&#34; alt=&#34;Screenshot of NetBox UI&#34; title=&#34;NetBox UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/netbox-community/netbox&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/deploy/deploy1.png&#34; alt=&#34;NetBox logo&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/netbox-community/netbox-docker&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/deploy/deploy2.png&#34; alt=&#34;Docker logo&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://netboxlabs.com/netbox-cloud/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/deploy/deploy3.png&#34; alt=&#34;NetBox Labs logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just want to explore? Check out &lt;a href=&#34;https://demo.netbox.dev/&#34;&gt;our public demo&lt;/a&gt; right now!&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://docs.netbox.dev&#34;&gt;official documentation&lt;/a&gt; offers a comprehensive introduction.&lt;/li&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://github.com/netbox-community/netbox/wiki/Community-Contributions&#34;&gt;our wiki&lt;/a&gt; for even more projects to get the most out of NetBox!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/NetBoxOfficial&#34;&gt;@NetBoxOfficial&lt;/a&gt; on Twitter!&lt;/li&gt; &#xA; &lt;li&gt;Join the conversation on &lt;a href=&#34;https://github.com/netbox-community/netbox/discussions&#34;&gt;the discussion forum&lt;/a&gt; and &lt;a href=&#34;https://netdev.chat/&#34;&gt;Slack&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Already a power user? You can &lt;a href=&#34;https://github.com/netbox-community/netbox/issues/new?assignees=&amp;amp;labels=type%3A+feature&amp;amp;template=feature_request.yaml&#34;&gt;suggest a feature&lt;/a&gt; or &lt;a href=&#34;https://github.com/netbox-community/netbox/issues/new?assignees=&amp;amp;labels=type%3A+bug&amp;amp;template=bug_report.yaml&#34;&gt;report a bug&lt;/a&gt; on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Contributions from the community are encouraged and appreciated! Check out our &lt;a href=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Stats&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/netbox-community/netbox/commits&#34;&gt;&lt;img src=&#34;https://images.repography.com/29023055/netbox-community/netbox/recent-activity/whQtEr_TGD9PhW1BPlhlEQ5jnrgQ0KJpm-LlGtpoGO0/3Kx_iWUSBRJ5-AI4QwJEJWrUDEz3KrX2lvh8aYE0WXY_timeline.svg?sanitize=true&#34; alt=&#34;Timeline graph&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/netbox-community/netbox/issues&#34;&gt;&lt;img src=&#34;https://images.repography.com/29023055/netbox-community/netbox/recent-activity/whQtEr_TGD9PhW1BPlhlEQ5jnrgQ0KJpm-LlGtpoGO0/3Kx_iWUSBRJ5-AI4QwJEJWrUDEz3KrX2lvh8aYE0WXY_issues.svg?sanitize=true&#34; alt=&#34;Issues graph&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/netbox-community/netbox/pulls&#34;&gt;&lt;img src=&#34;https://images.repography.com/29023055/netbox-community/netbox/recent-activity/whQtEr_TGD9PhW1BPlhlEQ5jnrgQ0KJpm-LlGtpoGO0/3Kx_iWUSBRJ5-AI4QwJEJWrUDEz3KrX2lvh8aYE0WXY_prs.svg?sanitize=true&#34; alt=&#34;Pull requests graph&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/netbox-community/netbox/graphs/contributors&#34;&gt;&lt;img src=&#34;https://images.repography.com/29023055/netbox-community/netbox/recent-activity/whQtEr_TGD9PhW1BPlhlEQ5jnrgQ0KJpm-LlGtpoGO0/3Kx_iWUSBRJ5-AI4QwJEJWrUDEz3KrX2lvh8aYE0WXY_users.svg?sanitize=true&#34; alt=&#34;Top contributors&#34;&gt;&lt;/a&gt; &#xA; &lt;br&gt;Stats via &#xA; &lt;a href=&#34;https://repography.com&#34;&gt;Repography&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://netboxlabs.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/sponsors/netbox_labs.png&#34; alt=&#34;NetBox Labs&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://try.digitalocean.com/developer-cloud&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/sponsors/digitalocean.png&#34; alt=&#34;DigitalOcean&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://sentry.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/sponsors/sentry.png&#34; alt=&#34;Sentry&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://metal.equinix.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/sponsors/equinix.png&#34; alt=&#34;Equinix Metal&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://onemindservices.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/netbox-community/netbox/images/sponsors/onemind_services.png&#34; alt=&#34;OneMind Services&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/media/screenshots/home-dark.png&#34; alt=&#34;Screenshot of main page (dark mode)&#34; title=&#34;Main page (dark mode)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/media/screenshots/rack.png&#34; alt=&#34;Screenshot of rack elevation&#34; title=&#34;Rack elevation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/media/screenshots/prefixes-list.png&#34; alt=&#34;Screenshot of prefixes hierarchy&#34; title=&#34;Prefixes hierarchy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/media/screenshots/cable-trace.png&#34; alt=&#34;Screenshot of cable trace&#34; title=&#34;Cable tracing&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>