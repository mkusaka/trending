<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-25T01:29:16Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Effect-TS/effect</title>
    <updated>2025-06-25T01:29:16Z</updated>
    <id>tag:github.com,2025-06-25:/Effect-TS/effect</id>
    <link href="https://github.com/Effect-TS/effect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build production-ready applications in TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Effect Monorepo&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An ecosystem of tools to build robust applications in TypeScript&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to Effect, a powerful TypeScript framework that provides a fully-fledged functional effect system with a rich standard library.&lt;/p&gt; &#xA;&lt;p&gt;Effect consists of several packages that work together to help build robust TypeScript applications. The core package, &lt;code&gt;effect&lt;/code&gt;, serves as the foundation of the framework, offering primitives for managing side effects, ensuring type safety, and supporting concurrency.&lt;/p&gt; &#xA;&lt;h2&gt;Monorepo Structure&lt;/h2&gt; &#xA;&lt;p&gt;The Effect monorepo is organized into multiple packages, each extending the core functionality. Below is an overview of the packages included:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;effect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core package&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/effect/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/ai&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AI utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/ai/ai/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/ai-openai&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenAI utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/ai/openai/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/ai-anthropic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anthropic utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/ai/anthropic/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/cli&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CLI utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/cli/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/cluster&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Distributed computing tools&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/cluster/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/cluster-browser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cluster utilities for the browser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/cluster-browser/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/cluster-node&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cluster utilities for &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/cluster-node/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/cluster-workflow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Workflow management for clusters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/cluster-worflow/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/experimental&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Experimental features and APIs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/experimental/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/opentelemetry&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/opentelemetry/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/platform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cross-platform runtime utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/platform/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/platform-browser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Platform utilities for the browser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/platform-browser/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/platform-bun&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Platform utilities for &lt;a href=&#34;https://bun.sh/&#34;&gt;Bun&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/platform-bun/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/platform-node&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Platform utilities for &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/platform-node/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/platform-node-shared&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shared utilities for &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/platform-node-shared/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/printer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;General-purpose printing utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/printer/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/printer-ansi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ANSI-compatible printing utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/printer-ansi/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/rpc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remote procedure call (RPC) utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/rpc/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/rpc-http&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HTTP-based RPC utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/rpc-http/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SQL database utilities&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-clickhouse&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation for &lt;a href=&#34;https://clickhouse.com/&#34;&gt;ClickHouse&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-clickhouse/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-d1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation for &lt;a href=&#34;https://developers.cloudflare.com/d1/&#34;&gt;Cloudflare D1&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-d1/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-drizzle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation for &lt;a href=&#34;https://orm.drizzle.team/&#34;&gt;Drizzle&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-drizzle/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-kysely&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation for &lt;a href=&#34;https://kysely.dev/&#34;&gt;Kysely&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-kysely/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-libsql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;@libsql/client&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-libsql/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-mssql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the mssql &lt;code&gt;tedious&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-mssql/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-mysql2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;mysql2&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-mysql2/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-pg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;postgres.js&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-pg/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-sqlite-bun&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;bun:sqlite&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-sqlite-bun/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-sqlite-do&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation for Cloudflare Durable Objects sqlite storage.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-sqlite-do/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-sqlite-node&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;better-sqlite3&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-sqlite-node/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-sqlite-react-native&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;react-native-quick-sqlite&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-sqlite-react-native/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/sql-sqlite-wasm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;@effect/sql&lt;/code&gt; implementation using the &lt;code&gt;@sqlite.org/sqlite-wasm&lt;/code&gt; library.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/sql-sqlite-wasm/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/typeclass&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functional programming type classes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/typeclass/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@effect/vitest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Testing utilities for &lt;a href=&#34;https://vitest.dev/&#34;&gt;Vitest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Effect-TS/effect/raw/main/packages/vitest/README.md&#34;&gt;README&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;For detailed information and usage examples, visit the &lt;a href=&#34;https://www.effect.website/&#34;&gt;Effect website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;For a complete API reference of the core package &lt;code&gt;effect&lt;/code&gt;, see the &lt;a href=&#34;https://effect-ts.github.io/effect/&#34;&gt;Effect API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction to Effect&lt;/h2&gt; &#xA;&lt;p&gt;Get started with Effect by watching our introductory video on YouTube. This video provides an overview of Effect and its key features:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ViSiXfBKElQ&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/ViSiXfBKElQ/maxresdefault.jpg&#34; alt=&#34;Introduction to Effect&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Connect with Our Community&lt;/h1&gt; &#xA;&lt;p&gt;Join the Effect community on Discord to connect with other developers, ask questions, and share insights: &lt;a href=&#34;https://discord.gg/hdt7t7jpvn&#34;&gt;Join Effect&#39;s Discord Community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing via Pull Requests&lt;/h1&gt; &#xA;&lt;p&gt;We welcome contributions via pull requests! Here are some guidelines to help you get started:&lt;/p&gt; &#xA;&lt;h2&gt;Setting Up Your Environment&lt;/h2&gt; &#xA;&lt;p&gt;Begin by forking the repository and clone it to your local machine.&lt;/p&gt; &#xA;&lt;p&gt;Navigate into the cloned repository and create a new branch for your changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure all required dependencies are installed by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install  # Requires pnpm version 10.4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Making Changes&lt;/h2&gt; &#xA;&lt;h3&gt;Implement Your Changes&lt;/h3&gt; &#xA;&lt;p&gt;Make the changes you propose to the codebase. If your changes impact functionality, please &lt;strong&gt;add corresponding tests&lt;/strong&gt; to validate your updates.&lt;/p&gt; &#xA;&lt;h3&gt;Validate Your Changes&lt;/h3&gt; &#xA;&lt;p&gt;Run the following commands to ensure your changes do not introduce any issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm codegen&lt;/code&gt; (optional): Re-generate the package entrypoints in case you have changed the structure of a package or introduced a new module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm check&lt;/code&gt;: Confirm that the code compiles without errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm test&lt;/code&gt;: Execute all unit tests to ensure your changes haven&#39;t broken existing functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm circular&lt;/code&gt;: Check for any circular dependencies in imports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm lint&lt;/code&gt;: Ensure the code adheres to our coding standards. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you encounter style issues, use &lt;code&gt;pnpm lint-fix&lt;/code&gt; to automatically correct some of these.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm test-types&lt;/code&gt;: Run type-level tests. Tests are written using &lt;a href=&#34;https://tstyche.org/&#34;&gt;tstyche&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pnpm docgen&lt;/code&gt;: Ensure the documentation generates correctly and reflects any changes made.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Document Your Changes&lt;/h3&gt; &#xA;&lt;h4&gt;JSDoc Comments&lt;/h4&gt; &#xA;&lt;p&gt;When adding a new feature, it&#39;s important to document your code using JSDoc comments. This helps other developers understand the purpose and usage of your changes. Include at least the following in your JSDoc comments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Short Description&lt;/strong&gt;: Summarize the purpose and functionality of the feature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: Provide a usage example under the &lt;code&gt;@example&lt;/code&gt; tag to demonstrate how to use the feature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Since Version&lt;/strong&gt;: Use the &lt;code&gt;@since&lt;/code&gt; tag to indicate the version in which the feature was introduced. If you&#39;re unsure about the version, please consult with a project maintainer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Category (Optional)&lt;/strong&gt;: You can categorize the feature with the &lt;code&gt;@category&lt;/code&gt; tag to help organize the documentation. If you&#39;re unsure about what category to assign, ask a project maintainer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A HTML utility file, &lt;a href=&#34;https://raw.githubusercontent.com/Effect-TS/effect/main/scripts/jsdocs/code2jsdoc-example.html&#34;&gt;&lt;code&gt;code2jsdoc-example.html&lt;/code&gt;&lt;/a&gt;, has been added to assist with creating JSDoc &lt;code&gt;@example&lt;/code&gt; comments. This web-based interface includes two text areas:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;An input textarea for pasting example code.&lt;/li&gt; &#xA; &lt;li&gt;An output textarea that dynamically generates formatted JSDoc &lt;code&gt;@example&lt;/code&gt; comments.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This utility helps ensure consistent formatting and streamlines the process of documenting examples. See the following example of its usage:&lt;/p&gt; &#xA;&lt;p&gt;Example Input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Effect } from &#34;effect&#34;&#xA;&#xA;console.log(Effect.runSyncExit(Effect.succeed(1)))&#xA;/*&#xA;Output:&#xA;{&#xA;  _id: &#34;Exit&#34;,&#xA;  _tag: &#34;Success&#34;,&#xA;  value: 1&#xA;}&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*&#xA;* @example&#xA;* ```ts&#xA;* import { Effect } from &#34;effect&#34;&#xA;*&#xA;* console.log(Effect.runSyncExit(Effect.succeed(1)))&#xA;* // Output:&#xA;* // {&#xA;* //   _id: &#34;Exit&#34;,&#xA;* //   _tag: &#34;Success&#34;,&#xA;* //   value: 1&#xA;* // }&#xA;* ```&#xA;*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By using this utility, you can save time and maintain consistency in your JSDoc comments, especially for complex examples.&lt;/p&gt; &#xA;&lt;h4&gt;Changeset Documentation&lt;/h4&gt; &#xA;&lt;p&gt;Before committing your changes, document them with a changeset. This process helps in tracking modifications and effectively communicating them to the project team and users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm changeset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During the changeset creation process, you will be prompted to select the appropriate level for your changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;patch&lt;/strong&gt;: Opt for this if you are making small fixes or minor changes that do not affect the library&#39;s overall functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;minor&lt;/strong&gt;: Choose this for new features that enhance functionality but do not disrupt existing features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;major&lt;/strong&gt;: Select this for any changes that result in backward-incompatible modifications to the library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Finalizing Your Contribution&lt;/h2&gt; &#xA;&lt;h3&gt;Commit Your Changes&lt;/h3&gt; &#xA;&lt;p&gt;Once you have documented your changes with a changeset, it’s time to commit them to the repository. Use a clear and descriptive commit message, which could be the same message you used in your changeset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -am &#39;Add some feature&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linking to Issues&lt;/h4&gt; &#xA;&lt;p&gt;If your commit addresses an open issue, reference the issue number directly in your commit message. This helps to link your contribution clearly to specific tasks or bug reports. Additionally, if your commit resolves the issue, you can indicate this by adding a phrase like &lt;code&gt;&#34;, closes #&amp;lt;issue-number&amp;gt;&#34;&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -am &#39;Add some feature, closes #123&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This practice not only helps in tracking the progress of issues but also automatically closes the issue when the commit is merged, streamlining project management.&lt;/p&gt; &#xA;&lt;h3&gt;Push to Your Fork&lt;/h3&gt; &#xA;&lt;p&gt;Push the changes up to your GitHub fork:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a Pull Request&lt;/h3&gt; &#xA;&lt;p&gt;Open a pull request against the appropriate branch on the original repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; branch: For minor patches or bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;next-minor&lt;/code&gt; branch: For new features that are non-breaking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;next-major&lt;/code&gt; branch: For changes that introduce breaking modifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please be patient! We will do our best to review your pull request as soon as possible.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>musistudio/claude-code-router</title>
    <updated>2025-06-25T01:29:16Z</updated>
    <id>tag:github.com,2025-06-25:/musistudio/claude-code-router</id>
    <link href="https://github.com/musistudio/claude-code-router" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Claude Code as the foundation for coding infrastructure, allowing you to decide how to interact with the model while enjoying updates from Anthropic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Router&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a tool for routing Claude Code requests to different models, and you can customize any request.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/screenshoots/claude-code.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Claude Code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g @anthropic-ai/claude-code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Claude Code Router&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g @musistudio/claude-code-router&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start Claude Code by claude-code-router&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ccr code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Configure routing[optional]&lt;br&gt; Set up your &lt;code&gt;~/.claude-code-router/config.json&lt;/code&gt; file like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;OPENAI_API_KEY&#34;: &#34;sk-xxx&#34;,&#xA;  &#34;OPENAI_BASE_URL&#34;: &#34;https://api.deepseek.com&#34;,&#xA;  &#34;OPENAI_MODEL&#34;: &#34;deepseek-chat&#34;,&#xA;  &#34;Providers&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;openrouter&#34;,&#xA;      &#34;api_base_url&#34;: &#34;https://openrouter.ai/api/v1&#34;,&#xA;      &#34;api_key&#34;: &#34;sk-xxx&#34;,&#xA;      &#34;models&#34;: [&#xA;        &#34;google/gemini-2.5-pro-preview&#34;,&#xA;        &#34;anthropic/claude-sonnet-4&#34;,&#xA;        &#34;anthropic/claude-3.5-sonnet&#34;,&#xA;        &#34;anthropic/claude-3.7-sonnet:thinking&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;deepseek&#34;,&#xA;      &#34;api_base_url&#34;: &#34;https://api.deepseek.com&#34;,&#xA;      &#34;api_key&#34;: &#34;sk-xxx&#34;,&#xA;      &#34;models&#34;: [&#34;deepseek-reasoner&#34;]&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;ollama&#34;,&#xA;      &#34;api_base_url&#34;: &#34;http://localhost:11434/v1&#34;,&#xA;      &#34;api_key&#34;: &#34;ollama&#34;,&#xA;      &#34;models&#34;: [&#34;qwen2.5-coder:latest&#34;]&#xA;    }&#xA;  ],&#xA;  &#34;Router&#34;: {&#xA;    &#34;background&#34;: &#34;ollama,qwen2.5-coder:latest&#34;,&#xA;    &#34;think&#34;: &#34;deepseek,deepseek-reasoner&#34;,&#xA;    &#34;longContext&#34;: &#34;openrouter,google/gemini-2.5-pro-preview&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;background&lt;/code&gt;&lt;br&gt; This model will be used to handle some background tasks(&lt;a href=&#34;https://docs.anthropic.com/en/docs/claude-code/costs#background-token-usage&#34;&gt;background-token-usage&lt;/a&gt;). Based on my tests, it doesn’t require high intelligence. I’m using the qwen-coder-2.5:7b model running locally on my MacBook Pro M1 (32GB) via Ollama. If your computer can’t run Ollama, you can also use some free models, such as qwen-coder-2.5:3b.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;think&lt;/code&gt;&lt;br&gt; This model will be used when enabling Claude Code to perform reasoning. However, reasoning budget control has not yet been implemented (since the DeepSeek-R1 model does not support it), so there is currently no difference between using UltraThink and Think modes. It is worth noting that Plan Mode also use this model to achieve better planning results.&lt;br&gt; Note: The reasoning process via the official DeepSeek API may be very slow, so you may need to wait for an extended period of time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;longContext&lt;/code&gt;&lt;br&gt; This model will be used when the context length exceeds 32K (this value may be modified in the future). You can route the request to a model that performs well with long contexts (I’ve chosen google/gemini-2.5-pro-preview). This scenario has not been thoroughly tested yet, so if you encounter any issues, please submit an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;model command&lt;br&gt; You can also switch models within Claude Code by using the &lt;code&gt;/model&lt;/code&gt; command. The format is: &lt;code&gt;provider,model&lt;/code&gt;, like this:&lt;br&gt; &lt;code&gt;/model openrouter,anthropic/claude-3.5-sonnet&lt;/code&gt;&lt;br&gt; This will use the anthropic/claude-3.5-sonnet model provided by OpenRouter to handle all subsequent tasks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support change models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Github Actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More robust plugin support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More detailed logs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support web search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;You can modify or enhance Claude Code’s functionality by installing plugins. The mechanism works by using middleware to modify request parameters — this allows you to rewrite prompts or add/remove tools.&lt;/p&gt; &#xA;&lt;p&gt;To use a plugin, place it in the ~/.claude-code-router/plugins/ directory and specify the plugin name in config.js using the &lt;code&gt;usePlugins&lt;/code&gt; option.like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// ~/.claud-code-router/config.json&#xA;{&#xA;  ...,&#xA;  &#34;usePlugins&#34;: [&#34;notebook-tools-filter&#34;, &#34;toolcall-improvement&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, the following plugins are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;notebook-tools-filter&lt;/strong&gt;&lt;br&gt; This plugin filters out tool calls related to Jupyter notebooks (.ipynb files). You can use it if your work does not involve Jupyter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;toolcall-improvement&lt;/strong&gt;&lt;br&gt; If your LLM doesn’t handle tool usage well (for example, always returning code as plain text instead of modifying files — such as with deepseek-v3), you can use this plugin.&lt;br&gt; This plugin simply adds the following system prompt. If you have a better prompt, you can modify it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## **Important Instruction:**  &#xA;You must use tools as frequently and accurately as possible to help the user solve their problem.  &#xA;Prioritize tool usage whenever it can enhance accuracy, efficiency, or the quality of the response.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Github Actions&lt;/h2&gt; &#xA;&lt;p&gt;You just need to install &lt;code&gt;Claude Code Actions&lt;/code&gt; in your repository according to the &lt;a href=&#34;https://docs.anthropic.com/en/docs/claude-code/github-actions&#34;&gt;official documentation&lt;/a&gt;. For &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;, you can use any string. Then, modify your &lt;code&gt;.github/workflows/claude.yaml&lt;/code&gt; file to include claude-code-router, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Claude Code&#xA;&#xA;on:&#xA;  issue_comment:&#xA;    types: [created]&#xA;  pull_request_review_comment:&#xA;    types: [created]&#xA;  issues:&#xA;    types: [opened, assigned]&#xA;  pull_request_review:&#xA;    types: [submitted]&#xA;&#xA;jobs:&#xA;  claude:&#xA;    if: |&#xA;      (github.event_name == &#39;issue_comment&#39; &amp;amp;&amp;amp; contains(github.event.comment.body, &#39;@claude&#39;)) ||&#xA;      (github.event_name == &#39;pull_request_review_comment&#39; &amp;amp;&amp;amp; contains(github.event.comment.body, &#39;@claude&#39;)) ||&#xA;      (github.event_name == &#39;pull_request_review&#39; &amp;amp;&amp;amp; contains(github.event.review.body, &#39;@claude&#39;)) ||&#xA;      (github.event_name == &#39;issues&#39; &amp;amp;&amp;amp; (contains(github.event.issue.body, &#39;@claude&#39;) || contains(github.event.issue.title, &#39;@claude&#39;)))&#xA;    runs-on: ubuntu-latest&#xA;    permissions:&#xA;      contents: read&#xA;      pull-requests: read&#xA;      issues: read&#xA;      id-token: write&#xA;    steps:&#xA;      - name: Checkout repository&#xA;        uses: actions/checkout@v4&#xA;        with:&#xA;          fetch-depth: 1&#xA;      &#xA;      - name: Prepare Environment&#xA;        run: |&#xA;          curl -fsSL https://bun.sh/install | bash&#xA;          mkdir -p $HOME/.claude-code-router&#xA;          cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; $HOME/.claude-code-router/config.json&#xA;          {&#xA;            &#34;log&#34;: true,&#xA;            &#34;OPENAI_API_KEY&#34;: &#34;${{ secrets.OPENAI_API_KEY }}&#34;,&#xA;            &#34;OPENAI_BASE_URL&#34;: &#34;https://api.deepseek.com&#34;,&#xA;            &#34;OPENAI_MODEL&#34;: &#34;deepseek-chat&#34;&#xA;          }&#xA;          EOF&#xA;        shell: bash&#xA;        &#xA;      - name: Start Claude Code Router&#xA;        run: |&#xA;          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &amp;amp;&#xA;        shell: bash&#xA;&#xA;      - name: Run Claude Code&#xA;        id: claude&#xA;        uses: anthropics/claude-code-action@beta&#xA;        env:&#xA;          ANTHROPIC_BASE_URL: http://localhost:3456&#xA;        with:&#xA;          anthropic_api_key: &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify the contents of &lt;code&gt;$HOME/.claude-code-router/config.json&lt;/code&gt; as needed. GitHub Actions support allows you to trigger Claude Code at specific times, which opens up some interesting possibilities.&lt;/p&gt; &#xA;&lt;p&gt;For example, between 00:30 and 08:30 Beijing Time, using the official DeepSeek API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cost of the &lt;code&gt;deepseek-v3&lt;/code&gt; model is only 50% of the normal time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;deepseek-r1&lt;/code&gt; model is just 25% of the normal time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So maybe in the future, I’ll describe detailed tasks for Claude Code ahead of time and let it run during these discounted hours to reduce costs?&lt;/p&gt; &#xA;&lt;h2&gt;Some tips:&lt;/h2&gt; &#xA;&lt;p&gt;Now you can use deepseek-v3 models directly without using any plugins.&lt;/p&gt; &#xA;&lt;p&gt;If you’re using the DeepSeek API provided by the official website, you might encounter an “exceeding context” error after several rounds of conversation (since the official API only supports a 64K context window). In this case, you’ll need to discard the previous context and start fresh. Alternatively, you can use ByteDance’s DeepSeek API, which offers a 128K context window and supports KV cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/screenshoots/contexterror.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: claude code consumes a huge amount of tokens, but thanks to DeepSeek’s low cost, you can use claude code at a fraction of Claude’s price, and you don’t need to subscribe to the Claude Max plan.&lt;/p&gt; &#xA;&lt;p&gt;Some interesting points: Based on my testing, including a lot of context information can help narrow the performance gap between these LLM models. For instance, when I used Claude-4 in VSCode Copilot to handle a Flutter issue, it messed up the files in three rounds of conversation, and I had to roll everything back. However, when I used claude code with DeepSeek, after three or four rounds of conversation, I finally managed to complete my task—and the cost was less than 1 RMB!&lt;/p&gt; &#xA;&lt;h2&gt;Some articles:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/en/project-motivation-and-how-it-works.md&#34;&gt;Project Motivation and Principles&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/zh/%E9%A1%B9%E7%9B%AE%E5%88%9D%E8%A1%B7%E5%8F%8A%E5%8E%9F%E7%90%86.md&#34;&gt;中文版看这里&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Buy me a coffee&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project helpful, you can choose to sponsor the author with a cup of coffee. Please provide your GitHub information so I can add you to the sponsor list below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/F1F31GN2GM&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/alipay.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/wechat.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the following sponsors:&lt;/p&gt; &#xA;&lt;p&gt;@Simon Leischnig (If you see this, feel free to contact me and I can update it with your GitHub information)&lt;br&gt; &lt;a href=&#34;https://github.com/duanshuaimin&#34;&gt;@duanshuaimin&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/vrgitadmin&#34;&gt;@vrgitadmin&lt;/a&gt;&lt;br&gt; @*o (可通过主页邮箱联系我修改github用户名)&lt;br&gt; &lt;a href=&#34;https://github.com/ceilwoo&#34;&gt;@ceilwoo&lt;/a&gt;&lt;br&gt; @*说 (可通过主页邮箱联系我修改github用户名)&lt;br&gt; @&lt;em&gt;更 (可通过主页邮箱联系我修改github用户名)&lt;br&gt; @K&lt;/em&gt;g (可通过主页邮箱联系我修改github用户名)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/playwright</title>
    <updated>2025-06-25T01:29:16Z</updated>
    <id>tag:github.com,2025-06-25:/microsoft/playwright</id>
    <link href="https://github.com/microsoft/playwright" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎭 Playwright&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/playwright&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/playwright.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- GEN:chromium-version-badge --&gt;&lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chromium-138.0.7204.35-blue.svg?logo=google-chrome&#34; alt=&#34;Chromium version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &#xA; &lt;!-- GEN:firefox-version-badge --&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/firefox-139.0-blue.svg?logo=firefoxbrowser&#34; alt=&#34;Firefox version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &#xA; &lt;!-- GEN:webkit-version-badge --&gt;&lt;a href=&#34;https://webkit.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/webkit-18.5-blue.svg?logo=safari&#34; alt=&#34;WebKit version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &lt;a href=&#34;https://aka.ms/playwright/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-discord-informational&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://playwright.dev&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://playwright.dev/docs/api/class-playwright&#34;&gt;API reference&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Playwright is a framework for Web Testing and Automation. It allows testing &lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;Chromium&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox&lt;/a&gt; and &lt;a href=&#34;https://webkit.org/&#34;&gt;WebKit&lt;/a&gt; with a single API. Playwright is built to enable cross-browser web automation that is &lt;strong&gt;ever-green&lt;/strong&gt;, &lt;strong&gt;capable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chromium &#xA;    &lt;!-- GEN:chromium-version --&gt;138.0.7204.35&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WebKit &#xA;    &lt;!-- GEN:webkit-version --&gt;18.5&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Firefox &#xA;    &lt;!-- GEN:firefox-version --&gt;139.0&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Headless execution is supported for all browsers on all platforms. Check out &lt;a href=&#34;https://playwright.dev/docs/intro#system-requirements&#34;&gt;system requirements&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Looking for Playwright for &lt;a href=&#34;https://playwright.dev/python/docs/intro&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/dotnet/docs/intro&#34;&gt;.NET&lt;/a&gt;, or &lt;a href=&#34;https://playwright.dev/java/docs/intro&#34;&gt;Java&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Playwright has its own test runner for end-to-end tests, we call it Playwright Test.&lt;/p&gt; &#xA;&lt;h3&gt;Using init command&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get started with Playwright Test is to run the init command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;# Run from your project&#39;s root directory&#xA;npm init playwright@latest&#xA;# Or create a new project&#xA;npm init playwright@latest new-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a configuration file, optionally add examples, a GitHub Action workflow and a first test example.spec.ts. You can now jump directly to writing assertions section.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Add dependency and install browsers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;npm i -D @playwright/test&#xA;# install supported browsers&#xA;npx playwright install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally install only selected browsers, see &lt;a href=&#34;https://playwright.dev/docs/cli#install-browsers&#34;&gt;install browsers&lt;/a&gt; for more details. Or you can install no browsers at all and use existing &lt;a href=&#34;https://playwright.dev/docs/browsers&#34;&gt;browser channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/api/class-playwright&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;h3&gt;Resilient • No flaky tests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Auto-wait&lt;/strong&gt;. Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - a primary cause of flaky tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Web-first assertions&lt;/strong&gt;. Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt;. Configure test retry strategy, capture execution trace, videos and screenshots to eliminate flakes.&lt;/p&gt; &#xA;&lt;h3&gt;No trade-offs • No limits&lt;/h3&gt; &#xA;&lt;p&gt;Browsers run web content belonging to different origins in different processes. Playwright is aligned with the architecture of the modern browsers and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multiple everything&lt;/strong&gt;. Test scenarios that span multiple tabs, multiple origins and multiple users. Create scenarios with different contexts for different users and run them against your server, all in one test.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Trusted events&lt;/strong&gt;. Hover elements, interact with dynamic controls and produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.&lt;/p&gt; &#xA;&lt;p&gt;Test frames, pierce Shadow DOM. Playwright selectors pierce shadow DOM and allow entering frames seamlessly.&lt;/p&gt; &#xA;&lt;h3&gt;Full isolation • Fast execution&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Browser contexts&lt;/strong&gt;. Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Log in once&lt;/strong&gt;. Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.&lt;/p&gt; &#xA;&lt;h3&gt;Powerful Tooling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://playwright.dev/docs/codegen&#34;&gt;Codegen&lt;/a&gt;&lt;/strong&gt;. Generate tests by recording your actions. Save them into any language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://playwright.dev/docs/inspector&#34;&gt;Playwright inspector&lt;/a&gt;&lt;/strong&gt;. Inspect page, generate selectors, step through the test execution, see click points and explore execution logs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://playwright.dev/docs/trace-viewer&#34;&gt;Trace Viewer&lt;/a&gt;&lt;/strong&gt;. Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source and many more.&lt;/p&gt; &#xA;&lt;p&gt;Looking for Playwright for &lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/python/docs/intro&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev/dotnet/docs/intro&#34;&gt;.NET&lt;/a&gt;, or &lt;a href=&#34;https://playwright.dev/java/docs/intro&#34;&gt;Java&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To learn how to run these Playwright Test examples, check out our &lt;a href=&#34;https://playwright.dev/docs/intro&#34;&gt;getting started docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Page screenshot&lt;/h4&gt; &#xA;&lt;p&gt;This code snippet navigates to Playwright homepage and saves a screenshot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test } from &#39;@playwright/test&#39;;&#xA;&#xA;test(&#39;Page Screenshot&#39;, async ({ page }) =&amp;gt; {&#xA;  await page.goto(&#39;https://playwright.dev/&#39;);&#xA;  await page.screenshot({ path: `example.png` });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mobile and geolocation&lt;/h4&gt; &#xA;&lt;p&gt;This snippet emulates Mobile Safari on a device at given geolocation, navigates to maps.google.com, performs the action and takes a screenshot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test, devices } from &#39;@playwright/test&#39;;&#xA;&#xA;test.use({&#xA;  ...devices[&#39;iPhone 13 Pro&#39;],&#xA;  locale: &#39;en-US&#39;,&#xA;  geolocation: { longitude: 12.492507, latitude: 41.889938 },&#xA;  permissions: [&#39;geolocation&#39;],&#xA;})&#xA;&#xA;test(&#39;Mobile and geolocation&#39;, async ({ page }) =&amp;gt; {&#xA;  await page.goto(&#39;https://maps.google.com&#39;);&#xA;  await page.getByText(&#39;Your location&#39;).click();&#xA;  await page.waitForRequest(/.*preview\/pwa/);&#xA;  await page.screenshot({ path: &#39;colosseum-iphone.png&#39; });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Evaluate in browser context&lt;/h4&gt; &#xA;&lt;p&gt;This code snippet navigates to example.com, and executes a script in the page context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test } from &#39;@playwright/test&#39;;&#xA;&#xA;test(&#39;Evaluate in browser context&#39;, async ({ page }) =&amp;gt; {&#xA;  await page.goto(&#39;https://www.example.com/&#39;);&#xA;  const dimensions = await page.evaluate(() =&amp;gt; {&#xA;    return {&#xA;      width: document.documentElement.clientWidth,&#xA;      height: document.documentElement.clientHeight,&#xA;      deviceScaleFactor: window.devicePixelRatio&#xA;    }&#xA;  });&#xA;  console.log(dimensions);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Intercept network requests&lt;/h4&gt; &#xA;&lt;p&gt;This code snippet sets up request routing for a page to log all network requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;import { test } from &#39;@playwright/test&#39;;&#xA;&#xA;test(&#39;Intercept network requests&#39;, async ({ page }) =&amp;gt; {&#xA;  // Log and continue all network requests&#xA;  await page.route(&#39;**&#39;, route =&amp;gt; {&#xA;    console.log(route.request().url());&#xA;    route.continue();&#xA;  });&#xA;  await page.goto(&#39;http://todomvc.com&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/api/class-playwright/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/playwright/main/CONTRIBUTING.md&#34;&gt;Contribution guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/playwright/releases&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>