<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-07T01:22:05Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AbanteAI/rawdog</title>
    <updated>2024-02-07T01:22:05Z</updated>
    <id>tag:github.com,2024-02-07:/AbanteAI/rawdog</id>
    <link href="https://github.com/AbanteAI/rawdog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate and auto-execute Python scripts in the cli&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/zbvd9qx9Pb&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/XbPdxAMJte?style=flat&#34; alt=&#34;Discord Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Rawdog&lt;/h1&gt; &#xA;&lt;p&gt;An CLI assistant that responds by generating and auto-executing a Python script.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AbanteAI/rawdog/assets/50287275/1417a927-58c1-424f-90a8-e8e63875dcda&#34;&gt;https://github.com/AbanteAI/rawdog/assets/50287275/1417a927-58c1-424f-90a8-e8e63875dcda&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be surprised how useful this can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;How many folders in my home directory are git repos?&#34; ... &#34;Plot them by disk size.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Give me the pd.describe() for all the csv&#39;s in this directory&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;What ports are currently active?&#34; ... &#34;What are the Google ones?&#34; ... &#34;Cancel those please.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rawdog (Recursive Augmentation With Deterministic Output Generations) is a novel alternative to RAG (Retrieval Augmented Generation). Rawdog can self-select context by running scripts to print things, adding the output to the conversation, and then calling itself again.&lt;/p&gt; &#xA;&lt;p&gt;This works for tasks like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Setup the repo per the instructions in the README&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Look at all these csv&#39;s and tell me if they can be merged or not, and why.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Try that again.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please proceed with caution. This obviously has the potential to cause harm if so instructed.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install rawdog with pip:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install rawdog-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Export your api key. See &lt;a href=&#34;https://raw.githubusercontent.com/AbanteAI/rawdog/main/#model-selection&#34;&gt;Model selection&lt;/a&gt; for how to use other providers&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export OPENAI_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose a mode of interaction.&lt;/p&gt; &lt;p&gt;Direct: Execute a single prompt and close&lt;/p&gt; &lt;pre&gt;&lt;code&gt;rawdog Plot the size of all the files and directories in cwd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conversation: Initiate back-and-forth until you close. Rawdog can see its scripts and output.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;rawdog&#xA;&amp;gt;&amp;gt;&amp;gt; What can I do for you? (Ctrl-C to exit)&#xA;&amp;gt;&amp;gt;&amp;gt; &amp;gt; |&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Optional Arguments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;: Print and manually approve each script before executing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model selection&lt;/h2&gt; &#xA;&lt;p&gt;Rawdog uses &lt;code&gt;litellm&lt;/code&gt; for completions with &#39;gpt-4&#39; as the default. You can adjust the model or point it to other providers by modifying &lt;code&gt;~/.rawdog/config.yaml&lt;/code&gt;. Some examples:&lt;/p&gt; &#xA;&lt;p&gt;To use gpt-3.5 turbo a minimal config is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;llm_model: gpt-3.5-turbo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run mixtral locally with ollama a minimal config is (assuming you have &lt;a href=&#34;https://ollama.ai/&#34;&gt;ollama&lt;/a&gt; installed and a sufficient gpu):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;llm_custom_provider: ollama&#xA;llm_model: mixtral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run claude-2.1 set your API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ANTHROPIC_API_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then set your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;llm_model: claude-2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a model running at a local endpoint (or want to change the baseurl for some other reason) you can set the &lt;code&gt;llm_base_url&lt;/code&gt;. For instance if you have an openai compatible endpoint running at &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; you can set your config to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;llm_base_url: http://localhost:8000&#xA;llm_model: openai/model # So litellm knows it&#39;s an openai compatible endpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Litellm supports a huge number of providers including Azure, VertexAi and Huggingface. See &lt;a href=&#34;https://docs.litellm.ai/docs/&#34;&gt;their docs&lt;/a&gt; for details on what environment variables, model names and llm_custom_providers you need to use for other providers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/chat-ui</title>
    <updated>2024-02-07T01:22:05Z</updated>
    <id>tag:github.com,2024-02-07:/huggingface/chat-ui</id>
    <link href="https://github.com/huggingface/chat-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source codebase powering the HuggingChat app&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: chat-ui emoji: ðŸ”¥ colorFrom: purple colorTo: purple sdk: docker pinned: false license: apache-2.0 base_path: /chat app_port: 3000 failure_strategy: rollback&lt;/h2&gt; &#xA;&lt;h1&gt;Chat UI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chatui-websearch.png&#34; alt=&#34;Chat UI repository thumbnail&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A chat interface using open source models, eg OpenAssistant or Llama. It is a SvelteKit app and it powers the &lt;a href=&#34;https://huggingface.co/chat&#34;&gt;HuggingChat app on hf.co/chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#no-setup-deploy&#34;&gt;No Setup Deploy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#launch&#34;&gt;Launch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#web-search&#34;&gt;Web Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#text-embedding-models&#34;&gt;Text Embedding Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#extra-parameters&#34;&gt;Extra parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#deploying-to-a-hf-space&#34;&gt;Deploying to a HF Space&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/chat-ui/main/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;No Setup Deploy&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to configure, setup, and launch your own Chat UI yourself, you can use this option as a fast deploy alternative.&lt;/p&gt; &#xA;&lt;p&gt;You can deploy your own customized Chat UI instance with any supported &lt;a href=&#34;https://huggingface.co/models?pipeline_tag=text-generation&amp;amp;sort=trending&#34;&gt;LLM&lt;/a&gt; of your choice on &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Hugging Face Spaces&lt;/a&gt;. To do so, use the chat-ui template &lt;a href=&#34;https://huggingface.co/new-space?template=huggingchat/chat-ui-template&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;HF_TOKEN&lt;/code&gt; in &lt;a href=&#34;https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables&#34;&gt;Space secrets&lt;/a&gt; to deploy a model with gated access or a model in a private repository. It&#39;s also compatible with &lt;a href=&#34;https://huggingface.co/blog/inference-pro&#34;&gt;Inference for PROs&lt;/a&gt; curated list of powerful models with higher rate limits. Make sure to create your personal token first in your &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;User Access Tokens settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read the full tutorial &lt;a href=&#34;https://huggingface.co/docs/hub/spaces-sdks-docker-chatui#chatui-on-spaces&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The default config for Chat UI is stored in the &lt;code&gt;.env&lt;/code&gt; file. You will need to override some values to get Chat UI to run locally. This is done in &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Start by creating a &lt;code&gt;.env.local&lt;/code&gt; file in the root of the repository. The bare minimum config you need to get Chat UI to run locally is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;MONGODB_URL=&amp;lt;the URL to your MongoDB instance&amp;gt;&#xA;HF_TOKEN=&amp;lt;your access token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;The chat history is stored in a MongoDB instance, and having a DB instance available is needed for Chat UI to work.&lt;/p&gt; &#xA;&lt;p&gt;You can use a local MongoDB instance. The easiest way is to spin one up using docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 27017:27017 --name mongo-chatui mongo:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In which case the url of your DB will be &lt;code&gt;MONGODB_URL=mongodb://localhost:27017&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use a &lt;a href=&#34;https://www.mongodb.com/pricing&#34;&gt;free MongoDB Atlas&lt;/a&gt; instance for this, Chat UI should fit comfortably within their free tier. After which you can set the &lt;code&gt;MONGODB_URL&lt;/code&gt; variable in &lt;code&gt;.env.local&lt;/code&gt; to match your instance.&lt;/p&gt; &#xA;&lt;h3&gt;Hugging Face Access Token&lt;/h3&gt; &#xA;&lt;p&gt;If you use a remote inference endpoint, you will need a Hugging Face access token to run Chat UI locally. You can get one from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;your Hugging Face profile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Launch&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;re done with the &lt;code&gt;.env.local&lt;/code&gt; file you can run Chat UI locally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web Search&lt;/h2&gt; &#xA;&lt;p&gt;Chat UI features a powerful Web Search feature. It works by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generating an appropriate search query from the user prompt.&lt;/li&gt; &#xA; &lt;li&gt;Performing web search and extracting content from webpages.&lt;/li&gt; &#xA; &lt;li&gt;Creating embeddings from texts using a text embedding model.&lt;/li&gt; &#xA; &lt;li&gt;From these embeddings, find the ones that are closest to the user query using a vector similarity search. Specifically, we use &lt;code&gt;inner product&lt;/code&gt; distance.&lt;/li&gt; &#xA; &lt;li&gt;Get the corresponding texts to those closest embeddings and perform &lt;a href=&#34;https://huggingface.co/papers/2005.11401&#34;&gt;Retrieval-Augmented Generation&lt;/a&gt; (i.e. expand user prompt by adding those texts so that an LLM can use this information).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Text Embedding Models&lt;/h2&gt; &#xA;&lt;p&gt;By default (for backward compatibility), when &lt;code&gt;TEXT_EMBEDDING_MODELS&lt;/code&gt; environment variable is not defined, &lt;a href=&#34;https://huggingface.co/docs/transformers.js&#34;&gt;transformers.js&lt;/a&gt; embedding models will be used for embedding tasks, specifically, &lt;a href=&#34;https://huggingface.co/Xenova/gte-small&#34;&gt;Xenova/gte-small&lt;/a&gt; model.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the embedding model by setting &lt;code&gt;TEXT_EMBEDDING_MODELS&lt;/code&gt; in your &lt;code&gt;.env.local&lt;/code&gt; file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;TEXT_EMBEDDING_MODELS = `[&#xA;  {&#xA;    &#34;name&#34;: &#34;Xenova/gte-small&#34;,&#xA;    &#34;displayName&#34;: &#34;Xenova/gte-small&#34;,&#xA;    &#34;description&#34;: &#34;locally running embedding&#34;,&#xA;    &#34;chunkCharLength&#34;: 512,&#xA;    &#34;endpoints&#34;: [&#xA;      {&#34;type&#34;: &#34;transformersjs&#34;}&#xA;    ]&#xA;  },&#xA;  {&#xA;    &#34;name&#34;: &#34;intfloat/e5-base-v2&#34;,&#xA;    &#34;displayName&#34;: &#34;intfloat/e5-base-v2&#34;,&#xA;    &#34;description&#34;: &#34;hosted embedding model&#34;,&#xA;    &#34;chunkCharLength&#34;: 768,&#xA;    &#34;preQuery&#34;: &#34;query: &#34;, # See https://huggingface.co/intfloat/e5-base-v2#faq&#xA;    &#34;prePassage&#34;: &#34;passage: &#34;, # See https://huggingface.co/intfloat/e5-base-v2#faq&#xA;    &#34;endpoints&#34;: [&#xA;      {&#xA;        &#34;type&#34;: &#34;tei&#34;,&#xA;        &#34;url&#34;: &#34;http://127.0.0.1:8080/&#34;,&#xA;        &#34;authorization&#34;: &#34;TOKEN_TYPE TOKEN&#34; // optional authorization field. Example: &#34;Basic VVNFUjpQQVNT&#34;&#xA;      }&#xA;    ]&#xA;  }&#xA;]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The required fields are &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;chunkCharLength&lt;/code&gt; and &lt;code&gt;endpoints&lt;/code&gt;. Supported text embedding backends are: &lt;a href=&#34;https://huggingface.co/docs/transformers.js&#34;&gt;&lt;code&gt;transformers.js&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/huggingface/text-embeddings-inference&#34;&gt;&lt;code&gt;TEI&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;transformers.js&lt;/code&gt; models run locally as part of &lt;code&gt;chat-ui&lt;/code&gt;, whereas &lt;code&gt;TEI&lt;/code&gt; models run in a different environment &amp;amp; accessed through an API endpoint.&lt;/p&gt; &#xA;&lt;p&gt;When more than one embedding models are supplied in &lt;code&gt;.env.local&lt;/code&gt; file, the first will be used by default, and the others will only be used on LLM&#39;s which configured &lt;code&gt;embeddingModel&lt;/code&gt; to the name of the model.&lt;/p&gt; &#xA;&lt;h2&gt;Extra parameters&lt;/h2&gt; &#xA;&lt;h3&gt;OpenID connect&lt;/h3&gt; &#xA;&lt;p&gt;The login feature is disabled by default and users are attributed a unique ID based on their browser. But if you want to use OpenID to authenticate your users, you can add the following to your &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;OPENID_CONFIG=`{&#xA;  PROVIDER_URL: &#34;&amp;lt;your OIDC issuer&amp;gt;&#34;,&#xA;  CLIENT_ID: &#34;&amp;lt;your OIDC client ID&amp;gt;&#34;,&#xA;  CLIENT_SECRET: &#34;&amp;lt;your OIDC client secret&amp;gt;&#34;,&#xA;  SCOPES: &#34;openid profile&#34;,&#xA;  TOLERANCE: // optional&#xA;  RESOURCE: // optional&#xA;}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These variables will enable the openID sign-in modal for users.&lt;/p&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;You can use a few environment variables to customize the look and feel of chat-ui. These are by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;PUBLIC_APP_NAME=ChatUI&#xA;PUBLIC_APP_ASSETS=chatui&#xA;PUBLIC_APP_COLOR=blue&#xA;PUBLIC_APP_DESCRIPTION=&#34;Making the community&#39;s best AI chat models available to everyone.&#34;&#xA;PUBLIC_APP_DATA_SHARING=&#xA;PUBLIC_APP_DISCLAIMER=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_NAME&lt;/code&gt; The name used as a title throughout the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_ASSETS&lt;/code&gt; Is used to find logos &amp;amp; favicons in &lt;code&gt;static/$PUBLIC_APP_ASSETS&lt;/code&gt;, current options are &lt;code&gt;chatui&lt;/code&gt; and &lt;code&gt;huggingchat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_COLOR&lt;/code&gt; Can be any of the &lt;a href=&#34;https://tailwindcss.com/docs/customizing-colors#default-color-palette&#34;&gt;tailwind colors&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_DATA_SHARING&lt;/code&gt; Can be set to 1 to add a toggle in the user settings that lets your users opt-in to data sharing with models creator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUBLIC_APP_DISCLAIMER&lt;/code&gt; If set to 1, we show a disclaimer about generated outputs on login.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web Search config&lt;/h3&gt; &#xA;&lt;p&gt;You can enable the web search through an API by adding &lt;code&gt;YDC_API_KEY&lt;/code&gt; (&lt;a href=&#34;https://docs.you.com&#34;&gt;docs.you.com&lt;/a&gt;) or &lt;code&gt;SERPER_API_KEY&lt;/code&gt; (&lt;a href=&#34;https://serper.dev/&#34;&gt;serper.dev&lt;/a&gt;) or &lt;code&gt;SERPAPI_KEY&lt;/code&gt; (&lt;a href=&#34;https://serpapi.com/&#34;&gt;serpapi.com&lt;/a&gt;) or &lt;code&gt;SERPSTACK_API_KEY&lt;/code&gt; (&lt;a href=&#34;https://serpstack.com/&#34;&gt;serpstack.com&lt;/a&gt;) to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also simply enable the local websearch by setting &lt;code&gt;USE_LOCAL_WEBSEARCH=true&lt;/code&gt; in your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom models&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the parameters passed to the model or even use a new model by updating the &lt;code&gt;MODELS&lt;/code&gt; variable in your &lt;code&gt;.env.local&lt;/code&gt;. The default one can be found in &lt;code&gt;.env&lt;/code&gt; and looks like this :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;MODELS=`[&#xA;  {&#xA;    &#34;name&#34;: &#34;mistralai/Mistral-7B-Instruct-v0.2&#34;,&#xA;    &#34;displayName&#34;: &#34;mistralai/Mistral-7B-Instruct-v0.2&#34;,&#xA;    &#34;description&#34;: &#34;Mistral 7B is a new Apache 2.0 model, released by Mistral AI that outperforms Llama2 13B in benchmarks.&#34;,&#xA;    &#34;websiteUrl&#34;: &#34;https://mistral.ai/news/announcing-mistral-7b/&#34;,&#xA;    &#34;preprompt&#34;: &#34;&#34;,&#xA;    &#34;chatPromptTemplate&#34; : &#34;&amp;lt;s&amp;gt;{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}&amp;lt;/s&amp;gt;{{/ifAssistant}}{{/each}}&#34;,&#xA;    &#34;parameters&#34;: {&#xA;      &#34;temperature&#34;: 0.3,&#xA;      &#34;top_p&#34;: 0.95,&#xA;      &#34;repetition_penalty&#34;: 1.2,&#xA;      &#34;top_k&#34;: 50,&#xA;      &#34;truncate&#34;: 3072,&#xA;      &#34;max_new_tokens&#34;: 1024,&#xA;      &#34;stop&#34;: [&#34;&amp;lt;/s&amp;gt;&#34;]&#xA;    },&#xA;    &#34;promptExamples&#34;: [&#xA;      {&#xA;        &#34;title&#34;: &#34;Write an email from bullet list&#34;,&#xA;        &#34;prompt&#34;: &#34;As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)&#34;&#xA;      }, {&#xA;        &#34;title&#34;: &#34;Code a snake game&#34;,&#xA;        &#34;prompt&#34;: &#34;Code a basic snake game in python, give explanations for each step.&#34;&#xA;      }, {&#xA;        &#34;title&#34;: &#34;Assist in a task&#34;,&#xA;        &#34;prompt&#34;: &#34;How do I make a delicious lemon cheesecake?&#34;&#xA;      }&#xA;    ]&#xA;  }&#xA;]`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change things like the parameters, or customize the preprompt to better suit your needs. You can also add more models by adding more objects to the array, with different preprompts for example.&lt;/p&gt; &#xA;&lt;h4&gt;chatPromptTemplate&lt;/h4&gt; &#xA;&lt;p&gt;When querying the model for a chat response, the &lt;code&gt;chatPromptTemplate&lt;/code&gt; template is used. &lt;code&gt;messages&lt;/code&gt; is an array of chat messages, it has the format &lt;code&gt;[{ content: string }, ...]&lt;/code&gt;. To identify if a message is a user message or an assistant message the &lt;code&gt;ifUser&lt;/code&gt; and &lt;code&gt;ifAssistant&lt;/code&gt; block helpers can be used.&lt;/p&gt; &#xA;&lt;p&gt;The following is the default &lt;code&gt;chatPromptTemplate&lt;/code&gt;, although newlines and indentiation have been added for readability. You can find the prompts used in production for HuggingChat &lt;a href=&#34;https://github.com/huggingface/chat-ui/raw/main/PROMPTS.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prompt&#34;&gt;{{preprompt}}&#xA;{{#each messages}}&#xA;  {{#ifUser}}{{@root.userMessageToken}}{{content}}{{@root.userMessageEndToken}}{{/ifUser}}&#xA;  {{#ifAssistant}}{{@root.assistantMessageToken}}{{content}}{{@root.assistantMessageEndToken}}{{/ifAssistant}}&#xA;{{/each}}&#xA;{{assistantMessageToken}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi modal model&lt;/h4&gt; &#xA;&lt;p&gt;We currently only support IDEFICS as a multimodal model, hosted on TGI. You can enable it by using the followin config (if you have a PRO HF Api token):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;    {&#xA;      &#34;name&#34;: &#34;HuggingFaceM4/idefics-80b-instruct&#34;,&#xA;      &#34;multimodal&#34; : true,&#xA;      &#34;description&#34;: &#34;IDEFICS is the new multimodal model by Hugging Face.&#34;,&#xA;      &#34;preprompt&#34;: &#34;&#34;,&#xA;      &#34;chatPromptTemplate&#34; : &#34;{{#each messages}}{{#ifUser}}User: {{content}}{{/ifUser}}&amp;lt;end_of_utterance&amp;gt;\nAssistant: {{#ifAssistant}}{{content}}\n{{/ifAssistant}}{{/each}}&#34;,&#xA;      &#34;parameters&#34;: {&#xA;        &#34;temperature&#34;: 0.1,&#xA;        &#34;top_p&#34;: 0.95,&#xA;        &#34;repetition_penalty&#34;: 1.2,&#xA;        &#34;top_k&#34;: 12,&#xA;        &#34;truncate&#34;: 1000,&#xA;        &#34;max_new_tokens&#34;: 1024,&#xA;        &#34;stop&#34;: [&#34;&amp;lt;end_of_utterance&amp;gt;&#34;, &#34;User:&#34;, &#34;\nUser:&#34;]&#xA;      }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running your own models using a custom endpoint&lt;/h4&gt; &#xA;&lt;p&gt;If you want to, instead of hitting models on the Hugging Face Inference API, you can run your own models locally.&lt;/p&gt; &#xA;&lt;p&gt;A good option is to hit a &lt;a href=&#34;https://github.com/huggingface/text-generation-inference&#34;&gt;text-generation-inference&lt;/a&gt; endpoint. This is what is done in the official &lt;a href=&#34;https://huggingface.co/new-space?template=huggingchat/chat-ui-template&#34;&gt;Chat UI Spaces Docker template&lt;/a&gt; for instance: both this app and a text-generation-inference server run inside the same container.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you can add your own endpoints to the &lt;code&gt;MODELS&lt;/code&gt; variable in &lt;code&gt;.env.local&lt;/code&gt;, by adding an &lt;code&gt;&#34;endpoints&#34;&lt;/code&gt; key for each model in &lt;code&gt;MODELS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;{&#xA;// rest of the model config here&#xA;&#34;endpoints&#34;: [{&#xA;  &#34;type&#34; : &#34;tgi&#34;,&#xA;  &#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;  }]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;endpoints&lt;/code&gt; are left unspecified, ChatUI will look for the model on the hosted Hugging Face inference API using the model name.&lt;/p&gt; &#xA;&lt;h5&gt;OpenAI API compatible models&lt;/h5&gt; &#xA;&lt;p&gt;Chat UI can be used with any API server that supports OpenAI API compatibility, for example &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/tree/main/extensions/openai&#34;&gt;text-generation-webui&lt;/a&gt;, &lt;a href=&#34;https://github.com/go-skynet/LocalAI&#34;&gt;LocalAI&lt;/a&gt;, &lt;a href=&#34;https://github.com/lm-sys/FastChat/raw/main/docs/openai_api.md&#34;&gt;FastChat&lt;/a&gt;, &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python&#34;&gt;llama-cpp-python&lt;/a&gt;, and &lt;a href=&#34;https://github.com/chenhunghan/ialacol&#34;&gt;ialacol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following example config makes Chat UI works with &lt;a href=&#34;https://github.com/oobabooga/text-generation-webui/tree/main/extensions/openai&#34;&gt;text-generation-webui&lt;/a&gt;, the &lt;code&gt;endpoint.baseUrl&lt;/code&gt; is the url of the OpenAI API compatible server, this overrides the baseUrl to be used by OpenAI instance. The &lt;code&gt;endpoint.completion&lt;/code&gt; determine which endpoint to be used, default is &lt;code&gt;chat_completions&lt;/code&gt; which uses &lt;code&gt;v1/chat/completions&lt;/code&gt;, change to &lt;code&gt;endpoint.completion&lt;/code&gt; to &lt;code&gt;completions&lt;/code&gt; to use the &lt;code&gt;v1/completions&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MODELS=`[&#xA;  {&#xA;    &#34;name&#34;: &#34;text-generation-webui&#34;,&#xA;    &#34;id&#34;: &#34;text-generation-webui&#34;,&#xA;    &#34;parameters&#34;: {&#xA;      &#34;temperature&#34;: 0.9,&#xA;      &#34;top_p&#34;: 0.95,&#xA;      &#34;repetition_penalty&#34;: 1.2,&#xA;      &#34;top_k&#34;: 50,&#xA;      &#34;truncate&#34;: 1000,&#xA;      &#34;max_new_tokens&#34;: 1024,&#xA;      &#34;stop&#34;: []&#xA;    },&#xA;    &#34;endpoints&#34;: [{&#xA;      &#34;type&#34; : &#34;openai&#34;,&#xA;      &#34;baseURL&#34;: &#34;http://localhost:8000/v1&#34;&#xA;    }]&#xA;  }&#xA;]`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;openai&lt;/code&gt; type includes official OpenAI models. You can add, for example, GPT4/GPT3.5 as a &#34;openai&#34; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=#your openai api key here&#xA;MODELS=`[{&#xA;      &#34;name&#34;: &#34;gpt-4&#34;,&#xA;      &#34;displayName&#34;: &#34;GPT 4&#34;,&#xA;      &#34;endpoints&#34; : [{&#xA;        &#34;type&#34;: &#34;openai&#34;&#xA;      }]&#xA;},&#xA;      {&#xA;      &#34;name&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;      &#34;displayName&#34;: &#34;GPT 3.5 Turbo&#34;,&#xA;      &#34;endpoints&#34; : [{&#xA;        &#34;type&#34;: &#34;openai&#34;&#xA;      }]&#xA;}]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also consume any model provider that provides compatible OpenAI API endpoint. For example, you may self-host &lt;a href=&#34;https://github.com/Portkey-AI/gateway&#34;&gt;Portkey&lt;/a&gt; gateway and experiment with Claude or GPTs offered by Azure OpenAI. Example for Claude from Anthropic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MODELS=`[{&#xA;  &#34;name&#34;: &#34;claude-2.1&#34;,&#xA;  &#34;displayName&#34;: &#34;Claude 2.1&#34;,&#xA;  &#34;description&#34;: &#34;Anthropic has been founded by former OpenAI researchers...&#34;,&#xA;  &#34;parameters&#34;: {&#xA;      &#34;temperature&#34;: 0.5,&#xA;      &#34;max_new_tokens&#34;: 4096,&#xA;  },&#xA;  &#34;endpoints&#34;: [&#xA;      {&#xA;          &#34;type&#34;: &#34;openai&#34;,&#xA;          &#34;baseURL&#34;: &#34;https://gateway.example.com/v1&#34;,&#xA;          &#34;defaultHeaders&#34;: {&#xA;              &#34;x-portkey-config&#34;: &#39;{&#34;provider&#34;:&#34;anthropic&#34;,&#34;api_key&#34;:&#34;sk-ant-abc...xyz&#34;}&#39;&#xA;          }&#xA;      }&#xA;  ]&#xA;}]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for GPT 4 deployed on Azure OpenAI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MODELS=`[{&#xA;  &#34;id&#34;: &#34;gpt-4-1106-preview&#34;,&#xA;  &#34;name&#34;: &#34;gpt-4-1106-preview&#34;,&#xA;  &#34;displayName&#34;: &#34;gpt-4-1106-preview&#34;,&#xA;  &#34;parameters&#34;: {&#xA;      &#34;temperature&#34;: 0.5,&#xA;      &#34;max_new_tokens&#34;: 4096,&#xA;  },&#xA;  &#34;endpoints&#34;: [&#xA;      {&#xA;          &#34;type&#34;: &#34;openai&#34;,&#xA;          &#34;baseURL&#34;: &#34;https://gateway.example.com/v1&#34;,&#xA;          &#34;defaultHeaders&#34;: {&#xA;              &#34;x-portkey-config&#34;: &#39;{&#34;provider&#34;:&#34;azure-openai&#34;,&#34;resource_name&#34;:&#34;abc-fr&#34;,&#34;deployment_id&#34;:&#34;gpt-4-1106-preview&#34;,&#34;api_version&#34;:&#34;2023-03-15-preview&#34;,&#34;api_key&#34;:&#34;abc...xyz&#34;}&#39;&#xA;          }&#xA;      }&#xA;  ]&#xA;}]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or try Mistral from &lt;a href=&#34;https://deepinfra.com/mistralai/Mistral-7B-Instruct-v0.1/api?example=openai-http&#34;&gt;Deepinfra&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, apiKey can either be set custom per endpoint, or globally using &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;MODELS=`[{&#xA;  &#34;name&#34;: &#34;mistral-7b&#34;,&#xA;  &#34;displayName&#34;: &#34;Mistral 7B&#34;,&#xA;  &#34;description&#34;: &#34;A 7B dense Transformer, fast-deployed and easily customisable. Small, yet powerful for a variety of use cases. Supports English and code, and a 8k context window.&#34;,&#xA;  &#34;parameters&#34;: {&#xA;      &#34;temperature&#34;: 0.5,&#xA;      &#34;max_new_tokens&#34;: 4096,&#xA;  },&#xA;  &#34;endpoints&#34;: [&#xA;      {&#xA;          &#34;type&#34;: &#34;openai&#34;,&#xA;          &#34;baseURL&#34;: &#34;https://api.deepinfra.com/v1/openai&#34;,&#xA;          &#34;apiKey&#34;: &#34;abc...xyz&#34;&#xA;      }&#xA;  ]&#xA;}]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Llama.cpp API server&lt;/h5&gt; &#xA;&lt;p&gt;chat-ui also supports the llama.cpp API server directly without the need for an adapter. You can do this using the &lt;code&gt;llamacpp&lt;/code&gt; endpoint type.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run chat-ui with llama.cpp, you can do the following, using Zephyr as an example model:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get &lt;a href=&#34;https://huggingface.co/TheBloke/zephyr-7B-beta-GGUF/tree/main&#34;&gt;the weights&lt;/a&gt; from the hub&lt;/li&gt; &#xA; &lt;li&gt;Run the server with the following command: &lt;code&gt;./server -m models/zephyr-7b-beta.Q4_K_M.gguf -c 2048 -np 3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;.env.local&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;MODELS=`[&#xA;  {&#xA;      &#34;name&#34;: &#34;Local Zephyr&#34;,&#xA;      &#34;chatPromptTemplate&#34;: &#34;&amp;lt;|system|&amp;gt;\n{{preprompt}}&amp;lt;/s&amp;gt;\n{{#each messages}}{{#ifUser}}&amp;lt;|user|&amp;gt;\n{{content}}&amp;lt;/s&amp;gt;\n&amp;lt;|assistant|&amp;gt;\n{{/ifUser}}{{#ifAssistant}}{{content}}&amp;lt;/s&amp;gt;\n{{/ifAssistant}}{{/each}}&#34;,&#xA;      &#34;parameters&#34;: {&#xA;        &#34;temperature&#34;: 0.1,&#xA;        &#34;top_p&#34;: 0.95,&#xA;        &#34;repetition_penalty&#34;: 1.2,&#xA;        &#34;top_k&#34;: 50,&#xA;        &#34;truncate&#34;: 1000,&#xA;        &#34;max_new_tokens&#34;: 2048,&#xA;        &#34;stop&#34;: [&#34;&amp;lt;/s&amp;gt;&#34;]&#xA;      },&#xA;      &#34;endpoints&#34;: [&#xA;        {&#xA;         &#34;url&#34;: &#34;http://127.0.0.1:8080&#34;,&#xA;         &#34;type&#34;: &#34;llamacpp&#34;&#xA;        }&#xA;      ]&#xA;  }&#xA;]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start chat-ui with &lt;code&gt;npm run dev&lt;/code&gt; and you should be able to chat with Zephyr locally.&lt;/p&gt; &#xA;&lt;h4&gt;Ollama&lt;/h4&gt; &#xA;&lt;p&gt;We also support the Ollama inference server. Spin up a model with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;ollama run mistral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then specify the endpoints like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;MODELS=`[&#xA;  {&#xA;      &#34;name&#34;: &#34;Ollama Mistral&#34;,&#xA;      &#34;chatPromptTemplate&#34;: &#34;&amp;lt;s&amp;gt;{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}} {{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}&amp;lt;/s&amp;gt; {{/ifAssistant}}{{/each}}&#34;,&#xA;      &#34;parameters&#34;: {&#xA;        &#34;temperature&#34;: 0.1,&#xA;        &#34;top_p&#34;: 0.95,&#xA;        &#34;repetition_penalty&#34;: 1.2,&#xA;        &#34;top_k&#34;: 50,&#xA;        &#34;truncate&#34;: 3072,&#xA;        &#34;max_new_tokens&#34;: 1024,&#xA;        &#34;stop&#34;: [&#34;&amp;lt;/s&amp;gt;&#34;]&#xA;      },&#xA;      &#34;endpoints&#34;: [&#xA;        {&#xA;         &#34;type&#34;: &#34;ollama&#34;,&#xA;         &#34;url&#34; : &#34;http://127.0.0.1:11434&#34;,&#xA;         &#34;ollamaName&#34; : &#34;mistral&#34;&#xA;        }&#xA;      ]&#xA;  }&#xA;]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Amazon&lt;/h4&gt; &#xA;&lt;p&gt;You can also specify your Amazon SageMaker instance as an endpoint for chat-ui. The config goes like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;&#34;endpoints&#34;: [&#xA;    {&#xA;      &#34;type&#34; : &#34;aws&#34;,&#xA;      &#34;service&#34; : &#34;sagemaker&#34;&#xA;      &#34;url&#34;: &#34;&#34;,&#xA;      &#34;accessKey&#34;: &#34;&#34;,&#xA;      &#34;secretKey&#34; : &#34;&#34;,&#xA;      &#34;sessionToken&#34;: &#34;&#34;,&#xA;      &#34;region&#34;: &#34;&#34;,&#xA;&#xA;      &#34;weight&#34;: 1&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set &lt;code&gt;&#34;service&#34; : &#34;lambda&#34;&lt;/code&gt; to use a lambda instance.&lt;/p&gt; &#xA;&lt;p&gt;You can get the &lt;code&gt;accessKey&lt;/code&gt; and &lt;code&gt;secretKey&lt;/code&gt; from your AWS user, under programmatic access.&lt;/p&gt; &#xA;&lt;h3&gt;Custom endpoint authorization&lt;/h3&gt; &#xA;&lt;h4&gt;Basic and Bearer&lt;/h4&gt; &#xA;&lt;p&gt;Custom endpoints may require authorization, depending on how you configure them. Authentication will usually be set either with &lt;code&gt;Basic&lt;/code&gt; or &lt;code&gt;Bearer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;Basic&lt;/code&gt; we will need to generate a base64 encoding of the username and password.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;echo -n &#34;USER:PASS&#34; | base64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;VVNFUjpQQVNT&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For &lt;code&gt;Bearer&lt;/code&gt; you can use a token, which can be grabbed from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then add the generated information and the &lt;code&gt;authorization&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;&#34;endpoints&#34;: [&#xA;  {&#xA;    &#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;    &#34;authorization&#34;: &#34;Basic VVNFUjpQQVNT&#34;,&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that if &lt;code&gt;HF_TOKEN&lt;/code&gt; is also set or not empty, it will take precedence.&lt;/p&gt; &#xA;&lt;h4&gt;Models hosted on multiple custom endpoints&lt;/h4&gt; &#xA;&lt;p&gt;If the model being hosted will be available on multiple servers/instances add the &lt;code&gt;weight&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;. The &lt;code&gt;weight&lt;/code&gt; will be used to determine the probability of requesting a particular endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;&#34;endpoints&#34;: [&#xA;  {&#xA;    &#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;    &#34;weight&#34;: 1&#xA;  },&#xA;  {&#xA;    &#34;url&#34;: &#34;https://HOST:PORT&#34;,&#xA;    &#34;weight&#34;: 2&#xA;  }&#xA;  ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Client Certificate Authentication (mTLS)&lt;/h4&gt; &#xA;&lt;p&gt;Custom endpoints may require client certificate authentication, depending on how you configure them. To enable mTLS between Chat UI and your custom endpoint, you will need to set the &lt;code&gt;USE_CLIENT_CERTIFICATE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and add the &lt;code&gt;CERT_PATH&lt;/code&gt; and &lt;code&gt;KEY_PATH&lt;/code&gt; parameters to your &lt;code&gt;.env.local&lt;/code&gt;. These parameters should point to the location of the certificate and key files on your local machine. The certificate and key files should be in PEM format. The key file can be encrypted with a passphrase, in which case you will also need to add the &lt;code&gt;CLIENT_KEY_PASSWORD&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a certificate signed by a private CA, you will also need to add the &lt;code&gt;CA_PATH&lt;/code&gt; parameter to your &lt;code&gt;.env.local&lt;/code&gt;. This parameter should point to the location of the CA certificate file on your local machine.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a self-signed certificate, e.g. for testing or development purposes, you can set the &lt;code&gt;REJECT_UNAUTHORIZED&lt;/code&gt; parameter to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;.env.local&lt;/code&gt;. This will disable certificate validation, and allow Chat UI to connect to your custom endpoint.&lt;/p&gt; &#xA;&lt;h4&gt;Specific Embedding Model&lt;/h4&gt; &#xA;&lt;p&gt;A model can use any of the embedding models defined in &lt;code&gt;.env.local&lt;/code&gt;, (currently used when web searching), by default it will use the first embedding model, but it can be changed with the field &lt;code&gt;embeddingModel&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;TEXT_EMBEDDING_MODELS = `[&#xA;  {&#xA;    &#34;name&#34;: &#34;Xenova/gte-small&#34;,&#xA;    &#34;chunkCharLength&#34;: 512,&#xA;    &#34;endpoints&#34;: [&#xA;      {&#34;type&#34;: &#34;transformersjs&#34;}&#xA;    ]&#xA;  },&#xA;  {&#xA;    &#34;name&#34;: &#34;intfloat/e5-base-v2&#34;,&#xA;    &#34;chunkCharLength&#34;: 768,&#xA;    &#34;endpoints&#34;: [&#xA;      {&#34;type&#34;: &#34;tei&#34;, &#34;url&#34;: &#34;http://127.0.0.1:8080/&#34;, &#34;authorization&#34;: &#34;Basic VVNFUjpQQVNT&#34;},&#xA;      {&#34;type&#34;: &#34;tei&#34;, &#34;url&#34;: &#34;http://127.0.0.1:8081/&#34;}&#xA;    ]&#xA;  }&#xA;]`&#xA;&#xA;MODELS=`[&#xA;  {&#xA;      &#34;name&#34;: &#34;Ollama Mistral&#34;,&#xA;      &#34;chatPromptTemplate&#34;: &#34;...&#34;,&#xA;      &#34;embeddingModel&#34;: &#34;intfloat/e5-base-v2&#34;&#xA;      &#34;parameters&#34;: {&#xA;        ...&#xA;      },&#xA;      &#34;endpoints&#34;: [&#xA;        ...&#xA;      ]&#xA;  }&#xA;]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying to a HF Space&lt;/h2&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;DOTENV_LOCAL&lt;/code&gt; secret to your HF space with the content of your .env.local, and they will be picked up automatically when you run.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To create a production version of your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can preview the production build with &lt;code&gt;npm run preview&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To deploy your app, you may need to install an &lt;a href=&#34;https://kit.svelte.dev/docs/adapters&#34;&gt;adapter&lt;/a&gt; for your target environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Config changes for HuggingChat&lt;/h2&gt; &#xA;&lt;p&gt;The config file for HuggingChat is stored in the &lt;code&gt;.env.template&lt;/code&gt; file at the root of the repository. It is the single source of truth that is used to generate the actual &lt;code&gt;.env.local&lt;/code&gt; file using our CI/CD pipeline. See &lt;a href=&#34;https://github.com/huggingface/chat-ui/raw/cdb33a9583f5339ade724db615347393ef48f5cd/scripts/updateProdEnv.ts&#34;&gt;updateProdEnv&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you want to make changes to model config for HuggingChat, you should do so against &lt;code&gt;.env.template&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We currently use the following secrets for deploying HuggingChat in addition to the &lt;code&gt;.env.template&lt;/code&gt; above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MONGODB_URL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HF_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENID_CONFIG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SERPER_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They are defined as secrets in the repository.&lt;/p&gt; &#xA;&lt;h3&gt;Testing config changes locally&lt;/h3&gt; &#xA;&lt;p&gt;You can test the config changes locally by first creating an &lt;code&gt;.env.SECRET_CONFIG&lt;/code&gt; file with the secrets defined above. Then you can run the following command to generate the &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run updateLocalEnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will replace your &lt;code&gt;.env.local&lt;/code&gt; file with the one that will be used in prod (simply taking &lt;code&gt;.env.template + .env.SECRET_CONFIG&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/pkl</title>
    <updated>2024-02-07T01:22:05Z</updated>
    <id>tag:github.com,2024-02-07:/apple/pkl</id>
    <link href="https://github.com/apple/pkl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A configuration as code language with rich validation and tooling.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pkl&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;A configuration as code language with rich validation and tooling.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_quick_links&#34;&gt;Quick Links&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/pkl-cli/index.html#installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/language-reference/index.html&#34;&gt;Language Reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org&#34;&gt;Home Page&lt;/a&gt;&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/language&#34;&gt;Language&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/tools&#34;&gt;Tools&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/examples.html&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkl-lang.org/main/current/release-notes&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_community&#34;&gt;Community&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Weâ€™d love to hear from you!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Create an &lt;a href=&#34;https://github.com/apple/pkl/issues&#34;&gt;issue&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Ask a question on &lt;a href=&#34;https://github.com/apple/pkl/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>