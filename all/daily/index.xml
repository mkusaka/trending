<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-12T01:29:58Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>exaloop/codon</title>
    <updated>2022-12-12T01:29:58Z</updated>
    <id>tag:github.com,2022-12-12:/exaloop/codon</id>
    <link href="https://github.com/exaloop/codon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high-performance, zero-overhead, extensible Python compiler using LLVM&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/exaloop/codon/develop/docs/img/codon.png?raw=true&#34; width=&#34;600&#34; alt=&#34;Codon&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.exaloop.io/codon&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;Docs&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://docs.exaloop.io/codon/general/faq&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://blog.exaloop.io&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://github.com/exaloop/codon/discussions&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;Forum&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://join.slack.com/t/exaloop/shared_invite/zt-1jusa4kc0-T3rRWrrHDk_iZ1dMS8s0JQ&#34; target=&#34;_blank&#34;&gt;Chat&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://exaloop.io/benchmarks&#34; target=&#34;_blank&#34;&gt;Benchmarks&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/exaloop/codon/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/exaloop/codon/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;What is Codon?&lt;/h2&gt; &#xA;&lt;p&gt;Codon is a high-performance Python compiler that compiles Python code to native machine code without any runtime overhead. Typical speedups over Python are on the order of 10-100x or more, on a single thread. Codon&#39;s performance is typically on par with (and sometimes better than) that of C/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times higher still. Codon grew out of the &lt;a href=&#34;https://github.com/seq-lang/seq&#34;&gt;Seq project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Pre-built binaries for Linux (x86_64) and macOS (x86_64 and arm64) are available alongside &lt;a href=&#34;https://github.com/exaloop/codon/releases&#34;&gt;each release&lt;/a&gt;. Download and install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://exaloop.io/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can &lt;a href=&#34;https://docs.exaloop.io/codon/advanced/build&#34;&gt;build from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Codon is a Python-compatible language, and many Python programs will work with few if any modifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def fib(n):&#xA;    a, b = 0, 1&#xA;    while a &amp;lt; n:&#xA;        print(a, end=&#39; &#39;)&#xA;        a, b = b, a+b&#xA;    print()&#xA;fib(1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;codon&lt;/code&gt; compiler has a number of options and modes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# compile and run the program&#xA;codon run fib.py&#xA;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987&#xA;&#xA;# compile and run the program with optimizations enabled&#xA;codon run -release fib.py&#xA;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987&#xA;&#xA;# compile to executable with optimizations enabled&#xA;codon build -release -exe fib.py&#xA;./fib&#xA;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987&#xA;&#xA;# compile to LLVM IR file with optimizations enabled&#xA;codon build -release -llvm fib.py&#xA;# outputs file fib.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.exaloop.io/codon/general/intro&#34;&gt;the docs&lt;/a&gt; for more options and examples.&lt;/p&gt; &#xA;&lt;p&gt;This prime counting example showcases Codon&#39;s &lt;a href=&#34;https://www.openmp.org/&#34;&gt;OpenMP&lt;/a&gt; support, enabled with the addition of one line. The &lt;code&gt;@par&lt;/code&gt; annotation tells the compiler to parallelize the following &lt;code&gt;for&lt;/code&gt;-loop, in this case using a dynamic schedule, chunk size of 100, and 16 threads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sys import argv&#xA;&#xA;def is_prime(n):&#xA;    factors = 0&#xA;    for i in range(2, n):&#xA;        if n % i == 0:&#xA;            factors += 1&#xA;    return factors == 0&#xA;&#xA;limit = int(argv[1])&#xA;total = 0&#xA;&#xA;@par(schedule=&#39;dynamic&#39;, chunk_size=100, num_threads=16)&#xA;for i in range(2, limit):&#xA;    if is_prime(i):&#xA;        total += 1&#xA;&#xA;print(total)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codon supports writing and executing GPU kernels. Here&#39;s an example that computes the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34;&gt;Mandelbrot set&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import gpu&#xA;&#xA;MAX    = 1000  # maximum Mandelbrot iterations&#xA;N      = 4096  # width and height of image&#xA;pixels = [0 for _ in range(N * N)]&#xA;&#xA;def scale(x, a, b):&#xA;    return a + (x/N)*(b - a)&#xA;&#xA;@gpu.kernel&#xA;def mandelbrot(pixels):&#xA;    idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x&#xA;    i, j = divmod(idx, N)&#xA;    c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))&#xA;    z = 0j&#xA;    iteration = 0&#xA;&#xA;    while abs(z) &amp;lt;= 2 and iteration &amp;lt; MAX:&#xA;        z = z**2 + c&#xA;        iteration += 1&#xA;&#xA;    pixels[idx] = int(255 * iteration/MAX)&#xA;&#xA;mandelbrot(pixels, grid=(N*N)//1024, block=1024)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GPU programming can also be done using the &lt;code&gt;@par&lt;/code&gt; syntax with &lt;code&gt;@par(gpu=True)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What isn&#39;t Codon?&lt;/h2&gt; &#xA;&lt;p&gt;While Codon supports nearly all of Python&#39;s syntax, it is not a drop-in replacement, and large codebases might require modifications to be run through the Codon compiler. For example, some of Python&#39;s modules are not yet implemented within Codon, and a few of Python&#39;s dynamic features are disallowed. The Codon compiler produces detailed error messages to help identify and resolve any incompatibilities.&lt;/p&gt; &#xA;&lt;p&gt;Codon can be used within larger Python codebases via the &lt;a href=&#34;https://docs.exaloop.io/codon/interoperability/decorator&#34;&gt;&lt;code&gt;@codon.jit&lt;/code&gt; decorator&lt;/a&gt;. Plain Python functions and libraries can also be called from within Codon via &lt;a href=&#34;https://docs.exaloop.io/codon/interoperability/python&#34;&gt;Python interoperability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://docs.exaloop.io/codon&#34;&gt;docs.exaloop.io&lt;/a&gt; for in-depth documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tiann/KernelSU</title>
    <updated>2022-12-12T01:29:58Z</updated>
    <id>tag:github.com,2022-12-12:/tiann/KernelSU</id>
    <link href="https://github.com/tiann/KernelSU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Kernel based root solution for Android GKI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KernelSU&lt;/h1&gt; &#xA;&lt;p&gt;A Kernel based root solution for Android GKI.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Flash a custom kernel with KernelSU, you can build it yourself or use prebuilt boot.img.&lt;/li&gt; &#xA; &lt;li&gt;Install Manager App and enjoy :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Build GKI Kernel&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the GKI source first, you can refer the &lt;a href=&#34;https://source.android.com/docs/core/architecture/kernel/generic-kernel-image&#34;&gt;GKI build instruction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cd &lt;code&gt;&amp;lt;GKI kernel source dir&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl -LSs &#34;https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh&#34; | bash -&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the kernel.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build the Manager App&lt;/h3&gt; &#xA;&lt;p&gt;Just open Android Studio and import the project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/copyleft/gpl.html&#34;&gt;GPL-3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.zx2c4.com/kernel-assisted-superuser/about/&#34;&gt;kernel-assisted-superuser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brevent/genuine/&#34;&gt;genuine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m0nad/Diamorphine&#34;&gt;Diamorphine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>shinework/photoshot</title>
    <updated>2022-12-12T01:29:58Z</updated>
    <id>tag:github.com,2022-12-12:/shinework/photoshot</id>
    <link href="https://github.com/shinework/photoshot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Photoshot&lt;/h1&gt; &#xA;&lt;p&gt;An open-source AI avatar generator web app&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1102595/206658000-d349ef06-e4f2-4626-9deb-6c8a246f7553.mp4&#34;&gt;&lt;img src=&#34;https://photoshot.app/og-cover.jpg&#34; alt=&#34;Photoshot&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try it out at &lt;a href=&#34;https://photoshot.app&#34;&gt;photoshot.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;▲ &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; for webapp&lt;/li&gt; &#xA; &lt;li&gt;🖼 &lt;a href=&#34;https://chakra-ui.com/&#34;&gt;Chakra UI&lt;/a&gt; for UI components&lt;/li&gt; &#xA; &lt;li&gt;🧠 &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt;, a platform for running machine learning models in the cloud&lt;/li&gt; &#xA; &lt;li&gt;💰 &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt; for payments&lt;/li&gt; &#xA; &lt;li&gt;👩‍🎨 &lt;a href=&#34;https://replicate.com/stability-ai/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt; an open-source text-to-image generation model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;# or&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt;</summary>
  </entry>
</feed>