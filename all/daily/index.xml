<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-13T01:22:50Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Orange-OpenSource/hurl</title>
    <updated>2024-02-13T01:22:50Z</updated>
    <id>tag:github.com,2024-02-13:/Orange-OpenSource/hurl</id>
    <link href="https://github.com/Orange-OpenSource/hurl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hurl, run and test HTTP requests with plain text.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;/docs/assets/img/logo-light.svg?sanitize=true&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;/docs/assets/img/logo-dark.svg?sanitize=true&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/logo-light.svg?sanitize=true&#34; width=&#34;264px&#34; alt=&#34;Hurl Logo&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/actions&#34;&gt;&lt;img src=&#34;https://github.com/Orange-OpenSource/hurl/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;deploy status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://Orange-OpenSource.github.io/hurl/coverage&#34;&gt;&lt;img src=&#34;https://Orange-OpenSource.github.io/hurl/coverage/badges/flat.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/hurl&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/hurl.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hurl.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-documentation-ff0288&#34; alt=&#34;documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s Hurl?&lt;/h1&gt; &#xA;&lt;p&gt;Hurl is a command line tool that runs &lt;b&gt;HTTP requests&lt;/b&gt; defined in a simple &lt;b&gt;plain text format&lt;/b&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile: it can be used for both &lt;b&gt;fetching data&lt;/b&gt; and &lt;b&gt;testing HTTP&lt;/b&gt; sessions.&lt;/p&gt; &#xA;&lt;p&gt;Hurl makes it easy to work with &lt;b&gt;HTML&lt;/b&gt; content, &lt;b&gt;REST / SOAP / GraphQL&lt;/b&gt; APIs, or any other &lt;b&gt;XML / JSON&lt;/b&gt; based APIs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;# Get home:&#xA;GET https://example.org&#xA;HTTP 200&#xA;[Captures]&#xA;csrf_token: xpath &#34;string(//meta[@name=&#39;_csrf_token&#39;]/@content)&#34;&#xA;&#xA;&#xA;# Do login!&#xA;POST https://example.org/login?user=toto&amp;amp;password=1234&#xA;X-CSRF-TOKEN: {{csrf_token}}&#xA;HTTP 302&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chaining multiple requests is easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/api/health&#xA;GET https://example.org/api/step1&#xA;GET https://example.org/api/step2&#xA;GET https://example.org/api/step3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Also an HTTP Test Tool&lt;/h1&gt; &#xA;&lt;p&gt;Hurl can run HTTP requests but can also be used to &lt;b&gt;test HTTP responses&lt;/b&gt;. Different types of queries and predicates are supported, from &lt;a href=&#34;https://en.wikipedia.org/wiki/XPath&#34;&gt;XPath&lt;/a&gt; and &lt;a href=&#34;https://goessner.net/articles/JsonPath/&#34;&gt;JSONPath&lt;/a&gt; on body response, to assert on status code and response headers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/player.html?id=hurl&amp;amp;speed=3&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/poster-hurl.png&#34; width=&#34;100%&#34; alt=&#34;Hurl Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is well adapted for &lt;b&gt;REST / JSON APIs&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/api/tests&#xA;{&#xA;    &#34;id&#34;: &#34;4568&#34;,&#xA;    &#34;evaluate&#34;: true&#xA;}&#xA;HTTP 200&#xA;[Asserts]&#xA;header &#34;X-Frame-Options&#34; == &#34;SAMEORIGIN&#34;&#xA;jsonpath &#34;$.status&#34; == &#34;RUNNING&#34;    # Check the status code&#xA;jsonpath &#34;$.tests&#34; count == 25      # Check the number of items&#xA;jsonpath &#34;$.id&#34; matches /\d{4}/     # Check the format of the id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;HTML content&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 200&#xA;[Asserts]&#xA;xpath &#34;normalize-space(//head/title)&#34; == &#34;Hello world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;GraphQL&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/graphql&#xA;```graphql&#xA;{&#xA;  human(id: &#34;1000&#34;) {&#xA;    name&#xA;    height(unit: FOOT)&#xA;  }&#xA;}&#xA;```&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and even &lt;b&gt;SOAP APIs&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/InStock&#xA;Content-Type: application/soap+xml; charset=utf-8&#xA;SOAPAction: &#34;http://www.w3.org/2003/05/soap-envelope&#34;&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;soap:Envelope xmlns:soap=&#34;http://www.w3.org/2003/05/soap-envelope&#34; xmlns:m=&#34;https://example.org&#34;&amp;gt;&#xA;  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;&#xA;  &amp;lt;soap:Body&amp;gt;&#xA;    &amp;lt;m:GetStockPrice&amp;gt;&#xA;      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;&#xA;    &amp;lt;/m:GetStockPrice&amp;gt;&#xA;  &amp;lt;/soap:Body&amp;gt;&#xA;&amp;lt;/soap:Envelope&amp;gt;&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hurl can also be used to test the &lt;b&gt;performance&lt;/b&gt; of HTTP endpoints&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/api/v1/pets&#xA;HTTP 200&#xA;[Asserts]&#xA;duration &amp;lt; 1000  # Duration in ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And check response bytes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/data.tar.gz&#xA;HTTP 200&#xA;[Asserts]&#xA;sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, Hurl is easy to &lt;b&gt;integrate in CI/CD&lt;/b&gt;, with text, JUnit, TAP and HTML reports&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;/docs/assets/img/home-waterfall-light.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;/docs/assets/img/home-waterfall-dark.png&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/docs/assets/img/home-waterfall-light.png&#34; width=&#34;480&#34; alt=&#34;HTML report&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1&gt;Why Hurl?&lt;/h1&gt; &#xA;&lt;ul class=&#34;showcase-container&#34;&gt; &#xA; &lt;li&gt;&lt;b&gt;Text Format:&lt;/b&gt; for both devops and developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Fast CLI:&lt;/b&gt; a command line for local dev and continuous integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Single Binary:&lt;/b&gt; easy to install, with no runtime required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Powered by curl&lt;/h1&gt; &#xA;&lt;p&gt;Hurl is a lightweight binary written in &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt;. Under the hood, Hurl HTTP engine is powered by &lt;a href=&#34;https://curl.se/libcurl/&#34;&gt;libcurl&lt;/a&gt;, one of the most powerful and reliable file transfer libraries. With its text file format, Hurl adds syntactic sugar to run and test HTTP requests, but it&#39;s still the &lt;a href=&#34;https://curl.se&#34;&gt;curl&lt;/a&gt; that we love: &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;efficient&lt;/strong&gt; and &lt;strong&gt;HTTP/3 ready&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feedbacks&lt;/h1&gt; &#xA;&lt;p&gt;To support its development, &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/stargazers&#34;&gt;star Hurl on GitHub&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/issues&#34;&gt;Feedback, suggestion, bugs or improvements&lt;/a&gt; are welcome.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://hurl.dev/api/feedback&#xA;{&#xA;  &#34;name&#34;: &#34;John Doe&#34;,&#xA;  &#34;feedback&#34;: &#34;Hurl is awesome!&#34;&#xA;}&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/license.html&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/tutorial/your-first-hurl-file.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/installation.html&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Orange-OpenSource/hurl&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#samples&#34;&gt;Samples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#getting-data&#34;&gt;Getting Data&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-headers&#34;&gt;HTTP Headers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#query-params&#34;&gt;Query Params&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#basic-authentication&#34;&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-data&#34;&gt;Sending Data&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-html-form-data&#34;&gt;Sending HTML Form Data&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#sending-multipart-form-data&#34;&gt;Sending Multipart Form Data&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#posting-a-json-body&#34;&gt;Posting a JSON Body&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-json-body&#34;&gt;Templating a JSON Body&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#templating-a-xml-body&#34;&gt;Templating a XML Body&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-graphql-query&#34;&gt;Using GraphQL Query&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response&#34;&gt;Testing Response&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-response-headers&#34;&gt;Testing Response Headers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-rest-apis&#34;&gt;Testing REST APIs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-html-response&#34;&gt;Testing HTML Response&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-set-cookie-attributes&#34;&gt;Testing Set-Cookie Attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-bytes-content&#34;&gt;Testing Bytes Content&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-certificate&#34;&gt;SSL Certificate&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#others&#34;&gt;Others&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http-version&#34;&gt;HTTP Version&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#polling-and-retry&#34;&gt;Polling and Retry&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delaying-requests&#34;&gt;Delaying Requests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#skipping-requests&#34;&gt;Skipping Requests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#testing-endpoint-performance&#34;&gt;Testing Endpoint Performance&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#using-soap-apis&#34;&gt;Using SOAP APIs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-and-using-a-csrf-token&#34;&gt;Capturing and Using a CSRF Token&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#checking-byte-order-mark-bom-in-response-body&#34;&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-signature-version-4-requests&#34;&gt;AWS Signature Version 4 Requests&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#manual&#34;&gt;Manual&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#name&#34;&gt;Name&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#hurl-file-format&#34;&gt;Hurl File Format&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#capturing-values&#34;&gt;Capturing values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#asserts&#34;&gt;Asserts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#environment&#34;&gt;Environment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#exit-codes&#34;&gt;Exit Codes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#www&#34;&gt;WWW&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#see-also&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#binaries-installation&#34;&gt;Binaries Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#linux&#34;&gt;Linux&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian--ubuntu&#34;&gt;Debian / Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine&#34;&gt;Alpine&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-linux--manjaro&#34;&gt;Arch Linux / Manjaro&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#nixos--nix&#34;&gt;NixOS / Nix&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macos&#34;&gt;macOS&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#macports&#34;&gt;MacPorts&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#freebsd&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#zip-file&#34;&gt;Zip File&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#installer&#34;&gt;Installer&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#chocolatey&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#scoop&#34;&gt;Scoop&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#windows-package-manager&#34;&gt;Windows Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cargo&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#conda-forge&#34;&gt;conda-forge&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#npm&#34;&gt;npm&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#building-from-sources&#34;&gt;Building From Sources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-linux&#34;&gt;Build on Linux&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#debian-based-distributions&#34;&gt;Debian based distributions&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#red-hat-based-distributions&#34;&gt;Red Hat based distributions&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#arch-based-distributions&#34;&gt;Arch based distributions&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#alpine-based-distributions&#34;&gt;Alpine based distributions&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-macos&#34;&gt;Build on macOS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#build-on-windows&#34;&gt;Build on Windows&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Samples&lt;/h1&gt; &#xA;&lt;p&gt;To run a sample, edit a file with the sample content, and run Hurl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ vi sample.hurl&#xA;&#xA;GET https://example.org&#xA;&#xA;$ hurl sample.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Hurl behaves like &lt;a href=&#34;https://curl.se&#34;&gt;curl&lt;/a&gt; and outputs the last HTTP response&#39;s &lt;a href=&#34;https://hurl.dev/docs/entry.html&#34;&gt;entry&lt;/a&gt;. To have a test oriented output, you can use &lt;a href=&#34;https://hurl.dev/docs/manual.html#test&#34;&gt;&lt;code&gt;--test&lt;/code&gt; option&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hurl --test sample.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/tree/master/integration/hurl/tests_ok&#34;&gt;Hurl tests suite&lt;/a&gt; for more samples.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Data&lt;/h2&gt; &#xA;&lt;p&gt;A simple GET:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#method&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;HTTP Headers&lt;/h3&gt; &#xA;&lt;p&gt;A simple GET with headers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/news&#xA;User-Agent: Mozilla/5.0 &#xA;Accept: */*&#xA;Accept-Language: en-US,en;q=0.5&#xA;Accept-Encoding: gzip, deflate, br&#xA;Connection: keep-alive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#headers&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Query Params&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/news&#xA;[QueryStringParams]&#xA;order: newest&#xA;search: something to search&#xA;count: 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/news?order=newest&amp;amp;search=something%20to%20search&amp;amp;count=100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#query-parameters&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Basic Authentication&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/protected&#xA;[BasicAuth]&#xA;bob: secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#basic-authentication&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is equivalent to construct the request with a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization&#34;&gt;Authorization&lt;/a&gt; header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;# Authorization header value can be computed with `echo -n &#39;bob:secret&#39; | base64`&#xA;GET https://example.org/protected&#xA;Authorization: Basic Ym9iOnNlY3JldA== &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic authentication allows per request authentication. If you want to add basic authentication to all the requests of a Hurl file you could use &lt;a href=&#34;https://hurl.dev/docs/manual.html#user&#34;&gt;&lt;code&gt;-u/--user&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sending Data&lt;/h2&gt; &#xA;&lt;h3&gt;Sending HTML Form Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/contact&#xA;[FormParams]&#xA;default: false&#xA;token: {{token}}&#xA;email: john.doe@rookie.org&#xA;number: 33611223344&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#form-parameters&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sending Multipart Form Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/upload&#xA;[MultipartFormData]&#xA;field1: value1&#xA;field2: file,example.txt;&#xA;# One can specify the file content type:&#xA;field3: file,example.zip; application/zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#multipart-form-data&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Multipart forms can also be sent with a &lt;a href=&#34;https://hurl.dev/docs/request.html#multiline-string-body&#34;&gt;multiline string body&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/upload&#xA;Content-Type: multipart/form-data; boundary=&#34;boundary&#34;&#xA;```&#xA;--boundary&#xA;Content-Disposition: form-data; name=&#34;key1&#34;&#xA;&#xA;value1&#xA;--boundary&#xA;Content-Disposition: form-data; name=&#34;upload1&#34;; filename=&#34;data.txt&#34;&#xA;Content-Type: text/plain&#xA;&#xA;Hello World!&#xA;--boundary&#xA;Content-Disposition: form-data; name=&#34;upload2&#34;; filename=&#34;data.html&#34;&#xA;Content-Type: text/html&#xA;&#xA;&amp;lt;div&amp;gt;Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;!&amp;lt;/div&amp;gt;&#xA;--boundary--&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In that case, files have to be inlined in the Hurl file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#multiline-string-body&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Posting a JSON Body&lt;/h3&gt; &#xA;&lt;p&gt;With an inline JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/api/tests&#xA;{&#xA;    &#34;id&#34;: &#34;456&#34;,&#xA;    &#34;evaluate&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#json-body&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;With a local file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/api/tests&#xA;Content-Type: application/json&#xA;file,data.json;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#file-body&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Templating a JSON Body&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;PUT https://example.org/api/hits&#xA;Content-Type: application/json&#xA;{&#xA;    &#34;key0&#34;: &#34;{{a_string}}&#34;,&#xA;    &#34;key1&#34;: {{a_bool}},&#xA;    &#34;key2&#34;: {{a_null}},&#xA;    &#34;key3&#34;: {{a_number}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variables can be initialized via command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hurl --variable a_string=apple \&#xA;       --variable a_bool=true \&#xA;       --variable a_null=null \&#xA;       --variable a_number=42 \&#xA;       test.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resulting in a PUT request with the following JSON body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;key0&#34;: &#34;apple&#34;,&#xA;    &#34;key1&#34;: true,&#xA;    &#34;key2&#34;: null,&#xA;    &#34;key3&#34;: 42&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/templates.html&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Templating a XML Body&lt;/h3&gt; &#xA;&lt;p&gt;Using templates with &lt;a href=&#34;https://hurl.dev/docs/request.html#xml-body&#34;&gt;XML body&lt;/a&gt; is not currently supported in Hurl. You can use templates in &lt;a href=&#34;https://hurl.dev/docs/request.html#multiline-string-body&#34;&gt;XML multiline string body&lt;/a&gt; with variables to send a variable XML body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/echo/post/xml&#xA;```xml&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;Request&amp;gt;&#xA;    &amp;lt;Login&amp;gt;{{login}}&amp;lt;/Login&amp;gt;&#xA;    &amp;lt;Password&amp;gt;{{password}}&amp;lt;/Password&amp;gt;&#xA;&amp;lt;/Request&amp;gt;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#multiline-string-body&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using GraphQL Query&lt;/h3&gt; &#xA;&lt;p&gt;A simple GraphQL query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/starwars/graphql&#xA;```graphql&#xA;{&#xA;  human(id: &#34;1000&#34;) {&#xA;    name&#xA;    height(unit: FOOT)&#xA;  }&#xA;}&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A GraphQL query with variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/starwars/graphql&#xA;```graphql&#xA;query Hero($episode: Episode, $withFriends: Boolean!) {&#xA;  hero(episode: $episode) {&#xA;    name&#xA;    friends @include(if: $withFriends) {&#xA;      name&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;variables {&#xA;  &#34;episode&#34;: &#34;JEDI&#34;,&#xA;  &#34;withFriends&#34;: false&#xA;}&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GraphQL queries can also use &lt;a href=&#34;https://hurl.dev/docs/templates.html&#34;&gt;Hurl templates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#graphql-body&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing Response&lt;/h2&gt; &#xA;&lt;h3&gt;Testing Response Headers&lt;/h3&gt; &#xA;&lt;p&gt;Use implicit response asserts to test header values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/index.html&#xA;HTTP 200&#xA;Set-Cookie: theme=light&#xA;Set-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#headers&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or use explicit response asserts with &lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#predicates&#34;&gt;predicates&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 302&#xA;[Asserts]&#xA;header &#34;Location&#34; contains &#34;www.example.net&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#header-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing REST APIs&lt;/h3&gt; &#xA;&lt;p&gt;Asserting JSON body response (node values, collection count etc...) with &lt;a href=&#34;https://goessner.net/articles/JsonPath/&#34;&gt;JSONPath&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/order&#xA;screencapability: low&#xA;HTTP 200&#xA;[Asserts]&#xA;jsonpath &#34;$.validated&#34; == true&#xA;jsonpath &#34;$.userInfo.firstName&#34; == &#34;Franck&#34;&#xA;jsonpath &#34;$.userInfo.lastName&#34; == &#34;Herbert&#34;&#xA;jsonpath &#34;$.hasDevice&#34; == false&#xA;jsonpath &#34;$.links&#34; count == 12&#xA;jsonpath &#34;$.state&#34; != null&#xA;jsonpath &#34;$.order&#34; matches &#34;^order-\\d{8}$&#34;&#xA;jsonpath &#34;$.order&#34; matches /^order-\d{8}$/     # Alternative syntax with regex literal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#jsonpath-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Testing status code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/order/435&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#version-status&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/order/435&#xA;# Testing status code is in a 200-300 range&#xA;HTTP *&#xA;[Asserts]&#xA;status &amp;gt;= 200&#xA;status &amp;lt; 300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#status-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing HTML Response&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 200&#xA;Content-Type: text/html; charset=UTF-8&#xA;[Asserts]&#xA;xpath &#34;string(/html/head/title)&#34; contains &#34;Example&#34; # Check title&#xA;xpath &#34;count(//p)&#34; == 2  # Check the number of p&#xA;xpath &#34;//p&#34; count == 2  # Similar assert for p&#xA;xpath &#34;boolean(count(//h2))&#34; == false  # Check there is no h2  &#xA;xpath &#34;//h2&#34; not exists  # Similar assert for h2&#xA;xpath &#34;string(//div[1])&#34; matches /Hello.*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#xpath-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing Set-Cookie Attributes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/home&#xA;HTTP 200&#xA;[Asserts]&#xA;cookie &#34;JSESSIONID&#34; == &#34;8400BAFE2F66443613DC38AE3D9D6239&#34;&#xA;cookie &#34;JSESSIONID[Value]&#34; == &#34;8400BAFE2F66443613DC38AE3D9D6239&#34;&#xA;cookie &#34;JSESSIONID[Expires]&#34; contains &#34;Wed, 13 Jan 2021&#34;&#xA;cookie &#34;JSESSIONID[Secure]&#34; exists&#xA;cookie &#34;JSESSIONID[HttpOnly]&#34; exists&#xA;cookie &#34;JSESSIONID[SameSite]&#34; == &#34;Lax&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#cookie-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing Bytes Content&lt;/h3&gt; &#xA;&lt;p&gt;Check the SHA-256 response body hash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/data.tar.gz&#xA;HTTP 200&#xA;[Asserts]&#xA;sha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#sha-256-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SSL Certificate&lt;/h3&gt; &#xA;&lt;p&gt;Check the properties of a SSL certificate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 200&#xA;[Asserts]&#xA;certificate &#34;Subject&#34; == &#34;CN=example.org&#34;&#xA;certificate &#34;Issuer&#34; == &#34;C=US, O=Let&#39;s Encrypt, CN=R3&#34;&#xA;certificate &#34;Expire-Date&#34; daysAfterNow &amp;gt; 15&#xA;certificate &#34;Serial-Number&#34; matches /[\da-f]+/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#ssl-certificate-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Others&lt;/h2&gt; &#xA;&lt;h3&gt;HTTP Version&lt;/h3&gt; &#xA;&lt;p&gt;Testing HTTP version (1.0, 1.1, 2 or 3):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/order/435&#xA;HTTP/3 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#version-status&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Polling and Retry&lt;/h3&gt; &#xA;&lt;p&gt;Retry request on any errors (asserts, captures, status code, runtime etc...):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;# Create a new job&#xA;POST https://api.example.org/jobs&#xA;HTTP 201&#xA;[Captures]&#xA;job_id: jsonpath &#34;$.id&#34;&#xA;[Asserts]&#xA;jsonpath &#34;$.state&#34; == &#34;RUNNING&#34;&#xA;&#xA;&#xA;# Pull job status until it is completed&#xA;GET https://api.example.org/jobs/{{job_id}}&#xA;[Options]&#xA;retry: 10   # maximum number of retry, -1 for unlimited&#xA;HTTP 200&#xA;[Asserts]&#xA;jsonpath &#34;$.state&#34; == &#34;COMPLETED&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/entry.html#retry&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Delaying Requests&lt;/h3&gt; &#xA;&lt;p&gt;Add delay for every request, or a particular requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;# Delaying this request by 5s&#xA;GET https://example.org/turtle&#xA;[Options]&#xA;delay: 5000&#xA;HTTP 200&#xA;&#xA;# No delay!&#xA;GET https://example.org/turtle&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/manual.html#delay&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Skipping Requests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;# a, b, d are runner, c is skipped&#xA;GET https://example.org/a&#xA;&#xA;GET https://example.org/b&#xA;[Options]&#xA;skip: true&#xA;&#xA;GET https://example.org/c&#xA;&#xA;GET https://example.org/d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/manual.html#skip&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing Endpoint Performance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://sample.org/helloworld&#xA;HTTP *&#xA;[Asserts]&#xA;duration &amp;lt; 1000   # Check that response time is less than one second&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#duration-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using SOAP APIs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://example.org/InStock&#xA;Content-Type: application/soap+xml; charset=utf-8&#xA;SOAPAction: &#34;http://www.w3.org/2003/05/soap-envelope&#34;&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;soap:Envelope xmlns:soap=&#34;http://www.w3.org/2003/05/soap-envelope&#34; xmlns:m=&#34;https://example.org&#34;&amp;gt;&#xA;  &amp;lt;soap:Header&amp;gt;&amp;lt;/soap:Header&amp;gt;&#xA;  &amp;lt;soap:Body&amp;gt;&#xA;    &amp;lt;m:GetStockPrice&amp;gt;&#xA;      &amp;lt;m:StockName&amp;gt;GOOG&amp;lt;/m:StockName&amp;gt;&#xA;    &amp;lt;/m:GetStockPrice&amp;gt;&#xA;  &amp;lt;/soap:Body&amp;gt;&#xA;&amp;lt;/soap:Envelope&amp;gt;&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/request.html#xml-body&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Capturing and Using a CSRF Token&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 200&#xA;[Captures]&#xA;csrf_token: xpath &#34;string(//meta[@name=&#39;_csrf_token&#39;]/@content)&#34;&#xA;&#xA;&#xA;POST https://example.org/login?user=toto&amp;amp;password=1234&#xA;X-CSRF-TOKEN: {{csrf_token}}&#xA;HTTP 302&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/capturing-response.html#xpath-capture&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Checking Byte Order Mark (BOM) in Response Body&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org/data.bin&#xA;HTTP 200&#xA;[Asserts]&#xA;bytes startsWith hex,efbbbf;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/asserting-response.html#bytes-assert&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AWS Signature Version 4 Requests&lt;/h3&gt; &#xA;&lt;p&gt;Generate signed API requests with &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html&#34;&gt;AWS Signature Version 4&lt;/a&gt;, as used by several cloud providers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;POST https://sts.eu-central-1.amazonaws.com/&#xA;[Options]&#xA;aws-sigv4: aws:amz:eu-central-1:sts&#xA;[FormParams]&#xA;Action: GetCallerIdentity&#xA;Version: 2011-06-15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Access Key is given per &lt;a href=&#34;https://hurl.dev/docs/manual.html#user&#34;&gt;&lt;code&gt;--user&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev/docs/manual.html#aws-sigv4&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Manual&lt;/h1&gt; &#xA;&lt;h2&gt;Name&lt;/h2&gt; &#xA;&lt;p&gt;hurl - run and test HTTP requests.&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;hurl&lt;/strong&gt; [options] [FILE...]&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hurl&lt;/strong&gt; is a command line tool that runs HTTP requests defined in a simple plain text format.&lt;/p&gt; &#xA;&lt;p&gt;It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile, it can be used for fetching data and testing HTTP sessions: HTML content, REST / SOAP / GraphQL APIs, or any other XML / JSON based APIs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hurl session.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no input files are specified, input is read from stdin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo GET http://httpbin.org/get | hurl&#xA;    {&#xA;      &#34;args&#34;: {},&#xA;      &#34;headers&#34;: {&#xA;        &#34;Accept&#34;: &#34;*/*&#34;,&#xA;        &#34;Accept-Encoding&#34;: &#34;gzip&#34;,&#xA;        &#34;Content-Length&#34;: &#34;0&#34;,&#xA;        &#34;Host&#34;: &#34;httpbin.org&#34;,&#xA;        &#34;User-Agent&#34;: &#34;hurl/0.99.10&#34;,&#xA;        &#34;X-Amzn-Trace-Id&#34;: &#34;Root=1-5eedf4c7-520814d64e2f9249ea44e0&#34;&#xA;      },&#xA;      &#34;origin&#34;: &#34;1.2.3.4&#34;,&#xA;      &#34;url&#34;: &#34;http://httpbin.org/get&#34;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output goes to stdout by default. To have output go to a file, use the &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output&#34;&gt;&lt;code&gt;-o, --output&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hurl -o output input.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Hurl executes all HTTP requests and outputs the response body of the last HTTP call.&lt;/p&gt; &#xA;&lt;p&gt;To have a test oriented output, you can use &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test&#34;&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hurl --test *.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hurl File Format&lt;/h2&gt; &#xA;&lt;p&gt;The Hurl file format is fully documented in &lt;a href=&#34;https://hurl.dev/docs/hurl-file.html&#34;&gt;https://hurl.dev/docs/hurl-file.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It consists of one or several HTTP requests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET http://example.org/endpoint1&#xA;GET http://example.org/endpoint2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capturing values&lt;/h3&gt; &#xA;&lt;p&gt;A value from an HTTP response can be-reused for successive HTTP requests.&lt;/p&gt; &#xA;&lt;p&gt;A typical example occurs with CSRF tokens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 200&#xA;# Capture the CSRF token value from html body.&#xA;[Captures]&#xA;csrf_token: xpath &#34;normalize-space(//meta[@name=&#39;_csrf_token&#39;]/@content)&#34;&#xA;&#xA;# Do the login !&#xA;POST https://example.org/login?user=toto&amp;amp;password=1234&#xA;X-CSRF-TOKEN: {{csrf_token}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information on captures can be found here &lt;a href=&#34;https://hurl.dev/docs/capturing-response.html&#34;&gt;https://hurl.dev/docs/capturing-response.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Asserts&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP response defined in the Hurl file are used to make asserts. Responses are optional.&lt;/p&gt; &#xA;&lt;p&gt;At the minimum, response includes assert on the HTTP status code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET http://example.org&#xA;HTTP 301&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can also include asserts on the response headers&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET http://example.org&#xA;HTTP 301&#xA;Location: http://www.example.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Explicit asserts can be included by combining a query and a predicate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET http://example.org&#xA;HTTP 301&#xA;[Asserts]&#xA;xpath &#34;string(//title)&#34; == &#34;301 Moved&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the addition of asserts, Hurl can be used as a testing tool to run scenarios.&lt;/p&gt; &#xA;&lt;p&gt;More information on asserts can be found here &lt;a href=&#34;https://hurl.dev/docs/asserting-response.html&#34;&gt;https://hurl.dev/docs/asserting-response.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;Options that exist in curl have exactly the same semantics.&lt;/p&gt; &#xA;&lt;p&gt;Options specified on the command line are defined for every Hurl file&#39;s entry.&lt;/p&gt; &#xA;&lt;p&gt;For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hurl --location foo.hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will follow redirection for each entry in &lt;code&gt;foo.hurl&lt;/code&gt;. You can also define an option only for a particular entry with an &lt;code&gt;[Options]&lt;/code&gt; section. For instance, this Hurl file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hurl&#34;&gt;GET https://example.org&#xA;HTTP 301&#xA;&#xA;GET https://example.org&#xA;[Options]&#xA;location: true&#xA;HTTP 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will follow a redirection only for the second entry.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#aws-sigv4&#34; id=&#34;aws-sigv4&#34;&gt;&lt;code&gt;--aws-sigv4 &amp;lt;PROVIDER1[:PROVIDER2[:REGION[:SERVICE]]]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate an &lt;code&gt;Authorization&lt;/code&gt; header with an AWS SigV4 signature.&lt;br&gt;&lt;br&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user&#34;&gt;&lt;code&gt;-u, --user&lt;/code&gt;&lt;/a&gt; to specify Access Key Id (username) and Secret Key (password).&lt;br&gt;&lt;br&gt;To use temporary session credentials (e.g. for an AWS IAM Role), add the &lt;code&gt;X-Amz-Security-Token&lt;/code&gt; header containing the session token.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cacert&#34; id=&#34;cacert&#34;&gt;&lt;code&gt;--cacert &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the certificate file for peer verification. The file may contain multiple CA certificates and must be in PEM format.&lt;br&gt;Normally Hurl is built to use a default file for this, so this option is typically used to alter that default file.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cert&#34; id=&#34;cert&#34;&gt;&lt;code&gt;-E, --cert &amp;lt;CERTIFICATE[:PASSWORD]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client certificate file and password.&lt;br&gt;&lt;br&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key&#34;&gt;&lt;code&gt;--key&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#color&#34; id=&#34;color&#34;&gt;&lt;code&gt;--color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Colorize debug output (the HTTP response output is not colorized).&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#compressed&#34; id=&#34;compressed&#34;&gt;&lt;code&gt;--compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Request a compressed response using one of the algorithms br, gzip, deflate and automatically decompress the content.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout&#34; id=&#34;connect-timeout&#34;&gt;&lt;code&gt;--connect-timeout &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum time in seconds that you allow Hurl&#39;s connection to take.&lt;br&gt;&lt;br&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time&#34;&gt;&lt;code&gt;-m, --max-time&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-to&#34; id=&#34;connect-to&#34;&gt;&lt;code&gt;--connect-to &amp;lt;HOST1:PORT1:HOST2:PORT2&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option can be used several times in a command line.&lt;br&gt;&lt;br&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve&#34;&gt;&lt;code&gt;--resolve&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#continue-on-error&#34; id=&#34;continue-on-error&#34;&gt;&lt;code&gt;--continue-on-error&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Continue executing requests to the end of the Hurl file even when an assert error occurs.&lt;br&gt;By default, Hurl exits after an assert error in the HTTP response.&lt;br&gt;&lt;br&gt;Note that this option does not affect the behavior with multiple input Hurl files.&lt;br&gt;&lt;br&gt;All the input files are executed independently. The result of one file does not affect the execution of the other Hurl files.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie&#34; id=&#34;cookie&#34;&gt;&lt;code&gt;-b, --cookie &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read cookies from FILE (using the Netscape cookie file format).&lt;br&gt;&lt;br&gt;Combined with &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar&#34;&gt;&lt;code&gt;-c, --cookie-jar&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie-jar&#34; id=&#34;cookie-jar&#34;&gt;&lt;code&gt;-c, --cookie-jar &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Write cookies to FILE after running the session (only for one session).&lt;br&gt;The file will be written using the Netscape cookie file format.&lt;br&gt;&lt;br&gt;Combined with &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#cookie&#34;&gt;&lt;code&gt;-b, --cookie&lt;/code&gt;&lt;/a&gt;, you can simulate a cookie storage between successive Hurl runs.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#delay&#34; id=&#34;delay&#34;&gt;&lt;code&gt;--delay &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets delay before each request.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#error-format&#34; id=&#34;error-format&#34;&gt;&lt;code&gt;--error-format &amp;lt;FORMAT&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Control the format of error message (short by default or long)&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#file-root&#34; id=&#34;file-root&#34;&gt;&lt;code&gt;--file-root &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set root directory to import files in Hurl. This is used for files in multipart form data, request body and response output.&lt;br&gt;When it is not explicitly defined, files are relative to the current directory in which Hurl is running.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#glob&#34; id=&#34;glob&#34;&gt;&lt;code&gt;--glob &amp;lt;GLOB&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify input files that match the given glob pattern.&lt;br&gt;&lt;br&gt;Multiple glob flags may be used. This flag supports common Unix glob patterns like *, ? and [].&lt;br&gt;However, to avoid your shell accidentally expanding glob patterns before Hurl handles them, you must use single quotes or double quotes around each pattern.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http10&#34; id=&#34;http10&#34;&gt;&lt;code&gt;-0, --http1.0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tells Hurl to use HTTP version 1.0 instead of using its internally preferred HTTP version.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http11&#34; id=&#34;http11&#34;&gt;&lt;code&gt;--http1.1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tells Hurl to use HTTP version 1.1.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http2&#34; id=&#34;http2&#34;&gt;&lt;code&gt;--http2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tells Hurl to use HTTP version 2.&lt;br&gt;For HTTPS, this means Hurl negotiates HTTP/2 in the TLS handshake. Hurl does this by default.&lt;br&gt;For HTTP, this means Hurl attempts to upgrade the request to HTTP/2 using the Upgrade: request header.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#http3&#34; id=&#34;http3&#34;&gt;&lt;code&gt;--http3&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tells Hurl to try HTTP/3 to the host in the URL, but fallback to earlier HTTP versions if the HTTP/3 connection establishment fails. HTTP/3 is only available for HTTPS and not for HTTP URLs.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ignore-asserts&#34; id=&#34;ignore-asserts&#34;&gt;&lt;code&gt;--ignore-asserts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ignore all asserts defined in the Hurl file.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include&#34; id=&#34;include&#34;&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Include the HTTP headers in the output&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#insecure&#34; id=&#34;insecure&#34;&gt;&lt;code&gt;-k, --insecure&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This option explicitly allows Hurl to perform &#34;insecure&#34; SSL connections and transfers.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#interactive&#34; id=&#34;interactive&#34;&gt;&lt;code&gt;--interactive&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stop between requests.&lt;br&gt;&lt;br&gt;This is similar to a break point, You can then continue (Press C) or quit (Press Q).&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv4&#34; id=&#34;ipv4&#34;&gt;&lt;code&gt;-4, --ipv4&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This option tells Hurl to use IPv4 addresses only when resolving host names, and not for example try IPv6.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ipv6&#34; id=&#34;ipv6&#34;&gt;&lt;code&gt;-6, --ipv6&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This option tells Hurl to use IPv6 addresses only when resolving host names, and not for example try IPv4.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#json&#34; id=&#34;json&#34;&gt;&lt;code&gt;--json&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output each Hurl file result to JSON. The format is very closed to HAR format.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#key&#34; id=&#34;key&#34;&gt;&lt;code&gt;--key &amp;lt;KEY&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Private key file name.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location&#34; id=&#34;location&#34;&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Follow redirect. To limit the amount of redirects to follow use the &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs&#34;&gt;&lt;code&gt;--max-redirs&lt;/code&gt;&lt;/a&gt; option&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location-trusted&#34; id=&#34;location-trusted&#34;&gt;&lt;code&gt;--location-trusted&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Like &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#location&#34;&gt;&lt;code&gt;-L, --location&lt;/code&gt;&lt;/a&gt;, but allows sending the name + password to all hosts that the site may redirect to.&lt;br&gt;This may or may not introduce a security breach if the site redirects you to a site to which you send your authentication info (which is plaintext in the case of HTTP Basic authentication).&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-redirs&#34; id=&#34;max-redirs&#34;&gt;&lt;code&gt;--max-redirs &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set maximum number of redirection-followings allowed&lt;br&gt;&lt;br&gt;By default, the limit is set to 50 redirections. Set this option to -1 to make it unlimited.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#max-time&#34; id=&#34;max-time&#34;&gt;&lt;code&gt;-m, --max-time &amp;lt;SECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum time in seconds that you allow a request/response to take. This is the standard timeout.&lt;br&gt;&lt;br&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#connect-timeout&#34;&gt;&lt;code&gt;--connect-timeout&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color&#34; id=&#34;no-color&#34;&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do not colorize output.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-output&#34; id=&#34;no-output&#34;&gt;&lt;code&gt;--no-output&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Suppress output. By default, Hurl outputs the body of the last response.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#noproxy&#34; id=&#34;noproxy&#34;&gt;&lt;code&gt;--noproxy &amp;lt;HOST(S)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma-separated list of hosts which do not use a proxy.&lt;br&gt;&lt;br&gt;Override value from Environment variable no_proxy.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#output&#34; id=&#34;output&#34;&gt;&lt;code&gt;-o, --output &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Write output to FILE instead of stdout.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#path-as-is&#34; id=&#34;path-as-is&#34;&gt;&lt;code&gt;--path-as-is&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tell Hurl to not handle sequences of /../ or /./ in the given URL path. Normally Hurl will squash or merge them according to standards but with this option set you tell it not to do that.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy&#34; id=&#34;proxy&#34;&gt;&lt;code&gt;-x, --proxy &amp;lt;[PROTOCOL://]HOST[:PORT]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the specified proxy.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-html&#34; id=&#34;report-html&#34;&gt;&lt;code&gt;--report-html &amp;lt;DIR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate HTML report in DIR.&lt;br&gt;&lt;br&gt;If the HTML report already exists, it will be updated with the new test results.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-junit&#34; id=&#34;report-junit&#34;&gt;&lt;code&gt;--report-junit &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate JUnit File.&lt;br&gt;&lt;br&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#report-tap&#34; id=&#34;report-tap&#34;&gt;&lt;code&gt;--report-tap &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate TAP report.&lt;br&gt;&lt;br&gt;If the FILE report already exists, it will be updated with the new test results.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#resolve&#34; id=&#34;resolve&#34;&gt;&lt;code&gt;--resolve &amp;lt;HOST:PORT:ADDR&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provide a custom address for a specific host and port pair. Using this, you can make the Hurl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry&#34; id=&#34;retry&#34;&gt;&lt;code&gt;--retry &amp;lt;NUM&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum number of retries, 0 for no retries, -1 for unlimited retries. Retry happens if any error occurs (asserts, captures, runtimes etc...).&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#retry-interval&#34; id=&#34;retry-interval&#34;&gt;&lt;code&gt;--retry-interval &amp;lt;MILLISECONDS&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Duration in milliseconds between each retry. Default is 1000 ms.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#ssl-no-revoke&#34; id=&#34;ssl-no-revoke&#34;&gt;&lt;code&gt;--ssl-no-revoke&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(Windows) This option tells Hurl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#test&#34; id=&#34;test&#34;&gt;&lt;code&gt;--test&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Activate test mode: with this, the HTTP response is not outputted anymore, progress is reported for each Hurl file tested, and a text summary is displayed when all files have been run.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#to-entry&#34; id=&#34;to-entry&#34;&gt;&lt;code&gt;--to-entry &amp;lt;ENTRY_NUMBER&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute Hurl file to ENTRY_NUMBER (starting at 1).&lt;br&gt;Ignore the remaining of the file. It is useful for debugging a session.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#unix-socket&#34; id=&#34;unix-socket&#34;&gt;&lt;code&gt;--unix-socket &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(HTTP) Connect through this Unix domain socket, instead of using the network.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user&#34; id=&#34;user&#34;&gt;&lt;code&gt;-u, --user &amp;lt;USER:PASSWORD&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add basic Authentication header to each request.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#user-agent&#34; id=&#34;user-agent&#34;&gt;&lt;code&gt;-A, --user-agent &amp;lt;NAME&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify the User-Agent string to send to the HTTP server.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable&#34; id=&#34;variable&#34;&gt;&lt;code&gt;--variable &amp;lt;NAME=VALUE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Define variable (name/value) to be used in Hurl templates.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file&#34; id=&#34;variables-file&#34;&gt;&lt;code&gt;--variables-file &amp;lt;FILE&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set properties file in which your define your variables.&lt;br&gt;&lt;br&gt;Each variable is defined as name=value exactly as with &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable&#34;&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; option.&lt;br&gt;&lt;br&gt;Note that defining a variable twice produces an error.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose&#34; id=&#34;verbose&#34;&gt;&lt;code&gt;-v, --verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Turn on verbose output on standard error stream.&lt;br&gt;Useful for debugging.&lt;br&gt;&lt;br&gt;A line starting with &#39;&amp;gt;&#39; means data sent by Hurl.&lt;br&gt;A line staring with &#39;&amp;lt;&#39; means data received by Hurl.&lt;br&gt;A line starting with &#39;*&#39; means additional info provided by Hurl.&lt;br&gt;&lt;br&gt;If you only want HTTP headers in the output, &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#include&#34;&gt;&lt;code&gt;-i, --include&lt;/code&gt;&lt;/a&gt; might be the option you&#39;re looking for.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#very-verbose&#34; id=&#34;very-verbose&#34;&gt;&lt;code&gt;--very-verbose&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Turn on more verbose output on standard error stream.&lt;br&gt;&lt;br&gt;In contrast to &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#verbose&#34;&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/a&gt; option, this option outputs the full HTTP body request and response on standard error. In addition, lines starting with &#39;**&#39; are libcurl debug logs.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#help&#34; id=&#34;help&#34;&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Usage help. This lists all current command line options with a short description.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#version&#34; id=&#34;version&#34;&gt;&lt;code&gt;-V, --version&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prints version information&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment&lt;/h2&gt; &#xA;&lt;p&gt;Environment variables can only be specified in lowercase.&lt;/p&gt; &#xA;&lt;p&gt;Using an environment variable to set the proxy has the same effect as using the &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#proxy&#34;&gt;&lt;code&gt;-x, --proxy&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;http_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the proxy server to use for HTTP.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;https_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the proxy server to use for HTTPS.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;all_proxy [PROTOCOL://]&amp;lt;HOST&amp;gt;[:PORT]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the proxy server to use if no protocol-specific proxy is set.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;no_proxy &amp;lt;comma-separated list of hosts&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of host names that shouldn&#39;t go through any proxy.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HURL_name value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Define variable (name/value) to be used in Hurl templates. This is similar than &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variable&#34;&gt;&lt;code&gt;--variable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#variables-file&#34;&gt;&lt;code&gt;--variables-file&lt;/code&gt;&lt;/a&gt; options.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to a non-empty string, do not colorize output (see &lt;a href=&#34;https://raw.githubusercontent.com/Orange-OpenSource/hurl/master/#no-color&#34;&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option).&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Exit Codes&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Success.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Failed to parse command-line options.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Input File Parsing Error.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runtime error (such as failure to connect to host).&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Assert Error.&lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;WWW&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hurl.dev&#34;&gt;https://hurl.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;p&gt;curl(1) hurlfmt(1)&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Binaries Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Precompiled binary is available at &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/releases/latest&#34;&gt;Hurl latest GitHub release&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ INSTALL_DIR=/tmp&#xA;$ VERSION=4.2.0&#xA;$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR&#xA;$ export PATH=$INSTALL_DIR/hurl-$VERSION:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian / Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;For Debian / Ubuntu, Hurl can be installed using a binary .deb file provided in each Hurl release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ VERSION=4.2.0&#xA;$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_$VERSION_amd64.deb&#xA;$ sudo apt update &amp;amp;&amp;amp; sudo apt install ./hurl_$VERSION_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alpine&lt;/h4&gt; &#xA;&lt;p&gt;Hurl is available on &lt;code&gt;testing&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch Linux / Manjaro&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/hurl-bin/&#34;&gt;&lt;code&gt;hurl-bin&lt;/code&gt; package&lt;/a&gt; for Arch Linux and derived distros is available via &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_User_Repository&#34;&gt;AUR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;NixOS / Nix&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.nixos.org/packages?from=0&amp;amp;size=1&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=hurl&#34;&gt;NixOS / Nix package&lt;/a&gt; is available on stable channel.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Precompiled binaries for Intel and ARM CPUs are available at &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/releases/latest&#34;&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MacPorts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo port install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FreeBSD&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo pkg install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Zip File&lt;/h4&gt; &#xA;&lt;p&gt;Hurl can be installed from a standalone zip file at &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/releases/latest&#34;&gt;Hurl latest GitHub release&lt;/a&gt;. You will need to update your &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h4&gt;Installer&lt;/h4&gt; &#xA;&lt;p&gt;An executable installer is also available at &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/releases/latest&#34;&gt;Hurl latest GitHub release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Chocolatey&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ choco install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scoop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ scoop install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows Package Manager&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ winget install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cargo&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a Rust programmer, Hurl can be installed with cargo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cargo install hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;conda-forge&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ conda install -c conda-forge hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hurl can also be installed with &lt;a href=&#34;https://conda-forge.org&#34;&gt;&lt;code&gt;conda-forge&lt;/code&gt;&lt;/a&gt; powered package manager like &lt;a href=&#34;https://prefix.dev&#34;&gt;&lt;code&gt;pixi&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker pull ghcr.io/orange-opensource/hurl:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install --save-dev @orangeopensource/hurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building From Sources&lt;/h2&gt; &#xA;&lt;p&gt;Hurl sources are available in &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build on Linux&lt;/h3&gt; &#xA;&lt;p&gt;Hurl depends on libssl, libcurl and libxml2 native libraries. You will need their development files in your platform.&lt;/p&gt; &#xA;&lt;h4&gt;Debian based distributions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Red Hat based distributions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ yum install -y pkg-config gcc openssl-devel libxml2-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch based distributions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alpine based distributions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build on macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ xcode-select --install&#xA;$ brew install pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hurl is written in &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt;. You should &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;install&lt;/a&gt; the latest stable release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl https://sh.rustup.rs -sSf | sh -s -- -y&#xA;$ source $HOME/.cargo/env&#xA;$ rustc --version&#xA;$ cargo --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build hurl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/Orange-OpenSource/hurl&#xA;$ cd hurl&#xA;$ cargo build --release&#xA;$ ./target/release/hurl --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://github.com/Orange-OpenSource/hurl/raw/master/contrib/windows/README.md&#34;&gt;contrib on Windows section&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bepass-org/oblivion</title>
    <updated>2024-02-13T01:22:50Z</updated>
    <id>tag:github.com,2024-02-13:/bepass-org/oblivion</id>
    <link href="https://github.com/bepass-org/oblivion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unofficial warp client for android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Oblivion - Unofficial Warp Client for Android&lt;/h1&gt; &#xA;&lt;p&gt;&#34;Internet, for all or none!&#34;&lt;/p&gt; &#xA;&lt;p&gt;Oblivion provides secure, optimized internet access through a user-friendly Android app using cloudflare warp technology&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s leveraging &lt;code&gt;bepass-sdk&lt;/code&gt; and a custom Go implementation of WireGuard, it&#39;s designed for fast and private online experiences.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure VPN&lt;/strong&gt;: Custom WireGuard implementation in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optimized Speeds&lt;/strong&gt;: Enhanced with &lt;code&gt;bepass-sdk&lt;/code&gt; for minimal latency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User-Friendly&lt;/strong&gt;: Simple, intuitive interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Download&lt;/strong&gt;: Grab the APK from our &lt;a href=&#34;https://github.com/bepass-org/oblivion/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install&lt;/strong&gt;: Open the APK file to install.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Connect&lt;/strong&gt;: Launch Oblivion and hit the switch button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building the Project&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 17&lt;/li&gt; &#xA; &lt;li&gt;Gradle 8&lt;/li&gt; &#xA; &lt;li&gt;Android Gradle Plugin (AGP) 8.1.2&lt;/li&gt; &#xA; &lt;li&gt;NDK r26b (26.1.10909125)&lt;/li&gt; &#xA; &lt;li&gt;Go 1.20.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Follow the steps below to build the Oblivion:&lt;/p&gt; &#xA;&lt;h3&gt;Building Go libraries&lt;/h3&gt; &#xA;&lt;p&gt;Open the Terminal tab at the bottom of Android Studio.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the libs directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd app/libs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize Go modules and install required packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go mod tidy&#xA;go install golang.org/x/mobile/cmd/gomobile@latest&#xA;go install golang.org/x/mobile/cmd/gobind@latest&#xA;go get golang.org/x/mobile/cmd/gobind&#xA;go get golang.org/x/mobile/cmd/gomobile&#xA;go get golang.org/x/mobile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize Go mobile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gomobile init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bind the Go package to Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gomobile bind -ldflags &#39;-s -w&#39; -o tun2socks.aar -androidapi 21 -target android .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate Signed Bundle/APK:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Android Studio, navigate to &#34;Build&#34; in the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Generate Signed Bundle/APK...&#34;&lt;/li&gt; &#xA; &lt;li&gt;Choose &#34;APK&#34; and proceed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Select Keystore:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on &#34;Choose existing...&#34; or &#34;Create new...&#34; to locate your keystore file.&lt;/li&gt; &#xA; &lt;li&gt;Enter the keystore password when prompted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Configure APK Signature:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the appropriate key alias from the dropdown menu.&lt;/li&gt; &#xA; &lt;li&gt;Input the key password.&lt;/li&gt; &#xA; &lt;li&gt;Continue to the next step.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Select APK Destination:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose the destination folder for the signed APK.&lt;/li&gt; &#xA; &lt;li&gt;Finalize by clicking &#34;Finish&#34; to generate the signed APK.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re a community-driven project, aiming to make the internet accessible for all. Whether you want to contribute code, suggest features, or need some help, we&#39;d love to hear from you! Check out our &lt;a href=&#34;https://github.com/bepass-org/oblivion/issues&#34;&gt;GitHub Issues&lt;/a&gt; or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements and Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project makes use of several open-source tools and libraries, and we are grateful to the developers and communities behind these projects. In particular, we would like to acknowledge:&lt;/p&gt; &#xA;&lt;h3&gt;Cloudflare Warp&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt;: Cloudflare Warp&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href=&#34;https://www.cloudflare.com/products/warp/&#34;&gt;Cloudflare Warp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;License&lt;/strong&gt;: &lt;a href=&#34;https://www.cloudflare.com/application/terms/&#34;&gt;License information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt;: Cloudflare Warp is a technology that enhances the security and performance of Internet applications. We use it in our project for its efficient and secure network traffic routing capabilities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WireGuard-go&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt;: WireGuard-go&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub Repository&lt;/strong&gt;: &lt;a href=&#34;https://github.com/WireGuard/wireguard-go&#34;&gt;WireGuard-go on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;License&lt;/strong&gt;: &lt;a href=&#34;https://github.com/WireGuard/wireguard-go/raw/master/COPYING&#34;&gt;GNU General Public License v2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt;: WireGuard-go is an implementation of the WireGuard secure network tunnel. It&#39;s used in our project to provide fast, modern, and secure VPN tunneling.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that the use of these tools is governed by their respective licenses, and you should consult those licenses for terms and conditions of use.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License - see the &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;CC BY-NC-SA 4.0 License&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Summary of License&lt;/h3&gt; &#xA;&lt;p&gt;The CC BY-NC-SA 4.0 License is a free, copyleft license suitable for non-commercial use. Here&#39;s what it means for using this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Attribution (BY)&lt;/strong&gt;: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NonCommercial (NC)&lt;/strong&gt;: You may not use the material for commercial purposes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ShareAlike (SA)&lt;/strong&gt;: If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This summary is only a brief overview. For the full legal text, please visit the provided link.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/sudo</title>
    <updated>2024-02-13T01:22:50Z</updated>
    <id>tag:github.com,2024-02-13:/microsoft/sudo</id>
    <link href="https://github.com/microsoft/sudo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s sudo, for Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/sudo/main/img/Windows/AppList.targetsize-24.png&#34; alt=&#34;Sudo for Windows icon&#34;&gt; Sudo for Windows&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the repository for &lt;a href=&#34;https://aka.ms/sudo&#34;&gt;Sudo for Windows&lt;/a&gt; 🥪. Sudo for Windows allows users to run elevated commands directly from unelevated terminal windows.&lt;/p&gt; &#xA;&lt;p&gt;Sudo is available for Windows 11 builds 26045 and later. If you&#39;re on an Insiders build with sudo, you can enable it in the Windows Settings app, on the &#34;Developer Features&#34; page.&lt;/p&gt; &#xA;&lt;p&gt;Here you can report issues and file feature requests. We&#39;re in the process of open-sourcing the code, so stay tuned for more updates.&lt;/p&gt; &#xA;&lt;h2&gt;Relationship to &lt;code&gt;sudo&lt;/code&gt; on Linux&lt;/h2&gt; &#xA;&lt;p&gt;Obviously, everything about permissions and the command line experience is different between Windows and Linux. This project is not a fork of the Linux &lt;code&gt;sudo&lt;/code&gt; project, nor is it a port of the Linux &lt;code&gt;sudo&lt;/code&gt; project. Instead, Sudo for Windows is a Windows-specific implementation of the &lt;code&gt;sudo&lt;/code&gt; concept.&lt;/p&gt; &#xA;&lt;p&gt;As the two are entirely different applications, you&#39;ll find that certain elements of the Linux &lt;code&gt;sudo&lt;/code&gt; experience are not present in Sudo for Windows, and vice versa. Scripts and documentation that are written for Linux &lt;code&gt;sudo&lt;/code&gt; may not be able to be used directly with Sudo for Windows without some modification.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All project documentation is located at &lt;a href=&#34;https://aka.ms/sudo-docs&#34;&gt;aka.ms/sudo-docs&lt;/a&gt;. If you would like to contribute to the documentation, please submit a pull request on the &lt;a href=&#34;https://github.com/MicrosoftDocs/windows-dev-docs/tree/docs/hub/sudo&#34;&gt;Sudo for Windows Documentation repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re still working on open-sourcing Sudo for Windows. Stay tuned for more updates.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;sudo.ps1&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In the meantime, you can contribute to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/sudo/main/scripts/sudo.ps1&#34;&gt;&lt;code&gt;sudo.ps1&lt;/code&gt;&lt;/a&gt; script. This script is meant to be a helper wrapper around &lt;code&gt;sudo.exe&lt;/code&gt; that provides a more user-friendly experience for using sudo from PowerShell. This script is located in the &lt;code&gt;scripts/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Communicating with the Team&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to communicate with the team is via GitHub issues.&lt;/p&gt; &#xA;&lt;p&gt;Please file new issues, feature requests and suggestions, but &lt;strong&gt;DO search for similar open/closed preexisting issues before creating a new issue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to ask a question that you feel doesn&#39;t warrant an issue (yet), try a &lt;a href=&#34;https://github.com/microsoft/sudo/discussions&#34;&gt;discussion thread&lt;/a&gt;. Those are especially helpful for question &amp;amp; answer threads. Otherwise, you can reach out to us via your social media platform of choice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mike Griese, Senior Developer: &lt;a href=&#34;https://mastodon.social/@zadjii&#34;&gt;@zadjii@mastodon.social&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jordi Adoumie, Product Manager: &lt;a href=&#34;https://twitter.com/joadoumie&#34;&gt;@joadoumie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dustin Howett, Engineering Lead: &lt;a href=&#34;https://mas.to/@DHowett&#34;&gt;@dhowett@mas.to&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clint Rutkas, Lead Product Manager: &lt;a href=&#34;https://twitter.com/clintrutkas&#34;&gt;@crutkas&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>