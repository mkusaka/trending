<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-07T01:28:47Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>supabase-community/supabase-mcp</title>
    <updated>2025-04-07T01:28:47Z</updated>
    <id>tag:github.com,2025-04-07:/supabase-community/supabase-mcp</id>
    <link href="https://github.com/supabase-community/supabase-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Connect Supabase to your AI assistants&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Supabase MCP Server&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Connect your Supabase projects to Cursor, Claude, Windsurf, and other AI assistants.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/3fce101a-b7d4-482f-9182-0be70ed1ad56&#34; alt=&#34;supabase-mcp-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP) standardizes how Large Language Models (LLMs) talk to external services like Supabase. It connects AI assistants directly with your Supabase project and allows them to perform tasks like managing tables, fetching config, and querying data. See the &lt;a href=&#34;https://raw.githubusercontent.com/supabase-community/supabase-mcp/main/#tools&#34;&gt;full list of tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;You will need Node.js installed on your machine. You can check this by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;node -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have Node.js installed, you can download it from &lt;a href=&#34;https://nodejs.org/&#34;&gt;nodejs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;1. Personal access token (PAT)&lt;/h3&gt; &#xA;&lt;p&gt;First, go to your &lt;a href=&#34;https://supabase.com/dashboard/account/tokens&#34;&gt;Supabase settings&lt;/a&gt; and create a personal access token. Give it a name that describes its purpose, like &#34;Cursor MCP Server&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This will be used to authenticate the MCP server with your Supabase account. Make sure to copy the token, as you won&#39;t be able to see it again.&lt;/p&gt; &#xA;&lt;h3&gt;2. Configure MCP client&lt;/h3&gt; &#xA;&lt;p&gt;Next, configure your MCP client (such as Cursor) to use this server. Most MCP clients store the configuration as JSON in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;supabase&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;-y&#34;,&#xA;        &#34;@supabase/mcp-server-supabase@latest&#34;,&#xA;        &#34;--access-token&#34;,&#xA;        &#34;&amp;lt;personal-access-token&amp;gt;&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;personal-access-token&amp;gt;&lt;/code&gt; with the token you created in step 1. If you are on Windows, you will need to &lt;a href=&#34;https://raw.githubusercontent.com/supabase-community/supabase-mcp/main/#windows&#34;&gt;prefix this command&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your MCP client doesn&#39;t accept JSON, the direct CLI command is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx -y @supabase/mcp-server-supabase@latest --access-token=&amp;lt;personal-access-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Do not run this command directly - this is meant to be executed by your MCP client in order to start the server. &lt;code&gt;npx&lt;/code&gt; automatically downloads the latest version of the MCP server from &lt;code&gt;npm&lt;/code&gt; and runs it in a single command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows, you will need to prefix the command with &lt;code&gt;cmd /c&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;supabase&#34;: {&#xA;      &#34;command&#34;: &#34;cmd&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;/c&#34;,&#xA;        &#34;npx&#34;,&#xA;        &#34;-y&#34;,&#xA;        &#34;@supabase/mcp-server-supabase@latest&#34;,&#xA;        &#34;--access-token&#34;,&#xA;        &#34;&amp;lt;personal-access-token&amp;gt;&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;code&gt;wsl&lt;/code&gt; if you are running Node.js inside WSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;supabase&#34;: {&#xA;      &#34;command&#34;: &#34;wsl&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;npx&#34;,&#xA;        &#34;-y&#34;,&#xA;        &#34;@supabase/mcp-server-supabase@latest&#34;,&#xA;        &#34;--access-token&#34;,&#xA;        &#34;&amp;lt;personal-access-token&amp;gt;&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure Node.js is available in your system &lt;code&gt;PATH&lt;/code&gt; environment variable. If you are running Node.js natively on Windows, you can set this by running the following commands in your terminal.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get the path to &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm config get prefix&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the directory to your PATH:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;setx PATH &#34;%PATH%;&amp;lt;path-to-dir&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart your MCP client.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; This server is pre-1.0, so expect some breaking changes between versions. Since LLMs will automatically adapt to the tools available, this shouldn&#39;t affect most users.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following Supabase tools are available to the LLM:&lt;/p&gt; &#xA;&lt;h4&gt;Project Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list_projects&lt;/code&gt;: Lists all Supabase projects for the user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_project&lt;/code&gt;: Gets details for a project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_project&lt;/code&gt;: Creates a new Supabase project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pause_project&lt;/code&gt;: Pauses a project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;restore_project&lt;/code&gt;: Restores a project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list_organizations&lt;/code&gt;: Lists all organizations that the user is a member of.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_organization&lt;/code&gt;: Gets details for an organization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Database Operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list_tables&lt;/code&gt;: Lists all tables within the specified schemas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list_extensions&lt;/code&gt;: Lists all extensions in the database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list_migrations&lt;/code&gt;: Lists all migrations in the database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apply_migration&lt;/code&gt;: Applies a SQL migration to the database. SQL passed to this tool will be tracked within the database, so LLMs should use this for DDL operations (schema changes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;execute_sql&lt;/code&gt;: Executes raw SQL in the database. LLMs should use this for regular queries that don&#39;t change the schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_logs&lt;/code&gt;: Gets logs for a Supabase project by service type (api, postgres, edge functions, auth, storage, realtime). LLMs can use this to help with debugging and monitoring service performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Project Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_project_url&lt;/code&gt;: Gets the API URL for a project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_anon_key&lt;/code&gt;: Gets the anonymous API key for a project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Branching (Experimental, requires a paid plan)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;create_branch&lt;/code&gt;: Creates a development branch with migrations from production branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list_branches&lt;/code&gt;: Lists all development branches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_branch&lt;/code&gt;: Deletes a development branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;merge_branch&lt;/code&gt;: Merges migrations and edge functions from a development branch to production.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reset_branch&lt;/code&gt;: Resets migrations of a development branch to a prior version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rebase_branch&lt;/code&gt;: Rebases development branch on production to handle migration drift.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Development Tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;generate_typescript_types&lt;/code&gt;: Generates TypeScript types based on the database schema. LLMs can save this to a file and use it in their code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other MCP servers&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;@supabase/mcp-server-postgrest&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The PostgREST MCP server allows you to connect your own users to your app via REST API. See more details on its &lt;a href=&#34;https://raw.githubusercontent.com/supabase-community/supabase-mcp/main/packages/mcp-server-postgrest&#34;&gt;project README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;&lt;strong&gt;Model Context Protocol&lt;/strong&gt;&lt;/a&gt;: Learn more about MCP and its capabilities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under Apache 2.0. See the &lt;a href=&#34;https://raw.githubusercontent.com/supabase-community/supabase-mcp/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>juliangarnier/anime</title>
    <updated>2025-04-07T01:28:47Z</updated>
    <id>tag:github.com,2025-04-07:/juliangarnier/anime</id>
    <link href="https://github.com/juliangarnier/anime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JavaScript animation engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anime.js&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture align=&#34;center&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./assets/images/animejs-v4-logo-animation-dark.gif&#34;&gt; &#xA;  &lt;img align=&#34;center&#34; alt=&#34;Anime.js V4 logo animation&#34; src=&#34;https://raw.githubusercontent.com/juliangarnier/anime/master/assets/images/animejs-v4-logo-animation.gif&#34; width=&#34;560&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; &lt;em&gt;Anime.js&lt;/em&gt; is a fast, multipurpose and lightweight JavaScript animation library with a simple, yet powerful API.&lt;br&gt; It works with CSS properties, SVG, DOM attributes and JavaScript Objects. &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;NPM Downloads&#34; src=&#34;https://img.shields.io/npm/dm/animejs?style=flat-square&amp;amp;logo=npm&#34;&gt; &lt;img alt=&#34;jsDelivr hits (npm)&#34; src=&#34;https://img.shields.io/jsdelivr/npm/hm/animejs?style=flat-square&amp;amp;logo=jsdeliver&#34;&gt; &lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/juliangarnier?style=flat-square&amp;amp;logo=github&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Anime.js V4 works by importing ES modules like so:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import {&#xA;  animate,&#xA;  stagger,&#xA;} from &#39;animejs&#39;;&#xA;&#xA;animate(&#39;.square&#39;, {&#xA;  x: 320,&#xA;  rotate: { from: -180 },&#xA;  duration: 1250,&#xA;  delay: stagger(65, { from: &#39;center&#39; }),&#xA;  ease: &#39;inOutQuint&#39;,&#xA;  loop: true,&#xA;  alternate: true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img align=&#34;center&#34; alt=&#34;Anime.js code example&#34; src=&#34;https://raw.githubusercontent.com/juliangarnier/anime/master/assets/images/usage-example-result.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;V4 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full documentation is available &lt;a href=&#34;https://animejs.com/documentation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Our sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Anime.js is 100% free and is only made possible with the help of our sponsors. Help the project become sustainable by sponsoring us on &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/sponsors/juliangarnier&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platinum sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://huly.io/?ref=animejs&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./assets/sponsors/huly-logomark.svg&#34;&gt; &#xA;      &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/juliangarnier/anime/master/assets/sponsors/huly-logomark-dark.svg?sanitize=true&#34; width=&#34;128&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://ice.io/?ref=animejs&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./assets/sponsors/ice-open-network-logomark.svg&#34;&gt; &#xA;      &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/juliangarnier/anime/master/assets/sponsors/ice-open-network-logomark-dark.svg?sanitize=true&#34; width=&#34;128&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/sponsors/juliangarnier&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./assets/sponsors/placeholder.svg&#34;&gt; &#xA;      &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/juliangarnier/anime/master/assets/sponsors/placeholder-dark.svg?sanitize=true&#34; width=&#34;128&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://huly.io/?ref=animejs&#34;&gt;Huly&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://ice.io/?ref=animejs&#34;&gt;Ice Open Network&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/sponsors/juliangarnier&#34;&gt;Your logo here&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;NPM development scripts&lt;/h2&gt; &#xA;&lt;p&gt;First, run &lt;code&gt;npm i&lt;/code&gt; to install all the necessary packages. Then, execute the following scripts with &lt;code&gt;npm run &amp;lt;script&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;script&lt;/th&gt; &#xA;   &lt;th&gt;action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Watch any changes in &lt;code&gt;src/&lt;/code&gt; and compiles the esm version to &lt;code&gt;lib/anime.esm.js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dev-types&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Same as &lt;code&gt;dev&lt;/code&gt;, but also run TypeScript and generate the &lt;code&gt;types/index.d.ts&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;build&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate types definition and compiles ESM / UMD / IIFE versions to &lt;code&gt;lib/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;test-browser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Start a local server and start all browser related tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;test-node&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Start all Node related tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;open-examples&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Start a local server to browse the examples locally&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;V4 API breaking changes overview&lt;/h2&gt; &#xA;&lt;h3&gt;Animations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { animate, createSpring, utils } from &#39;animejs&#39;;&#xA;&#xA;- anime({&#xA;-   targets: &#39;div&#39;,&#xA;+ animate(&#39;div&#39;, {&#xA;    translateX: 100,&#xA;      rotate: {&#xA;-     value: 360,&#xA;+     to: 360,&#xA;-     easing: &#39;spring(.7, 80, 10, .5)&#39;,&#xA;+     ease: createSpring({ mass: .7, damping: 80, stiffness: 10, velocity: .5}),&#xA;    },&#xA;-   easing: &#39;easeinOutExpo&#39;,&#xA;+   ease: &#39;inOutExpo&#39;,&#xA;-   easing: () =&amp;gt; t =&amp;gt; Math.cos(t),&#xA;+   ease: t =&amp;gt; Math.cos(t),&#xA;-   direction: &#39;reverse&#39;,&#xA;+   reversed: true,&#xA;-   direction: &#39;alternate&#39;,&#xA;+   alternate: true,&#xA;-   loop: 1,&#xA;+   loop: 0,&#xA;-   round: 100,&#xA;+   modifier: utils.round(2),&#xA;-   begin: () =&amp;gt; {},&#xA;+   onBegin: () =&amp;gt; {},&#xA;-   update: () =&amp;gt; {},&#xA;+   onUpdate: () =&amp;gt; {},&#xA;-   change: () =&amp;gt; {},&#xA;+   onRender: () =&amp;gt; {},&#xA;-   changeBegin: () =&amp;gt; {},&#xA;-   changeComplete: () =&amp;gt; {},&#xA;-   loopBegin: () =&amp;gt; {},&#xA;-   loopComplete: () =&amp;gt; {},&#xA;+   onLoop: () =&amp;gt; {},&#xA;-   complete: () =&amp;gt; {},&#xA;+   onComplete: () =&amp;gt; {},&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Promises&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { animate, utils } from &#39;animejs&#39;;&#xA;&#xA;- anime({ targets: target, prop: x }).finished.then(() =&amp;gt; {});&#xA;+ animate(target, { prop: x }).then(() =&amp;gt; {});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { createTimer } from &#39;animejs&#39;;&#xA;&#xA;- anime({&#xA;+ createTimer({&#xA;-   duration: Infinity,&#xA;-   update: () =&amp;gt; {},&#xA;+   onUpdate: () =&amp;gt; {},&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timelines&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { createTimeline, stagger } from &#39;animejs&#39;;&#xA;&#xA;- anime.timeline({&#xA;+ createTimeline({&#xA;-   duration: 500,&#xA;-   easing: &#39;easeInOutQuad&#39;,&#xA;+   defaults: {&#xA;+     duration: 500,&#xA;+     ease: &#39;inOutQuad&#39;,&#xA;+   }&#xA;-   loop: 2,&#xA;+   loop: 1,&#xA;- }).add({&#xA;-   targets: &#39;div&#39;,&#xA;+ }).add(&#39;div&#39;, {&#xA;    rotate: 90,&#xA;  })&#xA;- .add(&#39;.target:nth-child(1)&#39;, { opacity: 0, onComplete }, 0)&#xA;- .add(&#39;.target:nth-child(2)&#39;, { opacity: 0, onComplete }, 100)&#xA;- .add(&#39;.target:nth-child(3)&#39;, { opacity: 0, onComplete }, 200)&#xA;- .add(&#39;.target:nth-child(4)&#39;, { opacity: 0, onComplete }, 300)&#xA;+ .add(&#39;.target&#39;, { opacity: 0, onComplete }, stagger(100))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stagger&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { animate, stagger } from &#39;animejs&#39;;&#xA;&#xA;- anime({&#xA;-   targets: &#39;div&#39;,&#xA;+ animate(&#39;div&#39;, {&#xA;-   translateX: anime.stagger(100),&#xA;+   translateX: stagger(100),&#xA;-   delay: anime.stagger(100, { direction: &#39;reversed&#39; }),&#xA;+   translateX: stagger(100, { reversed: true }),&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SVG&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { animate, svg } from &#39;animejs&#39;;&#xA;&#xA;- const path = anime.path(&#39;path&#39;);&#xA;+ const { x, y, angle } = svg.createMotionPath(&#39;path&#39;);&#xA;&#xA;- anime({&#xA;-   targets: &#39;#shape1&#39;,&#xA;+ animate(&#39;#shape1&#39;, {&#xA;-   points: &#39;70 41 118.574 59.369 111.145 132.631 60.855 84.631 20.426 60.369&#39;,&#xA;+   points: svg.morphTo(&#39;#shape2&#39;),&#xA;-   strokeDashoffset: [anime.setDashoffset, 0],&#xA;+   strokeDashoffset: svg.drawLine(),&#xA;-   translateX: path(&#39;x&#39;),&#xA;-   translateY: path(&#39;y&#39;),&#xA;-   rotate: path(&#39;angle&#39;),&#xA;+   translateX: x,&#xA;+   translateY: y,&#xA;+   rotate: angle,&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utils&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { utils } from &#39;animejs&#39;;&#xA;&#xA;- const value = anime.get(&#39;#target1&#39;, &#39;translateX&#39;);&#xA;+ const value = utils.get(&#39;#target1&#39;, &#39;translateX&#39;);&#xA;&#xA;- anime.set(&#39;#target1&#39;, { translateX: 100 });&#xA;+ utils.set(&#39;#target1&#39;, { translateX: 100 });&#xA;&#xA;- anime.remove(&#39;#target1&#39;);&#xA;+ utils.remove(&#39;#target1&#39;);&#xA;&#xA;- const rounded = anime.round(value);&#xA;+ const rounded = utils.round(value, 0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Engine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- import anime from &#39;animejs&#39;;&#xA;+ import { engine } from &#39;animejs&#39;;&#xA;&#xA;- anime.suspendWhenDocumentHidden = false;&#xA;+ engine.pauseWhenHidden = false;&#xA;&#xA;- anime.speed = .5;&#xA;+ engine.playbackRate = .5;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA-Omniverse/PhysX</title>
    <updated>2025-04-07T01:28:47Z</updated>
    <id>tag:github.com,2025-04-07:/NVIDIA-Omniverse/PhysX</id>
    <link href="https://github.com/NVIDIA-Omniverse/PhysX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NVIDIA PhysX SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NVIDIA PhysX&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2008-2025 NVIDIA Corporation. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/li&gt; &#xA; &lt;li&gt;Neither the name of NVIDIA CORPORATION nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the NVIDIA PhysX source code repository.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains source releases of the PhysX, Flow, and Blast SDKs used in NVIDIA Omniverse.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The user guide and API documentation are available on &lt;a href=&#34;https://nvidia-omniverse.github.io/PhysX&#34;&gt;GitHub Pages&lt;/a&gt;. Please create an &lt;a href=&#34;https://github.com/NVIDIA-Omniverse/PhysX/issues/&#34;&gt;Issue&lt;/a&gt; if you find a documentation issue.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Please see instructions specific to each of the libraries in the respective subfolder.&lt;/p&gt; &#xA;&lt;h2&gt;Community-Maintained Build Configuration Fork&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/o3de/PhysX&#34;&gt;the O3DE Fork&lt;/a&gt; for community-maintained additional build configurations.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please use GitHub &lt;a href=&#34;https://github.com/NVIDIA-Omniverse/PhysX/discussions/&#34;&gt;Discussions&lt;/a&gt; for questions and comments.&lt;/li&gt; &#xA; &lt;li&gt;GitHub &lt;a href=&#34;https://github.com/NVIDIA-Omniverse/PhysX/issues&#34;&gt;Issues&lt;/a&gt; should only be used for bug reports or documentation issues.&lt;/li&gt; &#xA; &lt;li&gt;You can also ask questions in the NVIDIA Omniverse #physics &lt;a href=&#34;https://discord.com/invite/XWQNJDNuaC&#34;&gt;Discord Channel&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>