<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-13T01:28:31Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bytedance/flux</title>
    <updated>2025-03-13T01:28:31Z</updated>
    <id>tag:github.com,2025-03-13:/bytedance/flux</id>
    <link href="https://github.com/bytedance/flux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast communication-overlapping library for tensor/expert parallelism on GPUs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flux&lt;/h1&gt; &#xA;&lt;p&gt;Flux is a communication-overlapping library for dense/MoE models on GPUs, providing high-performance and pluggable kernels to support various parallelisms in model training/inference.&lt;/p&gt; &#xA;&lt;p&gt;Flux&#39;s efficient kernels are compatible with Pytorch and can be integrated into existing frameworks easily, supporting various Nvidia GPU architectures and data types.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to join the &lt;a href=&#34;https://github.com/bytedance/flux/raw/main/docs/assets/comet_wechat_group.JPG&#34;&gt;Wechat&lt;/a&gt; group and stay tuned!&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install Flux either from source or from PyPI.&lt;/p&gt; &#xA;&lt;h3&gt;Install from Source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/bytedance/flux.git &amp;amp;&amp;amp; cd flux&#xA;&#xA;# Install dependencies&#xA;bash ./install_deps.sh&#xA;&#xA;# For Ampere(sm80) GPU&#xA;./build.sh --arch 80 --nvshmem&#xA;# For Ada Lovelace(sm89) GPU&#xA;./build.sh --arch 89 --nvshmem&#xA;# For Hopper(sm90) GPU&#xA;./build.sh --arch 90 --nvshmem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install in a virtual environment&lt;/h4&gt; &#xA;&lt;p&gt;Here is a snippet to install Flux in a virtual environment. Let&#39;s finish the installation in an virtual environment with CUDA 12.4, torch 2.6.0 and python 3.11.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n flux python=3.11&#xA;conda activate flux&#xA;pip3 install packaging&#xA;pip3 install ninja&#xA;pip3 install torch==2.6.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124&#xA;&#xA;git clone --recursive https://github.com/bytedance/flux.git &amp;amp;&amp;amp; cd flux&#xA;# Install dependencies&#xA;bash ./install_deps.sh&#xA;./build.sh --clean-all&#xA;./build.sh --arch &#34;80;89;90&#34; --nvshmem --package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you would expect a wheel package under &lt;code&gt;dist/&lt;/code&gt; folder that is suitable for your virtual environment.&lt;/p&gt; &#xA;&lt;h3&gt;Install from PyPI&lt;/h3&gt; &#xA;&lt;p&gt;We also provide some pre-built wheels for Flux, and you can directly install with pip if your wanted version is available. Currently we provide wheels for the following configurations: torch(2.4.0, 2.5.0, 2.6.0), python(3.10, 3.11), cuda(12.4).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Make sure that PyTorch is installed.&#xA;pip install byte-flux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customized Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Build options for source installation&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;--nvshmem&lt;/code&gt; to build Flux with NVSHMEM support. It is essential for the MoE kernels.&lt;/li&gt; &#xA; &lt;li&gt;If you are tired of the cmake process, you can set environment variable &lt;code&gt;FLUX_BUILD_SKIP_CMAKE&lt;/code&gt; to 1 to skip cmake if &lt;code&gt;build/CMakeCache.txt&lt;/code&gt; already exists.&lt;/li&gt; &#xA; &lt;li&gt;If you want to build a wheel package, add &lt;code&gt;--package&lt;/code&gt; to the build command. find the output wheel file under dist/&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;The core dependencies of Flux are NCCL, CUTLASS, and NVSHMEM, which are located under the 3rdparty folder.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NCCL: Managed by git submodule automatically.&lt;/li&gt; &#xA; &lt;li&gt;NVSHMEM: Downloaded from &lt;a href=&#34;https://developer.nvidia.com/nvshmem&#34;&gt;https://developer.nvidia.com/nvshmem&lt;/a&gt;. The current version is 3.2.5-1.&lt;/li&gt; &#xA; &lt;li&gt;CUTLASS: Flux leverages CUTLASS to generate high-performance GEMM kernels. We currently use CUTLASS 3.7.0 and a tiny patch should be applied to CUTLASS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Below are commands to run some basic demos once you have installed Flux successfully.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# gemm only&#xA;python3 test/python/gemm_only/test_gemm_only.py 4096 12288 6144 --dtype=float16&#xA;&#xA;# all-gather fused with gemm (dense MLP layer0)&#xA;./launch.sh test/python/ag_gemm/test_ag_kernel.py 4096 49152 12288 --dtype=float16 --iters=10&#xA;&#xA;# gemm fused with reduce-scatter (dense MLP layer1)&#xA;./launch.sh test/python/gemm_rs/test_gemm_rs.py 4096 12288 49152 --dtype=float16 --iters=10&#xA;&#xA;# all-gather fused with grouped gemm (MoE MLP layer0)&#xA;./launch.sh test/python/moe_ag_scatter/test_moe_ag.py&#xA;&#xA;# grouped gemm fused with reduce-scatter (MoE MLP layer1)&#xA;./launch.sh test/python/moe_gather_rs/test_moe_gather_rs.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check out the documentations for more details!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a more detailed usage on MoE kernels, please refer to &lt;a href=&#34;https://github.com/bytedance/flux/raw/main/docs/moe_usage.md&#34;&gt;Flux MoE Usage&lt;/a&gt;. Try some &lt;a href=&#34;https://github.com/bytedance/flux/raw/main/examples&#34;&gt;examples&lt;/a&gt; as a quick start. A &lt;a href=&#34;https://github.com/bytedance/flux/raw/main/examples/moe_flux_only.py&#34;&gt;minimal MoE layer&lt;/a&gt; can be implemented within only a few tens of lines of code using Flux!&lt;/li&gt; &#xA; &lt;li&gt;For some performance numbers, please refer to &lt;a href=&#34;https://github.com/bytedance/flux/raw/main/docs/performance.md&#34;&gt;Performance Doc&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To learn more about the design principles of Flux, please refer to &lt;a href=&#34;https://github.com/bytedance/flux/raw/main/docs/design.md&#34;&gt;Design Doc&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;p&gt;If you use Flux in a scientific publication, we encourage you to add the following reference to the related papers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{chang2024flux,&#xA;      title={FLUX: Fast Software-based Communication Overlap On GPUs Through Kernel Fusion},&#xA;      author={Li-Wen Chang and Wenlei Bao and Qi Hou and Chengquan Jiang and Ningxin Zheng and Yinmin Zhong and Xuanrun Zhang and Zuquan Song and Ziheng Jiang and Haibin Lin and Xin Jin and Xin Liu},&#xA;      year={2024},&#xA;      eprint={2406.06858},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.LG}&#xA;}&#xA;&#xA;@misc{zhang2025comet,&#xA;      title={Comet: Fine-grained Computation-communication Overlapping for Mixture-of-Experts},&#xA;      author={Shulai Zhang, Ningxin Zheng, Haibin Lin, Ziheng Jiang, Wenlei Bao, Chengquan Jiang, Qi Hou, Weihao Cui, Size Zheng, Li-Wen Chang, Quan Chen and Xin Liu},&#xA;      year={2025},&#xA;      eprint={2502.19811},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.DC}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://arxiv.org/abs/2406.06858&#34;&gt;ArXiv Paper (Flux)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2502.19811&#34;&gt;ArXiv Paper (Comet)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bytedance/flux/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The Flux Project is under the Apache License v2.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cdozdil/OptiScaler</title>
    <updated>2025-03-13T01:28:31Z</updated>
    <id>tag:github.com,2025-03-13:/cdozdil/OptiScaler</id>
    <link href="https://github.com/cdozdil/OptiScaler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OptiScaler bridges upscaling/frame gen across GPUs. Supports DLSS2+/XeSS/FSR2+ inputs, replaces native upscalers, enables FSR3 FG on non-FG titles. Supports Nukem mod for DLSSG-to-FSR3 FG.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/c7dad5da-0b29-4710-8a57-b58e4e407abd&#34; alt=&#34;opti-logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#about&#34;&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#how-it-works&#34;&gt;&lt;strong&gt;How it works?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#which-apis-and-upscalers-are-supported&#34;&gt;&lt;strong&gt;Supported APIs and Upscalers&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;4.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;5.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#known-issues&#34;&gt;&lt;strong&gt;Known Issues&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;6.&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#compilation&#34;&gt;&lt;strong&gt;Compilation and Credits&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;7.&lt;/strong&gt; &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/wiki&#34;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;OptiScaler&lt;/strong&gt; is a tool that lets you replace upscalers in games that &lt;em&gt;&lt;strong&gt;already support&lt;/strong&gt;&lt;/em&gt; DLSS2+ / FSR2+ / XeSS, now also supports enabling frame generation (through OptiFG or Nukem&#39;s dlssg-to-fsr3).&lt;/p&gt; &#xA;&lt;p&gt;While previously only DLSS2+ inputs were supported, newer versions also added support for XeSS and FSR2+ inputs (&lt;em&gt;with some caveats&lt;/em&gt;$&lt;code&gt;^1&lt;/code&gt;$). For example, if a game has DLSS only, the user can replace DLSS with XeSS or FSR 3.1 (same goes for an FSR or XeSS-only game). It also offers extensive customization options for all users, including those with Nvidia GPUs using DLSS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key aspects of OptiScaler:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enables usage of XeSS, FSR2, FSR3, &lt;strong&gt;FSR4&lt;/strong&gt;$&lt;code&gt;^2&lt;/code&gt;$ and DLSS in upscaler-enabled games&lt;/li&gt; &#xA; &lt;li&gt;Allows users to fine-tune their upscaling experience with a wide range of tweaks and enhancements (RCAS &amp;amp; MAS, Output Scaling, DLSS Presets, Ratio &amp;amp; DRS Overrides etc.)&lt;/li&gt; &#xA; &lt;li&gt;Since v0.7.0+, added experimental frame generation support with possible HUDfix solution (&lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#optifg-powered-by-fsr3-fg--hudfix-experimental-hud-ghosting-fix&#34;&gt;&lt;strong&gt;OptiFG&lt;/strong&gt;&lt;/a&gt; by FSR3)&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#fakenvapi&#34;&gt;&lt;strong&gt;Fakenvapi&lt;/strong&gt;&lt;/a&gt; integration - enables Reflex hooking and injecting &lt;em&gt;Anti-Lag 2&lt;/em&gt; (RDNA1+ only) or &lt;em&gt;LatencyFlex&lt;/em&gt; (LFX) - &lt;strong&gt;&lt;em&gt;not bundled&lt;/em&gt;&lt;/strong&gt;$&lt;code&gt;^3&lt;/code&gt;$&lt;/li&gt; &#xA; &lt;li&gt;Since v0.7.7, support for Nukem&#39;s FSR FG mod &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#nukems-dlssg-to-fsr3&#34;&gt;&lt;strong&gt;dlssg-to-fsr3&lt;/strong&gt;&lt;/a&gt; has also been added - &lt;strong&gt;&lt;em&gt;not bundled&lt;/em&gt;&lt;/strong&gt;$&lt;code&gt;^3&lt;/code&gt;$&lt;/li&gt; &#xA; &lt;li&gt;For a detailed list of all features, check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Features.md&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] &lt;em&gt;&lt;strong&gt;Always check the &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/wiki&#34;&gt;Wiki Compatibility list&lt;/a&gt; for known game issues and workarounds.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; Also please check the &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#known-issues&#34;&gt;&lt;em&gt;&lt;strong&gt;Optiscaler known issues&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; at the end regarding &lt;strong&gt;RTSS&lt;/strong&gt; compatibility&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Expand for [1], [2] and [3]&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;[1]&lt;/strong&gt; Regarding &lt;strong&gt;XeSS&lt;/strong&gt;, since Unreal Engine plugin does not provide depth, replacing in-game XeSS breaks other upscalers, but you can still apply RCAS sharpening to XeSS to reduce blurry visuals (in short, if it&#39;s a UE game, in-game XeSS only works with XeSS in OptiScaler overlay).&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;Regarding &lt;strong&gt;FSR inputs&lt;/strong&gt;, FSR 3.1 is the first version with a fully standardised, forward-looking API and should be fully supported. Since FSR2 and FSR3 support custom interfaces, game support will depend on the developers&#39; implementation. With Unreal Engine games, you might need &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/wiki/Unreal-Engine-Tweaks&#34;&gt;ini tweaks&lt;/a&gt; for FSR inputs.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;[2]&lt;/strong&gt; Regarding &lt;strong&gt;FSR4&lt;/strong&gt;, support added with recent Nightly builds. Please check &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/wiki/FSR4-Compatibility-List&#34;&gt;FSR4 Compatibility list&lt;/a&gt; for known supported games.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;[3]&lt;/strong&gt; For &lt;strong&gt;not bundled&lt;/strong&gt; items, please check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Official Discord Server: &lt;a href=&#34;https://discord.gg/2JDHx6kcXB&#34;&gt;DLSS2FSR&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This project is based on &lt;a href=&#34;https://github.com/PotatoOfDoom&#34;&gt;PotatoOfDoom&lt;/a&gt;&#39;s excellent &lt;a href=&#34;https://github.com/PotatoOfDoom/CyberFSR2&#34;&gt;CyberFSR2&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;OptiScaler implements the necessary API methods of DLSS2+ &amp;amp; NVAPI, XeSS and FSR2+ to act as a middleware. It interprets calls from the game and redirects them to the chosen upscaling backend, allowing games using one technology to use another one of your choice.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Pressing &lt;strong&gt;&lt;code&gt;Insert&lt;/code&gt;&lt;/strong&gt; should open the Optiscaler &lt;strong&gt;Overlay&lt;/strong&gt; in-game and expose all of the options (shortcut key can be changed in the config file).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/e138c979-c5d9-499f-a89b-165bb7cfcb32&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Which APIs and Upscalers are Supported?&lt;/h2&gt; &#xA;&lt;p&gt;Currently &lt;strong&gt;OptiScaler&lt;/strong&gt; can be used with DirectX 11, DirectX 12 and Vulkan, but each API has different sets of upscaler options.&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#optifg-powered-by-fsr3-fg--hudfix-experimental-hud-ghosting-fix&#34;&gt;&lt;strong&gt;OptiFG&lt;/strong&gt;&lt;/a&gt; currently &lt;strong&gt;only supports DX12&lt;/strong&gt; and is explained in a separate paragraph.&lt;/p&gt; &#xA;&lt;h4&gt;For DirectX 12&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XeSS (Default)&lt;/li&gt; &#xA; &lt;li&gt;FSR2 2.1.2, 2.2.1&lt;/li&gt; &#xA; &lt;li&gt;FSR3 3.1 (and FSR2 2.3.2)&lt;/li&gt; &#xA; &lt;li&gt;DLSS&lt;/li&gt; &#xA; &lt;li&gt;FSR4 (Preliminary support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;For DirectX 11&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FSR2 2.2.1 (Default, native DX11)&lt;/li&gt; &#xA; &lt;li&gt;FSR3 3.1.2 (unofficial port to native DX11)&lt;/li&gt; &#xA; &lt;li&gt;XeSS 1.x.x, FSR2 2.1.2, 2.2.1, FSR3 3.1 &amp;amp; FSR2 2.3.2 (via background DX12 processing)$&lt;code&gt;^1&lt;/code&gt;$&lt;/li&gt; &#xA; &lt;li&gt;DLSS (native DX11)&lt;/li&gt; &#xA; &lt;li&gt;XeSS 2.x (&lt;em&gt;soon™, but Intel ARC only&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Expand for [1]&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;p&gt;&lt;em&gt;&lt;strong&gt;[1]&lt;/strong&gt; These implementations use a background DirectX12 device to be able to use Dirext12-only upscalers. There is a 10-15% performance penalty for this method, but allows many more upscaler options. Also native DirectX11 implementation of FSR 2.2.1 is a backport from Unity renderer and has its own problems of which some were fixed by OptiScaler. These implementations &lt;strong&gt;do not support Linux&lt;/strong&gt; and will result in a black screen.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;For Vulkan&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FSR2 2.1.2 (Default), 2.2.1&lt;/li&gt; &#xA; &lt;li&gt;FSR3 3.1 (and FSR2 2.3.2)&lt;/li&gt; &#xA; &lt;li&gt;DLSS&lt;/li&gt; &#xA; &lt;li&gt;XeSS 2.x (&lt;em&gt;soon™&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;OptiFG (powered by FSR3 FG) + HUDfix (experimental HUD ghosting fix)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;OptiFG&lt;/strong&gt; was added with &lt;strong&gt;v0.7&lt;/strong&gt; and is &lt;strong&gt;only supported in DX12&lt;/strong&gt;. It&#39;s &lt;strong&gt;enabled by default&lt;/strong&gt; with the &lt;code&gt;FGType=auto&lt;/code&gt; setting in Optiscaler.ini.&lt;br&gt; It&#39;s an &lt;strong&gt;experimental&lt;/strong&gt; way of adding FSR3 FG to games without native Frame Generation, or can also be used as a last case scenario if the native FG is not working properly.&lt;br&gt; Since FSR3 FG doesn&#39;t support HUD interpolation, it requires a HUDless resource to avoid HUD ghosting/garbling. In games without native FG, Optiscaler tries finding the HUDless resource when the user &lt;strong&gt;enables HUDfix&lt;/strong&gt;. Depending on how the game draws its UI/HUD, Optiscaler may or may not be successful in finding it. There are several options for tuning the search.&lt;br&gt; A more detailed guide will be available in the &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/wiki&#34;&gt;Wiki&lt;/a&gt;, along with a &lt;strong&gt;list&lt;/strong&gt; of &lt;strong&gt;HUDfix incompatible&lt;/strong&gt; games.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] &lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;: &lt;strong&gt;Do not use this mod with online games.&lt;/strong&gt; It may trigger anti-cheat software and cause bans!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] &lt;em&gt;&lt;strong&gt;Please use the &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/releases/tag/nightly&#34;&gt;Nightly builds&lt;/a&gt; as the latest Stable is vastly outdated and the Readme does not apply to it anymore due to many missing features.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;Fair warning, Nightly builds have Debug logging forced by default due to being bleeding-edge. If everything is working fine, then you can save storage space by disabling it by leaving &lt;code&gt;LogFile=&lt;/code&gt; blank.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;[Automated]&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Extract &lt;strong&gt;all&lt;/strong&gt; of the Optiscaler files &lt;strong&gt;by the main game exe&lt;/strong&gt; &lt;em&gt;(for Unreal Engine games, that&#39;s usually the &lt;em&gt;win_shipping.exe&lt;/em&gt; in one of the subfolders, generally &lt;code&gt;&amp;lt;path-to-game&amp;gt;\Game-or-Project-name\Binaries\Win64\&lt;/code&gt;, &lt;strong&gt;ignore&lt;/strong&gt; the &lt;code&gt;Engine&lt;/code&gt; folder)&lt;/em&gt;&lt;br&gt; &lt;strong&gt;2.&lt;/strong&gt; Try the &lt;code&gt;OptiScaler Setup.bat&lt;/code&gt; script for automating the renaming process.&lt;br&gt; &lt;em&gt;&lt;strong&gt;3.&lt;/strong&gt; If the Bat file wasn&#39;t successful, please check the &lt;strong&gt;Manual&lt;/strong&gt; steps.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;[Manual]&lt;/h3&gt; &#xA;&lt;h4&gt;Nvidia&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Step-by-step installation:&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;1.&lt;/strong&gt; Extract &lt;strong&gt;all&lt;/strong&gt; Optiscaler files from the zip &lt;strong&gt;by the main game exe&lt;/strong&gt; &lt;em&gt;(for Unreal Engine games, that&#39;s usually the &lt;em&gt;win_shipping.exe&lt;/em&gt; in one of the subfolders, generally &lt;code&gt;&amp;lt;path-to-game&amp;gt;\Game-or-Project-name\Binaries\Win64\&lt;/code&gt;, &lt;strong&gt;ignore&lt;/strong&gt; the &lt;code&gt;Engine&lt;/code&gt; folder)&lt;/em&gt;.&lt;br&gt; &lt;strong&gt;2.&lt;/strong&gt; Rename OptiScaler&#39;s &lt;code&gt;OptiScaler.dll&lt;/code&gt; (for old versions, it&#39;s &lt;code&gt;nvngx.dll&lt;/code&gt;) to one of the &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#optiscaler-supports-these-filenames&#34;&gt;supported filenames&lt;/a&gt; (preferred &lt;code&gt;dxgi.dll&lt;/code&gt;, but depends on the game)$&lt;code&gt;^1&lt;/code&gt;$&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;em&gt;For FSR2/3-only games that don&#39;t have DLSS (e.g. The Callisto Protocol or The Outer Worlds: Spacer&#39;s Choice Edition), you have to provide the &lt;code&gt;nvngx_dlss.dll&lt;/code&gt; in order to use DLSS in Optiscaler - download link e.g. &lt;a href=&#34;https://www.techpowerup.com/download/nvidia-dlss-dll/&#34;&gt;TechPowerUp&lt;/a&gt; or &lt;a href=&#34;https://github.com/NVIDIAGameWorks/Streamline/tree/main/bin/x64&#34;&gt;Streamline SDK repo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;AMD/Intel&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Step-by-step installation:&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;1.&lt;/strong&gt; Extract &lt;strong&gt;all&lt;/strong&gt; Optiscaler files from the zip &lt;strong&gt;by the main game exe&lt;/strong&gt; &lt;em&gt;(for Unreal Engine games, that&#39;s usually the &lt;em&gt;win_shipping.exe&lt;/em&gt; in one of the subfolders, generally &lt;code&gt;&amp;lt;path-to-game&amp;gt;\Game-or-Project-name\Binaries\Win64\&lt;/code&gt;, &lt;strong&gt;ignore&lt;/strong&gt; the &lt;code&gt;Engine&lt;/code&gt; folder)&lt;/em&gt;&lt;br&gt; &lt;strong&gt;2.&lt;/strong&gt; Rename OptiScaler&#39;s &lt;code&gt;OptiScaler.dll&lt;/code&gt; (for old versions, it&#39;s &lt;code&gt;nvngx.dll&lt;/code&gt;) to one of the &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#optiscaler-supports-these-filenames&#34;&gt;supported filenames&lt;/a&gt; (preferred &lt;code&gt;dxgi.dll&lt;/code&gt;, but depends on the game)$&lt;code&gt;^1&lt;/code&gt;$&lt;br&gt; &lt;strong&gt;3a.&lt;/strong&gt; &lt;strong&gt;Either&lt;/strong&gt; locate the &lt;code&gt;nvngx_dlss.dll&lt;/code&gt; file (for UE games, generally in one of the subfolders under &lt;code&gt;Engine/Plugins&lt;/code&gt;), create a copy, rename the copy to &lt;code&gt;nvngx.dll&lt;/code&gt; and put it beside Optiscaler&lt;br&gt; &lt;strong&gt;3b.&lt;/strong&gt; &lt;strong&gt;OR&lt;/strong&gt; download &lt;code&gt;nvngx_dlss.dll&lt;/code&gt; from e.g. &lt;a href=&#34;https://www.techpowerup.com/download/nvidia-dlss-dll/&#34;&gt;TechPowerUp&lt;/a&gt; or &lt;a href=&#34;https://github.com/NVIDIAGameWorks/Streamline/tree/main/bin/x64&#34;&gt;Streamline SDK repo&lt;/a&gt; if you don&#39;t want to search, rename it to &lt;code&gt;nvngx.dll&lt;/code&gt; and put it beside Optiscaler&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/#example-of-correct-installation-with-additional-fakenvapi-and-nukem-mod&#34;&gt;screenshot&lt;/a&gt; for proper installation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;[Nukem&#39;s dlssg-to-fsr3]&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Download the mod&#39;s regular version - &lt;a href=&#34;https://www.nexusmods.com/site/mods/738&#34;&gt;&lt;strong&gt;dlssg-to-fsr3 NexusMods&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/Nukem9/dlssg-to-fsr3&#34;&gt;&lt;strong&gt;dlssg-to-fsr3 Github&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;2.&lt;/strong&gt; Put the &lt;code&gt;dlssg_to_fsr3_amd_is_better.dll&lt;/code&gt; in the same folder as Optiscaler (by the main game exe) and set &lt;code&gt;FGType=nukems&lt;/code&gt; in &lt;code&gt;Optiscaler.ini&lt;/code&gt;&lt;br&gt; &lt;strong&gt;3.&lt;/strong&gt; For &lt;strong&gt;AMD/Intel GPUs&lt;/strong&gt;, &lt;strong&gt;Fakenvapi&lt;/strong&gt; is also &lt;strong&gt;required&lt;/strong&gt; when using &lt;strong&gt;Nukem mod&lt;/strong&gt; in order to successfully expose DLSS FG in-game.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;[Fakenvapi]&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;0.&lt;/strong&gt; &lt;strong&gt;Do not use with Nvidia&lt;/strong&gt;, only required for AMD/Intel&lt;br&gt; &lt;strong&gt;1.&lt;/strong&gt; Download the mod - &lt;a href=&#34;https://github.com/FakeMichau/fakenvapi&#34;&gt;&lt;strong&gt;Fakenvapi&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;2.&lt;/strong&gt; Extract the files and transfer &lt;code&gt;nvapi64.dll&lt;/code&gt; and &lt;code&gt;fakenvapi.ini&lt;/code&gt; to the same folder as Optiscaler (by the main game exe)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Anti-Lag 2&lt;/strong&gt; only supports RDNA cards and is Windows only atm (shortcut for cycling the overlay - &lt;code&gt;Alt+Shift+L&lt;/code&gt;). For information on how to verify if Anti-Lag 2 is working, please check &lt;a href=&#34;https://github.com/GPUOpen-LibrariesAndSDKs/AntiLag2-SDK?tab=readme-ov-file#testing&#34;&gt;Anti-Lag 2 SDK&lt;/a&gt;. &lt;strong&gt;Latency Flex&lt;/strong&gt; is cross-vendor and cross-platform, can be used as an alternative if AL2 isn&#39;t working.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] &lt;em&gt;[1] Linux users should add renamed dll to overrides:&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;WINEDLLOVERRIDES=dxgi=n,b %COMMAND% &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] &lt;strong&gt;Please don&#39;t rename the ini file, it should stay as &lt;code&gt;OptiScaler.ini&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;h3&gt;OptiScaler supports these filenames:&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dxgi.dll&lt;/li&gt; &#xA;  &lt;li&gt;winmm.dll&lt;/li&gt; &#xA;  &lt;li&gt;dbghelp.dll (nightly only)&lt;/li&gt; &#xA;  &lt;li&gt;version.dll&lt;/li&gt; &#xA;  &lt;li&gt;wininet.dll&lt;/li&gt; &#xA;  &lt;li&gt;winhttp.dll&lt;/li&gt; &#xA;  &lt;li&gt;OptiScaler.asi (with an ASI loader)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;h3&gt;&lt;em&gt;Example of correct installation (with additional Fakenvapi and Nukem mod)&lt;/em&gt;&lt;/h3&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/977a2a68-d117-42ea-a928-78ec43eedd28&#34; alt=&#34;Installation&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If there is another mod (e.g. Reshade etc.) that uses the same filename (e.g. &lt;code&gt;dxgi.dll&lt;/code&gt;), you can create a new folder called &lt;code&gt;plugins&lt;/code&gt; and put other mod files in this folder. OptiScaler will check this folder and if it finds the same dll file (for example &lt;code&gt;dxgi.dll&lt;/code&gt;), it will load this file instead of the original library.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cdozdil/OptiScaler/assets/35529761/c4bf2a85-107b-49ac-b002-59d00fd06982&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Legacy installation (deprecated, no FG and limited features, &lt;code&gt;nvngx.dll&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Legacy&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;Step-by-step installation:&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Download the latest relase from &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/releases&#34;&gt;releases&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Extract the contents of the archive next to the game executable file in your games folder. (e.g. for Unreal Engine games, it&#39;s &lt;code&gt;&amp;lt;path-to-game&amp;gt;\Game-or-Project-name\Binaries\Win64\&lt;/code&gt;)$&lt;code&gt;^1&lt;/code&gt;$&lt;/li&gt; &#xA;  &lt;li&gt;Rename &lt;code&gt;OptiScaler.dll&lt;/code&gt; to &lt;code&gt;nvngx.dll&lt;/code&gt; (For older builds, file name is already &lt;code&gt;nvngx.dll&lt;/code&gt;, so skip this step)&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;EnableSignatureOverride.reg&lt;/code&gt; from &lt;code&gt;DlssOverrides&lt;/code&gt; folder and confirm merge.$&lt;code&gt;^2&lt;/code&gt;$$&lt;code&gt;^3&lt;/code&gt;$&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;[1] This package contains latest version of &lt;code&gt;libxess.dll&lt;/code&gt; and if the game folder contains any older version of the same library, it will be overwritten. Consider backing up or renaming existing files.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;[2] Normally Streamline and games check if nvngx.dll is signed, by merging this &lt;code&gt;.reg&lt;/code&gt; file we are overriding this signature check.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;[3] Adding signature override on Linux - There are many possible setups, this one will focus on Steam games:&lt;/em&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;Make sure you have protontricks installed&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;em&gt;Run in a terminal protontricks &#xA;    &lt;steam-appid&gt;&#xA;      regedit, replace &#xA;     &lt;steam-appid&gt;&#xA;       with an id for your game&#xA;     &lt;/steam-appid&gt;&#xA;    &lt;/steam-appid&gt;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;em&gt;Press &#34;registry&#34; in the top left of the new window -&amp;gt; &lt;code&gt;Import Registry File&lt;/code&gt; -&amp;gt; navigate to and select &lt;code&gt;EnableSignatureOverride.reg&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;em&gt;You should see a message saying that you successfully added the entries to the registry&lt;/em&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;em&gt;If your game is not on Steam, it all boils down to opening regedit inside your game&#39;s prefix and importing the file.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Update OptiScaler version when using DLSS Enabler&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Delete/rename &lt;code&gt;dlss-enabler-upscaler.dll&lt;/code&gt; in game folder&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;OptiScaler.dll&lt;/code&gt; (for old versions, it&#39;s &lt;code&gt;nvngx.dll&lt;/code&gt;) file from OptiScaler 7zip file to a temp folder&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;OptiScaler.dll&lt;/code&gt; (for old versions, it&#39;s &lt;code&gt;nvngx.dll&lt;/code&gt;) to &lt;code&gt;dlss-enabler-upscaler.dll&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;dlss-enabler-upscaler.dll&lt;/code&gt; from temp folder to the game folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;DisableSignatureOverride.reg&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Delete &lt;code&gt;EnableSignatureOverride.reg&lt;/code&gt;, &lt;code&gt;DisableSignatureOverride.reg&lt;/code&gt;, &lt;code&gt;OptiScaler.dll&lt;/code&gt; (for old versions, it&#39;s &lt;code&gt;nvngx.dll&lt;/code&gt;), &lt;code&gt;OptiScaler.ini&lt;/code&gt; files (if you used Fakenvapi and/or Nukem mod, then also delete &lt;code&gt;fakenvapi.ini&lt;/code&gt;, &lt;code&gt;nvapi64.dll&lt;/code&gt; and &lt;code&gt;dlssg_to_fsr3&lt;/code&gt; files)&lt;/li&gt; &#xA; &lt;li&gt;If there was a &lt;code&gt;libxess.dll&lt;/code&gt; file and you have backed it up, delete the new file and restore the backed up file. If you overwrote/replaced the old file, &lt;strong&gt;DO NOT&lt;/strong&gt; delete &lt;code&gt;libxess.dll&lt;/code&gt; file. If there was no &lt;code&gt;libxess.dll&lt;/code&gt; before, it&#39;s safe to delete. Same goes for FSR files (&lt;code&gt;amd_fidelityfx&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Config.md&#34;&gt;this&lt;/a&gt; document for configuration parameters and explanations. If your GPU is not an Nvidia one, check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Spoofing.md&#34;&gt;GPU spoofing options&lt;/a&gt; &lt;em&gt;(Will be updated)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you can&#39;t open the in-game menu overlay:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please check that you have enabled DLSS, XeSS or FSR from game options&lt;/li&gt; &#xA; &lt;li&gt;If using legacy installation, please try opening menu while you are in-game (while 3D rendering is happening)&lt;/li&gt; &#xA; &lt;li&gt;If you are using &lt;strong&gt;RTSS&lt;/strong&gt; (MSI Afterburner, CapFrameX), please enable this setting in RTSS and/or try updating RTSS. &lt;strong&gt;When using OptiFG please disable RTSS for best compatibility&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cdozdil/OptiScaler/assets/35529761/8afb24ac-662a-40ae-a97c-837369e03fc7&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://raw.githubusercontent.com/cdozdil/OptiScaler/master/Issues.md&#34;&gt;this&lt;/a&gt; document for the rest of the known issues and possible solutions for them. Also check the community &lt;a href=&#34;https://github.com/cdozdil/OptiScaler/wiki&#34;&gt;Wiki&lt;/a&gt; for possible game issues and HUDfix incompatible games.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo with &lt;strong&gt;all of its submodules&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the OptiScaler.sln with Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Build the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@PotatoOfDoom for CyberFSR2&lt;/li&gt; &#xA; &lt;li&gt;@Artur for DLSS Enabler and helping me implement NVNGX api correctly&lt;/li&gt; &#xA; &lt;li&gt;@LukeFZ &amp;amp; @Nukem for their great mods and sharing their knowledge&lt;/li&gt; &#xA; &lt;li&gt;@FakeMichau for continous support, testing and feature creep&lt;/li&gt; &#xA; &lt;li&gt;@QM for continous testing efforts and helping me to reach games&lt;/li&gt; &#xA; &lt;li&gt;@TheRazerMD for continous testing and support&lt;/li&gt; &#xA; &lt;li&gt;@Cryio, @krispy, @krisshietala, @Lordubuntu, @scz, @Veeqo for their hard work on &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1qsvM0uRW-RgAYsOVprDWK2sjCqHnd_1teYAx00_TwUY&#34;&gt;compatibility matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And the whole DLSS2FSR community for all their support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://gitlab.freedesktop.org/freetype/freetype&#34;&gt;FreeType&lt;/a&gt; licensed under the &lt;a href=&#34;https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/docs/FTL.TXT&#34;&gt;FTL&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>