<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-07T01:24:38Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chronark/highstorm</title>
    <updated>2023-11-07T01:24:38Z</updated>
    <id>tag:github.com,2023-11-07:/chronark/highstorm</id>
    <link href="https://github.com/chronark/highstorm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Event Monitoring&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;Highstorm&lt;/h1&gt; &#xA; &lt;h5&gt;Open Source Event Monitoring&lt;/h5&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://highstorm.app?ref=github&#34;&gt;highstorm.app&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to our open source project! We appreciate your interest and are excited to have you on board. This document outlines the steps you need to follow to contribute to the project effectively. Please read the guidelines carefully and feel free to reach out if you have any questions.&lt;/p&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;Before getting started, please ensure that you have the following third-party services set up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://planetscale.com?ref=highstorm&#34;&gt;planetscale&lt;/a&gt;: Database&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tinybird.co?ref=highstorm&#34;&gt;tinybird&lt;/a&gt;: Time series database&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://upstash.com/qstash?ref=highstorm&#34;&gt;upstash&lt;/a&gt;: Optional, only required for reports&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clerk.com?ref=highstorm&#34;&gt;clerk&lt;/a&gt;: Authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the project and its dependencies, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you have &lt;code&gt;pnpm&lt;/code&gt; installed on your system. If not, you can install it by running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;npm install -g pnpm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the following command to install the project dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;After setting up the required services, you need to set the corresponding environment variables in the &lt;code&gt;/apps/web/.env&lt;/code&gt; file. To do this, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make a copy of the &lt;code&gt;.env.example&lt;/code&gt; file: &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;cp apps/web/.env.example apps/web/.env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;/apps/web/.env&lt;/code&gt; file in a text editor and populate the values for the services mentioned above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Database Preparation&lt;/h2&gt; &#xA;&lt;h3&gt;Prisma&lt;/h3&gt; &#xA;&lt;p&gt;To prepare the Prisma database, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the &lt;code&gt;/apps/web&lt;/code&gt; directory: &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;cd apps/web&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the following command to push the database schema and generate Prisma Client: &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;npx prisma db push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Tinybird&lt;/h3&gt; &#xA;&lt;p&gt;To prepare the Tinybird database, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the Tinybird CLI from &lt;a href=&#34;https://www.tinybird.co/docs/cli.html&#34;&gt;here&lt;/a&gt; and install it on your system.&lt;/li&gt; &#xA; &lt;li&gt;After authenticating with the Tinybird CLI, navigate to the &lt;code&gt;/apps/web/lib/tinybird&lt;/code&gt; directory: &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;cd apps/web/lib/tinybird&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Push the necessary datasources using the following command: &lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;tb push datasources/&#xA;tb push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: If the CLERK_WEBHOOK_SECRET env variable is not set, pass an empty string, and make sure to visit &lt;code&gt;/onboarding&lt;/code&gt; after signing up.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;To build the project, execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;To run the project locally, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;pnpm turbo run dev --filter=web&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>deepseek-ai/DeepSeek-Coder</title>
    <updated>2023-11-07T01:24:38Z</updated>
    <id>tag:github.com,2023-11-07:/deepseek-ai/DeepSeek-Coder</id>
    <link href="https://github.com/deepseek-ai/DeepSeek-Coder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DeepSeek Coder: Let the Code Write Itself&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1000px&#34; alt=&#34;DeepSeek Coder&#34; src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.deepseek.com/&#34;&gt;[&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/home.png&#34; width=&#34;20px&#34;&gt; Homepage]&lt;/a&gt; | &lt;a href=&#34;https://coder.deepseek.com/&#34;&gt;[🤖 Chat with DeepSeek Coder]&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/deepseek-ai&#34;&gt;[🤗 Models Download]&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/Tc7c45Zzu5&#34;&gt;[Discord]&lt;/a&gt; | &lt;a href=&#34;https://github.com/guoday/assert/raw/main/QR.png?raw=true&#34;&gt;[WeChat (微信)]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;1. Introduction of DeepSeek Coder&lt;/h3&gt; &#xA;&lt;p&gt;DeepSeek Coder is composed of a series of code language models, each trained from scratch on 2T tokens, with a composition of 87% code and 13% natural language in both English and Chinese. We provide various sizes of the code model, ranging from 1B to 33B versions. Each model is pre-trained on project-level code corpus by employing a window size of 16K and an extra fill-in-the-blank task, to support project-level code completion and infilling. For coding capabilities, DeepSeek Coder achieves state-of-the-art performance among open-source code models on multiple programming languages and various benchmarks.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/result.png&#34; alt=&#34;result&#34; width=&#34;70%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Massive Training Data&lt;/strong&gt;: Trained from scratch on 2T tokens, including 87% code and 13% linguistic data in both English and Chinese languages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly Flexible &amp;amp; Scalable&lt;/strong&gt;: Offered in model sizes of 1B, 5.7B, 6.7B and 33B, enabling users to choose the setup most suitable for their requirements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Superior Model Performance&lt;/strong&gt;: State-of-the-art performance among publicly available code models on HumanEval, MultiPL-E, MBPP, DS-1000, and APPS benchmarks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Advanced Code Completion Capabilities&lt;/strong&gt;: A window size of 16K and a fill-in-the-blank task, supporting project-level code completion and infilling tasks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Evaluation Results&lt;/h3&gt; &#xA;&lt;p&gt;We evaluate DeepSeek Coder on various coding-related benchmarks. Only &lt;code&gt;pass@1&lt;/code&gt; results on HumanEval (Python and Multilingual), MBPP, DS-1000 are reported here:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/table.png&#34; alt=&#34;table&#34; width=&#34;70%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The result shows that DeepSeek-Coder-Base-33B significantly outperforms existing open-source code LLMs. Compared with CodeLlama-34B, it leads by 7.9%, 9.3%, 10.8% and 5.9% respectively on HumanEval Python, HumanEval Multilingual, MBPP and DS-1000. Surprisingly, our DeepSeek-Coder-Base-7B reaches the performance of CodeLlama-34B. And the DeepSeek-Coder-Instruct-33B model after instruction tuning outperforms GPT35-turbo on HumanEval and achieves comparable result with GPT35-turbo on MBPP.&lt;/p&gt; &#xA;&lt;p&gt;More evaluation details can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/#5-detailed-evaluation-results&#34;&gt;Detailed Evaluation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. Procedure of Data Creation and Model Training&lt;/h3&gt; &#xA;&lt;h4&gt;Data Creation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1: Collecting code data from GitHub and apply the same filtering rules as &lt;a href=&#34;https://github.com/bigcode-project/bigcode-dataset&#34;&gt;StarCoder Data&lt;/a&gt; to filter data.&lt;/li&gt; &#xA; &lt;li&gt;Step 2: Parsing the dependencies of files within the same repository to rearrange the file positions based on their dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Step 3: Concatenating dependent files to form a single example and employ repo-level minhash for deduplication.&lt;/li&gt; &#xA; &lt;li&gt;Step 4: Further filtering out low-quality code, such as codes with syntax errors or poor readability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/data_clean.png&#34; alt=&#34;data_creation&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h4&gt;Model Training&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1: Initially pre-trained with a dataset consisting of 87% code, 10% code-related language (Github Markdown and StackExchange), and 3% non-code related Chinese language. Models are pre-trained using 1.8T tokens and a 4K window size in this step.&lt;/li&gt; &#xA; &lt;li&gt;Step 2: Further Pre-training using an extended 16K window size on an additional 200B tokens, resulting in foundational models (&lt;strong&gt;DeepSeek-Coder-Base&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Step 3: Instruction Fine-tuning on 2B tokens of instruction data, resulting in instruction-tuned models (&lt;strong&gt;DeepSeek-Coder-Instruct&lt;/strong&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/model_pretraining.png&#34; alt=&#34;model_pretraining&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;4. How to Use&lt;/h3&gt; &#xA;&lt;p&gt;Before proceeding, you&#39;ll need to install the necessary dependencies. You can do this by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A demo is also available on the &lt;a href=&#34;https://huggingface.co/spaces/deepseek-ai/deepseek-coder-33b-instruct&#34;&gt;🤗 Hugging Face Space&lt;/a&gt;, and you can run the demo locally using &lt;code&gt;app.py&lt;/code&gt; in &lt;a href=&#34;https://github.com/deepseek-ai/deepseek-coder/tree/main/demo&#34;&gt;demo&lt;/a&gt; folder. (Thanks to all the HF team for their support)&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples of how to use our model.&lt;/p&gt; &#xA;&lt;h4&gt;1) Code Completion&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, AutoModelForCausalLM&#xA;import torch&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-base&#34;, trust_remote_code=True)&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-base&#34;, trust_remote_code=True).cuda()&#xA;input_text = &#34;#write a quick sort algorithm&#34;&#xA;inputs = tokenizer(input_text, return_tensors=&#34;pt&#34;).to(model.device)&#xA;outputs = model.generate(**inputs, max_length=128)&#xA;print(tokenizer.decode(outputs[0], skip_special_tokens=True))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will output the following result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def quick_sort(arr):&#xA;    if len(arr) &amp;lt;= 1:&#xA;        return arr&#xA;    pivot = arr[0]&#xA;    left = []&#xA;    right = []&#xA;    for i in range(1, len(arr)):&#xA;        if arr[i] &amp;lt; pivot:&#xA;            left.append(arr[i])&#xA;        else:&#xA;            right.append(arr[i])&#xA;    return quick_sort(left) + [pivot] + quick_sort(right)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2) Code Insertion&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, AutoModelForCausalLM&#xA;import torch&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-base&#34;, trust_remote_code=True)&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-base&#34;, trust_remote_code=True).cuda()&#xA;input_text = &#34;&#34;&#34;&amp;lt;｜fim▁begin｜&amp;gt;def quick_sort(arr):&#xA;    if len(arr) &amp;lt;= 1:&#xA;        return arr&#xA;    pivot = arr[0]&#xA;    left = []&#xA;    right = []&#xA;&amp;lt;｜fim▁hole｜&amp;gt;&#xA;        if arr[i] &amp;lt; pivot:&#xA;            left.append(arr[i])&#xA;        else:&#xA;            right.append(arr[i])&#xA;    return quick_sort(left) + [pivot] + quick_sort(right)&amp;lt;｜fim▁end｜&amp;gt;&#34;&#34;&#34;&#xA;inputs = tokenizer(input_text, return_tensors=&#34;pt&#34;).to(model.device)&#xA;outputs = model.generate(**inputs, max_length=128)&#xA;print(tokenizer.decode(outputs[0], skip_special_tokens=True)[len(input_text):])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will output the following result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   for i in range(1, len(arr)):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3) Chat Model Inference&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, AutoModelForCausalLM&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-instruct&#34;, trust_remote_code=True)&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-instruct&#34;, trust_remote_code=True).cuda()&#xA;messages=[&#xA;    { &#39;role&#39;: &#39;user&#39;, &#39;content&#39;: &#34;write a quick sort algorithm in python.&#34;}&#xA;]&#xA;inputs = tokenizer.apply_chat_template(messages, return_tensors=&#34;pt&#34;).to(model.device)&#xA;# 32021 is the id of &amp;lt;|EOT|&amp;gt; token&#xA;outputs = model.generate(inputs, max_new_tokens=512, do_sample=False, top_k=50, top_p=0.95, num_return_sequences=1, eos_token_id=32021)&#xA;print(tokenizer.decode(outputs[0][len(inputs[0]):], skip_special_tokens=True))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will output the following result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sure, here is a simple implementation of the Quick Sort algorithm in Python:&#xA;&#xA;def quick_sort(arr):&#xA;    if len(arr) &amp;lt;= 1:&#xA;        return arr&#xA;    else:&#xA;        pivot = arr[0]&#xA;        less_than_pivot = [x for x in arr[1:] if x &amp;lt;= pivot]&#xA;        greater_than_pivot = [x for x in arr[1:] if x &amp;gt; pivot]&#xA;        return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)&#xA;&#xA;# Test the function&#xA;arr = [10, 7, 8, 9, 1, 5]&#xA;print(&#34;Original array:&#34;, arr)&#xA;print(&#34;Sorted array:&#34;, quick_sort(arr))&#xA;&#xA;This code works by selecting a &#39;pivot&#39; element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The pivot element is then in its final position. The process is then repeated for the sub-arrays.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the provided api &lt;code&gt;apply_chat_template&lt;/code&gt; which loads the template from &lt;code&gt;tokenizer_config.json&lt;/code&gt;, you can use the following template to chat with our model. Replace the &lt;code&gt;[&#39;content&#39;]&lt;/code&gt; with your instructions and the model&#39;s previous (if any) responses, then the model will generate the response to the currently given instruction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.&#xA;### Instruction:&#xA;[&#39;content&#39;]&#xA;### Response:&#xA;[&#39;content&#39;]&#xA;&amp;lt;|EOT|&amp;gt;&#xA;### Instruction:&#xA;[&#39;content&#39;]&#xA;### Response:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4) Repository Level Code Completion&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, AutoModelForCausalLM&#xA;tokenizer = AutoTokenizer.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-base&#34;, trust_remote_code=True)&#xA;model = AutoModelForCausalLM.from_pretrained(&#34;deepseek-ai/deepseek-coder-6.7b-base&#34;, trust_remote_code=True).cuda()&#xA;&#xA;input_text = &#34;&#34;&#34;#utils.py&#xA;import torch&#xA;from sklearn import datasets&#xA;from sklearn.model_selection import train_test_split&#xA;from sklearn.preprocessing import StandardScaler&#xA;from sklearn.metrics import accuracy_score&#xA;&#xA;def load_data():&#xA;    iris = datasets.load_iris()&#xA;    X = iris.data&#xA;    y = iris.target&#xA;&#xA;    # Standardize the data&#xA;    scaler = StandardScaler()&#xA;    X = scaler.fit_transform(X)&#xA;&#xA;    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)&#xA;&#xA;    # Convert numpy data to PyTorch tensors&#xA;    X_train = torch.tensor(X_train, dtype=torch.float32)&#xA;    X_test = torch.tensor(X_test, dtype=torch.float32)&#xA;    y_train = torch.tensor(y_train, dtype=torch.int64)&#xA;    y_test = torch.tensor(y_test, dtype=torch.int64)&#xA;&#xA;    return X_train, X_test, y_train, y_test&#xA;&#xA;def evaluate_predictions(y_test, y_pred):&#xA;    return accuracy_score(y_test, y_pred)&#xA;&#xA;&#xA;# model.py&#xA;import torch&#xA;import torch.nn as nn&#xA;import torch.optim as optim&#xA;from torch.utils.data import DataLoader, TensorDataset&#xA;&#xA;class IrisClassifier(nn.Module):&#xA;    def __init__(self):&#xA;        super(IrisClassifier, self).__init__()&#xA;        self.fc = nn.Sequential(&#xA;            nn.Linear(4, 16),&#xA;            nn.ReLU(),&#xA;            nn.Linear(16, 3)&#xA;        )&#xA;&#xA;    def forward(self, x):&#xA;        return self.fc(x)&#xA;&#xA;    def train_model(self, X_train, y_train, epochs, lr, batch_size):&#xA;        criterion = nn.CrossEntropyLoss()&#xA;        optimizer = optim.Adam(self.parameters(), lr=lr)&#xA;&#xA;        # Create DataLoader for batches&#xA;        dataset = TensorDataset(X_train, y_train)&#xA;        dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)&#xA;&#xA;        for epoch in range(epochs):&#xA;            for batch_X, batch_y in dataloader:&#xA;                optimizer.zero_grad()&#xA;                outputs = self(batch_X)&#xA;                loss = criterion(outputs, batch_y)&#xA;                loss.backward()&#xA;                optimizer.step()&#xA;&#xA;    def predict(self, X_test):&#xA;        with torch.no_grad():&#xA;            outputs = self(X_test)&#xA;            _, predicted = outputs.max(1)&#xA;        return predicted.numpy()&#xA;&#xA;&#xA;# main.py&#xA;from utils import load_data, evaluate_predictions&#xA;from model import IrisClassifier as Classifier&#xA;&#xA;def main():&#xA;    # Model training and evaluation&#xA;&#34;&#34;&#34;&#xA;inputs = tokenizer(input_text, return_tensors=&#34;pt&#34;).to(model.device)&#xA;outputs = model.generate(**inputs, max_new_tokens=140)&#xA;print(tokenizer.decode(outputs[0]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;In the following scenario, the DeepSeek-Coder-6.7B model effectively calls a class &lt;strong&gt;IrisClassifier&lt;/strong&gt; and its member function from the &lt;code&gt;model.py&lt;/code&gt; file, and also utilizes functions from the &lt;code&gt;utils.py&lt;/code&gt; file, to correctly complete the &lt;strong&gt;main&lt;/strong&gt; function in &lt;code&gt;main.py&lt;/code&gt; file for model training and evaluation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/completion_demo.gif&#34; alt=&#34;Completion GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5. Detailed Evaluation Results&lt;/h3&gt; &#xA;&lt;p&gt;The reproducible code for the following evaluation results can be found in the &lt;a href=&#34;https://github.com/deepseek-ai/deepseek-coder/tree/main/Evaluation&#34;&gt;Evaluation&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;1) Multilingual HumanEval Benchmark&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/HumanEval.png&#34; alt=&#34;HumanEval&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;2) MBPP Benchmark&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/MBPP.png&#34; alt=&#34;MBPP&#34; width=&#34;40%&#34;&gt; &#xA;&lt;h4&gt;3) DS-1000 Benchmark&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/DS-1000.png&#34; alt=&#34;DS-1000&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;4) Program-Aid Math Reasoning Benchmark&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/pictures/Math.png&#34; alt=&#34;Math&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;6. License&lt;/h3&gt; &#xA;&lt;p&gt;This code repository is licensed under the MIT License. The use of DeepSeek Coder models is subject to the Model License. DeepSeek Coder supports commercial use.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/LICENSE-CODE&#34;&gt;LICENSE-CODE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/deepseek-ai/DeepSeek-Coder/main/LICENSE-MODEL&#34;&gt;LICENSE-MODEL&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;6. Contact&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions, please raise an issue or contact us at &lt;a href=&#34;mailto:agi_code@deepseek.com&#34;&gt;agi_code@deepseek.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmrig/xmrig</title>
    <updated>2023-11-07T01:24:38Z</updated>
    <id>tag:github.com,2023-11-07:/xmrig/xmrig</id>
    <link href="https://github.com/xmrig/xmrig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RandomX, KawPow, CryptoNight and GhostRider unified CPU/GPU miner and RandomX benchmark&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XMRig&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xmrig/xmrig/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/xmrig/xmrig/all.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;XMRig is a high performance, open source, cross platform RandomX, KawPow, CryptoNight and &lt;a href=&#34;https://github.com/xmrig/xmrig/tree/master/src/crypto/ghostrider#readme&#34;&gt;GhostRider&lt;/a&gt; unified CPU/GPU miner and &lt;a href=&#34;https://xmrig.com/benchmark&#34;&gt;RandomX benchmark&lt;/a&gt;. Official binaries are available for Windows, Linux, macOS and FreeBSD.&lt;/p&gt; &#xA;&lt;h2&gt;Mining backends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; (x86/x64/ARMv7/ARMv8)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenCL&lt;/strong&gt; for AMD GPUs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CUDA&lt;/strong&gt; for NVIDIA GPUs via external &lt;a href=&#34;https://github.com/xmrig/xmrig-cuda&#34;&gt;CUDA plugin&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;Binary releases&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xmrig.com/docs/miner/build&#34;&gt;Build from source&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to configure the miner is the &lt;a href=&#34;https://xmrig.com/docs/miner/config&#34;&gt;JSON config file&lt;/a&gt; as it is more flexible and human friendly. The &lt;a href=&#34;https://xmrig.com/docs/miner/command-line-options&#34;&gt;command line interface&lt;/a&gt; does not cover all features, such as mining profiles for different algorithms. Important options can be changed during runtime without miner restart by editing the config file or executing &lt;a href=&#34;https://xmrig.com/docs/miner/api&#34;&gt;API&lt;/a&gt; calls.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xmrig.com/wizard&#34;&gt;Wizard&lt;/a&gt;&lt;/strong&gt; helps you create initial configuration for the miner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://workers.xmrig.info&#34;&gt;Workers&lt;/a&gt;&lt;/strong&gt; helps manage your miners via HTTP API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default donation 1% (1 minute in 100 minutes) can be increased via option &lt;code&gt;donate-level&lt;/code&gt; or disabled in source code.&lt;/li&gt; &#xA; &lt;li&gt;XMR: &lt;code&gt;48edfHu7V9Z84YzzMa6fUueoELZ9ZRXq9VetWzYGzKt52XU5xvqgzYnDK9URnRoJMk1j8nLwEVsaSWJ4fhdUyZijBGUicoD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xmrig&#34;&gt;xmrig&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/SChernykh&#34;&gt;sech1&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:support@xmrig.com&#34;&gt;support@xmrig.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/user/XMRig/&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/xmrig_dev&#34;&gt;twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>