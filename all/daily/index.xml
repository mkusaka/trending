<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-26T01:28:07Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Lightning-AI/LitServe</title>
    <updated>2024-08-26T01:28:07Z</updated>
    <id>tag:github.com,2024-08-26:/Lightning-AI/LitServe</id>
    <link href="https://github.com/Lightning-AI/LitServe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightning-fast serving engine for AI models. Flexible. Easy. Enterprise-scale.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Easily serve AI models Lightning fast ⚡&lt;/h1&gt; &#xA; &lt;img alt=&#34;Lightning&#34; src=&#34;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/ls_banner2.png&#34; width=&#34;800px&#34; style=&#34;max-width: 100%;&#34;&gt; &#xA; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Lightning-fast serving engine for AI models.&lt;/strong&gt;&lt;br&gt; Easy. Flexible. Enterprise-scale.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;LitServe&lt;/strong&gt; is an easy-to-use, flexible serving engine for AI models built on FastAPI. Features like batching, streaming, and GPU autoscaling eliminate the need to rebuild a FastAPI server per model.&lt;/p&gt; &#xA;&lt;p&gt;LitServe is at least &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#performance&#34;&gt;2x faster&lt;/a&gt; than plain FastAPI.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;pre&gt;&#xA;✅ (2x)+ faster serving  ✅ Easy to use        ✅ Batching, Streaming   &#xA;✅ Bring your own model  ✅ PyTorch/JAX/TF/... ✅ Built on FastAPI      &#xA;✅ GPU autoscaling       ✅ Multi-modal        ✅ Self-host or ⚡️ managed&#xA;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://discord.gg/VptPCZkGNa&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1077906959069626439?label=Get%20help%20on%20Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Lightning-AI/litserve/actions/workflows/ci-testing.yml/badge.svg?sanitize=true&#34; alt=&#34;cpu-tests&#34;&gt; &lt;a href=&#34;https://github.com/Lightning-AI/litserve/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;div style=&#34;text-align: center;&#34;&gt; &#xA;  &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#quick-start&#34; style=&#34;margin: 0 10px;&#34;&gt;Quick start&lt;/a&gt; • &#xA;  &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#featured-examples&#34; style=&#34;margin: 0 10px;&#34;&gt;Examples&lt;/a&gt; • &#xA;  &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#features&#34; style=&#34;margin: 0 10px;&#34;&gt;Features&lt;/a&gt; • &#xA;  &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#performance&#34; style=&#34;margin: 0 10px;&#34;&gt;Performance&lt;/a&gt; • &#xA;  &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#hosting-options&#34; style=&#34;margin: 0 10px;&#34;&gt;Hosting&lt;/a&gt; • &#xA;  &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/docs/litserve&#34; style=&#34;margin: 0 10px;&#34;&gt;Docs&lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/docs/litserve/home/get-started&#34;&gt; &lt;img src=&#34;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/get-started-badge.svg?sanitize=true&#34; height=&#34;36px&#34; alt=&#34;Get started&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;p&gt;Install LitServe via pip (&lt;a href=&#34;https://lightning.ai/docs/litserve/home/install&#34;&gt;more options&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install litserve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define a server&lt;/h3&gt; &#xA;&lt;p&gt;This 2-model toy example (AI compound system) shows LitServe&#39;s flexibility (&lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#featured-examples&#34;&gt;see real examples&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;import litserve as ls&#xA;&#xA;# (STEP 1) - DEFINE THE API (compound AI system)&#xA;class SimpleLitAPI(ls.LitAPI):&#xA;    def setup(self, device):&#xA;        # setup is called once at startup. Build a compound AI system (1+ models), connect DBs, load data, etc...&#xA;        self.model1 = lambda x: x**2&#xA;        self.model2 = lambda x: x**3&#xA;&#xA;    def decode_request(self, request):&#xA;        # Convert the request payload to model input.&#xA;        return request[&#34;input&#34;] &#xA;&#xA;    def predict(self, x):&#xA;        # Easily build compound systems. Run inference and return the output.&#xA;        squared = self.model1(x)&#xA;        cubed = self.model2(x)&#xA;        output = squared + cubed&#xA;        return {&#34;output&#34;: output}&#xA;&#xA;    def encode_response(self, output):&#xA;        # Convert the model output to a response payload.&#xA;        return {&#34;output&#34;: output} &#xA;&#xA;# (STEP 2) - START THE SERVER&#xA;if __name__ == &#34;__main__&#34;:&#xA;    # serve with advanced features (GPUs, etc...)&#xA;    server = ls.LitServer(SimpleLitAPI(), accelerator=&#34;auto&#34;, max_batch_size=1)&#xA;    server.run(port=8000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run the server via the command-line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning.ai/docs/litserve/api-reference/litapi&#34;&gt;LitAPI&lt;/a&gt; gives full control to build scalable compound AI systems (1 or more models).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning.ai/docs/litserve/api-reference/litserver&#34;&gt;LitServer&lt;/a&gt; handles optimizations like batching, auto-GPU scaling, etc...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Query the server&lt;/h3&gt; &#xA;&lt;p&gt;Use the auto-generated LitServe client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python client.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Write a custom client&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;response = requests.post(&#xA;    &#34;http://127.0.0.1:8000/predict&#34;,&#xA;    json={&#34;input&#34;: 4.0}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Featured examples&lt;/h1&gt; &#xA;&lt;p&gt;Use LitServe to deploy any model or AI service: (Gen AI, classical ML, embedding servers, LLMs, vision, audio, multi-modal systems, etc...)&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;div width=&#34;200px&#34;&gt; &#xA;  &lt;video src=&#34;https://github.com/user-attachments/assets/5e73549a-bc0f-47a9-9d9c-5b54389be5de&#34; width=&#34;200px&#34; controls&gt;&lt;/video&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&#xA;&lt;strong&gt;Featured examples&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Toy model:&lt;/strong&gt;      &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#define-a-server&#34;&gt;Hello world&lt;/a&gt;&#xA;&lt;strong&gt;LLMs:&lt;/strong&gt;           &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-private-llama-3-8b-api&#34;&gt;Llama 3 (8B)&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/openai-fault-tolerant-proxy-server&#34;&gt;LLM Proxy server&lt;/a&gt;&#xA;&lt;strong&gt;NLP:&lt;/strong&gt;            &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-any-hugging-face-model-instantly&#34;&gt;Hugging face&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-hugging-face-bert-model&#34;&gt;BERT&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-text-embedding-api-with-litserve&#34;&gt;Text embedding API&lt;/a&gt;&#xA;&lt;strong&gt;Multimodal:&lt;/strong&gt;     &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-open-ai-clip-with-litserve&#34;&gt;OpenAI Clip&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-multi-modal-llm-with-minicpm&#34;&gt;MiniCPM&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-phi3-5-vision-api-with-litserve&#34;&gt;Phi-3.5 Vision Instruct&lt;/a&gt;&#xA;&lt;strong&gt;Audio:&lt;/strong&gt;          &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-open-ai-s-whisper-model&#34;&gt;Whisper&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-an-music-generation-api-with-meta-s-audio-craft&#34;&gt;AudioCraft&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-an-audio-generation-api&#34;&gt;StableAudio&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-noise-cancellation-api-with-deepfilternet&#34;&gt;Noise cancellation (DeepFilterNet)&lt;/a&gt;&#xA;&lt;strong&gt;Vision:&lt;/strong&gt;         &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-private-api-for-stable-diffusion-2&#34;&gt;Stable diffusion 2&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-an-image-generation-api-with-auraflow&#34;&gt;AuraFlow&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-an-image-generation-api-with-flux&#34;&gt;Flux&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-super-resolution-image-api-with-aura-sr&#34;&gt;Image super resolution (Aura SR)&lt;/a&gt;&#xA;&lt;strong&gt;Speech:&lt;/strong&gt;         &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-a-voice-clone-api-coqui-xtts-v2-model&#34;&gt;Text-speech (XTTS V2)&lt;/a&gt;&#xA;&lt;strong&gt;Classical ML:&lt;/strong&gt;   &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-random-forest-with-litserve&#34;&gt;Random forest&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-xgboost-with-litserve&#34;&gt;XGBoost&lt;/a&gt;&#xA;&lt;strong&gt;Miscellaneous:&lt;/strong&gt;  &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/deploy-an-media-conversion-api-with-ffmpeg&#34;&gt;Media conversion API (ffmpeg)&lt;/a&gt;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lightning.ai/studios?section=serving&#34;&gt;Browse 100+ community-built templates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;State-of-the-art features:&lt;/p&gt; &#xA;&lt;p&gt;✅ &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/LitServe/main/#performance&#34;&gt;(2x)+ faster than plain FastAPI&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/full-control&#34;&gt;Bring your own model&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/compound-ai-systems&#34;&gt;Build compound systems (1+ models)&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/gpu-inference&#34;&gt;GPU autoscaling&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/batching&#34;&gt;Batching&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/streaming&#34;&gt;Streaming&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/autoscaling&#34;&gt;Worker autoscaling&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/hosting-methods#host-on-your-own&#34;&gt;Self-host on your machines&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/hosting-methods#host-on-lightning-studios&#34;&gt;Host fully managed on Lightning AI&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/examples&#34;&gt;Serve all models: (LLMs, vision, etc.)&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/streaming&#34;&gt;Scale to zero (serverless)&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/full-control&#34;&gt;Supports PyTorch, JAX, TF, etc...&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://www.openapis.org/&#34;&gt;OpenAPI compliant&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/open-ai-spec&#34;&gt;Open AI compatibility&lt;/a&gt;&lt;br&gt; ✅ &lt;a href=&#34;https://lightning.ai/docs/litserve/features/authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lightning.ai/docs/litserve/features&#34;&gt;10+ features...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We prioritize scalable, enterprise-level features over hype.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;LitServe is designed for AI workloads. Specialized multi-worker handling delivers a minimum &lt;strong&gt;2x speedup over FastAPI&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional features like batching and GPU autoscaling can drive performance well beyond 2x, scaling efficiently to handle more simultaneous requests than FastAPI and TorchServe.&lt;/p&gt; &#xA;&lt;p&gt;Reproduce the full benchmarks &lt;a href=&#34;https://lightning.ai/docs/litserve/home/benchmarks&#34;&gt;here&lt;/a&gt; (higher is better).&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;LitServe&#34; src=&#34;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/ls_charts_v6.png&#34; width=&#34;1000px&#34; style=&#34;max-width: 100%;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;These results are for image and text classification ML tasks. The performance relationships hold for other ML tasks (embedding, LLM serving, audio, segmentation, object detection, summarization etc...).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;💡 Note on LLM serving:&lt;/strong&gt;&lt;/em&gt; For high-performance LLM serving (like Ollama/VLLM), use &lt;a href=&#34;https://github.com/Lightning-AI/litgpt?tab=readme-ov-file#deploy-an-llm&#34;&gt;LitGPT&lt;/a&gt; or build your custom VLLM-like server with LitServe. Optimizations like kv-caching, which can be done with LitServe, are needed to maximize LLM performance.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Hosting options&lt;/h1&gt; &#xA;&lt;p&gt;LitServe can be hosted independently on your own machines or fully managed via Lightning Studios.&lt;/p&gt; &#xA;&lt;p&gt;Self-hosting is ideal for hackers, students, and DIY developers, while fully managed hosting is ideal for enterprise developers needing easy autoscaling, security, release management, and 99.995% uptime and observability.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://lightning.ai/lightning-ai/studios/litserve-hello-world&#34;&gt; &lt;img src=&#34;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/host-on-lightning.svg?sanitize=true&#34; alt=&#34;Host on Lightning&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Feature&lt;/th&gt; &#xA;    &lt;th&gt;Self Managed&lt;/th&gt; &#xA;    &lt;th&gt;Fully Managed on Studios&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Deployment&lt;/td&gt; &#xA;    &lt;td&gt;✅ Do it yourself deployment&lt;/td&gt; &#xA;    &lt;td&gt;✅ One-button cloud deploy&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Load balancing&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Autoscaling&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Scale to zero&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Multi-machine inference&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Authentication&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Own VPC&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;AWS, GCP&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Use your own cloud commits&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;LitServe is a &lt;a href=&#34;https://lightning.ai/docs/litserve/community&#34;&gt;community project accepting contributions&lt;/a&gt; - Let&#39;s make the world&#39;s most advanced AI inference engine.&lt;/p&gt; &#xA;&lt;p&gt;💬 &lt;a href=&#34;https://discord.com/invite/XncpTy7DSt&#34;&gt;Get help on Discord&lt;/a&gt;&lt;br&gt; 📋 &lt;a href=&#34;https://github.com/Lightning-AI/litserve/raw/main/LICENSE&#34;&gt;License: Apache 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>casey/just</title>
    <updated>2024-08-26T01:28:07Z</updated>
    <id>tag:github.com,2024-08-26:/casey/just</id>
    <link href="https://github.com/casey/just" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 Just a command runner&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;right&#34;&gt;&#xA; Table of Contents↗️&#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;code&gt;just&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://crates.io/crates/just&#34;&gt; &lt;img src=&#34;https://img.shields.io/crates/v/just.svg?sanitize=true&#34; alt=&#34;crates.io version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/casey/just/actions&#34;&gt; &lt;img src=&#34;https://github.com/casey/just/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/casey/just/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/casey/just/total.svg?sanitize=true&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/ezYScXR&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/695580069837406228?logo=discord&#34; alt=&#34;chat on discord&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;mailto:casey@rodarmor.com?subject=Thanks%20for%20Just!&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg?sanitize=true&#34; alt=&#34;say thanks&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a handy way to save and run project-specific commands.&lt;/p&gt; &#xA;&lt;p&gt;This readme is also available as a &lt;a href=&#34;https://just.systems/man/en/&#34;&gt;book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(中文文档在 &lt;a href=&#34;https://github.com/casey/just/raw/master/README.%E4%B8%AD%E6%96%87.md&#34;&gt;这里&lt;/a&gt;, 快看过来!)&lt;/p&gt; &#xA;&lt;p&gt;Commands, called recipes, are stored in a file called &lt;code&gt;justfile&lt;/code&gt; with syntax inspired by &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/casey/just/master/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can then run them with &lt;code&gt;just RECIPE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test-all&#xA;cc *.c -o main&#xA;./test --all&#xA;Yay, all your tests passed!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; has a ton of useful features, and many improvements over &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a command runner, not a build system, so it avoids much of &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#what-are-the-idiosyncrasies-of-make-that-just-avoids&#34;&gt;&lt;code&gt;make&lt;/code&gt;&#39;s complexity and idiosyncrasies&lt;/a&gt;. No need for &lt;code&gt;.PHONY&lt;/code&gt; recipes!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux, MacOS, and Windows are supported with no additional dependencies. (Although if your system doesn&#39;t have an &lt;code&gt;sh&lt;/code&gt;, you&#39;ll need to &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#shell&#34;&gt;choose a different shell&lt;/a&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Errors are specific and informative, and syntax errors are reported along with their source context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recipes can accept &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#recipe-parameters&#34;&gt;command line arguments&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wherever possible, errors are resolved statically. Unknown recipes and circular dependencies are reported before anything runs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#dotenv-settings&#34;&gt;loads &lt;code&gt;.env&lt;/code&gt; files&lt;/a&gt;, making it easy to populate environment variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recipes can be &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#listing-available-recipes&#34;&gt;listed from the command line&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Command line completion scripts are &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#shell-completion-scripts&#34;&gt;available for most popular shells&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recipes can be written in &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#shebang-recipes&#34;&gt;arbitrary languages&lt;/a&gt;, like Python or NodeJS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be invoked from any subdirectory, not just the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And &lt;a href=&#34;https://just.systems/man/en/&#34;&gt;much more&lt;/a&gt;!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need help with &lt;code&gt;just&lt;/code&gt; please feel free to open an issue or ping me on &lt;a href=&#34;https://discord.gg/ezYScXR&#34;&gt;Discord&lt;/a&gt;. Feature requests and bug reports are always welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; should run on any system with a reasonable &lt;code&gt;sh&lt;/code&gt;, including Linux, MacOS, and the BSDs.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, &lt;code&gt;just&lt;/code&gt; works with the &lt;code&gt;sh&lt;/code&gt; provided by &lt;a href=&#34;https://git-scm.com&#34;&gt;Git for Windows&lt;/a&gt;, &lt;a href=&#34;https://desktop.github.com&#34;&gt;GitHub Desktop&lt;/a&gt;, or &lt;a href=&#34;http://www.cygwin.com&#34;&gt;Cygwin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d rather not install &lt;code&gt;sh&lt;/code&gt;, you can use the &lt;code&gt;shell&lt;/code&gt; setting to use the shell of your choice.&lt;/p&gt; &#xA;&lt;p&gt;Like PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# use PowerShell instead of sh:&#xA;set shell := [&#34;powershell.exe&#34;, &#34;-c&#34;]&#xA;&#xA;hello:&#xA;  Write-Host &#34;Hello, world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…or &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# use cmd.exe instead of sh:&#xA;set shell := [&#34;cmd.exe&#34;, &#34;/c&#34;]&#xA;&#xA;list:&#xA;  dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the shell using command-line arguments. For example, to use PowerShell, launch &lt;code&gt;just&lt;/code&gt; with &lt;code&gt;--shell powershell.exe --shell-arg -c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(PowerShell is installed by default on Windows 7 SP1 and Windows Server 2008 R2 S1 and later, and &lt;code&gt;cmd.exe&lt;/code&gt; is quite fiddly, so PowerShell is recommended for most Windows users.)&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;   &lt;th&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management&#34;&gt;apk-tools&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkgs.alpinelinux.org/package/edge/community/x86_64/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apk add just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.archlinux.org&#34;&gt;Arch Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Pacman&#34;&gt;pacman&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/just/&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman -S just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://debian.org&#34;&gt;Debian 13 (unreleased)&lt;/a&gt; and &lt;a href=&#34;https://ubuntu.com&#34;&gt;Ubuntu 24.04&lt;/a&gt; derivatives&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/APT_(software)&#34;&gt;apt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://packages.debian.org/trixie/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apt install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://debian.org&#34;&gt;Debian&lt;/a&gt; and &lt;a href=&#34;https://ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mpr.makedeb.org&#34;&gt;MPR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mpr.makedeb.org/packages/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;git clone https://mpr.makedeb.org/just&lt;/code&gt;&lt;br&gt; &lt;code&gt;cd just&lt;/code&gt;&lt;br&gt; &lt;code&gt;makedeb -si&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://debian.org&#34;&gt;Debian&lt;/a&gt; and &lt;a href=&#34;https://ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; derivatives&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.makedeb.org/prebuilt-mpr&#34;&gt;Prebuilt-MPR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mpr.makedeb.org/packages/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;sup&gt;&lt;b&gt;You must have the &lt;a href=&#34;https://docs.makedeb.org/prebuilt-mpr/getting-started/#setting-up-the-repository&#34;&gt;Prebuilt-MPR set up&lt;/a&gt; on your system in order to run this command.&lt;/b&gt;&lt;/sup&gt;&lt;br&gt; &lt;code&gt;apt install just&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://getfedora.org&#34;&gt;Fedora Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dnf.readthedocs.io/en/latest/&#34;&gt;DNF&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://src.fedoraproject.org/rpms/rust-just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dnf install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.freebsd.org&#34;&gt;FreeBSD&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.freebsd.org/doc/handbook/pkgng-intro.html&#34;&gt;pkg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.freshports.org/deskutils/just/&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gentoo.org&#34;&gt;Gentoo Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wiki.gentoo.org/wiki/Portage&#34;&gt;Portage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gentoo-mirror/guru/tree/master/dev-build/just&#34;&gt;guru/dev-build/just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;eselect repository enable guru&lt;/code&gt;&lt;br&gt; &lt;code&gt;emerge --sync guru&lt;/code&gt;&lt;br&gt; &lt;code&gt;emerge dev-build/just&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MacOS&#34;&gt;macOS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ports.macports.org/port/just/summary&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;port install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_Windows&#34;&gt;Microsoft Windows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/michidk/just-choco&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;choco install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_Windows&#34;&gt;Microsoft Windows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/just.json&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scoop install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_Windows&#34;&gt;Microsoft Windows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/&#34;&gt;Windows Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/winget-pkgs/tree/master/manifests/c/Casey/Just&#34;&gt;Casey/Just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winget install --id Casey.Just --exact&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nixos.org/nixos/&#34;&gt;NixOS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/development/tools/just/default.nix&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixos.just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://opensuse.org&#34;&gt;openSUSE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.opensuse.org/Portal:Zypper&#34;&gt;Zypper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://build.opensuse.org/package/show/Base:System/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zypper in just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://getsol.us&#34;&gt;Solus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://getsol.us/articles/package-management/basics/en&#34;&gt;eopkg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.getsol.us/source/just/&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eopkg install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/casey/just/releases&#34;&gt;Various&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://asdf-vm.com&#34;&gt;asdf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/olofvndrhr/asdf-just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;asdf plugin add just&lt;/code&gt;&lt;br&gt; &lt;code&gt;asdf install just &amp;lt;version&amp;gt;&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://forge.rust-lang.org/release/platform-support.html&#34;&gt;Various&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Cargo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html#system-requirements&#34;&gt;Various&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.conda.io/projects/conda/en/latest/index.html&#34;&gt;Conda&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://anaconda.org/conda-forge/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;conda install -c conda-forge just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.brew.sh/Installation&#34;&gt;Various&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/just&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nixos.org/download.html#download-nix&#34;&gt;Various&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/development/tools/just/default.nix&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://voidlinux.org&#34;&gt;Void Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wiki.voidlinux.org/XBPS&#34;&gt;XBPS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/void-linux/void-packages/raw/master/srcpkgs/just/template&#34;&gt;just&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xbps-install -S just&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/just.svg?sanitize=true&#34; alt=&#34;just package version table&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/rust:just.svg?sanitize=true&#34; alt=&#34;rust:just package version table&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pre-Built Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Pre-built binaries for Linux, MacOS, and Windows can be found on &lt;a href=&#34;https://github.com/casey/just/releases&#34;&gt;the releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use the following command on Linux, MacOS, or Windows to download the latest release, just replace &lt;code&gt;DEST&lt;/code&gt; with the directory where you&#39;d like to put &lt;code&gt;just&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to DEST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to install &lt;code&gt;just&lt;/code&gt; to &lt;code&gt;~/bin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create ~/bin&#xA;mkdir -p ~/bin&#xA;&#xA;# download and extract just to ~/bin/just&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin&#xA;&#xA;# add `~/bin` to the paths that your shell searches for executables&#xA;# this line should be added to your shells initialization file,&#xA;# e.g. `~/.bashrc` or `~/.zshrc`&#xA;export PATH=&#34;$PATH:$HOME/bin&#34;&#xA;&#xA;# just should now be executable&#xA;just --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;install.sh&lt;/code&gt; may fail on GitHub Actions, or in other environments where many machines share IP addresses. &lt;code&gt;install.sh&lt;/code&gt; calls GitHub APIs in order to determine the latest version of &lt;code&gt;just&lt;/code&gt; to install, and those API calls are rate-limited on a per-IP basis. To make &lt;code&gt;install.sh&lt;/code&gt; more reliable in such circumstances, pass a specific tag to install with &lt;code&gt;--tag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can be installed on GitHub Actions in a few ways.&lt;/p&gt; &#xA;&lt;p&gt;Using package managers pre-installed on GitHub Actions runners on MacOS with &lt;code&gt;brew install just&lt;/code&gt;, and on Windows with &lt;code&gt;choco install just&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/extractions/setup-just&#34;&gt;extractions/setup-just&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: extractions/setup-just@v1&#xA;  with:&#xA;    just-version: 1.5.0  # optional semver specification, otherwise latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;a href=&#34;https://github.com/taiki-e/install-action&#34;&gt;taiki-e/install-action&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: taiki-e/install-action@just&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release RSS Feed&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://en.wikipedia.org/wiki/RSS&#34;&gt;RSS feed&lt;/a&gt; of &lt;code&gt;just&lt;/code&gt; releases is available &lt;a href=&#34;https://github.com/casey/just/releases.atom&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.com/package/just-install&#34;&gt;just-install&lt;/a&gt; can be used to automate installation of &lt;code&gt;just&lt;/code&gt; in Node.js applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is a great, more robust alternative to npm scripts. If you want to include &lt;code&gt;just&lt;/code&gt; in the dependencies of a Node.js application, &lt;code&gt;just-install&lt;/code&gt; will install a local, platform-specific binary as part of the &lt;code&gt;npm install&lt;/code&gt; command. This removes the need for every developer to install &lt;code&gt;just&lt;/code&gt; independently using one of the processes mentioned above. After installation, the &lt;code&gt;just&lt;/code&gt; command will work in npm scripts or with npx. It&#39;s great for teams who want to make the set up process for their project as easy as possible.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://github.com/brombal/just-install#readme&#34;&gt;just-install README file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Backwards Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;With the release of version 1.0, &lt;code&gt;just&lt;/code&gt; features a strong commitment to backwards compatibility and stability.&lt;/p&gt; &#xA;&lt;p&gt;Future releases will not introduce backwards incompatible changes that make existing &lt;code&gt;justfile&lt;/code&gt;s stop working, or break working invocations of the command-line interface.&lt;/p&gt; &#xA;&lt;p&gt;This does not, however, preclude fixing outright bugs, even if doing so might break &lt;code&gt;justfiles&lt;/code&gt; that rely on their behavior.&lt;/p&gt; &#xA;&lt;p&gt;There will never be a &lt;code&gt;just&lt;/code&gt; 2.0. Any desirable backwards-incompatible changes will be opt-in on a per-&lt;code&gt;justfile&lt;/code&gt; basis, so users may migrate at their leisure.&lt;/p&gt; &#xA;&lt;p&gt;Features that aren&#39;t yet ready for stabilization are marked as unstable and may be changed or removed at any time. Using unstable features produces an error by default, which can be suppressed with by passing the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or setting the environment variable &lt;code&gt;JUST_UNSTABLE&lt;/code&gt;, to any value other than &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or the empty string.&lt;/p&gt; &#xA;&lt;h2&gt;Editor Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;justfile&lt;/code&gt; syntax is close enough to &lt;code&gt;make&lt;/code&gt; that you may want to tell your editor to use &lt;code&gt;make&lt;/code&gt; syntax highlighting for &lt;code&gt;just&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Vim and Neovim&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;vim-just&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/NoahTheDuke/vim-just&#34;&gt;vim-just&lt;/a&gt; plugin provides syntax highlighting for &lt;code&gt;justfile&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;Install it with your favorite package manager, like &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;Plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin()&#xA;&#xA;Plug &#39;NoahTheDuke/vim-just&#39;&#xA;&#xA;call plug#end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with Vim&#39;s built-in package support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/.vim/pack/vendor/start&#xA;cd ~/.vim/pack/vendor/start&#xA;git clone https://github.com/NoahTheDuke/vim-just.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;tree-sitter-just&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IndianBoy42/tree-sitter-just&#34;&gt;tree-sitter-just&lt;/a&gt; is an &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Nvim Treesitter&lt;/a&gt; plugin for Neovim.&lt;/p&gt; &#xA;&lt;h4&gt;Makefile Syntax Highlighting&lt;/h4&gt; &#xA;&lt;p&gt;Vim&#39;s built-in makefile syntax highlighting isn&#39;t perfect for &lt;code&gt;justfile&lt;/code&gt;s, but it&#39;s better than nothing. You can put the following in &lt;code&gt;~/.vim/filetype.vim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;if exists(&#34;did_load_filetypes&#34;)&#xA;  finish&#xA;endif&#xA;&#xA;augroup filetypedetect&#xA;  au BufNewFile,BufRead justfile setf make&#xA;augroup END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# vim: set ft=make :&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/leon-barrett/just-mode.el&#34;&gt;just-mode&lt;/a&gt; provides syntax highlighting and automatic indentation of &lt;code&gt;justfile&lt;/code&gt;s. It is available on &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; as &lt;a href=&#34;https://melpa.org/#/just-mode&#34;&gt;just-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/psibi/justl.el&#34;&gt;justl&lt;/a&gt; provides commands for executing and listing recipes.&lt;/p&gt; &#xA;&lt;p&gt;You can add the following to an individual &lt;code&gt;justfile&lt;/code&gt; to enable &lt;code&gt;make&lt;/code&gt; mode on a per-file basis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# Local Variables:&#xA;# mode: makefile&#xA;# End:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;An extension for VS Code is &lt;a href=&#34;https://github.com/nefrob/vscode-just&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unmaintained VS Code extensions include &lt;a href=&#34;https://github.com/skellock/vscode-just&#34;&gt;skellock/vscode-just&lt;/a&gt; and &lt;a href=&#34;https://github.com/sclu1034/vscode-just&#34;&gt;sclu1034/vscode-just&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;JetBrains IDEs&lt;/h3&gt; &#xA;&lt;p&gt;A plugin for JetBrains IDEs by &lt;a href=&#34;https://github.com/linux-china&#34;&gt;linux_china&lt;/a&gt; is &lt;a href=&#34;https://plugins.jetbrains.com/plugin/18658-just&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Kakoune&lt;/h3&gt; &#xA;&lt;p&gt;Kakoune supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out of the box, thanks to TeddyDD.&lt;/p&gt; &#xA;&lt;h3&gt;Helix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://helix-editor.com/&#34;&gt;Helix&lt;/a&gt; supports &lt;code&gt;justfile&lt;/code&gt; syntax highlighting out-of-the-box since version 23.05.&lt;/p&gt; &#xA;&lt;h3&gt;Sublime Text&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/nk9/just_sublime&#34;&gt;Just package&lt;/a&gt; by &lt;a href=&#34;https://github.com/nk9&#34;&gt;nk9&lt;/a&gt; with &lt;code&gt;just&lt;/code&gt; syntax and some other tools is available on &lt;a href=&#34;https://packagecontrol.io/packages/Just&#34;&gt;PackageControl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Micro&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://micro-editor.github.io/&#34;&gt;Micro&lt;/a&gt; supports Justfile syntax highlighting out of the box, thanks to &lt;a href=&#34;https://github.com/tomodachi94&#34;&gt;tomodachi94&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other Editors&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to send me the commands necessary to get syntax highlighting working in your editor of choice so that I may include them here.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#installation&#34;&gt;the installation section&lt;/a&gt; for how to install &lt;code&gt;just&lt;/code&gt; on your computer. Try running &lt;code&gt;just --version&lt;/code&gt; to make sure that it&#39;s installed correctly.&lt;/p&gt; &#xA;&lt;p&gt;For an overview of the syntax, check out &lt;a href=&#34;https://cheatography.com/linux-china/cheat-sheets/justfile/&#34;&gt;this cheatsheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once &lt;code&gt;just&lt;/code&gt; is installed and working, create a file named &lt;code&gt;justfile&lt;/code&gt; in the root of your project with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;recipe-name:&#xA;  echo &#39;This is a recipe!&#39;&#xA;&#xA;# this is a comment&#xA;another-recipe:&#xA;  @echo &#39;This is another recipe.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you invoke &lt;code&gt;just&lt;/code&gt; it looks for file &lt;code&gt;justfile&lt;/code&gt; in the current directory and upwards, so you can invoke it from any subdirectory of your project.&lt;/p&gt; &#xA;&lt;p&gt;The search for a &lt;code&gt;justfile&lt;/code&gt; is case insensitive, so any case, like &lt;code&gt;Justfile&lt;/code&gt;, &lt;code&gt;JUSTFILE&lt;/code&gt;, or &lt;code&gt;JuStFiLe&lt;/code&gt;, will work. &lt;code&gt;just&lt;/code&gt; will also look for files with the name &lt;code&gt;.justfile&lt;/code&gt;, in case you&#39;d like to hide a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;just&lt;/code&gt; with no arguments runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just&#xA;echo &#39;This is a recipe!&#39;&#xA;This is a recipe!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One or more arguments specify the recipe(s) to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just another-recipe&#xA;This is another recipe.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; prints each command to standard error before running it, which is why &lt;code&gt;echo &#39;This is a recipe!&#39;&lt;/code&gt; was printed. This is suppressed for lines starting with &lt;code&gt;@&lt;/code&gt;, which is why &lt;code&gt;echo &#39;This is another recipe.&#39;&lt;/code&gt; was not printed.&lt;/p&gt; &#xA;&lt;p&gt;Recipes stop running if a command fails. Here &lt;code&gt;cargo publish&lt;/code&gt; will only run if &lt;code&gt;cargo test&lt;/code&gt; succeeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;publish:&#xA;  cargo test&#xA;  # tests passed, time to publish!&#xA;  cargo publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recipes can depend on other recipes. Here the &lt;code&gt;test&lt;/code&gt; recipe depends on the &lt;code&gt;build&lt;/code&gt; recipe, so &lt;code&gt;build&lt;/code&gt; will run before &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;build:&#xA;  cc main.c foo.c bar.c -o main&#xA;&#xA;test: build&#xA;  ./test&#xA;&#xA;sloc:&#xA;  @echo &#34;`wc -l *.c` lines of code&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test&#xA;cc main.c foo.c bar.c -o main&#xA;./test&#xA;testing… all tests passed!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recipes without dependencies will run in the order they&#39;re given on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just build sloc&#xA;cc main.c foo.c bar.c -o main&#xA;1337 lines of code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dependencies will always run first, even if they are passed after a recipe that depends on them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test build&#xA;cc main.c foo.c bar.c -o main&#xA;./test&#xA;testing… all tests passed!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;A variety of &lt;code&gt;justfile&lt;/code&gt;s can be found in the &lt;a href=&#34;https://github.com/casey/just/tree/master/examples&#34;&gt;examples directory&lt;/a&gt; and on &lt;a href=&#34;https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;The Default Recipe&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;just&lt;/code&gt; is invoked without a recipe, it runs the first recipe in the &lt;code&gt;justfile&lt;/code&gt;. This recipe might be the most frequently run command in the project, like running the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;test:&#xA;  cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use dependencies to run multiple recipes by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;default: lint build test&#xA;&#xA;build:&#xA;  echo Building…&#xA;&#xA;test:&#xA;  echo Testing…&#xA;&#xA;lint:&#xA;  echo Linting…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no recipe makes sense as the default recipe, you can add a recipe to the beginning of your &lt;code&gt;justfile&lt;/code&gt; that lists the available recipes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;default:&#xA;  just --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Listing Available Recipes&lt;/h3&gt; &#xA;&lt;p&gt;Recipes can be listed in alphabetical order with &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;    build&#xA;    test&#xA;    deploy&#xA;    lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recipes in &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#modules1190&#34;&gt;submodules&lt;/a&gt; can be listed with &lt;code&gt;just --list PATH&lt;/code&gt;, where &lt;code&gt;PATH&lt;/code&gt; is a space- or &lt;code&gt;::&lt;/code&gt;-separated module path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat justfile&#xA;mod foo&#xA;$ cat foo.just&#xA;mod bar&#xA;$ cat bar.just&#xA;baz:&#xA;$ just foo bar&#xA;Available recipes:&#xA;    baz&#xA;$ just foo::bar&#xA;Available recipes:&#xA;    baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just --summary&lt;/code&gt; is more concise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --summary&#xA;build test deploy lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass &lt;code&gt;--unsorted&lt;/code&gt; to print recipes in the order they appear in the &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;test:&#xA;  echo &#39;Testing!&#39;&#xA;&#xA;build:&#xA;  echo &#39;Building!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list --unsorted&#xA;Available recipes:&#xA;    test&#xA;    build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --summary --unsorted&#xA;test build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like &lt;code&gt;just&lt;/code&gt; to default to listing the recipes in the &lt;code&gt;justfile&lt;/code&gt;, you can use this as your default recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;default:&#xA;  @just --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you may need to add &lt;code&gt;--justfile {{justfile()}}&lt;/code&gt; to the line above. Without it, if you executed &lt;code&gt;just -f /some/distant/justfile -d .&lt;/code&gt; or &lt;code&gt;just -f ./non-standard-justfile&lt;/code&gt;, the plain &lt;code&gt;just --list&lt;/code&gt; inside the recipe would not necessarily use the file you provided. It would try to find a justfile in your current path, maybe even resulting in a &lt;code&gt;No justfile found&lt;/code&gt; error.&lt;/p&gt; &#xA;&lt;p&gt;The heading text can be customized with &lt;code&gt;--list-heading&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list --list-heading $&#39;Cool stuff…\n&#39;&#xA;Cool stuff…&#xA;    test&#xA;    build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the indentation can be customized with &lt;code&gt;--list-prefix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list --list-prefix ····&#xA;Available recipes:&#xA;····test&#xA;····build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The argument to &lt;code&gt;--list-heading&lt;/code&gt; replaces both the heading and the newline following it, so it should contain a newline if non-empty. It works this way so you can suppress the heading line entirely by passing the empty string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list --list-heading &#39;&#39;&#xA;    test&#xA;    build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working Directory&lt;/h3&gt; &#xA;&lt;p&gt;By default, recipes run with the working directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;[no-cd]&lt;/code&gt; attribute can be used to make recipes run with the working directory set to directory in which &lt;code&gt;just&lt;/code&gt; was invoked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;@foo:&#xA;  pwd&#xA;&#xA;[no-cd]&#xA;@bar:&#xA;  pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd subdir&#xA;$ just foo&#xA;/&#xA;$ just bar&#xA;/subdir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override working directory with &lt;code&gt;set working-directory := &#39;…&#39;&lt;/code&gt;, whose value is relative to the default working directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set working-directory := &#39;bar&#39;&#xA;&#xA;@foo:&#xA;  pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd&#xA;/home/bob&#xA;$ just foo&#xA;/home/bob/bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Aliases&lt;/h3&gt; &#xA;&lt;p&gt;Aliases allow recipes to be invoked on the command line with alternative names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;alias b := build&#xA;&#xA;build:&#xA;  echo &#39;Building!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just b&#xA;echo &#39;Building!&#39;&#xA;Building!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Settings control interpretation and execution. Each setting may be specified at most once, anywhere in the &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#34;zsh&#34;, &#34;-cu&#34;]&#xA;&#xA;foo:&#xA;  # this line will be run as `zsh -cu &#39;ls **/*.txt&#39;`&#xA;  ls **/*.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Table of Settings&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;allow-duplicate-recipes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow recipes appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier recipes with the same name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;allow-duplicate-variables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow variables appearing later in a &lt;code&gt;justfile&lt;/code&gt; to override earlier variables with the same name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotenv-filename&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file with a custom name, if present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotenv-load&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file, if present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotenv-path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Load a &lt;code&gt;.env&lt;/code&gt; file from a custom path and error if not present. Overrides &lt;code&gt;dotenv-filename&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotenv-required&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Error if a &lt;code&gt;.env&lt;/code&gt; file isn&#39;t found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Export all variables as environment variables.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search &lt;code&gt;justfile&lt;/code&gt; in parent directory if the first recipe on the command line is not found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore-comments&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ignore recipe lines beginning with &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;positional-arguments&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pass positional arguments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;script-interpreter&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#39;sh&#39;, &#39;-eu&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set command used to invoke recipes with empty &lt;code&gt;[script]&lt;/code&gt; attribute.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Set command used to invoke recipes and evaluate backticks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tempdir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Create temporary directories in &lt;code&gt;tempdir&lt;/code&gt; instead of the system default temporary directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable unstable features.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;windows-powershell&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use PowerShell on Windows as default shell. (Deprecated. Use &lt;code&gt;windows-shell&lt;/code&gt; instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;windows-shell&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[COMMAND, ARGS…]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Set the command used to invoke recipes and evaluate backticks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;working-directory&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Set the working directory for recipes and backticks, relative to the default working directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Boolean settings can be written as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-justfile&#34;&gt;set NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-justfile&#34;&gt;set NAME := true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Allow Duplicate Recipes&lt;/h4&gt; &#xA;&lt;p&gt;If &lt;code&gt;allow-duplicate-recipes&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple recipes with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set allow-duplicate-recipes&#xA;&#xA;@foo:&#xA;  echo foo&#xA;&#xA;@foo:&#xA;  echo bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Allow Duplicate Variables&lt;/h4&gt; &#xA;&lt;p&gt;If &lt;code&gt;allow-duplicate-variables&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, defining multiple variables with the same name is not an error and the last definition is used. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set allow-duplicate-variables&#xA;&#xA;a := &#34;foo&#34;&#xA;a := &#34;bar&#34;&#xA;&#xA;@foo:&#xA;  echo $a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dotenv Settings&lt;/h4&gt; &#xA;&lt;p&gt;If any of &lt;code&gt;dotenv-load&lt;/code&gt;, &lt;code&gt;dotenv-filename&lt;/code&gt;, &lt;code&gt;dotenv-path&lt;/code&gt;, or &lt;code&gt;dotenv-required&lt;/code&gt; are set, &lt;code&gt;just&lt;/code&gt; will try to load environment variables from a file.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;dotenv-path&lt;/code&gt; is set, &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, which may be absolute, or relative to the working directory.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is set &lt;code&gt;just&lt;/code&gt; will look for a file at the given path, relative to the working directory and each of its ancestors.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;dotenv-filename&lt;/code&gt; is not set, but &lt;code&gt;dotenv-load&lt;/code&gt; or &lt;code&gt;dotenv-required&lt;/code&gt; are set, just will look for a file named &lt;code&gt;.env&lt;/code&gt;, relative to the working directory and each of its ancestors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dotenv-filename&lt;/code&gt; and &lt;code&gt;dotenv-path&lt;/code&gt; and similar, but &lt;code&gt;dotenv-path&lt;/code&gt; is only checked relative to the working directory, whereas &lt;code&gt;dotenv-filename&lt;/code&gt; is checked relative to the working directory and each of its ancestors.&lt;/p&gt; &#xA;&lt;p&gt;It is not an error if an environment file is not found, unless &lt;code&gt;dotenv-required&lt;/code&gt; is set.&lt;/p&gt; &#xA;&lt;p&gt;The loaded variables are environment variables, not &lt;code&gt;just&lt;/code&gt; variables, and so must be accessed using &lt;code&gt;$VARIABLE_NAME&lt;/code&gt; in recipes and backticks.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your &lt;code&gt;.env&lt;/code&gt; file contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# a comment, will be ignored&#xA;DATABASE_ADDRESS=localhost:6379&#xA;SERVER_PORT=1337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And your &lt;code&gt;justfile&lt;/code&gt; contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set dotenv-load&#xA;&#xA;serve:&#xA;  @echo &#34;Starting server with database $DATABASE_ADDRESS on port $SERVER_PORT…&#34;&#xA;  ./server --database $DATABASE_ADDRESS --port $SERVER_PORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just serve&lt;/code&gt; will output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just serve&#xA;Starting server with database localhost:6379 on port 1337…&#xA;./server --database $DATABASE_ADDRESS --port $SERVER_PORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Export&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; setting causes all &lt;code&gt;just&lt;/code&gt; variables to be exported as environment variables. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set export&#xA;&#xA;a := &#34;hello&#34;&#xA;&#xA;@foo b:&#xA;  echo $a&#xA;  echo $b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo goodbye&#xA;hello&#xA;goodbye&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Positional Arguments&lt;/h4&gt; &#xA;&lt;p&gt;If &lt;code&gt;positional-arguments&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, recipe arguments will be passed as positional arguments to commands. For linewise recipes, argument &lt;code&gt;$0&lt;/code&gt; will be the name of the recipe.&lt;/p&gt; &#xA;&lt;p&gt;For example, running this recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set positional-arguments&#xA;&#xA;@foo bar:&#xA;  echo $0&#xA;  echo $1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will produce the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo hello&#xA;foo&#xA;hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using an &lt;code&gt;sh&lt;/code&gt;-compatible shell, such as &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt; expands to the positional arguments given to the recipe, starting from one. When used within double quotes as &lt;code&gt;&#34;$@&#34;&lt;/code&gt;, arguments including whitespace will be passed on as if they were double-quoted. That is, &lt;code&gt;&#34;$@&#34;&lt;/code&gt; is equivalent to &lt;code&gt;&#34;$1&#34; &#34;$2&#34;&lt;/code&gt;… When there are no positional parameters, &lt;code&gt;&#34;$@&#34;&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; expand to nothing (i.e., they are removed).&lt;/p&gt; &#xA;&lt;p&gt;This example recipe will print arguments one by one on separate lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set positional-arguments&#xA;&#xA;@test *args=&#39;&#39;:&#xA;  bash -c &#39;while (( &#34;$#&#34; )); do echo - $1; shift; done&#39; -- &#34;$@&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running it with &lt;em&gt;two&lt;/em&gt; arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test foo &#34;bar baz&#34;&#xA;- foo&#xA;- bar baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Positional arguments may also be turned on on a per-recipe basis with the &lt;code&gt;[positional-arguments]&lt;/code&gt; attribute&lt;sup&gt;1.29.0&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[positional-arguments]&#xA;@foo bar:&#xA;  echo $0&#xA;  echo $1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that PowerShell does not handle positional arguments in the same way as other shells, so turning on positional arguments will likely break recipes that use PowerShell.&lt;/p&gt; &#xA;&lt;h4&gt;Shell&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;shell&lt;/code&gt; setting controls the command used to invoke recipe lines and backticks. Shebang recipes are unaffected. The default shell is &lt;code&gt;sh -cu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# use python3 to execute recipe lines and backticks&#xA;set shell := [&#34;python3&#34;, &#34;-c&#34;]&#xA;&#xA;# use print to capture result of evaluation&#xA;foos := `print(&#34;foo&#34; * 4)`&#xA;&#xA;foo:&#xA;  print(&#34;Snake snake snake snake.&#34;)&#xA;  print(&#34;{{foos}}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; passes the command to be executed as an argument. Many shells will need an additional flag, often &lt;code&gt;-c&lt;/code&gt;, to make them evaluate the first argument.&lt;/p&gt; &#xA;&lt;h5&gt;Windows Shell&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use a different shell on Windows, use &lt;code&gt;windows-shell&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set windows-shell := [&#34;powershell.exe&#34;, &#34;-NoLogo&#34;, &#34;-Command&#34;]&#xA;&#xA;hello:&#xA;  Write-Host &#34;Hello, world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/casey/just/raw/master/examples/powershell.just&#34;&gt;powershell.just&lt;/a&gt; for a justfile that uses PowerShell on all platforms.&lt;/p&gt; &#xA;&lt;h5&gt;Windows PowerShell&lt;/h5&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; uses the legacy &lt;code&gt;powershell.exe&lt;/code&gt; binary, and is no longer recommended. See the &lt;code&gt;windows-shell&lt;/code&gt; setting above for a more flexible way to control which shell is used on Windows.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; uses &lt;code&gt;sh&lt;/code&gt; on Windows by default. To use &lt;code&gt;powershell.exe&lt;/code&gt; instead, set &lt;code&gt;windows-powershell&lt;/code&gt; to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set windows-powershell := true&#xA;&#xA;hello:&#xA;  Write-Host &#34;Hello, world!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Python 3&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#34;python3&#34;, &#34;-c&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Bash&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#34;bash&#34;, &#34;-uc&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Z Shell&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#34;zsh&#34;, &#34;-uc&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fish&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#34;fish&#34;, &#34;-c&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Nushell&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#34;nu&#34;, &#34;-c&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change the default table mode to &lt;code&gt;light&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set shell := [&#39;nu&#39;, &#39;-m&#39;, &#39;light&#39;, &#39;-c&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/nushell/nushell&#34;&gt;Nushell&lt;/a&gt; was written in Rust, and &lt;strong&gt;has cross-platform support for Windows / macOS and Linux&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation Comments&lt;/h3&gt; &#xA;&lt;p&gt;Comments immediately preceding a recipe will appear in &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# build stuff&#xA;build:&#xA;  ./bin/build&#xA;&#xA;# test stuff&#xA;test:&#xA;  ./bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;    build # build stuff&#xA;    test # test stuff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;[doc]&lt;/code&gt; attribute can be used to set or suppress a recipe&#39;s doc comment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# This comment won&#39;t appear&#xA;[doc(&#39;Build stuff&#39;)]&#xA;build:&#xA;  ./bin/build&#xA;&#xA;# This one won&#39;t either&#xA;[doc]&#xA;test:&#xA;  ./bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;    build # Build stuff&#xA;    test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Variables and Substitution&lt;/h3&gt; &#xA;&lt;p&gt;Variables, strings, concatenation, path joining, and substitution using &lt;code&gt;{{…}}&lt;/code&gt; are supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;tmpdir  := `mktemp -d`&#xA;version := &#34;0.2.7&#34;&#xA;tardir  := tmpdir / &#34;awesomesauce-&#34; + version&#xA;tarball := tardir + &#34;.tar.gz&#34;&#xA;&#xA;publish:&#xA;  rm -f {{tarball}}&#xA;  mkdir {{tardir}}&#xA;  cp README.md *.c {{tardir}}&#xA;  tar zcvf {{tarball}} {{tardir}}&#xA;  scp {{tarball}} me@server.com:release/&#xA;  rm -rf {{tarball}} {{tardir}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Joining Paths&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator can be used to join two strings with a slash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := &#34;a&#34; / &#34;b&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --evaluate foo&#xA;a/b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that a &lt;code&gt;/&lt;/code&gt; is added even if one is already present:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := &#34;a/&#34;&#xA;bar := foo / &#34;b&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --evaluate bar&#xA;a//b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Absolute paths can also be constructed&lt;sup&gt;1.5.0&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := / &#34;b&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --evaluate foo&#xA;/b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; operator uses the &lt;code&gt;/&lt;/code&gt; character, even on Windows. Thus, using the &lt;code&gt;/&lt;/code&gt; operator should be avoided with paths that use universal naming convention (UNC), i.e., those that start with &lt;code&gt;\?&lt;/code&gt;, since forward slashes are not supported with UNC paths.&lt;/p&gt; &#xA;&lt;h4&gt;Escaping &lt;code&gt;{{&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To write a recipe containing &lt;code&gt;{{&lt;/code&gt;, use &lt;code&gt;{{{{&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;braces:&#xA;  echo &#39;I {{{{LOVE}} curly braces!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(An unmatched &lt;code&gt;}}&lt;/code&gt; is ignored, so it doesn&#39;t need to be escaped.)&lt;/p&gt; &#xA;&lt;p&gt;Another option is to put all the text you&#39;d like to escape inside of an interpolation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;braces:&#xA;  echo &#39;{{&#39;I {{LOVE}} curly braces!&#39;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet another option is to use &lt;code&gt;{{ &#34;{{&#34; }}&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;braces:&#xA;  echo &#39;I {{ &#34;{{&#34; }}LOVE}} curly braces!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Strings&lt;/h3&gt; &#xA;&lt;p&gt;Double-quoted strings support escape sequences:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;string-with-tab             := &#34;\t&#34;&#xA;string-with-newline         := &#34;\n&#34;&#xA;string-with-carriage-return := &#34;\r&#34;&#xA;string-with-double-quote    := &#34;\&#34;&#34;&#xA;string-with-slash           := &#34;\\&#34;&#xA;string-with-no-newline      := &#34;\&#xA;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --evaluate&#xA;&#34;tring-with-carriage-return := &#34;&#xA;string-with-double-quote    := &#34;&#34;&#34;&#xA;string-with-newline         := &#34;&#xA;&#34;&#xA;string-with-no-newline      := &#34;&#34;&#xA;string-with-slash           := &#34;\&#34;&#xA;string-with-tab             := &#34;     &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Strings may contain line breaks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;single := &#39;&#xA;hello&#xA;&#39;&#xA;&#xA;double := &#34;&#xA;goodbye&#xA;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Single-quoted strings do not recognize escape sequences:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;escapes := &#39;\t\n\r\&#34;\\&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --evaluate&#xA;escapes := &#34;\t\n\r\&#34;\\&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Indented versions of both single- and double-quoted strings, delimited by triple single- or double-quotes, are supported. Indented string lines are stripped of a leading line break, and leading whitespace common to all non-blank lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# this string will evaluate to `foo\nbar\n`&#xA;x := &#39;&#39;&#39;&#xA;  foo&#xA;  bar&#xA;&#39;&#39;&#39;&#xA;&#xA;# this string will evaluate to `abc\n  wuv\nxyz\n`&#xA;y := &#34;&#34;&#34;&#xA;  abc&#xA;    wuv&#xA;  xyz&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to unindented strings, indented double-quoted strings process escape sequences, and indented single-quoted strings ignore escape sequences. Escape sequence processing takes place after unindentation. The unindentation algorithm does not take escape-sequence produced whitespace or newlines into account.&lt;/p&gt; &#xA;&lt;p&gt;Strings prefixed with &lt;code&gt;x&lt;/code&gt; are shell expanded&lt;sup&gt;1.27.0&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-justfile&#34;&gt;foobar := x&#39;~/$FOO/${BAR}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Replacement&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$VAR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;${VAR:-DEFAULT}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;value of environment variable &lt;code&gt;VAR&lt;/code&gt;, or &lt;code&gt;DEFAULT&lt;/code&gt; if &lt;code&gt;VAR&lt;/code&gt; is not set&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Leading &lt;code&gt;~&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;path to current user&#39;s home directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Leading &lt;code&gt;~USER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;path to &lt;code&gt;USER&lt;/code&gt;&#39;s home directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This expansion is performed at compile time, so variables from &lt;code&gt;.env&lt;/code&gt; files and exported &lt;code&gt;just&lt;/code&gt; variables cannot be used. However, this allows shell expanded strings to be used in places like settings and import paths, which cannot depend on &lt;code&gt;just&lt;/code&gt; variables and &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h3&gt;Ignoring Errors&lt;/h3&gt; &#xA;&lt;p&gt;Normally, if a command returns a non-zero exit status, execution will stop. To continue execution after a command, even if it fails, prefix the command with &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  -cat foo&#xA;  echo &#39;Done!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo&#xA;cat foo&#xA;cat: foo: No such file or directory&#xA;echo &#39;Done!&#39;&#xA;Done!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; provides a few built-in functions that might be useful when writing recipes.&lt;/p&gt; &#xA;&lt;p&gt;All functions ending in &lt;code&gt;_directory&lt;/code&gt; can be abbreviated to &lt;code&gt;_dir&lt;/code&gt;. So &lt;code&gt;home_directory()&lt;/code&gt; can also be written as &lt;code&gt;home_dir()&lt;/code&gt;. In addition, &lt;code&gt;invocation_directory_native()&lt;/code&gt; can be abbreviated to &lt;code&gt;invocation_dir_native()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;System Information&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arch()&lt;/code&gt; — Instruction set architecture. Possible values are: &lt;code&gt;&#34;aarch64&#34;&lt;/code&gt;, &lt;code&gt;&#34;arm&#34;&lt;/code&gt;, &lt;code&gt;&#34;asmjs&#34;&lt;/code&gt;, &lt;code&gt;&#34;hexagon&#34;&lt;/code&gt;, &lt;code&gt;&#34;mips&#34;&lt;/code&gt;, &lt;code&gt;&#34;msp430&#34;&lt;/code&gt;, &lt;code&gt;&#34;powerpc&#34;&lt;/code&gt;, &lt;code&gt;&#34;powerpc64&#34;&lt;/code&gt;, &lt;code&gt;&#34;s390x&#34;&lt;/code&gt;, &lt;code&gt;&#34;sparc&#34;&lt;/code&gt;, &lt;code&gt;&#34;wasm32&#34;&lt;/code&gt;, &lt;code&gt;&#34;x86&#34;&lt;/code&gt;, &lt;code&gt;&#34;x86_64&#34;&lt;/code&gt;, and &lt;code&gt;&#34;xcore&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;num_cpus()&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; - Number of logical CPUs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;os()&lt;/code&gt; — Operating system. Possible values are: &lt;code&gt;&#34;android&#34;&lt;/code&gt;, &lt;code&gt;&#34;bitrig&#34;&lt;/code&gt;, &lt;code&gt;&#34;dragonfly&#34;&lt;/code&gt;, &lt;code&gt;&#34;emscripten&#34;&lt;/code&gt;, &lt;code&gt;&#34;freebsd&#34;&lt;/code&gt;, &lt;code&gt;&#34;haiku&#34;&lt;/code&gt;, &lt;code&gt;&#34;ios&#34;&lt;/code&gt;, &lt;code&gt;&#34;linux&#34;&lt;/code&gt;, &lt;code&gt;&#34;macos&#34;&lt;/code&gt;, &lt;code&gt;&#34;netbsd&#34;&lt;/code&gt;, &lt;code&gt;&#34;openbsd&#34;&lt;/code&gt;, &lt;code&gt;&#34;solaris&#34;&lt;/code&gt;, and &lt;code&gt;&#34;windows&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;os_family()&lt;/code&gt; — Operating system family; possible values are: &lt;code&gt;&#34;unix&#34;&lt;/code&gt; and &lt;code&gt;&#34;windows&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;system-info:&#xA;  @echo &#34;This is an {{arch()}} machine&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just system-info&#xA;This is an x86_64 machine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;os_family()&lt;/code&gt; function can be used to create cross-platform &lt;code&gt;justfile&lt;/code&gt;s that work on various operating systems. For an example, see &lt;a href=&#34;https://github.com/casey/just/raw/master/examples/cross-platform.just&#34;&gt;cross-platform.just&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;External Commands&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;shell(command, args...)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; returns the standard output of shell script &lt;code&gt;command&lt;/code&gt; with zero or more positional arguments &lt;code&gt;args&lt;/code&gt;. The shell used to interpret &lt;code&gt;command&lt;/code&gt; is the same shell that is used to evaluate recipe lines, and can be changed with &lt;code&gt;set shell := […]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;command&lt;/code&gt; is passed as the first argument, so if the command is &lt;code&gt;&#39;echo $@&#39;&lt;/code&gt;, the full command line, with the default shell command &lt;code&gt;shell -cu&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; &lt;code&gt;&#39;foo&#39;&lt;/code&gt; and &lt;code&gt;&#39;bar&#39;&lt;/code&gt; will be:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#39;shell&#39; &#39;-cu&#39; &#39;echo $@&#39; &#39;echo $@&#39; &#39;foo&#39; &#39;bar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is so that &lt;code&gt;$@&lt;/code&gt; works as expected, and &lt;code&gt;$1&lt;/code&gt; refers to the first argument. &lt;code&gt;$@&lt;/code&gt; does not include the first positional argument, which is expected to be the name of the program being run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# arguments can be variables or expressions&#xA;file := &#39;/sys/class/power_supply/BAT0/status&#39;&#xA;bat0stat := shell(&#39;cat $1&#39;, file)&#xA;&#xA;# commands can be variables or expressions&#xA;command := &#39;wc -l&#39;&#xA;output := shell(command + &#39; &#34;$1&#34;&#39;, &#39;main.c&#39;)&#xA;&#xA;# arguments referenced by the shell command must be used&#xA;empty := shell(&#39;echo&#39;, &#39;foo&#39;)&#xA;full := shell(&#39;echo $1&#39;, &#39;foo&#39;)&#xA;error := shell(&#39;echo $1&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# Using python as the shell. Since `python -c` sets `sys.argv[0]` to `&#39;-c&#39;`,&#xA;# the first &#34;real&#34; positional argument will be `sys.argv[2]`.&#xA;set shell := [&#34;python3&#34;, &#34;-c&#34;]&#xA;olleh := shell(&#39;import sys; print(sys.argv[2][::-1])&#39;, &#39;hello&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment Variables&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;env_var(key)&lt;/code&gt; — Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, aborting if it is not present.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;home_dir := env_var(&#39;HOME&#39;)&#xA;&#xA;test:&#xA;  echo &#34;{{home_dir}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just&#xA;/home/user1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;env_var_or_default(key, default)&lt;/code&gt; — Retrieves the environment variable with name &lt;code&gt;key&lt;/code&gt;, returning &lt;code&gt;default&lt;/code&gt; if it is not present.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env(key)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; — Alias for &lt;code&gt;env_var(key)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env(key, default)&lt;/code&gt;&lt;sup&gt;1.15.0&lt;/sup&gt; — Alias for &lt;code&gt;env_var_or_default(key, default)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Invocation Information&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is_dependency()&lt;/code&gt; - Returns the string &lt;code&gt;true&lt;/code&gt; if the current recipe is being run as a dependency of another recipe, rather than being run directly, otherwise returns the string &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Invocation Directory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;invocation_directory()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir&#39;d) prior to executing commands. On Windows, &lt;code&gt;invocation_directory()&lt;/code&gt; uses &lt;code&gt;cygpath&lt;/code&gt; to convert the invocation directory to a Cygwin-compatible &lt;code&gt;/&lt;/code&gt;-separated path. Use &lt;code&gt;invocation_directory_native()&lt;/code&gt; to return the verbatim invocation directory on all platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to call &lt;code&gt;rustfmt&lt;/code&gt; on files just under the &#34;current directory&#34; (from the user/invoker&#39;s perspective), use the following rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;rustfmt:&#xA;  find {{invocation_directory()}} -name \*.rs -exec rustfmt {} \;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if your command needs to be run from the current directory, you could use (e.g.):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;build:&#xA;  cd {{invocation_directory()}}; ./some_script_that_needs_to_be_run_from_here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;invocation_directory_native()&lt;/code&gt; - Retrieves the absolute path to the current directory when &lt;code&gt;just&lt;/code&gt; was invoked, before &lt;code&gt;just&lt;/code&gt; changed it (chdir&#39;d) prior to executing commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Justfile and Justfile Directory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; - Retrieves the path of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;justfile_directory()&lt;/code&gt; - Retrieves the path of the parent directory of the current &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to run a command relative to the location of the current &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;script:&#xA;  {{justfile_directory()}}/scripts/some_script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source and Source Directory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the current source file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;source_directory()&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Retrieves the path of the parent directory of the current source file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;source_file()&lt;/code&gt; and &lt;code&gt;source_directory()&lt;/code&gt; behave the same as &lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; in the root &lt;code&gt;justfile&lt;/code&gt;, but will return the path and directory, respectively, of the current &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;mod&lt;/code&gt; source file when called from within an import or submodule.&lt;/p&gt; &#xA;&lt;h4&gt;Just Executable&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;just_executable()&lt;/code&gt; - Absolute path to the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;executable:&#xA;  @echo The executable is at: {{just_executable()}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just&#xA;The executable is at: /bin/just&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Just Process ID&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;just_pid()&lt;/code&gt; - Process ID of the &lt;code&gt;just&lt;/code&gt; executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;pid:&#xA;  @echo The process ID is: {{ just_pid() }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just&#xA;The process ID is: 420&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;String Manipulation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;append(suffix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Append &lt;code&gt;suffix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;append(&#39;/src&#39;, &#39;foo bar baz&#39;)&lt;/code&gt; → &lt;code&gt;&#39;foo/src bar/src baz/src&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prepend(prefix, s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; Prepend &lt;code&gt;prefix&lt;/code&gt; to whitespace-separated strings in &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;prepend(&#39;src/&#39;, &#39;foo bar baz&#39;)&lt;/code&gt; → &lt;code&gt;&#39;src/foo src/bar src/baz&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encode_uri_component(s)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Percent-encode characters in &lt;code&gt;s&lt;/code&gt; except &lt;code&gt;[A-Za-z0-9_.!~*&#39;()-]&lt;/code&gt;, matching the behavior of the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&#34;&gt;JavaScript &lt;code&gt;encodeURIComponent&lt;/code&gt; function&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quote(s)&lt;/code&gt; - Replace all single quotes with &lt;code&gt;&#39;\&#39;&#39;&lt;/code&gt; and prepend and append single quotes to &lt;code&gt;s&lt;/code&gt;. This is sufficient to escape special characters for many shells, including most Bourne shell descendants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace(s, from, to)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;from&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace_regex(s, regex, replacement)&lt;/code&gt; - Replace all occurrences of &lt;code&gt;regex&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;replacement&lt;/code&gt;. Regular expressions are provided by the &lt;a href=&#34;https://docs.rs/regex/latest/regex/&#34;&gt;Rust &lt;code&gt;regex&lt;/code&gt; crate&lt;/a&gt;. See the &lt;a href=&#34;https://docs.rs/regex/latest/regex/#syntax&#34;&gt;syntax documentation&lt;/a&gt; for usage examples. Capture groups are supported. The &lt;code&gt;replacement&lt;/code&gt; string uses &lt;a href=&#34;https://docs.rs/regex/latest/regex/struct.Regex.html#replacement-string-syntax&#34;&gt;Replacement string syntax&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim(s)&lt;/code&gt; - Remove leading and trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_end(s)&lt;/code&gt; - Remove trailing whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_end_match(s, pat)&lt;/code&gt; - Remove suffix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;pat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_end_matches(s, pat)&lt;/code&gt; - Repeatedly remove suffixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;pat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_start(s)&lt;/code&gt; - Remove leading whitespace from &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_start_match(s, pat)&lt;/code&gt; - Remove prefix of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;pat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trim_start_matches(s, pat)&lt;/code&gt; - Repeatedly remove prefixes of &lt;code&gt;s&lt;/code&gt; matching &lt;code&gt;pat&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Case Conversion&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;capitalize(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert first character of &lt;code&gt;s&lt;/code&gt; to uppercase and the rest to lowercase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;kebab-case&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lowercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;lowerCamelCase&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lowercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to lowercase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shoutykebabcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY-KEBAB-CASE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shoutysnakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;SHOUTY_SNAKE_CASE&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snakecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;snake_case&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;titlecase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;Title Case&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uppercamelcase(s)&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; - Convert &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;UpperCamelCase&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uppercase(s)&lt;/code&gt; - Convert &lt;code&gt;s&lt;/code&gt; to uppercase.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Path Manipulation&lt;/h4&gt; &#xA;&lt;h5&gt;Fallible&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;absolute_path(path)&lt;/code&gt; - Absolute path to relative &lt;code&gt;path&lt;/code&gt; in the working directory. &lt;code&gt;absolute_path(&#34;./bar.txt&#34;)&lt;/code&gt; in directory &lt;code&gt;/foo&lt;/code&gt; is &lt;code&gt;/foo/bar.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;canonicalize(path)&lt;/code&gt;&lt;sup&gt;1.24.0&lt;/sup&gt; - Canonicalize &lt;code&gt;path&lt;/code&gt; by resolving symlinks and removing &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, and extra &lt;code&gt;/&lt;/code&gt;s where possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extension(path)&lt;/code&gt; - Extension of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;extension(&#34;/foo/bar.txt&#34;)&lt;/code&gt; is &lt;code&gt;txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file_name(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; with any leading directory components removed. &lt;code&gt;file_name(&#34;/foo/bar.txt&#34;)&lt;/code&gt; is &lt;code&gt;bar.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file_stem(path)&lt;/code&gt; - File name of &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;file_stem(&#34;/foo/bar.txt&#34;)&lt;/code&gt; is &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parent_directory(path)&lt;/code&gt; - Parent directory of &lt;code&gt;path&lt;/code&gt;. &lt;code&gt;parent_directory(&#34;/foo/bar.txt&#34;)&lt;/code&gt; is &lt;code&gt;/foo&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;without_extension(path)&lt;/code&gt; - &lt;code&gt;path&lt;/code&gt; without extension. &lt;code&gt;without_extension(&#34;/foo/bar.txt&#34;)&lt;/code&gt; is &lt;code&gt;/foo/bar&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These functions can fail, for example if a path does not have an extension, which will halt execution.&lt;/p&gt; &#xA;&lt;h5&gt;Infallible&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clean(path)&lt;/code&gt; - Simplify &lt;code&gt;path&lt;/code&gt; by removing extra path separators, intermediate &lt;code&gt;.&lt;/code&gt; components, and &lt;code&gt;..&lt;/code&gt; where possible. &lt;code&gt;clean(&#34;foo//bar&#34;)&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;, &lt;code&gt;clean(&#34;foo/..&#34;)&lt;/code&gt; is &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;clean(&#34;foo/./bar&#34;)&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;join(a, b…)&lt;/code&gt; - &lt;em&gt;This function uses &lt;code&gt;/&lt;/code&gt; on Unix and &lt;code&gt;\&lt;/code&gt; on Windows, which can be lead to unwanted behavior. The &lt;code&gt;/&lt;/code&gt; operator, e.g., &lt;code&gt;a / b&lt;/code&gt;, which always uses &lt;code&gt;/&lt;/code&gt;, should be considered as a replacement unless &lt;code&gt;\&lt;/code&gt;s are specifically desired on Windows.&lt;/em&gt; Join path &lt;code&gt;a&lt;/code&gt; with path &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;join(&#34;foo/bar&#34;, &#34;baz&#34;)&lt;/code&gt; is &lt;code&gt;foo/bar/baz&lt;/code&gt;. Accepts two or more arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Filesystem Access&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;path_exists(path)&lt;/code&gt; - Returns &lt;code&gt;true&lt;/code&gt; if the path points at an existing entity and &lt;code&gt;false&lt;/code&gt; otherwise. Traverses symbolic links, and returns &lt;code&gt;false&lt;/code&gt; if the path is inaccessible or points to a broken symlink.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Error Reporting&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;error(message)&lt;/code&gt; - Abort execution and report error &lt;code&gt;message&lt;/code&gt; to user.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;UUID and Hash Generation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blake3(string)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href=&#34;https://github.com/BLAKE3-team/BLAKE3/&#34;&gt;BLAKE3&lt;/a&gt; hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blake3_file(path)&lt;/code&gt;&lt;sup&gt;1.25.0&lt;/sup&gt; - Return &lt;a href=&#34;https://github.com/BLAKE3-team/BLAKE3/&#34;&gt;BLAKE3&lt;/a&gt; hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sha256(string)&lt;/code&gt; - Return the SHA-256 hash of &lt;code&gt;string&lt;/code&gt; as hexadecimal string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sha256_file(path)&lt;/code&gt; - Return SHA-256 hash of file at &lt;code&gt;path&lt;/code&gt; as hexadecimal string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uuid()&lt;/code&gt; - Generate a random version 4 UUID.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Random&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;choose(n, alphabet)&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt; - Generate a string of &lt;code&gt;n&lt;/code&gt; randomly selected characters from &lt;code&gt;alphabet&lt;/code&gt;, which may not contain repeated characters. For example, &lt;code&gt;choose(&#39;64&#39;, HEX)&lt;/code&gt; will generate a random 64-character lowercase hex string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Datetime&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;datetime(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return local time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;datetime_utc(format)&lt;/code&gt;&lt;sup&gt;1.30.0&lt;/sup&gt; - Return UTC time with &lt;code&gt;format&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The arguments to &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;datetime_utc&lt;/code&gt; are &lt;code&gt;strftime&lt;/code&gt;-style format strings, see the &lt;a href=&#34;https://docs.rs/chrono/latest/chrono/format/strftime/index.html&#34;&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;Semantic Versions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;semver_matches(version, requirement)&lt;/code&gt;&lt;sup&gt;1.16.0&lt;/sup&gt; - Check whether a &lt;a href=&#34;https://semver.org&#34;&gt;semantic &lt;code&gt;version&lt;/code&gt;&lt;/a&gt;, e.g., &lt;code&gt;&#34;0.1.0&#34;&lt;/code&gt; matches a &lt;code&gt;requirement&lt;/code&gt;, e.g., &lt;code&gt;&#34;&amp;gt;=0.1.0&#34;&lt;/code&gt;, returning &lt;code&gt;&#34;true&#34;&lt;/code&gt; if so and &lt;code&gt;&#34;false&#34;&lt;/code&gt; otherwise.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;XDG Directories&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h5&gt; &#xA;&lt;p&gt;These functions return paths to user-specific directories for things like configuration, data, caches, executables, and the user&#39;s home directory. These functions follow the &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt;, and are implemented with the &lt;a href=&#34;https://docs.rs/dirs/latest/dirs/index.html&#34;&gt;&lt;code&gt;dirs&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cache_directory()&lt;/code&gt; - The user-specific cache directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config_directory()&lt;/code&gt; - The user-specific configuration directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config_local_directory()&lt;/code&gt; - The local user-specific configuration directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data_directory()&lt;/code&gt; - The user-specific data directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data_local_directory()&lt;/code&gt; - The local user-specific data directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;executable_directory()&lt;/code&gt; - The user-specific executable directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;home_directory()&lt;/code&gt; - The user&#39;s home directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;A number of constants are predefined:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HEX&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;0123456789abcdef&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HEXLOWER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;0123456789abcdef&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HEXUPPER&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;0123456789ABCDEF&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;@foo:&#xA;  echo {{HEX}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo&#xA;0123456789abcdef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Recipes, &lt;code&gt;mod&lt;/code&gt; statements, and aliases may be annotated with attributes that change their behavior.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[confirm]&lt;/code&gt;&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Require confirmation prior to executing recipe.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[confirm(&#39;PROMPT&#39;)]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Require confirmation prior to executing recipe with a custom prompt.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[doc(&#39;DOC&#39;)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;module, recipe&lt;/td&gt; &#xA;   &lt;td&gt;Set recipe or module&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#documentation-comments&#34;&gt;documentation comment&lt;/a&gt; to &lt;code&gt;DOC&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[extension(&#39;EXT&#39;)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Set shebang recipe script&#39;s file extension to &lt;code&gt;EXT&lt;/code&gt;. &lt;code&gt;EXT&lt;/code&gt; should include a period if one is desired.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[group(&#39;NAME&#39;)]&lt;/code&gt;&lt;sup&gt;1.27.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;module, recipe&lt;/td&gt; &#xA;   &lt;td&gt;Put recipe or module in in &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#groups&#34;&gt;group&lt;/a&gt; &lt;code&gt;NAME&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[linux]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Enable recipe on Linux.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[macos]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Enable recipe on MacOS.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[no-cd]&lt;/code&gt;&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t change directory before executing recipe.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t print an error message if recipe fails.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[no-quiet]&lt;/code&gt;&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Override globally quiet recipes and always echo out the recipe.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[positional-arguments]&lt;/code&gt;&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Turn on &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#positional-arguments&#34;&gt;positional arguments&lt;/a&gt; for this recipe.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[private]&lt;/code&gt;&lt;sup&gt;1.10.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alias, recipe&lt;/td&gt; &#xA;   &lt;td&gt;Make recipe or alias private. See &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#private-recipes&#34;&gt;Private Recipes&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[script]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Execute recipe as script. See &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#script-recipes&#34;&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Execute recipe as a script interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#script-recipes&#34;&gt;script recipes&lt;/a&gt; for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[unix]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Enable recipe on Unixes. (Includes MacOS).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[windows]&lt;/code&gt;&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recipe&lt;/td&gt; &#xA;   &lt;td&gt;Enable recipe on Windows.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A recipe can have multiple attributes, either on multiple lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[no-cd]&#xA;[private]&#xA;foo:&#xA;    echo &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or separated by commas on a single line&lt;sup&gt;1.14.0&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[no-cd, private]&#xA;foo:&#xA;    echo &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enabling and Disabling Recipes&lt;sup&gt;1.8.0&lt;/sup&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;[linux]&lt;/code&gt;, &lt;code&gt;[macos]&lt;/code&gt;, &lt;code&gt;[unix]&lt;/code&gt;, and &lt;code&gt;[windows]&lt;/code&gt; attributes are configuration attributes. By default, recipes are always enabled. A recipe with one or more configuration attributes will only be enabled when one or more of those configurations is active.&lt;/p&gt; &#xA;&lt;p&gt;This can be used to write &lt;code&gt;justfile&lt;/code&gt;s that behave differently depending on which operating system they run on. The &lt;code&gt;run&lt;/code&gt; recipe in this &lt;code&gt;justfile&lt;/code&gt; will compile and run &lt;code&gt;main.c&lt;/code&gt;, using a different C compiler and using the correct output binary name for that compiler depending on the operating system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[unix]&#xA;run:&#xA;  cc main.c&#xA;  ./a.out&#xA;&#xA;[windows]&#xA;run:&#xA;  cl main.c&#xA;  main.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disabling Changing Directory&lt;sup&gt;1.9.0&lt;/sup&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes recipes with the current directory set to the directory that contains the &lt;code&gt;justfile&lt;/code&gt;. This can be disabled using the &lt;code&gt;[no-cd]&lt;/code&gt; attribute. This can be used to create recipes which use paths relative to the invocation directory, or which operate on the current directory.&lt;/p&gt; &#xA;&lt;p&gt;For example, this &lt;code&gt;commit&lt;/code&gt; recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[no-cd]&#xA;commit file:&#xA;  git add {{file}}&#xA;  git commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can be used with paths that are relative to the current directory, because &lt;code&gt;[no-cd]&lt;/code&gt; prevents &lt;code&gt;just&lt;/code&gt; from changing the current directory when executing &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Requiring Confirmation for Recipes&lt;sup&gt;1.17.0&lt;/sup&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally executes all recipes unless there is an error. The &lt;code&gt;[confirm]&lt;/code&gt; attribute allows recipes require confirmation in the terminal prior to running. This can be overridden by passing &lt;code&gt;--yes&lt;/code&gt; to &lt;code&gt;just&lt;/code&gt;, which will automatically confirm any recipes marked by this attribute.&lt;/p&gt; &#xA;&lt;p&gt;Recipes dependent on a recipe that requires confirmation will not be run if the relied upon recipe is not confirmed, as well as recipes passed after any recipe that requires confirmation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[confirm]&#xA;delete-all:&#xA;  rm -rf *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Confirmation Prompt&lt;sup&gt;1.23.0&lt;/sup&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The default confirmation prompt can be overridden with &lt;code&gt;[confirm(PROMPT)]&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[confirm(&#34;Are you sure you want to delete everything?&#34;)]&#xA;delete-everything:&#xA;  rm -rf *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Groups&lt;/h3&gt; &#xA;&lt;p&gt;Recipes and modules may be annotated with a group name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[group(&#39;lint&#39;)]&#xA;js-lint:&#xA;    echo &#39;Running JS linter…&#39;&#xA;&#xA;[group(&#39;rust recipes&#39;)]&#xA;[group(&#39;lint&#39;)]&#xA;rust-lint:&#xA;    echo &#39;Running Rust linter…&#39;&#xA;&#xA;[group(&#39;lint&#39;)]&#xA;cpp-lint:&#xA;  echo &#39;Running C++ linter…&#39;&#xA;&#xA;# not in any group&#xA;email-everyone:&#xA;    echo &#39;Sending mass email…&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recipes are listed by group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --list&#xA;Available recipes:&#xA;    email-everyone # not in any group&#xA;&#xA;    [lint]&#xA;    cpp-lint&#xA;    js-lint&#xA;    rust-lint&#xA;&#xA;    [rust recipes]&#xA;    rust-lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just --list --unsorted&lt;/code&gt; prints recipes in their justfile order within each group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --list --unsorted&#xA;Available recipes:&#xA;    (no group)&#xA;    email-everyone # not in any group&#xA;&#xA;    [lint]&#xA;    js-lint&#xA;    rust-lint&#xA;    cpp-lint&#xA;&#xA;    [rust recipes]&#xA;    rust-lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Groups can be listed with &lt;code&gt;--groups&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --groups&#xA;Recipe groups:&#xA;  lint&#xA;  rust recipes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;just --groups --unsorted&lt;/code&gt; to print groups in their justfile order.&lt;/p&gt; &#xA;&lt;h3&gt;Command Evaluation Using Backticks&lt;/h3&gt; &#xA;&lt;p&gt;Backticks can be used to store the result of commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;localhost := `dumpinterfaces | cut -d: -f2 | sed &#39;s/\/.*//&#39; | sed &#39;s/ //g&#39;`&#xA;&#xA;serve:&#xA;  ./serve {{localhost}} 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Indented backticks, delimited by three backticks, are de-indented in the same manner as indented strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# This backtick evaluates the command `echo foo\necho bar\n`, which produces the value `foo\nbar\n`.&#xA;stuff := ```&#xA;    echo foo&#xA;    echo bar&#xA;  ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#strings&#34;&gt;Strings&lt;/a&gt; section for details on unindenting.&lt;/p&gt; &#xA;&lt;p&gt;Backticks may not start with &lt;code&gt;#!&lt;/code&gt;. This syntax is reserved for a future upgrade.&lt;/p&gt; &#xA;&lt;h3&gt;Conditional Expressions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; expressions evaluate different branches depending on if two expressions evaluate to the same value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := if &#34;2&#34; == &#34;2&#34; { &#34;Good!&#34; } else { &#34;1984&#34; }&#xA;&#xA;bar:&#xA;  @echo &#34;{{foo}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar&#xA;Good!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to test for inequality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := if &#34;hello&#34; != &#34;goodbye&#34; { &#34;xyz&#34; } else { &#34;abc&#34; }&#xA;&#xA;bar:&#xA;  @echo {{foo}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar&#xA;xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And match against regular expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := if &#34;hello&#34; =~ &#39;hel+o&#39; { &#34;match&#34; } else { &#34;mismatch&#34; }&#xA;&#xA;bar:&#xA;  @echo {{foo}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar&#xA;match&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regular expressions are provided by the &lt;a href=&#34;https://github.com/rust-lang/regex&#34;&gt;regex crate&lt;/a&gt;, whose syntax is documented on &lt;a href=&#34;https://docs.rs/regex/1.5.4/regex/#syntax&#34;&gt;docs.rs&lt;/a&gt;. Since regular expressions commonly use backslash escape sequences, consider using single-quoted string literals, which will pass slashes to the regex parser unmolested.&lt;/p&gt; &#xA;&lt;p&gt;Conditional expressions short-circuit, which means they only evaluate one of their branches. This can be used to make sure that backtick expressions don&#39;t run when they shouldn&#39;t.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := if env_var(&#34;RELEASE&#34;) == &#34;true&#34; { `get-something-from-release-database` } else { &#34;dummy-value&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Conditionals can be used inside of recipes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;bar foo:&#xA;  echo {{ if foo == &#34;bar&#34; { &#34;hello&#34; } else { &#34;goodbye&#34; } }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the space after the final &lt;code&gt;}&lt;/code&gt;! Without the space, the interpolation will be prematurely closed.&lt;/p&gt; &#xA;&lt;p&gt;Multiple conditionals can be chained:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := if &#34;hello&#34; == &#34;goodbye&#34; {&#xA;  &#34;xyz&#34;&#xA;} else if &#34;a&#34; == &#34;a&#34; {&#xA;  &#34;abc&#34;&#xA;} else {&#xA;  &#34;123&#34;&#xA;}&#xA;&#xA;bar:&#xA;  @echo {{foo}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar&#xA;abc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stopping execution with error&lt;/h3&gt; &#xA;&lt;p&gt;Execution can be halted with the &lt;code&gt;error&lt;/code&gt; function. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo := if &#34;hello&#34; == &#34;goodbye&#34; {&#xA;  &#34;xyz&#34;&#xA;} else if &#34;a&#34; == &#34;b&#34; {&#xA;  &#34;abc&#34;&#xA;} else {&#xA;  error(&#34;123&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which produce the following error when run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Call to function `error` failed: 123&#xA;   |&#xA;16 |   error(&#34;123&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Variables from the Command Line&lt;/h3&gt; &#xA;&lt;p&gt;Variables can be overridden from the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;os := &#34;linux&#34;&#xA;&#xA;test: build&#xA;  ./test --test {{os}}&#xA;&#xA;build:&#xA;  ./build {{os}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just&#xA;./build linux&#xA;./test --test linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any number of arguments of the form &lt;code&gt;NAME=VALUE&lt;/code&gt; can be passed before recipes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just os=plan9&#xA;./build plan9&#xA;./test --test plan9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use the &lt;code&gt;--set&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --set os bsd&#xA;./build bsd&#xA;./test --test bsd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting and Setting Environment Variables&lt;/h3&gt; &#xA;&lt;h4&gt;Exporting &lt;code&gt;just&lt;/code&gt; Variables&lt;/h4&gt; &#xA;&lt;p&gt;Assignments prefixed with the &lt;code&gt;export&lt;/code&gt; keyword will be exported to recipes as environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;export RUST_BACKTRACE := &#34;1&#34;&#xA;&#xA;test:&#xA;  # will print a stack trace if it crashes&#xA;  cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;test $RUST_BACKTRACE=&#34;1&#34;:&#xA;  # will print a stack trace if it crashes&#xA;  cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exported variables and parameters are not exported to backticks in the same scope.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;export WORLD := &#34;world&#34;&#xA;# This backtick will fail with &#34;WORLD: unbound variable&#34;&#xA;BAR := `echo hello $WORLD`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;# Running `just a foo` will fail with &#34;A: unbound variable&#34;&#xA;a $A $B=`echo $A`:&#xA;  echo $A $B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#export&#34;&gt;export&lt;/a&gt; is set, all &lt;code&gt;just&lt;/code&gt; variables are exported as environment variables.&lt;/p&gt; &#xA;&lt;h4&gt;Unexporting Environment Variables&lt;sup&gt;1.29.0&lt;/sup&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Environment variables can be unexported with the &lt;code&gt;unexport keyword&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;unexport FOO&#xA;&#xA;@foo:&#xA;  echo $FOO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export FOO=bar&#xA;$ just foo&#xA;sh: FOO: unbound variable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Getting Environment Variables from the environment&lt;/h4&gt; &#xA;&lt;p&gt;Environment variables from the environment are passed automatically to the recipes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;print_home_folder:&#xA;  echo &#34;HOME is: &#39;${HOME}&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just&#xA;HOME is &#39;/home/myuser&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting &lt;code&gt;just&lt;/code&gt; Variables from Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;Environment variables can be propagated to &lt;code&gt;just&lt;/code&gt; variables using the functions &lt;code&gt;env_var()&lt;/code&gt; and &lt;code&gt;env_var_or_default()&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/#environment-variables&#34;&gt;environment-variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Recipe Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Recipes may have parameters. Here recipe &lt;code&gt;build&lt;/code&gt; has a parameter called &lt;code&gt;target&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;build target:&#xA;  @echo &#39;Building {{target}}…&#39;&#xA;  cd {{target}} &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass arguments on the command line, put them after the recipe name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just build my-awesome-project&#xA;Building my-awesome-project…&#xA;cd my-awesome-project &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass arguments to a dependency, put the dependency in parentheses along with the arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;default: (build &#34;main&#34;)&#xA;&#xA;build target:&#xA;  @echo &#39;Building {{target}}…&#39;&#xA;  cd {{target}} &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variables can also be passed as arguments to dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;target := &#34;main&#34;&#xA;&#xA;_build version:&#xA;  @echo &#39;Building {{version}}…&#39;&#xA;  cd {{version}} &amp;amp;&amp;amp; make&#xA;&#xA;build: (_build target)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A command&#39;s arguments can be passed to dependency by putting the dependency in parentheses along with the arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;build target:&#xA;  @echo &#34;Building {{target}}…&#34;&#xA;&#xA;push target: (build target)&#xA;  @echo &#39;Pushing {{target}}…&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters may have default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;default := &#39;all&#39;&#xA;&#xA;test target tests=default:&#xA;  @echo &#39;Testing {{target}}:{{tests}}…&#39;&#xA;  ./test --tests {{tests}} {{target}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters with default values may be omitted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test server&#xA;Testing server:all…&#xA;./test --tests all server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or supplied:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test server unit&#xA;Testing server:unit…&#xA;./test --tests unit server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default values may be arbitrary expressions, but concatenations or path joins must be parenthesized:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;arch := &#34;wasm&#34;&#xA;&#xA;test triple=(arch + &#34;-unknown-unknown&#34;) input=(arch / &#34;input.dat&#34;):&#xA;  ./test {{triple}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last parameter of a recipe may be variadic, indicated with either a &lt;code&gt;+&lt;/code&gt; or a &lt;code&gt;*&lt;/code&gt; before the argument name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;backup +FILES:&#xA;  scp {{FILES}} me@server.com:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;+&lt;/code&gt; accept &lt;em&gt;one or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just backup FAQ.md GRAMMAR.md&#xA;scp FAQ.md GRAMMAR.md me@server.com:&#xA;FAQ.md                  100% 1831     1.8KB/s   00:00&#xA;GRAMMAR.md              100% 1666     1.6KB/s   00:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variadic parameters prefixed with &lt;code&gt;*&lt;/code&gt; accept &lt;em&gt;zero or more&lt;/em&gt; arguments and expand to a string containing those arguments separated by spaces, or an empty string if no arguments are present:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;commit MESSAGE *FLAGS:&#xA;  git commit {{FLAGS}} -m &#34;{{MESSAGE}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variadic parameters can be assigned default values. These are overridden by arguments passed on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;test +FLAGS=&#39;-q&#39;:&#xA;  cargo test {{FLAGS}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;{{…}}&lt;/code&gt; substitutions may need to be quoted if they contain spaces. For example, if you have the following recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;search QUERY:&#xA;  lynx https://www.google.com/?q={{QUERY}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just search &#34;cat toupee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; will run the command &lt;code&gt;lynx https://www.google.com/?q=cat toupee&lt;/code&gt;, which will get parsed by &lt;code&gt;sh&lt;/code&gt; as &lt;code&gt;lynx&lt;/code&gt;, &lt;code&gt;https://www.google.com/?q=cat&lt;/code&gt;, and &lt;code&gt;toupee&lt;/code&gt;, and not the intended &lt;code&gt;lynx&lt;/code&gt; and &lt;code&gt;https://www.google.com/?q=cat toupee&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can fix this by adding quotes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;search QUERY:&#xA;  lynx &#39;https://www.google.com/?q={{QUERY}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters prefixed with a &lt;code&gt;$&lt;/code&gt; will be exported as environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo $bar:&#xA;  echo $bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Dependencies run before recipes that depend on them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;a: b&#xA;  @echo A&#xA;&#xA;b:&#xA;  @echo B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just a&#xA;B&#xA;A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a given invocation of &lt;code&gt;just&lt;/code&gt;, a recipe with the same arguments will only run once, regardless of how many times it appears in the command-line invocation, or how many times it appears as a dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;a:&#xA;  @echo A&#xA;&#xA;b: a&#xA;  @echo B&#xA;&#xA;c: a&#xA;  @echo C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just a a a a a&#xA;A&#xA;$ just b c&#xA;A&#xA;B&#xA;C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple recipes may depend on a recipe that performs some kind of setup, and when those recipes run, that setup will only be performed once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;build:&#xA;  cc main.c&#xA;&#xA;test-foo: build&#xA;  ./a.out --test foo&#xA;&#xA;test-bar: build&#xA;  ./a.out --test bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just test-foo test-bar&#xA;cc main.c&#xA;./a.out --test foo&#xA;./a.out --test bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recipes in a given run are only skipped when they receive the same arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;build:&#xA;  cc main.c&#xA;&#xA;test TEST: build&#xA;  ./a.out --test {{TEST}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just test foo test bar&#xA;cc main.c&#xA;./a.out --test foo&#xA;./a.out --test bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Recipes at the End of a Recipe&lt;/h4&gt; &#xA;&lt;p&gt;Normal dependencies of a recipes always run before a recipe starts. That is to say, the dependee always runs before the depender. These dependencies are called &#34;prior dependencies&#34;.&lt;/p&gt; &#xA;&lt;p&gt;A recipe can also have subsequent dependencies, which run after the recipe and are introduced with an &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;a:&#xA;  echo &#39;A!&#39;&#xA;&#xA;b: a &amp;amp;&amp;amp; c d&#xA;  echo &#39;B!&#39;&#xA;&#xA;c:&#xA;  echo &#39;C!&#39;&#xA;&#xA;d:&#xA;  echo &#39;D!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just b&#xA;echo &#39;A!&#39;&#xA;A!&#xA;echo &#39;B!&#39;&#xA;B!&#xA;echo &#39;C!&#39;&#xA;C!&#xA;echo &#39;D!&#39;&#xA;D!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running Recipes in the Middle of a Recipe&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; doesn&#39;t support running recipes in the middle of another recipe, but you can call &lt;code&gt;just&lt;/code&gt; recursively in the middle of a recipe. Given the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;a:&#xA;  echo &#39;A!&#39;&#xA;&#xA;b: a&#xA;  echo &#39;B start!&#39;&#xA;  just c&#xA;  echo &#39;B end!&#39;&#xA;&#xA;c:&#xA;  echo &#39;C!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…running &lt;em&gt;b&lt;/em&gt; prints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just b&#xA;echo &#39;A!&#39;&#xA;A!&#xA;echo &#39;B start!&#39;&#xA;B start!&#xA;echo &#39;C!&#39;&#xA;C!&#xA;echo &#39;B end!&#39;&#xA;B end!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This has limitations, since recipe &lt;code&gt;c&lt;/code&gt; is run with an entirely new invocation of &lt;code&gt;just&lt;/code&gt;: Assignments will be recalculated, dependencies might run twice, and command line arguments will not be propagated to the child &lt;code&gt;just&lt;/code&gt; process.&lt;/p&gt; &#xA;&lt;h3&gt;Shebang Recipes&lt;/h3&gt; &#xA;&lt;p&gt;Recipes that start with &lt;code&gt;#!&lt;/code&gt; are called shebang recipes, and are executed by saving the recipe body to a file and running it. This lets you write recipes in different languages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;polyglot: python js perl sh ruby nu&#xA;&#xA;python:&#xA;  #!/usr/bin/env python3&#xA;  print(&#39;Hello from python!&#39;)&#xA;&#xA;js:&#xA;  #!/usr/bin/env node&#xA;  console.log(&#39;Greetings from JavaScript!&#39;)&#xA;&#xA;perl:&#xA;  #!/usr/bin/env perl&#xA;  print &#34;Larry Wall says Hi!\n&#34;;&#xA;&#xA;sh:&#xA;  #!/usr/bin/env sh&#xA;  hello=&#39;Yo&#39;&#xA;  echo &#34;$hello from a shell script!&#34;&#xA;&#xA;nu:&#xA;  #!/usr/bin/env nu&#xA;  let hello = &#39;Hola&#39;&#xA;  echo $&#34;($hello) from a nushell script!&#34;&#xA;&#xA;ruby:&#xA;  #!/usr/bin/env ruby&#xA;  puts &#34;Hello from ruby!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just polyglot&#xA;Hello from python!&#xA;Greetings from JavaScript!&#xA;Larry Wall says Hi!&#xA;Yo from a shell script!&#xA;Hola from a nushell script!&#xA;Hello from ruby!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Unix-like operating systems, including Linux and MacOS, shebang recipes are executed by saving the recipe body to a file in a temporary directory, marking the file as executable, and executing it. The OS then parses the shebang line into a command line and invokes it, including the path to the file. For example, if a recipe starts with &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt;, the final command that the OS runs will be something like &lt;code&gt;/usr/bin/env bash /tmp/PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Shebang line splitting is operating system dependent. When passing a command with arguments, you may need to tell &lt;code&gt;env&lt;/code&gt; to split them explicitly by using the &lt;code&gt;-S&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;run:&#xA;  #!/usr/bin/env -S bash -x&#xA;  ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows does not support shebang lines. On Windows, &lt;code&gt;just&lt;/code&gt; splits the shebang line into a command and arguments, saves the recipe body to a file, and invokes the split command and arguments, adding the path to the saved recipe body as the final argument. For example, on Windows, if a recipe starts with &lt;code&gt;#! py&lt;/code&gt;, the final command the OS runs will be something like &lt;code&gt;py C:\Temp\PATH_TO_SAVED_RECIPE_BODY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Script Recipes&lt;/h3&gt; &#xA;&lt;p&gt;Recipes with a &lt;code&gt;[script(COMMAND)]&lt;/code&gt;&lt;sup&gt;1.32.0&lt;/sup&gt; attribute are run as scripts interpreted by &lt;code&gt;COMMAND&lt;/code&gt;. This avoids some of the issues with shebang recipes, such as the use of &lt;code&gt;cygpath&lt;/code&gt; on Windows, the need to use &lt;code&gt;/usr/bin/env&lt;/code&gt;, and inconsistences in shebang line splitting across Unix OSs.&lt;/p&gt; &#xA;&lt;p&gt;Recipes with an empty &lt;code&gt;[script]&lt;/code&gt; attribute are executed with the value of &lt;code&gt;set script-interpreter := […]&lt;/code&gt;&lt;sup&gt;1.33.0&lt;/sup&gt;, defaulting to &lt;code&gt;sh -eu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The body of the recipe is evaluated, written to disk in the temporary directory, and run by passing its path as an argument to &lt;code&gt;COMMAND&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;[script(…)]&lt;/code&gt; attribute is unstable, so you&#39;ll need to use &lt;code&gt;set unstable&lt;/code&gt;, set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable, or pass &lt;code&gt;--unstable&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h3&gt;Safer Bash Shebang Recipes&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re writing a &lt;code&gt;bash&lt;/code&gt; shebang recipe, consider adding &lt;code&gt;set -euxo pipefail&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  #!/usr/bin/env bash&#xA;  set -euxo pipefail&#xA;  hello=&#39;Yo&#39;&#xA;  echo &#34;$hello from Bash!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It isn&#39;t strictly necessary, but &lt;code&gt;set -euxo pipefail&lt;/code&gt; turns on a few useful features that make &lt;code&gt;bash&lt;/code&gt; shebang recipes behave more like normal, linewise &lt;code&gt;just&lt;/code&gt; recipe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set -e&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command fails.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set -u&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a variable is undefined.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set -x&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; print each script line before it&#39;s run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set -o pipefail&lt;/code&gt; makes &lt;code&gt;bash&lt;/code&gt; exit if a command in a pipeline fails. This is &lt;code&gt;bash&lt;/code&gt;-specific, so isn&#39;t turned on in normal linewise &lt;code&gt;just&lt;/code&gt; recipes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Together, these avoid a lot of shell scripting gotchas.&lt;/p&gt; &#xA;&lt;h4&gt;Shebang Recipe Execution on Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows, shebang interpreter paths containing a &lt;code&gt;/&lt;/code&gt; are translated from Unix-style paths to Windows-style paths using &lt;code&gt;cygpath&lt;/code&gt;, a utility that ships with &lt;a href=&#34;http://www.cygwin.com&#34;&gt;Cygwin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to execute this recipe on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;echo:&#xA;  #!/bin/sh&#xA;  echo &#34;Hello!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The interpreter path &lt;code&gt;/bin/sh&lt;/code&gt; will be translated to a Windows-style path using &lt;code&gt;cygpath&lt;/code&gt; before being executed.&lt;/p&gt; &#xA;&lt;p&gt;If the interpreter path does not contain a &lt;code&gt;/&lt;/code&gt; it will be executed without being translated. This is useful if &lt;code&gt;cygpath&lt;/code&gt; is not available, or you wish to pass a Windows-style path to the interpreter.&lt;/p&gt; &#xA;&lt;h3&gt;Setting Variables in a Recipe&lt;/h3&gt; &#xA;&lt;p&gt;Recipe lines are interpreted by the shell, not &lt;code&gt;just&lt;/code&gt;, so it&#39;s not possible to set &lt;code&gt;just&lt;/code&gt; variables in the middle of a recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;foo:&#xA;  x := &#34;hello&#34; # This doesn&#39;t work!&#xA;  echo {{x}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to use shell variables, but there&#39;s another problem. Every recipe line is run by a new shell instance, so variables set in one line won&#39;t be set in the next:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  x=hello &amp;amp;&amp;amp; echo $x # This works!&#xA;  y=bye&#xA;  echo $y            # This doesn&#39;t, `y` is undefined here!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The best way to work around this is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  #!/usr/bin/env bash&#xA;  set -euxo pipefail&#xA;  x=hello&#xA;  echo $x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sharing Environment Variables Between Recipes&lt;/h3&gt; &#xA;&lt;p&gt;Each line of each recipe is executed by a fresh shell, so it is not possible to share environment variables between recipes.&lt;/p&gt; &#xA;&lt;h4&gt;Using Python Virtual Environments&lt;/h4&gt; &#xA;&lt;p&gt;Some tools, like &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;Python&#39;s venv&lt;/a&gt;, require loading environment variables in order to work, making them challenging to use with &lt;code&gt;just&lt;/code&gt;. As a workaround, you can execute the virtual environment binaries directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;venv:&#xA;  [ -d foo ] || python3 -m venv foo&#xA;&#xA;run: venv&#xA;  ./foo/bin/python3 main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing the Working Directory in a Recipe&lt;/h3&gt; &#xA;&lt;p&gt;Each recipe line is executed by a new shell, so if you change the working directory on one line, it won&#39;t have an effect on later lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  pwd    # This `pwd` will print the same directory…&#xA;  cd bar&#xA;  pwd    # …as this `pwd`!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a couple ways around this. One is to call &lt;code&gt;cd&lt;/code&gt; on the same line as the command you want to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  cd bar &amp;amp;&amp;amp; pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing, and thus a &lt;code&gt;pwd&lt;/code&gt; on one line will affect later lines, just like a shell script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  #!/usr/bin/env bash&#xA;  set -euxo pipefail&#xA;  cd bar&#xA;  pwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;Recipe lines can be indented with spaces or tabs, but not a mix of both. All of a recipe&#39;s lines must have the same type of indentation, but different recipes in the same &lt;code&gt;justfile&lt;/code&gt; may use different indentation.&lt;/p&gt; &#xA;&lt;p&gt;Each recipe must be indented at least one level from the &lt;code&gt;recipe-name&lt;/code&gt; but after that may be further indented.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a justfile with a recipe indented with spaces, represented as &lt;code&gt;·&lt;/code&gt;, and tabs, represented as &lt;code&gt;→&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-justfile&#34;&gt;set windows-shell := [&#34;pwsh&#34;, &#34;-NoLogo&#34;, &#34;-NoProfileLoadTime&#34;, &#34;-Command&#34;]&#xA;&#xA;set ignore-comments&#xA;&#xA;list-space directory:&#xA;··#!pwsh&#xA;··foreach ($item in $(Get-ChildItem {{directory}} )) {&#xA;····echo $item.Name&#xA;··}&#xA;··echo &#34;&#34;&#xA;&#xA;# indentation nesting works even when newlines are escaped&#xA;list-tab directory:&#xA;→ @foreach ($item in $(Get-ChildItem {{directory}} )) { \&#xA;→ → echo $item.Name \&#xA;→ }&#xA;→ @echo &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;PS &amp;gt; just list-space ~&#xA;Desktop&#xA;Documents&#xA;Downloads&#xA;&#xA;PS &amp;gt; just list-tab ~&#xA;Desktop&#xA;Documents&#xA;Downloads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multi-Line Constructs&lt;/h3&gt; &#xA;&lt;p&gt;Recipes without an initial shebang are evaluated and run line-by-line, which means that multi-line constructs probably won&#39;t do what you want.&lt;/p&gt; &#xA;&lt;p&gt;For example, with the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;conditional:&#xA;  if true; then&#xA;    echo &#39;True!&#39;&#xA;  fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The extra leading whitespace before the second line of the &lt;code&gt;conditional&lt;/code&gt; recipe will produce a parse error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just conditional&#xA;error: Recipe line has extra leading whitespace&#xA;  |&#xA;3 |         echo &#39;True!&#39;&#xA;  |     ^^^^^^^^^^^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To work around this, you can write conditionals on one line, escape newlines with slashes, or add a shebang to your recipe. Some examples of multi-line constructs are provided for reference.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;if&lt;/code&gt; statements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;conditional:&#xA;  if true; then echo &#39;True!&#39;; fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;conditional:&#xA;  if true; then \&#xA;    echo &#39;True!&#39;; \&#xA;  fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;conditional:&#xA;  #!/usr/bin/env sh&#xA;  if true; then&#xA;    echo &#39;True!&#39;&#xA;  fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;for:&#xA;  for file in `ls .`; do echo $file; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;for:&#xA;  for file in `ls .`; do \&#xA;    echo $file; \&#xA;  done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;for:&#xA;  #!/usr/bin/env sh&#xA;  for file in `ls .`; do&#xA;    echo $file&#xA;  done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;while:&#xA;  while `server-is-dead`; do ping -c 1 server; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;while:&#xA;  while `server-is-dead`; do \&#xA;    ping -c 1 server; \&#xA;  done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;while:&#xA;  #!/usr/bin/env sh&#xA;  while `server-is-dead`; do&#xA;    ping -c 1 server&#xA;  done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Outside Recipe Bodies&lt;/h4&gt; &#xA;&lt;p&gt;Parenthesized expressions can span multiple lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;abc := (&#39;a&#39; +&#xA;        &#39;b&#39;&#xA;         + &#39;c&#39;)&#xA;&#xA;abc2 := (&#xA;  &#39;a&#39; +&#xA;  &#39;b&#39; +&#xA;  &#39;c&#39;&#xA;)&#xA;&#xA;foo param=(&#39;foo&#39;&#xA;      + &#39;bar&#39;&#xA;    ):&#xA;  echo {{param}}&#xA;&#xA;bar: (foo&#xA;        &#39;Foo&#39;&#xA;     )&#xA;  echo &#39;Bar!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lines ending with a backslash continue on to the next line as if the lines were joined by whitespace&lt;sup&gt;1.15.0&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;a := &#39;foo&#39; + \&#xA;     &#39;bar&#39;&#xA;&#xA;foo param1 \&#xA;  param2=&#39;foo&#39; \&#xA;  *varparam=&#39;&#39;: dep1 \&#xA;                (dep2 &#39;foo&#39;)&#xA;  echo {{param1}} {{param2}} {{varparam}}&#xA;&#xA;dep1: \&#xA;    # this comment is not part of the recipe body&#xA;  echo &#39;dep1&#39;&#xA;&#xA;dep2 \&#xA;  param:&#xA;    echo &#39;Dependency with parameter {{param}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Backslash line continuations can also be used in interpolations. The line following the backslash must be indented.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;recipe:&#xA;  echo &#39;{{ \&#xA;  &#34;This interpolation &#34; + \&#xA;    &#34;has a lot of text.&#34; \&#xA;  }}&#39;&#xA;  echo &#39;back to recipe body&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command Line Options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; supports a number of useful command line options for listing, dumping, and debugging recipes and variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;  js&#xA;  perl&#xA;  polyglot&#xA;  python&#xA;  ruby&#xA;$ just --show perl&#xA;perl:&#xA;  #!/usr/bin/env perl&#xA;  print &#34;Larry Wall says Hi!\n&#34;;&#xA;$ just --show polyglot&#xA;polyglot: python js perl sh ruby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some command-line options can be set with environment variables. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export JUST_UNSTABLE=1&#xA;$ just&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --unstable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult &lt;code&gt;just --help&lt;/code&gt; to see which options can be set from environment variables.&lt;/p&gt; &#xA;&lt;h3&gt;Private Recipes&lt;/h3&gt; &#xA;&lt;p&gt;Recipes and aliases whose name starts with a &lt;code&gt;_&lt;/code&gt; are omitted from &lt;code&gt;just --list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;test: _test-helper&#xA;  ./bin/test&#xA;&#xA;_test-helper:&#xA;  ./bin/super-secret-test-helper-stuff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;    test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And from &lt;code&gt;just --summary&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --summary&#xA;test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;[private]&lt;/code&gt; attribute&lt;sup&gt;1.10.0&lt;/sup&gt; may also be used to hide recipes or aliases without needing to change the name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[private]&#xA;foo:&#xA;&#xA;[private]&#xA;alias b := bar&#xA;&#xA;bar:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;    bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful for helper recipes which are only meant to be used as dependencies of other recipes.&lt;/p&gt; &#xA;&lt;h3&gt;Quiet Recipes&lt;/h3&gt; &#xA;&lt;p&gt;A recipe name may be prefixed with &lt;code&gt;@&lt;/code&gt; to invert the meaning of &lt;code&gt;@&lt;/code&gt; before each line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;@quiet:&#xA;  echo hello&#xA;  echo goodbye&#xA;  @# all done!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now only the lines starting with &lt;code&gt;@&lt;/code&gt; will be echoed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just quiet&#xA;hello&#xA;goodbye&#xA;# all done!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All recipes in a Justfile can be made quiet with &lt;code&gt;set quiet&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set quiet&#xA;&#xA;foo:&#xA;  echo &#34;This is quiet&#34;&#xA;&#xA;@foo2:&#xA;  echo &#34;This is also quiet&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;[no-quiet]&lt;/code&gt; attribute overrides this setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set quiet&#xA;&#xA;foo:&#xA;  echo &#34;This is quiet&#34;&#xA;&#xA;[no-quiet]&#xA;foo2:&#xA;  echo &#34;This is not quiet&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shebang recipes are quiet by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo:&#xA;  #!/usr/bin/env bash&#xA;  echo &#39;Foo!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo&#xA;Foo!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;@&lt;/code&gt; to a shebang recipe name makes &lt;code&gt;just&lt;/code&gt; print the recipe before executing it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;@bar:&#xA;  #!/usr/bin/env bash&#xA;  echo &#39;Bar!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar&#xA;#!/usr/bin/env bash&#xA;echo &#39;Bar!&#39;&#xA;Bar!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; normally prints error messages when a recipe line fails. These error messages can be suppressed using the &lt;code&gt;[no-exit-message]&lt;/code&gt;&lt;sup&gt;1.7.0&lt;/sup&gt; attribute. You may find this especially useful with a recipe that wraps a tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;git *args:&#xA;    @git {{args}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just git status&#xA;fatal: not a git repository (or any of the parent directories): .git&#xA;error: Recipe `git` failed on line 2 with exit code 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the attribute to suppress the exit error message when the tool exits with a non-zero code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;[no-exit-message]&#xA;git *args:&#xA;    @git {{args}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just git status&#xA;fatal: not a git repository (or any of the parent directories): .git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Selecting Recipes to Run With an Interactive Chooser&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;--choose&lt;/code&gt; subcommand makes &lt;code&gt;just&lt;/code&gt; invoke a chooser to select which recipes to run. Choosers should read lines containing recipe names from standard input and print one or more of those names separated by spaces to standard output.&lt;/p&gt; &#xA;&lt;p&gt;Because there is currently no way to run a recipe that requires arguments with &lt;code&gt;--choose&lt;/code&gt;, such recipes will not be given to the chooser. Private recipes and aliases are also skipped.&lt;/p&gt; &#xA;&lt;p&gt;The chooser can be overridden with the &lt;code&gt;--chooser&lt;/code&gt; flag. If &lt;code&gt;--chooser&lt;/code&gt; is not given, then &lt;code&gt;just&lt;/code&gt; first checks if &lt;code&gt;$JUST_CHOOSER&lt;/code&gt; is set. If it isn&#39;t, then the chooser defaults to &lt;code&gt;fzf&lt;/code&gt;, a popular fuzzy finder.&lt;/p&gt; &#xA;&lt;p&gt;Arguments can be included in the chooser, i.e. &lt;code&gt;fzf --exact&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The chooser is invoked in the same way as recipe lines. For example, if the chooser is &lt;code&gt;fzf&lt;/code&gt;, it will be invoked with &lt;code&gt;sh -cu &#39;fzf&#39;&lt;/code&gt;, and if the shell, or the shell arguments are overridden, the chooser invocation will respect those overrides.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like &lt;code&gt;just&lt;/code&gt; to default to selecting recipes with a chooser, you can use this as your default recipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;default:&#xA;  @just --choose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Invoking &lt;code&gt;justfile&lt;/code&gt;s in Other Directories&lt;/h3&gt; &#xA;&lt;p&gt;If the first argument passed to &lt;code&gt;just&lt;/code&gt; contains a &lt;code&gt;/&lt;/code&gt;, then the following occurs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The argument is split at the last &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The part before the last &lt;code&gt;/&lt;/code&gt; is treated as a directory. &lt;code&gt;just&lt;/code&gt; will start its search for the &lt;code&gt;justfile&lt;/code&gt; there, instead of in the current directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The part after the last slash is treated as a normal argument, or ignored if it is empty.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This may seem a little strange, but it&#39;s useful if you wish to run a command in a &lt;code&gt;justfile&lt;/code&gt; that is in a subdirectory.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you are in a directory which contains a subdirectory named &lt;code&gt;foo&lt;/code&gt;, which contains a &lt;code&gt;justfile&lt;/code&gt; with the recipe &lt;code&gt;build&lt;/code&gt;, which is also the default recipe, the following are all equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ (cd foo &amp;amp;&amp;amp; just build)&#xA;$ just foo/build&#xA;$ just foo/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional recipes after the first are sought in the same &lt;code&gt;justfile&lt;/code&gt;. For example, the following are both equivalent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo/a b&#xA;$ (cd foo &amp;amp;&amp;amp; just a b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And will both invoke recipes &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;foo/justfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Imports&lt;/h3&gt; &#xA;&lt;p&gt;One &lt;code&gt;justfile&lt;/code&gt; can include the contents of another using &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt; &#xA;&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;import &#39;foo/bar.just&#39;&#xA;&#xA;a: b&#xA;  @echo A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the following text in &lt;code&gt;foo/bar.just&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;b:&#xA;  @echo B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;foo/bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; and recipe &lt;code&gt;b&lt;/code&gt; will be defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just b&#xA;B&#xA;$ just a&#xA;B&#xA;A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; path can be absolute or relative to the location of the justfile containing it. A leading &lt;code&gt;~/&lt;/code&gt; in the import path is replaced with the current users home directory.&lt;/p&gt; &#xA;&lt;p&gt;Justfiles are insensitive to order, so included files can reference variables and recipes defined after the &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt; &#xA;&lt;p&gt;Imported files can themselves contain &lt;code&gt;import&lt;/code&gt;s, which are processed recursively.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;allow-duplicate-recipes&lt;/code&gt; is set, recipes in parent modules override recipes in imports. In a similar manner, when &lt;code&gt;allow-duplicate-variables&lt;/code&gt; is set, variables in parent modules override variables in imports.&lt;/p&gt; &#xA;&lt;p&gt;Imports may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;import&lt;/code&gt; keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;import? &#39;foo/bar.just&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Missing source files for optional imports do not produce an error.&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;sup&gt;1.19.0&lt;/sup&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;justfile&lt;/code&gt; can declare modules using &lt;code&gt;mod&lt;/code&gt; statements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mod&lt;/code&gt; statements were stabilized in &lt;code&gt;just&lt;/code&gt;&lt;sup&gt;1.31.0&lt;/sup&gt;. In earlier versions, you&#39;ll need to use the &lt;code&gt;--unstable&lt;/code&gt; flag, &lt;code&gt;set unstable&lt;/code&gt;, or set the &lt;code&gt;JUST_UNSTABLE&lt;/code&gt; environment variable to use them.&lt;/p&gt; &#xA;&lt;p&gt;If you have the following &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;mod bar&#xA;&#xA;a:&#xA;  @echo A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the following text in &lt;code&gt;bar.just&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;b:&#xA;  @echo B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;bar.just&lt;/code&gt; will be included in &lt;code&gt;justfile&lt;/code&gt; as a submodule. Recipes, aliases, and variables defined in one submodule cannot be used in another, and each module uses its own settings.&lt;/p&gt; &#xA;&lt;p&gt;Recipes in submodules can be invoked as subcommands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar b&#xA;B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with path syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar::b&#xA;B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a module is named &lt;code&gt;foo&lt;/code&gt;, just will search for the module file in &lt;code&gt;foo.just&lt;/code&gt;, &lt;code&gt;foo/mod.just&lt;/code&gt;, &lt;code&gt;foo/justfile&lt;/code&gt;, and &lt;code&gt;foo/.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; &#xA;&lt;p&gt;Module statements may be of the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;mod foo &#39;PATH&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which loads the module&#39;s source file from &lt;code&gt;PATH&lt;/code&gt;, instead of from the usual locations. A leading &lt;code&gt;~/&lt;/code&gt; in &lt;code&gt;PATH&lt;/code&gt; is replaced with the current user&#39;s home directory. &lt;code&gt;PATH&lt;/code&gt; may point to the module source file itself, or to a directory containing the module source file with the name &lt;code&gt;mod.just&lt;/code&gt;, &lt;code&gt;justfile&lt;/code&gt;, or &lt;code&gt;.justfile&lt;/code&gt;. In the latter two cases, the module file may have any capitalization.&lt;/p&gt; &#xA;&lt;p&gt;Environment files are only loaded for the root justfile, and loaded environment variables are available in submodules. Settings in submodules that affect environment file loading are ignored.&lt;/p&gt; &#xA;&lt;p&gt;Recipes in submodules without the &lt;code&gt;[no-cd]&lt;/code&gt; attribute run with the working directory set to the directory containing the submodule source file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;justfile()&lt;/code&gt; and &lt;code&gt;justfile_directory()&lt;/code&gt; always return the path to the root justfile and the directory that contains it, even when called from submodule recipes.&lt;/p&gt; &#xA;&lt;p&gt;Modules may be made optional by putting a &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;mod&lt;/code&gt; keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;mod? foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Missing source files for optional modules do not produce an error.&lt;/p&gt; &#xA;&lt;p&gt;Optional modules with no source file do not conflict, so you can have multiple mod statements with the same name, but with different source file paths, as long as at most one source file exists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;mod? foo &#39;bar.just&#39;&#xA;mod? foo &#39;baz.just&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modules may be given doc comments which appear in &lt;code&gt;--list&lt;/code&gt; output&lt;sup&gt;1.30.0&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mf&#34;&gt;# foo is a great module!&#xA;mod foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --list&#xA;Available recipes:&#xA;    foo ... # foo is a great module!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/casey/just/issues/929&#34;&gt;module stabilization tracking issue&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Hiding &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; looks for &lt;code&gt;justfile&lt;/code&gt;s named &lt;code&gt;justfile&lt;/code&gt; and &lt;code&gt;.justfile&lt;/code&gt;, which can be used to keep a &lt;code&gt;justfile&lt;/code&gt; hidden.&lt;/p&gt; &#xA;&lt;h3&gt;Just Scripts&lt;/h3&gt; &#xA;&lt;p&gt;By adding a shebang line to the top of a &lt;code&gt;justfile&lt;/code&gt; and making it executable, &lt;code&gt;just&lt;/code&gt; can be used as an interpreter for scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat &amp;gt; script &amp;lt;&amp;lt;EOF&#xA;#!/usr/bin/env just --justfile&#xA;&#xA;foo:&#xA;  echo foo&#xA;EOF&#xA;$ chmod +x script&#xA;$ ./script foo&#xA;echo foo&#xA;foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a script with a shebang is executed, the system supplies the path to the script as an argument to the command in the shebang. So, with a shebang of &lt;code&gt;#!/usr/bin/env just --justfile&lt;/code&gt;, the command will be &lt;code&gt;/usr/bin/env just --justfile PATH_TO_SCRIPT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the above shebang, &lt;code&gt;just&lt;/code&gt; will change its working directory to the location of the script. If you&#39;d rather leave the working directory unchanged, use &lt;code&gt;#!/usr/bin/env just --working-directory . --justfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: Shebang line splitting is not consistent across operating systems. The previous examples have only been tested on macOS. On Linux, you may need to pass the &lt;code&gt;-S&lt;/code&gt; flag to &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;#!/usr/bin/env -S just --justfile&#xA;&#xA;default:&#xA;  echo foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting and dumping &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;Each &lt;code&gt;justfile&lt;/code&gt; has a canonical formatting with respect to whitespace and newlines.&lt;/p&gt; &#xA;&lt;p&gt;You can overwrite the current justfile with a canonically-formatted version using the currently-unstable &lt;code&gt;--fmt&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat justfile&#xA;# A lot of blank lines&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;some-recipe:&#xA;  echo &#34;foo&#34;&#xA;$ just --fmt --unstable&#xA;$ cat justfile&#xA;# A lot of blank lines&#xA;&#xA;some-recipe:&#xA;    echo &#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoking &lt;code&gt;just --fmt --check --unstable&lt;/code&gt; runs &lt;code&gt;--fmt&lt;/code&gt; in check mode. Instead of overwriting the &lt;code&gt;justfile&lt;/code&gt;, &lt;code&gt;just&lt;/code&gt; will exit with an exit code of 0 if it is formatted correctly, and will exit with 1 and print a diff if it is not.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;--dump&lt;/code&gt; command to output a formatted version of the &lt;code&gt;justfile&lt;/code&gt; to stdout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --dump &amp;gt; formatted-justfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--dump&lt;/code&gt; command can be used with &lt;code&gt;--dump-format json&lt;/code&gt; to print a JSON representation of a &lt;code&gt;justfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fallback to parent &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;If a recipe is not found in a &lt;code&gt;justfile&lt;/code&gt; and the &lt;code&gt;fallback&lt;/code&gt; setting is set, &lt;code&gt;just&lt;/code&gt; will look for &lt;code&gt;justfile&lt;/code&gt;s in the parent directory and up, until it reaches the root directory. &lt;code&gt;just&lt;/code&gt; will stop after it reaches a &lt;code&gt;justfile&lt;/code&gt; in which the &lt;code&gt;fallback&lt;/code&gt; setting is &lt;code&gt;false&lt;/code&gt; or unset.&lt;/p&gt; &#xA;&lt;p&gt;As an example, suppose the current directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set fallback&#xA;foo:&#xA;  echo foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the parent directory contains this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;bar:&#xA;  echo bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just bar&#xA;Trying ../justfile&#xA;echo bar&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Avoiding Argument Splitting&lt;/h3&gt; &#xA;&lt;p&gt;Given this &lt;code&gt;justfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo argument:&#xA;  touch {{argument}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following command will create two files, &lt;code&gt;some&lt;/code&gt; and &lt;code&gt;argument.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just foo &#34;some argument.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The users shell will parse &lt;code&gt;&#34;some argument.txt&#34;&lt;/code&gt; as a single argument, but when &lt;code&gt;just&lt;/code&gt; replaces &lt;code&gt;touch {{argument}}&lt;/code&gt; with &lt;code&gt;touch some argument.txt&lt;/code&gt;, the quotes are not preserved, and &lt;code&gt;touch&lt;/code&gt; will receive two arguments.&lt;/p&gt; &#xA;&lt;p&gt;There are a few ways to avoid this: quoting, positional arguments, and exported arguments.&lt;/p&gt; &#xA;&lt;h4&gt;Quoting&lt;/h4&gt; &#xA;&lt;p&gt;Quotes can be added around the &lt;code&gt;{{argument}}&lt;/code&gt; interpolation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo argument:&#xA;  touch &#39;{{argument}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This preserves &lt;code&gt;just&lt;/code&gt;&#39;s ability to catch variable name typos before running, for example if you were to write &lt;code&gt;{{argument}}&lt;/code&gt;, but will not do what you want if the value of &lt;code&gt;argument&lt;/code&gt; contains single quotes.&lt;/p&gt; &#xA;&lt;h4&gt;Positional Arguments&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;positional-arguments&lt;/code&gt; setting causes all arguments to be passed as positional arguments, allowing them to be accessed with &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, …, and &lt;code&gt;$@&lt;/code&gt;, which can be then double-quoted to avoid further splitting by the shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set positional-arguments&#xA;&#xA;foo argument:&#xA;  touch &#34;$1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;&#39;s ability to catch typos, for example if you type &lt;code&gt;$2&lt;/code&gt; instead of &lt;code&gt;$1&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; &#xA;&lt;h4&gt;Exported Arguments&lt;/h4&gt; &#xA;&lt;p&gt;All arguments are exported when the &lt;code&gt;export&lt;/code&gt; setting is set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;set export&#xA;&#xA;foo argument:&#xA;  touch &#34;$argument&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or individual arguments may be exported by prefixing them with &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;foo $argument:&#xA;  touch &#34;$argument&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This defeats &lt;code&gt;just&lt;/code&gt;&#39;s ability to catch typos, for example if you type &lt;code&gt;$argument&lt;/code&gt;, but works for all possible values of &lt;code&gt;argument&lt;/code&gt;, including those with double quotes.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring the Shell&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of ways to configure the shell for linewise recipes, which are the default when a recipe does not start with a &lt;code&gt;#!&lt;/code&gt; shebang. Their precedence, from highest to lowest, is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;--shell&lt;/code&gt; and &lt;code&gt;--shell-arg&lt;/code&gt; command line options. Passing either of these will cause &lt;code&gt;just&lt;/code&gt; to ignore any settings in the current justfile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set windows-shell := [...]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set windows-powershell&lt;/code&gt; (deprecated)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set shell := [...]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Since &lt;code&gt;set windows-shell&lt;/code&gt; has higher precedence than &lt;code&gt;set shell&lt;/code&gt;, you can use &lt;code&gt;set windows-shell&lt;/code&gt; to pick a shell on Windows, and &lt;code&gt;set shell&lt;/code&gt; to pick a shell for all other platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Timestamps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print timestamps before each recipe commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;recipe:&#xA;  echo one&#xA;  sleep 2&#xA;  echo two&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe&#xA;[07:28:46] echo one&#xA;one&#xA;[07:28:46] sleep 2&#xA;[07:28:48] echo two&#xA;two&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, timestamps are formatted as &lt;code&gt;HH:MM:SS&lt;/code&gt;. The format can be changed with &lt;code&gt;--timestamp-format&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ just --timestamp recipe --timestamp-format &#39;%H:%M:%S%.3f %Z&#39;&#xA;[07:32:11:.349 UTC] echo one&#xA;one&#xA;[07:32:11:.350 UTC] sleep 2&#xA;[07:32:13:.352 UTC] echo two&#xA;two&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The argument to &lt;code&gt;--timestamp-format&lt;/code&gt; is a &lt;code&gt;strftime&lt;/code&gt;-style format string, see the &lt;a href=&#34;https://docs.rs/chrono/latest/chrono/format/strftime/index.html&#34;&gt;&lt;code&gt;chrono&lt;/code&gt; library docs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;A changelog for the latest release is available in &lt;a href=&#34;https://raw.githubusercontent.com/casey/just/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;. Changelogs for previous releases are available on &lt;a href=&#34;https://github.com/casey/just/releases&#34;&gt;the releases page&lt;/a&gt;. &lt;code&gt;just --changelog&lt;/code&gt; can also be used to make a &lt;code&gt;just&lt;/code&gt; binary print its changelog.&lt;/p&gt; &#xA;&lt;h2&gt;Miscellanea&lt;/h2&gt; &#xA;&lt;h3&gt;Re-running recipes when files change&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattgreen/watchexec&#34;&gt;&lt;code&gt;watchexec&lt;/code&gt;&lt;/a&gt; can re-run any command when files change.&lt;/p&gt; &#xA;&lt;p&gt;To re-run the recipe &lt;code&gt;foo&lt;/code&gt; when any file changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;watchexec just foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;watchexec --help&lt;/code&gt; for more info, including how to specify which files should be watched for changes.&lt;/p&gt; &#xA;&lt;h3&gt;Running tasks in parallel&lt;/h3&gt; &#xA;&lt;p&gt;GNU parallel can be used to run tasks concurrently:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;parallel:&#xA;  #!/usr/bin/env -S parallel --shebang --ungroup --jobs {{ num_cpus() }}&#xA;  echo task 1 start; sleep 3; echo task 1 done&#xA;  echo task 2 start; sleep 3; echo task 2 done&#xA;  echo task 3 start; sleep 3; echo task 3 done&#xA;  echo task 4 start; sleep 3; echo task 4 done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Alias&lt;/h3&gt; &#xA;&lt;p&gt;For lightning-fast command running, put &lt;code&gt;alias j=just&lt;/code&gt; in your shell&#39;s configuration file.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;bash&lt;/code&gt;, the aliased command may not keep the shell completion functionality described in the next section. Add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; to use the same completion function as &lt;code&gt;just&lt;/code&gt; for your aliased command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;complete -F _just -o bashdefault -o default j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Shell completion scripts for Bash, Elvish, Fish, Nushell, PowerShell, and Zsh are available &lt;a href=&#34;https://github.com/casey/just/releases&#34;&gt;release archives&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;just&lt;/code&gt; binary can also generate the same completion scripts at runtime using &lt;code&gt;just --completions SHELL&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just --completions zsh &amp;gt; just.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to your shell&#39;s documentation for how to install them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;macOS Note:&lt;/em&gt; Recent versions of macOS use zsh as the default shell. If you use Homebrew to install &lt;code&gt;just&lt;/code&gt;, it will automatically install the most recent copy of the zsh completion script in the Homebrew zsh directory, which the built-in version of zsh doesn&#39;t know about by default. It&#39;s best to use this copy of the script if possible, since it will be updated whenever you update &lt;code&gt;just&lt;/code&gt; via Homebrew. Also, many other Homebrew packages use the same location for completion scripts, and the built-in zsh doesn&#39;t know about those either. To take advantage of &lt;code&gt;just&lt;/code&gt; completion in zsh in this scenario, you can set &lt;code&gt;fpath&lt;/code&gt; to the Homebrew location before calling &lt;code&gt;compinit&lt;/code&gt;. Note also that Oh My Zsh runs &lt;code&gt;compinit&lt;/code&gt; by default. So your &lt;code&gt;.zshrc&lt;/code&gt; file could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# Init Homebrew, which adds environment variables&#xA;eval &#34;$(brew shellenv)&#34;&#xA;&#xA;fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)&#xA;&#xA;# Then choose one of these options:&#xA;# 1. If you&#39;re using Oh My Zsh, you can initialize it here&#xA;# source $ZSH/oh-my-zsh.sh&#xA;&#xA;# 2. Otherwise, run compinit yourself&#xA;# autoload -U compinit&#xA;# compinit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Man Page&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; can print its own man page with &lt;code&gt;just --man&lt;/code&gt;. Man pages are written in &lt;a href=&#34;https://en.wikipedia.org/wiki/Roff_%28software%29&#34;&gt;&lt;code&gt;roff&lt;/code&gt;&lt;/a&gt;, a venerable markup language and one of the first practical applications of Unix. If you have &lt;a href=&#34;https://www.gnu.org/software/groff/&#34;&gt;&lt;code&gt;groff&lt;/code&gt;&lt;/a&gt; installed you can view the man page with &lt;code&gt;just --man | groff -mandoc -Tascii | less&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Grammar&lt;/h3&gt; &#xA;&lt;p&gt;A non-normative grammar of &lt;code&gt;justfile&lt;/code&gt;s can be found in &lt;a href=&#34;https://github.com/casey/just/raw/master/GRAMMAR.md&#34;&gt;GRAMMAR.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;just.sh&lt;/h3&gt; &#xA;&lt;p&gt;Before &lt;code&gt;just&lt;/code&gt; was a fancy Rust program it was a tiny shell script that called &lt;code&gt;make&lt;/code&gt;. You can find the old version in &lt;a href=&#34;https://github.com/casey/just/raw/master/contrib/just.sh&#34;&gt;contrib/just.sh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Global and User &lt;code&gt;justfile&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;If you want some recipes to be available everywhere, you have a few options.&lt;/p&gt; &#xA;&lt;h4&gt;Global Justfile&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;just --global-justfile&lt;/code&gt;, or &lt;code&gt;just -g&lt;/code&gt; for short, searches the following paths, in-order, for a justfile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/just/justfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/just/justfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/justfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.justfile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can put recipes that are used across many projects in a global justfile to easily invoke them from any directory.&lt;/p&gt; &#xA;&lt;h4&gt;User justfile tips&lt;/h4&gt; &#xA;&lt;p&gt;You can also adopt some of the following workflows. These tips assume you&#39;ve created a &lt;code&gt;justfile&lt;/code&gt; at &lt;code&gt;~/.user.justfile&lt;/code&gt;, but you can put this &lt;code&gt;justfile&lt;/code&gt; at any convenient path on your system.&lt;/p&gt; &#xA;&lt;h5&gt;Recipe Aliases&lt;/h5&gt; &#xA;&lt;p&gt;If you want to call the recipes in &lt;code&gt;~/.user.justfile&lt;/code&gt; by name, and don&#39;t mind creating an alias for every recipe, add the following to your shell&#39;s initialization script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for recipe in `just --justfile ~/.user.justfile --summary`; do&#xA;  alias $recipe=&#34;just --justfile ~/.user.justfile --working-directory . $recipe&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; &#xA;&lt;p&gt;It took me way too long to realize that you could create recipe aliases like this. Notwithstanding my tardiness, I am very pleased to bring you this major advance in &lt;code&gt;justfile&lt;/code&gt; technology.&lt;/p&gt; &#xA;&lt;h5&gt;Forwarding Alias&lt;/h5&gt; &#xA;&lt;p&gt;If you&#39;d rather not create aliases for every recipe, you can create a single alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias .j=&#39;just --justfile ~/.user.justfile --working-directory .&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, if you have a recipe called &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;~/.user.justfile&lt;/code&gt;, you can just type &lt;code&gt;.j foo&lt;/code&gt; at the command line to run it.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m pretty sure that nobody actually uses this feature, but it&#39;s there.&lt;/p&gt; &#xA;&lt;p&gt;¯\_(ツ)_/¯&lt;/p&gt; &#xA;&lt;h5&gt;Customization&lt;/h5&gt; &#xA;&lt;p&gt;You can customize the above aliases with additional options. For example, if you&#39;d prefer to have the recipes in your &lt;code&gt;justfile&lt;/code&gt; run in your home directory, instead of the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias .j=&#39;just --justfile ~/.user.justfile --working-directory ~&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node.js &lt;code&gt;package.json&lt;/code&gt; Script Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The following export statement gives &lt;code&gt;just&lt;/code&gt; recipes access to local Node module binaries, and makes &lt;code&gt;just&lt;/code&gt; recipe commands behave more like &lt;code&gt;script&lt;/code&gt; entries in Node.js &lt;code&gt;package.json&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;export PATH := &#34;./node_modules/.bin:&#34; + env_var(&#39;PATH&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Paths on Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows, functions that return paths will return &lt;code&gt;\&lt;/code&gt;-separated paths. When not using PowerShell or &lt;code&gt;cmd.exe&lt;/code&gt; these paths should be quoted to prevent the &lt;code&gt;\&lt;/code&gt;s from being interpreted as character escapes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;ls:&#xA;    echo &#39;{{absolute_path(&#34;.&#34;)}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote Justfiles&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to include a &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; source file in many &lt;code&gt;justfiles&lt;/code&gt; without needing to duplicate it, you can use an optional &lt;code&gt;mod&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;, along with a recipe to fetch the module source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;import? &#39;foo.just&#39;&#xA;&#xA;fetch:&#xA;  curl https://raw.githubusercontent.com/casey/just/master/justfile &amp;gt; foo.just&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given the above &lt;code&gt;justfile&lt;/code&gt;, after running &lt;code&gt;just fetch&lt;/code&gt;, the recipes in &lt;code&gt;foo.just&lt;/code&gt; will be available.&lt;/p&gt; &#xA;&lt;h3&gt;Alternatives and Prior Art&lt;/h3&gt; &#xA;&lt;p&gt;There is no shortage of command runners! Some more or less similar alternatives to &lt;code&gt;just&lt;/code&gt; include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;make&lt;/a&gt;: The Unix build tool that inspired &lt;code&gt;just&lt;/code&gt;. There are a few different modern day descendents of the original &lt;code&gt;make&lt;/code&gt;, including &lt;a href=&#34;https://www.freebsd.org/cgi/man.cgi?make(1)&#34;&gt;FreeBSD Make&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-task/task&#34;&gt;task&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/egoist/maid&#34;&gt;maid&lt;/a&gt;: A Markdown-based command runner written in JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/just&#34;&gt;microsoft/just&lt;/a&gt;: A JavaScript-based command runner written in JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sagiegurari/cargo-make&#34;&gt;cargo-make&lt;/a&gt;: A command runner for Rust projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tj/mmake&#34;&gt;mmake&lt;/a&gt;: A wrapper around &lt;code&gt;make&lt;/code&gt; with a number of improvements, including remote includes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tj/robo&#34;&gt;robo&lt;/a&gt;: A YAML-based command runner written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jakedeichert/mask&#34;&gt;mask&lt;/a&gt;: A Markdown-based command runner written in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xonixx/makesure&#34;&gt;makesure&lt;/a&gt;: A simple and portable command runner written in AWK and shell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VladimirMarkelov/haku&#34;&gt;haku&lt;/a&gt;: A make-like command runner written in Rust.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; welcomes your contributions! &lt;code&gt;just&lt;/code&gt; is released under the maximally permissive &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt&#34;&gt;CC0&lt;/a&gt; public domain dedication and fallback license, so your changes must also be released under this license.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is written in Rust. Use &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;rustup&lt;/a&gt; to install a Rust toolchain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt; is extensively tested. All new features must be covered by unit or integration tests. Unit tests are under &lt;a href=&#34;https://github.com/casey/just/raw/master/src&#34;&gt;src&lt;/a&gt;, live alongside the code being tested, and test code in isolation. Integration tests are in the &lt;a href=&#34;https://github.com/casey/just/raw/master/tests&#34;&gt;tests directory&lt;/a&gt; and test the &lt;code&gt;just&lt;/code&gt; binary from the outside by invoking &lt;code&gt;just&lt;/code&gt; on a given &lt;code&gt;justfile&lt;/code&gt; and set of command-line arguments, and checking the output.&lt;/p&gt; &#xA;&lt;p&gt;You should write whichever type of tests are easiest to write for your feature while still providing good test coverage.&lt;/p&gt; &#xA;&lt;p&gt;Unit tests are useful for testing new Rust functions that are used internally and as an aid for development. A good example are the unit tests which cover the &lt;a href=&#34;https://github.com/casey/just/raw/master/src/unindent.rs&#34;&gt;&lt;code&gt;unindent()&lt;/code&gt; function&lt;/a&gt;, used to unindent triple-quoted strings and backticks. &lt;code&gt;unindent()&lt;/code&gt; has a bunch of tricky edge cases which are easy to exercise with unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;p&gt;Integration tests are useful for making sure that the final behavior of the &lt;code&gt;just&lt;/code&gt; binary is correct. &lt;code&gt;unindent()&lt;/code&gt; is also covered by integration tests which make sure that evaluating a triple-quoted string produces the correct unindented value. However, there are not integration tests for all possible cases. These are covered by faster, more concise unit tests that call &lt;code&gt;unindent()&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;p&gt;Existing integration tests are in two forms, those that use the &lt;code&gt;test!&lt;/code&gt; macro and those that use the &lt;code&gt;Test&lt;/code&gt; struct directly. The &lt;code&gt;test!&lt;/code&gt; macro, while often concise, is less flexible and harder to understand, so new tests should use the &lt;code&gt;Test&lt;/code&gt; struct. The &lt;code&gt;Test&lt;/code&gt; struct is a builder which allows for easily invoking &lt;code&gt;just&lt;/code&gt; with a given &lt;code&gt;justfile&lt;/code&gt;, arguments, and environment variables, and checking the program&#39;s stdout, stderr, and exit code .&lt;/p&gt; &#xA;&lt;h3&gt;Contribution Workflow&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the feature is wanted. There should be an open issue about the feature with a comment from &lt;a href=&#34;https://github.com/casey&#34;&gt;@casey&lt;/a&gt; saying that it&#39;s a good idea or seems reasonable. If there isn&#39;t, open a new issue and ask for feedback.&lt;/p&gt; &lt;p&gt;There are lots of good features which can&#39;t be merged, either because they aren&#39;t backwards compatible, have an implementation which would overcomplicate the codebase, or go against &lt;code&gt;just&lt;/code&gt;&#39;s design philosophy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Settle on the design of the feature. If the feature has multiple possible implementations or syntaxes, make sure to nail down the details in the issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone &lt;code&gt;just&lt;/code&gt; and start hacking. The best workflow is to have the code you&#39;re working on in an editor alongside a job that re-runs tests whenever a file changes. You can run such a job by installing &lt;a href=&#34;https://github.com/watchexec/cargo-watch&#34;&gt;cargo-watch&lt;/a&gt; with &lt;code&gt;cargo install cargo-watch&lt;/code&gt; and running &lt;code&gt;just watch test&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a failing test for your feature. Most of the time this will be an integration test which exercises the feature end-to-end. Look for an appropriate file to put the test in in &lt;a href=&#34;https://github.com/casey/just/raw/master/tests&#34;&gt;tests&lt;/a&gt;, or add a new file in &lt;a href=&#34;https://github.com/casey/just/raw/master/tests&#34;&gt;tests&lt;/a&gt; and add a &lt;code&gt;mod&lt;/code&gt; statement importing that file in &lt;a href=&#34;https://github.com/casey/just/raw/master/tests/lib.rs&#34;&gt;tests/lib.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement the feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests, lints, and checks pass.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a PR with the new code that is editable by maintainers. PRs often require rebasing and minor tweaks. If the PR is not editable by maintainers, each rebase and tweak will require a round trip of code review. Your PR may be summarily closed if it is not editable by maintainers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Incorporate feedback.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy the sweet feeling of your PR getting merged!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Feel free to open a draft PR at any time for discussion and feedback.&lt;/p&gt; &#xA;&lt;h3&gt;Hints&lt;/h3&gt; &#xA;&lt;p&gt;Here are some hints to get you started with specific kinds of new features, which you can use in addition to the contribution workflow above.&lt;/p&gt; &#xA;&lt;h4&gt;Adding a New Attribute&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Write a new integration test in &lt;a href=&#34;https://github.com/casey/just/raw/master/tests/attributes.rs&#34;&gt;tests/attributes.rs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a new variant to the &lt;a href=&#34;https://github.com/casey/just/raw/master/src/attribute.rs&#34;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; enum.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement the functionality of the new attribute.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;just ci&lt;/code&gt; to make sure that all tests pass.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Janus&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/casey/janus&#34;&gt;Janus&lt;/a&gt; is a tool for checking whether a change to &lt;code&gt;just&lt;/code&gt; breaks or changes the interpretation of existing &lt;code&gt;justfile&lt;/code&gt;s. It collects and analyzes public &lt;code&gt;justfile&lt;/code&gt;s on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Before merging a particularly large or gruesome change, Janus should be run to make sure that nothing breaks. Don&#39;t worry about running Janus yourself, Casey will happily run it for you on changes that need it.&lt;/p&gt; &#xA;&lt;h3&gt;Minimum Supported Rust Version&lt;/h3&gt; &#xA;&lt;p&gt;The minimum supported Rust version, or MSRV, is current stable Rust. It may build on older versions of Rust, but this is not guaranteed.&lt;/p&gt; &#xA;&lt;h3&gt;New Releases&lt;/h3&gt; &#xA;&lt;p&gt;New releases of &lt;code&gt;just&lt;/code&gt; are made frequently so that users quickly get access to new features.&lt;/p&gt; &#xA;&lt;p&gt;Release commit messages use the following template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Release x.y.z&#xA;&#xA;- Bump version: x.y.z → x.y.z&#xA;- Update changelog&#xA;- Update changelog contributor credits&#xA;- Update dependencies&#xA;- Update version references in readme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;What are the idiosyncrasies of Make that Just avoids?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; has some behaviors which are confusing, complicated, or make it unsuitable for use as a general command runner.&lt;/p&gt; &#xA;&lt;p&gt;One example is that under some circumstances, &lt;code&gt;make&lt;/code&gt; won&#39;t actually run the commands in a recipe. For example, if you have a file called &lt;code&gt;test&lt;/code&gt; and the following makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-just&#34;&gt;test:&#xA;  ./test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; will refuse to run your tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test&#xA;make: `test&#39; is up to date.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; assumes that the &lt;code&gt;test&lt;/code&gt; recipe produces a file called &lt;code&gt;test&lt;/code&gt;. Since this file exists and the recipe has no other dependencies, &lt;code&gt;make&lt;/code&gt; thinks that it doesn&#39;t have anything to do and exits.&lt;/p&gt; &#xA;&lt;p&gt;To be fair, this behavior is desirable when using &lt;code&gt;make&lt;/code&gt; as a build system, but not when using it as a command runner. You can disable this behavior for specific targets using &lt;code&gt;make&lt;/code&gt;&#39;s built-in &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html&#34;&gt;&lt;code&gt;.PHONY&lt;/code&gt; target name&lt;/a&gt;, but the syntax is verbose and can be hard to remember. The explicit list of phony targets, written separately from the recipe definitions, also introduces the risk of accidentally defining a new non-phony target. In &lt;code&gt;just&lt;/code&gt;, all recipes are treated as if they were phony.&lt;/p&gt; &#xA;&lt;p&gt;Other examples of &lt;code&gt;make&lt;/code&gt;&#39;s idiosyncrasies include the difference between &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;:=&lt;/code&gt; in assignments, the confusing error messages that are produced if you mess up your makefile, needing &lt;code&gt;$$&lt;/code&gt; to use environment variables in recipes, and incompatibilities between different flavors of &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s the relationship between Just and Cargo build scripts?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://doc.crates.io/build-script.html&#34;&gt;&lt;code&gt;cargo&lt;/code&gt; build scripts&lt;/a&gt; have a pretty specific use, which is to control how &lt;code&gt;cargo&lt;/code&gt; builds your Rust project. This might include adding flags to &lt;code&gt;rustc&lt;/code&gt; invocations, building an external dependency, or running some kind of codegen step.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;just&lt;/code&gt;, on the other hand, is for all the other miscellaneous commands you might run as part of development. Things like running tests in different configurations, linting your code, pushing build artifacts to a server, removing temporary files, and the like.&lt;/p&gt; &#xA;&lt;p&gt;Also, although &lt;code&gt;just&lt;/code&gt; is written in Rust, it can be used regardless of the language or build system your project uses.&lt;/p&gt; &#xA;&lt;h2&gt;Further Ramblings&lt;/h2&gt; &#xA;&lt;p&gt;I personally find it very useful to write a &lt;code&gt;justfile&lt;/code&gt; for almost every project, big or small.&lt;/p&gt; &#xA;&lt;p&gt;On a big project with multiple contributors, it&#39;s very useful to have a file with all the commands needed to work on the project close at hand.&lt;/p&gt; &#xA;&lt;p&gt;There are probably different commands to test, build, lint, deploy, and the like, and having them all in one place is useful and cuts down on the time you have to spend telling people which commands to run and how to type them.&lt;/p&gt; &#xA;&lt;p&gt;And, with an easy place to put commands, it&#39;s likely that you&#39;ll come up with other useful things which are part of the project&#39;s collective wisdom, but which aren&#39;t written down anywhere, like the arcane commands needed for some part of your revision control workflow, to install all your project&#39;s dependencies, or all the random flags you might need to pass to the build system.&lt;/p&gt; &#xA;&lt;p&gt;Some ideas for recipes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploying/publishing the project&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building in release mode vs debug mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running in debug mode or with logging enabled&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Complex git workflows&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Updating dependencies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running different sets of tests, for example fast tests vs slow tests, or running them with verbose output&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Any complex set of commands that you really should write down somewhere, if only to be able to remember them&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Even for small, personal projects it&#39;s nice to be able to remember commands by name instead of ^Reverse searching your shell history, and it&#39;s a huge boon to be able to go into an old project written in a random language with a mysterious build system and know that all the commands you need to do whatever you need to do are in the &lt;code&gt;justfile&lt;/code&gt;, and that if you type &lt;code&gt;just&lt;/code&gt; something useful (or at least interesting!) will probably happen.&lt;/p&gt; &#xA;&lt;p&gt;For ideas for recipes, check out &lt;a href=&#34;https://github.com/casey/just/raw/master/justfile&#34;&gt;this project&#39;s &lt;code&gt;justfile&lt;/code&gt;&lt;/a&gt;, or some of the &lt;code&gt;justfile&lt;/code&gt;s &lt;a href=&#34;https://github.com/search?q=path%3A**%2Fjustfile&amp;amp;type=code&#34;&gt;out in the wild&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyways, I think that&#39;s about it for this incredibly long-winded README.&lt;/p&gt; &#xA;&lt;p&gt;I hope you enjoy using &lt;code&gt;just&lt;/code&gt; and find great success and satisfaction in all your computational endeavors!&lt;/p&gt; &#xA;&lt;p&gt;😸&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>termux/termux-app</title>
    <updated>2024-08-26T01:28:07Z</updated>
    <id>tag:github.com,2024-08-26:/termux/termux-app</id>
    <link href="https://github.com/termux/termux-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Termux - a terminal emulator application for Android OS extendible by variety of packages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Termux application&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/termux/termux-app/actions&#34;&gt;&lt;img src=&#34;https://github.com/termux/termux-app/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/termux/termux-app/actions&#34;&gt;&lt;img src=&#34;https://github.com/termux/termux-app/workflows/Unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Testing status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/termux/termux&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/termux/termux.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/termux/termux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/HXpF69X&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/641256914684084234.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=5865F2&#34; alt=&#34;Join the Termux discord server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#termux/termux-app&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/termux/termux-app.svg?sanitize=true&#34; alt=&#34;Termux library releases at Jitpack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://termux.com&#34;&gt;Termux&lt;/a&gt; is an Android terminal application and Linux environment.&lt;/p&gt; &#xA;&lt;p&gt;Note that this repository is for the app itself (the user interface and the terminal emulation). For the packages installable inside the app, see &lt;a href=&#34;https://github.com/termux/termux-packages&#34;&gt;termux/termux-packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Quick how-to about Termux package management is available at &lt;a href=&#34;https://github.com/termux/termux-packages/wiki/Package-Management&#34;&gt;Package Management&lt;/a&gt;. It also has info on how to fix &lt;strong&gt;&lt;code&gt;repository is under maintenance or down&lt;/code&gt;&lt;/strong&gt; errors when running &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;pkg&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We are looking for Termux Android application maintainers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTICE: Termux may be unstable on Android 12+.&lt;/strong&gt; Android OS will kill any (phantom) processes greater than 32 (limit is for all apps combined) and also kill any processes using excessive CPU. You may get &lt;code&gt;[Process completed (signal 9) - press Enter]&lt;/code&gt; message in the terminal without actually exiting the shell process yourself. Check the related issue &lt;a href=&#34;https://github.com/termux/termux-app/issues/2366&#34;&gt;#2366&lt;/a&gt;, &lt;a href=&#34;https://issuetracker.google.com/u/1/issues/205156966&#34;&gt;issue tracker&lt;/a&gt;, &lt;a href=&#34;https://github.com/agnostic-apollo/Android-Docs/raw/master/en/docs/apps/processes/phantom-cached-and-empty-processes.md&#34;&gt;phantom cached and empty processes docs&lt;/a&gt; and &lt;a href=&#34;https://github.com/termux/termux-app/issues/2366#issuecomment-1237468220&#34;&gt;this TLDR comment&lt;/a&gt; on how to disable trimming of phantom and excessive cpu usage processes. A proper docs page will be added later. An option to disable the killing should be available in Android 12L or 13, so upgrade at your own risk if you are on Android 11, specially if you are not rooted.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#termux-app-and-plugins&#34;&gt;Termux App and Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#uninstallation&#34;&gt;Uninstallation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#important-links&#34;&gt;Important Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#for-maintainers-and-contributors&#34;&gt;For Maintainers and Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#forking&#34;&gt;Forking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Termux App and Plugins&lt;/h2&gt; &#xA;&lt;p&gt;The core &lt;a href=&#34;https://github.com/termux/termux-app&#34;&gt;Termux&lt;/a&gt; app comes with the following optional plugin apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-api&#34;&gt;Termux:API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-boot&#34;&gt;Termux:Boot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-float&#34;&gt;Termux:Float&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-styling&#34;&gt;Termux:Styling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-tasker&#34;&gt;Termux:Tasker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-widget&#34;&gt;Termux:Widget&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Latest version is &lt;code&gt;v0.118.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTICE: It is highly recommended that you update to &lt;code&gt;v0.118.0&lt;/code&gt; or higher ASAP for various bug fixes, including a critical world-readable vulnerability reported &lt;a href=&#34;https://termux.github.io/general/2022/02/15/termux-apps-vulnerability-disclosures.html&#34;&gt;here&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#google-play-store-experimental-branch&#34;&gt;below&lt;/a&gt; for information regarding Termux on Google Play.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Termux can be obtained through various sources listed below for &lt;strong&gt;only&lt;/strong&gt; Android &lt;code&gt;&amp;gt;= 7&lt;/code&gt; with full support for apps and packages.&lt;/p&gt; &#xA;&lt;p&gt;Support for both app and packages was dropped for Android &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt; on &lt;a href=&#34;https://www.reddit.com/r/termux/comments/dnzdbs/end_of_android56_support_on_20200101/&#34;&gt;2020-01-01&lt;/a&gt; at &lt;code&gt;v0.83&lt;/code&gt;, however it was re-added just for the app &lt;em&gt;without any support for package updates&lt;/em&gt; on &lt;a href=&#34;https://github.com/termux/termux-app/pull/2740&#34;&gt;2022-05-24&lt;/a&gt; via the &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#github&#34;&gt;GitHub&lt;/a&gt; sources. Check &lt;a href=&#34;https://github.com/termux/termux-app/wiki/Termux-on-android-5-or-6&#34;&gt;here&lt;/a&gt; for the details.&lt;/p&gt; &#xA;&lt;p&gt;The APK files of different sources are signed with different signature keys. The &lt;code&gt;Termux&lt;/code&gt; app and all its plugins use the same &lt;a href=&#34;https://developer.android.com/guide/topics/manifest/manifest-element&#34;&gt;&lt;code&gt;sharedUserId&lt;/code&gt;&lt;/a&gt; &lt;code&gt;com.termux&lt;/code&gt; and so all their APKs installed on a device must have been signed with the same signature key to work together and so they must all be installed from the same source. Do not attempt to mix them together, i.e do not try to install an app or plugin from &lt;code&gt;F-Droid&lt;/code&gt; and another one from a different source like &lt;code&gt;GitHub&lt;/code&gt;. Android Package Manager will also normally not allow installation of APKs with different signatures and you will get errors on installation like &lt;code&gt;App not installed&lt;/code&gt;, &lt;code&gt;Failed to install due to an unknown error&lt;/code&gt;, &lt;code&gt;INSTALL_FAILED_UPDATE_INCOMPATIBLE&lt;/code&gt;, &lt;code&gt;INSTALL_FAILED_SHARED_USER_INCOMPATIBLE&lt;/code&gt;, &lt;code&gt;signatures do not match previously installed version&lt;/code&gt;, etc. This restriction can be bypassed with root or with custom roms.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to install from a different source, then you must &lt;strong&gt;uninstall any and all existing Termux or its plugin app APKs&lt;/strong&gt; from your device first, then install all new APKs from the same new source. Check &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#uninstallation&#34;&gt;Uninstallation&lt;/a&gt; section for details. You may also want to consider &lt;a href=&#34;https://wiki.termux.com/wiki/Backing_up_Termux&#34;&gt;Backing up Termux&lt;/a&gt; before the uninstallation so that you can restore it after re-installing from Termux different source.&lt;/p&gt; &#xA;&lt;p&gt;In the following paragraphs, &lt;em&gt;&#34;bootstrap&#34;&lt;/em&gt; refers to the minimal packages that are shipped with the &lt;code&gt;termux-app&lt;/code&gt; itself to start a working shell environment. Its zips are built and released &lt;a href=&#34;https://github.com/termux/termux-packages/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;F-Droid&lt;/h3&gt; &#xA;&lt;p&gt;Termux application can be obtained from &lt;code&gt;F-Droid&lt;/code&gt; from &lt;a href=&#34;https://f-droid.org/en/packages/com.termux/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; need to download the &lt;code&gt;F-Droid&lt;/code&gt; app (via the &lt;code&gt;Download F-Droid&lt;/code&gt; link) to install Termux. You can download the Termux APK directly from the site by clicking the &lt;code&gt;Download APK&lt;/code&gt; link at the bottom of each version section.&lt;/p&gt; &#xA;&lt;p&gt;It usually takes a few days (or even a week or more) for updates to be available on &lt;code&gt;F-Droid&lt;/code&gt; once an update has been released on &lt;code&gt;GitHub&lt;/code&gt;. The &lt;code&gt;F-Droid&lt;/code&gt; releases are built and published by &lt;code&gt;F-Droid&lt;/code&gt; once they &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/-/blob/master/metadata/com.termux.yml&#34;&gt;detect&lt;/a&gt; a new &lt;code&gt;GitHub&lt;/code&gt; release. The Termux maintainers &lt;strong&gt;do not&lt;/strong&gt; have any control over the building and publishing of the Termux apps on &lt;code&gt;F-Droid&lt;/code&gt;. Moreover, the Termux maintainers also do not have access to the APK signing keys of &lt;code&gt;F-Droid&lt;/code&gt; releases, so we cannot release an APK ourselves on &lt;code&gt;GitHub&lt;/code&gt; that would be compatible with &lt;code&gt;F-Droid&lt;/code&gt; releases.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;F-Droid&lt;/code&gt; app often may not notify you of updates and you will manually have to do a pull down swipe action in the &lt;code&gt;Updates&lt;/code&gt; tab of the app for it to check updates. Make sure battery optimizations are disabled for the app, check &lt;a href=&#34;https://dontkillmyapp.com/&#34;&gt;https://dontkillmyapp.com/&lt;/a&gt; for details on how to do that.&lt;/p&gt; &#xA;&lt;p&gt;Only a universal APK is released, which will work on all supported architectures. The APK and bootstrap installation size will be &lt;code&gt;~180MB&lt;/code&gt;. &lt;code&gt;F-Droid&lt;/code&gt; does &lt;a href=&#34;https://github.com/termux/termux-app/pull/1904&#34;&gt;not support&lt;/a&gt; architecture specific APKs.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub&lt;/h3&gt; &#xA;&lt;p&gt;Termux application can be obtained on &lt;code&gt;GitHub&lt;/code&gt; either from &lt;a href=&#34;https://github.com/termux/termux-app/releases&#34;&gt;&lt;code&gt;GitHub Releases&lt;/code&gt;&lt;/a&gt; for version &lt;code&gt;&amp;gt;= 0.118.0&lt;/code&gt; or from &lt;a href=&#34;https://github.com/termux/termux-app/actions/workflows/debug_build.yml?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;code&gt;GitHub Build Action&lt;/code&gt;&lt;/a&gt; workflows. &lt;strong&gt;For android &lt;code&gt;&amp;gt;= 7&lt;/code&gt;, only install &lt;code&gt;apt-android-7&lt;/code&gt; variants. For android &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt;, only install &lt;code&gt;apt-android-5&lt;/code&gt; variants.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The APKs for &lt;code&gt;GitHub Releases&lt;/code&gt; will be listed under &lt;code&gt;Assets&lt;/code&gt; drop-down of a release. These are automatically attached when a new version is released.&lt;/p&gt; &#xA;&lt;p&gt;The APKs for &lt;code&gt;GitHub Build&lt;/code&gt; action workflows will be listed under &lt;code&gt;Artifacts&lt;/code&gt; section of a workflow run. These are created for each commit/push done to the repository and can be used by users who don&#39;t want to wait for releases and want to try out the latest features immediately or want to test their pull requests. Note that for action workflows, you need to be &lt;a href=&#34;https://github.com/login&#34;&gt;&lt;strong&gt;logged into a &lt;code&gt;GitHub&lt;/code&gt; account&lt;/strong&gt;&lt;/a&gt; for the &lt;code&gt;Artifacts&lt;/code&gt; links to be enabled/clickable. If you are using the &lt;a href=&#34;https://github.com/mobile&#34;&gt;&lt;code&gt;GitHub&lt;/code&gt; app&lt;/a&gt;, then make sure to open workflow link in a browser like Chrome or Firefox that has your GitHub account logged in since the in-app browser may not be logged in.&lt;/p&gt; &#xA;&lt;p&gt;The APKs for both of these are &lt;a href=&#34;https://developer.android.com/studio/debug&#34;&gt;&lt;code&gt;debuggable&lt;/code&gt;&lt;/a&gt; and are compatible with each other but they are not compatible with other sources.&lt;/p&gt; &#xA;&lt;p&gt;Both universal and architecture specific APKs are released. The APK and bootstrap installation size will be &lt;code&gt;~180MB&lt;/code&gt; if using universal and &lt;code&gt;~120MB&lt;/code&gt; if using architecture specific. Check &lt;a href=&#34;https://github.com/termux/termux-app/issues/2153&#34;&gt;here&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security warning&lt;/strong&gt;: APK files on GitHub are signed with a test key that has been &lt;a href=&#34;https://github.com/termux/termux-app/raw/master/app/testkey_untrusted.jks&#34;&gt;shared with community&lt;/a&gt;. This IS NOT an official developer key and everyone can use it to generate releases for own testing. Be very careful when using Termux GitHub builds obtained elsewhere except &lt;a href=&#34;https://github.com/termux/termux-app&#34;&gt;https://github.com/termux/termux-app&lt;/a&gt;. Everyone is able to use it to forge a malicious Termux update installable over the GitHub build. Think twice about installing Termux builds distributed via Telegram or other social media. If your device get caught by malware, we will not be able to help you.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/termux/termux-app/raw/master/app/testkey_untrusted.jks&#34;&gt;test key&lt;/a&gt; shall not be used to impersonate @termux and can&#39;t be used for this anyway. This key is not trusted by us and it is quite easy to detect its use in user generated content.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Keystore information&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;Alias name: alias&#xA;Creation date: Oct 4, 2019&#xA;Entry type: PrivateKeyEntry&#xA;Certificate chain length: 1&#xA;Certificate[1]:&#xA;Owner: CN=APK Signer, OU=Earth, O=Earth&#xA;Issuer: CN=APK Signer, OU=Earth, O=Earth&#xA;Serial number: 29be297b&#xA;Valid from: Wed Sep 04 02:03:24 EEST 2019 until: Tue Oct 26 02:03:24 EEST 2049&#xA;Certificate fingerprints:&#xA;         SHA1: 51:79:55:EA:BF:69:FC:05:7C:41:C7:D3:79:DB:BC:EF:20:AD:85:F2&#xA;         SHA256: B6:DA:01:48:0E:EF:D5:FB:F2:CD:37:71:B8:D1:02:1E:C7:91:30:4B:DD:6C:4B:F4:1D:3F:AA:BA:D4:8E:E5:E1&#xA;Signature algorithm name: SHA1withRSA (disabled)&#xA;Subject Public Key Algorithm: 2048-bit RSA key&#xA;Version: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Google Play Store &lt;strong&gt;(Experimental branch)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There is currently a build of Termux available on Google Play for Android 11+ devices, with extensive adjustments in order to pass policy requirements there. This is under development and has missing functionality and bugs (see &lt;a href=&#34;https://github.com/termux-play-store/&#34;&gt;here&lt;/a&gt; for status updates) compared to the stable F-Droid build, which is why most users who can should still use F-Droid or GitHub build as mentioned above.&lt;/p&gt; &#xA;&lt;p&gt;Currently, Google Play will try to update installations away from F-Droid ones. Updating will still fail as &lt;a href=&#34;https://developer.android.com/guide/topics/manifest/manifest-element#uid&#34;&gt;sharedUserId&lt;/a&gt; has been removed. A planned 0.118.1 F-Droid release will fix this by setting a higher version code than used for the PlayStore app. Meanwhile, to prevent Google Play from attempting to download and then fail to install the Google Play releases over existing installations, you can open the Termux apps pages on Google Play and then click on the 3 dots options button in the top right and then disable the Enable auto update toggle. However, the Termux apps updates will still show in the PlayStore app updates list.&lt;/p&gt; &#xA;&lt;p&gt;If you want to help out with testing the Google Play build (or cannot install Termux from other sources), be aware that it&#39;s built from a separate repository (&lt;a href=&#34;https://github.com/termux-play-store/&#34;&gt;https://github.com/termux-play-store/&lt;/a&gt;) - be sure to report issues &lt;a href=&#34;https://github.com/termux-play-store/termux-issues/issues/new/choose&#34;&gt;there&lt;/a&gt;, as any issues encountered might very well be specific to that repository.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;p&gt;Uninstallation may be required if a user doesn&#39;t want Termux installed in their device anymore or is switching to a different &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#installation&#34;&gt;install source&lt;/a&gt;. You may also want to consider &lt;a href=&#34;https://wiki.termux.com/wiki/Backing_up_Termux&#34;&gt;Backing up Termux&lt;/a&gt; before the uninstallation.&lt;/p&gt; &#xA;&lt;p&gt;To uninstall Termux completely, you must uninstall &lt;strong&gt;any and all existing Termux or its plugin app APKs&lt;/strong&gt; listed in &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/#termux-app-and-plugins&#34;&gt;Termux App and Plugins&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;Android Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Applications&lt;/code&gt; and then look for those apps. You can also use the search feature if it’s available on your device and search &lt;code&gt;termux&lt;/code&gt; in the applications list.&lt;/p&gt; &#xA;&lt;p&gt;Even if you think you have not installed any of the plugins, it&#39;s strongly suggested to go through the application list in Android settings and double-check.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Important Links&lt;/h2&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;All community links are available &lt;a href=&#34;https://wiki.termux.com/wiki/Community&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main ones are the following.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reddit.com/r/termux&#34;&gt;Termux Reddit community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/%23termux_termux:gitter.im&#34;&gt;Termux User Matrix Channel&lt;/a&gt; (&lt;a href=&#34;https://gitter.im/termux/termux&#34;&gt;Gitter&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/%23termux_dev:gitter.im&#34;&gt;Termux Dev Matrix Channel&lt;/a&gt; (&lt;a href=&#34;https://gitter.im/termux/dev&#34;&gt;Gitter&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/termuxdevs&#34;&gt;Termux X (Twitter)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:support@termux.dev&#34;&gt;Termux Support Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wikis&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/&#34;&gt;Termux Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-app/wiki&#34;&gt;Termux App Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-packages/wiki&#34;&gt;Termux Packages Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-packages/wiki/Termux-file-system-layout&#34;&gt;Termux File System Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Differences_from_Linux&#34;&gt;Differences From Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Package_Management&#34;&gt;Package Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Remote_Access&#34;&gt;Remote Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Backing_up_Termux&#34;&gt;Backing up Termux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Terminal_Settings&#34;&gt;Terminal Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Touch_Keyboard&#34;&gt;Touch Keyboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Internal_and_external_storage&#34;&gt;Android Storage and Sharing Data with Other Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.termux.com/wiki/Termux:API&#34;&gt;Android APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-packages/issues/6348&#34;&gt;Moved Termux Packages Hosting From Bintray to IPFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-app/wiki/RUN_COMMAND-Intent&#34;&gt;Running Commands in Termux From Other Apps via &lt;code&gt;RUN_COMMAND&lt;/code&gt; intent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-packages/wiki/Termux-and-Android-10&#34;&gt;Termux and Android 10&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Terminal&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Terminal resources&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&#34;&gt;XTerm control sequences&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://vt100.net/&#34;&gt;vt100.net&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://wiki.bash-hackers.org/scripting/terminalcodes&#34;&gt;Terminal codes (ANSI and terminfo equivalents)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Terminal emulators&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;VTE (libvte): Terminal emulator widget for GTK+, mainly used in gnome-terminal. &lt;a href=&#34;https://github.com/GNOME/vte&#34;&gt;Source&lt;/a&gt;, &lt;a href=&#34;https://bugzilla.gnome.org/buglist.cgi?quicksearch=product%3A%22vte%22+&#34;&gt;Open Issues&lt;/a&gt;, and &lt;a href=&#34;https://bugzilla.gnome.org/buglist.cgi?bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;chfield=resolution&amp;amp;chfieldfrom=-2000d&amp;amp;chfieldvalue=FIXED&amp;amp;product=vte&amp;amp;resolution=FIXED&#34;&gt;All (including closed) issues&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;iTerm 2: OS X terminal application. &lt;a href=&#34;https://github.com/gnachman/iTerm2&#34;&gt;Source&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/gnachman/iterm2/issues&#34;&gt;Issues&lt;/a&gt; and &lt;a href=&#34;https://iterm2.com/documentation.html&#34;&gt;Documentation&lt;/a&gt; (which includes &lt;a href=&#34;https://iterm2.com/documentation-escape-codes.html&#34;&gt;iTerm2 proprietary escape codes&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Konsole: KDE terminal application. &lt;a href=&#34;https://projects.kde.org/projects/kde/applications/konsole/repository&#34;&gt;Source&lt;/a&gt;, in particular &lt;a href=&#34;https://projects.kde.org/projects/kde/applications/konsole/repository/revisions/master/show/tests&#34;&gt;tests&lt;/a&gt;, &lt;a href=&#34;https://bugs.kde.org/buglist.cgi?bug_severity=critical&amp;amp;bug_severity=grave&amp;amp;bug_severity=major&amp;amp;bug_severity=crash&amp;amp;bug_severity=normal&amp;amp;bug_severity=minor&amp;amp;bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;product=konsole&#34;&gt;Bugs&lt;/a&gt; and &lt;a href=&#34;https://bugs.kde.org/buglist.cgi?bug_severity=wishlist&amp;amp;bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;product=konsole&#34;&gt;Wishes&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;hterm: JavaScript terminal implementation from Chromium. &lt;a href=&#34;https://github.com/chromium/hterm&#34;&gt;Source&lt;/a&gt;, including &lt;a href=&#34;https://github.com/chromium/hterm/raw/master/js/hterm_vt_tests.js&#34;&gt;tests&lt;/a&gt;, and &lt;a href=&#34;https://groups.google.com/a/chromium.org/forum/#!forum/chromium-hterm&#34;&gt;Google group&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;xterm: The grandfather of terminal emulators. &lt;a href=&#34;https://invisible-island.net/datafiles/release/xterm.tar.gz&#34;&gt;Source&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Connectbot: Android SSH client. &lt;a href=&#34;https://github.com/connectbot/connectbot&#34;&gt;Source&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Android Terminal Emulator: Android terminal app which Termux terminal handling is based on. Inactive. &lt;a href=&#34;https://github.com/jackpal/Android-Terminal-Emulator&#34;&gt;Source&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;You can help debug problems of the &lt;code&gt;Termux&lt;/code&gt; app and its plugins by setting appropriate &lt;code&gt;logcat&lt;/code&gt; &lt;code&gt;Log Level&lt;/code&gt; in &lt;code&gt;Termux&lt;/code&gt; app settings -&amp;gt; &lt;code&gt;&amp;lt;APP_NAME&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;Debugging&lt;/code&gt; -&amp;gt; &lt;code&gt;Log Level&lt;/code&gt; (Requires &lt;code&gt;Termux&lt;/code&gt; app version &lt;code&gt;&amp;gt;= 0.118.0&lt;/code&gt;). The &lt;code&gt;Log Level&lt;/code&gt; defaults to &lt;code&gt;Normal&lt;/code&gt; and log level &lt;code&gt;Verbose&lt;/code&gt; currently logs additional information. Its best to revert log level to &lt;code&gt;Normal&lt;/code&gt; after you have finished debugging since private data may otherwise be passed to &lt;code&gt;logcat&lt;/code&gt; during normal operation and moreover, additional logging increases execution time.&lt;/p&gt; &#xA;&lt;p&gt;The plugin apps &lt;strong&gt;do not execute the commands themselves&lt;/strong&gt; but send execution intents to &lt;code&gt;Termux&lt;/code&gt; app, which has its own log level which can be set in &lt;code&gt;Termux&lt;/code&gt; app settings -&amp;gt; &lt;code&gt;Termux&lt;/code&gt; -&amp;gt; &lt;code&gt;Debugging&lt;/code&gt; -&amp;gt; &lt;code&gt;Log Level&lt;/code&gt;. So you must set log level for both &lt;code&gt;Termux&lt;/code&gt; and the respective plugin app settings to get all the info.&lt;/p&gt; &#xA;&lt;p&gt;Once log levels have been set, you can run the &lt;code&gt;logcat&lt;/code&gt; command in &lt;code&gt;Termux&lt;/code&gt; app terminal to view the logs in realtime (&lt;code&gt;Ctrl+c&lt;/code&gt; to stop) or use &lt;code&gt;logcat -d &amp;gt; logcat.txt&lt;/code&gt; to take a dump of the log. You can also view the logs from a PC over &lt;code&gt;ADB&lt;/code&gt;. For more information, check official android &lt;code&gt;logcat&lt;/code&gt; guide &lt;a href=&#34;https://developer.android.com/studio/command-line/logcat&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, users can generate termux files &lt;code&gt;stat&lt;/code&gt; info and &lt;code&gt;logcat&lt;/code&gt; dump automatically too with terminal&#39;s long hold options menu &lt;code&gt;More&lt;/code&gt; -&amp;gt; &lt;code&gt;Report Issue&lt;/code&gt; option and selecting &lt;code&gt;YES&lt;/code&gt; in the prompt shown to add debug info. This can be helpful for reporting and debugging other issues. If the report generated is too large, then &lt;code&gt;Save To File&lt;/code&gt; option in context menu (3 dots on top right) of &lt;code&gt;ReportActivity&lt;/code&gt; can be used and the file viewed/shared instead.&lt;/p&gt; &#xA;&lt;p&gt;Users must post complete report (optionally without sensitive info) when reporting issues. Issues opened with &lt;strong&gt;(partial) screenshots of error reports&lt;/strong&gt; instead of text will likely be automatically closed/deleted.&lt;/p&gt; &#xA;&lt;h5&gt;Log Levels&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Off&lt;/code&gt; - Log nothing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Normal&lt;/code&gt; - Start logging error, warn and info messages and stacktraces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt; - Start logging debug messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Verbose&lt;/code&gt; - Start logging verbose messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;For Maintainers and Contributors&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/termux-shared&#34;&gt;termux-shared&lt;/a&gt; library was added in &lt;a href=&#34;https://github.com/termux/termux-app/releases/tag/v0.109&#34;&gt;&lt;code&gt;v0.109&lt;/code&gt;&lt;/a&gt;. It defines shared constants and utils of the Termux app and its plugins. It was created to allow for the removal of all hardcoded paths in the Termux app. Some of the termux plugins are using this as well and rest will in future. If you are contributing code that is using a constant or a util that may be shared, then define it in &lt;code&gt;termux-shared&lt;/code&gt; library if it currently doesn&#39;t exist and reference it from there. Update the relevant changelogs as well. Pull requests using hardcoded values &lt;strong&gt;will/should not&lt;/strong&gt; be accepted. Termux app and plugin specific classes must be added under &lt;code&gt;com.termux.shared.termux&lt;/code&gt; package and general classes outside it. The &lt;a href=&#34;https://raw.githubusercontent.com/termux/termux-app/master/termux-shared/LICENSE.md&#34;&gt;&lt;code&gt;termux-shared&lt;/code&gt; &lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; must also be checked and updated if necessary when contributing code. The licenses of any external library or code must be honoured.&lt;/p&gt; &#xA;&lt;p&gt;The main Termux constants are defined by &lt;a href=&#34;https://github.com/termux/termux-app/raw/master/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java&#34;&gt;&lt;code&gt;TermuxConstants&lt;/code&gt;&lt;/a&gt; class. It also contains information on how to fork Termux or build it with your own package name. Changing the package name will require building the bootstrap zip packages and other packages with the new &lt;code&gt;$PREFIX&lt;/code&gt;, check &lt;a href=&#34;https://github.com/termux/termux-packages/wiki/Building-packages&#34;&gt;Building Packages&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/termux/termux-app/wiki/Termux-Libraries&#34;&gt;Termux Libraries&lt;/a&gt; for how to import termux libraries in plugin apps and &lt;a href=&#34;https://github.com/termux/termux-app/wiki/Termux-Libraries#forking-and-local-development&#34;&gt;Forking and Local Development&lt;/a&gt; for how to update termux libraries for plugins.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;versionName&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; files of Termux and its plugin apps must follow the &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;semantic version &lt;code&gt;2.0.0&lt;/code&gt; spec&lt;/a&gt; in the format &lt;code&gt;major.minor.patch(-prerelease)(+buildmetadata)&lt;/code&gt;. When bumping &lt;code&gt;versionName&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; files and when creating a tag for new releases on GitHub, make sure to include the patch number as well, like &lt;code&gt;v0.1.0&lt;/code&gt; instead of just &lt;code&gt;v0.1&lt;/code&gt;. The &lt;code&gt;build.gradle&lt;/code&gt; files and &lt;code&gt;attach_debug_apks_to_release&lt;/code&gt; workflow validates the version as well and the build/attachment will fail if &lt;code&gt;versionName&lt;/code&gt; does not follow the spec.&lt;/p&gt; &#xA;&lt;h3&gt;Commit Messages Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;Commit messages &lt;strong&gt;must&lt;/strong&gt; use the &lt;a href=&#34;https://www.conventionalcommits.org&#34;&gt;Conventional Commits&lt;/a&gt; spec so that chagelogs as per the &lt;a href=&#34;https://github.com/olivierlacan/keep-a-changelog&#34;&gt;Keep a Changelog&lt;/a&gt; spec can automatically be generated by the &lt;a href=&#34;https://github.com/termux/create-conventional-changelog&#34;&gt;&lt;code&gt;create-conventional-changelog&lt;/code&gt;&lt;/a&gt; script, check its repo for further details on the spec. &lt;strong&gt;The first letter for &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; must be capital and description should be in the present tense.&lt;/strong&gt; The space after the colon &lt;code&gt;:&lt;/code&gt; is necessary. For a breaking change, add an exclamation mark &lt;code&gt;!&lt;/code&gt; before the colon &lt;code&gt;:&lt;/code&gt;, so that it is highlighted in the chagelog automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt;&#xA;&#xA;[optional body]&#xA;&#xA;[optional footer(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Only the &lt;code&gt;types&lt;/code&gt; listed below must be used exactly as they are used in the changelog headings.&lt;/strong&gt; For example, &lt;code&gt;Added: Add foo&lt;/code&gt;, &lt;code&gt;Added|Fixed: Add foo and fix bar&lt;/code&gt;, &lt;code&gt;Changed!: Change baz as a breaking change&lt;/code&gt;, etc. You can optionally add a scope as well, like &lt;code&gt;Fixed(terminal): Fix some bug&lt;/code&gt;. &lt;strong&gt;Do not use anything else as type, like &lt;code&gt;add&lt;/code&gt; instead of &lt;code&gt;Added&lt;/code&gt;, etc.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Added&lt;/strong&gt; for new features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Changed&lt;/strong&gt; for changes in existing functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deprecated&lt;/strong&gt; for soon-to-be removed features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Removed&lt;/strong&gt; for now removed features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fixed&lt;/strong&gt; for any bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; in case of vulnerabilities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Forking&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/termux/termux-app/raw/master/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java&#34;&gt;&lt;code&gt;TermuxConstants&lt;/code&gt;&lt;/a&gt; javadocs for instructions on what changes to make in the app to change package name.&lt;/li&gt; &#xA; &lt;li&gt;You also need to recompile bootstrap zip for the new package name. Check &lt;a href=&#34;https://github.com/termux/termux-packages/wiki/For-maintainers#build-bootstrap-archives&#34;&gt;building bootstrap&lt;/a&gt;, &lt;a href=&#34;https://github.com/termux/termux-app/issues/1983&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/termux/termux-app/issues/2081#issuecomment-865280111&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Currently, not all plugins use &lt;code&gt;TermuxConstants&lt;/code&gt; from &lt;code&gt;termux-shared&lt;/code&gt; library and have hardcoded &lt;code&gt;com.termux&lt;/code&gt; values and will need to be manually patched.&lt;/li&gt; &#xA; &lt;li&gt;If forking termux plugins, check &lt;a href=&#34;https://github.com/termux/termux-app/wiki/Termux-Libraries#forking-and-local-development&#34;&gt;Forking and Local Development&lt;/a&gt; for info on how to use termux libraries for plugins.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>