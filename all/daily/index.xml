<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-27T01:22:44Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Project-DARC/DARC</title>
    <updated>2024-03-27T01:22:44Z</updated>
    <id>tag:github.com,2024-03-27:/Project-DARC/DARC</id>
    <link href="https://github.com/Project-DARC/DARC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decentralized Autonomous Regulated Company (DARC), a company virtual machine that runs on any EVM-compatible blockchain, with on-chain law system, multi-level tokens and dividends mechanism.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Decentralized Autonomous Regulated Company (DARC)&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the official repository for the Decentralized Autonomous Regulated Company (DARC) project. DARC is a project that aims to create a decentralized autonomous company that is regulated by a plugin system based on commercial laws. The project is currently in the early stages of development and is not yet ready for production use.&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/Project-DARC/DARC/main/README_cn.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Project-DARC/DARC/main/README_ja.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#project-darc/darc&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=project-darc/darc&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Join our community&lt;/h2&gt; &#xA;&lt;p&gt;Telegram: &lt;a href=&#34;https://t.me/projectdarc&#34;&gt;https://t.me/projectdarc&lt;/a&gt; Discord: &lt;a href=&#34;https://discord.gg/QzKbTHVgGG&#34;&gt;https://discord.gg/QzKbTHVgGG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Whitepaper&lt;/h2&gt; &#xA;&lt;p&gt;English: &lt;a href=&#34;https://github.com/Project-DARC/DARC-whitepaper/raw/release/darc-whitepaper.pdf&#34;&gt;darc-whitepaper.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chinese(中文版): &lt;a href=&#34;https://github.com/Project-DARC/DARC-whitepaper/raw/release/darc-whitepaper-cn.pdf&#34;&gt;darc-whitepaper-cn.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is DARC?&lt;/h2&gt; &#xA;&lt;p&gt;Decentralized Autonomous Regulated Company (DARC) is a company virtual machine that can be compiled and deployed to EVM-compatible blockchains with following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-level tokens&lt;/strong&gt;, each level token can be used as common stock, preferred stock, convertible bonds, board of directors, product tokens, non-fungible tokens (NFT), with different prices, voting power and dividend power, which are defined by the company&#39;s plugin(law) system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt; composed of a series of DARC instructions that include managing tokens, dividends, voting, legislation, purchasing, withdrawing cash, and other company operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dividend Mechanism&lt;/strong&gt; for distributing dividends to token holders according to certain rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugin-as-a-Law&lt;/strong&gt;.The plugin system serves as the by-law or commercial contract that supervises all operations. All company operations need to be approved by the plugin system or corresponding voting process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;By-Law Script&lt;/h2&gt; &#xA;&lt;p&gt;By-law script is a JavaScript-like programming language that is used to define the company&#39;s commercial rules and operations on DARC. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;mint_tokens(   // mint token operation&#xA;    [addr1, addr2, addr3],   // token address&#xA;    [0, 0, 0],   // token class &#xA;    [500, 300, 200]  // number of tokens&#xA;);&#xA;&#xA;pay_cash(100000000, 0, 1); // pay 0.1 ETH as purchase&#xA;&#xA;transfer_tokens(   // transfer token operation&#xA;    [addr1, addr2, addr3],   // token address&#xA;    [0, 0, 0],   // token class &#xA;    [100, 100, 200]  // number of tokens&#xA;);&#xA;&#xA;add_withdraw_cash(10000000);  // add 0.01 ETH to withdraw balance&#xA;&#xA;withdraw_cash_to(  // withdraw cash from my account to other address&#xA;    [addr4, addr5],       // withdraw cash to addr4, addr5&#xA;    [10000000, 10000000]  // withdraw amount 0.01 ETH, 0.01 ETH&#xA;);&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above By-law Script will be transpiled via code generator and sent to corresponding DARC VM contract. The DARC will execute the program if the plugin system approves. To add plugin and voting rules to the DARC, we can simple compose the plugin conditions and voting rules, then send them via operation &lt;code&gt;add_voting_rule()&lt;/code&gt;, &lt;code&gt;add_and_enable_plugins()&lt;/code&gt; or &lt;code&gt;add_plugins()&lt;/code&gt;, and they will be deployed and effective immediately if the current plugin system approves the operation.&lt;/p&gt; &#xA;&lt;p&gt;Here is a quick example, assume we need to limit the transfer of tokens by major shareholders (&amp;gt;25%) by asking the board of directors for an all-hand vote (assuming 5 tokens in total), and it requires 100% approval (5 out of 5) in 1 hour. We can add a new plugin and corresponding voting rule to the DARC VM contract:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;add_voting_rule(  // add a voting rule (as index 5)&#xA;    [&#xA;        {&#xA;            voting_class: [1], // voting token class: 1, level-1 token owners (board of directors) are required to vote&#xA;            approve_percentage: 99,  // 99% voting power is required to approve&#xA;            voting_duration: 3600,  // voting duration: 1 hour (3600 seconds)&#xA;            execute_duration: 3600,  // pending duration for execution: 1 hour (3600 seconds)&#xA;            is_absolute_majority: true,  // absolute majority is required, not relative majority&#xA;        }&#xA;    ]&#xA;)&#xA;&#xA;add_and_enable_plugins(   // add and enable plugins (as index 7)&#xA;    [&#xA;        {&#xA;            condition:  // define the condition:&#xA;                (operation == &#34;transfer_tokens&#34;)   // if operation is transfer_tokens&#xA;                &amp;amp; (operator_total_voting_power_percentage &amp;gt; 25),  // and addr1&#39;s voting power &amp;gt; 25%&#xA;            return_type: voting_needed,  // return type: requires a vote&#xA;            return_level: 100,  // priority: 100&#xA;            votingRuleIndex: 5 // voting rule index 5 (ask board of directors to vote and must 100% approve)&#xA;            note: &#34;100% Approval is needed by board members to transfer tokens by major shareholders (&amp;gt;25%)&#34;&#xA;            is_before_operation: false,  // check the plugin after the operation is executed in sandbox&#xA;        }&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After above By-Law Script is executed, the DARC VM contract will add a new plugin and voting rule, and the plugin will be effective immediately (if there exists any voting procedure related to &lt;code&gt;add_voting_rule()&lt;/code&gt; and &lt;code&gt;add_and_enable_plugins()&lt;/code&gt;, the plugin will be effective after the voting process is approved). If the operator (&lt;code&gt;addr1&lt;/code&gt;) tries to transfer tokens to addr2, the plugin will check the condition and return &lt;code&gt;voting_needed&lt;/code&gt; to the DARC VM contract, and the DARC VM contract will ask the board of directors (level-1 token owners) to vote. If the board of directors approves the operation, the operation will be executed in the sandbox, otherwise the operation will be rejected. For example, if there are 3 voting rules are triggerd, the voting operation will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;vote([true, true, true])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the voting process is approved by the existing voting rules and plugins, the new program will be approved to execute in the next execution pending duration (1 hour in this example), and the program owner or any other members can execute the program in the next 1 hour, or the program will be ignored and removed from the pending list.&lt;/p&gt; &#xA;&lt;h2&gt;&#34;Plugin-as-a-Law&#34;&lt;/h2&gt; &#xA;&lt;p&gt;The law of DARC is defined in below pseudo-code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (plugin_condition == true) {&#xA;    plugin_decision = allows / denies / requires a vote&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each plugin contains a condition expression tree and a corresponding decision (return type). When the condition tree is evaluated to true while the program is submitted before running, the plugin will make a decision by allows, denies or requires a vote. For example:&lt;/p&gt; &#xA;&lt;h3&gt;Example 1: Anti-Dilutive shares&lt;/h3&gt; &#xA;&lt;p&gt;Anti-Dilutive shares is a basic mechanism to prevent the company (including DAO and other on-chain &#34;tokenomics&#34;) from issuing too many shares and dilute the ownership of the existing shareholders. In DARC, the company and early-stage investors can define a law of &#34;anti-dilutive shares&#34;, and the law can be abolished by certain process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Law 1 (Anti-Dilutive Shares): Shareholder X should always holds 10% of the total stock.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Design of Plugin: If operation is minting new level-0 tokens, plugin should check the state of token ownerships, X should always keep a minimum total voting power of 10%, as well as dividend power of 10% after executing the operation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In By-law script, we can define the plugin with following conditions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// define X&#39;s address&#xA;const x_addr = &#34;0x1234567890123456789012345678901234567890&#34;;&#xA;&#xA;// define the plugin&#xA;const anti_delutive = {&#xA;&#xA;    // define the trigger condition&#xA;    condition:&#xA;        ((operation == &#34;mint_tokens&#34;)             // if operator is minting new tokens&#xA;            | (operation == &#34;pay_to_mint_tokens&#34;))   // or operator is paying to mint new tokens&#xA;        &amp;amp;                                          // and        &#xA;        ((total_voting_power_percentage(x) &amp;lt; 10)    // X&#39;s total voting power &amp;lt; 10%&#xA;            | (total_dividend_power_percentage(x) &amp;lt; 10)),   // or X&#39;s total dividend power &amp;lt; 10%&#xA;&#xA;    // define the decision: reject the operation&#xA;    return_type: NO,&#xA;&#xA;    // define the priority: 100&#xA;    return_level: 100,&#xA;&#xA;    // check the plugin after the operation is executed in sandbox&#xA;    is_before_operation: false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since it checks the state of token ownerships, the plugin should be executed after the operation is executed inside the DARC&#39;s sandbox. If the plugin&#39;s condition is evaluated to true, the plugin will deny the operation after executing in the sandbox, and the operation will be rejected to be executed in the real environment. Otherwise, &#34;minting new tokens&#34; will be allowed to execute.&lt;/p&gt; &#xA;&lt;p&gt;When this plugin is added to the DARC, the operator (the author of current program) must mint extra tokens to address &lt;code&gt;x_addr&lt;/code&gt; to satisfy the &lt;strong&gt;Law 1&lt;/strong&gt; above, otherwise it will be rejected. For example, the DARC has only one level of tokens (level 0, voting power = 1, dividend power = 1), the stock ownerships are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ShareHolders&lt;/th&gt; &#xA;   &lt;th&gt;Number of tokens&lt;/th&gt; &#xA;   &lt;th&gt;Percentage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CEO&lt;/td&gt; &#xA;   &lt;td&gt;400&lt;/td&gt; &#xA;   &lt;td&gt;40%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CTO&lt;/td&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;   &lt;td&gt;30%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CFO&lt;/td&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;20%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VC X&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If the operator want to mint 200 tokens and issue them to VC Y, the operator must mint 20 tokens to address &lt;code&gt;x_addr&lt;/code&gt; to satisfy the &lt;strong&gt;Law 1&lt;/strong&gt; above, otherwise the operation will be rejected. Here is a sample investment program by VC Y:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;pay_cash(1000000000000)  // pay 1000 ETH to the DARC&#xA;mint_tokens(20, 0, x_addr)  // mint 20 level-0 tokens to address x_addr&#xA;mint_tokens(180, 0, y_addr)  // mint 180 level-0 tokens to address y_addr&#xA;add_and_enable_plugin([new_law_1, new_law_2, new_law_3])  // investment laws by VC Y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the operation, the stock ownerships are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ShareHolders&lt;/th&gt; &#xA;   &lt;th&gt;Number of tokens&lt;/th&gt; &#xA;   &lt;th&gt;Percentage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CEO&lt;/td&gt; &#xA;   &lt;td&gt;400&lt;/td&gt; &#xA;   &lt;td&gt;33.33%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CTO&lt;/td&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;   &lt;td&gt;25%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CFO&lt;/td&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;16.67%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VC X&lt;/td&gt; &#xA;   &lt;td&gt;120&lt;/td&gt; &#xA;   &lt;td&gt;10%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VC Y&lt;/td&gt; &#xA;   &lt;td&gt;180&lt;/td&gt; &#xA;   &lt;td&gt;15%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1200&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Also another plugin should be added to the DARC to define the legislation of the &#34;Abolish Law 1&#34;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Law 1.1(Law 1 Appendix): Both Law 1 and Law 1 Appendix (current Law) can be abolished if and only if the operator is X&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Design of Plugin: If operation is &#34;disable_plugins&#34;, and the plugin that to be disabled is with &lt;code&gt;id == 1&lt;/code&gt; or &lt;code&gt;id == 2&lt;/code&gt;, and the operator is not X, then the plugin should reject the operation (assume the anti dilutive law index is 1, and the appendix law index is 2, both are before-operation plugins)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const law_1_appendix = {&#xA;&#xA;    // define the trigger condition&#xA;    condition:&#xA;        (operation == &#34;disable_plugins&#34;)&#xA;        &amp;amp; ((disable_after_op_plugin_id == 1) | (disable_after_op_plugin_id == 2))&#xA;        &amp;amp; (operator != x_addr),&#xA;&#xA;    // define the decision&#xA;    return_type: no,&#xA;&#xA;    // define the priority&#xA;    return_level: 100,&#xA;&#xA;    // reject the operation before sandbox&#xA;    is_before_operation: true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 2: Bet-on Agreement/Valuation-Adjustment Mechanism(VAM) Agreement&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Law2: If total revenue &amp;lt; 1000 ETH by 2035/01/01, shareholder X can take over 75% of total voting power and 90% of dividend power.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Design of Plugin: After executing in sandbox, check the following conditions:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;timestamp &amp;gt;= 2035/01/01&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;revenue since 2000/01/01 &amp;lt; 1000 ETH&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;operation is &#34;mint_tokens&#34;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;total voting power of x &amp;lt;= 75%&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;the dividend power of x &amp;lt;= 90%&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;then the plugin should approve the operation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In By-law script, we can define the above plugin as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const bet_on_2 = {&#xA;&#xA;    // define the trigger condition&#xA;    condition:&#xA;        (timestamp &amp;gt;= toTimestamp(&#39;2035/01/01&#39;)) &amp;amp;&#xA;        (revenue_since(946706400) &amp;lt; 1000000000000) &amp;amp; // 1000000000000 Gwei = 1000 ETH&#xA;        (operation == &#34;mint_tokens&#34;) &amp;amp;&#xA;        (total_voting_power_percentage(x) &amp;lt; 75) &amp;amp;&#xA;        (total_dividend_power_percentage(x) &amp;lt; 90),&#xA;&#xA;    // define the decision&#xA;    return_type: yes,&#xA;&#xA;    // define the priority&#xA;    return_level: 100,&#xA;&#xA;    // approve the operation after executing in sandbox&#xA;    is_before_operation: false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 3: Employee Payroll&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Law 3: The payroll for employees with role level X should be 10 ETH per month.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Design of Plugin: If operation is &#34;add withdrawable cash&#34;, the amount is less than or equals to 10 ETH, and the last operation was at least 30 days, then this operation should be approved and skip sandbox check&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In By-law script, we can define the plugin with following conditions (for example, level X = 2 can withdraw 10 ETH per 30 days):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const payroll_law_level_2 = {&#xA;    condition:&#xA;        (operation == &#34;add_withdrawable_cash&#34;) &amp;amp;   // operation is &#34;add withdrawable cash&#34;&#xA;        (member_role_level == 2) &amp;amp;   // the operator address is in role level 2&#xA;&#xA;        // add cash by &amp;lt; every 30 days = 2592000 seconds&#xA;        (operator_last_operation_window(&#34;add_withdrawable_cash&#34;) &amp;gt;= 2592000) &amp;amp;&#xA;        // each time add &amp;lt; 10000000000 Gwei = 10 ETH to the account&#xA;        (add_withdrawable_cash_amount &amp;lt;= 10000000000),&#xA;&#xA;    // approve the operation and skip sandbox check&#xA;    return_type: yes_and_skip_sandbox,&#xA;    return_level: 1&#xA;    is_before_operation: true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the plugin above, the operator can add withdrawable cash to the employee&#39;s account with amount less than or equals to 10 ETH, and the last operation was at least 30 days. The plugin will approve the operation and skip the sandbox check. When the employee address is disable, removed from role level X, or other plugins with higher priority deny the operation, these operations will be rejected.&lt;/p&gt; &#xA;&lt;h3&gt;Example 4: Voting and legislation&lt;/h3&gt; &#xA;&lt;p&gt;For daily operations, the board of directors can be defined as a group of addresses, and the voting mechanism can be used to make decisions. For example, let&#39;s design the voting mechanism for the following scenario:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Any address X with more than 10% total voting power can be added to the board by minting 1 token (level 2, board voting token), if and only if the behavior is approved by 2/3 of all the board members (voting rule 1).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const add_board_member = {&#xA;    condition:&#xA;        (operation == &#34;mint_tokens&#34;) &amp;amp;   // operation is &#34;mint_tokens&#34;&#xA;        (mint_tokens_level == 2) &amp;amp;  // the token level is 2&#xA;        (mint_tokens_amount == 1) &amp;amp;  // the amount is 1&#xA;        (operator_total_voting_power_percentage &amp;gt;= 10),   // the operator address holds at least 10% of the total voting power&#xA;    return_type: voting_needed,&#xA;    voting_rule: 1,  // Under the voting rule 1, the operation will be approved if and only if 2/3 of all the board members approve the operation&#xA;    return_level: 100,&#xA;    is_before_operation: false, // make the decision after executing in sandbox&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Any operator with more than 7% of all voting power can submit &lt;code&gt;enable_plugins()&lt;/code&gt; , and it needs to be approved by 100% of all the board members. Each operator can try to activate plugin per 10 days.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const enable_plugin = {&#xA;    condition:&#xA;        (operation == &#34;enable_plugins&#34;) &amp;amp;   // operation is &#34;enable_plugins&#34;&#xA;        (operator_total_voting_power_percentage &amp;gt;= 7) &amp;amp;   // the operator address holds at least 7% of the total voting power&#xA;        (operator_last_operation_window(&#34;enable_plugin&#34;) &amp;gt;= 864000),  // each operator can try to enable plugins once per 864000 seconds (10 days)&#xA;&#xA;    return_type: voting_needed,&#xA;    voting_rule: 2,  // Under the voting rule 2, the operation will be approved if and only if 100% of all the board members approve the operation&#xA;    return_level: 100,&#xA;    is_before_operation: false, // make the decision after executing in sandbox&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To disable plugins 2,3 and 4, the operator needs to hold at least 20% of total voting power, and the operation needs to be approved by 70% of all common stock token(level-0) voters as relative majority(voting rule 2). For each member of DARC, this operation can be executed once per 15 days (1296000 seconds).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const disable_2_3_4 = {&#xA;    condition:&#xA;        (operation == &#34;disable_plugins&#34;) &amp;amp;   // operation is &#34;disable_plugins&#34;&#xA;        (&#xA;            disable_after_op_plugin_id == 2&#xA;            | disable_after_op_plugin_id == 3&#xA;            | disable_after_op_plugin_id == 4&#xA;        ) &amp;amp;  // disable after operation plugins 2,3 and 4&#xA;        (operator_total_voting_power_percentage &amp;gt;= 20) &amp;amp;   // the operator address holds at least 20% of the total voting power&#xA;        (operator_last_operation_window(&#34;disable_plugins&#34;) &amp;gt;= 1296000),  // each operator can try to disable plugins once per 1296000 seconds (15 days)&#xA;    return_type: voting_needed,&#xA;    voting_rule: 3,  // Under the voting rule 3, the operation will be approved if and only if 70% of all the common stock holders approve the operation&#xA;    is_before_operation: false, // make the decision after sandbox check&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 5: Multi-level Tokens: Product tokens and Non-fungible tokens&lt;/h3&gt; &#xA;&lt;p&gt;Here is an example of how to design a token with different levels of voting power and dividend power. The voting power and dividend power are used to calculate the voting power and dividend power of each token holder. Here is the table of the token levels:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Level&lt;/th&gt; &#xA;   &lt;th&gt;Token&lt;/th&gt; &#xA;   &lt;th&gt;Voting Power&lt;/th&gt; &#xA;   &lt;th&gt;Dividend Power&lt;/th&gt; &#xA;   &lt;th&gt;Total Supply&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Level-0 Common Stock&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;100,000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Level-1 Stock&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;10,000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Board of Directors&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Executives&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Non-Voting Shares&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;200,000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Product Token A (0.01 ETH/token)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;∞&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Product Token B (10 ETH/token)&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;∞&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;Non-Fungible Token #1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;Non-Fungible Token #2&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Non-Fungible Token #3&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Non-Fungible Token #4&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;Non-Fungible Token #5&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To pay for service or prochase for products, customers can use &lt;code&gt;pay_cash()&lt;/code&gt; to pay for the service directly, or use &lt;code&gt;pay_to_mint_tokens()&lt;/code&gt; as a payment method and receive product tokens/NFTs.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example about how to define &#34;Product Token A&#34; and &#34;NFT&#34; price and total supply.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const product_token_A_price_law = {&#xA;    condition:&#xA;        (operation == &#34;pay_to_mint_tokens&#34;) &amp;amp;   // operation is &#34;pay_to_mint_tokens&#34;&#xA;        (pay_to_mint_tokens_level == 5) &amp;amp;  // the token level is 5&#xA;        (pay_to_mint_price_per_token &amp;gt;= 10000000000000000),   // price per token &amp;gt;= 0.01 ETH = 10000000000000000 wei&#xA;&#xA;    return_type: yes_and_skip_sandbox,  // approve the operation and skip sandbox check&#xA;    return_level: 1,&#xA;    is_before_operation: true, // approve the operation and skip sandbox check&#xA;}&#xA;&#xA;const NFT_price_law = {&#xA;    condition:&#xA;        (operation == &#34;pay_to_mint_tokens&#34;) &amp;amp;   // operation is &#34;pay_to_mint_tokens&#34;&#xA;        (pay_to_mint_tokens_level &amp;gt;= 7) &amp;amp;  // the token level is 7 or higher&#xA;        (pay_to_mint_token_amount == 1) &amp;amp;  // only allow to mint 1 token at a time&#xA;        (pay_to_mint_current_level_total_supply == 0) &amp;amp;  // current total supply is 0&#xA;        (pay_to_mint_price_per_token &amp;gt;= 10000000000000000000),   // price per token &amp;gt;= 10 ETH = 10000000000000000000 wei&#xA;&#xA;    return_type: yes_and_skip_sandbox,  // approve the operation and skip sandbox check&#xA;    return_level: 1,&#xA;    is_before_operation: true, // approve the operation and skip sandbox check&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 6: Lock dividend yield rate for 5 years&lt;/h3&gt; &#xA;&lt;p&gt;The dividend mechanism is designed to distribute dividends to token holders under certain rules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For each &lt;code&gt;X&lt;/code&gt; purchase transactions, take Y‱ of the total income as the dividendable cash&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;offer_dividend()&lt;/code&gt; operation can be called, which will distribute the dividendable cash to token holders&#39; dividend withdraw balance&lt;/li&gt; &#xA; &lt;li&gt;The amount of dividends per token holder (X) is calculated by the following formula: &lt;code&gt;dividend_X = dividendable_cash * dividend_power(X) / total_dividend_power&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After the &lt;code&gt;offer_dividend()&lt;/code&gt; operation is called, the dividendable cash and dividendable transaction counter will be set to 0, and the dividend withdraw balance of each token holder will be increased by &lt;code&gt;dividend_X&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To make sure the dividend yield rate is stable, we can add a plugin to the DARC to lock the dividend yield rate for 5 years by limiting the &lt;code&gt;set_parameters()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Law 6: The dividend yield rate should be locked &amp;gt; 500‱ (5%) before 2030-01-01.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const dividend_yield_rate_law = {&#xA;    condition:&#xA;        (operation == &#34;set_parameters&#34;) &amp;amp;  // operation is &#34;set_parameters&#34;&#xA;        (set_parameters_key == &#34;dividendPermyriadPerTransaction&#34;) &amp;amp;  // the key is &#34;dividend_yield_rate&#34;&#xA;        (set_parameters_value &amp;lt; 500) &amp;amp;  // the value is &amp;lt; 500‱ (5%)&#xA;        (timestamp &amp;lt; 1893477600),  // the timestamp &amp;lt; unix timestamp  2030-01-01 00:00:00 (UTC) &#xA;&#xA;    return_type: no,  // reject the operation&#xA;    return_level: 1,&#xA;    is_before_operation: true, // reject the operation and skip sandbox check&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 7: Investment program package&lt;/h3&gt; &#xA;&lt;p&gt;Here is an unofficial example program of &lt;strong&gt;Simple agreement for future equity (SAFE)&lt;/strong&gt;, a common investment contract by a VC firm:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The VC firm will pay 1000 ETH (1000000000000 Gwei) cash to the DARC as investment&lt;/li&gt; &#xA; &lt;li&gt;The VC firm will be granted 100,000,000 level-0 tokens (common stock) and 1 level-2 token (board of members)&lt;/li&gt; &#xA; &lt;li&gt;The VC firm will be granted the right to disable plugins 5, 6, 7&lt;/li&gt; &#xA; &lt;li&gt;The VC firm will be granted the right to enable plugins 8, 9, 10, 11&lt;/li&gt; &#xA; &lt;li&gt;The VC firm will be granted the right to change its role to level-5 (majority shareholder level)&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s recommended to sign and scan a PDF document to record the agreement, upload the PDF document to IPFS, and add the IPFS hash &lt;code&gt;QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC&lt;/code&gt; to the DARC permanent storage array. This can help the emergency agent to verify and fix DARC technical issues if needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const vc_addr = &#34;0x1234567890123456789012345678901234567890&#34;;  // define my address&#xA;&#xA;pay_cash(1000000000000, 0, 1);  // pay 1000 ETH = 1000000000000 Gwei cash&#xA;&#xA;mint_token([vc_addr], [100000000], [0]);  // mint 100,000,000 level-0 tokens (common stock) to VC firm&#xA;&#xA;mint_token([vc_addr], [1], [2]);  // mint a single 2-level token (board of members) to VC firm&#xA;&#xA;disable_plugins([5, 6, 7], [false, false, false]) // disable previes after-operation plugins 5, 6, 7&#xA;&#xA;enable_plugins([8, 9, 10, 11], [false, false, false, false]) // enable new added plugins 8, 9, 10, which were added before this program&#xA;&#xA;change_member_role(vc_addr, 5);  // change the role of VC firm to level-5 (majority shareholder level)&#xA;&#xA;/** Finally, sign and scan a SAFE document,&#xA; * upload and pin on IPFS, and add the IPFS hash value to the DARC&#xA; * just in case if DARC needs emergency agent to take over the DARC&#xA; */&#xA;add_storage([&#39;QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the source&lt;/h2&gt; &#xA;&lt;p&gt;Since Hardhat and OpenZeppelin are used, the project can be built using the following commands:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;p&gt;We recommend that you use &lt;code&gt;pnpm&lt;/code&gt; instead of &lt;code&gt;npm&lt;/code&gt;, but &lt;code&gt;npm&lt;/code&gt; can also work.&lt;/p&gt; &lt;p&gt;&lt;code&gt;pnpm&lt;/code&gt; is a newer package manager that has some advantages over npm. It is faster, more efficient, and disk-space friendly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd darc-protocal&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the contracts&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat compile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the Darc test network&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run node&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test contracts&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat test&#xA;REPORT_GAS=true npm run test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy contracts&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>semanser/codel</title>
    <updated>2024-03-27T01:22:44Z</updated>
    <id>tag:github.com,2024-03-27:/semanser/codel</id>
    <link href="https://github.com/semanser/codel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✨ Fully autonomous AI Agent that can perform complicated tasks and projects using terminal, browser, and editor.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/semanser/codel/main/.github/logo.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; Fully autonomous AI Agent that can perform complicated tasks and projects using terminal, browser, and editor.&#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/semanser/codel/main/.github/demo.png&#34;&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.gg/uMaGSHNjzc&#34;&gt;https://discord.gg/uMaGSHNjzc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔓 Secure. Everything is running in a sandboxed Docker environment.&lt;/li&gt; &#xA; &lt;li&gt;🤖 Autonomous. Automatically detects the next step and performs it.&lt;/li&gt; &#xA; &lt;li&gt;🔍 Built-in browser. Fetches latest information from the web (tutorials, docs, etc.) if needed.&lt;/li&gt; &#xA; &lt;li&gt;📙 Built-in text editor. View all the modified files right in your browser.&lt;/li&gt; &#xA; &lt;li&gt;🧠 All the history commands and outputs are saved in the PostgreSQL database.&lt;/li&gt; &#xA; &lt;li&gt;📦 Automatic Docker-image picker based on the user task.&lt;/li&gt; &#xA; &lt;li&gt;🤳 Self-hosted&lt;/li&gt; &#xA; &lt;li&gt;💅 Modern UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to run&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;golang&lt;/li&gt; &#xA; &lt;li&gt;nodejs&lt;/li&gt; &#xA; &lt;li&gt;docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;Add to &lt;code&gt;.env&lt;/code&gt; file in the &lt;code&gt;backend&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPEN_AI_KEY&lt;/code&gt; - OpenAI API key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt; - PostgreSQL database URL (eg. &lt;code&gt;postgres://user:password@localhost:5432/database&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_HOST&lt;/code&gt; - Docker SDK API (eg. &lt;code&gt;DOCKER_HOST=unix:///Users/&amp;lt;my-user&amp;gt;/Library/Containers/com.docker.docker/Data/docker.raw.sock&lt;/code&gt;) &lt;a href=&#34;https://stackoverflow.com/a/62757128/5922857&#34;&gt;more info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPEN_AI_MODEL&lt;/code&gt; - OpenAI model (default: &lt;code&gt;gpt-4-0125-preview&lt;/code&gt;). The list of supported OpenAI models can be found &lt;a href=&#34;https://pkg.go.dev/github.com/sashabaranov/go-openai#pkg-constants&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;p&gt;Frontend environment variables can be set by creating a &lt;code&gt;.env.local&lt;/code&gt; file in the &lt;code&gt;frontend&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;VITE_API_URL&lt;/code&gt; - Backend API URL. &lt;em&gt;Omit&lt;/em&gt; the URL scheme (e.g., &lt;code&gt;localhost:8080&lt;/code&gt; &lt;em&gt;NOT&lt;/em&gt; &lt;code&gt;http://localhost:8080&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Steps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go run .&lt;/code&gt; in &lt;code&gt;backend&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn dev&lt;/code&gt; in &lt;code&gt;frontend&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Open your browser and enjoy!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Agent API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Frontend&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Backend API + PostgreSQL integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker runner&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Terminal output streaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Browser output streaming (in progress)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Editor output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SWE-bench&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better way to run it (eg a single docker command)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;This project wouldn&#39;t be possible without:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2308.00352&#34;&gt;https://arxiv.org/abs/2308.00352&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2403.08299&#34;&gt;https://arxiv.org/abs/2403.08299&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cognition-labs.com/introducing-devin&#34;&gt;https://www.cognition-labs.com/introducing-devin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/semanser/JsonGenius&#34;&gt;https://github.com/semanser/JsonGenius&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lichao-sun/Mora</title>
    <updated>2024-03-27T01:22:44Z</updated>
    <id>tag:github.com,2024-03-27:/lichao-sun/Mora</id>
    <link href="https://github.com/lichao-sun/Mora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mora: More like Sora for Generalist Video Generation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mora: More like Sora for Generalist Video Generation&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🔍 See our newest Video Generation paper: &lt;a href=&#34;http://arxiv.org/abs/2403.13248&#34;&gt;&lt;strong&gt;&#34;Mora: Enabling Generalist Video Generation via A Multi-Agent Framework&#34;&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;http://arxiv.org/abs/2403.13248&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-%F0%9F%8E%93-lightblue?style=flat-square&#34; alt=&#34;Paper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lichao-sun/Mora&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gtihub-%F0%9F%8E%93-lightblue?style=flat-square&#34; alt=&#34;GitHub&#34;&gt;)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;📧 Please let us know if you find a mistake or have any suggestions by e-mail: &lt;a href=&#34;mailto:lis221@lehigh.edu&#34;&gt;lis221@lehigh.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;📰News&lt;/h2&gt; &#xA;&lt;p&gt;🚀️ Mar 20: Our paper &#34;&lt;a href=&#34;https://arxiv.org/abs/2403.13248&#34;&gt;Mora: Enabling Generalist Video Generation via A Multi-Agent Framework&lt;/a&gt;&#34; is released!&lt;/p&gt; &#xA;&lt;h2&gt;What is Mora&lt;/h2&gt; &#xA;&lt;p&gt;Mora is a multi-agent framework designed to facilitate generalist video generation tasks, leveraging a collaborative approach with multiple visual agents. It aims to replicate and extend the capabilities of OpenAI&#39;s Sora. &lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task.jpg&#34; alt=&#34;Task&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📹Demo for Artist Creation&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by OpenAI &lt;a href=&#34;https://openai.com/blog/sora-first-impressions&#34;&gt;Sora: First Impressions&lt;/a&gt;, We utilize Mora to generate Shy kids video. Even though Mora has reached the similar level as Sora in terms of video duration, 80s, Mora still has a significant gap in terms of resolution, object consistency, motion smoothness, etc.&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/demo_shy_kids.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🎥Demo (1024×576 resolution, 12 seconds and more!)&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/demo1.gif&#34; width=&#34;49%&#34; height=&#34;auto&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/demo2.gif&#34; width=&#34;49%&#34; height=&#34;auto&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/demo3.gif&#34; width=&#34;49%&#34; height=&#34;auto&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/demo4.gif&#34; width=&#34;49%&#34; height=&#34;auto&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Mora: A Multi-Agent Framework for Video Generation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/method.jpg&#34; alt=&#34;test image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Agent Collaboration&lt;/strong&gt;: Utilizes several advanced visual AI agents, each specializing in different aspects of the video generation process, to achieve high-quality outcomes across various tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Broad Spectrum of Tasks&lt;/strong&gt;: Capable of performing text-to-video generation, text-conditional image-to-video generation, extending generated videos, video-to-video editing, connecting videos, and simulating digital worlds, thereby covering an extensive range of video generation applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open-Source and Extendable&lt;/strong&gt;: Mora’s open-source nature fosters innovation and collaboration within the community, allowing for continuous improvement and customization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proven Performance&lt;/strong&gt;: Experimental results demonstrate Mora&#39;s ability to achieve performance that is close to that of Sora in various tasks, making it a compelling open-source alternative for the video generation domain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;h3&gt;Text-to-video generation&lt;/h3&gt; &#xA;&lt;table class=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Input prompt&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Output video&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A vibrant coral reef teeming with life under the crystal-clear blue ocean, with colorful fish swimming among the coral, rays of sunlight filtering through the water, and a gentle current moving the sea plants. &lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task_1_demo_1.gif&#34; width=&#34;480&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A majestic mountain range covered in snow, with the peaks touching the clouds and a crystal-clear lake at its base, reflecting the mountains and the sky, creating a breathtaking natural mirror.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task_1_demo_2.gif&#34; width=&#34;480&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;In the middle of a vast desert, a golden desert city appears on the horizon, its architecture a blend of ancient Egyptian and futuristic elements.The city is surrounded by a radiant energy barrier, while in the air, seve&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task_1_demo_3.gif&#34; width=&#34;480&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Text-conditional image-to-video generation&lt;/h3&gt; &#xA;&lt;table class=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Input prompt&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Input image&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Mora generated Video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Sora generated Video&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Monster Illustration in the flat design style of a diverse family of monsters. The group includes a furry brown monster, a sleek black monster with antennas, a spotted green monster, and a tiny polka-dotted monster, all interacting in a playful environment. &lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/input1.jpg&#34; width=&#34;600&#34; height=&#34;90&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task2_demo1.gif&#34; width=&#34;160&#34; height=&#34;90&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/sora_demo1.gif&#34; width=&#34;160&#34; height=&#34;90&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;An image of a realistic cloud that spells “SORA”.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/input2.jpg&#34; width=&#34;600&#34; height=&#34;90&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task2_demo2.gif&#34; width=&#34;160&#34; height=&#34;90&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/sora_demo2.gif&#34; width=&#34;160&#34; height=&#34;90&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Extend generated video&lt;/h3&gt; &#xA;&lt;table class=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Original video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Mora extended video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Sora extended video&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;./image/original video.gif&#34; width=&#34;330&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/mora_task3.gif&#34; width=&#34;330&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task3_sora.gif&#34; width=&#34;330&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Video-to-video editing&lt;/h3&gt; &#xA;&lt;table class=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Instruction&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Original video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Mora edited Video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Sora edited Video&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Change the setting to the 1920s with an old school car. make sure to keep the red color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task4_original.gif&#34; width=&#34;240&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task4_mora_1920.gif&#34; width=&#34;240&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task4_sora_1920.gif&#34; width=&#34;240&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Put the video in space with a rainbow road&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task4_original.gif&#34; width=&#34;240&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task4_mora_rainbow.gif&#34; width=&#34;240&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task4_sora_rainbow.gif&#34; width=&#34;240&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Connect videos&lt;/h3&gt; &#xA;&lt;table class=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Input previous video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Input next video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Output connect Video&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task5_mora1.gif&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task5_mora2.gif&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task5_mora.gif&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task5_sora1.gif&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task5_sora2.gif&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task5_sora.gif&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Simulate digital worlds&lt;/h3&gt; &#xA;&lt;table class=&#34;left&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Mora simulating video&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;b&gt;Sora simulating video&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task6_mora1.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task6_sora1.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task6_mora2.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichao-sun/Mora/main/image/task6_sora2.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Code will be released as soon as possible!&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{yuan2024mora,&#xA;  title={Mora: Enabling Generalist Video Generation via A Multi-Agent Framework},&#xA;  author={Yuan, Zhengqing and Chen, Ruoxi and Li, Zhaoxu and Jia, Haolong and He, Lifang and Wang, Chi and Sun, Lichao},&#xA;  journal={arXiv preprint arXiv:2403.13248},&#xA;  year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{liu2024sora,&#xA;  title={Sora: A Review on Background, Technology, Limitations, and Opportunities of Large Vision Models},&#xA;  author={Liu, Yixin and Zhang, Kai and Li, Yuan and Yan, Zhiling and Gao, Chujie and Chen, Ruoxi and Yuan, Zhengqing and Huang, Yue and Sun, Hanchi and Gao, Jianfeng and others},&#xA;  journal={arXiv preprint arXiv:2402.17177},&#xA;  year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{openai2024sorareport,&#xA;  title={Video generation models as world simulators},&#xA;  author={OpenAI},&#xA;  year={2024},&#xA;  howpublished={https://openai.com/research/video-generation-models-as-world-simulators},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>