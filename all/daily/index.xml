<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-17T01:29:43Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/havenask</title>
    <updated>2022-12-17T01:29:43Z</updated>
    <id>tag:github.com,2022-12-17:/alibaba/havenask</id>
    <link href="https://github.com/alibaba/havenask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;p&gt;Havenask是阿里巴巴集团自研的搜索引擎，也是阿里巴巴内部广泛使用的大规模分布式检索系统，支持了包括淘宝、天猫、菜鸟、高德、饿了么、全球化在内整个阿里巴巴集团的搜索业务，为用户提供高性能、低成本、易用的搜索服务，同时具有灵活的定制和开发能力，支持算法快速迭代，帮助客户和开发者量身定做适合自身业务的智能搜索服务，助力业务增长。&lt;/p&gt; &#xA;&lt;p&gt;此外，基于Havenask打造的行业AI搜索产品——&lt;a href=&#34;https://www.aliyun.com/product/opensearch&#34;&gt;阿里云OpenSearch&lt;/a&gt;，也将持续在阿里云上为企业级开发者提供全托管、免运维的一站式智能搜索服务，欢迎企业级开发者们试用。&lt;/p&gt; &#xA;&lt;h2&gt;核心能力&lt;/h2&gt; &#xA;&lt;p&gt;Havenask 的核心能力与优势，有以下几点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;极致的工程性能&lt;/strong&gt;：支持千亿级数据实时检索，百万QPS查询，百万TPS写入，毫秒级查询延迟与秒级数据更新。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++的底层构建&lt;/strong&gt;：对性能、内存、稳定性有更高保障。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL查询支持&lt;/strong&gt;：支持SQL语法便捷查询，查询体验更友好。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;丰富的插件机制&lt;/strong&gt;：支持各类业务插件，拓展性强。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持图化开发&lt;/strong&gt;：实现算法分钟级快速迭代，定制能力丰富，在新一代智能检索场景下的支持效果优秀。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持向量检索&lt;/strong&gt;：可通过与插件配合实现多模态搜索，满足更多场景的搜索服务搭建需求（待发布）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;相关文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Havenask Wiki: &lt;a href=&#34;https://github.com/alibaba/havenask/wiki&#34;&gt;https://github.com/alibaba/havenask/wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开始使用&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;镜像介绍 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ha3_runtime：可直接运行的镜像，无需编译代码，包含了问天引擎的可执行文件。&lt;/li&gt; &#xA;   &lt;li&gt;ha3_dev：用于开发测试的镜像，里面包含了开发测试时需要的各种依赖库和头文件，如何编译问天引擎请参考&lt;a href=&#34;https://github.com/alibaba/havenask/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B#%E7%BC%96%E8%AF%91%E4%BB%A3%E7%A0%81&#34;&gt;编译代码&lt;/a&gt;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;环境要求 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;确保机器内存大于10G，cpu大于2核，磁盘大小大于50G。&lt;/li&gt; &#xA;   &lt;li&gt;使用前确保设备已经安装和启动Docker服务。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;启动容器&lt;/h3&gt; &#xA;&lt;p&gt;克隆仓库&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:alibaba/havenask.git&#xA;cd havenask/docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;创建容器，其中CONTAINER_NAME为指定的容器名&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull havenask/ha3_runtime:0.2.2&#xA;./create_container.sh &amp;lt;CONTAINER_NAME&amp;gt; havenask/ha3_runtime:0.2.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果由于Docker Hub访问不稳定无法下载以上镜像，可以尝试阿里云镜像源&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull registry.cn-hangzhou.aliyuncs.com/havenask/ha3_runtime:0.2.2&#xA;./create_container.sh &amp;lt;CONTAINER_NAME&amp;gt; registry.cn-hangzhou.aliyuncs.com/havenask/ha3_runtime:0.2.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;登陆容器&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&amp;lt;CONTAINER_NAME&amp;gt;/sshme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;测试索引构建&lt;/h3&gt; &#xA;&lt;p&gt;构建全量索引&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/havenask/example/&#xA;python build_demo_data.py /ha3_install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;测试引擎查询&lt;/h3&gt; &#xA;&lt;p&gt;启动havenask引擎&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python start_demo_searcher.py /ha3_install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;引擎的默认查询端口为45800，使用脚本进行查询测试。下面是一些测试query。更多测试case见&lt;a href=&#34;https://github.com/alibaba/havenask/tree/main/example&#34;&gt;example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python curl_http.py 45800 &#34;query=select count(*) from in0&#34;&#xA;&#xA;python curl_http.py 45800 &#34;query=select id,hits from in0 where MATCHINDEX(&#39;title&#39;, &#39;搜索词典&#39;)&#34;&#xA;&#xA;python curl_http.py 45800 &#34;query=select title, subject from in0_summary_ where id=1 or id=2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;联系我们&lt;/h2&gt; &#xA;&lt;p&gt;官方技术交流钉钉群：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/590717/206684715-5ab1df49-f919-4d8e-85ee-58b364edef31.jpg&#34; alt=&#34;3293821693450208&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Jxck-S/plane-notify</title>
    <updated>2022-12-17T01:29:43Z</updated>
    <id>tag:github.com,2022-12-17:/Jxck-S/plane-notify</id>
    <link href="https://github.com/Jxck-S/plane-notify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notify If a selected plane has taken off or landed using OpenSky or ADS-B Exchange data. Compares older data to newer data to determine if a landing or takeoff has occurred. As well as nav modes, emergency squawk and resolution advisory notifications. Can output to Twitter, Discord, and Pushbullet&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plane-notify&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.codacy.com/manual/Jxck-S/plane-notify?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Jxck-S/plane-notify&amp;amp;utm_campaign=Badge_Grade_Settings&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/c4e1d839eec3468cadfe351d64dc1ac4&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-yellow.svg?sanitize=true&#34; alt=&#34;GPLv3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notify if configured planes have taken off or landed using Python with &lt;a href=&#34;https://opensky-network.org/&#34;&gt;OpenSky&lt;/a&gt;(free) or &lt;a href=&#34;https://www.adsbexchange.com/&#34;&gt;ADSBExchange&lt;/a&gt; Data(paid but much better), outputs location of takeoff location of landing and takeoff by reverse lookup of coordinates.&lt;/p&gt; &#xA;&lt;h3&gt;Discord Output Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/ExImages/DiscordEX.png?raw=true&#34; alt=&#34;Discord Output Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;More examples are in the ExImages folder&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/ExImages&#34;&gt;ExImages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Background&lt;/h3&gt; &#xA;&lt;p&gt;I made this program so I could track Elon Musk&#39;s Jet and share his whereabouts with others on Twitter. &lt;a href=&#34;https://twitter.com/ElonJet&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ElonJet.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; I have now expanded and run multiple accounts for multiple planes, a list of the accounts can be found here &lt;a href=&#34;https://twitter.com/i/lists/1307414615316467715&#34;&gt;plane-notify Twitter List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m open to any help or suggestions, I realize there are many better ways to improve this program and better ways to get this program to work properly, I&#39;m only a noob. I&#39;ll accept pull requests. If you&#39;d like to discuss join &lt;a href=&#34;https://JacksTech.net/Discord&#34;&gt;https://JacksTech.net/Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/PseudoCode.md&#34;&gt;Algorithm&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Setup / Install&lt;/h2&gt; &#xA;&lt;h3&gt;Make sure Python/PIP is installed&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt update&#xA;apt install python3&#xA;apt install python3-pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Pipenv and Dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pipenv&#xA;pipenv install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Selenium / ChromeDriver or setup Google Static Maps&lt;/h3&gt; &#xA;&lt;p&gt;Selenium/ChromeDriver is used to take a screenshot of the plane on globe.adsbexchange.com. Or use Google Static Maps, which can cost money if overused(No tutorial use &lt;a href=&#34;https://developers.google.com/maps/documentation/maps-static/get-api-key&#34;&gt;https://developers.google.com/maps/documentation/maps-static/get-api-key&lt;/a&gt; to get to a key).&lt;/p&gt; &#xA;&lt;h4&gt;Chromium&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install chromium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These output methods once installed can be configured in the planes config you create, using the example plane1.ini&lt;/p&gt; &#xA;&lt;h3&gt;Install Screen to run in the background&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install screen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download / Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install git&#xA;git clone -b multi --single-branch https://github.com/Jxck-S/plane-notify.git&#xA;cd plane-notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure main config file with keys and URLs (mainconf.ini) in the configs directory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;mainconf.ini.example&lt;/code&gt; to &lt;code&gt;mainconf.ini&lt;/code&gt; andCopy &lt;code&gt;plane1.ini.example&lt;/code&gt; to &lt;code&gt;plane1.ini&lt;/code&gt;. &lt;code&gt;plane1.ini&lt;/code&gt; can change names as long as it ends with the ini extension&lt;/li&gt; &#xA; &lt;li&gt;Edit them with nano or vi on the running machine or on your pc and transfer the config to where you will be running the bot&lt;/li&gt; &#xA; &lt;li&gt;Pick between OpenSky and ADS-B Exchange&lt;/li&gt; &#xA; &lt;li&gt;The OpenSky API is free for everyone but the data is not as good as ADS-B Exchange. The ADS-B Exchange API is not free and this program will not work for the Rapid API from ADS-B Exchange. It only works with the API that they give when you have a partnership with ADS-B Exchange. It is not cheap to get the ADS-B Exchange full API, Don&#39;t contact them unless you are ready to pay.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to add support for ADS-B Exchanges RapidAPI feel free to work on it and submit a merge request.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve set up multiple planes and want to use ADSB Exchange as your source you must have /all endpoint access to their API or it won&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;Pick the correct API version for ADS-B Exchange.&lt;/li&gt; &#xA; &lt;li&gt;Proxy is if your running multiple programs that use the ADSB Exchange, setup the proxy from lemonodor so you don&#39;t abuse the ADSB Exchange API, otherwise leave enable false.&lt;/li&gt; &#xA; &lt;li&gt;When using OpenSky there are more bugs because I mainly use ADS-B Exchange and work less on the OpenSky Implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configure individual planes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An example file is given (plane1.ini) plane config files should be in the configs directory, the program looks for any file in that folder with a .ini extension.&lt;/li&gt; &#xA; &lt;li&gt;Each plane should have its own config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enter and create a new Screen Session&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screen -R &amp;lt;name screen whatever you want&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipenv run python __main__.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with Docker&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;docker from their website&lt;/a&gt;. Run the following command from the root of the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running this command, due to the &lt;code&gt;-d&lt;/code&gt; flag the container will be running in the background. To see the logs of the docker container use &lt;code&gt;docker logs CONTAINER&lt;/code&gt; (add &lt;code&gt;-f&lt;/code&gt; to continue streaming the containers output)&lt;/p&gt; &#xA;&lt;h3&gt;Telegram message feature - march/2022&lt;/h3&gt; &#xA;&lt;p&gt;Data obtained can be sent through Telegram to a chat (contact), channel or groups.&lt;/p&gt; &#xA;&lt;p&gt;Creating a Telegram Bot&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a conversation with &lt;a href=&#34;https://t.me/BotFather&#34;&gt;BotFather&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Send it to the BotFather: /newbot&lt;/li&gt; &#xA; &lt;li&gt;Choose a name for your bot;&lt;/li&gt; &#xA; &lt;li&gt;Choose a username for your bot;&lt;/li&gt; &#xA; &lt;li&gt;Done! You&#39;ll get a token to access the HTTP API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Getting channel or chat (contact) ID&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a conversation with &lt;a href=&#34;https://t.me/JsonDumpBot&#34;&gt;JsonDumpBot&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;It will reply with a json with information from the message;&lt;/li&gt; &#xA; &lt;li&gt;Go to the channel or chat you want the id and forward a message from there to JsonDumpBot;&lt;/li&gt; &#xA; &lt;li&gt;Find the id in the reply. It&#39;ll look something like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   {...&#xA;    &#34;forward_from_chat&#34;: {&#xA;          &#34;id&#34;: xxxxxxxxx,&#xA;   ...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t forget to add the bot as admin in channel so messages can be sent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Getting a group ID&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;https://web.telegram.org&#34;&gt;Telegram web&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Go to group and check the url on address bar of browser;&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s the group ID (-xxxxxxxxx), it&#39;ll look something like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  https://web.telegram.org/z/#-xxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General Cleanup&lt;/li&gt; &#xA; &lt;li&gt;Restructure project to make it proper currently random files because I didn&#39;t know how to properly structure a project before. (in progress)&lt;/li&gt; &#xA; &lt;li&gt;Add proper logging and service to run the program and remove excessive printing.&lt;/li&gt; &#xA; &lt;li&gt;Better single config YAML, or DB maybe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/References.md&#34;&gt;More References/Documentation&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>zas023/JdBuyer</title>
    <updated>2022-12-17T01:29:43Z</updated>
    <id>tag:github.com,2022-12-17:/zas023/JdBuyer</id>
    <link href="https://github.com/zas023/JdBuyer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;京东抢购自动下单助手，GUI 支持 Windows 和 macOS&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;top&#34;&gt;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/zas023/Jdbuyer.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/zas023/Jdbuyer.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/zas023/Jdbuyer.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-windows%20%7C%20macos-green?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-GLP-important?style=for-the-badge&#34;&gt; &lt;/h1&gt; &#xA;&lt;!-- PROJECT LOGO --&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/PlayCover/PlayCover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zas023/JdBuyer/main/logo.ico&#34; alt=&#34;Logo&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &lt;/a&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;Jd小猪手&lt;/h3&gt; &#xA; &lt;p align=&#34;center&#34;&gt; 一款支持京东自动下单的小工具。 &lt;br&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;1 关于项目&lt;/h2&gt; &#xA;&lt;p&gt;欢迎使用京东小猪手，当您在京东上想要购买的商品无货时，小助手可以帮助您全天候监听商品库存，并在有货时第一时间自动尝试下单，且下单成功后支持微信通知触达。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zas023/JdBuyer/main/assest/shootscreen.mac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;📢&lt;strong&gt;注意&lt;/strong&gt;：由于货源有限，监听到货源后并不能保证一定下单成功，只能保证让你和全国黄牛站在同一起跑线上，剩下的交给奇迹。&lt;/p&gt; &#xA;&lt;h3&gt;1.1 ChangeList&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2022-10-29&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;新增预售商品定金下单模式&lt;/li&gt; &#xA; &lt;li&gt;切换库存查询方式（注意控制速度）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;2 食用教程&lt;/h2&gt; &#xA;&lt;p&gt;目前该项目支持两种 &lt;strong&gt;Shell 脚本&lt;/strong&gt; 和 &lt;strong&gt;GUI 图形界面&lt;/strong&gt; 两种运行模式，目前 Shell 模式支持日志和微信通知，但还需一些额外配置，可根据自身条件选择启动方式。&lt;/p&gt; &#xA;&lt;h3&gt;2.1 Shell 脚本&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装运行环境&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;安装第三方库&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;# or &#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;修改配置&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;进入项目目录，找到 &lt;code&gt;config.ini&lt;/code&gt; 文件，按照其中说明修改对于配置。&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;运行脚本&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;修改项目主文件 &lt;code&gt;JdBuyer.py&lt;/code&gt; 最后部分中 &lt;code&gt;skuId&lt;/code&gt; 和 &lt;code&gt;areaId&lt;/code&gt;。 &lt;em&gt;其余参数字请按注释自行选择修改&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;然后运行程序：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python JdBuyer.py&#xA;# or&#xA;python JdBuyer.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.2 GUI 图形界面&lt;/h3&gt; &#xA;&lt;p&gt;目前可支持 windows 和 macos，请到 &lt;a href=&#34;https://github.com/zas023/JdBuyer/releases&#34;&gt;release&lt;/a&gt; 下载对于文件：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;windwos 下载 JdBuyerApp.zip，解压后双击运行其中可执行文件即可；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;macos 下载 JdBuyerApp.app，下载后直接双击运行即可。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. 如何配置&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;运行程序后，可以看到一共有一下五个配置：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名称&lt;/th&gt; &#xA;   &lt;th&gt;是否必填&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;商品SKU&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;京东商品详情页链接中可以找到,&lt;br&gt;如 &lt;a href=&#34;https://item.jd.com/100015253061.html&#34;&gt;https://item.jd.com/100015253061.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;地区ID&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;下单地址所在的地区,&lt;br&gt;可以在工程 &lt;a href=&#34;https://raw.githubusercontent.com/zas023/JdBuyer/main/area_id&#34;&gt;area_id&lt;/a&gt; 文件夹中找到&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;购买商品数量&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;默认1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;库存查询间隔&lt;/td&gt; &#xA;   &lt;td&gt;是&lt;/td&gt; &#xA;   &lt;td&gt;监听库存的时间间隔，默认3秒&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;支付密码&lt;/td&gt; &#xA;   &lt;td&gt;否&lt;/td&gt; &#xA;   &lt;td&gt;如需使用虚拟资产，如京豆、E卡等&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;注：所有配置均只会保存本地。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. 如何运行&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;当完成以上配置后，点击【开始】按钮即可，如果当前是未登陆状态，会自动弹出登陆二维码等待你打开京东APP扫码登录，登陆成功后会自动开始执行任务。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;注：如长时间未登录提示二维码过期，点击【结束】按钮，重新【开始】即可。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.3 视频教程&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1pe4y1e7ty&#34;&gt;B站传送门，记得一键三连哦！&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3 Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持扫码登陆&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 登陆状态保活&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 开发图形界面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;免责声明&lt;/h1&gt; &#xA;&lt;p&gt;本项目所用资源均源自网络，如有侵犯您的权益，请来信告知，将立即予以处理。&lt;/p&gt; &#xA;&lt;p&gt;任何以任何方式查看此项目的人或直接或间接使用该项目任何使用者都应仔细阅读此声明。一旦使用并复制了任何相关脚本或Script项目的规则，则视为您已接受此免责声明。&lt;/p&gt; &#xA;&lt;p&gt;您必须在下载后的24小时内从计算机或手机中完全删除以上内容。&lt;/p&gt;</summary>
  </entry>
</feed>