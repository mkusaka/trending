<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-09T01:28:30Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inkonchain/node</title>
    <updated>2025-01-09T01:28:30Z</updated>
    <id>tag:github.com,2025-01-09:/inkonchain/node</id>
    <link href="https://github.com/inkonchain/node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;How to run an Ink Node&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ink Node&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Forked and customized from &lt;a href=&#34;https://github.com/smartcontracts/simple-optimism-node&#34;&gt;https://github.com/smartcontracts/simple-optimism-node&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A simple docker compose script for launching full / archive node for the Ink chain.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended Hardware&lt;/h2&gt; &#xA;&lt;h3&gt;Mainnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;2 TB SSD (NVME Recommended)&lt;/li&gt; &#xA; &lt;li&gt;100mb/s+ Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;500 GB SSD (NVME Recommended)&lt;/li&gt; &#xA; &lt;li&gt;100mb/s+ Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Install docker and docker compose&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you&#39;re not logged in as root, you&#39;ll need to log out and log in again after installation to complete the docker installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note: This command installs docker and docker compose for Ubuntu. For windows and mac desktop or laptop, please use Docker Desktop. For other OS, please find instruction in Google.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update and upgrade packages&#xA;sudo apt-get update&#xA;sudo apt-get upgrade -y&#xA;&#xA;### Docker and docker compose prerequisites&#xA;sudo apt-get install -y curl&#xA;sudo apt-get install -y gnupg&#xA;sudo apt-get install -y ca-certificates&#xA;sudo apt-get install -y lsb-release&#xA;&#xA;### Download the docker gpg file to Ubuntu&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&#xA;&#xA;### Add Docker and docker compose support to the Ubuntu&#39;s packages list&#xA;echo &#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&#xA;sudo apt-get update&#xA;&#xA;### Install docker and docker compose on Ubuntu&#xA;sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin&#xA;&#xA;sudo usermod -aG docker $(whoami)&#xA;&#xA;### Verify the Docker and docker compose install on Ubuntu&#xA;sudo docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(For non-root user) After logged out and logged back in, test if docker is working by running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should returns an empty container list without having any error. Otherwise, restart your machine if there are errors.&lt;/p&gt; &#xA;&lt;h3&gt;Clone the Repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/inkonchain/node&#xA;cd node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy .env.example to .env&lt;/h3&gt; &#xA;&lt;p&gt;Make a copy of &lt;code&gt;.env.example&lt;/code&gt; named &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;code&gt;.env&lt;/code&gt; with your editor of choice&lt;/p&gt; &#xA;&lt;h3&gt;Mandatory configurations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NETWORK_NAME&lt;/strong&gt; - Choose which Optimism network layer you want to operate on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ink-sepolia&lt;/code&gt; - Ink Sepolia (Testnet)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ink-mainnet&lt;/code&gt; - Ink (Mainnet)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NODE_TYPE&lt;/strong&gt; - Choose the type of node you want to run: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;full&lt;/code&gt; (Full node) - A Full node contains a few recent blocks without historical states.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;archive&lt;/code&gt; (Archive node) - An Archive node stores the complete history of the blockchain, including historical states.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__RPC_ENDPOINT&lt;/strong&gt; - Specify the endpoint for the RPC of Layer 1 (e.g., Ethereum mainnet). For instance, you can use the free plan of Quicknode for the Ethereum mainnet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__L1_BEACON&lt;/strong&gt; - Specify the beacon endpoint of Layer 1. You can use &lt;a href=&#34;https://www.quicknode.com&#34;&gt;QuickNode for the beacon endpoint&lt;/a&gt;. For example: &lt;a href=&#34;https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce&#34;&gt;https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_NODE__RPC_TYPE&lt;/strong&gt; - Specify the service provider for the RPC endpoint you&#39;ve chosen in the previous step. The available options are: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;alchemy&lt;/code&gt; - Alchemy&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;quicknode&lt;/code&gt; - Quicknode (ETH only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;erigon&lt;/code&gt; - Erigon&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;basic&lt;/code&gt; - Other providers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional configurations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OP_GETH__SYNCMODE&lt;/strong&gt; - Specify sync mode for the execution client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unspecified - Use default snap sync for full node and full sync for archive node&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;snap&lt;/code&gt; - Snap Sync (Default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;full&lt;/code&gt; - Full Sync (For archive node, not recommended for full node)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMAGE_TAG__[...]&lt;/strong&gt; - Use custom docker image for specified components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PORT__[...]&lt;/strong&gt; - Use custom port for specified components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operating the Node&lt;/h2&gt; &#xA;&lt;h3&gt;Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will start the node in a detatched shell (&lt;code&gt;-d&lt;/code&gt;), meaning the node will continue to run in the background. We recommended to add &lt;code&gt;--build&lt;/code&gt; to make sure that latest changes are being applied.&lt;/p&gt; &#xA;&lt;h3&gt;View logs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose logs -f --tail 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view logs of all containers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose logs &amp;lt;CONTAINER_NAME&amp;gt; -f --tail 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view logs for a specific container. Most commonly used &lt;code&gt;&amp;lt;CONTAINER_NAME&amp;gt;&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;op-geth&lt;/li&gt; &#xA; &lt;li&gt;op-node&lt;/li&gt; &#xA; &lt;li&gt;bedrock-init&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stop&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will shut down the node without wiping any volumes. You can safely run this command and then restart the node again.&lt;/p&gt; &#xA;&lt;h3&gt;Restart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will restart the node safely with minimal downtime but without upgrading the node.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade&lt;/h3&gt; &#xA;&lt;p&gt;Pull the latest updates from GitHub, and Docker Hub and rebuild the container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git pull&#xA;docker compose pull&#xA;docker compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will upgrade your node with minimal downtime.&lt;/p&gt; &#xA;&lt;h3&gt;Wipe [DANGER]&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will shut down the node and WIPE ALL DATA. Proceed with caution!&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;h3&gt;Estimate remaining sync time&lt;/h3&gt; &#xA;&lt;p&gt;Run progress.sh to estimate remaining sync time and speed.&lt;/p&gt; &#xA;&lt;p&gt;Uses &lt;code&gt;Cast&lt;/code&gt; command from Foundry tool set. Installation instructions here: &lt;a href=&#34;https://getfoundry.sh/&#34;&gt;https://getfoundry.sh/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./progress.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the sync speed in blocks per minute and the time until sync is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Chain ID: 57073&#xA;Please wait&#xA;Blocks per minute: ...&#xA;Hours until sync completed: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grafana dashboard&lt;/h3&gt; &#xA;&lt;p&gt;Grafana is exposed at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and comes with one pre-loaded dashboard (&#34;Simple Node Dashboard&#34;). Simple Node Dashboard includes basic node information and will tell you if your node ever falls out of sync with the reference L2 node or if a state root fault is detected.&lt;/p&gt; &#xA;&lt;p&gt;Use the following login details to access the dashboard:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Username: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;ink&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Navigate over to &lt;code&gt;Dashboards &amp;gt; Manage &amp;gt; Simple Node Dashboard&lt;/code&gt; to see the dashboard, see the following gif if you need help:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14298799/171476634-0cb84efd-adbf-4732-9c1d-d737915e1fa7.gif&#34; alt=&#34;metrics dashboard gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Walking back L1Block with curr=0x0000...:0 next=0x0000...:0&lt;/h3&gt; &#xA;&lt;p&gt;If you experience &#34;walking back L1Block with curr=0x0000...:0 next=0x0000...:0&#34; for a long time after the Ecotone upgrade, consider these fixes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Wait for a few minutes. This issue usually resolves itself after some time.&lt;/li&gt; &#xA; &lt;li&gt;Restart docker compose: &lt;code&gt;docker compose down&lt;/code&gt; and &lt;code&gt;docker compose up -d --build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If it&#39;s still not working, try setting &lt;code&gt;OP_GETH__SYNCMODE=full&lt;/code&gt; in .env and restart docker compose&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>78/xiaozhi-esp32</title>
    <updated>2025-01-09T01:28:30Z</updated>
    <id>tag:github.com,2025-01-09:/78/xiaozhi-esp32</id>
    <link href="https://github.com/78/xiaozhi-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own AI friend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;小智 AI 聊天机器人 （XiaoZhi AI Chatbot）&lt;/h1&gt; &#xA;&lt;p&gt;（中文 | &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/README_en.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/README_ja.md&#34;&gt;日本語&lt;/a&gt;）&lt;/p&gt; &#xA;&lt;p&gt;这是虾哥的第一个硬件作品。&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bilibili.com/video/BV11msTenEH3/?share_source=copy_web&amp;amp;vd_source=ee1aafe19d6e60cf22e60a93881faeba&#34;&gt;ESP32+SenseVoice+Qwen72B打造你的AI聊天伴侣！【bilibili】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bilibili.com/video/BV1XnmFYLEJN/&#34;&gt;手工打造你的 AI 女友，新手入门教程【bilibili】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目目的&lt;/h2&gt; &#xA;&lt;p&gt;本项目基于乐鑫的 ESP-IDF 进行开发。&lt;/p&gt; &#xA;&lt;p&gt;本项目是一个开源项目，主要用于教学目的。我们希望通过这个项目，能够帮助更多人入门 AI 硬件开发，了解如何将当下飞速发展的大语言模型应用到实际的硬件设备中。无论你是对 AI 感兴趣的学生，还是想要探索新技术的开发者，都可以通过这个项目获得宝贵的学习经验。&lt;/p&gt; &#xA;&lt;p&gt;欢迎所有人参与到项目的开发和改进中来。如果你有任何想法或建议，请随时提出 Issue 或加入群聊。&lt;/p&gt; &#xA;&lt;p&gt;学习交流 QQ 群：946599635&lt;/p&gt; &#xA;&lt;h2&gt;已实现功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wi-Fi / ML307 Cat.1 4G&lt;/li&gt; &#xA; &lt;li&gt;BOOT 键唤醒和打断，支持点击和长按两种触发方式&lt;/li&gt; &#xA; &lt;li&gt;离线语音唤醒 &lt;a href=&#34;https://github.com/espressif/esp-sr&#34;&gt;ESP-SR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;流式语音对话（WebSocket 或 UDP 协议）&lt;/li&gt; &#xA; &lt;li&gt;支持国语、粤语、英语、日语、韩语 5 种语言识别 &lt;a href=&#34;https://github.com/FunAudioLLM/SenseVoice&#34;&gt;SenseVoice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;声纹识别，识别是谁在喊 AI 的名字 &lt;a href=&#34;https://github.com/modelscope/3D-Speaker&#34;&gt;3D Speaker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;大模型 TTS（火山引擎 或 CosyVoice）&lt;/li&gt; &#xA; &lt;li&gt;大模型 LLM（Qwen2.5 72B 或 豆包 API）&lt;/li&gt; &#xA; &lt;li&gt;可配置的提示词和音色（自定义角色）&lt;/li&gt; &#xA; &lt;li&gt;短期记忆，每轮对话后自我总结&lt;/li&gt; &#xA; &lt;li&gt;OLED / LCD 显示屏，显示信号强弱或对话内容&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;硬件部分&lt;/h2&gt; &#xA;&lt;h3&gt;面包板手工制作实践&lt;/h3&gt; &#xA;&lt;p&gt;详见飞书文档教程：&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://ccnphfhqs21z.feishu.cn/wiki/F5krwD16viZoF0kKkvDcrZNYnhb?from=from_copylink&#34;&gt;《小智 AI 聊天机器人百科全书》&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;面包板效果图如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/wiring2.jpg&#34; alt=&#34;面包板效果图&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;已支持的开源硬件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-shi-zhan-pai-esp32-s3-kai-fa-ban&#34; target=&#34;_blank&#34; title=&#34;立创·实战派 ESP32-S3 开发板&#34;&gt;立创·实战派 ESP32-S3 开发板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/espressif/esp-box&#34; target=&#34;_blank&#34; title=&#34;乐鑫 ESP32-S3-BOX3&#34;&gt;乐鑫 ESP32-S3-BOX3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.m5stack.com/zh_CN/core/CoreS3&#34; target=&#34;_blank&#34; title=&#34;M5Stack CoreS3&#34;&gt;M5Stack CoreS3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;神奇按钮 2.4&lt;/li&gt; &#xA; &lt;li&gt;虾哥 Mini C3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div style=&#34;display: flex; justify-content: space-between;&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/lichuang-s3.jpg&#34; target=&#34;_blank&#34; title=&#34;立创·实战派 ESP32-S3 开发板&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/lichuang-s3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/esp32s3-box3.jpg&#34; target=&#34;_blank&#34; title=&#34;乐鑫 ESP32-S3-BOX3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/esp32s3-box3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/m5stack-cores3.jpg&#34; target=&#34;_blank&#34; title=&#34;M5Stack CoreS3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/m5stack-cores3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/magiclick-2p4.jpg&#34; target=&#34;_blank&#34; title=&#34;神奇按钮 2.4&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/magiclick-2p4.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/xmini-c3.jpg&#34; target=&#34;_blank&#34; title=&#34;虾哥 Mini C3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/78/xiaozhi-esp32/main/docs/xmini-c3.jpg&#34; width=&#34;240&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;固件部分&lt;/h2&gt; &#xA;&lt;h3&gt;免开发环境烧录&lt;/h3&gt; &#xA;&lt;p&gt;新手第一次操作建议先不要搭建开发环境，直接使用免开发环境烧录的固件。固件使用的是作者友情提供的测试服，目前开放免费使用，请勿用于商业用途。&lt;/p&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://ccnphfhqs21z.feishu.cn/wiki/Zpz4wXBtdimBrLk25WdcXzxcnNS&#34;&gt;Flash烧录固件（无IDF开发环境）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;开发环境&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cursor 或 VSCode&lt;/li&gt; &#xA; &lt;li&gt;安装 ESP-IDF 插件，选择 SDK 版本 5.3 或以上&lt;/li&gt; &#xA; &lt;li&gt;Linux 比 Windows 更好，编译速度快，也免去驱动问题的困扰&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;AI 角色配置&lt;/h2&gt; &#xA;&lt;p&gt;如果你已经拥有一个小智 AI 聊天机器人，可以参考 👉 &lt;a href=&#34;https://www.bilibili.com/video/BV1jUCUY2EKM/&#34;&gt;后台操作视频教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;详细的使用说明以及测试服的注意事项，请参考 👉 &lt;a href=&#34;https://xiaozhi.me/help&#34;&gt;小智测试服的帮助说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#78/xiaozhi-esp32&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=78/xiaozhi-esp32&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>inkonchain/docs</title>
    <updated>2025-01-09T01:28:30Z</updated>
    <id>tag:github.com,2025-01-09:/inkonchain/docs</id>
    <link href="https://github.com/inkonchain/docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ink Documentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InkChain Documentation App&lt;/h1&gt; &#xA;&lt;p&gt;An advanced, streamlined documentation platform built with Next.js and Nextra for InkChain.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Build &amp;amp; Run&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build Docker image&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t docs .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run Docker container&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 3000:3000 docs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📋 Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: v20.11.0 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is a documentation application powered by &lt;a href=&#34;https://nextra.site/&#34;&gt;Nextra&lt;/a&gt; and built on &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;. Nextra simplifies the creation of documentation sites, allowing us to leverage the &lt;strong&gt;Pages Router&lt;/strong&gt; for efficient navigation and routing. Currently, due to compatibility limitations, we have not yet upgraded to the App Router.&lt;/p&gt; &#xA;&lt;h2&gt;🏁 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with local development:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start development server&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🛠 Tooling&lt;/h2&gt; &#xA;&lt;p&gt;Our development setup includes multiple tools to maintain high-quality code and documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cspell.org/&#34;&gt;CSpell&lt;/a&gt;&lt;/strong&gt;: Real-time spell checking to maintain documentation accuracy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://remark.js.org/&#34;&gt;Remark&lt;/a&gt;&lt;/strong&gt;: Processes and renders Markdown content with added plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt;&lt;/strong&gt;: Ensures code quality by catching potential issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;&lt;/strong&gt;: Enforces consistent code formatting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/strong&gt;: Utility-first CSS framework for fast, responsive UI development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚦 CI/CD Pipeline&lt;/h2&gt; &#xA;&lt;p&gt;Our CI/CD setup utilizes GitHub Actions to run automated checks on every pull request (PR):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;js-lint&lt;/strong&gt;: Ensures proper JavaScript code formatting with ESLint.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;md-lint&lt;/strong&gt;: Checks Markdown code formatting with Remark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;format&lt;/strong&gt;: Enforces consistent code style with Prettier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;spell-check&lt;/strong&gt;: Uses CSpell to verify correct spelling in documentation. For any unique terms (e.g., &#34;InkChain&#34;), add them to the &lt;a href=&#34;https://raw.githubusercontent.com/inkonchain/docs/main/cspell/project-words.txt&#34;&gt;&lt;code&gt;./cspell/project-words.txt&lt;/code&gt;&lt;/a&gt; file to whitelist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌐 Feature Branch Deployment&lt;/h2&gt; &#xA;&lt;p&gt;For every new PR, our CI/CD pipeline deploys a temporary environment via &lt;strong&gt;AWS Amplify&lt;/strong&gt;. This real-time deployment enables live testing and review of changes before merging, ensuring a smoother workflow. The deployment URL is automatically provided within the PR checks, allowing team members to interact with new features.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Production Deployment&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; branch is configured for automatic continuous deployment via &lt;strong&gt;AWS Amplify&lt;/strong&gt;. Every merge triggers a new build and deployment, ensuring that the latest version of the documentation is available to users without manual intervention.&lt;/p&gt;</summary>
  </entry>
</feed>