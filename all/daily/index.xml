<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-29T01:31:09Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>huggingface/setfit</title>
    <updated>2022-09-29T01:31:09Z</updated>
    <id>tag:github.com,2022-09-29:/huggingface/setfit</id>
    <link href="https://github.com/huggingface/setfit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficient few-shot learning with Sentence Transformers&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/setfit/main/assets/setfit.png&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ü§ó &lt;a href=&#34;https://huggingface.co/setfit&#34; target=&#34;_blank&#34;&gt;Models &amp;amp; Datasets&lt;/a&gt; | üìñ &lt;a href=&#34;https://huggingface.co/blog/setfit&#34; target=&#34;_blank&#34;&gt;Blog&lt;/a&gt; | üìÉ &lt;a href=&#34;https://arxiv.org/abs/2209.11055&#34; target=&#34;_blank&#34;&gt;Paper&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;SetFit - Efficient Few-shot Learning with Sentence Transformers&lt;/h1&gt; &#xA;&lt;p&gt;We introduce SetFit, an efficient and prompt-free framework for few-shot fine-tuning of &lt;a href=&#34;https://sbert.net/&#34;&gt;Sentence Transformers&lt;/a&gt;. SetFit achieves high accuracy with little labeled data - for instance, with only 8 labeled examples per class on the Customer Reviews sentiment dataset, SetFit is competitive with fine-tuning RoBERTa Large on the full training set of 3k examples ü§Ø!&lt;/p&gt; &#xA;&lt;p&gt;Compared to other few-shot learning methods, SetFit has several unique features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üó£ &lt;strong&gt;No prompts or verbalisers:&lt;/strong&gt; Current techniques for few-shot fine-tuning require handcrafted prompts or verbalisers to convert examples into a format that&#39;s suitable for the underlying language model. SetFit dispenses with prompts altogether by generating rich embeddings directly from text examples.&lt;/li&gt; &#xA; &lt;li&gt;üèé &lt;strong&gt;Fast to train:&lt;/strong&gt; SetFit doesn&#39;t require large-scale models like T0 or GPT-3 to achieve high accuracy. As a result, it is typically an order of magnitude (or more) faster to train and run inference with.&lt;/li&gt; &#xA; &lt;li&gt;üåé &lt;strong&gt;Multilingual support&lt;/strong&gt;: SetFit can be used with any &lt;a href=&#34;https://huggingface.co/models?library=sentence-transformers&amp;amp;sort=downloads&#34;&gt;Sentence Transformer&lt;/a&gt; on the Hub, which means you can classify text in multiple languages by simply fine-tuning a multilingual checkpoint.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Download and install &lt;code&gt;setfit&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install setfit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training a SetFit model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;setfit&lt;/code&gt; is integrated with the &lt;a href=&#34;https://huggingface.co/&#34;&gt;Hugging Face Hub&lt;/a&gt; and provides two main classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SetFitModel&lt;/code&gt;: a wrapper that combines a pretrained body from &lt;code&gt;sentence_transformers&lt;/code&gt; and a classification head from &lt;code&gt;scikit-learn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetFitTrainer&lt;/code&gt;: a helper class that wraps the fine-tuning process of SetFit.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an end-to-end example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datasets import load_dataset&#xA;from sentence_transformers.losses import CosineSimilarityLoss&#xA;&#xA;from setfit import SetFitModel, SetFitTrainer&#xA;&#xA;&#xA;# Load a dataset from the Hugging Face Hub&#xA;dataset = load_dataset(&#34;emotion&#34;)&#xA;&#xA;# Simulate the few-shot regime by sampling 8 examples per class&#xA;num_classes = 6&#xA;train_ds = dataset[&#34;train&#34;].shuffle(seed=42).select(range(8 * num_classes))&#xA;test_ds = dataset[&#34;test&#34;]&#xA;&#xA;# Load SetFit model from Hub&#xA;model = SetFitModel.from_pretrained(&#34;sentence-transformers/paraphrase-mpnet-base-v2&#34;)&#xA;&#xA;# Create trainer&#xA;trainer = SetFitTrainer(&#xA;    model=model,&#xA;    train_dataset=train_ds,&#xA;    eval_dataset=test_ds,&#xA;    loss_class=CosineSimilarityLoss,&#xA;    batch_size=16,&#xA;    num_iterations=20, # The number of text pairs to generate&#xA;)&#xA;&#xA;# Train and evaluate&#xA;trainer.train()&#xA;metrics = trainer.evaluate()&#xA;&#xA;# Push model to the Hub&#xA;trainer.push_to_hub(&#34;my-awesome-setfit-model&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples, check out the &lt;code&gt;notebooks/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Reproducing the results from the paper&lt;/h2&gt; &#xA;&lt;p&gt;We provide scripts to reproduce the results for SetFit and various baselines presented in Table 2 of our paper. Checkout the setup and training instructions in the &lt;code&gt;scripts/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Developer installation&lt;/h2&gt; &#xA;&lt;p&gt;To run the code in this project, first create a Python virtual environment using e.g. Conda:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n setfit python=3.9 &amp;amp;&amp;amp; conda activate setfit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the base requirements with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -e &#39;.[dev]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install &lt;code&gt;datasets&lt;/code&gt; and packages like &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;isort&lt;/code&gt; that we use to ensure consistent code formatting. Next, go to one of the dedicated baseline directories and install the extra dependencies, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd scripts/setfit&#xA;python -m pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting your code&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;isort&lt;/code&gt; to ensure consistent code formatting. After following the installation steps, you can check your code locally by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make style &amp;amp;&amp;amp; make quality&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ LICENSE&#xA;‚îú‚îÄ‚îÄ Makefile        &amp;lt;- Makefile with commands like `make style` or `make tests`&#xA;‚îú‚îÄ‚îÄ README.md       &amp;lt;- The top-level README for developers using this project.&#xA;‚îú‚îÄ‚îÄ notebooks       &amp;lt;- Jupyter notebooks.&#xA;‚îú‚îÄ‚îÄ final_results   &amp;lt;- Model predictions from the paper&#xA;‚îú‚îÄ‚îÄ scripts         &amp;lt;- Scripts for training and inference&#xA;‚îú‚îÄ‚îÄ setup.cfg       &amp;lt;- Configuration file to define package metadata&#xA;‚îú‚îÄ‚îÄ setup.py        &amp;lt;- Make this project pip installable with `pip install -e`&#xA;‚îú‚îÄ‚îÄ src             &amp;lt;- Source code for SetFit&#xA;‚îî‚îÄ‚îÄ tests           &amp;lt;- Unit tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;[Coming soon!]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReactiveX/RxSwift</title>
    <updated>2022-09-29T01:31:09Z</updated>
    <id>tag:github.com,2022-09-29:/ReactiveX/RxSwift</id>
    <link href="https://github.com/ReactiveX/RxSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reactive Programming in Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/RxSwift_Logo.png&#34; width=&#34;35%&#34; alt=&#34;RxSwift Logo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/ReactiveX/RxSwift/goto&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/ReactiveX/RxSwift/workflows/RxSwift/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS &amp;amp; Linux&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/RxSwift&#34; alt=&#34;RxSwift on CocoaPods&#34; title=&#34;RxSwift on CocoaPods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RxSwift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; alt=&#34;RxSwift on Carthage&#34; title=&#34;RxSwift on Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; alt=&#34;RxSwift on Swift Package Manager&#34; title=&#34;RxSwift on Swift Package Manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Rx is a &lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface, which lets you broadcast and subscribe to values and other events from an &lt;code&gt;Observable&lt;/code&gt; stream.&lt;/p&gt; &#xA;&lt;p&gt;RxSwift is the Swift-specific implementation of the &lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/example.png&#34; width=&#34;55%&#34; alt=&#34;RxSwift Observable Example of a price constantly changing and updating the app&#39;s UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;While this version aims to stay true to the original spirit and naming conventions of Rx, this project also aims to provide a true Swift-first API for Rx APIs.&lt;/p&gt; &#xA;&lt;p&gt;Cross platform documentation can be found on &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like other Rx implementations, RxSwift&#39;s intention is to enable easy composition of asynchronous operations and streams of data in the form of &lt;code&gt;Observable&lt;/code&gt; objects and a suite of methods to transform and compose these pieces of asynchronous work.&lt;/p&gt; &#xA;&lt;p&gt;KVO observation, async operations, UI Events and other streams of data are all unified under &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#observables-aka-sequences&#34;&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt; &#xA;&lt;h2&gt;I came here because I want to ...&lt;/h2&gt; &#xA;&lt;h6&gt;... understand&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Why.md&#34;&gt;why use rx?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md&#34;&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Traits.md&#34;&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/UnitTests.md&#34;&gt;testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Tips.md&#34;&gt;tips and common errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#debugging&#34;&gt;debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/MathBehindRx.md&#34;&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/HotAndColdObservables.md&#34;&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... install&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/#installation&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... hack around&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with the example app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ExampleApp.md&#34;&gt;Running Example App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;with operators in playgrounds. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Playgrounds.md&#34;&gt;Playgrounds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... interact&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href=&#34;http://slack.rxswift.org&#34;&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report a problem using the library. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/.github/ISSUE_TEMPLATE.md&#34;&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request a new feature. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/NewFeatureRequestTemplate.md&#34;&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Help out &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/CONTRIBUTING.md&#34;&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... compare&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ComparisonWithOtherLibraries.md&#34;&gt;with Combine and ReactiveSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... understand the structure&lt;/h6&gt; &#xA;&lt;p&gt;RxSwift is as compositional as the asynchronous work it drives. The core unit is RxSwift itself, while other dependencies can be added for UI Work, testing, and more.&lt;/p&gt; &#xA;&lt;p&gt;It comprises five separate components depending on each other in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ   RxCocoa    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂   RxRelay    ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;        ‚îÇ                  ‚îÇ        &#xA;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ             RxSwift              ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;        ‚îÇ                  ‚îÇ        &#xA;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ    RxTest    ‚îÇ    ‚îÇ  RxBlocking  ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href=&#34;https://reactivex.io&#34;&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Shared Sequences, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt;, &lt;code&gt;BehaviorRelay&lt;/code&gt; and &lt;code&gt;ReplayRelay&lt;/code&gt;, three &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Subjects.md#relays&#34;&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;Here&#39;s an example&lt;/th&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;In Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt; &#xA;   &lt;th rowspan=&#34;9&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;let searchResults = searchBar.rx.text.orEmpty&#xA;    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)&#xA;    .distinctUntilChanged()&#xA;    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in&#xA;        if query.isEmpty {&#xA;            return .just([])&#xA;        }&#xA;        return searchGitHub(query)&#xA;            .catchAndReturn([])&#xA;    }&#xA;    .observe(on: MainScheduler.instance)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;... then bind the results to your tableview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;30%&#34;&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;searchResults&#xA;    .bind(to: tableView.rx.items(cellIdentifier: &#34;Cell&#34;)) {&#xA;        (index, repository: Repository, cell) in&#xA;        cell.textLabel?.text = repository.name&#xA;        cell.detailTextLabel?.text = repository.url&#xA;    }&#xA;    .disposed(by: disposeBag)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.x&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Xcode 11 and below, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/releases/tag/5.1.1&#34;&gt;use RxSwift 5.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RxSwift doesn&#39;t contain any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;These are currently the supported installation options:&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Podfile&#xA;use_frameworks!&#xA;&#xA;target &#39;YOUR_TARGET_NAME&#39; do&#xA;    pod &#39;RxSwift&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxCocoa&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&#xA;# RxTest and RxBlocking make the most sense in the context of unit/integration tests&#xA;target &#39;YOUR_TESTING_TARGET&#39; do&#xA;    pod &#39;RxBlocking&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxTest&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XCFrameworks&lt;/h3&gt; &#xA;&lt;p&gt;Each release starting with RxSwift 6 includes &lt;code&gt;*.xcframework&lt;/code&gt; framework binaries.&lt;/p&gt; &#xA;&lt;p&gt;Simply drag the needed framework binaries to your &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; section under your target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using &lt;code&gt;RxCocoa&lt;/code&gt;, be sure to also drag &lt;strong&gt;RxCocoaRuntime.xcframework&lt;/strong&gt; before importing &lt;code&gt;RxCocoa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks.png&#34; alt=&#34;XCFrameworks instructions&#34; width=&#34;65%&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReactiveX/RxSwift&#34; &#34;6.5.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage as a Static Library&lt;/h4&gt; &#xA;&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update RxSwift --platform iOS --no-build&#xA;sed -i -e &#39;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&#39; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj&#xA;carthage build RxSwift --platform iOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a critical cross-dependency bug affecting many projects including RxSwift in Swift Package Manager. We&#39;ve &lt;a href=&#34;https://bugs.swift.org/browse/SR-12303&#34;&gt;filed a bug (SR-12303)&lt;/a&gt; in early 2020 but have no answer yet. Your mileage may vary. A partial workaround can be found &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/issues/2127#issuecomment-717830502&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;RxTestProject&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/ReactiveX/RxSwift.git&#34;, .exact(&#34;6.5.0&#34;))&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;RxTestProject&#34;, dependencies: [&#34;RxSwift&#34;, &#34;RxCocoa&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ TEST=1 swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually using git submodules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add RxSwift as a submodule&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt; targets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions&#34;&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift&#34;&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GdvLP0ZAhhc&#34;&gt;RxSwift: Debunking the myth of hard (YouTube)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boxueio.com/series/rxswift-101&#34;&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese üá®üá≥)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/-8Y1-lE6NSA&#34;&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf&#34;&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>D1rkMtr/DumpThatLSASS</title>
    <updated>2022-09-29T01:31:09Z</updated>
    <id>tag:github.com,2022-09-29:/D1rkMtr/DumpThatLSASS</id>
    <link href="https://github.com/D1rkMtr/DumpThatLSASS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dumping LSASS by Unhooking MiniDumpWriteDump by getting a fresh DbgHelp.dll copy from the disk , plus functions and strings obfuscation , it contains Anti-sandbox , if you run it under unperformant Virtual Machine you need to uncomment the code related to it and recompile.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DumpThatLSASS&lt;/h1&gt; &#xA;&lt;h2&gt;It&#39;s Fully Undetectable and bypass almost all the vendors AV/EDRs, it doesn&#39;t bypass RunAsPPL&lt;/h2&gt; &#xA;&lt;h2&gt;Dumping LSASS by Unhooking MiniDumpWriteDump by getting a fresh DbgHelp.dll copy from the disk , plus functions and strings obfuscation, duplicate lsass handle from existed processes.&lt;/h2&gt; &#xA;&lt;h2&gt;The execution may take time, bcz of sandboxing check&lt;/h2&gt; &#xA;&lt;h1&gt;NOTICE&lt;/h1&gt; &#xA;&lt;h2&gt;it contains Anti-sandbox , if you run it under unperformant Virtual Machine you need to uncomment the code related to Anti-Debuging and Anti-Sandboxing at the beginning of the main and recompile.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/110354855/192168199-1dec54ff-fbf9-4d20-b407-0408e9f38ba4.png&#34; alt=&#34;MiniLSASS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/110354855/192162544-f49a10a5-1b6d-42af-98e5-e3d2117dc09d.png&#34; alt=&#34;DumpThatLsass&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>