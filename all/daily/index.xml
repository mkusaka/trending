<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-30T01:27:17Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>goauthentik/authentik</title>
    <updated>2024-05-30T01:27:17Z</updated>
    <id>tag:github.com,2024-05-30:/goauthentik/authentik</id>
    <link href="https://github.com/goauthentik/authentik" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The authentication glue you need.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://goauthentik.io/img/icon_top_brand_colour.svg?sanitize=true&#34; height=&#34;150&#34; alt=&#34;authentik logo&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goauthentik.io/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/809154715984199690?label=Discord&amp;amp;style=for-the-badge&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goauthentik/authentik/actions/workflows/ci-main.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goauthentik/authentik/ci-main.yml?branch=main&amp;amp;label=core%20build&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goauthentik/authentik/actions/workflows/ci-outpost.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goauthentik/authentik/ci-outpost.yml?branch=main&amp;amp;label=outpost%20build&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goauthentik/authentik/actions/workflows/ci-web.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goauthentik/authentik/ci-web.yml?branch=main&amp;amp;label=web%20build&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/goauthentik/authentik&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/goauthentik/authentik?style=for-the-badge&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/beryju/authentik.svg?style=for-the-badge&#34; alt=&#34;Docker pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/v/beryju/authentik?sort=semver&amp;amp;style=for-the-badge&#34; alt=&#34;Latest version&#34;&gt; &lt;a href=&#34;https://www.transifex.com/authentik/authentik/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Help%20translate-transifex-blue?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is authentik?&lt;/h2&gt; &#xA;&lt;p&gt;authentik is an open-source Identity Provider that emphasizes flexibility and versatility. It can be seamlessly integrated into existing environments to support new protocols. authentik is also a great solution for implementing sign-up, recovery, and other similar features in your application, saving you the hassle of dealing with them.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For small/test setups it is recommended to use Docker Compose; refer to the &lt;a href=&#34;https://goauthentik.io/docs/installation/docker-compose/?utm_source=github&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For bigger setups, there is a Helm Chart &lt;a href=&#34;https://github.com/goauthentik/helm&#34;&gt;here&lt;/a&gt;. This is documented &lt;a href=&#34;https://goauthentik.io/docs/installation/kubernetes/?utm_source=github&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Light&lt;/th&gt; &#xA;   &lt;th&gt;Dark&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://docs.goauthentik.io/img/screen_apps_light.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://docs.goauthentik.io/img/screen_apps_dark.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://docs.goauthentik.io/img/screen_admin_light.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://docs.goauthentik.io/img/screen_admin_dark.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://goauthentik.io/developer-docs/?utm_source=github&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/goauthentik/authentik/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adoption and Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Your organization uses authentik? We&#39;d love to add your logo to the readme and our website! Email us @ &lt;a href=&#34;mailto:hello@goauthentik.io&#34;&gt;hello@goauthentik.io&lt;/a&gt; or open a GitHub Issue/PR! For more information on how to contribute to authentik, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/goauthentik/authentik/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>quickwit-oss/tantivy</title>
    <updated>2024-05-30T01:27:17Z</updated>
    <id>tag:github.com,2024-05-30:/quickwit-oss/tantivy</id>
    <link href="https://github.com/quickwit-oss/tantivy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tantivy is a full-text search engine library inspired by Apache Lucene and written in Rust&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://docs.rs/crate/tantivy/&#34;&gt;&lt;img src=&#34;https://docs.rs/tantivy/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/quickwit-oss/tantivy/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/quickwit-oss/tantivy/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/quickwit-oss/tantivy&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/quickwit-oss/tantivy/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/MT27AG5EVE&#34;&gt;&lt;img src=&#34;https://shields.io/discord/908281611840282624?label=chat%20on%20discord&#34; alt=&#34;Join the chat at https://discord.gg/MT27AG5EVE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crates.io/crates/tantivy&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/tantivy.svg?sanitize=true&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://tantivy-search.github.io/logo/tantivy-logo.png&#34; alt=&#34;Tantivy, the fastest full-text search engine library written in Rust&#34; height=&#34;250&#34;&gt; &#xA;&lt;h2&gt;Fast full-text search engine library written in Rust&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are looking for an alternative to Elasticsearch or Apache Solr, check out &lt;a href=&#34;https://github.com/quickwit-oss/quickwit&#34;&gt;Quickwit&lt;/a&gt;, our distributed search engine built on top of Tantivy.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tantivy is closer to &lt;a href=&#34;https://lucene.apache.org/&#34;&gt;Apache Lucene&lt;/a&gt; than to &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt; or &lt;a href=&#34;https://lucene.apache.org/solr/&#34;&gt;Apache Solr&lt;/a&gt; in the sense it is not an off-the-shelf search engine server, but rather a crate that can be used to build such a search engine.&lt;/p&gt; &#xA;&lt;p&gt;Tantivy is, in fact, strongly inspired by Lucene&#39;s design.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;The following &lt;a href=&#34;https://tantivy-search.github.io/bench/&#34;&gt;benchmark&lt;/a&gt; breakdowns performance for different types of queries/collections.&lt;/p&gt; &#xA;&lt;p&gt;Your mileage WILL vary depending on the nature of queries and their load.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/searchbenchmark.png&#34;&gt; &#xA;&lt;p&gt;Details about the benchmark can be found at this &lt;a href=&#34;https://github.com/quickwit-oss/search-benchmark-game&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full-text search&lt;/li&gt; &#xA; &lt;li&gt;Configurable tokenizer (stemming available for 17 Latin languages) with third party support for Chinese (&lt;a href=&#34;https://crates.io/crates/tantivy-jieba&#34;&gt;tantivy-jieba&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/cang-jie&#34;&gt;cang-jie&lt;/a&gt;), Japanese (&lt;a href=&#34;https://github.com/lindera-morphology/lindera-tantivy&#34;&gt;lindera&lt;/a&gt;, &lt;a href=&#34;https://crates.io/crates/vaporetto_tantivy&#34;&gt;Vaporetto&lt;/a&gt;, and &lt;a href=&#34;https://crates.io/crates/tantivy-tokenizer-tiny-segmenter&#34;&gt;tantivy-tokenizer-tiny-segmenter&lt;/a&gt;) and Korean (&lt;a href=&#34;https://github.com/lindera-morphology/lindera-tantivy&#34;&gt;lindera&lt;/a&gt; + &lt;a href=&#34;https://github.com/lindera-morphology/lindera-ko-dic-builder&#34;&gt;lindera-ko-dic-builder&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fast (check out the &lt;span&gt;üêé&lt;/span&gt; &lt;span&gt;‚ú®&lt;/span&gt; &lt;a href=&#34;https://tantivy-search.github.io/bench/&#34;&gt;benchmark&lt;/a&gt; &lt;span&gt;‚ú®&lt;/span&gt; &lt;span&gt;üêé&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tiny startup time (&amp;lt;10ms), perfect for command-line tools&lt;/li&gt; &#xA; &lt;li&gt;BM25 scoring (the same as Lucene)&lt;/li&gt; &#xA; &lt;li&gt;Natural query language (e.g. &lt;code&gt;(michael AND jackson) OR &#34;king of pop&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Phrase queries search (e.g. &lt;code&gt;&#34;michael jackson&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Incremental indexing&lt;/li&gt; &#xA; &lt;li&gt;Multithreaded indexing (indexing English Wikipedia takes &amp;lt; 3 minutes on my desktop)&lt;/li&gt; &#xA; &lt;li&gt;Mmap directory&lt;/li&gt; &#xA; &lt;li&gt;SIMD integer compression when the platform/CPU includes the SSE2 instruction set&lt;/li&gt; &#xA; &lt;li&gt;Single valued and multivalued u64, i64, and f64 fast fields (equivalent of doc values in Lucene)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;amp;[u8]&lt;/code&gt; fast fields&lt;/li&gt; &#xA; &lt;li&gt;Text, i64, u64, f64, dates, ip, bool, and hierarchical facet fields&lt;/li&gt; &#xA; &lt;li&gt;Compressed document store (LZ4, Zstd, None)&lt;/li&gt; &#xA; &lt;li&gt;Range queries&lt;/li&gt; &#xA; &lt;li&gt;Faceted search&lt;/li&gt; &#xA; &lt;li&gt;Configurable indexing (optional term frequency and position indexing)&lt;/li&gt; &#xA; &lt;li&gt;JSON Field&lt;/li&gt; &#xA; &lt;li&gt;Aggregation Collector: histogram, range buckets, average, and stats metrics&lt;/li&gt; &#xA; &lt;li&gt;LogMergePolicy with deletes&lt;/li&gt; &#xA; &lt;li&gt;Searcher Warmer API&lt;/li&gt; &#xA; &lt;li&gt;Cheesy logo with a horse&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Non-features&lt;/h3&gt; &#xA;&lt;p&gt;Distributed search is out of the scope of Tantivy, but if you are looking for this feature, check out &lt;a href=&#34;https://github.com/quickwit-oss/quickwit/&#34;&gt;Quickwit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Tantivy works on stable Rust and supports Linux, macOS, and Windows.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tantivy-search.github.io/examples/basic_search.html&#34;&gt;Tantivy&#39;s simple search example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quickwit-oss/tantivy-cli&#34;&gt;tantivy-cli and its tutorial&lt;/a&gt; - &lt;code&gt;tantivy-cli&lt;/code&gt; is an actual command-line interface that makes it easy for you to create a search engine, index documents, and search via the CLI or a small server with a REST API. It walks you through getting a Wikipedia search engine up and running in a few minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/tantivy/&#34;&gt;Reference doc for the last released version&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How can I support this project?&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to support this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Tantivy and tell us about your experience on &lt;a href=&#34;https://discord.gg/MT27AG5EVE&#34;&gt;Discord&lt;/a&gt; or by email (&lt;a href=&#34;mailto:paul.masurel@gmail.com&#34;&gt;paul.masurel@gmail.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Report bugs&lt;/li&gt; &#xA; &lt;li&gt;Write a blog post&lt;/li&gt; &#xA; &lt;li&gt;Help with documentation by asking questions or submitting PRs&lt;/li&gt; &#xA; &lt;li&gt;Contribute code (you can join &lt;a href=&#34;https://discord.gg/MT27AG5EVE&#34;&gt;our Discord server&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Talk about Tantivy around you&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing code&lt;/h2&gt; &#xA;&lt;p&gt;We use the GitHub Pull Request workflow: reference a GitHub ticket and/or include a comprehensive commit message when opening a PR. Feel free to update CHANGELOG.md with your contribution.&lt;/p&gt; &#xA;&lt;h3&gt;Tokenizer&lt;/h3&gt; &#xA;&lt;p&gt;When implementing a tokenizer for tantivy depend on the &lt;code&gt;tantivy-tokenizer-api&lt;/code&gt; crate.&lt;/p&gt; &#xA;&lt;h3&gt;Clone and build locally&lt;/h3&gt; &#xA;&lt;p&gt;Tantivy compiles on stable Rust. To check out and run tests, you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/quickwit-oss/tantivy.git&#xA;cd tantivy&#xA;cargo test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Companies Using Tantivy&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/etsy.png&#34; alt=&#34;Etsy&#34; height=&#34;25&#34; width=&#34;auto&#34;&gt;&amp;nbsp; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/Nuclia.png#gh-light-mode-only&#34; alt=&#34;Nuclia&#34; height=&#34;25&#34; width=&#34;auto&#34;&gt; &amp;nbsp; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/humanfirst.png#gh-light-mode-only&#34; alt=&#34;Humanfirst.ai&#34; height=&#34;30&#34; width=&#34;auto&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/element.io.svg#gh-light-mode-only&#34; alt=&#34;Element.io&#34; height=&#34;25&#34; width=&#34;auto&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/nuclia-dark-theme.png#gh-dark-mode-only&#34; alt=&#34;Nuclia&#34; height=&#34;35&#34; width=&#34;auto&#34;&gt; &amp;nbsp; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/humanfirst.ai-dark-theme.png#gh-dark-mode-only&#34; alt=&#34;Humanfirst.ai&#34; height=&#34;25&#34; width=&#34;auto&#34;&gt;&amp;nbsp; &amp;nbsp; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/quickwit-oss/tantivy/main/doc/assets/images/element-dark-theme.png#gh-dark-mode-only&#34; alt=&#34;Element.io&#34; height=&#34;25&#34; width=&#34;auto&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Can I use Tantivy in other languages?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python ‚Üí &lt;a href=&#34;https://github.com/quickwit-oss/tantivy-py&#34;&gt;tantivy-py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby ‚Üí &lt;a href=&#34;https://github.com/baygeldin/tantiny&#34;&gt;tantiny&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also find other bindings on &lt;a href=&#34;https://github.com/search?q=tantivy&#34;&gt;GitHub&lt;/a&gt; but they may be less maintained.&lt;/p&gt; &#xA;&lt;h3&gt;What are some examples of Tantivy use?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matrix-org/seshat/&#34;&gt;seshat&lt;/a&gt;: A matrix message database/indexer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/baygeldin/tantiny&#34;&gt;tantiny&lt;/a&gt;: Tiny full-text search for Ruby&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lnx-search/lnx&#34;&gt;lnx&lt;/a&gt;: adaptable, typo tolerant search engine with a REST API&lt;/li&gt; &#xA; &lt;li&gt;and &lt;a href=&#34;https://github.com/search?q=tantivy&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;On average, how much faster is Tantivy compared to Lucene?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;According to our &lt;a href=&#34;https://tantivy-search.github.io/bench/&#34;&gt;search latency benchmark&lt;/a&gt;, Tantivy is approximately 2x faster than Lucene.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Does tantivy support incremental indexing?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How can I edit documents?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data in tantivy is immutable. To edit a document, the document needs to be deleted and reindexed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;When will my documents be searchable during indexing?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documents will be searchable after a &lt;code&gt;commit&lt;/code&gt; is called on an &lt;code&gt;IndexWriter&lt;/code&gt;. Existing &lt;code&gt;IndexReader&lt;/code&gt;s will also need to be reloaded in order to reflect the changes. Finally, changes are only visible to newly acquired &lt;code&gt;Searcher&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>iyaja/llama-fs</title>
    <updated>2024-05-30T01:27:17Z</updated>
    <id>tag:github.com,2024-05-30:/iyaja/llama-fs</id>
    <link href="https://github.com/iyaja/llama-fs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A self-organizing file system with llama 3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LlamaFS&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/iyaja/llama-fs/main/electron-react-app/assets/llama_fs.png&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://x.com/AlexReibman/status/1789895425828204553&#34;&gt;Watch the explainer video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open your &lt;code&gt;~/Downloads&lt;/code&gt; directory. Or your Desktop. It&#39;s probably a mess...&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and &lt;strong&gt;naming things&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;LlamaFS is a self-organizing file manager. It automatically renames and organizes your files based on their contents and well-known conventions (e.g., time). It supports many kinds of file, and even images (through Moondream) and audio (through Whisper).&lt;/p&gt; &#xA;&lt;p&gt;LlamaFS runs in two &#34;modes&#34; - as a batch job (batch mode), and an interactive daemon (watch mode).&lt;/p&gt; &#xA;&lt;p&gt;In batch mode, you can send a directory to LlamaFS, and it will return a suggested file structure and organize your files.&lt;/p&gt; &#xA;&lt;p&gt;In watch mode, LlamaFS starts a daemon that watches your directory. It intercepts all filesystem operations, updates i and uses your most recent edits in context to proactively learn and how, so you don&#39;t learns predict how you rename file. e.g. if you create a folder for 2023 tax documents, and start moving 1-3 file in it, LlamaFS will automatically creates, and move the right!&lt;/p&gt; &#xA;&lt;p&gt;Uhh... Sending all my personal files to an API provider?! No thank you!&lt;/p&gt; &#xA;&lt;p&gt;It also has a toggle for &#34;incognito mode&#34;, allowing you route every request through Ollama instead of Groq. Since they use the same Llama 3 model, the perform identically.&lt;/p&gt; &#xA;&lt;h2&gt;How we built it&lt;/h2&gt; &#xA;&lt;p&gt;We built LlamaFS on a Python backend, leveraging the Llama3 model through Groq for file content summarization and tree structuring. For local processing, we integrated Ollama running the same model to ensure privacy in incognito mode. The frontend is crafted with Electron, providing a sleek, user-friendly interface that allows users to interact with the suggested file structures before finalizing changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;It&#39;s extremely fast!&lt;/strong&gt; (for LLM standards)! Most file ops are processed in &amp;lt;500ms in watch mode (benchmarked by &lt;a href=&#34;https://agentops.ai/?utm_source=llama-fs&#34;&gt;AgentOps&lt;/a&gt;). This is because of our smart caching, that selectively rewrites sections of the index based on the minimum nessecary filesystem diff. And of course, Groq&#39;s super fast inference API. üòâ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;It&#39;s immediately useful&lt;/strong&gt; - It&#39;s very low friction to use, and a problem almost everyone has. We started using it ourselves on this project (very Meta)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s next for LlamaFS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find and remove old/unused files&lt;/li&gt; &#xA; &lt;li&gt;We have some really cool ideas for - filesystem diffs are hard...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before installing, ensure you have the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.10 or higher&lt;/li&gt; &#xA; &lt;li&gt;pip (Python package installer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;To install the project, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/iyaja/llama-fs.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd llama-fs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install requirements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Install moondream if you want to use the incognito mode&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ollama pull moondream&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To serve the application locally using FastAPI, run the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastapi dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the server by default on port 8000. The API can be queried using a curl command, and passing in the file path as the argument. For example, on the Downloads folder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://127.0.0.1:8000 \&#xA; -H &#34;Content-Type: application/json&#34; \&#xA; -d &#39;{&#34;path&#34;: &#34;/Users/&amp;lt;username&amp;gt;/Downloads/&#34;, &#34;instruction&#34;: &#34;string&#34;, &#34;incognito&#34;: false}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>