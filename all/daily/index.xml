<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-09T01:29:25Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>weak1337/Alcatraz</title>
    <updated>2023-01-09T01:29:25Z</updated>
    <id>tag:github.com,2023-01-09:/weak1337/Alcatraz</id>
    <link href="https://github.com/weak1337/Alcatraz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;x64 binary obfuscator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alcatraz&lt;/h1&gt; &#xA;&lt;p&gt;Alcatraz is a x64 binary obfuscator that is able to obfuscate various different pe files including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.exe&lt;/li&gt; &#xA; &lt;li&gt;.dll&lt;/li&gt; &#xA; &lt;li&gt;.sys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#alcatraz&#34;&gt;Alcatraz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#obfuscation-of-immediate-moves&#34;&gt;Obfuscation of immediate moves&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#control-flow-flattening&#34;&gt;Control flow flattening&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#add-mutation&#34;&gt;ADD mutation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#entry-point-obfuscation&#34;&gt;Entry-point obfuscation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#lea-obfuscation&#34;&gt;Lea obfuscation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#anti-disassembly&#34;&gt;Anti disassembly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#import-obfuscation&#34;&gt;Import obfuscation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/#final-result&#34;&gt;Final result&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Install: &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;https://vcpkg.io/en/getting-started.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;asmjit&lt;/code&gt;: vcpkg.exe install asmjit:x64-windows&lt;br&gt; &lt;code&gt;Zydis&lt;/code&gt;: vcpkg.exe install zydis:x64-windows&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/gui.PNG&#34; alt=&#34;imgbefore&#34;&gt; 1.) Load a binary by clicking &lt;code&gt;file&lt;/code&gt; in the top left corner.&lt;br&gt; 2.) Add functions by expanding the &lt;code&gt;Functions&lt;/code&gt; tree. (You can search by putting in the name in the searchbar at the top)&lt;br&gt; 3.) Hit &lt;code&gt;compile&lt;/code&gt; (note: obfuscating lots of functions might take some seconds)&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;In the following showcase all features (besides the one being showcased) are disabled.&lt;/p&gt; &#xA;&lt;h3&gt;Obfuscation of immediate moves&lt;/h3&gt; &#xA;&lt;p&gt;If an immediate value is moved into a register, we obfuscate it by applying multiple bitwise operations. Let&#39;s take a look at the popular function &lt;code&gt;_security_init_cookie&lt;/code&gt;.&lt;br&gt; Before: &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/const_before.PNG&#34; alt=&#34;imgbefore&#34;&gt; After: &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/const_after.PNG&#34; alt=&#34;imgafter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Control flow flattening&lt;/h3&gt; &#xA;&lt;p&gt;By removing the tidy program structure the compiler generated and putting our code into new generated blocks, we increase the complexity of the program. Lets take this simple function &lt;code&gt;main&lt;/code&gt; as example (optimization for this program is disabled):&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/flatten_function.PNG&#34; alt=&#34;imgmain&#34;&gt;&lt;br&gt; If we throw this into IDA 7.6 the decompiler will optimize it:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/flatten_func_noobf.PNG&#34; alt=&#34;imgmainnoobf&#34;&gt;&lt;br&gt; Now let&#39;s flatten its control flow and let IDA analyze it again:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/flatten_func_obf.PNG&#34; alt=&#34;imgmainobf&#34;&gt;&lt;br&gt; As you can see, the complexity increased by a lot even though I only show a small portion of the generated code. If you want to know what the cfg looks like: &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/flatten_func_cfg.PNG&#34; alt=&#34;imgmaincfg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ADD mutation&lt;/h3&gt; &#xA;&lt;p&gt;If a register (eg. RAX) is added to another register (eg. RCX) we will mutate the instruction. This means that the syntax changes but not the semantic. The instruction &lt;code&gt;ADD RCX, RAX&lt;/code&gt; can be mutated to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;push rax&#xA;not rax&#xA;sub rcx, rax&#xA;pop rax&#xA;sub rcx, 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to learn more about mutation take a look at &lt;a href=&#34;https://github.com/mike1k/perses&#34;&gt;perses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Entry point obfuscation&lt;/h3&gt; &#xA;&lt;p&gt;If the PE file is a .exe (.dll support will be added) we will create a custom entry point that decrypts the real one on startup (!!! doesn&#39;t work when beeing manual mapped).&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/customentry.PNG&#34; alt=&#34;imgmaincfg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lea obfuscation&lt;/h3&gt; &#xA;&lt;p&gt;The lea obfuscation is quite simple yet effective. We move a different location into the register and decrypt it afterwards. This way, reverse engineers can&#39;t cross reference certain data / functions.&lt;br&gt; Let&#39;s say we find the following instruction: &lt;code&gt;lea rcx, [0xDEAD]&lt;/code&gt;&lt;br&gt; We will mutate it to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;pushf&#xA;lea rcx, [1CE54]&#xA;sub rcx, EFA7&#xA;popf&#xA;&#xA;rcx -&amp;gt; 0xDEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anti disassembly&lt;/h3&gt; &#xA;&lt;p&gt;If we find an instruction that starts with the byte 0xFF we will put a 0xEB infront of it.&lt;br&gt; We do this because 0xEB 0xFF encodes to jmp rip + 1 which, in the end, jumps to our actual first 0xFF. This will throw off tools that decode instructions in a linear way.&lt;br&gt; Before:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/ffbefore.PNG&#34; alt=&#34;imgffbefore&#34;&gt;&lt;br&gt; After:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/ffafter.PNG&#34; alt=&#34;imgffafter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;From time to time we can insert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-asm&#34;&gt;jz 3&#xA;jne 1&#xA;0xE8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IDA will try to decode the 0xE8 (call) but won&#39;t have any success:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/jzobf.PNG&#34; alt=&#34;imgjz&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Import obfuscation&lt;/h3&gt; &#xA;&lt;p&gt;There is no &#34;proper&#34; IAT obfuscation at the moment. The 0xFF anti disassembly trick takes care of it for now. Proper implementation is planned here:&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/Alcatraz/obfuscator/misc/iat.cpp&#34;&gt;iat.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Final result&lt;/h3&gt; &#xA;&lt;p&gt;This is a snippet of our &lt;code&gt;main&lt;/code&gt; function with everything except anti disassembly enabled (so IDA can create a function):&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/weak1337/Alcatraz/master/images/final.PNG&#34; alt=&#34;imgfinal&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ProgrammingHero1/new-year-new-me</title>
    <updated>2023-01-09T01:29:25Z</updated>
    <id>tag:github.com,2023-01-09:/ProgrammingHero1/new-year-new-me</id>
    <link href="https://github.com/ProgrammingHero1/new-year-new-me" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>sherlock-project/sherlock</title>
    <updated>2023-01-09T01:29:25Z</updated>
    <id>tag:github.com,2023-01-09:/sherlock-project/sherlock</id>
    <link href="https://github.com/sherlock-project/sherlock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”Ž Hunt down social media accounts by username across social networks&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://sherlock-project.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/27065646/53551960-ae4dff80-3b3a-11e9-9075-cef786c69364.png&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;span&gt;Hunt down social media accounts by username across &lt;a href=&#34;https://github.com/sherlock-project/sherlock/raw/master/sites.md&#34;&gt;social networks&lt;/a&gt;&lt;/span&gt; &lt;br&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://www.python.org/downloads/&#34; title=&#34;Python version&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-%3E=_3.6-green.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/LICENSE&#34; title=&#34;License: MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/sherlock-project/sherlock/actions&#34; title=&#34;Test Status&#34;&gt;&lt;img src=&#34;https://github.com/sherlock-project/sherlock/workflows/Tests/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/sherlock-project/sherlock/actions&#34; title=&#34;Nightly Tests&#34;&gt;&lt;img src=&#34;https://github.com/sherlock-project/sherlock/workflows/Nightly/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/intent/tweet?text=%F0%9F%94%8E%20Find%20usernames%20across%20social%20networks%20&amp;amp;url=https://github.com/sherlock-project/sherlock&amp;amp;hashtags=hacking,%20osint,%20bugbounty,%20reconnaissance&#34; title=&#34;Share on Twitter&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://sherlock-project.github.io/&#34;&gt;&lt;img alt=&#34;Website&#34; src=&#34;https://img.shields.io/website-up-down-green-red/http/sherlock-project.github.io/..svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://hub.docker.com/r/theyahya/sherlock&#34;&gt;&lt;img alt=&#34;docker image&#34; src=&#34;https://img.shields.io/docker/v/theyahya/sherlock&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#installation&#34;&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#usage&#34;&gt;Usage&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#docker-notes&#34;&gt;Docker Notes&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://asciinema.org/a/223115&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/images/sherlock_demo.gif&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# clone the repo&#xA;$ git clone https://github.com/sherlock-project/sherlock.git&#xA;&#xA;# change the working directory to sherlock&#xA;$ cd sherlock&#xA;&#xA;# install the requirements&#xA;$ python3 -m pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3 sherlock --help&#xA;usage: sherlock [-h] [--version] [--verbose] [--folderoutput FOLDEROUTPUT]&#xA;                [--output OUTPUT] [--tor] [--unique-tor] [--csv]&#xA;                [--site SITE_NAME] [--proxy PROXY_URL] [--json JSON_FILE]&#xA;                [--timeout TIMEOUT] [--print-all] [--print-found] [--no-color]&#xA;                [--browse] [--local]&#xA;                USERNAMES [USERNAMES ...]&#xA;&#xA;Sherlock: Find Usernames Across Social Networks (Version 0.14.2)&#xA;&#xA;positional arguments:&#xA;  USERNAMES             One or more usernames to check with social networks.&#xA;                        Check similar usernames using {%} (replace to &#39;_&#39;, &#39;-&#39;, &#39;.&#39;).&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  --version             Display version information and dependencies.&#xA;  --verbose, -v, -d, --debug&#xA;                        Display extra debugging information and metrics.&#xA;  --folderoutput FOLDEROUTPUT, -fo FOLDEROUTPUT&#xA;                        If using multiple usernames, the output of the results will be&#xA;                        saved to this folder.&#xA;  --output OUTPUT, -o OUTPUT&#xA;                        If using single username, the output of the result will be saved&#xA;                        to this file.&#xA;  --tor, -t             Make requests over Tor; increases runtime; requires Tor to be&#xA;                        installed and in system path.&#xA;  --unique-tor, -u      Make requests over Tor with new Tor circuit after each request;&#xA;                        increases runtime; requires Tor to be installed and in system&#xA;                        path.&#xA;  --csv                 Create Comma-Separated Values (CSV) File.&#xA;  --xlsx                Create the standard file for the modern Microsoft Excel&#xA;                        spreadsheet (xslx).&#xA;  --site SITE_NAME      Limit analysis to just the listed sites. Add multiple options to&#xA;                        specify more than one site.&#xA;  --proxy PROXY_URL, -p PROXY_URL&#xA;                        Make requests over a proxy. e.g. socks5://127.0.0.1:1080&#xA;  --json JSON_FILE, -j JSON_FILE&#xA;                        Load data from a JSON file or an online, valid, JSON file.&#xA;  --timeout TIMEOUT     Time (in seconds) to wait for response to requests (Default: 60)&#xA;  --print-all           Output sites where the username was not found.&#xA;  --print-found         Output sites where the username was found.&#xA;  --no-color            Don&#39;t color terminal output&#xA;  --browse, -b          Browse to all results on default browser.&#xA;  --local, -l           Force the use of the local data.json file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for only one user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 sherlock user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for more than one user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 sherlock user1 user2 user3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accounts found will be stored in an individual text file with the corresponding username (e.g &lt;code&gt;user123.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Anaconda (Windows) Notes&lt;/h2&gt; &#xA;&lt;p&gt;If you are using Anaconda in Windows, using &#39;python3&#39; might not work. Use &#39;python&#39; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Notes&lt;/h2&gt; &#xA;&lt;p&gt;If docker is installed you can build an image and run this as a container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t mysherlock-image .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the image is built, sherlock can be invoked by running the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -t mysherlock-image user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;--rm&lt;/code&gt; flag removes the container filesystem on completion to prevent cruft build-up. See: &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#clean-up---rm&#34;&gt;https://docs.docker.com/engine/reference/run/#clean-up---rm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;-t&lt;/code&gt; flag allocates a pseudo-TTY which allows colored output. See: &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#foreground&#34;&gt;https://docs.docker.com/engine/reference/run/#foreground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the following command to access the saved results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -t -v &#34;$PWD/results:/opt/sherlock/results&#34; mysherlock-image -o /opt/sherlock/results/text.txt user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-v &#34;$PWD/results:/opt/sherlock/results&#34;&lt;/code&gt; options tell docker to create (or use) the folder &lt;code&gt;results&lt;/code&gt; in the present working directory and to mount it at &lt;code&gt;/opt/sherlock/results&lt;/code&gt; on the docker container. The &lt;code&gt;-o /opt/sherlock/results/text.txt&lt;/code&gt; option tells &lt;code&gt;sherlock&lt;/code&gt; to output the result.&lt;/p&gt; &#xA;&lt;p&gt;Or you can use &#34;Docker Hub&#34; to run &lt;code&gt;sherlock&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run theyahya/sherlock user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;docker-compose.yml&lt;/code&gt; file from the repository and use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose run sherlock -o /opt/sherlock/results/text.txt user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love to have you help us with the development of Sherlock. Each and every contribution is greatly valued!&lt;/p&gt; &#xA;&lt;p&gt;Here are some things we would appreciate your help on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Addition of new site support Â¹&lt;/li&gt; &#xA; &lt;li&gt;Bringing back site support of &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/removed_sites.md&#34;&gt;sites that have been removed&lt;/a&gt; in the past due to false positives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[1] Please look at the Wiki entry on &lt;a href=&#34;https://github.com/sherlock-project/sherlock/wiki/Adding-Sites-To-Sherlock&#34;&gt;adding new sites&lt;/a&gt; to understand the issues.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for contributing to Sherlock!&lt;/p&gt; &#xA;&lt;p&gt;Before creating a pull request with new development, please run the tests to ensure that everything is working great. It would also be a good idea to run the tests before starting development to distinguish problems between your environment and the Sherlock software.&lt;/p&gt; &#xA;&lt;p&gt;The following is an example of the command line to run all the tests for Sherlock. This invocation hides the progress text that Sherlock normally outputs, and instead shows the verbose output of the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd sherlock/sherlock&#xA;$ python3 -m unittest tests.all --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we do currently have 100% test coverage. Unfortunately, some of the sites that Sherlock checks are not always reliable, so it is common to get response problems. Any problems in connection will show up as warnings in the tests instead of true errors.&lt;/p&gt; &#xA;&lt;p&gt;If some sites are failing due to connection problems (site is down, in maintenance, etc) you can exclude them from tests by creating a &lt;code&gt;tests/.excluded_sites&lt;/code&gt; file with a list of sites to ignore (one site name per line).&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/sherlock-project/sherlock&#34;&gt;&lt;img src=&#34;https://starchart.cc/sherlock-project/sherlock.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT Â© Sherlock Project&lt;br&gt; Original Creator - &lt;a href=&#34;https://github.com/sdushantha&#34;&gt;Siddharth Dushantha&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>