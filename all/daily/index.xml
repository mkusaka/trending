<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-16T01:28:33Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phil-opp/blog_os</title>
    <updated>2024-09-16T01:28:33Z</updated>
    <id>tag:github.com,2024-09-16:/phil-opp/blog_os</id>
    <link href="https://github.com/phil-opp/blog_os" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Writing an OS in Rust&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blog OS&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for the &lt;em&gt;Writing an OS in Rust&lt;/em&gt; series at &lt;a href=&#34;https://os.phil-opp.com&#34;&gt;os.phil-opp.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions, open an issue or chat with us &lt;a href=&#34;https://gitter.im/phil-opp/blog_os&#34;&gt;on Gitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Where is the code?&lt;/h2&gt; &#xA;&lt;p&gt;The code for each post lives in a separate git branch. This makes it possible to see the intermediate state after each post.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The code for the latest post is available &lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-12&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find the branch for each post by following the &lt;code&gt;(source code)&lt;/code&gt; link in the &lt;a href=&#34;https://raw.githubusercontent.com/phil-opp/blog_os/main/#posts&#34;&gt;post list&lt;/a&gt; below. The branches are named &lt;code&gt;post-XX&lt;/code&gt; where &lt;code&gt;XX&lt;/code&gt; is the post number, for example &lt;code&gt;post-03&lt;/code&gt; for the &lt;em&gt;VGA Text Mode&lt;/em&gt; post or &lt;code&gt;post-07&lt;/code&gt; for the &lt;em&gt;Hardware Interrupts&lt;/em&gt; post. For build instructions, see the Readme of the respective branch.&lt;/p&gt; &#xA;&lt;p&gt;You can check out a branch in a subdirectory using &lt;a href=&#34;https://git-scm.com/docs/git-worktree&#34;&gt;git worktree&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git worktree add code post-10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command creates a subdirectory named &lt;code&gt;code&lt;/code&gt; that contains the code for the 10th post (&#34;Heap Allocation&#34;).&lt;/p&gt; &#xA;&lt;h2&gt;Posts&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this project is to provide step-by-step tutorials in individual blog posts. We currently have the following set of posts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bare Bones:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/freestanding-rust-binary/&#34;&gt;A Freestanding Rust Binary&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-01&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/minimal-rust-kernel/&#34;&gt;A Minimal Rust Kernel&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-02&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/vga-text-mode/&#34;&gt;VGA Text Mode&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-03&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/testing/&#34;&gt;Testing&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-04&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Interrupts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/cpu-exceptions/&#34;&gt;CPU Exceptions&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-05&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/double-fault-exceptions/&#34;&gt;Double Faults&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-06&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/hardware-interrupts/&#34;&gt;Hardware Interrupts&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-07&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Memory Management:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/paging-introduction/&#34;&gt;Introduction to Paging&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-08&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/paging-implementation/&#34;&gt;Paging Implementation&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-09&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/heap-allocation/&#34;&gt;Heap Allocation&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-10&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/allocator-designs/&#34;&gt;Allocator Designs&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-11&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multitasking&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/async-await/&#34;&gt;Async/Await&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/post-12&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;First Edition Posts&lt;/h2&gt; &#xA;&lt;p&gt;The current version of the blog is already the second edition. The first edition is outdated and no longer maintained, but might still be useful. The posts of the first edition are:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;i&gt;Click to expand&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bare Bones:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/multiboot-kernel.html&#34;&gt;A Minimal x86 Kernel&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_1&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/entering-longmode.html&#34;&gt;Entering Long Mode&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_2&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/set-up-rust.html&#34;&gt;Set Up Rust&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_3&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/printing-to-screen.html&#34;&gt;Printing to Screen&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_4&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Memory Management:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/allocating-frames.html&#34;&gt;Allocating Frames&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_5&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/modifying-page-tables.html&#34;&gt;Page Tables&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_6&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/remap-the-kernel.html&#34;&gt;Remap the Kernel&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_7&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/kernel-heap.html&#34;&gt;Kernel Heap&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_8&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Exceptions:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/handling-exceptions.html&#34;&gt;Handling Exceptions&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_9&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/double-faults.html&#34;&gt;Double Faults&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/first_edition_post_10&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Additional Resources:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/cross-compile-binutils.html&#34;&gt;Cross Compile Binutils&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/cross-compile-libcore.html&#34;&gt;Cross Compile libcore&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/set-up-gdb&#34;&gt;Set Up GDB&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/handling-exceptions-with-naked-fns.html&#34;&gt;Handling Exceptions using Naked Functions&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/catching-exceptions.html&#34;&gt;Catching Exceptions&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/catching_exceptions&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/better-exception-messages.html&#34;&gt;Better Exception Messages&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/better_exception_messages&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://os.phil-opp.com/returning-from-exceptions.html&#34;&gt;Returning from Exceptions&lt;/a&gt; (&lt;a href=&#34;https://github.com/phil-opp/blog_os/tree/returning_from_exceptions&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project, with exception of the &lt;code&gt;blog/content&lt;/code&gt; folder, is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/phil-opp/blog_os/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/phil-opp/blog_os/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;p&gt;For licensing of the &lt;code&gt;blog/content&lt;/code&gt; folder, see the &lt;a href=&#34;https://raw.githubusercontent.com/phil-opp/blog_os/main/blog/content/README.md&#34;&gt;&lt;code&gt;blog/content/README.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>frdel/agent-zero</title>
    <updated>2024-09-16T01:28:33Z</updated>
    <id>tag:github.com,2024-09-16:/frdel/agent-zero</id>
    <link href="https://github.com/frdel/agent-zero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Agent Zero AI framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agent Zero&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.skool.com/agent-zero&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Skool-Join%20our%20Community-4A90E2?style=for-the-badge&amp;amp;logo=skool&amp;amp;logoColor=white&#34; alt=&#34;Join our Skool Community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/B8KZKNsPpj&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-Join%20our%20server-5865F2?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Join our Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@AgentZeroFW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YouTube-Subscribe-red?style=for-the-badge&amp;amp;logo=youtube&amp;amp;logoColor=white&#34; alt=&#34;Subscribe on YouTube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/jan-tomasek/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LinkedIn-Connect-blue?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34; alt=&#34;Connect on LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://x.com/JanTomasekDev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/X.com-Follow-1DA1F2?style=for-the-badge&amp;amp;logo=x&amp;amp;logoColor=white&#34; alt=&#34;Follow on X.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=C9n8zFpaV3I&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frdel/agent-zero/main/docs/res/intro_vid.jpg&#34; alt=&#34;Intro Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Personal and organic AI framework&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agent Zero is not a predefined agentic framework. It is designed to be dynamic, organically growing, and learning as you use it.&lt;/li&gt; &#xA; &lt;li&gt;Agent Zero is fully transparent, readable, comprehensible, customizable and interactive.&lt;/li&gt; &#xA; &lt;li&gt;Agent Zero uses the computer as a tool to accomplish its (your) tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Now with UI:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frdel/agent-zero/main/docs/res/ui_screen1.png&#34; alt=&#34;UI prototype&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key concepts&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;General-purpose assistant&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agent Zero is not pre-programmed for specific tasks (but can be). It is meant to be a general-purpose personal assistant. Give it a task, and it will gather information, execute commands and code, cooperate with other agent instances, and do its best to accomplish it.&lt;/li&gt; &#xA; &lt;li&gt;It has a persistent memory, allowing it to memorize previous solutions, code, facts, instructions, etc., to solve tasks faster and more reliably in the future.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Computer as a tool&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agent Zero uses the operating system as a tool to accomplish its tasks. It has no single-purpose tools pre-programmed. Instead, it can write its own code and use the terminal to create and use its own tools as needed.&lt;/li&gt; &#xA; &lt;li&gt;The only default tools in its arsenal are online search, memory features, communication (with the user and other agents), and code/terminal execution. Everything else is created by the agent itself or can be extended by the user.&lt;/li&gt; &#xA; &lt;li&gt;Tool usage functionality has been developed from scratch to be the most compatible and reliable, even with very small models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-agent cooperation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every agent has a superior agent giving it tasks and instructions. Every agent then reports back to its superior.&lt;/li&gt; &#xA; &lt;li&gt;In the case of the first agent in the chain (Agent 0), the superior is the human user; the agent sees no difference.&lt;/li&gt; &#xA; &lt;li&gt;Every agent can create its subordinate agent to help break down and solve subtasks. This helps all agents keep their context clean and focused.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completely customizable and extensible&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Almost nothing in this framework is hard-coded. Nothing is hidden. Everything can be extended or changed by the user.&lt;/li&gt; &#xA; &lt;li&gt;The whole behavior is defined by a system prompt in the &lt;strong&gt;prompts/default/agent.system.md&lt;/strong&gt; file. Change this prompt and change the framework dramatically.&lt;/li&gt; &#xA; &lt;li&gt;The framework does not guide or limit the agent in any way. There are no hard-coded rails that agents have to follow.&lt;/li&gt; &#xA; &lt;li&gt;Every prompt, every small message template sent to the agent in its communication loop, can be found in the &lt;strong&gt;prompts/&lt;/strong&gt; folder and changed.&lt;/li&gt; &#xA; &lt;li&gt;Every default tool can be found in the &lt;strong&gt;python/tools/&lt;/strong&gt; folder and changed or copied to create new predefined tools.&lt;/li&gt; &#xA; &lt;li&gt;Of course, it is open-source (except for some tools like Perplexity, but that will be replaced with an open-source alternative as well in the future).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Communication is key&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give your agent a proper system prompt and instructions, and it can do miracles.&lt;/li&gt; &#xA; &lt;li&gt;Agents can communicate with their superiors and subordinates, asking questions, giving instructions, and providing guidance. Instruct your agents in the system prompt on how to communicate effectively.&lt;/li&gt; &#xA; &lt;li&gt;The terminal interface is real-time streamed and interactive. You can stop and intervene at any point. If you see your agent heading in the wrong direction, just stop and tell it right away.&lt;/li&gt; &#xA; &lt;li&gt;There is a lot of freedom in this framework. You can instruct your agents to regularly report back to superiors asking for permission to continue. You can instruct them to use point-scoring systems when deciding when to delegate subtasks. Superiors can double-check subordinates&#39; results and dispute. The possibilities are endless.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frdel/agent-zero/main/docs/res/splash_wide.png&#34; alt=&#34;Agent Zero&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nice features to have&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output is very clean, colorful, readable and interactive; nothing is hidden.&lt;/li&gt; &#xA; &lt;li&gt;The same colorful output you see in the terminal is automatically saved to HTML file in &lt;strong&gt;logs/&lt;/strong&gt; folder for every session.&lt;/li&gt; &#xA; &lt;li&gt;Agent output is streamed in real-time, allowing the user to read along and intervene at any time.&lt;/li&gt; &#xA; &lt;li&gt;No coding is required, only prompting and communication skills.&lt;/li&gt; &#xA; &lt;li&gt;With a solid system prompt, the framework is reliable even with small models, including precise tool usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Keep in mind&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Agent Zero can be dangerous!&lt;/strong&gt; With proper instruction, Agent Zero is capable of many things, even potentially dangerous to your computer, data, or accounts. Always run Agent Zero in an isolated environment (like the built in docker container) and be careful what you wish for.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Agent Zero is not pre-programmed; it is prompt-based.&lt;/strong&gt; The whole framework contains only a minimal amount of code and does not guide the agent in any way. Everything lies in the system prompt in the &lt;strong&gt;prompts/&lt;/strong&gt; folder. Here you can rewrite the whole framework behavior to your needs. If your agent fails to communicate properly, use tools, reason, use memory, find answers - just instruct it better.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If you cannot provide the ideal environment, let your agent know.&lt;/strong&gt; Agent Zero is made to be used in an isolated virtual environment (for safety) with some tools preinstalled and configured. If you cannot provide all the necessary conditions or API keys, just change the system prompt and tell your agent what operating system and tools are at its disposal. Nothing is hard-coded; if you do not tell your agent about a certain tool, it will not know about it and will not try to use it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_Pionjv4hGc&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frdel/agent-zero/main/docs/res/david_vid.jpg&#34; alt=&#34;David Ondrej video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known problems&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The system prompt sucks. You can do better. If you do, help me please :)&lt;/li&gt; &#xA; &lt;li&gt;The communication between agent and terminal in docker container via SSH can sometimes break and stop producing outputs. Sometimes it is because the agent runs something like &#34;server.serve_forever()&#34; which causes the terminal to hang, sometimes a random error can occur. Restarting the agent and/or the docker container helps.&lt;/li&gt; &#xA; &lt;li&gt;The agent can break his operating system. Sometimes the agent can deactivate virtual environment, uninstall packages, change config etc. Again, removing the docker container and cleaning up the &lt;strong&gt;work_dir/&lt;/strong&gt; is enough to fix that.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Ideal environment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker container&lt;/strong&gt;: The perfect environment to run Agent Zero is the built-in docker container. The agent can download the image &lt;strong&gt;frdel/agent-zero-exe&lt;/strong&gt; on its own and start the container, you only need to have docker running (like the Docker Desktop application).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: Python has to be installed on the system to run the framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Internet access&lt;/strong&gt;: The agent will need internet access to use its online knowledge tool and execute commands and scripts requiring a connection. If you do not need your agent to be online, you can alter its prompts in the &lt;strong&gt;prompts/&lt;/strong&gt; folder and make it fully local.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frdel/agent-zero/main/docs/res/time_example.jpg&#34; alt=&#34;Time example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;A detailed setup guide with a video can be found here: &lt;a href=&#34;https://github.com/frdel/agent-zero/tree/main/docs/installation&#34;&gt;/docs/installation&lt;/a&gt;. Scroll down to see the readme file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ &lt;strong&gt;Changes to launch files since v0.6:&lt;/strong&gt;&lt;br&gt; main.py file has been replaced with run_ui.py (webui) and run_cli.py (terminal) launch files. configuration has been moved to initialize.py for both webui and terminal launch files.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>apache/iotdb</title>
    <updated>2024-09-16T01:28:33Z</updated>
    <id>tag:github.com,2024-09-16:/apache/iotdb</id>
    <link href="https://github.com/apache/iotdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache IoTDB&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/README_ZH.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IoTDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/iotdb/actions/workflows/unit-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/iotdb/actions/workflows/unit-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit-Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/apache/iotdb&#34;&gt;&lt;img src=&#34;https://codecov.io/github/apache/iotdb/graph/badge.svg?token=ejF3UGk0Nv&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/iotdb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/apache/iotdb.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github-size-badge.herokuapp.com/apache/iotdb.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/apache/iotdb/total.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-win%20%7C%20macos%20%7C%20linux-yellow.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/java--language-1.8%20%7C%2011%20%7C%2017-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://iotdb.apache.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=iotdb-website&#34; alt=&#34;IoTDB Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://search.maven.org/#search%7Cgav%7C1%7Cg:%22org.apache.iotdb%22&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.apache.iotdb/iotdb-parent/badge.svg?sanitize=true&#34; alt=&#34;Maven Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/apache/iotdb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&amp;amp;style=social&#34; alt=&#34;Slack Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;IoTDB (Internet of Things Database) is a data management system for time series data, which provides users with specific services, including data collection, storage and analysis. Due to its lightweight structure, high performance and usable features, together with its seamless integration with the Hadoop and Spark ecosystem, IoTDB meets the requirements of massive dataset storage, high throughput data input, and complex data analysis in the industrial IoT field.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.timecho.com/archives/shi-xu-shu-ju-ku-iotdb-gong-neng-xiang-jie-yu-xing-ye-ying-yong&#34;&gt;Click for More Information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IoTDB depends on &lt;a href=&#34;https://github.com/apache/tsfile&#34;&gt;TsFile&lt;/a&gt; which is a columnar storage file format designed for time series data. The branch &lt;code&gt;iotdb&lt;/code&gt; of TsFile project is used to deploy SNAPSHOT version for IoTDB project.&lt;/p&gt; &#xA;&lt;h1&gt;Main Features&lt;/h1&gt; &#xA;&lt;p&gt;The main features of IoTDB are as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Flexible deployment strategy. IoTDB provides users with a one-click installation tool on either the cloud platform or the terminal devices, and a data synchronization tool bridging the data on cloud platform and terminals.&lt;/li&gt; &#xA; &lt;li&gt;Low cost on hardware. IoTDB can reach a high compression ratio of disk storage.&lt;/li&gt; &#xA; &lt;li&gt;Efficient directory structure. IoTDB supports efficient organization for complex time series data structures from intelligent networking devices, organization for time series data from devices of the same type, and fuzzy searching strategy for massive and complex directory of time series data.&lt;/li&gt; &#xA; &lt;li&gt;High-throughput read and write. IoTDB supports millions of low-power devices&#39; strong connection data access, high-speed data read and write for intelligent networking devices and mixed devices mentioned above.&lt;/li&gt; &#xA; &lt;li&gt;Rich query semantics. IoTDB supports time alignment for time series data across devices and measurements, computation in time series field (frequency domain transformation) and rich aggregation function support in time dimension.&lt;/li&gt; &#xA; &lt;li&gt;Easy to get started. IoTDB supports SQL-like language, JDBC standard API and import/export tools which are easy to use.&lt;/li&gt; &#xA; &lt;li&gt;Seamless integration with state-of-the-practice Open Source Ecosystem. IoTDB supports analysis ecosystems, such as Hadoop and Spark, as well as visualization tools, such as Grafana.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For the latest information about IoTDB, please visit &lt;a href=&#34;https://iotdb.apache.org/&#34;&gt;IoTDB official website&lt;/a&gt;. If you encounter any problems or identify any bugs while using IoTDB, please report an issue in &lt;a href=&#34;https://issues.apache.org/jira/projects/IOTDB/issues&#34;&gt;Jira&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h2&gt;Outline&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#iotdb&#34;&gt;IoTDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#main-features&#34;&gt;Main Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#outline&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#configurations&#34;&gt;Configurations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#start&#34;&gt;Start&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#start-iotdb&#34;&gt;Start IoTDB&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#use-iotdb&#34;&gt;Use IoTDB&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#use-cli&#34;&gt;Use Cli&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#basic-commands-for-iotdb&#34;&gt;Basic commands for IoTDB&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#stop-iotdb&#34;&gt;Stop IoTDB&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#only-build-server&#34;&gt;Only build server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#only-build-cli&#34;&gt;Only build cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/iotdb/master/#usage-of-csv-import-and-export-tool&#34;&gt;Usage of CSV Import and Export Tool&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;This short guide will walk you through the basic process of using IoTDB. For a more detailed introduction, please visit our website&#39;s &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;To use IoTDB, you need to have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Java &amp;gt;= 1.8 (1.8, 11 to 17 are verified. Please make sure the environment path has been set accordingly).&lt;/li&gt; &#xA; &lt;li&gt;Maven &amp;gt;= 3.6 (If you want to compile and install IoTDB from source code).&lt;/li&gt; &#xA; &lt;li&gt;Set the max open files num as 65535 to avoid the &#34;too many open files&#34; error.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Set the somaxconn as 65535 to avoid &#34;connection reset&#34; error when the system is under high load. &lt;pre&gt;&lt;code&gt;# Linux&#xA;&amp;gt; sudo sysctl -w net.core.somaxconn=65535&#xA;&#xA;# FreeBSD or Darwin&#xA;&amp;gt; sudo sysctl -w kern.ipc.somaxconn=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;(This guide is based on an installation of Ubuntu 22.04.)&lt;/p&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;p&gt;Make sure &lt;code&gt;Git&lt;/code&gt; is installed, if it&#39;s missing, simply install it via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;p&gt;Make sure &lt;code&gt;Java&lt;/code&gt; is installed, if it&#39;s missing, simply install it via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install default-jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flex&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install flex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bison&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install bison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Boost&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libboost-all-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenSSL header files&lt;/h4&gt; &#xA;&lt;p&gt;Usually OpenSSL is already installed, however it&#39;s missing the header files we need to compile. So ensure these are installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac OS&lt;/h3&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;p&gt;First ensure &lt;code&gt;git&lt;/code&gt; works.&lt;/p&gt; &#xA;&lt;p&gt;Usually on a new Mac, as soon as you simply type &lt;code&gt;git&lt;/code&gt; in a &lt;code&gt;Terminal&lt;/code&gt; window, a popup will come up and ask if you want to finish installing the Mac developer tools. Just say yes. As soon as this is finished, you are free to use &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;Then install &lt;code&gt;Homebrew&lt;/code&gt; - If this hasn&#39;t been installed yet, as we are going to be installing everything using &lt;code&gt;Homebrew&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;p&gt;As soon as that&#39;s done install &lt;code&gt;Java&lt;/code&gt;, if this hasn&#39;t been installed yet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install java&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your version of Homebrew, it will tell you to do one of the following (depending on the type of processor in your device).&lt;/p&gt; &#xA;&lt;p&gt;Mainly on the Intel-based models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mainly on the ARM-based models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CPP Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Building &lt;code&gt;Thrift&lt;/code&gt; requires us to add two more dependencies to the picture.&lt;/p&gt; &#xA;&lt;p&gt;This however is only needed when enabling the &lt;code&gt;with-cpp&lt;/code&gt; profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install boost&#xA;brew install bison&#xA;brew install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Chocolatey&lt;/h4&gt; &#xA;&lt;p&gt;Then install &lt;code&gt;Chocolatey&lt;/code&gt; - If this hasn&#39;t been installed yet, as we are going to be installing everything using &lt;code&gt;Chocolatey&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/install&#34;&gt;https://chocolatey.org/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Git&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install git.install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install openjdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Visual Studio 19 2022&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install visualstudio2022community&#xA;choco install visualstudio2022buildtools&#xA;choco install visualstudio2022-workload-nativedesktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flex / Bison&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install winflexbison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Boost&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install boost-msvc-14.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenSSL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;IoTDB provides three installation methods, you can refer to the following suggestions, choose the one fits you best:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation from source code. If you need to modify the code yourself, you can use this method.&lt;/li&gt; &#xA; &lt;li&gt;Installation from binary files. Download the binary files from the official website. This is the recommended method, in which you will get a binary released package which is out-of-the-box.&lt;/li&gt; &#xA; &lt;li&gt;Using Docker：The path to the dockerfile is &lt;a href=&#34;https://github.com/apache/iotdb/tree/master/docker/src/main&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here in the Quick Start, we give a brief introduction of using source code to install IoTDB. For further information, please refer to &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;Prepare Thrift compiler&lt;/h3&gt; &#xA;&lt;p&gt;Skip this chapter if you are using Windows.&lt;/p&gt; &#xA;&lt;p&gt;As we use Thrift for our RPC module (communication and protocol definition), we involve Thrift during the compilation, so Thrift compiler 0.13.0 (or higher) is required to generate Thrift Java code. Thrift officially provides binary compiler for Windows, but unfortunately, they do not provide that for Unix OSs.&lt;/p&gt; &#xA;&lt;p&gt;If you have permission to install new software, use &lt;code&gt;apt install&lt;/code&gt; or &lt;code&gt;yum install&lt;/code&gt; or &lt;code&gt;brew install&lt;/code&gt; to install the Thrift compiler. (If you already have installed the thrift compiler, skip this step.) Then, you may add the following parameter when running Maven: &lt;code&gt;-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=&amp;lt;YOUR LOCAL THRIFT BINARY FILE&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If not, then you have to compile the thrift compiler, and it requires you install a boost library first. Therefore, we compiled a Unix compiler ourselves and put it onto GitHub, and with the help of a maven plugin, it will be downloaded automatically during compilation. This compiler works fine with gcc8 or later, Ubuntu MacOS, and CentOS, but previous versions and other OSs are not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;If you can not download the thrift compiler automatically because of a network problem, you can download it by yourself, and then either: rename your thrift file to &lt;code&gt;{project_root}\thrift\target\tools\thrift_0.12.0_0.13.0_linux.exe&lt;/code&gt;; or, add Maven commands: &lt;code&gt;-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=&amp;lt;YOUR LOCAL THRIFT BINARY FILE&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compile IoTDB&lt;/h3&gt; &#xA;&lt;p&gt;You can download the source code from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/apache/iotdb.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default dev branch is the master branch, if you want to use a released version x.x.x:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout vx.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or checkout to the branch of a big version, e.g., the branch of 1.0 is rel/1.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout rel/x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build IoTDB from source&lt;/h3&gt; &#xA;&lt;p&gt;Under the root path of iotdb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn clean package -pl distribution -am -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After being built, the IoTDB distribution is located at the folder: &#34;distribution/target&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Only build cli&lt;/h3&gt; &#xA;&lt;p&gt;Under the iotdb/iotdb-client path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mvn clean package -pl cli -am -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After being built, the IoTDB cli is located at the folder &#34;cli/target&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Build Others&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-P with-cpp&lt;/code&gt; for compiling the cpp client. (For more details, read client-cpp&#39;s Readme file.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Directories &#34;&lt;code&gt;thrift/target/generated-sources/thrift&lt;/code&gt;&#34;, &#34;&lt;code&gt;thrift-sync/target/generated-sources/thrift&lt;/code&gt;&#34;, &#34;&lt;code&gt;thrift-cluster/target/generated-sources/thrift&lt;/code&gt;&#34;, &#34;&lt;code&gt;thrift-influxdb/target/generated-sources/thrift&lt;/code&gt;&#34; and &#34;&lt;code&gt;antlr/target/generated-sources/antlr4&lt;/code&gt;&#34; need to be added to sources roots to avoid compilation errors in the IDE.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In IDEA, you just need to right click on the root project name and choose &#34;&lt;code&gt;Maven-&amp;gt;Reload Project&lt;/code&gt;&#34; after you run &lt;code&gt;mvn package&lt;/code&gt; successfully.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configurations&lt;/h3&gt; &#xA;&lt;p&gt;Configuration files are under the &#34;conf&#34; folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;environment config module (&lt;code&gt;datanode-env.bat&lt;/code&gt;, &lt;code&gt;datanode-env.sh&lt;/code&gt;),&lt;/li&gt; &#xA; &lt;li&gt;system config module (&lt;code&gt;iotdb-datanode.properties&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;log config module (&lt;code&gt;logback.xml&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/Reference/DataNode-Config-Manual.html&#34;&gt;Config Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Start&lt;/h2&gt; &#xA;&lt;p&gt;You can go through the following steps to test the installation. If there is no error returned after execution, the installation is completed.&lt;/p&gt; &#xA;&lt;h3&gt;Start IoTDB&lt;/h3&gt; &#xA;&lt;p&gt;Users can start 1C1D IoTDB by the start-standalone script under the sbin folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Unix/OS X&#xA;&amp;gt; sbin/start-standalone.sh&#xA;&#xA;# Windows&#xA;&amp;gt; sbin\start-standalone.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use IoTDB&lt;/h3&gt; &#xA;&lt;h4&gt;Use Cli&lt;/h4&gt; &#xA;&lt;p&gt;IoTDB offers different ways to interact with server, here we introduce the basic steps of using Cli tool to insert and query data.&lt;/p&gt; &#xA;&lt;p&gt;After installing IoTDB, there is a default user &#39;root&#39;, its default password is also &#39;root&#39;. Users can use this default user to login Cli to use IoTDB. The start-up script of Cli is the start-cli script in the folder sbin. When executing the script, user should assign IP, PORT, USER_NAME and PASSWORD. The default parameters are &#34;-h 127.0.0.1 -p 6667 -u root -pw -root&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Here is the command for starting the Cli:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Unix/OS X&#xA;&amp;gt; sbin/start-cli.sh -h 127.0.0.1 -p 6667 -u root -pw root&#xA;&#xA;# Windows&#xA;&amp;gt; sbin\start-cli.bat -h 127.0.0.1 -p 6667 -u root -pw root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command line cli is interactive, so you should see the welcome logo and statements if everything is ready:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; _____       _________  ______   ______&#xA;|_   _|     |  _   _  ||_   _ `.|_   _ \&#xA;  | |   .--.|_/ | | \_|  | | `. \ | |_) |&#xA;  | | / .&#39;`\ \  | |      | |  | | |  __&#39;.&#xA; _| |_| \__. | _| |_    _| |_.&#39; /_| |__) |&#xA;|_____|&#39;.__.&#39; |_____|  |______.&#39;|_______/  version x.x.x&#xA;&#xA;&#xA;IoTDB&amp;gt; login successfully&#xA;IoTDB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Basic commands for IoTDB&lt;/h4&gt; &#xA;&lt;p&gt;Now, let us introduce the way of creating timeseries, inserting data and querying data.&lt;/p&gt; &#xA;&lt;p&gt;The data in IoTDB is organized as timeseries. Each timeseries includes multiple data–time pairs, and is owned by a database. Before defining a timeseries, we should define a database using CREATE DATABASE first, and here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; CREATE DATABASE root.ln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use SHOW DATABASES to check the database being created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SHOW DATABASES&#xA;+-------------+&#xA;|     Database|&#xA;+-------------+&#xA;|      root.ln|&#xA;+-------------+&#xA;Total line number = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the database is set, we can use CREATE TIMESERIES to create a new timeseries. When creating a timeseries, we should define its data type and the encoding scheme. Here we create two timeseries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN&#xA;IoTDB&amp;gt; CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=RLE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to query the specific timeseries, we can use SHOW TIMESERIES &#xA; &lt;path&gt;&#xA;  . &#xA;  &lt;path&gt;&#xA;    represent the location of the timeseries. The default value is &#34;null&#34;, which queries all the timeseries in the system (the same as using &#34;SHOW TIMESERIES root&#34;). Here are some examples:&#xA;  &lt;/path&gt;&#xA; &lt;/path&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Querying all timeseries in the system:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SHOW TIMESERIES&#xA;+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|                   Timeseries|Alias|Database|DataType|Encoding|Compression|Tags|Attributes|&#xA;+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|root.ln.wf01.wt01.temperature| null|      root.ln|   FLOAT|     RLE|     SNAPPY|null|      null|&#xA;|     root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|&#xA;+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Querying a specific timeseries (root.ln.wf01.wt01.status):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SHOW TIMESERIES root.ln.wf01.wt01.status&#xA;+------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|              timeseries|alias|database|dataType|encoding|compression|tags|attributes|&#xA;+------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;|root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|&#xA;+------------------------+-----+-------------+--------+--------+-----------+----+----------+&#xA;Total line number = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inserting timeseries data is a basic operation of IoTDB, you can use the ‘INSERT’ command to finish this. Before insertion, you should assign the timestamp and the suffix path name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; INSERT INTO root.ln.wf01.wt01(timestamp,status) values(100,true);&#xA;IoTDB&amp;gt; INSERT INTO root.ln.wf01.wt01(timestamp,status,temperature) values(200,false,20.71)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data that you have just inserted will be displayed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SELECT status FROM root.ln.wf01.wt01&#xA;+------------------------+------------------------+&#xA;|                    Time|root.ln.wf01.wt01.status|&#xA;+------------------------+------------------------+&#xA;|1970-01-01T00:00:00.100Z|                    true|&#xA;|1970-01-01T00:00:00.200Z|                   false|&#xA;+------------------------+------------------------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also query several timeseries data using one SQL statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SELECT * FROM root.ln.wf01.wt01&#xA;+------------------------+-----------------------------+------------------------+&#xA;|                    Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|&#xA;+------------------------+-----------------------------+------------------------+&#xA;|1970-01-01T00:00:00.100Z|                         null|                    true|&#xA;|1970-01-01T00:00:00.200Z|                        20.71|                   false|&#xA;+------------------------+-----------------------------+------------------------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the time zone in Cli, you can use the following SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SET time_zone=+08:00&#xA;Time zone has set to +08:00&#xA;IoTDB&amp;gt; SHOW time_zone&#xA;Current time zone: Asia/Shanghai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add then the query result will show using the new time zone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; SELECT * FROM root.ln.wf01.wt01&#xA;+-----------------------------+-----------------------------+------------------------+&#xA;|                         Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|&#xA;+-----------------------------+-----------------------------+------------------------+&#xA;|1970-01-01T08:00:00.100+08:00|                         null|                    true|&#xA;|1970-01-01T08:00:00.200+08:00|                        20.71|                   false|&#xA;+-----------------------------+-----------------------------+------------------------+&#xA;Total line number = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The commands to exit the Cli are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IoTDB&amp;gt; quit&#xA;or&#xA;IoTDB&amp;gt; exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about the commands supported by IoTDB SQL, please see &lt;a href=&#34;https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stop IoTDB&lt;/h3&gt; &#xA;&lt;p&gt;The server can be stopped with &#34;ctrl-C&#34; or the following script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Unix/OS X&#xA;&amp;gt; sbin/stop-standalone.sh&#xA;&#xA;# Windows&#xA;&amp;gt; sbin\stop-standalone.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;The use of CSV Import and Export Tool&lt;/h1&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://iotdb.apache.org/UserGuide/latest/Tools-System/Import-Export-Tool.html&#34;&gt;The use of CSV Import and Export Tool&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Frequent Questions for Compiling&lt;/h1&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://iotdb.apache.org/Development/ContributeGuide.html#_Frequent-Questions-when-Compiling-the-Source-Code&#34;&gt;Frequent Questions when Compiling the Source Code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contact Us&lt;/h1&gt; &#xA;&lt;h3&gt;QQ Group&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache IoTDB User Group: 659990460&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wechat Group&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add friend: &lt;code&gt;tietouqiao&lt;/code&gt; or &lt;code&gt;liutaohua001&lt;/code&gt;, and then we&#39;ll invite you to the group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Slack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg&#34;&gt;Slack channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/apache/iotdb/issues/1995&#34;&gt;Join the community&lt;/a&gt; for more!&lt;/p&gt;</summary>
  </entry>
</feed>