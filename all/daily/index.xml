<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-16T01:29:31Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PCSX2/pcsx2</title>
    <updated>2024-07-16T01:29:31Z</updated>
    <id>tag:github.com,2024-07-16:/PCSX2/pcsx2</id>
    <link href="https://github.com/PCSX2/pcsx2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PCSX2 - The Playstation 2 Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PCSX2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PCSX2/pcsx2/windows_build_matrix.yml?label=%F0%9F%96%A5%EF%B8%8F%20Windows%20Builds&#34; alt=&#34;Windows Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PCSX2/pcsx2/linux_build_matrix.yml?label=%F0%9F%90%A7%20Linux%20Builds&#34; alt=&#34;Linux Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PCSX2/pcsx2/macos_build_matrix.yml?label=%F0%9F%8D%8E%20MacOS%20Builds&#34; alt=&#34;MacOS Build Status&#34;&gt; &lt;a href=&#34;https://app.codacy.com/gh/PCSX2/pcsx2/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=PCSX2/pcsx2&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/1f7c0d75fec74d6daa6adb084e5b4f71&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/TCz3t9k&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/309643527816609793?color=%235CA8FA&amp;amp;label=PCSX2%20Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PCSX2 is a free and open-source PlayStation 2 (PS2) emulator. Its purpose is to emulate the PS2&#39;s hardware, using a combination of MIPS CPU &lt;a href=&#34;https://en.wikipedia.org/wiki/Interpreter_(computing)&#34;&gt;Interpreters&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_recompilation&#34;&gt;Recompilers&lt;/a&gt; and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_machine&#34;&gt;Virtual Machine&lt;/a&gt; which manages hardware states and PS2 system memory. This allows you to play PS2 games on your PC, with many additional features and benefits.&lt;/p&gt; &#xA;&lt;h2&gt;Project Details&lt;/h2&gt; &#xA;&lt;p&gt;PCSX2 has been in development for more than 20 years. Past versions could only run a few public domain game demos, but newer versions can run most games at full speed, including popular titles such as Final Fantasy X and Devil May Cry 3. Visit the &lt;a href=&#34;https://pcsx2.net/compat/&#34;&gt;PCSX2 compatibility list&lt;/a&gt; to check the latest compatibility status of games (with more than 2500 titles tested).&lt;/p&gt; &#xA;&lt;p&gt;Installers and binaries for both stable and nightly builds are available from &lt;a href=&#34;https://pcsx2.net/downloads/&#34;&gt;our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PCSX2 supports Windows, Linux, and Mac platforms. Our &lt;a href=&#34;https://pcsx2.net/docs/setup/requirements&#34;&gt;setup documentation page&lt;/a&gt; contains additional details on software and hardware requirements.&lt;/p&gt; &#xA;&lt;p&gt;Please note that a BIOS dump from a legitimately-owned PS2 console is required to use the emulator. For more information, visit &lt;a href=&#34;https://pcsx2.net/docs/setup/gather/#how-to-dump-your-ps2-bios&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing / Building&lt;/h2&gt; &#xA;&lt;p&gt;PCSX2 supports translation into other languages using &lt;a href=&#34;https://crowdin.com/project/pcsx2-emulator&#34;&gt;Crowdin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/PCSX2/pcsx2/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; or visit the &lt;a href=&#34;https://github.com/PCSX2/pcsx2/wiki&#34;&gt;GitHub Wiki&lt;/a&gt; for more info on how to contribute.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pytube/pytube</title>
    <updated>2024-07-16T01:29:31Z</updated>
    <id>tag:github.com,2024-07-16:/pytube/pytube</id>
    <link href="https://github.com/pytube/pytube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, dependency-free Python library (and command-line utility) for downloading YouTube Videos.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pytube/pytube/master/#&#34;&gt;&lt;img src=&#34;https://assets.nickficano.com/gh-pytube.min.svg?sanitize=true&#34; width=&#34;456&#34; height=&#34;143&#34; alt=&#34;pytube logo&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/pytube/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/pytube?style=flat-square&#34; alt=&#34;pypi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pytube.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/python-pytube/badge/?version=latest&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pytube/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pytube?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Actively soliciting contributors!&lt;/h3&gt; &#xA;&lt;p&gt;Have ideas for how pytube can be improved? Feel free to open an issue or a pull request!&lt;/p&gt; &#xA;&lt;h1&gt;pytube&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;pytube&lt;/em&gt; is a genuine, lightweight, dependency-free Python library (and command-line utility) for downloading YouTube videos.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation about the usage of the library can be found at &lt;a href=&#34;https://pytube.io&#34;&gt;pytube.io&lt;/a&gt;. This is recommended for most cases. If you want to hastily download a single video, the &lt;a href=&#34;https://raw.githubusercontent.com/pytube/pytube/master/#Quickstart&#34;&gt;quick start&lt;/a&gt; guide below might be what you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;YouTube is the most popular video-sharing platform in the world and as a hacker, you may encounter a situation where you want to script something to download videos. For this, I present to you: &lt;em&gt;pytube&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;pytube&lt;/em&gt; is a lightweight library written in Python. It has no third-party dependencies and aims to be highly reliable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;pytube&lt;/em&gt; also makes pipelining easy, allowing you to specify callback functions for different download events, such as &lt;code&gt;on progress&lt;/code&gt; or &lt;code&gt;on complete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, &lt;em&gt;pytube&lt;/em&gt; includes a command-line utility, allowing you to download videos right from the terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for both progressive &amp;amp; DASH streams&lt;/li&gt; &#xA; &lt;li&gt;Support for downloading the complete playlist&lt;/li&gt; &#xA; &lt;li&gt;Easily register &lt;code&gt;on_download_progress&lt;/code&gt; &amp;amp; &lt;code&gt;on_download_complete&lt;/code&gt; callbacks&lt;/li&gt; &#xA; &lt;li&gt;Command-line interfaced included&lt;/li&gt; &#xA; &lt;li&gt;Caption track support&lt;/li&gt; &#xA; &lt;li&gt;Outputs caption tracks to .srt format (SubRip Subtitle)&lt;/li&gt; &#xA; &lt;li&gt;Ability to capture thumbnail URL&lt;/li&gt; &#xA; &lt;li&gt;Extensively documented source code&lt;/li&gt; &#xA; &lt;li&gt;No third-party dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;This guide covers the most basic usage of the library. For more detailed information, please refer to &lt;a href=&#34;https://pytube.io&#34;&gt;pytube.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Pytube requires an installation of Python 3.6 or greater, as well as pip. (Pip is typically bundled with Python &lt;a href=&#34;https://python.org/downloads&#34;&gt;installations&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To install from PyPI with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python -m pip install pytube&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes, the PyPI release becomes slightly outdated. To install from the source with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python -m pip install git+https://github.com/pytube/pytube&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using pytube in a Python script&lt;/h3&gt; &#xA;&lt;p&gt;To download a video using the library in a script, you&#39;ll need to import the YouTube class from the library and pass an argument of the video URL. From there, you can access the streams and download them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; &amp;gt;&amp;gt;&amp;gt; from pytube import YouTube&#xA; &amp;gt;&amp;gt;&amp;gt; YouTube(&#39;https://youtu.be/2lAe1cqCOXo&#39;).streams.first().download()&#xA; &amp;gt;&amp;gt;&amp;gt; yt = YouTube(&#39;http://youtube.com/watch?v=2lAe1cqCOXo&#39;)&#xA; &amp;gt;&amp;gt;&amp;gt; yt.streams&#xA;  ... .filter(progressive=True, file_extension=&#39;mp4&#39;)&#xA;  ... .order_by(&#39;resolution&#39;)&#xA;  ... .desc()&#xA;  ... .first()&#xA;  ... .download()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the command-line interface&lt;/h3&gt; &#xA;&lt;p&gt;Using the CLI is remarkably straightforward as well. To download a video at the highest progressive quality, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pytube https://youtube.com/watch?v=2lAe1cqCOXo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also do the same for a playlist:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pytube https://www.youtube.com/playlist?list=PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>DiceDB/dice</title>
    <updated>2024-07-16T01:29:31Z</updated>
    <id>tag:github.com,2024-07-16:/DiceDB/dice</id>
    <link href="https://github.com/DiceDB/dice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A drop-in replacement of Redis with SQL-based realtime reactivity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DiceDB&lt;/h1&gt; &#xA;&lt;p&gt;Dice 🎲 is a drop-in replacement of Redis with SQL-based realtime reactivity baked in.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: DiceDB is still in development and it supports a subset of Redis commands. So, please do not use it in production. But, feel free to go through the &lt;a href=&#34;https://github.com/DiceDB/dice/issues&#34;&gt;open issues&lt;/a&gt; and contribute to help us speed up the development.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How is it different from Redis?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;DiceDB is multi-threaded and follows &lt;a href=&#34;https://en.wikipedia.org/wiki/Shared-nothing_architecture&#34;&gt;shared-nothing architecture&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;DiceDB supports a new command called &lt;code&gt;QWATCH&lt;/code&gt; that lets clients listen to a SQL query and get notified in real-time whenever something changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get started with DiceDB is using &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; by running the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run dicedb/dice-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up&lt;/h3&gt; &#xA;&lt;p&gt;To run DiceDB for local development or running from source, you will need&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any of the below supported platform environment: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_Linux_distributions&#34;&gt;Linux based environment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MacOS&#34;&gt;OSX (Darwin) based environment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/dicedb/dice&#xA;$ cd dice&#xA;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dice in action&lt;/h2&gt; &#xA;&lt;p&gt;Because Dice speaks Redis&#39; dialect, you can connect to it with any Redis Client and the simplest way it to use a &lt;a href=&#34;https://redis.io/docs/manual/cli/&#34;&gt;Redis CLI&lt;/a&gt;. Programmatically, depending on the language you prefer, you can use your favourite Redis library to connect.&lt;/p&gt; &#xA;&lt;p&gt;But if you are planning to use &lt;code&gt;QWATCH&lt;/code&gt; feature then you need to use the DiceDB CLI that you can download from &lt;a href=&#34;https://pypi.org/project/dicedb-cli/&#34;&gt;PyPI&lt;/a&gt; by running the following command. The codebase for the same can be found at &lt;a href=&#34;https://github.com/DiceDB/cli/&#34;&gt;dicedb/cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install dicedb-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;Unit tests and integration tests are essential for ensuring correctness and in the case of DiceDB, both types of tests are available to validate its functionality.&lt;/p&gt; &#xA;&lt;p&gt;For unit testing, you can execute individual unit tests by specifying the name of the test function using the &lt;code&gt;TEST_FUNC&lt;/code&gt; environment variable and running the &lt;code&gt;make unittest-one&lt;/code&gt; command. Alternatively, running &lt;code&gt;make unittest&lt;/code&gt; will execute all unit tests.&lt;/p&gt; &#xA;&lt;h3&gt;Executing a single unit test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ TEST_FUNC=&amp;lt;name of the test function&amp;gt; make unittest-one&#xA;$ TEST_FUNC=TestByteList make unittest-one&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running all unit tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make unittest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Integration tests, on the other hand, involve starting up the DiceDB server and running a series of commands to verify the expected end state and output. To execute a single integration test, you can set the &lt;code&gt;TEST_FUNC&lt;/code&gt; environment variable to the name of the test function and run &lt;code&gt;make test-one&lt;/code&gt;. Running &lt;code&gt;make test&lt;/code&gt; will execute all integration tests.&lt;/p&gt; &#xA;&lt;h3&gt;Executing a single integration test&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ TEST_FUNC=&amp;lt;name of the test function&amp;gt; make test-one&#xA;$ TEST_FUNC=TestSet make test-one&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running all integration tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Work to add more tests in DiceDB is in progress and we will soon port the test &lt;a href=&#34;https://github.com/redis/redis/tree/f60370ce28b946c1146dcea77c9c399d39601aaa&#34;&gt;Redis suite&lt;/a&gt; to this codebase to ensure full compatability.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running Benchmark&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go test -test.bench &amp;lt;pattern&amp;gt;&#xA;$ go test -test.bench BenchmarkListRedis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with building and contributing to DiceDB, please refer to the &lt;a href=&#34;https://github.com/DiceDB/dice/issues&#34;&gt;issues&lt;/a&gt; created in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;The story&lt;/h2&gt; &#xA;&lt;p&gt;DiceDB started as a re-implementation of Redis in Golang and the idea was to - build a DB from scratch and understand the micro-nuances that comes with its implementation. The database does not aim to replace Redis, instead it will fit in and optimize itself for multi-core computations running on a single-threaded event loop.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;The Code Contribution Guidelines are published at &lt;a href=&#34;https://raw.githubusercontent.com/DiceDB/dice/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;; please read them before you start making any changes. This would allow us to have a consistent standard of coding practices and developer experience.&lt;/p&gt; &#xA;&lt;p&gt;Contributors can join the &lt;a href=&#34;https://discord.gg/6r8uXWtXh7&#34;&gt;Discord Server&lt;/a&gt; for quick collaboration.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/dicedb/dice/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=dicedb/dice&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Troubleshoot&lt;/h2&gt; &#xA;&lt;h3&gt;Forcefully killing the process&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo netstat -atlpn | grep :7379&#xA;$ sudo kill -9 &amp;lt;process_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>