<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:33:24Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CompVis/stable-diffusion</title>
    <updated>2022-08-17T01:33:24Z</updated>
    <id>tag:github.com,2022-08-17:/CompVis/stable-diffusion</id>
    <link href="https://github.com/CompVis/stable-diffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stable Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Stable Diffusion was made possible thanks to a collaboration with &lt;a href=&#34;https://stability.ai/&#34;&gt;Stability AI&lt;/a&gt; and &lt;a href=&#34;https://runwayml.com/&#34;&gt;Runway&lt;/a&gt; and builds upon our previous work:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2112.10752&#34;&gt;&lt;strong&gt;High-Resolution Image Synthesis with Latent Diffusion Models&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/rromb&#34;&gt;Robin Rombach&lt;/a&gt;*, &lt;a href=&#34;https://github.com/ablattmann&#34;&gt;Andreas Blattmann&lt;/a&gt;*, &lt;a href=&#34;https://github.com/qp-qp&#34;&gt;Dominik Lorenz&lt;/a&gt;, &lt;a href=&#34;https://github.com/pesser&#34;&gt;Patrick Esser&lt;/a&gt;, &lt;a href=&#34;https://hci.iwr.uni-heidelberg.de/Staff/bommer&#34;&gt;Bj√∂rn Ommer&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;which is available on &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/txt2img/merged-0006.png&#34; alt=&#34;txt2img-stable2&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/#stable-diffusion-v1&#34;&gt;Stable Diffusion&lt;/a&gt; is a latent text-to-image diffusion model. Thanks to a generous compute donation from &lt;a href=&#34;https://stability.ai/&#34;&gt;Stability AI&lt;/a&gt; and support from &lt;a href=&#34;https://laion.ai/&#34;&gt;LAION&lt;/a&gt;, we were able to train a Latent Diffusion Model on 512x512 images from a subset of the &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-5B&lt;/a&gt; database. Similar to Google&#39;s &lt;a href=&#34;https://arxiv.org/abs/2205.11487&#34;&gt;Imagen&lt;/a&gt;, this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/#stable-diffusion-v1&#34;&gt;this section&lt;/a&gt; below and the &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion&#34;&gt;model card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A suitable &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt; environment named &lt;code&gt;ldm&lt;/code&gt; can be created and activated with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate ldm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also update an existing &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt; environment by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install pytorch torchvision -c pytorch&#xA;pip install transformers==4.19.2&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stable Diffusion v1&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion&#34;&gt;model card&lt;/a&gt;. Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for &lt;a href=&#34;https://stability.ai/academia-access-form&#34;&gt;academic research purposes upon request&lt;/a&gt;. &lt;strong&gt;This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stability.ai/academia-access-form&#34;&gt;Request access to Stable Diffusion v1 checkpoints for academic research&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Weights&lt;/h3&gt; &#xA;&lt;p&gt;We currently provide three checkpoints, &lt;code&gt;sd-v1-1.ckpt&lt;/code&gt;, &lt;code&gt;sd-v1-2.ckpt&lt;/code&gt; and &lt;code&gt;sd-v1-3.ckpt&lt;/code&gt;, which were trained as follows,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sd-v1-1.ckpt&lt;/code&gt;: 237k steps at resolution &lt;code&gt;256x256&lt;/code&gt; on &lt;a href=&#34;https://huggingface.co/datasets/laion/laion2B-en&#34;&gt;laion2B-en&lt;/a&gt;. 194k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &lt;a href=&#34;https://huggingface.co/datasets/laion/laion-high-resolution&#34;&gt;laion-high-resolution&lt;/a&gt; (170M examples from LAION-5B with resolution &lt;code&gt;&amp;gt;= 1024x1024&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sd-v1-2.ckpt&lt;/code&gt;: Resumed from &lt;code&gt;sd-v1-1.ckpt&lt;/code&gt;. 515k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &#34;laion-improved-aesthetics&#34; (a subset of laion2B-en, filtered to images with an original size &lt;code&gt;&amp;gt;= 512x512&lt;/code&gt;, estimated aesthetics score &lt;code&gt;&amp;gt; 5.0&lt;/code&gt;, and an estimated watermark probability &lt;code&gt;&amp;lt; 0.5&lt;/code&gt;. The watermark estimate is from the LAION-5B metadata, the aesthetics score is estimated using an &lt;a href=&#34;https://github.com/christophschuhmann/improved-aesthetic-predictor&#34;&gt;improved aesthetics estimator&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sd-v1-3.ckpt&lt;/code&gt;: Resumed from &lt;code&gt;sd-v1-2.ckpt&lt;/code&gt;. 195k steps at resolution &lt;code&gt;512x512&lt;/code&gt; on &#34;laion-improved-aesthetics&#34; and 10% dropping of the text-conditioning to improve &lt;a href=&#34;https://arxiv.org/abs/2207.12598&#34;&gt;classifier-free guidance sampling&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints: &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/v1-variants-scores.jpg&#34; alt=&#34;sd evaluation results&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text-to-Image with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/txt2img/merged-0005.png&#34; alt=&#34;txt2img-stable2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/txt2img/merged-0007.png&#34; alt=&#34;txt2img-stable2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder.&lt;/p&gt; &#xA;&lt;h4&gt;Sampling Script&lt;/h4&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/#weights&#34;&gt;obtaining the weights&lt;/a&gt;, link them&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p models/ldm/stable-diffusion-v1/&#xA;ln -s &amp;lt;path/to/model.ckpt&amp;gt; models/ldm/stable-diffusion-v1/model.ckpt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and sample with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/txt2img.py --prompt &#34;a photograph of an astronaut riding a horse&#34; --plms &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this uses a guidance scale of &lt;code&gt;--scale 7.5&lt;/code&gt;, &lt;a href=&#34;https://github.com/CompVis/latent-diffusion/pull/51&#34;&gt;Katherine Crowson&#39;s implementation&lt;/a&gt; of the &lt;a href=&#34;https://arxiv.org/abs/2202.09778&#34;&gt;PLMS&lt;/a&gt; sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type &lt;code&gt;python scripts/txt2img.py --help&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS]&#xA;                  [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  --prompt [PROMPT]     the prompt to render&#xA;  --outdir [OUTDIR]     dir to write results to&#xA;  --skip_grid           do not save a grid, only individual samples. Helpful when evaluating lots of samples&#xA;  --skip_save           do not save individual samples. For speed measurements.&#xA;  --ddim_steps DDIM_STEPS&#xA;                        number of ddim sampling steps&#xA;  --plms                use plms sampling&#xA;  --laion400m           uses the LAION400M model&#xA;  --fixed_code          if enabled, uses the same starting code across samples&#xA;  --ddim_eta DDIM_ETA   ddim eta (eta=0.0 corresponds to deterministic sampling&#xA;  --n_iter N_ITER       sample this often&#xA;  --H H                 image height, in pixel space&#xA;  --W W                 image width, in pixel space&#xA;  --C C                 latent channels&#xA;  --f F                 downsampling factor&#xA;  --n_samples N_SAMPLES&#xA;                        how many samples to produce for each given prompt. A.k.a. batch size&#xA;  --n_rows N_ROWS       rows in the grid (default: n_samples)&#xA;  --scale SCALE         unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty))&#xA;  --from-file FROM_FILE&#xA;                        if specified, load prompts from this file&#xA;  --config CONFIG       path to config which constructs model&#xA;  --ckpt CKPT           path to checkpoint of model&#xA;  --seed SEED           the seed (for reproducible sampling)&#xA;  --precision {full,autocast}&#xA;                        evaluate at this precision&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason &lt;code&gt;use_ema=False&lt;/code&gt; is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide &#34;full&#34; checkpoints which contain both types of weights. For these, &lt;code&gt;use_ema=False&lt;/code&gt; will load and use the non-EMA weights.&lt;/p&gt; &#xA;&lt;h4&gt;Diffusers Integration&lt;/h4&gt; &#xA;&lt;p&gt;Another way to download and sample Stable Diffusion is by using the &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main#new--stable-diffusion-is-now-fully-compatible-with-diffusers&#34;&gt;diffusers library&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# make sure you&#39;re logged in with `huggingface-cli login`&#xA;from torch import autocast&#xA;from diffusers import StableDiffusionPipeline, LMSDiscreteScheduler&#xA;&#xA;pipe = StableDiffusionPipeline.from_pretrained(&#xA;&#x9;&#34;CompVis/stable-diffusion-v1-3-diffusers&#34;, &#xA;&#x9;use_auth_token=True&#xA;)&#xA;&#xA;prompt = &#34;a photo of an astronaut riding a horse on mars&#34;&#xA;with autocast(&#34;cuda&#34;):&#xA;    image = pipe(prompt)[&#34;sample&#34;][0]  &#xA;    &#xA;image.save(&#34;astronaut_rides_horse.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image Modification with Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;By using a diffusion-denoising mechanism as first proposed by &lt;a href=&#34;https://arxiv.org/abs/2108.01073&#34;&gt;SDEdit&lt;/a&gt;, the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion.&lt;/p&gt; &#xA;&lt;p&gt;The following describes an example where a rough sketch made in &lt;a href=&#34;https://www.pinta-project.com/&#34;&gt;Pinta&lt;/a&gt; is converted into a detailed artwork.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/img2img.py --prompt &#34;A fantasy landscape, trending on artstation&#34; --init-img &amp;lt;path-to-img.jpg&amp;gt; --strength 0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg&#34; alt=&#34;sketch-in&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Outputs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/mountains-3.png&#34; alt=&#34;out3&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/mountains-2.png&#34; alt=&#34;out2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This procedure can, for example, also be used to upscale samples from the base model.&lt;/p&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Our codebase for the diffusion models builds heavily on &lt;a href=&#34;https://github.com/openai/guided-diffusion&#34;&gt;OpenAI&#39;s ADM codebase&lt;/a&gt; and &lt;a href=&#34;https://github.com/lucidrains/denoising-diffusion-pytorch&#34;&gt;https://github.com/lucidrains/denoising-diffusion-pytorch&lt;/a&gt;. Thanks for open-sourcing!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The implementation of the transformer encoder is from &lt;a href=&#34;https://github.com/lucidrains/x-transformers&#34;&gt;x-transformers&lt;/a&gt; by &lt;a href=&#34;https://github.com/lucidrains?tab=repositories&#34;&gt;lucidrains&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{rombach2021highresolution,&#xA;      title={High-Resolution Image Synthesis with Latent Diffusion Models}, &#xA;      author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj√∂rn Ommer},&#xA;      year={2021},&#xA;      eprint={2112.10752},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>erg-lang/erg</title>
    <updated>2022-08-17T01:33:24Z</updated>
    <id>tag:github.com,2022-08-17:/erg-lang/erg</id>
    <link href="https://github.com/erg-lang/erg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Python-compatible statically typed language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Erg Programming Language&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;500&#34; src=&#34;https://raw.githubusercontent.com/erg-lang/erg/main/assets/erg_logo_with_slogan.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;a href=&#34;https://erg-lang.github.io/&#34;&gt;Erg&lt;/a&gt; is a statically typed language that is Python-compatible.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Build status&#34; src=&#34;https://github.com/erg-lang/erg/actions/workflows/rust.yml/badge.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License: MIT &amp;amp; APACHE 2.0&#34; src=&#34;https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue&#34;&gt;&lt;/a&gt;&lt;br&gt; English | &lt;a href=&#34;https://raw.githubusercontent.com/erg-lang/erg/main/README_JA.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Erg can be recommended to a person that:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uses Python, but wants Rust-like robustness and comfortable compiler support.&lt;/li&gt; &#xA; &lt;li&gt;and yet, doesn&#39;t need the verbose type specifications &amp;amp; memory management model like Rust.&lt;/li&gt; &#xA; &lt;li&gt;wants a simple and consistent language like ML.&lt;/li&gt; &#xA; &lt;li&gt;wants a practical general-purpose language with dependent/refinement types.&lt;/li&gt; &#xA; &lt;li&gt;wants a language like Scala that can be used both object-oriented and functional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Some features are not yet implemented. Please see &lt;a href=&#34;https://raw.githubusercontent.com/erg-lang/erg/main/TODO.md&#34;&gt;TODO.md&lt;/a&gt; for implementation status.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Robustness&lt;/p&gt; &lt;p&gt;Erg has a smart &amp;amp; powerful type system. For example, Erg can do null checking (Option type), division by zero, and out-of-range addresses in arrays at compile time.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rand = pyimport &#34;random&#34;&#xA;&#xA;l = [1, 2, 3]&#xA;assert l in [Nat; 3] # type checking&#xA;assert l in [1..3; 3] # more detailed&#xA;l2 = l.push(rand.choice! 0..10)&#xA;assert l2 in [0..10; 4]&#xA;assert l2 + [3, 5, 7] in [0..10; 7]&#xA;# This causes an IndexError, Erg can detect it at compile time&#xA;l2[10] # IndexError: `l2` has 7 elements but was accessed the 11th element&#xA;&#xA;2.times! do!:&#xA;    print! &#34;hello, &#34;, end: &#34;&#34;&#xA;# =&amp;gt; hello, hello, &#xA;-2.times! do!:&#xA;    print! &#34;hello, &#34;, end: &#34;&#34;&#xA;# TypeError: `.times!` is a method of `Nat` (0 or more Int), not `Int`&#xA;&#xA;{Meter; Sec; meter; yard; sec; ...} = import &#34;unit&#34;&#xA;&#xA;velocity x: Meter, t: Sec = x / t&#xA;&#xA;v = velocity 3yard, 2sec # TypeError: the type of `x` was mismatched: expect `Meter`, found `Yard`&#xA;v = velocity 3meter, 2sec # v == 1.5 m/s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simplicity&lt;/p&gt; &lt;p&gt;Erg consists of a very simple syntax, which can significantly reduce the amount of code compared to other languages. However, its functionality is not inferior to them.&lt;/p&gt; &lt;p&gt;Since the type inference system is powerful, you can code like a dynamically typed language.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fib 0 = 0&#xA;fib 1 = 1&#xA;fib n = fib(n - 1) + fib(n - 2)&#xA;assert fib(10) == 55&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Erg, there are very few things that are treated as special; there are no reserved words. even for and while expressions are just one of the subroutines, so this is possible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;loop! block = while! True, block&#xA;&#xA;# equals to `while! True, do! print! &#34;hello&#34;`&#xA;loop! do!:&#xA;    print! &#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Functional &amp;amp; Object-oriented&lt;/p&gt; &lt;p&gt;Erg is a pure object-oriented language. Everything is an object; types, functions, and operators are all objects. On the other hand, Erg is also a functional language. Erg requires some kinds of markers to be placed on code that causes side effects or changes internal state, which can localize the complexity of code. This will greatly improve the maintainability of your code.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Functional style (immutable), same as `sorted(list)` in Python&#xA;immut_arr = [1, 3, 2]&#xA;assert immut_arr.sort() == [1, 2, 3]&#xA;# Object-oriented style (mutable)&#xA;mut_arr = ![1, 3, 2]&#xA;mut_arr.sort!()&#xA;assert mut_arr == [1, 2, 3]&#xA;i = !1&#xA;i.update! old -&amp;gt; old + 1&#xA;assert i == 2&#xA;&#xA;# Functions cannot cause side effects&#xA;inc i: Int! =&#xA;    i.update! old -&amp;gt; old + 1&#xA;# SyntaxError: cannot call a procedural method in a function&#xA;# hint: only methods of mutable types can change the state of objects&#xA;&#xA;# Code that uses a lot of side effects is redundant, so you will naturally write pure code&#xA;Counter! = Inherit Int!&#xA;Counter!.&#xA;    new i: Int = Self!::__new__ !i&#xA;    inc! ref! self =&#xA;        self.update! old -&amp;gt; old + 1&#xA;&#xA;c = Counter!.new 1&#xA;c.inc!()&#xA;assert c == 2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interoperability&lt;/p&gt; &lt;p&gt;Erg is internally compatible with Python and can import the Python API at zero cost.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using built-in Python modules&#xA;math, time = pyimport &#34;math&#34;, &#34;time&#34;&#xA;{sin; pi; ...} = math&#xA;# using an external Python module&#xA;Tqdm! = pyimport(&#34;tqdm&#34;).&#39;tqdm&#39;&#xA;&#xA;print! sin pi # 1.2246467991473532e-16&#xA;for! Tqdm!.&#39;__call__&#39;(0..99), i =&amp;gt;&#xA;    time.sleep! 0.01 * i&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Readable Error Messages&lt;/p&gt; &lt;p&gt;Erg emphasizes the readability of error messages; Erg is a programmer-friendly language, &lt;del&gt;unlike C++.&lt;/del&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;proc! x =&#xA;    l = [1, 2, 3]&#xA;    l.push!(x)&#xA;    l&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Error[#12]: File example.er, line 3, in &amp;lt;module&amp;gt;::proc!&#xA;2‚îÇ     l = [1, 2, 3]&#xA;3‚îÇ     l.push!(x)&#xA;         ^^^^^&#xA;AttributeError: Array object has no attribute `.push!`&#xA;hint: to update the internal state of an object, make it mutable by using `!` operator&#xA;hint: `Array` has `push`, see https://erg-lang.github.io/docs/prelude/Array/##push for more information&#xA;hint: `Array!` has `push!`, see https://erg-lang.github.io/docs/prelude/Array!/##push! for more information&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.python.org/&#34;&gt;Python3&lt;/a&gt; interpreter is required. If it is already installed on your machine, no setup is required.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installing by cargo (Rust package manager)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cargo install erg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;Building from source code requires the Rust toolchain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/erg-lang/erg.git&#xA;cd erg&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! If you have any questions, please feel free to ask them on the &lt;a href=&#34;https://discord.gg/zfAAUbgGr4&#34;&gt;Discord channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Erg is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See &lt;a href=&#34;https://raw.githubusercontent.com/erg-lang/erg/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/erg-lang/erg/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adrianhajdin/project_hoobank</title>
    <updated>2022-08-17T01:33:24Z</updated>
    <id>tag:github.com,2022-08-17:/adrianhajdin/project_hoobank</id>
    <link href="https://github.com/adrianhajdin/project_hoobank" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern UI/UX website using React.js &amp; Tailwind CSS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HooBank - Modern UI/UX website using React.js &amp;amp; Tailwind CSS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/BK1Hn0x/Screenshot-2022-08-08-at-4-05-48-PM.png&#34; alt=&#34;HooBank&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Showcase your dev skills with practical experience and land the coding career of your dreams&lt;/h3&gt; &#xA;&lt;p&gt;üíª JS Mastery Pro - &lt;a href=&#34;https://jsmastery.pro?discount=youtube&#34;&gt;https://jsmastery.pro?discount=youtube&lt;/a&gt; ‚úÖ A special YOUTUBE discount code is automatically applied!&lt;/p&gt; &#xA;&lt;p&gt;üìô Get the Ultimate Frontend &amp;amp; Backend Development Roadmaps, a Complete JavaScript Cheatsheet, Portfolio Tips, and more - &lt;a href=&#34;https://www.jsmastery.pro/links&#34;&gt;https://www.jsmastery.pro/links&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>