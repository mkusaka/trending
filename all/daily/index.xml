<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-18T01:23:12Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FlaxEngine/FlaxEngine</title>
    <updated>2023-09-18T01:23:12Z</updated>
    <id>tag:github.com,2023-09-18:/FlaxEngine/FlaxEngine</id>
    <link href="https://github.com/FlaxEngine/FlaxEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flax Engine – multi-platform 3D game engine&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/FlaxEngine/FlaxEngine/master/Development/Images/Logo.png&#34; width=&#34;100px&#34;&gt; &#xA;&lt;h1&gt;Flax Engine&lt;/h1&gt; &#xA;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Flax.FlaxVS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/vs-extension-green.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;a href=&#34;https://flaxengine.com/discord&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/437989205315158016/widget.png&#34;&gt;&lt;/a&gt; &#xA;&lt;p&gt;Flax Engine is a high quality modern 3D game engine written in C++ and C#. From stunning graphics to powerful scripts - Flax can give everything for your games. Designed for fast workflow with many ready to use features waiting for you right now. To learn more see the website (&lt;a href=&#34;https://flaxengine.com&#34;&gt;www.flaxengine.com&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This repository contains full source code of the Flax Engine (excluding NDA-protected platforms support). Anyone is welcome to contribute or use the modified source in Flax-based games.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flaxengine.com&#34;&gt;Homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flaxengine.com/blog&#34;&gt;Dev Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flaxengine.com&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.flaxengine.com&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trello.com/b/NQjLXRCP/flax-roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FlaxEngine/FlaxEngine/master/Development/Images/flax-pic-2.jpg&#34; alt=&#34;pbr-rendering&#34; title=&#34;PBR Rendering and Global Illumination&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/FlaxEngine/FlaxEngine/master/Development/Images/flax-pic-1.jpg&#34; alt=&#34;rendering&#34; title=&#34;Rendering&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/FlaxEngine/FlaxEngine/master/Development/Images/flax-pic-3.jpg&#34; alt=&#34;performance&#34; title=&#34;High Performance&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;Follow the instructions below to compile and run the engine from source.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 or newer&lt;/li&gt; &#xA; &lt;li&gt;Install Windows 8.1 SDK or newer (via Visual Studio Installer)&lt;/li&gt; &#xA; &lt;li&gt;Install Microsoft Visual C++ 2015 v140 toolset or newer (via Visual Studio Installer)&lt;/li&gt; &#xA; &lt;li&gt;Install .Net 7 SDK (via Visual Studio Installer or &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/7.0&#34;&gt;from web&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install Git with LFS&lt;/li&gt; &#xA; &lt;li&gt;Clone repo (with LFS)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;strong&gt;GenerateProjectFiles.bat&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Flax.sln&lt;/code&gt; and set solution configuration to &lt;strong&gt;Editor.Development&lt;/strong&gt; and solution platform to &lt;strong&gt;Win64&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set Flax (C++) or FlaxEngine (C#) as startup project&lt;/li&gt; &#xA; &lt;li&gt;Compile Flax project (hit F7 or CTRL+Shift+B)&lt;/li&gt; &#xA; &lt;li&gt;Run Flax (hit F5 key)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;Install .Net 7 SDK (&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/7.0&#34;&gt;https://dotnet.microsoft.com/en-us/download/dotnet/7.0&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt install dotnet-sdk-7.0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Vulkan SDK (&lt;a href=&#34;https://vulkan.lunarg.com/&#34;&gt;https://vulkan.lunarg.com/&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt install vulkan-sdk&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S spirv-tools vulkan-headers vulkan-tools vulkan-validation-layers&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Git with LFS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt-get install git git-lfs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S git git-lfs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git-lfs install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the required packages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt-get install libx11-dev libxcursor-dev libxinerama-dev zlib1g-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S base-devel libx11 libxcursor libxinerama zlib&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Clang compiler (version 6 or later): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt-get install clang lldb lld&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch: &lt;code&gt;sudo pacman -S clang lldb lld&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the repository (with LFS)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./GenerateProjectFiles.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open workspace with Visual Code&lt;/li&gt; &#xA; &lt;li&gt;Build and run (configuration and task named &lt;code&gt;Flax|Editor.Linux.Development|x64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install XCode&lt;/li&gt; &#xA; &lt;li&gt;Install .Net 7 SDK (&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/7.0&#34;&gt;https://dotnet.microsoft.com/en-us/download/dotnet/7.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install Vulkan SDK (&lt;a href=&#34;https://vulkan.lunarg.com/&#34;&gt;https://vulkan.lunarg.com/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clone repo (with LFS)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;GenerateProjectFiles.command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open workspace with XCode or Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;Build and run (configuration &lt;code&gt;Editor.Mac.Development&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Troubleshooting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Could not execute because the specified command or file was not found.&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Restart PC - ensure DotNet is added to PATH for command line tools execution.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Microsoft.NET.TargetFrameworkInference.targets(141,5): error NETSDK1045: The current .NET SDK does not support targeting .NET 7.0. Either target .NET 5.0 or lower, or use a version of the .NET SDK that supports .NET 7.0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use Visual Studio 2022, older versions are not supported by .NET SDK 7.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Building for Windows without Vulkan rendering backend (Vulkan SDK is missing)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install the Vulkan SDK then set an environment variable to provide the path to the SDK prior to running GenerateProjectFiles.bat: &lt;code&gt;set VULKAN_SDK=%sdk_path%&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;The NuGetSdkResolver did not resolve this SDK&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install &lt;code&gt;.NET SDK&lt;/code&gt;, &lt;code&gt;NuGet package manager&lt;/code&gt; and &lt;code&gt;NuGet targets and build tasks&lt;/code&gt; in Visual Studio components.&lt;/p&gt; &#xA;&lt;h2&gt;Workspace directory&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Binaries/&lt;/strong&gt; - executable files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Editor/&lt;/strong&gt; - Flax Editor binaries&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tools/&lt;/strong&gt; - tools binaries&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cache/&lt;/strong&gt; - local data cache folder used by the engine and tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Intermediate/&lt;/strong&gt; - intermediate files and cache for engine build &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;&lt;em&gt;ProjectName&lt;/em&gt;/&lt;/strong&gt; - per-project build cache data&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Deps/&lt;/strong&gt; - Flax.Build dependencies building cache&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Projects/&lt;/strong&gt; - project files location&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Content/&lt;/strong&gt; - assets and binary files used by the engine and editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Development/&lt;/strong&gt; - engine development files &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Scripts/&lt;/strong&gt; - utility scripts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source/&lt;/strong&gt; - source code location &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Editor/&lt;/strong&gt; - Flax Editor source code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Engine/&lt;/strong&gt; - Flax Engine source code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Platforms/&lt;/strong&gt; - per-platform sources and dependency files &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DotNet/&lt;/strong&gt; - C# dependencies&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Editor/&lt;/strong&gt; - Flax Editor binaries&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;&lt;em&gt;PlatformName&lt;/em&gt;/&lt;/strong&gt; - per-platform files &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Binaries/&lt;/strong&gt; - per-platform binaries &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;strong&gt;Game/&lt;/strong&gt; - Flax Game binaries&lt;/li&gt; &#xA;         &lt;li&gt;&lt;strong&gt;ThirdParty/&lt;/strong&gt; - prebuilt 3rd Party binaries&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Shaders/&lt;/strong&gt; - shaders source code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;ThirdParty/&lt;/strong&gt; - 3rd Party source code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tools/&lt;/strong&gt; - development tools source code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Licensing and Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Using Flax source code is strictly governed by the Flax Engine End User License Agreement. If you don&#39;t agree to those terms, as amended from time to time, you are not permitted to access or use Flax Engine.&lt;/p&gt; &#xA;&lt;p&gt;We welcome any contributions to Flax Engine development through pull requests on GitHub. Most of our active development is in the master branch, so we prefer to take pull requests there (particularly for new features). We try to make sure that all new code adheres to the Flax coding standards. All contributions are governed by the terms of the &lt;a href=&#34;https://flaxengine.com/licensing/&#34;&gt;EULA&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aiwaves-cn/agents</title>
    <updated>2023-09-18T01:23:12Z</updated>
    <id>tag:github.com,2023-09-18:/aiwaves-cn/agents</id>
    <link href="https://github.com/aiwaves-cn/agents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Open-source Framework for Autonomous Language Agents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/assets/agents-logo.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;p align=&#34;center&#34; style=&#34;display:inline-block;&#34;&gt;&lt;font face=&#34;Calisto MT&#34;&gt;&lt;font size=&#34;4&#34;&gt;An Open-source Framework for Autonomous Language Agents&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://arxiv.org/pdf/2309.07870.pdf&#34;&gt;[📄 Paper]&lt;/a&gt; &lt;a href=&#34;http://www.aiwaves-agents.com/&#34;&gt;[🌐 Website]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/#web-demos&#34;&gt;[🤖️ Demos]&lt;/a&gt; &lt;a href=&#34;https://discord.gg/aNznfrYPeR&#34;&gt;[🔥 Discord]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/assets/wechat.jpg&#34;&gt;[🔥 Wechat Group] &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agents&lt;/strong&gt; is an open-source library/framework for building autonomous language agents. The library is carefully engineered to support important features including &lt;strong&gt;long-short term memory&lt;/strong&gt;, &lt;strong&gt;tool usage&lt;/strong&gt;, &lt;strong&gt;web navigation&lt;/strong&gt;, &lt;strong&gt;multi-agent communication&lt;/strong&gt;, and brand new features including &lt;strong&gt;human-agent interaction&lt;/strong&gt; and &lt;strong&gt;symbolic control&lt;/strong&gt;. With &lt;strong&gt;Agents&lt;/strong&gt;, one can customize a language agent or a multi-agent system by simply filling in a config file in natural language and deploy the language agents in a terminal, a Gradio interface, or a backend service.&lt;/p&gt; &#xA;&lt;p&gt;One major difference between &lt;strong&gt;Agents&lt;/strong&gt; and other existing frameworks for language agents is that our framework allows users to provide fine-grained control and guidance to language agents via an &lt;strong&gt;SOP (Standard Operation Process)&lt;/strong&gt;. An SOP defines subgoals/subtasks for the overall task and allows users to customize a fine-grained workflow for the language agents.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/assets/agents-cover.png&#34; width=&#34;800&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📢 Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support LLM-based SOP generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2023.9.12 Offical Release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💡 Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Long-short Term Memory&lt;/strong&gt;: Language agents in the library are equipped with both long-term memory implemented via VectorDB + Semantic Search and short-term memory (working memory) maintained and updated by an LLM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tool Usage&lt;/strong&gt;: Language agents in the library can use any external tools via &lt;a href=&#34;https://platform.openai.com/docs/guides/gpt/function-calling&#34;&gt;function-calling&lt;/a&gt; and developers can add customized tools/APIs &lt;a href=&#34;https://github.com/aiwaves-cn/agents/raw/master/src/agents/Component/ToolComponent.py&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Navigation&lt;/strong&gt;: Language agents in the library can use search engines to navigate the web and get useful information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-agent Communication&lt;/strong&gt;: In addition to single language agents, the library supports building multi-agent systems in which language agents can communicate with other language agents and the environment. Different from most existing frameworks for multi-agent systems that use pre-defined rules to control the order for agents&#39; action, &lt;strong&gt;Agents&lt;/strong&gt; includes a &lt;em&gt;controller&lt;/em&gt; function that dynamically decides which agent will perform the next action using an LLM by considering the previous actions, the environment, and the target of the current states. This makes multi-agent communication more flexible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Human-Agent interaction&lt;/strong&gt;: In addition to letting language agents communicate with each other in an environment, our framework seamlessly supports human users to play the role of the agent by himself/herself and input his/her own actions, and interact with other language agents in the environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Symbolic Control&lt;/strong&gt;: Different from existing frameworks for language agents that only use a simple task description to control the entire multi-agent system over the whole task completion process, &lt;strong&gt;Agents&lt;/strong&gt; allows users to use an &lt;strong&gt;SOP (Standard Operation Process)&lt;/strong&gt; that defines subgoals/subtasks for the overall task to customize fine-grained workflows for the language agents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🛠 Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Option 1. Build from source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/aiwaves-cn/agents.git&#xA;cd agents&#xA;pip install -e . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Option 2. Install via PyPI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install ai-agents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📦 Usage&lt;/h2&gt; &#xA;&lt;h3&gt;🛠️ Generate the config file&lt;/h3&gt; &#xA;&lt;h4&gt;Option 1. Fill in the config template manually&lt;/h4&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;example/{Muti|Single_Agent}/{target_agent}/config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Option 2. Try our &lt;a href=&#34;http://www.aiwaves.cn/create-agent/&#34;&gt;WebUI&lt;/a&gt; for customizing the config file.&lt;/h4&gt; &#xA;&lt;p&gt;Haven&#39;t figured out how to write the JSON file yet? Check out our &lt;a href=&#34;https://agents-readthedocsio.readthedocs.io/en/latest/index.html&#34;&gt;documentation&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;🤖️ The Agent Hub&lt;/h3&gt; &#xA;&lt;p&gt;We provide an &lt;strong&gt;AgentHub&lt;/strong&gt;, where you can search for interesting Agents shared by us or other developers, try them out or use them as the starting point to customize your own agent. We encourage you to share your customized agents to help others build their own agents more easily! You can share your customized agents by submitting PRs that adds configs and customized codes &lt;a href=&#34;https://github.com/aiwaves-cn/agents/tree/master/examples/Community_Agent&#34;&gt;here&lt;/a&gt;. You can also send us your own config files and codes for customized agents by &lt;a href=&#34;mailto:contact@aiwaves.cn&#34;&gt;email&lt;/a&gt;, and we will share your examples and acknowledge your contribution in future updates!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A WebUI for automatically uploading of your customized agents will be available soon!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📷 Examples and Demos&lt;/h2&gt; &#xA;&lt;p&gt;We have provided exemplar config files, code, and demos for both single-agent and multi-agent systems &lt;a href=&#34;https://github.com/aiwaves-cn/agents/tree/master/examples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web demos&lt;/h3&gt; &#xA;&lt;h4&gt;Note：Due to massive traffic, our online demos may suffer from long queue time and unstable issues. Please follow our &lt;a href=&#34;https://github.com/aiwaves-cn/agents/raw/master/examples/README.md&#34;&gt;quick start guide&lt;/a&gt;) and deploy language agents locally for testing. Or checkout our &lt;a href=&#34;http://www.aiwaves-agents.com/&#34;&gt;website&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/customer-service-agent/&#34;&gt;Customer Service Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/debate/&#34;&gt;Debate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/software-company/&#34;&gt;Software Company&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/fiction-studio/&#34;&gt;Fiction Studio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Agents&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate your interest in contributing to our open-source initiative. Please feel free to submit a PR or share your thoughts on how to improve the library in Issues!&lt;/p&gt; &#xA;&lt;h2&gt;📚 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please check our &lt;a href=&#34;https://agents-readthedocsio.readthedocs.io/en/latest/index.html&#34;&gt;documentation&lt;/a&gt; for detailed documentation of the framework.&lt;/p&gt; &#xA;&lt;h2&gt;⭐ Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#aiwaves-cn/agents&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=aiwaves-cn/agents&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our repo useful in your research, please kindly consider cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-angular2&#34;&gt;@misc{zhou2023agents,&#xA;      title={Agents: An Open-source Framework for Autonomous Language Agents}, &#xA;      author={Wangchunshu Zhou and Yuchen Eleanor Jiang and Long Li and Jialong Wu and Tiannan Wang and Shi Qiu and Jintian Zhang and Jing Chen and Ruipu Wu and Shuai Wang and Shiding Zhu and Jiyu Chen and Wentao Zhang and Ningyu Zhang and Huajun Chen and Peng Cui and Mrinmaya Sachan},&#xA;      year={2023},&#xA;      eprint={2309.07870},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>TheCherno/Hazel</title>
    <updated>2023-09-18T01:23:12Z</updated>
    <id>tag:github.com,2023-09-18:/TheCherno/Hazel</id>
    <link href="https://github.com/TheCherno/Hazel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hazel Engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hazel &lt;a href=&#34;https://github.com/TheCherno/Hazel/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/TheCherno/Hazel.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheCherno/Hazel/master/Resources/Branding/Hazel_Logo_Text_Light_Square.png?raw=true&#34; alt=&#34;Hazel&#34; title=&#34;Hazel&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hazel is primarily an early-stage interactive application and rendering engine for Windows. Currently not much is implemented, however (almost) everything inside this repository is being created within YouTube videos, found at &lt;a href=&#34;https://thecherno.com/engine&#34;&gt;thecherno.com/engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Visual Studio 2017 or 2019 is recommended, Hazel is officially untested on other development environments whilst we focus on a Windows build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;ins&gt;&lt;strong&gt;1. Downloading the repository:&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start by cloning the repository with &lt;code&gt;git clone --recursive https://github.com/TheCherno/Hazel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the repository was cloned non-recursively previously, use &lt;code&gt;git submodule update --init&lt;/code&gt; to clone the necessary submodules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;ins&gt;&lt;strong&gt;2. Configuring the dependencies:&lt;/strong&gt;&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the &lt;a href=&#34;https://github.com/TheCherno/Hazel/raw/master/scripts/Setup.bat&#34;&gt;Setup.bat&lt;/a&gt; file found in &lt;code&gt;scripts&lt;/code&gt; folder. This will download the required prerequisites for the project if they are not present yet.&lt;/li&gt; &#xA; &lt;li&gt;One prerequisite is the Vulkan SDK. If it is not installed, the script will execute the &lt;code&gt;VulkanSDK.exe&lt;/code&gt; file, and will prompt the user to install the SDK.&lt;/li&gt; &#xA; &lt;li&gt;After installation, run the &lt;a href=&#34;https://github.com/TheCherno/Hazel/raw/master/scripts/Setup.bat&#34;&gt;Setup.bat&lt;/a&gt; file again. If the Vulkan SDK is installed properly, it will then download the Vulkan SDK Debug libraries. (This may take a longer amount of time)&lt;/li&gt; &#xA; &lt;li&gt;After downloading and unzipping the files, the &lt;a href=&#34;https://github.com/TheCherno/Hazel/raw/master/scripts/Win-GenProjects.bat&#34;&gt;Win-GenProjects.bat&lt;/a&gt; script file will get executed automatically, which will then generate a Visual Studio solution file for user&#39;s usage.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If changes are made, or if you want to regenerate project files, rerun the &lt;a href=&#34;https://github.com/TheCherno/Hazel/raw/master/scripts/Win-GenProjects.bat&#34;&gt;Win-GenProjects.bat&lt;/a&gt; script file found in &lt;code&gt;scripts&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;The Plan&lt;/h2&gt; &#xA;&lt;p&gt;The plan for Hazel is two-fold: to create a powerful 3D engine, but also to serve as an education tool for teaching game engine design and architecture. Because of this the development inside this repository is rather slow, since everything has to be taught and implemented on-camera. There is a much more advanced version of the engine in a private repository called &lt;code&gt;Hazel-dev&lt;/code&gt;, accessible to supporters on &lt;a href=&#34;https://patreon.com/thecherno&#34;&gt;Patreon&lt;/a&gt;. The plan for this project is to mostly take already implemented code from the &lt;code&gt;Hazel-dev&lt;/code&gt; repository and integrate it into this one, done within videos and supported by explanations.&lt;/p&gt; &#xA;&lt;h3&gt;Main features to come:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast 2D rendering (UI, particles, sprites, etc.)&lt;/li&gt; &#xA; &lt;li&gt;High-fidelity Physically-Based 3D rendering (this will be expanded later, 2D to come first)&lt;/li&gt; &#xA; &lt;li&gt;Support for Mac, Linux, Android and iOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Native rendering API support (DirectX, Vulkan, Metal)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fully featured viewer and editor applications&lt;/li&gt; &#xA; &lt;li&gt;Fully scripted interaction and behavior&lt;/li&gt; &#xA; &lt;li&gt;Integrated 3rd party 2D and 3D physics engine&lt;/li&gt; &#xA; &lt;li&gt;Procedural terrain and world generation&lt;/li&gt; &#xA; &lt;li&gt;Artificial Intelligence&lt;/li&gt; &#xA; &lt;li&gt;Audio system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Short term goals :&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: this is subject to change at any time! Follow the roadmap over at &lt;a href=&#34;http://hazelengine.com/roadmap&#34;&gt;hazelengine.com/roadmap&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;By the end 2020, we want to make a game using the Hazel game engine. Not like the time I made a game in one hour using the engine, but this time by using the proper tools that would be required to make a game with Hazel. This means we need to add a full 2D workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Design the game scene by using Hazelnut, the Hazel editor,&lt;/li&gt; &#xA; &lt;li&gt;Test the game inside Hazelnut, including the ability to save/load the created game,&lt;/li&gt; &#xA; &lt;li&gt;Load and play the game inside Sandbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We want everyone to be able to play the game on all desktop platforms (Windows, Mac and Linux). When this is implemented, another attempt at the &#34;Creating a game in one hour using Hazel&#34; will be made to see how far the engine has become.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/thecherno&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%40thecherno--blue.svg?style=social&amp;amp;logo=Twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.instagram.com/thecherno&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/thecherno--red.svg?style=social&amp;amp;logo=Instagram&#34; alt=&#34;Instagram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/user/TheChernoProject&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TheChernoProject--red.svg?style=social&amp;amp;logo=youtube&#34; alt=&#34;Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/K2eSyQA&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TheCherno%20Server--blue.svg?style=social&amp;amp;logo=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/thecherno&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%40thecherno--green.svg?style=social&amp;amp;logo=Patreon&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>