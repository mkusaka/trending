<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-22T01:25:25Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Anttwo/SuGaR</title>
    <updated>2023-12-22T01:25:25Z</updated>
    <id>tag:github.com,2023-12-22:/Anttwo/SuGaR</id>
    <link href="https://github.com/Anttwo/SuGaR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official implementation of SuGaR: Surface-Aligned Gaussian Splatting for Efficient 3D Mesh Reconstruction and High-Quality Mesh Rendering&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;SuGaR: Surface-Aligned Gaussian Splatting for Efficient 3D Mesh Reconstruction and High-Quality Mesh Rendering&lt;/h1&gt; &#xA; &lt;font size=&#34;4&#34;&gt; &lt;a href=&#34;https://anttwo.github.io/&#34; style=&#34;font-size:100%;&#34;&gt;Antoine Guédon&lt;/a&gt;  &lt;a href=&#34;https://vincentlepetit.github.io/&#34; style=&#34;font-size:100%;&#34;&gt;Vincent Lepetit&lt;/a&gt;  &lt;/font&gt; &#xA; &lt;br&gt; &#xA; &lt;font size=&#34;4&#34;&gt; LIGM, Ecole des Ponts, Univ Gustave Eiffel, CNRS &lt;/font&gt; &#xA; &lt;p&gt;| &lt;a href=&#34;https://anttwo.github.io/sugar/&#34;&gt;Webpage&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2311.12775&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=MAkFyWfiBQo&#34;&gt;Presentation video&lt;/a&gt; |&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/walk.gif&#34; alt=&#34;walk.gif&#34; width=&#34;350&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/attack.gif&#34; alt=&#34;attack.gif&#34; width=&#34;350&#34;&gt; &lt;br&gt; &lt;b&gt;Our method extracts meshes from 3D Gaussian Splatting reconstructions and build hybrid representations &lt;br&gt;that enable easy composition and animation in Gaussian Splatting scenes by manipulating the mesh.&lt;/b&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;We propose a method to allow precise and extremely fast mesh extraction from &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;3D Gaussian Splatting (SIGGRAPH 2023)&lt;/a&gt;. Gaussian Splatting has recently become very popular as it yields realistic rendering while being significantly faster to train than NeRFs. It is however challenging to extract a mesh from the millions of tiny 3D Gaussians as these Gaussians tend to be unorganized after optimization and no method has been proposed so far. Our first key contribution is a regularization term that encourages the 3D Gaussians to align well with the surface of the scene. We then introduce a method that exploits this alignment to sample points on the real surface of the scene and extract a mesh from the Gaussians using Poisson reconstruction, which is fast, scalable, and preserves details, in contrast to the Marching Cubes algorithm usually applied to extract meshes from Neural SDFs. Finally, we introduce an optional refinement strategy that binds Gaussians to the surface of the mesh, and jointly optimizes these Gaussians and the mesh through Gaussian splatting rendering. This enables easy editing, sculpting, rigging, animating, or relighting of the Gaussians using traditional softwares (Blender, Unity, Unreal Engine, etc.) by manipulating the mesh instead of the Gaussians themselves. Retrieving such an editable mesh for realistic rendering is done within minutes with our method, compared to hours with the state-of-the-art method on neural SDFs, while providing a better rendering quality in terms of PSNR, SSIM and LPIPS.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;Hybrid representation (Mesh + Gaussians on the surface)&lt;/b&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/garden_hybrid.gif&#34; alt=&#34;garden_hybrid.gif&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/kitchen_hybrid.gif&#34; alt=&#34;kitchen_hybrid.gif&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/counter_hybrid.gif&#34; alt=&#34;counter_hybrid.gif&#34; width=&#34;250&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/playroom_hybrid.gif&#34; alt=&#34;playroom_hybrid.gif&#34; width=&#34;323&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/qant03_hybrid.gif&#34; alt=&#34;qant03_hybrid.gif&#34; width=&#34;323&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/dukemon_hybrid.gif&#34; alt=&#34;_hybrid.gif&#34; width=&#34;102&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;b&gt;Underlying mesh without texture&lt;/b&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/garden_notex.gif&#34; alt=&#34;garden_notex.gif&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/kitchen_notex.gif&#34; alt=&#34;kitchen_notex.gif&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/counter_notex.gif&#34; alt=&#34;counter_notex.gif&#34; width=&#34;250&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/playroom_notex.gif&#34; alt=&#34;playroom_notex.gif&#34; width=&#34;323&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/qant03_notex.gif&#34; alt=&#34;qant03_notex.gif&#34; width=&#34;323&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/dukemon_notex.gif&#34; alt=&#34;dukemon_notex.gif&#34; width=&#34;102&#34;&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{guedon2023sugar,&#xA;  title={SuGaR: Surface-Aligned Gaussian Splatting for Efficient 3D Mesh Reconstruction and High-Quality Mesh Rendering},&#xA;  author={Gu{\&#39;e}don, Antoine and Lepetit, Vincent},&#xA;  journal={arXiv:2311.12775},&#xA;  year={2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updates and To-do list&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Updates&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;b&gt;[12/20/2023]&lt;/b&gt; Added a short notebook showing how to render images with the hybrid representation using the Gaussian Splatting rasterizer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;b&gt;[12/18/2023]&lt;/b&gt; Code release.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;&#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;To-do list&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;b&gt;Using SuGaR with Windows:&lt;/b&gt; Adapt the code to make it compatible with Windows. Due to path-writing conventions, the current code is not compatible with Windows. &lt;/li&gt; &#xA;  &lt;li&gt;&lt;b&gt;Synthetic datasets:&lt;/b&gt; Add the possibility to use the NeRF synthetic dataset (which has a different format than COLMAP scenes) &lt;/li&gt; &#xA;  &lt;li&gt;&lt;b&gt;Composition and animation:&lt;/b&gt; Finish to clean the code for composition and animation, and add it to the &lt;code&gt;sugar_scene/sugar_compositor.py&lt;/code&gt; script. &lt;/li&gt; &#xA;  &lt;li&gt;&lt;b&gt;Composition and animation:&lt;/b&gt; Make a tutorial on how to use the scripts in the &lt;code&gt;blender&lt;/code&gt; directory and the &lt;code&gt;sugar_scene/sugar_compositor.py&lt;/code&gt; class to import composition and animation data into PyTorch and apply it to the SuGaR hybrid representation. &lt;/li&gt; &#xA;  &lt;!-- &lt;li&gt;&lt;b&gt;Improvement:&lt;/b&gt; Implement a simple method to avoid artifacts when reconstructing thin objects with poor coverage/visibility in the training images.&lt;/li&gt;&#xA;  &lt;/li&gt; --&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;As we explain in the paper, SuGaR optimization starts with first optimizing a 3D Gaussian Splatting model for 7k iterations with no additional regularization term. In this sense, SuGaR is a method that can be applied on top of any 3D Gaussian Splatting model, and a Gaussian Splatting model optimized for 7k iterations must be provided to SuGaR.&lt;/p&gt; &#xA;&lt;p&gt;Consequently, the current implementation contains a version of the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting code&lt;/a&gt;, and we built our model as a wrapper of a vanilla 3D Gaussian Splatting model. Please note that, even though this wrapper implementation is convenient for many reasons, it may not be the most optimal one for memory usage, so we might change it in the future.&lt;/p&gt; &#xA;&lt;p&gt;After optimizing a vanilla Gaussian Splatting model, the SuGaR pipeline consists of 3 main steps, and an optional one:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;SuGaR optimization&lt;/strong&gt;: optimizing Gaussians alignment with the surface of the scene&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mesh extraction&lt;/strong&gt;: extracting a mesh from the optimized Gaussians&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SuGaR refinement&lt;/strong&gt;: refining the Gaussians and the mesh together to build a hybrid representation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Textured mesh extraction (Optional)&lt;/strong&gt;: extracting a traditional textured mesh from the refined SuGaR model&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/process_0.png&#34; alt=&#34;process_0.png&#34; width=&#34;750&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/process_1.png&#34; alt=&#34;process_.png&#34; width=&#34;750&#34;&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;We provide a dedicated script for each of these steps, as well as a script &lt;code&gt;train.py&lt;/code&gt; that runs the entire pipeline. We explain how to use this script in the next sections. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please note that the final step, &lt;em&gt;Textured mesh extraction&lt;/em&gt;, is optional but is enabled by default in the &lt;code&gt;train.py&lt;/code&gt; script. Indeed, it is very convenient to have a traditional textured mesh for visualization, composition and animation using traditional softwares such as Blender. However, this step is not needed to produce, modify or animate hybrid representations.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;Hybrid representation (Mesh + Gaussians on the surface)&lt;/b&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/garden_hybrid.png&#34; alt=&#34;garden_hybrid.gif&#34; height=&#34;135&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/kitchen_hybrid.png&#34; alt=&#34;kitchen_hybrid.gif&#34; height=&#34;135&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/qant03_hybrid.png&#34; alt=&#34;qant03_hybrid.gif&#34; height=&#34;135&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/dukemon_hybrid.png&#34; alt=&#34;_hybrid.gif&#34; height=&#34;135&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;b&gt;Underlying mesh with a traditional colored UV texture&lt;/b&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/garden_texture.png&#34; alt=&#34;garden_notex.gif&#34; height=&#34;135&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/kitchen_texture.png&#34; alt=&#34;kitchen_notex.gif&#34; height=&#34;135&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/qant03_texture.png&#34; alt=&#34;qant03_notex.gif&#34; height=&#34;135&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/overview/dukemon_texture.png&#34; alt=&#34;dukemon_notex.gif&#34; height=&#34;135&#34;&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;Below is another example of a scene showing a robot with a black and specular material. The following images display the hybrid representation (Mesh + Gaussians on the surface), the mesh with a traditional colored UV texture, and a depth map of the mesh:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;Hybrid representation - Textured mesh - Depth map of the mesh&lt;/b&gt;&#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/alpha_hybrid.png&#34; alt=&#34;alpha_hybrid.png&#34; height=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/alpha_texture.png&#34; alt=&#34;alpha_texture.gif&#34; height=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/examples/alpha_depth.png&#34; alt=&#34;alpha_depth.gif&#34; height=&#34;400&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;0. Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The software requirements are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conda (recommended for easy setup)&lt;/li&gt; &#xA; &lt;li&gt;C++ Compiler for PyTorch extensions&lt;/li&gt; &#xA; &lt;li&gt;CUDA toolkit 11.8 for PyTorch extensions&lt;/li&gt; &#xA; &lt;li&gt;C++ Compiler and CUDA SDK must be compatible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting repository&lt;/a&gt; for more details about requirements.&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone the repository&lt;/h3&gt; &#xA;&lt;p&gt;Start by cloning this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# HTTPS&#xA;git clone https://github.com/Anttwo/SuGaR.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# SSH&#xA;git clone git@github.com:Anttwo/SuGaR.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install the required Python packages&lt;/h3&gt; &#xA;&lt;p&gt;To install the required Python packages and activate the environment, go inside the &lt;code&gt;SuGaR/&lt;/code&gt; directory and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda env create -f environment.yml&#xA;conda activate sugar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;If this command fails to create a working environment&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Then you can try to install the required packages manually by running the following commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda create --name sugar -y python=3.9&#xA;conda activate sugar&#xA;conda install pytorch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 pytorch-cuda=11.8 -c pytorch -c nvidia&#xA;conda install -c fvcore -c iopath -c conda-forge fvcore iopath&#xA;conda install pytorch3d==0.7.4 -c pytorch3d&#xA;conda install -c plotly plotly&#xA;conda install -c conda-forge rich&#xA;conda install -c conda-forge plyfile==0.8.1&#xA;conda install -c conda-forge jupyterlab&#xA;conda install -c conda-forge nodejs&#xA;conda install -c conda-forge ipywidgets&#xA;pip install open3d&#xA;pip install --upgrade PyMCubes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;3. Install the Gaussian Splatting rasterizer&lt;/h3&gt; &#xA;&lt;p&gt;Run the following commands inside the sugar directory to install the additional Python submodules required for Gaussian Splatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd gaussian_splatting/submodules/diff-gaussian-rasterization/&#xA;pip install -e .&#xA;cd ../simple-knn/&#xA;pip install -e .&#xA;cd ../../../&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting repository&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Start by optimizing a vanilla Gaussian Splatting model for 7k iterations by running the script &lt;code&gt;gaussian_splatting/train.py&lt;/code&gt;, as shown below. Please refer to the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting repository&lt;/a&gt; for more details. This optimization should be very fast, and last only a few minutes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python gaussian_splatting/train.py -s &amp;lt;path to COLMAP dataset&amp;gt; --iterations 7000 -m &amp;lt;path to the desired output directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the script &lt;code&gt;train.py&lt;/code&gt; in the root directory to optimize a SuGaR model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python train.py -s &amp;lt;path to COLMAP dataset&amp;gt; -c &amp;lt;path to the Gaussian Splatting checkpoint&amp;gt; -r &amp;lt;&#34;density&#34; or &#34;sdf&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The most important arguments for the &lt;code&gt;train.py&lt;/code&gt; script are the following:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--scene_path&lt;/code&gt; / &lt;code&gt;-s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Path to the source directory containing a COLMAP dataset.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--checkpoint_path&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Path to the checkpoint directory of the vanilla 3D Gaussian Splatting model.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--regularization_type&lt;/code&gt; / &lt;code&gt;-r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Type of regularization to use for optimizing SuGaR. Can be &lt;code&gt;&#34;density&#34;&lt;/code&gt; or &lt;code&gt;&#34;sdf&#34;&lt;/code&gt;. For reconstructing detailed objects centered in the scene with 360° coverage, &lt;code&gt;&#34;density&#34;&lt;/code&gt; provides a better foreground mesh. For a stronger regularization and a better balance between foreground and background, choose &lt;code&gt;&#34;sdf&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--eval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;If True, performs an evaluation split of the training images. Default is &lt;code&gt;True&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--low_poly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;If True, uses the standard config for a low poly mesh, with &lt;code&gt;200_000&lt;/code&gt; vertices and &lt;code&gt;6&lt;/code&gt; Gaussians per triangle.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--high_poly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;If True, uses the standard config for a high poly mesh, with &lt;code&gt;1_000_000&lt;/code&gt; vertices and &lt;code&gt;1&lt;/code&gt; Gaussian per triangle.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--refinement_time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Default configs for time to spend on refinement. Can be &lt;code&gt;&#34;short&#34;&lt;/code&gt; (2k iterations), &lt;code&gt;&#34;medium&#34;&lt;/code&gt; (7k iterations) or &lt;code&gt;&#34;long&#34;&lt;/code&gt; (15k iterations).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--export_uv_textured_mesh&lt;/code&gt; / &lt;code&gt;-t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;If True, will optimize and export a traditional textured mesh as an &lt;code&gt;.obj&lt;/code&gt; file from the refined SuGaR model, after refinement. Computing a traditional color UV texture should take less than 10 minutes. Default is &lt;code&gt;True&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We provide more details about the two regularization methods &lt;code&gt;&#34;density&#34;&lt;/code&gt; and &lt;code&gt;&#34;sdf&#34;&lt;/code&gt; in the next section. For reconstructing detailed objects centered in the scene with 360° coverage, &lt;code&gt;&#34;density&#34;&lt;/code&gt; provides a better foreground mesh. For a stronger regularization and a better balance between foreground and background, choose &lt;code&gt;&#34;sdf&#34;&lt;/code&gt;. &lt;br&gt; The default configuration is &lt;code&gt;high_poly&lt;/code&gt; with &lt;code&gt;refinement_time&lt;/code&gt; set to &lt;code&gt;&#34;long&#34;&lt;/code&gt;. Results are saved in the &lt;code&gt;output/&lt;/code&gt; directory.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;As we explain in the paper, this script extracts a mesh in 30~35 minutes on average on a single GPU. After mesh extraction, the refinement time only takes a few minutes when using &lt;code&gt;--refinement_time &#34;short&#34;&lt;/code&gt;, but can take up to an hour when using &lt;code&gt;--refinement_time &#34;long&#34;&lt;/code&gt;. A short refinement time is enough to produce a good-looking hybrid representation in most cases.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the optimization time may vary (from 20 to 45 minutes) depending on the complexity of the scene and the GPU used. Moreover, the current implementation splits the optimization into 3 scripts that can be run separately (SuGaR optimization, mesh extraction, model refinement) so it reloads the data at each part, which is not optimal and takes several minutes. We will update the code in a near future to optimize this.&lt;/p&gt; &#xA;&lt;p&gt;Below is a detailed list of all the command line arguments for the &lt;code&gt;train.py&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;All command line arguments for train.py&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Data and initial 3D Gaussian Splatting optimization&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--scene_path&lt;/code&gt; / &lt;code&gt;-s&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Path to the source directory containing a COLMAP data set.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--checkpoint_path&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Path to the checkpoint directory of the vanilla 3D Gaussian Splatting model.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--iteration_to_load&lt;/code&gt; / &lt;code&gt;-i&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Iteration to load from the 3DGS checkpoint directory. If not specified, loads the iteration &lt;code&gt;7000&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--eval&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;If True, performs an evaluation split of the training images. Default is &lt;code&gt;True&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;SuGaR optimization&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--regularization_type&lt;/code&gt; / &lt;code&gt;-r&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Type of regularization to use for optimizing SuGaR. Can be &lt;code&gt;&#34;density&#34;&lt;/code&gt; or &lt;code&gt;&#34;sdf&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--gpu&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Index of GPU device to use. Default is &lt;code&gt;0&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Mesh extraction&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--surface_level&lt;/code&gt; / &lt;code&gt;-l&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Surface level to extract the mesh at. Default is &lt;code&gt;0.3&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--n_vertices_in_mesh&lt;/code&gt; / &lt;code&gt;-v&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Number of vertices in the extracted mesh. Default is &lt;code&gt;1_000_000&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--bboxmin&lt;/code&gt; / &lt;code&gt;-b&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Min coordinates to use for foreground bounding box, formatted as a string &lt;code&gt;&#34;(x,y,z)&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--bboxmax&lt;/code&gt; / &lt;code&gt;-B&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Max coordinates to use for foreground bounding box, formatted as a string &lt;code&gt;&#34;(x,y,z)&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--center_bbox&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;If True, centers the bbox. Default is True.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;SuGaR and mesh refinement (Hybrid representation)&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--gaussians_per_triangle&lt;/code&gt; / &lt;code&gt;-g&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Number of gaussians per triangle. Default is &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--refinement_iterations&lt;/code&gt; / &lt;code&gt;-f&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Number of refinement iterations. Default is &lt;code&gt;15_000&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;(Optional) Parameters for traditional textured mesh extraction&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--export_uv_textured_mesh&lt;/code&gt; / &lt;code&gt;-t&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;If True, will optimize and export a textured mesh as an .obj file from the refined SuGaR model. Computing a traditional colored UV texture should take less than 10 minutes. Default is &lt;code&gt;True&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--square_size&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Size of the square to use for the UV texture. Default is &lt;code&gt;10&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--postprocess_mesh&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;If True, postprocess the mesh by removing border triangles with low-density. This step takes a few minutes and is not needed in general, as it can also be risky. However, it increases the quality of the mesh in some cases, especially when very thin objects are visible only from one side in the images. Default is &lt;code&gt;False&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--postprocess_density_threshold&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Threshold to use for postprocessing the mesh. Default is &lt;code&gt;0.1&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--postprocess_iterations&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Number of iterations to use for postprocessing the mesh. Default is &lt;code&gt;5&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;(Optional) Default configurations&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--low_poly&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;If True, uses standard config for a low poly mesh, with &lt;code&gt;200_000&lt;/code&gt; vertices and &lt;code&gt;6&lt;/code&gt; Gaussians per triangle.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--high_poly&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;If True, uses standard config for a high poly mesh, with &lt;code&gt;1_000_000&lt;/code&gt; vertices and &lt;code&gt;1&lt;/code&gt; Gaussians per triangle.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--refinement_time&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Default configs for time to spend on refinement. Can be &lt;code&gt;&#34;short&#34;&lt;/code&gt; (2k iterations), &lt;code&gt;&#34;medium&#34;&lt;/code&gt; (7k iterations) or &lt;code&gt;&#34;long&#34;&lt;/code&gt; (15k iterations).&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Tips for using SuGaR on your own data and obtain better reconstructions&lt;/h2&gt; &#xA;&lt;h3&gt;1. Capture images or videos that cover the entire surface of the scene&lt;/h3&gt; &#xA;&lt;p&gt;Using a smartphone or a camera, capture images or a video that cover the entire surface of the 3D scene you want to reconstruct. The easiest way to do this is to move around the scene while recording a video. Try to move slowly and smoothly in order to avoid motion blur. For consistent reconstruction and easier camera pose estimation with COLMAP, maintaining a uniform focal length and a constant exposure time is also important. We recommend to disable auto-focus on your smartphone to ensure that the focal length remains constant.&lt;/p&gt; &#xA;&lt;p&gt;For better reconstructions, try to cover objects from several and different angles, especially for thin and detailed parts of the scene. Indeed, SuGaR is able to reconstruct very thin and detailed objects, but some artifacts may appear if these thin objects are not covered enough and are visible only from one side in the training images.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;Detailed explanation&lt;/span&gt;&lt;/summary&gt; SuGaR applies Poisson reconstruction with 3D points sampled on the parts of the surface that are visible in the training images. This visibility constraint is important to prevent sampling points on the backside of the Gaussian level sets, located behind the surface of the scene, which would produce a lot of self-collisions and many unnecessary vertices in the mesh after applying Poisson reconstruction. However, this visibility constraint also means that SuGaR cannot reconstruct parts of the surface that are not visible in the training images. If thin objects are visible only from one side in the training images, the Poisson reconstruction will try to reconstruct a closed surface, and will extend the surface of the thin objects, which produces an inaccurate mesh. &#xA; &lt;p&gt;&lt;em&gt;TODO: Add images illustrating such artifacts.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;However, such artifacts are not visible in the hybrid representation, because the gaussian texturing gives low-opacity to these artifacts during refinement.&lt;/p&gt; &#xA;&lt;p&gt;We already have simple ideas that could help to avoid such artifacts, such as &lt;strong&gt;(a)&lt;/strong&gt; identifying new camera poses that cover parts of the surface non-visible in the training images that are likely to be on the same level set as the visible parts, and &lt;strong&gt;(b)&lt;/strong&gt; adding these camera poses to the set of cameras used for sampling the points when applying Poisson reconstruction. We will update the code in a near future to include this.&lt;/p&gt; &#xA;&lt;p&gt;To convert a video to images, you can install &lt;code&gt;ffmpeg&lt;/code&gt; and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ffmpeg -i &amp;lt;Path to the video file&amp;gt; -qscale:v 1 -qmin 1 -vf fps=&amp;lt;FPS&amp;gt; %04d.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;&amp;lt;FPS&amp;gt;&lt;/code&gt; is the desired sampling rate of the video images. An FPS value of 1 corresponds to sampling one image per second. We recommend to adjust the sampling rate to the length of the video, so that the number of sampled images is between 100 and 300.&lt;/p&gt; &#xA;&lt;h3&gt;2. Estimate camera poses with COLMAP&lt;/h3&gt; &#xA;&lt;p&gt;Please first install a recent version of COLMAP (ideally CUDA-powered) and make sure to put the images you want to use in a directory &lt;code&gt;&amp;lt;location&amp;gt;/input&lt;/code&gt;. Then, run the script &lt;code&gt;gaussian_splatting/convert.py&lt;/code&gt; from the original Gaussian splatting implementation to compute the camera poses from the images using COLMAP. Please refer to the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting repository&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python gaussian_splatting/convert.py -s &amp;lt;location&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes COLMAP fails to reconstruct all images into the same model and hence produces multiple sub-models. The smaller sub-models generally contain only a few images. However, by default, the script &lt;code&gt;convert.py&lt;/code&gt; will apply Image Undistortion only on the first sub-model, which may contain only a few images.&lt;/p&gt; &#xA;&lt;p&gt;If this is the case, a simple solution is to keep only the largest sub-model and discard the others. To do this, open the source directory containing your input images, then open the sub-directory &lt;code&gt;&amp;lt;Source_directory&amp;gt;/distorted/sparse/&lt;/code&gt;. You should see several sub-directories named &lt;code&gt;0/&lt;/code&gt;, &lt;code&gt;1/&lt;/code&gt;, etc., each containing a sub-model. Remove all sub-directories except the one containing the largest files, and rename it to &lt;code&gt;0/&lt;/code&gt;. Then, run the script &lt;code&gt;convert.py&lt;/code&gt; one more time but skip the matching process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python gaussian_splatting/convert.py -s &amp;lt;location&amp;gt; --skip_matching&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If the sub-models have common registered images, they could be merged into a single model as post-processing step using COLMAP; However, merging sub-models requires to run another global bundle adjustment after the merge, which can be time consuming.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Density or SDF? Choose a regularization method that fits your scene&lt;/h3&gt; &#xA;&lt;p&gt;As we explain in the paper, we provide two separate regularization methods for SuGaR: a density regularization and an SDF regularization. The density regularization is the simplest one and works well with objects centered in the scene. The SDF provides a stronger regularization, especially in background regions. As a consequence, the SDF regularization produces higher metrics on standard datasets. However, for reconstructing an object centered in the scene with images taken from all around the object, the simpler density regularization generally produces a better mesh.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, we recommend the following when using the &lt;code&gt;train.py&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For reconstructing detailed objects centered in the scene with 360° coverage (such as the toys we reconstructed in our presentation video), start with the density regularization &lt;code&gt;-r &#39;density&#39;&lt;/code&gt;. However, this may result in more chaotic Gaussians in the background.&lt;/li&gt; &#xA; &lt;li&gt;For reconstructing more challenging scenes or enforcing a stronger regularization in the background, use the SDF regularization &lt;code&gt;-r &#39;sdf&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. (Optional) Adapt the scale and the bounding box of the scene&lt;/h3&gt; &#xA;&lt;p&gt;As it is explained in the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D Gaussian Splatting repository&lt;/a&gt;, the method is expected to reconstruct a scene with reasonable scale. For reconstructing much larger datasets, like a city district, the original authors recommend to lower the learning rates of the positions and scaling factors of the Gaussians. The more extensive the scene, the lower these values should be.&lt;/p&gt; &#xA;&lt;p&gt;Concerning SuGaR, such learning rates should also be lowered when reconstructing a very large scene. Moreover, as we explain in the supplementary material of the paper, for extracting a mesh from the Gaussians with an optimal repartition of vertices, we apply two Poisson reconstructions in practice: one on &lt;em&gt;foreground&lt;/em&gt; Gaussians, and one on &lt;em&gt;background&lt;/em&gt; Gaussians. The foreground Gaussians are defined as the Gaussians located inside a predefined bounding box, and the background Gaussians are defined as the Gaussians located outside this bounding box.&lt;/p&gt; &#xA;&lt;p&gt;By default, this bounding box is computed as the bounding box of all camera centers. This general approach is coherent with how the original 3D Gaussian Splatting scales the learning rates. We used this default bounding box for all the reconstructions shown in the paper and the presentation video.&lt;/p&gt; &#xA;&lt;p&gt;However, this bounding box might not be optimal in very specific cases, especially when the user wants to reconstruct with high details a very specific object located somewhere in the scene, or if the scene is very large, or if the camera centers are very far from the scene. The user is free to provide a custom bounding box to the &lt;code&gt;train.py&lt;/code&gt; script, using the parameters &lt;code&gt;--bboxmin&lt;/code&gt; and &lt;code&gt;--bboxmax&lt;/code&gt;. Please note that the bounding box must be provided as strings, formatted as &lt;code&gt;&#34;(x,y,z)&#34;&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are the coordinates of the min and max points of the bounding box.&lt;/p&gt; &#xA;&lt;h2&gt;Rendering, composition and animation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;metrics.py&lt;/code&gt; script provides an example of how to load a refined SuGaR model for rendering a scene with the hybrid representation and the Gaussian Splatting rasterizer. We will add more details about this in a near future, as well as a notebook with a detailed tutorial.&lt;/p&gt; &#xA;&lt;p&gt;We also provide in the &lt;code&gt;blender&lt;/code&gt; directory several python scripts to export from Blender composition and animation data of SuGaR meshes modified or animated within Blender. Additionally, we provide in the &lt;code&gt;sugar_scene/sugar_compositor.py&lt;/code&gt; script a Python class that can be used to import such animation or composition data into PyTorch and apply it to the SuGaR hybrid representation.&lt;/p&gt; &#xA;&lt;p&gt;The hybrid representation allows for high-quality rendering of the scene with the Gaussian Splatting rasterizer, as shown below.&lt;br&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Anttwo/SuGaR/main/media/blender/full_teaser.png&#34; alt=&#34;teaser.gif&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;The usage of these scripts and class may be a bit tricky, so we will add a detailed tutorial on how to use them in a near future.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;To evaluate the quality of the reconstructions, we provide a script &lt;code&gt;metrics.py&lt;/code&gt; that computes the PSNR, SSIM and LPIPS metrics on test images. Start by optimizing SuGaR models for the desired scenes and a regularization method (&lt;code&gt;&#34;density&#34;&lt;/code&gt; or &lt;code&gt;&#34;sdf&#34;&lt;/code&gt;), then create a &lt;code&gt;.json&lt;/code&gt; config file containing the paths to the scenes in the following format: &lt;code&gt;{source_images_dir_path: vanilla_gaussian_splatting_checkpoint_path}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the script as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python metrics.py --scene_config &amp;lt;Path to the .json file&amp;gt; -r &amp;lt;&#34;sdf&#34; or &#34;density&#34;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results are saved in a &lt;code&gt;.json&lt;/code&gt; file in the &lt;code&gt;output/metrics/&lt;/code&gt; directory. Please refer to the script for more details on the command line arguments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>babaohuang/GeminiProChat</title>
    <updated>2023-12-22T01:25:25Z</updated>
    <id>tag:github.com,2023-12-22:/babaohuang/GeminiProChat</id>
    <link href="https://github.com/babaohuang/GeminiProChat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal web UI for GeminiPro.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GeminiProChat&lt;/h1&gt; &#xA;&lt;p&gt;Minimal web UI for GeminiPro Chat.&lt;/p&gt; &#xA;&lt;p&gt;Live demo: &lt;a href=&#34;https://www.geminiprochat.com&#34;&gt;Gemini Pro Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.geminiprochat.com&#34;&gt;&lt;img src=&#34;https://github.com/babaohuang/GeminiProChat/assets/559171/d02fd440-401a-410d-a112-4b10935624c6&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;h3&gt;Deploy With Vercel(Recommended)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https://github.com/babaohuang/GeminiProChat&amp;amp;env=GEMINI_API_KEY&amp;amp;envDescription=Google%20API%20Key%20for%20GeminiProChat&amp;amp;envLink=https://makersuite.google.com/app/apikey&amp;amp;project-name=gemini-pro-chat&amp;amp;repository-name=gemini-pro-chat&amp;amp;demo-title=Gemini%20Pro%20Chat&amp;amp;demo-description=Minimal%20web%20UI%20for%20Gemini%20Pro.&amp;amp;demo-url=https%3A%2F%2Fgeminiprochat.com&amp;amp;demo-image=https%3A%2F%2Fgeminiprochat.com%2Ficon.svg&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just click the button above and follow the instructions to deploy your own copy of the app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;h4&gt;Solution for &#34;User location is not supported for the API use&#34;&lt;/h4&gt; &#xA; &lt;p&gt;If you encounter the issue &lt;strong&gt;&#34;User location is not supported for the API use&#34;&lt;/strong&gt;, follow these steps to resolve it:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to this &lt;a href=&#34;https://github.com/antergone/palm-proxy&#34;&gt;&lt;strong&gt;palm-proxy&lt;/strong&gt;&lt;/a&gt; repo and click &lt;strong&gt;&#34;Deploy With Vercel&#34;&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Once the deployment is complete, you will receive a domain name assigned by Vercel (e.g., &lt;code&gt;https://xxx.vercel.app&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;In your &lt;strong&gt;Gemini Pro Chat&lt;/strong&gt; project, set an environment variable named &lt;code&gt;API_BASE_URL&lt;/code&gt; with the value being the domain you got from deploying the gemini proxy (&lt;code&gt;https://xxx.vercel.app&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;Redeploy your &lt;strong&gt;Gemini Pro Chat&lt;/strong&gt; project to finalize the configuration. This should resolve the issue.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/antergone/palm-proxy&#34;&gt;&lt;strong&gt;antergone&lt;/strong&gt;&lt;/a&gt; for providing this solution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Deploy on Railway&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://railway.app/template/v9QL5u?referralCode=tSzmIe&#34;&gt;&lt;img src=&#34;https://railway.app/button.svg?sanitize=true&#34; alt=&#34;Deploy on Railway&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just click the button above and follow the instructions to deploy on Railway.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy With Docker&lt;/h3&gt; &#xA;&lt;p&gt;To deploy with Docker, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name geminiprochat \&#xA;--restart always \&#xA;-p 3000:3000 \&#xA;-itd \&#xA;-e GEMINI_API_KEY=your_api_key_here \&#xA;babaohuang/geminiprochat:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make sure to replace &lt;code&gt;your_api_key_here&lt;/code&gt; with your own GEMINI API key.&lt;/p&gt; &#xA;&lt;p&gt;This will start the &lt;strong&gt;geminiprochat&lt;/strong&gt; service, accessible at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;You can control the website through environment variables.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GEMINI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Your API Key for GEMINI. You can get it from &lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;here&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;API_BASE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom base url for GEMINI API. Click &lt;a href=&#34;https://github.com/babaohuang/GeminiProChat?tab=readme-ov-file#solution-for-user-location-is-not-supported-for-the-api-use&#34;&gt;here&lt;/a&gt; to see when to use this.&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HEAD_SCRIPTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inject analytics or other scripts before &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; of the page&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PUBLIC_SECRET_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Secret string for the project. Use for generating signatures for API calls&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SITE_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set password for site, support multiple password separated by comma. If not set, site will be public&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;h3&gt;Pre environment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node&lt;/strong&gt;: Check that both your development environment and deployment environment are using &lt;code&gt;Node v18&lt;/code&gt; or later. You can use &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; to manage multiple &lt;code&gt;node&lt;/code&gt; versions locally.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; node -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PNPM&lt;/strong&gt;: We recommend using &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; to manage dependencies. If you have never installed pnpm, you can install it with the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; npm i -g pnpm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GEMINI_API_KEY&lt;/strong&gt;: Before running this application, you need to obtain the API key from Google. You can register the API key at &lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;https://makersuite.google.com/app/apikey&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;.env.example&lt;/code&gt; file, then rename it to &lt;code&gt;.env&lt;/code&gt;, and add your &lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;GEMINI API key&lt;/a&gt; to the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; GEMINI_API_KEY=AIzaSy...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the application, the local project runs on &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project is inspired by and based on the following open-source project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anse-app/chatgpt-demo&#34;&gt;ChatGPT-Demo&lt;/a&gt; - For the foundational codebase and features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#babaohuang/geminiprochat&amp;amp;Timeline&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=babaohuang/geminiprochat&amp;amp;type=Timeline&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Buy me a coffee&lt;/h2&gt; &#xA;&lt;p&gt;If this repo is helpful to you, buy me a coffee,thank you very much!😄&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/babaohuang&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>solidjs/solid-start</title>
    <updated>2023-12-22T01:25:25Z</updated>
    <id>tag:github.com,2023-12-22:/solidjs/solid-start</id>
    <link href="https://github.com/solidjs/solid-start" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SolidStart, the Solid app framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;img width=&#34;100%&#34; src=&#34;https://assets.solidjs.com/banner?project=Start&amp;amp;type=core&#34; alt=&#34;Solid Docs&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;SolidStart&lt;/h1&gt; &#xA;&lt;h3&gt;Start has just entered a new Beta Phase&lt;/h3&gt; &#xA;&lt;p&gt;v0.4.x marks a significant change in the project. Please check the updated docs and example projects to see how things have changed. A summary of the chances can be found in the &lt;a href=&#34;https://github.com/solidjs/solid-start/discussions/1052&#34;&gt;RFC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is the home of the Solid app framework. This is still a &lt;strong&gt;work in progress&lt;/strong&gt;. Many features are missing or incomplete. Experimental status does not even mean beta status. Patch releases will break everything.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File-system based routing&lt;/li&gt; &#xA; &lt;li&gt;Supports all rendering modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Server-side rendering (SSR)&lt;/li&gt; &#xA;   &lt;li&gt;Streaming SSR&lt;/li&gt; &#xA;   &lt;li&gt;Client-side rendering (CSR)&lt;/li&gt; &#xA;   &lt;li&gt;Static Site Generation (SSG)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Streaming&lt;/li&gt; &#xA; &lt;li&gt;Build optimizations with Code splitting, tree shaking and dead code elimination&lt;/li&gt; &#xA; &lt;li&gt;API Routes&lt;/li&gt; &#xA; &lt;li&gt;Built on Web standards like Fetch, Streams, and WebCrypto&lt;/li&gt; &#xA; &lt;li&gt;Adapters for deployment to all popular platforms&lt;/li&gt; &#xA; &lt;li&gt;CSS Modules, SASS/SCSS Support&lt;/li&gt; &#xA; &lt;li&gt;TypeScript-first&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;p&gt;Create a SolidStart application and run a development server using your preferred package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir my-app&#xA;cd my-app&#xA;&#xA;# with npm&#xA;npm init solid@latest&#xA;npm install&#xA;npm run dev&#xA;&#xA;# or with pnpm&#xA;pnpm create solid@latest&#xA;pnpm install&#xA;pnpm dev&#xA;&#xA;# or with Bun&#xA;bunx create-solid@latest&#xA;bun install&#xA;bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;You should use a node version manager &lt;a href=&#34;https://stackoverflow.com/a/62978089/565877&#34;&gt;compatible with &lt;code&gt;.node-version&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://asdf-vm.com/&#34;&gt;asdf-vm&lt;/a&gt; is a great option mac/linux users)&lt;/p&gt; &#xA;&lt;p&gt;The monorepo uses &lt;code&gt;pnpm&lt;/code&gt; as the package manager. To install &lt;code&gt;pnpm&lt;/code&gt;, run the following command in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g pnpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pnpm install&lt;/code&gt; to install all the dependencies for the packages and examples in your monorepo.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;Monorepo &amp;amp; &lt;code&gt;project.json&lt;/code&gt; &lt;code&gt;&#34;workspace&#34;&lt;/code&gt; support&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you are using Solid Start within a monorepo that takes advantage of the &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&#34;workspaces&#34;&lt;/code&gt; property (e.g. &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/workspaces/&#34;&gt;yarn workspaces&lt;/a&gt;) with hoisted dependencies (the default for yarn), you must include &lt;code&gt;solid-start&lt;/code&gt; within the optional &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; (for yarn v2 or higher, see further down for instructions) workspaces property.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;In the following, &#34;workspace root&#34; refers to the root of your repository while &#34;project root&#34; refers to the root of a child package within your repository&lt;/em&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;For example, if specifying &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; options from the workspace root (i.e. for all packages):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in workspace root&#xA;{&#xA;  &#34;workspaces&#34;: {&#xA;    &#34;packages&#34;: [&#xA;      /* ... */&#xA;    ],&#xA;    &#34;nohoist&#34;: [&#34;**/solid-start&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If specifying &lt;code&gt;&#34;nohoist&#34;&lt;/code&gt; options for a specific package using &lt;code&gt;solid-start&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in project root of a workspace child&#xA;{&#xA;  &#34;workspaces&#34;: {&#xA;    &#34;nohoist&#34;: [&#34;solid-start&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Regardless of where you specify the &lt;code&gt;nohoist&lt;/code&gt; option, you also need to include &lt;code&gt;solid-start&lt;/code&gt; as a &lt;code&gt;devDependency&lt;/code&gt; in the child &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;The reason why this is necessary is because &lt;code&gt;solid-start&lt;/code&gt; creates an &lt;code&gt;index.html&lt;/code&gt; file within your project which expects to load a script located in &lt;code&gt;/node_modules/solid-start/runtime/entry.jsx&lt;/code&gt; (where &lt;code&gt;/&lt;/code&gt; is the path of your project root). By default, if you hoist the &lt;code&gt;solid-start&lt;/code&gt; dependency into the workspace root then that script will not be available within the package&#39;s &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Yarn v2 or higher&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;nohoist&lt;/code&gt; option is no longer available in Yarn v2+. In this case, we can use the &lt;code&gt;installConfig&lt;/code&gt; property in the &lt;code&gt;package.json&lt;/code&gt; (either workspace package or a specific project package) to make sure our deps are not hoisted.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;// in project root of a workspace child&#xA;{&#xA;  &#34;installConfig&#34;: {&#xA;    &#34;hoistingLimits&#34;: &#34;dependencies&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;p&gt;All credit for the work on Forms and Sessions goes to the @remix-run team, MIT License, Copyright 2021 Remix Software Inc.&lt;/p&gt;</summary>
  </entry>
</feed>