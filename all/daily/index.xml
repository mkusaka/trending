<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-25T01:28:12Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PlatformLab/NanoLog</title>
    <updated>2024-08-25T01:28:12Z</updated>
    <id>tag:github.com,2024-08-25:/PlatformLab/NanoLog</id>
    <link href="https://github.com/PlatformLab/NanoLog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nanolog is an extremely performant nanosecond scale logging system for C++ that exposes a simple printf-like API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NanoLog&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PlatformLab/NanoLog/workflows/Build%20Tests/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nanolog is an extremely performant nanosecond scale logging system for C++ that exposes a simple printf-like API and achieves over 80 &lt;em&gt;million&lt;/em&gt; logs/second at a median latency of just over &lt;em&gt;7 nanoseconds&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How it achieves this insane performance is by extracting static log information at compile-time, only logging the dynamic components in runtime hotpath, and deferring formatting to an offline process. This basically shifts work out of the runtime and into the compilation and post-execution phases.&lt;/p&gt; &#xA;&lt;p&gt;For more information about the techniques used in this logging system, please refer to either the &lt;a href=&#34;https://www.usenix.org/conference/atc18/presentation/yang-stephen&#34;&gt;NanoLog Paper&lt;/a&gt; published in the 2018 USENIX Annual Technical Conference or the original author&#39;s &lt;a href=&#34;https://web.stanford.edu/~ouster/cgi-bin/papers/YangPhD.pdf&#34;&gt;doctoral thesis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;This section shows the performance of NanoLog with existing logging systems such as &lt;a href=&#34;https://github.com/gabime/spdlog&#34;&gt;spdlog v1.1.0&lt;/a&gt;, &lt;a href=&#34;https://logging.apache.org/log4j/2.x/&#34;&gt;Log4j2 v2.8&lt;/a&gt;, &lt;a href=&#34;http://www.boost.org&#34;&gt;Boost 1.55&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/glog&#34;&gt;glog v0.3.5&lt;/a&gt;, and Windows Event Tracing with Windows Software Trace Preprocessor on Windows 10 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/wpp-software-tracing&#34;&gt;(WPP)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Throughput&lt;/h3&gt; &#xA;&lt;p&gt;Maximum throughput measured with 1 million messages logged back to back with no delay and 1-16 logging threads (NanoLog logged 100 million messages to generate a log file of comparable size). ETW is &#34;Event Tracing for Windows.&#34; The log messages used can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/#Log-Messages-Map&#34;&gt;Log Message Map below&lt;/a&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/wiki/PlatformLab/NanoLog/systemComparison.svg?sanitize=true&#34; alt=&#34;N|Solid&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Runtime Latency&lt;/h3&gt; &#xA;&lt;p&gt;Measured in nanoseconds and each cell represents the 50th / 99.9th tail latencies. The log messages used can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/#Log-Messages-Map&#34;&gt;Log Message Map below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Message&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;NanoLog&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;spdlog&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Log4j2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;glog&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Boost&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ETW&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;staticString&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7/ 37&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;214/ 2546&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;174 / 3364&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1198/ 5968&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1764/ 3772&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;161/ 2967&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stringConcat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7/ 36&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;279/ 905&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;256 / 25087&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1212/ 5881&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1829/ 5548&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;191/ 3365&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;singleInteger&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7/ 32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;268/ 855&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;180 / 9305&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1242/ 5482&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1914/ 5759&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;167/ 3007&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;twoIntegers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8/ 62&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;437/ 1416&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;183 / 10896&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1399/ 6100&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2333/ 7235&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;177/ 3183&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;singleDouble&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8/ 43&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;585/ 1562&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;175 / 4351&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1983/ 6957&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2610/ 7079&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;165/ 3182&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;complexFormat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8/ 40&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1776/ 5267&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;202 / 18207&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2569/ 8877&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3334/ 11038&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;218/ 3426&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Log Messages Map&lt;/h4&gt; &#xA;&lt;p&gt;Log messages used in the benchmarks above. &lt;em&gt;Italics&lt;/em&gt; indicate dynamic log arguments.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Message ID&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Log Message Used&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;staticString&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starting backup replica garbage collector thread&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;singleInteger&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Backup storage speeds (min): &lt;em&gt;181&lt;/em&gt; MB/s read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;twoIntegers&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;buffer has consumed &lt;em&gt;1032024&lt;/em&gt; bytes of extra storage, current allocation: &lt;em&gt;1016544&lt;/em&gt; bytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;singleDouble&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using tombstone ratio balancer with ratio = &lt;em&gt;0.4&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;complexFormat&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Initialized InfUdDriver buffers: &lt;em&gt;50000&lt;/em&gt; receive buffers (&lt;em&gt;97&lt;/em&gt; MB), &lt;em&gt;50&lt;/em&gt; transmit buffers (&lt;em&gt;0&lt;/em&gt; MB), took &lt;em&gt;26.2&lt;/em&gt; ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stringConcat&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Opened session with coordinator at &lt;em&gt;basic+udp:host=192.168.1.140,port=12246&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Using NanoLog&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Currently NanoLog only works for Linux-based systems and depends on the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++17 Compiler: &lt;a href=&#34;https://gcc.gnu.org&#34;&gt;GNU g++ 7.5.0&lt;/a&gt; or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make 4.0&lt;/a&gt; or greater&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;Python 3.4.2&lt;/a&gt; or greater&lt;/li&gt; &#xA; &lt;li&gt;POSIX AIO and Threads (usually installed with Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NanoLog Pipeline&lt;/h2&gt; &#xA;&lt;p&gt;The NanoLog system enables low latency logging by deduplicating static log metadata and outputting the dynamic log data in a binary format. This means that log files produced by NanoLog are in binary and must be passed through a separate decompression program to produce the full, human readable ASCII log.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling NanoLog&lt;/h2&gt; &#xA;&lt;p&gt;There are two versions of NanoLog (Preprocessor version and C++17 version) and you must chose &lt;strong&gt;one&lt;/strong&gt; to use with your application as theyâ€™re not interoperable. The biggest difference between the two is that the Preprocessor version requires one to integrate a Python script in their build chain while the C++17 version is closer to a regular library (simply build and link against it). The benefit of using the Preprocessor version is that it performs more work at compile-time, resulting in a slightly more optimized runtime.&lt;/p&gt; &#xA;&lt;p&gt;If you donâ€™t know which one to use, go with C++17 NanoLog as itâ€™s easier to use.&lt;/p&gt; &#xA;&lt;h3&gt;C++17 NanoLog&lt;/h3&gt; &#xA;&lt;p&gt;The C++17 version of NanoLog works like a traditional library; just &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/NanoLogCpp17.h&#34;&gt;&lt;code&gt;#include &#34;NanoLogCpp17.h&#34;&lt;/code&gt;&lt;/a&gt; and link against the NanoLog library. A sample application can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/sample&#34;&gt;sample directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the C++17 NanoLog Runtime library, go in the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/&#34;&gt;runtime directory&lt;/a&gt; and invoke &lt;code&gt;make&lt;/code&gt;. This will produce &lt;code&gt;./libNanoLog.a&lt;/code&gt; to against link your application and a &lt;code&gt;./decompressor&lt;/code&gt; application that can be used to re-inflate the binary logs.&lt;/p&gt; &#xA;&lt;p&gt;When you compile your application, be sure to include the NanoLog header directory (&lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/&#34;&gt;&lt;code&gt;-I ./runtime&lt;/code&gt;&lt;/a&gt;), link against NanoLog, pthreads, and POSIX AIO (&lt;code&gt;-L ./runtime/ -lNanoLog -lrt -pthread&lt;/code&gt;), and enable format checking in the compiler (e.g. passing in &lt;code&gt;-Werror=format&lt;/code&gt; as a compilation flag). The latter step is incredibly important as format errors may silently corrupt the log file at runtime. Sample g++ invocations can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/sample/GNUmakefile&#34;&gt;sample GNUmakefile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After you compile and run the application, the log file generated can then be passed to the &lt;code&gt;./decompressor&lt;/code&gt; application to generate the full human-readable log file (instructions below).&lt;/p&gt; &#xA;&lt;h3&gt;Preprocessor NanoLog&lt;/h3&gt; &#xA;&lt;p&gt;The Preprocessor version of NanoLog requires a tighter integration with the user build chain and is only for advanced/extreme users.&lt;/p&gt; &#xA;&lt;p&gt;It &lt;em&gt;requires&lt;/em&gt; the user&#39;s GNUmakefile to include the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/NanoLogMakeFrag&#34;&gt;NanoLogMakeFrag&lt;/a&gt;, declare USR_SRCS and USR_OBJS variables to list all appâ€™s source and object files respectively, and use the pre-defined &lt;code&gt;run-cxx&lt;/code&gt; macro to compile &lt;em&gt;ALL&lt;/em&gt; the user .cc files into .o files instead of &lt;code&gt;g++&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/sample_preprocessor/GNUmakefile&#34;&gt;preprocessor sample GNUmakefile&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Internally, the &lt;code&gt;run-cxx&lt;/code&gt; invocation will run a Python script over the source files and generate library code that is &lt;em&gt;specific&lt;/em&gt; to each compilation of the user application. In other words, the compilation builds a version of the NanoLog library that is &lt;strong&gt;non-portable, even between compilations of the same application&lt;/strong&gt; and each &lt;code&gt;make&lt;/code&gt; invocation rebuilds this library.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the compilation should also generate a &lt;code&gt;./decompressor&lt;/code&gt; executable in the app directory and this can be used to reconstitute the full human-readable log file (instructions below).&lt;/p&gt; &#xA;&lt;h2&gt;Sample Applications&lt;/h2&gt; &#xA;&lt;p&gt;The sample applications are intended as a guide for how users are to interface with the NanoLog library. Users can modify these applications to test NanoLog&#39;s various API and functionality. The C++17 and Preprocessor versions of these applications reside in &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/sample&#34;&gt;./sample&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/sample_preprocessor&#34;&gt;./sample_preprocessor&lt;/a&gt; respectively. One can modify &lt;code&gt;main.cc&lt;/code&gt; in each directory, build/run the application, and execute the decompressor to examine the results.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example for C++17 NanoLog&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/sample&#34;&gt;sample application&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd sample&#xA;&#xA;# Modify the application&#xA;nano main.cc&#xA;&#xA;make clean-all&#xA;make&#xA;./sampleApplication&#xA;./decompressor decompress /tmp/logFile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The sample application sets the log file to &lt;code&gt;/tmp/logFile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NanoLog API&lt;/h2&gt; &#xA;&lt;p&gt;To use the NanoLog system in the code, one just has to include the NanoLog header (either &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/NanoLogCpp17.h&#34;&gt;NanoLogCpp17.h&lt;/a&gt; for C++17 NanoLog or &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/NanoLog.h&#34;&gt;NanoLog.h&lt;/a&gt; for Preprocessor NanoLog) and invoke the &lt;code&gt;NANO_LOG()&lt;/code&gt; function in a similar fashion to printf, with the exception of a log level before it. Example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;NanoLogCpp17.h&#34;&#xA;using namespace NanoLog::LogLevels;&#xA;&#xA;int main() &#xA;{&#xA;  NANO_LOG(NOTICE, &#34;Hello World! This is an integer %d and a double %lf\r\n&#34;, 1, 2.0);&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valid log levels are DEBUG, NOTICE, WARNING, and ERROR and the logging level can be set via &lt;code&gt;NanoLog::setLogLevel(...)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The rest of the NanoLog API is documented in the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/NanoLog.h&#34;&gt;NanoLog.h&lt;/a&gt; header file.&lt;/p&gt; &#xA;&lt;h2&gt;Post-Execution Log Decompressor&lt;/h2&gt; &#xA;&lt;p&gt;The execution of the user application should generate a compressed, binary log file (default locations: ./compressedLog or /tmp/logFile). To make the log file human-readable, simply invoke the &lt;code&gt;decompressor&lt;/code&gt; application with the log file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./decompressor decompress ./compressedLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building the NanoLog library, the decompressor executable can be found in either the &lt;a href=&#34;https://raw.githubusercontent.com/PlatformLab/NanoLog/master/runtime/&#34;&gt;./runtime directory&lt;/a&gt; (for C++17 NanoLog) or the user app directory (for Preprocessor NanoLog).&lt;/p&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;The NanoLog project contains a plethora of tests to ensure correctness. Below is a description of each and how to access/build/execute them.&lt;/p&gt; &#xA;&lt;h4&gt;Integration Tests&lt;/h4&gt; &#xA;&lt;p&gt;The integration tests build and test the Nanolog system end-to-end. For both C++17 NanoLog and Preprocessor NanoLog, it compiles a client application with the NanoLog library, executes the application, and runs the resulting log file through the decompressor. It additionally compares the output of the decompressor to ensure that the log contents match the expected result.&lt;/p&gt; &#xA;&lt;p&gt;One can execute these tests with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd integrationTest&#xA;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Preprocessor and Library Unit Tests&lt;/h4&gt; &#xA;&lt;p&gt;The NanoLog Library and Preprocessor engine also contain a suit of their own unit tests. These will test the inner-workings of each component by invoking individual functions and checking their returns match the expected results.&lt;/p&gt; &#xA;&lt;p&gt;To run the NanoLog preprocessor unit tests, execute the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd preprocessor&#xA;python UnitTests.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and run the NanoLog library unit tests, execute the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init&#xA;&#xA;cd runtime&#xA;make clean&#xA;make test&#xA;./test --gtest_filter=-*assert*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The gtest filter is used to removed tests with assert death statements in them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nashtech-garage/yas</title>
    <updated>2024-08-25T01:28:12Z</updated>
    <id>tag:github.com,2024-08-25:/nashtech-garage/yas</id>
    <link href="https://github.com/nashtech-garage/yas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YAS: Yet Another Shop, a sample microservices project in Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YAS: Yet Another Shop&lt;/h1&gt; &#xA;&lt;p&gt;YAS is a pet project aim to practice building a typical microservice application in Java&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/storefront-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/storefront-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;storefront-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/storefront-bff-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/storefront-bff-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;storefront-bff-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/backoffice-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/backoffice-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;backoffice-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/backoffice-bff-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/backoffice-bff-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;backoffice-bff-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/product-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/product-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;product-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/media-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/media-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;media-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/cart-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/cart-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;cart-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/customer-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/customer-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;customer-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/rating-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/rating-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;rating-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/location-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/location-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;location-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/order-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/order-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;order-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/inventory-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/inventory-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;inventory-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/tax-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/tax-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;tax-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/search-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/search-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;search-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/promotion-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/promotion-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;promotion-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/payment-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/payment-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;payment-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/payment-paypal-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/payment-paypal-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;payment-paypal-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nashtech-garage/yas/actions/workflows/webhook-ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nashtech-garage/yas/actions/workflows/webhook-ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;webhook-ci&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tentative technologies and frameworks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 21&lt;/li&gt; &#xA; &lt;li&gt;Spring boot 3.2&lt;/li&gt; &#xA; &lt;li&gt;Testcontainers&lt;/li&gt; &#xA; &lt;li&gt;Next.js&lt;/li&gt; &#xA; &lt;li&gt;Keycloak&lt;/li&gt; &#xA; &lt;li&gt;Kafka&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch&lt;/li&gt; &#xA; &lt;li&gt;K8s&lt;/li&gt; &#xA; &lt;li&gt;GitHub Actions&lt;/li&gt; &#xA; &lt;li&gt;SonarCloud&lt;/li&gt; &#xA; &lt;li&gt;OpenTelemetry&lt;/li&gt; &#xA; &lt;li&gt;Grafana, Loki, Prometheus, Tempo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Local development architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nashtech-garage/yas/main/yas-architecture-local.png&#34; alt=&#34;Yas - local development architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started with Docker Compose&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the latest source code&lt;/li&gt; &#xA; &lt;li&gt;Add the following records to your host file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;127.0.0.1 identity&#xA;127.0.0.1 api.yas.local&#xA;127.0.0.1 pgadmin.yas.local&#xA;127.0.0.1 storefront&#xA;127.0.0.1 backoffice&#xA;127.0.0.1 loki&#xA;127.0.0.1 tempo&#xA;127.0.0.1 grafana&#xA;127.0.0.1 elasticsearch&#xA;127.0.0.1 kafka&#xA;127.0.0.1 akhq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open terminal of your choice, go to &lt;code&gt;yas&lt;/code&gt; directory, run &lt;code&gt;docker compose up&lt;/code&gt;, wait for all the containers up and running&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/em&gt; To run all the containers, you need a minimum of 16GB of RAM. Otherwise, you can only run the core services with this command &lt;code&gt;docker compose -f docker-compose.yml up&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;All the containers up and running then we start source connectors by run script, open any terminal window... go to the YAS root folder and type: ./start-source-connectors.sh&lt;/li&gt; &#xA; &lt;li&gt;Open your browser, now you can access the websites via &lt;code&gt;http://storefront/&lt;/code&gt;; &lt;code&gt;http://backoffice/&lt;/code&gt; login with admin/password&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/em&gt; For the first run, the storefront and the backoffice might not work as expected. Stop all the containers (Ctrl + C) and run docker compose up again.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;You might also want to explore:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;http://pgadmin.yas.local/&lt;/code&gt;. Account login: &lt;code&gt;admin@yas.com&lt;/code&gt; / admin. Register a server: postgres, port 5432, username admin, password admin. The Postgresql server is also exposed to the host machine: servername: localhost, port: 5432, username: admin, password: admin&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://api.yas.local/swagger-ui/&lt;/code&gt; for all the REST API document of all the services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://identity/&lt;/code&gt; for Keycloak console, account admin/admin&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://grafana/&lt;/code&gt; for observability: log, trace, matrix&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://elasticsearch/&lt;/code&gt; for calling Elasticsearch APIs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;About docker-compose files&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;docker-compose.yml for all core services&lt;/li&gt; &#xA; &lt;li&gt;docker-compose.search.yml for search service&lt;/li&gt; &#xA; &lt;li&gt;docker-compose.o11y.yml for observability services&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deploy to Kubernetes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nashtech-garage/yas/tree/main/k8s/deploy&#34;&gt;https://github.com/nashtech-garage/yas/tree/main/k8s/deploy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nashtech-garage/yas/tree/main/docs&#34;&gt;Architecture and components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nashtech-garage/yas/wiki/Developer-guidelines&#34;&gt;Developer guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give us a star&lt;/li&gt; &#xA; &lt;li&gt;Reporting a bug&lt;/li&gt; &#xA; &lt;li&gt;Participate discussions&lt;/li&gt; &#xA; &lt;li&gt;Propose new features&lt;/li&gt; &#xA; &lt;li&gt;Submit pull requests. If you are new to GitHub, consider to &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/contributing-to-projects&#34;&gt;learn how to contribute to a project through forking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By contributing, you agree that your contributions will be licensed under MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Backoffice &amp;amp; Storefront&lt;/th&gt; &#xA;   &lt;th&gt;Observability&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr valign=&#34;top&#34;&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nashtech-garage/yas/main/screenshots/yas-backoffice.png&#34; alt=&#34;Yas Backoffice&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nashtech-garage/yas/main/screenshots/yas-grafana-tracing.png&#34; alt=&#34;Yas Grafana Tracing&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr valign=&#34;top&#34;&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nashtech-garage/yas/main/screenshots/yas-storefront.png&#34; alt=&#34;Yas Storefront&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nashtech-garage/yas/main/screenshots/yas-grafana-metrics.png&#34; alt=&#34;Yas Grafana Metrics&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>google/flatbuffers</title>
    <updated>2024-08-25T01:28:12Z</updated>
    <id>tag:github.com,2024-08-25:/google/flatbuffers</id>
    <link href="https://github.com/google/flatbuffers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FlatBuffers: Memory Efficient Serialization Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;http://google.github.io/flatbuffers/fpl_logo_small.png&#34; alt=&#34;logo&#34;&gt; FlatBuffers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/flatbuffers/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://buildkite.com/bazel/flatbuffers&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/7979d93bc6279aa539971f271253c65d5e8fe2fe43c90bbb25.svg?sanitize=true&#34; alt=&#34;BuildKite status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:flatbuffers&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/flatbuffers.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/google/flatbuffers&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/google/flatbuffers/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/google/flatbuffers?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/google/flatbuffers.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/google/flatbuffers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https:///discord.gg/6qgKs3R&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/656202785926152206.svg?sanitize=true&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/wvo&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/wvo.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/dbaileychess&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/dbaileychess.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlatBuffers&lt;/strong&gt; is a cross platform serialization library architected for maximum memory efficiency. It allows you to directly access serialized data without parsing/unpacking it first, while still having great forwards/backwards compatibility.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the compiler for flatbuffers (&lt;code&gt;flatc&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;cmake&lt;/code&gt; to create the build files for your platform and then perform the compliation (Linux example).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cmake -G &#34;Unix Makefiles&#34;&#xA;make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define your flatbuffer schema (&lt;code&gt;.fbs&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Write the &lt;a href=&#34;https://flatbuffers.dev/flatbuffers_guide_writing_schema.html&#34;&gt;schema&lt;/a&gt; to define the data you want to serialize. See &lt;a href=&#34;https://github.com/google/flatbuffers/raw/master/samples/monster.fbs&#34;&gt;monster.fbs&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate code for your language(s)&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;flatc&lt;/code&gt; compiler to take your schema and generate language-specific code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./flatc --cpp --rust monster.fbs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Which generates &lt;code&gt;monster_generated.h&lt;/code&gt; and &lt;code&gt;monster_generated.rs&lt;/code&gt; files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Serialize data&lt;/p&gt; &lt;p&gt;Use the generated code, as well as the &lt;code&gt;FlatBufferBuilder&lt;/code&gt; to construct your serialized buffer. (&lt;a href=&#34;https://github.com/google/flatbuffers/raw/master/samples/sample_binary.cpp#L24-L56&#34;&gt;&lt;code&gt;C++&lt;/code&gt; example&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Transmit/store/save Buffer&lt;/p&gt; &lt;p&gt;Use your serialized buffer however you want. Send it to someone, save it for later, etc...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Read the data&lt;/p&gt; &lt;p&gt;Use the generated accessors to read the data from the serialized buffer.&lt;/p&gt; &lt;p&gt;It doesn&#39;t need to be the same language/schema version, FlatBuffers ensures the data is readable across languages and schema versions. See the &lt;a href=&#34;https://github.com/google/flatbuffers/raw/master/samples/sample_binary.rs#L92-L106&#34;&gt;&lt;code&gt;Rust&lt;/code&gt; example&lt;/a&gt; reading the data written by &lt;code&gt;C++&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Go to our &lt;a href=&#34;https://google.github.io/flatbuffers&#34;&gt;landing page&lt;/a&gt; to browse our documentation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported operating systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA; &lt;li&gt;And any others with a recent C++ compiler (C++ 11 and newer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported programming languages&lt;/h2&gt; &#xA;&lt;p&gt;Code generation and runtime libraries for many popular languages.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;C&lt;/li&gt; &#xA; &lt;li&gt;C++ - &lt;a href=&#34;https://snapcraft.io/flatbuffers&#34;&gt;snapcraft.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;C# - &lt;a href=&#34;https://www.nuget.org/packages/Google.FlatBuffers&#34;&gt;nuget.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dart - &lt;a href=&#34;https://pub.dev/packages/flat_buffers&#34;&gt;pub.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go - &lt;a href=&#34;https://pkg.go.dev/github.com/google/flatbuffers&#34;&gt;go.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java - &lt;a href=&#34;https://search.maven.org/artifact/com.google.flatbuffers/flatbuffers-java&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JavaScript - &lt;a href=&#34;https://www.npmjs.com/package/flatbuffers&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;Lobster&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Python - &lt;a href=&#34;https://pypi.org/project/flatbuffers/&#34;&gt;PyPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust - &lt;a href=&#34;https://crates.io/crates/flatbuffers&#34;&gt;crates.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift - &lt;a href=&#34;https://swiftpackageindex.com/google/flatbuffers&#34;&gt;swiftpackageindex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TypeScript - &lt;a href=&#34;https://www.npmjs.com/package/flatbuffers&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;FlatBuffers does not follow traditional SemVer versioning (see &lt;a href=&#34;https://github.com/google/flatbuffers/wiki/Versioning&#34;&gt;rationale&lt;/a&gt;) but rather uses a format of the date of the release.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/google/flatbuffers/issues&#34;&gt;FlatBuffers Issues Tracker&lt;/a&gt; to submit an issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/search?q=flatbuffers&#34;&gt;stackoverflow.com&lt;/a&gt; with &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flatbuffers&#34;&gt;&lt;code&gt;flatbuffers&lt;/code&gt; tag&lt;/a&gt; for any questions regarding FlatBuffers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;To contribute to this project,&lt;/em&gt; see &lt;a href=&#34;http://github.com/google/flatbuffers/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https:///discord.gg/6qgKs3R&#34;&gt;Discord Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/google/flatbuffers/master/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt; for reporting vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Flatbuffers&lt;/em&gt; is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://github.com/google/flatbuffers/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt; &#xA;&lt;br&gt;</summary>
  </entry>
</feed>