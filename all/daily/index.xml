<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-02T01:28:15Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ansible/ansible</title>
    <updated>2024-11-02T01:28:15Z</updated>
    <id>tag:github.com,2024-11-02:/ansible/ansible</id>
    <link href="https://github.com/ansible/ansible" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy and maintain. Automate everything from code deployment to network configuration to cloud management, in a language that approaches plain English, using SSH, with no agents to install on remote systems. https://docs.ansible.com.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/ansible-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/ansible-core.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.ansible.com/ansible/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?sanitize=true&#34; alt=&#34;Docs badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.ansible.com/ansible/devel/community/communication.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-IRC-brightgreen.svg?sanitize=true&#34; alt=&#34;Chat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/ansible/ansible/_build/latest?definitionId=20&amp;amp;branchName=devel&#34;&gt;&lt;img src=&#34;https://dev.azure.com/ansible/ansible/_apis/build/status/CI?branchName=devel&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.ansible.com/ansible/devel/community/code_of_conduct.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20of%20conduct-Ansible-silver.svg?sanitize=true&#34; alt=&#34;Ansible Code of Conduct&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.ansible.com/ansible/devel/community/communication.html#mailing-list-information&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mailing%20lists-Ansible-orange.svg?sanitize=true&#34; alt=&#34;Ansible mailing lists&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ansible/ansible/devel/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL%20v3.0-brightgreen.svg?sanitize=true&#34; alt=&#34;Repository License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/2372&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/2372/badge&#34; alt=&#34;Ansible CII Best Practices certification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ansible&lt;/h1&gt; &#xA;&lt;p&gt;Ansible is a radically simple IT automation system. It handles configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration. Ansible makes complex changes like zero-downtime rolling updates with load balancers easy. More information on the Ansible &lt;a href=&#34;https://ansible.com/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have an extremely simple setup process with a minimal learning curve.&lt;/li&gt; &#xA; &lt;li&gt;Manage machines quickly and in parallel.&lt;/li&gt; &#xA; &lt;li&gt;Avoid custom-agents and additional open ports, be agentless by leveraging the existing SSH daemon.&lt;/li&gt; &#xA; &lt;li&gt;Describe infrastructure in a language that is both machine and human friendly.&lt;/li&gt; &#xA; &lt;li&gt;Focus on security and easy auditability/review/rewriting of content.&lt;/li&gt; &#xA; &lt;li&gt;Manage new remote machines instantly, without bootstrapping any software.&lt;/li&gt; &#xA; &lt;li&gt;Allow module development in any dynamic language, not just Python.&lt;/li&gt; &#xA; &lt;li&gt;Be usable as non-root.&lt;/li&gt; &#xA; &lt;li&gt;Be the easiest IT automation system to use, ever.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use Ansible&lt;/h2&gt; &#xA;&lt;p&gt;You can install a released version of Ansible with &lt;code&gt;pip&lt;/code&gt; or a package manager. See our &lt;a href=&#34;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html&#34;&gt;installation guide&lt;/a&gt; for details on installing Ansible on a variety of platforms.&lt;/p&gt; &#xA;&lt;p&gt;Power users and developers can run the &lt;code&gt;devel&lt;/code&gt; branch, which has the latest features and fixes, directly. Although it is reasonably stable, you are more likely to encounter breaking changes when running the &lt;code&gt;devel&lt;/code&gt; branch. We recommend getting involved in the Ansible community if you want to run the &lt;code&gt;devel&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;p&gt;Join the Ansible forum to ask questions, get help, and interact with the community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.ansible.com/c/help/6&#34;&gt;Get Help&lt;/a&gt;: Find help or share your Ansible knowledge to help others. Use tags to filter and subscribe to posts, such as the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Posts tagged with &lt;a href=&#34;https://forum.ansible.com/tag/ansible&#34;&gt;ansible&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Posts tagged with &lt;a href=&#34;https://forum.ansible.com/tag/ansible-core&#34;&gt;ansible-core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Posts tagged with &lt;a href=&#34;https://forum.ansible.com/tag/playbook&#34;&gt;playbook&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.ansible.com/c/chat/4&#34;&gt;Social Spaces&lt;/a&gt;: Meet and interact with fellow enthusiasts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.ansible.com/c/news/5&#34;&gt;News &amp;amp; Announcements&lt;/a&gt;: Track project-wide announcements including social events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/devel/community/communication.html#the-bullhorn&#34;&gt;Bullhorn newsletter&lt;/a&gt;: Get release announcements and important changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more ways to get in touch, see &lt;a href=&#34;https://docs.ansible.com/ansible/devel/community/communication.html&#34;&gt;Communicating with the Ansible community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to Ansible&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/ansible/ansible/devel/.github/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://docs.ansible.com/ansible/devel/community&#34;&gt;Community Information&lt;/a&gt; for all kinds of ways to contribute to and interact with the project, including how to submit bug reports and code to Ansible.&lt;/li&gt; &#xA; &lt;li&gt;Submit a proposed code update through a pull request to the &lt;code&gt;devel&lt;/code&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Talk to us before making larger changes to avoid duplicate efforts. This not only helps everyone know what is going on, but it also helps save time and effort if we decide some changes are needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coding Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;We document our Coding Guidelines in the &lt;a href=&#34;https://docs.ansible.com/ansible/devel/dev_guide/&#34;&gt;Developer Guide&lt;/a&gt;. We particularly suggest you review:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/devel/dev_guide/developing_modules_checklist.html&#34;&gt;Contributing your module to Ansible&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/devel/dev_guide/developing_modules_best_practices.html&#34;&gt;Conventions, tips, and pitfalls&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branch Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;devel&lt;/code&gt; branch corresponds to the release actively under development.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;stable-2.X&lt;/code&gt; branches correspond to stable releases.&lt;/li&gt; &#xA; &lt;li&gt;Create a branch based on &lt;code&gt;devel&lt;/code&gt; and set up a &lt;a href=&#34;https://docs.ansible.com/ansible/devel/dev_guide/developing_modules_general.html#common-environment-setup&#34;&gt;dev environment&lt;/a&gt; if you want to open a PR.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.ansible.com/ansible/devel/reference_appendices/release_and_maintenance.html&#34;&gt;Ansible release and maintenance&lt;/a&gt; page for information about active branches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Based on team and community feedback, an initial roadmap will be published for a major or minor version (ex: 2.7, 2.8). The &lt;a href=&#34;https://docs.ansible.com/ansible/devel/roadmap/&#34;&gt;Ansible Roadmap page&lt;/a&gt; details what is planned and how to influence the roadmap.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Ansible was created by &lt;a href=&#34;https://github.com/mpdehaan&#34;&gt;Michael DeHaan&lt;/a&gt; and has contributions from over 5000 users (and growing). Thanks everyone!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; is sponsored by &lt;a href=&#34;https://www.redhat.com&#34;&gt;Red Hat, Inc.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GNU General Public License v3.0 or later&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ansible/ansible/devel/COPYING&#34;&gt;COPYING&lt;/a&gt; to see the full text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trufflesecurity/trufflehog</title>
    <updated>2024-11-02T01:28:15Z</updated>
    <id>tag:github.com,2024-11-02:/trufflesecurity/trufflehog</id>
    <link href="https://github.com/trufflesecurity/trufflehog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find, verify, and analyze leaked credentials&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GoReleaser Logo&#34; src=&#34;https://storage.googleapis.com/trufflehog-static-sources/pixel_pig.png&#34; height=&#34;140&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;TruffleHog&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Find leaked credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/trufflesecurity/trufflehog/v3&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/trufflesecurity/trufflehog/v3&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPL--3.0-brightgreen&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/directory-file-count/trufflesecurity/truffleHog/pkg/detectors?label=Total%20Detectors&amp;amp;type=dir&#34; alt=&#34;Total Detectors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;span&gt;🔎&lt;/span&gt; &lt;em&gt;Now Scanning&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/assets/scanning_logos.svg?sanitize=true&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;...and more&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;To learn more about about TruffleHog and its features and capabilities, visit our &lt;a href=&#34;https://trufflesecurity.com/trufflehog?gclid=CjwKCAjwouexBhAuEiwAtW_Zx5IW87JNj97Ci7heFnA5ar6-DuNzT2Y5nIl9DuZ-FOUqx0Qg3vb9nxoClcEQAvD_BwE&#34;&gt;product page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;&lt;span&gt;🌐&lt;/span&gt; TruffleHog Enterprise&lt;/h1&gt; &#xA;&lt;p&gt;Are you interested in continuously monitoring &lt;strong&gt;Git, Jira, Slack, Confluence, Microsoft Teams, Sharepoint, and more..&lt;/strong&gt; for credentials? We have an enterprise product that can help! Learn more at &lt;a href=&#34;https://trufflesecurity.com/trufflehog-enterprise&#34;&gt;https://trufflesecurity.com/trufflehog-enterprise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We take the revenue from the enterprise product to fund more awesome open source projects that the whole community can benefit from.&lt;/p&gt;  &#xA;&lt;h1&gt;What is TruffleHog 🐽&lt;/h1&gt; &#xA;&lt;p&gt;TruffleHog is the most powerful secrets &lt;strong&gt;Discovery, Classification, Validation,&lt;/strong&gt; and &lt;strong&gt;Analysis&lt;/strong&gt; tool. In this context secret refers to a credential a machine uses to authenticate itself to another machine. This includes API keys, database passwords, private encryption keys, and more...&lt;/p&gt; &#xA;&lt;h2&gt;Discovery 🔍&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog can look for secrets in many places including Git, chats, wikis, logs, API testing platforms, object stores, filesystems and more&lt;/p&gt; &#xA;&lt;h2&gt;Classification 📁&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog classifies over 800 secret types, mapping them back to the specific identity they belong to. Is it an AWS secret? Stripe secret? Cloudflare secret? Postgres password? SSL Private key? Sometimes its hard to tell looking at it, so TruffleHog classifies everything it finds.&lt;/p&gt; &#xA;&lt;h2&gt;Validation ✅&lt;/h2&gt; &#xA;&lt;p&gt;For every secret TruffleHog can classify, it can also log in to confirm if that secret is live or not. This step is critical to know if there’s an active present danger or not.&lt;/p&gt; &#xA;&lt;h2&gt;Analysis 🔬&lt;/h2&gt; &#xA;&lt;p&gt;For the 20 some of the most commonly leaked out credential types, instead of sending one request to check if the secret can log in, TruffleHog can send many requests to learn everything there is to know about the secret. Who created it? What resources can it access? What permissions does it have on those resources?&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;📢&lt;/span&gt; Join Our Community&lt;/h1&gt; &#xA;&lt;p&gt;Have questions? Feedback? Jump in slack or discord and hang out with us&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://join.slack.com/t/trufflehog-community/shared_invite/zt-pw2qbi43-Aa86hkiimstfdKH9UCpPzQ&#34;&gt;Slack Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/8Hzbrnkr7E&#34;&gt;Secret Scanning Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;📺&lt;/span&gt; Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/truffle-demos/non-interactive.svg?sanitize=true&#34; alt=&#34;GitHub scanning demo&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --org=trufflesecurity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;💾&lt;/span&gt; Installation&lt;/h1&gt; &#xA;&lt;p&gt;Several options available for you:&lt;/p&gt; &#xA;&lt;h3&gt;MacOS users&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install trufflehog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;sub&gt;&lt;i&gt;&lt;em&gt;Ensure Docker engine is running before executing the following commands:&lt;/em&gt;&lt;/i&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Unix&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows Command Prompt&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;%cd:/=\%:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;${PWD}:/pwd&#34; trufflesecurity/trufflehog github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 and M2 Mac&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --platform linux/arm64 --rm -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Download and unpack from https://github.com/trufflesecurity/trufflehog/releases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile from source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/trufflesecurity/trufflehog.git&#xA;cd trufflehog; go install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using installation script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using installation script, verify checksum signature (requires cosign to be installed)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -v -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using installation script to install a specific version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin &amp;lt;ReleaseTag like v3.56.0&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;🔐&lt;/span&gt; Verifying the artifacts&lt;/h1&gt; &#xA;&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; &#xA;&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sigstore.dev/cosign/system_config/installation/&#34;&gt;Cosign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Verification steps are as follow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the artifact files you want, and the following files from the &lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;trufflehog_{version}_checksums.txt&lt;/li&gt; &#xA;   &lt;li&gt;trufflehog_{version}_checksums.txt.pem&lt;/li&gt; &#xA;   &lt;li&gt;trufflehog_{version}_checksums.txt.sig&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cosign verify-blob &amp;lt;path to trufflehog_{version}_checksums.txt&amp;gt; \&#xA;--certificate &amp;lt;path to trufflehog_{version}_checksums.txt.pem&amp;gt; \&#xA;--signature &amp;lt;path to trufflehog_{version}_checksums.txt.sig&amp;gt; \&#xA;--certificate-identity-regexp &#39;https://github\.com/trufflesecurity/trufflehog/\.github/workflows/.+&#39; \&#xA;--certificate-oidc-issuer &#34;https://token.actions.githubusercontent.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sha256sum --ignore-missing -c trufflehog_{version}_checksums.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;{version}&lt;/code&gt; with the downloaded files version&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you are using installation script, pass &lt;code&gt;-v&lt;/code&gt; option to perform signature verification. This required Cosign binary to be installed prior to running installation script.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;🚀&lt;/span&gt; Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;1: Scan a repo for only verified secrets&lt;/h2&gt; &#xA;&lt;p&gt;Command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog git https://github.com/trufflesecurity/test_keys --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expected output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;🐷🔑🐷  TruffleHog. Unearth your secrets. 🐷🔑🐷&#xA;&#xA;Found verified result 🐷🔑&#xA;Detector Type: AWS&#xA;Decoder Type: PLAIN&#xA;Raw result: AKIAYVP4CIPPERUVIFXG&#xA;Line: 4&#xA;Commit: fbc14303ffbf8fb1c2c1914e8dda7d0121633aca&#xA;File: keys&#xA;Email: counter &amp;lt;counter@counters-MacBook-Air.local&amp;gt;&#xA;Repository: https://github.com/trufflesecurity/test_keys&#xA;Timestamp: 2022-06-16 10:17:40 -0700 PDT&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2: Scan a GitHub Org for only verified secrets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog github --org=trufflesecurity --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3: Scan a GitHub Repo for only verified keys and get JSON output&lt;/h2&gt; &#xA;&lt;p&gt;Command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog git https://github.com/trufflesecurity/test_keys --only-verified --json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expected output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;SourceMetadata&#34;:{&#34;Data&#34;:{&#34;Git&#34;:{&#34;commit&#34;:&#34;fbc14303ffbf8fb1c2c1914e8dda7d0121633aca&#34;,&#34;file&#34;:&#34;keys&#34;,&#34;email&#34;:&#34;counter \u003ccounter@counters-MacBook-Air.local\u003e&#34;,&#34;repository&#34;:&#34;https://github.com/trufflesecurity/test_keys&#34;,&#34;timestamp&#34;:&#34;2022-06-16 10:17:40 -0700 PDT&#34;,&#34;line&#34;:4}}},&#34;SourceID&#34;:0,&#34;SourceType&#34;:16,&#34;SourceName&#34;:&#34;trufflehog - git&#34;,&#34;DetectorType&#34;:2,&#34;DetectorName&#34;:&#34;AWS&#34;,&#34;DecoderName&#34;:&#34;PLAIN&#34;,&#34;Verified&#34;:true,&#34;Raw&#34;:&#34;AKIAYVP4CIPPERUVIFXG&#34;,&#34;Redacted&#34;:&#34;AKIAYVP4CIPPERUVIFXG&#34;,&#34;ExtraData&#34;:{&#34;account&#34;:&#34;595918472158&#34;,&#34;arn&#34;:&#34;arn:aws:iam::595918472158:user/canarytokens.com@@mirux23ppyky6hx3l6vclmhnj&#34;,&#34;user_id&#34;:&#34;AIDAYVP4CIPPJ5M54LRCY&#34;},&#34;StructuredData&#34;:null}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4: Scan a GitHub Repo + its Issues and Pull Requests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog github --repo=https://github.com/trufflesecurity/test_keys --issue-comments --pr-comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5: Scan an S3 bucket for verified keys&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --bucket=&amp;lt;bucket name&amp;gt; --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;6: Scan S3 buckets using IAM Roles&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --role-arn=&amp;lt;iam role arn&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;7: Scan a Github Repo using SSH authentication in docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v &#34;$HOME/.ssh:/root/.ssh:ro&#34; trufflesecurity/trufflehog:latest git ssh://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;8: Scan individual files or directories&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog filesystem path/to/file1.txt path/to/file2.txt path/to/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;9: Scan GCS buckets for verified secrets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog gcs --project-id=&amp;lt;project-ID&amp;gt; --cloud-environment --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;10: Scan a Docker image for verified secrets&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--image&lt;/code&gt; flag multiple times to scan multiple images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog docker --image trufflesecurity/secrets --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;11: Scan in CI&lt;/h2&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;--since-commit&lt;/code&gt; flag to your default branch that people merge into (ex: &#34;main&#34;). Set the &lt;code&gt;--branch&lt;/code&gt; flag to your PR&#39;s branch name (ex: &#34;feature-1&#34;). Depending on the CI/CD platform you use, this value can be pulled in dynamically (ex: &lt;a href=&#34;https://circleci.com/docs/variables/&#34;&gt;CIRCLE_BRANCH in Circle CI&lt;/a&gt; and &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/&#34;&gt;TRAVIS_PULL_REQUEST_BRANCH in Travis CI&lt;/a&gt;). If the repo is cloned and the target branch is already checked out during the CI/CD workflow, then &lt;code&gt;--branch HEAD&lt;/code&gt; should be sufficient. The &lt;code&gt;--fail&lt;/code&gt; flag will return an 183 error code if valid credentials are found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog git file://. --since-commit main --branch feature-1 --only-verified --fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;12: Scan a Postman workspace&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--workspace-id&lt;/code&gt;, &lt;code&gt;--collection-id&lt;/code&gt;, &lt;code&gt;--environment&lt;/code&gt; flags multiple times to scan multiple targets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog postman --token=&amp;lt;postman api token&amp;gt; --workspace-id=&amp;lt;workspace id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;13: Scan a Jenkins server&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog jenkins --url https://jenkins.example.com --username admin --password admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;14: Scan an Elasticsearch server&lt;/h2&gt; &#xA;&lt;h3&gt;Scan a Local Cluster&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to authenticate to a local cluster with TruffleHog: (1) username and password, (2) service token.&lt;/p&gt; &#xA;&lt;h4&gt;Connect to a local cluster with username and password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --username truffle --password hog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Connect to a local cluster with a service token&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --service-token ‘AAEWVaWM...Rva2VuaSDZ’&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan an Elastic Cloud Cluster&lt;/h3&gt; &#xA;&lt;p&gt;To scan a cluster on Elastic Cloud, you’ll need a Cloud ID and API key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog elasticsearch \&#xA;  --cloud-id &#39;search-prod:dXMtY2Vx...YjM1ODNlOWFiZGRlNjI0NA==&#39; \&#xA;  --api-key &#39;MlVtVjBZ...ZSYlduYnF1djh3NG5FQQ==&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;15. Scan a GitHub Repository for Cross Fork Object References and Deleted Commits&lt;/h2&gt; &#xA;&lt;p&gt;The following command will enumerate deleted and hidden commits on a GitHub repository and then scan them for secrets. This is an alpha release feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog github-experimental --repo https://github.com/&amp;lt;USER&amp;gt;/&amp;lt;REPO&amp;gt;.git --object-discovery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the normal TruffleHog output, the &lt;code&gt;--object-discovery&lt;/code&gt; flag creates two files in a new &lt;code&gt;$HOME/.trufflehog&lt;/code&gt; directory: &lt;code&gt;valid_hidden.txt&lt;/code&gt; and &lt;code&gt;invalid.txt&lt;/code&gt;. These are used to track state during commit enumeration, as well as to provide users with a complete list of all hidden and deleted commits (&lt;code&gt;valid_hidden.txt&lt;/code&gt;). If you&#39;d like to automatically remove these files after scanning, please add the flag &lt;code&gt;--delete-cached-data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Enumerating all valid commits on a repository using this method takes between 20 minutes and a few hours, depending on the size of your repository. We added a progress bar to keep you updated on how long the enumeration will take. The actual secret scanning runs extremely fast.&lt;/p&gt; &#xA;&lt;p&gt;For more information on Cross Fork Object References, please &lt;a href=&#34;https://trufflesecurity.com/blog/anyone-can-access-deleted-and-private-repo-data-github&#34;&gt;read our blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;16. Scan Hugging Face&lt;/h2&gt; &#xA;&lt;h3&gt;Scan a Hugging Face Model, Dataset or Space&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog huggingface --model &amp;lt;model_id&amp;gt; --space &amp;lt;space_id&amp;gt; --dataset &amp;lt;dataset_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan all Models, Datasets and Spaces belonging to a Hugging Face Organization or User&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog huggingface --org &amp;lt;orgname&amp;gt; --user &amp;lt;username&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Optionally) When scanning an organization or user, you can skip an entire class of resources with &lt;code&gt;--skip-models&lt;/code&gt;, &lt;code&gt;--skip-datasets&lt;/code&gt;, &lt;code&gt;--skip-spaces&lt;/code&gt; OR a particular resource with &lt;code&gt;--ignore-models &amp;lt;model_id&amp;gt;&lt;/code&gt;, &lt;code&gt;--ignore-datasets &amp;lt;dataset_id&amp;gt;&lt;/code&gt;, &lt;code&gt;--ignore-spaces &amp;lt;space_id&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Scan Discussion and PR Comments&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog huggingface --model &amp;lt;model_id&amp;gt; --include-discussions --include-prs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;❓&lt;/span&gt; FAQ&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All I see is &lt;code&gt;🐷🔑🐷 TruffleHog. Unearth your secrets. 🐷🔑🐷&lt;/code&gt; and the program exits, what gives? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That means no secrets were detected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Why is the scan taking a long time when I scan a GitHub org &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unauthenticated GitHub scans have rate limits. To improve your rate limits, include the &lt;code&gt;--token&lt;/code&gt; flag with a personal access token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;It says a private key was verified, what does that mean? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check out our Driftwood blog post to learn how to do this, in short we&#39;ve confirmed the key can be used live for SSH or SSL &lt;a href=&#34;https://trufflesecurity.com/blog/driftwood-know-if-private-keys-are-sensitive/&#34;&gt;Blog post&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Is there an easy way to ignore specific secrets? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the scanned source &lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/raw/d6375ba92172fd830abb4247cca15e3176448c5d/pkg/engine/engine.go#L358-L365&#34;&gt;supports line numbers&lt;/a&gt;, then you can add a &lt;code&gt;trufflehog:ignore&lt;/code&gt; comment on the line containing the secret to ignore that secrets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;span&gt;📰&lt;/span&gt; What&#39;s new in v3?&lt;/h1&gt; &#xA;&lt;p&gt;TruffleHog v3 is a complete rewrite in Go with many new powerful features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;ve &lt;strong&gt;added over 700 credential detectors that support active verification against their respective APIs&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve also added native &lt;strong&gt;support for scanning GitHub, GitLab, Docker, filesystems, S3, GCS, Circle CI and Travis CI&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instantly verify private keys&lt;/strong&gt; against millions of github users and &lt;strong&gt;billions&lt;/strong&gt; of TLS certificates using our &lt;a href=&#34;https://trufflesecurity.com/blog/driftwood&#34;&gt;Driftwood&lt;/a&gt; technology.&lt;/li&gt; &#xA; &lt;li&gt;Scan binaries, documents, and other file formats&lt;/li&gt; &#xA; &lt;li&gt;Available as a GitHub Action and a pre-commit hook&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is credential verification?&lt;/h2&gt; &#xA;&lt;p&gt;For every potential credential that is detected, we&#39;ve painstakingly implemented programmatic verification against the API that we think it belongs to. Verification eliminates false positives. For example, the &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors/aws/aws.go&#34;&gt;AWS credential detector&lt;/a&gt; performs a &lt;code&gt;GetCallerIdentity&lt;/code&gt; API call against the AWS API to verify if an AWS credential is active.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;📝&lt;/span&gt; Usage&lt;/h1&gt; &#xA;&lt;p&gt;TruffleHog has a sub-command for each source of data that you may want to scan:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;github&lt;/li&gt; &#xA; &lt;li&gt;gitlab&lt;/li&gt; &#xA; &lt;li&gt;docker&lt;/li&gt; &#xA; &lt;li&gt;s3&lt;/li&gt; &#xA; &lt;li&gt;filesystem (files and directories)&lt;/li&gt; &#xA; &lt;li&gt;syslog&lt;/li&gt; &#xA; &lt;li&gt;circleci&lt;/li&gt; &#xA; &lt;li&gt;travisci&lt;/li&gt; &#xA; &lt;li&gt;gcs (Google Cloud Storage)&lt;/li&gt; &#xA; &lt;li&gt;postman&lt;/li&gt; &#xA; &lt;li&gt;jenkins&lt;/li&gt; &#xA; &lt;li&gt;elasticsearch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each subcommand can have options that you can see with the &lt;code&gt;--help&lt;/code&gt; flag provided to the sub command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ trufflehog git --help&#xA;usage: TruffleHog git [&amp;lt;flags&amp;gt;] &amp;lt;uri&amp;gt;&#xA;&#xA;Find credentials in git repositories.&#xA;&#xA;Flags:&#xA;  -h, --help                Show context-sensitive help (also try --help-long and --help-man).&#xA;      --debug               Run in debug mode.&#xA;      --trace               Run in trace mode.&#xA;      --profile             Enables profiling and sets a pprof and fgprof server on :18066.&#xA;  -j, --json                Output in JSON format.&#xA;      --json-legacy         Use the pre-v3.0 JSON format. Only works with git, gitlab, and github sources.&#xA;      --github-actions      Output in GitHub Actions format.&#xA;      --concurrency=20           Number of concurrent workers.&#xA;      --no-verification     Don&#39;t verify the results.&#xA;      --only-verified       Only output verified results.&#xA;      --allow-verification-overlap&#xA;                                 Allow verification of similar credentials across detectors&#xA;      --filter-unverified   Only output first unverified result per chunk per detector if there are more than one results.&#xA;      --filter-entropy=FILTER-ENTROPY&#xA;                                 Filter unverified results with Shannon entropy. Start with 3.0.&#xA;      --config=CONFIG            Path to configuration file.&#xA;      --print-avg-detector-time&#xA;                                 Print the average time spent on each detector.&#xA;      --no-update           Don&#39;t check for updates.&#xA;      --fail                Exit with code 183 if results are found.&#xA;      --verifier=VERIFIER ...    Set custom verification endpoints.&#xA;      --custom-verifiers-only   Only use custom verification endpoints.&#xA;      --archive-max-size=ARCHIVE-MAX-SIZE&#xA;                                 Maximum size of archive to scan. (Byte units eg. 512B, 2KB, 4MB)&#xA;      --archive-max-depth=ARCHIVE-MAX-DEPTH&#xA;                                 Maximum depth of archive to scan.&#xA;      --archive-timeout=ARCHIVE-TIMEOUT&#xA;                                 Maximum time to spend extracting an archive.&#xA;      --include-detectors=&#34;all&#34;  Comma separated list of detector types to include. Protobuf name or IDs may be used, as well as ranges.&#xA;      --exclude-detectors=EXCLUDE-DETECTORS&#xA;                                 Comma separated list of detector types to exclude. Protobuf name or IDs may be used, as well as ranges. IDs defined here take precedence over the include list.&#xA;      --version             Show application version.&#xA;  -i, --include-paths=INCLUDE-PATHS&#xA;                                 Path to file with newline separated regexes for files to include in scan.&#xA;  -x, --exclude-paths=EXCLUDE-PATHS&#xA;                                 Path to file with newline separated regexes for files to exclude in scan.&#xA;      --exclude-globs=EXCLUDE-GLOBS&#xA;                                 Comma separated list of globs to exclude in scan. This option filters at the `git log` level, resulting in faster scans.&#xA;      --since-commit=SINCE-COMMIT&#xA;                                 Commit to start scan from.&#xA;      --branch=BRANCH            Branch to scan.&#xA;      --max-depth=MAX-DEPTH      Maximum depth of commits to scan.&#xA;      --bare                Scan bare repository (e.g. useful while using in pre-receive hooks)&#xA;&#xA;Args:&#xA;  &amp;lt;uri&amp;gt;  Git repository URL. https://, file://, or ssh:// schema expected.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to scan a &lt;code&gt;git&lt;/code&gt; repository, start with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;trufflehog git https://github.com/trufflesecurity/trufflehog.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;S3&lt;/h2&gt; &#xA;&lt;p&gt;The S3 source supports assuming IAM roles for scanning in addition to IAM users. This makes it easier for users to scan multiple AWS accounts without needing to rely on hardcoded credentials for each account.&lt;/p&gt; &#xA;&lt;p&gt;The IAM identity that TruffleHog uses initially will need to have &lt;code&gt;AssumeRole&lt;/code&gt; privileges as a principal in the &lt;a href=&#34;https://aws.amazon.com/blogs/security/how-to-use-trust-policies-with-iam-roles/&#34;&gt;trust policy&lt;/a&gt; of each IAM role to assume.&lt;/p&gt; &#xA;&lt;p&gt;To scan a specific bucket using locally set credentials or instance metadata if on an EC2 instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To scan a specific bucket using an assumed role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt; --role-arn=&amp;lt;iam-role-arn&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple roles can be passed as separate arguments. The following command will attempt to scan every bucket each role has permissions to list in the S3 API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --role-arn=&amp;lt;iam-role-arn-1&amp;gt; --role-arn=&amp;lt;iam-role-arn-2&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exit Codes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0: No errors and no results were found.&lt;/li&gt; &#xA; &lt;li&gt;1: An error was encountered. Sources may not have completed scans.&lt;/li&gt; &#xA; &lt;li&gt;183: No errors were encountered, but results were found. Will only be returned if &lt;code&gt;--fail&lt;/code&gt; flag is used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) TruffleHog Github Action&lt;/h2&gt; &#xA;&lt;h3&gt;General Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;on:&#xA;  push:&#xA;    branches:&#xA;      - main&#xA;  pull_request:&#xA;&#xA;jobs:&#xA;  test:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - name: Checkout code&#xA;      uses: actions/checkout@v4&#xA;      with:&#xA;        fetch-depth: 0&#xA;    - name: Secret Scanning&#xA;      uses: trufflesecurity/trufflehog@main&#xA;      with:&#xA;        extra_args: --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example config above, we&#39;re scanning for live secrets in all PRs and Pushes to &lt;code&gt;main&lt;/code&gt;. Only code changes in the referenced commits are scanned. If you&#39;d like to scan an entire branch, please see the &#34;Advanced Usage&#34; section below.&lt;/p&gt; &#xA;&lt;h3&gt;Shallow Cloning&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re incorporating TruffleHog into a standalone workflow and aren&#39;t running any other CI/CD tooling alongside TruffleHog, then we recommend using &lt;a href=&#34;https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt&#34;&gt;Shallow Cloning&lt;/a&gt; to speed up your workflow. Here&#39;s an example for how to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;      - shell: bash&#xA;        run: |&#xA;          if [ &#34;${{ github.event_name }}&#34; == &#34;push&#34; ]; then&#xA;            echo &#34;depth=$(($(jq length &amp;lt;&amp;lt;&amp;lt; &#39;${{ toJson(github.event.commits) }}&#39;) + 2))&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;            echo &#34;branch=${{ github.ref_name }}&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;          fi&#xA;          if [ &#34;${{ github.event_name }}&#34; == &#34;pull_request&#34; ]; then&#xA;            echo &#34;depth=$((${{ github.event.pull_request.commits }}+2))&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;            echo &#34;branch=${{ github.event.pull_request.head.ref }}&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;          fi&#xA;      - uses: actions/checkout@v3&#xA;        with:&#xA;          ref: ${{env.branch}}&#xA;          fetch-depth: ${{env.depth}}&#xA;      - uses: trufflesecurity/trufflehog@main&#xA;        with:&#xA;          extra_args: --only-verified&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on the event type (push or PR), we calculate the number of commits present. Then we add 2, so that we can reference a base commit before our code changes. We pass that integer value to the &lt;code&gt;fetch-depth&lt;/code&gt; flag in the checkout action in addition to the relevant branch. Now our checkout process should be much shorter.&lt;/p&gt; &#xA;&lt;h3&gt;Canary detection&lt;/h3&gt; &#xA;&lt;p&gt;TruffleHog statically detects &lt;a href=&#34;https://canarytokens.org/&#34;&gt;https://canarytokens.org/&lt;/a&gt; and lets you know when they&#39;re present without setting them off. You can learn more here: &lt;a href=&#34;https://trufflesecurity.com/canaries&#34;&gt;https://trufflesecurity.com/canaries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/trufflesecurity/trufflehog/assets/52866392/74ace530-08c5-4eaf-a169-84a73e328f6f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: TruffleHog&#xA;  uses: trufflesecurity/trufflehog@main&#xA;  with:&#xA;    # Repository path&#xA;    path:&#xA;    # Start scanning from here (usually main branch).&#xA;    base:&#xA;    # Scan commits until here (usually dev branch).&#xA;    head: # optional&#xA;    # Extra args to be passed to the trufflehog cli.&#xA;    extra_args: --debug --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to specify specific &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; refs, you can use the &lt;code&gt;base&lt;/code&gt; argument (&lt;code&gt;--since-commit&lt;/code&gt; flag in TruffleHog CLI) and the &lt;code&gt;head&lt;/code&gt; argument (&lt;code&gt;--branch&lt;/code&gt; flag in the TruffleHog CLI). We only recommend using these arguments for very specific use cases, where the default behavior does not work.&lt;/p&gt; &#xA;&lt;h4&gt;Advanced Usage: Scan entire branch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- name: scan-push&#xA;        uses: trufflesecurity/trufflehog@main&#xA;        with:&#xA;          base: &#34;&#34;&#xA;          head: ${{ github.ref_name }}&#xA;          extra_args: --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TruffleHog GitLab CI&lt;/h2&gt; &#xA;&lt;h3&gt;Example Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stages:&#xA;  - security&#xA;&#xA;security-secrets:&#xA;  stage: security&#xA;  allow_failure: false&#xA;  image: alpine:latest&#xA;  variables:&#xA;    SCAN_PATH: &#34;.&#34; # Set the relative path in the repo to scan&#xA;  before_script:&#xA;    - apk add --no-cache git curl jq&#xA;    - curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin&#xA;  script:&#xA;    - trufflehog filesystem &#34;$SCAN_PATH&#34; --only-verified --fail --json | jq&#xA;  rules:&#xA;    - if: &#39;$CI_PIPELINE_SOURCE == &#34;merge_request_event&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example pipeline above, we&#39;re scanning for live secrets in all repository directories and files. This job runs only when the pipeline source is a merge request event, meaning it&#39;s triggered when a new merge request is created.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-commit Hook&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog can be used in a pre-commit hook to prevent credentials from leaking before they ever leave your computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key Usage Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For optimal hook efficacy, execute &lt;code&gt;git add&lt;/code&gt; followed by &lt;code&gt;git commit&lt;/code&gt; separately.&lt;/strong&gt; This ensures TruffleHog analyzes all intended changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Avoid using &lt;code&gt;git commit -am&lt;/code&gt;, as it might bypass pre-commit hook execution for unstaged modifications.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; is provided (see &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit.com&lt;/a&gt; for installation).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;  - repo: local&#xA;    hooks:&#xA;      - id: trufflehog&#xA;        name: TruffleHog&#xA;        description: Detect secrets in your data.&#xA;        entry: bash -c &#39;trufflehog git file://. --since-commit HEAD --only-verified --fail&#39;&#xA;        # For running trufflehog in docker, use the following entry instead:&#xA;        # entry: bash -c &#39;docker run --rm -v &#34;$(pwd):/workdir&#34; -i --rm trufflesecurity/trufflehog:latest git file:///workdir --since-commit HEAD --only-verified --fail&#39;&#xA;        language: system&#xA;        stages: [&#34;commit&#34;, &#34;push&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Regex Detector (alpha)&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog supports detection and verification of custom regular expressions. For detection, at least one &lt;strong&gt;regular expression&lt;/strong&gt; and &lt;strong&gt;keyword&lt;/strong&gt; is required. A &lt;strong&gt;keyword&lt;/strong&gt; is a fixed literal string identifier that appears in or around the regex to be detected. To allow maximum flexibility for verification, a webhook is used containing the regular expression matches.&lt;/p&gt; &#xA;&lt;p&gt;TruffleHog will send a JSON POST request containing the regex matches to a configured webhook endpoint. If the endpoint responds with a &lt;code&gt;200 OK&lt;/code&gt; response status code, the secret is considered verified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; This feature is alpha and subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Regex Detector Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config.yaml&#xA;detectors:&#xA;  - name: HogTokenDetector&#xA;    keywords:&#xA;      - hog&#xA;    regex:&#xA;      hogID: &#39;\b(HOG[0-9A-Z]{17})\b&#39;&#xA;      hogToken: &#39;[^A-Za-z0-9+\/]{0,1}([A-Za-z0-9+\/]{40})[^A-Za-z0-9+\/]{0,1}&#39;&#xA;    verify:&#xA;      - endpoint: http://localhost:8000/&#xA;        # unsafe must be set if the endpoint is HTTP&#xA;        unsafe: true&#xA;        headers:&#xA;          - &#34;Authorization: super secret authorization header&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ trufflehog filesystem /tmp --config config.yaml --only-verified&#xA;🐷🔑🐷  TruffleHog. Unearth your secrets. 🐷🔑🐷&#xA;&#xA;Found verified result 🐷🔑&#xA;Detector Type: CustomRegex&#xA;Decoder Type: PLAIN&#xA;Raw result: HOGAAIUNNWHAHJJWUQYR&#xA;File: /tmp/hog-facts.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data structure sent to the custom verification server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;HogTokenDetector&#34;: {&#xA;        &#34;HogID&#34;: [&#34;HOGAAIUNNWHAHJJWUQYR&#34;],&#xA;        &#34;HogSecret&#34;: [&#34;sD9vzqdSsAOxntjAJ/qZ9sw+8PvEYg0r7D1Hhh0C&#34;],&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verification Server Example (Python)&lt;/h2&gt; &#xA;&lt;p&gt;Unless you run a verification server, secrets found by the custom regex detector will be unverified. Here is an example Python implementation of a verification server for the above &lt;code&gt;config.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;from http.server import BaseHTTPRequestHandler, HTTPServer&#xA;&#xA;AUTH_HEADER = &#39;super secret authorization header&#39;&#xA;&#xA;&#xA;class Verifier(BaseHTTPRequestHandler):&#xA;    def do_GET(self):&#xA;        self.send_response(405)&#xA;        self.end_headers()&#xA;&#xA;    def do_POST(self):&#xA;        try:&#xA;            if self.headers[&#39;Authorization&#39;] != AUTH_HEADER:&#xA;                self.send_response(401)&#xA;                self.end_headers()&#xA;                return&#xA;&#xA;            # read the body&#xA;            length = int(self.headers[&#39;Content-Length&#39;])&#xA;            request = json.loads(self.rfile.read(length))&#xA;            self.log_message(&#34;%s&#34;, request)&#xA;&#xA;            # check the match, you&#39;ll need to implement validateToken, which takes an array of ID&#39;s and Secrets&#xA;            if not validateTokens(request[&#39;HogTokenDetector&#39;][&#39;hogID&#39;], request[&#39;HogTokenDetector&#39;][&#39;hogSecret&#39;]):&#xA;                self.send_response(200)&#xA;                self.end_headers()&#xA;            else:&#xA;                # any other response besides 200&#xA;                self.send_response(406)&#xA;                self.end_headers()&#xA;        except Exception:&#xA;            self.send_response(400)&#xA;            self.end_headers()&#xA;&#xA;&#xA;with HTTPServer((&#39;&#39;, 8000), Verifier) as server:&#xA;    try:&#xA;        server.serve_forever()&#xA;    except KeyboardInterrupt:&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔍&lt;/span&gt; Analyze&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog supports running a deeper analysis of a credential to view its permissions and the resources it has access to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;❤️&lt;/span&gt; Contributors&lt;/h1&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=trufflesecurity/trufflehog&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;span&gt;💻&lt;/span&gt; Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are very welcome! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md&#34;&gt;contribution guidelines first&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We no longer accept contributions to TruffleHog v2, but that code is available in the &lt;code&gt;v2&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new secret detectors&lt;/h2&gt; &#xA;&lt;p&gt;We have published some &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/hack/docs/Adding_Detectors_external.md&#34;&gt;documentation and tooling to get started on adding new secret detectors&lt;/a&gt;. Let&#39;s improve detection together!&lt;/p&gt; &#xA;&lt;h1&gt;Use as a library&lt;/h1&gt; &#xA;&lt;p&gt;Currently, trufflehog is in heavy development and no guarantees can be made on the stability of the public APIs at this time.&lt;/p&gt; &#xA;&lt;h1&gt;License Change&lt;/h1&gt; &#xA;&lt;p&gt;Since v3.0, TruffleHog is released under a AGPL 3 license, included in &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;. TruffleHog v3.0 uses none of the previous codebase, but care was taken to preserve backwards compatibility on the command line interface. The work previous to this release is still available licensed under GPL 2.0 in the history of this repository and the previous package releases and tags. A completed CLA is required for us to accept contributions going forward.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>timescale/pgai</title>
    <updated>2024-11-02T01:28:15Z</updated>
    <id>tag:github.com,2024-11-02:/timescale/pgai</id>
    <link href="https://github.com/timescale/pgai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A suite of tools to develop RAG, semantic search, and other AI applications more easily with PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/images/pgai_logo.png&#34; alt=&#34;pgai&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;pgai allows you to develop RAG, semantic search, and other AI applications directly in PostgreSQL&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/KRdHVXAmkp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join_us_on_Discord-black?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tsdb.co/gh-pgai-signup&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Try_Timescale_for_free-black?style=for-the-badge&amp;amp;logo=timescale&amp;amp;logoColor=white&#34; alt=&#34;Try Timescale for free&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;pgai simplifies the process of building &lt;a href=&#34;https://en.wikipedia.org/wiki/Similarity_search&#34;&gt;search&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Prompt_engineering#Retrieval-augmented_generation&#34;&gt;Retrieval Augmented Generation&lt;/a&gt; (RAG), and other AI applications with PostgreSQL. It complements popular extensions for vector serch in PostgreSQL like pgvector and pgvectorscale, building on top of their capabilities.&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The goal of pgai is to make working with AI easier and more accessible to developers. Because data is the foundation of most AI applications, pgai makes it easier to leverage your data in AI workflows. In particular, pgai supports:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Working with embeddings generated from your data:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically create and sync vector embeddings for your data (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#automatically-create-and-sync-llm-embeddings-for-your-data&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Search your data using vector and semantic search (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#search-your-data-using-vector-and-semantic-search&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Implement Retrieval Augmented Generation inside a single SQL statement (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#implement-retrieval-augmented-generation-inside-a-single-sql-statement&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Perform high-performance, cost-efficient ANN search on large vector workloads with &lt;a href=&#34;https://github.com/timescale/pgvectorscale&#34;&gt;pgvectorscale&lt;/a&gt;, which complements pgvector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Leverage LLMs for data processing tasks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve LLM chat completions from models like Claude Sonnet 3.5, OpenAI GPT4o, Cohere Command, and Llama 3 (via Ollama). (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#usage-of-pgai&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Reason over your data and facilitate use cases like classification, summarization, and data enrichment on your existing relational data in PostgreSQL (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;see an example&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn more about pgai:&lt;/strong&gt; To learn more about the pgai extension and why we built it, read &lt;a href=&#34;http://www.timescale.com/blog/pgai-giving-postgresql-developers-ai-engineering-superpowers&#34;&gt;pgai: Giving PostgreSQL Developers AI Engineering Superpowers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: We welcome contributions to pgai! See the &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Demo: pgai Vectorizer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ZoC2XYol6Zk?si=atI4XPurEifG0pd5&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/8a71c774-505a-4335-8b34-cdea9dedb558&#34; alt=&#34;Auto Create and Sync Vector Embeddings in 1 Line of SQL (pgai Vectorizer)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s how to get started with pgai:&lt;/p&gt; &#xA;&lt;p&gt;For a quick start, try out automatic data embedding using pgai Vectorizer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try our cloud offering by creating a &lt;a href=&#34;https://tsdb.co/gh-pgai-signup&#34;&gt;free trial account&lt;/a&gt; and heading over to our pgai Vectorizer &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;or check out our &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer-quick-start.md&#34;&gt;quick start guide&lt;/a&gt; to get up and running in less than 10 minutes with a self-hosted Postgres instance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For other use cases, first &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#installation&#34;&gt;Install pgai&lt;/a&gt; in Timescale Cloud, a pre-built Docker image, or from source. Then, choose your own adventure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automate AI embedding with &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;pgai Vectorizer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use pgai to integrate AI from your provider. Some examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/ollama.md&#34;&gt;Ollama&lt;/a&gt; - configure pgai for Ollama, then use the model to embed, chat complete and generate.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;OpenAI&lt;/a&gt; - configure pgai for OpenAI, then use the model to tokenize, embed, chat complete and moderate. This page also includes advanced examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/anthropic.md&#34;&gt;Anthropic&lt;/a&gt; - configure pgai for Anthropic, then use the model to generate content.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/cohere.md&#34;&gt;Cohere&lt;/a&gt; - configure pgai for Cohere, then use the model to tokenize, embed, chat complete, classify, and rerank.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Leverage LLMs for data processing tasks such as classification, summarization, and data enrichment (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;see the OpenAI example&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The fastest ways to run PostgreSQL with the pgai extension are to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your database environment. Either:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#use-a-pre-built-docker-container&#34;&gt;Use a pre-built Docker container&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#use-a-timescale-cloud-service&#34;&gt;Use a Timescale Cloud service&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#install-from-source&#34;&gt;Install from source&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;Enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#use-pgai&#34;&gt;Use pgai&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use a pre-built Docker container&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.timescale.com/self-hosted/latest/install/installation-docker/&#34;&gt;Run the TimescaleDB Docker image&lt;/a&gt;, then &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use a Timescale Cloud service&lt;/h3&gt; &#xA;&lt;p&gt;pgai is available for &lt;a href=&#34;https://console.cloud.timescale.com/dashboard/create_services&#34;&gt;new&lt;/a&gt; or existing Timescale Cloud services. For any service, &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;p&gt;To install pgai from source on a PostgreSQL server:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the prerequisite software system-wide&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Python3&lt;/strong&gt;: if running &lt;code&gt;python3 --version&lt;/code&gt; in Terminal returns &lt;code&gt;command not found&lt;/code&gt;, download and install the latest version of &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python3&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pip&lt;/strong&gt;: if running &lt;code&gt;pip --version&lt;/code&gt; in Terminal returns &lt;code&gt;command not found&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Standard installation&lt;/strong&gt;: use one of the pip &lt;a href=&#34;https://pip.pypa.io/en/stable/installation/#supported-methods&#34;&gt;supported methods&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Virtual environment&lt;/strong&gt;: usually, pip is automatically installed if you are working in a &lt;a href=&#34;https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-and-using-virtual-environments&#34;&gt;Python virtual environment&lt;/a&gt;. If you are running PostgreSQL in a virtual environment, pgai requires several python packages. Set the &lt;code&gt;PYTHONPATH&lt;/code&gt; and &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variables before you start your PostgreSQL server.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PYTHONPATH=/path/to/venv/lib/python3.12/site-packages \&#xA;VIRTUAL_ENV=/path/to/venv \&#xA;pg_ctl -D /path/to/data -l logfile start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;PL/Python&lt;/strong&gt;: follow &lt;a href=&#34;https://github.com/postgres-ai/postgres-howtos/raw/main/0047_how_to_install_postgres_16_with_plpython3u.md&#34;&gt;How to install Postgres 16 with plpython3u: Recipes for macOS, Ubuntu, Debian, CentOS, Docker&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;macOS&lt;/em&gt;: the standard PostgreSQL brew in Homebrew does not include the &lt;code&gt;plpython3&lt;/code&gt; extension. These instructions show how to install from an alternate tap.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/smashedtoatoms/asdf-postgres&#34;&gt;Postgresql plugin&lt;/a&gt; for the &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; version manager&lt;/strong&gt;: set the &lt;code&gt;--with-python&lt;/code&gt; option when installing PostgreSQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;POSTGRES_EXTRA_CONFIGURE_OPTIONS=--with-python asdf install postgres 16.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgvector&lt;/strong&gt;: follow the &lt;a href=&#34;https://github.com/pgvector/pgvector?tab=readme-ov-file#installation&#34;&gt;install instructions&lt;/a&gt; from the official repository.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;These extensions are automatically added to your PostgreSQL database when you &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;Enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make this &lt;code&gt;pgai&lt;/code&gt; extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;Enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Enable the pgai extension in your database&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your database with a postgres client like &lt;a href=&#34;https://docs.timescale.com/use-timescale/latest/integrations/query-admin/psql/&#34;&gt;psql v16&lt;/a&gt; or &lt;a href=&#34;https://docs.timescale.com/use-timescale/latest/popsql/&#34;&gt;PopSQL&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -d &#34;postgres://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;database-name&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the pgai extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION IF NOT EXISTS ai CASCADE;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;CASCADE&lt;/code&gt; automatically installs &lt;code&gt;pgvector&lt;/code&gt; and &lt;code&gt;plpython3u&lt;/code&gt; extensions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage of pgai&lt;/h3&gt; &#xA;&lt;p&gt;The main features in pgai are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Working with embeddings generated from your data:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#automatically-create-and-sync-llm-embeddings-for-your-data&#34;&gt;Automatically create and sync vector embeddings for your data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#search-your-data-using-vector-and-semantic-search&#34;&gt;Search your data using vector and semantic search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#implement-retrieval-augmented-generation-inside-a-single-sql-statement&#34;&gt;Implement Retrieval Augmented Generation inside a single SQL statement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Leverage LLMs for data processing tasks:&lt;/strong&gt; You can use pgai to integrate AI from the following providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/ollama.md&#34;&gt;Ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/anthropic.md&#34;&gt;Anthropic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/cohere.md&#34;&gt;Cohere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/ollama.md&#34;&gt;Llama 3 (via Ollama)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn how to &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/moderate.md&#34;&gt;moderate&lt;/a&gt; content directly in the database using triggers and background jobs.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically create and sync LLM embeddings for your data&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;pgvector&lt;/a&gt; and &lt;a href=&#34;https://github.com/timescale/pgvectorscale&#34;&gt;pgvectorscale&lt;/a&gt; extensions allow you to store vector embeddings in your database and perform fast and efficient vector search. The &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;pgai Vectorizer&lt;/a&gt; builds on top of these extensions to automatically create and synchronize embeddings for any text data in your database.&lt;/p&gt; &#xA;&lt;p&gt;With one line of code, you can define a vectorizer that creates embeddings for data in a table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT ai.create_vectorizer( &#xA;    &amp;lt;table_name&amp;gt;::regclass,&#xA;    destination =&amp;gt; &amp;lt;embedding_table_name&amp;gt;,&#xA;    embedding =&amp;gt; ai.embedding_openai(&amp;lt;model_name&amp;gt;, &amp;lt;dimensions&amp;gt;),&#xA;    chunking =&amp;gt; ai.chunking_recursive_character_text_splitter(&amp;lt;column_name&amp;gt;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This newly created vectorizer will automatically track any changes to the data in the source table and update the destination embedding table with the new embeddings asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;Automate AI embedding with pgai Vectorizer&lt;/a&gt; shows you how to implement embeddings in your own data. When you create Vectorizers in a Timescale Cloud database, embeddings are automatically created and synchronized in the background. On a self-hosted Postgres installation, you use a &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer-worker.md&#34;&gt;Vectorizer Worker&lt;/a&gt; to asynchronously processes your vectorizers.&lt;/p&gt; &#xA;&lt;h3&gt;Search your data using vector and semantic search&lt;/h3&gt; &#xA;&lt;p&gt;pgai exposes a set of functions to directly interact with the LLM models through SQL, enabling you to do semantic search directly in your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &#xA;   chunk,&#xA;   embedding &amp;lt;=&amp;gt; ai.openai_embed(&amp;lt;embedding_model&amp;gt;, &#39;some-query&#39;) as distance&#xA;FROM &amp;lt;embedding_table&amp;gt;&#xA;ORDER BY distance&#xA;LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a perfectly normal SQL query. You can combine it with &lt;code&gt;where&lt;/code&gt; clauses and other SQL features to further refine your search. pgai solves the &lt;em&gt;missing where clause in vector search&lt;/em&gt; problem for real.&lt;/p&gt; &#xA;&lt;h3&gt;Implement Retrieval Augmented Generation inside a single SQL statement&lt;/h3&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#search-your-data-using-vector-and-semantic-search&#34;&gt;semantic search&lt;/a&gt;, pgai LLM functions enable you to implement RAG directly in your database. For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a RAG function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE FUNCTION generate_rag_response(query_text TEXT)&#xA;RETURNS TEXT AS $$&#xA;DECLARE&#xA;   context_chunks TEXT;&#xA;   response TEXT;&#xA;BEGIN&#xA;   -- Perform similarity search to find relevant blog posts&#xA;   SELECT string_agg(title || &#39;: &#39; || chunk, &#39; &#39;) INTO context_chunks&#xA;   FROM (&#xA;       SELECT title, chunk&#xA;       FROM blogs_embedding&#xA;       ORDER BY embedding &amp;lt;=&amp;gt; ai.openai_embed(&#39;text-embedding-3-small&#39;, query_text)&#xA;       LIMIT 3&#xA;   ) AS relevant_posts;&#xA;&#xA;   -- Generate a summary using gpt-4o-mini&#xA;   SELECT ai.openai_chat_complete(&#xA;       &#39;gpt-4o-mini&#39;,&#xA;       jsonb_build_array(&#xA;           jsonb_build_object(&#39;role&#39;, &#39;system&#39;, &#39;content&#39;, &#39;You are a helpful assistant. Use only the context provided to answer the question. Also mention the titles of the blog posts you use to answer the question.&#39;),&#xA;           jsonb_build_object(&#39;role&#39;, &#39;user&#39;, &#39;content&#39;, format(&#39;Context: %s\n\nUser Question: %s\n\nAssistant:&#39;, context_chunks, query_text))&#xA;       )&#xA;   )-&amp;gt;&#39;choices&#39;-&amp;gt;0-&amp;gt;&#39;message&#39;-&amp;gt;&amp;gt;&#39;content&#39; INTO response;&#xA;&#xA;   RETURN response;&#xA;END;&#xA;$$ LANGUAGE plpgsql;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute your function in a SQL query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT generate_rag_response(&#39;Give me some startup advice&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;pgai is still at an early stage. Now is a great time to help shape the direction of this project; we are currently deciding priorities. Have a look at the &lt;a href=&#34;https://github.com/timescale/pgai/issues&#34;&gt;list of features&lt;/a&gt; we&#39;re thinking of working on. Feel free to comment, expand the list, or hop on the Discussions forum.&lt;/p&gt; &#xA;&lt;p&gt;To get started, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/CONTRIBUTING.md&#34;&gt;how to contribute&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/DEVELOPMENT.md&#34;&gt;how to set up a dev/test environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Timescale&lt;/h2&gt; &#xA;&lt;p&gt;Timescale is a PostgreSQL database company. To learn more visit the &lt;a href=&#34;https://www.timescale.com&#34;&gt;timescale.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Timescale Cloud is a high-performance, developer focused, cloud platform that provides PostgreSQL services for the most demanding AI, time-series, analytics, and event workloads. Timescale Cloud is ideal for production applications and provides high availability, streaming backups, upgrades over time, roles and permissions, and great security.&lt;/p&gt;</summary>
  </entry>
</feed>