<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-28T01:22:47Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opentffoundation/manifesto</title>
    <updated>2023-08-28T01:22:47Z</updated>
    <id>tag:github.com,2023-08-28:/opentffoundation/manifesto</id>
    <link href="https://github.com/opentffoundation/manifesto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The OpenTF Manifesto expresses concern over HashiCorp&#39;s switch of the Terraform license from open-source to the Business Source License (BSL) and calls for the tool&#39;s return to a truly open-source license.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTF Manifesto&lt;/h1&gt; &#xA;&lt;p&gt;OpenTF&#39;s goal is to ensure Terraform remains truly open source and proposes returning it to a fully open license. We urge HashiCorp to reconsider and switch Terraform back to an open source license, avoiding fragmentation of the community.&lt;/p&gt; &#xA;&lt;p&gt;For further details and the full text of the manifesto, you can visit the &lt;a href=&#34;https://opentf.org&#34;&gt;OpenTF website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions or feedback to share, you can reach the team behind this manifesto by emailing us at &lt;a href=&#34;mailto:pledge@opentf.org&#34;&gt;pledge@opentf.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mehdihadeli/go-ecommerce-microservices</title>
    <updated>2023-08-28T01:22:47Z</updated>
    <id>tag:github.com,2023-08-28:/mehdihadeli/go-ecommerce-microservices</id>
    <link href="https://github.com/mehdihadeli/go-ecommerce-microservices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧺 A practical e-commerce microservices, built with golang, domain-driven design, cqrs, event sourcing, vertical slice architecture, event-driven architecture, and the latest technologies.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧺Go Ecommerce Microservices&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mehdihadeli/go-ecommerce-microservices/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/mehdihadeli/go-ecommerce-microservices/ci.yml?label=CI&amp;amp;logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/go%20version-%3E=1.20-61CFDD.svg?&amp;amp;style=for-the-badge&#34; alt=&#34;Go Version&#34;&gt; &lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Commitizen friendly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/mehdihadeli/go-ecommerce-microservicess&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=for-the-badge&amp;amp;message=Open%20in%20Gitpod&amp;amp;color=222222&amp;amp;logo=Gitpod&amp;amp;logoColor=FFAE33&amp;amp;label=&#34; alt=&#34;Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A practical e-commerce sample, built with Golang and different software architecture and technologies like &lt;strong&gt;Microservices Architecture&lt;/strong&gt;, &lt;strong&gt;Vertical Slice Architecture&lt;/strong&gt; , &lt;strong&gt;CQRS Pattern&lt;/strong&gt;, &lt;strong&gt;Domain Driven Design (DDD)&lt;/strong&gt;, &lt;strong&gt;Event Sourcing&lt;/strong&gt;, &lt;strong&gt;Event Driven Architecture&lt;/strong&gt; and &lt;strong&gt;Dependency Injection&lt;/strong&gt;. For communication between independent services, We use asynchronous messaging with using RabbitMQ, and sometimes we use synchronous communication for real-time communications with using REST and gRPC calls.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can use this project as a template to build your Backend project in the Go language on top of this project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;💡 This application is not &lt;code&gt;business oriented&lt;/code&gt; and my focus is mostly on technical part, I just want to implement a sample with using different technologies, software architecture design, principles and all the thing we need for creating a microservices app.&lt;/p&gt; &#xA;&lt;p&gt;🚀 This Application is &lt;code&gt;in-progress&lt;/code&gt; and I will add new features and technologies over time.&lt;/p&gt; &#xA;&lt;p&gt;For your simplest golang projects, you can use my &lt;code&gt;go-vertical-slice-template&lt;/code&gt; project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mehdihadeli/go-vertical-slice-template&#34;&gt;https://github.com/mehdihadeli/go-vertical-slice-template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more advance projects, with two &lt;code&gt;microservices&lt;/code&gt; and &lt;code&gt;modular monolith architecture&lt;/code&gt;, check the C# version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mehdihadeli/ecommerce-microservices&#34;&gt;https://github.com/mehdihadeli/ecommerce-microservices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mehdihadeli/ecommerce-modular-monolith&#34;&gt;https://github.com/mehdihadeli/ecommerce-modular-monolith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Vertical Slice Architecture&lt;/code&gt; as a high level architecture&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Event Driven Architecture&lt;/code&gt; on top of RabbitMQ Message Broker with a custom &lt;a href=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/pkg/messaging/bus/&#34;&gt;Event Bus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Data Centeric Architecture&lt;/code&gt; based on CRUD in &lt;a href=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/services/catalogs/read_service/&#34;&gt;Catalogs Read Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Event Sourcing&lt;/code&gt; in &lt;code&gt;Audit Based&lt;/code&gt; services like &lt;a href=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/services/orders/&#34;&gt;Orders Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;CQRS Pattern&lt;/code&gt; and &lt;code&gt;Mediator Pattern&lt;/code&gt;on top of &lt;a href=&#34;https://github.com/mehdihadeli/Go-MediatR&#34;&gt;Go-MediatR&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Dependency Injection&lt;/code&gt; and &lt;code&gt;Inversion of Control&lt;/code&gt;on top of &lt;a href=&#34;https://github.com/uber-go/fx&#34;&gt;uber-go/fx&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;✅ Using RESTFul api with &lt;a href=&#34;https://github.com/labstack/echo&#34;&gt;Echo&lt;/a&gt; framework and using swagger with &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;swaggo/swag&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;✅ Using gRpc for internal service communication&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;a href=&#34;https://github.com/go-playground/validator&#34;&gt;go-playground/validator&lt;/a&gt; for validating input data in the REST and gRpc&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Postgres&lt;/code&gt; and &lt;code&gt;EventStoreDB&lt;/code&gt; for write databases with fully supports transactions(ACID)&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;MongoDB&lt;/code&gt; and &lt;code&gt;Elastic Search&lt;/code&gt; for read databases (NOSQL)&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;OpenTelemetry&lt;/code&gt; for collection &lt;code&gt;Distributed Tracing&lt;/code&gt; with using Jaeger and Zipkin&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;OpenTelemetry&lt;/code&gt; for collection &lt;code&gt;Metrics&lt;/code&gt; with using Prometheus and Grafana&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Unit Test&lt;/code&gt; for testing small units with mocking dependent classes and using &lt;a href=&#34;https://github.com/vektra/mockery&#34;&gt;Mockery&lt;/a&gt; for mocking dependencies&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;End2End Test&lt;/code&gt; and &lt;code&gt;Integration Test&lt;/code&gt; for testing features with all of their real dependeinces using docker containers (cleanup tests) and &lt;a href=&#34;https://github.com/testcontainers/testcontainers-go&#34;&gt;testcontainers-go&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Zap&lt;/code&gt; and structured logging&lt;/li&gt; &#xA; &lt;li&gt;✅ Using &lt;code&gt;Viper&lt;/code&gt; for configuration management&lt;/li&gt; &#xA; &lt;li&gt;✅ Using docker and &lt;code&gt;docker-compose&lt;/code&gt; for deployment&lt;/li&gt; &#xA; &lt;li&gt;🚧 Using &lt;code&gt;Domain Driven Design&lt;/code&gt; in some of services like &lt;a href=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/services/catalogs/write_service/&#34;&gt;Catalogs Write Service&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/services/catalogs/orders/&#34;&gt;Orders Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚧 Using &lt;code&gt;Helm&lt;/code&gt; and &lt;code&gt;Kubernetes&lt;/code&gt; for deployment&lt;/li&gt; &#xA; &lt;li&gt;🚧 Using &lt;code&gt;Outbox Pattern&lt;/code&gt; for all microservices for &lt;a href=&#34;https://www.enterpriseintegrationpatterns.com/GuaranteedMessaging.html&#34;&gt;Guaranteed Delivery&lt;/a&gt; or &lt;a href=&#34;https://www.cloudcomputingpatterns.org/at_least_once_delivery/&#34;&gt;At-least-once Delivery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚧 Using &lt;code&gt;Inbox Pattern&lt;/code&gt; for handling &lt;a href=&#34;https://www.cloudcomputingpatterns.org/idempotent_processor/&#34;&gt;Idempotency&lt;/a&gt; in reciver side and &lt;a href=&#34;https://www.cloudcomputingpatterns.org/exactly_once_delivery/&#34;&gt;Exactly-once Delivery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technologies - Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/labstack/echo&#34;&gt;&lt;code&gt;labstack/echo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - High performance, minimalist Go web framework&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;&lt;code&gt;uber-go/zap&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Blazing fast, structured, leveled logging in Go.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/emperror/errors&#34;&gt;&lt;code&gt;emperror/errors&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Drop-in replacement for the standard library errors package and github.com/pkg/errors&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go/&#34;&gt;&lt;code&gt;open-telemetry/opentelemetry-go&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - OpenTelemetry Go API and SDK&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-go-contrib&#34;&gt;&lt;code&gt;open-telemetry/opentelemetry-go-contrib&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Collection of extensions for OpenTelemetry-Go.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/rabbitmq/amqp091-go&#34;&gt;&lt;code&gt;rabbitmq/amqp091-go&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - An AMQP 0-9-1 Go client maintained by the RabbitMQ team. Originally by @streadway: &lt;code&gt;streadway/amqp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;&lt;code&gt;stretchr/testify&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A toolkit with common assertions and mocks that plays nicely with the standard library&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/mehdihadeli/go-mediatr&#34;&gt;&lt;code&gt;mehdihadeli/go-mediatr&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Mediator pattern implementation in Golang and helpful in creating CQRS based applications.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware&#34;&gt;&lt;code&gt;grpc-ecosystem/go-grpc-middleware&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Golang gRPC Middlewares: interceptor chaining, auth, logging, retries and more&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;&lt;code&gt;grpc/grpc-go&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The Go language implementation of gRPC. HTTP/2 based RPC&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/elastic/go-elasticsearch&#34;&gt;&lt;code&gt;elastic/go-elasticsearch&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The official Go client for Elasticsearch&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/avast/retry-go&#34;&gt;&lt;code&gt;avast/retry-go&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Simple golang library for retry mechanism&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/ahmetb/go-linq&#34;&gt;&lt;code&gt;ahmetb/go-linq&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - .NET LINQ capabilities in Go&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/EventStore/EventStore-Client-Go&#34;&gt;&lt;code&gt;EventStore/EventStore-Client-Go&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Go Client for Event Store version 20 and above.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/olivere/elastic/v7&#34;&gt;&lt;code&gt;olivere/elastic/v7&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Deprecated: Use the official Elasticsearch client for Go at&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;&lt;code&gt;swaggo/swag&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Automatically generate RESTful API documentation with Swagger 2.0 for Go.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/github.com/prometheus/client_golang&#34;&gt;&lt;code&gt;prometheus/client_golang&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Prometheus instrumentation library for Go applications&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/mongodb/mongo-go-driver&#34;&gt;&lt;code&gt;mongodb/mongo-go-driver&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The Go driver for MongoDB&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/go-redis/redis&#34;&gt;&lt;code&gt;go-redis/redis&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Type-safe Redis client for Golang&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/go-gorm/gorm&#34;&gt;&lt;code&gt;go-gorm/gorm&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The fantastic ORM library for Golang, aims to be developer friendly&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/go-playground/validator&#34;&gt;&lt;code&gt;go-playground/validator&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;&lt;code&gt;spf13/viper&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Go configuration with fangs&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/caarlos0/env&#34;&gt;&lt;code&gt;caarlos0/env&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A simple and zero-dependencies library to parse environment variables into structs.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/joho/godotenv&#34;&gt;&lt;code&gt;joho/godotenv&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A Go port of Ruby&#39;s dotenv library (Loads environment variables from .env files)&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/mcuadros/go-defaults&#34;&gt;&lt;code&gt;mcuadros/go-defaults&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Go structures with default values using tags&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/uber-go/fx&#34;&gt;&lt;code&gt;uber-go/fx&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A dependency injection based application framework for Go.&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;strong&gt;&lt;a href=&#34;https://github.com/testcontainers/testcontainers-go&#34;&gt;&lt;code&gt;testcontainers/testcontainers-go&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Testcontainers for Go is a Go package that makes it simple to create and clean up container-based dependencies for automated integration/smoke tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Layout and Structure&lt;/h2&gt; &#xA;&lt;p&gt;Each microservices are based on these projects structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golang-standards/project-layout&#34;&gt;Standard Go Project Layout&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/assets/system-architecture-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Application Structure&lt;/h2&gt; &#xA;&lt;p&gt;In this project I used &lt;a href=&#34;https://jimmybogard.com/vertical-slice-architecture/&#34;&gt;vertical slice architecture&lt;/a&gt; or &lt;a href=&#34;https://codeopinion.com/restructuring-to-a-vertical-slice-architecture/&#34;&gt;Restructuring to a Vertical Slice Architecture&lt;/a&gt; also I used &lt;a href=&#34;http://www.kamilgrzybek.com/design/feature-folders/&#34;&gt;feature folder structure&lt;/a&gt; in this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We treat each request as a distinct use case or slice, encapsulating and grouping all concerns from front-end to back.&lt;/li&gt; &#xA; &lt;li&gt;When We adding or changing a feature in an application in n-tire architecture, we are typically touching many different &#34;layers&#34; in an application. we are changing the user interface, adding fields to models, modifying validation, and so on. Instead of coupling across a layer, we couple vertically along a slice and each change affects only one slice.&lt;/li&gt; &#xA; &lt;li&gt;We &lt;code&gt;Minimize coupling&lt;/code&gt; &lt;code&gt;between slices&lt;/code&gt;, and &lt;code&gt;maximize coupling&lt;/code&gt; &lt;code&gt;in a slice&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;With this approach, each of our vertical slices can decide for itself how to best fulfill the request. New features only add code, we&#39;re not changing shared code and worrying about side effects. For implementing vertical slice architecture using cqrs pattern is a good match.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/assets/vertical-slice-architecture.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/assets/vsa2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also here I used &lt;a href=&#34;https://www.eventecommerce.com/cqrs-pattern&#34;&gt;CQRS&lt;/a&gt; for decompose my features to very small parts that makes our application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;maximize performance, scalability and simplicity.&lt;/li&gt; &#xA; &lt;li&gt;adding new feature to this mechanism is very easy without any breaking change in other part of our codes. New features only add code, we&#39;re not changing shared code and worrying about side effects.&lt;/li&gt; &#xA; &lt;li&gt;easy to maintain and any changes only affect on one command or query (or a slice) and avoid any breaking changes on other parts&lt;/li&gt; &#xA; &lt;li&gt;it gives us better separation of concerns and cross cutting concern (with help of MediatR behavior pipelines) in our code instead of a big service class for doing a lot of things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With using &lt;a href=&#34;https://event-driven.io/en/cqrs_facts_and_myths_explained/&#34;&gt;CQRS&lt;/a&gt;, our code will be more aligned with &lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID&#34;&gt;SOLID principles&lt;/a&gt;, especially with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Single-responsibility_principle&#34;&gt;Single Responsibility&lt;/a&gt; rule - because logic responsible for a given operation is enclosed in its own type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle&#34;&gt;Open-Closed&lt;/a&gt; rule - because to add new operation you don’t need to edit any of the existing types, instead you need to add a new file with a new type representing that operation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here instead of some &lt;a href=&#34;http://www.kamilgrzybek.com/design/feature-folders/&#34;&gt;Technical Splitting&lt;/a&gt; for example a folder or layer for our &lt;code&gt;services&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt; and &lt;code&gt;data models&lt;/code&gt; which increase dependencies between our technical splitting and also jump between layers or folders, We cut each business functionality into some vertical slices, and inner each of these slices we have &lt;a href=&#34;http://www.kamilgrzybek.com/design/feature-folders/&#34;&gt;Technical Folders Structure&lt;/a&gt; specific to that feature (command, handlers, infrastructure, repository, controllers, data models, ...).&lt;/p&gt; &#xA;&lt;p&gt;Usually, when we work on a given functionality we need some technical things for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API endpoint (Controller)&lt;/li&gt; &#xA; &lt;li&gt;Request Input (Dto)&lt;/li&gt; &#xA; &lt;li&gt;Request Output (Dto)&lt;/li&gt; &#xA; &lt;li&gt;Some class to handle Request, For example Command and Command Handler or Query and Query Handler&lt;/li&gt; &#xA; &lt;li&gt;Data Model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now we could all of these things beside each other and it decrease jumping and dependencies between some layers or folders.&lt;/p&gt; &#xA;&lt;p&gt;Keeping such a split works great with CQRS. It segregates our operations and slices the application code vertically instead of horizontally. In Our CQRS pattern each command/query handler is a separate slice. This is where you can reduce coupling between layers. Each handler can be a separated code unit, even copy/pasted. Thanks to that, we can tune down the specific method to not follow general conventions (e.g. use custom SQL query or even different storage). In a traditional layered architecture, when we change the core generic mechanism in one layer, it can impact all methods.&lt;/p&gt; &#xA;&lt;h3&gt;Catalogs Service Structure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/assets/catalogs-service.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;High Level Structure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mehdihadeli/go-ecommerce-microservices/main/assets/high-level.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;For formatting, I used &lt;a href=&#34;https://github.com/mvdan/gofumpt&#34;&gt;mvdan/gofumpt&lt;/a&gt;, &lt;a href=&#34;https://github.com/segmentio/golines&#34;&gt;golines&lt;/a&gt; and &lt;a href=&#34;https://golangci-lint.run/usage/integrations/#goland&#34;&gt;golangci-lint&lt;/a&gt; in my GoLand. you can do this formatting automatically by &lt;a href=&#34;https://github.com/mvdan/gofumpt#goland&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Live Reloading In Development&lt;/h2&gt; &#xA;&lt;p&gt;For live reloading in dev mode I use &lt;a href=&#34;https://github.com/cosmtrek/air&#34;&gt;air&lt;/a&gt; library. for guid about using this tools you can &lt;a href=&#34;https://mainawycliffe.dev/blog/live-reloading-golang-using-air/&#34;&gt;read this article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For running each microservice in &lt;code&gt;live reload mode&lt;/code&gt;, inner each service folder type bellow command after &lt;a href=&#34;https://github.com/cosmtrek/air?ref=content.mainawycliffe.dev#via-go-install&#34;&gt;installing air&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;air&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;The application is in development status. You are feel free to submit pull request or create the issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is under &lt;a href=&#34;https://github.com/mehdihadeli/go-ecommerce-microservices/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AleksK1NG/Go-CQRS-Kafka-gRPC-Microservices&#34;&gt;https://github.com/AleksK1NG/Go-CQRS-Kafka-gRPC-Microservices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example&#34;&gt;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kgrzybek/modular-monolith-with-ddd&#34;&gt;https://github.com/kgrzybek/modular-monolith-with-ddd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbogard/ContosoUniversityDotNetCore-Pages&#34;&gt;https://github.com/jbogard/ContosoUniversityDotNetCore-Pages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/python-in-excel</title>
    <updated>2023-08-28T01:22:47Z</updated>
    <id>tag:github.com,2023-08-28:/microsoft/python-in-excel</id>
    <link href="https://github.com/microsoft/python-in-excel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python in Microsoft Excel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python in Excel&lt;/h1&gt; &#xA;&lt;p&gt;Python in Excel is a new feature that allows you to natively combine Python and Excel analytics within the same workbook. With Python in Excel, you can type Python code directly into a cell, the Python calculations run in the Microsoft Cloud, and your results are returned to the worksheet, including plots and visualizations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/python-in-excel/assets/3476087/24dce9a3-a220-4c18-b5e1-f9fd4223b1f6&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python in Excel leverages Anaconda Distribution for Python running in Azure, which includes the most popular Python libraries (e.g. pandas, Matplotlib, scikit-learn, etc.), and is securely built, tested, and supported by Anaconda. Python code used by Excel runs on the Microsoft Cloud with enterprise-level security as a compliant Microsoft 365 connected experience. The Python code runs in its own hypervisor isolated container using Azure Container Instances and secure, source-built packages from Anaconda through a secure software supply chain.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started with Python in Excel&lt;/h2&gt; &#xA;&lt;p&gt;Python in Excel is currently available to users running the Office Beta Channel on Windows with access to a &lt;a href=&#34;https://www.microsoft365.com/&#34;&gt;Microsoft 365 subscription&lt;/a&gt;. This feature will roll out to Excel for Windows first, starting with build 16.0.16818.2000, and then to the other platforms at a later date.&lt;/p&gt; &#xA;&lt;p&gt;Don’t have it yet? It’s probably us, not you. Features are released over time to ensure things are working smoothly. We highlight features that you may not have because they’re slowly releasing to larger numbers of Insiders. Sometimes we remove elements for further improvement based on your feedback. Though this is rare, we also reserve the option to pull a feature entirely out of the product even if you, as an Insider, have had the opportunity to try it.&lt;/p&gt; &#xA;&lt;p&gt;While Python in Excel is in Preview you will be able to use this feature as part of your subscription. After the Preview, you will need to purchase an additional license to use it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://insider.microsoft365.com/en-us/join/windows&#34;&gt;Join the Microsoft 365 Insider Program to get setup for Python in Excel access.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-365/profile?source=python&#34;&gt;Sign up to be notified about future availability for Python in Excel.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to provide feedback&lt;/h2&gt; &#xA;&lt;p&gt;Please log any issues or provide feedback by opening a new Issue on this repository.&lt;/p&gt; &#xA;&lt;h2&gt;How to learn more&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more about how to use Python in Excel by visiting the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://techcommunity.microsoft.com/t5/excel-blog/announcing-python-in-excel-combining-the-power-of-python-and-the/ba-p/3893439&#34;&gt;Python in Excel blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/en-us/office/getting-started-with-python-in-excel-a33fbcbe-065b-41d3-82cf-23d05397f53d&#34;&gt;Getting started with Python in Excel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anaconda.com/excel&#34;&gt;Learn more about the Anaconda Distribution for Python used by Python in Excel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/office/data-security-and-python-in-excel-33cc88a4-4a87-485e-9ff9-f35958278327&#34;&gt;Learn more about our Data Security for Python in Excel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
</feed>