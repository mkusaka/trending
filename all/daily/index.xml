<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T01:34:39Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WerWolv/ImHex</title>
    <updated>2022-07-28T01:34:39Z</updated>
    <id>tag:github.com,2022-07-28:/WerWolv/ImHex</id>
    <link href="https://github.com/WerWolv/ImHex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üîç A Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://imhex.werwolv.net&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://imhex.werwolv.net&#34;&gt;&lt;span&gt;üîç&lt;/span&gt; ImHex&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;&#39;Build&#39; workflow Status&#34; href=&#34;https://github.com/WerWolv/ImHex/actions?query=workflow%3ABuild&#34;&gt;&lt;img alt=&#34;&#39;Build&#39; workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/WerWolv/ImHex/Build?longCache=true&amp;amp;style=for-the-badge&amp;amp;label=Build&amp;amp;logoColor=fff&amp;amp;logo=GitHub%20Actions&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Discord Server&#34; href=&#34;https://discord.gg/X63jZ36xBY&#34;&gt;&lt;img alt=&#34;Discord Server&#34; src=&#34;https://img.shields.io/discord/789833418631675954?label=Discord&amp;amp;logo=Discord&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Total Downloads&#34; href=&#34;https://github.com/WerWolv/ImHex/releases/latest&#34;&gt;&lt;img alt=&#34;Total Downloads&#34; src=&#34;https://img.shields.io/github/downloads/WerWolv/ImHex/total?longCache=true&amp;amp;style=for-the-badge&amp;amp;label=Downloads&amp;amp;logoColor=fff&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Supporting&lt;/h2&gt; &#xA;&lt;p&gt;If you like my work, please consider supporting me on GitHub Sponsors, Patreon or PayPal. Thanks a lot!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/WerWolv&#34;&gt;&lt;img src=&#34;https://werwolv.net/assets/github_banner.png&#34; alt=&#34;GitHub donate button&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/werwolv&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button.png&#34; alt=&#34;Patreon donate button&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://werwolv.net/donate&#34;&gt;&lt;img src=&#34;https://werwolv.net/assets/paypal_banner.png&#34; alt=&#34;PayPal donate button&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10835354/139717326-8044769d-527b-4d88-8adf-2d4ecafdca1f.png&#34; alt=&#34;Hex editor, patterns and data information&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10835354/139717323-1f8c9d52-f7eb-4f43-9f11-097ac728ed6c.png&#34; alt=&#34;Bookmarks, disassembler and data processor&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Featureful hex view &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Byte patching&lt;/li&gt; &#xA;   &lt;li&gt;Patch management&lt;/li&gt; &#xA;   &lt;li&gt;Copy bytes as feature &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Bytes&lt;/li&gt; &#xA;     &lt;li&gt;Hex string&lt;/li&gt; &#xA;     &lt;li&gt;C, C++, C#, Rust, Python, Java &amp;amp; JavaScript array&lt;/li&gt; &#xA;     &lt;li&gt;ASCII-Art hex view&lt;/li&gt; &#xA;     &lt;li&gt;HTML self-contained div&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;String and hex search&lt;/li&gt; &#xA;   &lt;li&gt;Colorful highlighting&lt;/li&gt; &#xA;   &lt;li&gt;Goto from start, end and current cursor position&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom C++-like pattern language for parsing highlighting a file&#39;s content &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic loading based on MIME type&lt;/li&gt; &#xA;   &lt;li&gt;arrays, pointers, structs, unions, enums, bitfields, namespaces, little and big endian support, conditionals and much more!&lt;/li&gt; &#xA;   &lt;li&gt;Useful error messages, syntax highlighting and error marking&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data importing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Base64 files&lt;/li&gt; &#xA;   &lt;li&gt;IPS and IPS32 patches&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data exporting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;IPS and IPS32 patches&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data inspector allowing interpretation of data as many different types (little and big endian)&lt;/li&gt; &#xA; &lt;li&gt;Huge file support with fast and efficient loading&lt;/li&gt; &#xA; &lt;li&gt;String search &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copying of strings&lt;/li&gt; &#xA;   &lt;li&gt;Copying of demangled strings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;File hashing support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CRC16 and CRC32 with custom initial values and polynomials&lt;/li&gt; &#xA;   &lt;li&gt;MD4, MD5&lt;/li&gt; &#xA;   &lt;li&gt;SHA-1, SHA-224, SHA-256, SHA-384, SHA-512&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Disassembler supporting many architectures (frontend for Capstone) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ARM32 (ARM, Thumb, Cortex-M, AArch32)&lt;/li&gt; &#xA;   &lt;li&gt;ARM64&lt;/li&gt; &#xA;   &lt;li&gt;MIPS (MIPS32, MIPS64, MIPS32R6, Micro)&lt;/li&gt; &#xA;   &lt;li&gt;x86 (16-bit, 32-bit, 64-bit)&lt;/li&gt; &#xA;   &lt;li&gt;PowerPC (32-bit, 64-bit)&lt;/li&gt; &#xA;   &lt;li&gt;SPARC&lt;/li&gt; &#xA;   &lt;li&gt;IBM SystemZ&lt;/li&gt; &#xA;   &lt;li&gt;xCORE&lt;/li&gt; &#xA;   &lt;li&gt;M68K&lt;/li&gt; &#xA;   &lt;li&gt;TMS320C64X&lt;/li&gt; &#xA;   &lt;li&gt;M680X&lt;/li&gt; &#xA;   &lt;li&gt;Ethereum&lt;/li&gt; &#xA;   &lt;li&gt;RISC-V&lt;/li&gt; &#xA;   &lt;li&gt;WebAssembly&lt;/li&gt; &#xA;   &lt;li&gt;MOS565XX&lt;/li&gt; &#xA;   &lt;li&gt;Berkeley Packet Filter&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bookmarks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Region highlighting&lt;/li&gt; &#xA;   &lt;li&gt;Comments&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data Analyzer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;File magic-based file parser and MIME type database&lt;/li&gt; &#xA;   &lt;li&gt;Byte distribution graph&lt;/li&gt; &#xA;   &lt;li&gt;Entropy graph&lt;/li&gt; &#xA;   &lt;li&gt;Highest and average entropy&lt;/li&gt; &#xA;   &lt;li&gt;Encrypted / Compressed file detection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in Content Store &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download all files found in the database directly from within ImHex&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Yara Rules support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Quickly scan a file for vulnerabilities with official yara rules&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Helpful tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Itanium and MSVC demangler&lt;/li&gt; &#xA;   &lt;li&gt;ASCII table&lt;/li&gt; &#xA;   &lt;li&gt;Regex replacer&lt;/li&gt; &#xA;   &lt;li&gt;Mathematical expression evaluator (Calculator)&lt;/li&gt; &#xA;   &lt;li&gt;Hexadecimal Color picker&lt;/li&gt; &#xA;   &lt;li&gt;Base converter&lt;/li&gt; &#xA;   &lt;li&gt;UNIX Permissions calculator&lt;/li&gt; &#xA;   &lt;li&gt;Anonfiles File upload tool&lt;/li&gt; &#xA;   &lt;li&gt;Wikipedia term definition finder&lt;/li&gt; &#xA;   &lt;li&gt;File utilities &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;File splitter&lt;/li&gt; &#xA;     &lt;li&gt;File combiner&lt;/li&gt; &#xA;     &lt;li&gt;File shredder&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in cheat sheet for pattern language and Math evaluator&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t burn out your retinas when used in late-night sessions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pattern Language&lt;/h2&gt; &#xA;&lt;p&gt;The custom C-like Pattern Language developed and used by ImHex is easy to read, understand and learn. A guide with all features of the language can be found &lt;a href=&#34;http://imhex.werwolv.net/docs&#34;&gt;on the docs page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Database&lt;/h2&gt; &#xA;&lt;p&gt;For format patterns, includable libraries magic and constant files, check out the &lt;a href=&#34;https://github.com/WerWolv/ImHex-Patterns&#34;&gt;ImHex-Patterns&lt;/a&gt; repository. Feel free to PR your own files there as well!&lt;/p&gt; &#xA;&lt;h2&gt;Plugin development&lt;/h2&gt; &#xA;&lt;p&gt;To develop plugins for ImHex, use one of the following two templates projects to get started. You then have access to the entirety of libimhex as well as the ImHex API and the Content Registry to interact with ImHex or to add new content.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WerWolv/ImHex-Cpp-Plugin-Template&#34;&gt;C++ Plugin Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WerWolv/ImHex-Rust-Plugin-Template&#34;&gt;Rust Plugin Template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nightly builds&lt;/h2&gt; &#xA;&lt;p&gt;Nightlies are available via GitHub Actions &lt;a href=&#34;https://github.com/WerWolv/ImHex/actions?query=workflow%3ABuild&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows ‚Ä¢ &lt;strong&gt;x86_64&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nightly.link/WerWolv/ImHex/workflows/build/master/Windows%20Installer.zip&#34;&gt;Installer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nightly.link/WerWolv/ImHex/workflows/build/master/Windows%20Portable%20ZIP.zip&#34;&gt;Portable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MacOS ‚Ä¢ &lt;strong&gt;x86_64&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nightly.link/WerWolv/ImHex/workflows/build/master/macOS%20DMG.zip&#34;&gt;DMG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux ‚Ä¢ &lt;strong&gt;x86_64&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nightly.link/WerWolv/ImHex/workflows/build/master/Linux%20DEB.zip&#34;&gt;DEB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nightly.link/WerWolv/ImHex/workflows/build/master/Linux%20AppImage.zip&#34;&gt;AppImage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nightly.link/WerWolv/ImHex/workflows/build/master/ArchLinux%20.pkg.tar.zst.zip&#34;&gt;Arch Package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;To compile ImHex, a C++20 compiler is required. Releases are all mainly built using GCC, however on macOS, clang is also required to compile some ObjC code.&lt;/p&gt; &#xA;&lt;p&gt;Many dependencies are bundled into the repository using submodules so make sure to clone it using the &lt;code&gt;--recurse-submodules&lt;/code&gt; option. All dependencies that aren&#39;t bundled, can be installed using the dependency installer scripts found in the &lt;code&gt;/dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Thog&#34;&gt;Mary&lt;/a&gt; for her immense help porting ImHex to MacOS and help during development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Roblabla&#34;&gt;Roblabla&lt;/a&gt; for adding MSI Installer support to ImHex&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jam1garner&#34;&gt;jam1garner&lt;/a&gt; and &lt;a href=&#34;https://github.com/raytwo&#34;&gt;raytwo&lt;/a&gt; for their help with adding Rust support to plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mailaender&#34;&gt;Mailaender&lt;/a&gt; for getting ImHex onto Flathub&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iTrooz&#34;&gt;iTrooz&lt;/a&gt; for many improvements related to release packaging and the GitHub Action runners.&lt;/li&gt; &#xA; &lt;li&gt;Everybody else who has reported issues on Discord or GitHub that I had great conversations with :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks a lot to ocornut for their amazing &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt; which is used for building the entire interface &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thanks to ocornut as well for their hex editor view used as base for this project.&lt;/li&gt; &#xA;   &lt;li&gt;Thanks to BalazsJako for their incredible &lt;a href=&#34;https://github.com/BalazsJako/ImGuiColorTextEdit&#34;&gt;ImGuiColorTextEdit&lt;/a&gt; used for the pattern language syntax highlighting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Thanks to nlohmann for their &lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;json&lt;/a&gt; library used for project files&lt;/li&gt; &#xA; &lt;li&gt;Thanks to aquynh for &lt;a href=&#34;https://github.com/aquynh/capstone&#34;&gt;capstone&lt;/a&gt; which is the base of the disassembly window&lt;/li&gt; &#xA; &lt;li&gt;Thanks to vitaut for their &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;libfmt&lt;/a&gt; library which makes formatting and logging so much better&lt;/li&gt; &#xA; &lt;li&gt;Thanks to rxi for &lt;a href=&#34;https://github.com/rxi/microtar&#34;&gt;microtar&lt;/a&gt; used for extracting downloaded store assets&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Asabeneh/30-Days-Of-Python</title>
    <updated>2022-07-28T01:34:39Z</updated>
    <id>tag:github.com,2022-07-28:/Asabeneh/30-Days-Of-Python</id>
    <link href="https://github.com/Asabeneh/30-Days-Of-Python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üêç 30 Days Of Python&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;# Day&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Topics&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/readme.md&#34;&gt;Introduction&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Variables, Built-in Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/03_Day_Operators/03_operators.md&#34;&gt;Operators&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/04_Day_Strings/04_strings.md&#34;&gt;Strings&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/05_Day_Lists/05_lists.md&#34;&gt;Lists&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/06_Day_Tuples/06_tuples.md&#34;&gt;Tuples&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/07_Day_Sets/07_sets.md&#34;&gt;Sets&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/08_Day_Dictionaries/08_dictionaries.md&#34;&gt;Dictionaries&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/09_Day_Conditionals/09_conditionals.md&#34;&gt;Conditionals&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/10_Day_Loops/10_loops.md&#34;&gt;Loops&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/11_Day_Functions/11_functions.md&#34;&gt;Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/12_Day_Modules/12_modules.md&#34;&gt;Modules&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/13_Day_List_comprehension/13_list_comprehension.md&#34;&gt;List Comprehension&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/14_Day_Higher_order_functions/14_higher_order_functions.md&#34;&gt;Higher Order Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/15_Day_Python_type_errors/15_python_type_errors.md&#34;&gt;Python Type Errors&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/16_Day_Python_date_time/16_python_datetime.md&#34;&gt;Python Date time&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/17_Day_Exception_handling/17_exception_handling.md&#34;&gt;Exception Handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/18_Day_Regular_expressions/18_regular_expressions.md&#34;&gt;Regular Expressions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/19_Day_File_handling/19_file_handling.md&#34;&gt;File Handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/20_Day_Python_package_manager/20_python_package_manager.md&#34;&gt;Python Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/21_Day_Classes_and_objects/21_classes_and_objects.md&#34;&gt;Classes and Objects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/22_Day_Web_scraping/22_web_scraping.md&#34;&gt;Web Scraping&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/23_Day_Virtual_environment/23_virtual_environment.md&#34;&gt;Virtual Environment&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/24_Day_Statistics/24_statistics.md&#34;&gt;Statistics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/25_Day_Pandas/25_pandas.md&#34;&gt;Pandas&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/26_Day_Python_web/26_python_web.md&#34;&gt;Python web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/27_Day_Python_with_mongodb/27_python_with_mongodb.md&#34;&gt;Python with MongoDB&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/28_Day_API/28_API.md&#34;&gt;API&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/29_Day_Building_API/29_building_API.md&#34;&gt;Building API&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/30_Day_Conclusions/30_conclusions.md&#34;&gt;Conclusions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;üß°üß°üß° HAPPY CODING üß°üß°üß°&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/asabeneh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/paypal_lg.png&#34; alt=&#34;Paypal Logo&#34; style=&#34;width:10%&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 30 Days Of Python: Day 1 - Introduction&lt;/h1&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://www.linkedin.com/in/asabeneh/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://twitter.com/Asabeneh&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/asabeneh?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&#34;https://www.linkedin.com/in/asabeneh/&#34; target=&#34;_blank&#34;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; Second Edition: July, 2021&lt;/small&gt; &lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/30DaysOfPython_banner3@2x.png&#34; alt=&#34;30DaysOfPython&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-30-days-of-python&#34;&gt;üêç 30 Days Of Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-day-1&#34;&gt;üìò Day 1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#welcome&#34;&gt;Welcome&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#why-python-&#34;&gt;Why Python ?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#environment-setup&#34;&gt;Environment Setup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-python&#34;&gt;Installing Python&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-shell&#34;&gt;Python Shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-visual-studio-code&#34;&gt;Installing Visual Studio Code&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#how-to-use-visual-studio-code&#34;&gt;How to use visual studio code&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#basic-python&#34;&gt;Basic Python&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-syntax&#34;&gt;Python Syntax&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-indentation&#34;&gt;Python Indentation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#data-types&#34;&gt;Data types&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#number&#34;&gt;Number&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#string&#34;&gt;String&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#booleans&#34;&gt;Booleans&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#list&#34;&gt;List&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#dictionary&#34;&gt;Dictionary&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#tuple&#34;&gt;Tuple&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#set&#34;&gt;Set&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#checking-data-types&#34;&gt;Checking Data types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-file&#34;&gt;Python File&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-exercises---day-1&#34;&gt;üíª Exercises - Day 1&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-1&#34;&gt;Exercise: Level 1&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-2&#34;&gt;Exercise: Level 2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-3&#34;&gt;Exercise: Level 3&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üìò Day 1&lt;/h1&gt; &#xA;&lt;h2&gt;Welcome&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; for deciding to participate in a &lt;em&gt;30 days of Python&lt;/em&gt; programming challenge . In this challenge you will learn everything you need to be a python programmer and the whole concept of programming. In the end of the challenge you will get a &lt;em&gt;30DaysOfPython&lt;/em&gt; programming challenge certificate.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to actively engage in the challenge, you may join the &lt;a href=&#34;https://t.me/ThirtyDaysOfPython&#34;&gt;30DaysOfPython challenge&lt;/a&gt; telegram group.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Python is a high-level programming language for general-purpose programming. It is an open source, interpreted, objected-oriented programming language. Python was created by a Dutch programmer, Guido van Rossum. The name of Python programming language was derived from a British sketch comedy series, &lt;em&gt;Month Python&#39;s Flying Circus&lt;/em&gt;. The first version was released on February 20, 1991. This 30 days of Python challenge will help you learn the latest version of Python, Python 3 step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples, many hands on exercises and projects.&lt;/p&gt; &#xA;&lt;p&gt;This challenge is designed for beginners and professionals who want to learn python programming language. It may take 30 to 100 days to complete the challenge, people who actively participate on the telegram group have a high probability of completing the challenge. If you are a visual learner or in favor of videos, you may get started with this &lt;a href=&#34;https://www.youtube.com/watch?v=11OYpBrhdyM&#34;&gt;Python for Absolute Beginners video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why Python ?&lt;/h2&gt; &#xA;&lt;p&gt;It is a programming language which is very close to human language and because of that it is easy to learn and use. Python is used by various industries and companies (including Google). It has been used to develop web applications, desktop applications, system adminstration, and machine learning libraries. Python is highly embraced language in the data science and machine learning community. I hope this is enough to convince you to start learning Python. Python is eating the world and you are killing it before it eats you.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Installing Python&lt;/h3&gt; &#xA;&lt;p&gt;To run a python script you need to install python. Let&#39;s &lt;a href=&#34;https://www.python.org/&#34;&gt;download&lt;/a&gt; python. If your are a windows user. Click the button encircled in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_windows.png&#34; alt=&#34;installing on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a macOS user. Click the button encircled in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_macOS.png&#34; alt=&#34;installing on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To check if python is installed write the following command on your device terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/python_versio.png&#34; alt=&#34;Python Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the terminal, I am using &lt;em&gt;Python 3.7.5&lt;/em&gt; version at the moment. Your version of Python might be different from mine by but it should be 3.6 or above. If you mange to see the python version, well done. Python has been installed on your machine. Continue to the next section.&lt;/p&gt; &#xA;&lt;h3&gt;Python Shell&lt;/h3&gt; &#xA;&lt;p&gt;Python is an interpreted scripting language, so it does not need to be compiled. It means it executes the code line by line. Python comes with a &lt;em&gt;Python Shell (Python Interactive Shell)&lt;/em&gt;. It is used to execute a single python command and get the result.&lt;/p&gt; &#xA;&lt;p&gt;Python Shell waits for the Python code from the user. When you enter the code, it interprets the code and shows the result in the next line. Open your terminal or command prompt(cmd) and write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png&#34; alt=&#34;Python Scripting Shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell is opened and it is waiting for you to write Python code(Python script). You will write your Python script next to this symbol &amp;gt;&amp;gt;&amp;gt; and then click Enter. Let us write our very first script on the Python scripting shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/adding_on_python_shell.png&#34; alt=&#34;Python script on Python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Well done, you wrote your first Python script on Python interactive shell. How do we close the Python interactive shell ? To close the shell, next to this symbol &amp;gt;&amp;gt; write &lt;strong&gt;exit()&lt;/strong&gt; command and press Enter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/exit_from_shell.png&#34; alt=&#34;Exit from python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now, you know how to open the Python interactive shell and how to exit from it.&lt;/p&gt; &#xA;&lt;p&gt;Python will give you results if you write scripts that Python understands, if not it returns errors. Let&#39;s make a deliberate mistake and see what Python will return.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/invalid_syntax_error.png&#34; alt=&#34;Invalid Syntax Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the returned error, Python is so clever that it knows the mistake we made and which was &lt;em&gt;Syntax Error: invalid syntax&lt;/em&gt;. Using x as multiplication in Python is a syntax error because (x) is not a valid syntax in Python. Instead of (&lt;strong&gt;x&lt;/strong&gt;) we use asterisk (*) for multiplication. The returned error clearly shows what to fix.&lt;/p&gt; &#xA;&lt;p&gt;The process of identifying and removing errors from a program is called &lt;em&gt;debugging&lt;/em&gt;. Let us debug it by putting * in place of &lt;strong&gt;x&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/fixing_syntax_error.png&#34; alt=&#34;Fixing Syntax Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our bug was fixed, the code ran and we got a result we were expecting. As a programmer you will see such kind of errors on daily basis. It is good to know how to debug. To be good at debugging you should understand what kind of errors you are facing. Some of the Python errors you may encounter are &lt;em&gt;SyntaxError&lt;/em&gt;, &lt;em&gt;IndexError&lt;/em&gt;, &lt;em&gt;NameError&lt;/em&gt;, &lt;em&gt;ModuleNotFoundError&lt;/em&gt;, &lt;em&gt;KeyError&lt;/em&gt;, &lt;em&gt;ImportError&lt;/em&gt;, &lt;em&gt;AttributeError&lt;/em&gt;, &lt;em&gt;TypeError&lt;/em&gt;, &lt;em&gt;ValueError&lt;/em&gt;, &lt;em&gt;ZeroDivisionError&lt;/em&gt; etc. We will see more about different Python &lt;strong&gt;&lt;em&gt;error types&lt;/em&gt;&lt;/strong&gt; in later sections.&lt;/p&gt; &#xA;&lt;p&gt;Let us practice more how to use Python interactive shell. Go to your terminal or command prompt and write the word &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png&#34; alt=&#34;Python Scripting Shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell is opened. Let us do some basic mathematical operations (addition, subtraction, multiplication, division, modulus, exponential).&lt;/p&gt; &#xA;&lt;p&gt;Let us do some maths first before we write any Python code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2 + 3 = 5&lt;/li&gt; &#xA; &lt;li&gt;3 - 2 = 1&lt;/li&gt; &#xA; &lt;li&gt;3 * 2 = 6&lt;/li&gt; &#xA; &lt;li&gt;3 / 2 = 1.5&lt;/li&gt; &#xA; &lt;li&gt;3 ^ 2 = 3 x 3 = 9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In python we have the following additional operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3 % 2 = 1 =&amp;gt; which means finding the remainder&lt;/li&gt; &#xA; &lt;li&gt;3 // 2 = 1 =&amp;gt; which means removing the remainder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let us change the above mathematical expressions to Python code. The Python shell has been opened and let us write a comment at the very beginning of the shell.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;comment&lt;/em&gt; is a part of the code which is not executed by python. So we can leave some text in our code to make our code more readable. Python does not run the comment part. A comment in python starts with hash(#) symbol. This is how you write a comment in python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; # comment starts with hash&#xA; # this is a python comment, because it starts with a (#) symbol&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/maths_on_python_shell.png&#34; alt=&#34;Maths on python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before we move on to the next section, let us practice more on the Python interactive shell. Close the opened shell by writing &lt;em&gt;exit()&lt;/em&gt; on the shell and open it again and let us practice how to write text on the Python shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/writing_string_on_shell.png&#34; alt=&#34;Writing String on python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installing Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;The Python interactive shell is good to try and test small script codes but it will not be for a big project. In real work environment, developers use different code editors to write codes. In this 30 days of Python programming challenge we will use visual studio code. Visual studio code is a very popular open source text editor. I am a fan of vscode and I would recommend to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;download&lt;/a&gt; visual studio code, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode.png&#34; alt=&#34;Visual Studio Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed visual studio code, let us see how to use it. If you prefer a video, you can follow this Visual Studio Code for Python &lt;a href=&#34;https://www.youtube.com/watch?v=bn7Cx4z-vSo&#34;&gt;Video tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;How to use visual studio code&lt;/h4&gt; &#xA;&lt;p&gt;Open the visual studio code by double clicking the visual studio icon. When you open it you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode_ui.png&#34; alt=&#34;Visual studio Code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a folder named 30DaysOfPython on your desktop. Then open it using visual studio code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/how_to_open_project_on_vscode.png&#34; alt=&#34;Opening Project on Visual studio&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_project.png&#34; alt=&#34;Opening a project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After opening it you will see shortcuts for creating files and folders inside of 30DaysOfPython project&#39;s directory. As you can see below, I have created the very first file, helloworld.py. You can do the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/helloworld.png&#34; alt=&#34;Creating a python file&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After a long day of coding, you want to close your code editor, right? This is how you will close the opened project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/closing_opened_project.png&#34; alt=&#34;Closing project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Congratulations, you have finished setting up the development environment. Let us start coding.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Python&lt;/h2&gt; &#xA;&lt;h3&gt;Python Syntax&lt;/h3&gt; &#xA;&lt;p&gt;A Python script can be written in Python interactive shell or in the code editor. A Python file has an extension .py.&lt;/p&gt; &#xA;&lt;h3&gt;Python Indentation&lt;/h3&gt; &#xA;&lt;p&gt;An indentation is a white space in a text. Indentation in many languages is used to increase code readability, however Python uses indentation to create block of codes. In other programming languages curly brackets are used to create blocks of codes instead of indentation. One of the common bugs when writing python code is wrong indentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/indentation.png&#34; alt=&#34;Indentation Error&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;Comments are very important to make the code more readable and to leave remarks in our code. Python does not run comment parts of our code. Any text starting with hash(#) in Python is a comment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    # This is the first comment&#xA;    # This is the second comment&#xA;    # Python is eating the world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Triple quote can be used for multiline comment if it is not assigned to a variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;&#34;&#34;This is multiline comment&#xA;multiline comment takes multiple lines.&#xA;python is eating the world&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data types&lt;/h3&gt; &#xA;&lt;p&gt;In Python there are several types of data types. Let us get started with the most common ones. Different data types will be covered in detail in other sections. For the time being, let us just go through the different data types and get familiar with them. You do not have to have a clear understanding now.&lt;/p&gt; &#xA;&lt;h4&gt;Number&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integer: Integer(negative, zero and positive) numbers Example: ... -3, -2, -1, 0, 1, 2, 3 ...&lt;/li&gt; &#xA; &lt;li&gt;Float: Decimal number Example ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...&lt;/li&gt; &#xA; &lt;li&gt;Complex Example 1 + j, 2 + 4j&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;String&lt;/h4&gt; &#xA;&lt;p&gt;A collection of one or more characters under a single or double quote. If a string is more than one sentence then we use a triple quote.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;Asabeneh&#39;&#xA;&#39;Finland&#39;&#xA;&#39;Python&#39;&#xA;&#39;I love teaching&#39;&#xA;&#39;I hope you are enjoying the first day of 30DaysOfPython Challenge&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Booleans&lt;/h4&gt; &#xA;&lt;p&gt;A boolean data type is either a True or False value. T and F should be always uppercase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    True  #  Is the light on? If it is on, then the value is True&#xA;    False # Is the light on? If it is off, then the value is False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;Python list is an ordered collection which allows to store different data type items. A list is similar to an array in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;[0, 1, 2, 3, 4, 5]  # all are the same data types - a list of numbers&#xA;[&#39;Banana&#39;, &#39;Orange&#39;, &#39;Mango&#39;, &#39;Avocado&#39;] # all the same data types - a list of strings (fruits)&#xA;[&#39;Finland&#39;,&#39;Estonia&#39;, &#39;Sweden&#39;,&#39;Norway&#39;] # all the same data types - a list of strings (countries)&#xA;[&#39;Banana&#39;, 10, False, 9.81] # different data types in the list - string, integer, boolean and float&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dictionary&lt;/h4&gt; &#xA;&lt;p&gt;A Python dictionary object is an unordered collection of data in a key value pair format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{&#xA;&#39;first_name&#39;:&#39;Asabeneh&#39;,&#xA;&#39;last_name&#39;:&#39;Yetayeh&#39;,&#xA;&#39;country&#39;:&#39;Finland&#39;, &#xA;&#39;age&#39;:250, &#xA;&#39;is_married&#39;:True,&#xA;&#39;skills&#39;:[&#39;JS&#39;, &#39;React&#39;, &#39;Node&#39;, &#39;Python&#39;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tuple&lt;/h4&gt; &#xA;&lt;p&gt;A tuple is an ordered collection of different data types like list but tuples can not be modified once they are created. They are immutable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Asabeneh&#39;, &#39;Pawel&#39;, &#39;Brook&#39;, &#39;Abraham&#39;, &#39;Lidiya&#39;) # Names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Earth&#39;, &#39;Jupiter&#39;, &#39;Neptune&#39;, &#39;Mars&#39;, &#39;Venus&#39;, &#39;Saturn&#39;, &#39;Uranus&#39;, &#39;Mercury&#39;) # planets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set&lt;/h4&gt; &#xA;&lt;p&gt;A set is a collection of data types similar to list and tuple. Unlike list and tuple, set is not an ordered collection of items. Like in Mathematics, set in Python stores only unique items.&lt;/p&gt; &#xA;&lt;p&gt;In later sections, we will go in detail about each and every Python data type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{2, 4, 3, 5}&#xA;{3.14, 9.81, 2.7} # order is not important in set&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking Data types&lt;/h3&gt; &#xA;&lt;p&gt;To check the data type of certain data/variable we use the &lt;strong&gt;type&lt;/strong&gt; function. In the following terminal you will see different python data types:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/checking_data_types.png&#34; alt=&#34;Checking Data types&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python File&lt;/h3&gt; &#xA;&lt;p&gt;First open your project folder, 30DaysOfPython. If you don&#39;t have this folder, create a folder name called 30DaysOfPython. Inside this folder, create a file called helloworld.py. Now, let&#39;s do what we did on python interactive shell using visual studio code.&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell was printing without using &lt;strong&gt;print&lt;/strong&gt; but on visual studio code to see our result we should use a built in function *print(). The &lt;em&gt;print()&lt;/em&gt; built-in function takes one or more arguments as follows &lt;em&gt;print(&#39;arument1&#39;, &#39;argument2&#39;, &#39;argument3&#39;)&lt;/em&gt;. See the examples below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file name is helloworld.py&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Day 1 - 30DaysOfPython Challenge&#xA;&#xA;print(2 + 3)             # addition(+)&#xA;print(3 - 1)             # subtraction(-)&#xA;print(2 * 3)             # multiplication(*)&#xA;print(3 / 2)             # division(/)&#xA;print(3 ** 2)            # exponential(**)&#xA;print(3 % 2)             # modulus(%)&#xA;print(3 // 2)            # Floor division operator(//)&#xA;&#xA;# Checking data types&#xA;print(type(10))          # Int&#xA;print(type(3.14))        # Float&#xA;print(type(1 + 3j))      # Complex number&#xA;print(type(&#39;Asabeneh&#39;))  # String&#xA;print(type([1, 2, 3]))   # List&#xA;print(type({&#39;name&#39;:&#39;Asabeneh&#39;})) # Dictionary&#xA;print(type({9.8, 3.14, 2.7}))    # Set&#xA;print(type((9.8, 3.14, 2.7)))    # Tuple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the python file check the image below. You can run the python file either by running the green button on Visual Studio Code or by typing &lt;em&gt;python helloworld.py&lt;/em&gt; in the terminal .&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/running_python_script.png&#34; alt=&#34;Running python script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;üåï You are amazing. You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscles.&lt;/p&gt; &#xA;&lt;h2&gt;üíª Exercises - Day 1&lt;/h2&gt; &#xA;&lt;h3&gt;Exercise: Level 1&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check the python version you are using&lt;/li&gt; &#xA; &lt;li&gt;Open the python interactive shell and do the following operations. The operands are 3 and 4. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;addition(+)&lt;/li&gt; &#xA;   &lt;li&gt;subtraction(-)&lt;/li&gt; &#xA;   &lt;li&gt;multiplication(*)&lt;/li&gt; &#xA;   &lt;li&gt;modulus(%)&lt;/li&gt; &#xA;   &lt;li&gt;division(/)&lt;/li&gt; &#xA;   &lt;li&gt;exponential(**)&lt;/li&gt; &#xA;   &lt;li&gt;floor division operator(//)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Write strings on the python interactive shell. The strings are the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your name&lt;/li&gt; &#xA;   &lt;li&gt;Your family name&lt;/li&gt; &#xA;   &lt;li&gt;Your country&lt;/li&gt; &#xA;   &lt;li&gt;I am enjoying 30 days of python&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check the data types of the following data: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;10&lt;/li&gt; &#xA;   &lt;li&gt;9.8&lt;/li&gt; &#xA;   &lt;li&gt;3.14&lt;/li&gt; &#xA;   &lt;li&gt;4 - 4j&lt;/li&gt; &#xA;   &lt;li&gt;[&#39;Asabeneh&#39;, &#39;Python&#39;, &#39;Finland&#39;]&lt;/li&gt; &#xA;   &lt;li&gt;Your name&lt;/li&gt; &#xA;   &lt;li&gt;Your family name&lt;/li&gt; &#xA;   &lt;li&gt;Your country&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Exercise: Level 2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a folder named day_1 inside 30DaysOfPython folder. Inside day_1 folder, create a python file helloworld.py and repeat questions 1, 2, 3 and 4. Remember to use &lt;em&gt;print()&lt;/em&gt; when you are working on a python file. Navigate to the directory where you have saved your file, and run it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Exercise: Level 3&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write an example for different Python data types such as Number(Integer, Float, Complex), String, Boolean, List, Tuple, Set and Dictionary.&lt;/li&gt; &#xA; &lt;li&gt;Find an &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_distance#:~:text=In%20mathematics%2C%20the%20Euclidean%20distance,being%20called%20the%20Pythagorean%20distance.&#34;&gt;Euclidian distance&lt;/a&gt; between (2, 3) and (10, 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;üéâ CONGRATULATIONS ! üéâ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/mason.nvim</title>
    <updated>2022-07-28T01:34:39Z</updated>
    <id>tag:github.com,2022-07-28:/williamboman/mason.nvim</id>
    <link href="https://github.com/williamboman/mason.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/williamboman/mason.nvim/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux%20macOS%20windows-blue&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/williamboman/mason.nvim&#34; alt=&#34;Repository size&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/williamboman&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/williamboman?style=flat-square&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png&#34; alt=&#34;mason.nvim&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Portable package manager for Neovim that runs everywhere Neovim runs.&lt;br&gt; Easily install and manage LSP servers, DAP servers, linters, and formatters. &lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is a Neovim plugin that allow you to easily manage external editor tooling such as LSP servers, DAP servers, linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.), with only a small set of &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#requirements&#34;&gt;external requirements&lt;/a&gt; needed.&lt;/p&gt; &#xA;&lt;p&gt;Packages are installed to Neovim&#39;s &lt;code&gt;:h stdpath&lt;/code&gt; by default. Executables are linked to a single &lt;code&gt;bin/&lt;/code&gt; directory, which &lt;code&gt;mason.nvim&lt;/code&gt; will add to Neovim&#39;s PATH during setup, allowing seamless access from Neovim builtins (shell, terminal, etc.) as well as other 3rd party plugins.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Main window&#34; src=&#34;https://user-images.githubusercontent.com/6705160/177617680-d62caf26-f253-4ace-ab57-4b590595adca.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/177617684-6bb4c13f-1235-4ac9-829e-120b06f7437b.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Language filter&#34; src=&#34;https://user-images.githubusercontent.com/6705160/177617688-8f9ba225-00c8-495c-9c4c-b74240d6f280.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;LSP server configuration schema&#34; src=&#34;https://user-images.githubusercontent.com/6705160/177617692-02c6ddde-a97e-42b4-bca4-4f4caf45d569.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Checking for new versions&#34; src=&#34;https://user-images.githubusercontent.com/6705160/180648183-69077d10-8795-4da6-ba4d-57ecf0cb25c9.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img alt=&#34;Help window&#34; src=&#34;https://user-images.githubusercontent.com/6705160/180648292-136a0888-0fb6-4226-aa29-53bd3ffed400.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; relaxes the minimum requirements by attempting multiple different utilities (for example, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;Invoke-WebRequest&lt;/code&gt; are all perfect substitutes). The &lt;em&gt;minimum&lt;/em&gt; recommended requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Unix systems: &lt;code&gt;git(1)&lt;/code&gt;, &lt;code&gt;curl(1)&lt;/code&gt; or &lt;code&gt;wget(1)&lt;/code&gt;, &lt;code&gt;unzip(1)&lt;/code&gt;, &lt;code&gt;tar(1)&lt;/code&gt;, &lt;code&gt;gzip(1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;mason.nvim&lt;/code&gt; will regularly shell out to external package managers, such as &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Depending on your personal usage, some of these will also need to be installed. Refer to &lt;code&gt;:checkhealth mason&lt;/code&gt; for a full list.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;williamboman/mason.nvim&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;williamboman/mason.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mason.nvim&lt;/code&gt; is optimized to load as little as possible during setup. Lazy-loading the plugin, or somehow deferring the setup, is not recommended.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/williamboman/mason.nvim/wiki/Extensions&#34;&gt;Wiki&lt;/a&gt; for a list of 3rd party extensions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim&#34;&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt;&lt;/a&gt; - recommended for usage with &lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Mason&lt;/code&gt; - opens a graphical status window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonInstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - installs/reinstalls the provided packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonUninstall &amp;lt;package&amp;gt; ...&lt;/code&gt; - uninstalls the provided packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonUninstallAll&lt;/code&gt; - uninstalls all packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:MasonLog&lt;/code&gt; - opens the &lt;code&gt;mason.nvim&lt;/code&gt; log file in a new tab window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason.nvim/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup({&#xA;    ui = {&#xA;        icons = {&#xA;            package_installed = &#34;‚úì&#34;,&#xA;            package_pending = &#34;‚ûú&#34;,&#xA;            package_uninstalled = &#34;‚úó&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    ui = {&#xA;        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;        border = &#34;none&#34;,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed packages.&#xA;            package_installed = &#34;‚óç&#34;,&#xA;            -- The list icon to use for packages that are installing, or queued for installation.&#xA;            package_pending = &#34;‚óç&#34;,&#xA;            -- The list icon to use for packages that are not installed.&#xA;            package_uninstalled = &#34;‚óç&#34;,&#xA;        },&#xA;&#xA;        keymaps = {&#xA;            -- Keymap to expand a package&#xA;            toggle_package_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the package under the current cursor position&#xA;            install_package = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the package under the current cursor position&#xA;            update_package = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the package under the current cursor position&#xA;            check_package_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed packages&#xA;            update_all_packages = &#34;U&#34;,&#xA;            -- Keymap to check which installed packages are outdated&#xA;            check_outdated_packages = &#34;C&#34;,&#xA;            -- Keymap to uninstall a package&#xA;            uninstall_package = &#34;X&#34;,&#xA;            -- Keymap to cancel a package installation&#xA;            cancel_installation = &#34;&amp;lt;C-c&amp;gt;&#34;,&#xA;            -- Keymap to apply language filter&#xA;            apply_language_filter = &#34;&amp;lt;C-f&amp;gt;&#34;,&#xA;        },&#xA;    },&#xA;&#xA;    -- The directory in which to install packages.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;mason&#34; },&#xA;&#xA;    pip = {&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with package installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further&#xA;    -- packages that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>