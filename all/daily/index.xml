<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-17T01:29:13Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Const-me/Whisper</title>
    <updated>2023-03-17T01:29:13Z</updated>
    <id>tag:github.com,2023-03-17:/Const-me/Whisper</id>
    <link href="https://github.com/Const-me/Whisper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-performance GPGPU inference of OpenAI&#39;s Whisper automatic speech recognition (ASR) model&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This project is a Windows port of the &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; implementation.&lt;br&gt; Which in turn is a C++ port of &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt; automatic speech recognition (ASR) model.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start Guide&lt;/h1&gt; &#xA;&lt;p&gt;Download WhisperDesktop.zip from the “Releases” section of this repository, unpack the ZIP, and run WhisperDesktop.exe.&lt;/p&gt; &#xA;&lt;p&gt;On the first screen it will ask you to download a model.&lt;br&gt; I recommend &lt;code&gt;ggml-medium.bin&lt;/code&gt; (1.42GB in size), because I’ve mostly tested the software with that model.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Const-me/Whisper/master/gui-load-model.png&#34; alt=&#34;Load Model Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The next screen allows to transcribe an audio file.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Const-me/Whisper/master/gui-transcribe.png&#34; alt=&#34;Transcribe Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There’s another screen which allows to capture and transcribe or translate live audio from a microphone.&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Const-me/Whisper/master/gui-capture.png&#34; alt=&#34;Capture Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Vendor-agnostic GPGPU based on DirectCompute; another name for that technology is “compute shaders in Direct3D 11”&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plain C++ implementation, no runtime dependencies except essential OS components&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Much faster than OpenAI’s implementation.&lt;br&gt; On my desktop computer with GeForce &lt;a href=&#34;https://en.wikipedia.org/wiki/GeForce_10_series#GeForce_10_(10xx)_series_for_desktops&#34;&gt;1080Ti&lt;/a&gt; GPU, medium model, &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/1f/George_W_Bush_Columbia_FINAL.ogg&#34;&gt;3:24 min speech&lt;/a&gt; took 45 seconds to transcribe with PyTorch and CUDA, but only 19 seconds with my implementation and DirectCompute.&lt;br&gt; Funfact: that’s 9.63 gigabytes runtime dependencies, versus 431 kilobytes &lt;code&gt;Whisper.dll&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mixed F16 / F32 precision: Windows &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/direct3ddxgi/format-support-for-direct3d-feature-level-10-0-hardware#dxgi_format_r16_floatfcs-54&#34;&gt;requires support&lt;/a&gt; of &lt;code&gt;R16_FLOAT&lt;/code&gt; buffers since D3D version 10.0&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in performance profiler which measures execution time of individual compute shaders&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Low memory usage&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Media Foundation for audio handling, supports most audio and video formats (with the notable exception of Ogg Vorbis), and most audio capture devices which work on Windows (except some professional ones, which only implementing &lt;a href=&#34;https://en.wikipedia.org/wiki/Audio_Stream_Input/Output&#34;&gt;ASIO&lt;/a&gt; API).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Voice activity detection for audio capture.&lt;br&gt; The implementation is based on the &lt;a href=&#34;https://www.researchgate.net/publication/255667085_A_simple_but_efficient_real-time_voice_activity_detection_algorithm&#34;&gt;2009 article&lt;/a&gt; “A simple but efficient real-time voice activity detection algorithm” by Mohammad Moattar and Mahdi Homayoonpoor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy to use COM-style API, idiomatic C# wrapper &lt;a href=&#34;https://www.nuget.org/packages/WhisperNet/&#34;&gt;available on nuget&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pre-built binaries available&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The only supported platform is 64-bit Windows.&lt;br&gt; Should work on Windows 8.1 or newer, but I have only tested on Windows 10.&lt;br&gt; The library requires a Direct3D 11.0 capable GPU, which in 2023 simply means “any hardware GPU”. The most recent GPU without D3D 11.0 support was Intel &lt;a href=&#34;https://en.wikipedia.org/wiki/Sandy_Bridge&#34;&gt;Sandy Bridge&lt;/a&gt; from 2011.&lt;/p&gt; &#xA;&lt;p&gt;On the CPU side, the library requires &lt;a href=&#34;https://en.wikipedia.org/wiki/SSE4#SSE4.1&#34;&gt;SSE 4.1&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/F16C&#34;&gt;F16C&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;h1&gt;Developer Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;WhisperCpp.sln&lt;/code&gt; in Visual Studio 2022. I’m using the freeware community edition, version 17.4.4.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Switch to &lt;code&gt;Release&lt;/code&gt; configuration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run &lt;code&gt;CompressShaders&lt;/code&gt; C# project, in the &lt;code&gt;Tools&lt;/code&gt; subfolder of the solution. To run that project, right click in visual studio, “Set as startup project”, then in the main menu of VS “Debug / Start Without Debugging”. When completed successfully, you should see a console window with a line like that:&lt;br&gt; &lt;code&gt;Compressed 46 compute shaders, 123.5 kb -&amp;gt; 18.0 kb&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;Whisper&lt;/code&gt; project to get the native DLL, or &lt;code&gt;WhisperNet&lt;/code&gt; for the C# wrapper and nuget package, or the examples.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other Notes&lt;/h2&gt; &#xA;&lt;p&gt;If you gonna consume the library in a software built with Visual C++ 2022 or newer, you probably redistribute Visual C++ runtime DLLs in the form of the &lt;code&gt;.msm&lt;/code&gt; merge module, or &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170&#34;&gt;vc_redist.x64.exe&lt;/a&gt; binary.&lt;br&gt; If you do that, right click on the &lt;code&gt;Whisper&lt;/code&gt; project, Properties, C/C++, Code Generation, switch “Runtime Library” setting from &lt;code&gt;Multi-threaded (/MT)&lt;/code&gt; to &lt;code&gt;Multi-threaded DLL (/MD)&lt;/code&gt;, and rebuild: the binary will become smaller.&lt;/p&gt; &#xA;&lt;p&gt;The library includes &lt;a href=&#34;https://renderdoc.org/&#34;&gt;RenderDoc&lt;/a&gt; GPU debugger integration.&lt;br&gt; When launched your program from RenderDoc, hold F12 key to capture the compute calls.&lt;br&gt; If you gonna debug HLSL shaders, use the debug build of the DLL, it includes debug build of the shaders and you’ll get better UX in the debugger.&lt;/p&gt; &#xA;&lt;p&gt;The repository includes a lot of code which was only used for development: couple alternative model implementations, compatible FP64 versions of some compute shaders, debug tracing and the tool to compare the traces, etc.&lt;br&gt; That stuff is disabled by preprocessor macros or &lt;code&gt;constexpr&lt;/code&gt; flags, I hope it’s fine to keep here.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Notes&lt;/h2&gt; &#xA;&lt;p&gt;I have a limited selection of GPUs in this house.&lt;br&gt; Specifically, I have optimized for nVidia 1080Ti, Radeon Vega 8 inside Ryzen 7 5700G, and Radeon Vega 7 inside Ryzen 5 5600U.&lt;br&gt; &lt;a href=&#34;https://github.com/Const-me/Whisper/raw/master/SampleClips/summary.tsv&#34;&gt;Here’s the summary&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The nVidia delivers relative speed 5.8 for the large model, 10.6 for the medium model.&lt;br&gt; The AMD Ryzen 5 5600U APU delivers relative speed about 2.2 for the medium model. Not great, but still, much faster than realtime.&lt;/p&gt; &#xA;&lt;p&gt;I have also tested on &lt;a href=&#34;https://en.wikipedia.org/wiki/GeForce_16_series#Desktop&#34;&gt;nVidia 1650&lt;/a&gt;: slower than 1080Ti but pretty good, much faster than realtime.&lt;br&gt; I have also tested on Intel HD Graphics 4000 inside Core i7-3612QM, the relative speed was 0.14 for medium model, 0.44 for small model. That’s much slower than realtime, but I was happy to find my software works even on the integrated mobile GPU &lt;a href=&#34;https://ark.intel.com/products/64901&#34;&gt;launched&lt;/a&gt; in 2012.&lt;/p&gt; &#xA;&lt;p&gt;I’m not sure the performance is ideal on discrete AMD GPUs, or integrated Intel GPUs, have not specifically optimized for them.&lt;br&gt; Ideally, they might need slightly different builds of a couple of the most expensive compute shaders, &lt;code&gt;mulMatTiled.hlsl&lt;/code&gt; and &lt;code&gt;mulMatByRowTiled.hlsl&lt;/code&gt;&lt;br&gt; And maybe other adjustments, like the &lt;code&gt;useReshapedMatMul()&lt;/code&gt; value in &lt;code&gt;Whisper/D3D/device.h&lt;/code&gt; header file.&lt;/p&gt; &#xA;&lt;p&gt;I don’t know how to measure that, but I have a feeling the bottleneck is memory, not compute.&lt;br&gt; Someone on Hacker News &lt;a href=&#34;https://news.ycombinator.com/item?id=34408429&#34;&gt;has tested&lt;/a&gt; on &lt;a href=&#34;https://en.wikipedia.org/wiki/GeForce_30_series#Desktop&#34;&gt;3060Ti&lt;/a&gt;, the version with GDDR6 memory. Compared to 1080Ti, that GPU has 1.3x FP32 FLOPS, but 0.92x VRAM bandwidth. The app was about 10% slower on the 3060Ti.&lt;/p&gt; &#xA;&lt;h2&gt;Further Optimisations&lt;/h2&gt; &#xA;&lt;p&gt;I have only spent a few days optimizing performance of these shaders.&lt;br&gt; It might be possible to do much better, here’s a few ideas.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Newer GPUs like Radeon Vega or nVidia 1650 have higher FP16 performance compared to FP32, yet my compute shaders are only using FP32 data type.&lt;br&gt; &lt;a href=&#34;https://therealmjp.github.io/posts/shader-fp16/&#34;&gt;Half The Precision, Twice The Fun&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the current version, FP16 tensors are using shader resource views to upcast loaded values, and unordered access views to downcast stored ones.&lt;br&gt; Might be a good idea to switch to &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-advanced-stages-cs-resources#byte-address-buffer&#34;&gt;byte address buffers&lt;/a&gt;, load/store complete 4-bytes values, and upcast / downcast in HLSL with &lt;code&gt;f16tof32&lt;/code&gt; / &lt;code&gt;f32tof16&lt;/code&gt; intrinsics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the current version all shaders are compiled offline, and &lt;code&gt;Whisper.dll&lt;/code&gt; includes DXBC byte codes.&lt;br&gt; The HLSL compiler &lt;code&gt;D3DCompiler_47.dll&lt;/code&gt; is an OS component, and is pretty fast. For the expensive compute shaders, it’s probably a good idea to ship HLSL instead of DXBC, and &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/api/d3dcompiler/nf-d3dcompiler-d3dcompile&#34;&gt;compile&lt;/a&gt; on startup with environment-specific &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/api/d3dcommon/ns-d3dcommon-d3d_shader_macro&#34;&gt;values&lt;/a&gt; for the macros.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It might be a good idea to upgrade the whole thing from D3D11 to D3D12.&lt;br&gt; The newer API is harder to use, but includes potentially useful features not exposed to D3D11: &lt;a href=&#34;https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics&#34;&gt;wave intrinsics&lt;/a&gt;, and &lt;a href=&#34;https://github.com/microsoft/DirectXShaderCompiler/wiki/16-Bit-Scalar-Types&#34;&gt;explicit FP16&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Missing Features&lt;/h2&gt; &#xA;&lt;p&gt;Automatic language detection is not implemented.&lt;/p&gt; &#xA;&lt;p&gt;In the current version there’s high latency for realtime audio capture.&lt;br&gt; Specifically, depending on voice detection the figure is about 5-10 seconds.&lt;br&gt; At least in my tests, the model wasn’t happy when I supplied too short pieces of the audio.&lt;br&gt; I have increased the latency and called it a day, but ideally this needs a better fix for optimal UX.&lt;/p&gt; &#xA;&lt;h1&gt;Final Words&lt;/h1&gt; &#xA;&lt;p&gt;From my perspective, this is an unpaid hobby project, which I completed over the 2022-23 winter holydays.&lt;br&gt; The code probably has bugs.&lt;br&gt; The software is provided “as is”, without warranty of any kind.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/ggerganov&#34;&gt;Georgi Gerganov&lt;/a&gt; for &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt; implementation, and the models in GGML binary format.&lt;br&gt; I don’t program Python, and I don’t know anything about the ML ecosystem.&lt;br&gt; I wouldn’t even start this project without a good C++ reference implementation, to test my version against.&lt;/p&gt; &#xA;&lt;p&gt;That whisper.cpp project has an example which &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/raw/master/examples/talk/gpt-2.cpp&#34;&gt;uses&lt;/a&gt; the same GGML implementation to run another OpenAI’s model, &lt;a href=&#34;https://en.wikipedia.org/wiki/GPT-2&#34;&gt;GPT-2&lt;/a&gt;.&lt;br&gt; It shouldn’t be hard to support that ML model with the compute shaders and relevant infrastructure already implemented in this project.&lt;/p&gt; &#xA;&lt;p&gt;If you find this useful, I’ll be very grateful if you consider a donation to &lt;a href=&#34;https://savelife.in.ua/en/&#34;&gt;“Come Back Alive” foundation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tloen/alpaca-lora</title>
    <updated>2023-03-17T01:29:13Z</updated>
    <id>tag:github.com,2023-03-17:/tloen/alpaca-lora</id>
    <link href="https://github.com/tloen/alpaca-lora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Finetuning InstructLLaMA on consumer hardware&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;🦙🌲🤏 Alpaca-LoRA: Low-Rank LLaMA Instruct-Tuning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Try the pretrained model out on Colab &lt;a href=&#34;https://colab.research.google.com/drive/1eWAmesrW99p7e1nah5bipn0zikMb8XYC&#34;&gt;here&lt;/a&gt;!&lt;/strong&gt; &lt;em&gt;If you have problems with short outputs or very long outputs, please redownload the weights (&lt;code&gt;force_download=True&lt;/code&gt;) and pull the latest version of the code.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains code for reproducing the &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;Stanford Alpaca&lt;/a&gt; results using &lt;a href=&#34;https://arxiv.org/pdf/2106.09685.pdf&#34;&gt;low-rank adaptation (LoRA)&lt;/a&gt;. We provide an Instruct model of similar quality to &lt;code&gt;text-davinci-003&lt;/code&gt; that can run &lt;a href=&#34;https://twitter.com/miolini/status/1634982361757790209&#34;&gt;on a Raspberry Pi&lt;/a&gt; (for research), and the code can be easily extended to the &lt;code&gt;13b&lt;/code&gt;, &lt;code&gt;30b&lt;/code&gt;, and &lt;code&gt;65b&lt;/code&gt; models.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the training code, which runs within five hours on a single RTX 4090, we publish a script for downloading and inference on the foundation model and LoRA, as well as the resulting &lt;a href=&#34;https://huggingface.co/tloen/alpaca-lora-7b/tree/main&#34;&gt;LoRA weights themselves&lt;/a&gt;. To fine-tune cheaply and efficiently, we use Huggingface&#39;s &lt;a href=&#34;https://github.com/huggingface/peft&#34;&gt;PEFT&lt;/a&gt; as well as Tim Dettmers&#39; &lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes&#34;&gt;bitsandbytes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Without hyperparameter tuning or validation-based checkpointing, the LoRA model produces outputs comparable to the Stanford Alpaca model. (Please see the outputs included below.) Further tuning might be able to achieve better performance; I invite interested users to give it a try and report their results.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;If bitsandbytes doesn&#39;t work, &lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes/raw/main/compile_from_source.md&#34;&gt;install it from source.&lt;/a&gt; Windows users can follow &lt;a href=&#34;https://github.com/tloen/alpaca-lora/issues/17&#34;&gt;these instructions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Inference (&lt;code&gt;generate.py&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This file reads the foundation model from the Huggingface model hub and the LoRA weights from &lt;code&gt;tloen/alpaca-lora-7b&lt;/code&gt;, and runs a Gradio interface for inference on a specified input. Users should treat this as example code for the use of the model, and modify it as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Training (&lt;code&gt;finetune.py&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This file contains a straightforward application of PEFT to the LLaMA model, as well as some code related to prompt construction and tokenization. Near the top of this file is a set of hardcoded hyperparameters that you should feel free to modify. PRs adapting this code to multi-GPU setups and larger models are always welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Checkpoint export (&lt;code&gt;export_state_dict_checkpoint.py&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;This file contains a script to convert the LoRA back into a standard PyTorch model checkpoint, which should help users who want to use the model with projects like &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;To do&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Merge LoRA weights into LLaMA weights to remove inference dependency on PEFT&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Train/val split&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hyperparameter tuning code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for &lt;code&gt;13b&lt;/code&gt;, &lt;code&gt;30b&lt;/code&gt;, &lt;code&gt;65b&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Train a version that doesn&#39;t waste tokens on the prompt header&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inference CLI and evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better disclaimers about why using LLaMA without permission is very bad!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example outputs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Tell me about alpacas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;: Alpacas are members of the camelid family and are native to the Andes Mountains of South America. They are known for their soft, luxurious fleece, which is used to make clothing, blankets, and other items. Alpacas are herbivores and graze on grasses and other plants. They are social animals and live in herds of up to 20 individuals.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;: Alpacas are small, fluffy animals related to camels and llamas. They are native to Peru and Bolivia, and were first domesticated around 5,000 years ago. They are kept mainly for their fine, soft fleece, which is used to make knitwear and other garments. Alpacas are herd animals and live in small family groups, led by an older male. They are highly social animals and can form strong bonds with their owners.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;: Alpacas are a domesticated species of South American camelid, similar to llamas. They are native to the Andes Mountains in South America and are kept as livestock for their soft, luxurious wool. Alpacas are social animals and live in herds of up to 20 individuals. They are typically kept in small herds of two to five animals, and are relatively easy to care for. Alpacas are herbivores and feed on grass, hay, and other vegetation. They are also known for their gentle and friendly nature, making them popular as pets.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Tell me about the president of Mexico in 2019.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;: The president of Mexico in 2019 was Andrés Manuel López Obrador, who took office on December 1, 2018. He is a member of the National Regeneration Movement (MORENA) political party and is the first left-wing president of Mexico since 1946. He is known for his anti-corruption and anti-neoliberal policies, as well as his commitment to improving the living conditions of the Mexican people.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;: In 2019, Andres Manuel Lopez Obrador was sworn in as President of Mexico. He is the country’s 58th president and the first from the left-wing Morena party. He was elected in 2018 on a promise to combat corruption and reduce poverty and has faced criticism for his handling of the economy, crime and the country’s relationship with the United States. He is also known for his ambitious social welfare programs and has been praised for raising the minimum wage and providing aid to low-income families. He is seen as a champion of democracy and human rights in Mexico.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;: The president of Mexico in 2019 is Andrés Manuel López Obrador, commonly known as AMLO. He is a Mexican politician who has been the President of Mexico since December 1, 2018. He is a member of the National Regeneration Movement (MORENA) party and previously served as the Head of Government of Mexico City from 2000 to 2005. He is a left-wing populist and has promised to reduce corruption and inequality in Mexico. He has also promised to increase public spending on social programs and infrastructure projects.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Tell me about the king of France in 2019.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;: The King of France in 2019 is Emmanuel Macron, who was elected in May 2017. He is the youngest president in the history of the Fifth Republic and the first president to be born after World War II. He is also the first president to have never held elected office before.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;: In 2019, the King of France was Emmanuel Macron. He was sworn in as President of France on May 14, 2017, and has been leading the country ever since. He is a member of the centrist La République En Marche! Party. He is known for his reformist agenda and has faced a number of protests from both the right and left of the political spectrum. He is the youngest French president in history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;: The King of France is a largely symbolic role, as France is a republic. The current President of France is Emmanuel Macron, who was elected in 2017.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: List all Canadian provinces in alphabetical order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;: Alberta, British Columbia, Manitoba, New Brunswick, Newfoundland and Labrador, Nova Scotia, Ontario, Prince Edward Island, Quebec, Saskatchewan&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;: Alberta, British Columbia, Manitoba, New Brunswick, Newfoundland and Labrador, Nova Scotia, Ontario, Prince Edward Island, Quebec, Saskatchewan, Northwest Territories, Nunavut, Yukon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Alberta&lt;/li&gt; &#xA; &lt;li&gt;British Columbia&lt;/li&gt; &#xA; &lt;li&gt;Manitoba&lt;/li&gt; &#xA; &lt;li&gt;New Brunswick&lt;/li&gt; &#xA; &lt;li&gt;Newfoundland and Labrador&lt;/li&gt; &#xA; &lt;li&gt;Northwest Territories&lt;/li&gt; &#xA; &lt;li&gt;Nova Scotia&lt;/li&gt; &#xA; &lt;li&gt;Nunavut&lt;/li&gt; &#xA; &lt;li&gt;Ontario&lt;/li&gt; &#xA; &lt;li&gt;Prince Edward Island&lt;/li&gt; &#xA; &lt;li&gt;Quebec&lt;/li&gt; &#xA; &lt;li&gt;Saskatchewan&lt;/li&gt; &#xA; &lt;li&gt;Yukon&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Write a Python program that prints the first 10 Fibonacci numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def fibonacci(n):&#xA;    if n == 0:&#xA;        return 0&#xA;    elif n == 1:&#xA;        return 1&#xA;    else:&#xA;        return fibonacci(n-1) + fibonacci(n-2)&#xA;&#xA;print(fibonacci(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [0, 1]&#xA;&#xA;for i in range(2, 11):&#xA;    numbers.append(numbers[i-2] + numbers[i-1])&#xA;&#xA;print(numbers)&#xA;# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, and characterized by the fact that every number after the first two is the sum of the two preceding ones.&#xA;&#xA;# Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...&#xA;&#xA;# Program:&#xA;&#xA;# Initialize the first two numbers of the Fibonacci sequence&#xA;a = 0&#xA;b = 1&#xA;&#xA;# Print the first 10 numbers of the Fibonacci sequence&#xA;print(a)&#xA;print(b)&#xA;&#xA;for i in range(2,10):&#xA;    c = a + b&#xA;    a = b&#xA;    b = c&#xA;    print(c)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Write a program that prints the numbers from 1 to 100. But for multiples of three print &#39;Fizz&#39; instead of the number and for the multiples of five print &#39;Buzz&#39;. For numbers which are multiples of both three and five print &#39;FizzBuzz&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1, 101):&#xA;    if i % 3 == 0 and i % 5 == 0:&#xA;        print(&#34;FizzBuzz&#34;)&#xA;    elif i % 3 == 0:&#xA;        print(&#34;Fizz&#34;)&#xA;    elif i % 5 == 0:&#xA;        print(&#34;Buzz&#34;)&#xA;    else:&#xA;        print(i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1, 101):&#xA;    if i % 3 == 0 and i % 5 == 0:&#xA;        print(&#39;FizzBuzz&#39;)&#xA;    elif i % 3 == 0:&#xA;        print(&#39;Fizz&#39;)&#xA;    elif i % 5 == 0:&#xA;        print(&#39;Buzz&#39;)&#xA;    else:&#xA;        print(i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for (let i = 1; i &amp;lt;= 100; i++) {&#xA;  if (i % 3 === 0 &amp;amp;&amp;amp; i % 5 === 0) {&#xA;    console.log(&#34;FizzBuzz&#34;);&#xA;  } else if (i % 3 === 0) {&#xA;    console.log(&#34;Fizz&#34;);&#xA;  } else if (i % 5 === 0) {&#xA;    console.log(&#34;Buzz&#34;);&#xA;  } else {&#xA;    console.log(i);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Tell me five words that rhyme with &#39;shock&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;: Flock, lock, rock, stock, and sock.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;: Five words that rhyme with shock are: rock, pop, shock, cook, and snock.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Block&lt;/li&gt; &#xA; &lt;li&gt;Lock&lt;/li&gt; &#xA; &lt;li&gt;Dock&lt;/li&gt; &#xA; &lt;li&gt;Clock&lt;/li&gt; &#xA; &lt;li&gt;Rock&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instruction&lt;/strong&gt;: Translate the sentence &#39;I have no mouth but I must scream&#39; into Spanish.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpaca-LoRA&lt;/strong&gt;: No tengo boca pero tengo que gritar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stanford Alpaca&lt;/strong&gt;: No tengo boca, pero debo gritar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;text-davinci-003&lt;/strong&gt;: No tengo boca pero debo gritar.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chathub-dev/chathub</title>
    <updated>2023-03-17T01:29:13Z</updated>
    <id>tag:github.com,2023-03-17:/chathub-dev/chathub</id>
    <link href="https://github.com/chathub-dev/chathub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All-in-one chatbot client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatHub&lt;/h1&gt; &#xA;&lt;p&gt;ChatHub is an all-in-one chatbot client&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chathub.gg&#34;&gt;Install from Chrome Web Store&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chathub-dev/chathub/main/screenshots/extension.png?raw=true&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use different chatbots in one app, currently supporting ChatGPT and new Bing Chat, and will integrate Google Bard and more in the future.&lt;/li&gt; &#xA; &lt;li&gt;Chat with multiple chatbots at the same time, making it easy to compare their answers.&lt;/li&gt; &#xA; &lt;li&gt;Support ChatGPT API mode, which is faster and more cost-effective than ChatGPT Plus.&lt;/li&gt; &#xA; &lt;li&gt;Token usage stats when using ChatGPT API mode.&lt;/li&gt; &#xA; &lt;li&gt;Shortcut to quickly activate the app anywhere in the browser.&lt;/li&gt; &#xA; &lt;li&gt;Markdown and code highlight support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;v1.4.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Prompt Library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v1.3.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add copy code button&lt;/li&gt; &#xA; &lt;li&gt;Sync chat state between all-in-one and standalone mode&lt;/li&gt; &#xA; &lt;li&gt;Allows input while generating answer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v1.2.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support copy message text&lt;/li&gt; &#xA; &lt;li&gt;Improve setting page form element style&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>