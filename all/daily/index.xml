<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-16T01:28:50Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-lualine/lualine.nvim</title>
    <updated>2025-03-16T01:28:50Z</updated>
    <id>tag:github.com,2025-03-16:/nvim-lualine/lualine.nvim</id>
    <link href="https://github.com/nvim-lualine/lualine.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazing fast and easy to configure neovim statusline plugin written in pure lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lualine.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;code size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nvim-lualine/lualine.nvim?style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;https://buymeacoffee.com/shadmansalj&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy%20Me%20a%20Coffee-F7941D?style=plastic&amp;amp;logo=buy-me-a-coffee&amp;amp;logoColor=white&#34; alt=&#34;Buy Me a Coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;p&gt;A blazing fast and easy to configure Neovim statusline written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lualine.nvim&lt;/code&gt; requires Neovim &amp;gt;= 0.7.&lt;/p&gt; &#xA;&lt;p&gt;For previous versions of neovim please use compatability tags for example compat-nvim-0.5&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; before opening a PR. You can also help with documentation in the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here is a preview of what lualine can look like.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Screenshots of all available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For those who want to break the norms, you can create custom looks for lualine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/evil_lualine.lua&#34;&gt;evil_lualine&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/slanted-gaps.lua&#34;&gt;slanted-gaps&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/examples/bubbles.lua&#34;&gt;bubbles&lt;/a&gt; &lt;img width=&#34;700&#34; src=&#34;https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Performance compared to other plugins&lt;/h2&gt; &#xA;&lt;p&gt;Unlike other statusline plugins, lualine loads only the components you specify, and nothing else.&lt;/p&gt; &#xA;&lt;p&gt;Startup time performance measured with an amazing plugin &lt;a href=&#34;https://github.com/dstein64/vim-startuptime&#34;&gt;dstein64/vim-startuptime&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Times are measured with a clean &lt;code&gt;init.vim&lt;/code&gt; with only &lt;code&gt;vim-startuptime&lt;/code&gt;, &lt;code&gt;vim-plug&lt;/code&gt; and given statusline plugin installed. In control just &lt;code&gt;vim-startuptime&lt;/code&gt; and&lt;code&gt;vim-plug&lt;/code&gt; is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;control&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lualine&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;lightline&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;airline&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.2 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24.8 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.5 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.9 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Last Updated On: 18-04-2022&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lualine/lualine.nvim&#39;&#xA;&#34; If you want to have icons in your statusline choose one of these&#xA;Plug &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;nvim-lualine/lualine.nvim&#39;,&#xA;  requires = { &#39;nvim-tree/nvim-web-devicons&#39;, opt = true }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;nvim-lualine/lualine.nvim&#39;,&#xA;    dependencies = { &#39;nvim-tree/nvim-web-devicons&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to have a patched font if you want icons.&lt;/p&gt; &#xA;&lt;h2&gt;Usage and customization&lt;/h2&gt; &#xA;&lt;p&gt;Lualine has sections as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------------------------------------------+&#xA;| A | B | C                             X | Y | Z |&#xA;+-------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each sections holds its components e.g. Vim&#39;s current mode.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring lualine in init.vim&lt;/h3&gt; &#xA;&lt;p&gt;All the examples below are in lua. You can use the same examples in &lt;code&gt;.vim&lt;/code&gt; files by wrapping them in lua heredoc like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; END&#xA;require(&#39;lualine&#39;).setup()&#xA;END&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, check out &lt;code&gt;:help lua-heredoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default configuration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    icons_enabled = true,&#xA;    theme = &#39;auto&#39;,&#xA;    component_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    section_separators = { left = &#39;&#39;, right = &#39;&#39;},&#xA;    disabled_filetypes = {&#xA;      statusline = {},&#xA;      winbar = {},&#xA;    },&#xA;    ignore_focus = {},&#xA;    always_divide_middle = true,&#xA;    always_show_tabline = true,&#xA;    globalstatus = false,&#xA;    refresh = {&#xA;      statusline = 100,&#xA;      tabline = 100,&#xA;      winbar = 100,&#xA;    }&#xA;  },&#xA;  sections = {&#xA;    lualine_a = {&#39;mode&#39;},&#xA;    lualine_b = {&#39;branch&#39;, &#39;diff&#39;, &#39;diagnostics&#39;},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;encoding&#39;, &#39;fileformat&#39;, &#39;filetype&#39;},&#xA;    lualine_y = {&#39;progress&#39;},&#xA;    lualine_z = {&#39;location&#39;}&#xA;  },&#xA;  inactive_sections = {&#xA;    lualine_a = {},&#xA;    lualine_b = {},&#xA;    lualine_c = {&#39;filename&#39;},&#xA;    lualine_x = {&#39;location&#39;},&#xA;    lualine_y = {},&#xA;    lualine_z = {}&#xA;  },&#xA;  tabline = {},&#xA;  winbar = {},&#xA;  inactive_winbar = {},&#xA;  extensions = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get your current lualine config, you can do so with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).get_config()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Starting lualine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Setting a theme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { theme = &#39;gruvbox&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available themes are listed in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/THEMES.md&#34;&gt;THEMES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please create a PR if you managed to port a popular theme before us, &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/CONTRIBUTING.md&#34;&gt;here is how to do it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing themes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local custom_gruvbox = require&#39;lualine.themes.gruvbox&#39;&#xA;&#xA;-- Change the background of lualine_c section for normal mode&#xA;custom_gruvbox.normal.c.bg = &#39;#112233&#39;&#xA;&#xA;require(&#39;lualine&#39;).setup {&#xA;  options = { theme  = custom_gruvbox },&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Theme structure is available &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Writing-a-theme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Separators&lt;/h3&gt; &#xA;&lt;p&gt;lualine defines two kinds of separators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;section_separators&lt;/code&gt; - separators between sections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;component_separators&lt;/code&gt; - separators between the different components in sections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if viewing this README in a browser, chances are the characters below will not be visible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, left refers to the left-most sections (a, b, c), and right refers to the right-most sections (x, y, z).&lt;/p&gt; &#xA;&lt;h4&gt;Disabling separators&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { section_separators = &#39;&#39;, component_separators = &#39;&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Changing components in lualine sections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {lualine_a = {&#39;mode&#39;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;branch&lt;/code&gt; (git branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffers&lt;/code&gt; (shows currently available buffers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt; (diagnostics count from your preferred source)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diff&lt;/code&gt; (git diff status)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; (file encoding)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fileformat&lt;/code&gt; (file format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filesize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;location&lt;/code&gt; (location in file in line:column format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (vim mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;progress&lt;/code&gt; (%progress in file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;searchcount&lt;/code&gt; (number of search matches when hlsearch is active)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selectioncount&lt;/code&gt; (number of selected characters or lines)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; (shows currently available tabs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows&lt;/code&gt; (shows currently available windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp_status&lt;/code&gt; (shows active LSPs in the current buffer and a progress spinner)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom components&lt;/h4&gt; &#xA;&lt;h5&gt;Lua functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function hello()&#xA;  return [[hello world]]&#xA;end&#xA;sections = { lualine_a = { hello } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim functions as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = {&#39;FugitiveHead&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim&#39;s statusline items as lualine component&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = {&#39;%=&#39;, &#39;%t%m&#39;, &#39;%3p&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Vim variables as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;Variables from &lt;code&gt;g:&lt;/code&gt;, &lt;code&gt;v:&lt;/code&gt;, &lt;code&gt;t:&lt;/code&gt;, &lt;code&gt;w:&lt;/code&gt;, &lt;code&gt;b:&lt;/code&gt;, &lt;code&gt;o:&lt;/code&gt;, &lt;code&gt;to:&lt;/code&gt;, &lt;code&gt;wo:&lt;/code&gt;, &lt;code&gt;bo:&lt;/code&gt; scopes can be used.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h lua-vim-variables&lt;/code&gt; and &lt;code&gt;:h lua-vim-options&lt;/code&gt; if you are not sure what to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_a = { &#39;g:coc_status&#39;, &#39;bo:filetype&#39; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lua expressions as lualine component&lt;/h5&gt; &#xA;&lt;p&gt;You can use any valid lua expression as a component including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oneliners&lt;/li&gt; &#xA; &lt;li&gt;global variables&lt;/li&gt; &#xA; &lt;li&gt;require statements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = { lualine_c = { &#34;os.date(&#39;%a&#39;)&#34;, &#39;data&#39;, &#34;require&#39;lsp-status&#39;.status()&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a global variable in this example.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Component options&lt;/h3&gt; &#xA;&lt;p&gt;Component options can change the way a component behave. There are two kinds of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;global options affecting all components&lt;/li&gt; &#xA; &lt;li&gt;local options affecting specific&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Global options can be used as local options (can be applied to specific components) but you cannot use local options as global. Global option used locally overwrites the global, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#39;lualine&#39;).setup {&#xA;      options = { fmt = string.lower },&#xA;      sections = { lualine_a = {&#xA;        { &#39;mode&#39;, fmt = function(str) return str:sub(1,1) end } },&#xA;                  lualine_b = {&#39;branch&#39;} }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter &lt;code&gt;string.lower&lt;/code&gt; so it will be showed in lower case.&lt;/p&gt; &#xA;&lt;h4&gt;Available options&lt;/h4&gt; &#xA;&lt;h4&gt;Global options&lt;/h4&gt; &#xA;&lt;p&gt;These are &lt;code&gt;options&lt;/code&gt; that are used in options table. They set behavior of lualine.&lt;/p&gt; &#xA;&lt;p&gt;Values set here are treated as default for other options that work in component level.&lt;/p&gt; &#xA;&lt;p&gt;For example even though &lt;code&gt;icons_enabled&lt;/code&gt; is a general component option. You can set &lt;code&gt;icons_enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = {&#xA;  theme = &#39;auto&#39;, -- lualine theme&#xA;  component_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  section_separators = { left = &#39;&#39;, right = &#39;&#39; },&#xA;  disabled_filetypes = {     -- Filetypes to disable lualine for.&#xA;      statusline = {},       -- only ignores the ft for statusline.&#xA;      winbar = {},           -- only ignores the ft for winbar.&#xA;  },&#xA;&#xA;  ignore_focus = {},         -- If current filetype is in this list it&#39;ll&#xA;                             -- always be drawn as inactive statusline&#xA;                             -- and the last window will be drawn as active statusline.&#xA;                             -- for example if you don&#39;t want statusline of&#xA;                             -- your file tree / sidebar window to have active&#xA;                             -- statusline you can add their filetypes here.&#xA;&#xA;  always_divide_middle = true, -- When set to true, left sections i.e. &#39;a&#39;,&#39;b&#39; and &#39;c&#39;&#xA;                               -- can&#39;t take over the entire statusline even&#xA;                               -- if neither of &#39;x&#39;, &#39;y&#39; or &#39;z&#39; are present.&#xA;&#xA;  always_show_tabline = true -- When set to true, if you have configured lualine for displaying tabline&#xA;                          -- then tabline will always show. If set to false, then tabline will be displayed&#xA;                          -- only when there are more than 1 tab. (see :h showtabline)&#xA;&#xA;  globalstatus = false,        -- enable global statusline (have a single statusline&#xA;                               -- at bottom of neovim instead of one for  every window).&#xA;                               -- This feature is only available in neovim 0.7 and higher.&#xA;&#xA;  refresh = {                  -- sets how often lualine should refresh it&#39;s contents (in ms)&#xA;    statusline = 100,         -- The refresh option sets minimum time that lualine tries&#xA;    tabline = 100,            -- to maintain between refresh. It&#39;s not guarantied if situation&#xA;    winbar = 100              -- arises that lualine needs to refresh itself before this time&#xA;                               -- it&#39;ll do it.&#xA;&#xA;                               -- Also you can force lualine&#39;s refresh by calling refresh function&#xA;                               -- like require(&#39;lualine&#39;).refresh()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General component options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that control behavior at component level and are available for all components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;mode&#39;,&#xA;      icons_enabled = true, -- Enables the display of icons alongside the component.&#xA;      -- Defines the icon to be displayed in front of the component.&#xA;      -- Can be string|table&#xA;      -- As table it must contain the icon as first entry and can use&#xA;      -- color option to custom color the icon. Example:&#xA;      -- {&#39;branch&#39;, icon = &#39;&#39;} / {&#39;branch&#39;, icon = {&#39;&#39;, color={fg=&#39;green&#39;}}}&#xA;&#xA;      -- icon position can also be set to the right side from table. Example:&#xA;      -- {&#39;branch&#39;, icon = {&#39;&#39;, align=&#39;right&#39;, color={fg=&#39;green&#39;}}}&#xA;      icon = nil,&#xA;&#xA;      separator = nil,      -- Determines what separator to use for the component.&#xA;                            -- Note:&#xA;                            --  When a string is provided it&#39;s treated as component_separator.&#xA;                            --  When a table is provided it&#39;s treated as section_separator.&#xA;                            --  Passing an empty string disables the separator.&#xA;                            --&#xA;                            -- These options can be used to set colored separators&#xA;                            -- around a component.&#xA;                            --&#xA;                            -- The options need to be set as such:&#xA;                            --   separator = { left = &#39;&#39;, right = &#39;&#39;}&#xA;                            --&#xA;                            -- Where left will be placed on left side of component,&#xA;                            -- and right will be placed on its right.&#xA;                            --&#xA;&#xA;      cond = nil,           -- Condition function, the component is loaded when the function returns `true`.&#xA;&#xA;      draw_empty = false,   -- Whether to draw component even if it&#39;s empty.&#xA;                            -- Might be useful if you want just the separator.&#xA;&#xA;      -- Defines a custom color for the component:&#xA;      --&#xA;      -- &#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; } | function&#xA;      -- Note:&#xA;      --  &#39;|&#39; is synonymous with &#39;or&#39;, meaning a different acceptable format for that placeholder.&#xA;      -- color function has to return one of other color types (&#39;highlight_group_name&#39; | { fg = &#39;#rrggbb&#39;|cterm_value(0-255)|&#39;color_name(red)&#39;, bg= &#39;#rrggbb&#39;, gui=&#39;style&#39; })&#xA;      -- color functions can be used to have different colors based on state as shown below.&#xA;      --&#xA;      -- Examples:&#xA;      --   color = { fg = &#39;#ffaa88&#39;, bg = &#39;grey&#39;, gui=&#39;italic,bold&#39; },&#xA;      --   color = { fg = 204 }   -- When fg/bg are omitted, they default to the your theme&#39;s fg/bg.&#xA;      --   color = &#39;WarningMsg&#39;   -- Highlight groups can also be used.&#xA;      --   color = function(section)&#xA;      --      return { fg = vim.bo.modified and &#39;#aa3355&#39; or &#39;#33aa88&#39; }&#xA;      --   end,&#xA;      color = nil, -- The default is your theme&#39;s color for that section and mode.&#xA;&#xA;      -- Specify what type a component is, if omitted, lualine will guess it for you.&#xA;      --&#xA;      -- Available types are:&#xA;      --   [format: type_name(example)], mod(branch/filename),&#xA;      --   stl(%f/%m), var(g:coc_status/bo:modifiable),&#xA;      --   lua_expr(lua expressions), vim_fun(viml function name)&#xA;      --&#xA;      -- Note:&#xA;      -- lua_expr is short for lua-expression and vim_fun is short for vim-function.&#xA;      type = nil,&#xA;&#xA;      padding = 1, -- Adds padding to the left and right of components.&#xA;                   -- Padding can be specified to left or right independently, e.g.:&#xA;                   --   padding = { left = left_padding, right = right_padding }&#xA;&#xA;      fmt = nil,   -- Format function, formats the component&#39;s output.&#xA;                   -- This function receives two arguments:&#xA;                   -- - string that is going to be displayed and&#xA;                   --   that can be changed, enhanced and etc.&#xA;                   -- - context object with information you might&#xA;                   --   need. E.g. tabnr if used with tabs.&#xA;      on_click = nil, -- takes a function that is called when component is clicked with mouse.&#xA;                   -- the function receives several arguments&#xA;                   -- - number of clicks in case of multiple clicks&#xA;                   -- - mouse button used (l(left)/r(right)/m(middle)/...)&#xA;                   -- - modifiers pressed (s(shift)/c(ctrl)/a(alt)/m(meta)...)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Component specific options&lt;/h4&gt; &#xA;&lt;p&gt;These are options that are available on specific components. For example, you have option on &lt;code&gt;diagnostics&lt;/code&gt; component to specify what your diagnostic sources will be.&lt;/p&gt; &#xA;&lt;h4&gt;buffers component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;buffers&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      hide_filename_extension = false,   -- Hide filename extension when set to true.&#xA;      show_modified_status = true, -- Shows indicator when the buffer is modified.&#xA;&#xA;      mode = 0, -- 0: Shows buffer name&#xA;                -- 1: Shows buffer index&#xA;                -- 2: Shows buffer name + buffer index&#xA;                -- 3: Shows buffer number&#xA;                -- 4: Shows buffer name + buffer number&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )&#xA;&#xA;      -- Automatically updates active buffer color to match color of other components (will be overidden if buffers_color is set)&#xA;      use_mode_colors = false,&#xA;&#xA;      buffers_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active buffer.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive buffer.&#xA;      },&#xA;&#xA;      symbols = {&#xA;        modified = &#39; ●&#39;,      -- Text to show when the buffer is modified&#xA;        alternate_file = &#39;#&#39;, -- Text to show to identify the alternate file&#xA;        directory =  &#39;&#39;,     -- Text to show when the buffer is a directory&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;datetime component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;datetime&#39;,&#xA;      -- options: default, us, uk, iso, or your own format string (&#34;%H:%M&#34;, etc..)&#xA;      style = &#39;default&#39;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diagnostics component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diagnostics&#39;,&#xA;&#xA;      -- Table of diagnostic sources, available sources are:&#xA;      --   &#39;nvim_lsp&#39;, &#39;nvim_diagnostic&#39;, &#39;nvim_workspace_diagnostic&#39;, &#39;coc&#39;, &#39;ale&#39;, &#39;vim_lsp&#39;.&#xA;      -- or a function that returns a table as such:&#xA;      --   { error=error_cnt, warn=warn_cnt, info=info_cnt, hint=hint_cnt }&#xA;      sources = { &#39;nvim_diagnostic&#39;, &#39;coc&#39; },&#xA;&#xA;      -- Displays diagnostics for the defined severity types&#xA;      sections = { &#39;error&#39;, &#39;warn&#39;, &#39;info&#39;, &#39;hint&#39; },&#xA;&#xA;      diagnostics_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        error = &#39;DiagnosticError&#39;, -- Changes diagnostics&#39; error color.&#xA;        warn  = &#39;DiagnosticWarn&#39;,  -- Changes diagnostics&#39; warn color.&#xA;        info  = &#39;DiagnosticInfo&#39;,  -- Changes diagnostics&#39; info color.&#xA;        hint  = &#39;DiagnosticHint&#39;,  -- Changes diagnostics&#39; hint color.&#xA;      },&#xA;      symbols = {error = &#39;E&#39;, warn = &#39;W&#39;, info = &#39;I&#39;, hint = &#39;H&#39;},&#xA;      colored = true,           -- Displays diagnostics status in color if set to true.&#xA;      update_in_insert = false, -- Update diagnostics in insert mode.&#xA;      always_visible = false,   -- Show diagnostics even if there are none.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;diff component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;diff&#39;,&#xA;      colored = true, -- Displays a colored diff status if set to true&#xA;      diff_color = {&#xA;        -- Same color values as the general color option can be used here.&#xA;        added    = &#39;LuaLineDiffAdd&#39;,    -- Changes the diff&#39;s added color&#xA;        modified = &#39;LuaLineDiffChange&#39;, -- Changes the diff&#39;s modified color&#xA;        removed  = &#39;LuaLineDiffDelete&#39;, -- Changes the diff&#39;s removed color you&#xA;      },&#xA;      symbols = {added = &#39;+&#39;, modified = &#39;~&#39;, removed = &#39;-&#39;}, -- Changes the symbols used by the diff.&#xA;      source = nil, -- A function that works as a data source for diff.&#xA;                    -- It must return a table as such:&#xA;                    --   { added = add_count, modified = modified_count, removed = removed_count }&#xA;                    -- or nil on failure. count &amp;lt;= 0 won&#39;t be displayed.&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;fileformat component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;fileformat&#39;,&#xA;      symbols = {&#xA;        unix = &#39;&#39;, -- e712&#xA;        dos = &#39;&#39;,  -- e70f&#xA;        mac = &#39;&#39;,  -- e711&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filename component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filename&#39;,&#xA;      file_status = true,      -- Displays file status (readonly status, modified status)&#xA;      newfile_status = false,  -- Display new file status (new file means no write after created)&#xA;      path = 0,                -- 0: Just the filename&#xA;                               -- 1: Relative path&#xA;                               -- 2: Absolute path&#xA;                               -- 3: Absolute path, with tilde as the home directory&#xA;                               -- 4: Filename and parent dir, with tilde as the home directory&#xA;&#xA;      shorting_target = 40,    -- Shortens path to leave 40 spaces in the window&#xA;                               -- for other components. (terrible name, any suggestions?)&#xA;      symbols = {&#xA;        modified = &#39;[+]&#39;,      -- Text to show when the file is modified.&#xA;        readonly = &#39;[-]&#39;,      -- Text to show when the file is non-modifiable or readonly.&#xA;        unnamed = &#39;[No Name]&#39;, -- Text to show for unnamed buffers.&#xA;        newfile = &#39;[New]&#39;,     -- Text to show for newly created file before first write&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;filetype component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;filetype&#39;,&#xA;      colored = true,   -- Displays filetype icon in color if set to true&#xA;      icon_only = false, -- Display only an icon for filetype&#xA;      icon = { align = &#39;right&#39; }, -- Display filetype icon on the right hand side&#xA;      -- icon =    {&#39;X&#39;, align=&#39;right&#39;}&#xA;      -- Icon string ^ in table is ignored in filetype component&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;encoding component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;encoding&#39;,&#xA;      -- Show &#39;[BOM]&#39; when the file has a byte-order mark&#xA;        show_bomb = false,&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;searchcount component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;searchcount&#39;,&#xA;      maxcount = 999,&#xA;      timeout = 500,&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tabs component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;tabs&#39;,&#xA;      tab_max_length = 40,  -- Maximum width of each tab. The content will be shorten dynamically (example: apple/orange -&amp;gt; a/orange)&#xA;      max_length = vim.o.columns / 3, -- Maximum width of tabs component.&#xA;                                      -- Note:&#xA;                                      -- It can also be a function that returns&#xA;                                      -- the value of `max_length` dynamically.&#xA;      mode = 0, -- 0: Shows tab_nr&#xA;                -- 1: Shows tab_name&#xA;                -- 2: Shows tab_nr + tab_name&#xA;&#xA;      path = 0, -- 0: just shows the filename&#xA;                -- 1: shows the relative path and shorten $HOME to ~&#xA;                -- 2: shows the full path&#xA;                -- 3: shows the full path and shorten $HOME to ~&#xA;&#xA;      -- Automatically updates active tab color to match color of other components (will be overidden if buffers_color is set)&#xA;      use_mode_colors = false,&#xA;&#xA;      tabs_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active tab.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive tab.&#xA;      },&#xA;&#xA;      show_modified_status = true,  -- Shows a symbol next to the tab name if the file has been modified.&#xA;      symbols = {&#xA;        modified = &#39;[+]&#39;,  -- Text to show when the file is modified.&#xA;      },&#xA;&#xA;      fmt = function(name, context)&#xA;        -- Show + if buffer is modified in tab&#xA;        local buflist = vim.fn.tabpagebuflist(context.tabnr)&#xA;        local winnr = vim.fn.tabpagewinnr(context.tabnr)&#xA;        local bufnr = buflist[winnr]&#xA;        local mod = vim.fn.getbufvar(bufnr, &#39;&amp;amp;mod&#39;)&#xA;&#xA;        return name .. (mod == 1 and &#39; +&#39; or &#39;&#39;)&#xA;      end&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;windows component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;windows&#39;,&#xA;      show_filename_only = true,   -- Shows shortened relative path when set to false.&#xA;      show_modified_status = true, -- Shows indicator when the window is modified.&#xA;&#xA;      mode = 0, -- 0: Shows window name&#xA;                -- 1: Shows window index&#xA;                -- 2: Shows window name + window index&#xA;&#xA;      max_length = vim.o.columns * 2 / 3, -- Maximum width of windows component,&#xA;                                          -- it can also be a function that returns&#xA;                                          -- the value of `max_length` dynamically.&#xA;      filetype_names = {&#xA;        TelescopePrompt = &#39;Telescope&#39;,&#xA;        dashboard = &#39;Dashboard&#39;,&#xA;        packer = &#39;Packer&#39;,&#xA;        fzf = &#39;FZF&#39;,&#xA;        alpha = &#39;Alpha&#39;&#xA;      }, -- Shows specific window name for that filetype ( { `filetype` = `window_name`, ... } )&#xA;&#xA;      disabled_buftypes = { &#39;quickfix&#39;, &#39;prompt&#39; }, -- Hide a window if its buffer&#39;s type is disabled&#xA;&#xA;      -- Automatically updates active window color to match color of other components (will be overidden if buffers_color is set)&#xA;      use_mode_colors = false,&#xA;&#xA;      windows_color = {&#xA;        -- Same values as the general color option can be used here.&#xA;        active = &#39;lualine_{section}_normal&#39;,     -- Color for active window.&#xA;        inactive = &#39;lualine_{section}_inactive&#39;, -- Color for inactive window.&#xA;      },&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;lsp status component options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;sections = {&#xA;  lualine_a = {&#xA;    {&#xA;      &#39;lsp_status&#39;,&#xA;      icon = &#39;&#39;, -- f013&#xA;      symbols = {&#xA;        -- Standard unicode symbols to cycle through for LSP progress:&#xA;        spinner = { &#39;⠋&#39;, &#39;⠙&#39;, &#39;⠹&#39;, &#39;⠸&#39;, &#39;⠼&#39;, &#39;⠴&#39;, &#39;⠦&#39;, &#39;⠧&#39;, &#39;⠇&#39;, &#39;⠏&#39; },&#xA;        -- Standard unicode symbol for when LSP is done:&#xA;        done = &#39;✓&#39;,&#xA;        -- Delimiter inserted between LSP names:&#xA;        separator = &#39; &#39;,&#xA;      },&#xA;      -- List of LSP names to ignore (e.g., `null-ls`):&#xA;      ignore_lsp = {},&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Tabline&lt;/h3&gt; &#xA;&lt;p&gt;You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the branch and filename components on top of neovim inside tabline.&lt;/p&gt; &#xA;&lt;p&gt;lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;  lualine_a = {&#39;buffers&#39;},&#xA;  lualine_b = {&#39;branch&#39;},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {&#39;tabs&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Winbar&lt;/h3&gt; &#xA;&lt;p&gt;From neovim-0.8 you can customize your winbar with lualine. Winbar configuration is similar to statusline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;winbar = {&#xA;  lualine_a = {},&#xA;  lualine_b = {},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&#xA;inactive_winbar = {&#xA;  lualine_a = {},&#xA;  lualine_b = {},&#xA;  lualine_c = {&#39;filename&#39;},&#xA;  lualine_x = {},&#xA;  lualine_y = {},&#xA;  lualine_z = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like statusline you can separately specify winbar for active and inactive windows. Any lualine component can be placed in winbar. All kinds of custom components supported in statusline are also supported for winbar too. In general You can treat winbar as another lualine statusline that just appears on top of windows instead of at bottom.&lt;/p&gt; &#xA;&lt;h4&gt;Buffers&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open buffers. Like bufferline . See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#buffers-component-options&#34;&gt;buffers options&lt;/a&gt; for all builtin behaviors of buffers component. You can use &lt;code&gt;:LualineBuffersJump&lt;/code&gt; to jump to buffer based on index of buffer in buffers component. Jumping to non-existent buffer indices generates an error. To avoid these errors &lt;code&gt;LualineBuffersJump&lt;/code&gt; provides &lt;code&gt;&amp;lt;bang&amp;gt;&lt;/code&gt; support, meaning that you can call &lt;code&gt;:LualineBufferJump!&lt;/code&gt; to ignore these errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;  :LualineBuffersJump 2  &#34; Jumps to 2nd buffer in buffers component.&#xA;  :LualineBuffersJump $  &#34; Jumps to last buffer in buffers component.&#xA;  :LualineBuffersJump! 3  &#34; Attempts to jump to 3rd buffer, if it exists.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tabs&lt;/h4&gt; &#xA;&lt;p&gt;Shows currently open tab. Like usual tabline. See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lualine/lualine.nvim/master/#tabs-component-options&#34;&gt;tabs options&lt;/a&gt; for all builtin behaviors of tabs component. You can also use &lt;code&gt;:LualineRenameTab&lt;/code&gt; to set a name for a tabpage. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:LualineRenameTab Project_K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s useful when you&#39;re using rendering mode 2/3 in tabs. To unname a tabpage run &lt;code&gt;:LualineRenameTab&lt;/code&gt; without argument.&lt;/p&gt; &#xA;&lt;h4&gt;Tabline as statusline&lt;/h4&gt; &#xA;&lt;p&gt;You can also completely move your statusline to a tabline by configuring &lt;code&gt;lualine.tabline&lt;/code&gt; and disabling &lt;code&gt;lualine.sections&lt;/code&gt; and &lt;code&gt;lualine.inactive_sections&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;tabline = {&#xA;......&#xA;  },&#xA;sections = {},&#xA;inactive_sections = {},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;nvim-bufferline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/tabline.nvim&#34;&gt;tabline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;tabline.nvim even uses lualine&#39;s theme by default 🙌 You can find a bigger list &lt;a href=&#34;https://github.com/rockerBOO/awesome-neovim#tabline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;lualine extensions change statusline appearance for a window/buffer with specified filetypes.&lt;/p&gt; &#xA;&lt;p&gt;By default no extensions are loaded to improve performance. You can load extensions with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;extensions = {&#39;quickfix&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available extensions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aerial&lt;/li&gt; &#xA; &lt;li&gt;chadtree&lt;/li&gt; &#xA; &lt;li&gt;ctrlspace&lt;/li&gt; &#xA; &lt;li&gt;fern&lt;/li&gt; &#xA; &lt;li&gt;fugitive&lt;/li&gt; &#xA; &lt;li&gt;fzf&lt;/li&gt; &#xA; &lt;li&gt;lazy&lt;/li&gt; &#xA; &lt;li&gt;man&lt;/li&gt; &#xA; &lt;li&gt;mason&lt;/li&gt; &#xA; &lt;li&gt;mundo&lt;/li&gt; &#xA; &lt;li&gt;neo-tree&lt;/li&gt; &#xA; &lt;li&gt;nerdtree&lt;/li&gt; &#xA; &lt;li&gt;nvim-dap-ui&lt;/li&gt; &#xA; &lt;li&gt;nvim-tree&lt;/li&gt; &#xA; &lt;li&gt;oil&lt;/li&gt; &#xA; &lt;li&gt;overseer&lt;/li&gt; &#xA; &lt;li&gt;quickfix&lt;/li&gt; &#xA; &lt;li&gt;symbols-outline&lt;/li&gt; &#xA; &lt;li&gt;toggleterm&lt;/li&gt; &#xA; &lt;li&gt;trouble&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom extensions&lt;/h4&gt; &#xA;&lt;p&gt;You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local my_extension = { sections = { lualine_a = {&#39;mode&#39;} }, filetypes = {&#39;lua&#39;} }&#xA;require(&#39;lualine&#39;).setup { extensions = { my_extension } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Refreshing lualine&lt;/h3&gt; &#xA;&lt;p&gt;By default lualine refreshes itself based on timer and some events. You can set the interval of the timer with refresh option. However you can also force lualine to refresh at any time by calling &lt;code&gt;lualine.refresh&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).refresh({&#xA;  scope = &#39;tabpage&#39;,  -- scope of refresh all/tabpage/window&#xA;  place = { &#39;statusline&#39;, &#39;winbar&#39;, &#39;tabline&#39; },  -- lualine segment ro refresh.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The arguments shown here are default values. So not passing any of them will be treated as if a default value was passed.&lt;/p&gt; &#xA;&lt;p&gt;So you can simply do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).refresh()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Avoid calling &lt;code&gt;lualine.refresh&lt;/code&gt; inside components. Since components are evaluated during refresh, calling refresh while refreshing can have undesirable effects.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling lualine&lt;/h3&gt; &#xA;&lt;p&gt;You can disable lualine for specific filetypes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;options = { disabled_filetypes = {&#39;lua&#39;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also disable lualine completely. Note that you need to call this after the setup&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#39;lualine&#39;).hide({&#xA;    place = {&#39;statusline&#39;, &#39;tabline&#39;, &#39;winbar&#39;}, -- The segment this change applies to.&#xA;    unhide = false,  -- whether to re-enable lualine again/&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The arguments show for hide above are default values. Which means even if the hide function is called without arguments it&#39;ll work as if these were passed.&lt;/p&gt; &#xA;&lt;p&gt;So in short to disable lualine completely you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).hide()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable it again you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).hide({unhide=true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to these wonderful people, we enjoy this awesome plugin.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki&#34;&gt;wiki&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;You can find some useful &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Component-snippets&#34;&gt;configuration snippets&lt;/a&gt; here. You can also share your awesome snippets with others.&lt;/p&gt; &#xA;&lt;p&gt;If you want to extend lualine with plugins or want to know which ones already do, &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim/wiki/Plugins&#34;&gt;wiki/plugins&lt;/a&gt; is for you.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you find this project useful, consider supporting development:&lt;/p&gt; &#xA;&lt;a href=&#34;https://buymeacoffee.com/shadmansalj&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me a Coffee&#34; width=&#34;200&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>langchain-ai/ollama-deep-researcher</title>
    <updated>2025-03-16T01:28:50Z</updated>
    <id>tag:github.com,2025-03-16:/langchain-ai/ollama-deep-researcher</id>
    <link href="https://github.com/langchain-ai/ollama-deep-researcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully local web research and report writing assistant&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ollama Deep Researcher&lt;/h1&gt; &#xA;&lt;p&gt;Ollama Deep Researcher is a fully local web research assistant that uses any LLM hosted by &lt;a href=&#34;https://ollama.com/search&#34;&gt;Ollama&lt;/a&gt;. Give it a topic and it will generate a web search query, gather web search results (via &lt;a href=&#34;https://www.tavily.com/&#34;&gt;Tavily&lt;/a&gt; by default), summarize the results of web search, reflect on the summary to examine knowledge gaps, generate a new search query to address the gaps, search, and improve the summary for a user-defined number of cycles. It will provide the user a final markdown summary with all sources used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4308ee9c-abf3-4abb-9d1e-83e7c2c3f187&#34; alt=&#34;research-rabbit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Short summary: &#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/02084902-f067-4658-9683-ff312cab7944&#34; controls&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📺 Video Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;See it in action or build it yourself? Check out these helpful video tutorials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sGUjmyfof4Q&#34;&gt;Overview of Ollama Deep Researcher with R1&lt;/a&gt; - Load and test &lt;a href=&#34;https://api-docs.deepseek.com/news/news250120&#34;&gt;DeepSeek R1&lt;/a&gt; &lt;a href=&#34;https://ollama.com/library/deepseek-r1&#34;&gt;distilled models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XGuTzHoqlj8&#34;&gt;Building Ollama Deep Researcher from Scratch&lt;/a&gt; - Overview of how this is built.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the Ollama app for Mac &lt;a href=&#34;https://ollama.com/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull a local LLM from &lt;a href=&#34;https://ollama.com/search&#34;&gt;Ollama&lt;/a&gt;. As an &lt;a href=&#34;https://ollama.com/library/deepseek-r1:8b&#34;&gt;example&lt;/a&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ollama pull deepseek-r1:8b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/langchain-ai/ollama-deep-researcher.git&#xA;cd ollama-deep-researcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Select a web search tool:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default, it will use &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; for web search, which does not require an API key. But you can also use &lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily&lt;/a&gt; or &lt;a href=&#34;https://www.perplexity.ai/hub/blog/introducing-the-sonar-pro-api&#34;&gt;Perplexity&lt;/a&gt; by adding their API keys to the environment file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following environment variables are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OLLAMA_BASE_URL&lt;/code&gt; - the endpoint of the Ollama service, defaults to &lt;code&gt;http://localhost:11434&lt;/code&gt; if not set&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OLLAMA_MODEL&lt;/code&gt; - the model to use, defaults to &lt;code&gt;llama3.2&lt;/code&gt; if not set&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SEARCH_API&lt;/code&gt; - the search API to use, either &lt;code&gt;duckduckgo&lt;/code&gt; (default) or &lt;code&gt;tavily&lt;/code&gt; or &lt;code&gt;perplexity&lt;/code&gt;. You need to set the corresponding API key if tavily or perplexity is used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TAVILY_API_KEY&lt;/code&gt; - the tavily API key to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PERPLEXITY_API_KEY&lt;/code&gt; - the perplexity API key to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAX_WEB_RESEARCH_LOOPS&lt;/code&gt; - the maximum number of research loop steps, defaults to &lt;code&gt;3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FETCH_FULL_PAGE&lt;/code&gt; - fetch the full page content if using &lt;code&gt;duckduckgo&lt;/code&gt; for the search API, defaults to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;(Recommended) Create a virtual environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv .venv&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Launch the assistant with the LangGraph server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install uv package manager&#xA;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;uvx --refresh --from &#34;langgraph-cli[inmem]&#34; --with-editable . --python 3.11 langgraph dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the Ollama app for Windows &lt;a href=&#34;https://ollama.com/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull a local LLM from &lt;a href=&#34;https://ollama.com/search&#34;&gt;Ollama&lt;/a&gt;. As an &lt;a href=&#34;https://ollama.com/library/deepseek-r1:8b&#34;&gt;example&lt;/a&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;ollama pull deepseek-r1:8b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/langchain-ai/ollama-deep-researcher.git&#xA;cd ollama-deep-researcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Select a web search tool, as above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Recommended) Create a virtual environment: Install &lt;code&gt;Python 3.11&lt;/code&gt; (and add to PATH during installation). Restart your terminal to ensure Python is available, then create and activate a virtual environment:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;python -m venv .venv&#xA;.venv\Scripts\Activate.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Launch the assistant with the LangGraph server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Install dependencies&#xA;pip install -e .&#xA;pip install -U &#34;langgraph-cli[inmem]&#34;            &#xA;&#xA;# Start the LangGraph server&#xA;langgraph dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the LangGraph Studio UI&lt;/h3&gt; &#xA;&lt;p&gt;When you launch LangGraph server, you should see the following output and Studio will open in your browser:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ready!&lt;/p&gt; &#xA; &lt;p&gt;API: &lt;a href=&#34;http://127.0.0.1:2024&#34;&gt;http://127.0.0.1:2024&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Docs: &lt;a href=&#34;http://127.0.0.1:2024/docs&#34;&gt;http://127.0.0.1:2024/docs&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;LangGraph Studio Web UI: &lt;a href=&#34;https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024&#34;&gt;https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Open &lt;code&gt;LangGraph Studio Web UI&lt;/code&gt; via the URL in the output above.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;configuration&lt;/code&gt; tab:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pick your web search tool (DuckDuckGo, Tavily, or Perplexity) (it will by default be &lt;code&gt;DuckDuckGo&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Set the name of your local LLM to use with Ollama (it will by default be &lt;code&gt;llama3.2&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can set the depth of the research iterations (it will by default be &lt;code&gt;3&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1621&#34; alt=&#34;Screenshot 2025-01-24 at 10 08 31 PM&#34; src=&#34;https://github.com/user-attachments/assets/7cfd0e04-28fd-4cfa-aee5-9a556d74ab21&#34;&gt; &#xA;&lt;p&gt;Give the assistant a topic for research, and you can visualize its process!&lt;/p&gt; &#xA;&lt;img width=&#34;1621&#34; alt=&#34;Screenshot 2025-01-24 at 10 08 22 PM&#34; src=&#34;https://github.com/user-attachments/assets/4de6bd89-4f3b-424c-a9cb-70ebd3d45c5f&#34;&gt; &#xA;&lt;h3&gt;Model Compatibility Note&lt;/h3&gt; &#xA;&lt;p&gt;When selecting a local LLM, note that this application relies on the model&#39;s ability to produce structured JSON output. Some models may have difficulty with this requirement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Working well&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ollama.com/library/llama3.2&#34;&gt;Llama2 3.2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ollama.com/library/deepseek-r1:8b&#34;&gt;DeepSeek R1 (8B)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Known issues&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ollama.com/library/deepseek-llm:7b&#34;&gt;DeepSeek R1 (7B)&lt;/a&gt; - Currently has difficulty producing required JSON output&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you &lt;a href=&#34;https://github.com/langchain-ai/ollama-deep-researcher/issues/18&#34;&gt;encounter JSON-related errors&lt;/a&gt; (e.g., &lt;code&gt;KeyError: &#39;query&#39;&lt;/code&gt;), try switching to one of the confirmed working models.&lt;/p&gt; &#xA;&lt;h3&gt;Browser Compatibility Note&lt;/h3&gt; &#xA;&lt;p&gt;When accessing the LangGraph Studio UI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox is recommended for the best experience&lt;/li&gt; &#xA; &lt;li&gt;Safari users may encounter security warnings due to mixed content (HTTPS/HTTP)&lt;/li&gt; &#xA; &lt;li&gt;If you encounter issues, try: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Using Firefox or another browser&lt;/li&gt; &#xA;   &lt;li&gt;Disabling ad-blocking extensions&lt;/li&gt; &#xA;   &lt;li&gt;Checking browser console for specific error messages&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Ollama Deep Researcher is inspired by &lt;a href=&#34;https://arxiv.org/html/2410.04343v1#:~:text=To%20tackle%20this%20issue%2C%20we,used%20to%20generate%20intermediate%20answers.&#34;&gt;IterDRAG&lt;/a&gt;. This approach will decompose a query into sub-queries, retrieve documents for each one, answer the sub-query, and then build on the answer by retrieving docs for the second sub-query. Here, we do similar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Given a user-provided topic, use a local LLM (via &lt;a href=&#34;https://ollama.com/search&#34;&gt;Ollama&lt;/a&gt;) to generate a web search query&lt;/li&gt; &#xA; &lt;li&gt;Uses a search engine (configured for &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt;, &lt;a href=&#34;https://www.tavily.com/&#34;&gt;Tavily&lt;/a&gt;, or &lt;a href=&#34;https://www.perplexity.ai/hub/blog/introducing-the-sonar-pro-api&#34;&gt;Perplexity&lt;/a&gt;) to find relevant sources&lt;/li&gt; &#xA; &lt;li&gt;Uses LLM to summarize the findings from web search related to the user-provided research topic&lt;/li&gt; &#xA; &lt;li&gt;Then, it uses the LLM to reflect on the summary, identifying knowledge gaps&lt;/li&gt; &#xA; &lt;li&gt;It generates a new search query to address the knowledge gaps&lt;/li&gt; &#xA; &lt;li&gt;The process repeats, with the summary being iteratively updated with new information from web search&lt;/li&gt; &#xA; &lt;li&gt;It will repeat down the research rabbit hole&lt;/li&gt; &#xA; &lt;li&gt;Runs for a configurable number of iterations (see &lt;code&gt;configuration&lt;/code&gt; tab)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;p&gt;The output of the graph is a markdown file containing the research summary, with citations to the sources used.&lt;/p&gt; &#xA;&lt;p&gt;All sources gathered during research are saved to the graph state.&lt;/p&gt; &#xA;&lt;p&gt;You can visualize them in the graph state, which is visible in LangGraph Studio:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/e8ac1c0b-9acb-4a75-8c15-4e677e92f6cb&#34; alt=&#34;Screenshot 2024-12-05 at 4 08 59 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The final summary is saved to the graph state as well:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/f6d997d5-9de5-495f-8556-7d3891f6bc96&#34; alt=&#34;Screenshot 2024-12-05 at 4 10 11 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deployment Options&lt;/h2&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://langchain-ai.github.io/langgraph/concepts/#deployment-options&#34;&gt;various ways&lt;/a&gt; to deploy this graph.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/langchain-ai/langchain-academy/tree/main/module-6&#34;&gt;Module 6&lt;/a&gt; of LangChain Academy for a detailed walkthrough of deployment options with LangGraph.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript Implementation&lt;/h2&gt; &#xA;&lt;p&gt;A TypeScript port of this project (without Perplexity search) is available at: &lt;a href=&#34;https://github.com/PacoVK/ollama-deep-researcher-ts&#34;&gt;https://github.com/PacoVK/ollama-deep-researcher-ts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running as a Docker container&lt;/h2&gt; &#xA;&lt;p&gt;The included &lt;code&gt;Dockerfile&lt;/code&gt; only runs LangChain Studio with ollama-deep-researcher as a service, but does not include Ollama as a dependant service. You must run Ollama separately and configure the &lt;code&gt;OLLAMA_BASE_URL&lt;/code&gt; environment variable. Optionally you can also specify the Ollama model to use by providing the &lt;code&gt;OLLAMA_MODEL&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repo and build an image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker build -t ollama-deep-researcher .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm -it -p 2024:2024 \&#xA;  -e SEARCH_API=&#34;tavily&#34; \ &#xA;  -e TAVILY_API_KEY=&#34;tvly-***YOUR_KEY_HERE***&#34; \&#xA;  -e OLLAMA_BASE_URL=&#34;http://host.docker.internal:11434/&#34; \&#xA;  -e OLLAMA_MODEL=&#34;llama3.2&#34; \  &#xA;  ollama-deep-researcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: You will see log message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2025-02-10T13:45:04.784915Z [info     ] 🎨 Opening Studio in your browser... [browser_opener] api_variant=local_dev message=🎨 Opening Studio in your browser...&#xA;URL: https://smith.langchain.com/studio/?baseUrl=http://0.0.0.0:2024&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...but the browser will not launch from the container.&lt;/p&gt; &#xA;&lt;p&gt;Instead, visit this link with the correct baseUrl IP address: &lt;a href=&#34;https://smith.langchain.com/studio/thread?baseUrl=http://127.0.0.1:2024&#34;&gt;&lt;code&gt;https://smith.langchain.com/studio/thread?baseUrl=http://127.0.0.1:2024&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>