<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:31:00Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xpayne/gpt-migrate</title>
    <updated>2023-07-06T01:31:00Z</updated>
    <id>tag:github.com,2023-07-06:/0xpayne/gpt-migrate</id>
    <link href="https://github.com/0xpayne/gpt-migrate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily migrate your codebase from one framework or language to another.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;‚óê &amp;nbsp; GPT-Migrate &amp;nbsp; ‚óë&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;Easily migrate your codebase from one framework or language to another.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/0xpayne/gpt-migrate/commits&#34;&gt;&lt;img alt=&#34;GitHub Last Commit&#34; src=&#34;https://img.shields.io/github/last-commit/0xpayne/gpt-migrate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xpayne/gpt-migrate/issues&#34;&gt;&lt;img alt=&#34;GitHub Issues&#34; src=&#34;https://img.shields.io/github/issues/0xpayne/gpt-migrate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xpayne/gpt-migrate/pulls&#34;&gt;&lt;img alt=&#34;GitHub Pull Requests&#34; src=&#34;https://img.shields.io/github/issues-pr/0xpayne/gpt-migrate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xpayne/gpt-migrate/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;Github License&#34; src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xpayne/gpt-migrate&#34;&gt;&lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/0xpayne/gpt-migrate?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;If you&#39;ve ever faced the pain of migrating a codebase to a new framework or language, this project is for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/25165841/250232917-bcc99ce8-99b7-4e3d-a653-f89e163ed825.mp4&#34;&gt;https://user-images.githubusercontent.com/25165841/250232917-bcc99ce8-99b7-4e3d-a653-f89e163ed825.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Migration is a costly, tedious, and non-trivial problem. Do not trust the current version blindly and please use responsibly. Please also be aware that costs can add up quickly as GPT-Migrate is designed to write (and potentially re-write) the entirety of a codebase.&lt;/p&gt; &#xA;&lt;p&gt;However, with the collective brilliance of the OSS community and the current state of LLMs, it is also a very tractable problem.&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker and ensure that it&#39;s running. It&#39;s also recommended that you use at least GPT-4, preferably GPT-4-32k.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API key&lt;/a&gt; and install the python requirements:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;export OPENAI_API_KEY=&amp;lt;your key&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the main script with the target language you want to migrate to:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;python main.py --targetlang nodejs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(Optional) If you&#39;d like GPT-Migrate to validate the unit tests it creates against your app before it tests the migrated app with them, please have your existing app exposed and use the &lt;code&gt;--sourceport&lt;/code&gt; flag. For executing this against the benchmark, open a separate terminal, navigate to the &lt;code&gt;benchmarks/language-pair/source&lt;/code&gt; directory, and run &lt;code&gt;python app.py&lt;/code&gt; after installing the requirements. It will expose on port 5000. Use this with the &lt;code&gt;--sourceport&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default, this script will execute the flask-nodejs benchmark. You can specify the language, source directory, and many other things using the options guide below.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Options&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the behavior of GPT-Migrate by passing the following options to the &lt;code&gt;main.py&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--model&lt;/code&gt;: The Large Language Model to be used. Default is &lt;code&gt;&#34;gpt-4-32k&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--temperature&lt;/code&gt;: Temperature setting for the AI model. Default is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--sourcedir&lt;/code&gt;: Source directory containing the code to be migrated. Default is &lt;code&gt;&#34;../benchmarks/flask-nodejs/source&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--sourcelang&lt;/code&gt;: Source language or framework of the code to be migrated. No default value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--sourceentry&lt;/code&gt;: Entrypoint filename relative to the source directory. For instance, this could be an &lt;code&gt;app.py&lt;/code&gt; or &lt;code&gt;main.py&lt;/code&gt; file for Python. Default is &lt;code&gt;&#34;app.py&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--targetdir&lt;/code&gt;: Directory where the migrated code will live. Default is &lt;code&gt;&#34;../benchmarks/flask-nodejs/target&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--targetlang&lt;/code&gt;: Target language or framework for migration. Default is &lt;code&gt;&#34;nodejs&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--operating_system&lt;/code&gt;: Operating system for the Dockerfile. Common options are &lt;code&gt;&#39;linux&#39;&lt;/code&gt; or &lt;code&gt;&#39;windows&#39;&lt;/code&gt;. Default is &lt;code&gt;&#39;linux&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--testfiles&lt;/code&gt;: Comma-separated list of files that have functions to be tested. For instance, this could be an &lt;code&gt;app.py&lt;/code&gt; or &lt;code&gt;main.py&lt;/code&gt; file for a Python app where your REST endpoints are. Include the full relative path. Default is &lt;code&gt;&#34;app.py&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--sourceport&lt;/code&gt;: (Optional) Port for testing the unit tests file against the original app. No default value. If not included, GPT-Migrate will not attempt to test the unit tests against your original app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--targetport&lt;/code&gt;: Port for testing the unit tests file against the migrated app. Default is &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--guidelines&lt;/code&gt;: Stylistic or small functional guidelines that you&#39;d like to be followed during the migration. For instance, &#34;Use tabs, not spaces&#34;. Default is an empty string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--step&lt;/code&gt;: Step to run. Options are &lt;code&gt;&#39;setup&#39;&lt;/code&gt;, &lt;code&gt;&#39;migrate&#39;&lt;/code&gt;, &lt;code&gt;&#39;test&#39;&lt;/code&gt;, &lt;code&gt;&#39;all&#39;&lt;/code&gt;. Default is &lt;code&gt;&#39;all&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to migrate a Python codebase to Node.js, you might run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py --sourcedir /path/to/my-python-app --sourceentry app.py --targetdir /path/to/my-nodejs-app --targetlang nodejs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will take the Python code in &lt;code&gt;./my-python-app&lt;/code&gt;, migrate it to Node.js, and write the resulting code to &lt;code&gt;./my-nodejs-app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;GPT-assisted debugging&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/25165841/250233075-eff1a535-f40e-42e4-914c-042c69ba9195.mp4&#34;&gt;https://user-images.githubusercontent.com/25165841/250233075-eff1a535-f40e-42e4-914c-042c69ba9195.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñ How it Works&lt;/h2&gt; &#xA;&lt;p&gt;For migrating a repo from &lt;code&gt;--sourcelang&lt;/code&gt; to &lt;code&gt;--targetlang&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;GPT-Migrate first creates a Docker environment for &lt;code&gt;--targetlang&lt;/code&gt;, which is either passed in or assessed automatically by GPT-Migrate.&lt;/li&gt; &#xA; &lt;li&gt;It evaluates your existing code recursively to identify 3rd-party &lt;code&gt;--sourcelang&lt;/code&gt; dependencies and selects corresponding &lt;code&gt;--targetlang&lt;/code&gt; dependencies.&lt;/li&gt; &#xA; &lt;li&gt;It recursively rebuilds new &lt;code&gt;--targetlang&lt;/code&gt; code from your existing code starting from your designated &lt;code&gt;--sourceentry&lt;/code&gt; file. This step can be started from with the &lt;code&gt;--step migrate&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;It spins up the Docker environment with the new codebase, exposing it on &lt;code&gt;--targetport&lt;/code&gt; and iteratively debugging as needed.&lt;/li&gt; &#xA; &lt;li&gt;It develops unit tests using Python&#39;s unittest framework, and optionally tests these against your existing app if it&#39;s running and exposed on &lt;code&gt;--sourceport&lt;/code&gt;, iteratively debugging as needed. This step can be started from with the &lt;code&gt;--step test&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;It tests the new code on &lt;code&gt;--targetport&lt;/code&gt; against these unit tests.&lt;/li&gt; &#xA; &lt;li&gt;It iteratively debugs the code for for you with context from logs, error messages, relevant files, and directory structure. It does so by choosing one or more actions (move, create, or edit files) then executing them. If it wants to execute any sort of shell script (moving files around), it will first ask for clearance. Finally, if at any point it gets stuck or the user ends the debugging loop, it will output directions for the user to follow to move to the next step of the migration.&lt;/li&gt; &#xA; &lt;li&gt;The new codebase is completed and exists in &lt;code&gt;--targetdir&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;üìù Prompt Design&lt;/h3&gt; &#xA;&lt;p&gt;Subprompts are organized in the following fashion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HIERARCHY&lt;/code&gt;: this defines the notion of preferences. There are 4 levels of preference, and each level prioritized more highly than the previous one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p1&lt;/code&gt;: Preference Level 1. These are the most general prompts, and consist of broad guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p2&lt;/code&gt;: Preference Level 2. These are more specific prompts, and consist of guidelines for certain types of actions (e.g., best practices and philosophies for writing code).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p3&lt;/code&gt;: Preference Level 3. These are even more specific prompts, and consist of directions for specific actions (e.g., creating a certain file, debugging, writing tests).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p4&lt;/code&gt;: Preference Level 4. These are the most specific prompts, and consist of formatting for output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Prompts are a combination of subprompts. This concept of tagging and composability can be extended to other properties as well to make prompts even more robust. This is an area we&#39;re highly interested in actively exploring.&lt;/p&gt; &#xA;&lt;p&gt;In this repo, the &lt;code&gt;prompt_constructor()&lt;/code&gt; function takes in one or more subprompts and yields a string which may be formatted with variables, for example with &lt;code&gt;GUIDELINES&lt;/code&gt; being a &lt;code&gt;p1&lt;/code&gt;, &lt;code&gt;WRITE_CODE&lt;/code&gt; being a &lt;code&gt;p2&lt;/code&gt; etc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prompt = prompt_constructor(HIERARCHY, GUIDELINES, WRITE_CODE, DEBUG_TESTFILE, SINGLEFILE).format(targetlang=targetlang,buggyfile=buggyfile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìà Performance&lt;/h2&gt; &#xA;&lt;p&gt;GPT-Migrate is currently in development alpha and is not yet ready for production use. For instance, on the relatively simple benchmarks, it gets through &#34;easy&#34; languages like python or javascript without a hitch ~50% of the time, and cannot get through more complex languages like C++ or Rust without some human assistance.&lt;/p&gt; &#xA;&lt;h2&gt;‚úÖ Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re actively looking to build up a robust benchmark repository. If you have a codebase that you&#39;d like to contribute, please open a PR! The current benchmarks were built from scratch: REST API apps which have a few endpoints and dependency files.&lt;/p&gt; &#xA;&lt;h2&gt;üßó Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Below are improvements on the to-do list. If you&#39;d like to knock any of these or others out, please submit a PR :)&lt;/p&gt; &#xA;&lt;h4&gt;High urgency&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add logic for model input size limiting based on the window size. See issue &lt;a href=&#34;https://github.com/0xpayne/gpt-migrate/issues/2&#34;&gt;#2&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Med urgency&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add unit tests to the entire project for better reliability and CI/CD&lt;/li&gt; &#xA; &lt;li&gt;Add more benchmark examples, especially larger repos&lt;/li&gt; &#xA; &lt;li&gt;Add functionality to let the LLM request access to dependency functions in other files as it debugs&lt;/li&gt; &#xA; &lt;li&gt;Add support for other LLMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Low urgency&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable internet search requests as the model debugs&lt;/li&gt; &#xA; &lt;li&gt;Identify and compile language-specific issues + solve for them&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì£ Call to Action&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re looking for talented contributors. Whether you have a particular passion about a specific language or framework, want to help in creating a more robust test suite, or generally have interesting ideas on how to make this better, we&#39;d love to have you!&lt;/p&gt; &#xA;&lt;h2&gt;üõ† Expert-Assisted Migration&lt;/h2&gt; &#xA;&lt;p&gt;Due to the inflow of requests, we&#39;ve decided to create a standardized process for helping people with their migrations. If you&#39;re a company that needs help with a big migration or an expert that is willing to help with them, please visit the following website: &lt;a href=&#34;https://gpt-migrate.com/&#34;&gt;https://gpt-migrate.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Join the conversation on &lt;a href=&#34;https://twitter.com/joshpxyne/status/1675254164165910528&#34;&gt;Twitter&lt;/a&gt;!&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>paul-gauthier/aider</title>
    <updated>2023-07-06T01:31:00Z</updated>
    <id>tag:github.com,2023-07-06:/paul-gauthier/aider</id>
    <link href="https://github.com/paul-gauthier/aider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;aider is GPT powered coding in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aider is GPT powered coding in your terminal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;aider&lt;/code&gt; is a command-line chat tool that allows you to write and edit code with OpenAI&#39;s GPT models. You can ask GPT to help you start a new project, or modify code in your existing git repo. Aider makes it easy to git commit, diff &amp;amp; undo changes proposed by GPT without copy/pasting. It also has features that &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;help GPT-4 understand and modify larger codebases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/assets/screencast.svg?sanitize=true&#34; alt=&#34;aider screencast&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#example-chat-transcripts&#34;&gt;Example chat transcripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#in-chat-commands&#34;&gt;In-chat commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#tips&#34;&gt;Tips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paul-gauthier/aider/main/#gpt-4-vs-gpt-35&#34;&gt;GPT-4 vs GPT-3.5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install aider-chat&#xA;$ export OPENAI_API_KEY=your-key-goes-here&#xA;$ aider myapp.py&#xA;&#xA;Using git repo: .git&#xA;Added myapp.py to the chat.&#xA;&#xA;myapp.py&amp;gt; change the fibonacci function from recursion to iteration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example chat transcripts&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example transcripts that show how you can chat with &lt;code&gt;aider&lt;/code&gt; to write and edit code with GPT-4.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aider.chat/examples/hello-world-flask.html&#34;&gt;&lt;strong&gt;Hello World Flask App&lt;/strong&gt;&lt;/a&gt;: Start from scratch and have GPT create a simple Flask app with various endpoints, such as adding two numbers and calculating the Fibonacci sequence.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aider.chat/examples/2048-game.html&#34;&gt;&lt;strong&gt;Javascript Game Modification&lt;/strong&gt;&lt;/a&gt;: Dive into an existing open-source repo, and get GPT&#39;s help to understand it and make modifications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aider.chat/examples/complex-change.html&#34;&gt;&lt;strong&gt;Complex Multi-file Change with Debugging&lt;/strong&gt;&lt;/a&gt;: GPT makes a complex code change that is coordinated across multiple source files, and resolves bugs by reviewing error output and doc snippets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aider.chat/examples/add-test.html&#34;&gt;&lt;strong&gt;Create a Black Box Test Case&lt;/strong&gt;&lt;/a&gt;: GPT creates a &#34;black box&#34; test case without access to the source of the method being tested, using only a &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;high level map of the repository based on ctags&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find more chat transcripts on the &lt;a href=&#34;https://aider.chat/examples/&#34;&gt;examples page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with GPT about your code by launching &lt;code&gt;aider&lt;/code&gt; from the command line with set of source files to discuss and edit together. Aider lets GPT see and edit the content of those files.&lt;/li&gt; &#xA; &lt;li&gt;Request new features, changes, improvements, or bug fixes to your code. Ask for new test cases, updated documentation or code refactors.&lt;/li&gt; &#xA; &lt;li&gt;Aider will apply the edits suggested by GPT directly to your source files.&lt;/li&gt; &#xA; &lt;li&gt;Aider will automatically commit each changeset to your local git repo with a descriptive commit message. These frequent, automatic commits provide a safety net. It&#39;s easy to undo changes or use standard git workflows to manage longer sequences of changes.&lt;/li&gt; &#xA; &lt;li&gt;You can use aider with multiple source files at once, so GPT can make coordinated code changes across all of them in a single changeset/commit.&lt;/li&gt; &#xA; &lt;li&gt;Aider can &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;give &lt;em&gt;GPT-4&lt;/em&gt; a map of your entire git repo&lt;/a&gt;, which helps it understand and modify large codebases.&lt;/li&gt; &#xA; &lt;li&gt;You can also edit files by hand using your editor while chatting with aider. Aider will notice these out-of-band edits and ask if you&#39;d like to commit them. This lets you bounce back and forth between the aider chat and your editor, to collaboratively code with GPT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the package with pip:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyPI: &lt;code&gt;python -m pip install aider-chat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub: &lt;code&gt;python -m pip install git+https://github.com/paul-gauthier/aider.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Local clone: &lt;code&gt;python -m pip install -e .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set up your OpenAI API key:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As an environment variable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;export OPENAI_API_KEY=sk-...&lt;/code&gt; on Linux or Mac&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;setx OPENAI_API_KEY sk-...&lt;/code&gt; in Windows PowerShell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Or include &lt;code&gt;openai-api-key: sk-...&lt;/code&gt; in an &lt;code&gt;.aider.config.yml&lt;/code&gt; file in your current directory or at the root of your git repo, alongside the &lt;code&gt;.git&lt;/code&gt; dir.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Optionally, install &lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;universal ctags&lt;/a&gt;. This is helpful if you plan to use aider and GPT-4 with repositories that have more than a handful of files. This allows aider to build a &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;map of your entire git repo&lt;/a&gt; and share it with GPT to help it better understand and modify large codebases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;ctags&lt;/code&gt; command needs to be on your shell path so that it will run by default when aider invokes &lt;code&gt;ctags ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You need a build which includes the json feature. You can check by running &lt;code&gt;ctags --version&lt;/code&gt; and looking for &lt;code&gt;+json&lt;/code&gt; in the &lt;code&gt;Optional compiled features&lt;/code&gt; list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;aider&lt;/code&gt; tool by executing the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aider &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your pip install did not place the &lt;code&gt;aider&lt;/code&gt; executable on your path, you can invoke aider like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m aider.main &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;file1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;file2&amp;gt;&lt;/code&gt;, etc., with the paths to the source code files you want to work on. These files will be &#34;added to the chat session&#34;, so that GPT can see their contents and edit them according to your instructions.&lt;/p&gt; &#xA;&lt;p&gt;You can also just launch &lt;code&gt;aider&lt;/code&gt; anywhere in a git repo without naming files on the command line. It will discover all the files in the repo. You can then add and remove individual files in the chat session with the &lt;code&gt;/add&lt;/code&gt; and &lt;code&gt;/drop&lt;/code&gt; chat commands described below. If you or GPT mention one of the repo&#39;s filenames in the conversation, aider will ask if you&#39;d like to add it to the chat.&lt;/p&gt; &#xA;&lt;p&gt;Aider will work best if you think about which files need to be edited to make your change and add them to the chat. Aider has some ability to help GPT figure out which files to edit all by itself, but the most effective approach is to explicitly add the needed files to the chat yourself.&lt;/p&gt; &#xA;&lt;p&gt;Aider also has many additional command-line options, environment variables or configuration file to set many options. See &lt;code&gt;aider --help&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;In-chat commands&lt;/h2&gt; &#xA;&lt;p&gt;Aider supports commands from within the chat, which all start with &lt;code&gt;/&lt;/code&gt;. Here are some of the most useful in-chat commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/add &amp;lt;file&amp;gt;&lt;/code&gt;: Add matching files to the chat session.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/drop &amp;lt;file&amp;gt;&lt;/code&gt;: Remove matching files from the chat session.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/undo&lt;/code&gt;: Undo the last git commit if it was done by aider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/diff&lt;/code&gt;: Display the diff of the last aider commit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/run &amp;lt;command&amp;gt;&lt;/code&gt;: Run a shell command and optionally add the output to the chat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/help&lt;/code&gt;: Show help about all commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Think about which files need to be edited to make your change and add them to the chat. Aider has some ability to help GPT figure out which files to edit all by itself, but the most effective approach is to explicitly add the needed files to the chat yourself.&lt;/li&gt; &#xA; &lt;li&gt;Large changes are best performed as a sequence of thoughtful bite sized steps, where you plan out the approach and overall design. Walk GPT through changes like you might with a junior dev. Ask for a refactor to prepare, then ask for the actual change. Spend the time to ask for code quality/structure improvements.&lt;/li&gt; &#xA; &lt;li&gt;Use Control-C to safely interrupt GPT if it isn&#39;t providing a useful response. The partial response remains in the conversation, so you can refer to it when you reply to GPT with more information or direction.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;/run&lt;/code&gt; command to run tests, linters, etc and show the output to GPT so it can fix any issues.&lt;/li&gt; &#xA; &lt;li&gt;Enter a multiline chat message by entering &lt;code&gt;{&lt;/code&gt; alone on the first line. End the multiline message with &lt;code&gt;}&lt;/code&gt; alone on the last line.&lt;/li&gt; &#xA; &lt;li&gt;If your code is throwing an error, share the error output with GPT using &lt;code&gt;/run&lt;/code&gt; or by pasting it into the chat. Let GPT figure out and fix the bug.&lt;/li&gt; &#xA; &lt;li&gt;GPT knows about a lot of standard tools and libraries, but may get some of the fine details wrong about APIs and function arguments. You can paste doc snippets into the chat to resolve these issues.&lt;/li&gt; &#xA; &lt;li&gt;Aider will notice if you launch it on a git repo with uncommitted changes and offer to commit them before proceeding.&lt;/li&gt; &#xA; &lt;li&gt;GPT can only see the content of the files you specifically &#34;add to the chat&#34;. Aider also sends GPT-4 a &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;map of your entire git repo&lt;/a&gt;. So GPT may ask to see additional files if it feels that&#39;s needed for your requests.&lt;/li&gt; &#xA; &lt;li&gt;I also shared some general &lt;a href=&#34;https://news.ycombinator.com/item?id=36211879&#34;&gt;GPT coding tips on Hacker News&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GPT-4 vs GPT-3.5&lt;/h2&gt; &#xA;&lt;p&gt;Aider supports all of OpenAI&#39;s chat models, including the the brand new &lt;code&gt;gpt-3.5-turbo-16k&lt;/code&gt; model.&lt;/p&gt; &#xA;&lt;p&gt;You will probably get the best results with one of the GPT-4 models, because of their large context windows, adherance to system prompt instructions and greater competance at coding tasks. The GPT-4 models are able to structure code edits as simple &#34;diffs&#34; and use a &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;repository map&lt;/a&gt; to improve their ability to make changes in larger codebases.&lt;/p&gt; &#xA;&lt;p&gt;The GPT-3.5 models are supported more experimentally and are limited to editing somewhat smaller codebases. They are less able to follow instructions and aren&#39;t able to return code edits in a compact &#34;diff&#34; format. So aider has to ask GPT-3.5 to return a new copy of the &#34;whole file&#34; with edits included. This rapidly uses up tokens and can hit the limits of the context window.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed information and a quantitative comparison, here are &lt;a href=&#34;https://aider.chat/docs/benchmarks.html&#34;&gt;code editing benchmark results for GPT-3.5 and GPT-4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Aider disables the &lt;a href=&#34;https://aider.chat/docs/ctags.html&#34;&gt;repository map feature&lt;/a&gt; when used with GPT-3.5 models. The &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; context window is too small to include a repo map. Evaluation is still needed to determine if &lt;code&gt;gpt-3.5-turbo-16k&lt;/code&gt; can make use of a repo map.&lt;/p&gt; &#xA;&lt;p&gt;In practice, this means you can use aider to edit a set of source files that total up to the sizes below. You can (and should) add just the specific set of files to the chat that are relevant to the change you are requesting. This minimizes your use of the context window, as well as costs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Context&lt;br&gt;Size&lt;/th&gt; &#xA;   &lt;th&gt;Edit&lt;br&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Max&lt;br&gt;File Size&lt;/th&gt; &#xA;   &lt;th&gt;Max&lt;br&gt;File Size&lt;/th&gt; &#xA;   &lt;th&gt;Repo&lt;br&gt;Map?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-3.5-turbo&lt;/td&gt; &#xA;   &lt;td&gt;4k tokens&lt;/td&gt; &#xA;   &lt;td&gt;whole file&lt;/td&gt; &#xA;   &lt;td&gt;2k tokens&lt;/td&gt; &#xA;   &lt;td&gt;~8k bytes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-3.5-turbo-16k&lt;/td&gt; &#xA;   &lt;td&gt;16k tokens&lt;/td&gt; &#xA;   &lt;td&gt;whole file&lt;/td&gt; &#xA;   &lt;td&gt;8k tokens&lt;/td&gt; &#xA;   &lt;td&gt;~32k bytes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-4&lt;/td&gt; &#xA;   &lt;td&gt;8k tokens&lt;/td&gt; &#xA;   &lt;td&gt;diffs&lt;/td&gt; &#xA;   &lt;td&gt;8k tokens&lt;/td&gt; &#xA;   &lt;td&gt;~32k bytes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-4-32k&lt;/td&gt; &#xA;   &lt;td&gt;32k tokens&lt;/td&gt; &#xA;   &lt;td&gt;diffs&lt;/td&gt; &#xA;   &lt;td&gt;32k tokens&lt;/td&gt; &#xA;   &lt;td&gt;~128k bytes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Kind words from users&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The best AI coding assistant so far.&#34; -- &lt;a href=&#34;https://www.youtube.com/watch?v=df8afeb1FY8&#34;&gt;Matthew Berman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Aider ... has easily quadrupled my coding productivity.&#34; -- &lt;a href=&#34;https://news.ycombinator.com/item?id=36212100&#34;&gt;SOLAR_FIELDS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;What an amazing tool. It&#39;s incredible.&#34; -- &lt;a href=&#34;https://github.com/paul-gauthier/aider/issues/6#issue-1722897858&#34;&gt;valyagolev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;It was WAY faster than I would be getting off the ground and making the first few working versions.&#34; -- &lt;a href=&#34;https://twitter.com/d_feldman/status/1662295077387923456&#34;&gt;Daniel Feldman&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>unlearning-challenge/starting-kit</title>
    <updated>2023-07-06T01:31:00Z</updated>
    <id>tag:github.com,2023-07-06:/unlearning-challenge/starting-kit</id>
    <link href="https://github.com/unlearning-challenge/starting-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starting kit for the NeurIPS 2023 unlearning challenge&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/unlearning-challenge/starting-kit/assets/277639/d1fa7889-5d91-4e6d-8082-7d59ef728f9c&#34; style=&#34;width: 100px&#34;&gt; &#xA;&lt;h1&gt;Starting kit for the NeurIPS 2023 Machine Unlearning Challenge&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the starting kit for the NeurIPS 2023 Machine Unlearning Challenge. The starting kit currently contains the following examples:&lt;/p&gt; &#xA;&lt;h3&gt;Unlearning on CIFAR10&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/unlearning-challenge/starting-kit/assets/277639/acee217a-9ecd-484b-be81-8dcf5992eece&#34; alt=&#34;sample images from the CIFAR10 dataset&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The notebook &lt;a href=&#34;https://nbviewer.org/github/unlearning-challenge/starting-kit/tree/main/unlearning-CIFAR10.ipynb&#34;&gt;&lt;code&gt;unlearning-CIFAR10.ipynb&lt;/code&gt;&lt;/a&gt; provides a foundation for participants to build their unlearning models on the CIFAR-10 dataset. This jupyter notebook can be run locally, &lt;a href=&#34;https://colab.research.google.com/github/unlearning-challenge/starting-kit/blob/main/unlearning-CIFAR10.ipynb&#34;&gt;on Colab&lt;/a&gt;, or &lt;a href=&#34;https://kaggle.com/kernels/welcome?src=https://raw.githubusercontent.com/unlearning-challenge/starting-kit/main/unlearning-CIFAR10.ipynb&#34;&gt;on Kaggle&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>