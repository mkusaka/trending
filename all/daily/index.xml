<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-09T01:31:07Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ixahmedxi/noodle</title>
    <updated>2023-07-09T01:31:07Z</updated>
    <id>tag:github.com,2023-07-09:/ixahmedxi/noodle</id>
    <link href="https://github.com/ixahmedxi/noodle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Education Platform&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/ixahmedxi/noodle/raw/main/apps/web/public/android-chrome-192x192.png?raw=true&#34; alt=&#34;Noodle logo&#34; width=&#34;75&#34;&gt; &#xA; &lt;h1&gt;Noodle &lt;br&gt; Rethinking Student Productivity&lt;/h1&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-4-orange.svg?style=for-the-badge&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/gh/ixahmedxi/noodle?style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/ixahmedxi/noodle?style=for-the-badge&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/ixahmedxi/noodle/main?style=for-the-badge&#34; alt=&#34;GitHub last commit (branch)&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This is a work-in-progress and not the finished product.&lt;/p&gt; &#xA; &lt;p&gt;Feel free to leave feature suggestions but please don&#39;t open issues for bugs or support requests just yet.&lt;/p&gt; &#xA; &lt;p&gt;Follow me on twitter &lt;a href=&#34;https://twitter.com/ixahmedxii&#34;&gt;@ixahmedxii&lt;/a&gt; for updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ixahmedxi/noodle/raw/main/apps/web/public/preview.png?raw=true&#34; alt=&#34;Noodle Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📁 Module/Subject Management&lt;/li&gt; &#xA; &lt;li&gt;📒 Note taking&lt;/li&gt; &#xA; &lt;li&gt;🗄️ Task Management&lt;/li&gt; &#xA; &lt;li&gt;✅ Assignment grade calculator&lt;/li&gt; &#xA; &lt;li&gt;⚡️ Flash cards&lt;/li&gt; &#xA; &lt;li&gt;🤖 Powerful AI automations&lt;/li&gt; &#xA; &lt;li&gt;📆 Timetable&lt;/li&gt; &#xA; &lt;li&gt;📈 Insights&lt;/li&gt; &#xA; &lt;li&gt;🧠 Mind maps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;Typically for a student, you need to be using multiple applications just to be managing your education well. This would include a note taking, calendar, task management, grade calculator, flash cards and more apps. This is tedious to manage and can be overwhelming for students.&lt;/p&gt; &#xA;&lt;p&gt;Noodle is a platform that aims to solve this problem by providing a single platform for students to manage everything to do with their education. And with the power of having all of that data in one place, we can provide students with powerful insights and automation to help them be more productive.&lt;/p&gt; &#xA;&lt;p&gt;As an open-source platform, Noodle strives to cultivate a community of students and developers who can collectively contribute to building the most exceptional student productivity platform.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#ixahmedxi/noodle&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=ixahmedxi/noodle&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExMnBkMmJ5d2FhbHBocm90ams1MzF5dTI5emVtNGhwMTFpdmp3YnZiYiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/YnkMcHgNIMW4Yfmjxr/giphy.gif&#34; alt=&#34;Stonks GIF&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://elsakaan.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/20271968?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ahmed Elsakaan&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ahmed Elsakaan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#audio-ixahmedxi&#34; title=&#34;Audio&#34;&gt;🔊&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#video-ixahmedxi&#34; title=&#34;Videos&#34;&gt;📹&lt;/a&gt; &lt;a href=&#34;https://github.com/ixahmedxi/noodle/commits?author=ixahmedxi&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/ixahmedxi/noodle/commits?author=ixahmedxi&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#a11y-ixahmedxi&#34; title=&#34;Accessibility&#34;&gt;️️️️♿️&lt;/a&gt; &lt;a href=&#34;https://github.com/ixahmedxi/noodle/issues?q=author%3Aixahmedxi&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#blog-ixahmedxi&#34; title=&#34;Blogposts&#34;&gt;📝&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#business-ixahmedxi&#34; title=&#34;Business development&#34;&gt;💼&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#content-ixahmedxi&#34; title=&#34;Content&#34;&gt;🖋&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#data-ixahmedxi&#34; title=&#34;Data&#34;&gt;🔣&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#design-ixahmedxi&#34; title=&#34;Design&#34;&gt;🎨&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#example-ixahmedxi&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#eventOrganizing-ixahmedxi&#34; title=&#34;Event Organizing&#34;&gt;📋&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#financial-ixahmedxi&#34; title=&#34;Financial&#34;&gt;💵&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#fundingFinding-ixahmedxi&#34; title=&#34;Funding Finding&#34;&gt;🔍&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#ideas-ixahmedxi&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#maintenance-ixahmedxi&#34; title=&#34;Maintenance&#34;&gt;🚧&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#mentoring-ixahmedxi&#34; title=&#34;Mentoring&#34;&gt;🧑‍🏫&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#platform-ixahmedxi&#34; title=&#34;Packaging/porting to new platform&#34;&gt;📦&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#plugin-ixahmedxi&#34; title=&#34;Plugin/utility libraries&#34;&gt;🔌&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#projectManagement-ixahmedxi&#34; title=&#34;Project Management&#34;&gt;📆&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#promotion-ixahmedxi&#34; title=&#34;Promotion&#34;&gt;📣&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#question-ixahmedxi&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#research-ixahmedxi&#34; title=&#34;Research&#34;&gt;🔬&lt;/a&gt; &lt;a href=&#34;https://github.com/ixahmedxi/noodle/pulls?q=is%3Apr+reviewed-by%3Aixahmedxi&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#security-ixahmedxi&#34; title=&#34;Security&#34;&gt;🛡️&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#tool-ixahmedxi&#34; title=&#34;Tools&#34;&gt;🔧&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#translation-ixahmedxi&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt; &lt;a href=&#34;https://github.com/ixahmedxi/noodle/commits?author=ixahmedxi&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#tutorial-ixahmedxi&#34; title=&#34;Tutorials&#34;&gt;✅&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#talk-ixahmedxi&#34; title=&#34;Talks&#34;&gt;📢&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#userTesting-ixahmedxi&#34; title=&#34;User Testing&#34;&gt;📓&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#infra-ixahmedxi&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;🚇&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/antoniobfm&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/23482001?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Antônio Moraes&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Antônio Moraes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ixahmedxi/noodle/commits?author=antoniobfm&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://nrwl.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/23692104?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Nrwl&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nrwl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ixahmedxi/noodle/main/#financial-nrwl&#34; title=&#34;Financial&#34;&gt;💵&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://www.liamsegura.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/102547056?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Liam Segura&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Liam Segura&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ixahmedxi/noodle/commits?author=liamsegura&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>piotr022/UV_K5_playground</title>
    <updated>2023-07-09T01:31:07Z</updated>
    <id>tag:github.com,2023-07-09:/piotr022/UV_K5_playground</id>
    <link href="https://github.com/piotr022/UV_K5_playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UV_K5_playground&lt;/h1&gt; &#xA;&lt;h2&gt;src/spectrum &lt;img src=&#34;https://github.com/piotr022/UV_K5_playground/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;auto release build&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/piotr022/UV_K5_playground/main/docs/spectrum.gif&#34; alt=&#34;rssi printer&#34;&gt;&lt;br&gt; &lt;strong&gt;update&lt;/strong&gt;&lt;br&gt; Spectrum scanner. It prints a spectrum graph. Zoom in well as resolution can be controled via keyboard.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download mod &lt;a href=&#34;https://github.com/piotr022/UV_K5_playground/releases/latest&#34;&gt;uv_k5_01_26_spectrum_2MHz_encoded.bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;to enable spectum view press &lt;strong&gt;flash light button&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;hold &lt;strong&gt;up&lt;/strong&gt; or &lt;strong&gt;down&lt;/strong&gt; key to change center frequency&lt;/li&gt; &#xA; &lt;li&gt;press &lt;strong&gt;8&lt;/strong&gt; / &lt;strong&gt;2&lt;/strong&gt; for zoom in / zoom out&lt;/li&gt; &#xA; &lt;li&gt;press &lt;strong&gt;1&lt;/strong&gt; / &lt;strong&gt;7&lt;/strong&gt; to increase / decrease resolution (smaller resolution == faster update rate)&lt;/li&gt; &#xA; &lt;li&gt;press &lt;strong&gt;PTT&lt;/strong&gt; or &lt;strong&gt;EXIT&lt;/strong&gt; to disable spectrum view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To show your appreciation and support for ongoing work, you can make a &lt;a href=&#34;https://paypal.me/sq9p&#34;&gt;donation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;src/rssi_sbar &lt;img src=&#34;https://github.com/piotr022/UV_K5_playground/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;auto release build&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/piotr022/UV_K5_playground/main/docs/rssi_sbar.png&#34; alt=&#34;rssi printer&#34;&gt;&lt;br&gt; sbar with calibrated S steps&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download mod &lt;a href=&#34;https://github.com/piotr022/UV_K5_playground/releases/latest&#34;&gt;uv_k5_01_26_rssi_sbar_encoded.bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;flash with original quansheng update tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;src/rssi_printer &lt;img src=&#34;https://github.com/piotr022/UV_K5_playground/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;auto release build&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/piotr022/UV_K5_playground/main/docs/rssi_printer.png&#34; alt=&#34;rssi printer&#34;&gt;&lt;br&gt; mod for printing rx signal level (RSSI) in numerical format, also includes small signal level chart.&lt;/p&gt; &#xA;&lt;h3&gt;uploading to radio&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download mod &lt;a href=&#34;https://github.com/piotr022/UV_K5_playground/releases/latest&#34;&gt;uv_k5_01_26_rssi_printer_encoded.bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;upload it through original firmware update tool:&lt;br&gt; &lt;a href=&#34;http://en.qsfj.com/support/downloads/3002&#34;&gt;Quancheng website&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;src/pong &lt;img src=&#34;https://github.com/piotr022/UV_K5_playground/actions/workflows/c-cpp.yml/badge.svg?sanitize=true&#34; alt=&#34;auto release build&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/piotr022/UV_K5_playground/main/docs/pong_game.gif&#34; alt=&#34;rssi printer&#34;&gt;&lt;br&gt; this is useless&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download mod &lt;a href=&#34;https://github.com/piotr022/UV_K5_playground/releases/latest&#34;&gt;uv_k5_01_26_pong_game_encoded.bin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;flash masking and memory layout&lt;/h2&gt; &#xA;&lt;p&gt;Chinese mcu DP32G030 has feature called flash masking, here is how it works: &lt;img src=&#34;https://raw.githubusercontent.com/piotr022/UV_K5_playground/main/docs/memory-map-original-fw.png&#34; alt=&#34;original_memory layout&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;libs/k5_uv_system (par_runner)&lt;/h2&gt; &#xA;&lt;p&gt;The idea is to run this firmware &#39;parallel&#39; with the original Quencheng firmware. This can be achieved by relocating the original vector table to the end of the original firmware, and placing a new vector table at the beginning, with entities pointing to the par_runner functions that wrap the original firmware handlers.&lt;br&gt; Every interrupt is first processed by the par_runner handlers, which can perform tasks like responding to a button press(todo), before invoking the original firmware handler&lt;/p&gt; &#xA;&lt;h4&gt;flash memory layout&lt;/h4&gt; &#xA;&lt;p&gt;When building the &#34;par_runner&#34; target automaticly &#34;bootloader&#34; target will be build &lt;img src=&#34;https://raw.githubusercontent.com/piotr022/UV_K5_playground/main/docs/memory-map.png&#34; alt=&#34;memory layout&#34;&gt; building par_runner target will result in following outputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;par_runner.bin / .hex - right part of image, can be used to generate encrypted firmware compatible with orginal Quescheng update tool&lt;/li&gt; &#xA; &lt;li&gt;bootloader.bin - stripped bootloader from orginal firmware&lt;/li&gt; &#xA; &lt;li&gt;par_runner_with_bootloader.bin - complete firmware image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change the original firmware that will be wrapped and placed into the original firmware section, replace &lt;code&gt;./original_fw/original_fw.bin&lt;/code&gt; or set the variable &lt;code&gt;CMakeLists.txt set(ORGINAL_FW_BIN orginal_fw.bin)&lt;/code&gt; in ./orginal_fw/CMakeLists.txt and rebuild par_runner&lt;/p&gt; &#xA;&lt;h2&gt;build system installation&lt;/h2&gt; &#xA;&lt;p&gt;currently tested on windows, requred:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;arm-none-eabi-gcc&lt;/li&gt; &#xA; &lt;li&gt;python (i have newest version)&lt;/li&gt; &#xA; &lt;li&gt;cmake&lt;/li&gt; &#xA; &lt;li&gt;ninja&lt;/li&gt; &#xA; &lt;li&gt;open-ocd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All folders with executables of the above programs should be added to the PATH environment variable.&lt;/p&gt; &#xA;&lt;p&gt;for debugging:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vs code &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cortex-Debug plugin&lt;/li&gt; &#xA;   &lt;li&gt;CMake plugin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;building&lt;/h3&gt; &#xA;&lt;h5&gt;via terminal&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;$ mkdir build&lt;/code&gt; &lt;code&gt;$ cd build&lt;/code&gt; &lt;code&gt;$ cmake ../ -G Ninja&lt;/code&gt; &lt;code&gt;$ ninja par_runner&lt;/code&gt; outputs ./build/src/par_runner/par_runner.bin / hex / elf&lt;/p&gt; &#xA;&lt;h6&gt;uploading&lt;/h6&gt; &#xA;&lt;p&gt;&lt;code&gt;$ ninja par_runner_flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;via VS Code&lt;/h5&gt; &#xA;&lt;p&gt;Select the par_runner build target in the bottom bar and press build.&lt;/p&gt; &#xA;&lt;h6&gt;uploading&lt;/h6&gt; &#xA;&lt;p&gt;Enter the &#39;Run &amp;amp; Debug&#39; tab, select &#39;kwaczek DBG&#39;, and press run.&lt;/p&gt; &#xA;&lt;h2&gt;useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;currently firmare that is wrapped by par_runner comes from Tunas1337 mod k5_26_encrypted_18to1300MHz.bin &lt;a href=&#34;https://github.com/Tunas1337/UV-K5-Modded-Firmwares&#34;&gt;UV-K5-Modded-Firmwares&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;crypting/encrypting/modding py tools &lt;a href=&#34;https://github.com/amnemonic/Quansheng_UV-K5_Firmware&#34;&gt;amnemonic repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m not responsible for radios bricked by this trojan xD&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lrh2000/StackRot</title>
    <updated>2023-07-09T01:31:07Z</updated>
    <id>tag:github.com,2023-07-09:/lrh2000/StackRot</id>
    <link href="https://github.com/lrh2000/StackRot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CVE-2023-3269: Linux kernel privilege escalation vulnerability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;StackRot (CVE-2023-3269): Linux kernel privilege escalation vulnerability&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This serves as an &#34;early&#34; disclosure of the StackRot vulnerability, in compliance with &lt;a href=&#34;https://oss-security.openwall.org/wiki/mailing-lists/distros&#34;&gt;the policy of the linux-distros list&lt;/a&gt;. While all the essential vulnerability details have been provided here, the complete exploit code and a comprehensive write-up will be made publicly available no later than the end of July. &lt;a href=&#34;https://www.openwall.com/lists/oss-security/2023/07/05/1&#34;&gt;The oss-security thread&lt;/a&gt; will be notified, and any updates will be reflected in this GitHub repository.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A flaw was found in the handling of stack expansion in the Linux kernel 6.1 through 6.4, aka &#34;Stack Rot&#34;. The maple tree, responsible for managing virtual memory areas, can undergo node replacement without properly acquiring the MM write lock, leading to use-after-free issues. An unprivileged local user could use this flaw to compromise the kernel and escalate their privileges.&lt;/p&gt; &#xA;&lt;p&gt;As StackRot is a Linux kernel vulnerability found in the memory management subsystem, it affects almost all kernel configurations and requires minimal capabilities to trigger. However, it should be noted that maple nodes are freed using RCU callbacks, delaying the actual memory deallocation until after the RCU grace period. Consequently, exploiting this vulnerability is considered challenging.&lt;/p&gt; &#xA;&lt;p&gt;To the best of my knowledge, there are currently no publicly available exploits targeting use-after-free-by-RCU (UAFBR) bugs. This marks the first instance where UAFBR bugs have been proven to be exploitable, even without the presence of CONFIG_PREEMPT or CONFIG_SLAB_MERGE_DEFAULT settings. Notably, this exploit has been successfully demonstrated in the environment provided by &lt;a href=&#34;https://google.github.io/kctf/vrp.html&#34;&gt;Google kCTF VRP&lt;/a&gt; (&lt;a href=&#34;https://storage.googleapis.com/kctf-vrp-public-files/bzImage_upstream_6.1.25&#34;&gt;bzImage_upstream_6.1.25&lt;/a&gt;, &lt;a href=&#34;https://storage.googleapis.com/kctf-vrp-public-files/bzImage_upstream_6.1.25_config&#34;&gt;config&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The StackRot vulnerability has been present in the Linux kernel since version 6.1 when the VMA tree structure was &lt;a href=&#34;https://lore.kernel.org/lkml/20220906194824.2110408-1-Liam.Howlett@oracle.com/&#34;&gt;changed&lt;/a&gt; from red-black trees to maple trees.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Whenever the &lt;code&gt;mmap()&lt;/code&gt; system call is utilized to establish a memory mapping, the kernel generates a structure called &lt;code&gt;vm_area_struct&lt;/code&gt; to represent the corresponding virtual memory area (VMA). This structure stores various information including flags, properties, and other pertinent details related to the mapping.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct vm_area_struct {&#xA;        long unsigned int          vm_start;             /*     0     8 */&#xA;        long unsigned int          vm_end;               /*     8     8 */&#xA;        struct mm_struct *         vm_mm;                /*    16     8 */&#xA;        pgprot_t                   vm_page_prot;         /*    24     8 */&#xA;        long unsigned int          vm_flags;             /*    32     8 */&#xA;        union {&#xA;                struct {&#xA;                        struct rb_node rb __attribute__((__aligned__(8))); /*    40    24 */&#xA;                        /* --- cacheline 1 boundary (64 bytes) --- */&#xA;                        long unsigned int rb_subtree_last; /*    64     8 */&#xA;                } __attribute__((__aligned__(8))) shared __attribute__((__aligned__(8))); /*    40    32 */&#xA;                struct anon_vma_name * anon_name;        /*    40     8 */&#xA;        } __attribute__((__aligned__(8)));               /*    40    32 */&#xA;        /* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */&#xA;        struct list_head           anon_vma_chain;       /*    72    16 */&#xA;        struct anon_vma *          anon_vma;             /*    88     8 */&#xA;        const struct vm_operations_struct  * vm_ops;     /*    96     8 */&#xA;        long unsigned int          vm_pgoff;             /*   104     8 */&#xA;        struct file *              vm_file;              /*   112     8 */&#xA;        void *                     vm_private_data;      /*   120     8 */&#xA;        /* --- cacheline 2 boundary (128 bytes) --- */&#xA;        atomic_long_t              swap_readahead_info;  /*   128     8 */&#xA;        struct vm_userfaultfd_ctx  vm_userfaultfd_ctx;   /*   136     0 */&#xA;&#xA;        /* size: 136, cachelines: 3, members: 14 */&#xA;        /* forced alignments: 1 */&#xA;        /* last cacheline: 8 bytes */&#xA;} __attribute__((__aligned__(8)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subsequently, when the kernel encounters page faults or other memory-related system calls, it requires fast lookup of the VMA solely based on the address. Previously, the VMAs were managed using red-black trees. However, starting from Linux kernel version 6.1, the migration to maple trees took place. &lt;a href=&#34;https://docs.kernel.org/6.4/core-api/maple_tree.html&#34;&gt;Maple trees&lt;/a&gt; are RCU-safe B-tree data structures optimized for storing non-overlapping ranges. Nonetheless, their intricate nature adds complexity to the codebase and introduces the StackRot vulnerability.&lt;/p&gt; &#xA;&lt;p&gt;In essence, the maple tree is composed of maple nodes. Throughout this article, it is assumed that the maple tree has only a single root node, which can contain a maximum of 16 intervals. Each interval can either represent a gap or point to a VMA. Thus, no gaps are allowed between two intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct maple_range_64 {&#xA;        struct maple_pnode *       parent;               /*     0     8 */&#xA;        long unsigned int          pivot[15];            /*     8   120 */&#xA;        /* --- cacheline 2 boundary (128 bytes) --- */&#xA;        union {&#xA;                void *             slot[16];             /*   128   128 */&#xA;                struct {&#xA;                        void *     pad[15];              /*   128   120 */&#xA;                        /* --- cacheline 3 boundary (192 bytes) was 56 bytes ago --- */&#xA;                        struct maple_metadata meta;      /*   248     2 */&#xA;                };                                       /*   128   128 */&#xA;        };                                               /*   128   128 */&#xA;&#xA;        /* size: 256, cachelines: 4, members: 3 */&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The structure &lt;code&gt;maple_range_64&lt;/code&gt; represents a maple node in the following manner. The pivots indicate the endpoints of 16 intervals, while the slots are used to reference the VMA structure when the node is considered a leaf node. The layout of pivots and slots can be visualized as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Slots -&amp;gt; | 0 | 1 | 2 | ... | 12 | 13 | 14 | 15 |&#xA;          ┬   ┬   ┬   ┬     ┬    ┬    ┬    ┬    ┬&#xA;          │   │   │   │     │    │    │    │    └─ Implied maximum&#xA;          │   │   │   │     │    │    │    └─ Pivot 14&#xA;          │   │   │   │     │    │    └─ Pivot 13&#xA;          │   │   │   │     │    └─ Pivot 12&#xA;          │   │   │   │     └─ Pivot 11&#xA;          │   │   │   └─ Pivot 2&#xA;          │   │   └─ Pivot 1&#xA;          │   └─ Pivot 0&#xA;          └─  Implied minimum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regarding concurrent modification, the maple tree imposes restrictions, requiring an exclusive lock to be held by writers. In the case of the VMA tree, the exclusive lock corresponds to the MM write lock. As for readers, two options are available. The first option involves holding the MM read lock, which results in the writer being blocked by the MM read-write lock. Alternatively, the second option is to enter the RCU critical section. By doing so, the writer is not blocked, and readers can continue their operations since the maple tree is RCU-safe. While most existing VMA accesses opt for the first option, the second option is employed in a few performance-critical scenarios, such as lockless page faults.&lt;/p&gt; &#xA;&lt;p&gt;However, there is an additional aspect that requires particular attention, which pertains to stack expansion. The stack represents a memory area that is mapped with the MAP_GROWSDOWN flag, indicating automatic expansion when an address below the region is accessed. In such cases, the start address of the corresponding VMA is adjusted, as well as the associated interval within the maple tree. Notably, these adjustments are made without holding the MM write lock.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static inline&#xA;void do_user_addr_fault(struct pt_regs *regs,&#xA;                        unsigned long error_code,&#xA;                        unsigned long address)&#xA;{&#xA;&#x9;// ...&#xA;&#xA;&#x9;if (unlikely(!mmap_read_trylock(mm))) {&#xA;&#x9;&#x9;// ...&#xA;&#x9;}&#xA;&#x9;// ...&#xA;&#x9;if (unlikely(expand_stack(vma, address))) {&#xA;&#x9;&#x9;// ...&#xA;&#x9;}&#xA;&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typically, a gap exists between the stack VMA and its neighboring VMA, as the kernel enforces a stack guard. In this scenario, when expanding the stack, only the pivot value in the maple node needs updating, a process that can be performed atomically. However, if the neighboring VMA also possesses the MAP_GROWSDOWN flag, no stack guard is enforced. Consequently, the stack expansion can eliminate the gap. In such situations, the gap interval within the maple node must be removed. As the maple tree is RCU-safe, overwriting the node in-place is not possible. Instead, a new node is created, triggering node replacement, and the old node is subsequently destroyed using an RCU callback.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int expand_downwards(struct vm_area_struct *vma, unsigned long address)&#xA;{&#xA;&#x9;// ...&#xA;&#xA;&#x9;if (prev) {&#xA;&#x9;&#x9;if (!(prev-&amp;gt;vm_flags &amp;amp; VM_GROWSDOWN) &amp;amp;&amp;amp;&#xA;&#x9;&#x9;    vma_is_accessible(prev) &amp;amp;&amp;amp;&#xA;&#x9;&#x9;    (address - prev-&amp;gt;vm_end &amp;lt; stack_guard_gap))&#xA;&#x9;&#x9;&#x9;return -ENOMEM;&#xA;&#x9;}&#xA;&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The RCU callback is invoked only after all pre-existing RCU critical sections have concluded. However, the issue arises when accessing VMAs, as only the MM read lock is held, and it does not enter the RCU critical section. Consequently, in theory, the callback could be invoked at any time, resulting in the freeing of the old maple node. However, pointers to the old node may have already been fetched, leading to a use-after-free bug when attempting subsequent access to it.&lt;/p&gt; &#xA;&lt;p&gt;The backtrace where use-after-free (UAF) occurs is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - CPU 0 -                                        - CPU 1 -&#xA;&#xA;  mm_read_lock()                                    mm_read_lock()&#xA;  expand_stack()                                    find_vma_prev()&#xA;    expand_downwards()                                mas_walk()&#xA;      mas_store_prealloc()                              mas_state_walk()&#xA;        mas_wr_story_entry()                              mas_start()&#xA;          mas_wr_modify()                                   mas_root()&#xA;            mas_wr_node_store()                               node = rcu_dereference_check()&#xA;              mas_replace()                                   [ The node pointer is recorded ]&#xA;                mas_free()&#xA;                  ma_free_rcu()&#xA;                    call_rcu(&amp;amp;mt_free_rcu)&#xA;                    [ The node is dead ]&#xA;  mm_read_unlock()&#xA;&#xA;  [ Wait for the next RCU grace period.. ]&#xA;  rcu_do_batch()                                      mas_prev()&#xA;    mt_free_rcu()                                       mas_prev_entry()&#xA;      kmem_cache_free()                                   mas_prev_nentry()&#xA;      [ The node is freed ]                                 mas_slot()&#xA;                                                              mt_slot()&#xA;                                                                rcu_dereference_check(node-&amp;gt;..)&#xA;                                                                [ UAF occurs here ]&#xA;                                                    mm_read_unlock()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fix&lt;/h2&gt; &#xA;&lt;p&gt;I reported this vulnerability to the Linux kernel security team on June 15th. Following that, the process of addressing this bug was led by Linus Torvalds. Given its complexity, it took nearly two weeks to develop a set of patches that received consensus.&lt;/p&gt; &#xA;&lt;p&gt;On June 28th, during the merge window for Linux kernel 6.5, the fix was merged into Linus&#39; tree. Linus provided a &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9471f1f2f50282b9e8f59198ec6bb738b4ccc009&#34;&gt;comprehensive merge message&lt;/a&gt; to elucidate the patch series from a technical perspective.&lt;/p&gt; &#xA;&lt;p&gt;These patches were subsequently backported to stable kernels (&lt;a href=&#34;https://lore.kernel.org/stable/2023070133-create-stainless-9a8c@gregkh/T/&#34;&gt;6.1.37&lt;/a&gt;, &lt;a href=&#34;https://lore.kernel.org/stable/2023070146-endearing-bounding-d21a@gregkh/T/&#34;&gt;6.3.11&lt;/a&gt;, and &lt;a href=&#34;https://lore.kernel.org/stable/2023070140-eldercare-landlord-133c@gregkh/T/&#34;&gt;6.4.1&lt;/a&gt;), effectively resolving the &#34;Stack Rot&#34; bug on July 1st.&lt;/p&gt; &#xA;&lt;h2&gt;Exploit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The complete exploit code and a comprehensive write-up will be made publicly available no later than the end of July.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>