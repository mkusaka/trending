<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-24T01:28:18Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Guovin/TV</title>
    <updated>2024-10-24T01:28:18Z</updated>
    <id>tag:github.com,2024-10-24:/Guovin/TV</id>
    <link href="https://github.com/Guovin/TV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📺IPTV电视直播源更新工具🚀：包含💰央视(付费)、📡卫视、🏠广东、🌊港·澳·台、🎬电影、🎥咪咕、🏀体育、🪁动画、🎮游戏、🎵音乐、🏛经典剧场；支持自定义增加频道（含图标）；支持组播源、酒店源、订阅源、线上检索；每天自动更新两次，结果可用于TVBox等播放软件；支持工作流、Docker(amd64/arm64)、命令行、软件界面多种部署/运行方式 | IPTV live TV source update tool&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/static/images/logo.png&#34; alt=&#34;logo&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;IPTV电视直播源更新工具&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; 自定义频道菜单，根据模板频道，自动获取并更新最新的直播源接口，测速校验后生成可用的接口文件&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; 默认结果包含：📺央视频道、💰央视付费频道、📡卫视频道、🏠广东频道、🌊港·澳·台频道、🎬电影频道、🎥咪咕直播、🏀体育频道、🪁动画频道、🎮游戏频道、🎵音乐频道、🏛经典剧场&#xA;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;具体频道&lt;/summary&gt; &#xA; &lt;div&gt;&#xA;   📺央视频道: CCTV-1, CCTV-2, CCTV-3, CCTV-4, CCTV-5, CCTV-5+, CCTV-6, CCTV-7, CCTV-8, CCTV-9, CCTV-10, CCTV-11, CCTV-12, CCTV-13, CCTV-14, CCTV-15, CCTV-16, CCTV-17, CETV1, CETV2, CETV4, CETV5 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   💰央视付费频道: 文化精品, 央视台球, 风云音乐, 第一剧场, 风云剧场, 怀旧剧场, 女性时尚, 高尔夫网球, 风云足球, 电视指南, 世界地理, 兵器科技 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   📡卫视频道: 广东卫视, 香港卫视, 浙江卫视, 湖南卫视, 北京卫视, 湖北卫视, 黑龙江卫视, 安徽卫视, 重庆卫视, 东方卫视, 东南卫视, 甘肃卫视, 广西卫视, 贵州卫视, 海南卫视, 河北卫视, 河南卫视, 吉林卫视, 江苏卫视, 江西卫视, 辽宁卫视, 内蒙古卫视, 宁夏卫视, 青海卫视, 山东卫视, 山西卫视, 陕西卫视, 四川卫视, 深圳卫视, 三沙卫视, 天津卫视, 西藏卫视, 新疆卫视, 云南卫视 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏠广东频道: 广东珠江, 广东体育, 广东新闻, 广东卫视, 大湾区卫视, 广州影视, 广州竞赛, 江门综合, 江门侨乡生活, 佛山综合, 深圳卫视, 汕头综合, 汕头经济, 汕头文旅, 茂名综合, 茂名公共 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🌊港·澳·台: 翡翠台, 明珠台, 凤凰中文, 凤凰资讯, 凤凰香港, 凤凰卫视, TVBS亚洲, 香港卫视, 纬来体育, 纬来育乐, J2, Viutv, 三立台湾, 无线新闻, 三立新闻, 东森综合, 东森超视, 东森电影, Now剧集, Now华剧, 靖天资讯, 星卫娱乐, 卫视卡式 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎬电影频道: CHC家庭影院, CHC动作电影, CHC高清电影, 淘剧场, 淘娱乐, 淘电影, NewTV惊悚悬疑, NewTV动作电影, 黑莓电影, 纬来电影, 靖天映画, 靖天戏剧, 星卫娱乐, 艾尔达娱乐, 经典电影, IPTV经典电影, 天映经典, 无线星河, 星空卫视, 私人影院, 东森电影, 龙祥电影, 东森洋片, 东森超视 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎥咪咕直播: 咪咕直播1-45 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏀体育频道: CCTV-5, CCTV-5+, 广东体育, 纬来体育, 五星体育, 体育赛事, 劲爆体育, 爱体育, 超级体育, 精品体育, 广州竞赛, 深圳体育, 福建体育, 辽宁体育, 山东体育, 成都体育, 天津体育, 江苏体育, 安徽综艺体育, 吉林篮球, 睛彩篮球, 睛彩羽毛球, 睛彩广场舞, 风云足球, 足球频道, 魅力足球, 天元围棋, 快乐垂钓, JJ斗地主 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🪁动画频道: 少儿动画, 卡酷动画, 动漫秀场, 新动漫, 青春动漫, 爱动漫, 中录动漫, 宝宝动画, CN卡通, 优漫卡通, 金鹰卡通, 睛彩少儿, 黑莓动画, 炫动卡通, 24H国漫热播, 浙江少儿, 河北少儿科教, 七龙珠, 火影忍者, 海绵宝宝, 中华小当家, 斗破苍穹玄幻剧, 猫和老鼠, 经典动漫, 蜡笔小新, 漫画解说 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎮游戏频道: 游戏风云, 游戏竞技, 电竞游戏, 海看电竞, 电竞天堂, 爱电竞 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎵音乐频道: CCTV-15, 风云音乐, 音乐现场, 音乐之声, 潮流音乐, 天津音乐, 音乐广播, 音乐调频广播 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏛经典剧场: 笑傲江湖, 天龙八部, 鹿鼎记, 仙剑奇侠传, 西游记, 三国演义, 水浒传, 新白娘子传奇, 天龙八部, 济公游记, 封神榜, 闯关东, 上海滩, 射雕英雄传 &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Guovin/TV/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/guovin/tv&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.python.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-%20%3E%3D%203.8-47c219&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Guovin/TV/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/guovin/tv/total&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/guovern/tv-requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/guovern/tv-requests?label=docker:requests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/guovern/tv-driver&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/guovern/tv-driver?label=docker:driver&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/README_en.md&#34;&gt;English&lt;/a&gt; | 中文&lt;/p&gt; &#xA;&lt;h2&gt;特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;自定义模板，生成您想要的频道&lt;/li&gt; &#xA; &lt;li&gt;支持多种获取源方式：组播源、酒店源、订阅源、线上检索&lt;/li&gt; &#xA; &lt;li&gt;接口测速验效，响应时间、分辨率优先级，过滤无效接口&lt;/li&gt; &#xA; &lt;li&gt;定时执行，北京时间每日 6:00 与 18:00 执行更新&lt;/li&gt; &#xA; &lt;li&gt;支持多种运行方式：工作流、命令行、界面软件、Docker(amd64/arm64)&lt;/li&gt; &#xA; &lt;li&gt;更多功能请见&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/config.md&#34;&gt;配置参数&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;最新结果：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接口源：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/output/result.m3u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数据源：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/source.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/config.md&#34;&gt;配置参数&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;h3&gt;方式一：工作流更新&lt;/h3&gt; &#xA;&lt;p&gt;Fork 本项目并开启工作流更新，具体步骤请见&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/tutorial.md&#34;&gt;详细教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;方式二：命令行更新&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pip3 install pipenv&#xA;pipenv install&#xA;pipenv run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;方式三：界面软件更新&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;下载&lt;a href=&#34;https://github.com/Guovin/TV/releases&#34;&gt;更新工具软件&lt;/a&gt;，打开软件，点击更新，即可完成更新&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;或者在项目目录下运行以下命令，即可打开界面软件：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pipenv run ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/docs/images/ui.png&#34; alt=&#34;更新工具软件&#34; title=&#34;更新工具软件&#34; style=&#34;height:600px&#34;&gt; &#xA;&lt;h3&gt;方式四：Docker 更新&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests：轻量级，性能要求低，更新速度快，稳定性不确定（推荐订阅源使用此版本）&lt;/li&gt; &#xA; &lt;li&gt;driver：性能要求较高，更新速度较慢，稳定性、成功率高；修改配置 open_driver = False 可切换到 request 版本（推荐酒店源、组播源、在线搜索使用此版本）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;建议都试用一次，选择自己合适的版本。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. 拉取镜像：&#xA;requests：&#xA;docker pull guovern/tv-requests:latest&#xA;&#xA;driver：&#xA;docker pull guovern/tv-driver:latest&#xA;&#xA;2. 运行容器：&#xA;docker run -d -p 8000:8000 guovern/tv-requests 或 tv-driver&#xA;&#xA;卷挂载参数（可选）：&#xA;实现宿主机文件与容器文件同步，修改模板、配置、获取更新结果文件可直接在宿主机文件夹下操作&#xA;&#xA;配置文件：&#xA;-v 宿主机路径/config:/tv-requests/config 或 tv-driver/config&#xA;&#xA;结果文件：&#xA;-v 宿主机路径/output:/tv-requests/output 或 tv-driver/output&#xA;&#xA;例：docker run -v /etc/docker/config:/tv-requests/config -v /etc/docker/output:/tv-requests/output -d -p 8000:8000 guovern/tv-requests&#xA;&#xA;3. 查看更新结果：访问（域名:8000）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;注：方式一至三更新完成后的结果文件链接：&lt;a href=&#34;http://%E6%9C%AC%E5%9C%B0&#34;&gt;http://本地&lt;/a&gt; ip:8000 或 &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/CHANGELOG.md&#34;&gt;更新日志&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;许可证&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/TV/master/LICENSE&#34;&gt;MIT&lt;/a&gt; License © 2024-PRESENT &lt;a href=&#34;https://github.com/guovin&#34;&gt;Govin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;div&gt;&#xA; 请我喝杯咖啡☕️吧~&#xA;&lt;/div&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;支付宝&lt;/th&gt; &#xA;   &lt;th&gt;微信&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/static/images/alipay.jpg&#34; alt=&#34;支付宝扫码&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/TV/master/static/images/appreciate.jpg&#34; alt=&#34;微信扫码&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本项目仅供学习交流用途，接口数据均来源于网络，如有侵权，请联系删除&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>axios/axios</title>
    <updated>2024-10-24T01:28:18Z</updated>
    <id>tag:github.com,2024-10-24:/axios/axios</id>
    <link href="https://github.com/axios/axios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; 🥇 Gold sponsors &lt;br&gt; &lt;/h3&gt; &#xA;&lt;table align=&#34;center&#34; width=&#34;100%&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr width=&#34;33.333333333333336%&#34;&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;33.333333333333336%&#34;&gt; &lt;a href=&#34;https://buzzoid.com/buy-instagram-followers/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship&#34; style=&#34;padding: 10px; display: inline-block&#34;&gt; &lt;img width=&#34;62px&#34; height=&#34;70px&#34; src=&#34;https://axios-http.com/assets/sponsors/opencollective/buzzoid-buy-instagram-followers.png&#34; alt=&#34;Buzzoid - Buy Instagram Followers&#34;&gt; &lt;/a&gt; &lt;p align=&#34;center&#34; title=&#34;At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rated world&#39;s #1 IG service since 2012.&#34;&gt;At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rate...&lt;/p&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://buzzoid.com/buy-instagram-followers/?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship&#34;&gt;&lt;b&gt;buzzoid.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;33.333333333333336%&#34;&gt; &lt;a href=&#34;https://stytch.com/?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=website-link&amp;amp;utm_campaign=axios-http&#34; style=&#34;padding: 10px; display: inline-block&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source width=&#34;200px&#34; height=&#34;38px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://axios-http.com/assets/sponsors/stytch_white.png&#34;&gt; &#xA;      &lt;img width=&#34;200px&#34; height=&#34;38px&#34; src=&#34;https://axios-http.com/assets/sponsors/stytch.png&#34; alt=&#34;Stytch&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;p align=&#34;center&#34; title=&#34;API-first authentication, authorization, and fraud prevention&#34;&gt;API-first authentication, authorization, and fraud prevention&lt;/p&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://stytch.com/?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=website-link&amp;amp;utm_campaign=axios-http&#34;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://stytch.com/docs?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=docs-link&amp;amp;utm_campaign=axios-http&#34;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/stytchauth/stytch-node?utm_source=oss-sponsorship&amp;amp;utm_medium=paid_sponsorship&amp;amp;utm_content=node-sdk&amp;amp;utm_campaign=axios-http&#34;&gt;&lt;b&gt;Node.js&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;33.333333333333336%&#34;&gt; &lt;a href=&#34;https://www.principal.com/about-us?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship&#34; style=&#34;padding: 10px; display: inline-block&#34;&gt; &lt;img width=&#34;133px&#34; height=&#34;43px&#34; src=&#34;https://axios-http.com/assets/sponsors/principal.svg?sanitize=true&#34; alt=&#34;Principal Financial Group&#34;&gt; &lt;/a&gt; &lt;p align=&#34;center&#34; title=&#34;We’re bound by one common purpose: to give you the financial tools, resources and information you need to live your best life.&#34;&gt;We’re bound by one common purpose: to give you the financial tools, resources and information you ne...&lt;/p&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.principal.com/about-us?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship&#34;&gt;&lt;b&gt;www.principal.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr width=&#34;33.333333333333336%&#34;&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;33.333333333333336%&#34;&gt; &lt;a href=&#34;https://www.descope.com/?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship&#34; style=&#34;padding: 10px; display: inline-block&#34;&gt; &#xA;     &lt;picture&gt; &#xA;      &lt;source width=&#34;200px&#34; height=&#34;52px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://axios-http.com/assets/sponsors/descope_white.png&#34;&gt; &#xA;      &lt;img width=&#34;200px&#34; height=&#34;52px&#34; src=&#34;https://axios-http.com/assets/sponsors/descope.png&#34; alt=&#34;Descope&#34;&gt; &#xA;     &lt;/picture&gt; &lt;/a&gt; &lt;p align=&#34;center&#34; title=&#34;Hi, we&#39;re Descope! We are building something in the authentication space for app developers and can’t wait to place it in your hands.&#34;&gt;Hi, we&#39;re Descope! We are building something in the authentication space for app developers and...&lt;/p&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.descope.com/?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship&#34;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.descope.com/?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship&#34;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://www.descope.com/community?utm_source=axios&amp;amp;utm_medium=referral&amp;amp;utm_campaign=axios-oss-sponsorship&#34;&gt;&lt;b&gt;Community&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34; width=&#34;33.333333333333336%&#34;&gt; &lt;a href=&#34;https://buzzoid.com/buy-instagram-followers/?utm_source=axios&amp;amp;utm_medium=sponsorlist&amp;amp;utm_campaign=sponsorship&#34; style=&#34;padding: 10px; display: inline-block&#34;&gt; &lt;img width=&#34;62px&#34; height=&#34;70px&#34; src=&#34;https://axios-http.com/assets/sponsors/opencollective/buy-instagram-followers-buzzoid.png&#34; alt=&#34;Buzzoid - Buy Instagram Followers&#34;&gt; &lt;/a&gt; &lt;p align=&#34;center&#34; title=&#34;At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rated world&#39;s #1 IG service since 2012.&#34;&gt;At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rate...&lt;/p&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://buzzoid.com/buy-instagram-followers/?utm_source=axios&amp;amp;utm_medium=readme_sponsorlist&amp;amp;utm_campaign=sponsorship&#34;&gt;&lt;b&gt;buzzoid.com&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!--&lt;div&gt;marker&lt;/div&gt;--&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://axios-http.com&#34;&gt;&lt;img src=&#34;https://axios-http.com/assets/logo.svg?sanitize=true&#34;&gt;&lt;/a&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://axios-http.com/&#34;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; • &lt;a href=&#34;https://axios-http.com/docs/intro&#34;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/axios.svg?style=flat-square&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdnjs.com/libraries/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cdnjs/v/axios.svg?style=flat-square&#34; alt=&#34;CDNJS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/axios/axios/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/axios/axios/ci.yml?branch=v1.x&amp;amp;label=CI&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/axios/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&amp;amp;style=flat-square&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/mzabriskie/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square&#34; alt=&#34;code coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagephobia.now.sh/result?p=axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?url=https://packagephobia.com/v2/api.json?p=axios&amp;amp;query=$.install.pretty&amp;amp;label=install%20size&amp;amp;style=flat-square&#34; alt=&#34;install size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/package/axios@latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/axios?style=flat-square&#34; alt=&#34;npm bundle size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npm-stat.com/charts.html?package=axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/axios.svg?style=flat-square&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/mzabriskie/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square&#34; alt=&#34;gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/axios/axios&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/axios/axios/badges/users.svg?sanitize=true&#34; alt=&#34;code helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/npm/axios&#34;&gt;&lt;img src=&#34;https://snyk.io/test/npm/axios/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#browser-support&#34;&gt;Browser Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#installing&#34;&gt;Installing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#package-manager&#34;&gt;Package manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#cdn&#34;&gt;CDN&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#axios-api&#34;&gt;Axios API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#request-method-aliases&#34;&gt;Request method aliases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#concurrency-deprecated&#34;&gt;Concurrency 👎&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#creating-an-instance&#34;&gt;Creating an instance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#instance-methods&#34;&gt;Instance methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#request-config&#34;&gt;Request Config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#response-schema&#34;&gt;Response Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#config-defaults&#34;&gt;Config Defaults&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#global-axios-defaults&#34;&gt;Global axios defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#custom-instance-defaults&#34;&gt;Custom instance defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#config-order-of-precedence&#34;&gt;Config order of precedence&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#interceptors&#34;&gt;Interceptors&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#multiple-interceptors&#34;&gt;Multiple Interceptors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#cancellation&#34;&gt;Cancellation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#abortcontroller&#34;&gt;AbortController&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#canceltoken-deprecated&#34;&gt;CancelToken 👎&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#using-applicationx-www-form-urlencoded-format&#34;&gt;Using application/x-www-form-urlencoded format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#urlsearchparams&#34;&gt;URLSearchParams&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#query-string-older-browsers&#34;&gt;Query string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-automatic-serialization-to-urlsearchparams&#34;&gt;🆕 Automatic serialization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#using-multipartform-data-format&#34;&gt;Using multipart/form-data format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#formdata&#34;&gt;FormData&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-automatic-serialization-to-formdata&#34;&gt;🆕 Automatic serialization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#files-posting&#34;&gt;Files Posting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-html-form-posting-browser&#34;&gt;HTML Form Posting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-progress-capturing&#34;&gt;🆕 Progress capturing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-progress-capturing&#34;&gt;🆕 Rate limiting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-axiosheaders&#34;&gt;🆕 AxiosHeaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-fetch-adapter&#34;&gt;🔥 Fetch adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#semver&#34;&gt;Semver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#promises&#34;&gt;Promises&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;XMLHttpRequests&lt;/a&gt; from the browser&lt;/li&gt; &#xA; &lt;li&gt;Make &lt;a href=&#34;https://nodejs.org/api/http.html&#34;&gt;http&lt;/a&gt; requests from node.js&lt;/li&gt; &#xA; &lt;li&gt;Supports the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt; API&lt;/li&gt; &#xA; &lt;li&gt;Intercept request and response&lt;/li&gt; &#xA; &lt;li&gt;Transform request and response data&lt;/li&gt; &#xA; &lt;li&gt;Cancel requests&lt;/li&gt; &#xA; &lt;li&gt;Automatic transforms for &lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;JSON&lt;/a&gt; data&lt;/li&gt; &#xA; &lt;li&gt;🆕 Automatic data object serialization to &lt;code&gt;multipart/form-data&lt;/code&gt; and &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; body encodings&lt;/li&gt; &#xA; &lt;li&gt;Client side support for protecting against &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_request_forgery&#34;&gt;XSRF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png&#34; alt=&#34;Chrome&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png&#34; alt=&#34;Firefox&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/safari/safari_48x48.png&#34; alt=&#34;Safari&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/opera/opera_48x48.png&#34; alt=&#34;Opera&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_48x48.png&#34; alt=&#34;Edge&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://saucelabs.com/u/axios&#34;&gt;&lt;img src=&#34;https://saucelabs.com/open_sauce/build_matrix/axios.svg?sanitize=true&#34; alt=&#34;Browser Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Package manager&lt;/h3&gt; &#xA;&lt;p&gt;Using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using bower:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bower install axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn add axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using pnpm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pnpm add axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the package is installed, you can import the library using &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; approach:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import axios, {isCancel, AxiosError} from &#39;axios&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the default export, since the named export is just a re-export from the Axios factory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import axios from &#39;axios&#39;;&#xA;&#xA;console.log(axios.isCancel(&#39;something&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;require&lt;/code&gt; for importing, &lt;strong&gt;only default export is available&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const axios = require(&#39;axios&#39;);&#xA;&#xA;console.log(axios.isCancel(&#39;something&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For cases where something went wrong when trying to import a module into a custom or legacy environment, you can try importing the module package directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const axios = require(&#39;axios/dist/browser/axios.cjs&#39;); // browser commonJS bundle (ES2017)&#xA;// const axios = require(&#39;axios/dist/node/axios.cjs&#39;); // node commonJS bundle (ES2017)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;p&gt;Using jsDelivr CDN (ES5 UMD browser module):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using unpkg CDN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/axios@1.6.7/dist/axios.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: CommonJS usage&lt;br&gt; In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with &lt;code&gt;require()&lt;/code&gt;, use the following approach:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import axios from &#39;axios&#39;;&#xA;//const axios = require(&#39;axios&#39;); // legacy way&#xA;&#xA;// Make a request for a user with a given ID&#xA;axios.get(&#39;/user?ID=12345&#39;)&#xA;  .then(function (response) {&#xA;    // handle success&#xA;    console.log(response);&#xA;  })&#xA;  .catch(function (error) {&#xA;    // handle error&#xA;    console.log(error);&#xA;  })&#xA;  .finally(function () {&#xA;    // always executed&#xA;  });&#xA;&#xA;// Optionally the request above could also be done as&#xA;axios.get(&#39;/user&#39;, {&#xA;    params: {&#xA;      ID: 12345&#xA;    }&#xA;  })&#xA;  .then(function (response) {&#xA;    console.log(response);&#xA;  })&#xA;  .catch(function (error) {&#xA;    console.log(error);&#xA;  })&#xA;  .finally(function () {&#xA;    // always executed&#xA;  });&#xA;&#xA;// Want to use async/await? Add the `async` keyword to your outer function/method.&#xA;async function getUser() {&#xA;  try {&#xA;    const response = await axios.get(&#39;/user?ID=12345&#39;);&#xA;    console.log(response);&#xA;  } catch (error) {&#xA;    console.error(error);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;async/await&lt;/code&gt; is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.post(&#39;/user&#39;, {&#xA;    firstName: &#39;Fred&#39;,&#xA;    lastName: &#39;Flintstone&#39;&#xA;  })&#xA;  .then(function (response) {&#xA;    console.log(response);&#xA;  })&#xA;  .catch(function (error) {&#xA;    console.log(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing multiple concurrent requests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getUserAccount() {&#xA;  return axios.get(&#39;/user/12345&#39;);&#xA;}&#xA;&#xA;function getUserPermissions() {&#xA;  return axios.get(&#39;/user/12345/permissions&#39;);&#xA;}&#xA;&#xA;Promise.all([getUserAccount(), getUserPermissions()])&#xA;  .then(function (results) {&#xA;    const acct = results[0];&#xA;    const perm = results[1];&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;axios API&lt;/h2&gt; &#xA;&lt;p&gt;Requests can be made by passing the relevant config to &lt;code&gt;axios&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;axios(config)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Send a POST request&#xA;axios({&#xA;  method: &#39;post&#39;,&#xA;  url: &#39;/user/12345&#39;,&#xA;  data: {&#xA;    firstName: &#39;Fred&#39;,&#xA;    lastName: &#39;Flintstone&#39;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// GET request for remote image in node.js&#xA;axios({&#xA;  method: &#39;get&#39;,&#xA;  url: &#39;https://bit.ly/2mTM3nY&#39;,&#xA;  responseType: &#39;stream&#39;&#xA;})&#xA;  .then(function (response) {&#xA;    response.data.pipe(fs.createWriteStream(&#39;ada_lovelace.jpg&#39;))&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;axios(url[, config])&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Send a GET request (default method)&#xA;axios(&#39;/user/12345&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request method aliases&lt;/h3&gt; &#xA;&lt;p&gt;For convenience, aliases have been provided for all common request methods.&lt;/p&gt; &#xA;&lt;h5&gt;axios.request(config)&lt;/h5&gt; &#xA;&lt;h5&gt;axios.get(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.delete(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.head(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.options(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.post(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.put(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.patch(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h6&gt;NOTE&lt;/h6&gt; &#xA;&lt;p&gt;When using the alias methods &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; properties don&#39;t need to be specified in config.&lt;/p&gt; &#xA;&lt;h3&gt;Concurrency (Deprecated)&lt;/h3&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;Promise.all&lt;/code&gt; to replace the below functions.&lt;/p&gt; &#xA;&lt;p&gt;Helper functions for dealing with concurrent requests.&lt;/p&gt; &#xA;&lt;p&gt;axios.all(iterable) axios.spread(callback)&lt;/p&gt; &#xA;&lt;h3&gt;Creating an instance&lt;/h3&gt; &#xA;&lt;p&gt;You can create a new instance of axios with a custom config.&lt;/p&gt; &#xA;&lt;h5&gt;axios.create([config])&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const instance = axios.create({&#xA;  baseURL: &#39;https://some-domain.com/api/&#39;,&#xA;  timeout: 1000,&#xA;  headers: {&#39;X-Custom-Header&#39;: &#39;foobar&#39;}&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instance methods&lt;/h3&gt; &#xA;&lt;p&gt;The available instance methods are listed below. The specified config will be merged with the instance config.&lt;/p&gt; &#xA;&lt;h5&gt;axios#request(config)&lt;/h5&gt; &#xA;&lt;h5&gt;axios#get(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#delete(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#head(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#options(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#post(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#put(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#patch(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#getUri([config])&lt;/h5&gt; &#xA;&lt;h2&gt;Request Config&lt;/h2&gt; &#xA;&lt;p&gt;These are the available config options for making requests. Only the &lt;code&gt;url&lt;/code&gt; is required. Requests will default to &lt;code&gt;GET&lt;/code&gt; if &lt;code&gt;method&lt;/code&gt; is not specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // `url` is the server URL that will be used for the request&#xA;  url: &#39;/user&#39;,&#xA;&#xA;  // `method` is the request method to be used when making the request&#xA;  method: &#39;get&#39;, // default&#xA;&#xA;  // `baseURL` will be prepended to `url` unless `url` is absolute.&#xA;  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs&#xA;  // to methods of that instance.&#xA;  baseURL: &#39;https://some-domain.com/api/&#39;,&#xA;&#xA;  // `transformRequest` allows changes to the request data before it is sent to the server&#xA;  // This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;PATCH&#39; and &#39;DELETE&#39;&#xA;  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,&#xA;  // FormData or Stream&#xA;  // You may modify the headers object.&#xA;  transformRequest: [function (data, headers) {&#xA;    // Do whatever you want to transform the data&#xA;&#xA;    return data;&#xA;  }],&#xA;&#xA;  // `transformResponse` allows changes to the response data to be made before&#xA;  // it is passed to then/catch&#xA;  transformResponse: [function (data) {&#xA;    // Do whatever you want to transform the data&#xA;&#xA;    return data;&#xA;  }],&#xA;&#xA;  // `headers` are custom headers to be sent&#xA;  headers: {&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;},&#xA;&#xA;  // `params` are the URL parameters to be sent with the request&#xA;  // Must be a plain object or a URLSearchParams object&#xA;  params: {&#xA;    ID: 12345&#xA;  },&#xA;  &#xA;  // `paramsSerializer` is an optional config that allows you to customize serializing `params`. &#xA;  paramsSerializer: {&#xA;&#xA;    //Custom encoder function which sends key/value pairs in an iterative fashion.&#xA;    encode?: (param: string): string =&amp;gt; { /* Do custom operations here and return transformed string */ }, &#xA;    &#xA;    // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour.&#xA;    serialize?: (params: Record&amp;lt;string, any&amp;gt;, options?: ParamsSerializerOptions ), &#xA;    &#xA;    //Configuration for formatting array indexes in the params. &#xA;    indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes).    &#xA;  },&#xA;&#xA;  // `data` is the data to be sent as the request body&#xA;  // Only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;DELETE , and &#39;PATCH&#39;&#xA;  // When no `transformRequest` is set, must be of one of the following types:&#xA;  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams&#xA;  // - Browser only: FormData, File, Blob&#xA;  // - Node only: Stream, Buffer, FormData (form-data package)&#xA;  data: {&#xA;    firstName: &#39;Fred&#39;&#xA;  },&#xA;&#xA;  // syntax alternative to send data into the body&#xA;  // method post&#xA;  // only the value is sent, not the key&#xA;  data: &#39;Country=Brasil&amp;amp;City=Belo Horizonte&#39;,&#xA;&#xA;  // `timeout` specifies the number of milliseconds before the request times out.&#xA;  // If the request takes longer than `timeout`, the request will be aborted.&#xA;  timeout: 1000, // default is `0` (no timeout)&#xA;&#xA;  // `withCredentials` indicates whether or not cross-site Access-Control requests&#xA;  // should be made using credentials&#xA;  withCredentials: false, // default&#xA;&#xA;  // `adapter` allows custom handling of requests which makes testing easier.&#xA;  // Return a promise and supply a valid response (see lib/adapters/README.md)&#xA;  adapter: function (config) {&#xA;    /* ... */&#xA;  },&#xA;  // Also, you can set the name of the built-in adapter, or provide an array with their names&#xA;  // to choose the first available in the environment&#xA;  adapter: &#39;xhr&#39; // &#39;fetch&#39; | &#39;http&#39; | [&#39;xhr&#39;, &#39;http&#39;, &#39;fetch&#39;]&#xA;&#xA;  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.&#xA;  // This will set an `Authorization` header, overwriting any existing&#xA;  // `Authorization` custom headers you have set using `headers`.&#xA;  // Please note that only HTTP Basic auth is configurable through this parameter.&#xA;  // For Bearer tokens and such, use `Authorization` custom headers instead.&#xA;  auth: {&#xA;    username: &#39;janedoe&#39;,&#xA;    password: &#39;s00pers3cret&#39;&#xA;  },&#xA;&#xA;  // `responseType` indicates the type of data that the server will respond with&#xA;  // options are: &#39;arraybuffer&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;&#xA;  //   browser only: &#39;blob&#39;&#xA;  responseType: &#39;json&#39;, // default&#xA;&#xA;  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)&#xA;  // Note: Ignored for `responseType` of &#39;stream&#39; or client-side requests&#xA;  // options are: &#39;ascii&#39;, &#39;ASCII&#39;, &#39;ansi&#39;, &#39;ANSI&#39;, &#39;binary&#39;, &#39;BINARY&#39;, &#39;base64&#39;, &#39;BASE64&#39;, &#39;base64url&#39;,&#xA;  // &#39;BASE64URL&#39;, &#39;hex&#39;, &#39;HEX&#39;, &#39;latin1&#39;, &#39;LATIN1&#39;, &#39;ucs-2&#39;, &#39;UCS-2&#39;, &#39;ucs2&#39;, &#39;UCS2&#39;, &#39;utf-8&#39;, &#39;UTF-8&#39;,&#xA;  // &#39;utf8&#39;, &#39;UTF8&#39;, &#39;utf16le&#39;, &#39;UTF16LE&#39;&#xA;  responseEncoding: &#39;utf8&#39;, // default&#xA;&#xA;  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token&#xA;  xsrfCookieName: &#39;XSRF-TOKEN&#39;, // default&#xA;&#xA;  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value&#xA;  xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, // default&#xA;    &#xA;  // `undefined` (default) - set XSRF header only for the same origin requests&#xA;  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) =&amp;gt; boolean | undefined),&#xA;&#xA;  // `onUploadProgress` allows handling of progress events for uploads&#xA;  // browser &amp;amp; node.js&#xA;  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {&#xA;    // Do whatever you want with the Axios progress event&#xA;  },&#xA;&#xA;  // `onDownloadProgress` allows handling of progress events for downloads&#xA;  // browser &amp;amp; node.js&#xA;  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {&#xA;    // Do whatever you want with the Axios progress event&#xA;  },&#xA;&#xA;  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js&#xA;  maxContentLength: 2000,&#xA;&#xA;  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed&#xA;  maxBodyLength: 2000,&#xA;&#xA;  // `validateStatus` defines whether to resolve or reject the promise for a given&#xA;  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`&#xA;  // or `undefined`), the promise will be resolved; otherwise, the promise will be&#xA;  // rejected.&#xA;  validateStatus: function (status) {&#xA;    return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // default&#xA;  },&#xA;&#xA;  // `maxRedirects` defines the maximum number of redirects to follow in node.js.&#xA;  // If set to 0, no redirects will be followed.&#xA;  maxRedirects: 21, // default&#xA;&#xA;  // `beforeRedirect` defines a function that will be called before redirect.&#xA;  // Use this to adjust the request options upon redirecting,&#xA;  // to inspect the latest response headers,&#xA;  // or to cancel the request by throwing an error&#xA;  // If maxRedirects is set to 0, `beforeRedirect` is not used.&#xA;  beforeRedirect: (options, { headers }) =&amp;gt; {&#xA;    if (options.hostname === &#34;example.com&#34;) {&#xA;      options.auth = &#34;user:password&#34;;&#xA;    }&#xA;  },&#xA;&#xA;  // `socketPath` defines a UNIX Socket to be used in node.js.&#xA;  // e.g. &#39;/var/run/docker.sock&#39; to send requests to the docker daemon.&#xA;  // Only either `socketPath` or `proxy` can be specified.&#xA;  // If both are specified, `socketPath` is used.&#xA;  socketPath: null, // default&#xA;  &#xA;  // `transport` determines the transport method that will be used to make the request. If defined, it will be used. Otherwise, if `maxRedirects` is 0, the default `http` or `https` library will be used, depending on the protocol specified in `protocol`. Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol, which can handle redirects.&#xA;  transport: undefined, // default&#xA;&#xA;  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http&#xA;  // and https requests, respectively, in node.js. This allows options to be added like&#xA;  // `keepAlive` that are not enabled by default.&#xA;  httpAgent: new http.Agent({ keepAlive: true }),&#xA;  httpsAgent: new https.Agent({ keepAlive: true }),&#xA;&#xA;  // `proxy` defines the hostname, port, and protocol of the proxy server.&#xA;  // You can also define your proxy using the conventional `http_proxy` and&#xA;  // `https_proxy` environment variables. If you are using environment variables&#xA;  // for your proxy configuration, you can also define a `no_proxy` environment&#xA;  // variable as a comma-separated list of domains that should not be proxied.&#xA;  // Use `false` to disable proxies, ignoring environment variables.&#xA;  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and&#xA;  // supplies credentials.&#xA;  // This will set an `Proxy-Authorization` header, overwriting any existing&#xA;  // `Proxy-Authorization` custom headers you have set using `headers`.&#xA;  // If the proxy server uses HTTPS, then you must set the protocol to `https`.&#xA;  proxy: {&#xA;    protocol: &#39;https&#39;,&#xA;    host: &#39;127.0.0.1&#39;,&#xA;    // hostname: &#39;127.0.0.1&#39; // Takes precedence over &#39;host&#39; if both are defined&#xA;    port: 9000,&#xA;    auth: {&#xA;      username: &#39;mikeymike&#39;,&#xA;      password: &#39;rapunz3l&#39;&#xA;    }&#xA;  },&#xA;&#xA;  // `cancelToken` specifies a cancel token that can be used to cancel the request&#xA;  // (see Cancellation section below for details)&#xA;  cancelToken: new CancelToken(function (cancel) {&#xA;  }),&#xA;&#xA;  // an alternative way to cancel Axios requests using AbortController&#xA;  signal: new AbortController().signal,&#xA;&#xA;  // `decompress` indicates whether or not the response body should be decompressed&#xA;  // automatically. If set to `true` will also remove the &#39;content-encoding&#39; header&#xA;  // from the responses objects of all decompressed responses&#xA;  // - Node only (XHR cannot turn off decompression)&#xA;  decompress: true, // default&#xA;&#xA;  // `insecureHTTPParser` boolean.&#xA;  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.&#xA;  // This may allow interoperability with non-conformant HTTP implementations.&#xA;  // Using the insecure parser should be avoided.&#xA;  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback&#xA;  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none&#xA;  insecureHTTPParser: undefined, // default&#xA;&#xA;  // transitional options for backward compatibility that may be removed in the newer versions&#xA;  transitional: {&#xA;    // silent JSON parsing mode&#xA;    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)&#xA;    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to &#39;json&#39;)&#xA;    silentJSONParsing: true, // default value for the current Axios version&#xA;&#xA;    // try to parse the response string as JSON even if `responseType` is not &#39;json&#39;&#xA;    forcedJSONParsing: true,&#xA;&#xA;    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts&#xA;    clarifyTimeoutError: false,&#xA;  },&#xA;&#xA;  env: {&#xA;    // The FormData class to be used to automatically serialize the payload into a FormData object&#xA;    FormData: window?.FormData || global?.FormData&#xA;  },&#xA;&#xA;  formSerializer: {&#xA;      visitor: (value, key, path, helpers) =&amp;gt; {}; // custom visitor function to serialize form values&#xA;      dots: boolean; // use dots instead of brackets format&#xA;      metaTokens: boolean; // keep special endings like {} in parameter key&#xA;      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes&#xA;  },&#xA;&#xA;  // http adapter only (node.js)&#xA;  maxRate: [&#xA;    100 * 1024, // 100KB/s upload limit,&#xA;    100 * 1024  // 100KB/s download limit&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Response Schema&lt;/h2&gt; &#xA;&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // `data` is the response that was provided by the server&#xA;  data: {},&#xA;&#xA;  // `status` is the HTTP status code from the server response&#xA;  status: 200,&#xA;&#xA;  // `statusText` is the HTTP status message from the server response&#xA;  statusText: &#39;OK&#39;,&#xA;&#xA;  // `headers` the HTTP headers that the server responded with&#xA;  // All header names are lowercase and can be accessed using the bracket notation.&#xA;  // Example: `response.headers[&#39;content-type&#39;]`&#xA;  headers: {},&#xA;&#xA;  // `config` is the config that was provided to `axios` for the request&#xA;  config: {},&#xA;&#xA;  // `request` is the request that generated this response&#xA;  // It is the last ClientRequest instance in node.js (in redirects)&#xA;  // and an XMLHttpRequest instance in the browser&#xA;  request: {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;then&lt;/code&gt;, you will receive the response as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;)&#xA;  .then(function (response) {&#xA;    console.log(response.data);&#xA;    console.log(response.status);&#xA;    console.log(response.statusText);&#xA;    console.log(response.headers);&#xA;    console.log(response.config);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;catch&lt;/code&gt;, or passing a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&#34;&gt;rejection callback&lt;/a&gt; as second parameter of &lt;code&gt;then&lt;/code&gt;, the response will be available through the &lt;code&gt;error&lt;/code&gt; object as explained in the &lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Config Defaults&lt;/h2&gt; &#xA;&lt;p&gt;You can specify config defaults that will be applied to every request.&lt;/p&gt; &#xA;&lt;h3&gt;Global axios defaults&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.defaults.baseURL = &#39;https://api.example.com&#39;;&#xA;&#xA;// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.&#xA;// See below for an example using Custom instance defaults instead.&#xA;axios.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;&#xA;&#xA;axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom instance defaults&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Set config defaults when creating the instance&#xA;const instance = axios.create({&#xA;  baseURL: &#39;https://api.example.com&#39;&#xA;});&#xA;&#xA;// Alter defaults after instance has been created&#xA;instance.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config order of precedence&lt;/h3&gt; &#xA;&lt;p&gt;Config will be merged with an order of precedence. The order is library defaults found in &lt;a href=&#34;https://github.com/axios/axios/raw/master/lib/defaults/index.js#L28&#34;&gt;lib/defaults.js&lt;/a&gt;, then &lt;code&gt;defaults&lt;/code&gt; property of the instance, and finally &lt;code&gt;config&lt;/code&gt; argument for the request. The latter will take precedence over the former. Here&#39;s an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Create an instance using the config defaults provided by the library&#xA;// At this point the timeout config value is `0` as is the default for the library&#xA;const instance = axios.create();&#xA;&#xA;// Override timeout default for the library&#xA;// Now all requests using this instance will wait 2.5 seconds before timing out&#xA;instance.defaults.timeout = 2500;&#xA;&#xA;// Override timeout for this request as it&#39;s known to take a long time&#xA;instance.get(&#39;/longRequest&#39;, {&#xA;  timeout: 5000&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interceptors&lt;/h2&gt; &#xA;&lt;p&gt;You can intercept requests or responses before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Add a request interceptor&#xA;axios.interceptors.request.use(function (config) {&#xA;    // Do something before request is sent&#xA;    return config;&#xA;  }, function (error) {&#xA;    // Do something with request error&#xA;    return Promise.reject(error);&#xA;  });&#xA;&#xA;// Add a response interceptor&#xA;axios.interceptors.response.use(function (response) {&#xA;    // Any status code that lie within the range of 2xx cause this function to trigger&#xA;    // Do something with response data&#xA;    return response;&#xA;  }, function (error) {&#xA;    // Any status codes that falls outside the range of 2xx cause this function to trigger&#xA;    // Do something with response error&#xA;    return Promise.reject(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to remove an interceptor later you can.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const myInterceptor = axios.interceptors.request.use(function () {/*...*/});&#xA;axios.interceptors.request.eject(myInterceptor);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also clear all interceptors for requests or responses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const instance = axios.create();&#xA;instance.interceptors.request.use(function () {/*...*/});&#xA;instance.interceptors.request.clear(); // Removes interceptors from requests&#xA;instance.interceptors.response.use(function () {/*...*/});&#xA;instance.interceptors.response.clear(); // Removes interceptors from responses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add interceptors to a custom instance of axios.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const instance = axios.create();&#xA;instance.interceptors.request.use(function () {/*...*/});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.interceptors.request.use(function (config) {&#xA;  config.headers.test = &#39;I am only a header!&#39;;&#xA;  return config;&#xA;}, null, { synchronous: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to execute a particular interceptor based on a runtime check, you can add a &lt;code&gt;runWhen&lt;/code&gt; function to the options object. The interceptor will not be executed &lt;strong&gt;if and only if&lt;/strong&gt; the return of &lt;code&gt;runWhen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The function will be called with the config object (don&#39;t forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function onGetCall(config) {&#xA;  return config.method === &#39;get&#39;;&#xA;}&#xA;axios.interceptors.request.use(function (config) {&#xA;  config.headers.test = &#39;special get headers&#39;;&#xA;  return config;&#xA;}, null, { runWhen: onGetCall });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Interceptors&lt;/h3&gt; &#xA;&lt;p&gt;Given you add multiple response interceptors and when the response was fulfilled&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;then each interceptor is executed&lt;/li&gt; &#xA; &lt;li&gt;then they are executed in the order they were added&lt;/li&gt; &#xA; &lt;li&gt;then only the last interceptor&#39;s result is returned&lt;/li&gt; &#xA; &lt;li&gt;then every interceptor receives the result of its predecessor&lt;/li&gt; &#xA; &lt;li&gt;and when the fulfillment-interceptor throws &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;then the following fulfillment-interceptor is not called&lt;/li&gt; &#xA;   &lt;li&gt;then the following rejection-interceptor is called&lt;/li&gt; &#xA;   &lt;li&gt;once caught, another following fulfill-interceptor is called again (just like in a promise chain).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/test/specs/interceptors.spec.js&#34;&gt;the interceptor tests&lt;/a&gt; for seeing all this in code.&lt;/p&gt; &#xA;&lt;h2&gt;Error Types&lt;/h2&gt; &#xA;&lt;p&gt;There are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.&lt;/p&gt; &#xA;&lt;p&gt;The general structure of axios errors is as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;message&lt;/td&gt; &#xA;   &lt;td&gt;A quick summary of the error message and the status it failed with.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;This defines where the error originated from. For axios, it will always be an &#39;AxiosError&#39;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;Provides the stack trace of the error.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;config&lt;/td&gt; &#xA;   &lt;td&gt;An axios config object with specific instance configurations defined by the user from when the request was made&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;   &lt;td&gt;Represents an axios identified error. The table below lists out specific definitions for internal axios error.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;status&lt;/td&gt; &#xA;   &lt;td&gt;HTTP response status code. See &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&#34;&gt;here&lt;/a&gt; for common HTTP response status code meanings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Below is a list of potential axios identified error&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_BAD_OPTION_VALUE&lt;/td&gt; &#xA;   &lt;td&gt;Invalid or unsupported value provided in axios configuration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_BAD_OPTION&lt;/td&gt; &#xA;   &lt;td&gt;Invalid option provided in axios configuration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ECONNABORTED&lt;/td&gt; &#xA;   &lt;td&gt;Request timed out due to exceeding timeout specified in axios configuration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ETIMEDOUT&lt;/td&gt; &#xA;   &lt;td&gt;Request timed out due to exceeding default axios timelimit.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_NETWORK&lt;/td&gt; &#xA;   &lt;td&gt;Network-related issue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_FR_TOO_MANY_REDIRECTS&lt;/td&gt; &#xA;   &lt;td&gt;Request is redirected too many times; exceeds max redirects specified in axios configuration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_DEPRECATED&lt;/td&gt; &#xA;   &lt;td&gt;Deprecated feature or method used in axios.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_BAD_RESPONSE&lt;/td&gt; &#xA;   &lt;td&gt;Response cannot be parsed properly or is in an unexpected format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_BAD_REQUEST&lt;/td&gt; &#xA;   &lt;td&gt;Requested has unexpected format or missing required parameters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_CANCELED&lt;/td&gt; &#xA;   &lt;td&gt;Feature or method is canceled explicitly by the user.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_NOT_SUPPORT&lt;/td&gt; &#xA;   &lt;td&gt;Feature or method not supported in the current axios environment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR_INVALID_URL&lt;/td&gt; &#xA;   &lt;td&gt;Invalid URL provided for axios request.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Handling Errors&lt;/h2&gt; &#xA;&lt;p&gt;the default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;)&#xA;  .catch(function (error) {&#xA;    if (error.response) {&#xA;      // The request was made and the server responded with a status code&#xA;      // that falls out of the range of 2xx&#xA;      console.log(error.response.data);&#xA;      console.log(error.response.status);&#xA;      console.log(error.response.headers);&#xA;    } else if (error.request) {&#xA;      // The request was made but no response was received&#xA;      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of&#xA;      // http.ClientRequest in node.js&#xA;      console.log(error.request);&#xA;    } else {&#xA;      // Something happened in setting up the request that triggered an Error&#xA;      console.log(&#39;Error&#39;, error.message);&#xA;    }&#xA;    console.log(error.config);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;validateStatus&lt;/code&gt; config option, you can override the default condition (status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300) and define HTTP code(s) that should throw an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;, {&#xA;  validateStatus: function (status) {&#xA;    return status &amp;lt; 500; // Resolve only if the status code is less than 500&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;toJSON&lt;/code&gt; you get an object with more information about the HTTP error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;)&#xA;  .catch(function (error) {&#xA;    console.log(error.toJSON());&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;h3&gt;AbortController&lt;/h3&gt; &#xA;&lt;p&gt;Starting from &lt;code&gt;v0.22.0&lt;/code&gt; Axios supports AbortController to cancel requests in fetch API way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const controller = new AbortController();&#xA;&#xA;axios.get(&#39;/foo/bar&#39;, {&#xA;   signal: controller.signal&#xA;}).then(function(response) {&#xA;   //...&#xA;});&#xA;// cancel the request&#xA;controller.abort()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CancelToken &lt;code&gt;👎deprecated&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can also cancel a request using a &lt;em&gt;CancelToken&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The axios cancel token API is based on the withdrawn &lt;a href=&#34;https://github.com/tc39/proposal-cancelable-promises&#34;&gt;cancellable promises proposal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This API is deprecated since v0.22.0 and shouldn&#39;t be used in new projects&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can create a cancel token using the &lt;code&gt;CancelToken.source&lt;/code&gt; factory as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const CancelToken = axios.CancelToken;&#xA;const source = CancelToken.source();&#xA;&#xA;axios.get(&#39;/user/12345&#39;, {&#xA;  cancelToken: source.token&#xA;}).catch(function (thrown) {&#xA;  if (axios.isCancel(thrown)) {&#xA;    console.log(&#39;Request canceled&#39;, thrown.message);&#xA;  } else {&#xA;    // handle error&#xA;  }&#xA;});&#xA;&#xA;axios.post(&#39;/user/12345&#39;, {&#xA;  name: &#39;new name&#39;&#xA;}, {&#xA;  cancelToken: source.token&#xA;})&#xA;&#xA;// cancel the request (the message parameter is optional)&#xA;source.cancel(&#39;Operation canceled by the user.&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create a cancel token by passing an executor function to the &lt;code&gt;CancelToken&lt;/code&gt; constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const CancelToken = axios.CancelToken;&#xA;let cancel;&#xA;&#xA;axios.get(&#39;/user/12345&#39;, {&#xA;  cancelToken: new CancelToken(function executor(c) {&#xA;    // An executor function receives a cancel function as a parameter&#xA;    cancel = c;&#xA;  })&#xA;});&#xA;&#xA;// cancel the request&#xA;cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can cancel several requests with the same cancel token/abort controller. If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;During the transition period, you can use both cancellation APIs, even for the same request:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format&lt;/h2&gt; &#xA;&lt;h3&gt;URLSearchParams&lt;/h3&gt; &#xA;&lt;p&gt;By default, axios serializes JavaScript objects to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&#34;&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format&lt;/a&gt; instead, you can use the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&#34;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; API, which is &lt;a href=&#34;http://www.caniuse.com/#feat=urlsearchparams&#34;&gt;supported&lt;/a&gt; in the vast majority of browsers,and &lt;a href=&#34;https://nodejs.org/api/url.html#url_class_urlsearchparams&#34;&gt; Node&lt;/a&gt; starting with v10 (released in 2018).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const params = new URLSearchParams({ foo: &#39;bar&#39; });&#xA;params.append(&#39;extraparam&#39;, &#39;value&#39;);&#xA;axios.post(&#39;/foo&#39;, params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query string (Older browsers)&lt;/h3&gt; &#xA;&lt;p&gt;For compatibility with very old browsers, there is a &lt;a href=&#34;https://github.com/WebReflection/url-search-params&#34;&gt;polyfill&lt;/a&gt; available (make sure to polyfill the global environment).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can encode data using the &lt;a href=&#34;https://github.com/ljharb/qs&#34;&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;axios.post(&#39;/foo&#39;, qs.stringify({ &#39;bar&#39;: 123 }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in another way (ES6),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import qs from &#39;qs&#39;;&#xA;const data = { &#39;bar&#39;: 123 };&#xA;const options = {&#xA;  method: &#39;POST&#39;,&#xA;  headers: { &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39; },&#xA;  data: qs.stringify(data),&#xA;  url,&#xA;};&#xA;axios(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Older Node.js versions&lt;/h3&gt; &#xA;&lt;p&gt;For older Node.js engines, you can use the &lt;a href=&#34;https://nodejs.org/api/querystring.html&#34;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const querystring = require(&#39;querystring&#39;);&#xA;axios.post(&#39;https://something.com/&#39;, querystring.stringify({ foo: &#39;bar&#39; }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://github.com/ljharb/qs&#34;&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;qs&lt;/code&gt; library is preferable if you need to stringify nested objects, as the &lt;code&gt;querystring&lt;/code&gt; method has &lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/issues/1665&#34;&gt;known issues&lt;/a&gt; with that use case.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🆕 Automatic serialization to URLSearchParams&lt;/h3&gt; &#xA;&lt;p&gt;Axios will automatically serialize the data object to urlencoded format if the content-type header is set to &#34;application/x-www-form-urlencoded&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const data = {&#xA;  x: 1,&#xA;  arr: [1, 2, 3],&#xA;  arr2: [1, [2], 3],&#xA;  users: [{name: &#39;Peter&#39;, surname: &#39;Griffin&#39;}, {name: &#39;Thomas&#39;, surname: &#39;Anderson&#39;}],&#xA;};&#xA;&#xA;await axios.postForm(&#39;https://postman-echo.com/post&#39;, data,&#xA;  {headers: {&#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;}}&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will handle it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  {&#xA;    x: &#39;1&#39;,&#xA;    &#39;arr[]&#39;: [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ],&#xA;    &#39;arr2[0]&#39;: &#39;1&#39;,&#xA;    &#39;arr2[1][0]&#39;: &#39;2&#39;,&#xA;    &#39;arr2[2]&#39;: &#39;3&#39;,&#xA;    &#39;arr3[]&#39;: [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ],&#xA;    &#39;users[0][name]&#39;: &#39;Peter&#39;,&#xA;    &#39;users[0][surname]&#39;: &#39;griffin&#39;,&#xA;    &#39;users[1][name]&#39;: &#39;Thomas&#39;,&#xA;    &#39;users[1][surname]&#39;: &#39;Anderson&#39;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your backend body-parser (like &lt;code&gt;body-parser&lt;/code&gt; of &lt;code&gt;express.js&lt;/code&gt;) supports nested objects decoding, you will get the same object on the server-side automatically&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var app = express();&#xA;&#xA;  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies&#xA;&#xA;  app.post(&#39;/&#39;, function (req, res, next) {&#xA;     // echo body as JSON&#xA;     res.send(JSON.stringify(req.body));&#xA;  });&#xA;&#xA;  server = app.listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;multipart/form-data&lt;/code&gt; format&lt;/h2&gt; &#xA;&lt;h3&gt;FormData&lt;/h3&gt; &#xA;&lt;p&gt;To send the data as a &lt;code&gt;multipart/formdata&lt;/code&gt; you need to pass a formData instance as a payload. Setting the &lt;code&gt;Content-Type&lt;/code&gt; header is not required as Axios guesses it based on the payload type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const formData = new FormData();&#xA;formData.append(&#39;foo&#39;, &#39;bar&#39;);&#xA;&#xA;axios.post(&#39;https://httpbin.org/post&#39;, formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In node.js, you can use the &lt;a href=&#34;https://github.com/form-data/form-data&#34;&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt; library as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FormData = require(&#39;form-data&#39;);&#xA;&#xA;const form = new FormData();&#xA;form.append(&#39;my_field&#39;, &#39;my value&#39;);&#xA;form.append(&#39;my_buffer&#39;, new Buffer(10));&#xA;form.append(&#39;my_file&#39;, fs.createReadStream(&#39;/foo/bar.jpg&#39;));&#xA;&#xA;axios.post(&#39;https://example.com&#39;, form)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🆕 Automatic serialization to FormData&lt;/h3&gt; &#xA;&lt;p&gt;Starting from &lt;code&gt;v0.27.0&lt;/code&gt;, Axios supports automatic object serialization to a FormData object if the request &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following request will submit the data in a FormData format (Browser &amp;amp; Node.js):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import axios from &#39;axios&#39;;&#xA;&#xA;axios.post(&#39;https://httpbin.org/post&#39;, {x: 1}, {&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;multipart/form-data&#39;&#xA;  }&#xA;}).then(({data}) =&amp;gt; console.log(data));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the &lt;code&gt;node.js&lt;/code&gt; build, the (&lt;a href=&#34;https://github.com/form-data/form-data&#34;&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt;) polyfill is used by default.&lt;/p&gt; &#xA;&lt;p&gt;You can overload the FormData class by setting the &lt;code&gt;env.FormData&lt;/code&gt; config variable, but you probably won&#39;t need it in most cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const axios = require(&#39;axios&#39;);&#xA;var FormData = require(&#39;form-data&#39;);&#xA;&#xA;axios.post(&#39;https://httpbin.org/post&#39;, {x: 1, buf: new Buffer(10)}, {&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;multipart/form-data&#39;&#xA;  }&#xA;}).then(({data}) =&amp;gt; console.log(data));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Axios FormData serializer supports some special endings to perform the following operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{}&lt;/code&gt; - serialize the value with JSON.stringify&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[]&lt;/code&gt; - unwrap the array-like object as separate fields with the same key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: unwrap/expand operation will be used by default on arrays and FileList objects&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;FormData serializer supports additional options via &lt;code&gt;config.formSerializer: object&lt;/code&gt; property to handle rare cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;visitor: Function&lt;/code&gt; - user-defined visitor function that will be called recursively to serialize the data object to a &lt;code&gt;FormData&lt;/code&gt; object by following custom rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dots: boolean = false&lt;/code&gt; - use dot notation instead of brackets to serialize arrays and objects;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;metaTokens: boolean = true&lt;/code&gt; - add the special ending (e.g &lt;code&gt;user{}: &#39;{&#34;name&#34;: &#34;John&#34;}&#39;&lt;/code&gt;) in the FormData key. The back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;indexes: null|false|true = false&lt;/code&gt; - controls how indexes will be added to unwrapped keys of &lt;code&gt;flat&lt;/code&gt; array-like objects&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;null&lt;/code&gt; - don&#39;t add brackets (&lt;code&gt;arr: 1&lt;/code&gt;, &lt;code&gt;arr: 2&lt;/code&gt;, &lt;code&gt;arr: 3&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;false&lt;/code&gt;(default) - add empty brackets (&lt;code&gt;arr[]: 1&lt;/code&gt;, &lt;code&gt;arr[]: 2&lt;/code&gt;, &lt;code&gt;arr[]: 3&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;true&lt;/code&gt; - add brackets with indexes (&lt;code&gt;arr[0]: 1&lt;/code&gt;, &lt;code&gt;arr[1]: 2&lt;/code&gt;, &lt;code&gt;arr[2]: 3&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s say we have an object like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const obj = {&#xA;  x: 1,&#xA;  arr: [1, 2, 3],&#xA;  arr2: [1, [2], 3],&#xA;  users: [{name: &#39;Peter&#39;, surname: &#39;Griffin&#39;}, {name: &#39;Thomas&#39;, surname: &#39;Anderson&#39;}],&#xA;  &#39;obj2{}&#39;: [{x:1}]&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following steps will be executed by the Axios serializer internally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const formData = new FormData();&#xA;formData.append(&#39;x&#39;, &#39;1&#39;);&#xA;formData.append(&#39;arr[]&#39;, &#39;1&#39;);&#xA;formData.append(&#39;arr[]&#39;, &#39;2&#39;);&#xA;formData.append(&#39;arr[]&#39;, &#39;3&#39;);&#xA;formData.append(&#39;arr2[0]&#39;, &#39;1&#39;);&#xA;formData.append(&#39;arr2[1][0]&#39;, &#39;2&#39;);&#xA;formData.append(&#39;arr2[2]&#39;, &#39;3&#39;);&#xA;formData.append(&#39;users[0][name]&#39;, &#39;Peter&#39;);&#xA;formData.append(&#39;users[0][surname]&#39;, &#39;Griffin&#39;);&#xA;formData.append(&#39;users[1][name]&#39;, &#39;Thomas&#39;);&#xA;formData.append(&#39;users[1][surname]&#39;, &#39;Anderson&#39;);&#xA;formData.append(&#39;obj2{}&#39;, &#39;[{&#34;x&#34;:1}]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Axios supports the following shortcut methods: &lt;code&gt;postForm&lt;/code&gt;, &lt;code&gt;putForm&lt;/code&gt;, &lt;code&gt;patchForm&lt;/code&gt; which are just the corresponding http methods with the &lt;code&gt;Content-Type&lt;/code&gt; header preset to &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Files Posting&lt;/h2&gt; &#xA;&lt;p&gt;You can easily submit a single file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, {&#xA;  &#39;myVar&#39; : &#39;foo&#39;,&#xA;  &#39;file&#39;: document.querySelector(&#39;#fileInput&#39;).files[0]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or multiple files as &lt;code&gt;multipart/form-data&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, {&#xA;  &#39;files[]&#39;: document.querySelector(&#39;#fileInput&#39;).files&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FileList&lt;/code&gt; object can be passed directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, document.querySelector(&#39;#fileInput&#39;).files)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All files will be sent with the same field names: &lt;code&gt;files[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🆕 HTML Form Posting (browser)&lt;/h2&gt; &#xA;&lt;p&gt;Pass HTML Form element as a payload to submit it as &lt;code&gt;multipart/form-data&lt;/code&gt; content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, document.querySelector(&#39;#htmlForm&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FormData&lt;/code&gt; and &lt;code&gt;HTMLForm&lt;/code&gt; objects can also be posted as &lt;code&gt;JSON&lt;/code&gt; by explicitly setting the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;application/json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.post(&#39;https://httpbin.org/post&#39;, document.querySelector(&#39;#htmlForm&#39;), {&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;application/json&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, the Form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form id=&#34;form&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;foo&#34; value=&#34;1&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;deep.prop&#34; value=&#34;2&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;deep prop spaced&#34; value=&#34;3&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;baz&#34; value=&#34;4&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;baz&#34; value=&#34;5&#34;&amp;gt;&#xA;&#xA;  &amp;lt;select name=&#34;user.age&#34;&amp;gt;&#xA;    &amp;lt;option value=&#34;value1&#34;&amp;gt;Value 1&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;value2&#34; selected&amp;gt;Value 2&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;value3&#34;&amp;gt;Value 3&amp;lt;/option&amp;gt;&#xA;  &amp;lt;/select&amp;gt;&#xA;&#xA;  &amp;lt;input type=&#34;submit&#34; value=&#34;Save&#34;&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be submitted as the following JSON object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;foo&#34;: &#34;1&#34;,&#xA;  &#34;deep&#34;: {&#xA;    &#34;prop&#34;: {&#xA;      &#34;spaced&#34;: &#34;3&#34;&#xA;    }&#xA;  },&#xA;  &#34;baz&#34;: [&#xA;    &#34;4&#34;,&#xA;    &#34;5&#34;&#xA;  ],&#xA;  &#34;user&#34;: {&#xA;    &#34;age&#34;: &#34;value2&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending &lt;code&gt;Blobs&lt;/code&gt;/&lt;code&gt;Files&lt;/code&gt; as JSON (&lt;code&gt;base64&lt;/code&gt;) is not currently supported.&lt;/p&gt; &#xA;&lt;h2&gt;🆕 Progress capturing&lt;/h2&gt; &#xA;&lt;p&gt;Axios supports both browser and node environments to capture request upload/download progress. The frequency of progress events is forced to be limited to &lt;code&gt;3&lt;/code&gt; times per second.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.post(url, data, {&#xA;  onUploadProgress: function (axiosProgressEvent) {&#xA;    /*{&#xA;      loaded: number;&#xA;      total?: number;&#xA;      progress?: number; // in range [0..1]&#xA;      bytes: number; // how many bytes have been transferred since the last trigger (delta)&#xA;      estimated?: number; // estimated time in seconds&#xA;      rate?: number; // upload speed in bytes&#xA;      upload: true; // upload sign&#xA;    }*/&#xA;  },&#xA;&#xA;  onDownloadProgress: function (axiosProgressEvent) {&#xA;    /*{&#xA;      loaded: number;&#xA;      total?: number;&#xA;      progress?: number;&#xA;      bytes: number; &#xA;      estimated?: number;&#xA;      rate?: number; // download speed in bytes&#xA;      download: true; // download sign&#xA;    }*/&#xA;  }&#xA;});  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also track stream upload/download progress in node.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {data} = await axios.post(SERVER_URL, readableStream, {&#xA;   onUploadProgress: ({progress}) =&amp;gt; {&#xA;     console.log((progress * 100).toFixed(2));&#xA;   },&#xA;  &#xA;   headers: {&#xA;    &#39;Content-Length&#39;: contentLength&#xA;   },&#xA;&#xA;   maxRedirects: 0 // avoid buffering the entire stream&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Capturing FormData upload progress is not currently supported in node.js environments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Warning&lt;/strong&gt; It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the &lt;strong&gt;node.js&lt;/strong&gt; environment, as follow-redirects package will buffer the entire stream in RAM without following the &#34;backpressure&#34; algorithm.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🆕 Rate limiting&lt;/h2&gt; &#xA;&lt;p&gt;Download and upload rate limits can only be set for the http adapter (node.js):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {&#xA;  onUploadProgress: ({progress, rate}) =&amp;gt; {&#xA;    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)&#xA;  },&#xA;   &#xA;  maxRate: [100 * 1024], // 100KB/s limit&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🆕 AxiosHeaders&lt;/h2&gt; &#xA;&lt;p&gt;Axios has its own &lt;code&gt;AxiosHeaders&lt;/code&gt; class to manipulate headers using a Map-like API that guarantees caseless work. Although HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons and for a workaround when servers mistakenly consider the header&#39;s case. The old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage.&lt;/p&gt; &#xA;&lt;h3&gt;Working with headers&lt;/h3&gt; &#xA;&lt;p&gt;An AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic. The final headers object with string values is obtained by Axios by calling the &lt;code&gt;toJSON&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: By JSON here we mean an object consisting only of string values intended to be sent over the network.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The header value can be one of the following types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;string&lt;/code&gt; - normal string value that will be sent to the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;null&lt;/code&gt; - skip header when rendering to JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;false&lt;/code&gt; - skip header when rendering to JSON, additionally indicates that &lt;code&gt;set&lt;/code&gt; method must be called with &lt;code&gt;rewrite&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like &lt;code&gt;User-Agent&lt;/code&gt; or &lt;code&gt;Content-Type&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; - value is not set&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The header value is considered set if it is not equal to undefined.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The headers object is always initialized inside interceptors and transformers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;  axios.interceptors.request.use((request: InternalAxiosRequestConfig) =&amp;gt; {&#xA;      request.headers.set(&#39;My-header&#39;, &#39;value&#39;);&#xA;&#xA;      request.headers.set({&#xA;        &#34;My-set-header1&#34;: &#34;my-set-value1&#34;,&#xA;        &#34;My-set-header2&#34;: &#34;my-set-value2&#34;&#xA;      });&#xA;      &#xA;      request.headers.set(&#39;User-Agent&#39;, false); // disable subsequent setting the header by Axios&#xA;&#xA;      request.headers.setContentType(&#39;text/plain&#39;);&#xA;    &#xA;      request.headers[&#39;My-set-header2&#39;] = &#39;newValue&#39; // direct access is deprecated&#xA;    &#xA;      return request;&#xA;    }&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can iterate over an &lt;code&gt;AxiosHeaders&lt;/code&gt; instance using a &lt;code&gt;for...of&lt;/code&gt; statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const headers = new AxiosHeaders({&#xA;  foo: &#39;1&#39;,&#xA;  bar: &#39;2&#39;,&#xA;  baz: &#39;3&#39;&#xA;});&#xA;&#xA;for(const [header, value] of headers) {&#xA;  console.log(header, value);&#xA;}&#xA;&#xA;// foo 1&#xA;// bar 2&#xA;// baz 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;new AxiosHeaders(headers?)&lt;/h3&gt; &#xA;&lt;p&gt;Constructs a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constructor(headers?: RawAxiosHeaders | AxiosHeaders | string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the headers object is a string, it will be parsed as RAW HTTP headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const headers = new AxiosHeaders(`&#xA;Host: www.bing.com&#xA;User-Agent: curl/7.54.0&#xA;Accept: */*`);&#xA;&#xA;console.log(headers);&#xA;&#xA;// Object [AxiosHeaders] {&#xA;//   host: &#39;www.bing.com&#39;,&#xA;//   &#39;user-agent&#39;: &#39;curl/7.54.0&#39;,&#xA;//   accept: &#39;*/*&#39;&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AxiosHeaders#set&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;set(headerName, value: Axios, rewrite?: boolean);&#xA;set(headerName, value, rewrite?: (this: AxiosHeaders, value: string, name: string, headers: RawAxiosHeaders) =&amp;gt; boolean);&#xA;set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;rewrite&lt;/code&gt; argument controls the overwriting behavior:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;false&lt;/code&gt; - do not overwrite if header&#39;s value is set (is not &lt;code&gt;undefined&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; (default) - overwrite the header unless its value is set to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;true&lt;/code&gt; - rewrite anyway&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The option can also accept a user-defined function that determines whether the value should be overwritten or not.&lt;/p&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#get(header)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  get(headerName: string, matcher?: true | AxiosHeaderMatcher): AxiosHeaderValue;&#xA;  get(headerName: string, parser: RegExp): RegExpExecArray | null;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns the internal value of the header. It can take an extra argument to parse the header&#39;s value with &lt;code&gt;RegExp.exec&lt;/code&gt;, matcher function or internal key-value parser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const headers = new AxiosHeaders({&#xA;  &#39;Content-Type&#39;: &#39;multipart/form-data; boundary=Asrf456BGe4h&#39;&#xA;});&#xA;&#xA;console.log(headers.get(&#39;Content-Type&#39;)); &#xA;// multipart/form-data; boundary=Asrf456BGe4h&#xA;&#xA;console.log(headers.get(&#39;Content-Type&#39;, true)); // parse key-value pairs from a string separated with \s,;= delimiters:&#xA;// [Object: null prototype] {&#xA;//   &#39;multipart/form-data&#39;: undefined,&#xA;//    boundary: &#39;Asrf456BGe4h&#39;&#xA;// }&#xA;&#xA;&#xA;console.log(headers.get(&#39;Content-Type&#39;, (value, name, headers) =&amp;gt; {&#xA;  return String(value).replace(/a/g, &#39;ZZZ&#39;);&#xA;}));&#xA;// multipZZZrt/form-dZZZtZZZ; boundZZZry=Asrf456BGe4h&#xA;&#xA;console.log(headers.get(&#39;Content-Type&#39;, /boundary=(\w+)/)?.[0]);&#xA;// boundary=Asrf456BGe4h&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns the value of the header.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#has(header, matcher?)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;has(header: string, matcher?: AxiosHeaderMatcher): boolean;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the header is set (has no &lt;code&gt;undefined&lt;/code&gt; value).&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#delete(header, matcher?)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if at least one header has been removed.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#clear(matcher?)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;clear(matcher?: AxiosHeaderMatcher): boolean;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Removes all headers. Unlike the &lt;code&gt;delete&lt;/code&gt; method matcher, this optional matcher will be used to match against the header name rather than the value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const headers = new AxiosHeaders({&#xA;  &#39;foo&#39;: &#39;1&#39;,&#xA;  &#39;x-foo&#39;: &#39;2&#39;,&#xA;  &#39;x-bar&#39;: &#39;3&#39;,&#xA;});&#xA;&#xA;console.log(headers.clear(/^x-/)); // true&#xA;&#xA;console.log(headers.toJSON()); // [Object: null prototype] { foo: &#39;1&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if at least one header has been cleared.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#normalize(format);&lt;/h3&gt; &#xA;&lt;p&gt;If the headers object was changed directly, it can have duplicates with the same name but in different cases. This method normalizes the headers object by combining duplicate keys into one. Axios uses this method internally after calling each interceptor. Set &lt;code&gt;format&lt;/code&gt; to true for converting headers name to lowercase and capitalize the initial letters (&lt;code&gt;cOntEnt-type&lt;/code&gt; =&amp;gt; &lt;code&gt;Content-Type&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const headers = new AxiosHeaders({&#xA;  &#39;foo&#39;: &#39;1&#39;,&#xA;});&#xA;&#xA;headers.Foo = &#39;2&#39;;&#xA;headers.FOO = &#39;3&#39;;&#xA;&#xA;console.log(headers.toJSON()); // [Object: null prototype] { foo: &#39;1&#39;, Foo: &#39;2&#39;, FOO: &#39;3&#39; }&#xA;console.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: &#39;3&#39; }&#xA;console.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: &#39;3&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#concat(...targets)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;concat(...targets: Array&amp;lt;AxiosHeaders | RawAxiosHeaders | string | undefined | null&amp;gt;): AxiosHeaders;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Merges the instance with targets into a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance. If the target is a string, it will be parsed as RAW HTTP headers.&lt;/p&gt; &#xA;&lt;p&gt;Returns a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders#toJSON(asStrings?)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;toJSON(asStrings?: boolean): RawAxiosHeaders;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resolve all internal headers values into a new null prototype object. Set &lt;code&gt;asStrings&lt;/code&gt; to true to resolve arrays as a string containing all elements, separated by commas.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders.from(thing?)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance created from the raw headers passed in, or simply returns the given headers object if it&#39;s an &lt;code&gt;AxiosHeaders&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;h3&gt;AxiosHeaders.concat(...targets)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;concat(...targets: Array&amp;lt;AxiosHeaders | RawAxiosHeaders | string | undefined | null&amp;gt;): AxiosHeaders;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns a new &lt;code&gt;AxiosHeaders&lt;/code&gt; instance created by merging the target objects.&lt;/p&gt; &#xA;&lt;h3&gt;Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;The following shortcuts are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setContentType&lt;/code&gt;, &lt;code&gt;getContentType&lt;/code&gt;, &lt;code&gt;hasContentType&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setContentLength&lt;/code&gt;, &lt;code&gt;getContentLength&lt;/code&gt;, &lt;code&gt;hasContentLength&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setAccept&lt;/code&gt;, &lt;code&gt;getAccept&lt;/code&gt;, &lt;code&gt;hasAccept&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setUserAgent&lt;/code&gt;, &lt;code&gt;getUserAgent&lt;/code&gt;, &lt;code&gt;hasUserAgent&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setContentEncoding&lt;/code&gt;, &lt;code&gt;getContentEncoding&lt;/code&gt;, &lt;code&gt;hasContentEncoding&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔥 Fetch adapter&lt;/h2&gt; &#xA;&lt;p&gt;Fetch adapter was introduced in &lt;code&gt;v1.7.0&lt;/code&gt;. By default, it will be used if &lt;code&gt;xhr&lt;/code&gt; and &lt;code&gt;http&lt;/code&gt; adapters are not available in the build, or not supported by the environment. To use it by default, it must be selected explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {data} = axios.get(url, {&#xA;  adapter: &#39;fetch&#39; // by default [&#39;xhr&#39;, &#39;http&#39;, &#39;fetch&#39;]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create a separate instance for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetchAxios = axios.create({&#xA;  adapter: &#39;fetch&#39;&#xA;});&#xA;&#xA;const {data} = fetchAxios.get(url);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The adapter supports the same functionality as &lt;code&gt;xhr&lt;/code&gt; adapter, &lt;strong&gt;including upload and download progress capturing&lt;/strong&gt;. Also, it supports additional response types such as &lt;code&gt;stream&lt;/code&gt; and &lt;code&gt;formdata&lt;/code&gt; (if supported by the environment).&lt;/p&gt; &#xA;&lt;h2&gt;Semver&lt;/h2&gt; &#xA;&lt;p&gt;Until axios reaches a &lt;code&gt;1.0&lt;/code&gt; release, breaking changes will be released with a new minor version. For example &lt;code&gt;0.5.1&lt;/code&gt;, and &lt;code&gt;0.5.4&lt;/code&gt; will have the same API, but &lt;code&gt;0.6.0&lt;/code&gt; will have breaking changes.&lt;/p&gt; &#xA;&lt;h2&gt;Promises&lt;/h2&gt; &#xA;&lt;p&gt;axios depends on a native ES6 Promise implementation to be &lt;a href=&#34;https://caniuse.com/promises&#34;&gt;supported&lt;/a&gt;. If your environment doesn&#39;t support ES6 Promises, you can &lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;polyfill&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;axios includes &lt;a href=&#34;https://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; definitions and a type guard for axios errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;let user: User = null;&#xA;try {&#xA;  const { data } = await axios.get(&#39;/user?ID=12345&#39;);&#xA;  user = data.userDetails;&#xA;} catch (error) {&#xA;  if (axios.isAxiosError(error)) {&#xA;    handleAxiosError(error);&#xA;  } else {&#xA;    handleUnexpectedError(error);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because axios dual publishes with an ESM default export and a CJS &lt;code&gt;module.exports&lt;/code&gt;, there are some caveats. The recommended setting is to use &lt;code&gt;&#34;moduleResolution&#34;: &#34;node16&#34;&lt;/code&gt; (this is implied by &lt;code&gt;&#34;module&#34;: &#34;node16&#34;&lt;/code&gt;). Note that this requires TypeScript 4.7 or greater. If use ESM, your settings should be fine. If you compile TypeScript to CJS and you can’t use &lt;code&gt;&#34;moduleResolution&#34;: &#34;node 16&#34;&lt;/code&gt;, you have to enable &lt;code&gt;esModuleInterop&lt;/code&gt;. If you use TypeScript to type check CJS JavaScript code, your only option is to use &lt;code&gt;&#34;moduleResolution&#34;: &#34;node16&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Online one-click setup&lt;/h2&gt; &#xA;&lt;p&gt;You can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/axios/axios/raw/main/examples/server.js&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/v1.x/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/v1.x/ECOSYSTEM.md&#34;&gt;Ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/v1.x/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/v1.x/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;axios is heavily inspired by the &lt;a href=&#34;https://docs.angularjs.org/api/ng/service/$http&#34;&gt;$http service&lt;/a&gt; provided in &lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;. Ultimately axios is an effort to provide a standalone &lt;code&gt;$http&lt;/code&gt;-like service for use outside of AngularJS.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>