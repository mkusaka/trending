<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-04T01:28:35Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/genaiscript</title>
    <updated>2024-11-04T01:28:35Z</updated>
    <id>tag:github.com,2024-11-04:/microsoft/genaiscript</id>
    <link href="https://github.com/microsoft/genaiscript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatable GenAI Scripting&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/genaiscript/main/docs/public/images/favicon.png&#34; alt=&#34;A yellow square with the word &amp;quot;gen&amp;quot; in lowercase black letters above the uppercase black letters &amp;quot;AI.&amp;quot;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GenAIScript&lt;/h1&gt; &#xA;&lt;p&gt;üöÄ &lt;strong&gt;JavaScript-ish environment with convenient tooling for file ingestion, prompt development, and structured data extraction.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìÑ &lt;strong&gt;Read the ONLINE DOCUMENTATION at &lt;a href=&#34;https://microsoft.github.io/genaiscript/&#34;&gt;microsoft.github.io/genaiscript&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;üéôÔ∏è &lt;strong&gt;Listen to the podcast&lt;/strong&gt; (generated by NotebookLM).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/ce181cc0-47d5-41cd-bc03-f220407d4dd0&#34;&gt;https://github.com/user-attachments/assets/ce181cc0-47d5-41cd-bc03-f220407d4dd0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üåü Introduction&lt;/h2&gt; &#xA;&lt;h2&gt;Prompting is Coding&lt;/h2&gt; &#xA;&lt;p&gt;Programmatically assemble prompts for LLMs using JavaScript. Orchestrate LLMs, tools, and data in a single script.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript toolbox to work with prompts&lt;/li&gt; &#xA; &lt;li&gt;Abstraction to make it easy and productive&lt;/li&gt; &#xA; &lt;li&gt;Seamless Visual Studio Code integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hello world&lt;/h2&gt; &#xA;&lt;p&gt;Say to you want to create an LLM script that generates a &#39;hello world&#39; poem. You can write the following script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$`Write a &#39;hello world&#39; poem.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; function is a template tag that creates a prompt. The prompt is then sent to the LLM (you configured), which generates the poem.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s make it more interresting by adding files, data and structured output. Say you want to include a file in the prompt, and then save the output in a file. You can write the following script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// read files&#xA;const file = await workspace.readText(&#34;data.txt&#34;)&#xA;// include the file content in the prompt in a context-friendly way&#xA;def(&#34;DATA&#34;, file)&#xA;// the task&#xA;$`Analyze DATA and extract data in JSON in data.json.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;def&lt;/code&gt; function includes the content of the file, and optimizes it if necessary for the target LLM. GenAIScript script also parses the LLM output and will extract the &lt;code&gt;data.json&lt;/code&gt; file automatically.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üöÄ Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;Get started quickly by installing the &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/installation/&#34;&gt;Visual Studio Code Extension&lt;/a&gt; or using the &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/installation&#34;&gt;command line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;h3&gt;üé® Stylized JavaScript &amp;amp; TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;Build prompts programmatically using &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/&#34;&gt;JavaScript&lt;/a&gt; or &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/typescript&#34;&gt;TypeScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;def(&#34;FILE&#34;, env.files, { endsWith: &#34;.pdf&#34; })&#xA;$`Summarize FILE. Today is ${new Date()}.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üöÄ Fast Development Loop&lt;/h3&gt; &#xA;&lt;p&gt;Edit, &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/debugging-scripts/&#34;&gt;Debug&lt;/a&gt;, &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/running-scripts/&#34;&gt;Run&lt;/a&gt;, and &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/testing-scripts/&#34;&gt;Test&lt;/a&gt; your scripts in &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/installation&#34;&gt;Visual Studio Code&lt;/a&gt; or with the &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/installation&#34;&gt;command line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üîó Reuse and Share Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Scripts are &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/&#34;&gt;files&lt;/a&gt;! They can be versioned, shared, and forked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// define the context&#xA;def(&#34;FILE&#34;, env.files, { endsWith: &#34;.pdf&#34; })&#xA;// structure the data&#xA;const schema = defSchema(&#34;DATA&#34;, { type: &#34;array&#34;, items: { type: &#34;string&#34; } })&#xA;// assign the task&#xA;$`Analyze FILE and extract data to JSON using the ${schema} schema.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üìã Data Schemas&lt;/h3&gt; &#xA;&lt;p&gt;Define, validate, and repair data using &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/schemas&#34;&gt;schemas&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const data = defSchema(&#34;MY_DATA&#34;, { type: &#34;array&#34;, items: { ... } })&#xA;$`Extract data from files using ${data} schema.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üìÑ Ingest Text from PDFs, DOCX, ...&lt;/h3&gt; &#xA;&lt;p&gt;Manipulate &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/pdf&#34;&gt;PDFs&lt;/a&gt;, &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/docx&#34;&gt;DOCX&lt;/a&gt;, ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;def(&#34;PDF&#34;, env.files, { endsWith: &#34;.pdf&#34; })&#xA;const { pages } = await parsers.PDF(env.files[0])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üìä Ingest Tables from CSV, XLSX, ...&lt;/h3&gt; &#xA;&lt;p&gt;Manipulate tabular data from &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/csv&#34;&gt;CSV&lt;/a&gt;, &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/xlsx&#34;&gt;XLSX&lt;/a&gt;, ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;def(&#34;DATA&#34;, env.files, { endsWith: &#34;.csv&#34;, sliceHead: 100 })&#xA;const rows = await parsers.CSV(env.files[0])&#xA;defData(&#34;ROWS&#34;, rows, { sliceHead: 100 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üìù Generate Files&lt;/h3&gt; &#xA;&lt;p&gt;Extract files and diff from the LLM output. Preview changes in Refactoring UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$`Save the result in poem.txt.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;FILE ./poem.txt&#xA;The quick brown fox jumps over the lazy dog.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üîç File Search&lt;/h3&gt; &#xA;&lt;p&gt;Grep or fuzz search &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/files&#34;&gt;files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { files } = await workspace.grep(/[a-z][a-z0-9]+/, { globs: &#34;*.md&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LLM Tools&lt;/h3&gt; &#xA;&lt;p&gt;Register JavaScript functions as &lt;strong&gt;tools&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;defTool(&#xA;    &#34;weather&#34;,&#xA;    &#34;query a weather web api&#34;,&#xA;    { location: &#34;string&#34; },&#xA;    async (args) =&amp;gt;&#xA;        await fetch(`https://weather.api.api/?location=${args.location}`)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LLM Agents&lt;/h3&gt; &#xA;&lt;p&gt;Register JavaScript functions as &lt;strong&gt;tools&lt;/strong&gt; and combine tools + prompt into agents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;defAgent(&#xA;    &#34;git&#34;,&#xA;    &#34;Query a repository using Git to accomplish tasks.&#34;,&#xA;    `Your are a helpful LLM agent that can use the git tools to query the current repository.&#xA;    Answer the question in QUERY.&#xA;    - The current repository is the same as github repository.`,&#xA;    { model, system: [&#34;system.github_info&#34;], tools: [&#34;git&#34;] }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then use it as a tool&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script({ tools: &#34;agent&#34; })&#xA;&#xA;$`Do a statistical analysis of the last commits`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üîç RAG Built-in&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/vector-search/&#34;&gt;Vector search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { files } = await retrieval.vectorSearch(&#34;cats&#34;, &#34;**/*.md&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üêô GitHub Models and GitHub Copilot&lt;/h3&gt; &#xA;&lt;p&gt;Run models through &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/configuration/#github-models&#34;&gt;GitHub Models&lt;/a&gt; or &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/configuration/#github-copilot-in-visual-studio-code&#34;&gt;GitHub Copilot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script({ ..., model: &#34;github:gpt-4o&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üíª Local Models&lt;/h3&gt; &#xA;&lt;p&gt;Run your scripts with &lt;a href=&#34;https://microsoft.github.io/genaiscript/getting-started/configuration/#local-models&#34;&gt;Open Source models&lt;/a&gt;, like &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/&#34;&gt;Phi-3&lt;/a&gt;, using &lt;a href=&#34;https://ollama.com/&#34;&gt;Ollama&lt;/a&gt;, &lt;a href=&#34;https://localai.io/&#34;&gt;LocalAI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script({ ..., model: &#34;ollama:phi3&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üêç Code Interpreter&lt;/h3&gt; &#xA;&lt;p&gt;Let the LLM run code in a sandboxed execution environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script({ tools: [&#34;python_code_interpreter&#34;] })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üê≥ Containers&lt;/h3&gt; &#xA;&lt;p&gt;Run code in Docker &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/containers&#34;&gt;containers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const c = await host.container({ image: &#34;python:alpine&#34; })&#xA;const res = await c.exec(&#34;python --version&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üß© LLM Composition&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/inline-prompts/&#34;&gt;Run LLMs&lt;/a&gt; to build your LLM prompts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;for (const file of env.files) {&#xA;    const { text } = await runPrompt((_) =&amp;gt; {&#xA;        _.def(&#34;FILE&#34;, file)&#xA;        _.$`Summarize the FILE.`&#xA;    })&#xA;    def(&#34;SUMMARY&#34;, text)&#xA;}&#xA;$`Summarize all the summaries.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üÖøÔ∏è Prompty support&lt;/h3&gt; &#xA;&lt;p&gt;Run your &lt;a href=&#34;https://prompty.ai&#34;&gt;Prompty&lt;/a&gt; files as well!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;name: poem&#xA;---&#xA;&#xA;Write me a poem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;‚öô Automate with CLI&lt;/h3&gt; &#xA;&lt;p&gt;Automate using the &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/cli&#34;&gt;CLI&lt;/a&gt;, integrate reports in your CI/CD pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx genaiscript run tlaplus-linter &#34;*.tla&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Safety First!&lt;/h3&gt; &#xA;&lt;p&gt;GenAIScript provides built-in Responsible AI system prompts and Azure Content Safety supports to validate &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/content-safety&#34;&gt;content safety&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script({ ...,&#xA;    system: [&#34;system.safety_harmful_content&#34;, ...],&#xA;})&#xA;&#xA;const res = contentSafety.detectPromptInjection(env.vars.input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üí¨ Pull Request Reviews&lt;/h3&gt; &#xA;&lt;p&gt;Integrate into your &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/cli/run/#pull-requests&#34;&gt;Pull Requests checks&lt;/a&gt; through comments, reviews, or description updates. Supports GitHub Actions and Azure DevOps pipelines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx genaiscript ... --pull-request-reviews&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;‚≠ê Tests and Evals&lt;/h3&gt; &#xA;&lt;p&gt;Build reliable prompts using &lt;a href=&#34;https://microsoft.github.io/genaiscript/reference/scripts/tests&#34;&gt;tests and evals&lt;/a&gt; powered by &lt;a href=&#34;https://promptfoo.dev/&#34;&gt;promptfoo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script({ ..., tests: {&#xA;  files: &#34;penguins.csv&#34;,&#xA;  rubric: &#34;is a data analysis report&#34;,&#xA;  facts: &#34;The data refers about penguin population in Antarctica.&#34;,&#xA;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LLM friendly docs&lt;/h3&gt; &#xA;&lt;p&gt;If you are an LLM crawler, fetch &lt;a href=&#34;https://microsoft.github.io/genaiscript/.well-known/llms.txt&#34;&gt;https://microsoft.github.io/genaiscript/.well-known/llms.txt&lt;/a&gt; for an documentation map or add the &lt;code&gt;.md&lt;/code&gt; suffix to any documentation URLs to get a raw markdown content.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://microsoft.github.io/genaiscript/guides/prompt-as-code.md&#34;&gt;https://microsoft.github.io/genaiscript/guides/prompt-as-code.md&lt;/a&gt; (note the .md extension)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We accept contributions! Checkout the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/genaiscript/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; page for details and developer setup.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DS4SD/docling</title>
    <updated>2024-11-04T01:28:35Z</updated>
    <id>tag:github.com,2024-11-04:/DS4SD/docling</id>
    <link href="https://github.com/DS4SD/docling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get your docs ready for gen AI&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ds4sd/docling&#34;&gt; &lt;img loading=&#34;lazy&#34; alt=&#34;Docling&#34; src=&#34;https://github.com/DS4SD/docling/raw/main/docs/assets/docling_processing.png&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Docling&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2408.09869&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2408.09869-b31b1b.svg?sanitize=true&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ds4sd.github.io/docling/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-live-brightgreen&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/docling/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/docling&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/python-3.10%20%7C%203.11%20%7C%203.12-blue&#34; alt=&#34;Python&#34;&gt; &lt;a href=&#34;https://python-poetry.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://python-poetry.org/badge/v0.json&#34; alt=&#34;Poetry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336&#34; alt=&#34;Imports: isort&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pydantic.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v2.json&#34; alt=&#34;Pydantic v2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pre-commit/pre-commit&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;amp;logoColor=white&#34; alt=&#34;pre-commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/DS4SD/docling&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docling parses documents and exports them to the desired format with ease and speed.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üóÇÔ∏è Reads popular document formats (PDF, DOCX, PPTX, Images, HTML, AsciiDoc, Markdown) and exports to Markdown and JSON&lt;/li&gt; &#xA; &lt;li&gt;üìë Advanced PDF document understanding including page layout, reading order &amp;amp; table structures&lt;/li&gt; &#xA; &lt;li&gt;üß© Unified, expressive &lt;a href=&#34;https://ds4sd.github.io/docling/concepts/docling_document/&#34;&gt;DoclingDocument&lt;/a&gt; representation format&lt;/li&gt; &#xA; &lt;li&gt;üìù Metadata extraction, including title, authors, references &amp;amp; language&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ Seamless LlamaIndex ü¶ô &amp;amp; LangChain ü¶úüîó integration for powerful RAG / QA applications&lt;/li&gt; &#xA; &lt;li&gt;üîç OCR support for scanned PDFs&lt;/li&gt; &#xA; &lt;li&gt;üíª Simple and convenient CLI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Explore the &lt;a href=&#34;https://ds4sd.github.io/docling/&#34;&gt;documentation&lt;/a&gt; to discover plenty examples and unlock the full power of Docling!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use Docling, simply install &lt;code&gt;docling&lt;/code&gt; from your package manager, e.g. pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install docling&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Works on macOS, Linux and Windows environments. Both x86_64 and arm64 architectures.&lt;/p&gt; &#xA;&lt;p&gt;More &lt;a href=&#34;https://ds4sd.github.io/docling/installation/&#34;&gt;detailed installation instructions&lt;/a&gt; are available in the docs.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To convert individual documents, use &lt;code&gt;convert()&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from docling.document_converter import DocumentConverter&#xA;&#xA;source = &#34;https://arxiv.org/pdf/2408.09869&#34;  # document per local path or URL&#xA;converter = DocumentConverter()&#xA;result = converter.convert(source)&#xA;print(result.document.export_to_markdown())  # output: &#34;## Docling Technical Report[...]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://ds4sd.github.io/docling/&#34;&gt;Getting started&lt;/a&gt;. You will find lots of tuning options to leverage all the advanced capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Get help and support&lt;/h2&gt; &#xA;&lt;p&gt;Please feel free to connect with us using the &lt;a href=&#34;https://github.com/DS4SD/docling/discussions&#34;&gt;discussion section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Technical report&lt;/h2&gt; &#xA;&lt;p&gt;For more details on Docling&#39;s inner workings, check out the &lt;a href=&#34;https://arxiv.org/abs/2408.09869&#34;&gt;Docling Technical Report&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/DS4SD/docling/raw/main/CONTRIBUTING.md&#34;&gt;Contributing to Docling&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;If you use Docling in your projects, please consider citing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bib&#34;&gt;@techreport{Docling,&#xA;  author = {Deep Search Team},&#xA;  month = {8},&#xA;  title = {Docling Technical Report},&#xA;  url = {https://arxiv.org/abs/2408.09869},&#xA;  eprint = {2408.09869},&#xA;  doi = {10.48550/arXiv.2408.09869},&#xA;  version = {1.0.0},&#xA;  year = {2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Docling codebase is under MIT license. For individual model usage, please refer to the model licenses found in the original packages.&lt;/p&gt;</summary>
  </entry>
</feed>