<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T01:31:15Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PromtEngineer/localGPT</title>
    <updated>2023-06-01T01:31:15Z</updated>
    <id>tag:github.com,2023-06-01:/PromtEngineer/localGPT</id>
    <link href="https://github.com/PromtEngineer/localGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with your documents on your local device using GPT models. No data leaves your device and 100% private.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;localGPT&lt;/h1&gt; &#xA;&lt;p&gt;This project was inspired by the original privateGPT (&lt;a href=&#34;https://github.com/imartinez/privateGPT&#34;&gt;https://github.com/imartinez/privateGPT&lt;/a&gt;). Most of the description here is inspired by the original privateGPT.&lt;/p&gt; &#xA;&lt;p&gt;In this model, I have replaced the GPT4ALL model with Vicuna-7B model and we are using the InstructorEmbeddings instead of LlamaEmbeddings as used in the original privateGPT. Both Embeddings as well as LLM will run on GPU instead of CPU. It also has CPU support if you do not have a GPU (see below for instruction).&lt;/p&gt; &#xA;&lt;p&gt;Ask questions to your documents without an internet connection, using the power of LLMs. 100% private, no data leaves your execution environment at any point. You can ingest documents and ask questions without an internet connection!&lt;/p&gt; &#xA;&lt;p&gt;Built with &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/TheBloke/vicuna-7B-1.1-HF&#34;&gt;Vicuna-7B&lt;/a&gt; and &lt;a href=&#34;https://instructor-embedding.github.io/&#34;&gt;InstructorEmbeddings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;In order to set your environment up to run the code here, first install all requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test dataset&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses a &lt;a href=&#34;https://constitutioncenter.org/media/files/constitution.pdf&#34;&gt;Constitution of USA &lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for ingesting your own dataset&lt;/h2&gt; &#xA;&lt;p&gt;Put any and all of your .txt, .pdf, or .csv files into the SOURCE_DOCUMENTS directory in the load_documents() function, replace the docs_path with the absolute path of your source_documents directory.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to ingest all the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create an index containing the local vectorstore. Will take time, depending on the size of your documents. You can ingest as many documents as you want, and all will be accumulated in the local embeddings database. If you want to start from an empty database, delete the &lt;code&gt;index&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: When you run this for the first time, it will download take time as it has to download the embedding model. In the subseqeunt runs, no data will leave your local enviroment and can be run without internet connection.&lt;/p&gt; &#xA;&lt;h2&gt;Ask questions to your documents, locally!&lt;/h2&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_localGPT.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And wait for the script to require your input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; Enter a query:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hit enter. Wait while the LLM model consumes the prompt and prepares the answer. Once done, it will print the answer and the 4 sources it used as context from your documents; you can then ask another question without re-running the script, just wait for the prompt again.&lt;/p&gt; &#xA;&lt;p&gt;Note: When you run this for the first time, it will need internet connection to download the vicuna-7B model. After that you can turn off your internet connection, and the script inference would still work. No data gets out of your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to finish the script.&lt;/p&gt; &#xA;&lt;h1&gt;Run it on CPU&lt;/h1&gt; &#xA;&lt;p&gt;By default, localGPT will use your GPU to run both the &lt;code&gt;ingest.py&lt;/code&gt; and &lt;code&gt;run_localGPT.py&lt;/code&gt; scripts. But if you do not have a GPU and want to run this on CPU, now you can do that (Warning: Its going to be slow!). You will need to use &lt;code&gt;--device_type cpu&lt;/code&gt;flag with both scripts.&lt;/p&gt; &#xA;&lt;p&gt;For Ingestion run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_localGPT.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Selecting the right local models and the power of &lt;code&gt;LangChain&lt;/code&gt; you can run the entire pipeline locally, without any data leaving your environment, and with reasonable performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ingest.py&lt;/code&gt; uses &lt;code&gt;LangChain&lt;/code&gt; tools to parse the document and create embeddings locally using &lt;code&gt;InstructorEmbeddings&lt;/code&gt;. It then stores the result in a local vector database using &lt;code&gt;Chroma&lt;/code&gt; vector store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_localGPT.py&lt;/code&gt; uses a local LLM (Vicuna-7B in this case) to understand questions and create answers. The context for the answers is extracted from the local vector store using a similarity search to locate the right piece of context from the docs.&lt;/li&gt; &#xA; &lt;li&gt;You can replace this local LLM with any other LLM from the HuggingFace. Make sure whatever LLM you select is in the HF format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Python Version&lt;/h2&gt; &#xA;&lt;p&gt;To use this software, you must have Python 3.10 or later installed. Earlier versions of Python will not compile.&lt;/p&gt; &#xA;&lt;h2&gt;C++ Compiler&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter an error while building a wheel during the &lt;code&gt;pip install&lt;/code&gt; process, you may need to install a C++ compiler on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;For Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;To install a C++ compiler on Windows 10/11, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the following components are selected: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Universal Windows Platform development&lt;/li&gt; &#xA;   &lt;li&gt;C++ CMake tools for Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the MinGW installer from the &lt;a href=&#34;https://sourceforge.net/projects/mingw/&#34;&gt;MinGW website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer and select the &#34;gcc&#34; component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;NVIDIA Driver&#39;s Issues:&lt;/h3&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-22-04&#34;&gt;page&lt;/a&gt; to install NVIDIA Drivers.&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is a test project to validate the feasibility of a fully local solution for question answering using LLMs and Vector embeddings. It is not production ready, and it is not meant to be used in production. Vicuna-7B is based on the Llama model so that has the original Llama license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>s0md3v/roop</title>
    <updated>2023-06-01T01:31:15Z</updated>
    <id>tag:github.com,2023-06-01:/s0md3v/roop</id>
    <link href="https://github.com/s0md3v/roop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;one-click deepfake (face swap)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Take a video and replace the face in it with a face of your choice. You only need one image of the desired face. No dataset, no training.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it, that&#39;s the software. You can watch some demos &lt;a href=&#34;https://drive.google.com/drive/folders/1KHv8n_rd3Lcr2v7jBq1yPSTWM554Gq8e?usp=sharing&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/s0md3v/roop/main/demo.gif&#34; alt=&#34;demo-gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Better deepfake software than this already exist, this is just a hobby project I created to learn about AI. Users must get consent from the concerned people before using their face and must not hide the fact that it is a deepfake when posting content online. I am not responsible for malicious behaviour of end-users.&lt;/p&gt; &#xA;&lt;p&gt;To prevent misuse, it has a built-in check which prevents the program from working on inappropriate media.&lt;/p&gt; &#xA;&lt;h2&gt;How do I install it?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issues according installation will be closed without ceremony from now on, we cannot handle the amount of requests.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two types of installations: basic and gpu-powered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Basic:&lt;/strong&gt; It is more likely to work on your computer but it will also be very slow. You can follow instructions for the basic install &lt;a href=&#34;https://github.com/s0md3v/roop/wiki/1.-Installation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GPU:&lt;/strong&gt; If you have a good GPU and are ready for solving any software issues you may face, you can enable GPU which is wayyy faster. To do this, first follow the basic install instructions given above and then follow GPU-specific instructions &lt;a href=&#34;https://github.com/s0md3v/roop/wiki/2.-GPU-Acceleration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I use it?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: When you run this program for the first time, it will download some models ~300MB in size.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Executing &lt;code&gt;python run.py&lt;/code&gt; command will launch this window: &lt;img src=&#34;https://raw.githubusercontent.com/s0md3v/roop/main/gui-demo.png&#34; alt=&#34;gui-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Choose a face (image with desired face) and the target image/video (image/video in which you want to replace the face) and click on &lt;code&gt;Start&lt;/code&gt;. Open file explorer and navigate to the directory you select your output to be in. You will find a directory named &lt;code&gt;&amp;lt;video_title&amp;gt;&lt;/code&gt; where you can see the frames being swapped in realtime. Once the processing is done, it will create the output file. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t touch the FPS checkbox unless you know what you are doing.&lt;/p&gt; &#xA;&lt;p&gt;Additional command line arguments are given below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;options:&#xA;  -h, --help            show this help message and exit&#xA;  -f SOURCE_IMG, --face SOURCE_IMG&#xA;                        use this face&#xA;  -t TARGET_PATH, --target TARGET_PATH&#xA;                        replace this face&#xA;  -o OUTPUT_FILE, --output OUTPUT_FILE&#xA;                        save output to this file&#xA;  --gpu                 use gpu&#xA;  --keep-fps            maintain original fps&#xA;  --keep-frames         keep frames directory&#xA;  --max-memory MAX_MEMORY&#xA;                        maximum amount of RAM in GB to be used&#xA;  --max-cores CORES_COUNT&#xA;                        number of cores to be use for CPU mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looking for a CLI mode? Using the -f/--face argument will make the program in cli mode.&lt;/p&gt; &#xA;&lt;h2&gt;Future plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve the quality of faces in results&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Replace a selective face throughout the video&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for replacing multiple faces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt;: for making video related operations easy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepinsight&#34;&gt;deepinsight&lt;/a&gt;: for their &lt;a href=&#34;https://github.com/deepinsight/insightface&#34;&gt;insightface&lt;/a&gt; project which provided a well-made library and models.&lt;/li&gt; &#xA; &lt;li&gt;and all developers behind libraries used in this project.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SevaSk/ecoute</title>
    <updated>2023-06-01T01:31:15Z</updated>
    <id>tag:github.com,2023-06-01:/SevaSk/ecoute</id>
    <link href="https://github.com/SevaSk/ecoute" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ecoute is a live transcription tool that provides real-time transcripts for both the user&#39;s microphone input (You) and the user&#39;s speakers output (Speaker) in a textbox. It also generates a suggested response using OpenAI&#39;s GPT-3.5 for the user to say based on the live transcription of the conversation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎧 Ecoute&lt;/h1&gt; &#xA;&lt;p&gt;Ecoute is a live transcription tool that provides real-time transcripts for both the user&#39;s microphone input (You) and the user&#39;s speakers output (Speaker) in a textbox. It also generates a suggested response using OpenAI&#39;s GPT-3.5 for the user to say based on the live transcription of the conversation.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SevaSk/ecoute/assets/50382291/8ac48927-8a26-49fd-80e9-48f980986208&#34;&gt;https://github.com/SevaSk/ecoute/assets/50382291/8ac48927-8a26-49fd-80e9-48f980986208&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ecoute is designed to help users in their conversations by providing live transcriptions and generating contextually relevant responses. By leveraging the power of OpenAI&#39;s GPT-3.5, Ecoute aims to make communication more efficient and enjoyable.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps to set up and run Ecoute on your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;📋 Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;=3.8.0&lt;/li&gt; &#xA; &lt;li&gt;An OpenAI API key&lt;/li&gt; &#xA; &lt;li&gt;Windows OS (Not tested on others)&lt;/li&gt; &#xA; &lt;li&gt;FFmpeg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If FFmpeg is not installed in your system, you can follow the steps below to install it.&lt;/p&gt; &#xA;&lt;p&gt;First, you need to install Chocolatey, a package manager for Windows. Open your PowerShell as Administrator and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Chocolatey is installed, you can install FFmpeg by running the following command in your PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install ffmpeg-full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please ensure that you run these commands in a PowerShell window with administrator privileges. If you face any issues during the installation, you can visit the official Chocolatey and FFmpeg websites for troubleshooting.&lt;/p&gt; &#xA;&lt;h3&gt;🔧 Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/SevaSk/ecoute&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;ecoute&lt;/code&gt; folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd ecoute&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the required packages:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;keys.py&lt;/code&gt; file in the ecoute directory and add your OpenAI API key:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Option 1: You can utilize a command on your command prompt. Run the following command, ensuring to replace &#34;API KEY&#34; with your actual OpenAI API key:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python -c &#34;with open(&#39;keys.py&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f: f.write(&#39;OPENAI_API_KEY=\&#34;API KEY\&#34;&#39;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Option 2: You can create the keys.py file manually. Open up your text editor of choice and enter the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=&#34;API KEY&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace &#34;API KEY&#34; with your actual OpenAI API key. Save this file as keys.py within the ecoute directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🎬 Running Ecoute&lt;/h3&gt; &#xA;&lt;p&gt;Run the main script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a better and faster version, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon initiation, Ecoute will begin transcribing your microphone input and speaker output in real-time, generating a suggested response based on the conversation. Please note that it might take a few seconds for the system to warm up before the transcription becomes real-time.&lt;/p&gt; &#xA;&lt;p&gt;The --api flag significantly enhances transcription speed and accuracy, and it&#39;s expected to be the default option in future releases. However, keep in mind that using the Whisper API will consume more OpenAI credits than using the local model. This increased cost is attributed to the advanced features and capabilities that the Whisper API provides. Despite the additional cost, the considerable improvements in speed and transcription accuracy might make it a worthwhile investment for your use case.&lt;/p&gt; &#xA;&lt;h3&gt;⚠️ Limitations&lt;/h3&gt; &#xA;&lt;p&gt;While Ecoute provides real-time transcription and response suggestions, there are several known limitations to its functionality that you should be aware of:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default Mic and Speaker:&lt;/strong&gt; Ecoute is currently configured to listen only to the default microphone and speaker set in your system. It will not detect sound from other devices or systems. If you wish to use a different mic or speaker, you will need to set it as your default device in your system settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whisper Model&lt;/strong&gt;: If the --api flag is not used, we utilize the &#39;tiny&#39; version of the Whisper ASR model, due to its low resource consumption and fast response times. However, this model may not be as accurate as the larger models in transcribing certain types of speech, including accents or uncommon words.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;: The Whisper model used in Ecoute is set to English. As a result, it may not accurately transcribe non-English languages or dialects. We are actively working to add multi-language support to future versions of the program.&lt;/p&gt; &#xA;&lt;h2&gt;📖 License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/SevaSk/ecoute/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Feel free to open issues or submit pull requests to improve Ecoute.&lt;/p&gt;</summary>
  </entry>
</feed>