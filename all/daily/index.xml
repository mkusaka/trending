<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-10T01:24:14Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xacme/ERC404</title>
    <updated>2024-02-10T01:24:14Z</updated>
    <id>tag:github.com,2024-02-10:/0xacme/ERC404</id>
    <link href="https://github.com/0xacme/ERC404" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ERC404&lt;/h1&gt; &#xA;&lt;p&gt;ERC404 is an experimental, mixed ERC20 / ERC721 implementation with native liquidity and fractionalization. While these two standards are not designed to be mixed, this implementation strives to do so in as robust a manner as possible while minimizing tradeoffs.&lt;/p&gt; &#xA;&lt;p&gt;In it&#39;s current implementation, ERC404 effectively isolates ERC20 / ERC721 standard logic or introduces pathing where possible. Pathing could best be described as a lossy encoding scheme in which token amount data and ids occupy shared space under the assumption that negligible token transfers occupying id space do not or do not need to occur.&lt;/p&gt; &#xA;&lt;p&gt;This standard is entirely experimental and unaudited, while testing has been conducted in an effort to ensure execution is as accurate as possible. The nature of overlapping standards, however, does imply that integrating protocols will not fully understand their mixed function.&lt;/p&gt; &#xA;&lt;h2&gt;ERC721 Notes&lt;/h2&gt; &#xA;&lt;p&gt;The ERC721 implementation here is a bit non-standard, where tokens are instead burned and minted repeatedly as per underlying / fractional transfers. This is a aspect of the concept&#39;s design is deliberate, with the goal of creating an NFT that has native fractionalization, liquidity and encourages some aspects of trading / engagement to farm unique trait sets.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;This source code is unlicensed, and free for anyone to use as they please. Any effort to improve source or explore the concept further is encouraged!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>phidatahq/phidata</title>
    <updated>2024-02-10T01:24:14Z</updated>
    <id>tag:github.com,2024-02-10:/phidatahq/phidata</id>
    <link href="https://github.com/phidatahq/phidata" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build AI Assistants using function calling&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; phidata &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Function calling is all you need &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://python.org/pypi/phidata&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/phidata?color=blue&amp;amp;label=version&#34; alt=&#34;version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/phidatahq/phidata&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-&gt;=3.9-blue&#34; alt=&#34;pythonversion&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/phidatahq/phidata&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img src=&#34;https://pepy.tech/badge/phidata&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/phidatahq/phidata/actions/workflows/build.yml&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img src=&#34;https://github.com/phidatahq/phidata/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build-status&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is phidata?&lt;/h2&gt; &#xA;&lt;p&gt;Phidata is a toolkit for building AI Assistants using function calling.&lt;/p&gt; &#xA;&lt;p&gt;Function calling enables LLMs to achieve tasks by calling functions and intelligently choosing their next step based on the response, just like how humans solve problems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/phidatahq/phidata/assets/22579644/facb618c-17bd-4ab8-99eb-c4c8309e0f45&#34; alt=&#34;assistants&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create an &lt;code&gt;Assistant&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Add Tools (functions), Knowledge (vectordb) and Storage (database)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Serve using Streamlit, FastApi or Django to build your AI application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U phidata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create an Assistant&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;assistant.py&lt;/code&gt; and install openai using &lt;code&gt;pip install openai&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.assistant import Assistant&#xA;&#xA;assistant = Assistant(description=&#34;You help people with their health and fitness goals.&#34;)&#xA;assistant.print_response(&#34;Share a quick healthy breakfast recipe.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;Assistant&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Let it search the web&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.assistant import Assistant&#xA;from phi.tools.duckduckgo import DuckDuckGo&#xA;&#xA;assistant = Assistant(tools=[DuckDuckGo()], show_tool_calls=True)&#xA;assistant.print_response(&#34;Whats happening in France?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;Assistant&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install duckduckgo-search&#xA;&#xA;python assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Checkout these AI apps showcasing the advantage of function calling:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pdf.aidev.run/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;PDF AI&lt;/a&gt; that summarizes and answers questions from PDFs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.aidev.run/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;ArXiv AI&lt;/a&gt; that answers questions about ArXiv papers using the ArXiv API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hn.aidev.run/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;HackerNews AI&lt;/a&gt; that interacts with the HN API to summarize stories, users, find out what&#39;s trending, summarize topics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://demo.aidev.run/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Demo Streamlit App&lt;/a&gt; serving a PDF, Image and Website Assistant (password: admin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.aidev.run/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Demo FastApi &lt;/a&gt; serving a PDF Assistant.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VNoBVR5t1yI&amp;amp;t&#34; title=&#34;Phidata Tutorial&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/VNoBVR5t1yI/0.jpg&#34; alt=&#34;Phidata Tutorial&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AI Applications&lt;/h2&gt; &#xA;&lt;p&gt;After building an Assistant, serve it using &lt;strong&gt;Streamlit&lt;/strong&gt;, &lt;strong&gt;FastApi&lt;/strong&gt; or &lt;strong&gt;Django&lt;/strong&gt; to build your AI application. Instead of wiring tools manually, phidata provides &lt;strong&gt;pre-built&lt;/strong&gt; templates for AI Apps that you can run locally or deploy to AWS with 1 command. Here&#39;s how they work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create your AI App using a template: &lt;code&gt;phi ws create&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run your app locally: &lt;code&gt;phi ws up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run your app on AWS: &lt;code&gt;phi ws up prd:aws&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Assistant that can call an API&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;api_assistant.py&lt;/code&gt; that can call the HackerNews API to get top stories.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;import httpx&#xA;&#xA;from phi.assistant import Assistant&#xA;&#xA;&#xA;def get_top_hackernews_stories(num_stories: int = 10) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Use this function to get top stories from Hacker News.&#xA;&#xA;    Args:&#xA;        num_stories (int): Number of stories to return. Defaults to 10.&#xA;&#xA;    Returns:&#xA;        str: JSON string of top stories.&#xA;    &#34;&#34;&#34;&#xA;&#xA;    # Fetch top story IDs&#xA;    response = httpx.get(&#39;https://hacker-news.firebaseio.com/v0/topstories.json&#39;)&#xA;    story_ids = response.json()&#xA;&#xA;    # Fetch story details&#xA;    stories = []&#xA;    for story_id in story_ids[:num_stories]:&#xA;        story_response = httpx.get(f&#39;https://hacker-news.firebaseio.com/v0/item/{story_id}.json&#39;)&#xA;        story = story_response.json()&#xA;        if &#34;text&#34; in story:&#xA;            story.pop(&#34;text&#34;, None)&#xA;        stories.append(story)&#xA;    return json.dumps(stories)&#xA;&#xA;assistant = Assistant(tools=[get_top_hackernews_stories], show_tool_calls=True)&#xA;assistant.print_response(&#34;Summarize the top stories on hackernews?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;api_assistant.py&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python api_assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See it work through the problem&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;╭──────────┬───────────────────────────────────────────────────────────────────╮&#xA;│ Message  │ Summarize the top stories on hackernews?                          │&#xA;├──────────┼───────────────────────────────────────────────────────────────────┤&#xA;│ Response │                                                                   │&#xA;│ (51.1s)  │  • Running: get_top_hackernews_stories(num_stories=5)             │&#xA;│          │                                                                   │&#xA;│          │ Here&#39;s a summary of the top stories on Hacker News:               │&#xA;│          │                                                                   │&#xA;│          │  1 Boeing Whistleblower: Max 9 Production Line Has &#34;Enormous      │&#xA;│          │    Volume of Defects&#34; A whistleblower has revealed that Boeing&#39;s  │&#xA;│          │    Max 9 production line is riddled with an &#34;enormous volume of   │&#xA;│          │    defects,&#34; with instances where bolts were not installed. The   │&#xA;│          │    story has garnered attention with a score of 140. Read more    │&#xA;│          │  2 Arno A. Penzias, 90, Dies; Nobel Physicist Confirmed Big Bang  │&#xA;│          │    Theory Arno A. Penzias, a Nobel Prize-winning physicist known  │&#xA;│          │    for his work that confirmed the Big Bang Theory, has passed    │&#xA;│          │    away at the age of 90. His contributions to science have been  │&#xA;│          │    significant, leading to discussions and tributes in the        │&#xA;│          │    scientific community. The news has a score of 207. Read more   │&#xA;│          │  3 Why the fuck are we templating YAML? (2019) This provocative   │&#xA;│          │    article from 2019 questions the proliferation of YAML          │&#xA;│          │    templating in software, sparking a larger conversation about   │&#xA;│          │    the complexities and potential pitfalls of this practice. With │&#xA;│          │    a substantial score of 149, it remains a hot topic of debate.  │&#xA;│          │    Read more                                                      │&#xA;│          │  4 Forging signed commits on GitHub Researchers have discovered a │&#xA;│          │    method for forging signed commits on GitHub which is causing   │&#xA;│          │    concern within the tech community about the implications for   │&#xA;│          │    code security and integrity. The story has a current score of  │&#xA;│          │    94. Read more                                                  │&#xA;│          │  5 Qdrant, the Vector Search Database, raised $28M in a Series A  │&#xA;│          │    round Qdrant, a company specializing in vector search          │&#xA;│          │    databases, has successfully raised $28 million in a Series A   │&#xA;│          │    funding round. This financial milestone indicates growing      │&#xA;│          │    interest and confidence in their technology. The story has     │&#xA;│          │    attracted attention with a score of 55. Read more              │&#xA;╰──────────┴───────────────────────────────────────────────────────────────────╯&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Assistant that can analyze data using SQL&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;DuckDbAssistant&lt;/code&gt; can perform data analysis using SQL queries.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;data_assistant.py&lt;/code&gt; and install duckdb using &lt;code&gt;pip install duckdb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;from phi.assistant.duckdb import DuckDbAssistant&#xA;&#xA;duckdb_assistant = DuckDbAssistant(&#xA;    semantic_model=json.dumps({&#xA;        &#34;tables&#34;: [&#xA;            {&#xA;                &#34;name&#34;: &#34;movies&#34;,&#xA;                &#34;description&#34;: &#34;Contains information about movies from IMDB.&#34;,&#xA;                &#34;path&#34;: &#34;https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv&#34;,&#xA;            }&#xA;        ]&#xA;    }),&#xA;)&#xA;&#xA;duckdb_assistant.print_response(&#34;What is the average rating of movies? Show me the SQL.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;data_assistant.py&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python data_assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See it work through the problem&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;INFO     Running: SHOW TABLES&#xA;INFO     Running: CREATE TABLE IF NOT EXISTS &#39;movies&#39;&#xA;         AS SELECT * FROM&#xA;         &#39;https://phidata-public.s3.amazonaws.com/demo_&#xA;         data/IMDB-Movie-Data.csv&#39;&#xA;INFO     Running: DESCRIBE movies&#xA;INFO     Running: SELECT AVG(Rating) AS average_rating&#xA;         FROM movies&#xA;╭──────────┬────────────────────────────────────────────────────────╮&#xA;│ Message  │ What is the average rating of movies? Show me the SQL. │&#xA;├──────────┼────────────────────────────────────────────────────────┤&#xA;│ Response │ The average rating of movies in the dataset is 6.72.   │&#xA;│ (7.6s)   │                                                        │&#xA;│          │ Here is the SQL query used to calculate the average    │&#xA;│          │ rating:                                                │&#xA;│          │                                                        │&#xA;│          │                                                        │&#xA;│          │  SELECT AVG(Rating) AS average_rating                  │&#xA;│          │  FROM movies;                                          │&#xA;│          │                                                        │&#xA;╰──────────┴────────────────────────────────────────────────────────╯&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Assistant that can run python code&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;PythonAssistant&lt;/code&gt; can perform virtually any task using python code.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;python_assistant.py&lt;/code&gt; and install pandas using &lt;code&gt;pip install pandas&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.assistant.python import PythonAssistant&#xA;from phi.file.local.csv import CsvFile&#xA;&#xA;python_assistant = PythonAssistant(&#xA;    files=[&#xA;        CsvFile(&#xA;            path=&#34;https://phidata-public.s3.amazonaws.com/demo_data/IMDB-Movie-Data.csv&#34;,&#xA;            description=&#34;Contains information about movies from IMDB.&#34;,&#xA;        )&#xA;    ],&#xA;    pip_install=True,&#xA;    show_tool_calls=True,&#xA;)&#xA;&#xA;python_assistant.print_response(&#34;What is the average rating of movies?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;python_assistant.py&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python python_assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See it work through the problem&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;WARNING  PythonTools can run arbitrary code, please provide human supervision.&#xA;INFO     Saved: /Users/zu/ai/average_rating&#xA;INFO     Running /Users/zu/ai/average_rating&#xA;╭──────────┬───────────────────────────────────────────────────────────────────╮&#xA;│ Message  │ What is the average rating of movies?                             │&#xA;├──────────┼───────────────────────────────────────────────────────────────────┤&#xA;│ Response │                                                                   │&#xA;│ (4.1s)   │  • Running: save_to_file_and_run(file_name=average_rating,        │&#xA;│          │    code=..., variable_to_return=average_rating)                   │&#xA;│          │                                                                   │&#xA;│          │ The average rating of movies is approximately 6.72.               │&#xA;╰──────────┴───────────────────────────────────────────────────────────────────╯&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Assistant that can generate pydantic models&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;One of our favorite features is generating structured data (i.e. a pydantic model) from sparse information. Meaning we can use Assistants to return pydantic models and generate content which previously could not be possible. In this example, our movie assistant generates an object of the &lt;code&gt;MovieScript&lt;/code&gt; class.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;pydantic_assistant.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import List&#xA;from pydantic import BaseModel, Field&#xA;from rich.pretty import pprint&#xA;from phi.assistant import Assistant&#xA;&#xA;&#xA;class MovieScript(BaseModel):&#xA;    setting: str = Field(..., description=&#34;Provide a nice setting for a blockbuster movie.&#34;)&#xA;    ending: str = Field(..., description=&#34;Ending of the movie. If not available, provide a happy ending.&#34;)&#xA;    genre: str = Field(..., description=&#34;Genre of the movie. If not available, select action, thriller or romantic comedy.&#34;)&#xA;    name: str = Field(..., description=&#34;Give a name to this movie&#34;)&#xA;    characters: List[str] = Field(..., description=&#34;Name of characters for this movie.&#34;)&#xA;    storyline: str = Field(..., description=&#34;3 sentence storyline for the movie. Make it exciting!&#34;)&#xA;&#xA;&#xA;movie_assistant = Assistant(&#xA;    description=&#34;You help people write movie ideas.&#34;,&#xA;    output_model=MovieScript,&#xA;)&#xA;&#xA;pprint(movie_assistant.run(&#34;New York&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;pydantic_assistant.py&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python pydantic_assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See how the assistant generates a structured output&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;MovieScript(&#xA;│   setting=&#39;A bustling and vibrant New York City&#39;,&#xA;│   ending=&#39;The protagonist saves the city and reconciles with their estranged family.&#39;,&#xA;│   genre=&#39;action&#39;,&#xA;│   name=&#39;City Pulse&#39;,&#xA;│   characters=[&#39;Alex Mercer&#39;, &#39;Nina Castillo&#39;, &#39;Detective Mike Johnson&#39;],&#xA;│   storyline=&#39;In the heart of New York City, a former cop turned vigilante, Alex Mercer, teams up with a street-smart activist, Nina Castillo, to take down a corrupt political figure who threatens to destroy the city. As they navigate through the intricate web of power and deception, they uncover shocking truths that push them to the brink of their abilities. With time running out, they must race against the clock to save New York and confront their own demons.&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;A PDF Assistant with Knowledge &amp;amp; Storage&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Lets create a PDF Assistant that can answer questions from a PDF. We&#39;ll use &lt;code&gt;PgVector&lt;/code&gt; for knowledge and storage.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Knowledge Base:&lt;/strong&gt; information that the Assistant can search to improve its responses (uses a vector db).&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Storage:&lt;/strong&gt; provides long term memory for Assistants (uses a database).&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Run PgVector&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;docker desktop&lt;/a&gt; for running PgVector in a container.&lt;/li&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;resources.py&lt;/code&gt; with the following contents&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from phi.docker.app.postgres import PgVectorDb&#xA;from phi.docker.resources import DockerResources&#xA;&#xA;# -*- PgVector running on port 5432:5432&#xA;vector_db = PgVectorDb(&#xA;    pg_user=&#34;ai&#34;,&#xA;    pg_password=&#34;ai&#34;,&#xA;    pg_database=&#34;ai&#34;,&#xA;    debug_mode=True,&#xA;)&#xA;&#xA;# -*- DockerResources&#xA;dev_docker_resources = DockerResources(apps=[vector_db])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Start &lt;code&gt;PgVector&lt;/code&gt; using&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi start resources.py -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Create PDF Assistant&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a file &lt;code&gt;pdf_assistant.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import typer&#xA;from rich.prompt import Prompt&#xA;from typing import Optional, List&#xA;from phi.assistant import Assistant&#xA;from phi.storage.assistant.postgres import PgAssistantStorage&#xA;from phi.knowledge.pdf import PDFUrlKnowledgeBase&#xA;from phi.vectordb.pgvector import PgVector2&#xA;&#xA;from resources import vector_db&#xA;&#xA;knowledge_base = PDFUrlKnowledgeBase(&#xA;    urls=[&#34;https://phi-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf&#34;],&#xA;    vector_db=PgVector2(&#xA;        collection=&#34;recipes&#34;,&#xA;        db_url=vector_db.get_db_connection_local(),&#xA;    ),&#xA;)&#xA;# Comment out after first run&#xA;knowledge_base.load(recreate=False)&#xA;&#xA;storage = PgAssistantStorage(&#xA;    table_name=&#34;pdf_assistant&#34;,&#xA;    db_url=vector_db.get_db_connection_local(),&#xA;)&#xA;&#xA;&#xA;def pdf_assistant(new: bool = False, user: str = &#34;user&#34;):&#xA;    run_id: Optional[str] = None&#xA;&#xA;    if not new:&#xA;        existing_run_ids: List[str] = storage.get_all_run_ids(user)&#xA;        if len(existing_run_ids) &amp;gt; 0:&#xA;            run_id = existing_run_ids[0]&#xA;&#xA;    assistant = Assistant(&#xA;        run_id=run_id,&#xA;        user_id=user,&#xA;        knowledge_base=knowledge_base,&#xA;        storage=storage,&#xA;        # use_tools=True adds functions to&#xA;        # search the knowledge base and chat history&#xA;        use_tools=True,&#xA;        show_tool_calls=True,&#xA;        # Uncomment the following line to use traditional RAG&#xA;        # add_references_to_prompt=True,&#xA;    )&#xA;    if run_id is None:&#xA;        run_id = assistant.run_id&#xA;        print(f&#34;Started Run: {run_id}\n&#34;)&#xA;    else:&#xA;        print(f&#34;Continuing Run: {run_id}\n&#34;)&#xA;&#xA;    while True:&#xA;        message = Prompt.ask(f&#34;[bold] &lt;span&gt;😎&lt;/span&gt; {user} [/bold]&#34;)&#xA;        if message in (&#34;exit&#34;, &#34;bye&#34;):&#xA;            break&#xA;        assistant.print_response(message)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    typer.run(pdf_assistant)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Install libraries&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U pgvector pypdf psycopg sqlalchemy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;Run PDF Assistant&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python pdf_assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Ask a question:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;How do I make pad thai?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See how the Assistant searches the knowledge base and returns a response.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;Show output&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Started Run: d28478ea-75ed-4710-8191-22564ebfb140&#xA;&#xA;INFO     Loading knowledge base&#xA;INFO     Reading:&#xA;         https://www.family-action.org.uk/content/uploads/2019/07/meals-more-recipes.pdf&#xA;INFO     Loaded 82 documents to knowledge base&#xA; 😎 user : How do I make chicken tikka salad?&#xA;╭──────────┬─────────────────────────────────────────────────────────────────────────────────╮&#xA;│ Message  │ How do I make chicken tikka salad?                                              │&#xA;├──────────┼─────────────────────────────────────────────────────────────────────────────────┤&#xA;│ Response │                                                                                 │&#xA;│ (7.2s)   │  • Running: search_knowledge_base(query=chicken tikka salad)                    │&#xA;│          │                                                                                 │&#xA;│          │ I found a recipe for Chicken Tikka Salad that serves 2. Here are the            │&#xA;│          │ ingredients and steps:                                                          │&#xA;│          │                                                                                 │&#xA;│          │ Ingredients:                                                                    │&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Message &lt;code&gt;bye&lt;/code&gt; to exit, start the assistant again using &lt;code&gt;python pdf_assistant.py&lt;/code&gt; and ask:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;What was my last message?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See how the assistant now maintains storage across sessions.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;pdf_assistant.py&lt;/code&gt; file with the &lt;code&gt;--new&lt;/code&gt; flag to start a new run.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python pdf_assistant.py --new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;5&#34;&gt; &#xA;  &lt;li&gt;Stop PgVector&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Play around and then stop &lt;code&gt;PgVector&lt;/code&gt; using &lt;code&gt;phi stop resources.py&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi stop resources.py -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Build an AI App using Streamlit, FastApi and PgVector&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Let&#39;s build an &lt;strong&gt;AI App&lt;/strong&gt; using GPT-4 as the LLM, Streamlit as the chat interface, FastApi as the API and PgVector for knowledge and storage. Read the full tutorial &lt;a href=&#34;https://docs.phidata.com/ai-app/run-local&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Create your codebase&lt;/h3&gt; &#xA; &lt;p&gt;Create your codebase using the &lt;code&gt;ai-app&lt;/code&gt; template&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi ws create -t ai-app -n ai-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will create a folder &lt;code&gt;ai-app&lt;/code&gt; with a pre-built AI App that you can customize and make your own.&lt;/p&gt; &#xA; &lt;h3&gt;Serve your App using Streamlit&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://streamlit.io&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Streamlit&lt;/a&gt; allows us to build micro front-ends and is extremely useful for building basic applications in pure python. Start the &lt;code&gt;app&lt;/code&gt; group using:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi ws up --group app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Press Enter&lt;/strong&gt; to confirm and give a few minutes for the image to download.&lt;/p&gt; &#xA; &lt;h4&gt;PDF Assistant&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;http://localhost:8501&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;localhost:8501&lt;/a&gt; to view streamlit apps that you can customize and make your own.&lt;/li&gt; &#xA;  &lt;li&gt;Click on &lt;strong&gt;PDF Assistant&lt;/strong&gt; in the sidebar&lt;/li&gt; &#xA;  &lt;li&gt;Enter a username and wait for the knowledge base to load.&lt;/li&gt; &#xA;  &lt;li&gt;Choose either the &lt;code&gt;RAG&lt;/code&gt; or &lt;code&gt;Autonomous&lt;/code&gt; Assistant type.&lt;/li&gt; &#xA;  &lt;li&gt;Ask &#34;How do I make pad thai?&#34;&lt;/li&gt; &#xA;  &lt;li&gt;Upload PDFs and ask questions&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;We provide a default PDF of ThaiRecipes that you can clear using the &lt;code&gt;Clear Knowledge Base&lt;/code&gt; button. The PDF is only for testing.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;img width=&#34;800&#34; alt=&#34;chat-with-pdf&#34; src=&#34;https://github.com/phidatahq/phidata/assets/22579644/a8eff0ac-963c-43cb-a784-920bd6713a48&#34;&gt; &#xA; &lt;h3&gt;Optional: Serve your App using FastApi&lt;/h3&gt; &#xA; &lt;p&gt;Streamlit is great for building micro front-ends but any production application will be built using a front-end framework like &lt;code&gt;next.js&lt;/code&gt; backed by a RestApi built using a framework like &lt;code&gt;FastApi&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Your AI App comes ready-to-use with FastApi endpoints.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Update the &lt;code&gt;workspace/settings.py&lt;/code&gt; file and set &lt;code&gt;dev_api_enabled=True&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...&#xA;ws_settings = WorkspaceSettings(&#xA;    ...&#xA;    # Uncomment the following line&#xA;    dev_api_enabled=True,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Start the &lt;code&gt;api&lt;/code&gt; group using:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi ws up --group api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Press Enter&lt;/strong&gt; to confirm and give a few minutes for the image to download.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;View API Endpoints&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open &lt;a href=&#34;http://localhost:8000/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;localhost:8000/docs&lt;/a&gt; to view the API Endpoints.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Load the knowledge base using &lt;code&gt;/v1/assitants/load-knowledge-base&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Test the &lt;code&gt;v1/assitants/chat&lt;/code&gt; endpoint with &lt;code&gt;{&#34;message&#34;: &#34;How do I make chicken curry?&#34;}&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;The Api comes pre-built with endpoints that you can integrate with your front-end.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Optional: Run Jupyterlab&lt;/h3&gt; &#xA; &lt;p&gt;A jupyter notebook is a must-have for AI development and your &lt;code&gt;ai-app&lt;/code&gt; comes with a notebook pre-installed with the required dependencies. Enable it by updating the &lt;code&gt;workspace/settings.py&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...&#xA;ws_settings = WorkspaceSettings(&#xA;    ...&#xA;    # Uncomment the following line&#xA;    dev_jupyter_enabled=True,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Start &lt;code&gt;jupyter&lt;/code&gt; using:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi ws up --group jupyter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Press Enter&lt;/strong&gt; to confirm and give a few minutes for the image to download (only the first time). Verify container status and view logs on the docker dashboard.&lt;/p&gt; &#xA; &lt;h4&gt;View Jupyterlab UI&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open &lt;a href=&#34;http://localhost:8888&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;localhost:8888&lt;/a&gt; to view the Jupyterlab UI. Password: &lt;strong&gt;admin&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Play around with cookbooks in the &lt;code&gt;notebooks&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Delete local resources&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Stop the workspace&lt;/h3&gt; &#xA; &lt;p&gt;Play around and stop the workspace using:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;phi ws down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Run your AI App on AWS&lt;/h3&gt; &#xA; &lt;p&gt;Read how to &lt;a href=&#34;https://docs.phidata.com/quickstart/run-aws&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;run your AI App on AWS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/phidatahq/phidata/tree/main/cookbook&#34;&gt;Checkout the cookbook for more examples&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can find the full documentation &lt;a href=&#34;https://docs.phidata.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can also chat with us on &lt;a href=&#34;https://discord.gg/4MtYHHrgA8&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or email us at &lt;a href=&#34;mailto:help@phidata.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&lt;a href=&#34;mailto:help@phidata.com&#34;&gt;help@phidata.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building AI for your product?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve helped many companies build AI for their products, the general workflow is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Train an assistant&lt;/strong&gt; with proprietary data to perform tasks specific to your product.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Connect your product&lt;/strong&gt; to the assistant via an API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customize, Monitor and Improve&lt;/strong&gt; the AI.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We provide dedicated support and development for AI products. &lt;a href=&#34;https://cal.com/phidata/intro&#34;&gt;Book a call&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re an open-source project and welcome contributions, please read the &lt;a href=&#34;https://raw.githubusercontent.com/phidatahq/phidata/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Request a feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a feature request, please open an issue or make a pull request.&lt;/li&gt; &#xA; &lt;li&gt;If you have ideas on how we can improve, please create a discussion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Our roadmap is available &lt;a href=&#34;https://github.com/orgs/phidatahq/projects/2/views/1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;. If you have a feature request, please open an issue/discussion.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenZeppelin/openzeppelin-contracts</title>
    <updated>2024-02-10T01:24:14Z</updated>
    <id>tag:github.com,2024-02-10:/OpenZeppelin/openzeppelin-contracts</id>
    <link href="https://github.com/OpenZeppelin/openzeppelin-contracts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenZeppelin Contracts is a library for secure smart contract development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/logo.svg?sanitize=true&#34; alt=&#34;OpenZeppelin&#34; height=&#34;40px&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/@openzeppelin/contracts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@openzeppelin/contracts.svg?sanitize=true&#34; alt=&#34;NPM Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gitpoap.io/gh/OpenZeppelin/openzeppelin-contracts&#34;&gt;&lt;img src=&#34;https://public-api.gitpoap.io/v1/repo/OpenZeppelin/openzeppelin-contracts/badge&#34; alt=&#34;GitPOAPs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.openzeppelin.com/contracts&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-%F0%9F%93%84-yellow&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.openzeppelin.com/contracts&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-%F0%9F%92%AC-yellow&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A library for secure smart contract development.&lt;/strong&gt; Build on a solid foundation of community-vetted code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementations of standards like &lt;a href=&#34;https://docs.openzeppelin.com/contracts/erc20&#34;&gt;ERC20&lt;/a&gt; and &lt;a href=&#34;https://docs.openzeppelin.com/contracts/erc721&#34;&gt;ERC721&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Flexible &lt;a href=&#34;https://docs.openzeppelin.com/contracts/access-control&#34;&gt;role-based permissioning&lt;/a&gt; scheme.&lt;/li&gt; &#xA; &lt;li&gt;Reusable &lt;a href=&#34;https://docs.openzeppelin.com/contracts/utilities&#34;&gt;Solidity components&lt;/a&gt; to build custom contracts and complex decentralized systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;🧙&lt;/span&gt; &lt;strong&gt;Not sure how to get started?&lt;/strong&gt; Check out &lt;a href=&#34;https://wizard.openzeppelin.com/&#34;&gt;Contracts Wizard&lt;/a&gt; — an interactive smart contract generator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🏗&lt;/span&gt; &lt;strong&gt;Want to scale your decentralized application?&lt;/strong&gt; Check out &lt;a href=&#34;https://openzeppelin.com/defender&#34;&gt;OpenZeppelin Defender&lt;/a&gt; — a mission-critical developer security platform to code, audit, deploy, monitor, and operate with confidence.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] OpenZeppelin Contracts uses semantic versioning to communicate backwards compatibility of its API and storage layout. For upgradeable contracts, the storage layout of different major versions should be assumed incompatible, for example, it is unsafe to upgrade from 4.9.3 to 5.0.0. Learn more at &lt;a href=&#34;https://docs.openzeppelin.com/contracts/backwards-compatibility&#34;&gt;Backwards Compatibility&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Hardhat (npm)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install @openzeppelin/contracts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Foundry (git)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] When installing via git, it is a common error to use the &lt;code&gt;master&lt;/code&gt; branch. This is a development branch that should be avoided in favor of tagged releases. The release process involves security measures that the &lt;code&gt;master&lt;/code&gt; branch does not guarantee.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Foundry installs the latest version initially, but subsequent &lt;code&gt;forge update&lt;/code&gt; commands will use the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ forge install OpenZeppelin/openzeppelin-contracts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/&lt;/code&gt; in &lt;code&gt;remappings.txt.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Once installed, you can use the contracts in the library by importing them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-solidity&#34;&gt;pragma solidity ^0.8.20;&#xA;&#xA;import {ERC721} from &#34;@openzeppelin/contracts/token/ERC721/ERC721.sol&#34;;&#xA;&#xA;contract MyCollectible is ERC721 {&#xA;    constructor() ERC721(&#34;MyCollectible&#34;, &#34;MCO&#34;) {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re new to smart contract development, head to &lt;a href=&#34;https://docs.openzeppelin.com/learn/developing-smart-contracts&#34;&gt;Developing Smart Contracts&lt;/a&gt; to learn about creating a new project and compiling your contracts.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To keep your system secure, you should &lt;strong&gt;always&lt;/strong&gt; use the installed code as-is, and neither copy-paste it from online sources nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don&#39;t need to worry about it needlessly increasing gas costs.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;The guides in the &lt;a href=&#34;https://docs.openzeppelin.com/contracts&#34;&gt;documentation site&lt;/a&gt; will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.openzeppelin.com/contracts/access-control&#34;&gt;Access Control&lt;/a&gt;: decide who can perform each of the actions on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.openzeppelin.com/contracts/tokens&#34;&gt;Tokens&lt;/a&gt;: create tradeable assets or collectives, and distribute them via &lt;a href=&#34;https://docs.openzeppelin.com/contracts/crowdsales&#34;&gt;Crowdsales&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.openzeppelin.com/contracts/utilities&#34;&gt;Utilities&lt;/a&gt;: generic useful tools including non-overflowing math, signature verification, and trustless paying systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.openzeppelin.com/contracts/api/token/ERC20&#34;&gt;full API&lt;/a&gt; is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts&#39;s development in the &lt;a href=&#34;https://forum.openzeppelin.com&#34;&gt;community forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you may want to take a look at the &lt;a href=&#34;https://blog.openzeppelin.com/&#34;&gt;guides on our blog&lt;/a&gt;, which cover several common use cases and good practices. The following articles provide great background reading, though please note that some of the referenced tools have changed, as the tooling in the ecosystem continues to rapidly evolve.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openzeppelin.com/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05&#34;&gt;The Hitchhiker’s Guide to Smart Contracts in Ethereum&lt;/a&gt; will help you get an overview of the various tools available for smart contract development, and help you set up your environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.openzeppelin.com/a-gentle-introduction-to-ethereum-programming-part-1-783cc7796094&#34;&gt;A Gentle Introduction to Ethereum Programming, Part 1&lt;/a&gt; provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.&lt;/li&gt; &#xA; &lt;li&gt;For a more in-depth dive, you may read the guide &lt;a href=&#34;https://blog.openzeppelin.com/designing-the-architecture-for-your-ethereum-application-9cec086f8317&#34;&gt;Designing the Architecture for Your Ethereum Application&lt;/a&gt;, which discusses how to better structure your application and its relationship to the real world.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;This project is maintained by &lt;a href=&#34;https://openzeppelin.com&#34;&gt;OpenZeppelin&lt;/a&gt; with the goal of providing a secure and reliable library of smart contract components for the ecosystem. We address security through risk management in various areas such as engineering and open source best practices, scoping and API design, multi-layered review processes, and incident response preparedness.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://contracts.openzeppelin.com/security&#34;&gt;OpenZeppelin Contracts Security Center&lt;/a&gt; contains more details about the secure development process.&lt;/p&gt; &#xA;&lt;p&gt;The security policy is detailed in &lt;a href=&#34;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt; as well, and specifies how you can report security vulnerabilities, which versions will receive security patches, and how to stay informed about them. We run a &lt;a href=&#34;https://immunefi.com/bounty/openzeppelin&#34;&gt;bug bounty program on Immunefi&lt;/a&gt; to reward the responsible disclosure of vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;The engineering guidelines we follow to promote project quality can be found in &lt;a href=&#34;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/GUIDELINES.md&#34;&gt;&lt;code&gt;GUIDELINES.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Past audits can be found in &lt;a href=&#34;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/audits&#34;&gt;&lt;code&gt;audits/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Smart contracts are a nascent technology and carry a high level of technical risk and uncertainty. Although OpenZeppelin is well known for its security audits, using OpenZeppelin Contracts is not a substitute for a security audit.&lt;/p&gt; &#xA;&lt;p&gt;OpenZeppelin Contracts is made available under the MIT License, which disclaims all warranties in relation to the project and which limits the liability of those that contribute and maintain the project, including OpenZeppelin. As set out further in the Terms, you acknowledge that you are solely responsible for any use of OpenZeppelin Contracts and you assume all risks associated with any such use.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;OpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the &lt;a href=&#34;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenZeppelin Contracts is released under the &lt;a href=&#34;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Your use of this Project is governed by the terms found at &lt;a href=&#34;http://www.openzeppelin.com/tos&#34;&gt;www.openzeppelin.com/tos&lt;/a&gt; (the &#34;Terms&#34;).&lt;/p&gt;</summary>
  </entry>
</feed>