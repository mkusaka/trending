<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-05T01:26:39Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ali-vilab/dreamtalk</title>
    <updated>2024-01-05T01:26:39Z</updated>
    <id>tag:github.com,2024-01-05:/ali-vilab/dreamtalk</id>
    <link href="https://github.com/ali-vilab/dreamtalk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official implementations for paper: DreamTalk: When Expressive Talking Head Generation Meets Diffusion Probabilistic Models&lt;/p&gt;&lt;hr&gt;&lt;h2 align=&#34;center&#34;&gt;DreamTalk: When Expressive Talking Head Generation &lt;br&gt; Meets Diffusion Probabilistic Models&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dreamtalk-project.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Page-Green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2312.09767&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-Arxiv-red&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://youtu.be/VF4vlE6ZqWQ&#34;&gt;&lt;img src=&#34;https://badges.aleen42.com/src/youtube.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ali-vilab/dreamtalk/main/media/teaser.gif&#34; alt=&#34;teaser&#34; title=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;DreamTalk is a diffusion-based audio-driven expressive talking head generation framework that can produce high-quality talking head videos across diverse speaking styles. DreamTalk exhibits robust performance with a diverse array of inputs, including songs, speech in multiple languages, noisy audio, and out-of-domain portraits.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2023.12]&lt;/strong&gt; Release inference code and pretrained checkpoint.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n dreamtalk python=3.7.0&#xA;conda activate dreamtalk&#xA;pip install -r requirements.txt&#xA;conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge&#xA;conda update ffmpeg&#xA;&#xA;pip install urllib3==1.26.6&#xA;pip install transformers==4.28.1&#xA;pip install dlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Download Checkpoints&lt;/h2&gt; &#xA;&lt;p&gt;Download the checkpoint of the denoising network and the renderer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/damo-vilab/dreamtalk&#34;&gt;HuggingFace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelscope.cn/models/damo/dreamtalk/files&#34;&gt;ModelScope&lt;/a&gt; (in &lt;code&gt;checkpoints&lt;/code&gt; folder)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Put the downloaded checkpoints into &lt;code&gt;checkpoints&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;Run the script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python inference_for_demo_video.py \&#xA;--wav_path data/audio/acknowledgement_english.m4a \&#xA;--style_clip_path data/style_clip/3DMM/M030_front_neutral_level1_001.mat \&#xA;--pose_path data/pose/RichardShelby_front_neutral_level1_001.mat \&#xA;--image_path data/src_img/uncropped/male_face.png \&#xA;--cfg_scale 1.0 \&#xA;--max_gen_len 30 \&#xA;--output_name acknowledgement_english@M030_front_neutral_level1_001@male_face&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;wav_path&lt;/code&gt; specifies the input audio. The input audio file extensions such as wav, mp3, m4a, and mp4 (video with sound) should all be compatible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;style_clip_path&lt;/code&gt; specifies the reference speaking style and &lt;code&gt;pose_path&lt;/code&gt; specifies head pose. They are 3DMM paramenter sequences extracted from reference videos. You can follow &lt;a href=&#34;https://github.com/RenYurui/PIRender&#34;&gt;PIRenderer&lt;/a&gt; to extract 3DMM parameters from your own videos. Note that the video frame rate should be 25 FPS. Besides, videos used for head pose reference should be first cropped to $256\times256$ using scripts in &lt;a href=&#34;https://github.com/AliaksandrSiarohin/video-preprocessing&#34;&gt;FOMM video preprocessing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;image_path&lt;/code&gt; specifies the input portrait. Its resolution should be larger than $256\times256$. Frontal portraits, with the face directly facing forward and not tilted to one side, usually achieve satisfactory results. The input portrait will be cropped to $256\times256$. If your portrait is already cropped to $256\times256$ and you want to disable cropping, use option &lt;code&gt;--disable_img_crop&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python inference_for_demo_video.py \&#xA;--wav_path data/audio/acknowledgement_chinese.m4a \&#xA;--style_clip_path data/style_clip/3DMM/M030_front_surprised_level3_001.mat \&#xA;--pose_path data/pose/RichardShelby_front_neutral_level1_001.mat \&#xA;--image_path data/src_img/cropped/zp1.png \&#xA;--disable_img_crop \&#xA;--cfg_scale 1.0 \&#xA;--max_gen_len 30 \&#xA;--output_name acknowledgement_chinese@M030_front_surprised_level3_001@zp1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;cfg_scale&lt;/code&gt; controls the scale of classifer-free guidance. It can adjust the intensity of speaking styles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;max_gen_len&lt;/code&gt; is the maximum video generation duration, measured in seconds. If the input audio exceeds this length, it will be truncated.&lt;/p&gt; &#xA;&lt;p&gt;The generated video will be named &lt;code&gt;$(output_name).mp4&lt;/code&gt; and put in the output_video folder. Intermediate results, including the cropped portrait, will be in the &lt;code&gt;tmp/$(output_name)&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Sample inputs are presented in &lt;code&gt;data&lt;/code&gt; folder. Due to copyright issues, we are unable to include the songs we have used in this folder.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We extend our heartfelt thanks for the invaluable contributions made by preceding works to the development of DreamTalk. This includes, but is not limited to: &lt;a href=&#34;https://github.com/RenYurui/PIRender&#34;&gt;PIRenderer&lt;/a&gt; ,&lt;a href=&#34;https://github.com/FuxiVirtualHuman/AAAI22-one-shot-talking-face&#34;&gt;AVCT&lt;/a&gt; ,&lt;a href=&#34;https://github.com/FuxiVirtualHuman/styletalk&#34;&gt;StyleTalk&lt;/a&gt; ,&lt;a href=&#34;https://github.com/sicxu/Deep3DFaceRecon_pytorch&#34;&gt;Deep3DFaceRecon_pytorch&lt;/a&gt; ,&lt;a href=&#34;https://huggingface.co/jonatasgrosman/wav2vec2-large-xlsr-53-english&#34;&gt;Wav2vec2.0&lt;/a&gt; ,&lt;a href=&#34;https://github.com/luost26/diffusion-point-cloud&#34;&gt;diffusion-point-cloud&lt;/a&gt; ,&lt;a href=&#34;https://github.com/AliaksandrSiarohin/video-preprocessing&#34;&gt;FOMM video preprocessing&lt;/a&gt;. We are dedicated to advancing upon these foundational works with the utmost respect for their original contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this codebase useful for your research, please use the following entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;@article{ma2023dreamtalk,&#xA;  title={DreamTalk: When Expressive Talking Head Generation Meets Diffusion Probabilistic Models},&#xA;  author={Ma, Yifeng and Zhang, Shiwei and Wang, Jiayu and Wang, Xiang and Zhang, Yingya and Deng, Zhidong},&#xA;  journal={arXiv preprint arXiv:2312.09767},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>gunnarmorling/1brc</title>
    <updated>2024-01-05T01:26:39Z</updated>
    <id>tag:github.com,2024-01-05:/gunnarmorling/1brc</id>
    <link href="https://github.com/gunnarmorling/1brc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;1Ô∏è‚É£üêùüèéÔ∏è The One Billion Row Challenge -- A fun exploration of how quickly 1B rows from a text file can be aggregated with Java&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;1Ô∏è‚É£üêùüèéÔ∏è The One Billion Row Challenge&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Status Jan 1: This challenge is &lt;a href=&#34;https://www.morling.dev/blog/one-billion-row-challenge/&#34;&gt;open for submissions&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The One Billion Row Challenge (1BRC) is a fun exploration of how far modern Java can be pushed for aggregating one billion rows from a text file. Grab all your (virtual) threads, reach out to SIMD, optimize your GC, or pull any other trick, and create the fastest implementation for solving this task!&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/gunnarmorling/1brc/main/1brc.png&#34; alt=&#34;1BRC&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; margin-bottom:1em; width: 50%;&#34;&gt; &#xA;&lt;p&gt;The text file contains temperature values for a range of weather stations. Each row is one measurement in the format &lt;code&gt;&amp;lt;string: station name&amp;gt;;&amp;lt;double: measurement&amp;gt;&lt;/code&gt;, with the measurement value having exactly one fractional digit. The following shows ten rows as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hamburg;12.0&#xA;Bulawayo;8.9&#xA;Palembang;38.8&#xA;St. John&#39;s;15.2&#xA;Cracow;12.6&#xA;Bridgetown;26.9&#xA;Istanbul;6.2&#xA;Roseau;34.4&#xA;Conakry;31.2&#xA;Istanbul;23.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The task is to write a Java program which reads the file, calculates the min, mean, and max temperature value per weather station, and emits the results on stdout like this (i.e. sorted alphabetically by station name, and the result values per station in the format &lt;code&gt;&amp;lt;min&amp;gt;/&amp;lt;mean&amp;gt;/&amp;lt;max&amp;gt;&lt;/code&gt;, rounded to one fractional digit):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{Abha=-23.0/18.0/59.2, Abidjan=-16.2/26.0/67.3, Ab√©ch√©=-10.0/29.4/69.0, Accra=-10.1/26.4/66.4, Addis Ababa=-23.7/16.0/67.0, Adelaide=-27.8/17.3/58.5, ...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Submit your implementation by Jan 31 2024 and become part of the leaderboard!&lt;/p&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;Result (m:s.ms)&lt;/th&gt; &#xA;   &lt;th&gt;Implementation&lt;/th&gt; &#xA;   &lt;th&gt;JDK&lt;/th&gt; &#xA;   &lt;th&gt;Submitter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.&lt;/td&gt; &#xA;   &lt;td&gt;00:12.063&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_spullara.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-graalce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/spullara&#34;&gt;Sam Pullara&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.&lt;/td&gt; &#xA;   &lt;td&gt;00:12.685&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_royvanrijn.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-graalce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/royvanrijn&#34;&gt;Roy van Rijn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.&lt;/td&gt; &#xA;   &lt;td&gt;00:14.251&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_artsiomkorzun.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/artsiomkorzun&#34;&gt;Artsiom Korzun&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.&lt;/td&gt; &#xA;   &lt;td&gt;00:14.476&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_ebarlas.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-graalce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ebarlas&#34;&gt;Elliot Barlas&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.&lt;/td&gt; &#xA;   &lt;td&gt;00:17.905&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_lawrey.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/peter-lawrey&#34;&gt;Peter Lawrey&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6.&lt;/td&gt; &#xA;   &lt;td&gt;00:18.789&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_palmr.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/palmr&#34;&gt;Nick Palmer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7.&lt;/td&gt; &#xA;   &lt;td&gt;00:23.078&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_richardstartin.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/richardstartin&#34;&gt;Richard Startin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.&lt;/td&gt; &#xA;   &lt;td&gt;00:27.787&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_nstng.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nstng&#34;&gt;Nils Semmelrock&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.&lt;/td&gt; &#xA;   &lt;td&gt;00:32.764&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_moysesb.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/moysesb&#34;&gt;Moys√©s Borges Furtado&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10.&lt;/td&gt; &#xA;   &lt;td&gt;00:34.848&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_armandino.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/armandino&#34;&gt;Arman Sharif&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11.&lt;/td&gt; &#xA;   &lt;td&gt;00:38.106&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_seijikun.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/seijikun&#34;&gt;Markus Ebner&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12.&lt;/td&gt; &#xA;   &lt;td&gt;00:38.510&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_bjhara.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bjhara&#34;&gt;Hampus Ram&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13.&lt;/td&gt; &#xA;   &lt;td&gt;00:50.547&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_padreati.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/padreati&#34;&gt;Aurelian Tutuianu&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14.&lt;/td&gt; &#xA;   &lt;td&gt;00:53.679&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_criccomini.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/criccomini&#34;&gt;Chris Riccomini&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15.&lt;/td&gt; &#xA;   &lt;td&gt;00:57.141&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_truelive.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/truelive&#34;&gt;Roman Schweitzer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16.&lt;/td&gt; &#xA;   &lt;td&gt;01:27.912&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_jgrateron.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jgrateron&#34;&gt;Jairo Grater√≥n&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17.&lt;/td&gt; &#xA;   &lt;td&gt;02:00.101&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_khmarbaise.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/khmarbaise&#34;&gt;khmarbaise&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18.&lt;/td&gt; &#xA;   &lt;td&gt;02:08.315&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_itaske.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/itaske&#34;&gt;itaske&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19.&lt;/td&gt; &#xA;   &lt;td&gt;02:08.650&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/1brc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage_kuduwa_keshavram.java&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kuduwa_keshavram&#34;&gt;Kuduwa Keshavram&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20.&lt;/td&gt; &#xA;   &lt;td&gt;04:13.449&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling/onebrc/raw/main/src/main/java/dev/morling/onebrc/CalculateAverage.java&#34;&gt;link&lt;/a&gt; (baseline)&lt;/td&gt; &#xA;   &lt;td&gt;21.0.1-open&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gunnarmorling&#34;&gt;Gunnar Morling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gunnarmorling/1brc/main/#entering-the-challenge&#34;&gt;below&lt;/a&gt; for instructions how to enter the challenge with your own implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openjdk.org/projects/jdk/21/&#34;&gt;Java 21&lt;/a&gt; must be installed on your system.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Challenge&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains two programs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dev.morling.onebrc.CreateMeasurements&lt;/code&gt; (invoked via &lt;em&gt;create_measurements.sh&lt;/em&gt;): Creates the file &lt;em&gt;measurements.txt&lt;/em&gt; in the root directory of this project with a configurable number of random measurement values&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev.morling.onebrc.CalculateAverage&lt;/code&gt; (invoked via &lt;em&gt;calculate_average_baseline.sh&lt;/em&gt;): Calculates the average values for the file &lt;em&gt;measurements.txt&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Execute the following steps to run the challenge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project using Apache Maven:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./mvnw clean verify&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the measurements file with 1B rows (just once):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./create_measurements.sh 1000000000&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will take a few minutes. &lt;strong&gt;Attention:&lt;/strong&gt; the generated file has a size of approx. &lt;strong&gt;12 GB&lt;/strong&gt;, so make sure to have enough diskspace.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Calculate the average measurement values:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./calculate_average_baseline.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The provided naive example implementation uses the Java streams API for processing the file and completes the task in ~2 min on environment used for &lt;a href=&#34;https://raw.githubusercontent.com/gunnarmorling/1brc/main/#evaluating-results&#34;&gt;result evaluation&lt;/a&gt;. It serves as the base line for comparing your own implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize the heck out of it:&lt;/p&gt; &lt;p&gt;Adjust the &lt;code&gt;CalculateAverage&lt;/code&gt; program to speed it up, in any way you see fit (just sticking to a few rules described below). Options include parallelizing the computation, using the (incubating) Vector API, memory-mapping different sections of the file concurrently, using AppCDS, GraalVM, CRaC, etc. for speeding up the application start-up, choosing and tuning the garbage collector, and much more.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Flamegraph/Profiling&lt;/h2&gt; &#xA;&lt;p&gt;A tip is that if you have &lt;a href=&#34;https://jbang.dev&#34;&gt;jbang&lt;/a&gt; installed, you can get a flamegraph of your program by running &lt;a href=&#34;https://github.com/jvm-profiling-tools/async-profiler&#34;&gt;async-profiler&lt;/a&gt; via &lt;a href=&#34;https://github.com/jvm-profiling-tools/ap-loader&#34;&gt;ap-loader&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;jbang --javaagent=ap-loader@jvm-profiling-tools/ap-loader=start,event=cpu,file=profile.html -m dev.morling.onebrc.CalculateAverage_yourname target/average-1.0.0-SNAPSHOT.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or directly on the .java file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;jbang --javaagent=ap-loader@jvm-profiling-tools/ap-loader=start,event=cpu,file=profile.html src/main/java/dev/morling/onebrc/CalculateAverage_yourname&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you run this, it will generate a flamegraph in profile.html. You can then open this in a browser and see where your program is spending its time.&lt;/p&gt; &#xA;&lt;h2&gt;Rules and limits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any of these Java distributions may be used: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Any builds provided by &lt;a href=&#34;https://sdkman.io/jdks&#34;&gt;SDKMan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Early access builds available on openjdk.net may be used (including EA builds for OpenJDK projects like Valhalla)&lt;/li&gt; &#xA;   &lt;li&gt;Builds on &lt;a href=&#34;https://builds.shipilev.net/openjdk-jdk-lilliput/&#34;&gt;builds.shipilev.net&lt;/a&gt; If you want to use a build not available via these channels, reach out to discuss whether it can be considered.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;No external library dependencies may be used&lt;/li&gt; &#xA; &lt;li&gt;Implementations must be provided as a single source file&lt;/li&gt; &#xA; &lt;li&gt;The computation must happen at application &lt;em&gt;runtime&lt;/em&gt;, i.e. you cannot process the measurements file at &lt;em&gt;build time&lt;/em&gt; (for instance, when using GraalVM) and just bake the result into the binary&lt;/li&gt; &#xA; &lt;li&gt;Input value ranges are as follows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Station name: non null UTF-8 string of min length 1 character and max length 100 characters&lt;/li&gt; &#xA;   &lt;li&gt;Temperature value: non null double between -99.9 (inclusive) and 99.9 (inclusive), always with one fractional digit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;There is a maximum of 10,000 unique station names&lt;/li&gt; &#xA; &lt;li&gt;Implementations must not rely on specifics of a given data set, e.g. any valid station name as per the constraints above and any data distribution (number of measurements per station) must be supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Entering the Challenge&lt;/h2&gt; &#xA;&lt;p&gt;To submit your own implementation to 1BRC, follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a fork of the &lt;a href=&#34;https://github.com/gunnarmorling/onebrc/&#34;&gt;onebrc&lt;/a&gt; GitHub repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a copy of &lt;em&gt;CalculateAverage.java&lt;/em&gt;, named &lt;em&gt;CalculateAverage_&amp;lt;your_GH_user&amp;gt;.java&lt;/em&gt;, e.g. &lt;em&gt;CalculateAverage_doloreswilson.java&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make that implementation fast. Really fast.&lt;/li&gt; &#xA; &lt;li&gt;Create a copy of &lt;em&gt;calculate_average_baseline.sh&lt;/em&gt;, named &lt;em&gt;calculate_average_&amp;lt;your_GH_user&amp;gt;.sh&lt;/em&gt;, e.g. &lt;em&gt;calculate_average_doloreswilson.sh&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Adjust that script so that it references your implementation class name. If needed, provide any JVM arguments via the &lt;code&gt;JAVA_OPTS&lt;/code&gt; variable in that script.&lt;/li&gt; &#xA; &lt;li&gt;OpenJDK 21 is the default. If a custom JDK build is required, include the SDKMAN command &lt;code&gt;sdk use java [version]&lt;/code&gt; in the launch shell script prior to application start.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) If you&#39;d like to use native binaries (GraalVM), adjust the &lt;em&gt;pom.xml&lt;/em&gt; file so that it builds that binary.&lt;/li&gt; &#xA; &lt;li&gt;Run the test suite by executing &lt;em&gt;/test.sh &amp;lt;your_GH_user&amp;gt;&lt;/em&gt;; if any differences are reported, fix them before submitting your implementation.&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request against the upstream repository, clearly stating &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The name of your implementation class.&lt;/li&gt; &#xA;   &lt;li&gt;The execution time of the program on your system and specs of the same (CPU, number of cores, RAM). This is for informative purposes only, the official runtime will be determined as described below.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;I will run the program and determine its performance as described in the next section, and enter the result to the scoreboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I reserve the right to not evaluate specific submissions if I feel doubtful about the implementation (I.e. I won&#39;t run your Bitcoin miner ;).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to discuss any potential ideas for implementing 1BRC with the community, you can use the &lt;a href=&#34;https://github.com/gunnarmorling/onebrc/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; of this repository. Please keep it friendly and civil.&lt;/p&gt; &#xA;&lt;p&gt;The challenge runs until Jan 31 2024. Any submissions (i.e. pull requests) created after Jan 31 2024 23:59 UTC will not be considered.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluating Results&lt;/h2&gt; &#xA;&lt;p&gt;Results are determined by running the program on a &lt;a href=&#34;https://www.hetzner.com/cloud&#34;&gt;Hetzner Cloud CCX33 instance&lt;/a&gt; (8 dedicated vCPU, 32 GB RAM). The &lt;code&gt;time&lt;/code&gt; program is used for measuring execution times, i.e. end-to-end times are measured. Each contender will be run five times in a row. The slowest and the fastest runs are discarded. The mean value of the remaining three runs is the result for that contender and will be added to the results table above. The exact same &lt;em&gt;measurements.txt&lt;/em&gt; file is used for evaluating all contenders.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to spin up your own box for testing on Hetzner Cloud, you may find these &lt;a href=&#34;https://github.com/gunnarmorling/cloud-boxes/&#34;&gt;set-up scripts&lt;/a&gt; (based on Terraform and Ansible) useful. Note this will incur cost you are responsible for, I am not going to pay your cloud bill :)&lt;/p&gt; &#xA;&lt;h2&gt;Prize&lt;/h2&gt; &#xA;&lt;p&gt;If you enter this challenge, you may learn something new, get to inspire others, and take pride in seeing your name listed in the scoreboard above. Rumor has it that the winner may receive a unique 1Ô∏è‚É£üêùüèéÔ∏è t-shirt, too!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Can I use Kotlin or other JVM languages other than Java?&lt;/em&gt;&lt;br&gt; A: No, this challenge is focussed on Java only. Feel free to inofficially share implementations significantly outperforming any listed results, though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Can I use non-JVM languages and/or tools?&lt;/em&gt;&lt;br&gt; A: No, this challenge is focussed on Java only. Feel free to inofficially share interesting implementations and results though. For instance it would be interesting to see how DuckDB fares with this task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: I&#39;ve got an implementation‚Äîbut it&#39;s not in Java. Can I share it somewhere?&lt;/em&gt;&lt;br&gt; A: Whilst non-Java solutions cannot be formally submitted to the challenge, you are welcome to share them over in the &lt;a href=&#34;https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell&#34;&gt;Show and tell&lt;/a&gt; GitHub discussion area.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Can I use JNI?&lt;/em&gt;&lt;br&gt; A: Submissions must be completely implemented in Java, i.e. you cannot write JNI glue code in C/C++. You could use AOT compilation of Java code via GraalVM though, either by AOT-compiling the entire application, or by creating a native library (see &lt;a href=&#34;https://www.graalvm.org/22.0/reference-manual/native-image/ImplementingNativeMethodsInJavaWithSVM/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: What is the encoding of the measurements.txt file?&lt;/em&gt;&lt;br&gt; A: The file is encoded with UTF-8.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Can I make assumptions on the names of the weather stations showing up in the data set?&lt;/em&gt;&lt;br&gt; A: No, while only a fixed set of station names is used by the data set generator, any solution should work with arbitrary UTF-8 station names (for the sake of simplicity, names are guaranteed to contain no &lt;code&gt;;&lt;/code&gt; character).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Can I copy code from other submissions?&lt;/em&gt;&lt;br&gt; A: Yes, you can. The primary focus of the challenge is about learning something new, rather than &#34;winning&#34;. When you do so, please give credit to the relevant source submissions. Please don&#39;t re-submit other entries with no or only trivial improvements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Which operating system is used for evaluation?&lt;/em&gt;&lt;br&gt; A: Fedora 39.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Q: Why&lt;/em&gt; 1Ô∏è‚É£üêùüèéÔ∏è &lt;em&gt;?&lt;/em&gt;&lt;br&gt; A: It&#39;s the abbreviation of the project name: &lt;strong&gt;One&lt;/strong&gt; &lt;strong&gt;B&lt;/strong&gt;illion &lt;strong&gt;R&lt;/strong&gt;ow &lt;strong&gt;C&lt;/strong&gt;hallenge.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code base is available under the Apache License, version 2.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Be excellent to each other! More than winning, the purpose of this challenge is to have fun and learn something new.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xiaolai/everyone-can-use-english</title>
    <updated>2024-01-05T01:26:39Z</updated>
    <id>tag:github.com,2024-01-05:/xiaolai/everyone-can-use-english</id>
    <link href="https://github.com/xiaolai/everyone-can-use-english" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∫∫‰∫∫ÈÉΩËÉΩÁî®Ëã±ËØ≠&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‰∫∫‰∫∫ÈÉΩËÉΩÁî®Ëã±ËØ≠&lt;/h1&gt; &#xA;&lt;h2&gt;ÁõÆÂΩï&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/README.md&#34;&gt;ÁÆÄ‰ªã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter1.md&#34;&gt;Á¨¨‰∏ÄÁ´†ÔºöËµ∑ÁÇπ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter2.md&#34;&gt;Á¨¨‰∫åÁ´†ÔºöÂè£ËØ≠&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter3.md&#34;&gt;Á¨¨‰∏âÁ´†ÔºöËØ≠Èü≥&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter4.md&#34;&gt;Á¨¨ÂõõÁ´†ÔºöÊúóËØª&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter5.md&#34;&gt;Á¨¨‰∫îÁ´†ÔºöËØçÂÖ∏&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter6.md&#34;&gt;Á¨¨ÂÖ≠Á´†ÔºöËØ≠Ê≥ï&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter7.md&#34;&gt;Á¨¨‰∏ÉÁ´†ÔºöÁ≤æËØª&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/chapter8.md&#34;&gt;Á¨¨ÂÖ´Á´†ÔºöÂèÆÂò±&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xiaolai/everyone-can-use-english/master/end.md&#34;&gt;ÂêéËÆ∞&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÂâçË®Ä&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Êúâ‰∏ÄÂ§©ÔºåÊúâ‰∏™‰∫∫Âú® Twitter ‰∏äÊèêÈóÆÔºö&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;@maozhu1: @xiaolai ËøòËØ∑ÊùéËÄÅÂ∏àÁî® 140 Â≠óÊ¶ÇÊã¨‰∏Ä‰∏ãÊÄéÊ†∑ÊâçËÉΩÂ≠¶Â•ΩËã±ËØ≠Ôºü&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ÊàëÂõûÂ§çËØ¥Ôºö&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;ÂÖ∂ÂÆû‰∏Ä‰∏™Â≠óÂ∞±Â§ü‰∫ÜÔºö‚ÄúÁî®‚Äù„ÄÇ&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;ËøôÊú¨‰π¶ÈáåÁöÑÊñáÂ≠óÔºåÂÖ®ÈÉ®ÁöÑÊÑè‰πâÔºåÂè™Êúâ‰∏§‰∏™Â≠óÔºö‚ÄúÂêØÂèë‚Äù„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êúâ‰∫õÁü•ËØÜÔºå‰∏ç‰ªÖË¶Å‰∫ÜËß£ÔºåËøòË¶ÅÊ∑±ÂÖ•‰∫ÜËß£„ÄÇ‰∏∫‰∫ÜÊ∑±ÂÖ•‰∫ÜËß£Ôºå‰∏ç‰ªÖË¶ÅÂ≠¶‰π†ÔºåËøòË¶ÅÂÆûË∑µÔºåÊõ¥Ë¶ÅÂèçÂ§çËØïÈîôÔºåÂú®ÊàêÂäü‰∏≠Ëé∑ÂæóÊøÄÂä±ÔºåÂú®Â§±Ë¥•‰∏≠Ê±≤ÂèñÊïôËÆ≠ÔºåË∑ØÊº´Êº´ÂÖ∂‰øÆËøúÔºå‰∏ä‰∏ãÊ±ÇÁ¥¢ÊâçÂèØËÉΩ‰øÆÊàêÊ≠£Êûú„ÄÇÂ∞èÂà∞ÂºÄËΩ¶ÔºåÂ§ßÂà∞Âàõ‰∏öÔºåÂêÑÁßçÊâÄÈúÄË¶ÅÁöÑÁü•ËØÜËé´‰∏çÂ¶ÇÊòØ„ÄÇÈù¢ÂØπËøôÊ†∑ÁöÑÁü•ËØÜÔºåÊàë‰ª¨Ë¶Å‰∫ÜËß£Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What‚îÄ‚îÄÂÆÉÁ©∂Á´üÊòØ‰ªÄ‰πàÔºü&lt;/li&gt; &#xA; &lt;li&gt;Why‚îÄ‚îÄ‰∏∫‰ªÄ‰πàÂÆÉÊòØÈÇ£‰∏™Ê†∑Â≠êÔºü&lt;/li&gt; &#xA; &lt;li&gt;How‚îÄ‚îÄË¶ÅÊéåÊè°ÂÆÉ„ÄÅÂ∫îÁî®ÂÆÉÔºåÂøÖÈ°ªÂæóÈÅµÂæ™‰ªÄ‰πàÊ†∑ÁöÑÊ≠•È™§Ôºü&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÁÑ∂ËÄåÔºåÊúâÂè¶Â§ñ‰∏ÄÁßçÁü•ËØÜÔºåÂæÄÂæÄËøòÊòØÊ†ºÂ§ñÈáçË¶ÅÁöÑÁü•ËØÜÔºåÂú®Áü•ÈÅìÂÆÉÁöÑÈÇ£‰∏ÄÁû¨Èó¥Â∞±ÂèØËÉΩÂºÄÂßãÂèëÊå•ÈáçÂ§ßÁöÑ‰ΩúÁî®ÔºåÁîöËá≥ÔºåÂú®Áü•ÈÅìÂÆÉÔºàWhatÔºâÁöÑÈÇ£‰∏ÄÁû¨Èó¥ÔºåÂÆÉÊâÄÊúâÁöÑÈáçÂ§ß‰ΩúÁî®ÂÖ®ÈÉ®ÈÉΩÂèëÊå•ÂÆåÊØïÔºàËá≥‰∫é Why Âíå HowÔºåÁîöËá≥ÂèØËÉΩÂú®‰∫ÜËß£ÂÆÉÁöÑ What ÈÇ£‰∏ÄÁû¨Èó¥Êó©Â∑≤Áªè‰∏çË®ÄËá™ÊòéÔºâ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Âú®Êàë‰∏™‰∫∫ÁöÑËÆ∞ÂøÜÈáåÔºå‰∏ÄË∑Ø‰∏äÈÅáÂà∞ËøáÂæàÂ§öËøôÁßç ‚ÄúÂè™Ë¶ÅÁü•ÈÅìÂ∞±ËÉΩÂ§üÁû¨Èó¥ÂÖ®ÈÉ®ÂèëÊå•‰ΩúÁî®‚Äù ÁöÑÁü•ËØÜ„ÄÇÂ≠¶Ê¶ÇÁéáÁªüËÆ°ÁöÑÊó∂ÂÄôÔºåÈÅáÂà∞ ‚ÄúÁã¨Á´ã‰∫ã‰ª∂‚Äù Ëøô‰∏™Ê¶ÇÂøµÔºåÂ∞±ÊòØËøôÁ±ªÁü•ËØÜÁöÑÂÖ∏Âûã‰æãÂ≠ê„ÄÇÂú®Ê≠§‰πãÂâçÔºåÊàëÂæàËá™ÁÑ∂Âú∞‰ª•‰∏∫Â¶ÇÊûúËøûÁª≠ 9 Ê¨°ÊäõÁ°¨Â∏ÅÈÉΩÊòØÊ≠£Èù¢Êúù‰∏äÔºåÈÇ£‰πàÁ¨¨ 10 Ê¨°ÊäõÂá∫Á°¨Â∏Å‰πãÂêéÊ≠£Èù¢Êúù‰∏äÁöÑÂèØËÉΩÊÄßË¶ÅËøúËøú‰Ωé‰∫éËÉåÈù¢Êúù‰∏äÁöÑÂèØËÉΩÊÄß ‚Ä¶‚Ä¶ Âú®Ê¶ÇÁéáÊïôÁßë‰π¶ÈáåËØªÂà∞ ‚ÄúÁã¨Á´ã‰∫ã‰ª∂‚Äù ÁöÑÈÇ£‰∏ÄÁû¨Èó¥ÔºåËÆ©ÊàëÊÑèËØÜÂà∞‰πãÂâçÁöÑÊÉ≥Ê≥ïÊòØÂ§ö‰πàÁöÑÂèØÁ¨ë„ÄÇÂõ†‰∏∫ÊäõÁ°¨Â∏ÅÊ≠£ÂèçÈù¢ÁöÑÂá†ÁéáÊòØÊ∞∏ËøúÈÉΩÁõ∏ÂêåÁöÑÔºàÁ°¨Â∏ÅÂá∫Áé∞Ê≠£ÂèçÈù¢Âú®ÊØèÊ¨°ÊäõÊó∂ÈÉΩÊòØÁõ∏‰∫íÁã¨Á´ã„ÄÅ‰∏çÂèó‰πãÂâçÁªìÊûúÂΩ±ÂìçÁöÑÔºâÔºåÂêÑÂç† 50%ÔºåÊâÄ‰ª•Âç≥‰æøÊàëÊäõ‰∏ÄÁôæÊ¨°Ôºå‰∏Ä‰∏áÊ¨°ÔºåÁîöËá≥Êõ¥Â§öÊ¨°ÈÉΩÊòØÊ≠£Èù¢Êúù‰∏äÔºå‰∏ã‰∏ÄÊ¨°ÊäõÊ≠£ÂèçÈù¢ÁöÑÂá†Áéá‰πüËøòÊòØÂ¶ÇÊ≠§ÔºåÂêÑÂç† 50%„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ëá≥Ê≠§ÔºåËøô‰∏™Áü•ËØÜÁöÑÊâÄÊúâ‰ΩúÁî®Â∑≤ÁªèÂÖ®ÈÉ®ÂèëÊå•ÂÆåÊØïÔºöÂÆÉËÉΩÂ§üÂΩªÂ§¥ÂΩªÂ∞æÂú∞ÊîπÂèò‰∏Ä‰∫õ‰∫∫‚îÄ‚îÄÈÇ£‰∫õ‰∏Ä‰∏çÂ∞èÂøÉÁúãÂà∞ÂÆÉÂÆûÈôÖÊÑè‰πâÁöÑ‰∫∫„ÄÇÊó†ËÆ∫ÊòØË∞ÅÔºåÂú®ÂÅöÂá†‰πéÊâÄÊúâÂÜ≥ÂÆöÁöÑÊó∂ÂÄôÔºåÈÉΩË¶ÅËÄÉËôë ‚ÄúÂèØËÉΩÊÄß‚ÄùÔºàÂ≠¶Áß∞ ‚ÄúÊ¶ÇÁéá‚ÄùÔºâ„ÄÇÂú®Êàë‰∏çÁü•ÈÅì ‚ÄúÁã¨Á´ã‰∫ã‰ª∂‚Äù Ëøô‰∏™Ê¶ÇÂøµ‰πãÂâçÊâÄÂÅöÂá∫ÁöÑÂæàÂ§öÂÜ≥ÂÆöÔºåÊç¢Âú®Áü•ÈÅì ‚ÄúÁã¨Á´ã‰∫ã‰ª∂‚Äù Ëøô‰∏™Ê¶ÇÂøµ‰πãÂêéÔºåÊàëÊòØÊó†ËÆ∫Â¶Ç‰ΩïÈÉΩ‰∏ç‰ºöÈÇ£Ê†∑ÈÄâÊã©ÁöÑ‚îÄ‚îÄËøôÂ∞±ÊòØÊîπÂèòÔºåÂπ∂‰∏îÊòØË¥®Âèò„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Âè¶‰∏Ä‰∏™‰ª§ÊàëËÆ∞ÂøÜÊ∑±ÂàªÁöÑ‰æãÂ≠êÊòØÂæàÂ∞èÁöÑÊó∂ÂÄôÂ≠¶‰π†ÁºñÁ®ãËØ≠Ë®Ä„ÄÇÂ§öÂπ¥‰ª•Êù•ÔºåÂèóÂΩ±ÂìçÊúÄÊ∑±ÁöÑÔºåÂπ∂‰∏çÊòØÂΩìÊó∂ÊâÄÂ≠¶ÁöÑ BASICÔºåÊàñËÄÖÊòØÂêéÊù•ÊâÄÂ≠¶ÁöÑ PASCALÔºåÊäëÊàñÂÜçÂêéÊù•Â≠¶ÁöÑ C„ÄÅC++‰ªÄ‰πàÁöÑÔºõÂèóÂΩ±ÂìçÊúÄÊ∑±ÁöÑÊòØ‰∏ÄÁßçÊÄùËÄÉÊñπÂºè‚îÄ‚îÄÂú®ËøêË°åÁ®ãÂ∫è‰πãÂâçÔºåË¶ÅÂèçÂ§çÊµèËßà‰ª£Á†ÅÔºåÂú®ËÑëÂ≠êÈáåËøõË°åÈ¢ÑÊºîÔºõËÄå‰∏çÊòØÂÜôÂÆåÁ®ãÂ∫èÁõ¥Êé•ËøêË°åÔºåÂá∫Èîô‰∫ÜÂÜçËØ¥„ÄÇËøôÊòØËäÇÁúÅÊó∂Èó¥ÊèêÈ´òÊïàÁéáÁöÑÈáçË¶ÅÊñπÂºè„ÄÇÂàöÂºÄÂßãÂπ∂‰∏çÁü•ÈÅì ‚Äú‰∫ÜËß£‰∫ÜËøôÁßçÊìç‰ΩúÊñπÂºè‚Äù ÁªôËá™Â∑±Â∏¶Êù•‰∫ÜÂ§öÂ§ßÁöÑÂΩ±ÂìçÔºõÂèØÊòØÔºåËÆ∏Â§öÂπ¥‰πãÂêéÔºåËßÇÂØüÂà∞Ë∫´ËæπÂ§ßÂ§öÊï∞‰∫∫‰ªéÊù•ÈÉΩÊ≤°Êúâ ‚ÄúÂÅö‰∫ã‰πãÂâçÂÖàÂú®ËÑëÂ≠êÈáåÈ¢ÑÊºî‚Äù ÁöÑ‰π†ÊÉØÔºåÊâçÊòéÁôΩÂæàÂ∞èÁöÑÊó∂ÂÄôÁü•ÈÅì‰∫ÜÈÇ£Ê†∑ÁöÑÂÅöÊ≥ïÁªôËá™Â∑±Â∏¶Êù•ÁöÑÂ∑®Â§ßÂ•ΩÂ§Ñ‚îÄ‚îÄÂπ∂‰∏îÊòØÊ≤°ÂäûÊ≥ïÁªôÈÇ£‰∫õ‰∏çÁü•ÈÅìÁöÑ‰∫∫ËÆ≤ÊòéÁôΩÁöÑÂ•ΩÂ§Ñ„ÄÇÔºà‰πüËÆ∏Ê≠£Âõ†‰∏∫Â¶ÇÊ≠§ÔºåÊâçÊÄªÊòØÊúâ‰∫∫ËøôÊ†∑Êó†Â•àÁΩ¢Ôºö‰ºöÁöÑ‰∫∫ÔºåËá™ÁÑ∂‰ºö‰∫ÜÔºå‰∏ç‰ºöÁöÑ‰∫∫ÔºåÊó†ËÆ∫Â¶Ç‰Ωï‰πü‰∏ç‰ºö„ÄÇÔºâ Êõ¥‰∏∫ÂÖ≥ÈîÆÁöÑÊòØÔºåËøôÁßçÁü•ËØÜÁöÑËé∑ÂèñÔºåÊòØ ‚Äú‰∏çÂèØÈÄÜÁöÑ‚Äù„ÄÇÂú®‰Ω†Áü•ÈÅìÂÆÉÁöÑÈÇ£‰∏ÄÁû¨Èó¥ÔºåÂÆÉÂ∞±Â∑≤ÁªèÊîπÂèò‰∫Ü‰∏ÄÂàáÔºå‰Ω†ÁöÑÁîüÊ¥ªÂõ†ÂÆÉËÄåÂèòÔºåÂÜç‰πüÊó†Ê≥ïÂ§çÂéü„ÄÇÊàë‰ª¨ÂÜç‰πü‰∏çÂèØËÉΩÂØπËøôÁßçÁü•ËØÜËßÜËÄå‰∏çËßÅÔºåÂê¨ËÄå‰∏çÈóªÔºåÁΩÆ‰πã‰∏çÁêÜÔºåÂÆÉÁû¨Èó¥Â∞±ËÉΩÊ†πÊ∑±ËíÇÂõ∫ÔºåÊó†Ê≥ïÈì≤Èô§„ÄÇÊØîÂ¶ÇÔºåÁúüÊ≠£ÁêÜËß£Ê¶ÇÁéáÁªüËÆ°Â∏∏ËØÜÁöÑ‰∫∫ÔºåÊòØÁªùÂØπ‰∏ç‰ºöÂéª‰π∞ÂΩ©Á•®ÁöÑ ‚Ä¶‚Ä¶ Âõ†‰∏∫‰π∞ÂΩ©Á•®ËøôÁßçË°å‰∏∫Âú®‰ªñ‰ª¨ÁúºÈáåÁõ∏ÂΩì‰∫é‰∏çÂ∞äÈáçËá™Â∑±ÁöÑÊô∫ÂïÜÂíåÂ∑≤Â≠¶ËøáÁöÑÁü•ËØÜ„ÄÇÂèØ‰∏éÊ≠§ÂêåÊó∂ÔºåÂΩ©Á•®ÊòØÂú∞ÁêÉ‰∏äÊúÄÁïÖÈîÄÁöÑÂïÜÂìÅÔºåÂèØËßÅÊúâÂ§öÂ∞ë‰∫∫‰∏ÄÁîüÈÉΩÊú™ÊõæÊúâÊú∫‰ºö‰∫ÜËß£ÈÇ£‰∫õÈáçË¶ÅÁöÑÁü•ËØÜ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂΩìÁÑ∂ÔºåËØªÂà∞ËøôÈáåÔºåËØªËÄÖÈÉΩ‰ºöÂêåÊÑèÔºö‰πüËÆ∏ÊúÄÂÄºÂæó‰º†Êí≠ÁöÑÔºàËá≥Â∞ëÂ∫îËØ•‰∏∫‰πãÂä™ÂäõÁöÑÔºâÂ∞±ÊòØËøôÁßçÁü•ËØÜ„ÄÇ‰º†Êí≠ÂÆÉ‰ª¨ÁöÑÊúÄÂ§ßÊÑè‰πâÔºåÁîöËá≥ÂîØ‰∏ÄÁöÑÊÑè‰πâÂíåÁõÆÁöÑÔºåÂ∞±ÊòØ ‚ÄúÂêØÂèë‚Äù„ÄÇËøôÊú¨‰π¶ÈáåÁöÑÊñáÂ≠óÔºåÂÖ®ÈÉ®ÁöÑÊÑè‰πâÔºåÂè™Êúâ‰∏§‰∏™Â≠óÔºö‚ÄúÂêØÂèë‚Äù„ÄÇ‰ΩúËÄÖÁúüËØöÂú∞Â∏åÊúõËØªËÄÖÂú®ËØªËøáËøô‰∫õÊñáÂ≠ó‰πãÂêéÔºåÔºàËµ∑Á†ÅÔºâÂú®Ëã±ËØ≠‰ΩøÁî®ÊñπÈù¢ÊúâÊâÄÂêØÂèë„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰πüËÆ∏Êúâ‰∫õËØªËÄÖ‰ºöÂèëÁé∞ÈáåÈù¢Êúâ ‚ÄúÂ§™Â§öÁöÑÂ∫üËØù‚ÄùÔºåÈÇ£‰ªÖ‰ªÖÊòØÂõ†‰∏∫ËøôÁ±ªÁü•ËØÜÁöÑÁâπÊÄßÔºöÂÆÉ‰ª¨Â§™ ‚ÄúË≤å‰∏çÊÉä‰∫∫‚ÄùÔºåÂ¶ÇÊûúÈùûË¶ÅÂÆÉ‰ª¨‰ª•Êú¨Êù•ÁöÑÈù¢ÁõÆÂá∫Áé∞Ôºå‰ªñ‰ª¨ÊòØ‰∏ç‰ºöÊ≥®ÊÑèÂà∞ÁöÑ‚îÄ‚îÄÊó†ËÆ∫ÂÆÉ‰ª¨ÂÆûÈôÖ‰∏äÊúâÂ§ö‰πàÈáçË¶Å„ÄÇÂê¶ÂàôÔºå‰ªñ‰ª¨Êó©Â∞±Ë¢´ËøôÁ±ªÁü•ËØÜÂΩªÂ§¥ÂΩªÂ∞æÂú∞ÊîπÂèò‰∫Ü ‚Ä¶‚Ä¶ ÂèØ‰∫ãÂÆû‰∏ä‰ªñ‰ª¨‰∏çËøòÊòØÂéüÊù•ÈÇ£‰∏™Ê†∑Â≠ê‰πàÔºü&lt;/p&gt; &#xA;&lt;p&gt;‰πüËÆ∏Êúâ‰∫õËØªËÄÖËá™ÁÑ∂ËÄåÁÑ∂Âú∞‰æùÁÖßÊÄùÁª¥ÊÉØÊÄßÔºåÂ∏åÊúõÁúãÂà∞Êõ¥Â§öÁöÑ ‚ÄúHow‚Äù„ÄÇÂèØÊ≠£Â¶Ç‰πãÂâçÊâÄËß£ÈáäÁöÑÈÇ£Ê†∑ÔºåËøôÁ±ªÁü•ËØÜ‰∏≠ÁöÑÂ§ßÂ§öÊï∞ÔºåËØªËÄÖÂú®‰∫ÜËß£Âà∞ ‚ÄúWhat‚Äù ÁöÑÈÇ£‰∏ÄÁû¨Èó¥ÔºåÂÆÉÁöÑ‰ΩúÁî®Â∞±Â∑≤ÁªèÂÖ®ÈÉ®ÂèëÊå•ÂÆåÊØïÔºå‚ÄúWhy‚Äù ‰πüËÆ∏Âè™‰∏çËøáÊòØÂ§ö‰ΩôÁöÑËß£ÈáäÔºåËÄå ‚ÄúHow‚Äù ÊàñËÄÖ‰∏çË®ÄËá™ÊòéÔºåÊàñËÄÖÂõ†‰∫∫ËÄåÂºÇÔºåÈúÄË¶ÅËØªËÄÖËá™Â∑±Êë∏Á¥¢‚Ä¶‚Ä¶&lt;/p&gt; &#xA;&lt;p&gt;ËøôÁ±ªÁü•ËØÜÊ≥®ÂÆöÂ±û‰∫éÂ∞ëÊï∞‰∫∫„ÄÇÈô§‰∫Ü‰πãÂâçÂ∑≤ÁªèËØ¥ËøáÁöÑÂéüÂõ†‰πãÂ§ñÔºåËøòÊúâÂè¶Â§ñ‰∏Ä‰∏™ÈáçË¶ÅÁöÑÂéüÂõ†Ôºö‰∫∫‰ª¨Âè™ÊÑø‰º†Êí≠Ëá™Â∑±Áõ∏‰ø°ÁöÑÁü•ËØÜ‚îÄ‚îÄÂì™ÊÄïÈÇ£ÊâÄË∞ìÁöÑÁü•ËØÜÊ†πÊú¨Â∞±ÊòØÈîôÁöÑ„ÄÇÈáçË¶ÅÁöÑ‰∏çÊòØÂØπÈîôÔºåÈáçË¶ÅÁöÑÊòØÊÑüËßâ„ÄÇÂ∞ΩÁÆ° ‚ÄúËßâÂæóÊ≠£Á°Æ‚Äù Âíå ‚ÄúÊ≠£Á°Æ‚Äù Áõ∏Â∑ÆÂèØËÉΩÂçÅ‰∏áÂÖ´ÂçÉÈáåÔºå‰ΩÜÂØπÂ§ßÂ§öÊï∞‰∫∫Êù•ËØ¥Ê†πÊú¨Â∞±ÊòØ‰∏ÄÂõû‰∫ãÂÑøÔºåËµ∑Á†ÅÔºå‰ªñ‰ª¨ÊÉÖÊÑøÈÇ£Â∞±ÊòØ‰∏ÄÂõû‰∫ãÂÑø„ÄÇÊâÄ‰ª•ÔºåÂÆπÊòì‰º†ÈÄíÁöÑÊòØÈÇ£‰∫õ ‚ÄúÂæàËá™ÁÑ∂Âú∞Â∞±‰ª§‰∫∫Áõ∏‰ø°ÔºàÊÑüËßâÔºâÊòØÊ≠£Á°ÆÁöÑ‚ÄùÔºåËÄå‰∏çÊòØ ‚Äú‰∫ãÂÆû‰∏äÊ≠£Á°ÆÁöÑ‚Äù ‰∫ãÊÉÖ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ââç‰∫õÂπ¥ÊàëÂÜô„ÄäÊääÊó∂Èó¥ÂΩì‰ΩúÊúãÂèã„ÄãÁöÑÊó∂ÂÄôÔºåÂ§öÂ∞ëÂØπÂÆÉÁöÑ‰º†Êí≠ÊòØÊÇ≤ËßÇÁöÑÔºåÂõ†‰∏∫ÊàëÁü•ÈÅìÈÇ£‰∫õÊñáÂ≠óÈáåÊâÄ‰º†ÈÄíÁöÑÁªùÂ§ßÂ§öÊï∞ÊòØËøôÁßçÈÅìÁêÜ„ÄÅËøôÁ±ªÁü•ËØÜ‚îÄ‚îÄÂÆÉ‰ª¨ÁöÑÊú¨Ë¥®ÂÜ≥ÂÆö‰∫ÜÂÖ∂‰º†Êí≠ÁöÑÂõ∞ÈöæÁ®ãÂ∫¶„ÄÇÊâÄ‰ª•ÔºåÈÇ£Êó∂ÂÄôÔºåÊàëËßâÂæóÂè™Ë¶ÅÊúâÈõ∂ÊòüÈÇ£‰πàÂá†‰∏™‰∫∫ËÉΩÂ§üË¢´ÈÇ£‰∫õÊñáÂ≠óÊâÄÊîπÂèòÔºåÂ∞±Â∑≤Áªè‰∏áÂπ∏‰∫Ü„ÄÇ‰∫íËÅîÁΩëÊó∂‰ª£ÂÖÖÊª°‰∫ÜÂ•áËøπÔºåÈÇ£‰∫õÊñáÂ≠óÂú®ÁΩë‰∏ä‰ª•ÊØè‰∏™ÊúàÂá†‰∏áÁÇπÂáªÁöÑÊï∞ÈáèË¢´ÊµèËßà„ÄÇËÄå 2009 Âπ¥Âç∞Âà∑Êàê‰π¶Âá∫ÁâàÂêéÔºåÁ´üÁÑ∂ÂèØ‰ª•Âú®‰∏ÄÂπ¥‰πãÂÜÖÈáçÂç∞ 11 Ê¨°ÔºåÂÜçÊ¨°Âá∫‰πéÊàëÁöÑÊÑèÊñô„ÄÇÂì™ÊÄïÁúüÊ≠£Êé•ÂèóÈÇ£‰∫õÈÅìÁêÜÁöÑËØªËÄÖÊØîÁéáÂÜç‰ΩéÔºåÁî±‰∫éÂü∫Êï∞Â∑®Â§ßÔºåÊàëÁü•ÈÅìÊàëËøòÊòØÁªìÁªìÂÆûÂÆûÂú∞ÊîπÂèò‰∫ÜÂæàÂ§ö‰∫∫ÁöÑ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ê≠£ÊòØËøôÊ†∑ÁöÑÂä®ÂäõÔºå‰ΩøÊàëÁîòÂøÉ„ÄÅËÄêÂøÉÂú∞ÂÜô‰∏ãËøôÊú¨‰π¶ÈáåÁöÑÊñáÂ≠ó„ÄÇÁü•ÈÅìÂÆÉ‰ª¨Êó†ËÆ∫Â¶Ç‰ΩïÈÉΩ‰ºöÂÜçÊ¨°ÊîπÂèò‰∏Ä‰∫õ‰∫∫‚îÄ‚îÄÂ∞ΩÁÆ°ÊàëËá™Â∑±Ê∞∏ËøúÊ≤°ÂäûÊ≥ïÁü•ÈÅìÊúÄÁªàÊîπÂèòÁöÑÁ©∂Á´üÊòØÂì™‰∫õ‰∫∫„ÄÇÁîüÊ¥ª‰∏≠ÂÖÖÊª°‰∫ÜÊó†Â•àÔºåÁÑ∂ËÄåÊúâ‰∫õ‰∫∫Âπ∏ËøêÂ¶ÇÊàëÔºåÊØïÁ´üËÉΩÂ§üÊîπÂèòÁÇπ‰ªÄ‰πà„ÄÇ‰∫éÊòØÔºåÈÇ£‰∫õÊó†Â•àÔºåÈÇ£‰∫õ‰∏çÂπ∏ÔºåÂ∞±Â§öÂ∞ëÊ∑°‰∫Ü‰∏Ä‰∫õ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰∫ãÂÆû‰∏äÔºåËøôÊú¨‰π¶‰πüÊòØ„ÄäÊääÊó∂Èó¥ÂΩìÂÅöÊúãÂèã„ÄãÁöÑÂÖ∑‰ΩìÂª∂Áª≠„ÄÇ„ÄäÊääÊó∂Èó¥ÂΩìÂÅöÊúãÂèã„ÄãÁöÑ‰∏ªÊó®ÂæàÁÆÄÂçïÔºöÊó∂Èó¥‰∏ç‰ºöÂê¨‰ªéÊàë‰ª¨ÁöÑÁÆ°ÁêÜÔºåÊàë‰ª¨ÊúÄÂ§öÂè™ËÉΩ‰∏éÊó∂Èó¥ÂÅöÊúãÂèãÔºõ‰∏éÊó∂Èó¥ÂÅöÊúãÂèãÁöÑÊñπÊ≥ïÂè™‰∏çËøáÊòØ ‚ÄúÁî®Ê≠£Á°ÆÁöÑÊñπÂºèÂÅöÊ≠£Á°ÆÁöÑ‰∫ãÊÉÖ‚Äù„ÄÇËÄåËøôÊú¨‰π¶ÔºåÂè™‰∏çËøáÊòØ Êää ‚ÄúÊ≠£Á°ÆÁöÑ‰∫ãÊÉÖ‚Äù ËÅöÁÑ¶Âú® ‚ÄúÁî®Ëã±ËØ≠‚Äù ‰∏äËÄåÂ∑≤ÔºåËÄåÂêéÂÜçÁúãÁúãÂèØËÉΩÁöÑ ‚ÄúÊ≠£Á°ÆÁöÑÊñπÂºè‚Äù Á©∂Á´üÊòØ‰ªÄ‰πà„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;ÊùéÁ¨ëÊù•&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2010 Âπ¥Êò•‰∫é‰∏äÊµ∑ÂàùÁ®ø&lt;/li&gt; &#xA; &lt;li&gt;2010 Âπ¥ÂÜ¨‰∫éÂåó‰∫¨‰øÆÊîπ&lt;/li&gt; &#xA; &lt;li&gt;2015 Âπ¥‰∫éÂåó‰∫¨ÈáçÊñ∞Âà∂‰ΩúÁΩëÁªúÂºÄÊîæÁâàÊú¨&lt;/li&gt; &#xA; &lt;li&gt;2019 Âπ¥‰∫éÂåó‰∫¨‰∏ä‰º†Ëá≥ Github&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>