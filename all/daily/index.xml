<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:28:57Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ignitetechnologies/Mindmap</title>
    <updated>2023-04-30T01:28:57Z</updated>
    <id>tag:github.com,2023-04-30:/Ignitetechnologies/Mindmap</id>
    <link href="https://github.com/Ignitetechnologies/Mindmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository will contain many mindmaps for cyber security technologies, methodologies, courses, and certifications in a tree structure to give brief details about them&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hacking Articles- Cyber Mindmap&lt;/h1&gt; &#xA;&lt;p&gt;This repository will contain many mindmaps for cyber security technologies, methodologies, courses, and certifications in a tree structure to give brief details about them. Please share this with your connections and direct queries and feedback to &lt;a href=&#34;https://twitter.com/hackinarticles&#34;&gt;Hacking Articles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Follow us on &lt;a href=&#34;http://www.twitter.com/hackinarticles&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ignitetechnologies/Windows-Privilege-Escalation/main/twitter.png&#34; alt=&#34;alt text&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/kyKvXwK4Bk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ignitetechnologies/Windows-Privilege-Escalation/main/discord.png&#34; alt=&#34;alt text&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/hackingarticles/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ignitetechnologies/Windows-Privilege-Escalation/main/linked.png&#34; alt=&#34;alt text&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Ignitetechnologies/Mindmap/raw/main/mind.png?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ratfactor/ziglings</title>
    <updated>2023-04-30T01:28:57Z</updated>
    <id>tag:github.com,2023-04-30:/ratfactor/ziglings</id>
    <link href="https://github.com/ratfactor/ziglings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn the Zig programming language by fixing tiny broken programs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ziglings&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to Ziglings! This project contains a series of tiny broken programs (and one nasty surprise). By fixing them, you&#39;ll learn how to read and write &lt;a href=&#34;https://ziglang.org/&#34;&gt;Zig&lt;/a&gt; code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1458409/109398392-c1069500-790a-11eb-8ed4-7d7d74d32666.jpg&#34; alt=&#34;ziglings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those broken programs need your help! (You&#39;ll also save the planet from evil aliens and help some friendly elephants stick together, which is very sweet of you.)&lt;/p&gt; &#xA;&lt;p&gt;This project was directly inspired by the brilliant and fun &lt;a href=&#34;https://github.com/rust-lang/rustlings&#34;&gt;rustlings&lt;/a&gt; project for the &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; language. Indirect inspiration comes from &lt;a href=&#34;http://rubykoans.com/&#34;&gt;Ruby Koans&lt;/a&gt; and the Little LISPer/Little Schemer series of books.&lt;/p&gt; &#xA;&lt;h2&gt;Intended Audience&lt;/h2&gt; &#xA;&lt;p&gt;This will probably be difficult if you&#39;ve &lt;em&gt;never&lt;/em&gt; programmed before. But no specific programming experience is required. And in particular, you are &lt;em&gt;not&lt;/em&gt; expected to have any prior experience with &#34;systems programming&#34; or a &#34;systems&#34; level language such as C.&lt;/p&gt; &#xA;&lt;p&gt;Each exercise is self-contained and self-explained. However, you&#39;re encouraged to also check out these Zig language resources for more detail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ziglang.org/learn/&#34;&gt;https://ziglang.org/learn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ziglearn.org/&#34;&gt;https://ziglearn.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ziglang.org/documentation/master/&#34;&gt;https://ziglang.org/documentation/master/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, the &lt;a href=&#34;https://github.com/ziglang/zig/wiki/Community&#34;&gt;Zig community&lt;/a&gt; is incredibly friendly and helpful!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install a &lt;a href=&#34;https://ziglang.org/download/&#34;&gt;development build&lt;/a&gt; of the Zig compiler. (See the &#34;master&#34; section of the downloads page.)&lt;/p&gt; &#xA;&lt;p&gt;Verify the installation and build number of &lt;code&gt;zig&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ zig version&#xA;0.11.0-dev.2560+xxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone this repository with Git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ratfactor/ziglings&#xA;$ cd ziglings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;zig build&lt;/code&gt; and follow the instructions to begin!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ zig build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A Note About Versions&lt;/h2&gt; &#xA;&lt;p&gt;The Zig language is under very active development. In order to be current, Ziglings tracks &lt;strong&gt;development&lt;/strong&gt; builds of the Zig compiler rather than versioned &lt;strong&gt;release&lt;/strong&gt; builds. The last stable release was &lt;code&gt;0.10.1&lt;/code&gt;, but Ziglings needs a dev build with pre-release version &#34;0.11.0&#34; and a build number at least as high as that shown in the example version check above.&lt;/p&gt; &#xA;&lt;p&gt;It is likely that you&#39;ll download a build which is &lt;em&gt;greater&lt;/em&gt; than the minimum.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(For those who cannot easily update Zig, there are also community-supported branches in this repo. At the moment, there&#39;s one for v0.8.1. Older version branches may or may not have all exercises and/or bugfixes.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you have a build of the Zig compiler that works with Ziglings, they&#39;ll continue to work together. But keep in mind that if you update one, you may need to also update the other.&lt;/p&gt; &#xA;&lt;p&gt;Also note that the current &#34;stage 1&#34; Zig compiler is very strict about input: &lt;a href=&#34;https://github.com/ziglang/zig/issues/544&#34;&gt;no tab characters or Windows CR/LF newlines are allowed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Version Changes&lt;/h3&gt; &#xA;&lt;p&gt;Version-0.11.0-dev.2560+602029bb2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;2023-04-07&lt;/em&gt; zig 0.11.0-dev.2401 - fixes of the new build system - see &lt;a href=&#34;https://github.com/ratfactor/ziglings/pull/212&#34;&gt;#212&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2023-02-21&lt;/em&gt; zig 0.11.0-dev.2157 - changes in &lt;code&gt;build system&lt;/code&gt; - new: parallel processing of the build steps&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2023-02-21&lt;/em&gt; zig 0.11.0-dev.1711 - changes in &lt;code&gt;for loops&lt;/code&gt; - new: Multi-Object For-Loops + Struct-of-Arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2023-02-12&lt;/em&gt; zig 0.11.0-dev.1638 - changes in &lt;code&gt;std.Build&lt;/code&gt; cache_root now returns a directory struct&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2023-02-04&lt;/em&gt; zig 0.11.0-dev.1568 - changes in &lt;code&gt;std.Build&lt;/code&gt; (combine &lt;code&gt;std.build&lt;/code&gt; and &lt;code&gt;std.build.Builder&lt;/code&gt; into &lt;code&gt;std.Build&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2023-01-14&lt;/em&gt; zig 0.11.0-dev.1302 - changes in &lt;code&gt;@addWithOverflow&lt;/code&gt; (now returns a tuple) and &lt;code&gt;@typeInfo&lt;/code&gt;; temporary disabled async functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-09-09&lt;/em&gt; zig 0.10.0-dev.3978 - change in &lt;code&gt;NativeTargetInfo.detect&lt;/code&gt; in build&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-09-06&lt;/em&gt; zig 0.10.0-dev.3880 - Ex 074 correctly fails again: comptime array len&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-08-29&lt;/em&gt; zig 0.10.0-dev.3685 - &lt;code&gt;@typeName()&lt;/code&gt; output change, stage1 req. for async&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-07-31&lt;/em&gt; zig 0.10.0-dev.3385 - std lib string &lt;code&gt;fmt()&lt;/code&gt; option changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-03-19&lt;/em&gt; zig 0.10.0-dev.1427 - method for getting sentinel of type changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2021-12-20&lt;/em&gt; zig 0.9.0-dev.2025 - &lt;code&gt;c_void&lt;/code&gt; is now &lt;code&gt;anyopaque&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2021-06-14&lt;/em&gt; zig 0.9.0-dev.137 - std.build.Id &lt;code&gt;.Custom&lt;/code&gt; is now &lt;code&gt;.custom&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2021-04-21&lt;/em&gt; zig 0.8.0-dev.1983 - std.fmt.format() &lt;code&gt;any&lt;/code&gt; format string required&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2021-02-12&lt;/em&gt; zig 0.8.0-dev.1065 - std.fmt.format() &lt;code&gt;s&lt;/code&gt; (string) format string required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;It can be handy to check just a single exercise or &lt;em&gt;start&lt;/em&gt; from a single exercise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zig build -Dn=19&#xA;zig build -Dn=19 start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run without checking for correctness:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zig build -Dn=19 test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or skip the build system entirely and interact directly with the compiler if you&#39;re into that sort of thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zig run exercises/001_hello.zig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling all wizards: To prepare an executable for debugging, install it to zig-cache/bin with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zig build -Dn=19 install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a list of all possible options, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zig build -Dn=19 -l&#xA;&#xA;  install                      Install 019_functions2.zig to prefix path&#xA;  uninstall                    Uninstall 019_functions2.zig from prefix path&#xA;  test                         Run 019_functions2.zig without checking output&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What&#39;s Covered&lt;/h2&gt; &#xA;&lt;p&gt;The primary goal for Ziglings is to cover the core Zig language.&lt;/p&gt; &#xA;&lt;p&gt;It would be nice to cover the Standard Library as well, but this is currently challenging because the stdlib is evolving even faster than the core language (and that&#39;s saying something!). Not only would stdlib coverage change very rapidly, some exercises might even cease to be relevant entirely.&lt;/p&gt; &#xA;&lt;p&gt;Having said that, there are some stdlib features that are probably here to stay or are so important to understand that they are worth the extra effort to keep current.&lt;/p&gt; &#xA;&lt;p&gt;Conspicuously absent from Ziglings are a lot of string manipulation exercises. This is because Zig itself largely avoids dealing with strings. Hopefully there will be an obvious way to address this in the future. The Ziglings crew loves strings!&lt;/p&gt; &#xA;&lt;p&gt;Zig Core Language&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hello world (main needs to be public)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Importing standard library&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Assignment&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Arrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; If&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; While&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; For&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Errors (error/try/catch/if-else-err)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Defer (and errdefer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Switch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Unreachable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Enums&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Structs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pointers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optionals&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Struct methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Slices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Many-item pointers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Unions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Numeric types (integers, floats)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Labelled blocks and loops&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loops as expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Builtins&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inline loops&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Comptime&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sentinel termination&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Quoted identifiers @&#34;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Anonymous structs/tuples/lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Async &amp;lt;--- ironically awaiting upstream Zig updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interfaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bit manipulation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Working with C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Zig Standard Library&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; String formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome! I&#39;m writing this to teach myself and to create the learning resource I wished for. There will be tons of room for improvement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wording of explanations&lt;/li&gt; &#xA; &lt;li&gt;Idiomatic usage of Zig&lt;/li&gt; &#xA; &lt;li&gt;Additional exercises&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/ratfactor/ziglings/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; in this repo for the full details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API</title>
    <updated>2023-04-30T01:28:57Z</updated>
    <id>tag:github.com,2023-04-30:/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API</id>
    <link href="https://github.com/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free AUTOGPT with NO API is a repository that offers a simple version of Autogpt, an autonomous AI agent capable of performing tasks independently. Unlike other versions, our implementation does not rely on any paid OpenAI API, making it accessible to anyone.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;USE AI AGENTs, like AUTO-GPT or BABYAGI, without paids API😤 &lt;strong&gt;TOTALLY FOR FREE🤑&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Tired of paying for OPENAI, PINECONE, GOOGLESEARCH APIs to try out the latest developments in the AI field? Perfect, &lt;strong&gt;this is the repository for you! 🎁&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For any problem open an ISSUE 🚬, the project is very simple so any help is welcome💸.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Are you bored reading😴? Do you want to try our project now⏳? Open the notebook on Colab everything is ready!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RUN NOW ON COLAB 😮👉&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/14854fi6oO4lXqR3_mt6tc2Lr2IsA12oq?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; ⚠️ Abusing this tool is at your own risk&lt;/p&gt; &#xA;&lt;img width=&#34;1383&#34; height=&#34;250&#34; alt=&#34;image&#34; src=&#34;https://raw.githubusercontent.com/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API/main/img/GH2.gif&#34;&gt; &#xA;&lt;p&gt;By the way, thank you so much for &lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API?style=social&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; and all the support!!&lt;/p&gt; &#xA;&lt;h2&gt;WHY THIS REPOSITORY ? 🤔&lt;/h2&gt; &#xA;&lt;p&gt;Hello everyone &lt;span&gt;🥰&lt;/span&gt; ,&lt;/p&gt; &#xA;&lt;p&gt;I wanted to start by &lt;strong&gt;talking about how important it is to democratize AI&lt;/strong&gt;. Unfortunately, most new applications or discoveries in this field end up enriching some big companies, leaving behind small businesses or simple projects. One striking example of this is Autogpt, an autonomous AI agent capable of performing tasks.&lt;/p&gt; &#xA;&lt;p&gt;Autogpt and similar projects like BabyAGI &lt;strong&gt;only work with paid APIs, which is not fair&lt;/strong&gt;. That&#39;s why I tried to recreate a simpler but very interesting and, above all, open-source version of Autogpt that &lt;strong&gt;does not require any API and does not need any particular hardware.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I believe that by providing free and open-source AI tools, we can give small businesses and individuals the opportunity to create new and innovative projects without the need for significant financial investment. &lt;strong&gt;This will allow for more equitable and diverse access to AI technology, which is essential for advancing society as a whole.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HOW TO GET CHATGPT &amp;amp; HUGGINGFACE TOKEN FREE 🔑🔐&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HUGGINGFACE🤗&lt;/strong&gt; : Visit this simple &lt;a href=&#34;https://huggingface.co/docs/hub/security-tokens&#34;&gt;official guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CHATGPT🖥&lt;/strong&gt; : visit this &lt;a href=&#34;https://chat.openai.com/api/auth/session&#34;&gt;site&lt;/a&gt; and copy the &#34;accessToken&#34; only the token!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/108482353/234968090-b724e277-566c-4e42-9936-7592043f70fa.png&#34; alt=&#34;CHATGPT_TOKEN&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HOW TO RUN CAMEL 🐫&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RUN NOW ON COLAB😮&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/14854fi6oO4lXqR3_mt6tc2Lr2IsA12oq?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; ⚠️ Abusing this tool is at your own risk&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or use Locally :&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dowload the repository &lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API&#34;&gt;FREE AUTOGPT REPOSITORY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;pip3 install -r requirements.txt&lt;/li&gt; &#xA; &lt;li&gt;streamlit run Camel.py&lt;/li&gt; &#xA; &lt;li&gt;Get your free token on &lt;a href=&#34;https://chat.openai.com/api/auth/session&#34;&gt;this link&lt;/a&gt;, paste it in input and start&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/108482353/235199747-c2dbdd27-80d6-4950-9cc6-7f140890f386.mp4&#34;&gt;https://user-images.githubusercontent.com/108482353/235199747-c2dbdd27-80d6-4950-9cc6-7f140890f386.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HOW TO RUN BABY AGI 👶&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RUN NOW ON COLAB😮&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/14854fi6oO4lXqR3_mt6tc2Lr2IsA12oq?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; ⚠️ Abusing this tool is at your own risk&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or use Locally :&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dowload the repository &lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API&#34;&gt;FREE AUTOGPT REPOSITORY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;pip3 install -r requirements.txt&lt;/li&gt; &#xA; &lt;li&gt;Usage: &lt;strong&gt;python BABYAGI.py --hf_token YoUrHFtOkEn --chatgpt_token YoUrChATgPTtOkENisSOlOnG&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/108482353/234963635-004adace-36ab-46de-9022-61858cd3dca4.mp4&#34;&gt;https://user-images.githubusercontent.com/108482353/234963635-004adace-36ab-46de-9022-61858cd3dca4.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HOW TO RUN AUTOGPT 🤖&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RUN NOW ON COLAB😮&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/14854fi6oO4lXqR3_mt6tc2Lr2IsA12oq?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; ⚠️ Abusing this tool is at your own risk&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or use Locally :&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dowload the repository &lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API&#34;&gt;FREE AUTOGPT REPOSITORY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;pip3 install -r requirements.txt&lt;/li&gt; &#xA; &lt;li&gt;Usage: &lt;strong&gt;python AUTOGPT.py --hf_token YoUrHFtOkEn --chatgpt_token YoUrChATgPTtOkENisSOlOnG&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/108482353/234947600-1df35b1f-6505-40f9-be1d-3257a46eacf3.mp4&#34;&gt;https://user-images.githubusercontent.com/108482353/234947600-1df35b1f-6505-40f9-be1d-3257a46eacf3.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HOW IT WORK ? 🔨🔩&lt;/h2&gt; &#xA;&lt;p&gt;To create an open-source version of Autogpt that does not require paid APIs or specific hardware, &lt;strong&gt;we performed a reverse engineering process on ChatGPT&lt;/strong&gt;, a language model developed by OpenAI. By doing so, we were able to use the agents and new technologies of langchain for free.&lt;/p&gt; &#xA;&lt;p&gt;We then created a custom LLM wrapper with langchain, &lt;strong&gt;which can be used as a plug-and-play solution with any langchain function or tool 💡&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ChatGPTAPI import ChatGPT&#xA;&#xA;# Instantiate a ChatGPT object with your token&#xA;llm = ChatGPT(token=&#34;YOURTOKEN&#34;)&#xA;&#xA;# Generate a response based on the given prompt&#xA;response = llm(&#34;Hello, how are you?&#34;)&#xA;&#xA;# Print the response&#xA;print(response)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code snippet provided above shows how to use our custom ChatGPT LLM class to interact with the language model. It requires a token from the ChatGPT API, which can be obtained from &lt;a href=&#34;https://chat.openai.com/api/auth/session&#34;&gt;https://chat.openai.com/api/auth/session&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that there is a limit of 50 requests per hour for each account on the ChatGPT API 💣. Therefore, we implemented a call counter in our ChatGPT class to prevent exceeding this limit.&lt;/p&gt; &#xA;&lt;p&gt;We believe that our open-source version of Autogpt will promote equitable and diverse access to AI technology and empower individuals and small businesses to create innovative AI projects without significant financial investment.&lt;/p&gt; &#xA;&lt;h3&gt;With this &#34;CUSTOM LLM WRAPPER&#34; now u can build or test your LLM APP&#39;s WITHOUT PAYing&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;strong&gt;🤗 Democratize AI 🤗&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API&#34; alt=&#34;Stargazers repo roster for @IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API/network/members&#34;&gt;&lt;img src=&#34;https://reporoster.com/forks/IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API&#34; alt=&#34;Forkers repo roster for @IntelligenzaArtificiale/Free-AUTO-GPT-with-NO-API&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By the way, thank you so much for &lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API?style=social&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; and all the support!!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;LINK :&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://watch.screencastify.com/v/vSDUBdhfvh9yEwclHUyw&#34;&gt;VIDEO DEMO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IntelligenzaArtificiale/Free-AUTOGPT-with-NO-API&#34;&gt;FREE AUTOGPT REPOSITORY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.camel-ai.org/&#34;&gt;Camel project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/en/latest/use_cases/agents/baby_agi_with_agent.html&#34;&gt;BABY AGI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/en/latest/use_cases/autonomous_agents/autogpt.html?highlight=autogpt#setup-model-and-autogpt&#34;&gt;AutoGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/en/latest/modules/models/llms/examples/custom_llm.html&#34;&gt;langchain for custom llm wrapper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;TODO , I NEED YOUR HELP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Create free LLM langchain wrapper based on &lt;a href=&#34;https://github.com/acheong08/ChatGPT&#34;&gt;Reverse Engineered ChatGPT API by OpenAI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Create a simple versione of AUTOGPT based on &lt;a href=&#34;https://arxiv.org/pdf/2303.17760.pdf&#34;&gt;Camel theory&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Find a way to replace OpenAIEmbeddings()&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Create a simple version of AUTOGPT based on &lt;a href=&#34;https://alumni.media.mit.edu/~kris/ftp/SafeBabyAGI-J.BiegerEtAl2015.pdf&#34;&gt;Baby AGI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add web search agent&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Add file writer agent&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Finally AUTOGPT without paids API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Add other free Custom LLM wrapper &lt;a href=&#34;https://github.com/xtekky/gpt4free&#34;&gt;Add this&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Add long term memory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Find a way to replace PINECONE api&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Find a way to replace official Google API&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Inspiration and Credits 🤗&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;https://github.com/hwchase17/langchain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acheong08/ChatGPT&#34;&gt;https://github.com/acheong08/ChatGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Significant-Gravitas/Auto-GPT&#34;&gt;https://github.com/Significant-Gravitas/Auto-GPT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>