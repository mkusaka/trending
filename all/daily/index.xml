<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-11T01:28:38Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thalissonvs/pydoll</title>
    <updated>2025-03-11T01:28:38Z</updated>
    <id>tag:github.com,2025-03-11:/thalissonvs/pydoll</id>
    <link href="https://github.com/thalissonvs/pydoll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pydoll is a library for automating chromium-based browsers without a WebDriver, offering realistic interactions. It supports Python&#39;s asynchronous features, enhancing performance and enabling event capturing and simultaneous web scraping.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1&gt;üöÄ Pydoll: Async Web Automation in Python!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/c4615101-d932-4e79-8a08-f50fbc686e3b&#34; alt=&#34;Alt text&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://codecov.io/github/thalissonvs/pydoll/graph/badge.svg?token=40I938OGM9&#34;&gt; &lt;img src=&#34;https://github.com/thalissonvs/pydoll/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;img src=&#34;https://github.com/thalissonvs/pydoll/actions/workflows/ruff-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Ruff CI&#34;&gt; &lt;img src=&#34;https://github.com/thalissonvs/pydoll/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://tokei.rs/b1/github/thalissonvs/pydoll&#34; alt=&#34;Total lines&#34;&gt; &lt;img src=&#34;https://tokei.rs/b1/github/thalissonvs/pydoll?category=files&#34; alt=&#34;Files&#34;&gt; &lt;img src=&#34;https://tokei.rs/b1/github/thalissonvs/pydoll?category=comments&#34; alt=&#34;Comments&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/thalissonvs/pydoll?label=Issues&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/thalissonvs/pydoll?label=Closed%20issues&#34; alt=&#34;GitHub closed issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/thalissonvs/pydoll/bug?label=Bugs&amp;amp;color=red&#34; alt=&#34;GitHub bug issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/thalissonvs/pydoll/enhancement?label=Enhancements&amp;amp;color=purple&#34; alt=&#34;GitHub enhancement issues&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://trendshift.io/repositories/13125&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/13125&#34; alt=&#34;thalissonvs%2Fpydoll | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Pydoll is an innovative Python library that&#39;s redefining Chromium browser automation! Unlike other solutions, Pydoll &lt;strong&gt;completely eliminates the need for webdrivers&lt;/strong&gt;, providing a much more fluid and reliable automation experience.&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê Extraordinary Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero Webdrivers!&lt;/strong&gt; Say goodbye to webdriver compatibility and configuration headaches&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native Captcha Bypass!&lt;/strong&gt; Naturally passes through Cloudflare Turnstile and reCAPTCHA v3 *&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; thanks to native asynchronous programming&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realistic Interactions&lt;/strong&gt; that simulate human behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced Event System&lt;/strong&gt; for complex and reactive automations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: for cloudflare captcha, you have to perform a click in the checkbox. Just find a div containing the iframe and use the &lt;code&gt;.click()&lt;/code&gt; method. Automatic detection and click coming soon!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#-installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#-quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#-core-components&#34;&gt;Core Components&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#browser-interface&#34;&gt;Browser Interface&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#page-interface&#34;&gt;Page Interface&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#webelement-interface&#34;&gt;WebElement Interface&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#-advanced-features&#34;&gt;Advanced Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#event-system&#34;&gt;Event System&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#concurrent-scraping&#34;&gt;Concurrent Scraping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/#proxy-configuration&#34;&gt;Proxy Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî• Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pydoll-python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚ö° Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;See how simple it is to get started - no webdriver configuration needed!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;from pydoll.browser.chrome import Chrome&#xA;from pydoll.constants import By&#xA;&#xA;async def main():&#xA;    # Start the browser with no additional webdriver configuration!&#xA;    async with Chrome() as browser:&#xA;        await browser.start()&#xA;        page = await browser.get_page()&#xA;        &#xA;        # Navigate through captcha-protected sites without worry&#xA;        await page.go_to(&#39;https://example-with-cloudflare.com&#39;)&#xA;        button = await page.find_element(By.CSS_SELECTOR, &#39;button&#39;)&#xA;        await button.click()&#xA;&#xA;asyncio.run(main())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üéØ Core Components&lt;/h2&gt; &#xA;&lt;h3&gt;Browser Interface&lt;/h3&gt; &#xA;&lt;p&gt;Powerful interface for global browser control:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;async def browser_examples():&#xA;    async with Chrome() as browser:&#xA;        await browser.start()&#xA;        # Control multiple pages with incredible ease&#xA;        pages = [await browser.get_page() for _ in range(3)]&#xA;        &#xA;        # Advanced settings with a simple command&#xA;        await browser.set_window_maximized()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Page Interface&lt;/h3&gt; &#xA;&lt;p&gt;Individual page control with surgical precision:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;async def page_examples():&#xA;    page = await browser.get_page()&#xA;    &#xA;    # Smooth navigation, even on protected sites&#xA;    await page.go_to(&#39;https://site-with-recaptcha.com&#39;)&#xA;    &#xA;    # Capture perfect screenshots&#xA;    await page.get_screenshot(&#39;/screenshots/evidence.png&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebElement Interface&lt;/h3&gt; &#xA;&lt;p&gt;Interact with elements like a real user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;async def element_examples():&#xA;    # Natural and precise interactions&#xA;    input_field = await page.find_element(By.CSS_SELECTOR, &#39;input&#39;)&#xA;    await input_field.type_keys(&#39;Hello World&#39;)  # Realistic typing!&#xA;    &#xA;    # Intuitive chained operations&#xA;    dropdown = await page.find_element(By.CSS_SELECTOR, &#39;select&#39;)&#xA;    await dropdown.select_option(&#39;value&#39;)&#xA;&#xA;    # Realistic clicks with offset&#xA;    button = await page.find_element(By.CSS_SELECTOR, &#39;button&#39;)&#xA;    await button.click(x_offset=5, y_offset=10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Advanced Features&lt;/h2&gt; &#xA;&lt;h3&gt;Event System&lt;/h3&gt; &#xA;&lt;p&gt;Powerful event system for intelligent automation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydoll.events.page import PageEvents&#xA;&#xA;async def event_example():&#xA;    await page.enable_page_events()&#xA;    # React to events in real-time!&#xA;    await page.on(PageEvents.PAGE_LOADED, &#xA;                  lambda e: print(&#39;Page loaded successfully!&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Concurrent Scraping&lt;/h3&gt; &#xA;&lt;p&gt;Scrape multiple pages simultaneously with extraordinary performance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;async def concurrent_example():&#xA;    pages = [await browser.get_page() for _ in range(10)]&#xA;    # Parallel scraping with intelligent resource management&#xA;    results = await asyncio.gather(&#xA;        *(scrape_page(page) for page in pages)&#xA;    )&#xA;    # Just declare the scrape_page method and see the magic happens!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Proxy Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Robust proxy support, including authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;async def proxy_example():&#xA;    options = Options()&#xA;    # Private or public proxies, you choose!&#xA;    options.add_argument(&#39;--proxy-server=username:password@ip:port&#39;)&#xA;    &#xA;    async with Chrome(options=options) as browser:&#xA;        await browser.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For exploring all available methods and additional features, check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browser interface: &lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/pydoll/browser/base.py&#34;&gt;pydoll/browser/base.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Page interface: &lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/pydoll/browser/page.py&#34;&gt;pydoll/browser/page.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WebElement interface: &lt;a href=&#34;https://raw.githubusercontent.com/thalissonvs/pydoll/main/pydoll/element.py&#34;&gt;pydoll/element.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chrome options: &lt;a href=&#34;https://peter.sh/experiments/chromium-command-line-switches/&#34;&gt;Chromium Command Line Switches&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéâ Start Now!&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to use, open issues and contributing!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mfontanini/presenterm</title>
    <updated>2025-03-11T01:28:38Z</updated>
    <id>tag:github.com,2025-03-11:/mfontanini/presenterm</id>
    <link href="https://github.com/mfontanini/presenterm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A markdown terminal slideshow tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;presenterm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crates.io/crates/presenterm&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/presenterm&#34; alt=&#34;crates-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/presenterm&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/presenterm&#34; alt=&#34;brew-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.nixos.org/packages?size=1&amp;amp;show=presenterm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Packaged_for-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5&#34; alt=&#34;nix-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://archlinux.org/packages/extra/x86_64/presenterm/&#34;&gt;&lt;img src=&#34;https://img.shields.io/archlinux/v/extra/x86_64/presenterm&#34; alt=&#34;arch-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scoop.sh/#/apps?q=presenterm&amp;amp;id=a462290f824b50f180afbaa6d8c7c1e6e0952e3a&#34;&gt;&lt;img src=&#34;https://img.shields.io/scoop/v/presenterm&#34; alt=&#34;scoop-badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;presenterm&lt;/em&gt; lets you create presentations in markdown format and run them from your terminal, with support for image and animated gifs, highly customizable themes, code highlighting, exporting presentations into PDF format, and plenty of other features. This is how the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/examples/demo.md&#34;&gt;demo presentation&lt;/a&gt; looks like when running in the &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;kitty terminal&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/docs/src/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the rest of the example presentations in the &lt;a href=&#34;https://raw.githubusercontent.com/mfontanini/presenterm/master/examples&#34;&gt;examples directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://mfontanini.github.io/presenterm/&#34;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define your presentation in a single markdown file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/images.html&#34;&gt;Images and animated gifs&lt;/a&gt; on terminals like &lt;em&gt;kitty&lt;/em&gt;, &lt;em&gt;iterm2&lt;/em&gt;, and &lt;em&gt;wezterm&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/themes/introduction.html&#34;&gt;Customizeable themes&lt;/a&gt; including colors, margins, layout (left/center aligned content), footer for every slide, etc. Several &lt;a href=&#34;https://mfontanini.github.io/presenterm/features/themes/introduction.html#built-in-themes&#34;&gt;built-in themes&lt;/a&gt; can give your presentation the look you want without having to define your own.&lt;/li&gt; &#xA; &lt;li&gt;Code highlighting for a &lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/highlighting.html&#34;&gt;wide list of programming languages&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#font-sizes&#34;&gt;Font sizes&lt;/a&gt; for terminals that support them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/highlighting.html#selective-highlighting&#34;&gt;Selective/dynamic&lt;/a&gt; code highlighting that only highlights portions of code at a time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/layout.html&#34;&gt;Column layouts&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/mermaid.html&#34;&gt;mermaid graph rendering&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/latex.html&#34;&gt;&lt;em&gt;LaTeX&lt;/em&gt; and &lt;em&gt;typst&lt;/em&gt; formula rendering&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#introduction-slide&#34;&gt;Introduction slide&lt;/a&gt; that displays the presentation title and your name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#slide-titles&#34;&gt;Slide titles&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/code/execution.html&#34;&gt;Snippet execution&lt;/a&gt; for various programming languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/pdf-export.html&#34;&gt;Export presentations to PDF&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/commands.html#pauses&#34;&gt;Pause&lt;/a&gt; portions of your slides.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/configuration/settings.html#key-bindings&#34;&gt;Custom key bindings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/introduction.html#hot-reload&#34;&gt;Automatically reload your presentation&lt;/a&gt; every time it changes for a fast development loop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mfontanini.github.io/presenterm/features/speaker-notes.html&#34;&gt;Define speaker notes&lt;/a&gt; to aid you during presentations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://mfontanini.github.io/presenterm/&#34;&gt;introduction page&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;!-- links --&gt;</summary>
  </entry>
</feed>