<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-06T01:29:24Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iDvel/rime-ice</title>
    <updated>2023-04-06T01:29:24Z</updated>
    <id>tag:github.com,2023-04-06:/iDvel/rime-ice</id>
    <link href="https://github.com/iDvel/rime-ice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; &#xA;&lt;h2&gt;基本套路&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; &#xA; &lt;li&gt;主要功能 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tumuyan/rime-melt&#34;&gt;melt_eng&lt;/a&gt; 英文输入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dvel.me/posts/make-rime-en-better/&#34;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://cheonhyeong.com/Simplified/download.html&#34;&gt;两分输入法&lt;/a&gt; 拼字&lt;/li&gt; &#xA;   &lt;li&gt;简繁切换&lt;/li&gt; &#xA;   &lt;li&gt;日期、时间、星期&lt;/li&gt; &#xA;   &lt;li&gt;自整理的 Emoji&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BlindingDark/rime-lua-select-character&#34;&gt;以词定字&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&#34;&gt;长词优先&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;所有标点符号直接上屏，「/」模式改为「v」模式，「/」直接上屏&lt;/li&gt; &#xA;   &lt;li&gt;增加了许多拼音纠错&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;简体字表、词库 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&#34;&gt;《通用规范汉字表》的 8105 字字表&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&#34;&gt;华宇野风系统词库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/thunlp/THUOCL&#34;&gt;清华大学开源词库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/indiejoseph/eae09c673460aa0b56db&#34;&gt;《现代汉语常用词表》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/12102&#34;&gt;《现代汉语词典》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/1211&#34;&gt;《同义词词林》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/11407&#34;&gt;《新华成语大词典》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pinyin.sogou.com/dict/detail/index/4&#34;&gt;搜狗网络流行新词&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ai.tencent.com/ailab/nlp/en/download.html&#34;&gt;腾讯词向量&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;词库修订 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;详细介绍：&lt;a href=&#34;https://dvel.me/posts/rime-ice/&#34;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;长期维护词库&lt;/h2&gt; &#xA;&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; &#xA;&lt;p&gt;主要维护的词库：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sogou&lt;/code&gt; 搜狗流行词。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; &#xA; &lt;li&gt;Emoji&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; &#xA;&lt;p&gt;欢迎在词库方面提 issue，我会及时更新修正。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;p&gt;建议备份原先配置，清空配置目录。&lt;/p&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;p&gt;将仓库所有文件复制粘贴进去就好了。&lt;/p&gt; &#xA;&lt;h3&gt;东风破 &lt;a href=&#34;https://github.com/rime/plum&#34;&gt;plum&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;所有配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）只是简单地更新覆盖文件，适合更新词库时使用。&lt;/p&gt; &#xA;&lt;p&gt;后四个配方只是更新词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。&lt;/p&gt; &#xA;&lt;p&gt;如果更新后部署时报错，可能是增、删、改了文件名，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; &#xA;&lt;p&gt;安装或更新：全部文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：所有词库文件（包含下面三个）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：拼音词库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：英文词库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：opencc(emoji)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;h5&gt;配置出错&lt;/h5&gt; &#xA;&lt;p&gt;有时候 Rime 不会报错，而是自动加载默认配置。&lt;/p&gt; &#xA;&lt;p&gt;如果发现方案选单里是「朙月拼音、仓颉」之类的，那可能是配置有问题，Rime 自动加载了默认配置。&lt;/p&gt; &#xA;&lt;p&gt;检查一下修改过的地方，比如拼写、缩进是否正确，是否用了 Tab 缩进，或被编辑器自动转为了 Tab ……&lt;/p&gt; &#xA;&lt;h5&gt;快捷键&lt;/h5&gt; &#xA;&lt;p&gt;呼出方案选单默认为 Control+Shift+grave（grave 是 &lt;code&gt;`&lt;/code&gt; 反引号，Tab 上面那个）。&lt;/p&gt; &#xA;&lt;p&gt;小狼毫似乎不支持 Control+Shift 开头的快捷键，可在 &lt;code&gt;default.yaml&lt;/code&gt; 中修改。&lt;/p&gt; &#xA;&lt;h5&gt;Lua 脚本&lt;/h5&gt; &#xA;&lt;p&gt;Lua 中可配置的选项都提取出来了，不需要修改 Lua 文件。&lt;/p&gt; &#xA;&lt;p&gt;以词定字的快捷键在 &lt;code&gt;default.yaml&lt;/code&gt; 中设定，限制码长、长词优先、日期时间这些选项在方案文件中设定。&lt;/p&gt; &#xA;&lt;h5&gt;Shift 切换中英&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;default.custom.yaml&lt;/code&gt; 中修改 Shift 对应的选项，将 &lt;code&gt;noop&lt;/code&gt; 修改为 &lt;code&gt;commit_code&lt;/code&gt; 、&lt;code&gt;commit_text&lt;/code&gt; 或 &lt;code&gt;clear&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h5&gt;逗号句号翻页&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 &lt;code&gt;default.yaml&lt;/code&gt; 中解开句号逗号翻页的注释。&lt;/li&gt; &#xA; &lt;li&gt;在 &lt;code&gt;rime_ice.schema.yaml&lt;/code&gt; 中注释掉 &lt;code&gt;url_2&lt;/code&gt;。（因为这个选项会覆盖掉句号的行为）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;自定义短语&lt;/h5&gt; &#xA;&lt;p&gt;在 &lt;code&gt;custom_phrase.txt&lt;/code&gt; 中添加，建议清空，换成自己的习惯。&lt;/p&gt; &#xA;&lt;p&gt;双拼需要额外手动创建 &lt;code&gt;custom_phrase_double.txt&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;感谢 ❤️&lt;/h2&gt; &#xA;&lt;p&gt;上述用到的词库，及 &lt;a href=&#34;https://github.com/Huandeep&#34;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; &#xA;&lt;p&gt;上述提到的方案及功能参考。&lt;/p&gt; &#xA;&lt;p&gt;搜狗转 Rime：&lt;a href=&#34;https://github.com/lewangdev/scel2txt&#34;&gt;lewangdev/scel2txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;大量参考&lt;a href=&#34;http://www.jiaodui.com/bbs/&#34;&gt;校对网&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jb.gg/OpenSourceSupport&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;赞助 ☕&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&#34; alt=&#34;请 Dvel 吃个煎饼馃子&#34; width=&#34;600&#34;&gt;</summary>
  </entry>
  <entry>
    <title>imClumsyPanda/langchain-ChatGLM</title>
    <updated>2023-04-06T01:29:24Z</updated>
    <id>tag:github.com,2023-04-06:/imClumsyPanda/langchain-ChatGLM</id>
    <link href="https://github.com/imClumsyPanda/langchain-ChatGLM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;langchain-ChatGLM, local knowledge based ChatGLM with langchain ｜ 基于本地知识的 ChatGLM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;基于本地知识的 ChatGLM 应用实现&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;🌍 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/README_en.md&#34;&gt;&lt;em&gt;READ THIS IN ENGLISH&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🤖️ 一种利用 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B&#34;&gt;ChatGLM-6B&lt;/a&gt; + &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;langchain&lt;/a&gt; 实现的基于本地知识的 ChatGLM 应用。&lt;/p&gt; &#xA;&lt;p&gt;💡 受 &lt;a href=&#34;https://github.com/GanymedeNil&#34;&gt;GanymedeNil&lt;/a&gt; 的项目 &lt;a href=&#34;https://github.com/GanymedeNil/document.ai&#34;&gt;document.ai&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/AlexZhangji&#34;&gt;AlexZhangji&lt;/a&gt; 创建的 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B/pull/216&#34;&gt;ChatGLM-6B Pull Request&lt;/a&gt; 启发，建立了全部基于开源模型实现的本地知识问答应用。&lt;/p&gt; &#xA;&lt;p&gt;✅ 本项目中 Embedding 选用的是 &lt;a href=&#34;https://huggingface.co/GanymedeNil/text2vec-large-chinese/tree/main&#34;&gt;GanymedeNil/text2vec-large-chinese&lt;/a&gt;，LLM 选用的是 &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B&#34;&gt;ChatGLM-6B&lt;/a&gt;。依托上述模型，本项目可实现全部使用&lt;strong&gt;开源&lt;/strong&gt;模型&lt;strong&gt;离线私有部署&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;使用方式&lt;/h2&gt; &#xA;&lt;h3&gt;1. 安装 python 依赖包&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;pip install -r requirements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注：使用 langchain.document_loaders.UnstructuredFileLoader 进行非结构化文件接入时，可能需要依据文档进行其他依赖包的安装，请参考 &lt;a href=&#34;https://python.langchain.com/en/latest/modules/indexes/document_loaders/examples/unstructured_file.html&#34;&gt;langchain 文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. 执行 &lt;a href=&#34;https://raw.githubusercontent.com/imClumsyPanda/langchain-ChatGLM/master/knowledge_based_chatglm.py&#34;&gt;knowledge_based_chatglm.py&lt;/a&gt; 脚本&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;python knowledge_based_chatglm.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DEMO&lt;/h2&gt; &#xA;&lt;p&gt;以问题&lt;code&gt;chatglm-6b 的局限性具体体现在哪里，如何实现改进&lt;/code&gt;为例&lt;/p&gt; &#xA;&lt;p&gt;未使用 langchain 接入本地文档时：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ChatGLM-6B 是一个基于 GPT-3 的聊天机器人,它的局限性主要体现在以下几个方面:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;语言模型的精度:GPT-3 是一种大型的语言模型,它的精度比较高,但是仍然有一些局限性。例如,它可能无法准确地理解某些方言、口音或者复杂的句子结构。&lt;/li&gt; &#xA;  &lt;li&gt;知识图谱的完整性:GPT-3 可以生成一些知识图谱,但是其完整性和准确性可能不够。例如,它可能无法准确地理解某些领域的专业知识和术语。&lt;/li&gt; &#xA;  &lt;li&gt;对话生成的连贯性:GPT-3 可以生成一些连贯的对话,但是其生成的对话可能不够自然。例如,它可能会生成一些虚假的、不连贯的对话或者误解用户的意图。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;为了改进 ChatGLM-6B,可以考虑以下几个方面:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;提高语言模型的精度:可以通过增加训练数据、使用更好的语言模型架构、优化模型训练过程等方式来提高语言模型的精度。&lt;/li&gt; &#xA;  &lt;li&gt;增强知识图谱的完整性:可以通过增加知识图谱的维度、使用更好的知识图谱构建方法、优化知识图谱的匹配算法等方式来增强知识图谱的完整性。&lt;/li&gt; &#xA;  &lt;li&gt;提高对话生成的连贯性:可以通过增加对话生成模型的上下文信息、使用更好的上下文信息提取方法、优化对话生成模型的算法等方式来提高对话生成的连贯性。&lt;/li&gt; &#xA;  &lt;li&gt;引入更多的人类反馈:人类反馈可以帮助 ChatGLM-6B 更好地理解用户的意图和需求,从而提高对话生成的质量和准确性。可以通过引入更多的人类客服、使用人类反馈收集器等方式来引入更多的人类反馈。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;使用 langchain 接入 ChatGLM-6B 项目的 README.md 文件后 ChatGLM 的回答：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ChatGLM-6B 是一个基于深度学习的自然语言处理模型,它在回答问题方面表现出色。但是,它也有一些局限性,具体如下:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;语言理解有限:ChatGLM-6B 只学习了中文自然语言,对于其他语言可能会存在理解上的局限性。&lt;/li&gt; &#xA;  &lt;li&gt;知识储备不足:ChatGLM-6B 的训练数据集只包含了中文语料,因此它可能无法回答一些非中文的问题或者某些特定领域的问题。&lt;/li&gt; &#xA;  &lt;li&gt;数据量有限:ChatGLM-6B 的训练数据集只有几百万条记录,因此它可能无法回答一些非常具体或者复杂的问题。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;为了改进 ChatGLM-6B,可以考虑以下几个方面:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;学习更多的语言知识:可以学习其他语言的自然语言处理技术,扩大语言理解的范围。&lt;/li&gt; &#xA;  &lt;li&gt;扩大知识储备:可以收集更多的中文语料,或者使用其他语言的数据集来扩充知识储备。&lt;/li&gt; &#xA;  &lt;li&gt;增加数据量:可以使用更大的数据集来训练 ChatGLM-6B,提高模型的表现。&lt;/li&gt; &#xA;  &lt;li&gt;引入更多的评估指标:可以引入更多的评估指标来评估模型的表现,从而发现 ChatGLM-6B 存在的不足和局限性。&lt;/li&gt; &#xA;  &lt;li&gt;改进模型架构:可以改进 ChatGLM-6B 的模型架构,提高模型的性能和表现。例如,可以使用更大的神经网络或者改进的卷积神经网络结构。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;路线图&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 实现 langchain + ChatGLM-6B 本地知识应用&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 基于 langchain 实现非结构化文件接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 基于 langchain 实现更多类型本地知识文件接入&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 利用 gradio/streamlit 实现 web ui DEMO&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 利用 fastapi 实现 API 部署方式，并实现调用 API 的 web ui DEMO&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yoheinakajima/babyagi</title>
    <updated>2023-04-06T01:29:24Z</updated>
    <id>tag:github.com,2023-04-06:/yoheinakajima/babyagi</id>
    <link href="https://github.com/yoheinakajima/babyagi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;babyagi&lt;/h1&gt; &#xA;&lt;h1&gt;Objective&lt;/h1&gt; &#xA;&lt;p&gt;This Python script is an example of an AI-powered task management system. The system uses OpenAI and Pinecone APIs to create, prioritize, and execute tasks. The main idea behind this system is that it creates tasks based on the result of previous tasks and a predefined objective. The script then uses OpenAI&#39;s natural language processing (NLP) capabilities to create new tasks based on the objective, and Pinecone to store and retrieve task results for context. This is a paired-down version of the original &lt;a href=&#34;https://twitter.com/yoheinakajima/status/1640934493489070080?s=20&#34;&gt;Task-Driven Autonomous Agent&lt;/a&gt; (Mar 28, 2023).&lt;/p&gt; &#xA;&lt;p&gt;This README will cover the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How the script works&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to use the script&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Warning about running the script continuously&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How It Works&lt;/h1&gt; &#xA;&lt;p&gt;The script works by running an infinite loop that does the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pulls the first task from the task list.&lt;/li&gt; &#xA; &lt;li&gt;Sends the task to the execution agent, which uses OpenAI&#39;s API to complete the task based on the context.&lt;/li&gt; &#xA; &lt;li&gt;Enriches the result and stores it in Pinecone.&lt;/li&gt; &#xA; &lt;li&gt;Creates new tasks and reprioritizes the task list based on the objective and the result of the previous task. The execution_agent() function is where the OpenAI API is used. It takes two parameters: the objective and the task. It then sends a prompt to OpenAI&#39;s API, which returns the result of the task. The prompt consists of a description of the AI system&#39;s task, the objective, and the task itself. The result is then returned as a string.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The task_creation_agent() function is where OpenAI&#39;s API is used to create new tasks based on the objective and the result of the previous task. The function takes four parameters: the objective, the result of the previous task, the task description, and the current task list. It then sends a prompt to OpenAI&#39;s API, which returns a list of new tasks as strings. The function then returns the new tasks as a list of dictionaries, where each dictionary contains the name of the task.&lt;/p&gt; &#xA;&lt;p&gt;The prioritization_agent() function is where OpenAI&#39;s API is used to reprioritize the task list. The function takes one parameter, the ID of the current task. It sends a prompt to OpenAI&#39;s API, which returns the reprioritized task list as a numbered list.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the script uses Pinecone to store and retrieve task results for context. The script creates a Pinecone index based on the table name specified in YOUR_TABLE_NAME variable. Pinecone is then used to store the results of the task in the index, along with the task name and any additional metadata.&lt;/p&gt; &#xA;&lt;h1&gt;How to Use&lt;/h1&gt; &#xA;&lt;p&gt;To use the script, you will need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the required packages: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the .env.example file to .env: &lt;code&gt;cp .env.example .env&lt;/code&gt;. This is where you will set the following variables.&lt;/li&gt; &#xA; &lt;li&gt;Set your OpenAI and Pinecone API keys in the OPENAI_API_KEY and PINECONE_API_KEY variables.&lt;/li&gt; &#xA; &lt;li&gt;Set the Pinecone environment in the PINECONE_ENVIRONMENT variable.&lt;/li&gt; &#xA; &lt;li&gt;Set the name of the table where the task results will be stored in the TABLE_NAME variable.&lt;/li&gt; &#xA; &lt;li&gt;Set the objective of the task management system in the OBJECTIVE variable. Alternatively you can pass it to the script as a quote argument.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./babyagi.py [&#34;&amp;lt;objective&amp;gt;&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Set the first task of the system in the FIRST_TASK variable.&lt;/li&gt; &#xA; &lt;li&gt;Run the script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Warning&lt;/h1&gt; &#xA;&lt;p&gt;This script is designed to be run continuously as part of a task management system. Running this script continuously can result in high API usage, so please use it responsibly. Additionally, the script requires the OpenAI and Pinecone APIs to be set up correctly, so make sure you have set up the APIs before running the script.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Quick Update (4/5): I know there are a growing number of PRs, appreciate your patience - as I am both new to GitHub/OpenSource, and did not plan my time availability accordingly this week. Re:direction, I&#39;ve been torn on keeping it simple vs expanding - currently leaning towards keeping a core Baby AGI simple, and using this as a platform to support and promote different approaches to expanding this (eg. BabyAGIxLangchain as one direction). I believe there are various opinionated approaches that are worth exploring, and I see value in having a central place to compare and discuss. More updates coming shortly.&lt;/p&gt; &#xA;&lt;p&gt;Very appreciative of the PRs, which I&#39;ve started pulling! I am new to GitHub and open source, so please be patient as I learn to manage this project properly. I run a VC firm by day, so I will generally be checking PRs and issues at night after I get my kids down - which may not be every night. Open to the idea of bringing in support, will be updating this section soon (expectations, visions, etc). Talking to lots of people and learning - hang tight for updates!&lt;/p&gt; &#xA;&lt;h1&gt;Backstory&lt;/h1&gt; &#xA;&lt;p&gt;BabyAGI is a paired-down version of the original &lt;a href=&#34;https://twitter.com/yoheinakajima/status/1640934493489070080?s=20&#34;&gt;Task-Driven Autonomous Agent&lt;/a&gt; (Mar 28, 2023) shared on Twitter. This version is down to 140 lines: 13 comments, 22 blank, 105 code. The name of the repo came up in the reaction to the original autonomous agent - the author does not mean to imply that this is AGI.&lt;/p&gt; &#xA;&lt;p&gt;Made with love by &lt;a href=&#34;https://twitter.com/yoheinakajima&#34;&gt;@yoheinakajima&lt;/a&gt;, who happens to be a VC (would love to see what you&#39;re building!)&lt;/p&gt;</summary>
  </entry>
</feed>