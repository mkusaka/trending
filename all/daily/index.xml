<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-05T01:27:47Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>asg017/sqlite-vec</title>
    <updated>2024-08-05T01:27:47Z</updated>
    <id>tag:github.com,2024-08-05:/asg017/sqlite-vec</id>
    <link href="https://github.com/asg017/sqlite-vec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A vector search SQLite extension that runs anywhere!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;sqlite-vec&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Ve7WeCJFXk&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/VCtQ8cGhUs&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An extremely small, &#34;fast enough&#34; vector search SQLite extension that runs anywhere! A successor to &lt;a href=&#34;https://github.com/asg017/sqlite-vss&#34;&gt;&lt;code&gt;sqlite-vss&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- deno-fmt-ignore-start --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] &lt;em&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; is a pre-v1, so expect breaking changes!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- deno-fmt-ignore-end --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Store and query float, int8, and binary vectors in &lt;code&gt;vec0&lt;/code&gt; virtual tables&lt;/li&gt; &#xA; &lt;li&gt;Written in pure C, no dependencies, runs anywhere SQLite runs (Linux/MacOS/Windows, in the browser with WASM, Raspberry Pis, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Pre-filter vectors with &lt;code&gt;rowid IN (...)&lt;/code&gt; subqueries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hacks.mozilla.org/2024/06/sponsoring-sqlite-vec-to-enable-more-powerful-local-ai-applications/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/logos/mozilla.dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/logos/mozilla.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Mozilla Builders logo&#34; width=&#34;400&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt; &lt;code&gt;sqlite-vec&lt;/code&gt; is a &lt;a href=&#34;https://hacks.mozilla.org/2024/06/sponsoring-sqlite-vec-to-enable-more-powerful-local-ai-applications/&#34;&gt;Mozilla Builders project&lt;/a&gt;, with additional sponsorship from &lt;a href=&#34;https://fly.io/&#34;&gt;&lt;img width=&#34;14px&#34; src=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/flyio.small.ico&#34;&gt; Fly.io &lt;/a&gt;, &lt;a href=&#34;https://turso.tech/&#34;&gt;&lt;img width=&#34;14px&#34; src=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/turso.small.ico&#34;&gt; Turso&lt;/a&gt;, and &lt;a href=&#34;https://sqlitecloud.io/&#34;&gt;&lt;img width=&#34;14px&#34; src=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/sqlitecloud.small.svg?sanitize=true&#34;&gt; SQLite Cloud&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/#sponsors&#34;&gt;the Sponsors section&lt;/a&gt; for more details. &lt;/i&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/installing.html&#34;&gt;Installing &lt;code&gt;sqlite-vec&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Install&lt;/th&gt; &#xA;   &lt;th&gt;More Info&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install sqlite-vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/python.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/sqlite-vec/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/sqlite-vec.svg?color=blue&amp;amp;logo=python&amp;amp;logoColor=white&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm install sqlite-vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/nodejs.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Node.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/sqlite-vec&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/sqlite-vec.svg?color=green&amp;amp;logo=nodedotjs&amp;amp;logoColor=white&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gem install sqlite-vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/ruby.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/gem/v/sqlite-vec?color=red&amp;amp;logo=rubygems&amp;amp;logoColor=white&#34; alt=&#34;Gem&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;go get -u github.com/asg017/sqlite-vec/bindings/go&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/go.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Go&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/asg017/asg017/sqlite-vec-go-bindings/cgo&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/asg017/sqlite-vec-go-bindings/cgo.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cargo add sqlite-vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/rust.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://crates.io/crates/sqlite-vec&#34;&gt;&lt;img src=&#34;https://img.shields.io/crates/v/sqlite-vec?logo=rust&#34; alt=&#34;Crates.io&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Datasette&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;datasette install datasette-sqlite-vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/datasette.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with Datasette&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://datasette.io/plugins/datasette-sqlite-vec&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/datasette-sqlite-vec.svg?color=B6B6D9&amp;amp;label=Datasette+plugin&amp;amp;logoColor=white&amp;amp;logo=python&#34; alt=&#34;Datasette&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlite-utils&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlite-utils install sqlite-utils-sqlite-vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alexgarcia.xyz/sqlite-vec/sqlite-utils.html&#34;&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; with sqlite-utils&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://datasette.io/plugins/datasette-sqlite-vec&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/sqlite-utils-sqlite-vec.svg?color=B6B6D9&amp;amp;label=sqlite-utils+plugin&amp;amp;logoColor=white&amp;amp;logo=python&#34; alt=&#34;sqlite-utils&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github Release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/asg017/sqlite-vec?color=lightgrey&amp;amp;include_prereleases&amp;amp;label=Github+release&amp;amp;logo=github&#34; alt=&#34;GitHub tag (latest SemVer pre-release)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sample usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;.load ./vec0&#xA;&#xA;create virtual table vec_examples using vec0(&#xA;  sample_embedding float[8]&#xA;);&#xA;&#xA;-- vectors can be provided as JSON or in a compact binary format&#xA;insert into vec_examples(rowid, sample_embedding)&#xA;  values&#xA;    (1, &#39;[-0.200, 0.250, 0.341, -0.211, 0.645, 0.935, -0.316, -0.924]&#39;),&#xA;    (2, &#39;[0.443, -0.501, 0.355, -0.771, 0.707, -0.708, -0.185, 0.362]&#39;),&#xA;    (3, &#39;[0.716, -0.927, 0.134, 0.052, -0.669, 0.793, -0.634, -0.162]&#39;),&#xA;    (4, &#39;[-0.710, 0.330, 0.656, 0.041, -0.990, 0.726, 0.385, -0.958]&#39;);&#xA;&#xA;&#xA;-- KNN style query&#xA;select&#xA;  rowid,&#xA;  distance&#xA;from vec_examples&#xA;where sample_embedding match &#39;[0.890, 0.544, 0.825, 0.961, 0.358, 0.0196, 0.521, 0.175]&#39;&#xA;order by distance&#xA;limit 2;&#xA;/*&#xA;┌───────┬──────────────────┐&#xA;│ rowid │     distance     │&#xA;├───────┼──────────────────┤&#xA;│ 2     │ 2.38687372207642 │&#xA;│ 1     │ 2.38978505134583 │&#xA;└───────┴──────────────────┘&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Development of &lt;code&gt;sqlite-vec&lt;/code&gt; is supported by multiple generous sponsors! Mozilla is the main sponsor through the new Builders project.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hacks.mozilla.org/2024/06/sponsoring-sqlite-vec-to-enable-more-powerful-local-ai-applications/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/logos/mozilla.dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/logos/mozilla.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Mozilla Builders logo&#34; width=&#34;400&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sqlite-vec&lt;/code&gt; is also sponsored by the following companies:&lt;/p&gt; &#xA;&lt;a href=&#34;https://fly.io/&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/logos/flyio.dark.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/logos/flyio.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Fly.io logo&#34; src=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/flyio.svg?sanitize=true&#34; width=&#34;32%&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://turso.tech/&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/logos/turso.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/logos/turso.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Turso logo&#34; src=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/turso.svg?sanitize=true&#34; width=&#34;32%&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://sqlitecloud.io/&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./.github/logos/sqlitecloud.dark.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./.github/logos/sqlitecloud.svg&#34;&gt; &#xA;  &lt;img alt=&#34;SQLite Cloud logo&#34; src=&#34;https://raw.githubusercontent.com/asg017/sqlite-vec/main/.github/logos/flyio.svg?sanitize=true&#34; width=&#34;32%&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;p&gt;As well as multiple individual supporters on &lt;a href=&#34;https://github.com/sponsors/asg017/&#34;&gt;Github sponsors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If your company interested in sponsoring &lt;code&gt;sqlite-vec&lt;/code&gt; development, send me an email to get more info: &lt;a href=&#34;https://alexgarcia.xyz&#34;&gt;https://alexgarcia.xyz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asg017/sqlite-ecosystem&#34;&gt;&lt;strong&gt;&lt;code&gt;sqlite-ecosystem&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, Maybe more 3rd party SQLite extensions I&#39;ve developed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asg017/sqlite-rembed&#34;&gt;&lt;strong&gt;&lt;code&gt;sqlite-rembed&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, Generate text embeddings from remote APIs like OpenAI/Nomic/Ollama, meant for testing and SQL scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asg017/sqlite-lembed&#34;&gt;&lt;strong&gt;&lt;code&gt;sqlite-lembed&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, Generate text embeddings locally from embedding models in the &lt;code&gt;.gguf&lt;/code&gt; format&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hufrea/byedpi</title>
    <updated>2024-08-05T01:27:47Z</updated>
    <id>tag:github.com,2024-08-05:/hufrea/byedpi</id>
    <link href="https://github.com/hufrea/byedpi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bypass DPI&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Implementation of some DPI bypass methods. The program is a local SOCKS proxy server.&lt;/p&gt; &#xA;&lt;p&gt;Usage example: ciadpi --disorder 1 --auto=torst --tlsrec 1+s ciadpi --fake -1 --ttl 8&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Описание аргументов&lt;/h3&gt; &#xA;&lt;p&gt;-i, --ip &#xA; &lt;ip&gt;&#xA;   Прослушиваемый IP, по умолчанию 0.0.0.0&#xA; &lt;/ip&gt;&lt;/p&gt; &#xA;&lt;p&gt;-p, --port &#xA; &lt;num&gt;&#xA;   Прослушиваемый порт, по умолчанию 1080&#xA; &lt;/num&gt;&lt;/p&gt; &#xA;&lt;p&gt;-c, --max-conn &#xA; &lt;count&gt;&#xA;   Максимальное количество клиентских подключений, по умолчанию 512&#xA; &lt;/count&gt;&lt;/p&gt; &#xA;&lt;p&gt;-I --conn-ip &#xA; &lt;ip&gt;&#xA;   Адрес, к которому будут привязаны исходящие соединения, по умолчанию :: При указании IPv4 адреса запросы на IPv6 будут отклоняться&#xA; &lt;/ip&gt;&lt;/p&gt; &#xA;&lt;p&gt;-b, --buf-size &#xA; &lt;size&gt;&#xA;   Максимальный размер данных, получаемых и отправляемых за один вызов recv/send Размер указывается в байтах, по умолчанию равен 16384&#xA; &lt;/size&gt;&lt;/p&gt; &#xA;&lt;p&gt;-g, --def-ttl &#xA; &lt;num&gt;&#xA;   Значение TTL для всех исходящий соединений Может быть полезен для обхода обнаружения нестандартного/уменьшенного TTL&#xA; &lt;/num&gt;&lt;/p&gt; &#xA;&lt;p&gt;-N, --no-domain Отбрасывать запросы, если в качестве адреса указан домен Т.к. резолвинг выполняется синхронно, то он может замедлить или даже заморозить работу&lt;/p&gt; &#xA;&lt;p&gt;-U, --no-udp Не проксировать UDP&lt;/p&gt; &#xA;&lt;p&gt;-F, --tfo Включает TCP Fast Open Если сервер его поддерживает, то первый пакет будет отправлен сразу вместе с SYN Поддерживается только в Linux (4.11+)&lt;/p&gt; &#xA;&lt;p&gt;-A, --auto[=t,r,c,s,a,n] Автоматический режим Если произошло событие, похожее на блокировку или поломку, то будут применены параметры обхода, следующие за данной опцией Возможные события: torst : Вышло время ожидания или сервер сбросил подключение после первого запроса redirect: HTTP Redirect с Location, домен которого не совпадает с исходящим cl_err : HTTP ответ, код которого равен 40x, но не 429 sid_inv : session_id в TLS ServerHello и ClientHello не совпадают alert : TLS Error Alert в ответе none : Предыдущая группа пропущена, например из-за ограничения по доменам или протоколам&lt;/p&gt; &#xA;&lt;p&gt;-u, --cache-ttl &#xA; &lt;sec&gt;&#xA;   Время жизни значения в кеше, по умолчанию 100800 (28 часов)&#xA; &lt;/sec&gt;&lt;/p&gt; &#xA;&lt;p&gt;-T, --timeout &#xA; &lt;sec&gt;&#xA;   Таймаут ожидания первого ответа от сервера в секундах В Linux переводится в миллисекунды, поэтому можно указать дробное число&#xA; &lt;/sec&gt;&lt;/p&gt; &#xA;&lt;p&gt;-K, --proto &amp;lt;t,h,u&amp;gt; Белый список протоколов: tls,http,udp&lt;/p&gt; &#xA;&lt;p&gt;-H, --hosts &amp;lt;file|:string&amp;gt; Ограничить область действия параметров списком доменов Домены должны быть разделены новой строкой или пробелом&lt;/p&gt; &#xA;&lt;p&gt;-V, --pf &amp;lt;port[-portr]&amp;gt; Ограничитель по портам&lt;/p&gt; &#xA;&lt;p&gt;-s, --split &amp;lt;n[+s]&amp;gt; Разбить запрос по указанному смещению После числа можно добавить флаг: +s: добавить смещение SNI +h: добавить смещение Host Можно указывать несколько раз, чтобы разбить запрос по нескольким позициям При указании отрицательного значения к нему прибавляется размер пакета&lt;/p&gt; &#xA;&lt;p&gt;-d, --disorder &amp;lt;n[+s]&amp;gt; Подобен --split, но части отправляются в обратном порядке ! Поведение в Windows отлично: сначала отправляется лишь часть, но затем целый запрос&lt;/p&gt; &#xA;&lt;p&gt;-o, --oob &amp;lt;n[+s]&amp;gt; Подобен --split, но после части отсылается один или несколько байт OOB данных&lt;/p&gt; &#xA;&lt;p&gt;-f, --fake &amp;lt;n[+s]&amp;gt; Подобен --disorder, только перед отправкой первого куска отправляется часть поддельного Количество байт отправляемого из фейка равно рамеру разбиваемой части&lt;/p&gt; &#xA;&lt;p&gt;-t, --ttl &#xA; &lt;num&gt;&#xA;   TTL для поддельного пакета, по умолчанию 8 Необходимо подобрать такое значение, чтобы пакет не дошел до сервера, но был обработан DPI&#xA; &lt;/num&gt;&lt;/p&gt; &#xA;&lt;p&gt;-k, --ip-opt[=file|:str] Установить опции для фейкового IP пакета Существенно снизит вероятность, что пакет дойдет до сервера Стоит учесть, что до DPI он также может не дойти В Windows поддержка может быть отключена&lt;/p&gt; &#xA;&lt;p&gt;-S, --md5sig Установить опцию TCP MD5 Signature для фейкового пакета Большинство серверов (в основном на Linux) отбрасывают пакеты с данной опцией Поддерживается только в Linux, может быть выключен в некоторых сборках ядра (&amp;lt; 3.9, Android)&lt;/p&gt; &#xA;&lt;p&gt;-l, --fake-data &amp;lt;file|:str&amp;gt; Указать свои поддельные пакеты, вместо дефолтных&lt;/p&gt; &#xA;&lt;p&gt;-e, --oob-data &amp;lt;file|:str&amp;gt; Данные, отсылаемые вне основного потока, по умолчанию один байт &#39;a&#39; ! При размере более одного байта может работать нестабильно&lt;/p&gt; &#xA;&lt;p&gt;-n, --tls-sni &#xA; &lt;str&gt;&#xA;   Изменить SNI в fake пакете на указанный&#xA; &lt;/str&gt;&lt;/p&gt; &#xA;&lt;p&gt;-M, --mod-http &amp;lt;h[,d,r]&amp;gt; Всякие манипуляции с HTTP пакетом, можно комбинировать hcsmix: &#34;Host: name&#34; -&amp;gt; &#34;hOsT: name&#34; dcsmix: &#34;Host: name&#34; -&amp;gt; &#34;Host: NaMe&#34; rmspace: &#34;Host: name&#34; -&amp;gt; &#34;Host:name\t&#34;&lt;/p&gt; &#xA;&lt;p&gt;-r, --tlsrec &amp;lt;n[+s]&amp;gt; Разделить ClientHello на отдельные записи по указанному смещению Можно указывать несколько раз&lt;/p&gt; &#xA;&lt;p&gt;-a, --udp-fake &#xA; &lt;count&gt;&#xA;   Количество фейковых UDP пакетов&#xA; &lt;/count&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Подробнее&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--split&lt;br&gt; Разбивает запрос на части. Пример на запросе в 30 байт:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --split 3 --split 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 1-3, 3-7, 7-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--disorder&lt;br&gt; Часть, попадающая под disorder, будет отправлена с TTL=1, т.е. фактически не будет никуда доставлена. ОС узнает об этом лишь после отсылки последующей части, когда сервер сообщит о потере с помощью SACK. Системе придется отослать предыдущий пакет заново, тем самым нарушив обычный порядок.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --disorder 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 7-30, 1-7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Вышесказанное распространяется только на Linux. В Windows выполняется полная ретрансмиссия:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --disorder 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 7-30, 1-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Поэтому желательно использовать ещё и split:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --split 7 --disorder 23&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 1-7, 23-30, 7-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;На практике оптимально использовать:&lt;br&gt; Linux: --disorder 1&lt;br&gt; Windows: --split 1+s --disorder 3+s&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--fake&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --fake 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 1-7 фейк, 7-30 оригинал, 1-7 оригинал&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Данные в первой части запроса заменяются на поддельные.&lt;br&gt; Эта часть должна пройти через DPI, но не дойти до сервера. А раз часть не дойдет, то ОС отправит ее снова, тем самым изменив порядок подобно disorder. Для того, чтобы фейк не дошел до сервера, есть опции ttl, ip-opt и md5sig.&lt;/p&gt; &#xA;&lt;p&gt;TTL необходимо подбирать такой, чтобы пакет прошел через все DPI, но не дошел до сервера.&lt;br&gt; Для Linux есть md5sig. Он устанавливает опцию TCP MD5 Signature, что не дает пакету быть принятым многими серверами. К сожалению, md5sig работает не во всех сборках.&lt;/p&gt; &#xA;&lt;p&gt;Для Windows есть еще один способ избежать обработки фейка сервером. Это комбинирование fake с disorder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --disorder 1 --fake 7&lt;/li&gt; &#xA; &lt;li&gt;Порядок отправки: 2-7 фейк, 7-30 оригинал, 1-30 оригинал&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Если поддельный пакет и дойдет до сервера, то он будет перезаписан из-за полной ретрансмисси.&lt;/p&gt; &#xA;&lt;p&gt;На практике оптимально использовать:&lt;br&gt; Linux: --fake -1 --md5sig&lt;br&gt; Windows: --disorder 1 --fake -1&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--oob&lt;br&gt; TCP может отсылать данные вне основного потока, используя флаг URG, однако лишь 1 байт в пакете. Все данные в таком пакете будут доставлены приложению, кроме последнего байта, который и является внеканальным:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Параметры: --oob 3&lt;/li&gt; &#xA; &lt;li&gt;Отправка: 1-4 с флагом URG (1-3 данные запроса + 4-й байт, который будет усечен), 3-30&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Этот байт желательно помещать в SNI: --oob 3+s&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--tlsrec&lt;br&gt; Одну TLS запись можно разбить на несколько, немного переделав заголовок. На месте разбиения вставляется новый заголовок, увеличивая размер запроса на 5 байт.&lt;br&gt; Этот заголовок можно поместить в середину SNI, не давая возможность DPI правильно его прочитать: --tlsrec 3+s&lt;/p&gt; &#xA;&lt;p&gt;Хоть tlsrec и oob запутывают DPI, они также могут запутать всякие мидлбоксы, которые не поддерживают полноценный стек TCP/TLS.&lt;br&gt; Из-за этого их следует использовать вместе с --auto:&lt;br&gt; --auto=torst --timeout 3 --tlsrec 3+s&lt;br&gt; В примере tlsrec будет применяться лишь в случаях, когда сброшено подключение или вышел таймаут, т.е. когда, скорее всего, произошла блокировка.&lt;br&gt; Можно наоборот - отменять tlsrec, если сервер сбрасывает подключение или откидывает пакет:&lt;br&gt; --tlsrec 3+s --auto=torst --timeout 3&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;--auto, --hosts&lt;br&gt; Параметр auto делит опции на группы. Для каждого запроса они обходятся слева на право. Сначала проверяется триггер, указанный в auto, затем proto и hosts.&lt;br&gt; Можно указывать несколько групп опций, раделяя их данным параметром. Параметры, которые можно вынести в отдельную группу:&lt;br&gt; proto, hosts, pf, split, disorder, oob, fake, ttl, ip-opt, md5sig, fake-data, mod-http, tlsrec, udp-fake&lt;/p&gt; &#xA;&lt;p&gt;Примеры:&lt;br&gt; --fake -1 --ttl 10 --auto=alert,sid_inv --fake -1 --ttl 5&lt;br&gt; По умолчанию использовать fake с ttl=10, в случае ошибки использовать fake с ttl=5&lt;/p&gt; &#xA;&lt;p&gt;--hosts list.txt --disorder 3 --auto=none&lt;br&gt; Применять запутывание только для доменов из list.txt&lt;/p&gt; &#xA;&lt;p&gt;--hosts list.txt --auto=none --disorder 3&lt;br&gt; Не применять запутывание для доменов из list.txt&lt;/p&gt; &#xA;&lt;p&gt;--auto=torst --hosts list.txt --disorder 3&lt;br&gt; По умолчанию ничего не делать, использовать disorder при условии, что произошла блокировка и домен входит в list.txt.&lt;/p&gt; &#xA;&lt;p&gt;--proto=http,tls --disorder 3 --auto=none&lt;br&gt; Запутывать только HTTP и TLS&lt;/p&gt; &#xA;&lt;p&gt;--proto=http --fake -1 --fake-data=&#39;:GET /...&#39; --auto=none --fake -1&lt;br&gt; Переопределить фейковый пакет для HTTP&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Сборка&lt;/h3&gt; &#xA;&lt;p&gt;Для сборки понадобится: make, gcc/clang для Linux, mingw для Windows&lt;/p&gt; &#xA;&lt;p&gt;Linux: make&lt;br&gt; Windows: make windows CC=x86_64-w64-mingw32-gcc&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Дополнительная информация о DPI, источники идей&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bol-van/zapret/raw/master/docs/readme.txt&#34;&gt;https://github.com/bol-van/zapret/blob/master/docs/readme.txt&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&#34;&gt;https://geneva.cs.umd.edu/papers/geneva_ccs19.pdf&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://habr.com/ru/post/335436&#34;&gt;https://habr.com/ru/post/335436&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xvzc/SpoofDPI</title>
    <updated>2024-08-05T01:27:47Z</updated>
    <id>tag:github.com,2024-08-05:/xvzc/SpoofDPI</id>
    <link href="https://github.com/xvzc/SpoofDPI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and fast anti-censorship tool written in Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;⭐PRs or any form of contribution will be appreciated⭐&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SpoofDPI&lt;/h1&gt; &#xA;&lt;p&gt;Read in other Languages: &lt;a href=&#34;https://github.com/xvzc/SpoofDPI&#34;&gt;🇬🇧English&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/readme_ko.md&#34;&gt;🇰🇷한국어&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/readme_zh-cn.md&#34;&gt;🇨🇳简体中文&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/readme_ru.md&#34;&gt;🇷🇺Русский&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and fast software designed to bypass &lt;strong&gt;Deep Packet Inspection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/45588457/148035986-8b0076cc-fefb-48a1-9939-a8d9ab1d6322.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Binary&lt;/h2&gt; &#xA;&lt;p&gt;SpoofDPI will be installed in &lt;code&gt;~/.spoof-dpi/bin&lt;/code&gt;.&lt;br&gt; To run SpoofDPI in any directory, add the line below to your &lt;code&gt;~/.bashrc || ~/.zshrc || ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PATH:~/.spoof-dpi/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# OSX&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s darwin-amd64&#xA;&#xA;# linux-amd64&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-amd64&#xA;&#xA;# linux-arm&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-arm&#xA;&#xA;# linux-arm64&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-arm64&#xA;&#xA;# linux-mips&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-mips&#xA;&#xA;# linux-mipsle&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-mipsle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Go&lt;/h2&gt; &#xA;&lt;p&gt;You can also install SpoofDPI with &lt;strong&gt;go install&lt;/strong&gt;&lt;br&gt; &lt;code&gt;$ go install github.com/xvzc/SpoofDPI/cmd/spoof-dpi@latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Remember that $GOPATH should be set in your $PATH&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Git&lt;/h2&gt; &#xA;&lt;p&gt;You can also build your own&lt;br&gt; &lt;code&gt;$ git clone https://github.com/xvzc/SpoofDPI.git&lt;/code&gt;&lt;br&gt; &lt;code&gt;$ cd SpoofDPI&lt;/code&gt;&lt;br&gt; &lt;code&gt;$ go build ./cmd/...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: spoof-dpi [options...]&#xA;  -addr string&#xA;        listen address (default &#34;127.0.0.1&#34;)&#xA;  -debug&#xA;        enable debug output&#xA;  -dns-addr string&#xA;        dns address (default &#34;8.8.8.8&#34;)&#xA;  -dns-port int&#xA;        port number for dns (default 53)&#xA;  -enable-doh&#xA;        enable &#39;dns over https&#39;&#xA;  -no-banner&#xA;        disable banner&#xA;  -pattern string&#xA;        bypass DPI only on packets matching this regex pattern&#xA;  -port int&#xA;        port (default 8080)&#xA;  -timeout int&#xA;        timeout in milliseconds. no timeout when not given&#xA;  -url value&#xA;        Bypass DPI only on this url, can be passed multiple times&#xA;  -v    print spoof-dpi&#39;s version. this may contain some other relevant information&#xA;  -window-size int&#xA;        chunk size, in number of bytes, for fragmented client hello,&#xA;        try lower values if the default value doesn&#39;t bypass the DPI;&#xA;        when not given, the client hello packet will be sent in two parts:&#xA;        fragmentation for the first data packet and the rest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using any vpn extensions such as Hotspot Shield in Chrome browser,&lt;br&gt; go to Settings &amp;gt; Extensions, and disable them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;OSX&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;$ spoof-dpi&lt;/code&gt; and it will automatically set your proxy&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;$ spoof-dpi&lt;/code&gt; and open your favorite browser with proxy option&lt;br&gt; &lt;code&gt;google-chrome --proxy-server=&#34;http://127.0.0.1:8080&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;h3&gt;HTTP&lt;/h3&gt; &#xA;&lt;p&gt;Since most of websites in the world now support HTTPS, SpoofDPI doesn&#39;t bypass Deep Packet Inspections for HTTP requets, However It still serves proxy connection for all HTTP requests.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS&lt;/h3&gt; &#xA;&lt;p&gt;Although TLS 1.3 encrypts every handshake process, the domain names are still shown as plaintext in the Client hello packet. In other words, when someone else looks on the packet, they can easily guess where the packet is headed to. The domain name can offer a significant information while DPI is being processed, and we can actually see that the connection is blocked right after sending Client hello packet. I had tried some ways to bypass this, and found out that it seemed like only the first chunk gets inspected when we send the Client hello packet splited in chunks. What SpoofDPI does to bypass this is to send the first 1 byte of a request to the server, and then send the rest.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;SpoofDPI doesn&#39;t decrypt your HTTPS requests, and that&#39;s why we don&#39;t need the SSL certificates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Inspirations&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SadeghHayeri/GreenTunnel&#34;&gt;Green Tunnel&lt;/a&gt; by @SadeghHayeri&lt;br&gt; &lt;a href=&#34;https://github.com/ValdikSS/GoodbyeDPI&#34;&gt;GoodbyeDPI&lt;/a&gt; by @ValdikSS&lt;/p&gt;</summary>
  </entry>
</feed>