<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-11T01:28:02Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>onceupon/Bash-Oneliner</title>
    <updated>2024-08-11T01:28:02Z</updated>
    <id>tag:github.com,2024-08-11:/onceupon/Bash-Oneliner</id>
    <link href="https://github.com/onceupon/Bash-Oneliner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of handy Bash One-Liners and terminal tricks for data processing and Linux system maintenance.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bash-Oneliner&lt;/h1&gt; &#xA;&lt;p&gt;I am glad that you are here! I was working on bioinformatics a few years ago and was amazed by those single-word bash commands which are much faster than my dull scripts, time saved through learning command-line shortcuts and scripting. Recent years I am working on cloud computing and I keep recording those useful commands here. Not all of them is oneliner, but i put effort on making them brief and swift. I am mainly using Ubuntu, Amazon Linux, RedHat, Linux Mint, Mac and CentOS, sorry if the commands don&#39;t work on your system.&lt;/p&gt; &#xA;&lt;p&gt;This blog will focus on simple bash commands for parsing data and Linux system maintenance that i acquired from work and LPIC exam. I apologize that there are no detailed citation for all the commands, but they are probably from dear Google and Stack Overflow.&lt;/p&gt; &#xA;&lt;p&gt;English and bash are not my first language, please correct me anytime, thank you. If you know other cool commands, please teach me!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a more stylish version of &lt;a href=&#34;https://onceupon.github.io/Bash-Oneliner/&#34;&gt;Bash-Oneliner&lt;/a&gt;~&lt;/p&gt; &#xA;&lt;h2&gt;Handy Bash one-liners&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#terminal-tricks&#34;&gt;Terminal Tricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#variable&#34;&gt;Variable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#grep&#34;&gt;Grep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#sed&#34;&gt;Sed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#awk&#34;&gt;Awk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#xargs&#34;&gt;Xargs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#find&#34;&gt;Find&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#condition-and-loop&#34;&gt;Condition and Loop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#time&#34;&gt;Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#xwindow&#34;&gt;Xwindow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#hardware&#34;&gt;Hardware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#networking&#34;&gt;Networking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#data-wrangling&#34;&gt;Data Wrangling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#others&#34;&gt;Others&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Terminal Tricks&lt;/h2&gt; &#xA;&lt;h5&gt;Using Ctrl keys&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ctrl + a : move to the beginning of line.&#xA;Ctrl + d : if you&#39;ve type something, Ctrl + d deletes the character under the cursor, else, it escapes the current shell.&#xA;Ctrl + e : move to the end of line.&#xA;Ctrl + k : delete all text from the cursor to the end of line.&#xA;Ctrl + l : equivalent to clear.&#xA;Ctrl + n : same as Down arrow.&#xA;Ctrl + p : same as Up arrow.&#xA;Ctrl + q : to resume output to terminal after Ctrl + s.&#xA;Ctrl + r : begins a backward search through command history.(keep pressing Ctrl + r to move backward)&#xA;Ctrl + s : to stop output to terminal.&#xA;Ctrl + t : transpose the character before the cursor with the one under the cursor, press Esc + t to transposes the two words before the cursor.&#xA;Ctrl + u : cut the line before the cursor; then Ctrl + y paste it&#xA;Ctrl + w : cut the word before the cursor; then Ctrl + y paste it&#xA;Ctrl + x + backspace : delete all text from the beginning of line to the cursor.&#xA;Ctrl + x + Ctrl + e : launch editor defined by $EDITOR to input your command. Useful for multi-line commands.&#xA;Ctrl + z : stop current running process and keep it in background. You can use `fg` to continue the process in the foreground, or `bg` to continue the process in the background.&#xA;Ctrl + _ : undo typing.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change case&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Esc + u&#xA;# converts text from cursor to the end of the word to uppercase.&#xA;Esc + l&#xA;# converts text from cursor to the end of the word to lowercase.&#xA;Esc + c&#xA;# converts letter under the cursor to uppercase, rest of the word to lowercase.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run history number (e.g. 53)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run last command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!!&#xA;# run the previous command using sudo&#xA;sudo !!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run last command and change some parameter using caret substitution (e.g. last command: echo &#39;aaa&#39; -&amp;gt; rerun as: echo &#39;bbb&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#last command: echo &#39;aaa&#39;&#xA;^aaa^bbb&#xA;&#xA;#echo &#39;bbb&#39;&#xA;#bbb&#xA;&#xA;#Notice that only the first aaa will be replaced, if you want to replace all &#39;aaa&#39;, use &#39;:&amp;amp;&#39; to repeat it:&#xA;^aaa^bbb^:&amp;amp;&#xA;#or&#xA;!!:gs/aaa/bbb/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run past command that began with (e.g. cat filename)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!cat&#xA;# or&#xA;!c&#xA;# run cat filename again&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Bash globbing&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# &#39;*&#39; serves as a &#34;wild card&#34; for filename expansion.&#xA;/etc/pa*wd    #/etc/passwd&#xA;&#xA;# &#39;?&#39; serves as a single-character &#34;wild card&#34; for filename expansion.&#xA;/b?n/?at      #/bin/cat&#xA;&#xA;# &#39;[]&#39; serves to match the character from a range.&#xA;ls -l [a-z]*   #list all files with alphabet in its filename.&#xA;&#xA;# &#39;{}&#39; can be used to match filenames with more than one patterns&#xA;ls *.{sh,py}   #list all .sh and .py files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Some handy environment variables&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$0   :name of shell or shell script.&#xA;$1, $2, $3, ... :positional parameters.&#xA;$#   :number of positional parameters.&#xA;$?   :most recent foreground pipeline exit status.&#xA;$-   :current options set for the shell.&#xA;$$   :pid of the current shell (not subshell).&#xA;$!   :is the PID of the most recent background command.&#xA;$_   :last argument of the previously executed command, or the path of the bash script.&#xA;&#xA;$DESKTOP_SESSION     current display manager&#xA;$EDITOR   preferred text editor.&#xA;$LANG   current language.&#xA;$PATH   list of directories to search for executable files (i.e. ready-to-run programs)&#xA;$PWD    current directory&#xA;$SHELL  current shell&#xA;$USER   current username&#xA;$HOSTNAME   current hostname&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using vi-mode in your shell&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set -o vi&#xA;# change bash shell to vi mode&#xA;# then hit the Esc key to change to vi edit mode (when `set -o vi` is set)&#xA;k&#xA;# in vi edit mode - previous command&#xA;j&#xA;# in vi edit mode - next command&#xA;0&#xA;# in vi edit mode - beginning of the command&#xA;R&#xA;# in vi edit mode - replace current characters of command&#xA;2w&#xA;# in vi edit mode - next to 2nd word&#xA;b&#xA;# in vi edit mode - previous word&#xA;i&#xA;# in vi edit mode - go to insert mode&#xA;v&#xA;# in vi edit mode - edit current command in vi&#xA;man 3 readline&#xA;# man page for complete readline mapping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Variable&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Variable substitution within quotes&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# foo=bar&#xA;echo $foo&#xA;# bar&#xA;echo &#34;$foo&#34;&#xA;# bar&#xA;# single quotes cause variables to not be expanded&#xA;echo &#39;$foo&#39;&#xA;# $foo&#xA;# single quotes within double quotes will not cancel expansion and will be part of the output&#xA;echo &#34;&#39;$foo&#39;&#34;&#xA;# &#39;bar&#39;&#xA;# doubled single quotes act as if there are no quotes at all&#xA;echo &#39;&#39;$foo&#39;&#39;&#xA;# bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get the length of variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;var=&#34;some string&#34;&#xA;echo ${#var}&#xA;# 11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get the first character of the variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;var=string&#xA;echo &#34;${var:0:1}&#34;&#xA;#s&#xA;&#xA;# or&#xA;echo ${var%%&#34;${var#?}&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove the first or last string from variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;var=&#34;some string&#34;&#xA;echo ${var:2}&#xA;#me string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Replacement (e.g. remove the first leading 0 )&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;var=&#34;0050&#34;&#xA;echo ${var[@]#0}&#xA;#050&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Replacement (e.g. replace &#39;a&#39; with &#39;,&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{var/a/,}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Replace all (e.g. replace all &#39;a&#39; with &#39;,&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{var//a/,}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep lines with strings from a file (e.g. lines with &#39;stringA or &#39;stringB&#39; or &#39;stringC&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#with grep&#xA;test=&#34;stringA stringB stringC&#34;&#xA;grep ${test// /\\\|} file.txt&#xA;# turning the space into &#39;or&#39; (\|) in grep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;To change the case of the string stored in the variable to lowercase (Parameter Expansion)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;var=HelloWorld&#xA;echo ${var,,}&#xA;helloworld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Expand and then execute variable/argument&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmd=&#34;bar=foo&#34;&#xA;eval &#34;$cmd&#34;&#xA;echo &#34;$bar&#34; # foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Math&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Arithmetic Expansion in Bash (Operators: +, -, *, /, %, etc)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $(( 10 + 5 ))  #15&#xA;x=1&#xA;echo $(( x++ )) #1 , notice that it is still 1, since it&#39;s post-increment&#xA;echo $(( x++ )) #2&#xA;echo $(( ++x )) #4 , notice that it is not 3 since it&#39;s pre-increment&#xA;echo $(( x-- )) #4&#xA;echo $(( x-- )) #3&#xA;echo $(( --x )) #1&#xA;x=2&#xA;y=3&#xA;echo $(( x ** y )) #8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print out the prime factors of a number (e.g. 50)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;factor 50&#xA;# 50: 2 5 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Sum up input list (e.g. seq 10)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;seq 10|paste -sd+|bc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Sum up a file (each line in file contains only one number)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{s+=$1} END {print s}&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Column subtraction&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat file| awk -F &#39;\t&#39; &#39;BEGIN {SUM=0}{SUM+=$3-$2}END{print SUM}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Simple math with expr&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;expr 10+20 #30&#xA;expr 10\*20 #600&#xA;expr 30 \&amp;gt; 20 #1 (true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;More math with bc&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Number of decimal digit/ significant figure&#xA;echo &#34;scale=2;2/3&#34; | bc&#xA;#.66&#xA;&#xA;# Exponent operator&#xA;echo &#34;10^2&#34; | bc&#xA;#100&#xA;&#xA;# Using variables&#xA;echo &#34;var=5;--var&#34;| bc&#xA;#4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Grep&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Type of grep&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep = grep -G # Basic Regular Expression (BRE)&#xA;fgrep = grep -F # fixed text, ignoring meta-characters&#xA;egrep = grep -E # Extended Regular Expression (ERE)&#xA;rgrep = grep -r # recursive&#xA;grep -P # Perl Compatible Regular Expressions (PCRE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep and count number of empty lines&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -c &#34;^$&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep and return only integer&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -o &#39;[0-9]*&#39;&#xA;#or&#xA;grep -oP &#39;\d*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep integer with certain number of digits (e.g. 3)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep &#39;[0-9]\{3\}&#39;&#xA;# or&#xA;grep -E &#39;[0-9]{3}&#39;&#xA;# or&#xA;grep -P &#39;\d{3}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep only IP address&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -Eo &#39;[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}&#39;&#xA;# or&#xA;grep -Po &#39;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep whole word (e.g. &#39;target&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -w &#39;target&#39;&#xA;&#xA;#or using RE&#xA;grep &#39;\btarget\b&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep returning lines before and after match (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# return also 3 lines after match&#xA;grep -A 3 &#39;bbo&#39;&#xA;&#xA;# return also 3 lines before match&#xA;grep -B 3 &#39;bbo&#39;&#xA;&#xA;# return also 3 lines before and after match&#xA;grep -C 3 &#39;bbo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep string starting with (e.g. &#39;S&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -o &#39;S.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Extract text between words (e.g. w1,w2)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -o -P &#39;(?&amp;lt;=w1).*(?=w2)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep lines without word (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -v bbo filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep lines not begin with string (e.g. #)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -v &#39;^#&#39; file.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep variables with space within it (e.g. myvar=&#34;some strings&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep &#34;$myvar&#34; filename&#xA;#remember to quote the variable!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep only one/first match (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -m 1 bbo filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep and return number of matching line(e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -c bbo filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Count occurrence (e.g. three times a line count three times)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -o bbo filename |wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Case insensitive grep (e.g. &#39;bbo&#39;/&#39;BBO&#39;/&#39;Bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -i &#34;bbo&#34; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;COLOR the match (e.g. &#39;bbo&#39;)!&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep --color bbo filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep search all files in a directory(e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -R bbo /path/to/directory&#xA;# or&#xA;grep -r bbo /path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Search all files in directory, do not ouput the filenames (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -rh bbo /path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Search all files in directory, output ONLY the filenames with matches(e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -rl bbo /path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep OR (e.g. A or B or C or D)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;grep &#39;A\|B\|C\|D&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep AND (e.g. A and B)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep &#39;A.*B&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Regex any single character (e.g. ACB or AEB)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep &#39;A.B&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Regex with or without a certain character (e.g. color or colour)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep &#39;colou\?r&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep all content of a fileA from fileB&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -f fileA fileB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep a tab&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep $&#39;\t&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep variable from variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$echo &#34;$long_str&#34;|grep -q &#34;$short_str&#34;&#xA;if [ $? -eq 0 ]; then echo &#39;found&#39;; fi&#xA;#grep -q will output 0 if match found&#xA;#remember to add space between []!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep strings between a bracket()&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -oP &#39;\(\K[^\)]+&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Grep number of characters with known strings in between(e.g. AAEL000001-RA)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -o -w &#34;\w\{10\}\-R\w\{1\}&#34;&#xA;# \w word character [0-9a-zA-Z_] \W not word character&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Skip directory (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -d skip &#39;bbo&#39; /path/to/files/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sed&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Remove the 1st line&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed 1d filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove the first 100 lines (remove line 1-100)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed 1,100d filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove lines with string (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#34;/bbo/d&#34; filename&#xA;# case insensitive:&#xA;sed &#34;/bbo/Id&#34; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove lines whose nth character not equal to a value (e.g. 5th character not equal to 2)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -E &#39;/^.{5}[^2]/d&#39;&#xA;#aaaa2aaa (you can stay)&#xA;#aaaa1aaa (delete!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Edit infile (edit and save to file), (e.g. deleting the lines with &#39;bbo&#39; and save to file)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -i &#34;/bbo/d&#34; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;When using variable (e.g. $i), use double quotes &#34; &#34;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g. add &amp;gt;$i to the first line (to make a bioinformatics FASTA file)&#xA;sed &#34;1i &amp;gt;$i&#34;&#xA;# notice the double quotes! in other examples, you can use a single quote, but here, no way!&#xA;# &#39;1i&#39; means insert to first line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using environment variable and end-of-line pattern at the same time.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Use backslash for end-of-line $ pattern, and double quotes for expressing the variable&#xA;sed -e &#34;\$s/\$/\n+--$3-----+/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete/remove empty lines&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;/^\s*$/d&#39;&#xA;&#xA;# or&#xA;&#xA;sed &#39;/^$/d&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete/remove last line&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;$d&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete/remove last character from end of file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -i &#39;$ s/.$//&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add string to beginning of file (e.g. &#34;[&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -i &#39;1s/^/[/&#39; file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add string at certain line number (e.g. add &#39;something&#39; to line 1 and line 3)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -e &#39;1isomething&#39; -e &#39;3isomething&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add string to end of file (e.g. &#34;]&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;$s/$/]/&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add newline to the end&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;$a\&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add string to beginning of every line (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -e &#39;s/^/bbo/&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add string to end of each line (e.g. &#34;}&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -e &#39;s/$/\}\]/&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add \n every nth character (e.g. every 4th character)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;s/.\{4\}/&amp;amp;\n/g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add a line after the line that matches the pattern (e.g. add a new line with &#34;world&#34; after the line with &#34;hello&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;/hello*/a world&#39; filename&#xA;# hello&#xA;# world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Concatenate/combine/join files with a separator and next line (e.g separate by &#34;,&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -s &#39;$a,&#39; *.json &amp;gt; all.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Substitution (e.g. replace A by B)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;s/A/B/g&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Substitution with wildcard (e.g. replace a line start with aaa= by aaa=/my/new/path)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#34;s/aaa=.*/aaa=\/my\/new\/path/g&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Select lines start with string (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n &#39;/^@S/p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete lines with string (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;/bbo/d&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print/get/trim a range of line (e.g. line 500-5000)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n 500,5000p filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print every nth lines&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n &#39;0~3p&#39; filename&#xA;&#xA;# catch 0: start; 3: step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print every odd # lines&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n &#39;1~2p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print every third line including the first line&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n &#39;1p;0~3p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove leading whitespace and tabs&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -e &#39;s/^[ \t]*//&#39;&#xA;# Notice a whitespace before &#39;\t&#39;!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove only leading whitespace&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;s/ *//&#39;&#xA;&#xA;# notice a whitespace before &#39;*&#39;!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove ending commas&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;s/,$//g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add a column to the end&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#34;s/$/\t$i/&#34;&#xA;# $i is the valuable you want to add&#xA;&#xA;# To add the filename to every last column of the file&#xA;for i in $(ls); do sed -i &#34;s/$/\t$i/&#34; $i; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add extension of filename to last column&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for i in T000086_1.02.n T000086_1.02.p; do sed &#34;s/$/\t${i/*./}/&#34; $i; done &amp;gt;T000086_1.02.np&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove newline\ nextline&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;:a;N;$!ba;s/\n//g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print a particular line (e.g. 123th line)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n -e &#39;123p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print a number of lines (e.g. line 10th to line 33 rd)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -n &#39;10,33p&#39; &amp;lt;filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change delimiter&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;s=/=\\/=g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Replace with wildcard (e.g A-1-e or A-2-e or A-3-e....)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;s/A-.*-e//g&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove last character of file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed &#39;$ s/.$//&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Insert character at specified position of file (e.g. AAAAAA --&amp;gt; AAA#AAA)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -r -e &#39;s/^.{3}/&amp;amp;#/&#39; file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Awk&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Set tab as field separator&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk -F $&#39;\t&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Output as tab separated (also as field separator)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk -v OFS=&#39;\t&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Pass variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;a=bbo;b=obb;&#xA;awk -v a=&#34;$a&#34; -v b=&#34;$b&#34; &#34;$1==a &amp;amp;&amp;amp; $10=b&#34; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print line number and number of characters on each line&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{print NR,length($0);}&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find number of columns&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{print NF}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reverse column order&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{print $2, $1}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check if there is a comma in a column (e.g. column $1)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;$1~/,/ {print}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Split and do for loop&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{split($2, a,&#34;,&#34;);for (i in a) print $1&#34;\t&#34;a[i]}&#39; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print all lines before nth occurrence of a string (e.g stop print lines when &#39;bbo&#39; appears 7 times)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk -v N=7 &#39;{print}/bbo/&amp;amp;&amp;amp; --N&amp;lt;=0 {exit}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print filename and last line of all files in directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls|xargs -n1 -I file awk &#39;{s=$0};END{print FILENAME,s}&#39; file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add string to the beginning of a column (e.g add &#34;chr&#34; to column $3)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;BEGIN{OFS=&#34;\t&#34;}$3=&#34;chr&#34;$3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove lines with string (e.g. &#39;bbo&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;!/bbo/&#39; file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove last column&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;NF{NF-=1};1&#39; file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Usage and meaning of NR and FNR&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For example there are two files:&#xA;# fileA:&#xA;# a&#xA;# b&#xA;# c&#xA;# fileB:&#xA;# d&#xA;# e&#xA;awk &#39;print FILENAME, NR,FNR,$0}&#39; fileA fileB&#xA;# fileA    1    1    a&#xA;# fileA    2    2    b&#xA;# fileA    3    3    c&#xA;# fileB    4    1    d&#xA;# fileB    5    2    e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;AND gate&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For example there are two files:&#xA;# fileA:&#xA;# 1    0&#xA;# 2    1&#xA;# 3    1&#xA;# 4    0&#xA;# fileB:&#xA;# 1    0&#xA;# 2    1&#xA;# 3    0&#xA;# 4    1&#xA;&#xA;awk -v OFS=&#39;\t&#39; &#39;NR=FNR{a[$1]=$2;next} NF {print $1,((a[$1]=$2)? $2:&#34;0&#34;)}&#39; fileA fileB&#xA;# 1    0&#xA;# 2    1&#xA;# 3    0&#xA;# 4    0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Round all numbers of file (e.g. 2 significant figure)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{while (match($0, /[0-9]+\[0-9]+/)){&#xA;    \printf &#34;%s%.2f&#34;, substr($0,0,RSTART-1),substr($0,RSTART,RLENGTH)&#xA;    \$0=substr($0, RSTART+RLENGTH)&#xA;    \}&#xA;    \print&#xA;    \}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Give number/index to every row&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{printf(&#34;%s\t%s\n&#34;,NR,$0)}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Break combine column data into rows&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For example, separate the following content:&#xA;# David    cat,dog&#xA;# into&#xA;# David    cat&#xA;# David    dog&#xA;&#xA;awk &#39;{split($2,a,&#34;,&#34;);for(i in a)print $1&#34;\t&#34;a[i]}&#39; file&#xA;&#xA;# Detail here:　http://stackoverflow.com/questions/33408762/bash-turning-single-comma-separated-column-into-multi-line-string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Average a file (each line in file contains only one number)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{s+=$1}END{print s/NR}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print field start with string (e.g Linux)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;$1 ~ /^Linux/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Sort a row (e.g. 1 40 35 12 23 --&amp;gt; 1 12 23 35 40)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39; {split( $0, a, &#34;\t&#34; ); asort( a ); for( i = 1; i &amp;lt;= length(a); i++ ) printf( &#34;%s\t&#34;, a[i] ); printf( &#34;\n&#34; ); }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Subtract previous row values (add column6 which equal to column4 minus last column5)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{$6 = $4 - prev5; prev5 = $5; print;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Xargs&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Set tab as delimiter (default:space)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xargs -d\t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Prompt commands before running commands&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls|xargs -L1 -p head&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display 3 items per line&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo 1 2 3 4 5 6| xargs -n 3&#xA;# 1 2 3&#xA;# 4 5 6&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Prompt before execution&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo a b c |xargs -p -n 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print command along with output&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xargs -t abcd&#xA;# bin/echo abcd&#xA;# abcd&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;With find and rm&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name &#34;*.html&#34;|xargs rm&#xA;&#xA;# when using a backtick&#xA;rm `find . -name &#34;*.html&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete files with whitespace in filename (e.g. &#34;hello 2001&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name &#34;*.c&#34; -print0|xargs -0 rm -rf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show limits on command-line length&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xargs --show-limits&#xA;# Output from my Ubuntu:&#xA;# Your environment variables take up 3653 bytes&#xA;# POSIX upper limit on argument length (this system): 2091451&#xA;# POSIX smallest allowable upper limit on argument length (all systems): 4096&#xA;# Maximum length of command we could actually use: 2087798&#xA;# Size of command buffer we are actually using: 131072&#xA;# Maximum parallelism (--max-procs must be no greater): 2147483647&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Move files to folder&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name &#34;*.bak&#34; -print 0|xargs -0 -I {} mv {} ~/old&#xA;&#xA;# or&#xA;find . -name &#34;*.bak&#34; -print 0|xargs -0 -I file mv file ~/old&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Move first 100th files to a directory (e.g. d1)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls |head -100|xargs -I {} mv {} d1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Parallel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;time echo {1..5} |xargs -n 1 -P 5 sleep&#xA;&#xA;# a lot faster than:&#xA;time echo {1..5} |xargs -n1 sleep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Copy all files from A to B&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find /dir/to/A -type f -name &#34;*.py&#34; -print 0| xargs -0 -r -I file cp -v -p file --target-directory=/path/to/B&#xA;&#xA;# v: verbose|&#xA;# p: keep detail (e.g. owner)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;With sed&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls |xargs -n1 -I file sed -i &#39;/^Pos/d&#39; file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add the file name to the first line of file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls |sed &#39;s/.txt//g&#39;|xargs -n1 -I file sed -i -e &#39;1 i\&amp;gt;file\&#39; file.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Count all files&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls |xargs -n1 wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Turn output into a single line&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -l| xargs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Count files within directories&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo mso{1..8}|xargs -n1 bash -c &#39;echo -n &#34;$1:&#34;; ls -la &#34;$1&#34;| grep -w 74 |wc -l&#39; --&#xA;# &#34;--&#34; signals the end of options and display further option processing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Count lines in all file, also count total lines&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls|xargs wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Xargs and grep&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat grep_list |xargs -I{} grep {} filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Xargs and sed (replace all old ip address with new ip address under /etc directory)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -rl &#39;192.168.1.111&#39; /etc | xargs sed -i &#39;s/192.168.1.111/192.168.2.111/g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;List all sub directory/file in the current directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all files under the current directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -type f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all directories under the current directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -type d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Edit all files under current directory (e.g. replace &#39;www&#39; with &#39;ww&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name &#39;*.php&#39; -exec sed -i &#39;s/www/w/g&#39; {} \;&#xA;&#xA;# if there are no subdirectory&#xA;replace &#34;www&#34; &#34;w&#34; -- *&#xA;# a space before *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find and output only filename (e.g. &#34;mso&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find mso*/ -name M* -printf &#34;%f\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find large files in the system (e.g. &amp;gt;4G)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find / -type f -size +4G&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find and delete file with size less than (e.g. 74 byte)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name &#34;*.mso&#34; -size -74c -delete&#xA;&#xA;# M for MB, etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find empty (0 byte) files&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -type f -empty&#xA;# to further delete all the empty files&#xA;find . -type f -empty -delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Recursively count all the files in a directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -type f | wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Condition and loop&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;If statement&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# if and else loop for string matching&#xA;if [[ &#34;$c&#34; == &#34;read&#34; ]]; then outputdir=&#34;seq&#34;; else outputdir=&#34;write&#34; ; fi&#xA;&#xA;# Test if myfile contains the string &#39;test&#39;:&#xA;if grep -q hello myfile; then echo -e &#34;file contains the string!&#34; ; fi&#xA;&#xA;# Test if mydir is a directory, change to it and do other stuff:&#xA;if cd mydir; then&#xA;  echo &#39;some content&#39; &amp;gt;myfile&#xA;else&#xA;  echo &amp;gt;&amp;amp;2 &#34;Fatal error. This script requires mydir.&#34;&#xA;fi&#xA;&#xA;# if variable is null&#xA;if [ ! -s &#34;myvariable&#34; ]; then echo -e &#34;variable is null!&#34; ; fi&#xA;#True of the length if &#34;STRING&#34; is zero.&#xA;&#xA;# Using test command (same as []), to test if the length of variable is nonzero&#xA;test -n &#34;$myvariable&#34; &amp;amp;&amp;amp; echo myvariable is &#34;$myvariable&#34; || echo myvariable is not set&#xA;&#xA;# Test if file exist&#xA;if [ -e &#39;filename&#39; ]&#xA;then&#xA;  echo -e &#34;file exists!&#34;&#xA;fi&#xA;&#xA;# Test if file exist but also including symbolic links:&#xA;if [ -e myfile ] || [ -L myfile ]&#xA;then&#xA;  echo -e &#34;file exists!&#34;&#xA;fi&#xA;&#xA;# Test if the value of x is greater or equal than 5&#xA;if [ &#34;$x&#34; -ge 5 ]; then echo -e &#34;greater or equal than 5!&#34; ; fi&#xA;&#xA;# Test if the value of x is greater or equal than 5, in bash/ksh/zsh:&#xA;if ((x &amp;gt;= 5)); then echo -e &#34;greater or equal than 5!&#34; ; fi&#xA;&#xA;# Use (( )) for arithmetic operation&#xA;if ((j==u+2)); then echo -e &#34;j==u+2!!&#34; ; fi&#xA;&#xA;# Use [[ ]] for comparison&#xA;if [[ $age -gt 21 ]]; then echo -e &#34;forever 21!!&#34; ; fi&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html&#34;&gt;More if commands&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;For loop&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Echo the file name under the current directory&#xA;for i in $(ls); do echo file $i; done&#xA;#or&#xA;for i in *; do echo file $i; done&#xA;&#xA;# Make directories listed in a file (e.g. myfile)&#xA;for dir in $(&amp;lt;myfile); do mkdir $dir; done&#xA;&#xA;# Press any key to continue each loop&#xA;for i in $(cat tpc_stats_0925.log |grep failed|grep -o &#39;\query\w\{1,2\}&#39;); do cat ${i}.log; read -rsp $&#39;Press any key to continue...\n&#39; -n1 key; done&#xA;&#xA;# Print a file line by line when a key is pressed,&#xA;oifs=&#34;$IFS&#34;; IFS=$&#39;\n&#39;; for line in $(cat myfile); do ...; done&#xA;while read -r line; do ...; done &amp;lt;myfile&#xA;&#xA;#If only one word a line, simply&#xA;for line in $(cat myfile); do echo $line; read -n1; done&#xA;&#xA;#Loop through an array&#xA;for i in &#34;${arrayName[@]}&#34;; do echo $i; done&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;While loop,&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Column subtraction of a file (e.g. a 3 columns file)&#xA;while read a b c; do echo $(($c-$b)); done &amp;lt; &amp;lt;(head filename)&#xA;#there is a space between the two &#39;&amp;lt;&#39;s&#xA;&#xA;# Sum up column subtraction&#xA;i=0; while read a b c; do ((i+=$c-$b)); echo $i; done &amp;lt; &amp;lt;(head filename)&#xA;&#xA;# Keep checking a running process (e.g. perl) and start another new process (e.g. python) immediately after it. (BETTER use the wait command! Ctrl+F &#39;wait&#39;)&#xA;while [[ $(pidof perl) ]]; do echo f; sleep 10; done &amp;amp;&amp;amp; python timetorunpython.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;switch (case in bash)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;read type;&#xA;case $type in&#xA;  &#39;0&#39;)&#xA;    echo &#39;how&#39;&#xA;    ;;&#xA;  &#39;1&#39;)&#xA;    echo &#39;are&#39;&#xA;    ;;&#xA;  &#39;2&#39;)&#xA;    echo &#39;you&#39;&#xA;    ;;&#xA;esac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Find out the time require for executing a command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;time echo hi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Wait for some time (e.g 10s)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sleep 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print date with formatting&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;date +%F&#xA;# 2020-07-19&#xA;&#xA;# or&#xA;date +&#39;%d-%b-%Y-%H:%M:%S&#39;&#xA;# 10-Apr-2020-21:54:40&#xA;&#xA;# Returns the current time with nanoseconds.&#xA;date +&#34;%T.%N&#34;&#xA;# 11:42:18.664217000  &#xA;&#xA;# Get the seconds since epoch (Jan 1 1970) for a given date (e.g Mar 16 2021)&#xA;date -d &#34;Mar 16 2021&#34; +%s&#xA;# 1615852800&#xA;# or&#xA;date -d &#34;Tue Mar 16 00:00:00 UTC 2021&#34;  +%s&#xA;# 1615852800  &#xA;&#xA;# Convert the number of seconds since epoch back to date&#xA;date --date @1615852800&#xA;# Tue Mar 16 00:00:00 UTC 2021&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print current time point for N days ago or N days after&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# print current date first (for the following example)&#xA;date +&#34;%F %H:%M:%S&#34;&#xA;# 2023-03-11 16:17:09&#xA;&#xA;# print the time that is 1 day ago&#xA;date -d&#34;1 day ago&#34; +&#34;%F %H:%M:%S&#34;&#xA;# 2023-03-10 16:17:09&#xA;&#xA;# print the time that is 7 days ago&#xA;date -d&#34;7 days ago&#34; +&#34;%F %H:%M:%S&#34;&#xA;# 2023-03-04 16:17:09&#xA;&#xA;# print the time that is a week ago&#xA;date -d&#34;1 week ago&#34; +&#34;%F %H:%M:%S&#34;&#xA;# 2023-03-04 16:17:09&#xA;&#xA;# add 1 day to date&#xA;date -d&#34;-1 day ago&#34; +&#34;%F %H:%M:%S&#34;&#xA;# 2023-03-12 16:17:09&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;wait for random duration (e.g. sleep 1-5 second, like adding a jitter)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sleep $[ ( $RANDOM % 5 ) + 1 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Log out your account after a certain period of time (e.g 10 seconds)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TMOUT=10&#xA;#once you set this variable, logout timer start running!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set how long you want to run a command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#This will run the command &#39;sleep 10&#39; for only 1 second.&#xA;timeout 1 sleep 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set when you want to run a command (e.g 1 min from now)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;at now + 1min  #time-units can be minutes, hours, days, or weeks&#xA;warning: commands will be executed using /bin/sh&#xA;at&amp;gt; echo hihigithub &amp;gt;~/itworks&#xA;at&amp;gt; &amp;lt;EOT&amp;gt;   # press Ctrl + D to exit&#xA;job 1 at Wed Apr 18 11:16:00 2018&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Download the content of this README.md (the one your are viewing now)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -f markdown -t man | man -l -&#xA;&#xA;# or w3m (a text based web browser and pager)&#xA;curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc | w3m -T text/html&#xA;&#xA;# or using emacs (in emac text editor)&#xA;emacs --eval &#39;(org-mode)&#39; --insert &amp;lt;(curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -t org)&#xA;&#xA;# or using emacs (on terminal, exit using Ctrl + x then Ctrl + c)&#xA;emacs -nw --eval &#39;(org-mode)&#39; --insert &amp;lt;(curl https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md | pandoc -t org)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Download all from a page&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -r -l1 -H -t1 -nd -N -np -A mp3 -e robots=off http://example.com&#xA;&#xA;# -r: recursive and download all links on page&#xA;# -l1: only one level link&#xA;# -H: span host, visit other hosts&#xA;# -t1: numbers of retries&#xA;# -nd: don&#39;t make new directories, download to here&#xA;# -N: turn on timestamp&#xA;# -nd: no parent&#xA;# -A: type (separate by ,)&#xA;# -e robots=off: ignore the robots.txt file which stop wget from crashing the site, sorry example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Upload a file to web and download (&lt;a href=&#34;https://transfer.sh/&#34;&gt;https://transfer.sh/&lt;/a&gt;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#  Upload a file (e.g. filename.txt):&#xA;curl --upload-file ./filename.txt https://transfer.sh/filename.txt&#xA;# the above command will return a URL, e.g: https://transfer.sh/tG8rM/filename.txt&#xA;&#xA;# Next you can download it by:&#xA;curl https://transfer.sh/tG8rM/filename.txt -o filename.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Download file if necessary&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;data=file.txt&#xA;url=http://www.example.com/$data&#xA;if [ ! -s $data ];then&#xA;    echo &#34;downloading test data...&#34;&#xA;    wget $url&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Wget to a filename (when a long name)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O filename &#34;http://example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Wget files to a folder&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -P /path/to/directory &#34;http://example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Instruct curl to follow any redirect until it reaches the final destination:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Random&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Random generate password (e.g. generate 5 password each of length 13)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install pwgen&#xA;pwgen 13 5&#xA;#sahcahS9dah4a xieXaiJaey7xa UuMeo0ma7eic9 Ahpah9see3zai acerae7Huigh7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Random pick 100 lines from a file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shuf -n 100 filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Random order (lucky draw)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for i in a b c d e; do echo $i; done | shuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Echo series of random numbers between a range (e.g. shuffle numbers from 0-100, then pick 15 of them randomly)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shuf -i 0-100 -n 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Echo a random number&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $RANDOM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Random from 0-9&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $((RANDOM % 10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Random from 1-10&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $(((RANDOM %10)+1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Xwindow&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;X11 GUI applications! Here are some GUI tools for you if you get bored by the text-only environment.&lt;/p&gt; &#xA;&lt;h5&gt;Enable X11 forwarding,in order to use graphical application on servers&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -X user_name@ip_address&#xA;&#xA;# or setting through xhost&#xA;# --&amp;gt; Install the following for Centos:&#xA;# xorg-x11-xauth&#xA;# xorg-x11-fonts-*&#xA;# xorg-x11-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Little xwindow tools&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xclock&#xA;xeyes&#xA;xcowsay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Open pictures/images from ssh server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. ssh -X user_name@ip_address&#xA;2. apt-get install eog&#xA;3. eog picture.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Watch videos on server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. ssh -X user_name@ip_address&#xA;2. sudo apt install mpv&#xA;3. mpv myvideo.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use gedit on server (GUI editor)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. ssh -X user_name@ip_address&#xA;2. apt-get install gedit&#xA;3. gedit filename.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Open PDF file from ssh server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. ssh -X user_name@ip_address&#xA;2. apt-get install evince&#xA;3. evince filename.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use google-chrome browser from ssh server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. ssh -X user_name@ip_address&#xA;2. apt-get install libxss1 libappindicator1 libindicator7&#xA;3. wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&#xA;4. sudo apt-get install -f&#xA;5. dpkg -i google-chrome*.deb&#xA;6. google-chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;System&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Work with yum history&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List yum history (e.g install, update)&#xA;sudo yum history&#xA;# Example output:&#xA;# Loaded plugins: extras_suggestions, langpacks, priorities, update-motd&#xA;# ID     | Login user               | Date and time    | Action(s)      | Altered&#xA;# -------------------------------------------------------------------------------&#xA;#     11 |  ... &amp;lt;myuser&amp;gt;       | 2020-04-10 10:57 | Install        |    1 P&amp;lt;&#xA;#     10 |  ... &amp;lt;myuser&amp;gt;       | 2020-03-27 05:21 | Install        |    1 &amp;gt;P&#xA;#      9 |  ... &amp;lt;myuser&amp;gt;       | 2020-03-05 11:57 | I, U           |   56 *&amp;lt;&#xA;# ...&#xA;&#xA;# Show more details of a yum history (e.g. history #11)&#xA;sudo yum history info 11&#xA;&#xA;# Undo a yum history (e.g. history #11, this will uninstall some packages)&#xA;sudo yum history undo 11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Audit files to see who made changes to a file [RedHat based system only]&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To audit a directory recursively for changes (e.g. myproject)&#xA;auditctl -w /path/to/myproject/ -p wa&#xA;&#xA;# If you delete a file name &#34;VIPfile&#34;, the deletion is recorded in /var/log/audit/audit.log&#xA;sudo grep VIPfile /var/log/audit/audit.log&#xA;#type=PATH msg=audit(1581417313.678:113): item=1 name=&#34;VIPfile&#34; inode=300115 dev=ca:01 mode=0100664 ouid=1000 ogid=1000 rdev=00:00 nametype=DELETE cap_fp=0000000000000000 cap_fi=0000000000000000 cap_fe=0 cap_fver=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check out whether SELinux is enabled&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sestatus&#xA;# SELinux status:                 enabled&#xA;# SELinuxfs mount:                /sys/fs/selinux&#xA;# SELinux root directory:         /etc/selinux&#xA;# Loaded policy name:             targeted&#xA;# Current mode:                   enforcing&#xA;# Mode from config file:          enforcing&#xA;# Policy MLS status:              enabled&#xA;# Policy deny_unknown status:     allowed&#xA;# Max kernel policy version:      31&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Generate public key from private key&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -y -f ~/.ssh/id_rsa &amp;gt; ~/.ssh/id_rsa.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Copy your default public key to remote user&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-copy-id &amp;lt;user_name&amp;gt;@&amp;lt;server_IP&amp;gt;&#xA;# then you need to enter the password&#xA;# and next time you won&#39;t need to enter password when ssh to that user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Copy default public key to remote user using the required private key (e.g. use your mykey.pem key to copy your id_rsa.pub to the remote user)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# before you need to use mykey.pem to ssh to remote user.&#xA;ssh-copy-id -i ~/.ssh/id_rsa.pub -o &#34;IdentityFile ~/Downloads/mykey.pem&#34; &amp;lt;user_name&amp;gt;@&amp;lt;server_IP&amp;gt;&#xA;# now you don&#39;t need to use key to ssh to that user.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;SSH Agent Forwarding&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To bring your key with you when ssh to serverA, then ssh to serverB from serverA using the key.&#xA;ssh-agent&#xA;ssh-add /path/to/mykey.pem&#xA;ssh -A &amp;lt;username&amp;gt;@&amp;lt;IP_of_serverA&amp;gt;&#xA;# Next you can ssh to serverB&#xA;ssh &amp;lt;username&amp;gt;@&amp;lt;IP_of_serverB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set the default user and key for a host when using SSH&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# add the following to ~/.ssh/config&#xA;Host myserver&#xA;  User myuser&#xA;  IdentityFile ~/path/to/mykey.pem&#xA;&#xA;# Next, you could run &#34;ssh myserver&#34; instead of &#34;ssh -i ~/path/to/mykey.pem myuser@myserver&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Follow the most recent logs from service&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -u &amp;lt;service_name&amp;gt; -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Eliminate the zombie&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# A zombie is already dead, so you cannot kill it. You can eliminate the zombie by killing its parent.&#xA;# First, find PID of the zombie&#xA;ps aux| grep &#39;Z&#39;&#xA;# Next find the PID of zombie&#39;s parent&#xA;pstree -p -s &amp;lt;zombie_PID&amp;gt;&#xA;# Then you can kill its parent and you will notice the zombie is gone.&#xA;sudo kill 9 &amp;lt;parent_PID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Show memory usage&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;free -c 10 -mhs 1&#xA;# print 10 times, at 1 second interval&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display CPU and IO statistics for devices and partitions.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# refresh every second&#xA;iostat -x -t 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display bandwidth usage on an network interface (e.g. enp175s0f0)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;iftop -i enp175s0f0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Tell how long the system has been running and number of users&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uptime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check if it&#39;s root running&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ &#34;$EUID&#34; -ne 0 ]; then&#xA;        echo &#34;Please run this as root&#34;&#xA;        exit 1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change shell of a user (e.g. bonnie)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsh -s /bin/sh bonnie&#xA;# /etc/shells: valid login shells&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change root / fake root / jail (e.g. change root to newroot)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chroot /home/newroot /bin/bash&#xA;&#xA;# To exit chroot&#xA;exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display file status (size; access, modify and change time, etc) of a file (e.g. filename.txt)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stat filename.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Snapshot of the current processes&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ps aux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display a tree of processes&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pstree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find maximum number of processes&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /proc/sys/kernel/pid_max&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print or control the kernel ring buffer&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dmesg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show IP address&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ip add show&#xA;&#xA;# or&#xA;ifconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print previous and current SysV runlevel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;runlevel&#xA;&#xA;# or&#xA;who -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change SysV runlevel (e.g. 5)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;init 5&#xA;#or&#xA;telinit 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display all available services in all runlevels,&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chkconfig --list&#xA;# update-rc.d equivalent to chkconfig in ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check system version&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /etc/*-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Linux Programmer&#39;s Manuel: hier- description of the filesystem hierarchy&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;man hier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Control the systemd system and service manager&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g. check the status of cron service&#xA;systemctl status cron.service&#xA;&#xA;# e.g. stop cron service&#xA;systemctl stop cron.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List job&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jobs -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run a program with modified priority (e.g. ./test.sh)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# nice value is adjustable from -20 (most favorable) to +19&#xA;# the nicer the application, the lower the priority&#xA;# Default niceness: 10; default priority: 80&#xA;&#xA;nice -10 ./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Export PATH&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:~/path/you/want&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Make file executable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x filename&#xA;# you can now ./filename to execute it&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print system information&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uname -a&#xA;&#xA;# Check system hardware-platform (x86-64)&#xA;uname -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Surf the net&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;links www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add user, set passwd&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;useradd username&#xA;passwd username&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Edit PS1 variable for bash (e.g. displaying the whole path)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. vi ~/.bash_profile&#xA;2. export PS1=&#39;\u@\h:\w\$&#39;&#xA;# $PS1 is a variable that defines the makeup and style of the command prompt&#xA;# You could use emojis and add timestamp to every prompt using the following value:&#xA;# export PS1=&#34;\t@🦁:\w\$ &#34;&#xA;3. source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Edit environment setting (e.g. alias)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. vi ~/.bash_profile&#xA;2. alias pd=&#34;pwd&#34; //no more need to type that &#39;w&#39;!&#xA;3. source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print all alias&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Unalias (e.g. after alias ls=&#39;ls --color=auto&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unalias ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set and unset shell options&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# print all shell options&#xA;shopt&#xA;&#xA;# to unset (or stop) alias&#xA;shopt -u expand_aliases&#xA;&#xA;# to set (or start) alias&#xA;shopt -s expand_aliases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List environment variables (e.g. PATH)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $PATH&#xA;# list of directories separated by a colon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all environment variables for current user&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Unset environment variable (e.g. unset variable &#39;MYVAR&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unset MYVAR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show partition format&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsblk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Inform the OS of partition table changes&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;partprobe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Soft link program to bin&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -s /path/to/program /home/usr/bin&#xA;# must be the whole path to the program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show hexadecimal view of data&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hexdump -C filename.class&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Jump to different node&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rsh node_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check port (active internet connection)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;netstat -tulpn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print resolved symbolic links or canonical file names&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;readlink filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find out the type of command and where it link to (e.g. python)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;type python&#xA;# python is /usr/bin/python&#xA;# There are 5 different types, check using the &#39;type -f&#39; flag&#xA;# 1. alias    (shell alias)&#xA;# 2. function (shell function, type will also print the function body)&#xA;# 3. builtin  (shell builtin)&#xA;# 4. file     (disk file)&#xA;# 5. keyword  (shell reserved word)&#xA;&#xA;# You can also use `which`&#xA;which python&#xA;# /usr/bin/python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all functions names&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;declare -F&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List total size of a directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;du -hs .&#xA;&#xA;# or&#xA;du -sb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Copy directory with permission setting&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -rp /path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Store current directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pushd .&#xA;&#xA;# then pop&#xA;popd&#xA;&#xA;#or use dirs to display the list of currently remembered directories.&#xA;dirs -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show disk usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;df -h&#xA;&#xA;# or&#xA;du -h&#xA;&#xA;#or&#xA;du -sk /var/log/* |sort -rn |head -10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;check the Inode utilization&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;df -i&#xA;# Filesystem      Inodes  IUsed   IFree IUse% Mounted on&#xA;# devtmpfs        492652    304  492348    1% /dev&#xA;# tmpfs           497233      2  497231    1% /dev/shm&#xA;# tmpfs           497233    439  496794    1% /run&#xA;# tmpfs           497233     16  497217    1% /sys/fs/cgroup&#xA;# /dev/nvme0n1p1 5037976 370882 4667094    8% /&#xA;# tmpfs           497233      1  497232    1% /run/user/1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show all file system type&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;df -TH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show current runlevel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;runlevel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Switch runlevel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;init 3&#xA;&#xA;#or&#xA;telinit 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Permanently modify runlevel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. edit /etc/init/rc-sysinit.conf&#xA;2. env DEFAULT_RUNLEVEL=2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Become root&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Become somebody&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su somebody&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Report user quotes on device&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;repquota -auvs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get entries in a number of important databases&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;getent database_name&#xA;&#xA;# (e.g. the &#39;passwd&#39; database)&#xA;getent passwd&#xA;# list all user account (all local and LDAP)&#xA;&#xA;# (e.g. fetch list of grop accounts)&#xA;getent group&#xA;# store in database &#39;group&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change owner of file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chown user_name filename&#xA;chown -R user_name /path/to/directory/&#xA;# chown user:group filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Mount and unmount&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g. Mount /dev/sdb to /home/test&#xA;mount /dev/sdb /home/test&#xA;&#xA;# e.g. Unmount /home/test&#xA;umount /home/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List current mount detail&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mount&#xA;# or&#xA;df&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List current usernames and user-numbers&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get all username&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;getent passwd| awk &#39;{FS=&#34;[:]&#34;; print $1}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show all users&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;compgen -u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show all groups&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;compgen -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show group of user&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;group username&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show uid, gid, group of user&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;id username&#xA;&#xA;# variable for UID&#xA;echo $UID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check if it&#39;s root&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ $(id -u) -ne 0 ];then&#xA;    echo &#34;You are not root!&#34;&#xA;    exit;&#xA;fi&#xA;# &#39;id -u&#39; output 0 if it&#39;s not root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find out CPU information&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;more /proc/cpuinfo&#xA;&#xA;# or&#xA;lscpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set quota for user (e.g. disk soft limit: 120586240; hard limit: 125829120)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setquota username 120586240 125829120 0 0 /home&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show quota for user&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;quota -v username&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display current libraries from the cache&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ldconfig -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print shared library dependencies (e.g. for &#39;ls&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ldd /bin/ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check user login&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lastlog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check last reboot history&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;last reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Edit path for all users&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;joe /etc/environment&#xA;# edit this file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show and set user limit&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ulimit -u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print out number of cores/ processors&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nproc --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check status of each core&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. top&#xA;2. press &#39;1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show jobs and PID&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jobs -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all running services&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;service --status-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Schedule shutdown server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shutdown -r +5 &#34;Server will restart in 5 minutes. Please save your work.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Cancel scheduled shutdown&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shutdown -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Broadcast to all users&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wall -n hihi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Kill all process of a user&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkill -U user_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Kill all process of a program&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kill -9 $(ps aux | grep &#39;program_name&#39; | awk &#39;{print $2}&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set gedit preference on server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;# You might have to install the following:&#xA;&#xA;apt-get install libglib2.0-bin;&#xA;# or&#xA;yum install dconf dconf-editor;&#xA;yum install dbus dbus-x11;&#xA;&#xA;# Check list&#xA;gsettings list-recursively&#xA;&#xA;# Change some settings&#xA;gsettings set org.gnome.gedit.preferences.editor highlight-current-line true&#xA;gsettings set org.gnome.gedit.preferences.editor scheme &#39;cobalt&#39;&#xA;gsettings set org.gnome.gedit.preferences.editor use-default-font false&#xA;gsettings set org.gnome.gedit.preferences.editor editor-font &#39;Cantarell Regular 12&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add user to a group (e.g add user &#39;nice&#39; to the group &#39;docker&#39;, so that he can run docker without sudo)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gpasswd -a nice docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Pip install python package without root&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. pip install --user package_name&#xA;2. You might need to export ~/.local/bin/ to PATH: export PATH=$PATH:~/.local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Removing old linux kernels (when /boot almost full...)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1. uname -a  #check current kernel, which should NOT be removed&#xA;2. sudo apt-get purge linux-image-X.X.X-X-generic  #replace old version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change hostname&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo hostname your-new-name&#xA;&#xA;# if not working, do also:&#xA;hostnamectl set-hostname your-new-hostname&#xA;# then check with:&#xA;hostnamectl&#xA;# Or check /etc/hostname&#xA;&#xA;# If still not working..., edit:&#xA;/etc/sysconfig/network&#xA;/etc/sysconfig/network-scripts/ifcfg-ensxxx&#xA;#add HOSTNAME=&#34;your-new-hostname&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List installed packages&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt list --installed&#xA;&#xA;# or on Red Hat:&#xA;yum list installed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check for package update&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt list --upgradeable&#xA;&#xA;# or&#xA;sudo yum check-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run yum update excluding a package (e.g. do not update php packages)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update --exclude=php*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check which file make the device busy on umount&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsof /mnt/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;When sound not working&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;killall pulseaudio&#xA;# then press Alt-F2 and type in pulseaudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List information about SCSI devices&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsscsi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Tutorial for setting up your own DNS server&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://onceuponmine.blogspot.tw/2017/08/set-up-your-own-dns-server.html&#34;&gt;http://onceuponmine.blogspot.tw/2017/08/set-up-your-own-dns-server.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Tutorial for creating a simple daemon&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://onceuponmine.blogspot.tw/2017/07/create-your-first-simple-daemon.html&#34;&gt;http://onceuponmine.blogspot.tw/2017/07/create-your-first-simple-daemon.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Tutorial for using your gmail to send email&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://onceuponmine.blogspot.tw/2017/10/setting-up-msmtprc-and-use-your-gmail.html&#34;&gt;http://onceuponmine.blogspot.tw/2017/10/setting-up-msmtprc-and-use-your-gmail.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Using telnet to test open ports, test if you can connect to a port (e.g 53) of a server (e.g 192.168.2.106)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;telnet 192.168.2.106 53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Change network maximum transmission unit (mtu) (e.g. change to 9000)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ifconfig eth0 mtu 9000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get pid of a running process (e.g python)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pidof python&#xA;&#xA;# or&#xA;ps aux|grep python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check status of a process using PID&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ps -p &amp;lt;PID&amp;gt;&#xA;&#xA;#or&#xA;cat /proc/&amp;lt;PID&amp;gt;/status&#xA;cat /proc/&amp;lt;PID&amp;gt;/stack&#xA;cat /proc/&amp;lt;PID&amp;gt;/stat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;NTP&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start ntp:&#xA;ntpd&#xA;&#xA;# Check ntp:&#xA;ntpq -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove unnecessary files to clean your server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get autoremove&#xA;sudo apt-get clean&#xA;sudo rm -rf ~/.cache/thumbnails/*&#xA;&#xA;# Remove old kernal:&#xA;sudo dpkg --list &#39;linux-image*&#39;&#xA;sudo apt-get remove linux-image-OLDER_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Increase/ resize root partition (root partition is an LVM logical volume)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pvscan&#xA;lvextend -L +130G /dev/rhel/root -r&#xA;# Adding -r will grow filesystem after resizing the volume.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create a UEFI Bootable USB drive (e.g. /dev/sdc1)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dd if=~/path/to/isofile.iso of=/dev/sdc1 oflag=direct bs=1048576&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Locate and remove a package&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -l | grep &amp;lt;package_name&amp;gt;&#xA;sudo dpkg --purge &amp;lt;package_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create a ssh tunnel&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -f -L 9000:targetservername:8088 root@192.168.14.72 -N&#xA;#-f: run in background; -L: Listen; -N: do nothing&#xA;#the 9000 of your computer is now connected to the 8088 port of the targetservername through 192.168.14.72&#xA;#so that you can see the content of targetservername:8088 by entering localhost:9000 from your browser.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get process ID of a process (e.g. sublime_text)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#pidof&#xA;pidof sublime_text&#xA;&#xA;#pgrep, you don&#39;t have to type the whole program name&#xA;pgrep sublim&#xA;&#xA;#pgrep, echo 1 if process found, echo 0 if no such process&#xA;pgrep -q sublime_text &amp;amp;&amp;amp; echo 1 || echo 0&#xA;&#xA;#top, takes longer time&#xA;top|grep sublime_text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Some benchmarking tools for your server&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openbenchmarking.org/test/pts/aio-stress&#34;&gt;aio-stress&lt;/a&gt; - AIO benchmark.&lt;br&gt; &lt;a href=&#34;https://zsmith.co/bandwidth.html&#34;&gt;bandwidth&lt;/a&gt; - memory bandwidth benchmark.&lt;br&gt; &lt;a href=&#34;https://www.coker.com.au/bonnie++/&#34;&gt;bonnie++&lt;/a&gt; - hard drive and file system performance benchmark.&lt;br&gt; &lt;a href=&#34;https://dbench.samba.org/&#34;&gt;dbench&lt;/a&gt; - generate I/O workloads to either a filesystem or to a networked CIFS or NFS server.&lt;br&gt; &lt;a href=&#34;https://www.dnsperf.com/&#34;&gt;dnsperf&lt;/a&gt; - authorative and recursing DNS servers.&lt;br&gt; &lt;a href=&#34;https://github.com/filebench/filebench&#34;&gt;filebench&lt;/a&gt; - model based file system workload generator.&lt;br&gt; &lt;a href=&#34;https://linux.die.net/man/1/fio&#34;&gt;fio&lt;/a&gt; - I/O benchmark.&lt;br&gt; &lt;a href=&#34;https://github.com/josefbacik/fs_mark&#34;&gt;fs_mark&lt;/a&gt; - synchronous/async file creation benchmark.&lt;br&gt; &lt;a href=&#34;https://github.com/httperf/httperf&#34;&gt;httperf&lt;/a&gt; - measure web server performance.&lt;br&gt; &lt;a href=&#34;https://github.com/ckolivas/interbench&#34;&gt;interbench&lt;/a&gt; - linux interactivity benchmark.&lt;br&gt; &lt;a href=&#34;https://labs.vmware.com/flings/ioblazer&#34;&gt;ioblazer&lt;/a&gt; - multi-platform storage stack micro-benchmark.&lt;br&gt; &lt;a href=&#34;http://www.iozone.org/&#34;&gt;iozone&lt;/a&gt; - filesystem benchmark.&lt;br&gt; &lt;a href=&#34;https://iperf.fr/iperf-download.php&#34;&gt;iperf3&lt;/a&gt; - measure TCP/UDP/SCTP performance.&lt;br&gt; &lt;a href=&#34;https://github.com/knurd/kcbench&#34;&gt;kcbench&lt;/a&gt; - kernel compile benchmark, compiles a kernel and measures the time it takes.&lt;br&gt; &lt;a href=&#34;http://www.bitmover.com/lmbench/&#34;&gt;lmbench&lt;/a&gt; - Suite of simple, portable benchmarks.&lt;br&gt; &lt;a href=&#34;https://github.com/HewlettPackard/netperf&#34;&gt;netperf&lt;/a&gt; - measure network performance, test unidirectional throughput, and end-to-end latency.&lt;br&gt; &lt;a href=&#34;https://linux.die.net/man/1/netpipe&#34;&gt;netpipe&lt;/a&gt; - network protocol independent performance evaluator.&lt;br&gt; &lt;a href=&#34;http://wiki.linux-nfs.org/wiki/index.php/NFSometer&#34;&gt;nfsometer&lt;/a&gt; - NFS performance framework.&lt;br&gt; &lt;a href=&#34;https://www.nuttcp.net/Welcome%20Page.html&#34;&gt;nuttcp&lt;/a&gt; - measure network performance.&lt;br&gt; &lt;a href=&#34;https://www.phoronix-test-suite.com/&#34;&gt;phoronix-test-suite&lt;/a&gt; - comprehensive automated testing and benchmarking platform.&lt;br&gt; &lt;a href=&#34;https://github.com/fidlej/seeker&#34;&gt;seeker&lt;/a&gt; - portable disk seek benchmark.&lt;br&gt; &lt;a href=&#34;https://github.com/JoeDog/siege&#34;&gt;siege&lt;/a&gt; - http load tester and benchmark.&lt;br&gt; &lt;a href=&#34;https://github.com/Mellanox/sockperf&#34;&gt;sockperf&lt;/a&gt; - network benchmarking utility over socket API.&lt;br&gt; &lt;a href=&#34;https://linux.die.net/man/1/spew&#34;&gt;spew&lt;/a&gt; - measures I/O performance and/or generates I/O load.&lt;br&gt; &lt;a href=&#34;https://people.seas.harvard.edu/~apw/stress/&#34;&gt;stress&lt;/a&gt; - workload generator for POSIX systems.&lt;br&gt; &lt;a href=&#34;https://github.com/akopytov/sysbench&#34;&gt;sysbench&lt;/a&gt; - scriptable database and system performance benchmark.&lt;br&gt; &lt;a href=&#34;https://github.com/mkuoppal/tiobench&#34;&gt;tiobench&lt;/a&gt; - threaded IO benchmark.&lt;br&gt; &lt;a href=&#34;https://github.com/kdlucas/byte-unixbench&#34;&gt;unixbench&lt;/a&gt; - the original BYTE UNIX benchmark suite, provide a basic indicator of the performance of a Unix-like system.&lt;br&gt; &lt;a href=&#34;https://github.com/wg/wrk&#34;&gt;wrk&lt;/a&gt; - HTTP benchmark.&lt;/p&gt; &#xA;&lt;h5&gt;Performance monitoring tool - sar&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# installation&#xA;# It collects the data every 10 minutes and generate its report daily. crontab file (/etc/cron.d/sysstat) is responsible for collecting and generating reports.&#xA;yum install sysstat&#xA;systemctl start sysstat&#xA;systemctl enable sysstat&#xA;&#xA;# show CPU utilization 5 times every 2 seconds.&#xA;sar 2 5&#xA;&#xA;# show memory  utilization 5 times every 2 seconds.&#xA;sar -r 2 5&#xA;&#xA;# show paging statistics 5 times every 2 seconds.&#xA;sar -B 2 5&#xA;&#xA;# To generate all network statistic:&#xA;sar -n ALL&#xA;&#xA;# reading SAR log file using -f&#xA;sar -f /var/log/sa/sa31|tail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reading from journal file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl --file ./log/journal/a90c18f62af546ccba02fa3734f00a04/system.journal  --since &#34;2020-02-11 00:00:00&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show a listing of last logged in users.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lastb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show a listing of current logged in users, print information of them&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;who&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show who is logged on and what they are doing&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print the user names of users currently logged in to the current host.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Stop tailing a file on program terminate&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tail -f --pid=&amp;lt;PID&amp;gt; filename.txt&#xA;# replace &amp;lt;PID&amp;gt; with the process ID of the program.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all enabled services&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl list-unit-files|grep enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hardware&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Collect and summarize all hardware info of your machine&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lshw -json &amp;gt;report.json&#xA;# Other options are: [ -html ]  [ -short ]  [ -xml ]  [ -json ]  [ -businfo ]  [ -sanitize ] ,etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Finding Out memory device detail&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dmidecode -t memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print detail of CPU hardware&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dmidecode -t 4&#xA;#          Type   Information&#xA;#          0   BIOS&#xA;#          1   System&#xA;#          2   Base Board&#xA;#          3   Chassis&#xA;#          4   Processor&#xA;#          5   Memory Controller&#xA;#          6   Memory Module&#xA;#          7   Cache&#xA;#          8   Port Connector&#xA;#          9   System Slots&#xA;#         11   OEM Strings&#xA;#         13   BIOS Language&#xA;#         15   System Event Log&#xA;#         16   Physical Memory Array&#xA;#         17   Memory Device&#xA;#         18   32-bit Memory Error&#xA;#         19   Memory Array Mapped Address&#xA;#         20   Memory Device Mapped Address&#xA;#         21   Built-in Pointing Device&#xA;#         22   Portable Battery&#xA;#         23   System Reset&#xA;#         24   Hardware Security&#xA;#         25   System Power Controls&#xA;#         26   Voltage Probe&#xA;#         27   Cooling Device&#xA;#         28   Temperature Probe&#xA;#         29   Electrical Current Probe&#xA;#         30   Out-of-band Remote Access&#xA;#         31   Boot Integrity Services&#xA;#         32   System Boot&#xA;#         34   Management Device&#xA;#         35   Management Device Component&#xA;#         36   Management Device Threshold Data&#xA;#         37   Memory Channel&#xA;#         38   IPMI Device&#xA;#         39   Power Supply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Count the number of Segate hard disks&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsscsi|grep SEAGATE|wc -l&#xA;# or&#xA;sg_map -i -x|grep SEAGATE|wc -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get UUID of a disk (e.g. sdb)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsblk -f /dev/sdb&#xA;&#xA;# or&#xA;sudo blkid /dev/sdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Generate an UUID&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uuidgen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print detail of all hard disks&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsblk -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA&#xA;#where ROTA means rotational device / spinning hard disks (1 if true, 0 if false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all PCI (Peripheral Component Interconnect) devices&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lspci&#xA;# List information about NIC&#xA;lspci | egrep -i --color &#39;network|ethernet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List all USB devices&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsusb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Linux modules&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Show the status of modules in the Linux Kernel&#xA;lsmod&#xA;&#xA;# Add and remove modules from the Linux Kernel&#xA;modprobe&#xA;&#xA;# or&#xA;# Remove a module&#xA;rmmod&#xA;&#xA;# Insert a module&#xA;insmod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Controlling IPMI-enabled devices (e.g. BMC)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Remotely finding out power status of the server&#xA;ipmitool -U &amp;lt;bmc_username&amp;gt; -P &amp;lt;bmc_password&amp;gt; -I lanplus -H &amp;lt;bmc_ip_address&amp;gt; power status&#xA;&#xA;# Remotely switching on server&#xA;ipmitool -U &amp;lt;bmc_username&amp;gt; -P &amp;lt;bmc_password&amp;gt; -I lanplus -H &amp;lt;bmc_ip_address&amp;gt; power on&#xA;&#xA;# Turn on panel identify light (default 15s)&#xA;ipmitool chassis identify 255&#xA;&#xA;# Found out server sensor temperature&#xA;ipmitool sensors |grep -i Temp&#xA;&#xA;# Reset BMC&#xA;ipmitool bmc reset cold&#xA;&#xA;# Prnt BMC network&#xA;ipmitool lan print 1&#xA;&#xA;# Setting BMC network&#xA;ipmitool -I bmc lan set 1 ipaddr 192.168.0.55&#xA;ipmitool -I bmc lan set 1 netmask 255.255.255.0&#xA;ipmitool -I bmc lan set 1 defgw ipaddr 192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Networking&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Resolve a domain to IP address(es)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dig +short www.example.com&#xA;&#xA;# or&#xA;host www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get DNS TXT record a of domain&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dig -t txt www.example.com&#xA;&#xA;# or&#xA;host -t txt www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Send a ping with a limited TTL to 10 (TTL: Time-To-Live, which is the maximum number of hops that a packet can travel across the Internet before it gets discarded.)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ping 8.8.8.8 -t 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print the route packets trace to network host&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;traceroute google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check connection to host (e.g. check connection to port 80 and 22 of google.com)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc -vw5 google.com 80&#xA;# Connection to google.com 80 port [tcp/http] succeeded!&#xA;&#xA;nc -vw5 google.com 22&#xA;# nc: connect to google.com port 22 (tcp) timed out: Operation now in progress&#xA;# nc: connect to google.com port 22 (tcp) failed: Network is unreachable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Nc as a chat tool!&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From server A:&#xA;$ sudo nc -l 80&#xA;# then you can connect to the 80 port from another server (e.g. server B):&#xA;# e.g. telnet &amp;lt;server A IP address&amp;gt; 80&#xA;# then type something in server B&#xA;# and you will see the result in server A!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check which ports are listening for TCP connections from the network&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#notice that some companies might not like you using nmap&#xA;nmap -sT -O localhost&#xA;&#xA;# check port 0-65535&#xA;nmap  -p0-65535 localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check if a host is up and scan for open ports, also skip host discovery.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#skips checking if the host is alive which may sometimes cause a false positive and stop the scan.&#xA;$ nmap google.com -Pn&#xA;&#xA;# Example output:&#xA;# Starting Nmap 7.01 ( https://nmap.org ) at 2020-07-18 22:59 CST&#xA;# Nmap scan report for google.com (172.217.24.14)&#xA;# Host is up (0.013s latency).&#xA;# Other addresses for google.com (not scanned): 2404:6800:4008:802::200e&#xA;# rDNS record for 172.217.24.14: tsa01s07-in-f14.1e100.net&#xA;# Not shown: 998 filtered ports&#xA;# PORT    STATE SERVICE&#xA;# 80/tcp  open  http&#xA;# 443/tcp open  https&#xA;#&#xA;# Nmap done: 1 IP address (1 host up) scanned in 3.99 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scan for open ports and OS and version detection (e.g. scan the domain &#34;scanme.nmap.org&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nmap -A -T4 scanme.nmap.org&#xA;# -A to enable OS and version detection, script scanning, and traceroute; -T4 for faster execution&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Look up website information (e.g. name server), searches for an object in a RFC 3912 database.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;whois google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show the SSL certificate of a domain&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl s_client -showcerts -connect www.example.com:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display IP address&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ip a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display route table&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ip r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display ARP cache (ARP cache displays the MAC addresses of device in the same network that you have connected to)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ip n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add transient IP addres (reset after reboot) (e.g. add 192.168.140.3/24 to device eno16777736)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ip address add 192.168.140.3/24 dev eno16777736&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Persisting network configuration changes&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/sysconfig/network-scripts/ifcfg-enoxxx&#xA;# then edit the fields: BOOTPROT, DEVICE, IPADDR, NETMASK, GATEWAY, DNS1 etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Refresh NetworkManager&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nmcli c reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Restart all interfaces&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart network.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;To view hostname, OS, kernal, architecture at the same time!&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hostnamectl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set hostname (set all transient, static, pretty hostname at once)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hostnamectl set-hostname &#34;mynode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find out the web server (e.g Nginx or Apache) of a website&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -I http://example.com/&#xA;# HTTP/1.1 200 OK&#xA;# Server: nginx&#xA;# Date: Thu, 02 Jan 2020 07:01:07 GMT&#xA;# Content-Type: text/html&#xA;# Content-Length: 1119&#xA;# Connection: keep-alive&#xA;# Vary: Accept-Encoding&#xA;# Last-Modified: Mon, 09 Sep 2019 10:37:49 GMT&#xA;# ETag: &#34;xxxxxx&#34;&#xA;# Accept-Ranges: bytes&#xA;# Vary: Accept-Encoding&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find out the http status code of a URL&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s -o /dev/null -w &#34;%{http_code}&#34; https://www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Unshorten a shortended URL&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s -o /dev/null -w &#34;%{redirect_url}&#34; https://bit.ly/34EFwWC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Perform network throughput tests&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# server side:&#xA;$ sudo iperf -s -p 80&#xA;&#xA;# client side:&#xA;iperf -c &amp;lt;server IP address&amp;gt; --parallel 2 -i 1 -t 2 -p 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;To block port 80 (HTTP server) using iptables.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo iptables -A INPUT -p tcp --dport 80 -j DROP&#xA;&#xA;# only block connection from an IP address&#xA;sudo iptables –A INPUT –s &amp;lt;IP&amp;gt; -p tcp –dport 80 –j DROP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data wrangling&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Print some words that start with a particular string (e.g. words start with &#39;phy&#39;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# If file is not specified, the file /usr/share/dict/words is used.&#xA;look phy|head -n 10&#xA;# phycic&#xA;# Phyciodes&#xA;# phycite&#xA;# Phycitidae&#xA;# phycitol&#xA;# phyco-&#xA;# phycochrom&#xA;# phycochromaceae&#xA;# phycochromaceous&#xA;# phycochrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Repeat printing string n times (e.g. print &#39;hello world&#39; five times)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;printf &#39;hello world\n%.0s&#39; {1..5}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Do not echo the trailing newline&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;username=`echo -n &#34;bashoneliner&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Copy a file to multiple files (e.g copy fileA to file(B-D))&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tee &amp;lt;fileA fileB fileC fileD &amp;gt;/dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete all non-printing characters&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tr -dc &#39;[:print:]&#39; &amp;lt; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove newline / nextline&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tr --delete &#39;\n&#39; &amp;lt;input.txt &amp;gt;output.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Replace newline&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tr &#39;\n&#39; &#39; &#39; &amp;lt;filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;To uppercase/lowercase&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tr /a-z/ /A-Z/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Translate a range of characters (e.g. substitute a-z into a)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;something&#39; |tr a-z a&#xA;# aaaaaaaaa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Compare two files (e.g. fileA, fileB)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;diff fileA fileB&#xA;# a: added; d:delete; c:changed&#xA;&#xA;# or&#xA;sdiff fileA fileB&#xA;# side-to-side merge of file differences&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Compare two files, strip trailing carriage return/ nextline (e.g. fileA, fileB)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;diff fileA fileB --strip-trailing-cr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find common/differing lines&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# having two sorted and uniqed files (for example after running `$ sort -uo fileA fileA` and same for fileB):&#xA;# ------&#xA;# fileA:&#xA;# ------&#xA;# joey&#xA;# kitten&#xA;# piglet&#xA;# puppy&#xA;# ------&#xA;# fileB:&#xA;# ------&#xA;# calf&#xA;# chick&#xA;# joey&#xA;# puppy&#xA;#&#xA;# Find lines in both files&#xA;comm -12 fileA fileB&#xA;# joey&#xA;# puppy&#xA;#&#xA;# Find lines in fileB that are NOT in fileA&#xA;comm -13 fileA fileB&#xA;# calf&#xA;# chick&#xA;#&#xA;# Find lines in fileA that are NOT in fileB&#xA;comm -23 fileA fileB&#xA;# kitten&#xA;# piglet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Number a file (e.g. fileA)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nl fileA&#xA;&#xA;#or&#xA;nl -nrz fileA&#xA;# add leading zeros&#xA;&#xA;#or&#xA;nl -w1 -s &#39; &#39;&#xA;# making it simple, blank separate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Join two files field by field with tab (default join by the first column of both file, and default separator is space)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# fileA and fileB should have the same ordering of lines.&#xA;join -t &#39;\t&#39; fileA fileB&#xA;&#xA;# Join using specified field (e.g. column 3 of fileA and column 5 of fileB)&#xA;join -1 3 -2 5 fileA fileB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Combine/ paste two or more files into columns (e.g. fileA, fileB, fileC)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;paste fileA fileB fileC&#xA;# default tab separate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Group/combine rows into one row&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g.&#xA;# AAAA&#xA;# BBBB&#xA;# CCCC&#xA;# DDDD&#xA;cat filename|paste - -&#xA;# AAAABBBB&#xA;# CCCCDDDD&#xA;cat filename|paste - - - -&#xA;# AAAABBBBCCCCDDDD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fastq to fasta (fastq and fasta are common file formats for bioinformatics sequence data)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat file.fastq | paste - - - - | sed &#39;s/^@/&amp;gt;/g&#39;| cut -f1-2 | tr &#39;\t&#39; &#39;\n&#39; &amp;gt;file.fa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reverse string&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo 12345| rev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Generate sequence 1-10&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;seq 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find average of input list/file of integers&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;i=`wc -l filename|cut -d &#39; &#39; -f1`; cat filename| echo &#34;scale=2;(`paste -sd+`)/&#34;$i|bc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Generate all combination (e.g. 1,2)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo {1,2}{1,2}&#xA;# 1 1, 1 2, 2 1, 2 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Generate all combination (e.g. A,T,C,G)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set = {A,T,C,G}&#xA;group= 5&#xA;for ((i=0; i&amp;lt;$group; i++)); do&#xA;    repetition=$set$repetition; done&#xA;    bash -c &#34;echo &#34;$repetition&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Read file content to variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foo=$(&amp;lt;test1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Echo size of variable&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo ${#foo}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Echo a tab&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo -e &#39; \t &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Split file into smaller file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Split by line (e.g. 1000 lines/smallfile)&#xA;split -d -l 1000 largefile.txt&#xA;&#xA;# Split by byte without breaking lines across files&#xA;split -C 10 largefile.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create a large amount of dummy files (e.g 100000 files, 10 bytes each):&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#1. Create a big file&#xA;dd if=/dev/zero of=bigfile bs=1 count=1000000&#xA;&#xA;#2. Split the big file to 100000 10-bytes files&#xA; split -b 10 -a 10 bigfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Rename all files (e.g. remove ABC from all .gz files)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rename &#39;s/ABC//&#39; *.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remove file extension (e.g remove .gz from filename.gz)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;basename filename.gz .gz&#xA;&#xA;zcat filename.gz&amp;gt; $(basename filename.gz .gz).unpacked&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add file extension to all file(e.g add .txt)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rename s/$/.txt/ *&#xA;# You can use rename -n s/$/.txt/ * to check the result first, it will only print sth like this:&#xA;# rename(a, a.txt)&#xA;# rename(b, b.txt)&#xA;# rename(c, c.txt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Squeeze repeat patterns (e.g. /t/t --&amp;gt; /t)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tr -s &#34;/t&#34; &amp;lt; filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Do not print nextline with echo&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo -e &#39;text here \c&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;View first 50 characters of file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;head -c 50 file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Cut and get last column of a file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat file|rev | cut -d/ -f1 | rev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add one to variable/increment/ i++ a numeric variable (e.g. $var)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;((var++))&#xA;# or&#xA;var=$((var+1))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Cut the last column&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat filename|rev|cut -f1|rev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create or replace a file with contents&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt;myfile&#xA;let me add sth here&#xA;# exit with ctrl+d&#xA;&#xA;# or using tee&#xA;tee myfile&#xA;let me add sth else here&#xA;# exit with ctrl+d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Append to a file with contents&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt;&amp;gt;myfile&#xA;let me add sth here&#xA;# exit with ctrl+d&#xA;&#xA;# or using tee&#xA;tee -a myfile&#xA;let me add sth else here&#xA;# exit with ctrl+d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Clear the contents of a file (e.g. filename)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Append to file (e.g. hihi)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;hihi&#39; &amp;gt;&amp;gt;filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Working with json data&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#install the useful jq package&#xA;#sudo apt-get install jq&#xA;#e.g. to get all the values of the &#39;url&#39; key, simply pipe the json to the following jq command(you can use .[]. to select inner json, i.e jq &#39;.[].url&#39;)&#xA;cat file.json | jq &#39;.url&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Decimal to Binary (e.g get binary of 5)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;D2B=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})&#xA;echo -e ${D2B[5]}&#xA;#00000101&#xA;echo -e ${D2B[255]}&#xA;#11111111&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Wrap each input line to fit in specified width (e.g 4 integers per line)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;00110010101110001101&#34; | fold -w4&#xA;# 0011&#xA;# 0010&#xA;# 1011&#xA;# 1000&#xA;# 1101&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Sort a file by column and keep the original order&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sort -k3,3 -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Right align a column (right align the 2nd column)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat file.txt|rev|column -t|rev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;To both view and store the output&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;hihihihi&#39; | tee outputfile.txt&#xA;# use &#39;-a&#39; with tee to append to file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Show non-printing (Ctrl) characters with cat&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat -v filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Convert tab to space&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;expand filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Convert space to tab&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unexpand filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Display file in octal ( you can also use od to display hexadecimal, decimal, etc)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;od filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reverse cat a file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tac filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reverse the result from &lt;code&gt;uniq -c&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;while read a b; do yes $b |head -n $a ; done &amp;lt;test.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Others&lt;/h2&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/#handy-bash-one-liners&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h5&gt;Describe the format and characteristics of image files.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;identify myimage.png&#xA;#myimage.png PNG 1049x747 1049x747+0+0 8-bit sRGB 1.006MB 0.000u 0:00.000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Bash auto-complete (e.g. show options &#34;now tomorrow never&#34; when you press&#39;tab&#39; after typing &#34;dothis&#34;)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://iridakos.com/tutorials/2018/03/01/bash-programmable-completion-tutorial.html&#34;&gt;More examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;complete -W &#34;now tomorrow never&#34; dothis&#xA;# ~$ dothis  &#xA;# never     now       tomorrow&#xA;# press &#39;tab&#39; again to auto-complete after typing &#39;n&#39; or &#39;t&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Displays a calendar&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# print the current month, today will be highlighted.&#xA;cal&#xA;# October 2019      &#xA;# Su Mo Tu We Th Fr Sa  &#xA;#    1  2  3  4  5  &#xA;# 6  7  8  9 10 11 12  &#xA;# 13 14 15 16 17 18 19  &#xA;# 20 21 22 23 24 25 26  &#xA;# 27 28 29 30 31  &#xA;&#xA;# only display November&#xA;cal -m 11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Convert the hexadecimal MD5 checksum value into its base64-encoded format.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl md5 -binary /path/to/file| base64&#xA;# NWbeOpeQbtuY0ATWuUeumw==&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Forces applications to use the default language for output&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export LC_ALL=C&#xA;&#xA;# to revert:&#xA;unset LC_ALL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Encode strings as Base64 strings&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo test|base64&#xA;#dGVzdAo=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get parent directory of current directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dirname `pwd`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Read .gz file without extracting&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zmore filename&#xA;&#xA;# or&#xA;zless filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run command in background, output error file&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;some_commands  &amp;amp;&amp;gt;log &amp;amp;&#xA;&#xA;# or&#xA;some_commands 2&amp;gt;log &amp;amp;&#xA;&#xA;# or&#xA;some_commands 2&amp;gt;&amp;amp;1| tee logfile&#xA;&#xA;# or&#xA;some_commands |&amp;amp; tee logfile&#xA;&#xA;# or&#xA;some_commands 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt;outfile&#xA;#0: standard input; 1: standard output; 2: standard error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run multiple commands in background&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run sequentially&#xA;(sleep 2; sleep 3) &amp;amp;&#xA;&#xA;# run parallelly&#xA;sleep 2 &amp;amp; sleep 3 &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run process even when logout (immune to hangups, with output to a non-tty)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g. Run myscript.sh even when log out.&#xA;nohup bash myscript.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Send mail&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;heres the content&#39;| mail -a /path/to/attach_file.txt -s &#39;mail.subject&#39; me@gmail.com&#xA;# use -a flag to set send from (-a &#34;From: some@mail.tld&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Convert .xls to csv&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xls2csv filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Make BEEP sound&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;speaker-test -t sine -f 1000 -l1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set beep duration&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(speaker-test -t sine -f 1000) &amp;amp; pid=$!;sleep 0.1s;kill -9 $pid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Editing your history&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;history -w&#xA;vi ~/.bash_history&#xA;history -r&#xA;&#xA;#or&#xA;history -d [line_number]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Interacting with history&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# list 5 previous command (similar to `history |tail -n 5` but wont print the history command itself)&#xA;fc -l -5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete current bash command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Ctrl+U&#xA;&#xA;# or&#xA;Ctrl+C&#xA;&#xA;# or&#xA;Alt+Shift+#&#xA;# to make it to history&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Add something to history (e.g. &#34;addmetohistory&#34;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# addmetodistory&#xA;# just add a &#34;#&#34; before~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get last history/record filename&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;head !$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Clean screen&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clear&#xA;# or simply Ctrl+l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Backup with rsync&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rsync -av filename filename.bak&#xA;rsync -av directory directory.bak&#xA;rsync -av --ignore_existing directory/ directory.bak&#xA;rsync -av --update directory directory.bak&#xA;&#xA;rsync -av directory user@ip_address:/path/to/directory.bak&#xA;# skip files that are newer on receiver (i prefer this one!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create a temporary directory and &lt;code&gt;cd&lt;/code&gt; into it&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd $(mktemp -d)&#xA;# for example, this will create a temporary directory &#34;/tmp/tmp.TivmPLUXFT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Make all directories at one time!&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat}&#xA;# -p: make parent directory&#xA;# this will create:&#xA;# project/&#xA;# project/bin/&#xA;# project/demo/&#xA;# project/demo/stat/&#xA;# project/doc/&#xA;# project/doc/html/&#xA;# project/doc/info/&#xA;# project/doc/pdf/&#xA;# project/lib/&#xA;# project/lib/ext/&#xA;# project/src/&#xA;#&#xA;# project/&#xA;# ├── bin&#xA;# ├── demo&#xA;# │   └── stat&#xA;# ├── doc&#xA;# │   ├── html&#xA;# │   ├── info&#xA;# │   └── pdf&#xA;# ├── lib&#xA;# │   └── ext&#xA;# └── src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run command only if another command returns zero exit status (well done)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd tmp/ &amp;amp;&amp;amp; tar xvf ~/a.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run command only if another command returns non-zero exit status (not finish)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd tmp/a/b/c ||mkdir -p tmp/a/b/c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use backslash &#34;&#34; to break long command&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd tmp/a/b/c \&#xA;&amp;gt; || \&#xA;&amp;gt;mkdir -p tmp/a/b/c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List file type of file (e.g. /tmp/)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;file /tmp/&#xA;# tmp/: directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Writing Bash script (&#39;#!&#39;&#39; is called shebang )&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;file=${1#*.}&#xA;# remove string before a &#34;.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Python simple HTTP Server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m SimpleHTTPServer&#xA;# or when using python3:&#xA;python3 -m http.server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Read user input&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;read input&#xA;echo $input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Array&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;declare -a array=()&#xA;&#xA;# or&#xA;declare array=()&#xA;&#xA;# or associative array&#xA;declare -A array=()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Send a directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp -r directoryname user@ip:/path/to/send&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fork bomb&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Don&#39;t try this at home!&#xA;# It is a function that calls itself twice every call until you run out of system resources.&#xA;# A &#39;# &#39; is added in front for safety reason, remove it when seriously you are testing it.&#xA;# :(){:|:&amp;amp;};:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use the last argument&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Check last exit code&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Extract .xz&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;unxz filename.tar.xz&#xA;# then&#xA;tar -xf filename.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Unzip tar.bz2 file (e.g. file.tar.bz2)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar xvfj file.tar.bz2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Unzip tar.xz file (e.g. file.tar.xz)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unxz file.tar.xz&#xA;tar xopf file.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Extract to a path&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar xvf -C /path/to/directory filename.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Zip the content of a directory without including the directory itself&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First cd to the directory, they run:&#xA;zip -r -D ../myzipfile .&#xA;# you will see the myzipfile.zip in the parent directory (cd ..)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Output a y/n repeatedly until killed&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# &#39;y&#39;:&#xA;yes&#xA;&#xA;# or &#39;n&#39;:&#xA;yes n&#xA;&#xA;# or &#39;anything&#39;:&#xA;yes anything&#xA;&#xA;# pipe yes to other command&#xA;yes | rm -r large_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create large dummy file of certain size instantly (e.g. 10GiB)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fallocate -l 10G 10Gigfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create dummy file of certain size (e.g. 200mb)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dd if=/dev/zero of=/dev/shm/200m bs=1024k count=200&#xA;# or&#xA;dd if=/dev/zero of=/dev/shm/200m bs=1M count=200&#xA;&#xA;# Standard output:&#xA;# 200+0 records in&#xA;# 200+0 records out&#xA;# 209715200 bytes (210 MB) copied, 0.0955679 s, 2.2 GB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Keep /repeatedly executing the same command (e.g Repeat &#39;wc -l filename&#39; every 1 second)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;watch -n 1 wc -l filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use Bash Strict Mode&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# These options can make your code safer but, depending on how your pipeline is written, it might be too aggressive &#xA;# or it might not catch the errors that you are interested in&#xA;&#xA;# for reference see https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425&#xA;#               and https://mywiki.wooledge.org/BashPitfalls#set_-euo_pipefail&#xA;&#xA;set -o errexit      # exit immediately if a pipeline returns a non-zero status&#xA;set -o errtrace     # trap ERR from shell functions, command substitutions, and commands from subshell&#xA;set -o nounset      # treat unset variables as an error&#xA;set -o pipefail     # pipe will exit with last non-zero status, if applicable&#xA;set -Eue -o pipefail  # shorthand for above (pipefail has no short option)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print commands and their arguments when execute (e.g. echo &lt;code&gt;expr 10 + 20 &lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set -x; echo `expr 10 + 20 `&#xA;# or&#xA;set -o xtrace; echo `expr 10 + 20 `&#xA;&#xA;# to turn it off..&#xA;set +x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Print some meaningful sentences to you (install fortune first)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fortune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Colorful (and useful) version of top (install htop first)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;htop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Press any key to continue&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;read -rsp $&#39;Press any key to continue...\n&#39; -n1 key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run sql-like command on files from terminal&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# download:&#xA;# https://github.com/harelba/q&#xA;# example:&#xA;q -d &#34;,&#34; &#34;select c3,c4,c5 from /path/to/file.txt where c3=&#39;foo&#39; and c5=&#39;boo&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Screen for multiple terminal sessions&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create session and attach:&#xA;screen&#xA;&#xA;# Create a screen and name it &#39;test&#39;&#xA;screen -S test&#xA;&#xA;# Create detached session foo:&#xA;screen -S foo -d -m&#xA;&#xA;# Detached session foo:&#xA;screen: ^a^d&#xA;&#xA;# List sessions:&#xA;screen -ls&#xA;&#xA;# Attach last session:&#xA;screen -r&#xA;&#xA;# Attach to session foo:&#xA;screen -r foo&#xA;&#xA;# Kill session foo:&#xA;screen -r foo -X quit&#xA;&#xA;&#xA;# Scroll:&#xA;# Hit your screen prefix combination (C-a / control+A), then hit Escape.&#xA;# Move up/down with the arrow keys (↑ and ↓).  &#xA;&#xA;# Redirect output of an already running process in Screen:&#xA;# (C-a / control+A), then hit &#39;H&#39;  &#xA;&#xA;# Store screen output for Screen:&#xA;# Ctrl+A, Shift+H  &#xA;# You will then find a screen.log file under current directory.  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Tmux for multiple terminal sessions&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create session and attach:&#xA;tmux&#xA;&#xA;# Attach to session foo:&#xA;tmux attach -t foo&#xA;&#xA;# Detached session foo:&#xA;^bd&#xA;&#xA;# List sessions:&#xA;tmux ls&#xA;&#xA;# Attach last session:&#xA;tmux attach&#xA;&#xA;# Kill session foo:&#xA;tmux kill-session -t foo&#xA;&#xA;# Create detached session foo:&#xA;tmux new -s foo -d&#xA;&#xA;# Send command to all panes in tmux:&#xA;Ctrl-B&#xA;:setw synchronize-panes&#xA;&#xA;# Some tmux pane control commands:&#xA;Ctrl-B&#xA;#   Panes (splits), Press Ctrl+B, then input the following symbol:&#xA;#   %  horizontal split&#xA;#   &#34;  vertical split&#xA;#   o  swap panes&#xA;#   q  show pane numbers&#xA;#   x  kill pane&#xA;#   space - toggle between layouts&#xA;&#xA;#   Distribute Vertically (rows):&#xA;select-layout even-vertical&#xA;#   or&#xA;Ctrl+b, Alt+2&#xA;&#xA;# Distribute horizontally (columns):&#xA;select-layout even-horizontal&#xA;#   or&#xA;Ctrl+b, Alt+1&#xA;&#xA;# Scroll&#xA;Ctrl-b then \[ then you can use your normal navigation keys to scroll around.&#xA;Press q to quit scroll mode.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Pass password to ssh&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sshpass -p mypassword ssh root@10.102.14.88 &#34;df -h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Wait for a pid (job) to complete&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wait %1&#xA;# or&#xA;wait $PID&#xA;wait ${!}&#xA;#wait ${!} to wait till the last background process ($! is the PID of the last background process)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Convert pdf to txt&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install poppler-utils&#xA;pdftotext example.pdf example.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List only directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -d */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List one file per line.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -1&#xA;# or list all, do not ignore entries starting with .&#xA;ls -1a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Capture/record/save terminal output (capture everything you type and output)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;script output.txt&#xA;# start using terminal&#xA;# to logout the screen session (stop saving the contents), type exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;List contents of directories in a tree-like format.&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tree&#xA;# go to the directory you want to list, and type tree (sudo apt-get install tree)&#xA;# output:&#xA;# home/&#xA;# └── project&#xA;#     ├── 1&#xA;#     ├── 2&#xA;#     ├── 3&#xA;#     ├── 4&#xA;#     └── 5&#xA;#&#xA;&#xA;# set level directories deep (e.g. level 1)&#xA;tree -L 1&#xA;# home/&#xA;# └── project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Set up virtualenv(sandbox) for python&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. install virtualenv.&#xA;sudo apt-get install virtualenv&#xA;# 2. Create a directory (name it .venv or whatever name your want) for your new shiny isolated environment.&#xA;virtualenv .venv&#xA;# 3. source virtual bin&#xA;source .venv/bin/activate&#xA;# 4. you can check check if you are now inside a sandbox.&#xA;type pip&#xA;# 5. Now you can install your pip package, here requirements.txt is simply a txt file containing all the packages you want. (e.g tornado==4.5.3).&#xA;pip install -r requirements.txt&#xA;# 6. Exit virtual environment&#xA;deactivate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More coming!!&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>cocos/cocos-engine</title>
    <updated>2024-08-11T01:28:02Z</updated>
    <id>tag:github.com,2024-08-11:/cocos/cocos-engine</id>
    <link href="https://github.com/cocos/cocos-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cocos simplifies game creation and distribution with Cocos Creator, a free, open-source, cross-platform game engine. Empowering millions of developers to create high-performance, engaging 2D/3D games and instant web entertainment.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.cocos.com/&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1503156/112012067-d5cdf580-8b63-11eb-819a-1c32cf253b25.png&#34; alt=&#34;Cocos Creator Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/cocos/cocos-engine/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/cocos/cocos-engine.svg?style=flat-square&amp;amp;colorB=4183c4&#34; alt=&#34;stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/cocos-creator/engine/network&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/cocos/cocos-engine.svg?style=flat-square&amp;amp;colorB=4183c4&#34; alt=&#34;forks&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.4/licenses/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&amp;amp;colorB=4183c4&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/CocosEngine&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/CocosEngine.svg?logo=twitter&amp;amp;label=follow&amp;amp;style=flat-square&amp;amp;colorB=4183c4&#34; alt=&#34;twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Engine for Cocos Creator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cocos Creator is the new generation of game development tool in Cocos family, it brings a complete set of 3D and 2D features while providing an intuitive, low cost and collaboration friendly workflow to game developers.&lt;/strong&gt; Cocos Engine is the runtime framework for Cocos Creator editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.4/ui.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cocos Creator inherited many good qualities and cool features from its previous versions, such as high performance low level C++ implementation, intuitive editor, cross-platform support. It supports native platforms, web platforms and rapidly expanding instant gaming platforms, including Windows, Mac, iOS, Android, HarmonyOS, Web, Facebook Instant Games, WeChat Mini Game and TikTok Mini Games.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, Cocos Creator has pushed the engine technology to a whole new level for high performance with scalability on various platforms, full extensibility and easy development.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern Graphics&lt;/strong&gt;: The GFX implementation is designed to adapt to the modern graphics APIs, it uses Vulkan on Windows and Android, Metal on Mac OS and iOS, WebGL on Web platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: The runtime engine is built with half C++ and half TypeScript, low level infrastructure, native platform adaptation, renderer and scene management are all written in C++ to ensure high runtime performance. We continue to move heavy lifting work to native as much as possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable Render Pipeline&lt;/strong&gt;: The render pipeline is designed to be fully customizable, it has supported the builtin forward and deferred render pipeline across all platforms. Developers can customize their own render pipeline following the same approach.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible Surface Shader&lt;/strong&gt;: The material system is built on Cocos effect format which uses GLSL 300, the shader programs will be converted to suitable runtime format automatically. The surface shader permit to fully customize the surface material while ensuring universal lighting model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Physically Based Rendering (PBR)&lt;/strong&gt;: The standard effect adopts physically based rendering, along with the physically based camera and the lighting based on physical metrics, developers can easily achieve realistic and seamless rendering results across different environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy TypeScript API&lt;/strong&gt;: The user level API set is provided in TypeScript, along with the powerful VSCode editor, development with Cocos Creator is incredibly efficient.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Besides all these highlights, Cocos Creator also provides builtin animation system, physics system, particle system, terrain editing support, complex UI system, instant preview etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1503156/111037166-f27c7600-845d-11eb-988f-4c2c8b5c7321.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This open source repository is the runtime engine of Cocos Creator, the engine is naturally integrated within Cocos Creator, designed to only be the essential runtime library and not to be used independently.&lt;/p&gt; &#xA;&lt;h2&gt;Development and Contribution Notice&lt;/h2&gt; &#xA;&lt;p&gt;Cocos Creator engine is open source and welcomes community participation, for open source engine development with Cocos Creator editor, you should fork this repository and setup &lt;a href=&#34;https://docs.cocos.com/creator/manual/en/advanced-topics/engine-customization.html&#34;&gt;custom engine&lt;/a&gt; in the editor.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisite&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js v9.11.2 +&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/gulpjs/gulp/tree/master/docs/getting-started&#34;&gt;gulp-cli v2.3.0 +&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clone&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository into your local environment.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;In the cloned engine folder, run the following command to setup development environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# download &amp;amp; build engine dependencies&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is all you have to do to setup engine development environment.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If running inside Cocos Creator, the engine will automatically compile and build after the editor window is opened. For more instructions on modifying the engine in Cocos Creator, please refer to &lt;a href=&#34;https://docs.cocos.com/creator/manual/en/advanced-topics/engine-customization.html&#34;&gt;Engine Customization Workflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Outside the editor, you need to run the following command to build:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.4/native/README.md&#34;&gt;native readme&lt;/a&gt; if you want to develop native applications.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;You can contribute to the Cocos Creator open source engine in many ways, they are very much appreciated:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Report bug or feature requests by &lt;a href=&#34;https://github.com/cocos/cocos-engine/issues/new/choose&#34;&gt;creating an issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Participate discussions in the &lt;a href=&#34;https://github.com/cocos/cocos-engine/issues/&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request if you have fixed or improved anything, implemented any features.&lt;/li&gt; &#xA; &lt;li&gt;Improve the documentations with pull request to the &lt;a href=&#34;https://github.com/cocos/cocos-docs&#34;&gt;usage documentation repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Help other developers in our &lt;a href=&#34;https://discuss.cocos2d-x.org/c/creator&#34;&gt;Forum&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Contribution notice&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to make a pull request, there are some requirements that must be met so that your pull request can be accepted:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow our &lt;a href=&#34;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.4/docs/CPP_CODING_STYLE.md&#34;&gt;Cpp Coding Style Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.4/docs/TS_CODING_STYLE.md&#34;&gt;TypeScript Coding Style Reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Try to integrate ESLint and &lt;a href=&#34;https://raw.githubusercontent.com/cocos/cocos-engine/v3.8.4/docs/CPP_LINTER_AUTOFIX_GUIDE.md&#34;&gt;CPP auto fix tools&lt;/a&gt; in your coding environment.&lt;/li&gt; &#xA; &lt;li&gt;Link related issues or discussions in your pull request and clearly state the purpose of your pull request.&lt;/li&gt; &#xA; &lt;li&gt;Pass all automatic continuous integration tests.&lt;/li&gt; &#xA; &lt;li&gt;Request file owner or engine developers to review your pull request.&lt;/li&gt; &#xA; &lt;li&gt;Get one valid approval from the engine architects.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example Project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocos/cocos-tutorial-mind-your-step&#34;&gt;Mind Your Step 3D&lt;/a&gt;: Beginner&#39;s step-by-step tutorial project repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocos/cocos-test-projects&#34;&gt;Test Cases&lt;/a&gt;: Unit test scenes for every engine module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocos/cocos-example-projects&#34;&gt;Example Cases&lt;/a&gt;: Simple yet expressive demo scenes for baseline testing and topic-specific case study.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocos/awesome-cocos&#34;&gt;Awesome Cocos&lt;/a&gt;: You can find out other useful tools and show cases here.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cocos.com/&#34;&gt;Official site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cocos.com/en/creator/download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cocos.com/creator/manual/en/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cocos.com/creator/api/en/&#34;&gt;API References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/cocos/projects?query=is%3Aopen&amp;amp;type=new&#34;&gt;Projects and road map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.cocos2d-x.org/c/creator&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord community: Search for Cocos in the Discover panel of Discord.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MahmoudAshraf97/whisper-diarization</title>
    <updated>2024-08-11T01:28:02Z</updated>
    <id>tag:github.com,2024-08-11:/MahmoudAshraf97/whisper-diarization</id>
    <link href="https://github.com/MahmoudAshraf97/whisper-diarization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic Speech Recognition with Speaker Diarization based on OpenAI Whisper&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Speaker Diarization Using OpenAI Whisper&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/MahmoudAshraf97/whisper-diarization/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/MahmoudAshraf97/whisper-diarization.svg?colorA=orange&amp;amp;colorB=orange&amp;amp;logo=github&#34; alt=&#34;GitHub stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/MahmoudAshraf97/whisper-diarization/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/MahmoudAshraf97/whisper-diarization.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/MahmoudAshraf97/whisper-diarization/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/MahmoudAshraf97/whisper-diarization.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=&amp;amp;url=https%3A%2F%2Fgithub.com%2FMahmoudAshraf97%2Fwhisper-diarization&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url/https/github.com/MahmoudAshraf97/whisper-diarization.svg?style=social&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt;  &lt;a href=&#34;https://colab.research.google.com/github/MahmoudAshraf97/whisper-diarization/blob/main/Whisper_Transcription_%2B_NeMo_Diarization.ipynb&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Speaker Diarization pipeline based on OpenAI Whisper I&#39;d like to thank &lt;a href=&#34;https://github.com/m-bain&#34;&gt;@m-bain&lt;/a&gt; for Batched Whisper Inference, &lt;a href=&#34;https://github.com/mu4farooqi&#34;&gt;@mu4farooqi&lt;/a&gt; for punctuation realignment algorithm&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.blog/wp-content/uploads/2020/09/github-stars-logo_Color.png&#34; alt=&#34;drawing&#34; width=&#34;25&#34;&gt; &lt;strong&gt;Please, star the project on github (see top-right corner) if you appreciate my contribution to the community!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it&lt;/h2&gt; &#xA;&lt;p&gt;This repository combines Whisper ASR capabilities with Voice Activity Detection (VAD) and Speaker Embedding to identify the speaker for each sentence in the transcription generated by Whisper. First, the vocals are extracted from the audio to increase the speaker embedding accuracy, then the transcription is generated using Whisper, then the timestamps are corrected and aligned using WhisperX to help minimize diarization error due to time shift. The audio is then passed into MarbleNet for VAD and segmentation to exclude silences, TitaNet is then used to extract speaker embeddings to identify the speaker for each segment, the result is then associated with the timestamps generated by WhisperX to detect the speaker for each word based on timestamps and then realigned using punctuation models to compensate for minor time shifts.&lt;/p&gt; &#xA;&lt;p&gt;WhisperX and NeMo parameters are coded into diarize.py and helpers.py, I will add the CLI arguments to change them later&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;FFMPEG&lt;/code&gt; and &lt;code&gt;Cython&lt;/code&gt; are needed as prerequisites to install the requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install cython&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install cython3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# on Ubuntu or Debian&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install ffmpeg&#xA;&#xA;# on Arch Linux&#xA;sudo pacman -S ffmpeg&#xA;&#xA;# on MacOS using Homebrew (https://brew.sh/)&#xA;brew install ffmpeg&#xA;&#xA;# on Windows using Chocolatey (https://chocolatey.org/)&#xA;choco install ffmpeg&#xA;&#xA;# on Windows using Scoop (https://scoop.sh/)&#xA;scoop install ffmpeg&#xA;&#xA;# on Windows using WinGet (https://github.com/microsoft/winget-cli)&#xA;winget install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python diarize.py -a AUDIO_FILE_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system has enough VRAM (&amp;gt;=10GB), you can use &lt;code&gt;diarize_parallel.py&lt;/code&gt; instead, the difference is that it runs NeMo in parallel with Whisper, this can be beneficial in some cases and the result is the same since the two models are nondependent on each other. This is still experimental, so expect errors and sharp edges. Your feedback is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-a AUDIO_FILE_NAME&lt;/code&gt;: The name of the audio file to be processed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-stem&lt;/code&gt;: Disables source separation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--whisper-model&lt;/code&gt;: The model to be used for ASR, default is &lt;code&gt;medium.en&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--suppress_numerals&lt;/code&gt;: Transcribes numbers in their pronounced letters instead of digits, improves alignment accuracy&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--device&lt;/code&gt;: Choose which device to use, defaults to &#34;cuda&#34; if available&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--language&lt;/code&gt;: Manually select language, useful if language detection failed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--batch-size&lt;/code&gt;: Batch size for batched inference, reduce if you run out of memory, set to 0 for non-batched inference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overlapping speakers are yet to be addressed, a possible approach would be to separate the audio file and isolate only one speaker, then feed it into the pipeline but this will need much more computation&lt;/li&gt; &#xA; &lt;li&gt;There might be some errors, please raise an issue if you encounter any.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Future Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement a maximum length per sentence for SRT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Special Thanks for &lt;a href=&#34;https://github.com/adamjonas&#34;&gt;@adamjonas&lt;/a&gt; for supporting this project This work is based on &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt; , &lt;a href=&#34;https://github.com/guillaumekln/faster-whisper&#34;&gt;Faster Whisper&lt;/a&gt; , &lt;a href=&#34;https://github.com/NVIDIA/NeMo&#34;&gt;Nvidia NeMo&lt;/a&gt; , and &lt;a href=&#34;https://github.com/facebookresearch/demucs&#34;&gt;Facebook&#39;s Demucs&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>