<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-14T01:27:55Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gojue/ecapture</title>
    <updated>2024-09-14T01:27:55Z</updated>
    <id>tag:github.com,2024-09-14:/gojue/ecapture</id>
    <link href="https://github.com/gojue/ecapture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-logo-400x400.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/README_CN.md&#34;&gt;中文介绍&lt;/a&gt; | English | &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/README_JA.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/gojue/ecapture.svg?label=Stars&amp;amp;logo=github&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/gojue/ecapture?label=Forks&amp;amp;logo=github&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture/actions/workflows/code-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/gojue/ecapture/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/gojue/ecapture?display_name=tag&amp;amp;include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Github Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;eCapture(旁观者): capture SSL/TLS text content without a CA certificate using eBPF.&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Supports Linux/Android kernel versions x86_64 4.18 and above, &lt;strong&gt;aarch64 5.5&lt;/strong&gt; and above. Does not support Windows and macOS system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- MarkdownTOC autolink=&#34;true&#34; --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#how-ecapture-works&#34;&gt;How eCapture works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#ecapture-user-manual&#34;&gt;eCapture User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#ecapture-architecture&#34;&gt;eCapture Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#whats-ebpf&#34;&gt;What&#39;s eBPF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#how-to-compile&#34;&gt;How to compile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /MarkdownTOC --&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How eCapture works&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/how-ecapture-works.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SSL/TLS plaintext capture, support openssl\libressl\boringssl\gnutls\nspr(nss) libraries.&lt;/li&gt; &#xA; &lt;li&gt;GoTLS plaintext support go tls library, which refers to encrypted communication in https/tls programs written in the golang language.&lt;/li&gt; &#xA; &lt;li&gt;bash audit, capture bash command for Host Security Audit.&lt;/li&gt; &#xA; &lt;li&gt;mysql query SQL audit, support mysqld 5.6\5.7\8.0, and mariadDB.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;eCapture User Manual&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-help-v0.7.4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Youtube video: &lt;a href=&#34;https://www.youtube.com/watch?v=CoDIjEQCvvA&#34; title=&#34;eCapture User Manual&#34;&gt;How to use eCapture v0.1.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;use ELF binary file&lt;/h2&gt; &#xA;&lt;p&gt;Download ELF zip file &lt;a href=&#34;https://github.com/gojue/ecapture/releases&#34;&gt;release&lt;/a&gt; , unzip and use by command &lt;code&gt;./ecapture --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux kernel version &amp;gt;= 4.18 is required.&lt;/li&gt; &#xA; &lt;li&gt;Enable BTF &lt;a href=&#34;https://www.kernel.org/doc/html/latest/bpf/btf.html&#34;&gt;BPF Type Format (BTF)&lt;/a&gt; (Optional, 2022-04-17)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;use docker image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# pull docker image&#xA;docker pull gojue/ecapture:latest&#xA;# run&#xA;docker run --rm --privileged=true --net=host -v ${HOST_PATH}:${CONTAINER_PATH} gojue/ecapture ARGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command line options&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Need ROOT permission.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;eCapture search &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; file default, to search load directories of &lt;code&gt;SO&lt;/code&gt; file, and search &lt;code&gt;openssl&lt;/code&gt; shard libraries location. or you can use &lt;code&gt;--libssl&lt;/code&gt; flag to set shard library path.&lt;/p&gt; &#xA;&lt;p&gt;If target program is compile statically, you can set program path as &lt;code&gt;--libssl&lt;/code&gt; flag value directly。&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;The eCapture tool comprises 8 modules that respectively support plaintext capture for TLS/SSL encryption libraries like OpenSSL, GnuTLS, NSPR, BoringSSL, and GoTLS. Additionally, it facilitates software audits for Bash, MySQL, and PostgreSQL applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash capture bash command&lt;/li&gt; &#xA; &lt;li&gt;gnutls capture gnutls text content without CA cert for gnutls libraries.&lt;/li&gt; &#xA; &lt;li&gt;gotls Capturing plaintext communication from Golang programs encrypted with TLS/HTTPS.&lt;/li&gt; &#xA; &lt;li&gt;mysqld capture sql queries from mysqld 5.6/5.7/8.0 .&lt;/li&gt; &#xA; &lt;li&gt;nss capture nss/nspr encrypted text content without CA cert for nss/nspr libraries.&lt;/li&gt; &#xA; &lt;li&gt;postgres capture sql queries from postgres 10+.&lt;/li&gt; &#xA; &lt;li&gt;tls use to capture tls/ssl text content without CA cert. (Support openssl 1.0.x/1.1.x/3.0.x or newer). You can use &lt;code&gt;ecapture -h&lt;/code&gt; to view the list of subcommands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OpenSSL Module&lt;/h2&gt; &#xA;&lt;p&gt;The OpenSSL module supports three capture modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pcap&lt;/code&gt;/&lt;code&gt;pcapng&lt;/code&gt; mode stores captured plaintext data in pcap-NG format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keylog&lt;/code&gt;/&lt;code&gt;key&lt;/code&gt; mode saves the TLS handshake keys to a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; mode directly captures plaintext data, either outputting to a specified file or printing to the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pcap Mode&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;-m pcap&lt;/code&gt; or &lt;code&gt;-m pcapng&lt;/code&gt; and use it in conjunction with &lt;code&gt;--pcapfile&lt;/code&gt; and &lt;code&gt;-i&lt;/code&gt; parameters. The default value for &lt;code&gt;--pcapfile&lt;/code&gt; is &lt;code&gt;ecapture_openssl.pcapng&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture tls -m pcap -i eth0 --pcapfile=ecapture.pcapng tcp port 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command saves captured plaintext data packets as a pcapng file, which can be viewed using &lt;code&gt;Wireshark&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Keylog Mode&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;-m keylog&lt;/code&gt; or &lt;code&gt;-m key&lt;/code&gt; and use it in conjunction with the &lt;code&gt;--keylogfile&lt;/code&gt; parameter, which defaults to &lt;code&gt;ecapture_masterkey.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The captured OpenSSL TLS &lt;code&gt;Master Secret&lt;/code&gt; information is saved to &lt;code&gt;--keylogfile&lt;/code&gt;. You can also enable &lt;code&gt;tcpdump&lt;/code&gt; packet capture and then use &lt;code&gt;Wireshark&lt;/code&gt; to open the file and set the &lt;code&gt;Master Secret&lt;/code&gt; path to view plaintext data packets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture tls -m keylog -keylogfile=openssl_keylog.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly use the &lt;code&gt;tshark&lt;/code&gt; software for real-time decryption and display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tshark -o tls.keylog_file:ecapture_masterkey.log -Y http -T fields -e http.file_data -f &#34;port 443&#34; -i eth0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Text Mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./ecapture tls -m text&lt;/code&gt; will output all plaintext data packets. (Starting from v0.7.0, it no longer captures SSLKEYLOG information.)&lt;/p&gt; &#xA;&lt;h2&gt;GoTLS Module&lt;/h2&gt; &#xA;&lt;p&gt;Similar to the OpenSSL module.&lt;/p&gt; &#xA;&lt;h3&gt;check your server BTF config：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cfc4n@vm-server:~$# uname -r&#xA;4.18.0-305.3.1.el8.x86_64&#xA;cfc4n@vm-server:~$# cat /boot/config-`uname -r` | grep CONFIG_DEBUG_INFO_BTF&#xA;CONFIG_DEBUG_INFO_BTF=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;gotls command&lt;/h3&gt; &#xA;&lt;p&gt;capture tls text context.&lt;/p&gt; &#xA;&lt;p&gt;Step 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture gotls --elfpath=/home/cfc4n/go_https_client --hex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/home/cfc4n/go_https_client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;more help&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ecapture gotls -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;bash Module&lt;/h2&gt; &#xA;&lt;p&gt;capture bash command : &lt;code&gt;ecapture bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ps -ef | grep foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;eCapture Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s eBPF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to compile&lt;/h1&gt; &#xA;&lt;p&gt;Linux Kernel: &amp;gt;= 4.18.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;golang 1.21 or newer&lt;/li&gt; &#xA; &lt;li&gt;clang 9.0 or newer&lt;/li&gt; &#xA; &lt;li&gt;cmake 3.18.4 or newer&lt;/li&gt; &#xA; &lt;li&gt;clang backend: llvm 9.0 or newer&lt;/li&gt; &#xA; &lt;li&gt;kernel config:CONFIG_DEBUG_INFO_BTF=y (Optional, 2022-04-17)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;command&lt;/h2&gt; &#xA;&lt;h3&gt;ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Ubuntu 20.04 or later versions, you can use a single command to complete the initialization of the compilation environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/gojue/ecapture/master/builder/init_env.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;other Linux&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the software listed in the &#39;Toolchain Version&#39; section above, the following software is also required for the compilation environment. Please install it yourself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux-tools-common&lt;/li&gt; &#xA; &lt;li&gt;linux-tools-generic&lt;/li&gt; &#xA; &lt;li&gt;pkgconf&lt;/li&gt; &#xA; &lt;li&gt;libelf-dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Clone the repository code and compile it&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Caution: The following &lt;code&gt;make&lt;/code&gt; command will install libpcap into the system directory if &lt;code&gt;libpcap.a&lt;/code&gt; does not exist under &lt;code&gt;/usr/local/lib&lt;/code&gt;. If you have installed libpcap in system without &lt;code&gt;libpcap.a&lt;/code&gt;, it maybe break your libpcap&#39;s headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone --recurse-submodules git@github.com:gojue/ecapture.git&#xA;cd ecapture&#xA;make&#xA;bin/ecapture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;compile without BTF&lt;/h2&gt; &#xA;&lt;p&gt;eCapture support BTF disabled with command &lt;code&gt;make nocore&lt;/code&gt; to compile at 2022/04/17. It can work normally even on Linux systems that do not support BTF.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make nocore&#xA;bin/ecapture --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;cross-compilation&lt;/h2&gt; &#xA;&lt;h3&gt;Kernel header files&lt;/h3&gt; &#xA;&lt;p&gt;To cross-compile the eCapture tool, you need to install the kernel header files for the target architecture. you need to install the &lt;code&gt;linux-source&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kernel_ver=`uname -r | cut -d&#39;-&#39; -f 1`&#xA;sudo apt-get install -y linux-source-$kernel_ver&#xA;cd /usr/src&#xA;sudo tar -xf linux-source-${kernel_ver}.tar.bz2&#xA;cd /usr/src/linux-source-${kernel_ver}&#xA;test -f .config || yes &#34;&#34; | sudo make oldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ToolChains&lt;/h3&gt; &#xA;&lt;p&gt;To cross-compile binary files for the aarch64 architecture on an amd64 architecture system, you need to install the gcc-aarch64-linux-gnu toolchain. Similarly, to cross-compile binary files for the amd64 architecture on an aarch64 system, you need to install the gcc-x86-64-linux-gnu toolchain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;amd64 arch: gcc-aarch64-linux-gnu&lt;/li&gt; &#xA; &lt;li&gt;arm64 arch: gcc-x86-64-linux-gnu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Commands&lt;/h3&gt; &#xA;&lt;p&gt;To build an &lt;code&gt;arm64&lt;/code&gt; artifact on an ubuntu &lt;code&gt;amd64&lt;/code&gt; system, you can set the &lt;code&gt;CROSS_ARCH&lt;/code&gt; environment variable to achieve cross-compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CROSS_ARCH=arm64 make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://starchart.cc/gojue/ecapture.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt;</summary>
  </entry>
</feed>