<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-08T01:24:50Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LayerZero-Labs/LayerZero</title>
    <updated>2023-11-08T01:24:50Z</updated>
    <id>tag:github.com,2023-11-08:/LayerZero-Labs/LayerZero</id>
    <link href="https://github.com/LayerZero-Labs/LayerZero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Omnichain Interoperability Protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LayerZero - an Omnichain Interoperability Protocol&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the smart contracts for LayerZero Endpoints. For developers looking to build on top of LayerZero please refer to the &lt;a href=&#34;https://layerzero.gitbook.io/docs/&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;LayerZero is an Omnichain Interoperability Protocol designed for lightweight message passing across chains. LayerZero provides authentic and guaranteed message delivery with configurable trustlessness. The protocol is implemented as a set of gas-efficient, non-upgradable smart contracts.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Interfaces&lt;/h3&gt; &#xA;&lt;p&gt;add this to your package.json&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&#34;@layerzerolabs/contracts&#34;: &#34;latest&#34;,&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;copy .env.example to .env and fill in variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Single Test File&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn test test/Endpoint.test.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gas Uasge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn test:gas&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Coverage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn test:coverage&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lint&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn lint&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;only lints .js/.ts files&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Deploy networks are generated based on tags.&lt;/p&gt; &#xA;&lt;h4&gt;Hardhat&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;yarn dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;spins up local environment and deploys contracts&lt;/p&gt; &#xA;&lt;h4&gt;Development&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;hardhat --network rinkeby-testnet deploy&#xA;hardhat --network rinkeby-sandbox deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Production&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;hardhat --network ethereum deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a new network&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/LayerZero/main/hardhat.config.ts&#34;&gt;hardhat config&lt;/a&gt; with network &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;refer to &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/LayerZero/main/utils/deploy.js&#34;&gt;STAGING_MAP&lt;/a&gt; for staging environments supported&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/LayerZero/main/constants/endpoints.json&#34;&gt;endpoints.json&lt;/a&gt; with network&lt;/li&gt; &#xA; &lt;li&gt;Make sure that key in endpoints.json matches network name in hardhat&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example: One LayerZero Network&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//hardhat.config.ts&#xA;ethereum: {&#xA;    url: `{rpc address}`,&#xA;    chainId: 1, //chainlist id&#xA;}&#xA;&#xA;//endpoints.json&#xA;&#34;production&#34;: {&#xA;   ...&#xA;   &#34;ethereum&#34;: {&#xA;     &#34;id&#34;: 1 //layerzero chain id&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: More than one LayerZero Network on same chain (using expandNetwork)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//hardhat.config.ts&#xA;...expandNetwork({&#xA;    ropsten: {&#xA;        url: `{rpc address}`,&#xA;        chainId: 3, //chainlist id&#xA;    }&#xA;}, [&#34;testnet&#34;, &#34;sandbox&#34;]),&#xA;&#xA;//endpoints.json&#xA;&#34;development&#34;: {&#xA;   ...&#xA;   &#34;ropsten&#34;: {&#xA;     &#34;id&#34;: 4 //layerzero chain id&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to the core development team for building the LayerZero Endpoints: Ryan Zarick, Isaac Zhang, Caleb Banister, Carmen Cheng and T. Riley Schwarz&lt;/p&gt; &#xA;&lt;h3&gt;LICENSING&lt;/h3&gt; &#xA;&lt;p&gt;The primary license for LayerZero is the Business Source License 1.1 (BUSL-1.1). see &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/LayerZero/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leerob/nextjs-postgres-email-client</title>
    <updated>2023-11-08T01:24:50Z</updated>
    <id>tag:github.com,2023-11-08:/leerob/nextjs-postgres-email-client</id>
    <link href="https://github.com/leerob/nextjs-postgres-email-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An email client built with the Next.js App Router and Postgres as the database.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Next.js Email Client&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple email client built with Next.js and Postgres. It&#39;s built to show off some of the features of the App Router, which enable you to build products that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate between routes in a column layout while maintaining scroll position (layouts support)&lt;/li&gt; &#xA; &lt;li&gt;Submit forms without JavaScript enabled (progressive enhancement)&lt;/li&gt; &#xA; &lt;li&gt;Navigate between routes extremely fast (prefetching and caching)&lt;/li&gt; &#xA; &lt;li&gt;Retain your UI position on reload (URL state)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first version of the UI was built with &lt;a href=&#34;https://v0.dev/t/RPsRRQilTDp&#34;&gt;v0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;1343&#34; alt=&#34;CleanShot 2023-11-04 at 21 09 49@2x&#34; src=&#34;https://github.com/leerob/leerob.io/assets/9113740/1e33ad53-832f-410e-a4d6-7bd40f666aa8&#34;&gt; &#xA;&lt;h2&gt;Tech&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/docs/storage/vercel-postgres&#34;&gt;Vercel Postgres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-spectrum.adobe.com/react-aria/index.html&#34;&gt;React Aria Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Forward / reply / search aren&#39;t hooked up yet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need to add a way to manage folders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need to add a way to manage users&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fix to/from to pull sender/recipient everywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Error handling for form submissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Schema&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE users (&#xA;    id SERIAL PRIMARY KEY,&#xA;    first_name VARCHAR(50),&#xA;    last_name VARCHAR(50),&#xA;    email VARCHAR(255) UNIQUE NOT NULL&#xA;);&#xA;&#xA;CREATE TABLE emails (&#xA;    id SERIAL PRIMARY KEY,&#xA;    sender_id INTEGER REFERENCES users(id),&#xA;    recipient_id INTEGER REFERENCES users(id),&#xA;    subject VARCHAR(255),&#xA;    body TEXT,&#xA;    sent_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#xA;);&#xA;&#xA;CREATE TABLE folders (&#xA;    id SERIAL PRIMARY KEY,&#xA;    name VARCHAR(50) NOT NULL&#xA;);&#xA;&#xA;CREATE TABLE user_folders (&#xA;    id SERIAL PRIMARY KEY,&#xA;    user_id INTEGER REFERENCES users(id),&#xA;    folder_id INTEGER REFERENCES folders(id)&#xA;);&#xA;&#xA;CREATE TABLE email_folders (&#xA;    id SERIAL PRIMARY KEY,&#xA;    email_id INTEGER REFERENCES emails(id),&#xA;    folder_id INTEGER REFERENCES folders(id)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample Data&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;INSERT INTO users (first_name, last_name, email)&#xA;VALUES (&#39;John&#39;, &#39;Doe&#39;, &#39;john.doe@example.com&#39;),&#xA;       (&#39;Jane&#39;, &#39;Doe&#39;, &#39;jane.doe@example.com&#39;),&#xA;       (&#39;Alice&#39;, &#39;Smith&#39;, &#39;alice.smith@example.com&#39;),&#xA;       (&#39;Bob&#39;, &#39;Johnson&#39;, &#39;bob.johnson@example.com&#39;);&#xA;&#xA;INSERT INTO emails (sender_id, recipient_id, subject, body, sent_date)&#xA;VALUES (1, 2, &#39;Meeting Reminder&#39;, &#39;Don&#39;&#39;t forget about our meeting tomorrow at 10am.&#39;, &#39;2022-01-10 09:00:00&#39;),&#xA;       (1, 3, &#39;Hello&#39;, &#39;Just wanted to say hello.&#39;, &#39;2022-01-09 08:00:00&#39;),&#xA;       (2, 1, &#39;Re: Meeting Reminder&#39;, &#39;I won&#39;&#39;t be able to make it.&#39;, &#39;2022-01-10 10:00:00&#39;),&#xA;       (3, 1, &#39;Re: Hello&#39;, &#39;Hello to you too!&#39;, &#39;2022-01-09 09:00:00&#39;),&#xA;       (4, 1, &#39;Invitation&#39;, &#39;You are invited to my party.&#39;, &#39;2022-01-11 07:00:00&#39;),&#xA;       (1, 2, &#39;Work Project&#39;, &#39;Let&#39;&#39;s discuss the new work project.&#39;, &#39;2022-01-12 07:00:00&#39;),&#xA;       (1, 4, &#39;Expenses Report&#39;, &#39;Please find the expenses report attached.&#39;, &#39;2022-01-13 07:00:00&#39;),&#xA;       (4, 1, &#39;Personal Note&#39;, &#39;Let&#39;&#39;s catch up sometime.&#39;, &#39;2022-01-14 07:00:00&#39;);&#xA;&#xA;INSERT INTO folders (name)&#xA;VALUES (&#39;Inbox&#39;),&#xA;       (&#39;Flagged&#39;),&#xA;       (&#39;Sent&#39;),&#xA;       (&#39;Work&#39;),&#xA;       (&#39;Expenses&#39;),&#xA;       (&#39;Personal&#39;);&#xA;&#xA;INSERT INTO user_folders (user_id, folder_id)&#xA;VALUES (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6),&#xA;       (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6),&#xA;       (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6),&#xA;       (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6);&#xA;&#xA;INSERT INTO email_folders (email_id, folder_id)&#xA;VALUES (1, 1),&#xA;       (2, 1),&#xA;       (3, 3),&#xA;       (4, 1),&#xA;       (5, 1),&#xA;       (6, 4),&#xA;       (7, 5),&#xA;       (8, 6);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database Relationships&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Users can send and receive emails (users.id -&amp;gt; emails.sender_id and emails.recipient_id)&lt;/li&gt; &#xA; &lt;li&gt;Users can have multiple folders (users.id -&amp;gt; user_folders.user_id)&lt;/li&gt; &#xA; &lt;li&gt;Folders can contain multiple emails (folders.id -&amp;gt; email_folders.folder_id)&lt;/li&gt; &#xA; &lt;li&gt;An email can be in multiple folders (emails.id -&amp;gt; email_folders.email_id)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LayerZero-Labs/solidity-examples</title>
    <updated>2023-11-08T01:24:50Z</updated>
    <id>tag:github.com,2023-11-08:/LayerZero-Labs/solidity-examples</id>
    <link href="https://github.com/LayerZero-Labs/solidity-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;example contracts&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;LayerZero&#34; src=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/resources/LayerZeroLogo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;LayerZero Omnichain Contract Examples&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Formal audit(s) (May 21, 2022) can be found in &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/audit&#34;&gt;audit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install &amp;amp; Run tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yarn install&#xA;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code in the &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/contracts&#34;&gt;contracts&lt;/a&gt; folder demonstrates LayerZero behaviours.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/contracts/lzApp/NonblockingLzApp.sol&#34;&gt;NonblockingLzApp&lt;/a&gt; is a great contract to extend. Take a look at how &lt;code&gt;OmniCounter&lt;/code&gt; overrides &lt;code&gt;_nonblockingLzReceive&lt;/code&gt; and &lt;code&gt;_LzReceive&lt;/code&gt; to easily handle messaging. There are also example for &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/contracts/token/oft&#34;&gt;OFT&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/contracts/token&#34;&gt;ONFT&lt;/a&gt; which illustrate erc20 and erc721 cross chain functionality.&lt;/li&gt; &#xA; &lt;li&gt;Always audit your own code and test extensively on &lt;code&gt;testnet&lt;/code&gt; before going to mainnet 🙏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The examples below use two chains, however you could substitute any LayerZero supported chain!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;OmnichainFungibleToken (OFT)&lt;/h1&gt; &#xA;&lt;h2&gt;About OFTV2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;NOTE: the OFTV2 uses uint64 to encode value transfer for compatability of Aptos and Solana. &#xA;&#xA;The deployer is expected to set a lower decimal points like 6 or 8. &#xA;&#xA;If the decimal point is 18, then uint64 can only represent approximately 18 tokens (uint64.max ~= 18 * 10^18).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploy Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;.env&lt;/code&gt; file (to the root project directory) with your &lt;code&gt;MNEMONIC=&#34;your mnemonic&#34;&lt;/code&gt; and fund your wallet in order to deploy!&lt;/li&gt; &#xA; &lt;li&gt;Follow any of the tutorials below&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;OFTV2Mock.sol - an omnichain ERC20&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;You must perform &lt;code&gt;setTrustedRemote()&lt;/code&gt; (step 2). This is a mock deployment that auto mints tokens to &lt;code&gt;msg.sender&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy two contracts:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network goerli deploy --tags ExampleOFTV2&#xA;npx hardhat --network fuji deploy --tags ExampleOFTV2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set the &#34;trusted remotes&#34; (ie: your contracts) so each of them can receive messages from one another, and &lt;code&gt;only&lt;/code&gt; one another.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network goerli setTrustedRemote --target-network fuji --contract OFTV2Mock&#xA;npx hardhat --network fuji setTrustedRemote --target-network goerli --contract OFTV2Mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set the &#34;minDstGas&#34; required on the destination chain.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network goerli setMinDstGas --packet-type 0 --target-network fuji --contract OFTV2Mock --min-gas 100000&#xA;npx hardhat --network fuji setMinDstGas --packet-type 0 --target-network goerli --contract OFTV2Mock --min-gas 100000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Although &lt;code&gt;100000&lt;/code&gt; is used for &lt;code&gt;min-gas&lt;/code&gt; in this example, you should set this value based on careful gas consumption analysis.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Send tokens from goerli to fuji&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network goerli oftv2Send --target-network fuji --qty 42 --contract OFTV2Mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: Check the ERC20 transactions tab of the destination chain block explorer and await your tokens!&lt;/p&gt; &#xA;&lt;h1&gt;OmnichainNonFungibleToken721 (ONFT721)&lt;/h1&gt; &#xA;&lt;p&gt;This ONFT contract allows minting of &lt;code&gt;nftId&lt;/code&gt;s on separate chains. To ensure two chains can not mint the same &lt;code&gt;nftId&lt;/code&gt; each contract on each chain is only allowed to mint&lt;code&gt;nftIds&lt;/code&gt; in certain ranges. Check the &lt;code&gt;ONFT_ARGS&lt;/code&gt; constant defined in ONFT721 deploy script for the specific test configuration used in this demo.&lt;/p&gt; &#xA;&lt;h2&gt;ONFT721Mock.sol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;You must perform the &lt;code&gt;setTrustedRemote()&lt;/code&gt; (step 2).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy two contracts:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet deploy --tags ONFT721&#xA;npx hardhat --network fuji deploy --tags ONFT721&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set the &#34;trusted remotes&#34;, so each contract can send &amp;amp; receive messages from one another, and &lt;strong&gt;only&lt;/strong&gt; one another.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet setTrustedRemote --target-network fuji --contract ONFT721Mock&#xA;npx hardhat --network fuji setTrustedRemote --target-network bsc-testnet --contract ONFT721Mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set the min gas required on the destination&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet setMinDstGas --target-network fuji --contract ONFT721Mock --packet-type 1 --min-gas 100000&#xA;npx hardhat --network fuji setMinDstGas --target-network bsc-testnet --contract ONFT721Mock --packet-type 1 --min-gas 100000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Mint an NFT on each chain!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet onftMint --contract ONFT721Mock --to-address &amp;lt;address&amp;gt; --token-id 1&#xA;npx hardhat --network fuji onftMint --contract ONFT721Mock --to-address &amp;lt;address&amp;gt; --token-id 11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;[Optional] Show the token owner(s)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet ownerOf --token-id 1 --contract ONFT721Mock&#xA;npx hardhat --network fuji ownerOf --token-id 11 --contract ONFT721Mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Send ONFT across chains&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet onftSend --target-network fuji --token-id 1 --contract ONFT721Mock&#xA;npx hardhat --network fuji onftSend --target-network bsc-testnet --token-id 11 --contract ONFT721Mock &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Verify your token no longer exists in your wallet on the source chain &amp;amp; wait for it to reach the destination side.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet ownerOf --token-id 1 --contract ONFT721Mock&#xA;npx hardhat --network fuji ownerOf --token-id 1 --contract ONFT721Mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;OmniCounter.sol&lt;/h1&gt; &#xA;&lt;p&gt;OmniCounter is a simple contract with a counter. You can only &lt;em&gt;remotely&lt;/em&gt; increment the counter!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy both OmniCounters:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet deploy --tags OmniCounter&#xA;npx hardhat --network fuji deploy --tags OmniCounter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set the remote addresses, so each contract can receive messages&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet setTrustedRemote --target-network fuji --contract OmniCounter&#xA;npx hardhat --network fuji setTrustedRemote --target-network bsc-testnet --contract OmniCounter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Send a cross chain message from &lt;code&gt;bsc-testnet&lt;/code&gt; to &lt;code&gt;fuji&lt;/code&gt; !&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network bsc-testnet incrementCounter --target-network fuji&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally use this command in a separate terminal to watch the counter increment in real-time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat --network fuji ocPoll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Check your setTrustedRemote&#39;s are wired up correctly&lt;/h1&gt; &#xA;&lt;p&gt;Just use our &lt;a href=&#34;https://raw.githubusercontent.com/LayerZero-Labs/solidity-examples/main/tasks/checkWireUpAll.js&#34;&gt;checkWireUpAll&lt;/a&gt; task to check if your contracts are wired up correctly. You can use it on the example contracts deployed above.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;UniversalONFT&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat checkWireUpAll --e testnet --contract ONFT721Mock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;OmniCounter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npx hardhat checkWireUpAll --e testnet --contract OmniCounter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;See some examples in &lt;code&gt;/contracts&lt;/code&gt; 🙌&lt;/h3&gt; &#xA;&lt;p&gt;Many of the example contracts make use of LayerZeroEndpointMock.sol which is a nice way to test LayerZero locally!&lt;/p&gt; &#xA;&lt;h3&gt;For further reading, and a list of endpoint ids and deployed LayerZero contract addresses please take a look at the Gitbook here: &lt;a href=&#34;https://layerzero.gitbook.io/&#34;&gt;https://layerzero.gitbook.io/&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;See testnet and mainnet chainIds and addresses, and the format for connecting contracts on different chains:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LayerZero-Labs/set-trusted-remotes&#34;&gt;https://github.com/LayerZero-Labs/set-trusted-remotes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://layerzero.gitbook.io/docs/technical-reference/testnet/testnet-addresses&#34;&gt;https://layerzero.gitbook.io/docs/technical-reference/testnet/testnet-addresses&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids&#34;&gt;https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Most recently tested with node version &lt;code&gt;16.13.1&lt;/code&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>