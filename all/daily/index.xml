<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-05T01:31:37Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>evrone/go-clean-template</title>
    <updated>2022-12-05T01:31:37Z</updated>
    <id>tag:github.com,2022-12-05:/evrone/go-clean-template</id>
    <link href="https://github.com/evrone/go-clean-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture template for Golang services&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/logo.svg?sanitize=true&#34; alt=&#34;Go Clean Template&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Go Clean template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/README_CN.md&#34;&gt;🇨🇳中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clean Architecture template for Golang services&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/evrone/go-clean-template&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/evrone/go-clean-template&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/evrone/go-clean-template/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/evrone/go-clean-template.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/evrone/go-clean-template/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/evrone/go-clean-template.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/evrone/go-clean-template&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/evrone/go-clean-template/branch/master/graph/badge.svg?token=XE3E0X3EVQ&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of the template is to show:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to organize a project and prevent it from turning into spaghetti code&lt;/li&gt; &#xA; &lt;li&gt;where to store business logic so that it remains independent, clean, and extensible&lt;/li&gt; &#xA; &lt;li&gt;how not to lose control when a microservice grows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using the principles of Robert Martin (aka Uncle Bob).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://evrone.com/go-clean-template?utm_source=github&amp;amp;utm_campaign=go-clean-template&#34;&gt;Go-clean-template&lt;/a&gt; is created &amp;amp; supported by &lt;a href=&#34;https://evrone.com/?utm_source=github&amp;amp;utm_campaign=go-clean-template&#34;&gt;Evrone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#project-structure&#34;&gt;Project structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#clean-architecture&#34;&gt;Clean Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Local development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Postgres, RabbitMQ&#xA;$ make compose-up&#xA;# Run app with migrations&#xA;$ make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Integration tests (can be run in CI):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# DB, app + migrations, integration tests&#xA;$ make compose-up-integration-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;cmd/app/main.go&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configuration and logger initialization. Then the main function &#34;continues&#34; in &lt;code&gt;internal/app/app.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;config&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configuration. First, &lt;code&gt;config.yml&lt;/code&gt; is read, then environment variables overwrite the yaml config if they match. The config structure is in the &lt;code&gt;config.go&lt;/code&gt;. The &lt;code&gt;env-required: true&lt;/code&gt; tag obliges you to specify a value (either in yaml, or in environment variables).&lt;/p&gt; &#xA;&lt;p&gt;For configuration, we chose the &lt;a href=&#34;https://github.com/ilyakaznacheev/cleanenv&#34;&gt;cleanenv&lt;/a&gt; library. It does not have many stars on GitHub, but is simple and meets all the requirements.&lt;/p&gt; &#xA;&lt;p&gt;Reading the config from yaml contradicts the ideology of 12 factors, but in practice, it is more convenient than reading the entire config from ENV. It is assumed that default values are in yaml, and security-sensitive variables are defined in ENV.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Swagger documentation. Auto-generated by &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;swag&lt;/a&gt; library. You don&#39;t need to correct anything by yourself.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;integration-test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Integration tests. They are launched as a separate container, next to the application container. It is convenient to test the Rest API using &lt;a href=&#34;https://github.com/Eun/go-hit&#34;&gt;go-hit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/app&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There is always one &lt;em&gt;Run&lt;/em&gt; function in the &lt;code&gt;app.go&lt;/code&gt; file, which &#34;continues&#34; the &lt;em&gt;main&lt;/em&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;This is where all the main objects are created. Dependency injection occurs through the &#34;New ...&#34; constructors (see Dependency Injection). This technique allows us to layer the application using the &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt; principle. This makes the business logic independent from other layers.&lt;/p&gt; &#xA;&lt;p&gt;Next, we start the server and wait for signals in &lt;em&gt;select&lt;/em&gt; for graceful completion. If &lt;code&gt;app.go&lt;/code&gt; starts to grow, you can split it into multiple files.&lt;/p&gt; &#xA;&lt;p&gt;For a large number of injections, &lt;a href=&#34;https://github.com/google/wire&#34;&gt;wire&lt;/a&gt; can be used.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;migrate.go&lt;/code&gt; file is used for database auto migrations. It is included if an argument with the &lt;em&gt;migrate&lt;/em&gt; tag is specified. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go run -tags migrate ./cmd/app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/controller&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Server handler layer (MVC controllers). The template shows 2 servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RPC (RabbitMQ as transport)&lt;/li&gt; &#xA; &lt;li&gt;REST http (Gin framework)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Server routers are written in the same style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handlers are grouped by area of application (by a common basis)&lt;/li&gt; &#xA; &lt;li&gt;For each group, its own router structure is created, the methods of which process paths&lt;/li&gt; &#xA; &lt;li&gt;The structure of the business logic is injected into the router structure, which will be called by the handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;internal/controller/http&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Simple REST versioning. For v2, we will need to add the &lt;code&gt;http/v2&lt;/code&gt; folder with the same content. And in the file &lt;code&gt;internal/app&lt;/code&gt; add the line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;handler := gin.New()&#xA;v1.NewRouter(handler, t)&#xA;v2.NewRouter(handler, t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of Gin, you can use any other http framework or even the standard &lt;code&gt;net/http&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;v1/router.go&lt;/code&gt; and above the handler methods, there are comments for generating swagger documentation using &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;swag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/entity&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Entities of business logic (models) can be used in any layer. There can also be methods, for example, for validation.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/usecase&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Business logic.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Methods are grouped by area of application (on a common basis)&lt;/li&gt; &#xA; &lt;li&gt;Each group has its own structure&lt;/li&gt; &#xA; &lt;li&gt;One file - one structure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Repositories, webapi, rpc, and other business logic structures are injected into business logic structures (see &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;internal/usecase/repo&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A repository is an abstract storage (database) that business logic works with.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;internal/usecase/webapi&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;It is an abstract web API that business logic works with. For example, it could be another microservice that business logic accesses via the REST API. The package name changes depending on the purpose.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;pkg/rabbitmq&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;RabbitMQ RPC pattern:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is no routing inside RabbitMQ&lt;/li&gt; &#xA; &lt;li&gt;Exchange fanout is used, to which 1 exclusive queue is bound, this is the most productive config&lt;/li&gt; &#xA; &lt;li&gt;Reconnect on the loss of connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency Injection&lt;/h2&gt; &#xA;&lt;p&gt;In order to remove the dependence of business logic on external packages, dependency injection is used.&lt;/p&gt; &#xA;&lt;p&gt;For example, through the New constructor, we inject the dependency into the structure of the business logic. This makes the business logic independent (and portable). We can override the implementation of the interface without making changes to the &lt;code&gt;usecase&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package usecase&#xA;&#xA;import (&#xA;    // Nothing!&#xA;)&#xA;&#xA;type Repository interface {&#xA;    Get()&#xA;}&#xA;&#xA;type UseCase struct {&#xA;    repo Repository&#xA;}&#xA;&#xA;func New(r Repository) *UseCase{&#xA;    return &amp;amp;UseCase{&#xA;        repo: r,&#xA;    }&#xA;}&#xA;&#xA;func (uc *UseCase) Do()  {&#xA;    uc.repo.Get()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will also allow us to do auto-generation of mocks (for example with &lt;a href=&#34;https://github.com/vektra/mockery&#34;&gt;mockery&lt;/a&gt;) and easily write unit tests.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We are not tied to specific implementations in order to always be able to change one component to another. If the new component implements the interface, nothing needs to be changed in the business logic.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Clean Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;Key idea&lt;/h3&gt; &#xA;&lt;p&gt;Programmers realize the optimal architecture for an application after most of the code has been written.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A good architecture allows decisions to be delayed to as late as possible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The main principle&lt;/h3&gt; &#xA;&lt;p&gt;Dependency Inversion (the same one from SOLID) is the principle of dependency inversion. The direction of dependencies goes from the outer layer to the inner layer. Due to this, business logic and entities remain independent from other parts of the system.&lt;/p&gt; &#xA;&lt;p&gt;So, the application is divided into 2 layers, internal and external:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Business logic&lt;/strong&gt; (Go standard library).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; (databases, servers, message brokers, any other packages and frameworks).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/layers-1.png&#34; alt=&#34;Clean Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The inner layer&lt;/strong&gt; with business logic should be clean. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not have package imports from the outer layer.&lt;/li&gt; &#xA; &lt;li&gt;Use only the capabilities of the standard library.&lt;/li&gt; &#xA; &lt;li&gt;Make calls to the outer layer through the interface (!).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The business logic doesn&#39;t know anything about Postgres or a specific web API. Business logic has an interface for working with an &lt;em&gt;abstract&lt;/em&gt; database or &lt;em&gt;abstract&lt;/em&gt; web API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The outer layer&lt;/strong&gt; has other limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All components of this layer are unaware of each other&#39;s existence. How to call another from one tool? Not directly, only through the inner layer of business logic.&lt;/li&gt; &#xA; &lt;li&gt;All calls to the inner layer are made through the interface (!).&lt;/li&gt; &#xA; &lt;li&gt;Data is transferred in a format that is convenient for business logic (&lt;code&gt;internal/entity&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, you need to access the database from HTTP (controller). Both HTTP and database are in the outer layer, which means they know nothing about each other. The communication between them is carried out through &lt;code&gt;usecase&lt;/code&gt; (business logic):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    HTTP &amp;gt; usecase&#xA;           usecase &amp;gt; repository (Postgres)&#xA;           usecase &amp;lt; repository (Postgres)&#xA;    HTTP &amp;lt; usecase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The symbols &amp;gt; and &amp;lt; show the intersection of layer boundaries through Interfaces. The same is shown in the picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/example-http-db.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or more complex business logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    HTTP &amp;gt; usecase&#xA;           usecase &amp;gt; repository&#xA;           usecase &amp;lt; repository&#xA;           usecase &amp;gt; webapi&#xA;           usecase &amp;lt; webapi&#xA;           usecase &amp;gt; RPC&#xA;           usecase &amp;lt; RPC&#xA;           usecase &amp;gt; repository&#xA;           usecase &amp;lt; repository&#xA;    HTTP &amp;lt; usecase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Layers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/layers-2.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Clean Architecture Terminology&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt; are structures that business logic operates on. They are located in the &lt;code&gt;internal/entity&lt;/code&gt; folder. In MVC terms, entities are models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use Cases&lt;/strong&gt; is business logic located in &lt;code&gt;internal/usecase&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The layer with which business logic directly interacts is usually called the &lt;em&gt;infrastructure&lt;/em&gt; layer. These can be repositories &lt;code&gt;internal/usecase/repo&lt;/code&gt;, external webapi &lt;code&gt;internal/usecase/webapi&lt;/code&gt;, any pkg, and other microservices. In the template, the &lt;em&gt;infrastructure&lt;/em&gt; packages are located inside &lt;code&gt;internal/usecase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can choose how to call the entry points as you wish. The options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;controller (in our case)&lt;/li&gt; &#xA; &lt;li&gt;delivery&lt;/li&gt; &#xA; &lt;li&gt;transport&lt;/li&gt; &#xA; &lt;li&gt;gateways&lt;/li&gt; &#xA; &lt;li&gt;entrypoints&lt;/li&gt; &#xA; &lt;li&gt;primary&lt;/li&gt; &#xA; &lt;li&gt;input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional layers&lt;/h3&gt; &#xA;&lt;p&gt;The classic version of &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;Clean Architecture&lt;/a&gt; was designed for building large monolithic applications and has 4 layers.&lt;/p&gt; &#xA;&lt;p&gt;In the original version, the outer layer is divided into two more, which also have an inversion of dependencies to each other (directed inward) and communicate through interfaces.&lt;/p&gt; &#xA;&lt;p&gt;The inner layer is also divided into two (with separation of interfaces), in the case of complex logic.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Complex tools can be divided into additional layers. However, you should add layers only if really necessary.&lt;/p&gt; &#xA;&lt;h3&gt;Alternative approaches&lt;/h3&gt; &#xA;&lt;p&gt;In addition to Clean architecture, &lt;em&gt;Onion architecture&lt;/em&gt; and &lt;em&gt;Hexagonal&lt;/em&gt; (&lt;em&gt;Ports and adapters&lt;/em&gt;) are similar to it. Both are based on the principle of Dependency Inversion. &lt;em&gt;Ports and adapters&lt;/em&gt; are very close to &lt;em&gt;Clean Architecture&lt;/em&gt;, the differences are mainly in terminology.&lt;/p&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bxcodec/go-clean-arch&#34;&gt;https://github.com/bxcodec/go-clean-arch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhashkevych/courses-backend&#34;&gt;https://github.com/zhashkevych/courses-backend&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;The Clean Architecture article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://12factor.net/ru/&#34;&gt;Twelve factors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openai/openai-quickstart-node</title>
    <updated>2022-12-05T01:31:37Z</updated>
    <id>tag:github.com,2022-12-05:/openai/openai-quickstart-node</id>
    <link href="https://github.com/openai/openai-quickstart-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js example app from the OpenAI API quickstart tutorial&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI API Quickstart - Node.js example app&lt;/h1&gt; &#xA;&lt;p&gt;This is an example pet name generator app used in the OpenAI API &lt;a href=&#34;https://beta.openai.com/docs/quickstart&#34;&gt;quickstart tutorial&lt;/a&gt;. It uses the &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; framework with &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;. Check out the tutorial or follow the instructions below to get set up.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don’t have Node.js installed, &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;install it from here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate into the project directory&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd openai-quickstart-node&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the requirements&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a copy of the example environment variables file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;API key&lt;/a&gt; to the newly created &lt;code&gt;.env&lt;/code&gt; file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You should now be able to access the app at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;! For the full context behind this example app, check out the &lt;a href=&#34;https://beta.openai.com/docs/quickstart&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>recloudstream/cloudstream</title>
    <updated>2022-12-05T01:31:37Z</updated>
    <id>tag:github.com,2022-12-05:/recloudstream/cloudstream</id>
    <link href="https://github.com/recloudstream/cloudstream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android app for streaming and downloading Movies, TV-Series and Anime.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CloudStream&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ Warning: By default this app doesn&#39;t provide any video sources, you have to install extensions in order to add functionality to the app.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/5Hus6fM&#34;&gt;&lt;img src=&#34;https://invidget.switchblade.xyz/5Hus6fM&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AdFree&lt;/strong&gt;, No ads whatsoever&lt;/li&gt; &#xA; &lt;li&gt;No tracking/analytics&lt;/li&gt; &#xA; &lt;li&gt;Bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Download and stream movies, tv-shows and anime&lt;/li&gt; &#xA; &lt;li&gt;Chromecast&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Screenshots:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/home.jpg&#34; height=&#34;400&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/search.jpg&#34; height=&#34;400&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/downloads.jpg&#34; height=&#34;400&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/results.jpg&#34; height=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/player.jpg&#34; height=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;The list of supported languages:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🇱🇧 Arabic&lt;/li&gt; &#xA; &lt;li&gt;🇧🇬 Bulgarian&lt;/li&gt; &#xA; &lt;li&gt;🇨🇳 Chinese Simplified&lt;/li&gt; &#xA; &lt;li&gt;🇹🇼 Chinese Traditional&lt;/li&gt; &#xA; &lt;li&gt;🇭🇷 Croatian&lt;/li&gt; &#xA; &lt;li&gt;🇨🇿 Czech&lt;/li&gt; &#xA; &lt;li&gt;🇳🇱 Dutch&lt;/li&gt; &#xA; &lt;li&gt;🇬🇧 English&lt;/li&gt; &#xA; &lt;li&gt;🇫🇷 French&lt;/li&gt; &#xA; &lt;li&gt;🇩🇪 German&lt;/li&gt; &#xA; &lt;li&gt;🇬🇷 Greek&lt;/li&gt; &#xA; &lt;li&gt;🇮🇳 Hindi&lt;/li&gt; &#xA; &lt;li&gt;🇮🇩 Indonesian&lt;/li&gt; &#xA; &lt;li&gt;🇮🇹 Italian&lt;/li&gt; &#xA; &lt;li&gt;🇲🇰 Macedonian&lt;/li&gt; &#xA; &lt;li&gt;🇮🇳 Malayalam&lt;/li&gt; &#xA; &lt;li&gt;🇳🇴 Norsk&lt;/li&gt; &#xA; &lt;li&gt;🇵🇱 Polish&lt;/li&gt; &#xA; &lt;li&gt;🇧🇷 Portuguese (Brazil)&lt;/li&gt; &#xA; &lt;li&gt;🇷🇴 Romanian&lt;/li&gt; &#xA; &lt;li&gt;🇪🇸 Spanish&lt;/li&gt; &#xA; &lt;li&gt;🇸🇪 Swedish&lt;/li&gt; &#xA; &lt;li&gt;🇵🇭 Tagalog&lt;/li&gt; &#xA; &lt;li&gt;🇹🇷 Turkish&lt;/li&gt; &#xA; &lt;li&gt;🇻🇳 Vietnamese&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>