<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-03T01:29:26Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielmiessler/Fabric</title>
    <updated>2025-07-03T01:29:26Z</updated>
    <id>tag:github.com,2025-07-03:/danielmiessler/Fabric</id>
    <link href="https://github.com/danielmiessler/Fabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fabric is an open-source framework for augmenting humans using AI. It provides a modular system for solving specific problems using a crowdsourced set of AI prompts that can be used anywhere.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA;  Fabric is graciously supported by… &#xA; &lt;p&gt;&lt;a href=&#34;https://warp.dev/fabric&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/96ab3d81-9b13-4df4-ba09-75dee7a5c3d2&#34; alt=&#34;Github Repo Tagline&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/images/fabric-logo-gif.gif&#34; alt=&#34;fabriclogo&#34; width=&#34;400&#34; height=&#34;400&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;fabric&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/mission-human_flourishing_via_AI_augmentation-purple&#34; alt=&#34;Static Badge&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/danielmiessler/fabric&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/danielmiessler/fabric&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepwiki.com/danielmiessler/fabric&#34;&gt;&lt;img src=&#34;https://deepwiki.com/badge.svg?sanitize=true&#34; alt=&#34;Ask DeepWiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p class=&#34;align center&#34;&gt; &lt;/p&gt;&#xA;  &lt;h4&gt;&lt;code&gt;fabric&lt;/code&gt; is an open-source framework for augmenting humans using AI.&lt;/h4&gt; &#xA;  &lt;p&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#updates&#34;&gt;Updates&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#what-and-why&#34;&gt;What and Why&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#philosophy&#34;&gt;Philosophy&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#examples&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#just-use-the-patterns&#34;&gt;Just Use the Patterns&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#custom-patterns&#34;&gt;Custom Patterns&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#helper-apps&#34;&gt;Helper Apps&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#meta&#34;&gt;Meta&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/images/fabric-summarize.png&#34; alt=&#34;Screenshot of fabric&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What and why&lt;/h2&gt; &#xA;&lt;p&gt;Since the start of modern AI in late 2022 we&#39;ve seen an &lt;strong&gt;&lt;em&gt;extraordinary&lt;/em&gt;&lt;/strong&gt; number of AI applications for accomplishing tasks. There are thousands of websites, chat-bots, mobile apps, and other interfaces for using all the different AI out there.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s all really exciting and powerful, but &lt;em&gt;it&#39;s not easy to integrate this functionality into our lives.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p class=&#34;align center&#34;&gt; &lt;/p&gt;&#xA;&lt;h4&gt;In other words, AI doesn&#39;t have a capabilities problem—it has an &lt;em&gt;integration&lt;/em&gt; problem.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fabric was created to address this by creating and organizing the fundamental units of AI—the prompts themselves!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fabric organizes prompts by real-world task, allowing people to create, collect, and organize their most important AI solutions in a single place for use in their favorite tools. And if you&#39;re command-line focused, you can use Fabric itself as the interface!&lt;/p&gt; &#xA;&lt;h2&gt;Intro videos&lt;/h2&gt; &#xA;&lt;p&gt;Keep in mind that many of these were recorded when Fabric was Python-based, so remember to use the current &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installation&#34;&gt;install instructions&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UbDyjIIGaxQ&#34;&gt;Network Chuck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vF-MQmVxnCs&#34;&gt;David Bombal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wPEyyigh10g&#34;&gt;My Own Intro to the Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/results?search_query=fabric+ai&#34;&gt;More Fabric YouTube Videos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#fabric&#34;&gt;&lt;code&gt;fabric&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#intro-videos&#34;&gt;Intro videos&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#navigation&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#updates&#34;&gt;Updates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#philosophy&#34;&gt;Philosophy&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#breaking-problems-into-components&#34;&gt;Breaking problems into components&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#too-many-prompts&#34;&gt;Too many prompts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#get-latest-release-binaries&#34;&gt;Get Latest Release Binaries&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#macos-arm64&#34;&gt;macOS (arm64)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#macos-amd64&#34;&gt;macOS (amd64)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#linux-amd64&#34;&gt;Linux (amd64)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#linux-arm64&#34;&gt;Linux (arm64)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#using-package-managers&#34;&gt;Using package managers&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#macos-homebrew&#34;&gt;macOS (Homebrew)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#arch-linux-aur&#34;&gt;Arch Linux (AUR)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#from-source&#34;&gt;From Source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#add-aliases-for-all-patterns&#34;&gt;Add aliases for all patterns&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#save-your-files-in-markdown-using-aliases&#34;&gt;Save your files in markdown using aliases&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#migration&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#shell-completions&#34;&gt;Shell Completions&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#zsh-completion&#34;&gt;Zsh Completion&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#bash-completion&#34;&gt;Bash Completion&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#fish-completion&#34;&gt;Fish Completion&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#our-approach-to-prompting&#34;&gt;Our approach to prompting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#just-use-the-patterns&#34;&gt;Just use the Patterns&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#prompt-strategies&#34;&gt;Prompt Strategies&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#custom-patterns&#34;&gt;Custom Patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#helper-apps&#34;&gt;Helper Apps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#to_pdf&#34;&gt;&lt;code&gt;to_pdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#to_pdf-installation&#34;&gt;&lt;code&gt;to_pdf&lt;/code&gt; Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#code_helper&#34;&gt;&lt;code&gt;code_helper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#pbpaste&#34;&gt;pbpaste&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#web-interface&#34;&gt;Web Interface&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#streamlit-ui&#34;&gt;Streamlit UI&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#clipboard-support&#34;&gt;Clipboard Support&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#meta&#34;&gt;Meta&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#primary-contributors&#34;&gt;Primary contributors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;June 17, 2025&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Fabric now supports Perplexity AI. Configure it by using &lt;code&gt;fabric -S&lt;/code&gt; to add your Perplexity AI API Key, and then try:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -m sonar-pro &#34;What is the latest world news?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;June 11, 2025&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fabric&#39;s YouTube transcription now needs &lt;code&gt;yt-dlp&lt;/code&gt; to be installed. Make sure to install the latest version (2025.06.09 as of this note). The YouTube API key is only needed for comments (the &lt;code&gt;--comments&lt;/code&gt; flag) and metadata extraction (the &lt;code&gt;--metadata&lt;/code&gt; flag).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AI isn&#39;t a thing; it&#39;s a &lt;em&gt;magnifier&lt;/em&gt; of a thing. And that thing is &lt;strong&gt;human creativity&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We believe the purpose of technology is to help humans flourish, so when we talk about AI we start with the &lt;strong&gt;human&lt;/strong&gt; problems we want to solve.&lt;/p&gt; &#xA;&lt;h3&gt;Breaking problems into components&lt;/h3&gt; &#xA;&lt;p&gt;Our approach is to break problems into individual pieces (see below) and then apply AI to them one at a time. See below for some examples.&lt;/p&gt; &#xA;&lt;img width=&#34;2078&#34; alt=&#34;augmented_challenges&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/31997394-85a9-40c2-879b-b347e4701f06&#34;&gt; &#xA;&lt;h3&gt;Too many prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are good for this, but the biggest challenge I faced in 2023——which still exists today—is &lt;strong&gt;the sheer number of AI prompts out there&lt;/strong&gt;. We all have prompts that are useful, but it&#39;s hard to discover new ones, know if they are good or not, &lt;em&gt;and manage different versions of the ones we like&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One of &lt;code&gt;fabric&lt;/code&gt;&#39;s primary features is helping people collect and integrate prompts, which we call &lt;em&gt;Patterns&lt;/em&gt;, into various parts of their lives.&lt;/p&gt; &#xA;&lt;p&gt;Fabric has Patterns for all sorts of life and work activities, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extracting the most interesting parts of YouTube videos and podcasts&lt;/li&gt; &#xA; &lt;li&gt;Writing an essay in your own voice with just an idea as an input&lt;/li&gt; &#xA; &lt;li&gt;Summarizing opaque academic papers&lt;/li&gt; &#xA; &lt;li&gt;Creating perfectly matched AI art prompts for a piece of writing&lt;/li&gt; &#xA; &lt;li&gt;Rating the quality of content to see if you want to read/watch the whole thing&lt;/li&gt; &#xA; &lt;li&gt;Getting summaries of long, boring content&lt;/li&gt; &#xA; &lt;li&gt;Explaining code to you&lt;/li&gt; &#xA; &lt;li&gt;Turning bad documentation into usable documentation&lt;/li&gt; &#xA; &lt;li&gt;Creating social media posts from any content input&lt;/li&gt; &#xA; &lt;li&gt;And a million more…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Fabric, you can use the latest release binaries or install it from the source.&lt;/p&gt; &#xA;&lt;h3&gt;Get Latest Release Binaries&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;https://github.com/danielmiessler/fabric/releases/latest/download/fabric-windows-amd64.exe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;macOS (arm64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-arm64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;macOS (amd64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-amd64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Linux (amd64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-amd64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Linux (arm64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-arm64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using package managers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; using Homebrew or the Arch Linux package managers makes &lt;code&gt;fabric&lt;/code&gt; available as &lt;code&gt;fabric-ai&lt;/code&gt;, so add the following alias to your shell startup files to account for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias fabric=&#39;fabric-ai&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS (Homebrew)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install fabric-ai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Arch Linux (AUR)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;yay -S fabric-ai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;To install Fabric, &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;make sure Go is installed&lt;/a&gt;, and then run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Fabric directly from the repo&#xA;go install github.com/danielmiessler/fabric@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;You may need to set some environment variables in your &lt;code&gt;~/.bashrc&lt;/code&gt; on linux or &lt;code&gt;~/.zshrc&lt;/code&gt; file on mac to be able to run the &lt;code&gt;fabric&lt;/code&gt; command. Here is an example of what you can add:&lt;/p&gt; &#xA;&lt;p&gt;For Intel based macs or linux&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Golang environment variables&#xA;export GOROOT=/usr/local/go&#xA;export GOPATH=$HOME/go&#xA;&#xA;# Update PATH to include GOPATH and GOROOT binaries&#xA;export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for Apple Silicon based macs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Golang environment variables&#xA;export GOROOT=$(brew --prefix go)/libexec&#xA;export GOPATH=$HOME/go&#xA;export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Now run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the setup to set up your directories and keys&#xA;fabric --setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything works you are good to go.&lt;/p&gt; &#xA;&lt;h3&gt;Add aliases for all patterns&lt;/h3&gt; &#xA;&lt;p&gt;In order to add aliases for all your patterns and use them directly as commands ie. &lt;code&gt;summarize&lt;/code&gt; instead of &lt;code&gt;fabric --pattern summarize&lt;/code&gt; You can add the following to your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Loop through all files in the ~/.config/fabric/patterns directory&#xA;for pattern_file in $HOME/.config/fabric/patterns/*; do&#xA;    # Get the base name of the file (i.e., remove the directory path)&#xA;    pattern_name=$(basename &#34;$pattern_file&#34;)&#xA;&#xA;    # Create an alias in the form: alias pattern_name=&#34;fabric --pattern pattern_name&#34;&#xA;    alias_command=&#34;alias $pattern_name=&#39;fabric --pattern $pattern_name&#39;&#34;&#xA;&#xA;    # Evaluate the alias command to add it to the current shell&#xA;    eval &#34;$alias_command&#34;&#xA;done&#xA;&#xA;yt() {&#xA;    if [ &#34;$#&#34; -eq 0 ] || [ &#34;$#&#34; -gt 2 ]; then&#xA;        echo &#34;Usage: yt [-t | --timestamps] youtube-link&#34;&#xA;        echo &#34;Use the &#39;-t&#39; flag to get the transcript with timestamps.&#34;&#xA;        return 1&#xA;    fi&#xA;&#xA;    transcript_flag=&#34;--transcript&#34;&#xA;    if [ &#34;$1&#34; = &#34;-t&#34; ] || [ &#34;$1&#34; = &#34;--timestamps&#34; ]; then&#xA;        transcript_flag=&#34;--transcript-with-timestamps&#34;&#xA;        shift&#xA;    fi&#xA;    local video_link=&#34;$1&#34;&#xA;    fabric -y &#34;$video_link&#34; $transcript_flag&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the below code for the equivalent aliases inside PowerShell by running &lt;code&gt;notepad $PROFILE&lt;/code&gt; inside a PowerShell window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Path to the patterns directory&#xA;$patternsPath = Join-Path $HOME &#34;.config/fabric/patterns&#34;&#xA;foreach ($patternDir in Get-ChildItem -Path $patternsPath -Directory) {&#xA;    $patternName = $patternDir.Name&#xA;&#xA;    # Dynamically define a function for each pattern&#xA;    $functionDefinition = @&#34;&#xA;function $patternName {&#xA;    [CmdletBinding()]&#xA;    param(&#xA;        [Parameter(ValueFromPipeline = `$true)]&#xA;        [string] `$InputObject,&#xA;&#xA;        [Parameter(ValueFromRemainingArguments = `$true)]&#xA;        [String[]] `$patternArgs&#xA;    )&#xA;&#xA;    begin {&#xA;        # Initialize an array to collect pipeline input&#xA;        `$collector = @()&#xA;    }&#xA;&#xA;    process {&#xA;        # Collect pipeline input objects&#xA;        if (`$InputObject) {&#xA;            `$collector += `$InputObject&#xA;        }&#xA;    }&#xA;&#xA;    end {&#xA;        # Join all pipeline input into a single string, separated by newlines&#xA;        `$pipelineContent = `$collector -join &#34;`n&#34;&#xA;&#xA;        # If there&#39;s pipeline input, include it in the call to fabric&#xA;        if (`$pipelineContent) {&#xA;            `$pipelineContent | fabric --pattern $patternName `$patternArgs&#xA;        } else {&#xA;            # No pipeline input; just call fabric with the additional args&#xA;            fabric --pattern $patternName `$patternArgs&#xA;        }&#xA;    }&#xA;}&#xA;&#34;@&#xA;    # Add the function to the current session&#xA;    Invoke-Expression $functionDefinition&#xA;}&#xA;&#xA;# Define the &#39;yt&#39; function as well&#xA;function yt {&#xA;    [CmdletBinding()]&#xA;    param(&#xA;        [Parameter()]&#xA;        [Alias(&#34;timestamps&#34;)]&#xA;        [switch]$t,&#xA;&#xA;        [Parameter(Position = 0, ValueFromPipeline = $true)]&#xA;        [string]$videoLink&#xA;    )&#xA;&#xA;    begin {&#xA;        $transcriptFlag = &#34;--transcript&#34;&#xA;        if ($t) {&#xA;            $transcriptFlag = &#34;--transcript-with-timestamps&#34;&#xA;        }&#xA;    }&#xA;&#xA;    process {&#xA;        if (-not $videoLink) {&#xA;            Write-Error &#34;Usage: yt [-t | --timestamps] youtube-link&#34;&#xA;            return&#xA;        }&#xA;    }&#xA;&#xA;    end {&#xA;        if ($videoLink) {&#xA;            # Execute and allow output to flow through the pipeline&#xA;            fabric -y $videoLink $transcriptFlag&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also creates a &lt;code&gt;yt&lt;/code&gt; alias that allows you to use &lt;code&gt;yt https://www.youtube.com/watch?v=4b0iet22VIk&lt;/code&gt; to get transcripts, comments, and metadata.&lt;/p&gt; &#xA;&lt;h4&gt;Save your files in markdown using aliases&lt;/h4&gt; &#xA;&lt;p&gt;If in addition to the above aliases you would like to have the option to save the output to your favorite markdown note vault like Obsidian then instead of the above add the following to your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Define the base directory for Obsidian notes&#xA;obsidian_base=&#34;/path/to/obsidian&#34;&#xA;&#xA;# Loop through all files in the ~/.config/fabric/patterns directory&#xA;for pattern_file in ~/.config/fabric/patterns/*; do&#xA;    # Get the base name of the file (i.e., remove the directory path)&#xA;    pattern_name=$(basename &#34;$pattern_file&#34;)&#xA;&#xA;    # Remove any existing alias with the same name&#xA;    unalias &#34;$pattern_name&#34; 2&amp;gt;/dev/null&#xA;&#xA;    # Define a function dynamically for each pattern&#xA;    eval &#34;&#xA;    $pattern_name() {&#xA;        local title=\$1&#xA;        local date_stamp=\$(date +&#39;%Y-%m-%d&#39;)&#xA;        local output_path=\&#34;\$obsidian_base/\${date_stamp}-\${title}.md\&#34;&#xA;&#xA;        # Check if a title was provided&#xA;        if [ -n \&#34;\$title\&#34; ]; then&#xA;            # If a title is provided, use the output path&#xA;            fabric --pattern \&#34;$pattern_name\&#34; -o \&#34;\$output_path\&#34;&#xA;        else&#xA;            # If no title is provided, use --stream&#xA;            fabric --pattern \&#34;$pattern_name\&#34; --stream&#xA;        fi&#xA;    }&#xA;    &#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow you to use the patterns as aliases like in the above for example &lt;code&gt;summarize&lt;/code&gt; instead of &lt;code&gt;fabric --pattern summarize --stream&lt;/code&gt;, however if you pass in an extra argument like this &lt;code&gt;summarize &#34;my_article_title&#34;&lt;/code&gt; your output will be saved in the destination that you set in &lt;code&gt;obsidian_base=&#34;/path/to/obsidian&#34;&lt;/code&gt; in the following format &lt;code&gt;YYYY-MM-DD-my_article_title.md&lt;/code&gt; where the date gets autogenerated for you. You can tweak the date format by tweaking the &lt;code&gt;date_stamp&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;Migration&lt;/h3&gt; &#xA;&lt;p&gt;If you have the Legacy (Python) version installed and want to migrate to the Go version, here&#39;s how you do it. It&#39;s basically two steps: 1) uninstall the Python version, and 2) install the Go version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Uninstall Legacy Fabric&#xA;pipx uninstall fabric&#xA;&#xA;# Clear any old Fabric aliases&#xA;(check your .bashrc, .zshrc, etc.)&#xA;# Install the Go version&#xA;go install github.com/danielmiessler/fabric@latest&#xA;# Run setup for the new version. Important because things have changed&#xA;fabric --setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#environment-variables&#34;&gt;set your environmental variables&lt;/a&gt; as shown above.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading&lt;/h3&gt; &#xA;&lt;p&gt;The great thing about Go is that it&#39;s super easy to upgrade. Just run the same command you used to install it in the first place and you&#39;ll always get the latest version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/fabric@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Completions&lt;/h3&gt; &#xA;&lt;p&gt;Fabric provides shell completion scripts for Zsh, Bash, and Fish shells, making it easier to use the CLI by providing tab completion for commands and options.&lt;/p&gt; &#xA;&lt;h4&gt;Zsh Completion&lt;/h4&gt; &#xA;&lt;p&gt;To enable Zsh completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copy the completion file to a directory in your $fpath&#xA;mkdir -p ~/.zsh/completions&#xA;cp completions/_fabric ~/.zsh/completions/&#xA;&#xA;# Add the directory to fpath in your .zshrc before compinit&#xA;echo &#39;fpath=(~/.zsh/completions $fpath)&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;autoload -Uz compinit &amp;amp;&amp;amp; compinit&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bash Completion&lt;/h4&gt; &#xA;&lt;p&gt;To enable Bash completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Source the completion script in your .bashrc&#xA;echo &#39;source /path/to/fabric/completions/fabric.bash&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&#xA;# Or copy to the system-wide bash completion directory&#xA;sudo cp completions/fabric.bash /etc/bash_completion.d/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish Completion&lt;/h4&gt; &#xA;&lt;p&gt;To enable Fish completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copy the completion file to the fish completions directory&#xA;mkdir -p ~/.config/fish/completions&#xA;cp completions/fabric.fish ~/.config/fish/completions/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have it all set up, here&#39;s how to use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;&#xA;Usage:&#xA;  fabric [OPTIONS]&#xA;&#xA;Application Options:&#xA;  -p, --pattern=                    Choose a pattern from the available patterns&#xA;  -v, --variable=                   Values for pattern variables, e.g. -v=#role:expert -v=#points:30&#xA;  -C, --context=                    Choose a context from the available contexts&#xA;      --session=                    Choose a session from the available sessions&#xA;  -a, --attachment=                 Attachment path or URL (e.g. for OpenAI image recognition messages)&#xA;  -S, --setup                       Run setup for all reconfigurable parts of fabric&#xA;  -t, --temperature=                Set temperature (default: 0.7)&#xA;  -T, --topp=                       Set top P (default: 0.9)&#xA;  -s, --stream                      Stream&#xA;  -P, --presencepenalty=            Set presence penalty (default: 0.0)&#xA;  -r, --raw                         Use the defaults of the model without sending chat options (like temperature etc.) and use the user role instead of the system role for patterns.&#xA;  -F, --frequencypenalty=           Set frequency penalty (default: 0.0)&#xA;  -l, --listpatterns                List all patterns&#xA;  -L, --listmodels                  List all available models&#xA;  -x, --listcontexts                List all contexts&#xA;  -X, --listsessions                List all sessions&#xA;  -U, --updatepatterns              Update patterns&#xA;  -c, --copy                        Copy to clipboard&#xA;  -m, --model=                      Choose model&#xA;      --modelContextLength=         Model context length (only affects ollama)&#xA;  -o, --output=                     Output to file&#xA;      --output-session              Output the entire session (also a temporary one) to the output file&#xA;  -n, --latest=                     Number of latest patterns to list (default: 0)&#xA;  -d, --changeDefaultModel          Change default model&#xA;  -y, --youtube=                    YouTube video or play list &#34;URL&#34; to grab transcript, comments from it and send to chat or print it put to the console and store it in the output file&#xA;      --playlist                    Prefer playlist over video if both ids are present in the URL&#xA;      --transcript                  Grab transcript from YouTube video and send to chat (it is used per default).&#xA;      --transcript-with-timestamps  Grab transcript from YouTube video with timestamps and send to chat&#xA;      --comments                    Grab comments from YouTube video and send to chat&#xA;      --metadata                    Output video metadata&#xA;  -g, --language=                   Specify the Language Code for the chat, e.g. -g=en -g=zh&#xA;  -u, --scrape_url=                 Scrape website URL to markdown using Jina AI&#xA;  -q, --scrape_question=            Search question using Jina AI&#xA;  -e, --seed=                       Seed to be used for LMM generation&#xA;  -w, --wipecontext=                Wipe context&#xA;  -W, --wipesession=                Wipe session&#xA;      --printcontext=               Print context&#xA;      --printsession=               Print session&#xA;      --readability                 Convert HTML input into a clean, readable view&#xA;      --input-has-vars              Apply variables to user input&#xA;      --dry-run                     Show what would be sent to the model without actually sending it&#xA;      --serve                       Serve the Fabric Rest API&#xA;      --serveOllama                 Serve the Fabric Rest API with ollama endpoints&#xA;      --address=                    The address to bind the REST API (default: :8080)&#xA;      --api-key=                    API key used to secure server routes&#xA;      --config=                     Path to YAML config file&#xA;      --version                     Print current version&#xA;      --listextensions              List all registered extensions&#xA;      --addextension=               Register a new extension from config file path&#xA;      --rmextension=                Remove a registered extension by name&#xA;      --strategy=                   Choose a strategy from the available strategies&#xA;      --liststrategies              List all strategies&#xA;      --listvendors                 List all vendors&#xA;      --shell-complete-list         Output raw list without headers/formatting (for shell completion)&#xA;&#xA;Help Options:&#xA;  -h, --help                        Show this help message&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Our approach to prompting&lt;/h2&gt; &#xA;&lt;p&gt;Fabric &lt;em&gt;Patterns&lt;/em&gt; are different than most prompts you&#39;ll see.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;First, we use &lt;code&gt;Markdown&lt;/code&gt; to help ensure maximum readability and editability&lt;/strong&gt;. This not only helps the creator make a good one, but also anyone who wants to deeply understand what it does. &lt;em&gt;Importantly, this also includes the AI you&#39;re sending it to!&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of a Fabric Pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1461&#34; alt=&#34;pattern-example&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/b910c551-9263-405f-9735-71ca69bbab6d&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Next, we are extremely clear in our instructions&lt;/strong&gt;, and we use the Markdown structure to emphasize what we want the AI to do, and in what order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;And finally, we tend to use the System section of the prompt almost exclusively&lt;/strong&gt;. In over a year of being heads-down with this stuff, we&#39;ve just seen more efficacy from doing that. If that changes, or we&#39;re shown data that says otherwise, we will adjust.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following examples use the macOS &lt;code&gt;pbpaste&lt;/code&gt; to paste from the clipboard. See the &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#pbpaste&#34;&gt;pbpaste&lt;/a&gt; section below for Windows and Linux alternatives.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now let&#39;s look at some things you can do with Fabric.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;summarize&lt;/code&gt; Pattern based on input from &lt;code&gt;stdin&lt;/code&gt;. In this case, the body of an article.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pbpaste | fabric --pattern summarize&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;analyze_claims&lt;/code&gt; Pattern with the &lt;code&gt;--stream&lt;/code&gt; option to get immediate and streaming results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pbpaste | fabric --stream --pattern analyze_claims&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;extract_wisdom&lt;/code&gt; Pattern with the &lt;code&gt;--stream&lt;/code&gt; option to get immediate and streaming results from any Youtube video (much like in the original introduction video).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -y &#34;https://youtube.com/watch?v=uXs-zPc63kM&#34; --stream --pattern extract_wisdom&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create patterns- you must create a .md file with the pattern and save it to &lt;code&gt;~/.config/fabric/patterns/[yourpatternname]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a &lt;code&gt;analyze_claims&lt;/code&gt; pattern on a website. Fabric uses Jina AI to scrape the URL into markdown format before sending it to the model.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -u https://github.com/danielmiessler/fabric/ -p analyze_claims&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Just use the Patterns&lt;/h2&gt; &#xA;&lt;img width=&#34;1173&#34; alt=&#34;fabric-patterns-screenshot&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/9186a044-652b-4673-89f7-71cf066f32d8&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you&#39;re not looking to do anything fancy, and you just want a lot of great prompts, you can navigate to the &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main/patterns&#34;&gt;&lt;code&gt;/patterns&lt;/code&gt;&lt;/a&gt; directory and start exploring!&lt;/p&gt; &#xA;&lt;p&gt;We hope that if you used nothing else from Fabric, the Patterns by themselves will make the project useful.&lt;/p&gt; &#xA;&lt;p&gt;You can use any of the Patterns you see there in any AI application that you have, whether that&#39;s ChatGPT or some other app or website. Our plan and prediction is that people will soon be sharing many more than those we&#39;ve published, and they will be way better than ours.&lt;/p&gt; &#xA;&lt;p&gt;The wisdom of crowds for the win.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt Strategies&lt;/h3&gt; &#xA;&lt;p&gt;Fabric also implements prompt strategies like &#34;Chain of Thought&#34; or &#34;Chain of Draft&#34; which can be used in addition to the basic patterns.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://arxiv.org/pdf/2502.18600&#34;&gt;Thinking Faster by Writing Less&lt;/a&gt; paper and the &lt;a href=&#34;https://learnprompting.org/docs/advanced/thought_generation/introduction&#34;&gt;Thought Generation section of Learn Prompting&lt;/a&gt; for examples of prompt strategies.&lt;/p&gt; &#xA;&lt;p&gt;Each strategy is available as a small &lt;code&gt;json&lt;/code&gt; file in the &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main/strategies&#34;&gt;&lt;code&gt;/strategies&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The prompt modification of the strategy is applied to the system prompt and passed on to the LLM in the chat session.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;fabric -S&lt;/code&gt; and select the option to install the strategies in your &lt;code&gt;~/.config/fabric&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Patterns&lt;/h2&gt; &#xA;&lt;p&gt;You may want to use Fabric to create your own custom Patterns—but not share them with others. No problem!&lt;/p&gt; &#xA;&lt;p&gt;Just make a directory in &lt;code&gt;~/.config/custompatterns/&lt;/code&gt; (or wherever) and put your &lt;code&gt;.md&lt;/code&gt; files in there.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to use them, copy them into &lt;code&gt;~/.config/fabric/patterns/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can then use them like any other Patterns, but they won&#39;t be public unless you explicitly submit them as Pull Requests to the Fabric project. So don&#39;t worry—they&#39;re private to you.&lt;/p&gt; &#xA;&lt;h2&gt;Helper Apps&lt;/h2&gt; &#xA;&lt;p&gt;Fabric also makes use of some core helper apps (tools) to make it easier to integrate with your various workflows. Here are some examples:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;to_pdf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;to_pdf&lt;/code&gt; is a helper command that converts LaTeX files to PDF format. You can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;to_pdf input.tex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a PDF file from the input LaTeX file in the same directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also use it with stdin which works perfectly with the &lt;code&gt;write_latex&lt;/code&gt; pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;ai security primer&#34; | fabric --pattern write_latex | to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a PDF file named &lt;code&gt;output.pdf&lt;/code&gt; in the current directory.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;to_pdf&lt;/code&gt; Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;code&gt;to_pdf&lt;/code&gt;, install it the same way as you install Fabric, just with a different repo name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/fabric/plugins/tools/to_pdf@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have a LaTeX distribution (like TeX Live or MiKTeX) installed on your system, as &lt;code&gt;to_pdf&lt;/code&gt; requires &lt;code&gt;pdflatex&lt;/code&gt; to be available in your system&#39;s PATH.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;code_helper&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;code_helper&lt;/code&gt; is used in conjunction with the &lt;code&gt;create_coding_feature&lt;/code&gt; pattern. It generates a &lt;code&gt;json&lt;/code&gt; representation of a directory of code that can be fed into an AI model with instructions to create a new feature or edit the code in a specified way.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/patterns/create_coding_feature/README.md&#34;&gt;the Create Coding Feature Pattern README&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Install it first using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/fabric/plugins/tools/code_helper@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;pbpaste&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#examples&#34;&gt;examples&lt;/a&gt; use the macOS program &lt;code&gt;pbpaste&lt;/code&gt; to paste content from the clipboard to pipe into &lt;code&gt;fabric&lt;/code&gt; as the input. &lt;code&gt;pbpaste&lt;/code&gt; is not available on Windows or Linux, but there are alternatives.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, you can use the PowerShell command &lt;code&gt;Get-Clipboard&lt;/code&gt; from a PowerShell command prompt. If you like, you can also alias it to &lt;code&gt;pbpaste&lt;/code&gt;. If you are using classic PowerShell, edit the file &lt;code&gt;~\Documents\WindowsPowerShell\.profile.ps1&lt;/code&gt;, or if you are using PowerShell Core, edit &lt;code&gt;~\Documents\PowerShell\.profile.ps1&lt;/code&gt; and add the alias,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-Alias pbpaste Get-Clipboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux, you can use &lt;code&gt;xclip -selection clipboard -o&lt;/code&gt; to paste from the clipboard. You will likely need to install &lt;code&gt;xclip&lt;/code&gt; with your package manager. For Debian based systems including Ubuntu,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo apt install xclip -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create an alias by editing &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; and adding the alias,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias pbpaste=&#39;xclip -selection clipboard -o&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web Interface&lt;/h2&gt; &#xA;&lt;p&gt;Fabric now includes a built-in web interface that provides a GUI alternative to the command-line interface and an out-of-the-box website for those who want to get started with web development or blogging. You can use this app as a GUI interface for Fabric, a ready to go blog-site, or a website template for your own projects.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;web/src/lib/content&lt;/code&gt; directory includes starter &lt;code&gt;.obsidian/&lt;/code&gt; and &lt;code&gt;templates/&lt;/code&gt; directories, allowing you to open up the &lt;code&gt;web/src/lib/content/&lt;/code&gt; directory as an &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian.md&lt;/a&gt; vault. You can place your posts in the posts directory when you&#39;re ready to publish.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;The GUI can be installed by navigating to the &lt;code&gt;web&lt;/code&gt; directory and using &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;pnpm install&lt;/code&gt;, or your favorite package manager. Then simply run the development server to start the app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You will need to run fabric in a separate terminal with the &lt;code&gt;fabric --serve&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;From the fabric project &lt;code&gt;web/&lt;/code&gt; directory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run dev&#xA;&#xA;## or ##&#xA;&#xA;pnpm run dev&#xA;&#xA;## or your equivalent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streamlit UI&lt;/h3&gt; &#xA;&lt;p&gt;To run the Streamlit user interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install required dependencies&#xA;pip install -r requirements.txt&#xA;&#xA;# Or manually install dependencies&#xA;pip install streamlit pandas matplotlib seaborn numpy python-dotenv pyperclip&#xA;&#xA;# Run the Streamlit app&#xA;streamlit run streamlit.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Streamlit UI provides a user-friendly interface for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running and chaining patterns&lt;/li&gt; &#xA; &lt;li&gt;Managing pattern outputs&lt;/li&gt; &#xA; &lt;li&gt;Creating and editing patterns&lt;/li&gt; &#xA; &lt;li&gt;Analyzing pattern results&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Clipboard Support&lt;/h4&gt; &#xA;&lt;p&gt;The Streamlit UI supports clipboard operations across different platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: Uses &lt;code&gt;pbcopy&lt;/code&gt; and &lt;code&gt;pbpaste&lt;/code&gt; (built-in)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Uses &lt;code&gt;pyperclip&lt;/code&gt; library (install with &lt;code&gt;pip install pyperclip&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: Uses &lt;code&gt;xclip&lt;/code&gt; (install with &lt;code&gt;sudo apt-get install xclip&lt;/code&gt; or equivalent for your Linux distribution)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Special thanks to the following people for their inspiration and contributions!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Jonathan Dunn&lt;/em&gt; for being the absolute MVP dev on the project, including spearheading the new Go version, as well as the GUI! All this while also being a full-time medical doctor!&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Caleb Sima&lt;/em&gt; for pushing me over the edge of whether to make this a public project or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Eugen Eisler&lt;/em&gt; and &lt;em&gt;Frederick Ros&lt;/em&gt; for their invaluable contributions to the Go version&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;David Peters&lt;/em&gt; for his work on the web interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Joel Parish&lt;/em&gt; for super useful input on the project&#39;s Github directory structure..&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Joseph Thacker&lt;/em&gt; for the idea of a &lt;code&gt;-c&lt;/code&gt; context flag that adds pre-created context in the &lt;code&gt;./config/fabric/&lt;/code&gt; directory to all Pattern queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Jason Haddix&lt;/em&gt; for the idea of a stitch (chained Pattern) to filter content using a local model before sending on to a cloud model, i.e., cleaning customer data using &lt;code&gt;llama2&lt;/code&gt; before sending on to &lt;code&gt;gpt-4&lt;/code&gt; for analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Andre Guerra&lt;/em&gt; for assisting with numerous components to make things simpler and more maintainable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Primary contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/danielmiessler&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/50654?v=4&#34; title=&#34;Daniel Miessler&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Daniel Miessler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xssdoctor&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9218431?v=4&#34; title=&#34;Jonathan Dunn&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Jonathan Dunn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sbehrens&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/688589?v=4&#34; title=&#34;Scott Behrens&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Scott Behrens&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agu3rra&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10410523?v=4&#34; title=&#34;Andre Guerra&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Andre Guerra&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/danielmiessler/fabric/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=danielmiessler/fabric&#34; alt=&#34;contrib.rocks&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fabric&lt;/code&gt; was created by &lt;a href=&#34;https://danielmiessler.com/subscribe&#34; target=&#34;_blank&#34;&gt;Daniel Miessler&lt;/a&gt; in January of 2024. &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/intent/user?screen_name=danielmiessler&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/danielmiessler&#34; alt=&#34;X (formerly Twitter) Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NginxProxyManager/nginx-proxy-manager</title>
    <updated>2025-07-03T01:29:26Z</updated>
    <id>tag:github.com,2025-07-03:/NginxProxyManager/nginx-proxy-manager</id>
    <link href="https://github.com/NginxProxyManager/nginx-proxy-manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker container for managing Nginx proxy hosts with a simple, powerful interface&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://nginxproxymanager.com/github.png&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/version-2.12.4-green.svg?style=for-the-badge&#34;&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/jc21/nginx-proxy-manager.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/jc21/nginx-proxy-manager&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/jc21/nginx-proxy-manager.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This project comes as a pre-built docker image that enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NginxProxyManager/nginx-proxy-manager/develop/#quick-setup&#34;&gt;Quick Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nginxproxymanager.com/setup/&#34;&gt;Full Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nginxproxymanager.com/screenshots/&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Goal&lt;/h2&gt; &#xA;&lt;p&gt;I created this project to fill a personal need to provide users with an easy way to accomplish reverse proxying hosts with SSL termination and it had to be so easy that a monkey could do it. This goal hasn&#39;t changed. While there might be advanced options they are optional and the project should be as simple as possible so that the barrier for entry here is low.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/jc21&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://public.jc21.com/github/by-me-a-coffee.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 51px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beautiful and Secure Admin Interface based on &lt;a href=&#34;https://tabler.github.io/&#34;&gt;Tabler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily create forwarding domains, redirections, streams and 404 hosts without knowing anything about Nginx&lt;/li&gt; &#xA; &lt;li&gt;Free SSL using Let&#39;s Encrypt or provide your own custom SSL certificates&lt;/li&gt; &#xA; &lt;li&gt;Access Lists and basic HTTP Authentication for your hosts&lt;/li&gt; &#xA; &lt;li&gt;Advanced Nginx configuration available for super users&lt;/li&gt; &#xA; &lt;li&gt;User management, permissions and audit log&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hosting your home network&lt;/h2&gt; &#xA;&lt;p&gt;I won&#39;t go in to too much detail here but here are the basics for someone new to this self-hosted world.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your home router will have a Port Forwarding section somewhere. Log in and find it&lt;/li&gt; &#xA; &lt;li&gt;Add port forwarding for port 80 and 443 to the server hosting this project&lt;/li&gt; &#xA; &lt;li&gt;Configure your domain name details to point to your home, either with a static ip or a service like DuckDNS or &lt;a href=&#34;https://github.com/jc21/route53-ddns&#34;&gt;Amazon Route53&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the Nginx Proxy Manager as your gateway to forward to your other web based services&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Docker and Docker-Compose&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Docker Install documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker-Compose Install documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a docker-compose.yml file similar to this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;services:&#xA;  app:&#xA;    image: &#39;docker.io/jc21/nginx-proxy-manager:latest&#39;&#xA;    restart: unless-stopped&#xA;    ports:&#xA;      - &#39;80:80&#39;&#xA;      - &#39;81:81&#39;&#xA;      - &#39;443:443&#39;&#xA;    volumes:&#xA;      - ./data:/data&#xA;      - ./letsencrypt:/etc/letsencrypt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the bare minimum configuration required. See the &lt;a href=&#34;https://nginxproxymanager.com/setup/&#34;&gt;documentation&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Bring up your stack by running&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&#xA;# If using docker-compose-plugin&#xA;docker compose up -d&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Log in to the Admin UI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When your docker container is running, connect to it on port &lt;code&gt;81&lt;/code&gt; for the admin interface. Sometimes this can take a little bit because of the entropy of keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:81&#34;&gt;http://127.0.0.1:81&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default Admin User:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Email:    admin@example.com&#xA;Password: changeme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Immediately after logging in with this default user you will be asked to modify your details and change your password.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All are welcome to create pull requests for this project, against the &lt;code&gt;develop&lt;/code&gt; branch. Official releases are created from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;CI is used in this project. All PR&#39;s must pass before being considered. After passing, docker builds for PR&#39;s are available on dockerhub for manual verifications.&lt;/p&gt; &#xA;&lt;p&gt;Documentation within the &lt;code&gt;develop&lt;/code&gt; branch is available for preview at &lt;a href=&#34;https://develop.nginxproxymanager.com&#34;&gt;https://develop.nginxproxymanager.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/NginxProxyManager/nginx-proxy-manager/graphs/contributors&#34;&gt;all of our contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Support&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NginxProxyManager/nginx-proxy-manager/issues&#34;&gt;Found a bug?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NginxProxyManager/nginx-proxy-manager/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reddit.com/r/nginxproxymanager&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>binwiederhier/ntfy</title>
    <updated>2025-07-03T01:29:26Z</updated>
    <id>tag:github.com,2025-07-03:/binwiederhier/ntfy</id>
    <link href="https://github.com/binwiederhier/ntfy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Send push notifications to your phone or desktop using PUT/POST&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/images/ntfy.png&#34; alt=&#34;ntfy&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ntfy.sh | Send push notifications to your phone or desktop via PUT/POST&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binwiederhier/ntfy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/binwiederhier/ntfy.svg?color=success&amp;amp;style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/heckel.io/ntfy/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/heckel.io/ntfy.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/binwiederhier/ntfy/actions&#34;&gt;&lt;img src=&#34;https://github.com/binwiederhier/ntfy/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/binwiederhier/ntfy&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/binwiederhier/ntfy&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binwiederhier/ntfy&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binwiederhier/ntfy/branch/main/graph/badge.svg?token=A597KQ463G&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cT7ECsZj9w&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/874398661709295626?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/%23ntfy:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/ntfy:matrix.org?label=Matrix&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/%23ntfy-space:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/ntfy-space:matrix.org?label=Matrix+space&#34; alt=&#34;Matrix space&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ntfy.statuspage.io/&#34;&gt;&lt;img src=&#34;https://healthchecks.io/badge/68b65976-b3b0-4102-aec9-980921/kcoEgrLY.svg?sanitize=true&#34; alt=&#34;Healthcheck&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/binwiederhier/ntfy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod&#34; alt=&#34;Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ntfy&lt;/strong&gt; (pronounced &#34;&lt;em&gt;notify&lt;/em&gt;&#34;) is a simple HTTP-based &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;pub-sub&lt;/a&gt; notification service. With ntfy, you can &lt;strong&gt;send notifications to your phone or desktop via scripts&lt;/strong&gt; from any computer, &lt;strong&gt;without having to sign up or pay any fees&lt;/strong&gt;. If you&#39;d like to run your own instance of the service, you can easily do so since ntfy is open source.&lt;/p&gt; &#xA;&lt;p&gt;You can access the free version of ntfy at &lt;strong&gt;&lt;a href=&#34;https://ntfy.sh&#34;&gt;ntfy.sh&lt;/a&gt;&lt;/strong&gt;. There is also an &lt;a href=&#34;https://github.com/binwiederhier/ntfy-android&#34;&gt;open-source Android app&lt;/a&gt; available on &lt;a href=&#34;https://play.google.com/store/apps/details?id=io.heckel.ntfy&#34;&gt;Google Play&lt;/a&gt; or &lt;a href=&#34;https://f-droid.org/en/packages/io.heckel.ntfy/&#34;&gt;F-Droid&lt;/a&gt;, as well as an &lt;a href=&#34;https://github.com/binwiederhier/ntfy-ios&#34;&gt;open source iOS app&lt;/a&gt; available on the &lt;a href=&#34;https://apps.apple.com/us/app/ntfy/id1625396347&#34;&gt;App Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-curl.png&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-web-detail.png&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-phone-main.jpg&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-phone-detail.jpg&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/.github/images/screenshot-phone-notification.jpg&#34; height=&#34;180&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://ntfy.sh/app&#34;&gt;ntfy Pro&lt;/a&gt; 💸 🎉&lt;/h2&gt; &#xA;&lt;p&gt;I now offer paid plans for &lt;a href=&#34;https://ntfy.sh/&#34;&gt;ntfy.sh&lt;/a&gt; if you don&#39;t want to self-host, or you want to support the development of ntfy (→ &lt;a href=&#34;https://ntfy.sh/app&#34;&gt;Purchase via web app&lt;/a&gt;). You can &lt;strong&gt;buy a plan for as low as $5/month&lt;/strong&gt;. You can also donate via &lt;a href=&#34;https://github.com/sponsors/binwiederhier&#34;&gt;GitHub Sponsors&lt;/a&gt;, and &lt;a href=&#34;https://liberapay.com/ntfy&#34;&gt;Liberapay&lt;/a&gt;. I would be very humbled by your sponsorship. ❤️&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;a href=&#34;https://ntfy.sh/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ntfy.sh/docs/&#34;&gt;Getting started&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/subscribe/phone/&#34;&gt;Android/iOS&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/publish/&#34;&gt;API&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/install/&#34;&gt;Install / Self-hosting&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/develop/&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chat/forum&lt;/h2&gt; &#xA;&lt;p&gt;There are a few ways to get in touch with me and/or the rest of the community. Feel free to use any of these methods. Whatever works best for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/cT7ECsZj9w&#34;&gt;Discord server&lt;/a&gt; - direct chat with the community&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/%23ntfy:matrix.org&#34;&gt;Matrix room #ntfy&lt;/a&gt; (+ &lt;a href=&#34;https://matrix.to/#/%23ntfy-space:matrix.org&#34;&gt;Matrix space&lt;/a&gt;) - same chat, bridged from Discord&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binwiederhier/ntfy/issues&#34;&gt;GitHub issues&lt;/a&gt; - questions, features, bugs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Announcements/beta testers&lt;/h2&gt; &#xA;&lt;p&gt;For announcements of new releases and cutting-edge beta versions, please subscribe to the &lt;a href=&#34;https://ntfy.sh/announcements&#34;&gt;ntfy.sh/announcements&lt;/a&gt; topic. If you&#39;d like to test the iOS app, join &lt;a href=&#34;https://testflight.apple.com/join/P1fFnAm9&#34;&gt;TestFlight&lt;/a&gt;. For Android betas, join Discord/Matrix (I&#39;ll eventually make a testing channel in Google Play).&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to support the ntfy maintainers, please consider donating to &lt;a href=&#34;https://github.com/sponsors/binwiederhier&#34;&gt;GitHub Sponsors&lt;/a&gt; or and &lt;a href=&#34;https://liberapay.com/ntfy&#34;&gt;Liberapay&lt;/a&gt;. We would be humbled if you helped carry the server and developer account costs. Even small donations are very much appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to our commercial sponsors, who help keep the service running and the development going:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://m.do.co/c/442b929528db&#34;&gt;&lt;img src=&#34;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg?sanitize=true&#34; width=&#34;201px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.magicbell.com/?utm_source=ntfy&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/assets/sponsors/magicbell.png&#34; width=&#34;180px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And a big fat &lt;strong&gt;Thank You&lt;/strong&gt; to the individuals who have sponsored ntfy in the past, or are still sponsoring ntfy:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neutralinsomniac&#34;&gt;&lt;img src=&#34;https://github.com/neutralinsomniac.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aspyct&#34;&gt;&lt;img src=&#34;https://github.com/aspyct.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nickexyz&#34;&gt;&lt;img src=&#34;https://github.com/nickexyz.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qcasey&#34;&gt;&lt;img src=&#34;https://github.com/qcasey.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mckay115&#34;&gt;&lt;img src=&#34;https://github.com/mckay115.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Salamafet&#34;&gt;&lt;img src=&#34;https://github.com/Salamafet.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/codinghipster&#34;&gt;&lt;img src=&#34;https://github.com/codinghipster.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HinFort&#34;&gt;&lt;img src=&#34;https://github.com/HinFort.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Lexevolution&#34;&gt;&lt;img src=&#34;https://github.com/Lexevolution.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/johnnyip&#34;&gt;&lt;img src=&#34;https://github.com/johnnyip.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JonDerThan&#34;&gt;&lt;img src=&#34;https://github.com/JonDerThan.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/12nick12&#34;&gt;&lt;img src=&#34;https://github.com/12nick12.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eanplatter&#34;&gt;&lt;img src=&#34;https://github.com/eanplatter.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fnoelscher&#34;&gt;&lt;img src=&#34;https://github.com/fnoelscher.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bnorick&#34;&gt;&lt;img src=&#34;https://github.com/bnorick.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/snh&#34;&gt;&lt;img src=&#34;https://github.com/snh.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hen-x&#34;&gt;&lt;img src=&#34;https://github.com/hen-x.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamieGoodson&#34;&gt;&lt;img src=&#34;https://github.com/JamieGoodson.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cremesk&#34;&gt;&lt;img src=&#34;https://github.com/cremesk.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dangowans&#34;&gt;&lt;img src=&#34;https://github.com/dangowans.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mnault&#34;&gt;&lt;img src=&#34;https://github.com/mnault.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nwithan8&#34;&gt;&lt;img src=&#34;https://github.com/nwithan8.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/peterleiser&#34;&gt;&lt;img src=&#34;https://github.com/peterleiser.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/portothree&#34;&gt;&lt;img src=&#34;https://github.com/portothree.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/finngreig&#34;&gt;&lt;img src=&#34;https://github.com/finngreig.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skrollme&#34;&gt;&lt;img src=&#34;https://github.com/skrollme.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gergepalfi&#34;&gt;&lt;img src=&#34;https://github.com/gergepalfi.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tonyakwei&#34;&gt;&lt;img src=&#34;https://github.com/tonyakwei.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/crosbyh&#34;&gt;&lt;img src=&#34;https://github.com/crosbyh.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mdlnr&#34;&gt;&lt;img src=&#34;https://github.com/mdlnr.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/p-samuel&#34;&gt;&lt;img src=&#34;https://github.com/p-samuel.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zugaldia&#34;&gt;&lt;img src=&#34;https://github.com/zugaldia.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NathanSweet&#34;&gt;&lt;img src=&#34;https://github.com/NathanSweet.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/msdeibel&#34;&gt;&lt;img src=&#34;https://github.com/msdeibel.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ksurl&#34;&gt;&lt;img src=&#34;https://github.com/ksurl.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CodingTimeDEV&#34;&gt;&lt;img src=&#34;https://github.com/CodingTimeDEV.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Terrormixer3000&#34;&gt;&lt;img src=&#34;https://github.com/Terrormixer3000.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/voroskoi&#34;&gt;&lt;img src=&#34;https://github.com/voroskoi.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Nickwasused&#34;&gt;&lt;img src=&#34;https://github.com/Nickwasused.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bahur142&#34;&gt;&lt;img src=&#34;https://github.com/bahur142.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vinhdizzo&#34;&gt;&lt;img src=&#34;https://github.com/vinhdizzo.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Ge0rg3&#34;&gt;&lt;img src=&#34;https://github.com/Ge0rg3.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/biopsin&#34;&gt;&lt;img src=&#34;https://github.com/biopsin.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thebino&#34;&gt;&lt;img src=&#34;https://github.com/thebino.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sky4055&#34;&gt;&lt;img src=&#34;https://github.com/sky4055.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/julianlam&#34;&gt;&lt;img src=&#34;https://github.com/julianlam.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/andreapx&#34;&gt;&lt;img src=&#34;https://github.com/andreapx.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/billycao&#34;&gt;&lt;img src=&#34;https://github.com/billycao.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zoic21&#34;&gt;&lt;img src=&#34;https://github.com/zoic21.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IanKulin&#34;&gt;&lt;img src=&#34;https://github.com/IanKulin.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Joachim256&#34;&gt;&lt;img src=&#34;https://github.com/Joachim256.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/overtone1000&#34;&gt;&lt;img src=&#34;https://github.com/overtone1000.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oakd&#34;&gt;&lt;img src=&#34;https://github.com/oakd.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KucharczykL&#34;&gt;&lt;img src=&#34;https://github.com/KucharczykL.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hansbickhofe&#34;&gt;&lt;img src=&#34;https://github.com/hansbickhofe.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/caseodilla&#34;&gt;&lt;img src=&#34;https://github.com/caseodilla.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xAF&#34;&gt;&lt;img src=&#34;https://github.com/0xAF.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/soonoo&#34;&gt;&lt;img src=&#34;https://github.com/soonoo.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nichu42&#34;&gt;&lt;img src=&#34;https://github.com/nichu42.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/samliebow&#34;&gt;&lt;img src=&#34;https://github.com/samliebow.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/johman10&#34;&gt;&lt;img src=&#34;https://github.com/johman10.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/R-Gld&#34;&gt;&lt;img src=&#34;https://github.com/R-Gld.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FingerlessGlov3s&#34;&gt;&lt;img src=&#34;https://github.com/FingerlessGlov3s.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Twisterado&#34;&gt;&lt;img src=&#34;https://github.com/Twisterado.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ScrumpyJack&#34;&gt;&lt;img src=&#34;https://github.com/ScrumpyJack.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/andrejarrell&#34;&gt;&lt;img src=&#34;https://github.com/andrejarrell.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oaustegard&#34;&gt;&lt;img src=&#34;https://github.com/oaustegard.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CreativeWarlock&#34;&gt;&lt;img src=&#34;https://github.com/CreativeWarlock.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/darkdragon-001&#34;&gt;&lt;img src=&#34;https://github.com/darkdragon-001.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jonathan-kosgei&#34;&gt;&lt;img src=&#34;https://github.com/jonathan-kosgei.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KevinWang15&#34;&gt;&lt;img src=&#34;https://github.com/KevinWang15.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/darkmattercoder&#34;&gt;&lt;img src=&#34;https://github.com/darkmattercoder.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bmcgonag&#34;&gt;&lt;img src=&#34;https://github.com/bmcgonag.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skorokithakis&#34;&gt;&lt;img src=&#34;https://github.com/skorokithakis.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eenturk&#34;&gt;&lt;img src=&#34;https://github.com/eenturk.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spirossi&#34;&gt;&lt;img src=&#34;https://github.com/spirossi.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/teomarcdhio&#34;&gt;&lt;img src=&#34;https://github.com/teomarcdhio.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarcMichalsky&#34;&gt;&lt;img src=&#34;https://github.com/MarcMichalsky.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LuckVintage&#34;&gt;&lt;img src=&#34;https://github.com/LuckVintage.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spartan&#34;&gt;&lt;img src=&#34;https://github.com/spartan.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alexandzors&#34;&gt;&lt;img src=&#34;https://github.com/alexandzors.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dkramer95&#34;&gt;&lt;img src=&#34;https://github.com/dkramer95.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YezGotIt&#34;&gt;&lt;img src=&#34;https://github.com/YezGotIt.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thomasskou&#34;&gt;&lt;img src=&#34;https://github.com/thomasskou.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/surfernv&#34;&gt;&lt;img src=&#34;https://github.com/surfernv.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/richardleach&#34;&gt;&lt;img src=&#34;https://github.com/richardleach.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bear&#34;&gt;&lt;img src=&#34;https://github.com/bear.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cminter&#34;&gt;&lt;img src=&#34;https://github.com/cminter.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bahur142&#34;&gt;&lt;img src=&#34;https://github.com/bahur142.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pgwiebes&#34;&gt;&lt;img src=&#34;https://github.com/pgwiebes.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ralhei&#34;&gt;&lt;img src=&#34;https://github.com/ralhei.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TechMDW&#34;&gt;&lt;img src=&#34;https://github.com/TechMDW.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ubipo&#34;&gt;&lt;img src=&#34;https://github.com/ubipo.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tka85&#34;&gt;&lt;img src=&#34;https://github.com/tka85.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/beekeeb&#34;&gt;&lt;img src=&#34;https://github.com/beekeeb.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Emiliaaah&#34;&gt;&lt;img src=&#34;https://github.com/Emiliaaah.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zark0s&#34;&gt;&lt;img src=&#34;https://github.com/zark0s.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tomershvueli&#34;&gt;&lt;img src=&#34;https://github.com/tomershvueli.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CataIana&#34;&gt;&lt;img src=&#34;https://github.com/CataIana.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ajay-actuary&#34;&gt;&lt;img src=&#34;https://github.com/ajay-actuary.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mursec&#34;&gt;&lt;img src=&#34;https://github.com/mursec.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FrameXX&#34;&gt;&lt;img src=&#34;https://github.com/FrameXX.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vovayartsev&#34;&gt;&lt;img src=&#34;https://github.com/vovayartsev.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dwain-lab&#34;&gt;&lt;img src=&#34;https://github.com/dwain-lab.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brookmg&#34;&gt;&lt;img src=&#34;https://github.com/brookmg.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/siebej&#34;&gt;&lt;img src=&#34;https://github.com/siebej.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rxsantos&#34;&gt;&lt;img src=&#34;https://github.com/rxsantos.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hermannx5&#34;&gt;&lt;img src=&#34;https://github.com/hermannx5.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rwxd&#34;&gt;&lt;img src=&#34;https://github.com/rwxd.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Integral-Tech&#34;&gt;&lt;img src=&#34;https://github.com/Integral-Tech.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheTomik1&#34;&gt;&lt;img src=&#34;https://github.com/TheTomik1.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dav23r&#34;&gt;&lt;img src=&#34;https://github.com/dav23r.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stannynuytkens&#34;&gt;&lt;img src=&#34;https://github.com/stannynuytkens.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danbartram&#34;&gt;&lt;img src=&#34;https://github.com/danbartram.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arthurgleckler&#34;&gt;&lt;img src=&#34;https://github.com/arthurgleckler.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tomroth04&#34;&gt;&lt;img src=&#34;https://github.com/tomroth04.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Circenn5130&#34;&gt;&lt;img src=&#34;https://github.com/Circenn5130.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jceloria&#34;&gt;&lt;img src=&#34;https://github.com/jceloria.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/afunworm&#34;&gt;&lt;img src=&#34;https://github.com/afunworm.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PTR-inc&#34;&gt;&lt;img src=&#34;https://github.com/PTR-inc.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spudooli&#34;&gt;&lt;img src=&#34;https://github.com/spudooli.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IMarkoMC&#34;&gt;&lt;img src=&#34;https://github.com/IMarkoMC.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rubund&#34;&gt;&lt;img src=&#34;https://github.com/rubund.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Riolku&#34;&gt;&lt;img src=&#34;https://github.com/Riolku.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/arnbrhm&#34;&gt;&lt;img src=&#34;https://github.com/arnbrhm.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/herzkerl&#34;&gt;&lt;img src=&#34;https://github.com/herzkerl.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0x45796164&#34;&gt;&lt;img src=&#34;https://github.com/0x45796164.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/madchr1st&#34;&gt;&lt;img src=&#34;https://github.com/madchr1st.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avalentic&#34;&gt;&lt;img src=&#34;https://github.com/avalentic.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TheCraiggers&#34;&gt;&lt;img src=&#34;https://github.com/TheCraiggers.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sheetd&#34;&gt;&lt;img src=&#34;https://github.com/sheetd.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dlt-green&#34;&gt;&lt;img src=&#34;https://github.com/dlt-green.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/suhlig&#34;&gt;&lt;img src=&#34;https://github.com/suhlig.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Proximus888&#34;&gt;&lt;img src=&#34;https://github.com/Proximus888.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wielandp&#34;&gt;&lt;img src=&#34;https://github.com/wielandp.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chxseh&#34;&gt;&lt;img src=&#34;https://github.com/chxseh.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/user8446&#34;&gt;&lt;img src=&#34;https://github.com/user8446.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cdf-eagles&#34;&gt;&lt;img src=&#34;https://github.com/cdf-eagles.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;I welcome any contributions. Just create a PR or an issue. For larger features/ideas, please reach out on Discord/Matrix first to see if I&#39;d accept them. To contribute code, check out the &lt;a href=&#34;https://ntfy.sh/docs/develop/&#34;&gt;build instructions&lt;/a&gt; for the server and the Android app. Or, if you&#39;d like to help translate 🇩🇪 🇺🇸 🇧🇬, you can start immediately in &lt;a href=&#34;https://hosted.weblate.org/projects/ntfy/&#34;&gt;Hosted Weblate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/ntfy/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/ntfy/-/multi-blue.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please be sure to read the complete &lt;a href=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;https://heckel.io&#34;&gt;Philipp C. Heckel&lt;/a&gt;.&lt;br&gt; The project is dual licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/LICENSE.GPLv2&#34;&gt;GPLv2 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Third-party libraries and resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;github.com/urfave/cli&lt;/a&gt; (MIT) is used to drive the CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mixkit.co/free-sound-effects/notification/&#34;&gt;Mixkit sounds&lt;/a&gt; (Mixkit Free License) are used as notification sounds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://notificationsounds.com&#34;&gt;Sounds from notificationsounds.com&lt;/a&gt; (Creative Commons Attribution) are used as notification sounds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Roboto&#34;&gt;Roboto Font&lt;/a&gt; (Apache 2.0) is used as a font in everything web&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; (MIT) is used for the web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mui.com/&#34;&gt;Material UI components&lt;/a&gt; (MIT) are used in the web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mui/material-ui/tree/master/docs/data/material/getting-started/templates/dashboard&#34;&gt;MUI dashboard template&lt;/a&gt; (MIT) was used as a basis for the web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dexie/Dexie.js&#34;&gt;Dexie.js&lt;/a&gt; (Apache 2.0) is used for web app persistence in IndexedDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goreleaser.com/&#34;&gt;GoReleaser&lt;/a&gt; (MIT) is used to create releases&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emersion/go-smtp&#34;&gt;go-smtp&lt;/a&gt; (MIT) is used to receive e-mails&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;stretchr/testify&lt;/a&gt; (MIT) is used for unit and integration tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;github.com/mattn/go-sqlite3&lt;/a&gt; (MIT) is used to provide the persistent message cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firebase/firebase-admin-go&#34;&gt;Firebase Admin SDK&lt;/a&gt; (Apache 2.0) is used to send FCM messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/gemoji&#34;&gt;github/gemoji&lt;/a&gt; (MIT) is used for emoji support (specifically the &lt;a href=&#34;https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json&#34;&gt;emoji.json&lt;/a&gt; file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yossiabramov.com/blog/vanilla-js-lightbox&#34;&gt;Lightbox with vanilla JS&lt;/a&gt; as a lightbox on the landing page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/CJEnright/bc2d8b8dc0c1389a9feeddb110f822d7&#34;&gt;HTTP middleware for gzip compression&lt;/a&gt; (MIT) is used for serving static files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bryanwoods/autolink-js&#34;&gt;Regex for auto-linking&lt;/a&gt; (MIT) is used to highlight links (the library is not used)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.arp242.net/static-go.html&#34;&gt;Statically linking go-sqlite3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facelessuser.github.io/pymdown-extensions/extensions/tabbed/#linked-tabs&#34;&gt;Linked tabs in mkdocs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SherClockHolmes/webpush-go&#34;&gt;webpush-go&lt;/a&gt; (MIT) is used to send web push notifications&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>