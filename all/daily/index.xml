<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-10T01:31:25Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CompVis/taming-transformers</title>
    <updated>2022-10-10T01:31:25Z</updated>
    <id>tag:github.com,2022-10-10:/CompVis/taming-transformers</id>
    <link href="https://github.com/CompVis/taming-transformers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/h1&gt; &#xA;&lt;h5&gt;CVPR 2021 (Oral)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/mountain.jpeg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://compvis.github.io/taming-transformers/&#34;&gt;&lt;strong&gt;Taming Transformers for High-Resolution Image Synthesis&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/pesser&#34;&gt;Patrick Esser&lt;/a&gt;*, &lt;a href=&#34;https://github.com/rromb&#34;&gt;Robin Rombach&lt;/a&gt;*, &lt;a href=&#34;https://hci.iwr.uni-heidelberg.de/Staff/bommer&#34;&gt;Bj√∂rn Ommer&lt;/a&gt;&lt;br&gt; * equal contribution&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; We combine the efficiancy of convolutional approaches with the expressivity of transformers by introducing a convolutional VQGAN, which learns a codebook of context-rich visual parts, whose composition is modeled with an autoregressive transformer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/teaser.png&#34; alt=&#34;teaser&#34;&gt; &lt;a href=&#34;https://arxiv.org/abs/2012.09841&#34;&gt;arXiv&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#bibtex&#34;&gt;BibTeX&lt;/a&gt; | &lt;a href=&#34;https://compvis.github.io/taming-transformers/&#34;&gt;Project Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;News&lt;/h3&gt; &#xA;&lt;h4&gt;2022&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More pretrained VQGANs (e.g. a f8-model with only 256 codebook entries) are available in our new work on &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;Latent Diffusion Models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Added scene synthesis models as proposed in the paper &lt;a href=&#34;https://arxiv.org/abs/2105.06458&#34;&gt;High-Resolution Complex Scene Synthesis with Transformers&lt;/a&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#scene-image-synthesis&#34;&gt;this section&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2021&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/rom1504&#34;&gt;rom1504&lt;/a&gt; it is now easy to &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#training-on-custom-data&#34;&gt;train a VQGAN on your own datasets&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Included a bugfix for the quantizer. For backward compatibility it is disabled by default (which corresponds to always training with &lt;code&gt;beta=1.0&lt;/code&gt;). Use &lt;code&gt;legacy=False&lt;/code&gt; in the quantizer config to enable it. Thanks &lt;a href=&#34;https://github.com/richcmwang&#34;&gt;richcmwang&lt;/a&gt; and &lt;a href=&#34;https://github.com/wcshin-git&#34;&gt;wcshin-git&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Our paper received an update: See &lt;a href=&#34;https://arxiv.org/abs/2012.09841v3&#34;&gt;https://arxiv.org/abs/2012.09841v3&lt;/a&gt; and the corresponding changelog.&lt;/li&gt; &#xA; &lt;li&gt;Added a pretrained, &lt;a href=&#34;https://k00.fr/s511rwcv&#34;&gt;1.4B transformer model&lt;/a&gt; trained for class-conditional ImageNet synthesis, which obtains state-of-the-art FID scores among autoregressive approaches and outperforms BigGAN.&lt;/li&gt; &#xA; &lt;li&gt;Added pretrained, unconditional models on &lt;a href=&#34;https://k00.fr/yndvfu95&#34;&gt;FFHQ&lt;/a&gt; and &lt;a href=&#34;https://k00.fr/2xkmielf&#34;&gt;CelebA-HQ&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Added accelerated sampling via caching of keys/values in the self-attention operation, used in &lt;code&gt;scripts/sample_fast.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Added a checkpoint of a &lt;a href=&#34;https://heibox.uni-heidelberg.de/d/2e5662443a6b4307b470/&#34;&gt;VQGAN&lt;/a&gt; trained with f8 compression and Gumbel-Quantization. See also our updated &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;reconstruction notebook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We added a &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;colab notebook&lt;/a&gt; which compares two VQGANs and OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;DALL-E&lt;/a&gt;. See also &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#more-resources&#34;&gt;this section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We now include an overview of pretrained models in &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#overview-of-pretrained-models&#34;&gt;Tab.1&lt;/a&gt;. We added models for &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#coco&#34;&gt;COCO&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#ade20k&#34;&gt;ADE20k&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The streamlit demo now supports image completions.&lt;/li&gt; &#xA; &lt;li&gt;We now include a couple of examples from the D-RIN dataset so you can run the &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#d-rin&#34;&gt;D-RIN demo&lt;/a&gt; without preparing the dataset first.&lt;/li&gt; &#xA; &lt;li&gt;You can now jump right into sampling with our &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/taming-transformers.ipynb&#34;&gt;Colab quickstart notebook&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A suitable &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt; environment named &lt;code&gt;taming&lt;/code&gt; can be created and activated with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate taming&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview of pretrained models&lt;/h2&gt; &#xA;&lt;p&gt;The following table provides an overview of all models that are currently available. FID scores were evaluated using &lt;a href=&#34;https://github.com/toshas/torch-fidelity&#34;&gt;torch-fidelity&lt;/a&gt;. For reference, we also include a link to the recently released autoencoder of the &lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;DALL-E&lt;/a&gt; model. See the corresponding &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;colab notebook&lt;/a&gt; for a comparison and discussion of reconstruction capabilities.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dataset&lt;/th&gt; &#xA;   &lt;th&gt;FID vs train&lt;/th&gt; &#xA;   &lt;th&gt;FID vs val&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Samples (256x256)&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FFHQ (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;9.6&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/yndvfu95&#34;&gt;ffhq_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;ffhq_samples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CelebA-HQ (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;10.2&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/2xkmielf&#34;&gt;celebahq_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;celebahq_samples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADE20K (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;35.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/ot46cksa&#34;&gt;ade20k_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/f/70bb78cbaf844501b8fb/&#34;&gt;ade20k_samples.zip&lt;/a&gt; [2k]&lt;/td&gt; &#xA;   &lt;td&gt;evaluated on val split (2k images)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;COCO-Stuff (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;20.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/2zz6i2ce&#34;&gt;coco_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/f/a395a9be612f4a7a8054/&#34;&gt;coco_samples.zip&lt;/a&gt; [5k]&lt;/td&gt; &#xA;   &lt;td&gt;evaluated on val split (5k images)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ImageNet (cIN) (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;15.98/15.78/6.59/5.88/5.20&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/s511rwcv&#34;&gt;cin_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;cin_samples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;different decoding hyperparameters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FacesHQ (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/qqfl2do8&#34;&gt;faceshq_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;S-FLCKR (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/73487ab6e5314cb5adba/&#34;&gt;sflckr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;D-RIN (f=16)&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/39jcugc5&#34;&gt;drin_transformer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN ImageNet (f=16), 1024&lt;/td&gt; &#xA;   &lt;td&gt;10.54&lt;/td&gt; &#xA;   &lt;td&gt;7.94&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/8088892a516d4e3baf92/&#34;&gt;vqgan_imagenet_f16_1024&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;reconstructions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN ImageNet (f=16), 16384&lt;/td&gt; &#xA;   &lt;td&gt;7.41&lt;/td&gt; &#xA;   &lt;td&gt;4.98&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/&#34;&gt;vqgan_imagenet_f16_16384&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;reconstructions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN OpenImages (f=8), 256&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;1.49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ommer-lab.com/files/latent-diffusion/vq-f8-n256.zip&#34;&gt;https://ommer-lab.com/files/latent-diffusion/vq-f8-n256.zip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs. Available via &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN OpenImages (f=8), 16384&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;1.14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ommer-lab.com/files/latent-diffusion/vq-f8.zip&#34;&gt;https://ommer-lab.com/files/latent-diffusion/vq-f8.zip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs. Available via &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;latent diffusion&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VQGAN OpenImages (f=8), 8192, GumbelQuantization&lt;/td&gt; &#xA;   &lt;td&gt;3.24&lt;/td&gt; &#xA;   &lt;td&gt;1.49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/d/2e5662443a6b4307b470/&#34;&gt;vqgan_gumbel_f8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DALL-E dVAE (f=8), 8192, GumbelQuantization&lt;/td&gt; &#xA;   &lt;td&gt;33.88&lt;/td&gt; &#xA;   &lt;td&gt;32.01&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;https://github.com/openai/DALL-E&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://k00.fr/j626x093&#34;&gt;reconstructions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reconstruction-FIDs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Running pretrained models&lt;/h2&gt; &#xA;&lt;p&gt;The commands below will start a streamlit demo which supports sampling at different resolutions and image completions. To run a non-interactive version of the sampling process, replace &lt;code&gt;streamlit run scripts/sample_conditional.py --&lt;/code&gt; by &lt;code&gt;python scripts/make_samples.py --outdir &amp;lt;path_to_write_samples_to&amp;gt;&lt;/code&gt; and keep the remaining command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;To sample from unconditional or class-conditional models, run &lt;code&gt;python scripts/sample_fast.py -r &amp;lt;path/to/config_and_checkpoint&amp;gt;&lt;/code&gt;. We describe below how to use this script to sample from the ImageNet, FFHQ, and CelebA-HQ models, respectively.&lt;/p&gt; &#xA;&lt;h3&gt;S-FLCKR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/sunset_and_ocean.jpg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/taming-transformers.ipynb&#34;&gt;run this model in a Colab notebook&lt;/a&gt;, which includes all necessary steps to start sampling.&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://heibox.uni-heidelberg.de/d/73487ab6e5314cb5adba/&#34;&gt;2020-11-09T13-31-51_sflckr&lt;/a&gt; folder and place it into &lt;code&gt;logs&lt;/code&gt;. Then, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-09T13-31-51_sflckr/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ImageNet&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/imagenet.png&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://k00.fr/s511rwcv&#34;&gt;2021-04-03T19-39-50_cin_transformer&lt;/a&gt; folder and place it into logs. Sampling from the class-conditional ImageNet model does not require any data preparation. To produce 50 samples for each of the 1000 classes of ImageNet, with k=600 for top-k sampling, p=0.92 for nucleus sampling and temperature t=1.0, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-03T19-39-50_cin_transformer/ -n 50 -k 600 -t 1.0 -p 0.92 --batch_size 25   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To restrict the model to certain classes, provide them via the &lt;code&gt;--classes&lt;/code&gt; argument, separated by commas. For example, to sample 50 &lt;em&gt;ostriches&lt;/em&gt;, &lt;em&gt;border collies&lt;/em&gt; and &lt;em&gt;whiskey jugs&lt;/em&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-03T19-39-50_cin_transformer/ -n 50 -k 600 -t 1.0 -p 0.92 --batch_size 25 --classes 9,232,901   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommended to experiment with the autoregressive decoding parameters (top-k, top-p and temperature) for best results.&lt;/p&gt; &#xA;&lt;h3&gt;FFHQ/CelebA-HQ&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://k00.fr/yndvfu95&#34;&gt;2021-04-23T18-19-01_ffhq_transformer&lt;/a&gt; and &lt;a href=&#34;https://k00.fr/2xkmielf&#34;&gt;2021-04-23T18-11-19_celebahq_transformer&lt;/a&gt; folders and place them into logs. Again, sampling from these unconditional models does not require any data preparation. To produce 50000 samples, with k=250 for top-k sampling, p=1.0 for nucleus sampling and temperature t=1.0, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-23T18-19-01_ffhq_transformer/   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for FFHQ and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/sample_fast.py -r logs/2021-04-23T18-11-19_celebahq_transformer/   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to sample from the CelebA-HQ model. For both models it can be advantageous to vary the top-k/top-p parameters for sampling.&lt;/p&gt; &#xA;&lt;h3&gt;FacesHQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/faceshq.jpg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/qqfl2do8&#34;&gt;2020-11-13T21-41-45_faceshq_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. Follow the data preparation steps for &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#celeba-hq&#34;&gt;CelebA-HQ&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#ffhq&#34;&gt;FFHQ&lt;/a&gt;. Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-13T21-41-45_faceshq_transformer/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D-RIN&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/drin.jpg&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/39jcugc5&#34;&gt;2020-11-20T12-54-32_drin_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. To run the demo on a couple of example depth maps included in the repository, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T12-54-32_drin_transformer/ --ignore_base_data data=&#34;{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.imagenet.DRINExamples}}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the demo on the complete validation set, first follow the data preparation steps for &lt;a href=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/#imagenet&#34;&gt;ImageNet&lt;/a&gt; and then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T12-54-32_drin_transformer/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;COCO&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/2zz6i2ce&#34;&gt;2021-01-20T16-04-20_coco_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. To run the demo on a couple of example segmentation maps included in the repository, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2021-01-20T16-04-20_coco_transformer/ --ignore_base_data data=&#34;{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.coco.Examples}}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ADE20k&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://k00.fr/ot46cksa&#34;&gt;2020-11-20T21-45-44_ade20k_transformer&lt;/a&gt; and place it into &lt;code&gt;logs&lt;/code&gt;. To run the demo on a couple of example segmentation maps included in the repository, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T21-45-44_ade20k_transformer/ --ignore_base_data data=&#34;{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.ade20k.Examples}}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scene Image Synthesis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/scene_images_samples.svg?sanitize=true&#34; alt=&#34;teaser&#34;&gt; Scene image generation based on bounding box conditionals as done in our CVPR2021 AI4CC workshop paper &lt;a href=&#34;https://arxiv.org/abs/2105.06458&#34;&gt;High-Resolution Complex Scene Synthesis with Transformers&lt;/a&gt; (see talk on &lt;a href=&#34;https://visual.cs.brown.edu/workshops/aicc2021/#awards&#34;&gt;workshop page&lt;/a&gt;). Supporting the datasets COCO and Open Images.&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;Download first-stage models &lt;a href=&#34;https://heibox.uni-heidelberg.de/f/78dea9589974474c97c1/&#34;&gt;COCO-8k-VQGAN&lt;/a&gt; for COCO or &lt;a href=&#34;https://heibox.uni-heidelberg.de/f/461d9a9f4fcf48ab84f4/&#34;&gt;COCO/Open-Images-8k-VQGAN&lt;/a&gt; for Open Images. Change &lt;code&gt;ckpt_path&lt;/code&gt; in &lt;code&gt;data/coco_scene_images_transformer.yaml&lt;/code&gt; and &lt;code&gt;data/open_images_scene_images_transformer.yaml&lt;/code&gt; to point to the downloaded first-stage models. Download the full COCO/OI datasets and adapt &lt;code&gt;data_path&lt;/code&gt; in the same files, unless working with the 100 files provided for training and validation suits your needs already.&lt;/p&gt; &#xA;&lt;p&gt;Code can be run with &lt;code&gt;python main.py --base configs/coco_scene_images_transformer.yaml -t True --gpus 0,&lt;/code&gt; or &lt;code&gt;python main.py --base configs/open_images_scene_images_transformer.yaml -t True --gpus 0,&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sampling&lt;/h3&gt; &#xA;&lt;p&gt;Train a model as described above or download a pre-trained model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1FEK-Z7hyWJBvFWQF50pzSK9y1W_CJEig/view?usp=sharing&#34;&gt;Open Images 1 billion parameter model&lt;/a&gt; available that trained 100 epochs. On 256x256 pixels, FID 41.48¬±0.21, SceneFID 14.60¬±0.15, Inception Score 18.47¬±0.27. The model was trained with 2d crops of images and is thus well-prepared for the task of generating high-resolution images, e.g. 512x512.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1xf89g0mc78J3d8Bx5YhbK4tNRNlOoYaO&#34;&gt;Open Images distilled version of the above model with 125 million parameters&lt;/a&gt; allows for sampling on smaller GPUs (4 GB is enough for sampling 256x256 px images). Model was trained for 60 epochs with 10% soft loss, 90% hard loss. On 256x256 pixels, FID 43.07¬±0.40, SceneFID 15.93¬±0.19, Inception Score 17.23¬±0.11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heibox.uni-heidelberg.de/f/0d0b2594e9074c7e9a33/&#34;&gt;COCO 30 epochs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1bInd49g2YulTJBjU32Awyt5qnzxxG5U9/&#34;&gt;COCO 60 epochs&lt;/a&gt; (find model statistics for both COCO versions in &lt;code&gt;assets/coco_scene_images_training.svg&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When downloading a pre-trained model, remember to change &lt;code&gt;ckpt_path&lt;/code&gt; in &lt;code&gt;configs/*project.yaml&lt;/code&gt; to point to your downloaded first-stage model (see -&amp;gt;Training).&lt;/p&gt; &#xA;&lt;p&gt;Scene image generation can be run with &lt;code&gt;python scripts/make_scene_samples.py --outdir=/some/outdir -r /path/to/pretrained/model --resolution=512,512&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training on custom data&lt;/h2&gt; &#xA;&lt;p&gt;Training on your own dataset can be beneficial to get better tokens and hence better images for your domain. Those are the steps to follow to make this work:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;install the repo with &lt;code&gt;conda env create -f environment.yaml&lt;/code&gt;, &lt;code&gt;conda activate taming&lt;/code&gt; and &lt;code&gt;pip install -e .&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;put your .jpg files in a folder &lt;code&gt;your_folder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;create 2 text files a &lt;code&gt;xx_train.txt&lt;/code&gt; and &lt;code&gt;xx_test.txt&lt;/code&gt; that point to the files in your training and test set respectively (for example &lt;code&gt;find $(pwd)/your_folder -name &#34;*.jpg&#34; &amp;gt; train.txt&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;adapt &lt;code&gt;configs/custom_vqgan.yaml&lt;/code&gt; to point to these 2 files&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;python main.py --base configs/custom_vqgan.yaml -t True --gpus 0,1&lt;/code&gt; to train on two GPUs. Use &lt;code&gt;--gpus 0,&lt;/code&gt; (with a trailing comma) to train on a single GPU.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Data Preparation&lt;/h2&gt; &#xA;&lt;h3&gt;ImageNet&lt;/h3&gt; &#xA;&lt;p&gt;The code will try to download (through &lt;a href=&#34;http://academictorrents.com/&#34;&gt;Academic Torrents&lt;/a&gt;) and prepare ImageNet the first time it is used. However, since ImageNet is quite large, this requires a lot of disk space and time. If you already have ImageNet on your disk, you can speed things up by putting the data into &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/&lt;/code&gt; (which defaults to &lt;code&gt;~/.cache/autoencoders/data/ILSVRC2012_{split}/data/&lt;/code&gt;), where &lt;code&gt;{split}&lt;/code&gt; is one of &lt;code&gt;train&lt;/code&gt;/&lt;code&gt;validation&lt;/code&gt;. It should have the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/&#xA;‚îú‚îÄ‚îÄ n01440764&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01440764_10026.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01440764_10027.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ...&#xA;‚îú‚îÄ‚îÄ n01443537&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01443537_10007.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ n01443537_10014.JPEG&#xA;‚îÇ   ‚îú‚îÄ‚îÄ ...&#xA;‚îú‚îÄ‚îÄ ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t extracted the data, you can also place &lt;code&gt;ILSVRC2012_img_train.tar&lt;/code&gt;/&lt;code&gt;ILSVRC2012_img_val.tar&lt;/code&gt; (or symlinks to them) into &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_train/&lt;/code&gt; / &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_validation/&lt;/code&gt;, which will then be extracted into above structure without downloading it again. Note that this will only happen if neither a folder &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/&lt;/code&gt; nor a file &lt;code&gt;${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/.ready&lt;/code&gt; exist. Remove them if you want to force running the dataset preparation again.&lt;/p&gt; &#xA;&lt;p&gt;You will then need to prepare the depth data using &lt;a href=&#34;https://github.com/intel-isl/MiDaS&#34;&gt;MiDaS&lt;/a&gt;. Create a symlink &lt;code&gt;data/imagenet_depth&lt;/code&gt; pointing to a folder with two subfolders &lt;code&gt;train&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt;, each mirroring the structure of the corresponding ImageNet folder described above and containing a &lt;code&gt;png&lt;/code&gt; file for each of ImageNet&#39;s &lt;code&gt;JPEG&lt;/code&gt; files. The &lt;code&gt;png&lt;/code&gt; encodes &lt;code&gt;float32&lt;/code&gt; depth values obtained from MiDaS as RGBA images. We provide the script &lt;code&gt;scripts/extract_depth.py&lt;/code&gt; to generate this data. &lt;strong&gt;Please note&lt;/strong&gt; that this script uses &lt;a href=&#34;https://pytorch.org/hub/intelisl_midas_v2/&#34;&gt;MiDaS via PyTorch Hub&lt;/a&gt;. When we prepared the data, the hub provided the &lt;a href=&#34;https://github.com/intel-isl/MiDaS/releases/tag/v2&#34;&gt;MiDaS v2.0&lt;/a&gt; version, but now it provides a v2.1 version. We haven&#39;t tested our models with depth maps obtained via v2.1 and if you want to make sure that things work as expected, you must adjust the script to make sure it explicitly uses &lt;a href=&#34;https://github.com/intel-isl/MiDaS/releases/tag/v2&#34;&gt;v2.0&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;CelebA-HQ&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/celebahq&lt;/code&gt; pointing to a folder containing the &lt;code&gt;.npy&lt;/code&gt; files of CelebA-HQ (instructions to obtain them can be found in the &lt;a href=&#34;https://github.com/tkarras/progressive_growing_of_gans&#34;&gt;PGGAN repository&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;FFHQ&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/ffhq&lt;/code&gt; pointing to the &lt;code&gt;images1024x1024&lt;/code&gt; folder obtained from the &lt;a href=&#34;https://github.com/NVlabs/ffhq-dataset&#34;&gt;FFHQ repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;S-FLCKR&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, we are not allowed to distribute the images we collected for the S-FLCKR dataset and can therefore only give a description how it was produced. There are many resources on &lt;a href=&#34;https://github.com/adrianmrit/flickrdatasets&#34;&gt;collecting images from the web&lt;/a&gt; to get started. We collected sufficiently large images from &lt;a href=&#34;https://www.flickr.com&#34;&gt;flickr&lt;/a&gt; (see &lt;code&gt;data/flickr_tags.txt&lt;/code&gt; for a full list of tags used to find images) and various &lt;a href=&#34;https://www.reddit.com/r/sfwpornnetwork/wiki/network&#34;&gt;subreddits&lt;/a&gt; (see &lt;code&gt;data/subreddits.txt&lt;/code&gt; for all subreddits that were used). Overall, we collected 107625 images, and split them randomly into 96861 training images and 10764 validation images. We then obtained segmentation masks for each image using &lt;a href=&#34;https://arxiv.org/abs/1606.00915&#34;&gt;DeepLab v2&lt;/a&gt; trained on &lt;a href=&#34;https://arxiv.org/abs/1612.03716&#34;&gt;COCO-Stuff&lt;/a&gt;. We used a &lt;a href=&#34;https://github.com/kazuto1011/deeplab-pytorch&#34;&gt;PyTorch reimplementation&lt;/a&gt; and include an example script for this process in &lt;code&gt;scripts/extract_segmentation.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;COCO&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/coco&lt;/code&gt; containing the images from the 2017 split in &lt;code&gt;train2017&lt;/code&gt; and &lt;code&gt;val2017&lt;/code&gt;, and their annotations in &lt;code&gt;annotations&lt;/code&gt;. Files can be obtained from the &lt;a href=&#34;https://cocodataset.org/&#34;&gt;COCO webpage&lt;/a&gt;. In addition, we use the &lt;a href=&#34;http://calvin.inf.ed.ac.uk/wp-content/uploads/data/cocostuffdataset/stuffthingmaps_trainval2017.zip&#34;&gt;Stuff+thing PNG-style annotations on COCO 2017 trainval&lt;/a&gt; annotations from &lt;a href=&#34;https://github.com/nightrome/cocostuff&#34;&gt;COCO-Stuff&lt;/a&gt;, which should be placed under &lt;code&gt;data/cocostuffthings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ADE20k&lt;/h3&gt; &#xA;&lt;p&gt;Create a symlink &lt;code&gt;data/ade20k_root&lt;/code&gt; containing the contents of &lt;a href=&#34;http://data.csail.mit.edu/places/ADEchallenge/ADEChallengeData2016.zip&#34;&gt;ADEChallengeData2016.zip&lt;/a&gt; from the &lt;a href=&#34;http://sceneparsing.csail.mit.edu/&#34;&gt;MIT Scene Parsing Benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training models&lt;/h2&gt; &#xA;&lt;h3&gt;FacesHQ&lt;/h3&gt; &#xA;&lt;p&gt;Train a VQGAN with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/faceshq_vqgan.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, adjust the checkpoint path of the config key &lt;code&gt;model.params.first_stage_config.params.ckpt_path&lt;/code&gt; in &lt;code&gt;configs/faceshq_transformer.yaml&lt;/code&gt; (or download &lt;a href=&#34;https://k00.fr/uxy5usa9&#34;&gt;2020-11-09T13-33-36_faceshq_vqgan&lt;/a&gt; and place into &lt;code&gt;logs&lt;/code&gt;, which corresponds to the preconfigured checkpoint path), then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/faceshq_transformer.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D-RIN&lt;/h3&gt; &#xA;&lt;p&gt;Train a VQGAN on ImageNet with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/imagenet_vqgan.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download a pretrained one from &lt;a href=&#34;https://k00.fr/u0j2dtac&#34;&gt;2020-09-23T17-56-33_imagenet_vqgan&lt;/a&gt; and place under &lt;code&gt;logs&lt;/code&gt;. If you trained your own, adjust the path in the config key &lt;code&gt;model.params.first_stage_config.params.ckpt_path&lt;/code&gt; of &lt;code&gt;configs/drin_transformer.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Train a VQGAN on Depth Maps of ImageNet with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/imagenetdepth_vqgan.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download a pretrained one from &lt;a href=&#34;https://k00.fr/55rlxs6i&#34;&gt;2020-11-03T15-34-24_imagenetdepth_vqgan&lt;/a&gt; and place under &lt;code&gt;logs&lt;/code&gt;. If you trained your own, adjust the path in the config key &lt;code&gt;model.params.cond_stage_config.params.ckpt_path&lt;/code&gt; of &lt;code&gt;configs/drin_transformer.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To train the transformer, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python main.py --base configs/drin_transformer.yaml -t True --gpus 0,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Comparing Different First Stage Models&lt;/h3&gt; &#xA;&lt;p&gt;The reconstruction and compression capabilities of different fist stage models can be analyzed in this &lt;a href=&#34;https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb&#34;&gt;colab notebook&lt;/a&gt;. In particular, the notebook compares two VQGANs with a downsampling factor of f=16 for each and codebook dimensionality of 1024 and 16384, a VQGAN with f=8 and 8192 codebook entries and the discrete autoencoder of OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/DALL-E&#34;&gt;DALL-E&lt;/a&gt; (which has f=8 and 8192 codebook entries). &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/first_stage_squirrels.png&#34; alt=&#34;firststages1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/first_stage_mushrooms.png&#34; alt=&#34;firststages2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=o7dqGcLDf0A&amp;amp;feature=emb_imp_woyt&#34;&gt;video summary&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg&#34;&gt;Two Minute Papers&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=-wDSDtIAyWQ&#34;&gt;video summary&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/c/GradientDude/about&#34;&gt;Gradient Dude&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://wandb.ai/ayush-thakur/taming-transformer/reports/-Overview-Taming-Transformers-for-High-Resolution-Image-Synthesis---Vmlldzo0NjEyMTY&#34;&gt;weights and biases report summarizing the paper&lt;/a&gt; by &lt;a href=&#34;https://github.com/ayulockin&#34;&gt;ayulockin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=JfUTd8fjtX8&amp;amp;feature=emb_imp_woyt&#34;&gt;video summary&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCUzGQrN-lyyc0BWTYoJM_Sg&#34;&gt;What&#39;s AI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at &lt;a href=&#34;https://github.com/ak9250/taming-transformers/raw/master/tamingtransformerscolab.ipynb&#34;&gt;ak9250&#39;s notebook&lt;/a&gt; if you want to run the streamlit demos on Colab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text-to-Image Optimization via CLIP&lt;/h3&gt; &#xA;&lt;p&gt;VQGAN has been successfully used as an image generator guided by the &lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;CLIP&lt;/a&gt; model, both for pure image generation from scratch and image-to-image translation. We recommend the following notebooks/videos/resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/advadnoun/status/1389316507134357506&#34;&gt;Advadnouns&lt;/a&gt; Patreon and corresponding LatentVision notebooks: &lt;a href=&#34;https://www.patreon.com/patronizeme&#34;&gt;https://www.patreon.com/patronizeme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://colab.research.google.com/drive/1L8oL-vLJXVcRzCFbPwOoMkPKJ8-aYdPN&#34;&gt;notebook&lt;/a&gt; of &lt;a href=&#34;https://twitter.com/RiversHaveWings&#34;&gt;Rivers Have Wings&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.youtube.com/watch?v=90QDe6DQXF4&amp;amp;t=12s&#34;&gt;video&lt;/a&gt; explanation by &lt;a href=&#34;https://www.youtube.com/channel/UCy5znSnfMsDwaLlROnZ7Qbg&#34;&gt;Dot CSV&lt;/a&gt; (in Spanish, but English subtitles are available)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CompVis/taming-transformers/master/assets/birddrawnbyachild.png&#34; alt=&#34;txt2img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Text prompt: &lt;em&gt;&#39;A bird drawn by a child&#39;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shout-outs&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who makes their code and models available. In particular,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The architecture of our VQGAN is inspired by &lt;a href=&#34;https://github.com/hojonathanho/diffusion&#34;&gt;Denoising Diffusion Probabilistic Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The very hackable transformer implementation &lt;a href=&#34;https://github.com/karpathy/minGPT&#34;&gt;minGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The good ol&#39; &lt;a href=&#34;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&#34;&gt;PatchGAN&lt;/a&gt; and &lt;a href=&#34;https://github.com/richzhang/PerceptualSimilarity&#34;&gt;Learned Perceptual Similarity (LPIPS)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{esser2020taming,&#xA;      title={Taming Transformers for High-Resolution Image Synthesis}, &#xA;      author={Patrick Esser and Robin Rombach and Bj√∂rn Ommer},&#xA;      year={2020},&#xA;      eprint={2012.09841},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wagtail/wagtail</title>
    <updated>2022-10-10T01:31:25Z</updated>
    <id>tag:github.com,2022-10-10:/wagtail/wagtail</id>
    <link href="https://github.com/wagtail/wagtail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Django content management system focused on flexibility and user experience&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img width=&#34;343&#34; src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/wagtail.svg#gh-light-mode-only&#34; alt=&#34;Wagtail&#34;&gt; &lt;img width=&#34;343&#34; src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/wagtail-inverse.svg#gh-dark-mode-only&#34; alt=&#34;Wagtail&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/wagtail/wagtail/actions&#34;&gt; &lt;img src=&#34;https://github.com/wagtail/wagtail/workflows/Wagtail%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-BSD-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/wagtail/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/wagtail.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/wagtail/wagtail/alerts/&#34;&gt; &lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/wagtail/wagtail.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/wagtail/wagtail/context:python&#34;&gt; &lt;img src=&#34;https://img.shields.io/lgtm/grade/python/g/wagtail/wagtail.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: Python&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/wagtail/wagtail/context:javascript&#34;&gt; &lt;img src=&#34;https://img.shields.io/lgtm/grade/javascript/g/wagtail/wagtail.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: JavaScript&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/wagtail/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/wagtail?logo=Downloads&#34; alt=&#34;Monthly downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/WagtailCMS&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/WagtailCMS?style=social&amp;amp;logo=twitter&#34; alt=&#34;follow on Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Wagtail is an open source content management system built on Django, with a strong community and commercial support. It&#39;s focused on user experience, and offers precise control for designers and developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/wagtail-screenshot-with-browser.png&#34; alt=&#34;Wagtail screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üî• Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A fast, attractive interface for authors&lt;/li&gt; &#xA; &lt;li&gt;Complete control over front-end design and structure&lt;/li&gt; &#xA; &lt;li&gt;Scales to millions of pages and thousands of editors&lt;/li&gt; &#xA; &lt;li&gt;Fast out of the box, cache-friendly when you need it&lt;/li&gt; &#xA; &lt;li&gt;Content API for &#39;headless&#39; sites with de-coupled front-end&lt;/li&gt; &#xA; &lt;li&gt;Runs on a Raspberry Pi or a multi-datacenter cloud platform&lt;/li&gt; &#xA; &lt;li&gt;StreamField encourages flexible content without compromising structure&lt;/li&gt; &#xA; &lt;li&gt;Powerful, integrated search, using Elasticsearch or PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;Excellent support for images and embedded content&lt;/li&gt; &#xA; &lt;li&gt;Multi-site and multi-language ready&lt;/li&gt; &#xA; &lt;li&gt;Embraces and extends Django&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find out more at &lt;a href=&#34;https://wagtail.org/&#34;&gt;wagtail.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üëâ Getting started&lt;/h3&gt; &#xA;&lt;p&gt;Wagtail works with &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3&lt;/a&gt;, on any platform.&lt;/p&gt; &#xA;&lt;p&gt;To get started with using Wagtail, run the following in a virtual environment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/install-animation.gif&#34; alt=&#34;Installing Wagtail&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install wagtail&#xA;wagtail start mysite&#xA;cd mysite&#xA;pip install -r requirements.txt&#xA;python manage.py migrate&#xA;python manage.py createsuperuser&#xA;python manage.py runserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed installation and setup docs, see &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/tutorial.html&#34;&gt;the getting started tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Who‚Äôs using it?&lt;/h3&gt; &#xA;&lt;p&gt;Wagtail is used by &lt;a href=&#34;https://www.nasa.gov/&#34;&gt;NASA&lt;/a&gt;, &lt;a href=&#34;https://www.google.com/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://www.oxfam.org/en&#34;&gt;Oxfam&lt;/a&gt;, the &lt;a href=&#34;https://www.nhs.uk/&#34;&gt;NHS&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/en-US/&#34;&gt;Mozilla&lt;/a&gt;, &lt;a href=&#34;https://www.mit.edu/&#34;&gt;MIT&lt;/a&gt;, the &lt;a href=&#34;https://www.icrc.org/en&#34;&gt;Red Cross&lt;/a&gt;, &lt;a href=&#34;https://www.salesforce.com/&#34;&gt;Salesforce&lt;/a&gt;, &lt;a href=&#34;https://www.nbc.com/&#34;&gt;NBC&lt;/a&gt;, &lt;a href=&#34;https://www.bmw.com/en/index.html&#34;&gt;BMW&lt;/a&gt;, and the US and UK governments. Add your own Wagtail site to &lt;a href=&#34;https://madewithwagtail.org&#34;&gt;madewithwagtail.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üìñ Documentation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.wagtail.org/&#34;&gt;docs.wagtail.org&lt;/a&gt; is the full reference for Wagtail, and includes guides for developers, designers and editors, alongside release notes and our roadmap.&lt;/p&gt; &#xA;&lt;p&gt;For those who are &lt;strong&gt;new to Wagtail&lt;/strong&gt;, the &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/the_zen_of_wagtail.html&#34;&gt;Zen of Wagtail&lt;/a&gt; will help you understand what Wagtail is, and what Wagtail is &lt;em&gt;not&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For developers&lt;/strong&gt; who are ready to jump in to their first Wagtail website the &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/tutorial.html&#34;&gt;Getting Started Tutorial&lt;/a&gt; will guide you through creating and editing your first page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do you have an existing Django project?&lt;/strong&gt; The &lt;a href=&#34;https://docs.wagtail.org/en/stable/getting_started/integrating_into_django.html&#34;&gt;Wagtail Integration documentation&lt;/a&gt; is the best place to start.&lt;/p&gt; &#xA;&lt;h3&gt;üìå Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;(If you are reading this on GitHub, the details here may not be indicative of the current released version - please see &lt;a href=&#34;https://docs.wagtail.org/en/stable/releases/upgrading.html#compatible-django-python-versions&#34;&gt;Compatible Django / Python versions&lt;/a&gt; in the Wagtail documentation.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wagtail supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Django 3.2.x, 4.0.x and 4.1.x&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7, 3.8, 3.9 and 3.10&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL, MySQL and SQLite (with JSON1) as database backends&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.wagtail.org/en/stable/releases/upgrading.html#compatible-django-python-versions&#34;&gt;Previous versions of Wagtail&lt;/a&gt; additionally supported Python 2.7 and earlier Django versions.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üì¢ Community Support&lt;/h3&gt; &#xA;&lt;p&gt;There is an active community of Wagtail users and developers responding to questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/wagtail&#34;&gt;Stack Overflow&lt;/a&gt;. When posting questions, please read Stack Overflow&#39;s advice on &lt;a href=&#34;https://stackoverflow.com/help/how-to-ask&#34;&gt;how to ask questions&lt;/a&gt; and remember to tag your question &#34;wagtail&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For topics and discussions that do not fit Stack Overflow&#39;s question and answer format we have a &lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Slack&#34;&gt;Slack workspace&lt;/a&gt;. Please respect the time and effort of volunteers by not asking the same question in multiple places.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Slack&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wagtail/wagtail/main/.github/join-slack-community.png&#34; alt=&#34;Join slack community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/wagtail/wagtail/discussions&#34;&gt;Github discussion boards&lt;/a&gt; are open for sharing ideas and plans for the Wagtail project.&lt;/p&gt; &#xA;&lt;p&gt;We maintain a curated list of third party packages, articles and other resources at &lt;a href=&#34;https://github.com/springload/awesome-wagtail&#34;&gt;Awesome Wagtail&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üßë‚Äçüíº Commercial Support&lt;/h3&gt; &#xA;&lt;p&gt;Wagtail is sponsored by &lt;a href=&#34;https://torchbox.com/&#34;&gt;Torchbox&lt;/a&gt;. If you need help implementing or hosting Wagtail, please contact us: &lt;a href=&#34;mailto:hello@torchbox.com&#34;&gt;hello@torchbox.com&lt;/a&gt;. See also &lt;a href=&#34;https://madewithwagtail.org/developers/&#34;&gt;madewithwagtail.org/developers/&lt;/a&gt; for expert Wagtail developers around the world.&lt;/p&gt; &#xA;&lt;h3&gt;üîê Security&lt;/h3&gt; &#xA;&lt;p&gt;We take the security of Wagtail, and related packages we maintain, seriously. If you have found a security issue with any of our projects please email us at &lt;a href=&#34;mailto:security@wagtail.org&#34;&gt;security@wagtail.org&lt;/a&gt; so we can work together to find and patch the issue. We appreciate responsible disclosure with any security related issues, so please contact us first before creating a Github issue.&lt;/p&gt; &#xA;&lt;p&gt;If you want to send an encrypted email (optional), the public key ID for &lt;a href=&#34;mailto:security@wagtail.org&#34;&gt;security@wagtail.org&lt;/a&gt; is 0xbed227b4daf93ff9, and this public key is available from most commonly-used keyservers.&lt;/p&gt; &#xA;&lt;h3&gt;üïí Release schedule&lt;/h3&gt; &#xA;&lt;p&gt;Feature releases of Wagtail are released every three months. Selected releases are designated as Long Term Support (LTS) releases, and will receive maintenance updates for an extended period to address any security and data-loss related issues. For dates of past and upcoming releases and support periods, see &lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Release-schedule&#34;&gt;Release Schedule&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;üïõ Nightly releases&lt;/h4&gt; &#xA;&lt;p&gt;To try out the latest features before a release, we also create builds from &lt;code&gt;main&lt;/code&gt; every night. You can find instructions on how to install the latest nightly release at &lt;a href=&#34;https://releases.wagtail.org/nightly/index.html&#34;&gt;https://releases.wagtail.org/nightly/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üôãüèΩ Contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a Python or Django developer, fork the repo and get stuck in! We have several developer focused channels on the &lt;a href=&#34;https://github.com/wagtail/wagtail/wiki/Slack&#34;&gt;Slack workspace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You might like to start by reviewing the &lt;a href=&#34;https://docs.wagtail.org/en/latest/contributing/index.html&#34;&gt;contributing guidelines&lt;/a&gt; and checking issues with the &lt;a href=&#34;https://github.com/wagtail/wagtail/labels/good%20first%20issue&#34;&gt;good first issue&lt;/a&gt; label.&lt;/p&gt; &#xA;&lt;p&gt;We also welcome translations for Wagtail&#39;s interface. Translation work should be submitted through &lt;a href=&#34;https://www.transifex.com/torchbox/wagtail/&#34;&gt;Transifex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üîì License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagtail/wagtail/raw/main/LICENSE&#34;&gt;BSD&lt;/a&gt; - Free to use and modify for any purpose, including both open and closed-source code.&lt;/p&gt; &#xA;&lt;h3&gt;üëè Thanks&lt;/h3&gt; &#xA;&lt;p&gt;We thank the following organisations for their services used in Wagtail&#39;s development:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.browserstack.com/&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/browserstack-logo.svg?sanitize=true&#34; alt=&#34;Browserstack&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.browserstack.com/&#34;&gt;BrowserStack&lt;/a&gt; provides the project with free access to their live web-based browser testing tool, and automated Selenium cloud testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.squash.io/&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/squash-logo.svg?sanitize=true&#34; alt=&#34;squash.io&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.squash.io/&#34;&gt;Squash&lt;/a&gt; provides the project with free test environments for reviewing pull requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://assistivlabs.com/&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/wagtail/wagtail@main/.github/assistivlabs-logo.png&#34; alt=&#34;Assistiv Labs&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://assistivlabs.com/&#34;&gt;Assistiv Labs&lt;/a&gt; provides the project with unlimited access to their remote testing with assistive technologies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bloc97/CrossAttentionControl</title>
    <updated>2022-10-10T01:31:25Z</updated>
    <id>tag:github.com,2022-10-10:/bloc97/CrossAttentionControl</id>
    <link href="https://github.com/bloc97/CrossAttentionControl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unofficial implementation of &#34;Prompt-to-Prompt Image Editing with Cross Attention Control&#34; with Stable Diffusion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cross Attention Control with Stable Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;Unofficial implementation of &#34;Prompt-to-Prompt Image Editing with Cross Attention Control&#34; with Stable Diffusion, some modifications were made to the methods described in the paper in order to make them work with Stable Diffusion.&lt;/p&gt; &#xA;&lt;p&gt;Paper: &lt;a href=&#34;https://arxiv.org/abs/2208.01626&#34;&gt;https://arxiv.org/abs/2208.01626&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Cross Attention Control?&lt;/h2&gt; &#xA;&lt;p&gt;Large-scale language-image models (eg. Stable Diffusion) are usually hard to control just with editing the prompts alone and can be very unpredictable and unintuitive for users. Most existing methods require the user to input a mask which is cumbersome and might not yield good results if the mask has an inadequate shape. Cross Attention Control allows much finer control of the prompt by modifying the internal attention maps of the diffusion model during inference without the need for the user to input a mask and does so with minimal performance penalities (compared to clip guidance) and no additional training or fine-tuning of the diffusion model.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;This notebook uses the following libraries: &lt;code&gt;torch transformers diffusers numpy PIL tqdm difflib&lt;/code&gt;&lt;br&gt; The last known working version of &lt;code&gt;diffusers&lt;/code&gt; for the notebook is &lt;code&gt;diffusers==0.3.0&lt;/code&gt;, an update for &lt;code&gt;0.4.0&lt;/code&gt; is on the way. Simply install the required libraries using &lt;code&gt;pip&lt;/code&gt; and run the jupyter notebook, some examples are given inside.&lt;br&gt; A description of the parameters are given at the end of the readme.&lt;/p&gt; &#xA;&lt;h1&gt;Results/Demonstrations&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;All images shown below are generated using the same seed. The initial and target images must be generated with the same seed for cross attention control to work.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Target replacement&lt;/h2&gt; &#xA;&lt;p&gt;Top left prompt: &lt;code&gt;[a cat] sitting on a car&lt;/code&gt;&lt;br&gt; Clockwise: &lt;code&gt;a smiling dog...&lt;/code&gt;, &lt;code&gt;a hamster...&lt;/code&gt;, &lt;code&gt;a tiger...&lt;/code&gt;&lt;br&gt; Note: different strength values for &lt;code&gt;prompt_edit_spatial_start&lt;/code&gt; were used, clockwise: &lt;code&gt;0.7&lt;/code&gt;, &lt;code&gt;0.5&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/fouranimals.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Style injection&lt;/h2&gt; &#xA;&lt;p&gt;Top left prompt: &lt;code&gt;a fantasy landscape with a maple forest&lt;/code&gt;&lt;br&gt; Clockwise: &lt;code&gt;a watercolor painting of...&lt;/code&gt;, &lt;code&gt;a van gogh painting of...&lt;/code&gt;, &lt;code&gt;a charcoal pencil sketch of...&lt;/code&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/fourstyles.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Global editing&lt;/h2&gt; &#xA;&lt;p&gt;Top left prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Clockwise: &lt;code&gt;..., autumn&lt;/code&gt;, &lt;code&gt;..., winter&lt;/code&gt;, &lt;code&gt;..., spring, green&lt;/code&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/fourseasons.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reducing unpredictability when modifying prompts&lt;/h2&gt; &#xA;&lt;p&gt;Left image prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Right image prompt: &lt;code&gt;a winter fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Middle image: Cross attention enabled prompt editing (left image -&amp;gt; right image)&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20a%20winter%20fantasy%20landscape%20with%20a%20pine%20forest.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left image prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Right image prompt: &lt;code&gt;a watercolor painting of a landscape with a pine forest&lt;/code&gt;&lt;br&gt; Middle image: Cross attention enabled prompt editing (left image -&amp;gt; right image)&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20a%20watercolor%20painting%20of%20a%20landscape%20with%20a%20pine%20forest.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left image prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Right image prompt: &lt;code&gt;a fantasy landscape with a pine forest and a river&lt;/code&gt;&lt;br&gt; Middle image: Cross attention enabled prompt editing (left image -&amp;gt; right image)&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20A%20fantasy%20landscape%20with%20a%20pine%20forest%20and%20a%20river.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Direct token attention control&lt;/h2&gt; &#xA;&lt;p&gt;Left image prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Towards the right: &lt;code&gt;-fantasy&lt;/code&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20decrease%20fantasy.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left image prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Towards the right: &lt;code&gt;+fantasy&lt;/code&gt; and &lt;code&gt;+forest&lt;/code&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20increase%20fantasy%20and%20forest.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left image prompt: &lt;code&gt;a fantasy landscape with a pine forest&lt;/code&gt;&lt;br&gt; Towards the right: &lt;code&gt;-fog&lt;/code&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20decrease%20fog.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left image: from previous example&lt;br&gt; Towards the right: &lt;code&gt;-rocks&lt;/code&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/a%20fantasy%20landscape%20with%20a%20pine%20forest%20-%20decrease%20rocks.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to standard prompt editing&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s compare our results above where we removed fog and rocks from our fantasy landscape using cross attention maps against what people usually do, by editing the prompt alone.&lt;br&gt; We can first try adding &#34;without fog and without rocks&#34; to our prompt.&lt;/p&gt; &#xA;&lt;p&gt;Image prompt: &lt;code&gt;A fantasy landscape with a pine forest without fog and without rocks&lt;/code&gt;&lt;br&gt; However, we still see fog and rocks.&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/A%20fantasy%20landscape%20with%20a%20pine%20forest%20without%20fog%20and%20without%20rocks.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can try adding words like dry, sunny and grass.&lt;br&gt; Image prompt: &lt;code&gt;A fantasy landscape with a pine forest without fog and rocks, dry sunny day, grass&lt;/code&gt;&lt;br&gt; There are less rocks and fog, but the image&#39;s composition and style is completely different from before and we still haven&#39;t obtained our desired fog and rock-free image...&lt;br&gt; &lt;img src=&#34;https://github.com/bloc97/CrossAttentionControl/raw/main/images/A%20fantasy%20landscape%20with%20a%20pine%20forest%20without%20fog%20and%20rocks%2C%20dry%20sunny%20day%2C%20grass.png?raw=true&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Two functions are included, &lt;code&gt;stablediffusion(...)&lt;/code&gt; which generates images and &lt;code&gt;prompt_token(...)&lt;/code&gt; that is used to help the user find the token index for words in the prompt, which is used to tweak token weights in &lt;code&gt;prompt_edit_token_weights&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parameters of &lt;code&gt;stabledifusion(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name = Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt=&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the prompt as a string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;a cat riding a bicycle&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt_edit=None&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the second prompt as a string, used to edit the first prompt using cross attention, set &lt;code&gt;None&lt;/code&gt; to disable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;a dog riding a bicycle&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt_edit_token_weights=[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;values to scale the importance of the tokens in cross attention layers, as a list of tuples representing &lt;code&gt;(token id, strength)&lt;/code&gt;, this is used to increase or decrease the importance of a word in the prompt, it is applied to &lt;code&gt;prompt_edit&lt;/code&gt; when possible (if &lt;code&gt;prompt_edit&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, weights are applied to &lt;code&gt;prompt&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[(2, 2.5), (6, -5.0)]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt_edit_tokens_start=0.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;how strict is the generation with respect to the initial prompt, increasing this will let the network be more creative for smaller details/textures, should be smaller than &lt;code&gt;prompt_edit_tokens_end&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt_edit_tokens_end=1.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;how strict is the generation with respect to the initial prompt, decreasing this will let the network be more creative for larger features/general scene composition, should be bigger than &lt;code&gt;prompt_edit_tokens_start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt_edit_spatial_start=0.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;how strict is the generation with respect to the initial image &lt;em&gt;(generated from the first prompt, not from img2img)&lt;/em&gt;, increasing this will let the network be more creative for smaller details/textures, should be smaller than &lt;code&gt;prompt_edit_spatial_end&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompt_edit_spatial_end=1.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;how strict is the generation with respect to the initial image &lt;em&gt;(generated from the first prompt, not from img2img)&lt;/em&gt;, decreasing this will let the network be more creative for larger features/general scene composition, should be bigger than &lt;code&gt;prompt_edit_spatial_start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;guidance_scale=7.5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;standard classifier-free guidance strength for stable diffusion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;7.5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;steps=50&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number of diffusion steps as an integer, higher usually produces better images but is slower&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;50&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;seed=None&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;random seed as an integer, set &lt;code&gt;None&lt;/code&gt; to use a random seed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;126794873&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;width=512&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;image width&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;512&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;height=512&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;image height&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;512&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;init_image=None&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;init image for image to image generation, as a PIL image, it will be resized to &lt;code&gt;width x height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PIL.Image()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;init_image_strength=0.5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;strength of the noise added for image to image generation, higher will make the generation care less about the initial image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>