<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-15T01:28:52Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>neovim/nvim-lspconfig</title>
    <updated>2025-04-15T01:28:52Z</updated>
    <id>tag:github.com,2025-04-15:/neovim/nvim-lspconfig</id>
    <link href="https://github.com/neovim/nvim-lspconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickstart configs for Nvim LSP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lspconfig&lt;/h1&gt; &#xA;&lt;p&gt;nvim-lspconfig is a &#34;data only&#34; repo, providing basic, default &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Nvim LSP client&lt;/a&gt; configurations for various LSP servers.&lt;/p&gt; &#xA;&lt;p&gt;View &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&#34;&gt;all configs&lt;/a&gt; or &lt;code&gt;:help lspconfig-all&lt;/code&gt; from Nvim.&lt;/p&gt; &#xA;&lt;h2&gt;Important ⚠️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;These configs are &lt;strong&gt;best-effort and supported by the community (you).&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#contributions&#34;&gt;contributions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you found a bug in Nvim LSP (&lt;code&gt;:help lsp&lt;/code&gt;), &lt;a href=&#34;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&#34;&gt;report it to Neovim core&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; report it here. Only configuration data lives here.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This repo only provides &lt;em&gt;configurations&lt;/em&gt;. Its programmatic API is deprecated and must not be used externally. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &#34;framework&#34; parts (&lt;em&gt;not&lt;/em&gt; the configs) of nvim-lspconfig &lt;a href=&#34;https://github.com/neovim/neovim/issues/28479&#34;&gt;will be upstreamed to Nvim core&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/neovim/nvim-lspconfig&#34;&gt;&lt;img src=&#34;https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&amp;amp;color=purple&#34; alt=&#34;LuaRocks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Nvim 0.10 above. Update Nvim and nvim-lspconfig before reporting an issue.&lt;/li&gt; &#xA; &lt;li&gt;Install nvim-lspconfig using Vim&#39;s &#34;packages&#34; feature: &lt;pre&gt;&lt;code&gt;git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Or use a 3rd-party plugin manager (consult the documentation for your plugin manager).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install a language server, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md#pyright&#34;&gt;pyright&lt;/a&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g pyright&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the language server setup to your init.lua. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Nvim 0.11+ (see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#vim.lsp.config&#34;&gt;vim.lsp.config&lt;/a&gt;) &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.enable(&#39;pyright&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Nvim 0.10 (legacy, &lt;strong&gt;not supported&lt;/strong&gt;) &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;lspconfig&#39;.pyright.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ensure your project/workspace contains a root marker as specified in &lt;code&gt;:help lspconfig-all&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a code file in Nvim. LSP will attach and provide diagnostics. &lt;pre&gt;&lt;code&gt;nvim main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;:checkhealth lsp&lt;/code&gt; to see the status or to troubleshoot.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read &lt;code&gt;:help lspconfig&lt;/code&gt; for details. Read &lt;code&gt;:help lspconfig-all&lt;/code&gt; for the full list of server-specific details. For servers not on your &lt;code&gt;$PATH&lt;/code&gt; (e.g., &lt;code&gt;jdtls&lt;/code&gt;, &lt;code&gt;elixirls&lt;/code&gt;), you must manually set the &lt;code&gt;cmd&lt;/code&gt; parameter, see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#vim.lsp.config&#34;&gt;vim.lsp.config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Nvim sets some default options and mappings when a buffer attaches to LSP (see &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#lsp-config&#34;&gt;&lt;code&gt;:help lsp-config&lt;/code&gt;&lt;/a&gt;). In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/tagsrch.html#tag-function&#34;&gt;&lt;code&gt;&#39;tagfunc&#39;&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables &#34;go to definition&#34; capabilities using &lt;a href=&#34;https://neovim.io/doc/user/tagsrch.html#CTRL-%5D&#34;&gt;&lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&#34;https://neovim.io/doc/user/tagsrch.html#tag-commands&#34;&gt;tag commands&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;omnifunc&#39;&#34;&gt;&lt;code&gt;&#39;omnifunc&#39;&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables (manual) omni mode completion with &lt;code&gt;&amp;lt;C-X&amp;gt;&amp;lt;C-O&amp;gt;&lt;/code&gt; in Insert mode. For &lt;em&gt;auto&lt;/em&gt;completion, an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion&#34;&gt;autocompletion plugin&lt;/a&gt; is required.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;formatexpr&#39;&#34;&gt;&lt;code&gt;&#39;formatexpr&#39;&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables LSP formatting with &lt;a href=&#34;https://neovim.io/doc/user/change.html#gq&#34;&gt;&lt;code&gt;gq&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;K&lt;/code&gt; maps to &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#vim.lsp.buf.hover()&#34;&gt;&lt;code&gt;vim.lsp.buf.hover()&lt;/code&gt;&lt;/a&gt; in Normal mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[d&lt;/code&gt; and &lt;code&gt;]d&lt;/code&gt; map to &lt;code&gt;vim.diagnostic.goto_prev()&lt;/code&gt; and &lt;code&gt;vim.diagnostic.goto_next()&lt;/code&gt;, respectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-W&amp;gt;d&lt;/code&gt; maps to &lt;code&gt;vim.diagnostic.open_float()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Further customization can be achieved using the &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#LspAttach&#34;&gt;&lt;code&gt;LspAttach&lt;/code&gt;&lt;/a&gt; autocommand event. The &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#LspAttach&#34;&gt;&lt;code&gt;LspDetach&lt;/code&gt;&lt;/a&gt; autocommand event can be used to &#34;cleanup&#34; mappings if a buffer becomes detached from an LSP server. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#LspAttach&#34;&gt;&lt;code&gt;:h LspAttach&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#LspDetach&#34;&gt;&lt;code&gt;:h LspDetach&lt;/code&gt;&lt;/a&gt; for details and examples. See &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#lsp-buf&#34;&gt;&lt;code&gt;:h lsp-buf&lt;/code&gt;&lt;/a&gt; for details on other LSP functions.&lt;/p&gt; &#xA;&lt;p&gt;Extra settings can be specified for each LSP server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nvim 0.11+ (see &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/#vim.lsp.config&#34;&gt;vim.lsp.config&lt;/a&gt;) &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.config(&#39;rust_analyzer&#39;, {&#xA;  -- Server-specific settings. See `:help lsp-quickstart`&#xA;  settings = {&#xA;    [&#39;rust-analyzer&#39;] = {},&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Nvim 0.10 (legacy, &lt;strong&gt;not supported&lt;/strong&gt;) &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lspconfig = require(&#39;lspconfig&#39;)&#xA;lspconfig.rust_analyzer.setup {&#xA;  -- Server-specific settings. See `:help lspconfig-setup`&#xA;  settings = {&#xA;    [&#39;rust-analyzer&#39;] = {},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;vim.lsp.config&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-lspconfig&lt;/code&gt; includes configurations compatible with &lt;code&gt;vim.lsp&lt;/code&gt; under &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&#34;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt;, so servers can be enabled (auto-activated when a filetype is opened) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.enable(&#39;pyright&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and configured with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.config(&#39;pyright&#39;, {&#xA;  cmd = { … },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which extends the configuration under &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/lsp/&#34;&gt;&lt;code&gt;lsp/&lt;/code&gt;&lt;/a&gt;. For further information see &lt;a href=&#34;https://neovim.io/doc/user/lsp.html#lsp-config&#34;&gt;&lt;code&gt;:help lsp-config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; Some servers are &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/issues/3705&#34;&gt;currently missing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The most common reasons a language server does not start or attach are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the &lt;code&gt;cmd&lt;/code&gt; defined in each server&#39;s Lua module from the command line and see that the language server starts. If the &lt;code&gt;cmd&lt;/code&gt; is an executable name instead of an absolute path to the executable, ensure it is on your path.&lt;/li&gt; &#xA; &lt;li&gt;Missing filetype plugins. Certain languages are not detecting by Vim/Nvim because they have not yet been added to the filetype detection system. Ensure &lt;code&gt;:set ft?&lt;/code&gt; shows the filetype and not an empty value.&lt;/li&gt; &#xA; &lt;li&gt;Not triggering root detection. &lt;strong&gt;Some&lt;/strong&gt; language servers will only start if it is opened in a directory, or child directory, containing a file which signals the &lt;em&gt;root&lt;/em&gt; of the project. Most of the time, this is a &lt;code&gt;.git&lt;/code&gt; folder, but each server defines the root config in the lua file. See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&#34;&gt;doc/configs.md&lt;/a&gt; or the source for the list of root directories.&lt;/li&gt; &#xA; &lt;li&gt;You must pass &lt;code&gt;capabilities&lt;/code&gt; for &lt;strong&gt;each&lt;/strong&gt; &lt;code&gt;setup {}&lt;/code&gt; if you want these to take effect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do not call &lt;code&gt;setup {}&lt;/code&gt; twice for the same server&lt;/strong&gt;. The second call to &lt;code&gt;setup {}&lt;/code&gt; will overwrite the first.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Bug reports&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug with LSP functionality, &lt;a href=&#34;https://github.com/neovim/neovim/issues/new?assignees=&amp;amp;labels=bug%2Clsp&amp;amp;template=lsp_bug_report.yml&#34;&gt;report it to Neovim core&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before reporting a bug, check your logs and the output of &lt;code&gt;:LspInfo&lt;/code&gt;. Add the following to your init.vim to enable logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.lsp.set_log_level(&#34;debug&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempt to run the language server, and open the log with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:LspLog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of the time, the reason for failure is present in the logs.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInfo&lt;/code&gt; (alias to &lt;code&gt;:checkhealth vim.lsp&lt;/code&gt;) shows the status of active and configured language servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStart &amp;lt;config_name&amp;gt;&lt;/code&gt; Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass &lt;code&gt;autostart = false&lt;/code&gt; to your &lt;code&gt;.setup{}&lt;/code&gt; call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspStop [&amp;lt;client_id_or_name&amp;gt; ...]&lt;/code&gt; Stops the given server(s). Defaults to stopping all servers active on the current buffer. To force stop add &lt;code&gt;++force&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspRestart [&amp;lt;client_id_or_name&amp;gt; ...]&lt;/code&gt; Restarts the given client(s), and attempts to reattach to all previously attached buffers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If a language server is missing from &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/doc/configs.md&#34;&gt;configs.md&lt;/a&gt;, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a new file at &lt;code&gt;lsp/SERVER_NAME.lua&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/tree/master/lsp&#34;&gt;existing config&lt;/a&gt; to get started. Most configs are simple. For an extensive example see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/lsp/texlab.lua&#34;&gt;texlab.lua&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ask questions on &lt;a href=&#34;https://github.com/neovim/neovim/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; or in the &lt;a href=&#34;https://app.element.io/#/room/%23neovim:matrix.org&#34;&gt;Neovim Matrix room&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Release process&lt;/h2&gt; &#xA;&lt;p&gt;To publish a release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and push a new &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/tags&#34;&gt;tag&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After pushing the tag, a &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/.github/workflows/release.yml&#34;&gt;GitHub action&lt;/a&gt; will automatically package the plugin and publish the release to LuaRocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Neovim contributors. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;nvim-lspconfig is licensed under the terms of the Apache 2.0 license.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/neovim/nvim-lspconfig/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Pennyw0rth/NetExec</title>
    <updated>2025-04-15T01:28:52Z</updated>
    <id>tag:github.com,2025-04-15:/Pennyw0rth/NetExec</id>
    <link href="https://github.com/Pennyw0rth/NetExec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Network Execution Tool&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.10+-blue.svg?sanitize=true&#34; alt=&#34;Supported Python versions&#34;&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=al3x_n3ff&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/al3xn3ff?label=al3x_n3ff&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=_zblurx&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/_zblurx?label=_zblurx&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=MJHallenbeck&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/MJHallenbeck?label=MJHallenbeck&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=mpgn_x64&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/mpgn_x64?label=mpgn_x64&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚩 This is the open source repository of NetExec maintained by a community of passionate people&lt;/p&gt; &#xA;&lt;h1&gt;NetExec - The Network Execution Tool&lt;/h1&gt; &#xA;&lt;p&gt;This project was initially created in 2015 by @byt3bl33d3r, known as CrackMapExec. In 2019 @mpgn_x64 started maintaining the project for the next 4 years, adding a lot of great tools and features. In September 2023 he retired from maintaining the project.&lt;/p&gt; &#xA;&lt;p&gt;Along with many other contributors, we (NeffIsBack, Marshall-Hallenbeck, and zblurx) developed new features, bug fixes, and helped maintain the original project CrackMapExec. During this time, with both a private and public repository, community contributions were not easily merged into the project. The 6-8 month discrepancy between the code bases caused many development issues and heavily reduced community-driven development. With the end of mpgn&#39;s maintainer role, we (the remaining most active contributors) decided to maintain the project together as a fully free and open source project under the new name &lt;strong&gt;NetExec&lt;/strong&gt; 🚀 Going forward, our intent is to maintain a community-driven and maintained project with regular updates for everyone to use.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- placeholder for nxc logo--&gt; &lt;/p&gt; &#xA;&lt;p&gt;You are on the &lt;strong&gt;latest up-to-date&lt;/strong&gt; repository of the project NetExec (nxc) ! 🎉&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚧 If you want to report a problem, open an &lt;a href=&#34;https://github.com/Pennyw0rth/NetExec/issues&#34;&gt;Issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔀 If you want to contribute, open a &lt;a href=&#34;https://github.com/Pennyw0rth/NetExec/pulls&#34;&gt;Pull Request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💬 If you want to discuss, open a &lt;a href=&#34;https://github.com/Pennyw0rth/NetExec/discussions&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Official Discord Channel&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have a Github account, you can ask your questions on Discord!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/pjwUTQzg8R&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1148685154601160794/widget.png?style=banner3&#34; alt=&#34;NetExec&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation, Tutorials, Examples&lt;/h1&gt; &#xA;&lt;p&gt;See the project&#39;s &lt;a href=&#34;https://netexec.wiki/&#34;&gt;wiki&lt;/a&gt; (in development) for documentation and usage examples&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Please see the installation instructions on the &lt;a href=&#34;https://netexec.wiki/getting-started/installation&#34;&gt;wiki&lt;/a&gt; (in development)&lt;/p&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install pipx git&#xA;pipx ensurepath&#xA;pipx install git+https://github.com/Pennyw0rth/NetExec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Availability on Unix distributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/netexec/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/netexec.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;Development guidelines and recommendations in development&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;All the hard work and development over the years from everyone in the CrackMapExec project&lt;/p&gt; &#xA;&lt;h1&gt;Code Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Awesome code contributors of NetExec:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpgn&#34;&gt;&lt;img src=&#34;https://github.com/mpgn.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Marshall-Hallenbeck&#34;&gt;&lt;img src=&#34;https://github.com/Marshall-Hallenbeck.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zblurx&#34;&gt;&lt;img src=&#34;https://github.com/zblurx.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NeffIsBack&#34;&gt;&lt;img src=&#34;https://github.com/NeffIsBack.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Hackndo&#34;&gt;&lt;img src=&#34;https://github.com/Hackndo.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XiaoliChan&#34;&gt;&lt;img src=&#34;https://github.com/XiaoliChan.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>