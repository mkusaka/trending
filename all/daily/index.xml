<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-03T01:22:43Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dvlab-research/MiniGemini</title>
    <updated>2024-04-03T01:22:43Z</updated>
    <id>tag:github.com,2024-04-03:/dvlab-research/MiniGemini</id>
    <link href="https://github.com/dvlab-research/MiniGemini" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official implementation for Mini-Gemini&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mini-Gemini: Mining the Potential of Multi-modality Vision Language Models&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mini-gemini.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Page-Green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://103.170.5.190:7860/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Demo-violet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/pdf/2403.18814.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-Arxiv-red&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/collections/YanweiLi/mini-gemini-6603c50b9b43d044171d0854&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Models-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/collections/YanweiLi/mini-gemini-data-660463ea895a01d8f367624e&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Data-green&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mini-Gemini supports a series of dense and MoE Large Language Models (LLMs) from 2B to 34B with image understanding, reasoning, and generation simultaneously. We build this repo based on LLaVA.&lt;/p&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[03/28] 🔥 Mini-Gemini is coming! We release the &lt;a href=&#34;https://arxiv.org/pdf/2403.18814.pdf&#34;&gt;paper&lt;/a&gt;, &lt;a href=&#34;http://103.170.5.190:7860/&#34;&gt;demo&lt;/a&gt;, &lt;a href=&#34;https://github.com/dvlab-research/MiniGemini&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/collections/YanweiLi/mini-gemini-6603c50b9b43d044171d0854&#34;&gt;models&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/collections/YanweiLi/mini-gemini-data-660463ea895a01d8f367624e&#34;&gt;data&lt;/a&gt; for Mini-Gemini!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#model&#34;&gt;Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#preparation&#34;&gt;Preparation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#train&#34;&gt;Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#evaluation&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#acknowledgement&#34;&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;We provide some selected examples in this section. More examples can be found in our &lt;a href=&#34;https://mini-gemini.github.io/&#34;&gt;project page&lt;/a&gt;. Feel free to try our online &lt;a href=&#34;http://103.170.5.190:7860/&#34;&gt;demo&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/images/teaser.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the instructions below to install the required packages.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you want to use Mini-Gemini-2B, please ensure to install the latest version Transformers (&amp;gt;=4.38.0).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/dvlab-research/MiniGemini.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n minigemini python=3.10 -y&#xA;conda activate minigemini&#xA;cd MiniGemini&#xA;pip install --upgrade pip  # enable PEP 660 support&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install additional packages for training cases&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install ninja&#xA;pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model&lt;/h2&gt; &#xA;&lt;p&gt;The framework of Mini-Gemini is conceptually simple: dual vision encoders are utilized to provide low-resolution visual embedding and high-resolution candidates; patch info mining is proposed to conduct patch-level mining between high-resolution regions and low-resolution visual queries; LLM is utilized to marry text with images for both comprehension and generation at the same time.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;98%&#34; src=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/images/pipeline.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;We provide all our fully finetuned models on Stage 1 and 2 data for Mini-Gemini:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;LR&lt;/th&gt; &#xA;   &lt;th&gt;HR&lt;/th&gt; &#xA;   &lt;th&gt;Base LLM&lt;/th&gt; &#xA;   &lt;th&gt;Vision Encoder&lt;/th&gt; &#xA;   &lt;th&gt;Finetuning Data&lt;/th&gt; &#xA;   &lt;th&gt;Finetuning schedule&lt;/th&gt; &#xA;   &lt;th&gt;Download&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-2B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;Gemma-2B&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-2B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-7B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-7B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-7B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-13B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-13B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-13B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-8x7B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;Mixtral-8x7B-Instruct-v0.1&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-8x7B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-34B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;Nous-Hermes-2-Yi-34B&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-34B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-7B-HD&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;1536&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-7B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-7B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-13B-HD&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;1536&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-13B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-13B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-8x7B-HD&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;1536&lt;/td&gt; &#xA;   &lt;td&gt;Mixtral-8x7B-Instruct-v0.1&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-8x7B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-34B-HD&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;1536&lt;/td&gt; &#xA;   &lt;td&gt;Nous-Hermes-2-Yi-34B&lt;/td&gt; &#xA;   &lt;td&gt;CLIP-L&lt;/td&gt; &#xA;   &lt;td&gt;MiniGemini-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;full_ft-1e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-34B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- &#xA;Here are the pretrained weights (text decoder + context attention + projector) on Stage 1 data only:&#xA;| Model | LR | HR | Base LLM | Vision Encoder | Finetuning Data | Finetuning schedule | Download |&#xA;|----------|----------|----------|----------|----------------|---------------|--------------------|------------------|&#xA;| Mini-Gemini-2B | 336 | 768 | Gemma-2B | CLIP-L | MiniGemini-Pretrain | full_pt-1e | [ckpt]() | --&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;h3&gt;Dataset&lt;/h3&gt; &#xA;&lt;p&gt;We provide the processed data for Mini-Gemini training. For model pretraining, please download the following the training image-based data and organize them as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; means put the data in the local folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/liuhaotian/LLaVA-Pretrain&#34;&gt;LLaVA Images&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Pretrain/images&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FreedomIntelligence/ALLaVA&#34;&gt;ALLaVA Caption&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Pretrain/ALLaVA-4V&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For model finetuning, please download the following the instruction data and organize them as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; means put the data in the local folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://images.cocodataset.org/zips/train2017.zip&#34;&gt;COCO train2017&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/coco&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://downloads.cs.stanford.edu/nlp/data/gqa/images.zip&#34;&gt;GQA&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/gqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1_GYPY5UkUy7HIcR0zq3ZCFgeZN7BAfm_?usp=sharing&#34;&gt;OCR-VQA&lt;/a&gt; (&lt;strong&gt;we save all files as &lt;code&gt;.jpg&lt;/code&gt;&lt;/strong&gt;) -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/ocr_vqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/textvqa/images/train_val_images.zip&#34;&gt;TextVQA&lt;/a&gt; (not included for training) -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/textvqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cs.stanford.edu/people/rak248/VG_100K_2/images.zip&#34;&gt;VisualGenome part1&lt;/a&gt;, &lt;a href=&#34;https://cs.stanford.edu/people/rak248/VG_100K_2/images2.zip&#34;&gt;VisualGenome part2&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/vg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/InternLM/InternLM-XComposer/raw/main/projects/ShareGPT4V/docs/Data.md&#34;&gt;ShareGPT4V-100K&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/sam&lt;/code&gt;, &lt;code&gt;share_textvqa&lt;/code&gt;, &lt;code&gt;wikiart&lt;/code&gt;, &lt;code&gt;web-celebrity&lt;/code&gt;, &lt;code&gt;web-landmark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/laion/gpt4v-dataset&#34;&gt;LAION GPT4V&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/gpt4v-dataset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FreedomIntelligence/ALLaVA&#34;&gt;ALLaVA Instruction&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Pretrain/ALLaVA-4V&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docvqa.org/datasets/docvqa&#34;&gt;DocVQA&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/docvqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vis-nlp/ChartQA&#34;&gt;ChartQA&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/chartqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kushalkafle/DVQA_dataset&#34;&gt;DVQA&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/dvqa&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://allenai.org/data/diagrams&#34;&gt;AI2D&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Finetune/ai2d&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For model evaluation, please follow this &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Evaluation.md&#34;&gt;link&lt;/a&gt; for preparation. We use some extra benchmarks for evaluation. please download the following the training image-based data and organize them as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; means put the data in the local folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mmmu-benchmark.github.io/&#34;&gt;MMMU&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Eval/MMMU&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-compass/mmbench/&#34;&gt;MMB&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Eval/MMB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mathvista.github.io/&#34;&gt;MathVista&lt;/a&gt; -&amp;gt; &lt;code&gt;data/MiniGemini-Eval/MathVista&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please put the pretrained data, finetuned data, and eval data in &lt;code&gt;MiniGemini-Pretrain&lt;/code&gt;, &lt;code&gt;MiniGemini-Finetune&lt;/code&gt;, and &lt;code&gt;MiniGemini-Eval&lt;/code&gt; subset following &lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#structure&#34;&gt;Structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For meta info, please download the following files and organize them as in &lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#structure&#34;&gt;Structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Data file name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/datasets/YanweiLi/Mini-Gemini-Pretrain&#34;&gt;minigemini_pretrain.json&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.68 G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/datasets/YanweiLi/Mini-Gemini-Instruction&#34;&gt;minigemini_instruction.json&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.79 G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Pretrained Weights&lt;/h3&gt; &#xA;&lt;p&gt;We recommend users to download the pretrained weights from the following link &lt;a href=&#34;https://huggingface.co/openai/clip-vit-large-patch14-336&#34;&gt;CLIP-Vit-L-336&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft-soup&#34;&gt;OpenCLIP-ConvNeXt-L&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/google/gemma-2b-it&#34;&gt;Gemma-2b-it&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/lmsys/vicuna-7b-v1.5&#34;&gt;Vicuna-7b-v1.5&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/lmsys/vicuna-13b-v1.5&#34;&gt;Vicuna-13b-v1.5&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1&#34;&gt;Mixtral-8x7B-Instruct-v0.1&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/NousResearch/Nous-Hermes-2-Yi-34B&#34;&gt;Nous-Hermes-2-Yi-34B&lt;/a&gt; , and put them in &lt;code&gt;model_zoo&lt;/code&gt; following &lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#structure&#34;&gt;Structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Structure&lt;/h3&gt; &#xA;&lt;p&gt;The folder structure should be organized as follows before training.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MiniGemini&#xA;├── minigemini&#xA;├── scripts&#xA;├── work_dirs&#xA;│   ├── Mini-Gemini&#xA;│   │   ├── Mini-Gemini-2B&#xA;│   │   ├── ...&#xA;├── model_zoo&#xA;│   ├── LLM&#xA;│   │   ├── gemma&#xA;│   │   │   ├── gemma-2b-it&#xA;│   │   ├── vicuna&#xA;│   │   │   ├── 7B-V1.5&#xA;│   │   │   ├── 13B-V1.5&#xA;│   │   ├── mixtral&#xA;│   │   │   ├── Mixtral-8x7B-Instruct-v0.1&#xA;│   │   ├── Nous-Hermes-2-Yi-34B&#xA;│   ├── OpenAI&#xA;│   │   ├── clip-vit-large-patch14-336&#xA;│   │   ├── openclip-convnext-large-d-320-laion2B-s29B-b131K-ft-soup&#xA;├── data&#xA;│   ├── MiniGemini-Pretrain&#xA;│   │   ├── minigemini_pretrain.json&#xA;│   │   ├── images&#xA;│   │   ├── ALLaVA-4V&#xA;│   ├── MiniGemini-Finetune&#xA;│   │   ├── minigemini_instruction.json&#xA;│   │   ├── coco&#xA;│   │   ├── gqa&#xA;│   │   ├── ocr_vqa&#xA;│   │   ├── textvqa&#xA;│   │   ├── vg&#xA;│   │   ├── gpt4v-dataset&#xA;│   │   ├── sam&#xA;│   │   ├── share_textvqa&#xA;│   │   ├── wikiart&#xA;│   │   ├── web-celebrity&#xA;│   │   ├── web-landmark&#xA;│   │   ├── ALLaVA-4V&#xA;│   │   ├── docvqa&#xA;│   │   ├── chartqa&#xA;│   │   ├── dvqa&#xA;│   │   ├── ai2d&#xA;│   ├── MiniGemini-Eval&#xA;│   │   ├── MMMU&#xA;│   │   ├── MMB&#xA;│   │   ├── MathVista&#xA;│   │   ├── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Train&lt;/h2&gt; &#xA;&lt;p&gt;Mini-Gemini training consists of two stages: (1) feature alignment stage: bridge the vision and language tokens; (2) instruction tuning stage: teach the model to follow multimodal instructions.&lt;/p&gt; &#xA;&lt;p&gt;Mini-Gemini is trained on 8 A100 GPUs with 80GB memory. To train on fewer GPUs, you can reduce the &lt;code&gt;per_device_train_batch_size&lt;/code&gt; and increase the &lt;code&gt;gradient_accumulation_steps&lt;/code&gt; accordingly. Always keep the global batch size the same: &lt;code&gt;per_device_train_batch_size&lt;/code&gt; x &lt;code&gt;gradient_accumulation_steps&lt;/code&gt; x &lt;code&gt;num_gpus&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure you download and organize the data following &lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#preparation&#34;&gt;Preparation&lt;/a&gt; before training.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Please set &lt;code&gt;hostfile&lt;/code&gt; for 2 machine training and &lt;code&gt;hostfile_4&lt;/code&gt; for 4 machine training.&lt;/p&gt; &#xA;&lt;p&gt;If you want to train and finetune Mini-Gemini, please run the following command for Mini-Gemini-7B with image size 336:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/llama/train/stage_1_2_full_v7b_336_hr_768.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for Mini-Gemini-13B with image size 336:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/llama/train/stage_1_2_full_v13b_336_hr_768.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because we reuse the pre-trained projecter weights from the Mini-Gemini-7B, you can directly use the Mini-Gemini-7B-HD with image size 672 for stage-2 instruction tuning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/llama/train/stage_2_full_v7b_672_hr_1536.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please find more training scripts of &lt;code&gt;gemma&lt;/code&gt;, &lt;code&gt;llama&lt;/code&gt;, &lt;code&gt;mixtral&lt;/code&gt;, and &lt;code&gt;yi&lt;/code&gt; in &lt;code&gt;scripts/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;We perform evaluation on several image-based benchmarks. Please download the evaluation data following &lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#preparation&#34;&gt;Preparation&lt;/a&gt; and organize them as in &lt;a href=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/#structure&#34;&gt;Structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;LLM&lt;/th&gt; &#xA;   &lt;th&gt;Res.&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;TextVQA&lt;/th&gt; &#xA;   &lt;th&gt;MMB&lt;/th&gt; &#xA;   &lt;th&gt;MME&lt;/th&gt; &#xA;   &lt;th&gt;MM-Vet&lt;/th&gt; &#xA;   &lt;th&gt;MMMU_val&lt;/th&gt; &#xA;   &lt;th&gt;MMMU_test&lt;/th&gt; &#xA;   &lt;th&gt;MathVista&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-2B&lt;/td&gt; &#xA;   &lt;td&gt;Gemma-2B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-2B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;56.2&lt;/td&gt; &#xA;   &lt;td&gt;59.8&lt;/td&gt; &#xA;   &lt;td&gt;1341/312&lt;/td&gt; &#xA;   &lt;td&gt;31.1&lt;/td&gt; &#xA;   &lt;td&gt;31.7&lt;/td&gt; &#xA;   &lt;td&gt;29.1&lt;/td&gt; &#xA;   &lt;td&gt;29.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-7B&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-7B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-7B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;65.2&lt;/td&gt; &#xA;   &lt;td&gt;69.3&lt;/td&gt; &#xA;   &lt;td&gt;1523/316&lt;/td&gt; &#xA;   &lt;td&gt;40.8&lt;/td&gt; &#xA;   &lt;td&gt;36.1&lt;/td&gt; &#xA;   &lt;td&gt;32.8&lt;/td&gt; &#xA;   &lt;td&gt;31.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-13B&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-13B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-13B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;65.9&lt;/td&gt; &#xA;   &lt;td&gt;68.5&lt;/td&gt; &#xA;   &lt;td&gt;1565/322&lt;/td&gt; &#xA;   &lt;td&gt;46.0&lt;/td&gt; &#xA;   &lt;td&gt;38.1&lt;/td&gt; &#xA;   &lt;td&gt;33.5&lt;/td&gt; &#xA;   &lt;td&gt;37.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-8x7B&lt;/td&gt; &#xA;   &lt;td&gt;Mixtral-8x7B-Instruct-v0.1&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-8x7B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;69.2&lt;/td&gt; &#xA;   &lt;td&gt;75.6&lt;/td&gt; &#xA;   &lt;td&gt;1639/379&lt;/td&gt; &#xA;   &lt;td&gt;45.8&lt;/td&gt; &#xA;   &lt;td&gt;41.8&lt;/td&gt; &#xA;   &lt;td&gt;37.1&lt;/td&gt; &#xA;   &lt;td&gt;41.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-34B&lt;/td&gt; &#xA;   &lt;td&gt;Nous-Hermes-2-Yi-34B&lt;/td&gt; &#xA;   &lt;td&gt;336&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-34B&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;70.1&lt;/td&gt; &#xA;   &lt;td&gt;79.6&lt;/td&gt; &#xA;   &lt;td&gt;1666/439&lt;/td&gt; &#xA;   &lt;td&gt;53.0&lt;/td&gt; &#xA;   &lt;td&gt;48.7&lt;/td&gt; &#xA;   &lt;td&gt;43.6&lt;/td&gt; &#xA;   &lt;td&gt;38.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-7B-HD&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-7B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-7B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;68.4&lt;/td&gt; &#xA;   &lt;td&gt;65.8&lt;/td&gt; &#xA;   &lt;td&gt;1546/319&lt;/td&gt; &#xA;   &lt;td&gt;41.3&lt;/td&gt; &#xA;   &lt;td&gt;36.8&lt;/td&gt; &#xA;   &lt;td&gt;32.9&lt;/td&gt; &#xA;   &lt;td&gt;32.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-13B-HD&lt;/td&gt; &#xA;   &lt;td&gt;Vicuna-13B-v1.5&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-13B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;70.2&lt;/td&gt; &#xA;   &lt;td&gt;68.6&lt;/td&gt; &#xA;   &lt;td&gt;1597/320&lt;/td&gt; &#xA;   &lt;td&gt;50.5&lt;/td&gt; &#xA;   &lt;td&gt;37.3&lt;/td&gt; &#xA;   &lt;td&gt;35.1&lt;/td&gt; &#xA;   &lt;td&gt;37.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-8x7B-HD&lt;/td&gt; &#xA;   &lt;td&gt;Mixtral-8x7B-Instruct-v0.1&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-8x7B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;71.9&lt;/td&gt; &#xA;   &lt;td&gt;74.7&lt;/td&gt; &#xA;   &lt;td&gt;1633/356&lt;/td&gt; &#xA;   &lt;td&gt;53.5&lt;/td&gt; &#xA;   &lt;td&gt;40.0&lt;/td&gt; &#xA;   &lt;td&gt;37.0&lt;/td&gt; &#xA;   &lt;td&gt;43.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mini-Gemini-34B-HD&lt;/td&gt; &#xA;   &lt;td&gt;Nous-Hermes-2-Yi-34B&lt;/td&gt; &#xA;   &lt;td&gt;672&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/YanweiLi/Mini-Gemini-34B-HD&#34;&gt;ckpt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;74.1&lt;/td&gt; &#xA;   &lt;td&gt;80.6&lt;/td&gt; &#xA;   &lt;td&gt;1659/482&lt;/td&gt; &#xA;   &lt;td&gt;59.3&lt;/td&gt; &#xA;   &lt;td&gt;48.0&lt;/td&gt; &#xA;   &lt;td&gt;44.9&lt;/td&gt; &#xA;   &lt;td&gt;43.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you want to evaluate the model on image-based benchmarks, please use the scripts in &lt;code&gt;scripts/MODEL_PATH/eval&lt;/code&gt;. For example, run the following command for TextVQA evaluation with Mini-Gemini-7B-HD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash scripts/llama/eval/textvqa.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please find more evaluation scripts in &lt;code&gt;scripts/MODEL_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CLI Inference&lt;/h3&gt; &#xA;&lt;p&gt;Chat with images using Mini-Gemini without the need of Gradio interface. It also supports multiple GPUs, 4-bit and 8-bit quantized inference. With 4-bit quantization. Please make sure you have installed &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt; and &lt;a href=&#34;https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.7/README_en.md&#34;&gt;PaddleOCR&lt;/a&gt; (only for better experience with OCR), and try this for image and generation inference:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m minigemini.serve.cli \&#xA;    --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD \&#xA;    --image-file &amp;lt;path to your image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or try this better experience with OCR (make sure you have installed &lt;a href=&#34;https://github.com/PaddlePaddle/PaddleOCR/raw/release/2.7/README_en.md&#34;&gt;PaddleOCR&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m minigemini.serve.cli \&#xA;    --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD \&#xA;    --image-file &amp;lt;path to your image&amp;gt; \&#xA;    --ocr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or try this for inference with generation (make sure you have installed &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m minigemini.serve.cli \&#xA;    --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD \&#xA;    --image-file &amp;lt;path to your image&amp;gt; \&#xA;    --gen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also try 8bit or even 4bit for efficient inference&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m minigemini.serve.cli \&#xA;    --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD \&#xA;    --image-file &amp;lt;path to your image&amp;gt; \&#xA;    --gen&#xA;    --load-8bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradio Web UI&lt;/h3&gt; &#xA;&lt;p&gt;Here, we adopt the Gradio UI similar to that in LLaVA to provide a user-friendly interface for Mini-Gemini. To launch a Gradio demo locally, please run the following commands one by one. If you plan to launch multiple model workers to compare between different checkpoints, you only need to launch the controller and the web server &lt;em&gt;ONCE&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Launch a controller&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m minigemini.serve.controller --host 0.0.0.0 --port 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a gradio web server.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m minigemini.serve.gradio_web_server --controller http://localhost:10000 --model-list-mode reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You just launched the Gradio web interface. Now, you can open the web interface with the URL printed on the screen. You may notice that there is no model in the model list. Do not worry, as we have not launched any model worker yet. It will be automatically updated when you launch a model worker.&lt;/p&gt; &#xA;&lt;h4&gt;Launch a model worker&lt;/h4&gt; &#xA;&lt;p&gt;This is the actual &lt;em&gt;worker&lt;/em&gt; that performs the inference on the GPU. Each worker is responsible for a single model specified in &lt;code&gt;--model-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m minigemini.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait until the process finishes loading the model and you see &#34;Uvicorn running on ...&#34;. Now, refresh your Gradio web UI, and you will see the model you just launched in the model list.&lt;/p&gt; &#xA;&lt;p&gt;You can launch as many workers as you want, and compare between different models in the same Gradio interface. Please keep the &lt;code&gt;--controller&lt;/code&gt; the same, and modify the &lt;code&gt;--port&lt;/code&gt; and &lt;code&gt;--worker&lt;/code&gt; to a different port number for each worker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m minigemini.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port &amp;lt;different from 40000, say 40001&amp;gt; --worker http://localhost:&amp;lt;change accordingly, i.e. 40001&amp;gt; --model-path work_dirs/Mini-Gemini/Mini-Gemini-34B-HD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using an Apple device with an M1 or M2 chip, you can specify the mps device by using the &lt;code&gt;--device&lt;/code&gt; flag: &lt;code&gt;--device mps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Launch a model worker (Multiple GPUs, when GPU VRAM &amp;lt;= 24GB)&lt;/h4&gt; &#xA;&lt;p&gt;If the VRAM of your GPU is less than 24GB (e.g., RTX 3090, RTX 4090, etc.), you may try running it with multiple GPUs. Our latest code base will automatically try to use multiple GPUs if you have more than one GPU. You can specify which GPUs to use with &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;. Below is an example of running with the first two GPUs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;CUDA_VISIBLE_DEVICES=0,1 python -m minigemini.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a model worker (4-bit, 8-bit inference, quantized)&lt;/h4&gt; &#xA;&lt;p&gt;You can launch the model worker with quantized bits (4-bit, 8-bit), which allows you to run the inference with reduced GPU memory footprint. Note that inference with quantized bits may not be as accurate as the full-precision model. Simply append &lt;code&gt;--load-4bit&lt;/code&gt; or &lt;code&gt;--load-8bit&lt;/code&gt; to the &lt;strong&gt;model worker&lt;/strong&gt; command that you are executing. Below is an example of running with 4-bit quantization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m minigemini.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path work_dirs/Mini-Gemini/Mini-Gemini-13B-HD --load-4bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;We provide some examples in this section. More examples can be found in our &lt;a href=&#34;https://mini-gemini.github.io/&#34;&gt;project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hi-Resolution Understanding&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;98%&#34; src=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/images/demo_und.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Generation with Reasoning&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;98%&#34; src=&#34;https://raw.githubusercontent.com/dvlab-research/MiniGemini/main/images/demo_gen.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this repo useful for your research, please consider citing the paper&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{li2024minigemini,&#xA;  title={Mini-Gemini: Mining the Potential of Multi-modality Vision Language Models},&#xA;  author={Li, Yanwei and Zhang, Yuechen and Wang, Chengyao and Zhong, Zhisheng and Chen, Yixin and Chu, Ruihang and Liu, Shaoteng and Jia, Jiaya},&#xA;  journal={arXiv:2403.18814},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We would like to thank the following repos for their great work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This work is built upon the &lt;a href=&#34;https://github.com/haotian-liu/LLaVA&#34;&gt;LLaVA&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;This work utilizes LLMs from &lt;a href=&#34;https://huggingface.co/google/gemma-2b-it&#34;&gt;Gemma&lt;/a&gt;, &lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;Vicuna&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1&#34;&gt;Mixtral&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/NousResearch/Nous-Hermes-2-Yi-34B&#34;&gt;Nous-Hermes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dvlab-research/MiniGemini/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Code%20License-Apache_2.0-yellow.svg?sanitize=true&#34; alt=&#34;Code License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dvlab-research/MiniGemini/raw/main/DATA_LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Data%20License-CC%20By%20NC%204.0-orange.svg?sanitize=true&#34; alt=&#34;Data License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dvlab-research/MiniGemini/raw/main/WEIGHT_LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Weight%20License-CC%20By%20NC%204.0-red&#34; alt=&#34;Weight License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The data and checkpoint is intended and licensed for research use only. They are also restricted to uses that follow the license agreement of LLaVA, LLaMA, Vicuna and GPT-4. The dataset is CC BY NC 4.0 (allowing only non-commercial use) and models trained using the dataset should not be used outside of research purposes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Atlas-OS/Atlas</title>
    <updated>2024-04-03T01:22:43Z</updated>
    <id>tag:github.com,2024-04-03:/Atlas-OS/Atlas</id>
    <link href="https://github.com/Atlas-OS/Atlas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 An open and lightweight modification to Windows, designed to optimize performance, privacy and security.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;http://atlasos.net&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://gcore.jsdelivr.net/gh/Atlas-OS/branding@main/github-banner.png&#34; alt=&#34;Atlas&#34; width=&#34;800&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/atlas-os/atlas?style=for-the-badge&amp;amp;logo=github&amp;amp;color=1A91FF&#34;&gt; &lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors/atlas-os/atlas?style=for-the-badge&amp;amp;color=1A91FF&#34;&gt; &lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/release/atlas-os/atlas?style=for-the-badge&amp;amp;color=1A91FF&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A transparent and lightweight modification to Windows, designed to optimize performance, privacy and usability.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://atlasos.net&#34; target=&#34;_blank&#34;&gt;🌐 Website&lt;/a&gt; • &lt;a href=&#34;https://docs.atlasos.net&#34; target=&#34;_blank&#34;&gt;📚 Documentation&lt;/a&gt; • &lt;a href=&#34;https://discord.atlasos.net&#34; target=&#34;_blank&#34;&gt;☎️ Discord&lt;/a&gt; • &lt;a href=&#34;https://forum.atlasos.net&#34; target=&#34;_blank&#34;&gt;💬 Forum&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;📚 &lt;strong&gt;Important Documentation&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atlasos.net/getting-started/installation/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atlasos.net/faq-and-troubleshooting/removed-features/&#34;&gt;FAQ &amp;amp; Common Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atlasos.net/contributions/&#34;&gt;Contribution Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atlasos.net/branding/&#34;&gt;Branding&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤔 What is Atlas?&lt;/h2&gt; &#xA;&lt;p&gt;Atlas is an open source project that enhances Windows by eliminating factors that negatively impact gaming performance. We optimize for minimal stutters and input lag, enhanced privacy, usability, and performance, all with a focus on maintaining functionality.&lt;/p&gt; &#xA;&lt;h2&gt;👀 Why Atlas?&lt;/h2&gt; &#xA;&lt;h3&gt;🔒 Enhanced Privacy&lt;/h3&gt; &#xA;&lt;p&gt;Atlas removes the majority of telemetry embedded within Windows and implements numerous group policies to minimize data collection. However, it cannot ensure privacy outside the scope of Windows, such as browsers and other third-party applications.&lt;/p&gt; &#xA;&lt;h3&gt;✅ Optimized Performance&lt;/h3&gt; &#xA;&lt;p&gt;Atlas strikes a balance between performance and compatibility. It implements numerous meaningful changes to improve Windows performance and responsiveness without breaking essential features. Atlas will not do tweaks for a placebo effect or very marginal gains, making Atlas more stable and compatible.&lt;/p&gt; &#xA;&lt;h3&gt;🛡️ Security Features&lt;/h3&gt; &#xA;&lt;p&gt;Unlike most other Windows modifications, we don&#39;t remove key security features that most users need to maintain a secure system. However, Atlas allows power users to have more customisation over disabling certain security features within their needs, including informing users with information about the &lt;a href=&#34;https://docs.atlasos.net/getting-started/post-installation/atlas-folder/security/&#34;&gt;pros and cons&lt;/a&gt; of each option.&lt;/p&gt; &#xA;&lt;p&gt;Some security features which are optional are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Defender &amp;amp; SmartScreen&lt;/li&gt; &#xA; &lt;li&gt;Windows Update &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No automatic updates (will be customisable next release)&lt;/li&gt; &#xA;   &lt;li&gt;No major feature updates (potentially customisable in the future)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CPU mitigations&lt;/li&gt; &#xA; &lt;li&gt;User Account Control&lt;/li&gt; &#xA; &lt;li&gt;Core isolation features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;😄 Increased Usability&lt;/h3&gt; &#xA;&lt;p&gt;Atlas applies many modifications and default settings to make Windows easier to use. This includes removing commonly unneeded applications (which are reinstallable), configuring many aspects of the interface, disabling advertisements, and much more.&lt;/p&gt; &#xA;&lt;h3&gt;🔍 Open Source and Transparent&lt;/h3&gt; &#xA;&lt;p&gt;Atlas is open source with the &lt;a href=&#34;https://github.com/Atlas-OS/Atlas/raw/main/LICENSE&#34;&gt;GPLv3 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike custom Windows ISOs, Atlas is easier to audit due to Atlas&#39; use of the software &lt;a href=&#34;https://ameliorated.io&#34;&gt;AME Wizard&lt;/a&gt;. AME Wizard is controlled by Playbooks, a heavily customizable script-esque system that can perform a wide range of tasks, including deep modifications to Windows. AME Wizard&#39;s backend is &lt;a href=&#34;https://git.ameliorated.info/Styris/trusted-uninstaller-cli&#34;&gt;open source&lt;/a&gt;, meaning that you can see exactly what is ran.&lt;/p&gt; &#xA;&lt;p&gt;Playbooks are renamed &lt;strong&gt;.zip&lt;/strong&gt; archives (with the password &lt;a href=&#34;https://docs.ameliorated.io/developers/getting-started/creation.html&#34;&gt;&lt;code&gt;malte&lt;/code&gt;&lt;/a&gt;) which primarily consists of plain text scripts, meaning that Atlas is much easier to audit to see exactly what is changed. This is unlike custom Windows ISOs, which have many more entry points for malicious activity. The minimal amount of binaries included in the Playbook are open source in our &lt;a href=&#34;https://github.com/Atlas-OS/utilities&#34;&gt;utilities&lt;/a&gt; repository, with the &lt;a href=&#34;https://github.com/Atlas-OS/Atlas/raw/main/src/playbook/Executables/AtlasModules/README.md&#34;&gt;hashes being listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🔒 Legal Compliance&lt;/h3&gt; &#xA;&lt;p&gt;As Atlas doesn&#39;t redistrbute a modified Windows ISO, Atlas fully complies with &lt;a href=&#34;https://www.microsoft.com/en-us/Useterms/Retail/Windows/10/UseTerms_Retail_Windows_10_English.htm&#34;&gt;Microsoft&#39;s Terms of Service&lt;/a&gt;. In addition, activation in Windows is not modified.&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Brand kit&lt;/h2&gt; &#xA;&lt;p&gt;Want to create your own Atlas wallpaper with some original creative designs? Download our brand kit &lt;a href=&#34;https://github.com/Atlas-OS/branding/archive/refs/heads/main.zip&#34;&gt;here&lt;/a&gt; and share your creations on our &lt;a href=&#34;https://forum.atlasos.net/t/art-showcase&#34;&gt;forum&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>city-super/Octree-GS</title>
    <updated>2024-04-03T01:22:43Z</updated>
    <id>tag:github.com,2024-04-03:/city-super/Octree-GS</id>
    <link href="https://github.com/city-super/Octree-GS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Octree-GS: Towards Consistent Real-time Rendering with LOD-Structured 3D Gaussians&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;em&gt;Octree&lt;/em&gt;-GS: Towards Consistent Real-time Rendering with LOD-Structured 3D Gaussians&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://city-super.github.io/octree-gs/&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2403.17898&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/1BEcAvM98HpchubODF249X3NGoKoC7SuQ/view?usp=sharing&#34;&gt;Viewers for Windows&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tongji-rkr&#34;&gt;Kerui Ren*&lt;/a&gt;, &lt;a href=&#34;https://jianglh-whu.github.io/&#34;&gt;Lihan Jiang*&lt;/a&gt;, &lt;a href=&#34;https://github.com/inspirelt&#34;&gt;Tao Lu&lt;/a&gt;, &lt;a href=&#34;https://scholar.google.com/citations?user=w0Od3hQAAAAJ&#34;&gt;Mulin Yu&lt;/a&gt;, &lt;a href=&#34;https://eveneveno.github.io/lnxu&#34;&gt;Linning Xu&lt;/a&gt;, &lt;a href=&#34;https://eezkni.github.io/&#34;&gt;Zhangkai Ni&lt;/a&gt;, &lt;a href=&#34;https://daibo.info/&#34;&gt;Bo Dai&lt;/a&gt; ✉️ &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;[2024.04.01]&lt;/strong&gt; 🎈👀 The &lt;a href=&#34;https://github.com/city-super/Octree-GS/tree/main/SIBR_viewers&#34;&gt;viewer&lt;/a&gt; for Octree-GS is available now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;[2024.04.01]&lt;/strong&gt; We release the code.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/city-super/Octree-GS/main/assets/pipeline.png&#34; width=&#34;100%&#34; height=&#34;100%&#34; class=&#34;center&#34;&gt; &lt;/p&gt; Inspired by the Level-of-Detail (LOD) techniques, we introduce \modelname, featuring an LOD-structured 3D Gaussian approach supporting level-of-detail decomposition for scene representation that contributes to the final rendering results. Our model dynamically selects the appropriate level from the set of multi-resolution anchor points, ensuring consistent rendering performance with adaptive LOD adjustments while maintaining high-fidelity rendering results. &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/city-super/Octree-GS/main/assets/teaser_big.png&#34; width=&#34;100%&#34; height=&#34;100%&#34; class=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We tested on a server configured with Ubuntu 18.04, cuda 11.6 and gcc 9.4.0. Other similar configurations should also work, but we have not verified each one individually.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/city-super/Octree-GS --recursive&#xA;cd Octree-GS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;SET DISTUTILS_USE_SDK=1 # Windows only&#xA;conda env create --file environment.yml&#xA;conda activate octree_gs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;First, create a &lt;code&gt;data/&lt;/code&gt; folder inside the project path by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data structure will be organised as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data/&#xA;├── dataset_name&#xA;│&amp;nbsp;&amp;nbsp; ├── scene1/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── images&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── IMG_0.jpg&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── IMG_1.jpg&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ...&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── sparse/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └──0/&#xA;│&amp;nbsp;&amp;nbsp; ├── scene2/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── images&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── IMG_0.jpg&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── IMG_1.jpg&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ...&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── sparse/&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └──0/&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Public Data&lt;/h3&gt; &#xA;&lt;p&gt;The MatrixCity dataset can be downloaded from &lt;a href=&#34;https://huggingface.co/datasets/BoDai/MatrixCity/tree/main&#34;&gt;Hugging Face&lt;/a&gt;/&lt;a href=&#34;https://openxlab.org.cn/datasets/bdaibdai/MatrixCity&#34;&gt;Openxlab&lt;/a&gt;/&lt;a href=&#34;https://pan.baidu.com/share/init?surl=87P0e5p1hz9t5mgdJXjL1g&#34;&gt;百度网盘[提取码:hqnn]&lt;/a&gt;. The BungeeNeRF dataset is available in &lt;a href=&#34;https://drive.google.com/file/d/1nBLcf9Jrr6sdxKa1Hbd47IArQQ_X8lww/view?usp=sharing&#34;&gt;Google Drive&lt;/a&gt;/&lt;a href=&#34;https://pan.baidu.com/s/1AUYUJojhhICSKO2JrmOnCA&#34;&gt;百度网盘[提取码:4whv]&lt;/a&gt;. The MipNeRF360 scenes are provided by the paper author &lt;a href=&#34;https://jonbarron.info/mipnerf360/&#34;&gt;here&lt;/a&gt;. The SfM data sets for Tanks&amp;amp;Temples and Deep Blending are hosted by 3D-Gaussian-Splatting &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/input/tandt_db.zip&#34;&gt;here&lt;/a&gt;. Download and uncompress them into the &lt;code&gt;data/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Data&lt;/h3&gt; &#xA;&lt;p&gt;For custom data, you should process the image sequences with &lt;a href=&#34;https://colmap.github.io/&#34;&gt;Colmap&lt;/a&gt; to obtain the SfM points and camera poses. Then, place the results into &lt;code&gt;data/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;h3&gt;Training multiple scenes&lt;/h3&gt; &#xA;&lt;p&gt;To train multiple scenes in parallel, we provide batch training scripts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tanks&amp;amp;Temples: &lt;code&gt;train_tandt.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MipNeRF360: &lt;code&gt;train_mipnerf360.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;BungeeNeRF: &lt;code&gt;train_bungeenerf.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deep Blending: &lt;code&gt;train_db.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;run them with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash train_xxx.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Notice 1: Make sure you have enough GPU cards and memories to run these scenes at the same time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Notice 2: Each process occupies many cpu cores, which may slow down the training process. Set &lt;code&gt;torch.set_num_threads(32)&lt;/code&gt; accordingly in the &lt;code&gt;train.py&lt;/code&gt; to alleviate it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Training a single scene&lt;/h3&gt; &#xA;&lt;p&gt;For training a single scene, modify the path and configurations in &lt;code&gt;single_train.sh&lt;/code&gt; accordingly and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash single_train.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;scene: scene name with a format of &lt;code&gt;dataset_name/scene_name/&lt;/code&gt; or &lt;code&gt;scene_name/&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;exp_name: user-defined experiment name;&lt;/li&gt; &#xA; &lt;li&gt;gpu: specify the GPU id to run the code. &#39;-1&#39; denotes using the most idle GPU.&lt;/li&gt; &#xA; &lt;li&gt;ratio: sampling interval of the SfM point cloud at initialization&lt;/li&gt; &#xA; &lt;li&gt;appearance_dim: dimensions of appearance embedding&lt;/li&gt; &#xA; &lt;li&gt;fork: proportion of subdivisions between LOD levels&lt;/li&gt; &#xA; &lt;li&gt;base_layer: the coarsest layer of the octree, corresponding to LOD 0, &#39;&amp;lt;0&#39; means scene-based setting&lt;/li&gt; &#xA; &lt;li&gt;visible_threshold: the threshold ratio of anchor points with low training frequency&lt;/li&gt; &#xA; &lt;li&gt;dist2level: the way floating-point values map to integers when estimating the LOD level&lt;/li&gt; &#xA; &lt;li&gt;update_ratio: the threshold ratio of anchor growing&lt;/li&gt; &#xA; &lt;li&gt;progressive: whether to use progressive learning&lt;/li&gt; &#xA; &lt;li&gt;levels: The number of LOD levels, &#39;&amp;lt;0&#39; means scene-based setting&lt;/li&gt; &#xA; &lt;li&gt;init_level: initial level of progressive learning&lt;/li&gt; &#xA; &lt;li&gt;extra_ratio: the threshold ratio of LOD bias&lt;/li&gt; &#xA; &lt;li&gt;extra_up: Increment of LOD bias per time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For these public datasets, the configurations of &#39;voxel_size&#39; and &#39;fork&#39; can refer to the above batch training script.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This script will store the log (with running-time code) into &lt;code&gt;outputs/dataset_name/scene_name/exp_name/cur_time&lt;/code&gt; automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve integrated the rendering and metrics calculation process into the training code. So, when completing training, the &lt;code&gt;rendering results&lt;/code&gt;, &lt;code&gt;fps&lt;/code&gt; and &lt;code&gt;quality metrics&lt;/code&gt; will be printed automatically. And the rendering results will be save in the log dir. Mind that the &lt;code&gt;fps&lt;/code&gt; is roughly estimated by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;torch.cuda.synchronize();t_start=time.time()&#xA;rendering...&#xA;torch.cuda.synchronize();t_end=time.time()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which may differ somewhat from the original 3D-GS, but it does not affect the analysis.&lt;/p&gt; &#xA;&lt;p&gt;Meanwhile, we keep the manual rendering function with a similar usage of the counterpart in &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D-GS&lt;/a&gt;, one can run it by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python render.py -m &amp;lt;path to trained model&amp;gt; # Generate renderings&#xA;python metrics.py -m &amp;lt;path to trained model&amp;gt; # Compute error metrics on renderings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Viewer&lt;/h2&gt; &#xA;&lt;p&gt;The viewer for Octree-GS is available now.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kerui Ren: &lt;a href=&#34;mailto:renkerui@pjlab.org.cn&#34;&gt;renkerui@pjlab.org.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lihan Jiang: &lt;a href=&#34;mailto:mr.lhjiang@gmail.com&#34;&gt;mr.lhjiang@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the LICENSE of &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D-GS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We thank all authors from &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D-GS&lt;/a&gt; and &lt;a href=&#34;https://github.com/city-super/Scaffold-GS&#34;&gt;Scaffold-GS&lt;/a&gt; for presenting such an excellent work.&lt;/p&gt;</summary>
  </entry>
</feed>