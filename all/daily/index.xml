<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-12T01:29:13Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdepoix/youtube-transcript-api</title>
    <updated>2025-06-12T01:29:13Z</updated>
    <id>tag:github.com,2025-06-12:/jdepoix/youtube-transcript-api</id>
    <link href="https://github.com/jdepoix/youtube-transcript-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a python API which allows you to get the transcript/subtitles for a given YouTube video. It also works for automatically generated subtitles and it does not require an API key nor a headless browser, like other selenium based solutions do!&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; ✨ YouTube Transcript API ✨ &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=BAENLEW8VUJ6G&amp;amp;source=url&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jdepoix/youtube-transcript-api/actions&#34;&gt; &lt;img src=&#34;https://github.com/jdepoix/youtube-transcript-api/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/jdepoix/youtube-transcript-api?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/jdepoix/youtube-transcript-api/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat&#34; alt=&#34;MIT license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/youtube-transcript-api/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/youtube-transcript-api.svg?sanitize=true&#34; alt=&#34;Current Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/youtube-transcript-api/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/youtube-transcript-api.svg?sanitize=true&#34; alt=&#34;Supported Python Versions&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;This is a python API which allows you to retrieve the transcript/subtitles for a given YouTube video. It also works for automatically generated subtitles, supports translating subtitles and it does not require a headless browser, like other selenium based solutions do!&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Maintenance of this project is made possible by all the &lt;a href=&#34;https://github.com/jdepoix/youtube-transcript-api/graphs/contributors&#34;&gt;contributors&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/jdepoix&#34;&gt;sponsors&lt;/a&gt;. If you&#39;d like to sponsor this project and have your avatar or company logo appear below &lt;a href=&#34;https://github.com/sponsors/jdepoix&#34;&gt;click here&lt;/a&gt;. 💖 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.searchapi.io&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.searchapi.io/press/v1/svg/searchapi_logo_white_h.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://www.searchapi.io/press/v1/svg/searchapi_logo_black_h.svg&#34;&gt; &#xA;   &lt;img alt=&#34;SearchAPI&#34; src=&#34;https://www.searchapi.io/press/v1/svg/searchapi_logo_black_h.svg?sanitize=true&#34; height=&#34;40px&#34; style=&#34;vertical-align: middle;&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://supadata.ai&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://supadata.ai/logo-dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://supadata.ai/logo-light.svg&#34;&gt; &#xA;   &lt;img alt=&#34;supadata&#34; src=&#34;https://supadata.ai/logo-light.svg?sanitize=true&#34; height=&#34;40px&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.dumplingai.com&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.dumplingai.com/logos/logo-dark.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://www.dumplingai.com/logos/logo-light.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Dumpling AI&#34; src=&#34;https://www.dumplingai.com/logos/logo-light.svg?sanitize=true&#34; height=&#34;40px&#34; style=&#34;vertical-align: middle;&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended to &lt;a href=&#34;https://pypi.org/project/youtube-transcript-api/&#34;&gt;install this module by using pip&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install youtube-transcript-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can either integrate this module &lt;a href=&#34;https://raw.githubusercontent.com/jdepoix/youtube-transcript-api/master/#api&#34;&gt;into an existing application&lt;/a&gt; or just use it via a &lt;a href=&#34;https://raw.githubusercontent.com/jdepoix/youtube-transcript-api/master/#cli&#34;&gt;CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get a transcript for a given video is to execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from youtube_transcript_api import YouTubeTranscriptApi&#xA;&#xA;ytt_api = YouTubeTranscriptApi()&#xA;ytt_api.fetch(video_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, this will try to access the English transcript of the video. If your video has a different language, or you are interested in fetching a transcript in a different language, please read the section below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Pass in the video ID, NOT the video URL. For a video with the URL &lt;code&gt;https://www.youtube.com/watch?v=12345&lt;/code&gt; the ID is &lt;code&gt;12345&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This will return a &lt;code&gt;FetchedTranscript&lt;/code&gt; object looking somewhat like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;FetchedTranscript(&#xA;    snippets=[&#xA;        FetchedTranscriptSnippet(&#xA;            text=&#34;Hey there&#34;,&#xA;            start=0.0,&#xA;            duration=1.54,&#xA;        ),&#xA;        FetchedTranscriptSnippet(&#xA;            text=&#34;how are you&#34;,&#xA;            start=1.54,&#xA;            duration=4.16,&#xA;        ),&#xA;        # ...&#xA;    ],&#xA;    video_id=&#34;12345&#34;,&#xA;    language=&#34;English&#34;,&#xA;    language_code=&#34;en&#34;,&#xA;    is_generated=False,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This object implements most interfaces of a &lt;code&gt;List&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ytt_api = YouTubeTranscriptApi()&#xA;fetched_transcript = ytt_api.fetch(video_id)&#xA;&#xA;# is iterable&#xA;for snippet in fetched_transcript:&#xA;    print(snippet.text)&#xA;&#xA;# indexable&#xA;last_snippet = fetched_transcript[-1]&#xA;&#xA;# provides a length&#xA;snippet_count = len(fetched_transcript)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to handle the raw transcript data you can call &lt;code&gt;fetched_transcript.to_raw_data()&lt;/code&gt;, which will return a list of dictionaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#xA;    {&#xA;        &#39;text&#39;: &#39;Hey there&#39;,&#xA;        &#39;start&#39;: 0.0,&#xA;        &#39;duration&#39;: 1.54&#xA;    },&#xA;    {&#xA;        &#39;text&#39;: &#39;how are you&#39;,&#xA;        &#39;start&#39;: 1.54&#xA;        &#39;duration&#39;: 4.16&#xA;    },&#xA;    # ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieve different languages&lt;/h3&gt; &#xA;&lt;p&gt;You can add the &lt;code&gt;languages&lt;/code&gt; param if you want to make sure the transcripts are retrieved in your desired language (it defaults to english).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;YouTubeTranscriptApi().fetch(video_id, languages=[&#39;de&#39;, &#39;en&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s a list of language codes in a descending priority. In this example it will first try to fetch the german transcript (&lt;code&gt;&#39;de&#39;&lt;/code&gt;) and then fetch the english transcript (&lt;code&gt;&#39;en&#39;&lt;/code&gt;) if it fails to do so. If you want to find out which languages are available first, &lt;a href=&#34;https://raw.githubusercontent.com/jdepoix/youtube-transcript-api/master/#list-available-transcripts&#34;&gt;have a look at &lt;code&gt;list()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you only want one language, you still need to format the &lt;code&gt;languages&lt;/code&gt; argument as a list&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;YouTubeTranscriptApi().fetch(video_id, languages=[&#39;de&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preserve formatting&lt;/h3&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;preserve_formatting=True&lt;/code&gt; if you&#39;d like to keep HTML formatting elements such as &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; (italics) and &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; (bold).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;YouTubeTranscriptApi().fetch(video_ids, languages=[&#39;de&#39;, &#39;en&#39;], preserve_formatting=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List available transcripts&lt;/h3&gt; &#xA;&lt;p&gt;If you want to list all transcripts which are available for a given video you can call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ytt_api = YouTubeTranscriptApi()&#xA;transcript_list = ytt_api.list(video_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return a &lt;code&gt;TranscriptList&lt;/code&gt; object which is iterable and provides methods to filter the list of transcripts for specific languages and types, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;transcript = transcript_list.find_transcript([&#39;de&#39;, &#39;en&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default this module always chooses manually created transcripts over automatically created ones, if a transcript in the requested language is available both manually created and generated. The &lt;code&gt;TranscriptList&lt;/code&gt; allows you to bypass this default behaviour by searching for specific transcript types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# filter for manually created transcripts&#xA;transcript = transcript_list.find_manually_created_transcript([&#39;de&#39;, &#39;en&#39;])&#xA;&#xA;# or automatically generated ones&#xA;transcript = transcript_list.find_generated_transcript([&#39;de&#39;, &#39;en&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods &lt;code&gt;find_generated_transcript&lt;/code&gt;, &lt;code&gt;find_manually_created_transcript&lt;/code&gt;, &lt;code&gt;find_transcript&lt;/code&gt; return &lt;code&gt;Transcript&lt;/code&gt; objects. They contain metadata regarding the transcript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#xA;    transcript.video_id,&#xA;    transcript.language,&#xA;    transcript.language_code,&#xA;    # whether it has been manually created or generated by YouTube&#xA;    transcript.is_generated,&#xA;    # whether this transcript can be translated or not&#xA;    transcript.is_translatable,&#xA;    # a list of languages the transcript can be translated to&#xA;    transcript.translation_languages,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and provide the method, which allows you to fetch the actual transcript data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;transcript.fetch()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns a &lt;code&gt;FetchedTranscript&lt;/code&gt; object, just like &lt;code&gt;YouTubeTranscriptApi().fetch()&lt;/code&gt; does.&lt;/p&gt; &#xA;&lt;h3&gt;Translate transcript&lt;/h3&gt; &#xA;&lt;p&gt;YouTube has a feature which allows you to automatically translate subtitles. This module also makes it possible to access this feature. To do so &lt;code&gt;Transcript&lt;/code&gt; objects provide a &lt;code&gt;translate()&lt;/code&gt; method, which returns a new translated &lt;code&gt;Transcript&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;transcript = transcript_list.find_transcript([&#39;en&#39;])&#xA;translated_transcript = transcript.translate(&#39;de&#39;)&#xA;print(translated_transcript.fetch())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;By example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from youtube_transcript_api import YouTubeTranscriptApi&#xA;&#xA;ytt_api = YouTubeTranscriptApi()&#xA;&#xA;# retrieve the available transcripts&#xA;transcript_list = ytt_api.list(&#39;video_id&#39;)&#xA;&#xA;# iterate over all available transcripts&#xA;for transcript in transcript_list:&#xA;&#xA;    # the Transcript object provides metadata properties&#xA;    print(&#xA;        transcript.video_id,&#xA;        transcript.language,&#xA;        transcript.language_code,&#xA;        # whether it has been manually created or generated by YouTube&#xA;        transcript.is_generated,&#xA;        # whether this transcript can be translated or not&#xA;        transcript.is_translatable,&#xA;        # a list of languages the transcript can be translated to&#xA;        transcript.translation_languages,&#xA;    )&#xA;&#xA;    # fetch the actual transcript data&#xA;    print(transcript.fetch())&#xA;&#xA;    # translating the transcript will return another transcript object&#xA;    print(transcript.translate(&#39;en&#39;).fetch())&#xA;&#xA;# you can also directly filter for the language you are looking for, using the transcript list&#xA;transcript = transcript_list.find_transcript([&#39;de&#39;, &#39;en&#39;])  &#xA;&#xA;# or just filter for manually created transcripts  &#xA;transcript = transcript_list.find_manually_created_transcript([&#39;de&#39;, &#39;en&#39;])  &#xA;&#xA;# or automatically generated ones  &#xA;transcript = transcript_list.find_generated_transcript([&#39;de&#39;, &#39;en&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working around IP bans (&lt;code&gt;RequestBlocked&lt;/code&gt; or &lt;code&gt;IpBlocked&lt;/code&gt; exception)&lt;/h2&gt; &#xA;&lt;p&gt;Unfortunately, YouTube has started blocking most IPs that are known to belong to cloud providers (like AWS, Google Cloud Platform, Azure, etc.), which means you will most likely run into &lt;code&gt;ReuquestBlocked&lt;/code&gt; or &lt;code&gt;IpBlocked&lt;/code&gt; exceptions when deploying your code to any cloud solutions. Same can happen to the IP of your self-hosted solution, if you are doing too many requests. You can work around these IP bans using proxies. However, since YouTube will ban static proxies after extended use, going for rotating residential proxies provide is the most reliable option.&lt;/p&gt; &#xA;&lt;p&gt;There are different providers that offer rotating residential proxies, but after testing different offerings I have found &lt;a href=&#34;https://www.webshare.io/?referral_code=w0xno53eb50g&#34;&gt;Webshare&lt;/a&gt; to be the most reliable and have therefore integrated it into this module, to make setting it up as easy as possible.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://www.webshare.io/?referral_code=w0xno53eb50g&#34;&gt;Webshare&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Once you have created a &lt;a href=&#34;https://www.webshare.io/?referral_code=w0xno53eb50g&#34;&gt;Webshare account&lt;/a&gt; and purchased a &#34;Residential&#34; proxy package that suits your workload (make sure NOT to purchase &#34;Proxy Server&#34; or &#34;Static Residential&#34;!), open the &lt;a href=&#34;https://dashboard.webshare.io/proxy/settings?referral_code=w0xno53eb50g&#34;&gt;Webshare Proxy Settings&lt;/a&gt; to retrieve your &#34;Proxy Username&#34; and &#34;Proxy Password&#34;. Using this information you can initialize the &lt;code&gt;YouTubeTranscriptApi&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from youtube_transcript_api import YouTubeTranscriptApi&#xA;from youtube_transcript_api.proxies import WebshareProxyConfig&#xA;&#xA;ytt_api = YouTubeTranscriptApi(&#xA;    proxy_config=WebshareProxyConfig(&#xA;        proxy_username=&#34;&amp;lt;proxy-username&amp;gt;&#34;,&#xA;        proxy_password=&#34;&amp;lt;proxy-password&amp;gt;&#34;,&#xA;    )&#xA;)&#xA;&#xA;# all requests done by ytt_api will now be proxied through Webshare&#xA;ytt_api.fetch(video_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;WebshareProxyConfig&lt;/code&gt; will default to using rotating residential proxies and requires no further configuration.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;a href=&#34;https://www.webshare.io/?referral_code=w0xno53eb50g&#34;&gt;referral links are used here&lt;/a&gt; and any purchases made through these links will support this Open Source project, which is very much appreciated! 💖😊🙏💖&lt;/p&gt; &#xA;&lt;p&gt;However, you are of course free to integrate your own proxy solution using the &lt;code&gt;GenericProxyConfig&lt;/code&gt; class, if you prefer using another provider or want to implement your own solution, as covered by the following section.&lt;/p&gt; &#xA;&lt;h3&gt;Using other Proxy solutions&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively to using &lt;a href=&#34;https://raw.githubusercontent.com/jdepoix/youtube-transcript-api/master/#using-webshare&#34;&gt;Webshare&lt;/a&gt;, you can set up any generic HTTP/HTTPS/SOCKS proxy using the &lt;code&gt;GenericProxyConfig&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from youtube_transcript_api import YouTubeTranscriptApi&#xA;from youtube_transcript_api.proxies import GenericProxyConfig&#xA;&#xA;ytt_api = YouTubeTranscriptApi(&#xA;    proxy_config=GenericProxyConfig(&#xA;        http_url=&#34;http://user:pass@my-custom-proxy.org:port&#34;,&#xA;        https_url=&#34;https://user:pass@my-custom-proxy.org:port&#34;,&#xA;    )&#xA;)&#xA;&#xA;# all requests done by ytt_api will now be proxied using the defined proxy URLs&#xA;ytt_api.fetch(video_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be aware that using a proxy doesn&#39;t guarantee that you won&#39;t be blocked, as YouTube can always block the IP of your proxy! Therefore, you should always choose a solution that rotates through a pool of proxy addresses, if you want to maximize reliability.&lt;/p&gt; &#xA;&lt;h2&gt;Overwriting request defaults&lt;/h2&gt; &#xA;&lt;p&gt;When initializing a &lt;code&gt;YouTubeTranscriptApi&lt;/code&gt; object, it will create a &lt;code&gt;requests.Session&lt;/code&gt; which will be used for all HTTP(S) request. This allows for caching cookies when retrieving multiple requests. However, you can optionally pass a &lt;code&gt;requests.Session&lt;/code&gt; object into its constructor, if you manually want to share cookies between different instances of &lt;code&gt;YouTubeTranscriptApi&lt;/code&gt;, overwrite defaults, set custom headers, specify SSL certificates, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from requests import Session&#xA;&#xA;http_client = Session()&#xA;&#xA;# set custom header&#xA;http_client.headers.update({&#34;Accept-Encoding&#34;: &#34;gzip, deflate&#34;})&#xA;&#xA;# set path to CA_BUNDLE file&#xA;http_client.verify = &#34;/path/to/certfile&#34;&#xA;&#xA;ytt_api = YouTubeTranscriptApi(http_client=http_client)&#xA;ytt_api.fetch(video_id)&#xA;&#xA;# share same Session between two instances of YouTubeTranscriptApi&#xA;ytt_api_2 = YouTubeTranscriptApi(http_client=http_client)&#xA;# now shares cookies with ytt_api&#xA;ytt_api_2.fetch(video_id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cookie Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Some videos are age restricted, so this module won&#39;t be able to access those videos without some sort of authentication. Unfortunately, some recent changes to the YouTube API have broken the current implementation of cookie based authentication, so this feature is currently not available.&lt;/p&gt; &#xA;&lt;h2&gt;Using Formatters&lt;/h2&gt; &#xA;&lt;p&gt;Formatters are meant to be an additional layer of processing of the transcript you pass it. The goal is to convert a &lt;code&gt;FetchedTranscript&lt;/code&gt; object into a consistent string of a given &#34;format&#34;. Such as a basic text (&lt;code&gt;.txt&lt;/code&gt;) or even formats that have a defined specification such as JSON (&lt;code&gt;.json&lt;/code&gt;), WebVTT (&lt;code&gt;.vtt&lt;/code&gt;), SRT (&lt;code&gt;.srt&lt;/code&gt;), Comma-separated format (&lt;code&gt;.csv&lt;/code&gt;), etc...&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;formatters&lt;/code&gt; submodule provides a few basic formatters, which can be used as is, or extended to your needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSONFormatter&lt;/li&gt; &#xA; &lt;li&gt;PrettyPrintFormatter&lt;/li&gt; &#xA; &lt;li&gt;TextFormatter&lt;/li&gt; &#xA; &lt;li&gt;WebVTTFormatter&lt;/li&gt; &#xA; &lt;li&gt;SRTFormatter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is how to import from the &lt;code&gt;formatters&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# the base class to inherit from when creating your own formatter.&#xA;from youtube_transcript_api.formatters import Formatter&#xA;&#xA;# some provided subclasses, each outputs a different string format.&#xA;from youtube_transcript_api.formatters import JSONFormatter&#xA;from youtube_transcript_api.formatters import TextFormatter&#xA;from youtube_transcript_api.formatters import WebVTTFormatter&#xA;from youtube_transcript_api.formatters import SRTFormatter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatter Example&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say we wanted to retrieve a transcript and store it to a JSON file. That would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# your_custom_script.py&#xA;&#xA;from youtube_transcript_api import YouTubeTranscriptApi&#xA;from youtube_transcript_api.formatters import JSONFormatter&#xA;&#xA;ytt_api = YouTubeTranscriptApi()&#xA;transcript = ytt_api.fetch(video_id)&#xA;&#xA;formatter = JSONFormatter()&#xA;&#xA;# .format_transcript(transcript) turns the transcript into a JSON string.&#xA;json_formatted = formatter.format_transcript(transcript)&#xA;&#xA;# Now we can write it out to a file.&#xA;with open(&#39;your_filename.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as json_file:&#xA;    json_file.write(json_formatted)&#xA;&#xA;# Now should have a new JSON file that you can easily read back into Python.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Passing extra keyword arguments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since JSONFormatter leverages &lt;code&gt;json.dumps()&lt;/code&gt; you can also forward keyword arguments into &lt;code&gt;.format_transcript(transcript)&lt;/code&gt; such as making your file output prettier by forwarding the &lt;code&gt;indent=2&lt;/code&gt; keyword argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;json_formatted = JSONFormatter().format_transcript(transcript, indent=2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Formatter Example&lt;/h3&gt; &#xA;&lt;p&gt;You can implement your own formatter class. Just inherit from the &lt;code&gt;Formatter&lt;/code&gt; base class and ensure you implement the &lt;code&gt;format_transcript(self, transcript: FetchedTranscript, **kwargs) -&amp;gt; str&lt;/code&gt; and &lt;code&gt;format_transcripts(self, transcripts: List[FetchedTranscript], **kwargs) -&amp;gt; str&lt;/code&gt; methods which should ultimately return a string when called on your formatter instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyCustomFormatter(Formatter):&#xA;    def format_transcript(self, transcript: FetchedTranscript, **kwargs) -&amp;gt; str:&#xA;        # Do your custom work in here, but return a string.&#xA;        return &#39;your processed output data as a string.&#39;&#xA;&#xA;    def format_transcripts(self, transcripts: List[FetchedTranscript], **kwargs) -&amp;gt; str:&#xA;        # Do your custom work in here to format a list of transcripts, but return a string.&#xA;        return &#39;your processed output data as a string.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;Execute the CLI script using the video ids as parameters and the results will be printed out to the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; ...  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLI also gives you the option to provide a list of preferred languages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; ... --languages de en  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify if you want to exclude automatically generated or manually created subtitles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; ... --languages de en --exclude-generated&#xA;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; ... --languages de en --exclude-manually-created&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would prefer to write it into a file or pipe it into another application, you can also output the results as json using the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; ... --languages de en --format json &amp;gt; transcripts.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Translating transcripts using the CLI is also possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; ... --languages en --translate de&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not sure which languages are available for a given video you can call, to list all available transcripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api --list-transcripts &amp;lt;first_video_id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a video&#39;s ID starts with a hyphen you&#39;ll have to mask the hyphen using &lt;code&gt;\&lt;/code&gt; to prevent the CLI from mistaking it for a argument name. For example to get the transcript for the video with the ID &lt;code&gt;-abc123&lt;/code&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &#34;\-abc123&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working around IP bans using the CLI&lt;/h3&gt; &#xA;&lt;p&gt;If you are running into &lt;code&gt;ReqestBlocked&lt;/code&gt; or &lt;code&gt;IpBlocked&lt;/code&gt; errors, because YouTube blocks your IP, you can work around this using residential proxies as explained in &lt;a href=&#34;https://raw.githubusercontent.com/jdepoix/youtube-transcript-api/master/#working-around-ip-bans-requestblocked-or-ipblocked-exception&#34;&gt;Working around IP bans&lt;/a&gt;. To use &lt;a href=&#34;https://www.webshare.io/?referral_code=w0xno53eb50g&#34;&gt;Webshare &#34;Residential&#34; proxies&lt;/a&gt; through the CLI, you will have to create a &lt;a href=&#34;https://www.webshare.io/?referral_code=w0xno53eb50g&#34;&gt;Webshare account&lt;/a&gt; and purchase a &#34;Residential&#34; proxy package that suits your workload (make sure NOT to purchase &#34;Proxy Server&#34; or &#34;Static Residential&#34;!). Then you can use the &#34;Proxy Username&#34; and &#34;Proxy Password&#34; which you can find in your &lt;a href=&#34;https://dashboard.webshare.io/proxy/settings?referral_code=w0xno53eb50g&#34;&gt;Webshare Proxy Settings&lt;/a&gt;, to run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; --webshare-proxy-username &#34;username&#34; --webshare-proxy-password &#34;password&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to use another proxy solution, you can set up a generic HTTP/HTTPS proxy using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; --http-proxy http://user:pass@domain:port --https-proxy https://user:pass@domain:port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cookie Authentication using the CLI&lt;/h3&gt; &#xA;&lt;p&gt;To authenticate using cookies through the CLI as explained in &lt;a href=&#34;https://raw.githubusercontent.com/jdepoix/youtube-transcript-api/master/#cookie-authentication&#34;&gt;Cookie Authentication&lt;/a&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;youtube_transcript_api &amp;lt;first_video_id&amp;gt; &amp;lt;second_video_id&amp;gt; --cookies /path/to/your/cookies.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;This code uses an undocumented part of the YouTube API, which is called by the YouTube web-client. So there is no guarantee that it won&#39;t stop working tomorrow, if they change how things work. I will however do my best to make things working again as soon as possible if that happens. So if it stops working, let me know!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To setup the project locally run the following (requires &lt;a href=&#34;https://python-poetry.org/docs/&#34;&gt;poetry&lt;/a&gt; to be installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry install --with test,dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s &lt;a href=&#34;https://github.com/nat-n/poethepoet?tab=readme-ov-file#quick-start&#34;&gt;poe&lt;/a&gt; tasks to run tests, coverage, the linter and formatter (you&#39;ll need to pass all of those for the build to pass):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poe test&#xA;poe coverage&#xA;poe format&#xA;poe lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you just want to make sure that your code passes all the necessary checks to get a green build, you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poe precommit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;If this project makes you happy by reducing your development time, you can make me happy by treating me to a cup of coffee, or become a &lt;a href=&#34;https://github.com/sponsors/jdepoix&#34;&gt;Sponsor of this project&lt;/a&gt; :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=BAENLEW8VUJ6G&amp;amp;source=url&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>