<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-30T01:29:53Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kent0n-Li/ChatDoctor</title>
    <updated>2023-03-30T01:29:53Z</updated>
    <id>tag:github.com,2023-03-30:/Kent0n-Li/ChatDoctor</id>
    <link href="https://github.com/Kent0n-Li/ChatDoctor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34; width=&#34;80%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Kent0n-Li/ChatDoctor/main/fig/logo.png&#34; style=&#34;width: 40%; min-width: 300px; display: block; margin: auto;&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://arxiv.org/abs/2303.14070&#34;&gt;ChatDoctor: A Medical Chat Model Fine-tuned on LLaMA Model using Medical Domain Knowledge&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Yunxiang Li&lt;sup&gt;1&lt;/sup&gt;, Zihan Li&lt;sup&gt;2&lt;/sup&gt;, Kai Zhang&lt;sup&gt;3&lt;/sup&gt;, Ruilong Dan&lt;sup&gt;4&lt;/sup&gt;, You Zhang&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h5&gt;1 University of Texas Southwestern Medical Center, Dallas, USA&lt;/h5&gt; &#xA;&lt;h5&gt;2 University of Illinois at Urbana-Champaign, Urbana, USA&lt;/h5&gt; &#xA;&lt;h5&gt;3 Ohio State University, Columbus, USA&lt;/h5&gt; &#xA;&lt;h5&gt;4 Hangzhou Dianzi University, Hangzhou, China&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HUANGLIZI/ChatDoctor/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-390/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.9+-blue.svg?sanitize=true&#34; alt=&#34;Python 3.9+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.yunxiangli.top/ChatDoctor/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Web-Page-yellow&#34; alt=&#34;Page&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources List&lt;/h2&gt; &#xA;&lt;p&gt;200k real conversations between patients and doctors from HealthCareMagic.com &lt;a href=&#34;https://drive.google.com/file/d/1lyfqIwlLSClhgrCutWuEe_IACNq6XNUt/view?usp=sharing&#34;&gt;HealthCareMagic-200k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;26k real conversations between patients and doctors from icliniq.com &lt;a href=&#34;https://drive.google.com/file/d/1ZKbqgYqWc7DJHs3N9TQYQVPdDQmZaClA/view?usp=sharing&#34;&gt;icliniq-26k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;5k generated conversations between patients and physicians from ChatGPT &lt;a href=&#34;https://drive.google.com/file/d/1nDTKZ3wZbZWTkFMBkxlamrzbNz0frugg/view?usp=sharing&#34;&gt;GenMedGPT-5k&lt;/a&gt; and &lt;a href=&#34;https://github.com/Kent0n-Li/ChatDoctor/raw/main/format_dataset.csv&#34;&gt;disease database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Checkpoints of ChatDoctor, fill this &lt;a href=&#34;https://forms.office.com/Pages/ResponsePage.aspx?id=lYZBnaxxMUy1ssGWyOw8ij06Cb8qnDJKvu2bVpV1-ANUMDIzWlU0QTUxN0YySFROQk9HMVU0N0xJNC4u&#34;&gt;form&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Online hugging face demo &lt;a href=&#34;https://forms.office.com/Pages/ResponsePage.aspx?id=lYZBnaxxMUy1ssGWyOw8ij06Cb8qnDJKvu2bVpV1-ANURUU0TllBWVVHUjQ1MDJUNldGTTZWV1c5UC4u&#34;&gt;application form&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stanford Alpaca data for basic conversational capabilities. &lt;a href=&#34;https://github.com/Kent0n-Li/ChatDoctor/raw/main/alpaca_data.json&#34;&gt;Alpaca link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup:&lt;/h2&gt; &#xA;&lt;p&gt;In a conda env with pytorch available, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive Demo Page:&lt;/h2&gt; &#xA;&lt;p&gt;Demo Page: &lt;a href=&#34;https://huggingface.co/spaces/ChatDoctor/ChatDoctor&#34;&gt;https://huggingface.co/spaces/ChatDoctor/ChatDoctor&lt;/a&gt; It is worth noting that our model has not yet achieved 100% accurate output, please do not apply it to real clinical scenarios.&lt;/p&gt; &#xA;&lt;p&gt;For those who want to try the online demo, please register for hugging face and fill out this form &lt;a href=&#34;https://forms.office.com/Pages/ResponsePage.aspx?id=lYZBnaxxMUy1ssGWyOw8ij06Cb8qnDJKvu2bVpV1-ANURUU0TllBWVVHUjQ1MDJUNldGTTZWV1c5UC4u&#34;&gt;link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Data and model:&lt;/h2&gt; &#xA;&lt;h3&gt;1. ChatDoctor Training Dataset:&lt;/h3&gt; &#xA;&lt;p&gt;You can download the following training dataset&lt;/p&gt; &#xA;&lt;p&gt;200k real conversations between patients and doctors from HealthCareMagic.com &lt;a href=&#34;https://drive.google.com/file/d/1lyfqIwlLSClhgrCutWuEe_IACNq6XNUt/view?usp=sharing&#34;&gt;HealthCareMagic-200k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;26k real conversations between patients and doctors from icliniq.com &lt;a href=&#34;https://drive.google.com/file/d/1ZKbqgYqWc7DJHs3N9TQYQVPdDQmZaClA/view?usp=sharing&#34;&gt;icliniq-26k&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;5k generated conversations between patients and physicians from ChatGPT &lt;a href=&#34;https://drive.google.com/file/d/1nDTKZ3wZbZWTkFMBkxlamrzbNz0frugg/view?usp=sharing&#34;&gt;GenMedGPT-5k&lt;/a&gt; and &lt;a href=&#34;https://github.com/Kent0n-Li/ChatDoctor/raw/main/format_dataset.csv&#34;&gt;disease database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our model was firstly be fine-tuned by Stanford Alpaca&#39;s data to have some basic conversational capabilities. &lt;a href=&#34;https://github.com/Kent0n-Li/ChatDoctor/raw/main/alpaca_data.json&#34;&gt;Alpaca link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Model Weights:&lt;/h3&gt; &#xA;&lt;p&gt;In order to download the checkpoints, fill this form: &lt;a href=&#34;https://forms.office.com/Pages/ResponsePage.aspx?id=lYZBnaxxMUy1ssGWyOw8ij06Cb8qnDJKvu2bVpV1-ANUMDIzWlU0QTUxN0YySFROQk9HMVU0N0xJNC4u&#34;&gt;link&lt;/a&gt;. Place the model weights file in the ./pretrained folder.&lt;/p&gt; &#xA;&lt;h2&gt;How to fine-tuning&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;torchrun --nproc_per_node=4 --master_port=&amp;lt;your_random_port&amp;gt; train.py \&#xA;   --model_name_or_path &amp;lt;your_path_to_hf_converted_llama_ckpt_and_tokenizer&amp;gt; \&#xA;   --data_path ./HealthCareMagic-200k.json \&#xA;   --bf16 True \&#xA;   --output_dir pretrained \&#xA;   --num_train_epochs 3 \&#xA;   --per_device_train_batch_size 4 \&#xA;   --per_device_eval_batch_size 4 \&#xA;   --gradient_accumulation_steps 8 \&#xA;   --evaluation_strategy &#34;no&#34; \&#xA;   --save_strategy &#34;steps&#34; \&#xA;   --save_steps 2000 \&#xA;   --save_total_limit 1 \&#xA;   --learning_rate 2e-5 \&#xA;   --weight_decay 0. \&#xA;   --warmup_ratio 0.03 \&#xA;   --lr_scheduler_type &#34;cosine&#34; \&#xA;   --logging_steps 1 \&#xA;   --fsdp &#34;full_shard auto_wrap&#34; \&#xA;   --fsdp_transformer_layer_cls_to_wrap &#39;LLaMADecoderLayer&#39; \&#xA;   --tf32 True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to inference&lt;/h2&gt; &#xA;&lt;p&gt;You can build a ChatDoctor model on your own machine and communicate with it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python chat.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ChatDoctor is a next-generation AI doctor model that is based on the &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;LLaMA&lt;/a&gt; model. The goal of this project is to provide patients with an intelligent and reliable healthcare companion that can answer their medical queries and provide them with personalized medical advice.&lt;/p&gt; &#xA;&lt;p&gt;The ChatDoctor is an advanced language model that is specifically designed for medical applications. It has been trained on a large corpus of medical literature and has a deep understanding of medical terminology, procedures, and diagnoses. This model serves as the foundation for ChatDoctor, enabling it to analyze patients&#39; symptoms and medical history, provide accurate diagnoses, and suggest appropriate treatment options.&lt;/p&gt; &#xA;&lt;p&gt;The ChatDoctor model is designed to simulate a conversation between a doctor and a patient, using natural language processing (NLP) and machine learning techniques. Patients can interact with the ChatDoctor model through a chat interface, asking questions about their health, symptoms, or medical conditions. The model will then analyze the input and provide a response that is tailored to the patient&#39;s unique situation.&lt;/p&gt; &#xA;&lt;p&gt;One of the key features of the ChatDoctor model is its ability to learn and adapt over time. As more patients interact with the model, it will continue to refine its responses and improve its accuracy. This means that patients can expect to receive increasingly personalized and accurate medical advice over time.&lt;/p&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;p&gt;Recent large language models (LLMs) in the general domain, such as ChatGPT, have shown remarkable success in following instructions and producing human-like responses. However, such language models have not been tailored to the medical domain, resulting in poor answer accuracy and inability to give plausible recommendations for medical diagnosis, medications, etc. To address this issue, we collected more than 700 diseases and their corresponding symptoms, required medical tests, and recommended medications, from which we generated 5K doctor-patient conversations. In addition, we obtained 200K real patient-doctor conversations from online Q&amp;amp;A medical consultation sites. By fine-tuning LLMs using these doctor-patient conversations, the resulting models emerge with great potential to understand patients&#39; needs, provide informed advice, and offer valuable assistance in a variety of medical-related fields. The integration of these advanced language models into healthcare can revolutionize the way healthcare professionals and patients communicate, ultimately improving the overall efficiency and quality of patient care and outcomes. In addition, we made public all the source codes, datasets, and model weights to facilitate the further development of dialogue models in the medical field.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The development of instruction-following large language models (LLMs) such as ChatGPT has garnered significant attention due to their remarkable success in instruction understanding and human-like response generation. These auto-regressive LLMs are pre-trained over web-scale natural languages by predicting the next token and then fine-tuned to follow large-scale human instructions. Also, they have shown strong performances over a wide range of NLP tasks and generalizations to unseen tasks, demonstrating their potential as a unified solution for various problems such as natural language understanding, text generation, and conversational AI. However, the exploration of such general-domain LLMs in the medical field remains relatively untapped, despite the immense potential they hold for transforming healthcare communication and decision-making. The specific reason is that the existing models do not learn the medical field in detail, resulting in the models often giving wrong diagnoses and wrong medical advice when playing the role of a doctor. By fine-tuning the large language dialogue model on the data of doctor-patient conversations, the application of the model in the medical field can be significantly improved. Especially in areas where medical resources are scarce, ChatDoctor can be used for initial diagnosis and triage of patients, significantly improving the operational efficiency of existing hospitals.&lt;/p&gt; &#xA;&lt;p&gt;Since large language models such as ChatGPT are in a non-open source state, we used Meta&#39;s LLaMA and first trained a generic conversation model using 52K instruction-following data provided by Stanford Alpaca, and then fine-tuned the model on our collected physician-patient conversation dataset. The main contributions of our method are three-fold:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We designed a process framework for fine-tuning large language models in the medical domain.&lt;/li&gt; &#xA; &lt;li&gt;We collected a dataset with 5,000 generated doctor-patient conversations and 200,000 real patient-doctor conversations for fine-tuning the large language model.&lt;/li&gt; &#xA; &lt;li&gt;We validate that the fine-tuned bigrams with medical domain knowledge have real potential for clinical application.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Physician and patient conversation dataset&lt;/h2&gt; &#xA;&lt;p&gt;The first step in building a physician-patient conversation dataset is to collect the disease database that serves as the gold standard. Therefore, we collected and organized a database of diseases, which contains about 700 diseases with their relative symptoms, medical tests, and recommended medications. To train high-quality conversation models on an academic budget, we input each message from the disease database separately as a prompt into the ChatGPT API to automatically generate instruction data. It is worth noting that our prompts to the ChatGPT API contain the gold standard of diseases and symptoms, and drugs, so our fine-tuned ChatDoctor is not only able to achieve ChatGPT&#39;s conversational fluency but also higher diagnostic accuracy compared to ChatGPT. We finally collected 5K doctor-patient conversation instructions and named it InstructorDoctor-5K.&lt;/p&gt; &#xA;&lt;p&gt;The generated conversations, while ensuring accuracy, have a low diversity of conversations. Therefore, we also collected about 200k real doctor-patient conversations from an online Q&amp;amp;A based medical advisory service website -- &#34;Health Care Magic.&#34; We manually and automatically filtered these data to remove physician and patient names and used language tools to correct grammatical errors in the responses.&lt;/p&gt; &#xA;&lt;h2&gt;Training of the model&lt;/h2&gt; &#xA;&lt;p&gt;We build ChatDoctor utilizing Meta&#39;s LLaMA model, a distinguished publicly accessible LLM. Notably, in spite of its 7 billion parameters, LLaMA has been reported that LLaMA&#39;s efficacy can attain competitive or superior outcomes in comparison to the considerably larger GPT-3 (with 175 billion parameters) on several NLP benchmarks. LLaMA&#39;s performance improvement was achieved by amplifying the magnitude of training data, as opposed to parameter quantity. Specifically, LLaMA was trained on 1.4 trillion tokens, procured from publicly accessible data repositories such as CommonCrawl and arXiv documents. We utilize conversation demonstrations synthesized via ChatGPT and subsequently validated by medical practitioners to fine-tune the LLaMA model, in accordance with the Stanford Alpaca training methodology, and our model was firstly be fine-tuned by Stanford Alpaca&#39;s data to have some basic conversational capabilities. The fine-tuning process was conducted using 6 A*100 GPUs for a duration of 30 minutes. The hyperparameters employed in the training process were as follows: the total batch size of 192, a learning rate of 2e-5, a total of 3 epochs, a maximum sequence length of 512 tokens, a warmup ratio of 0.03, with no weight decay.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;We emphasize that ChatDoctor is for academic research only and any commercial use and clinical use is prohibited. There are three factors in this decision: First, ChatDoctor is based on LLaMA and has a non-commercial license, so we necessarily inherited this decision. Second, our model is not licensed for healthcare-related purposes. Also, we have not designed sufficient security measures, and the current model still does not guarantee the full correctness of medical diagnoses.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;ChatDoctor: A Medical Chat Model Fine-tuned on LLaMA Model using Medical Domain Knowledge&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{yunxiang2023chatdoctor,&#xA;      title={ChatDoctor: A Medical Chat Model Fine-tuned on LLaMA Model using Medical Domain Knowledge}, &#xA;      author={Li Yunxiang and Li Zihan and Zhang Kai and Dan Ruilong and Zhang You},&#xA;      year={2023},&#xA;      eprint={2303.14070},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples:&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>getsentry/sentry</title>
    <updated>2023-03-30T01:29:53Z</updated>
    <id>tag:github.com,2023-03-30:/getsentry/sentry</id>
    <link href="https://github.com/getsentry/sentry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Developer-first error tracking and performance monitoring&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sentry.io/?utm_source=github&amp;amp;utm_medium=logo&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://sentry-brand.storage.googleapis.com/sentry-wordmark-dark-280x84.png&#34; alt=&#34;Sentry&#34; width=&#34;280&#34; height=&#34;84&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Users and logs provide clues. Sentry provides answers. &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s Sentry?&lt;/h1&gt; &#xA;&lt;p&gt;Sentry is a developer-first error tracking and performance monitoring platform that helps developers see what actually matters, solve quicker, and learn continuously about their applications.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/getsentry/sentry/raw/master/.github/screenshots/projects.png&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://github.com/getsentry/sentry/raw/master/.github/screenshots/issue-details.png&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://github.com/getsentry/sentry/raw/master/.github/screenshots/transaction-summary.png&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://github.com/getsentry/sentry/raw/master/.github/screenshots/releases.png&#34; width=&#34;270&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Official Sentry SDKs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-javascript&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-react-native&#34;&gt;React-Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-php&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-java&#34;&gt;Java/Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-cocoa&#34;&gt;Objective-C/Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-dotnet&#34;&gt;C#/F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-native&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-dart&#34;&gt;Dart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/perl-raven&#34;&gt;Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-clj/&#34;&gt;Clojure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-elixir&#34;&gt;Elixir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-unity&#34;&gt;Unity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-laravel&#34;&gt;Laravel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry-electron/&#34;&gt;Electron&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sentry.io/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.sentry.io/&#34;&gt;Community&lt;/a&gt; (Bugs, feature requests, general questions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/PXa5Apfe7K&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sentry.io/internal/contributing/&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry/issues&#34;&gt;Bug Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/sentry&#34;&gt;Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.transifex.com/getsentry/sentry/&#34;&gt;Transifex&lt;/a&gt; (Translate Sentry!)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>databrickslabs/dolly</title>
    <updated>2023-03-30T01:29:53Z</updated>
    <id>tag:github.com,2023-03-30:/databrickslabs/dolly</id>
    <link href="https://github.com/databrickslabs/dolly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Databricks’ Dolly, a large language model trained on the Databricks Machine Learning Platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dolly&lt;/h1&gt; &#xA;&lt;p&gt;Databricks’ Dolly, a large language model trained on the &lt;a href=&#34;https://www.databricks.com/product/machine-learning&#34;&gt;Databricks Machine Learning Platform&lt;/a&gt;, demonstrates that a two-years-old open source model (&lt;a href=&#34;https://huggingface.co/EleutherAI/gpt-j-6B&#34;&gt;GPT-J&lt;/a&gt;) can, when subjected to just 30 minutes of fine tuning on a focused corpus of 50k records (&lt;a href=&#34;https://crfm.stanford.edu/2023/03/13/alpaca.html&#34;&gt;Stanford Alpaca&lt;/a&gt;), exhibit surprisingly high quality instruction following behavior not characteristic of the foundation model on which it is based. We believe this finding is important because it demonstrates that the ability to create powerful artificial intelligence technologies is vastly more accessible than previously realized.&lt;/p&gt; &#xA;&lt;p&gt;Databricks is committed to ensuring that every organization and individual benefits from the transformative power of artificial intelligence. The Dolly model family represents our first steps along this journey, and we’re excited to share this technology with the world.&lt;/p&gt; &#xA;&lt;p&gt;Please note that while GPT-J 6B is &lt;a href=&#34;https://huggingface.co/EleutherAI/gpt-j-6B&#34;&gt;Apache 2.0 licensed&lt;/a&gt;, the Alpaca dataset is licensed under &lt;a href=&#34;https://huggingface.co/datasets/tatsu-lab/alpaca&#34;&gt;Creative Commons NonCommercial (CC BY-NC 4.0)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dolly is intended exclusively for research purposes and is not licensed for commercial use.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Model Overview&lt;/h2&gt; &#xA;&lt;p&gt;In the following passages we refer to &lt;code&gt;dolly-6b&lt;/code&gt;, the first in the Dolly family of models and the model that this repository presently implements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dolly-6b&lt;/code&gt; is a 6 billion parameter causal language model created by &lt;a href=&#34;https://databricks.com/&#34;&gt;Databricks&lt;/a&gt; that is derived from &lt;a href=&#34;https://www.eleuther.ai/&#34;&gt;EleutherAI’s&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/EleutherAI/gpt-j-6B&#34;&gt;GPT-J&lt;/a&gt; (released June 2021) and fine-tuned on a ~52K record instruction corpus (&lt;a href=&#34;https://crfm.stanford.edu/2023/03/13/alpaca.html&#34;&gt;Stanford Alpaca&lt;/a&gt;) consisting of question/answer pairs generated using the techniques outlined in the &lt;a href=&#34;https://arxiv.org/abs/2212.10560&#34;&gt;Self-Instruct&lt;/a&gt; paper. Dolly was trained using &lt;a href=&#34;https://github.com/microsoft/DeepSpeed&#34;&gt;deepspeed&lt;/a&gt; &lt;a href=&#34;https://github.com/microsoft/DeepSpeed/raw/master/docs/code-docs/source/zero3.rst&#34;&gt;ZeRO 3&lt;/a&gt; on the &lt;a href=&#34;https://www.databricks.com/product/machine-learning&#34;&gt;Databricks Machine Learning Platform&lt;/a&gt; in just 30 minutes using a single &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/virtual-machines/nda100-v4-series&#34;&gt;NDasrA100_v4&lt;/a&gt; machine with 8x A100 40GB GPUs.&lt;/p&gt; &#xA;&lt;p&gt;Like its base model, dolly-6b has six billion parameters consisting of 28 transformer layers with 16 attention heads each. It employs &lt;a href=&#34;https://arxiv.org/abs/2104.09864&#34;&gt;Rotary Position Embedding&lt;/a&gt; (RoPE) and shares the same tokenizer as GPT-3. GPT-J was trained on &lt;a href=&#34;https://huggingface.co/datasets/the_pile&#34;&gt;The Pile&lt;/a&gt;, a 400B token dataset of diverse documents designed primarily for text generation tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;dolly-6b&lt;/code&gt; is intended exclusively for research purposes and is not licensed for commercial use.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dolly-6b&lt;/code&gt; is not a state-of-the-art generative language model and, though quantitative benchmarking is ongoing, is not intended to perform competitively with more modern model architectures or models subject to larger pretraining corpuses. For example, we expect the &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;Alpaca model&lt;/a&gt;, derived from &lt;a href=&#34;https://ai.facebook.com/blog/large-language-model-llama-meta-ai/&#34;&gt;LLaMA-7B&lt;/a&gt; (trained on 1T tokens vs. The Pile&#39;s 400B &amp;amp; with years of scientific advances behind it), to be superior in its generative quality relative to Dolly. What&#39;s most notable about Dolly is the degree of its instruction following capabilities given that it&#39;s based on a freely available open source model anyone can download and use.&lt;/p&gt; &#xA;&lt;p&gt;The Dolly model family is under active development, and so any list of shortcomings is unlikely to be exhaustive, but we include known limitations and misfires here as a means to document and share our preliminary findings with the community. In particular, &lt;code&gt;dolly-6b&lt;/code&gt; struggles with syntactically complex prompts, mathematical operations, factual errors, dates and times, open-ended question answering, hallucination, enumerating lists of specific length, and stylistic mimicry.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started Training&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;dolly&lt;/code&gt; repo to Databricks (under Repos click Add Repo, enter &lt;code&gt;https://github.com/databrickslabs/dolly.git&lt;/code&gt;, then click Create Repo).&lt;/li&gt; &#xA; &lt;li&gt;Start a &lt;code&gt;12.2 LTS ML (includes Apache Spark 3.3.2, GPU, Scala 2.12)&lt;/code&gt; single-node cluster with node type having 8 A100 GPUs (e.g. &lt;code&gt;Standard_ND96asr_v4&lt;/code&gt; or &lt;code&gt;p4d.24xlarge&lt;/code&gt;). Note that these instance types may not be available in all regions, or may be difficult to provision. In Databricks, note that you must select the GPU runtime first, and unselect &#34;Use Photon&#34;, for these instance types to appear (where supported).&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;train_dolly&lt;/code&gt; notebook in the Repo (which is the &lt;code&gt;train_dolly.py&lt;/code&gt; file in the Github &lt;code&gt;dolly&lt;/code&gt; repo), attach to your GPU cluster, and run all cells. When training finishes, the notebook will save the model under &lt;code&gt;/dbfs/dolly_training&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Training on Other Instances&lt;/h2&gt; &#xA;&lt;p&gt;A100 instance types are not available in all cloud regions, or can be hard to provision. Training is possible on other GPU instance types, with small modifications to reduce memory usage. Training will take longer on these instances. These modifications are not necessarily optimal, but are simple to make.&lt;/p&gt; &#xA;&lt;h3&gt;A10 GPUs&lt;/h3&gt; &#xA;&lt;p&gt;To run on A10 instances (ex: &lt;code&gt;g5.24xlarge&lt;/code&gt;, 4 x A10 24GB; &lt;code&gt;Standard_NV72ads_A10_v5&lt;/code&gt;, 2 x A10), make the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify the deepspeed config file &lt;code&gt;ds_z3_bf16_config.json&lt;/code&gt; to configure optimizer offload. Within the &lt;code&gt;&#34;zero_optimization&#34;&lt;/code&gt; section, add: &lt;pre&gt;&lt;code&gt;&#34;offload_optimizer&#34;: {&#xA;  &#34;device&#34;: &#34;cpu&#34;,&#xA;  &#34;pin_memory&#34;: true&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;num_gpus&lt;/code&gt; widget in &lt;code&gt;train_dolly&lt;/code&gt; to the number of GPUs in your instance, such as 2 or 4, before running&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With 4 A10s, an epoch completes in about 7 hours.&lt;/p&gt; &#xA;&lt;h3&gt;V100 GPUs&lt;/h3&gt; &#xA;&lt;p&gt;To run on V100 instances with 32GB of GPU memory (ex: &lt;code&gt;p3dn.24xlarge&lt;/code&gt; or &lt;code&gt;Standard_ND40rs_v2&lt;/code&gt;), make the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify the deepspeed config to enable optimizer offload, as above&lt;/li&gt; &#xA; &lt;li&gt;Modify &lt;code&gt;trainer.py&lt;/code&gt; to disable &lt;code&gt;bf16&lt;/code&gt; and enable &lt;code&gt;fp16&lt;/code&gt; in &lt;code&gt;TrainingArguments&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;...&#xA;fp16=True,&#xA;bf16=False,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;num_gpus&lt;/code&gt; widget in &lt;code&gt;train_dolly&lt;/code&gt; to the number of GPUs in your instance, typically 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With 8 V100s, an epoch completes in about 3.5 hours. Note that the resulting model may be slightly different when trained with &lt;code&gt;fp16&lt;/code&gt; versus &lt;code&gt;bf16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running Unit Tests Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv local 3.8.13&#xA;python -m venv .venv&#xA;. .venv/bin/activate&#xA;pip install -r requirements_dev.txt&#xA;./run_pytest.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>