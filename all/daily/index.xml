<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-27T01:28:31Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anti-work/shortest</title>
    <updated>2024-12-27T01:28:31Z</updated>
    <id>tag:github.com,2024-12-27:/anti-work/shortest</id>
    <link href="https://github.com/anti-work/shortest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QA via natural language AI tests&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/57d23950-206b-4640-a649-66a175660ade&#34; alt=&#34;Shortest Logo&#34; width=&#34;128&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Shortest&lt;/h1&gt; &#xA;&lt;p&gt;AI-powered natural language end-to-end testing framework.&lt;/p&gt; &#xA;&lt;video src=&#34;https://github.com/user-attachments/assets/d443279e-7364-452b-9f50-0c8dd0cf55fc&#34; controls autoplay loop muted&gt;&#xA;  Your browser does not support the video tag. &#xA;&lt;/video&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Natural language E2E testing framework&lt;/li&gt; &#xA; &lt;li&gt;AI-powered test execution using Anthropic Claude API&lt;/li&gt; &#xA; &lt;li&gt;Built on Playwright&lt;/li&gt; &#xA; &lt;li&gt;GitHub integration with 2FA support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -D @antiwork/shortest&#xA;# or&#xA;pnpm add -D @antiwork/shortest&#xA;# or&#xA;yarn add -D @antiwork/shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;.shortest/&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; (where Shortest stores screenshots of each test run):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;.shortest/&#34; &amp;gt;&amp;gt; .gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;If you installed shortest without &lt;code&gt;-g&lt;/code&gt; flag, you can run tests as follows:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx shortest    # for npm&#xA;pnpm shortest   # for pnpm&#xA;yarn shortest   # for yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Determine your test entry and add your Anthropic API key in config file: &lt;code&gt;shortest.config.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import type { ShortestConfig } from &#39;@antiwork/shortest&#39;;&#xA;&#xA;export default {&#xA;  headless: false,&#xA;  baseUrl: &#39;http://localhost:3000&#39;,&#xA;  testDir: &#39;app/__tests__&#39;,&#xA;  anthropicKey: process.env.ANTHROPIC_API_KEY&#xA;} satisfies ShortestConfig; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Write your test in your test directory: &lt;code&gt;app/__tests__/login.test.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#39;@antiwork/shortest&#39;&#xA;&#xA;shortest(&#39;Login to the app using email and password&#39;, { username: process.env.GITHUB_USERNAME, password: process.env.GITHUB_PASSWORD })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using callback functions&lt;/h2&gt; &#xA;&lt;p&gt;You can also use callback functions to add additional assertions and other logic. AI will execute the callback function after the test execution in browser is completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#39;@antiwork/shortest&#39;;&#xA;import { db } from &#39;@/lib/db/drizzle&#39;;&#xA;import { users } from &#39;@/lib/db/schema&#39;;&#xA;import { eq } from &#39;drizzle-orm&#39;;&#xA;&#xA;shortest(&#39;Login to the app using username and password&#39;, {&#xA;  username: process.env.USERNAME,&#xA;  password: process.env.PASSWORD&#xA;}).after(async ({ page }) =&amp;gt; {    &#xA;  // Get current user&#39;s clerk ID from the page&#xA;  const clerkId = await page.evaluate(() =&amp;gt; {&#xA;    return window.localStorage.getItem(&#39;clerk-user&#39;);&#xA;  }); &#xA;&#xA;  if (!clerkId) {&#xA;    throw new Error(&#39;User not found in database&#39;);&#xA;  }&#xA;&#xA;  // Query the database&#xA;  const [user] = await db&#xA;    .select()&#xA;    .from(users)&#xA;    .where(eq(users.clerkId, clerkId))&#xA;    .limit(1);&#xA;&#xA;  expect(user).toBeDefined();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lifecycle hooks&lt;/h2&gt; &#xA;&lt;p&gt;You can use lifecycle hooks to run code before and after the test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { shortest } from &#39;@antiwork/shortest&#39;;&#xA;&#xA;shortest.beforeAll(async ({ page }) =&amp;gt; {&#xA;  await clerkSetup({&#xA;    frontendApiUrl: process.env.PLAYWRIGHT_TEST_BASE_URL ?? &#34;http://localhost:3000&#34;,&#xA;  });&#xA;});&#xA;&#xA;shortest.beforeEach(async ({ page }) =&amp;gt; {&#xA;  await clerk.signIn({&#xA;    page,&#xA;    signInParams: { &#xA;      strategy: &#34;email_code&#34;, &#xA;      identifier: &#34;iffy+clerk_test@example.com&#34; &#xA;    },&#xA;  });&#xA;});&#xA;&#xA;shortest.afterEach(async ({ page }) =&amp;gt; {&#xA;  await page.close();&#xA;});&#xA;&#xA;shortest.afterAll(async ({ page }) =&amp;gt; {&#xA;  await clerk.signOut({ page });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shortest                    # Run all tests&#xA;shortest login.test.ts     # Run specific test&#xA;shortest --headless        # Run in headless mode using cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you&#39;re done!&lt;/p&gt; &#xA;&lt;h2&gt;GitHub 2FA Login Setup&lt;/h2&gt; &#xA;&lt;p&gt;Shortest currently supports login using Github 2FA. For GitHub authentication tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to your repository settings&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &#34;Password and Authentication&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Authenticator App&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Use your authenticator app&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Setup key&#34; to obtain the OTP secret&lt;/li&gt; &#xA; &lt;li&gt;Add the OTP secret to your &lt;code&gt;.env.local&lt;/code&gt; file or use the Shortest CLI to add it&lt;/li&gt; &#xA; &lt;li&gt;Enter the 2FA code displayed in your terminal into Github&#39;s Authenticator setup page to complete the process&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shortest --github-code --secret=&amp;lt;OTP_SECRET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;p&gt;Required in &lt;code&gt;.env.local&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ANTHROPIC_API_KEY=your_api_key&#xA;GITHUB_TOTP_SECRET=your_secret  # Only for GitHub auth tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CI Setup&lt;/h2&gt; &#xA;&lt;p&gt;You can run shortest in your CI/CD pipeline by running tests in headless mode. Make sure to add your Anthropic API key to your CI/CD pipeline secrets.&lt;/p&gt; &#xA;&lt;h1&gt;Local Development Setup Guide&lt;/h1&gt; &#xA;&lt;p&gt;This guide will help you set up the Shortest web app for local development.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React &amp;gt;=19.0.0 (if using with Next.js 14+ or Server Actions)&lt;/li&gt; &#xA; &lt;li&gt;Next.js &amp;gt;=14.0.0 (if using Server Components/Actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Known Issues&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using this package with React 18 in Next.js 14+ projects may cause type conflicts with Server Actions and &lt;code&gt;useFormStatus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you encounter type errors with form actions or React hooks, ensure you&#39;re using React 19&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/anti-work/shortest.git&#xA;cd shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g pnpm&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;For Gumroad Vercel Team Members:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;vercel env pull&lt;/code&gt; to get the latest environment variables&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/docs/deployments/local-env#environment-variables-for-local-development&#34;&gt;https://vercel.com/docs/deployments/local-env#environment-variables-for-local-development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;For Other Contributors:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pnpm run setup&lt;/code&gt; to configure the environment variables.&lt;/li&gt; &#xA; &lt;li&gt;The setup wizard will ask you for information. Refer to &#34;Services Configuration&#34; section below for more details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Set up the database:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm drizzle-kit generate&#xA;pnpm db:migrate&#xA;pnpm db:seed # creates stripe products, currently unused&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Services Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to set up the following services for local development. If you&#39;re not a Gumroad Vercel team member, you&#39;ll need to either run the setup wizard &lt;code&gt;pnpm run setup&lt;/code&gt; or manually configure each of these services and add the corresponding environment variables to your &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Clerk&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to &lt;a href=&#34;https://clerk.com&#34;&gt;clerk.com&lt;/a&gt; and create a new app.&lt;/li&gt; &#xA;  &lt;li&gt;Name it whatever you like and &lt;strong&gt;disable all login methods except GitHub&lt;/strong&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/1de7aebc-8e9d-431a-ae13-af60635307a1&#34; alt=&#34;Clerk App Login&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Once created, copy the environment variables to your &lt;code&gt;.env.local&lt;/code&gt; file. &lt;img src=&#34;https://github.com/user-attachments/assets/df3381e6-017a-4e01-8bd3-5793e5f5d31e&#34; alt=&#34;Clerk Env Variables&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Vercel Postgres&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your dashboard at &lt;a href=&#34;https://vercel.com&#34;&gt;vercel.com&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Navigate to the Storage tab and click the &lt;code&gt;Create Database&lt;/code&gt; button. &lt;img src=&#34;https://github.com/user-attachments/assets/acdf3ba7-31a6-498b-860c-171018d5ba02&#34; alt=&#34;Vercel Create Database&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Choose &lt;code&gt;Postgres&lt;/code&gt; from the &lt;code&gt;Browse Storage&lt;/code&gt; menu. &lt;img src=&#34;https://github.com/user-attachments/assets/9ad2a391-5213-4f31-a6c3-b9e54c69bb2e&#34; alt=&#34;Neon Postgres&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Copy your environment variables from the &lt;code&gt;Quickstart&lt;/code&gt; &lt;code&gt;.env.local&lt;/code&gt; tab. &lt;img src=&#34;https://github.com/user-attachments/assets/e48f1d96-2fd6-4e2e-aaa6-eeb5922cc521&#34; alt=&#34;Vercel Postgres .env.local&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Anthropic&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your dashboard at &lt;a href=&#34;https://anthropic.com&#34;&gt;anthropic.com&lt;/a&gt; and grab your API Key. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Note: If you&#39;ve never done this before, you will need to answer some questions and likely load your account with a balance. Not much is needed to test the app. &lt;img src=&#34;https://github.com/user-attachments/assets/0905ed4b-5815-4d50-bf43-8713a4397674&#34; alt=&#34;Anthropic API Key&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Stripe&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to your &lt;code&gt;Developers&lt;/code&gt; dashboard at &lt;a href=&#34;https://stripe.com&#34;&gt;stripe.com&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Turn on &lt;code&gt;Test mode&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Go to the &lt;code&gt;API Keys&lt;/code&gt; tab and copy your &lt;code&gt;Secret key&lt;/code&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/0830b226-f2c2-4b92-a28f-f4682ad03ec0&#34; alt=&#34;Stripe Secret Key&#34;&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Go to the terminal of your project and type &lt;code&gt;pnpm run stripe:webhooks&lt;/code&gt;. It will prompt you to login with a code then give you your &lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt;. &lt;img src=&#34;https://github.com/user-attachments/assets/b02531ed-5c31-40ba-8483-32880aa3ca36&#34; alt=&#34;Stripe Webhook Secret&#34;&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GitHub OAuth&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a GitHub OAuth App:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Go to your GitHub account settings.&lt;/li&gt; &#xA;    &lt;li&gt;Navigate to &lt;code&gt;Developer settings&lt;/code&gt; &amp;gt; &lt;code&gt;OAuth Apps&lt;/code&gt; &amp;gt; &lt;code&gt;New OAuth App&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;Fill in the application details: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Application name&lt;/strong&gt;: Choose any name for your app&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Homepage URL&lt;/strong&gt;: Set to &lt;code&gt;http://localhost:3000&lt;/code&gt; for local development&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Authorization callback URL&lt;/strong&gt;: Use the Clerk-provided callback URL (found in below image) &lt;img src=&#34;https://github.com/user-attachments/assets/1af635fd-dedc-401c-a45a-159cb20bb209&#34; alt=&#34;Github OAuth App&#34;&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Configure Clerk with GitHub OAuth:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Go to your Clerk dashboard.&lt;/li&gt; &#xA;    &lt;li&gt;Navigate to &lt;code&gt;Configure&lt;/code&gt; &amp;gt; &lt;code&gt;SSO Connections&lt;/code&gt; &amp;gt; &lt;code&gt;GitHub&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;Select &lt;code&gt;Use custom credentials&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Enter your &lt;code&gt;Client ID&lt;/code&gt; and &lt;code&gt;Client Secret&lt;/code&gt; from the GitHub OAuth app you just created.&lt;/li&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;repo&lt;/code&gt; to the &lt;code&gt;Scopes&lt;/code&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/31d414e1-4e1e-4725-8649-ec1826c6e53e&#34; alt=&#34;Clerk Custom Credentials&#34;&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Running the Application&lt;/h3&gt; &#xA;&lt;p&gt;Once you have set up the environment variables and installed dependencies, run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to see the app in action.&lt;/p&gt; &#xA;&lt;h2&gt;Building Shortest Package Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm build:pkg&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Shortest CLI for local development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# packages/shortest&#xA;cd packages/shortest&#xA;pnpm link --global&#xA;&#xA;# root&#xA;cd ../..&#xA;pnpm link --global shortest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Cli Locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a temporary test directory outside your project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/shortest-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Pack shortest package locally:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /packages/shortest&#xA;pnpm pack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install the packed tarball in your test directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/test-cli&#xA;npm init -y&#xA;npm install ../packages/shortest/antiwork-shortest-{version}.tgz&#xA;# or to run globally&#xA;npm install -g ../packages/shortest/antiwork-shortest-{version}.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Try cli&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx shortest -h&#xA;# or&#xA;./node_modules/.bin/shortest -h&#xA;# or if you have installed shortest globally&#xA;shortest -h&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apache/echarts</title>
    <updated>2024-12-27T01:28:31Z</updated>
    <id>tag:github.com,2024-12-27:/apache/echarts</id>
    <link href="https://github.com/apache/echarts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache ECharts is a powerful, interactive charting and data visualization library for browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache ECharts&lt;/h1&gt; &#xA;&lt;a href=&#34;https://echarts.apache.org/&#34;&gt; &lt;img style=&#34;vertical-align: top;&#34; src=&#34;https://raw.githubusercontent.com/apache/echarts/master/asset/logo.png?raw=true&#34; alt=&#34;logo&#34; height=&#34;50px&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Apache ECharts is a free, powerful charting and visualization library offering easy ways to add intuitive, interactive, and highly customizable charts to your commercial products. It is written in pure JavaScript and based on &lt;a href=&#34;https://github.com/ecomfe/zrender&#34;&gt;zrender&lt;/a&gt;, which is a whole new lightweight canvas library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://echarts.apache.org/zh/index.html&#34;&gt;中文官网&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://echarts.apache.org/en/index.html&#34;&gt;ENGLISH HOMEPAGE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/echarts/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/echarts?color=5470c6&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/echarts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/echarts?color=91cc75&#34; alt=&#34;Latest npm release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/echarts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/echarts.svg?label=npm%20downloads&amp;amp;style=flat&amp;amp;color=fac858&#34; alt=&#34;NPM downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/echarts/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/apache/echarts?color=3ba272&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/echarts/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/echarts/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get Apache ECharts&lt;/h2&gt; &#xA;&lt;p&gt;You may choose one of the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download from the &lt;a href=&#34;https://echarts.apache.org/download.html&#34;&gt;official website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install echarts --save&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CDN: &lt;a href=&#34;https://www.jsdelivr.com/package/npm/echarts?path=dist&#34;&gt;jsDelivr CDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://echarts.apache.org/handbook&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://echarts.apache.org/api.html&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://echarts.apache.org/option.html&#34;&gt;Option Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://echarts.apache.org/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/echarts/issues&#34;&gt;GitHub Issues&lt;/a&gt; for bug report and feature requests&lt;/li&gt; &#xA; &lt;li&gt;Email &lt;a href=&#34;mailto:dev@echarts.apache.org&#34;&gt;dev@echarts.apache.org&lt;/a&gt; for general questions&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to the &lt;a href=&#34;https://echarts.apache.org/maillist.html&#34;&gt;mailing list&lt;/a&gt; to get updated with the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Build echarts source code:&lt;/p&gt; &#xA;&lt;p&gt;Execute the instructions in the root directory of the echarts: (&lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; is required)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install the dependencies from NPM:&#xA;npm install&#xA;&#xA;# Rebuild source code immediately in watch mode when changing the source code.&#xA;# It opens the `./test` directory, and you may open `-cases.html` to get the list&#xA;# of all test cases.&#xA;# If you wish to create a test case, run `npm run mktest:help` to learn more.&#xA;npm run dev&#xA;&#xA;# Check the correctness of TypeScript code.&#xA;npm run checktype&#xA;&#xA;# If intending to build and get all types of the &#34;production&#34; files:&#xA;npm run release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then the &#34;production&#34; files are generated in the &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/apache/echarts/raw/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; document if you wish to debug locally or make pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Awesome ECharts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ecomfe/awesome-echarts&#34;&gt;https://github.com/ecomfe/awesome-echarts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ecomfe/echarts-gl&#34;&gt;ECharts GL&lt;/a&gt; An extension pack of ECharts, which provides 3D plots, globe visualization, and WebGL acceleration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ecomfe/echarts-liquidfill&#34;&gt;Liquidfill 水球图&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ecomfe/echarts-wordcloud&#34;&gt;Wordcloud 字符云&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/apache/echarts/tree/master/extension-src/bmap&#34;&gt;Extension for Baidu Map 百度地图扩展&lt;/a&gt; An extension provides a wrapper of Baidu Map Service SDK.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ecomfe/vue-echarts&#34;&gt;vue-echarts&lt;/a&gt; ECharts component for Vue.js&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ecomfe/echarts-stat&#34;&gt;echarts-stat&lt;/a&gt; Statistics tool for ECharts&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ECharts is available under the Apache License V2.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://www.apache.org/foundation/policies/conduct.html&#34;&gt;Apache Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Paper&lt;/h2&gt; &#xA;&lt;p&gt;Deqing Li, Honghui Mei, Yi Shen, Shuang Su, Wenli Zhang, Junting Wang, Ming Zu, Wei Chen. &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S2468502X18300068&#34;&gt;ECharts: A Declarative Framework for Rapid Construction of Web-based Visualization&lt;/a&gt;. Visual Informatics, 2018.&lt;/p&gt;</summary>
  </entry>
</feed>