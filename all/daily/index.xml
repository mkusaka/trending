<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-09T01:23:44Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jbellis/jvector</title>
    <updated>2023-10-09T01:23:44Z</updated>
    <id>tag:github.com,2023-10-09:/jbellis/jvector</id>
    <link href="https://github.com/jbellis/jvector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JVector: the most advanced embedded vector search engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JVector&lt;/h1&gt; &#xA;&lt;p&gt;JVector is a pure Java embedded vector search engine, used by &lt;a href=&#34;https://www.datastax.com/products/datastax-astra&#34;&gt;DataStax Astra DB&lt;/a&gt; and (soon) Apache Cassandra.&lt;/p&gt; &#xA;&lt;p&gt;What is JVector?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Algorithmic-fast. JVector uses state of the art graph algorithms inspired by DiskANN and related research that offer high recall and low latency.&lt;/li&gt; &#xA; &lt;li&gt;Implementation-fast. JVector uses the Panama SIMD API to accelerate index build and queries.&lt;/li&gt; &#xA; &lt;li&gt;Memory efficient. JVector compresses vectors using product quantization so they can stay in memory during searches. (As part of our PQ implementation, our SIMD-accelerated kmeans class is 5x faster than the one in Apache Commons Math.)&lt;/li&gt; &#xA; &lt;li&gt;Disk-aware. JVectorâ€™s disk layout is designed to do the minimum necessary iops at query time.&lt;/li&gt; &#xA; &lt;li&gt;Concurrent. Index builds scale linearly to at least 32 threads. Double the threads, half the build time.&lt;/li&gt; &#xA; &lt;li&gt;Incremental. Query your index as you build it. No delay between adding a vector and being able to find it in search results.&lt;/li&gt; &#xA; &lt;li&gt;Easy to embed. API designed for easy embedding, by people using it in production.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;JVector performance, visualized&lt;/h2&gt; &#xA;&lt;p&gt;JVector vs Lucene searching the Deep100M dataset (about 35GB of vectors and 25GB index): &lt;img src=&#34;https://github.com/jbellis/jvector/assets/42158/7710f33d-ff6a-4282-9e31-4a5eaacd796f&#34; alt=&#34;Screenshot from 2023-09-29 16-39-33&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;JVector scales updates linearly to at least 32 threads: &lt;img src=&#34;https://github.com/jbellis/jvector/assets/42158/f0127bfc-6c45-48b9-96ea-95b2120da0d9&#34; alt=&#34;Screenshot from 2023-09-14 18-05-15&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;JVector basics&lt;/h2&gt; &#xA;&lt;p&gt;Adding to your project. Replace &lt;code&gt;${latest-version}&lt;/code&gt; with &lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.jbellis/jvector?color=green&#34; alt=&#34;Maven Central&#34;&gt;. Example &lt;code&gt;&amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;        &#xA;    &amp;lt;groupId&amp;gt;io.github.jbellis&amp;lt;/groupId&amp;gt;          &#xA;    &amp;lt;artifactId&amp;gt;jvector&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;!-- Use the latest version from https://central.sonatype.com/artifact/io.github.jbellis/jvector --&amp;gt;&#xA;    &amp;lt;version&amp;gt;${latest-version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the index:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/GraphIndexBuilder.java&#34;&gt;&lt;code&gt;GraphIndexBuilder&lt;/code&gt;&lt;/a&gt; is the entry point for building a graph. You will need to implement &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/RandomAccessVectorValues.java&#34;&gt;&lt;code&gt;RandomAccessVectorValues&lt;/code&gt;&lt;/a&gt; to provide vectors to the builder; &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/ListRandomAccessVectorValues.java&#34;&gt;&lt;code&gt;ListRandomAccessVectorValues&lt;/code&gt;&lt;/a&gt; is a good starting point.&lt;/li&gt; &#xA; &lt;li&gt;If all your vectors are in the provider up front, you can just call &lt;code&gt;build()&lt;/code&gt; and it will parallelize the build across all available cores. Otherwise you can call &lt;code&gt;addGraphNode&lt;/code&gt; as you add vectors; this is non-blocking and can be called concurrently from multiple threads.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;GraphIndexBuilder.complete&lt;/code&gt; when you are done adding vectors. This will optimize the index and make it ready to write to disk. (Graphs that are in the process of being built can be searched at any time; you do not have to call &lt;em&gt;complete&lt;/em&gt; first.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Searching the index:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/GraphSearcher.java&#34;&gt;&lt;code&gt;GraphSearcher&lt;/code&gt;&lt;/a&gt; is the entry point for searching. Results come back as a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/SearchResult.java&#34;&gt;&lt;code&gt;SearchResult&lt;/code&gt;&lt;/a&gt; object that contains node IDs and scores, in descending order of similarity to the query vector. &lt;code&gt;GraphSearcher&lt;/code&gt; objects are re-usable, so unless you have a very simple use case you should use &lt;code&gt;GraphSearcher.Builder&lt;/code&gt; to create them; &lt;code&gt;GraphSearcher::search&lt;/code&gt; is also available with simple defaults, but calling it will instantiate a new &lt;code&gt;GraphSearcher&lt;/code&gt; every time so performance will be worse.&lt;/li&gt; &#xA; &lt;li&gt;JVector represents vectors in the index as the ordinal (int) corresponding to their index in the &lt;code&gt;RandomAccessVectorValues&lt;/code&gt; you provided. You can get the original vector back with &lt;code&gt;GraphIndex.getVector&lt;/code&gt;, if necessary, but since this is a disk-backed index you should design your application to avoid doing so if possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DiskANN and Product Quantization&lt;/h2&gt; &#xA;&lt;p&gt;JVector implements &lt;a href=&#34;https://suhasjs.github.io/files/diskann_neurips19.pdf&#34;&gt;DiskANN&lt;/a&gt;-style search, meaning that vectors can be compressed using product quantization so that searches can be performed using the compressed representation that is kept in memory. You can enable this with the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/pq/ProductQuantization.java&#34;&gt;&lt;code&gt;ProductQuantization&lt;/code&gt;&lt;/a&gt; object with your vectors using &lt;code&gt;ProductQuantization.compute&lt;/code&gt;. This will take some time to compute the codebooks.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ProductQuantization::encode&lt;/code&gt; or &lt;code&gt;encodeAll&lt;/code&gt; to encode your vectors.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/CompressedVectors.java&#34;&gt;&lt;code&gt;CompressedVectors&lt;/code&gt;&lt;/a&gt; object from the encoded vectors.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/graph/NeighborSimilarity.java&#34;&gt;&lt;code&gt;NeighborSimilarity.ApproximateScoreFunction&lt;/code&gt;&lt;/a&gt; for your query that uses the &lt;code&gt;ProductQuantization&lt;/code&gt; object and &lt;code&gt;CompressedVectors&lt;/code&gt; to compute scores, and pass this to the &lt;code&gt;GraphSearcher.search&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Saving and loading indexes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/OnDiskGraphIndex.java&#34;&gt;&lt;code&gt;OnDiskGraphIndex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/CompressedVectors.java&#34;&gt;&lt;code&gt;CompressedVectors&lt;/code&gt;&lt;/a&gt; have &lt;code&gt;write()&lt;/code&gt; methods to save state to disk. They initialize from disk using their constructor and &lt;code&gt;load()&lt;/code&gt; methods, respectively. Writing just requires a DataOutput, but reading requires an implementation of &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/RandomAccessReader.java&#34;&gt;&lt;code&gt;RandomAccessReader&lt;/code&gt;&lt;/a&gt; and the related &lt;code&gt;ReaderSupplier&lt;/code&gt; to wrap your preferred i/o class for best performance. See &lt;code&gt;SimpleMappedReader&lt;/code&gt; and &lt;code&gt;SimpleMappedReaderSupplier&lt;/code&gt; for an example.&lt;/li&gt; &#xA; &lt;li&gt;Building a graph does not technically require your RandomAccessVectorValues object to live in memory, but it will perform much better if it does. OnDiskGraphIndex, by contrast, is designed to live on disk and use minimal memory otherwise.&lt;/li&gt; &#xA; &lt;li&gt;You can optionally wrap &lt;code&gt;OnDiskGraphIndex&lt;/code&gt; in a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/disk/CachingGraphIndex.java&#34;&gt;&lt;code&gt;CachingGraphIndex&lt;/code&gt;&lt;/a&gt; to keep the most commonly accessed nodes (the ones nearest to the graph entry point) in memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JVector heavily utilizes the Panama Vector API(SIMD) for ANN indexing and search. We have seen cases where the memory bandwidth is saturated during indexing and product quantization and can cause the process to slow down. To avoid this, index and PQ builds use a &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base/src/main/java/io/github/jbellis/jvector/util/PhysicalCoreExecutor.java&#34;&gt;&lt;code&gt;PhysicalCoreExecutor&lt;/code&gt;&lt;/a&gt; to limit the amount of operations to the physical core count. The default value is 1/2 the processor count seen by Java. This may not be correct in all setups (e.g. no hyperthreading or hybrid architectures) so if you wish to override the default use the &lt;code&gt;-Djvector.physical_core_count&lt;/code&gt; property.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-examples/src/main/java/io/github/jbellis/jvector/example/SiftSmall.java&#34;&gt;&lt;code&gt;SiftSmall&lt;/code&gt;&lt;/a&gt; class demonstrates how to put all of the above together to index and search the &#34;small&#34; SIFT dataset of 10,000 vectors.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-examples/src/main/java/io/github/jbellis/jvector/example/Bench.java&#34;&gt;&lt;code&gt;Bench&lt;/code&gt;&lt;/a&gt; class performs grid search across the &lt;code&gt;GraphIndexBuilder&lt;/code&gt; parameter space to find the best tradeoffs between recall and throughput. You can use &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/plot_output.py&#34;&gt;&lt;code&gt;plot_output.py&lt;/code&gt;&lt;/a&gt; to graph the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pareto_efficiency&#34;&gt;pareto-optimal points&lt;/a&gt; found by &lt;code&gt;Bench&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some sample KNN datasets for testing based on ada-002 embeddings generated on wikipedia data are available in ivec/fvec format for testing at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aws s3 ls s3://astra-vector/wikipedia/ --no-sign-request &#xA;                           PRE 100k/&#xA;                           PRE 1M/&#xA;                           PRE 4M/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;download them with the aws s3 cli as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aws s3 sync s3://astra-vector/wikipedia/100k ./ --no-sign-request&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing and Testing&lt;/h2&gt; &#xA;&lt;p&gt;This project is organized as a &lt;a href=&#34;https://maven.apache.org/guides/mini/guide-multiple-modules.html&#34;&gt;multimodule Maven build&lt;/a&gt;. The intent is to produce a multirelease jar suitable for use as a dependency from any Java 11 code. When run on a Java 20+ JVM with the Vector module enabled, optimized vector providers will be used. In general, the project is structured to be built with JDK 20+, but when &lt;code&gt;JAVA_HOME&lt;/code&gt; is set to Java 11 -&amp;gt; Java 19, certain build features will still be available.&lt;/p&gt; &#xA;&lt;p&gt;Base code is in &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base&#34;&gt;jvector-base&lt;/a&gt; and will be built for Java 11 releases, restricting language features and APIs appropriately. Code in &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-twenty&#34;&gt;jvector-twenty&lt;/a&gt; will be compiled for Java 20 language features/APIs and included in the final multirelease jar targetting supported JVMs. &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-multirelease&#34;&gt;jvector-multirelease&lt;/a&gt; packages &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-base&#34;&gt;jvector-base&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-twenty&#34;&gt;jvector-twenty&lt;/a&gt; as a multirelease jar for release. &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/jvector-examples&#34;&gt;jvector-examples&lt;/a&gt; is an additional sibling module that uses the reactor-representation of jvector-base/jvector-twenty to run example code.&lt;/p&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;SiftSmall&lt;/code&gt; and &lt;code&gt;Bench&lt;/code&gt; directly to get an idea of what all is going on here. &lt;code&gt;Bench&lt;/code&gt; requires some datasets to be downloaded from &lt;a href=&#34;https://github.com/erikbern/ann-benchmarks&#34;&gt;https://github.com/erikbern/ann-benchmarks&lt;/a&gt;. The files used by &lt;code&gt;SiftSmall&lt;/code&gt; can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/jbellis/jvector/main/siftsmall&#34;&gt;siftsmall directory&lt;/a&gt; in the project root.&lt;/p&gt; &#xA;&lt;p&gt;To run either class, you can use the Maven exec-plugin via the following incantations:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn compile exec:exec@bench&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;or for Sift:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn compile exec:exec@sift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To run Sift/Bench without the JVM vector module available, you can use the following invocations:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn -Pjdk11 compile exec:exec@bench&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;mvn -Pjdk11 compile exec:exec@sift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;... -Pjdk11&lt;/code&gt; invocations will also work with &lt;code&gt;JAVA_HOME&lt;/code&gt; pointing at a Java 11 installation.&lt;/p&gt; &#xA;&lt;p&gt;To release, configure &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; to point to OSSRH and run &lt;code&gt;mvn -Prelease clean deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>nasa/spaceapps</title>
    <updated>2023-10-09T01:23:44Z</updated>
    <id>tag:github.com,2023-10-09:/nasa/spaceapps</id>
    <link href="https://github.com/nasa/spaceapps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spaceapps&lt;/h1&gt; &#xA;&lt;h2&gt;SOLVE REAL-WORLD CHALLENGES ON EARTH &amp;amp; IN SPACE&lt;/h2&gt; &#xA;&lt;p&gt;The NASA International Space Apps Challenge is a hackathon for coders, scientists, designers, storytellers, makers, technologists, and innovators around the world to come together and use open data from NASA and its Space Agency Partners to create solutions to challenges we face on Earth and in space.&lt;/p&gt; &#xA;&lt;h2&gt;TERMS &amp;amp; CONDITIONS&lt;/h2&gt; &#xA;&lt;p&gt;By participating in Discussions within this repository, you are confirming that you have &lt;a href=&#34;https://www.spaceappschallenge.org/2023/&#34;&gt;registered&lt;/a&gt; for the 2023 NASA International Space Apps Hackathon and have agreed to and signed the &lt;a href=&#34;https://www.spaceappschallenge.org/legal/&#34;&gt;Terms &amp;amp; Conditions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IF YOU SEE SOMETHING, SAY SOMETHING&lt;/h2&gt; &#xA;&lt;p&gt;If you experience or witness discrimination, harassment, or any form of bullying during the Space Apps Challenge, or have any other concerns, please contact your Local Lead and/or the Space Apps Global Organizing (GO) Team at &lt;a href=&#34;mailto:conduct@spaceappschallenge.org&#34;&gt;conduct@spaceappschallenge.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gethomepage/homepage</title>
    <updated>2023-10-09T01:23:44Z</updated>
    <id>tag:github.com,2023-10-09:/gethomepage/homepage</id>
    <link href="https://github.com/gethomepage/homepage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A highly customizable homepage (or startpage / application dashboard) with Docker and service API integrations.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;images/banner_light@2x.png&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/gethomepage/homepage/main/images/banner_dark@2x.png&#34; width=&#34;65%&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A modern, &lt;em&gt;fully static, fast&lt;/em&gt;, secure &lt;em&gt;fully proxied&lt;/em&gt;, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages. Easily configured via YAML files or through docker label discovery. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gethomepage/homepage/main/images/1.png?v=2&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/gethomepage/homepage/actions/workflows/docker-publish.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (with event)&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/gethomepage/homepage/docker-publish.yml&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://crowdin.com/project/gethomepage&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/gethomepage/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://discord.gg/k4ruYNrudu&#34;&gt;&lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1019316731635834932&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;http://gethomepage.dev/latest/&#34; title=&#34;Docs&#34;&gt;&lt;img title=&#34;Docs&#34; src=&#34;https://github.com/gethomepage/homepage/actions/workflows/docs-publish.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://paypal.me/phelpsben&#34; title=&#34;Donate&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/benphelps&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;With features like quick search, bookmarks, weather support, a wide range of integrations and widgets, an elegant and modern design, and a focus on performance, Homepage is your ideal start to the day and a handy companion throughout it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - The site is statically generated at build time for instant load times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt; - All API requests to backend services are proxied, keeping your API keys hidden. Constantly reviewed for security by the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Everyone&lt;/strong&gt; - Images built for AMD64, ARM64, ARMv7, and ARMv6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full i18n&lt;/strong&gt; - Support for over 40 languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Service &amp;amp; Web Bookmarks&lt;/strong&gt; - Add custom links to the homepage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker Integration&lt;/strong&gt; - Container status and stats. Automatic service discovery via labels.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Service Integration&lt;/strong&gt; - Over 100 service integrations, including popular starr and self-hosted apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Information &amp;amp; Utility Widgets&lt;/strong&gt; - Weather, time, date, search, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;And much more...&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker Integration&lt;/h2&gt; &#xA;&lt;p&gt;Homepage has built-in support for Docker, and can automatically discover and add services to the homepage based on labels. See the &lt;a href=&#34;https://gethomepage.dev/latest/installation/docker/&#34;&gt;Docker&lt;/a&gt; page for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Service Widgets&lt;/h2&gt; &#xA;&lt;p&gt;Homepage also has support for over 100 3rd party services, including all popular starr apps, and most popular self-hosted apps. Some examples include: Radarr, Sonarr, Lidarr, Bazarr, Ombi, Tautulli, Plex, Jellyfin, Emby, Transmission, qBittorrent, Deluge, Jackett, NZBGet, SABnzbd, etc. As well as service integrations, Homepage also has a number of information providers, sourcing information from a variety of external 3rd party APIs. See the &lt;a href=&#34;https://gethomepage.dev/latest/configs/service-widgets/&#34;&gt;Service&lt;/a&gt; page for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Information Widgets&lt;/h2&gt; &#xA;&lt;p&gt;Homepage has built-in support for a number of information providers, including weather, time, date, search, glances and more. System and status information presented at the top of the page. See the &lt;a href=&#34;https://gethomepage.dev/latest/configs/widgets/&#34;&gt;Information Providers&lt;/a&gt; page for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Homepage is highly customizable, with support for custom themes, custom CSS &amp;amp; JS, custom layouts, formatting, localization and more. See the &lt;a href=&#34;https://gethomepage.dev/latest/configs/settings/&#34;&gt;Settings&lt;/a&gt; page for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;For configuration options, examples and more, &lt;a href=&#34;http://gethomepage.dev&#34;&gt;please check out the homepage documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;With Docker&lt;/h2&gt; &#xA;&lt;p&gt;Using docker compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;3.3&#34;&#xA;services:&#xA;  homepage:&#xA;    image: ghcr.io/gethomepage/homepage:latest&#xA;    container_name: homepage&#xA;    environment:&#xA;      PUID: 1000 -- optional, your user id&#xA;      PGID: 1000 -- optional, your group id&#xA;    ports:&#xA;      - 3000:3000&#xA;    volumes:&#xA;      - /path/to/config:/app/config # Make sure your local config directory exists&#xA;      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or docker run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name homepage \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -p 3000:3000 \&#xA;  -v /path/to/config:/app/config \&#xA;  -v /var/run/docker.sock:/var/run/docker.sock:ro \&#xA;  --restart unless-stopped \&#xA;  ghcr.io/gethomepage/homepage:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;With Node&lt;/h2&gt; &#xA;&lt;p&gt;First, clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/gethomepage/homepage.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install dependencies and build the production bundle (I&#39;m using pnpm here, you can use npm or yarn if you like):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is your first time starting, copy the &lt;code&gt;src/skeleton&lt;/code&gt; directory to &lt;code&gt;config/&lt;/code&gt; to populate initial example config files.&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the server in production mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or development mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://gethomepage.dev/&#34;&gt;homepage documentation&lt;/a&gt; website for more information. Everything you need to know about configuring Homepage is there. Please read everything carefully before asking for help, as most questions are answered there or are simple YAML configuration issues.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;Install NPM packages, this project uses &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; (and so should you!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to start.&lt;/p&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; application, see their documentation for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The homepage documentation is available at &lt;a href=&#34;https://gethomepage.dev/&#34;&gt;https://gethomepage.dev/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Homepage uses Material for MkDocs for documentation. To run the documentation locally, first install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdocs serve # or build, to build the static site&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Support &amp;amp; Suggestions&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions, suggestions, or general issues, please start a discussion on the &lt;a href=&#34;https://github.com/gethomepage/homepage/discussions&#34;&gt;Discussions&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;For bug reports, please open an issue on the &lt;a href=&#34;https://github.com/gethomepage/homepage/issues&#34;&gt;Issues&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing &amp;amp; Contributers&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see the &lt;a href=&#34;https://raw.githubusercontent.com/gethomepage/homepage/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the over 200 contributors who have helped make this project what it is today!&lt;/p&gt; &#xA;&lt;p&gt;Especially huge thanks to &lt;a href=&#34;https://github.com/shamoon&#34;&gt;@shamoon&lt;/a&gt;, who has been the backbone of this community from the very start.&lt;/p&gt;</summary>
  </entry>
</feed>