<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-30T01:24:50Z</updated>
  <subtitle>Daily Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pytorch/torchtitan</title>
    <updated>2024-04-30T01:24:50Z</updated>
    <id>tag:github.com,2024-04-30:/pytorch/torchtitan</id>
    <link href="https://github.com/pytorch/torchtitan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native PyTorch Library for large model training&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;torchtitan&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;torchtitan&lt;/code&gt; is currently in a pre-release state and under extensive development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;torchtitan&lt;/code&gt; is a proof-of-concept for Large-scale LLM training using native PyTorch. It is (and will continue to be) a repo to showcase PyTorch&#39;s latest distributed training features in a clean, minimal codebase. torchtitan is complementary to and not a replacement for any of the great large-scale LLM training codebases such as Megatron, Megablocks, LLM Foundry, Deepspeed, etc. Instead, we hope that the features showcased in torchtitan will be adopted by these codebases quickly. torchtitan is unlikely to ever grow a large community around it.&lt;/p&gt; &#xA;&lt;p&gt;Our guiding principles when building &lt;code&gt;torchtitan&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Designed to be easy to understand, use and extend for different training purposes.&lt;/li&gt; &#xA; &lt;li&gt;Minimal changes to the model code when applying 1D, 2D, or (soon) 3D Parallel.&lt;/li&gt; &#xA; &lt;li&gt;Modular components instead of a monolithic codebase.&lt;/li&gt; &#xA; &lt;li&gt;Get started in minutes, not hours!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Intro video - learn more about torchtitan in under 4 mins:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ee5DOEqD35I?si=_B94PbVv0V5ZnNKE&#34; title=&#34;Welcome to torchtitan!&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/assets/images/titan_play_video.png&#34; alt=&#34;Welcome to torchtitan!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pre-Release Updates:&lt;/h2&gt; &#xA;&lt;h4&gt;(4/25/2024): &lt;code&gt;torchtitan&lt;/code&gt; is now public but in a pre-release state and under development.&lt;/h4&gt; &#xA;&lt;p&gt;Currently we showcase pre-training &lt;strong&gt;Llama 3 and Llama 2&lt;/strong&gt; LLMs of various sizes from scratch. &lt;code&gt;torchtitan&lt;/code&gt; is tested and verified with the PyTorch nightly version &lt;code&gt;torch-2.4.0.dev20240412&lt;/code&gt;. (We recommend latest PyTorch nightly).&lt;/p&gt; &#xA;&lt;h3&gt;Key features available&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/fsdp.md&#34;&gt;FSDP2 with per param sharding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/docs/stable/distributed.tensor.parallel.html&#34;&gt;Tensor Parallel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Selective layer and operator activation checkpointing&lt;/li&gt; &#xA; &lt;li&gt;Distributed checkpointing&lt;/li&gt; &#xA; &lt;li&gt;2 datasets pre-configured (45K - 144M)&lt;/li&gt; &#xA; &lt;li&gt;GPU usage, MFU, tokens per second and more displayed via TensorBoard&lt;/li&gt; &#xA; &lt;li&gt;Learning rate scheduler, meta init, Optional Fused RMSNorm&lt;/li&gt; &#xA; &lt;li&gt;All options easily configured via &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/train_configs/&#34;&gt;toml files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/checkpoint.md&#34;&gt;Interoperable checkpoints&lt;/a&gt; which can be loaded directly into &lt;a href=&#34;https://github.com/pytorch/torchtune&#34;&gt;&lt;code&gt;torchtune&lt;/code&gt;&lt;/a&gt; for fine tuning&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We report our &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/docs/performance.md&#34;&gt;Performance&lt;/a&gt; verified on 64 A100 GPUs&lt;/p&gt; &#xA;&lt;h3&gt;Coming soon&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Async checkpointing&lt;/li&gt; &#xA; &lt;li&gt;FP8 support&lt;/li&gt; &#xA; &lt;li&gt;Context Parallel&lt;/li&gt; &#xA; &lt;li&gt;3D Pipeline Parallel&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;torch.compile&lt;/code&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Scalable data loading solution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/pytorch/torchtitan&#xA;cd torchtitan&#xA;pip install -r requirements.txt&#xA;pip3 install --pre torch --index-url https://download.pytorch.org/whl/nightly/cu121 # or cu118&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Downloading a tokenizer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;torchtitan&lt;/code&gt; currently supports training Llama 3 (8B, 70B), and Llama 2 (7B, 13B, 70B) out of the box. To get started training these models, we need to download a tokenizer.model. Follow the instructions on the official &lt;a href=&#34;https://huggingface.co/meta-llama/Meta-Llama-3-8B&#34;&gt;meta-llama&lt;/a&gt; repository to ensure you have access to the Llama model weights.&lt;/p&gt; &#xA;&lt;p&gt;Once you have confirmed access, you can run the following command to download the Llama 3 / Llama 2 tokenizer to your local machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get your HF token from https://huggingface.co/settings/tokens&#xA;&#xA;# llama3 tokenizer.model&#xA;python torchtitan/datasets/download_tokenizer.py --repo_id meta-llama/Meta-Llama-3-8B --tokenizer_path &#34;original&#34; --hf_token=...&#xA;&#xA;# llama2 tokenizer.model&#xA;python torchtitan/datasets/download_tokenizer.py --repo_id meta-llama/Llama-2-13b-hf --hf_token=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start a training run&lt;/h3&gt; &#xA;&lt;p&gt;Llama 3 8B model locally on 8 GPUs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CONFIG_FILE=&#34;./train_configs/llama3_8b.toml&#34; ./run_llama_train.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TensorBoard&lt;/h2&gt; &#xA;&lt;p&gt;To visualize TensorBoard metrics of models trained on a remote server via a local web browser:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure &lt;code&gt;metrics.enable_tensorboard&lt;/code&gt; option is set to true in model training (either from a .toml file or from CLI).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up SSH tunneling, by running the following from local CLI&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -L 6006:127.0.0.1:6006 [username]@[hostname]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Inside the SSH tunnel that logged into the remote server, go to the torchtitan repo, and start the TensorBoard backend&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;tensorboard --logdir=./outputs/tb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In the local web browser, go to the URL it provides OR to &lt;a href=&#34;http://localhost:6006/&#34;&gt;http://localhost:6006/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Multi-Node Training&lt;/h2&gt; &#xA;&lt;p&gt;For training on ParallelCluster/Slurm type configurations, you can use the &lt;code&gt;multinode_trainer.slurm&lt;/code&gt; file to submit your sbatch job.&lt;/p&gt; &#xA;&lt;p&gt;To get started adjust the number of nodes and GPUs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#SBATCH --ntasks=2&#xA;#SBATCH --nodes=2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start a run where &lt;code&gt;nnodes&lt;/code&gt; is your total node count, matching the sbatch node count above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;srun torchrun --nnodes 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your gpu count per node is not 8, adjust:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--nproc_per_node&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;in the torchrun command and&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#SBATCH --gpus-per-task&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;in the SBATCH command section.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is made available under &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchtitan/main/LICENSE&#34;&gt;BSD 3 license&lt;/a&gt;. However you may have other legal obligations that govern your use of other content, such as the terms of service for third-party models, data, etc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WhiskeySockets/Baileys</title>
    <updated>2024-04-30T01:24:50Z</updated>
    <id>tag:github.com,2024-04-30:/WhiskeySockets/Baileys</id>
    <link href="https://github.com/WhiskeySockets/Baileys" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight full-featured typescript/javascript WhatsApp Web API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Baileys - Typescript/Javascript WhatsApp Web API&lt;/h1&gt; &#xA;&lt;h3&gt;Important Note&lt;/h3&gt; &#xA;&lt;p&gt;This library was originally a project for &lt;strong&gt;CS-2362 at Ashoka University&lt;/strong&gt; and is in no way affiliated with or endorsed by WhatsApp. Use at your own discretion. Do not spam people with this. We discourage any stalkerware, bulk or automated messaging usage.&lt;/p&gt; &#xA;&lt;h4&gt;Liability and License Notice&lt;/h4&gt; &#xA;&lt;p&gt;Baileys and its maintainers cannot be held liable for misuse of this application, as stated in the &lt;a href=&#34;https://github.com/WhiskeySockets/Baileys/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;. The maintainers of Baileys do not in any way condone the use of this application in practices that violate the Terms of Service of WhatsApp. The maintainers of this application call upon the personal responsibility of its users to use this application in a fair way, as it is intended to be used.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a &lt;strong&gt;WebSocket&lt;/strong&gt;. Not running Selenium or Chromimum saves you like &lt;strong&gt;half a gig&lt;/strong&gt; of ram :/ Baileys supports interacting with the multi-device &amp;amp; web versions of WhatsApp. Thank you to &lt;a href=&#34;https://github.com/pokearaujo/multidevice&#34;&gt;@pokearaujo&lt;/a&gt; for writing his observations on the workings of WhatsApp Multi-Device. Also, thank you to &lt;a href=&#34;https://github.com/sigalor/whatsapp-web-reveng&#34;&gt;@Sigalor&lt;/a&gt; for writing his observations on the workings of WhatsApp Web and thanks to &lt;a href=&#34;https://github.com/Rhymen/go-whatsapp/&#34;&gt;@Rhymen&lt;/a&gt; for the &lt;strong&gt;go&lt;/strong&gt; implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Please Read&lt;/h2&gt; &#xA;&lt;p&gt;The original repository had to be removed by the original author - we now continue development in this repository here. This is the only official repository and is maintained by the community. &lt;strong&gt;Join the Discord &lt;a href=&#34;https://discord.gg/WeJM5FP9GG&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Do check out &amp;amp; run &lt;a href=&#34;https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/Example/example.ts&#34;&gt;example.ts&lt;/a&gt; to see an example usage of the library. The script covers most common use cases. To run the example script, download or clone the repo and then type the following in a terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd path/to/Baileys&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn example&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use the stable version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @whiskeysockets/baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the edge version (no guarantee of stability, but latest fixes + features)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add github:WhiskeySockets/Baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import your code using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket from &#39;@whiskeysockets/baileys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Connecting multi device (recommended)&lt;/h2&gt; &#xA;&lt;p&gt;WhatsApp provides a multi-device API that allows Baileys to be authenticated as a second WhatsApp client by scanning a QR code with WhatsApp on your phone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { DisconnectReason } from &#39;@whiskeysockets/baileys&#39;&#xA;import { Boom } from &#39;@hapi/boom&#39;&#xA;&#xA;async function connectToWhatsApp () {&#xA;    const sock = makeWASocket({&#xA;        // can provide additional config here&#xA;        printQRInTerminal: true&#xA;    })&#xA;    sock.ev.on(&#39;connection.update&#39;, (update) =&amp;gt; {&#xA;        const { connection, lastDisconnect } = update&#xA;        if(connection === &#39;close&#39;) {&#xA;            const shouldReconnect = (lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut&#xA;            console.log(&#39;connection closed due to &#39;, lastDisconnect.error, &#39;, reconnecting &#39;, shouldReconnect)&#xA;            // reconnect if not logged out&#xA;            if(shouldReconnect) {&#xA;                connectToWhatsApp()&#xA;            }&#xA;        } else if(connection === &#39;open&#39;) {&#xA;            console.log(&#39;opened connection&#39;)&#xA;        }&#xA;    })&#xA;    sock.ev.on(&#39;messages.upsert&#39;, m =&amp;gt; {&#xA;        console.log(JSON.stringify(m, undefined, 2))&#xA;&#xA;        console.log(&#39;replying to&#39;, m.messages[0].key.remoteJid)&#xA;        await sock.sendMessage(m.messages[0].key.remoteJid!, { text: &#39;Hello there!&#39; })&#xA;    })&#xA;}&#xA;// run in main file&#xA;connectToWhatsApp()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the connection is successful, you will see a QR code printed on your terminal screen, scan it with WhatsApp on your phone and you&#39;ll be logged in!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; install &lt;code&gt;qrcode-terminal&lt;/code&gt; using &lt;code&gt;yarn add qrcode-terminal&lt;/code&gt; to auto-print the QR to the terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the code to support the legacy version of WA Web (pre multi-device) has been removed in v5. Only the standard multi-device connection is now supported. This is done as WA seems to have completely dropped support for the legacy version.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting native mobile api&lt;/h2&gt; &#xA;&lt;p&gt;Baileys also supports the native mobile API, which allows users to authenticate as a standalone WhatsApp client using their phone number.&lt;/p&gt; &#xA;&lt;p&gt;Run the &lt;a href=&#34;https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/Example/example.ts&#34;&gt;example&lt;/a&gt; file with &lt;code&gt;--mobile&lt;/code&gt; cli flag to use the native mobile API.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring the Connection&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the connection by passing a &lt;code&gt;SocketConfig&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The entire &lt;code&gt;SocketConfig&lt;/code&gt; structure is mentioned here with default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type SocketConfig = {&#xA;    /** the WS url to connect to WA */&#xA;    waWebSocketUrl: string | URL&#xA;    /** Fails the connection if the socket times out in this interval */&#xA;&#x9;connectTimeoutMs: number&#xA;    /** Default timeout for queries, undefined for no timeout */&#xA;    defaultQueryTimeoutMs: number | undefined&#xA;    /** ping-pong interval for WS connection */&#xA;    keepAliveIntervalMs: number&#xA;    /** proxy agent */&#xA;&#x9;agent?: Agent&#xA;    /** pino logger */&#xA;&#x9;logger: Logger&#xA;    /** version to connect with */&#xA;    version: WAVersion&#xA;    /** override browser config */&#xA;&#x9;browser: WABrowserDescription&#xA;&#x9;/** agent used for fetch requests -- uploading/downloading media */&#xA;&#x9;fetchAgent?: Agent&#xA;    /** should the QR be printed in the terminal */&#xA;    printQRInTerminal: boolean&#xA;    /** should events be emitted for actions done by this socket connection */&#xA;    emitOwnEvents: boolean&#xA;    /** provide a cache to store media, so does not have to be re-uploaded */&#xA;    mediaCache?: NodeCache&#xA;    /** custom upload hosts to upload media to */&#xA;    customUploadHosts: MediaConnInfo[&#39;hosts&#39;]&#xA;    /** time to wait between sending new retry requests */&#xA;    retryRequestDelayMs: number&#xA;    /** max msg retry count */&#xA;    maxMsgRetryCount: number&#xA;    /** time to wait for the generation of the next QR in ms */&#xA;    qrTimeout?: number;&#xA;    /** provide an auth state object to maintain the auth state */&#xA;    auth: AuthenticationState&#xA;    /** manage history processing with this control; by default will sync up everything */&#xA;    shouldSyncHistoryMessage: (msg: proto.Message.IHistorySyncNotification) =&amp;gt; boolean&#xA;    /** transaction capability options for SignalKeyStore */&#xA;    transactionOpts: TransactionCapabilityOptions&#xA;    /** provide a cache to store a user&#39;s device list */&#xA;    userDevicesCache?: NodeCache&#xA;    /** marks the client as online whenever the socket successfully connects */&#xA;    markOnlineOnConnect: boolean&#xA;    /**&#xA;     * map to store the retry counts for failed messages;&#xA;     * used to determine whether to retry a message or not */&#xA;    msgRetryCounterMap?: MessageRetryMap&#xA;    /** width for link preview images */&#xA;    linkPreviewImageThumbnailWidth: number&#xA;    /** Should Baileys ask the phone for full history, will be received async */&#xA;    syncFullHistory: boolean&#xA;    /** Should baileys fire init queries automatically, default true */&#xA;    fireInitQueries: boolean&#xA;    /**&#xA;     * generate a high quality link preview,&#xA;     * entails uploading the jpegThumbnail to WA&#xA;     * */&#xA;    generateHighQualityLinkPreview: boolean&#xA;&#xA;    /** options for axios */&#xA;    options: AxiosRequestConfig&amp;lt;any&amp;gt;&#xA;    /**&#xA;     * fetch a message from your store&#xA;     * implement this so that messages failed to send (solves the &#34;this message can take a while&#34; issue) can be retried&#xA;     * */&#xA;    getMessage: (key: proto.IMessageKey) =&amp;gt; Promise&amp;lt;proto.IMessage | undefined&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Emulating the Desktop app instead of the web&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Baileys, by default, emulates a chrome web session&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to emulate a desktop connection (and receive more message history), add this to your Socket config: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const conn = makeWASocket({&#xA;    ...otherOpts,&#xA;    // can use Windows, Ubuntu here too&#xA;    browser: Browsers.macOS(&#39;Desktop&#39;),&#xA;    syncFullHistory: true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Saving &amp;amp; Restoring Sessions&lt;/h2&gt; &#xA;&lt;p&gt;You obviously don&#39;t want to keep scanning the QR code every time you want to connect.&lt;/p&gt; &#xA;&lt;p&gt;So, you can load the credentials to log back in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { BufferJSON, useMultiFileAuthState } from &#39;@whiskeysockets/baileys&#39;&#xA;import * as fs from &#39;fs&#39;&#xA;&#xA;// utility function to help save the auth state in a single folder&#xA;// this function serves as a good guide to help write auth &amp;amp; key states for SQL/no-SQL databases, which I would recommend in any production grade system&#xA;const { state, saveCreds } = await useMultiFileAuthState(&#39;auth_info_baileys&#39;)&#xA;// will use the given state to connect&#xA;// so if valid credentials are available -- it&#39;ll connect without QR&#xA;const conn = makeWASocket({ auth: state }) &#xA;// this will be called as soon as the credentials are updated&#xA;conn.ev.on (&#39;creds.update&#39;, saveCreds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a message is received/sent, due to signal sessions needing updating, the auth keys (&lt;code&gt;authState.keys&lt;/code&gt;) will update. Whenever that happens, you must save the updated keys (&lt;code&gt;authState.keys.set()&lt;/code&gt; is called). Not doing so will prevent your messages from reaching the recipient &amp;amp; cause other unexpected consequences. The &lt;code&gt;useMultiFileAuthState&lt;/code&gt; function automatically takes care of that, but for any other serious implementation -- you will need to be very careful with the key state management.&lt;/p&gt; &#xA;&lt;h2&gt;Listening to Connection Updates&lt;/h2&gt; &#xA;&lt;p&gt;Baileys now fires the &lt;code&gt;connection.update&lt;/code&gt; event to let you know something has updated in the connection. This data has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type ConnectionState = {&#xA;&#x9;/** connection is now open, connecting or closed */&#xA;&#x9;connection: WAConnectionState&#xA;&#x9;/** the error that caused the connection to close */&#xA;&#x9;lastDisconnect?: {&#xA;&#x9;&#x9;error: Error&#xA;&#x9;&#x9;date: Date&#xA;&#x9;}&#xA;&#x9;/** is this a new login */&#xA;&#x9;isNewLogin?: boolean&#xA;&#x9;/** the current QR code */&#xA;&#x9;qr?: string&#xA;&#x9;/** has the device received all pending notifications while it was offline */&#xA;&#x9;receivedPendingNotifications?: boolean &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this also offers any updates to the QR&lt;/p&gt; &#xA;&lt;h2&gt;Handling Events&lt;/h2&gt; &#xA;&lt;p&gt;Baileys uses the EventEmitter syntax for events. They&#39;re all nicely typed up, so you shouldn&#39;t have any issues with an Intellisense editor like VS Code.&lt;/p&gt; &#xA;&lt;p&gt;The events are typed as mentioned here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;export type BaileysEventMap = {&#xA;    /** connection state has been updated -- WS closed, opened, connecting etc. */&#xA;&#x9;&#39;connection.update&#39;: Partial&amp;lt;ConnectionState&amp;gt;&#xA;    /** credentials updated -- some metadata, keys or something */&#xA;    &#39;creds.update&#39;: Partial&amp;lt;AuthenticationCreds&amp;gt;&#xA;    /** history sync, everything is reverse chronologically sorted */&#xA;    &#39;messaging-history.set&#39;: {&#xA;        chats: Chat[]&#xA;        contacts: Contact[]&#xA;        messages: WAMessage[]&#xA;        isLatest: boolean&#xA;    }&#xA;    /** upsert chats */&#xA;    &#39;chats.upsert&#39;: Chat[]&#xA;    /** update the given chats */&#xA;    &#39;chats.update&#39;: Partial&amp;lt;Chat&amp;gt;[]&#xA;    /** delete chats with given ID */&#xA;    &#39;chats.delete&#39;: string[]&#xA;    &#39;labels.association&#39;: LabelAssociation&#xA;    &#39;labels.edit&#39;: Label&#xA;    /** presence of contact in a chat updated */&#xA;    &#39;presence.update&#39;: { id: string, presences: { [participant: string]: PresenceData } }&#xA;&#xA;    &#39;contacts.upsert&#39;: Contact[]&#xA;    &#39;contacts.update&#39;: Partial&amp;lt;Contact&amp;gt;[]&#xA;&#xA;    &#39;messages.delete&#39;: { keys: WAMessageKey[] } | { jid: string, all: true }&#xA;    &#39;messages.update&#39;: WAMessageUpdate[]&#xA;    &#39;messages.media-update&#39;: { key: WAMessageKey, media?: { ciphertext: Uint8Array, iv: Uint8Array }, error?: Boom }[]&#xA;    /**&#xA;     * add/update the given messages. If they were received while the connection was online,&#xA;     * the update will have type: &#34;notify&#34;&#xA;     *  */&#xA;    &#39;messages.upsert&#39;: { messages: WAMessage[], type: MessageUpsertType }&#xA;    /** message was reacted to. If reaction was removed -- then &#34;reaction.text&#34; will be falsey */&#xA;    &#39;messages.reaction&#39;: { key: WAMessageKey, reaction: proto.IReaction }[]&#xA;&#xA;    &#39;message-receipt.update&#39;: MessageUserReceiptUpdate[]&#xA;&#xA;    &#39;groups.upsert&#39;: GroupMetadata[]&#xA;    &#39;groups.update&#39;: Partial&amp;lt;GroupMetadata&amp;gt;[]&#xA;    /** apply an action to participants in a group */&#xA;    &#39;group-participants.update&#39;: { id: string, participants: string[], action: ParticipantAction }&#xA;&#xA;    &#39;blocklist.set&#39;: { blocklist: string[] }&#xA;    &#39;blocklist.update&#39;: { blocklist: string[], type: &#39;add&#39; | &#39;remove&#39; }&#xA;    /** Receive an update on a call, including when the call was received, rejected, accepted */&#xA;    &#39;call&#39;: WACallEvent[]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can listen to these events like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;const sock = makeWASocket()&#xA;sock.ev.on(&#39;messages.upsert&#39;, ({ messages }) =&amp;gt; {&#xA;    console.log(&#39;got messages&#39;, messages)&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementing a Data Store&lt;/h2&gt; &#xA;&lt;p&gt;Baileys does not come with a defacto storage for chats, contacts, or messages. However, a simple in-memory implementation has been provided. The store listens for chat updates, new messages, message updates, etc., to always have an up-to-date version of the data.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { makeInMemoryStore } from &#39;@whiskeysockets/baileys&#39;&#xA;// the store maintains the data of the WA connection in memory&#xA;// can be written out to a file &amp;amp; read from it&#xA;const store = makeInMemoryStore({ })&#xA;// can be read from a file&#xA;store.readFromFile(&#39;./baileys_store.json&#39;)&#xA;// saves the state to a file every 10s&#xA;setInterval(() =&amp;gt; {&#xA;    store.writeToFile(&#39;./baileys_store.json&#39;)&#xA;}, 10_000)&#xA;&#xA;const sock = makeWASocket({ })&#xA;// will listen from this socket&#xA;// the store can listen from a new socket once the current socket outlives its lifetime&#xA;store.bind(sock.ev)&#xA;&#xA;sock.ev.on(&#39;chats.set&#39;, () =&amp;gt; {&#xA;    // can use &#34;store.chats&#34; however you want, even after the socket dies out&#xA;    // &#34;chats&#34; =&amp;gt; a KeyedDB instance&#xA;    console.log(&#39;got chats&#39;, store.chats.all())&#xA;})&#xA;&#xA;sock.ev.on(&#39;contacts.set&#39;, () =&amp;gt; {&#xA;    console.log(&#39;got contacts&#39;, Object.values(store.contacts))&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The store also provides some simple functions such as &lt;code&gt;loadMessages&lt;/code&gt; that utilize the store to speed up data retrieval.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I highly recommend building your own data store especially for MD connections, as storing someone&#39;s entire chat history in memory is a terrible waste of RAM.&lt;/p&gt; &#xA;&lt;h2&gt;Sending Messages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Send all types of messages with a single function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Non-Media Messages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@whiskeysockets/baileys&#39;&#xA;&#xA;const id = &#39;abcd@s.whatsapp.net&#39; // the WhatsApp ID &#xA;// send a simple text!&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; })&#xA;// send a reply messagge&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; }, { quoted: message })&#xA;// send a mentions message&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;@12345678901&#39;, mentions: [&#39;12345678901@s.whatsapp.net&#39;] })&#xA;// send a location!&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id, &#xA;    { location: { degreesLatitude: 24.121231, degreesLongitude: 55.1121221 } }&#xA;)&#xA;// send a contact!&#xA;const vcard = &#39;BEGIN:VCARD\n&#39; // metadata of the contact card&#xA;            + &#39;VERSION:3.0\n&#39; &#xA;            + &#39;FN:Jeff Singh\n&#39; // full name&#xA;            + &#39;ORG:Ashoka Uni;\n&#39; // the organization of the contact&#xA;            + &#39;TEL;type=CELL;type=VOICE;waid=911234567890:+91 12345 67890\n&#39; // WhatsApp ID + phone number&#xA;            + &#39;END:VCARD&#39;&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id,&#xA;    { &#xA;        contacts: { &#xA;            displayName: &#39;Jeff&#39;, &#xA;            contacts: [{ vcard }] &#xA;        }&#xA;    }&#xA;)&#xA;&#xA;const reactionMessage = {&#xA;    react: {&#xA;        text: &#34;💖&#34;, // use an empty string to remove the reaction&#xA;        key: message.key&#xA;    }&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, reactionMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending messages with link previews&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By default, WA MD does not have link generation when sent from the web&lt;/li&gt; &#xA; &lt;li&gt;Baileys has a function to generate the content for these link previews&lt;/li&gt; &#xA; &lt;li&gt;To enable this function&#39;s usage, add &lt;code&gt;link-preview-js&lt;/code&gt; as a dependency to your project with &lt;code&gt;yarn add link-preview-js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send a link:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// send a link&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;Hi, this was sent using https://github.com/adiwajshing/baileys&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Media Messages&lt;/h3&gt; &#xA;&lt;p&gt;Sending media (video, stickers, images) is easier &amp;amp; more efficient than ever.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can specify a buffer, a local url or even a remote url.&lt;/li&gt; &#xA; &lt;li&gt;When specifying a media url, Baileys never loads the entire buffer into memory; it even encrypts the media as a readable stream.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@whiskeysockets/baileys&#39;&#xA;// Sending gifs&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: fs.readFileSync(&#34;Media/ma_gif.mp4&#34;), &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: &#34;./Media/ma_gif.mp4&#34;, &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;// send an audio file&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { audio: { url: &#34;./Media/audio.mp3&#34; }, mimetype: &#39;audio/mp4&#39; }&#xA;    { url: &#34;Media/audio.mp3&#34; }, // can send mp3, mp4, &amp;amp; ogg&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; is the WhatsApp ID of the person or group you&#39;re sending the message to. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It must be in the format &lt;code&gt;[country code][phone number]@s.whatsapp.net&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Example for people: &lt;code&gt;+19999999999@s.whatsapp.net&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;For groups, it must be in the format &lt;code&gt;123456789-123345@g.us&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For broadcast lists, it&#39;s &lt;code&gt;[timestamp of creation]@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For stories, the ID is &lt;code&gt;status@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For media messages, the thumbnail can be generated automatically for images &amp;amp; stickers provided you add &lt;code&gt;jimp&lt;/code&gt; or &lt;code&gt;sharp&lt;/code&gt; as a dependency in your project using &lt;code&gt;yarn add jimp&lt;/code&gt; or &lt;code&gt;yarn add sharp&lt;/code&gt;. Thumbnails for videos can also be generated automatically, though, you need to have &lt;code&gt;ffmpeg&lt;/code&gt; installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MiscGenerationOptions&lt;/strong&gt;: some extra info about the message. It can have the following &lt;strong&gt;optional&lt;/strong&gt; values: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const info: MessageOptions = {&#xA;    quoted: quotedMessage, // the message you want to quote&#xA;    contextInfo: { forwardingScore: 2, isForwarded: true }, // some random context info (can show a forwarded message with this too)&#xA;    timestamp: Date(), // optional, if you want to manually set the timestamp of the message&#xA;    caption: &#34;hello there!&#34;, // (for media messages) the caption to send with the media (cannot be sent with stickers though)&#xA;    jpegThumbnail: &#34;23GD#4/==&#34;, /*  (for location &amp;amp; media messages) has to be a base 64 encoded JPEG if you want to send a custom thumb, &#xA;                                or set to null if you don&#39;t want to send a thumbnail.&#xA;                                Do not enter this field if you want to automatically generate a thumb&#xA;                            */&#xA;    mimetype: Mimetype.pdf, /* (for media messages) specify the type of media (optional for all media types except documents),&#xA;                                import {Mimetype} from &#39;@whiskeysockets/baileys&#39;&#xA;                            */&#xA;    fileName: &#39;somefile.pdf&#39;, // (for media messages) file name for the media&#xA;    /* will send audio messages as voice notes, if set to true */&#xA;    ptt: true,&#xA;    /** Should it send as a disappearing messages. &#xA;     * By default &#39;chat&#39; -- which follows the setting of the chat */&#xA;    ephemeralExpiration: WA_DEFAULT_EPHEMERAL&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forwarding Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const msg = getMessageFromStore(&#39;455@s.whatsapp.net&#39;, &#39;HSJHJWH7323HSJSJ&#39;) // implement this on your end&#xA;await sock.sendMessage(&#39;1234@s.whatsapp.net&#39;, { forward: msg }) // WA forward the message!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading Messages&lt;/h2&gt; &#xA;&lt;p&gt;A set of message keys must be explicitly marked read now. In multi-device, you cannot mark an entire &#34;chat&#34; read as it were with Baileys Web. This means you have to keep track of unread messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const key = {&#xA;    remoteJid: &#39;1234-123@g.us&#39;,&#xA;    id: &#39;AHASHH123123AHGA&#39;, // id of the message you want to read&#xA;    participant: &#39;912121232@s.whatsapp.net&#39; // the ID of the user that sent the  message (undefined for individual chats)&#xA;}&#xA;// pass to readMessages function&#xA;// can pass multiple keys to read multiple messages as well&#xA;await sock.readMessages([key])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The message ID is the unique identifier of the message that you are marking as read. On a &lt;code&gt;WAMessage&lt;/code&gt;, the &lt;code&gt;messageID&lt;/code&gt; can be accessed using &lt;code&gt;messageID = message.key.id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Update Presence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.sendPresenceUpdate(&#39;available&#39;, id) &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This lets the person/group with &lt;code&gt;id&lt;/code&gt; know whether you&#39;re online, offline, typing etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;presence&lt;/code&gt; can be one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type WAPresence = &#39;unavailable&#39; | &#39;available&#39; | &#39;composing&#39; | &#39;recording&#39; | &#39;paused&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The presence expires after about 10 seconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the multi-device version of WhatsApp -- if a desktop client is active, WA doesn&#39;t send push notifications to the device. If you would like to receive said notifications -- mark your Baileys client offline using &lt;code&gt;sock.sendPresenceUpdate(&#39;unavailable&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloading Media Messages&lt;/h2&gt; &#xA;&lt;p&gt;If you want to save the media you received&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { writeFile } from &#39;fs/promises&#39;&#xA;import { downloadMediaMessage } from &#39;@whiskeysockets/baileys&#39;&#xA;&#xA;sock.ev.on(&#39;messages.upsert&#39;, async ({ messages }) =&amp;gt; {&#xA;    const m = messages[0]&#xA;&#xA;    if (!m.message) return // if there is no text or media message&#xA;    const messageType = Object.keys (m.message)[0]// get what type of message it is -- text, image, video&#xA;    // if the message is an image&#xA;    if (messageType === &#39;imageMessage&#39;) {&#xA;        // download the message&#xA;        const buffer = await downloadMediaMessage(&#xA;            m,&#xA;            &#39;buffer&#39;,&#xA;            { },&#xA;            { &#xA;                logger,&#xA;                // pass this so that baileys can request a reupload of media&#xA;                // that has been deleted&#xA;                reuploadRequest: sock.updateMediaMessage&#xA;            }&#xA;        )&#xA;        // save to file&#xA;        await writeFile(&#39;./my-download.jpeg&#39;, buffer)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; WhatsApp automatically removes old media from their servers. For the device to access said media -- a re-upload is required by another device that has it. This can be accomplished using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const updatedMediaMsg = await sock.updateMediaMessage(msg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deleting Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;const response = await sock.sendMessage(jid, { text: &#39;hello!&#39; }) // send a message&#xA;// sends a message to delete the given message&#xA;// this deletes the message for everyone&#xA;await sock.sendMessage(jid, { delete: response.key })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; deleting for oneself is supported via &lt;code&gt;chatModify&lt;/code&gt; (next section)&lt;/p&gt; &#xA;&lt;h2&gt;Updating Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39;&#xA;&#xA;await sock.sendMessage(jid, {&#xA;      text: &#39;updated text goes here&#39;,&#xA;      edit: response.key,&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modifying Chats&lt;/h2&gt; &#xA;&lt;p&gt;WA uses an encrypted form of communication to send chat/app updates. This has been implemented mostly and you can send the following updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Archive a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;await sock.chatModify({ archive: true, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mute/unmute a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// mute for 8 hours&#xA;await sock.chatModify({ mute: 8*60*60*1000 }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;// unmute&#xA;await sock.chatModify({ mute: null }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mark a chat read/unread&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;// mark it unread&#xA;await sock.chatModify({ markRead: false, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete a message for me&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify(&#xA;  { clear: { messages: [{ id: &#39;ATWYHDNNWU81732J&#39;, fromMe: true, timestamp: &#34;1654823909&#34; }] } }, &#xA;  &#39;123456@s.whatsapp.net&#39;, &#xA;  []&#xA;  )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;await sock.chatModify({&#xA;  delete: true,&#xA;  lastMessages: [{ key: lastMsgInChat.key, messageTimestamp: lastMsgInChat.messageTimestamp }]&#xA;},&#xA;&#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pin/unpin a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify({&#xA;  pin: true // or `false` to unpin&#xA;},&#xA;&#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Star/unstar a message&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify({&#xA;star: {&#xA;&#x9;messages: [{ id: &#39;messageID&#39;, fromMe: true // or `false` }],&#xA;    &#x9;star: true // - true: Star Message; false: Unstar Message&#xA;}},&#39;123456@s.whatsapp.net&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you mess up one of your updates, WA can log you out of all your devices and you&#39;ll have to log in again.&lt;/p&gt; &#xA;&lt;h2&gt;Disappearing Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;// turn on disappearing messages&#xA;await sock.sendMessage(&#xA;    jid, &#xA;    // this is 1 week in seconds -- how long you want messages to appear for&#xA;    { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL }&#xA;)&#xA;// will send as a disappearing message&#xA;await sock.sendMessage(jid, { text: &#39;hello&#39; }, { ephemeralExpiration: WA_DEFAULT_EPHEMERAL })&#xA;// turn off disappearing messages&#xA;await sock.sendMessage(&#xA;    jid, &#xA;    { disappearingMessagesInChat: false }&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To check if a given ID is on WhatsApp &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const id = &#39;123456&#39;&#xA;const [result] = await sock.onWhatsApp(id)&#xA;if (result.exists) console.log (`${id} exists on WhatsApp, as jid: ${result.jid}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To query chat history on a group or with someone TODO, if possible&lt;/li&gt; &#xA; &lt;li&gt;To get the status of some person &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = await sock.fetchStatus(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;status: &#34; + status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your profile status &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = &#39;Hello World!&#39;&#xA;await sock.updateProfileStatus(status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your profile name &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const name = &#39;My name&#39;&#xA;await sock.updateProfileName(name)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get the display picture of some person/group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for low res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;)&#xA;console.log(&#34;download profile picture from: &#34; + ppUrl)&#xA;// for high res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;, &#39;image&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your display picture or a group&#39;s &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;111234567890-1594482450@g.us&#39; // can be your own too&#xA;await sock.updateProfilePicture(jid, { url: &#39;./new-profile-picture.jpeg&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To remove your display picture or a group&#39;s &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;111234567890-1594482450@g.us&#39; // can be your own too&#xA;await sock.removeProfilePicture(jid)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get someone&#39;s presence (if they&#39;re typing or online) &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// the presence update is fetched and called here&#xA;sock.ev.on(&#39;presence.update&#39;, json =&amp;gt; console.log(json))&#xA;// request updates for a chat&#xA;await sock.presenceSubscribe(&#34;xyz@s.whatsapp.net&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To block or unblock user &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;block&#34;) // Block user&#xA;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;unblock&#34;) // Unblock user&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get a business profile, such as description or category &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const profile = await sock.getBusinessProfile(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;business description: &#34; + profile.description + &#34;, category: &#34; + profile.category)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, replace &lt;code&gt;xyz&lt;/code&gt; with an actual ID.&lt;/p&gt; &#xA;&lt;h2&gt;Groups&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To create a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// title &amp;amp; participants&#xA;const group = await sock.groupCreate(&#34;My Fab Group&#34;, [&#34;1234@s.whatsapp.net&#34;, &#34;4564@s.whatsapp.net&#34;])&#xA;console.log (&#34;created group with id: &#34; + group.gid)&#xA;sock.sendMessage(group.id, { text: &#39;hello there&#39; }) // say hello to everyone on the group&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To add/remove people to a group or demote/promote people&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// id &amp;amp; people to add to the group (will throw error if it fails)&#xA;const response = await sock.groupParticipantsUpdate(&#xA;    &#34;abcd-xyz@g.us&#34;, &#xA;    [&#34;abcd@s.whatsapp.net&#34;, &#34;efgh@s.whatsapp.net&#34;],&#xA;    &#34;add&#34; // replace this parameter with &#34;remove&#34;, &#34;demote&#34; or &#34;promote&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the group&#39;s subject&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateSubject(&#34;abcd-xyz@g.us&#34;, &#34;New Subject!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the group&#39;s description&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateDescription(&#34;abcd-xyz@g.us&#34;, &#34;New Description!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change group settings&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// only allow admins to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;announcement&#39;)&#xA;// allow everyone to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;not_announcement&#39;)&#xA;// allow everyone to modify the group&#39;s settings -- like display picture etc.&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;unlocked&#39;)&#xA;// only allow admins to modify the group&#39;s settings&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;locked&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To leave a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupLeave(&#34;abcd-xyz@g.us&#34;) // (will throw error if it fails)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get the invite code for a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupInviteCode(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To revoke the invite code in a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupRevokeInvite(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;New group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To query the metadata of a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const metadata = await sock.groupMetadata(&#34;abcd-xyz@g.us&#34;) &#xA;console.log(metadata.id + &#34;, title: &#34; + metadata.subject + &#34;, description: &#34; + metadata.desc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To join the group using the invitation code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInvite(&#34;xxx&#34;)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get group info by invite code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupGetInviteInfo(&#34;xxx&#34;)&#xA;console.log(&#34;group information: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To join the group using groupInviteMessage&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInviteV4(&#34;abcd@s.whatsapp.net&#34;, groupInviteMessage)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get list request join&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupRequestParticipantsList(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To approve/reject request join&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupRequestParticipantsUpdate(&#xA;    &#34;abcd-xyz@g.us&#34;, // id group,&#xA;    [&#34;abcd@s.whatsapp.net&#34;, &#34;efgh@s.whatsapp.net&#34;],&#xA;    &#34;approve&#34; // replace this parameter with &#34;reject&#34; &#xA;)&#xA;console.log(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get the privacy settings &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const privacySettings = await sock.fetchPrivacySettings(true)&#xA;console.log(&#34;privacy settings: &#34; + privacySettings)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the LastSeen privacy &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const value = &#39;all&#39; // &#39;contacts&#39; | &#39;contact_blacklist&#39; | &#39;none&#39;&#xA;await sock.updateLastSeenPrivacy(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the Online privacy &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const value = &#39;all&#39; // &#39;match_last_seen&#39;&#xA;await sock.updateOnlinePrivacy(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the Profile Picture privacy &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const value = &#39;all&#39; // &#39;contacts&#39; | &#39;contact_blacklist&#39; | &#39;none&#39;&#xA;await sock.updateProfilePicturePrivacy(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the Status privacy &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const value = &#39;all&#39; // &#39;contacts&#39; | &#39;contact_blacklist&#39; | &#39;none&#39;&#xA;await sock.updateStatusPrivacy(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the Read Receipts privacy &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const value = &#39;all&#39; // &#39;none&#39;&#xA;await sock.updateReadReceiptsPrivacy(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the Groups Add privacy &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const value = &#39;all&#39; // &#39;contacts&#39; | &#39;contact_blacklist&#39; | &#39;none&#39;&#xA;await sock.updateGroupsAddPrivacy(value)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To update the Default Disappearing Mode &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const duration = 86400 // 604800 | 7776000 | 0 &#xA;await sock.updateDefaultDisappearingMode(duration)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Broadcast Lists &amp;amp; Stories&lt;/h2&gt; &#xA;&lt;p&gt;Messages can be sent to broadcasts &amp;amp; stories. you need to add the following message options in sendMessage, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;sock.sendMessage(jid, {image: {url: url}, caption: caption}, {backgroundColor : backgroundColor, font : font, statusJidList: statusJidList, broadcast : true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;the message body can be a extendedTextMessage or imageMessage or videoMessage or voiceMessage&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can add backgroundColor and other options in the message options&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;broadcast: true enables broadcast mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;statusJidList: a list of people that you can get which you need to provide, which are the people who will get this status message.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can send messages to broadcast lists the same way you send messages to groups &amp;amp; individual chats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Right now, WA Web does not support creating broadcast lists, but you can still delete them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Broadcast IDs are in the format &lt;code&gt;12345678@broadcast&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To query a broadcast list&#39;s recipients &amp;amp; name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const bList = await sock.getBroadcastListInfo(&#34;1234@broadcast&#34;)&#xA;console.log (`list name: ${bList.name}, recps: ${bList.recipients}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writing Custom Functionality&lt;/h2&gt; &#xA;&lt;p&gt;Baileys is written with custom functionality in mind. Instead of forking the project &amp;amp; re-writing the internals, you can simply write your own extensions.&lt;/p&gt; &#xA;&lt;p&gt;First, enable the logging of unhandled messages from WhatsApp by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const sock = makeWASocket({&#xA;    logger: P({ level: &#39;debug&#39; }),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable you to see all sorts of messages WhatsApp sends in the console.&lt;/p&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Functionality to track the battery percentage of your phone. You enable logging and you&#39;ll see a message about your battery pop up in the console: &lt;code&gt;{&#34;level&#34;:10,&#34;fromMe&#34;:false,&#34;frame&#34;:{&#34;tag&#34;:&#34;ib&#34;,&#34;attrs&#34;:{&#34;from&#34;:&#34;@s.whatsapp.net&#34;},&#34;content&#34;:[{&#34;tag&#34;:&#34;edge_routing&#34;,&#34;attrs&#34;:{},&#34;content&#34;:[{&#34;tag&#34;:&#34;routing_info&#34;,&#34;attrs&#34;:{},&#34;content&#34;:{&#34;type&#34;:&#34;Buffer&#34;,&#34;data&#34;:[8,2,8,5]}}]}]},&#34;msg&#34;:&#34;communication&#34;} &lt;/code&gt;&lt;/p&gt; &lt;p&gt;The &#34;frame&#34; is what the message received is, it has three components:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tag&lt;/code&gt; -- what this frame is about (eg. message will have &#34;message&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;attrs&lt;/code&gt; -- a string key-value pair with some metadata (contains ID of the message usually)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;content&lt;/code&gt; -- the actual data (eg. a message node will have the actual message content in it)&lt;/li&gt; &#xA;   &lt;li&gt;read more about this format &lt;a href=&#34;https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/src/WABinary/readme.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You can register a callback for an event using the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for any message with tag &#39;edge_routing&#39;&#xA;sock.ws.on(`CB:edge_routing`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39; and id attribute = abcd&#xA;sock.ws.on(`CB:edge_routing,id:abcd`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39;, id attribute = abcd &amp;amp; first content node routing_info&#xA;sock.ws.on(`CB:edge_routing,id:abcd,routing_info`, (node: BinaryNode) =&amp;gt; { })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Also, this repo is now licenced under GPL 3 since it uses &lt;a href=&#34;https://git.questbook.io/backend/service-coderunner/-/merge_requests/1&#34;&gt;libsignal-node&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LukeMathWalker/zero-to-production</title>
    <updated>2024-04-30T01:24:50Z</updated>
    <id>tag:github.com,2024-04-30:/LukeMathWalker/zero-to-production</id>
    <link href="https://github.com/LukeMathWalker/zero-to-production" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for &#34;Zero To Production In Rust&#34;, a book on API development using Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zero To Production In Rust&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://zero2prod.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.zero2prod.com/assets/img/zero2prod.png&#34; width=&#34;75%&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zero2prod.com&#34;&gt;Zero To Production In Rust&lt;/a&gt; is an opinionated introduction to backend development using Rust.&lt;/p&gt; &#xA;&lt;p&gt;This repository serves as supplementary material for &lt;a href=&#34;https://zero2prod.com/&#34;&gt;the book&lt;/a&gt;: it hosts several snapshots of the codebase for our email newsletter project as it evolves throughout the book.&lt;/p&gt; &#xA;&lt;h2&gt;Chapter snapshots&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; branch shows the project at the end of the book.&lt;/p&gt; &#xA;&lt;p&gt;You can browse the project at the end of previous chapters by switching to their dedicated branches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-03-part0&#34;&gt;Chapter 3, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-03-part1&#34;&gt;Chapter 3, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-04&#34;&gt;Chapter 4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-05&#34;&gt;Chapter 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-06-part0&#34;&gt;Chapter 6, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-06-part1&#34;&gt;Chapter 6, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-07-part0&#34;&gt;Chapter 7, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-07-part1&#34;&gt;Chapter 7, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-07-part2&#34;&gt;Chapter 7, Part 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-08&#34;&gt;Chapter 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-09&#34;&gt;Chapter 9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part0&#34;&gt;Chapter 10, Part 0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part1&#34;&gt;Chapter 10, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part2&#34;&gt;Chapter 10, Part 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-10-part3&#34;&gt;Chapter 10, Part 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/tree/root-chapter-11&#34;&gt;Chapter 11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need to install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also some OS-specific requirements.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo install -f cargo-binutils&#xA;rustup component add llvm-tools-preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --version=&#34;~0.7&#34; sqlx-cli --no-default-features --features rustls,postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Ubuntu &#xA;sudo apt-get install lld clang libssl-dev postgresql-client&#xA;# Arch &#xA;sudo pacman -S lld clang postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --version=&#34;~0.7&#34; sqlx-cli --no-default-features --features rustls,postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install michaeleisel/zld/zld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cargo install --version=&#34;~0.7&#34; sqlx-cli --no-default-features --features rustls,postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Launch a (migrated) Postgres database via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_db.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch a Redis instance via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_redis.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now try with opening a browser on &lt;a href=&#34;http://127.0.0.1:8000/login&#34;&gt;http://127.0.0.1:8000/login&lt;/a&gt; after having launch the web server with &lt;code&gt;cargo run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a default &lt;code&gt;admin&lt;/code&gt; account with password &lt;code&gt;everythinghastostartsomewhere&lt;/code&gt;. The available entrypoints are listed in &lt;a href=&#34;https://github.com/LukeMathWalker/zero-to-production/raw/6bd30650cb8670a146819a342ccefd3d73ed5085/src/startup.rs#L92&#34;&gt;src/startup.rs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;Launch a (migrated) Postgres database via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_db.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch a Redis instance via Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/init_redis.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo test &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>