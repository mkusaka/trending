<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-09T01:38:33Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paul-gauthier/aider</title>
    <updated>2024-06-09T01:38:33Z</updated>
    <id>tag:github.com,2024-06-09:/paul-gauthier/aider</id>
    <link href="https://github.com/paul-gauthier/aider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;aider is AI pair programming in your terminal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aider is AI pair programming in your terminal&lt;/h1&gt; &#xA;&lt;p&gt;Aider lets you pair program with LLMs, to edit code in your local git repository. Start a new project or work with an existing git repo. Aider works best with GPT-4o and Claude 3 Opus and can &lt;a href=&#34;https://aider.chat/docs/llms.html&#34;&gt;connect to almost any LLM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://aider.chat/assets/screencast.svg?sanitize=true&#34; alt=&#34;aider screencast&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/Tv2uQnR88V&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Join-Discord-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://aider.chat/docs/install.html&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Read-Docs-green.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You can get started quickly like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install aider-chat&#xA;&#xA;# To work with GPT-4o&#xA;$ export OPENAI_API_KEY=your-key-goes-here&#xA;$ aider &#xA;&#xA;# To work with Claude 3 Opus:&#xA;$ export ANTHROPIC_API_KEY=your-key-goes-here&#xA;$ aider --opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;See the &lt;a href=&#34;https://aider.chat/docs/install.html&#34;&gt;installation instructions&lt;/a&gt; and other &lt;a href=&#34;https://aider.chat/docs/usage.html&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with aider about your code: &lt;code&gt;aider &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ask for changes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;New features, test cases, improvements.&lt;/li&gt; &#xA;   &lt;li&gt;Bug fixes, updated docs or code refactors.&lt;/li&gt; &#xA;   &lt;li&gt;Paste in a GitHub issue that needs to be solved.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Aider will edit your files to complete your request.&lt;/li&gt; &#xA; &lt;li&gt;Aider &lt;a href=&#34;https://aider.chat/docs/git.html&#34;&gt;automatically git commits&lt;/a&gt; changes with a sensible commit message.&lt;/li&gt; &#xA; &lt;li&gt;Aider works with &lt;a href=&#34;https://aider.chat/docs/languages.html&#34;&gt;most popular languages&lt;/a&gt;: python, javascript, typescript, php, html, css, and more...&lt;/li&gt; &#xA; &lt;li&gt;Aider works best with GPT-4o and Claude 3 Opus and can &lt;a href=&#34;https://aider.chat/docs/llms.html&#34;&gt;connect to almost any LLM&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Aider can make coordinated changes across multiple files at once.&lt;/li&gt; &#xA; &lt;li&gt;Aider uses a &lt;a href=&#34;https://aider.chat/docs/repomap.html&#34;&gt;map of your entire git repo&lt;/a&gt;, which helps it work well in larger codebases.&lt;/li&gt; &#xA; &lt;li&gt;You can also edit files in your editor while chatting with aider. Aider will notice and always use the latest version. So you can bounce back and forth between aider and your editor, to collaboratively code with AI.&lt;/li&gt; &#xA; &lt;li&gt;Images can be added to the chat (GPT-4o, GPT-4 Turbo, etc).&lt;/li&gt; &#xA; &lt;li&gt;URLs can be added to the chat and aider will read their content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/voice.html&#34;&gt;Code with your voice&lt;/a&gt; using speech recognition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;State of the art&lt;/h2&gt; &#xA;&lt;p&gt;Aider has the &lt;a href=&#34;https://aider.chat/2024/06/02/main-swe-bench.html&#34;&gt;top score on SWE Bench&lt;/a&gt;. SWE Bench is a challenging software engineering benchmark where aider solved &lt;em&gt;real&lt;/em&gt; GitHub issues from popular open source projects like django, scikitlearn, matplotlib, etc.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://aider.chat/2024/06/02/main-swe-bench.html&#34;&gt; &lt;img src=&#34;https://aider.chat/assets/swe_bench.svg?sanitize=true&#34; alt=&#34;aider swe bench&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/install.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/usage.html&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/tutorials.html&#34;&gt;Tutorial videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/llms.html&#34;&gt;Connecting to LLMs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/leaderboards/&#34;&gt;LLM Leaderboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/docs/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/Tv2uQnR88V&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aider.chat/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kind words from users&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;The best AI coding assistant so far.&lt;/em&gt; -- &lt;a href=&#34;https://www.youtube.com/watch?v=df8afeb1FY8&#34;&gt;Matthew Berman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Hands down, this is the best AI coding assistant tool so far.&lt;/em&gt; -- &lt;a href=&#34;https://www.youtube.com/watch?v=MPYFPvxfGZs&#34;&gt;IndyDevDan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Aider ... has easily quadrupled my coding productivity.&lt;/em&gt; -- &lt;a href=&#34;https://news.ycombinator.com/item?id=36212100&#34;&gt;SOLAR_FIELDS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;It&#39;s a cool workflow... Aider&#39;s ergonomics are perfect for me.&lt;/em&gt; -- &lt;a href=&#34;https://news.ycombinator.com/item?id=38185326&#34;&gt;qup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;It&#39;s really like having your senior developer live right in your Git repo - truly amazing!&lt;/em&gt; -- &lt;a href=&#34;https://github.com/paul-gauthier/aider/issues/124&#34;&gt;rappster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;What an amazing tool. It&#39;s incredible.&lt;/em&gt; -- &lt;a href=&#34;https://github.com/paul-gauthier/aider/issues/6#issue-1722897858&#34;&gt;valyagolev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Aider is such an astounding thing!&lt;/em&gt; -- &lt;a href=&#34;https://github.com/paul-gauthier/aider/issues/82#issuecomment-1631876700&#34;&gt;cgrothaus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;It was WAY faster than I would be getting off the ground and making the first few working versions.&lt;/em&gt; -- &lt;a href=&#34;https://twitter.com/d_feldman/status/1662295077387923456&#34;&gt;Daniel Feldman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;THANK YOU for Aider! It really feels like a glimpse into the future of coding.&lt;/em&gt; -- &lt;a href=&#34;https://news.ycombinator.com/item?id=38205643&#34;&gt;derwiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;It&#39;s just amazing. It is freeing me to do things I felt were out my comfort zone before.&lt;/em&gt; -- &lt;a href=&#34;https://discord.com/channels/1131200896827654144/1174002618058678323/1174084556257775656&#34;&gt;Dougie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;This project is stellar.&lt;/em&gt; -- &lt;a href=&#34;https://github.com/paul-gauthier/aider/issues/112#issuecomment-1637429008&#34;&gt;funkytaco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Amazing project, definitely the best AI coding assistant I&#39;ve used.&lt;/em&gt; -- &lt;a href=&#34;https://github.com/paul-gauthier/aider/issues/84&#34;&gt;joshuavial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;I absolutely love using Aider ... It makes software development feel so much lighter as an experience.&lt;/em&gt; -- &lt;a href=&#34;https://discord.com/channels/1131200896827654144/1133421607499595858/1229689636012691468&#34;&gt;principalideal0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;I have been recovering from multiple shoulder surgeries ... and have used aider extensively. It has allowed me to continue productivity.&lt;/em&gt; -- &lt;a href=&#34;https://www.reddit.com/r/OpenAI/s/nmNwkHy1zG&#34;&gt;codeninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;I am an aider addict. I&#39;m getting so much more work done, but in less time.&lt;/em&gt; -- &lt;a href=&#34;https://discord.com/channels/1131200896827654144/1131200896827654149/1135913253483069470&#34;&gt;dandandan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;After wasting $100 on tokens trying to find something better, I&#39;m back to Aider. It blows everything else out of the water hands down, there&#39;s no competition whatsoever.&lt;/em&gt; -- &lt;a href=&#34;https://discord.com/channels/1131200896827654144/1131200896827654149/1178736602797846548&#34;&gt;SystemSculpt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Best agent for actual dev work in existing codebases.&lt;/em&gt; -- &lt;a href=&#34;https://twitter.com/NickADobos/status/1690408967963652097?s=20&#34;&gt;Nick Dobos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jianchang512/pyvideotrans</title>
    <updated>2024-06-09T01:38:33Z</updated>
    <id>tag:github.com,2024-06-09:/jianchang512/pyvideotrans</id>
    <link href="https://github.com/jianchang512/pyvideotrans" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Translate the video from one language to another and add dubbing. 将视频从一种语言翻译为另一种语言，并添加配音&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jianchang512/pyvideotrans/main/README_EN.md&#34;&gt;English Readme&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/jianchang512/pyvideotrans/main/about.md&#34;&gt;👑捐助该项目&lt;/a&gt; / &lt;a href=&#34;https://discord.gg/mTh5Cu5Bqm&#34;&gt;Discord邀请链接&lt;/a&gt; / 微信公众号：搜一搜“ pyvideotrans ”&lt;/p&gt; &#xA;&lt;h1&gt;视频翻译配音工具&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是一个视频翻译配音工具，可将一种语言的视频翻译为指定语言的视频，自动生成和添加该语言的字幕和配音。&lt;/p&gt; &#xA; &lt;p&gt;语音识别支持 &lt;code&gt;faster-whisper&lt;/code&gt;模型 &lt;code&gt;openai-whisper&lt;/code&gt;模型 和 &lt;code&gt;GoogleSpeech&lt;/code&gt; &lt;code&gt;zh_recogn阿里中文语音识别模型&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;文字翻译支持 &lt;code&gt;微软翻译|Google翻译|百度翻译|腾讯翻译|ChatGPT|AzureAI|Gemini|DeepL|DeepLX|离线翻译OTT&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;文字合成语音支持 &lt;code&gt;Microsoft Edge tts&lt;/code&gt; &lt;code&gt;Google tts&lt;/code&gt; &lt;code&gt;Azure AI TTS&lt;/code&gt; &lt;code&gt;Openai TTS&lt;/code&gt; &lt;code&gt;Elevenlabs TTS&lt;/code&gt; &lt;code&gt;自定义TTS服务器api&lt;/code&gt; &lt;code&gt;GPT-SoVITS&lt;/code&gt; &lt;a href=&#34;https://github.com/jianchang512/clone-voice&#34;&gt;clone-voice&lt;/a&gt; &lt;a href=&#34;https://github.com/jianchang512/ChatTTS-ui&#34;&gt;ChatTTS-ui&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;允许保留背景伴奏音乐等(基于uvr5)&lt;/p&gt; &#xA; &lt;p&gt;支持的语言：中文简繁、英语、韩语、日语、俄语、法语、德语、意大利语、西班牙语、葡萄牙语、越南语、泰国语、阿拉伯语、土耳其语、匈牙利语、印度语、乌克兰语、哈萨克语、印尼语、马来语、捷克语&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;主要用途和使用方式&lt;/h1&gt; &#xA;&lt;p&gt;【翻译视频并配音】将视频中的声音翻译为另一种语言的配音，并嵌入该语言字幕&lt;/p&gt; &#xA;&lt;p&gt;【音频或视频转为字幕】将音频、视频文件中的人类说话声，识别为文字并导出为srt字幕文件&lt;/p&gt; &#xA;&lt;p&gt;【批量字幕创建配音】根据本地已有的srt字幕文件创建配音，支持单个或批量字幕&lt;/p&gt; &#xA;&lt;p&gt;【批量字幕翻译】将一个或多个srt字幕文件翻译为其他语言的字幕文件&lt;/p&gt; &#xA;&lt;p&gt;【音频、视频、字幕合并】音频文件、视频文件、字幕文件合并为一个视频文件&lt;/p&gt; &#xA;&lt;p&gt;【从视频中分离出音频】从视频中分离为音频文件和无声视频&lt;/p&gt; &#xA;&lt;p&gt;【下载油管视频】可从youtube上下载视频&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianchang512/pyvideotrans/assets/3378335/3811217a-26c8-4084-ba24-7a95d2e13d58&#34;&gt;https://github.com/jianchang512/pyvideotrans/assets/3378335/3811217a-26c8-4084-ba24-7a95d2e13d58&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;预打包版本(仅win10/win11可用，MacOS/Linux系统使用源码部署)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;使用pyinstaller打包，未做免杀和签名，杀软可能报毒，请加入信任名单或使用源码部署&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;[点击去下载预打包版,解压到无空格的英文目录后，双击 sp.exe (https://github.com/jianchang512/pyvideotrans/releases)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;解压到英文路径下，并且路径中不含有空格。解压后双击 sp.exe (若遇到权限问题可右键使用管理员权限打开)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;注意：必须解压后使用，不可直接压缩包内双击使用，也不可解压后移动sp.exe文件到其他位置&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;MacOS源码部署&lt;/h1&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;打开终端窗口，分别执行如下命令&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;执行前确保已安装 Homebrew，如果你没有安装 Homebrew,那么需要先安装&lt;/p&gt; &#xA;   &lt;p&gt;执行命令安装 Homebrew： &lt;code&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;   &lt;p&gt;安装完成后，执行： &lt;code&gt;eval $(brew --config)&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code&gt;brew install libsndfile&#xA;&#xA;brew install ffmpeg&#xA;&#xA;brew install git&#xA;&#xA;brew install python@3.10&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;继续执行&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export PATH=&#34;/usr/local/opt/python@3.10/bin:$PATH&#34;&#xA;&#xA;source ~/.bash_profile &#xA;&#xA;source ~/.zshrc&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;创建不含空格和中文的文件夹，在终端中进入该文件夹。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;终端中执行命令 &lt;code&gt;git clone https://github.com/jianchang512/pyvideotrans &lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;执行命令 &lt;code&gt;cd pyvideotrans&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行 &lt;code&gt;python -m venv venv&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行命令 &lt;code&gt;source ./venv/bin/activate&lt;/code&gt;，执行完毕查看确认终端命令提示符已变成已&lt;code&gt;(venv)&lt;/code&gt;开头,以下命令必须确定终端提示符是以&lt;code&gt;(venv)&lt;/code&gt;开头&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;执行 &lt;code&gt;pip install -r requirements.txt --no-deps&lt;/code&gt;，如果提示失败，执行如下2条命令切换pip镜像到阿里镜像&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/&#xA;pip config set install.trusted-host mirrors.aliyun.com&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;然后重新执行 如果已切换到阿里镜像源，仍提示失败，请尝试执行 &lt;code&gt;pip install -r requirements.txt --ignore-installed --no-deps &lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python sp.py&lt;/code&gt; 打开软件界面&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pyvideotrans.com/mac.html&#34;&gt;Mac下详细部署方案&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Linux 源码部署&lt;/h1&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;CentOS/RHEL系依次执行如下命令安装 python3.10&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;sudo yum update&#xA;&#xA;sudo yum groupinstall &#34;Development Tools&#34;&#xA;&#xA;sudo yum install openssl-devel bzip2-devel libffi-devel&#xA;&#xA;cd /tmp&#xA;&#xA;wget https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz&#xA;&#xA;tar xzf Python-3.10.4.tgz&#xA;&#xA;cd Python-3.10.4&#xA;&#xA;./configure — enable-optimizations&#xA;&#xA;sudo make &amp;amp;&amp;amp; sudo make install&#xA;&#xA;sudo alternatives — install /usr/bin/python3 python3 /usr/local/bin/python3.10&#xA;&#xA;sudo yum install -y ffmpeg&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ubuntu/Debian系执行如下命令安装python3.10&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;apt update &amp;amp;&amp;amp; apt upgrade -y&#xA;&#xA;apt install software-properties-common -y&#xA;&#xA;add-apt-repository ppa:deadsnakes/ppa&#xA;&#xA;apt update&#xA;&#xA;sudo apt-get install libxcb-cursor0&#xA;&#xA;apt install python3.10&#xA;&#xA;curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10&#xA;&#xA;pip 23.2.1 from /usr/local/lib/python3.10/site-packages/pip (python 3.10)&#xA;&#xA;sudo update-alternatives --install /usr/bin/python python /usr/local/bin/python3.10 &#xA;&#xA;sudo update-alternatives --config python&#xA;&#xA;apt-get install ffmpeg&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;打开任意一个终端，执行 &lt;code&gt;python3 -V&lt;/code&gt;，如果显示 “3.10.4”，说明安装成功，否则失败&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;创建个不含空格和中文的文件夹， 从终端打开该文件夹。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;终端中执行命令 &lt;code&gt;git clone https://github.com/jianchang512/pyvideotrans&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行命令 &lt;code&gt;cd pyvideotrans&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行 &lt;code&gt;python -m venv venv&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行命令 &lt;code&gt;source ./venv/bin/activate&lt;/code&gt;，执行完毕查看确认终端命令提示符已变成已&lt;code&gt;(venv)&lt;/code&gt;开头,以下命令必须确定终端提示符是以&lt;code&gt;(venv)&lt;/code&gt;开头&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;执行 &lt;code&gt;pip install -r requirements.txt --no-deps&lt;/code&gt;，如果提示失败，执行如下2条命令切换pip镜像到阿里镜像&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#xA;pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/&#xA;pip config set install.trusted-host mirrors.aliyun.com&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;然后重新执行,如果已切换到阿里镜像源，仍提示失败，请尝试执行 &lt;code&gt;pip install -r requirements.txt --ignore-installed --no-deps &lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果要使用CUDA加速，分别执行&lt;/p&gt; &lt;p&gt;&lt;code&gt;pip uninstall -y torch torchaudio&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu118&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;pip install nvidia-cublas-cu11 nvidia-cudnn-cu11&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;linux 如果要启用cuda加速，必须有英伟达显卡，并且配置好了CUDA11.8+环境,请自行搜索 &#34;Linux CUDA 安装&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python sp.py&lt;/code&gt; 打开软件界面&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Window10/11 源码部署&lt;/h1&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;打开 &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt; 下载 windows3.10，下载后双击，一路next，注意要选中“Add to PATH”&lt;/p&gt; &lt;p&gt;&lt;strong&gt;打开一个cmd，执行 &lt;code&gt;python -V&lt;/code&gt;，如果输出不是 &lt;code&gt;3.10.4&lt;/code&gt;,说明安装出错，或没有加入 &lt;code&gt;Add to PATH&lt;/code&gt;,请重新安装&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打开 &lt;a href=&#34;https://github.com/git-for-windows/git/releases/download/v2.45.0.windows.1/Git-2.45.0-64-bit.exe&#34;&gt;https://github.com/git-for-windows/git/releases/download/v2.45.0.windows.1/Git-2.45.0-64-bit.exe&lt;/a&gt; ，下载git，下载后双击一路下一步。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;找个不含空格和中文的文件夹，地址栏中输入 &lt;code&gt;cmd&lt;/code&gt;回车，打开终端，以下命令均在该终端中执行&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;执行命令 &lt;code&gt;git clone https://github.com/jianchang512/pyvideotrans&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行命令 &lt;code&gt;cd pyvideotrans&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行 &lt;code&gt;python -m venv venv&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;继续执行命令 &lt;code&gt;.\venv\scripts\activate&lt;/code&gt;,执行后请查看确认命令行开头已变成了&lt;code&gt;(venv)&lt;/code&gt;,否则说明出错&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;执行 &lt;code&gt;pip install -r requirements.txt --no-deps&lt;/code&gt;，如果提示失败，执行如下2条命令切换pip镜像到阿里镜像&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#xA;pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/&#xA;pip config set install.trusted-host mirrors.aliyun.com&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;然后重新执行,如果已切换到阿里镜像源，仍提示失败，请尝试执行 &lt;code&gt;pip install -r requirements.txt --ignore-installed --no-deps &lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果要使用CUDA加速，分别执行&lt;/p&gt; &lt;p&gt;&lt;code&gt;pip uninstall -y torch torchaudio&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu118&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;windows 如果要启用cuda加速，必须有英伟达显卡，并且配置好了CUDA11.8+环境，具体安装见 &lt;a href=&#34;https://pyvideotrans.com/gpu.html&#34;&gt;CUDA加速支持&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;解压 ffmpeg.zip 到当前源码目录下，提示覆盖则覆盖，解压后确保源码下的ffmepg文件夹内能看到 ffmpeg.exe ffprobe.exe ytwin32.exe,&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;python sp.py&lt;/code&gt; 打开软件界面&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;源码部署问题说明&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;默认使用 ctranslate2的4.x版本，仅支持CUDA12.x版本，如果你的cuda低于12，并且无法升级cuda到12.x，请执行命令卸载ctranslate2然后重新安装&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;pip uninstall -y ctranslate2&#xA;&#xA;pip install ctranslate2==3.24.0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;可能会遇到 &lt;code&gt;xx module not found &lt;/code&gt; 之类错误，请打开 requirements.txt，搜索该 xx 模块，然后将xx后的 ==及等会后的版本号去掉&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;使用教程和文档&lt;/h1&gt; &#xA;&lt;p&gt;请查看 &lt;a href=&#34;https://pyvideotrans.com/guide.html&#34;&gt;https://pyvideotrans.com/guide.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;语音识别模型:&lt;/h1&gt; &#xA;&lt;p&gt;下载地址： &lt;a href=&#34;https://pyvideotrans.com/model.html&#34;&gt;https://pyvideotrans.com/model.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;模型说明和区别介绍：&lt;a href=&#34;https://pyvideotrans.com/02.html&#34;&gt;https://pyvideotrans.com/02.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;视频教程(第三方)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1tK421y7rd/&#34;&gt;Mac下源码部署/b站&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://b23.tv/fED1dS3&#34;&gt;用Gemini Api 给视频翻译设置方法/b站&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Gr421s7cN/&#34;&gt;如何下载和安装&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;软件预览截图&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jianchang512/pyvideotrans/assets/3378335/c410a307-8e1e-4b52-a24c-75647b012f65&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;相关联项目&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianchang512/ott&#34;&gt;OTT:本地离线文字翻译工具&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianchang512/clone-voice&#34;&gt;声音克隆工具:用任意音色合成语音&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianchang512/stt&#34;&gt;语音识别工具:本地离线的语音识别转文字工具&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianchang512/vocal-separate&#34;&gt;人声背景乐分离:人声和背景音乐分离工具&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jianchang512/gptsovits-api&#34;&gt;GPT-SoVITS的api.py改良版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本程序主要依赖的部分开源项目&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ffmpeg&lt;/li&gt; &#xA; &lt;li&gt;PySide6&lt;/li&gt; &#xA; &lt;li&gt;edge-tts&lt;/li&gt; &#xA; &lt;li&gt;faster-whisper&lt;/li&gt; &#xA; &lt;li&gt;openai-whisper&lt;/li&gt; &#xA; &lt;li&gt;pydub&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;关注作者微信公众号&lt;/h2&gt; &#xA;&lt;img width=&#34;200&#34; src=&#34;https://github.com/jianchang512/pyvideotrans/assets/3378335/f9337111-9084-41fe-8840-1fb8fedca92d&#34;&gt; &#xA;&lt;p&gt;如果觉得该项目对你有价值，并希望该项目能一直稳定持续维护，欢迎捐助&lt;/p&gt; &#xA;&lt;img width=&#34;200&#34; src=&#34;https://github.com/jianchang512/pyvideotrans/raw/main/images/wx.png&#34;&gt; &#xA;&lt;img width=&#34;200&#34; src=&#34;https://github.com/jianchang512/pyvideotrans/assets/3378335/fe1aa29d-c26d-46d3-b7f3-e9c030ef32c7&#34;&gt;</summary>
  </entry>
  <entry>
    <title>duckdb/duckdb</title>
    <updated>2024-06-09T01:38:33Z</updated>
    <id>tag:github.com,2024-06-09:/duckdb/duckdb</id>
    <link href="https://github.com/duckdb/duckdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DuckDB is an analytical in-process SQL database management system&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;logo/DuckDB_Logo-horizontal.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;logo/DuckDB_Logo-horizontal-dark-mode.svg&#34;&gt; &#xA;  &lt;img alt=&#34;DuckDB logo&#34; src=&#34;https://raw.githubusercontent.com/duckdb/duckdb/main/logo/DuckDB_Logo-horizontal.svg?sanitize=true&#34; height=&#34;100&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/duckdb/duckdb/actions&#34;&gt;&lt;img src=&#34;https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main&#34; alt=&#34;Github Actions Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/tcvwpjfnZx&#34;&gt;&lt;img src=&#34;https://shields.io/discord/909674491309850675&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/duckdb/duckdb/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&amp;amp;display_name=tag&amp;amp;logo=duckdb&amp;amp;logoColor=white&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;DuckDB&lt;/h2&gt; &#xA;&lt;p&gt;DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and &lt;a href=&#34;https://duckdb.org/docs/guides/sql_features/friendly_sql&#34;&gt;several extensions designed to make SQL easier to use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;DuckDB is available as a &lt;a href=&#34;https://duckdb.org/docs/api/cli/overview&#34;&gt;standalone CLI application&lt;/a&gt; and has clients for &lt;a href=&#34;https://duckdb.org/docs/api/python/overview&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://duckdb.org/docs/api/r&#34;&gt;R&lt;/a&gt;, &lt;a href=&#34;https://duckdb.org/docs/api/java&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://duckdb.org/docs/api/wasm/overview&#34;&gt;Wasm&lt;/a&gt;, etc., with deep integrations with packages such as &lt;a href=&#34;https://duckdb.org/docs/guides/python/sql_on_pandas&#34;&gt;pandas&lt;/a&gt; and &lt;a href=&#34;https://duckdblabs.github.io/duckplyr/&#34;&gt;dplyr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on using DuckDB, please refer to the &lt;a href=&#34;https://duckdb.org/docs/&#34;&gt;DuckDB documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to install DuckDB, please see &lt;a href=&#34;https://www.duckdb.org/docs/installation&#34;&gt;our installation page&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Data Import&lt;/h2&gt; &#xA;&lt;p&gt;For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM &#39;myfile.csv&#39;;&#xA;SELECT * FROM &#39;myfile.parquet&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to our &lt;a href=&#34;https://duckdb.org/docs/data/overview&#34;&gt;Data Import&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;h2&gt;SQL Reference&lt;/h2&gt; &#xA;&lt;p&gt;The documentation contains a &lt;a href=&#34;https://duckdb.org/docs/sql/introduction&#34;&gt;SQL introduction and reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For development, DuckDB requires &lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;, Python3 and a &lt;code&gt;C++11&lt;/code&gt; compliant compiler. Run &lt;code&gt;make&lt;/code&gt; in the root directory to compile the sources. For development, use &lt;code&gt;make debug&lt;/code&gt; to build a non-optimized debug version. You should run &lt;code&gt;make unit&lt;/code&gt; and &lt;code&gt;make allunit&lt;/code&gt; to verify that your version works properly after making changes. To test performance, you can run &lt;code&gt;BUILD_BENCHMARK=1 BUILD_TPCH=1 make&lt;/code&gt; and then perform several standard benchmarks from the root directory by executing &lt;code&gt;./build/release/benchmark/benchmark_runner&lt;/code&gt;. The details of benchmarks are in our &lt;a href=&#34;https://raw.githubusercontent.com/duckdb/duckdb/main/benchmark/README.md&#34;&gt;Benchmark Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please also refer to our &lt;a href=&#34;https://duckdb.org/dev/building&#34;&gt;Build Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/duckdb/duckdb/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://duckdblabs.com/support/&#34;&gt;Support Options&lt;/a&gt; page.&lt;/p&gt;</summary>
  </entry>
</feed>