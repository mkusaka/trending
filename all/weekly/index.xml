<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T01:49:37Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MarkFzp/act-plus-plus</title>
    <updated>2024-01-14T01:49:37Z</updated>
    <id>tag:github.com,2024-01-14:/MarkFzp/act-plus-plus</id>
    <link href="https://github.com/MarkFzp/act-plus-plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Imitation learning algorithms with Co-training for Mobile ALOHA: ACT, Diffusion Policy, VINN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Imitation Learning algorithms and Co-training for Mobile ALOHA&lt;/h1&gt; &#xA;&lt;h4&gt;Project Website: &lt;a href=&#34;https://mobile-aloha.github.io/&#34;&gt;https://mobile-aloha.github.io/&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This repo contains the implementation of ACT, Diffusion Policy and VINN, together with 2 simulated environments: Transfer Cube and Bimanual Insertion. You can train and evaluate them in sim or real. For real, you would also need to install &lt;a href=&#34;https://github.com/MarkFzp/mobile-aloha&#34;&gt;Mobile ALOHA&lt;/a&gt;. This repo is forked from the &lt;a href=&#34;https://github.com/tonyzhaozh/act&#34;&gt;ACT repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Updates:&lt;/h3&gt; &#xA;&lt;p&gt;You can find all scripted/human demo for simulated environments &lt;a href=&#34;https://drive.google.com/drive/folders/1gPR03v05S1xiInoVJn7G7VJ9pDCnxq9O?usp=share_link&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Repo Structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;imitate_episodes.py&lt;/code&gt; Train and Evaluate ACT&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;policy.py&lt;/code&gt; An adaptor for ACT policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;detr&lt;/code&gt; Model definitions of ACT, modified from DETR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sim_env.py&lt;/code&gt; Mujoco + DM_Control environments with joint space control&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ee_sim_env.py&lt;/code&gt; Mujoco + DM_Control environments with EE space control&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripted_policy.py&lt;/code&gt; Scripted policies for sim environments&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;constants.py&lt;/code&gt; Constants shared across files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;utils.py&lt;/code&gt; Utils such as data loading and helper functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;visualize_episodes.py&lt;/code&gt; Save videos from a .hdf5 dataset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n aloha python=3.8.10&#xA;conda activate aloha&#xA;pip install torchvision&#xA;pip install torch&#xA;pip install pyquaternion&#xA;pip install pyyaml&#xA;pip install rospkg&#xA;pip install pexpect&#xA;pip install mujoco==2.3.7&#xA;pip install dm_control==1.0.14&#xA;pip install opencv-python&#xA;pip install matplotlib&#xA;pip install einops&#xA;pip install packaging&#xA;pip install h5py&#xA;pip install ipython&#xA;cd act/detr &amp;amp;&amp;amp; pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;also need to install &lt;a href=&#34;https://github.com/ARISE-Initiative/robomimic/tree/r2d2&#34;&gt;https://github.com/ARISE-Initiative/robomimic/tree/r2d2&lt;/a&gt; (note the r2d2 branch) for Diffusion Policy by &lt;code&gt;pip install -e .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example Usages&lt;/h3&gt; &#xA;&lt;p&gt;To set up a new terminal, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda activate aloha&#xA;cd &amp;lt;path to act repo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simulated experiments (LEGACY table-top ALOHA environments)&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;code&gt;sim_transfer_cube_scripted&lt;/code&gt; task in the examples below. Another option is &lt;code&gt;sim_insertion_scripted&lt;/code&gt;. To generated 50 episodes of scripted data, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 record_sim_episodes.py --task_name sim_transfer_cube_scripted --dataset_dir &amp;lt;data save dir&amp;gt; --num_episodes 50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To can add the flag &lt;code&gt;--onscreen_render&lt;/code&gt; to see real-time rendering. To visualize the simulated episodes after it is collected, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 visualize_episodes.py --dataset_dir &amp;lt;data save dir&amp;gt; --episode_idx 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: to visualize data from the mobile-aloha hardware, use the visualize_episodes.py from &lt;a href=&#34;https://github.com/MarkFzp/mobile-aloha&#34;&gt;https://github.com/MarkFzp/mobile-aloha&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To train ACT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Transfer Cube task&#xA;python3 imitate_episodes.py --task_name sim_transfer_cube_scripted --ckpt_dir &amp;lt;ckpt dir&amp;gt; --policy_class ACT --kl_weight 10 --chunk_size 100 --hidden_dim 512 --batch_size 8 --dim_feedforward 3200 --num_epochs 2000  --lr 1e-5 --seed 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To evaluate the policy, run the same command but add &lt;code&gt;--eval&lt;/code&gt;. This loads the best validation checkpoint. The success rate should be around 90% for transfer cube, and around 50% for insertion. To enable temporal ensembling, add flag &lt;code&gt;--temporal_agg&lt;/code&gt;. Videos will be saved to &lt;code&gt;&amp;lt;ckpt_dir&amp;gt;&lt;/code&gt; for each rollout. You can also add &lt;code&gt;--onscreen_render&lt;/code&gt; to see real-time rendering during evaluation.&lt;/p&gt; &#xA;&lt;p&gt;For real-world data where things can be harder to model, train for at least 5000 epochs or 3-4 times the length after the loss has plateaued. Please refer to &lt;a href=&#34;https://docs.google.com/document/d/1FVIZfoALXg_ZkYKaYVh-qOlaXveq5CtvJHXkY25eYhs/edit?usp=sharing&#34;&gt;tuning tips&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://docs.google.com/document/d/1FVIZfoALXg_ZkYKaYVh-qOlaXveq5CtvJHXkY25eYhs/edit?usp=sharing&#34;&gt;ACT tuning tips&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;TL;DR: if your ACT policy is jerky or pauses in the middle of an episode, just train for longer! Success rate and smoothness can improve way after loss plateaus.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joaomdmoura/crewAI-examples</title>
    <updated>2024-01-14T01:49:37Z</updated>
    <id>tag:github.com,2024-01-14:/joaomdmoura/crewAI-examples</id>
    <link href="https://github.com/joaomdmoura/crewAI-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Examples for crewAI&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;crewAI is designed to facilitate the collaboration of role-playing AI agents. This is a collection of examples of different ways to use the crewAI framework to automate the processes. By &lt;a href=&#34;https://x.com/joaomdmoura&#34;&gt;@joaomdmoura&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaomdmoura/crewAI-examples/tree/main/trip_planner&#34;&gt;Trip Planner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaomdmoura/crewAI-examples/tree/main/stock_analysis&#34;&gt;Stock Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaomdmoura/crewAI-examples/tree/main/landing_page_generator&#34;&gt;Landing Page Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaomdmoura/crewAI-examples/tree/main/instagram_post&#34;&gt;Create Instagram Post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaomdmoura/crewAI-examples/tree/main/markdown_validator&#34;&gt;Markdown Validator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaomdmoura/crewAI-examples/tree/main/azure_model&#34;&gt;Using Azure OpenAI API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>janhq/jan</title>
    <updated>2024-01-14T01:49:37Z</updated>
    <id>tag:github.com,2024-01-14:/janhq/jan</id>
    <link href="https://github.com/janhq/jan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jan is an open source alternative to ChatGPT that runs 100% offline on your computer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jan - Bring AI to your Desktop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/janhq/jan/assets/89722390/35daac7d-b895-487c-a6ac-6663daaad78e&#34; alt=&#34;Jan banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &lt;img alt=&#34;GitHub commit activity&#34; src=&#34;https://img.shields.io/github/commit-activity/m/janhq/jan&#34;&gt; &lt;img alt=&#34;Github Last Commit&#34; src=&#34;https://img.shields.io/github/last-commit/janhq/jan&#34;&gt; &lt;img alt=&#34;Github Contributors&#34; src=&#34;https://img.shields.io/github/contributors/janhq/jan&#34;&gt; &lt;img alt=&#34;GitHub closed issues&#34; src=&#34;https://img.shields.io/github/issues-closed/janhq/jan&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1107178041848909847?label=discord&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://jan.ai/guides&#34;&gt;Getting Started&lt;/a&gt; - &lt;a href=&#34;https://jan.ai/docs&#34;&gt;Docs&lt;/a&gt; - &lt;a href=&#34;https://github.com/janhq/jan/releases&#34;&gt;Changelog&lt;/a&gt; - &lt;a href=&#34;https://github.com/janhq/jan/issues&#34;&gt;Bug reports&lt;/a&gt; - &lt;a href=&#34;https://discord.gg/AsJ8krTT3N&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ &lt;strong&gt;Jan is currently in Development&lt;/strong&gt;: Expect breaking changes and bugs!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Jan is an open-source ChatGPT alternative that runs 100% offline on your computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Jan runs on any hardware.&lt;/strong&gt; From PCs to multi-GPU clusters, Jan supports universal architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nvidia GPUs (fast)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apple M-series (fast)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apple Intel&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux Debian&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows x64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;text-align:center&#34;&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt;&lt;b&gt;Version Type&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt;&lt;b&gt;Windows&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34; style=&#34;text-align:center&#34;&gt;&lt;b&gt;MacOS&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34; style=&#34;text-align:center&#34;&gt;&lt;b&gt;Linux&lt;/b&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr style=&#34;text-align:center&#34;&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt;&lt;b&gt;Stable (Recommended)&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://github.com/janhq/jan/releases/download/v0.4.3/jan-win-x64-0.4.3.exe&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/windows.png&#34; style=&#34;height:14px; width: 14px&#34;&gt; &lt;b&gt;jan.exe&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://github.com/janhq/jan/releases/download/v0.4.3/jan-mac-x64-0.4.3.dmg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/mac.png&#34; style=&#34;height:15px; width: 15px&#34;&gt; &lt;b&gt;Intel&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://github.com/janhq/jan/releases/download/v0.4.3/jan-mac-arm64-0.4.3.dmg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/mac.png&#34; style=&#34;height:15px; width: 15px&#34;&gt; &lt;b&gt;M1/M2&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://github.com/janhq/jan/releases/download/v0.4.3/jan-linux-amd64-0.4.3.deb&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/linux.png&#34; style=&#34;height:14px; width: 14px&#34;&gt; &lt;b&gt;jan.deb&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://github.com/janhq/jan/releases/download/v0.4.3/jan-linux-x86_64-0.4.3.AppImage&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/linux.png&#34; style=&#34;height:14px; width: 14px&#34;&gt; &lt;b&gt;jan.AppImage&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr style=&#34;text-align:center&#34;&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt;&lt;b&gt;Experimental (Nightly Build)&lt;/b&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://delta.jan.ai/0.4.3-143/jan-win-x64-0.4.3-143.exe&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/windows.png&#34; style=&#34;height:14px; width: 14px&#34;&gt; &lt;b&gt;jan.exe&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://delta.jan.ai/0.4.3-143/jan-mac-x64-0.4.3-143.dmg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/mac.png&#34; style=&#34;height:15px; width: 15px&#34;&gt; &lt;b&gt;Intel&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://delta.jan.ai/0.4.3-143/jan-mac-arm64-0.4.3-143.dmg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/mac.png&#34; style=&#34;height:15px; width: 15px&#34;&gt; &lt;b&gt;M1/M2&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://delta.jan.ai/0.4.3-143/jan-linux-amd64-0.4.3-143.deb&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/linux.png&#34; style=&#34;height:14px; width: 14px&#34;&gt; &lt;b&gt;jan.deb&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center&#34;&gt; &lt;a href=&#34;https://delta.jan.ai/0.4.3-143/jan-linux-x86_64-0.4.3-143.AppImage&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/docs/static/img/linux.png&#34; style=&#34;height:14px; width: 14px&#34;&gt; &lt;b&gt;jan.AppImage&lt;/b&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Download the latest version of Jan at &lt;a href=&#34;https://jan.ai/&#34;&gt;https://jan.ai/&lt;/a&gt; or visit the &lt;strong&gt;&lt;a href=&#34;https://github.com/janhq/jan/releases&#34;&gt;GitHub Releases&lt;/a&gt;&lt;/strong&gt; to download any previous release.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/janhq/jan/main/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Realtime Video: Jan v0.4.3-nightly on a Mac M1, 16GB Sonoma 14&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quicklinks&lt;/h2&gt; &#xA;&lt;h4&gt;Jan&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jan.ai/&#34;&gt;Jan website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janhq/jan&#34;&gt;Jan GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jan.ai/guides/&#34;&gt;User Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jan.ai/developer/&#34;&gt;Developer docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jan.ai/api-reference/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jan.ai/docs/&#34;&gt;Specs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Nitro&lt;/h4&gt; &#xA;&lt;p&gt;Nitro is a high-efficiency C++ inference engine for edge computing. It is lightweight and embeddable, and can be used on its own within your own projects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nitro.jan.ai&#34;&gt;Nitro Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janhq/nitro&#34;&gt;Nitro GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nitro.jan.ai/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nitro.jan.ai/api-reference&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;As Jan is in development mode, you might get stuck on a broken build.&lt;/p&gt; &#xA;&lt;p&gt;To reset your installation:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the following commands to remove any dangling backend processes:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ps aux | grep nitro&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Look for processes like &#34;nitro&#34; and &#34;nitro_arm_64,&#34; and kill them one by one with:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kill -9 &amp;lt;PID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove Jan from your Applications folder and Cache folder&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will remove all build artifacts and cached files:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Delete Jan extension from your &lt;code&gt;~/jan/extensions&lt;/code&gt; folder&lt;/li&gt; &#xA;   &lt;li&gt;Delete all &lt;code&gt;node_modules&lt;/code&gt; in current folder&lt;/li&gt; &#xA;   &lt;li&gt;Clear Application cache in &lt;code&gt;~/Library/Caches/jan&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements for running Jan&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS: 13 or higher&lt;/li&gt; &#xA; &lt;li&gt;Windows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 10 or higher&lt;/li&gt; &#xA;   &lt;li&gt;To enable GPU support: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Nvidia GPU with CUDA Toolkit 11.7 or higher&lt;/li&gt; &#xA;     &lt;li&gt;Nvidia driver 470.63.01 or higher&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;glibc 2.27 or higher (check with &lt;code&gt;ldd --version&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;gcc 11, g++ 11, cpp 11 or higher, refer to this &lt;a href=&#34;https://jan.ai/guides/troubleshooting/gpu-not-used/#specific-requirements-for-linux&#34;&gt;link&lt;/a&gt; for more information&lt;/li&gt; &#xA;   &lt;li&gt;To enable GPU support: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Nvidia GPU with CUDA Toolkit 11.7 or higher&lt;/li&gt; &#xA;     &lt;li&gt;Nvidia driver 470.63.01 or higher&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please read the &lt;a href=&#34;https://raw.githubusercontent.com/janhq/jan/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file&lt;/p&gt; &#xA;&lt;h3&gt;Pre-requisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;node &amp;gt;= 20.0.0&lt;/li&gt; &#xA; &lt;li&gt;yarn &amp;gt;= 1.22.0&lt;/li&gt; &#xA; &lt;li&gt;make &amp;gt;= 3.81&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository and prepare:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/janhq/jan&#xA;cd jan&#xA;git checkout -b DESIRED_BRANCH&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run development and use Jan Desktop&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will start the development server and open the desktop app.&lt;/p&gt; &#xA;&lt;h3&gt;For production build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Do steps 1 and 2 in the previous section&#xA;# Build the app&#xA;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the app MacOS m1/m2 for production (with code signing already done) and put the result in &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Jan builds on top of other open-source projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/TensorRT&#34;&gt;TensorRT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugs &amp;amp; requests: file a GitHub ticket&lt;/li&gt; &#xA; &lt;li&gt;For discussion: join our Discord &lt;a href=&#34;https://discord.gg/FTk2MvZwJH&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For business inquiries: email &lt;a href=&#34;mailto:hello@jan.ai&#34;&gt;hello@jan.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For jobs: please email &lt;a href=&#34;mailto:hr@jan.ai&#34;&gt;hr@jan.ai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Jan is free and open source, under the AGPLv3 license.&lt;/p&gt;</summary>
  </entry>
</feed>