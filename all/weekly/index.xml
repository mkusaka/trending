<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:41:13Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>astral-sh/uv</title>
    <updated>2024-02-25T01:41:13Z</updated>
    <id>tag:github.com,2024-02-25:/astral-sh/uv</id>
    <link href="https://github.com/astral-sh/uv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extremely fast Python package installer and resolver, written in Rust.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json&#34; alt=&#34;uv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/uv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/uv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/uv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/uv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/uv/actions&#34;&gt;&lt;img src=&#34;https://github.com/astral-sh/uv/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/astral-sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An extremely fast Python package installer and resolver, written in Rust. Designed as a drop-in replacement for &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;pip-compile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;uv is backed by &lt;a href=&#34;https://astral.sh&#34;&gt;Astral&lt;/a&gt;, the creators of &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚öñÔ∏è Drop-in replacement for common &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt; commands.&lt;/li&gt; &#xA; &lt;li&gt;‚ö°Ô∏è &lt;a href=&#34;https://github.com/astral-sh/uv/raw/main/BENCHMARKS.md&#34;&gt;10-100x faster&lt;/a&gt; than &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;pip-tools&lt;/code&gt; (&lt;code&gt;pip-compile&lt;/code&gt; and &lt;code&gt;pip-sync&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;üíæ Disk-space efficient, with a global cache for dependency deduplication.&lt;/li&gt; &#xA; &lt;li&gt;üêç Installable via &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pipx&lt;/code&gt;, etc. uv is a static binary that can be installed without Rust or Python.&lt;/li&gt; &#xA; &lt;li&gt;üß™ Tested at-scale against the top 10,000 PyPI packages.&lt;/li&gt; &#xA; &lt;li&gt;üñ•Ô∏è Support for macOS, Linux, and Windows.&lt;/li&gt; &#xA; &lt;li&gt;üß∞ Advanced features such as &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/#dependency-overrides&#34;&gt;dependency version overrides&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/#resolution-strategy&#34;&gt;alternative resolution strategies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;‚ÅâÔ∏è Best-in-class error messages with a conflict-tracking resolver.&lt;/li&gt; &#xA; &lt;li&gt;ü§ù Support for a wide range of advanced &lt;code&gt;pip&lt;/code&gt; features, including editable installs, Git dependencies, direct URL dependencies, local dependencies, constraints, source distributions, HTML and JSON indexes, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install uv with our standalone installers, or from &lt;a href=&#34;https://pypi.org/project/uv/&#34;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On macOS and Linux.&#xA;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;&#xA;# On Windows.&#xA;powershell -c &#34;irm https://astral.sh/uv/install.ps1 | iex&#34;&#xA;&#xA;# With pip.&#xA;pip install uv&#xA;&#xA;# With pipx.&#xA;pipx install uv&#xA;&#xA;# With Homebrew.&#xA;brew install uv&#xA;&#xA;# With Pacman.&#xA;pacman -S uv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv venv  # Create a virtual environment at .venv.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To activate the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# On macOS and Linux.&#xA;source .venv/bin/activate&#xA;&#xA;# On Windows.&#xA;.venv\Scripts\activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install a package into the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv pip install flask                # Install Flask.&#xA;uv pip install -r requirements.txt  # Install from a requirements.txt file.&#xA;uv pip install -e .                 # Install the current project in editable mode.&#xA;uv pip install &#34;package @ .&#34;        # Install the current project from disk&#xA;uv pip install &#34;flask[dotenv]&#34;      # Install Flask with &#34;dotenv&#34; extra.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a set of locked dependencies from an input file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv pip compile pyproject.toml -o requirements.txt   # Read a pyproject.toml file.&#xA;uv pip compile requirements.in -o requirements.txt  # Read a requirements.in file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To sync a set of locked dependencies with the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;uv pip sync requirements.txt  # Install from a requirements.txt file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;uv&#39;s &lt;code&gt;pip-install&lt;/code&gt; and &lt;code&gt;pip-compile&lt;/code&gt; commands support many of the same command-line arguments as existing tools, including &lt;code&gt;-r requirements.txt&lt;/code&gt;, &lt;code&gt;-c constraints.txt&lt;/code&gt;, &lt;code&gt;-e .&lt;/code&gt; (for editable installs), &lt;code&gt;--index-url&lt;/code&gt;, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;uv does not support the entire &lt;code&gt;pip&lt;/code&gt; feature set. Namely, uv does not (and does not plan to) support the following &lt;code&gt;pip&lt;/code&gt; features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.egg&lt;/code&gt; dependencies&lt;/li&gt; &#xA; &lt;li&gt;Editable installs for Git and direct URL dependencies (editable installs &lt;em&gt;are&lt;/em&gt; supported for local dependencies)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On the other hand, uv plans to (but does not currently) support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astral-sh/uv/issues/474&#34;&gt;Hash-checking mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/astral-sh/uv/issues/313&#34;&gt;URL requirements without package names&lt;/a&gt; (e.g., &lt;code&gt;https://...&lt;/code&gt; instead of &lt;code&gt;package @ https://...&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Like &lt;code&gt;pip-compile&lt;/code&gt;, uv generates a platform-specific &lt;code&gt;requirements.txt&lt;/code&gt; file (unlike, e.g., &lt;code&gt;poetry&lt;/code&gt; and &lt;code&gt;pdm&lt;/code&gt;, which generate platform-agnostic &lt;code&gt;poetry.lock&lt;/code&gt; and &lt;code&gt;pdm.lock&lt;/code&gt; files). As such, uv&#39;s &lt;code&gt;requirements.txt&lt;/code&gt; files may not be portable across platforms and Python versions.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;uv is an extremely fast Python package resolver and installer, designed as a drop-in replacement for &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt; (&lt;code&gt;pip-compile&lt;/code&gt; and &lt;code&gt;pip-sync&lt;/code&gt;), and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;uv represents an intermediary goal in our pursuit of a &lt;a href=&#34;https://blog.rust-lang.org/2016/05/05/cargo-pillars.html#pillars-of-cargo&#34;&gt;&#34;Cargo for Python&#34;&lt;/a&gt;: a comprehensive project and package manager that is extremely fast, reliable, and easy to use.&lt;/p&gt; &#xA;&lt;p&gt;Think: a single binary that bootstraps your Python installation and gives you everything you need to be productive with Python, bundling not only &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip-tools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;, but also &lt;code&gt;pipx&lt;/code&gt;, &lt;code&gt;tox&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;ruff&lt;/code&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to evolve uv into such a tool.&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, though, the narrower &lt;code&gt;pip-tools&lt;/code&gt; scope allows us to solve the low-level problems involved in building such a tool (like package installation) while shipping something immediately useful with a minimal barrier to adoption.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Python discovery&lt;/h3&gt; &#xA;&lt;p&gt;uv itself does not depend on Python, but it does need to locate a Python environment to (1) install dependencies into the environment and (2) build source distributions.&lt;/p&gt; &#xA;&lt;p&gt;When running &lt;code&gt;pip sync&lt;/code&gt; or &lt;code&gt;pip install&lt;/code&gt;, uv will search for a virtual environment in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An activated virtual environment based on the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;An activated Conda environment based on the &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A virtual environment at &lt;code&gt;.venv&lt;/code&gt; in the current directory, or in the nearest parent directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If no virtual environment is found, uv will prompt the user to create one in the current directory via &lt;code&gt;uv venv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When running &lt;code&gt;pip compile&lt;/code&gt;, uv does not &lt;em&gt;require&lt;/em&gt; a virtual environment and will search for a Python interpreter in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An activated virtual environment based on the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;An activated Conda environment based on the &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A virtual environment at &lt;code&gt;.venv&lt;/code&gt; in the current directory, or in the nearest parent directory.&lt;/li&gt; &#xA; &lt;li&gt;The Python interpreter available as &lt;code&gt;python3&lt;/code&gt; on macOS and Linux, or &lt;code&gt;python.exe&lt;/code&gt; on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a &lt;code&gt;--python-version&lt;/code&gt; is provided to &lt;code&gt;pip compile&lt;/code&gt; (e.g., &lt;code&gt;--python-version=3.7&lt;/code&gt;), uv will search for a Python interpreter matching that version in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An activated virtual environment based on the &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;An activated Conda environment based on the &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;A virtual environment at &lt;code&gt;.venv&lt;/code&gt; in the current directory, or in the nearest parent directory.&lt;/li&gt; &#xA; &lt;li&gt;The Python interpreter available as, e.g., &lt;code&gt;python3.7&lt;/code&gt; on macOS and Linux. On Windows, uv will use the same mechanism as &lt;code&gt;py --list-paths&lt;/code&gt; to discover all available Python interpreters, and will select the first interpreter matching the requested version.&lt;/li&gt; &#xA; &lt;li&gt;The Python interpreter available as &lt;code&gt;python3&lt;/code&gt; on macOS and Linux, or &lt;code&gt;python.exe&lt;/code&gt; on Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since uv has no dependency on Python, it can even install into virtual environments other than its own. For example, setting &lt;code&gt;VIRTUAL_ENV=/path/to/venv&lt;/code&gt; will cause uv to install into &lt;code&gt;/path/to/venv&lt;/code&gt;, no matter where uv is installed.&lt;/p&gt; &#xA;&lt;h3&gt;Git authentication&lt;/h3&gt; &#xA;&lt;p&gt;uv allows packages to be installed from Git and supports the following schemes for authenticating with private repositories.&lt;/p&gt; &#xA;&lt;p&gt;Using SSH:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git+ssh://git@&amp;lt;hostname&amp;gt;/...&lt;/code&gt; (e.g. &lt;code&gt;git+ssh://git@github.com/astral-sh/uv&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git+ssh://git@&amp;lt;host&amp;gt;/...&lt;/code&gt; (e.g. &lt;code&gt;git+ssh://git@github.com-key-2/astral-sh/uv&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh&#34;&gt;GitHub SSH documentation&lt;/a&gt; for more details on how to configure SSH.&lt;/p&gt; &#xA;&lt;p&gt;Using a password or token:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git+https://&amp;lt;user&amp;gt;:&amp;lt;token&amp;gt;@&amp;lt;hostname&amp;gt;/...&lt;/code&gt; (e.g. &lt;code&gt;git+https://git:github_pat_asdf@github.com/astral-sh/uv&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git+https://&amp;lt;token&amp;gt;@&amp;lt;hostname&amp;gt;/...&lt;/code&gt; (e.g. &lt;code&gt;git+https://github_pat_asdf@github.com/astral-sh/uv&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git+https://&amp;lt;user&amp;gt;@&amp;lt;hostname&amp;gt;/...&lt;/code&gt; (e.g. &lt;code&gt;git+https://git@github.com/astral-sh/uv&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using a GitHub personal access token, the username is arbitrary. GitHub does not support logging in with password directly, although other hosts may. If a username is provided without credentials, you will be prompted to enter them.&lt;/p&gt; &#xA;&lt;p&gt;If there are no credentials present in the URL and authentication is needed, the &lt;a href=&#34;https://git-scm.com/doc/credential-helpers&#34;&gt;Git credential helper&lt;/a&gt; will be queried.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency caching&lt;/h3&gt; &#xA;&lt;p&gt;uv uses aggressive caching to avoid re-downloading (and re-building dependencies) that have already been accessed in prior runs.&lt;/p&gt; &#xA;&lt;p&gt;The specifics of uv&#39;s caching semantics vary based on the nature of the dependency:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For registry dependencies&lt;/strong&gt; (like those downloaded from PyPI), uv respects HTTP caching headers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For direct URL dependencies&lt;/strong&gt;, uv respects HTTP caching headers, and also caches based on the URL itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Git dependencies&lt;/strong&gt;, uv caches based on the fully-resolved Git commit hash. As such, &lt;code&gt;uv pip compile&lt;/code&gt; will pin Git dependencies to a specific commit hash when writing the resolved dependency set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For local dependencies&lt;/strong&gt;, uv caches based on the last-modified time of the &lt;code&gt;setup.py&lt;/code&gt; or &lt;code&gt;pyproject.toml&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re running into caching issues, uv includes a few escape hatches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To force uv to revalidate cached data for all dependencies, run &lt;code&gt;uv pip install --refresh ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To force uv to revalidate cached data for a specific dependency, run, e.g., &lt;code&gt;uv pip install --refresh-package flask ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To force uv to ignore existing installed versions, run &lt;code&gt;uv pip install --reinstall ...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To clear the global cache entirely, run &lt;code&gt;uv cache clean&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resolution strategy&lt;/h3&gt; &#xA;&lt;p&gt;By default, uv follows the standard Python dependency resolution strategy of preferring the latest compatible version of each package. For example, &lt;code&gt;uv pip install flask&amp;gt;=2.0.0&lt;/code&gt; will install the latest version of Flask (at time of writing: &lt;code&gt;3.0.0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;However, uv&#39;s resolution strategy can be configured to support alternative workflows. With &lt;code&gt;--resolution=lowest&lt;/code&gt;, uv will install the &lt;strong&gt;lowest&lt;/strong&gt; compatible versions for all dependencies, both &lt;strong&gt;direct&lt;/strong&gt; and &lt;strong&gt;transitive&lt;/strong&gt;. Alternatively, &lt;code&gt;--resolution=lowest-direct&lt;/code&gt; will opt for the &lt;strong&gt;lowest&lt;/strong&gt; compatible versions for all &lt;strong&gt;direct&lt;/strong&gt; dependencies, while using the &lt;strong&gt;latest&lt;/strong&gt; compatible versions for all &lt;strong&gt;transitive&lt;/strong&gt; dependencies. This distinction can be particularly useful for library authors who wish to test against the lowest supported versions of direct dependencies without restricting the versions of transitive dependencies.&lt;/p&gt; &#xA;&lt;p&gt;For example, given the following &lt;code&gt;requirements.in&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;flask&amp;gt;=2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running &lt;code&gt;uv pip compile requirements.in&lt;/code&gt; would produce the following &lt;code&gt;requirements.txt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# This file was autogenerated by uv via the following command:&#xA;#    uv pip compile requirements.in&#xA;blinker==1.7.0&#xA;    # via flask&#xA;click==8.1.7&#xA;    # via flask&#xA;flask==3.0.0&#xA;itsdangerous==2.1.2&#xA;    # via flask&#xA;jinja2==3.1.2&#xA;    # via flask&#xA;markupsafe==2.1.3&#xA;    # via&#xA;    #   jinja2&#xA;    #   werkzeug&#xA;werkzeug==3.0.1&#xA;    # via flask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, &lt;code&gt;uv pip compile --resolution=lowest requirements.in&lt;/code&gt; would instead produce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# This file was autogenerated by uv via the following command:&#xA;#    uv pip compile requirements.in --resolution=lowest&#xA;click==7.1.2&#xA;    # via flask&#xA;flask==2.0.0&#xA;itsdangerous==2.0.0&#xA;    # via flask&#xA;jinja2==3.0.0&#xA;    # via flask&#xA;markupsafe==2.0.0&#xA;    # via jinja2&#xA;werkzeug==2.0.0&#xA;    # via flask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-release handling&lt;/h3&gt; &#xA;&lt;p&gt;By default, uv will accept pre-release versions during dependency resolution in two cases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the package is a direct dependency, and its version markers include a pre-release specifier (e.g., &lt;code&gt;flask&amp;gt;=2.0.0rc1&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If &lt;em&gt;all&lt;/em&gt; published versions of a package are pre-releases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If dependency resolution fails due to a transitive pre-release, uv will prompt the user to re-run with &lt;code&gt;--prerelease=allow&lt;/code&gt;, to allow pre-releases for all dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can add the transitive dependency to your &lt;code&gt;requirements.in&lt;/code&gt; file with pre-release specifier (e.g., &lt;code&gt;flask&amp;gt;=2.0.0rc1&lt;/code&gt;) to opt in to pre-release support for that specific dependency.&lt;/p&gt; &#xA;&lt;p&gt;Pre-releases are &lt;a href=&#34;https://pubgrub-rs-guide.netlify.app/limitations/prerelease_versions&#34;&gt;notoriously difficult&lt;/a&gt; to model, and are a frequent source of bugs in other packaging tools. uv&#39;s pre-release handling is &lt;em&gt;intentionally&lt;/em&gt; limited and &lt;em&gt;intentionally&lt;/em&gt; requires user intervention to opt in to pre-releases to ensure correctness, though pre-release handling will be revisited in future releases.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency overrides&lt;/h3&gt; &#xA;&lt;p&gt;Historically, &lt;code&gt;pip&lt;/code&gt; has supported &#34;constraints&#34; (&lt;code&gt;-c constraints.txt&lt;/code&gt;), which allows users to narrow the set of acceptable versions for a given package.&lt;/p&gt; &#xA;&lt;p&gt;uv supports constraints, but also takes this concept further by allowing users to &lt;em&gt;override&lt;/em&gt; the acceptable versions of a package across the dependency tree via overrides (&lt;code&gt;--override overrides.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In short, overrides allow the user to lie to the resolver by overriding the declared dependencies of a package. Overrides are a useful last resort for cases in which the user knows that a dependency is compatible with a newer version of a package than the package declares, but the package has not yet been updated to declare that compatibility.&lt;/p&gt; &#xA;&lt;p&gt;For example, if a transitive dependency declares &lt;code&gt;pydantic&amp;gt;=1.0,&amp;lt;2.0&lt;/code&gt;, but the user knows that the package is compatible with &lt;code&gt;pydantic&amp;gt;=2.0&lt;/code&gt;, the user can override the declared dependency with &lt;code&gt;pydantic&amp;gt;=2.0,&amp;lt;3&lt;/code&gt; to allow the resolver to continue.&lt;/p&gt; &#xA;&lt;p&gt;While constraints are purely &lt;em&gt;additive&lt;/em&gt;, and thus cannot &lt;em&gt;expand&lt;/em&gt; the set of acceptable versions for a package, overrides &lt;em&gt;can&lt;/em&gt; expand the set of acceptable versions for a package, providing an escape hatch for erroneous upper version bounds.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-version resolution&lt;/h3&gt; &#xA;&lt;p&gt;uv&#39;s &lt;code&gt;pip-compile&lt;/code&gt; command produces a resolution that&#39;s known to be compatible with the current platform and Python version. Unlike Poetry, PDM, and other package managers, uv does not yet produce a machine-agnostic lockfile.&lt;/p&gt; &#xA;&lt;p&gt;However, uv &lt;em&gt;does&lt;/em&gt; support resolving for alternate Python versions via the &lt;code&gt;--python-version&lt;/code&gt; command line argument. For example, if you&#39;re running uv on Python 3.9, but want to resolve for Python 3.8, you can run &lt;code&gt;uv pip compile --python-version=3.8 requirements.in&lt;/code&gt; to produce a Python 3.8-compatible resolution.&lt;/p&gt; &#xA;&lt;h2&gt;Platform support&lt;/h2&gt; &#xA;&lt;p&gt;uv has Tier 1 support for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS (Apple Silicon)&lt;/li&gt; &#xA; &lt;li&gt;macOS (x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (x86_64)&lt;/li&gt; &#xA; &lt;li&gt;Windows (x86_64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;uv is continuously built, tested, and developed against its Tier 1 platforms. Inspired by the Rust project, Tier 1 can be thought of as &lt;a href=&#34;https://doc.rust-lang.org/beta/rustc/platform-support.html&#34;&gt;&#34;guaranteed to work&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;uv has Tier 2 support (&lt;a href=&#34;https://doc.rust-lang.org/beta/rustc/platform-support.html&#34;&gt;&#34;guaranteed to build&#34;&lt;/a&gt;) for the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (PPC64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (PPC64LE)&lt;/li&gt; &#xA; &lt;li&gt;Linux (aarch64)&lt;/li&gt; &#xA; &lt;li&gt;Linux (armv7)&lt;/li&gt; &#xA; &lt;li&gt;Linux (i686)&lt;/li&gt; &#xA; &lt;li&gt;Linux (s390x)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;uv ships pre-built wheels to &lt;a href=&#34;https://pypi.org/project/uv/&#34;&gt;PyPI&lt;/a&gt; for its Tier 1 and Tier 2 platforms. However, while Tier 2 platforms are continuously built, they are not continuously tested or developed against, and so stability may vary in practice.&lt;/p&gt; &#xA;&lt;p&gt;Beyond the Tier 1 and Tier 2 platforms, uv is known to build on i686 Windows, and known &lt;em&gt;not&lt;/em&gt; to build on aarch64 Windows, but does not consider either platform to be supported at this time.&lt;/p&gt; &#xA;&lt;p&gt;uv supports and is tested against Python 3.8, 3.9, 3.10, 3.11, and 3.12.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;uv&#39;s dependency resolver uses &lt;a href=&#34;https://github.com/pubgrub-rs/pubgrub&#34;&gt;PubGrub&lt;/a&gt; under the hood. We&#39;re grateful to the PubGrub maintainers, especially &lt;a href=&#34;https://github.com/Eh2406&#34;&gt;Jacob Finkelman&lt;/a&gt;, for their support.&lt;/p&gt; &#xA;&lt;p&gt;uv&#39;s Git implementation is based on &lt;a href=&#34;https://github.com/rust-lang/cargo&#34;&gt;Cargo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of uv&#39;s optimizations are inspired by the great work we&#39;ve seen in &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt;, &lt;a href=&#34;https://github.com/orogene/orogene&#34;&gt;Orogene&lt;/a&gt;, and &lt;a href=&#34;https://github.com/oven-sh/bun&#34;&gt;Bun&lt;/a&gt;. We&#39;ve also learned a lot from Nathaniel J. Smith&#39;s &lt;a href=&#34;https://github.com/njsmith/posy&#34;&gt;Posy&lt;/a&gt; and adapted its &lt;a href=&#34;https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline&#34;&gt;trampoline&lt;/a&gt; for Windows support.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;uv is licensed under either of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://astral.sh&#34; style=&#34;background:none&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg?sanitize=true&#34; alt=&#34;Made by Astral&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>google/magika</title>
    <updated>2024-02-25T01:41:13Z</updated>
    <id>tag:github.com,2024-02-25:/google/magika</id>
    <link href="https://github.com/google/magika" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Detect file content types with deep learning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Magika&lt;/h1&gt; &#xA;&lt;p&gt;Magika is a novel AI powered file type detection tool that relies on the recent advance of deep learning to provide accurate detection. Under the hood, Magika employs a custom, highly optimized Keras model that only weighs about 1MB, and enables precise file identification within milliseconds, even when running on a single CPU.&lt;/p&gt; &#xA;&lt;p&gt;In an evaluation with over 1M files and over 100 content types (covering both binary and textual file formats), Magika achieves 99%+ precision and recall. Magika is used at scale to help improve Google users‚Äô safety by routing Gmail, Drive, and Safe Browsing files to the proper security and content policy scanners.&lt;/p&gt; &#xA;&lt;p&gt;You can try Magika without anything by using our &lt;a href=&#34;https://google.github.io/magika/&#34;&gt;web demo&lt;/a&gt;, which runs locally in your browser!&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of what Magika command line output look like:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/magika/main/assets/magika-screenshot.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;For more context you can read our initial &lt;a href=&#34;https://opensource.googleblog.com/2024/02/magika-ai-powered-fast-and-efficient-file-type-identification.html&#34;&gt;announcement post on Google&#39;s OSS blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available as a Python command line, a Python API, and an experimental TFJS version (which powers our &lt;a href=&#34;https://google.github.io/magika/&#34;&gt;web demo&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Trained on a dataset of over 25M files across more than 100 content types.&lt;/li&gt; &#xA; &lt;li&gt;On our evaluation, Magika achieves 99%+ average precision and recall, outperforming existing approaches.&lt;/li&gt; &#xA; &lt;li&gt;More than 100 content types (see &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/supported_content_types_list.md&#34;&gt;full list&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;After the model is loaded (this is a one-off overhead), the inference time is about 5ms per file.&lt;/li&gt; &#xA; &lt;li&gt;Batching: You can pass to the command line and API multiple files at the same time, and Magika will use batching to speed up the inference time. You can invoke Magika with even thousands of files at the same time. You can also use &lt;code&gt;-r&lt;/code&gt; for recursively scanning a directory.&lt;/li&gt; &#xA; &lt;li&gt;Near-constant inference time independently from the file size; Magika only uses a limited subset of the file&#39;s bytes.&lt;/li&gt; &#xA; &lt;li&gt;Magika uses a per-content-type threshold system that determines whether to &#34;trust&#34; the prediction for the model, or whether to return a generic label, such as &#34;Generic text document&#34; or &#34;Unknown binary data&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Support three different prediction modes, which tweak the tolerance to errors: &lt;code&gt;high-confidence&lt;/code&gt;, &lt;code&gt;medium-confidence&lt;/code&gt;, and &lt;code&gt;best-guess&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s open source! (And more is yet to come.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details, see the documentation for the &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/python.md&#34;&gt;python package&lt;/a&gt; and for the &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/js/README.md&#34;&gt;js package&lt;/a&gt; (dev &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/js.md&#34;&gt;docs&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#running-in-docker&#34;&gt;Running on Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#python-command-line&#34;&gt;Python command line&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#python-api&#34;&gt;Python API&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#experimental-tfjs-model--npm-package&#34;&gt;Experimental TFJS model &amp;amp; npm package&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#development-setup&#34;&gt;Development Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#important-documentation&#34;&gt;Important Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#known-limitations--contributing&#34;&gt;Known Limitations &amp;amp; Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#additional-resources&#34;&gt;Additional Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Magika is available as &lt;code&gt;magika&lt;/code&gt; on PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install magika&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running in Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/magika&#xA;cd magika/&#xA;docker build -t magika .&#xA;docker run -it --rm -v $(pwd):/magika magika -r /magika/tests_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Python command line&lt;/h4&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ magika -r tests_data/&#xA;tests_data/README.md: Markdown document (text)&#xA;tests_data/basic/code.asm: Assembly (code)&#xA;tests_data/basic/code.c: C source (code)&#xA;tests_data/basic/code.css: CSS source (code)&#xA;tests_data/basic/code.js: JavaScript source (code)&#xA;tests_data/basic/code.py: Python source (code)&#xA;tests_data/basic/code.rs: Rust source (code)&#xA;...&#xA;tests_data/mitra/7-zip.7z: 7-zip archive data (archive)&#xA;tests_data/mitra/bmp.bmp: BMP image data (image)&#xA;tests_data/mitra/bzip2.bz2: bzip2 compressed data (archive)&#xA;tests_data/mitra/cab.cab: Microsoft Cabinet archive data (archive)&#xA;tests_data/mitra/elf.elf: ELF executable (executable)&#xA;tests_data/mitra/flac.flac: FLAC audio bitstream data (audio)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ magika code.py --json&#xA;[&#xA;    {&#xA;        &#34;path&#34;: &#34;code.py&#34;,&#xA;        &#34;dl&#34;: {&#xA;            &#34;ct_label&#34;: &#34;python&#34;,&#xA;            &#34;score&#34;: 0.9940916895866394,&#xA;            &#34;group&#34;: &#34;code&#34;,&#xA;            &#34;mime_type&#34;: &#34;text/x-python&#34;,&#xA;            &#34;magic&#34;: &#34;Python script&#34;,&#xA;            &#34;description&#34;: &#34;Python source&#34;&#xA;        },&#xA;        &#34;output&#34;: {&#xA;            &#34;ct_label&#34;: &#34;python&#34;,&#xA;            &#34;score&#34;: 0.9940916895866394,&#xA;            &#34;group&#34;: &#34;code&#34;,&#xA;            &#34;mime_type&#34;: &#34;text/x-python&#34;,&#xA;            &#34;magic&#34;: &#34;Python script&#34;,&#xA;            &#34;description&#34;: &#34;Python source&#34;&#xA;        }&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat doc.ini | magika -&#xA;-: INI configuration file (text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-help&#34;&gt;$ magika -h&#xA;Usage: magika [OPTIONS] [FILE]...&#xA;&#xA;  Magika - Determine type of FILEs with deep-learning.&#xA;&#xA;Options:&#xA;  -r, --recursive                 When passing this option, magika scans every&#xA;                                  file within directories, instead of&#xA;                                  outputting &#34;directory&#34;&#xA;  --json                          Output in JSON format.&#xA;  --jsonl                         Output in JSONL format.&#xA;  -i, --mime-type                 Output the MIME type instead of a verbose&#xA;                                  content type description.&#xA;  -l, --label                     Output a simple label instead of a verbose&#xA;                                  content type description. Use --list-output-&#xA;                                  content-types for the list of supported&#xA;                                  output.&#xA;  -c, --compatibility-mode        Compatibility mode: output is as close as&#xA;                                  possible to `file` and colors are disabled.&#xA;  -s, --output-score              Output the prediction score in addition to&#xA;                                  the content type.&#xA;  -m, --prediction-mode [best-guess|medium-confidence|high-confidence]&#xA;  --batch-size INTEGER            How many files to process in one batch.&#xA;  --no-dereference                This option causes symlinks not to be&#xA;                                  followed. By default, symlinks are&#xA;                                  dereferenced.&#xA;  --colors / --no-colors          Enable/disable use of colors.&#xA;  -v, --verbose                   Enable more verbose output.&#xA;  -vv, --debug                    Enable debug logging.&#xA;  --generate-report               Generate report useful when reporting&#xA;                                  feedback.&#xA;  --version                       Print the version and exit.&#xA;  --list-output-content-types     Show a list of supported content types.&#xA;  --model-dir DIRECTORY           Use a custom model.&#xA;  -h, --help                      Show this message and exit.&#xA;&#xA;  Magika version: &#34;0.5.0&#34;&#xA;&#xA;  Default model: &#34;standard_v1&#34;&#xA;&#xA;  Send any feedback to magika-dev@google.com or via GitHub issues.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/python.md&#34;&gt;python documentation&lt;/a&gt; for detailed documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Python API&lt;/h4&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from magika import Magika&#xA;&amp;gt;&amp;gt;&amp;gt; m = Magika()&#xA;&amp;gt;&amp;gt;&amp;gt; res = m.identify_bytes(b&#34;# Example\nThis is an example of markdown!&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; print(res.output.ct_label)&#xA;markdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/python.md&#34;&gt;python documentation&lt;/a&gt; for detailed documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Experimental TFJS model &amp;amp; npm package&lt;/h4&gt; &#xA;&lt;p&gt;We also provide Magika as an experimental package for people interested in using in a web app. Note that Magika JS implementation performance is significantly slower and you should expect to spend 100ms+ per file.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/js.md&#34;&gt;js documentation&lt;/a&gt; for the details.&lt;/p&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://python-poetry.org/&#34;&gt;poetry&lt;/a&gt; for development and packaging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/google/magika&#xA;$ cd magika/python&#xA;$ poetry shell &amp;amp;&amp;amp; poetry install&#xA;$ magika -r ../tests_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd magika/python&#xA;$ poetry shell&#xA;$ pytest tests/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Important Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/command_line_interface.md&#34;&gt;Documentation about the CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/bindings.md&#34;&gt;Documentation about the bindings for different languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/supported_content_types_list.md&#34;&gt;List of supported content types (for v1, more to come).&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/magika_output.md&#34;&gt;Documentation on how to interpret Magika&#39;s output.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/faq.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Limitations &amp;amp; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Magika significantly improves over the state of the art, but there&#39;s always room for improvement! More work can be done to increase detection accuracy, support for additional content types, bindings for more languages, etc.&lt;/p&gt; &#xA;&lt;p&gt;This initial release is not targeting polyglot detection, and we&#39;re looking forward to seeing adversarial examples from the community. We would also love to hear from the community about encountered problems, misdetections, features requests, need for support for additional content types, etc.&lt;/p&gt; &#xA;&lt;p&gt;Check our open GitHub issues to see what is on our roadmap and please report misdetections or feature requests by either opening GitHub issues (preferred) or by emailing us at &lt;a href=&#34;mailto:magika-dev@google.com&#34;&gt;magika-dev@google.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When reporting misdetections, you may want to use &lt;code&gt;$ magika --generate-report &amp;lt;path&amp;gt;&lt;/code&gt; to generate a report with debug information, which you can include in your github issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Do NOT send reports about files that may contain PII, the report contains (a small) part of the file content!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;We have collected a number of FAQs &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/docs/faq.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.googleblog.com/2024/02/magika-ai-powered-fast-and-efficient-file-type-identification.html&#34;&gt;Google&#39;s OSS blog post&lt;/a&gt; about Magika announcement.&lt;/li&gt; &#xA; &lt;li&gt;Web demo: &lt;a href=&#34;https://google.github.io/magika/&#34;&gt;web demo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this software for your research, please cite it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@software{magika,&#xA;author = {Fratantonio, Yanick and Bursztein, Elie and Invernizzi, Luca and Zhang, Marina and Metitieri, Giancarlo and Kurt, Thomas and Galilee, Francois and Petit-Bianco, Alexandre and Farah, Loua and Albertini, Ange},&#xA;title = {{Magika content-type scanner}},&#xA;url = {https://github.com/google/magika}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0; see &lt;a href=&#34;https://raw.githubusercontent.com/google/magika/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is not an official Google project. It is not supported by Google and Google specifically disclaims all warranties as to its quality, merchantability, or fitness for a particular purpose.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sherlock-project/sherlock</title>
    <updated>2024-02-25T01:41:13Z</updated>
    <id>tag:github.com,2024-02-25:/sherlock-project/sherlock</id>
    <link href="https://github.com/sherlock-project/sherlock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üîé Hunt down social media accounts by username across social networks&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://sherlock-project.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/27065646/53551960-ae4dff80-3b3a-11e9-9075-cef786c69364.png&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;span&gt;Hunt down social media accounts by username across &lt;a href=&#34;https://github.com/sherlock-project/sherlock/raw/master/sites.md&#34;&gt;social networks&lt;/a&gt;&lt;/span&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#installation&#34;&gt;Installation&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#usage&#34;&gt;Usage&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#docker-notes&#34;&gt;Docker Notes&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;70%&#34; height=&#34;70%&#34; src=&#34;https://user-images.githubusercontent.com/27065646/219638267-a5e11090-aa6e-4e77-87f7-0e95f6ad5978.png&#34;&gt;  &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# clone the repo&#xA;$ git clone https://github.com/sherlock-project/sherlock.git&#xA;&#xA;# change the working directory to sherlock&#xA;$ cd sherlock&#xA;&#xA;# install the requirements&#xA;$ python3 -m pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3 sherlock --help&#xA;usage: sherlock [-h] [--version] [--verbose] [--folderoutput FOLDEROUTPUT]&#xA;                [--output OUTPUT] [--tor] [--unique-tor] [--csv]&#xA;                [--site SITE_NAME] [--proxy PROXY_URL] [--json JSON_FILE]&#xA;                [--timeout TIMEOUT] [--print-all] [--print-found] [--no-color]&#xA;                [--browse] [--local] [--nsfw]&#xA;                USERNAMES [USERNAMES ...]&#xA;&#xA;Sherlock: Find Usernames Across Social Networks (Version 0.14.3)&#xA;&#xA;positional arguments:&#xA;  USERNAMES             One or more usernames to check with social networks.&#xA;                        Check similar usernames using {?} (replace to &#39;_&#39;, &#39;-&#39;, &#39;.&#39;).&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  --version             Display version information and dependencies.&#xA;  --verbose, -v, -d, --debug&#xA;                        Display extra debugging information and metrics.&#xA;  --folderoutput FOLDEROUTPUT, -fo FOLDEROUTPUT&#xA;                        If using multiple usernames, the output of the results will be&#xA;                        saved to this folder.&#xA;  --output OUTPUT, -o OUTPUT&#xA;                        If using single username, the output of the result will be saved&#xA;                        to this file.&#xA;  --tor, -t             Make requests over Tor; increases runtime; requires Tor to be&#xA;                        installed and in system path.&#xA;  --unique-tor, -u      Make requests over Tor with new Tor circuit after each request;&#xA;                        increases runtime; requires Tor to be installed and in system&#xA;                        path.&#xA;  --csv                 Create Comma-Separated Values (CSV) File.&#xA;  --xlsx                Create the standard file for the modern Microsoft Excel&#xA;                        spreadsheet (xslx).&#xA;  --site SITE_NAME      Limit analysis to just the listed sites. Add multiple options to&#xA;                        specify more than one site.&#xA;  --proxy PROXY_URL, -p PROXY_URL&#xA;                        Make requests over a proxy. e.g. socks5://127.0.0.1:1080&#xA;  --json JSON_FILE, -j JSON_FILE&#xA;                        Load data from a JSON file or an online, valid, JSON file.&#xA;  --timeout TIMEOUT     Time (in seconds) to wait for response to requests (Default: 60)&#xA;  --print-all           Output sites where the username was not found.&#xA;  --print-found         Output sites where the username was found.&#xA;  --no-color            Don&#39;t color terminal output&#xA;  --browse, -b          Browse to all results on default browser.&#xA;  --local, -l           Force the use of the local data.json file.&#xA;  --nsfw                Include checking of NSFW sites from default list.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for only one user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 sherlock user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for more than one user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 sherlock user1 user2 user3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accounts found will be stored in an individual text file with the corresponding username (e.g &lt;code&gt;user123.txt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Anaconda (Windows) Notes&lt;/h2&gt; &#xA;&lt;p&gt;If you are using Anaconda in Windows, using &lt;code&gt;python3&lt;/code&gt; might not work. Use &lt;code&gt;python&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Notes&lt;/h2&gt; &#xA;&lt;p&gt;If docker is installed you can build an image and run this as a container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t mysherlock-image .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the image is built, sherlock can be invoked by running the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -t mysherlock-image user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following command to access the saved results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -t -v &#34;$PWD/results:/opt/sherlock/results&#34; mysherlock-image -o /opt/sherlock/results/text.txt user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker is instructed to create (or use) the folder &lt;code&gt;results&lt;/code&gt; in the current working directory and to mount it at &lt;code&gt;/opt/sherlock/results&lt;/code&gt; on the docker container by using the &lt;code&gt;-v &#34;$PWD/results:/opt/sherlock/results&#34;&lt;/code&gt; options. &lt;code&gt;Sherlock&lt;/code&gt; is instructed to export the result using the &lt;code&gt;-o /opt/sherlock/results/text.txt&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;docker-compose.yml&lt;/code&gt; file from the repository and use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose run sherlock -o /opt/sherlock/results/text.txt user123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love to have you help us with the development of Sherlock. Each and every contribution is greatly valued!&lt;/p&gt; &#xA;&lt;p&gt;Here are some things we would appreciate your help on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Addition of new site support ¬π&lt;/li&gt; &#xA; &lt;li&gt;Bringing back site support of &lt;a href=&#34;https://raw.githubusercontent.com/sherlock-project/sherlock/master/removed_sites.md&#34;&gt;sites that have been removed&lt;/a&gt; in the past due to false positives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[1] Please look at the Wiki entry on &lt;a href=&#34;https://github.com/sherlock-project/sherlock/wiki/Adding-Sites-To-Sherlock&#34;&gt;adding new sites&lt;/a&gt; to understand the issues.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for contributing to Sherlock!&lt;/p&gt; &#xA;&lt;p&gt;Before creating a pull request with new development, please run the tests to ensure that everything is working great. It would also be a good idea to run the tests before starting development to distinguish problems between your environment and the Sherlock software.&lt;/p&gt; &#xA;&lt;p&gt;The following is an example of the command line to run all the tests for Sherlock. This invocation hides the progress text that Sherlock normally outputs, and instead shows the verbose output of the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd sherlock/sherlock&#xA;$ python3 -m unittest tests.all --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we do currently have 100% test coverage. Unfortunately, some of the sites that Sherlock checks are not always reliable, so it is common to get response problems. Any problems in connection will show up as warnings in the tests instead of true errors.&lt;/p&gt; &#xA;&lt;p&gt;If some sites are failing due to connection problems (site is down, in maintenance, etc) you can exclude them from tests by creating a &lt;code&gt;tests/.excluded_sites&lt;/code&gt; file with a list of sites to ignore (one site name per line).&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/sherlock-project/sherlock&#34;&gt;&lt;img src=&#34;https://starchart.cc/sherlock-project/sherlock.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT ¬© Sherlock Project&lt;br&gt; Original Creator - &lt;a href=&#34;https://github.com/sdushantha&#34;&gt;Siddharth Dushantha&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>