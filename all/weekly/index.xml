<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:49:20Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielgross/whatsapp-gpt</title>
    <updated>2023-01-15T01:49:20Z</updated>
    <id>tag:github.com,2023-01-15:/danielgross/whatsapp-gpt</id>
    <link href="https://github.com/danielgross/whatsapp-gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsapp-gpt&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;ll need to run WhatsApp from a phone number using the golang library I&#39;m using.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll run a dedicated browser in another window that&#39;s controlling ChatGPT.&lt;/li&gt; &#xA; &lt;li&gt;Two terminals: &lt;code&gt;go run main.go&lt;/code&gt;, and &lt;code&gt;python server.py&lt;/code&gt;. I am extremely doubtful they will work for you on the first run.&lt;/li&gt; &#xA; &lt;li&gt;You can also try &lt;code&gt;multichat.py&lt;/code&gt; if you want to watch two ChatGPTs talk to each other.&lt;/li&gt; &#xA; &lt;li&gt;This marks the end of the readme file; it is a bit sparse; thankfully the code is too! Just tuck in if you can... and I will try to add more here later.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Sanster/lama-cleaner</title>
    <updated>2023-01-15T01:49:20Z</updated>
    <id>tag:github.com,2023-01-15:/Sanster/lama-cleaner</id>
    <link href="https://github.com/Sanster/lama-cleaner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image inpainting tool powered by SOTA AI Model. Remove any unwanted object, defect, people from your pictures or erase and replace(powered by stable diffusion) any thing on your pictures.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Lama Cleaner&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A free and open-source inpainting tool powered by SOTA AI model.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Sanster/lama-cleaner&#34;&gt; &lt;img alt=&#34;total download&#34; src=&#34;https://pepy.tech/badge/lama-cleaner&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/lama-cleaner/&#34;&gt; &lt;img alt=&#34;version&#34; src=&#34;https://img.shields.io/pypi/v/lama-cleaner&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1e3ZkAJxvkK3uzaTGu91N9TvI_Mahs0Wb?usp=sharing&#34;&gt; &lt;img alt=&#34;Open in Colab&#34; src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/Sanster/Lama-Cleaner-lama&#34;&gt; &lt;img alt=&#34;Hugging Face Spaces&#34; src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;&#34;&gt; &lt;img alt=&#34;python version&#34; src=&#34;https://img.shields.io/pypi/pyversions/lama-cleaner&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/cwq1913/lama-cleaner&#34;&gt; &lt;img alt=&#34;version&#34; src=&#34;https://img.shields.io/docker/pulls/cwq1913/lama-cleaner&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/3998421/196976498-ba1ad3ab-fa18-4c55-965f-5c6683141375.mp4&#34;&gt;https://user-images.githubusercontent.com/3998421/196976498-ba1ad3ab-fa18-4c55-965f-5c6683141375.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Completely free and open-source&lt;/li&gt; &#xA; &lt;li&gt;Fully self-hosted&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/scripts/README.md&#34;&gt;Windows 1-Click Installer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Classical image inpainting algorithm powered by &lt;a href=&#34;https://docs.opencv.org/3.4/df/d3d/tutorial_py_inpainting.html&#34;&gt;cv2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple SOTA AI models &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/saic-mdal/lama&#34;&gt;LaMa&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;LDM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/DQiaole/ZITS_inpainting&#34;&gt;ZITS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/fenglinglwb/MAT&#34;&gt;MAT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/SHI-Labs/FcF-Inpainting&#34;&gt;FcF&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/runwayml/stable-diffusion&#34;&gt;SD1.5/SD2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/msxie92/MangaInpainting&#34;&gt;Manga&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Fantasy-Studio/Paint-by-Example&#34;&gt;Paint by Example&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=NSAN3TzfhaI&amp;amp;ab_channel=PanicByte&#34;&gt;YouTube Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support CPU &amp;amp; GPU&lt;/li&gt; &#xA; &lt;li&gt;Various inpainting &lt;a href=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/#inpainting-strategy&#34;&gt;strategy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run as a desktop APP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sanster/lama-cleaner/releases/tag/0.28.0&#34;&gt;Interactive Segmentation&lt;/a&gt; on any object. &lt;a href=&#34;https://www.youtube.com/watch?v=xHdo8a4Mn2g&amp;amp;ab_channel=PanicByte&#34;&gt;YouTube Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A great introductory &lt;a href=&#34;https://www.youtube.com/watch?v=aYia7Jvbjno&amp;amp;ab_channel=Aitrepreneur&#34;&gt;youtube video&lt;/a&gt; made by ** Aitrepreneur**&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;1. Remove any unwanted things on the image&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Usage&lt;/th&gt; &#xA;    &lt;th&gt;Before&lt;/th&gt; &#xA;    &lt;th&gt;After&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Remove unwanted things&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/unwant_object.jpg&#34; alt=&#34;unwant_object2&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/unwant_object_clean.jpg&#34; alt=&#34;unwant_object2&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Remove unwanted person&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/unwant_person.jpg&#34; alt=&#34;unwant_person&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/unwant_person_clean.jpg&#34; alt=&#34;unwant_person&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Remove text&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/unwant_text.jpg&#34; alt=&#34;text&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/unwant_text_clean.jpg&#34; alt=&#34;text&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Remove watermark&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/watermark.jpg&#34; alt=&#34;watermark&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/watermark_cleanup.jpg&#34; alt=&#34;watermark_clean&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Remove text balloons on manga&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/manga.png&#34; alt=&#34;manga&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/manga_clean.png&#34; alt=&#34;manga_clean&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;2. Fix old photo&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Usage&lt;/th&gt; &#xA;    &lt;th&gt;Before&lt;/th&gt; &#xA;    &lt;th&gt;After&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Fix old photo&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/old_photo.jpg&#34; alt=&#34;oldphoto&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/old_photo_clean.jpg&#34; alt=&#34;oldphoto_clean&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;3. Replace something on the image &lt;/summary&gt; &#xA; &lt;p&gt;SD1.5/SD2&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Usage&lt;/th&gt; &#xA;    &lt;th&gt;Before&lt;/th&gt; &#xA;    &lt;th&gt;After&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Text Driven Inpainting&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/dog.jpg&#34; alt=&#34;dog&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Prompt: a fox sitting on a bench&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/fox.jpg&#34; alt=&#34;fox&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Paint by Example&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Original Image&lt;/th&gt; &#xA;    &lt;th&gt;Example Image&lt;/th&gt; &#xA;    &lt;th&gt;Result Image&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/206908542-c6465ca3-6414-4593-8318-0c8b569e7682.jpg&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://youtu.be/NSAN3TzfhaI&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/206908517-bd7f62d2-464a-43bc-892e-dbea45f7b104.jpeg&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://youtu.be/NSAN3TzfhaI&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/206903752-0463a0cf-146d-4125-a969-8fe20127a09b.jpeg&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to use Lama Cleaner is to install it using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install lama-cleaner&#xA;&#xA;# Models will be downloaded at first time used&#xA;lama-cleaner --model=lama --device=cpu --port=8080&#xA;# Lama Cleaner is now running at http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to use docker, you can check out &lt;a href=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/#docker&#34;&gt;docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you hava no idea what is docker or pip, please check &lt;a href=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/scripts/README.md&#34;&gt;One Click Installer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available command line arguments:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--model&lt;/td&gt; &#xA;   &lt;td&gt;lama/ldm/zits/mat/fcf/sd1.5/manga/sd2/paint_by_example See details in &lt;a href=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/#inpainting-model&#34;&gt;Inpaint Model&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lama&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--sd-disable-nsfw&lt;/td&gt; &#xA;   &lt;td&gt;Disable stable-diffusion NSFW checker.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--sd-cpu-textencoder&lt;/td&gt; &#xA;   &lt;td&gt;Always run stable-diffusion TextEncoder model on CPU.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--sd-enable-xformers&lt;/td&gt; &#xA;   &lt;td&gt;Enable xFormers optimizations. See: &lt;a href=&#34;https://github.com/facebookresearch/xformers&#34;&gt;facebookresearch/xformers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--local-files-only&lt;/td&gt; &#xA;   &lt;td&gt;Once the model as downloaded, you can pass this arg to avoid diffusers connect to Hugging Face server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--cpu-offload&lt;/td&gt; &#xA;   &lt;td&gt;sd/paint_by_example model, offloads all models to CPU, sacrifice speed for reducing vRAM usage.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--no-half&lt;/td&gt; &#xA;   &lt;td&gt;Using full precision for sd/paint_by_exmaple model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--device&lt;/td&gt; &#xA;   &lt;td&gt;cuda / cpu / mps&lt;/td&gt; &#xA;   &lt;td&gt;cuda&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--port&lt;/td&gt; &#xA;   &lt;td&gt;Port for backend flask web server&lt;/td&gt; &#xA;   &lt;td&gt;8080&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--gui&lt;/td&gt; &#xA;   &lt;td&gt;Launch lama-cleaner as a desktop application&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--gui_size&lt;/td&gt; &#xA;   &lt;td&gt;Set the window size for the application&lt;/td&gt; &#xA;   &lt;td&gt;1200 900&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--input&lt;/td&gt; &#xA;   &lt;td&gt;Path to image you want to load by default&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--debug&lt;/td&gt; &#xA;   &lt;td&gt;Enable debug mode for flask web server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Inpainting Model&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Config&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cv2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt; No GPU is required, and for simple backgrounds, the results may even be better than AI models.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaMa&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt; Generalizes well on high resolutions(~2k)&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LDM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt; Possible to get better and more detail result &lt;br&gt; &lt;span&gt;👍&lt;/span&gt; The balance of time and quality can be achieved by adjusting &lt;code&gt;steps&lt;/code&gt; &lt;br&gt; &lt;span&gt;😐&lt;/span&gt; Slower than GAN model&lt;br&gt; &lt;span&gt;😐&lt;/span&gt; Need more GPU memory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Steps&lt;/code&gt;: You can get better result with large steps, but it will be more time-consuming &lt;br&gt; &lt;code&gt;Sampler&lt;/code&gt;: ddim or &lt;a href=&#34;https://arxiv.org/abs/2202.09778&#34;&gt;plms&lt;/a&gt;. In general plms can get &lt;a href=&#34;https://github.com/Sanster/lama-cleaner/releases/tag/0.13.0&#34;&gt;better results&lt;/a&gt; with fewer steps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ZITS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt; Better holistic structures compared with previous methods &lt;br&gt; &lt;span&gt;😐&lt;/span&gt; Wireframe module is &lt;strong&gt;very&lt;/strong&gt; slow on CPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Wireframe&lt;/code&gt;: Enable edge and line detect&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MAT&lt;/td&gt; &#xA;   &lt;td&gt;TODO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FcF&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt; Better structure and texture generation &lt;br&gt; &lt;span&gt;😐&lt;/span&gt; Only support fixed size (512x512) input&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SD1.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;👍&lt;/span&gt; SOTA text-to-image diffusion model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; See model comparison detail&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;LaMa vs LDM&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Original Image&lt;/th&gt; &#xA;    &lt;th&gt;LaMa&lt;/th&gt; &#xA;    &lt;th&gt;LDM&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/156923525-d6afdec3-7b98-403f-ad20-88ebc6eb8d6d.jpg&#34; alt=&#34;photo-1583445095369-9c651e7e5d34&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/156923620-a40cc066-fd4a-4d85-a29f-6458711d1247.png&#34; alt=&#34;photo-1583445095369-9c651e7e5d34_cleanup_lama&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/156923652-0d06c8c8-33ad-4a42-a717-9c99f3268933.png&#34; alt=&#34;photo-1583445095369-9c651e7e5d34_cleanup_ldm&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;LaMa vs ZITS&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Original Image&lt;/th&gt; &#xA;    &lt;th&gt;ZITS&lt;/th&gt; &#xA;    &lt;th&gt;LaMa&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/180464918-eb13ebfb-8718-461c-9e8b-7f6d8bb7a84f.png&#34; alt=&#34;zits_original&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/180464914-4db722c9-047f-48fe-9bb4-916ba09eb5c6.png&#34; alt=&#34;zits_compare_zits&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/180464903-ffb5f770-4372-4488-ba76-4b4a8c3323f5.png&#34; alt=&#34;zits_compare_lama&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Image is from &lt;a href=&#34;https://github.com/DQiaole/ZITS_inpainting&#34;&gt;ZITS&lt;/a&gt; paper. I didn&#39;t find a good example to show the advantages of ZITS and let me know if you have a good example. There can also be possible problems with my code, if you find them, please let me know too!&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;LaMa vs FcF&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Original Image&lt;/th&gt; &#xA;    &lt;th&gt;LaMa&lt;/th&gt; &#xA;    &lt;th&gt;FcF&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/188305027-a4260545-c24e-4df7-9739-ac5dc3cae879.jpeg&#34; alt=&#34;texture&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/188305024-2064ed3e-5af4-4843-ac10-7f9da71e15f8.jpeg&#34; alt=&#34;texture_lama&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/188305006-a08d2896-a65f-43d5-b9a5-ef62c3129f0c.jpeg&#34; alt=&#34;texture_fcf&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;LaMa vs Manga&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Manga model works better on high-quality manga image then LaMa model.&lt;/p&gt; &#xA; &lt;p&gt;Original Image &lt;img src=&#34;https://raw.githubusercontent.com/Sanster/lama-cleaner/main/assets/manga.png&#34; alt=&#34;manga&#34;&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Model&lt;/th&gt; &#xA;    &lt;th&gt;1080x740&lt;/th&gt; &#xA;    &lt;th&gt;1470x1010&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Manga&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/202676629-54f40f20-c55b-4e6d-bcc7-0a4e81fbb27d.png&#34; alt=&#34;manga_1080x740&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/202675839-4f8012d5-1c10-47ea-9628-20512e86f192.png&#34; alt=&#34;manga_1470x1010&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/saic-mdal/lama&#34;&gt;LaMa&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/202675704-53fa7a3d-ec74-4044-a19c-c673d74bdd28.png&#34; alt=&#34;lama_1080x740&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3998421/202675746-1e642367-f5d0-4b48-aa8b-5d82f2e29082.png&#34; alt=&#34;lama_1470x1010&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Inpainting Strategy&lt;/h2&gt; &#xA;&lt;p&gt;Lama Cleaner provides three ways to run inpainting model on images, you can change it in the settings dialog.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Strategy&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;VRAM&lt;/th&gt; &#xA;   &lt;th&gt;Speed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use the resolution of the original image&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;⚡&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Resize&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resize the image to a smaller size before inpainting. The area outside the mask will not loss quality.&lt;/td&gt; &#xA;   &lt;td&gt;Midium&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;⚡&lt;/span&gt; &lt;span&gt;⚡&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Crop&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Crop masking area from the original image to do inpainting&lt;/td&gt; &#xA;   &lt;td&gt;Low&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;⚡&lt;/span&gt; &lt;span&gt;⚡&lt;/span&gt; &lt;span&gt;⚡&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Download Model Manually&lt;/h2&gt; &#xA;&lt;p&gt;If you have problems downloading the model automatically when lama-cleaner start, you can download it manually. By default lama-cleaner will load model from &lt;code&gt;TORCH_HOME=~/.cache/torch/hub/checkpoints/&lt;/code&gt;, you can set &lt;code&gt;TORCH_HOME&lt;/code&gt; to other folder and put the models there.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sanster/models/releases/tag/add_big_lama&#34;&gt;LaMa&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sanster/models/releases/tag/add_ldm&#34;&gt;LDM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sanster/models/releases/tag/add_zits&#34;&gt;ZITS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sanster/models/releases/tag/add_mat&#34;&gt;MAT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Sanster/models/releases/tag/add_fcf&#34;&gt;FcF&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Baidu: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pan.baidu.com/s/1vUd3BVqIpK6e8N_EA_ZJfw&#34;&gt;https://pan.baidu.com/s/1vUd3BVqIpK6e8N_EA_ZJfw&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;passward: flsu&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Only needed if you plan to modify the frontend and recompile yourself.&lt;/p&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;p&gt;Frontend code are modified from &lt;a href=&#34;https://github.com/initml/cleanup.pictures&#34;&gt;cleanup.pictures&lt;/a&gt;, You can experience their great online services &lt;a href=&#34;https://cleanup.pictures/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install dependencies:&lt;code&gt;cd lama_cleaner/app/ &amp;amp;&amp;amp; yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start development server: &lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;yarn build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Sanster/lama-cleaner#run-docker-cpu&#34;&gt;pre-build docker image&lt;/a&gt; to run Lama Cleaner. The model will be downloaded to the cache directory when first time used. You can mount existing cache directory to start the container, so you don&#39;t have to download the model every time you start the container.&lt;/p&gt; &#xA;&lt;p&gt;The cache directories for different models correspond as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lama/ldm/zits/mat/fcf: /root/.cache/torch&lt;/li&gt; &#xA; &lt;li&gt;sd1.5: /root/.cache/huggingface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Docker (cpu)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 8080:8080 \&#xA;-v /path/to/torch_cache:/root/.cache/torch \&#xA;-v /path/to/huggingface_cache:/root/.cache/huggingface \&#xA;--rm cwq1913/lama-cleaner:cpu-0.26.1 \&#xA;lama-cleaner --device=cpu --port=8080 --host=0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Docker (gpu)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cuda11.6&lt;/li&gt; &#xA; &lt;li&gt;pytorch1.12.1&lt;/li&gt; &#xA; &lt;li&gt;minimum nvidia driver 510.39.01+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --gpus all -p 8080:8080 \&#xA;-v /path/to/torch_cache:/root/.cache/torch \&#xA;-v /path/to/huggingface_cache:/root/.cache/huggingface \&#xA;--rm cwq1913/lama-cleaner:gpu-0.26.1 \&#xA;lama-cleaner --device=cuda --port=8080 --host=0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build Docker image&lt;/h3&gt; &#xA;&lt;p&gt;cpu only&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -f --build-arg version=0.x.0 ./docker/CPUDockerfile -t lamacleaner .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gpu &amp;amp; cpu&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -f --build-arg version=0.x.0 ./docker/GPUDockerfile -t lamacleaner .&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>twitter/twemoji</title>
    <updated>2023-01-15T01:49:20Z</updated>
    <id>tag:github.com,2023-01-15:/twitter/twemoji</id>
    <link href="https://github.com/twitter/twemoji" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emoji for everyone. https://twemoji.twitter.com/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Twitter Emoji (Twemoji) &lt;a href=&#34;https://travis-ci.org/twitter/twemoji&#34;&gt;&lt;img src=&#34;https://travis-ci.org/twitter/twemoji.svg?branch=gh-pages&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A simple library that provides standard Unicode &lt;a href=&#34;http://en.wikipedia.org/wiki/Emoji&#34;&gt;emoji&lt;/a&gt; support across all platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Twemoji v14.0&lt;/strong&gt; adheres to the &lt;a href=&#34;https://unicode.org/versions/Unicode14.0.0/&#34;&gt;Unicode 14.0 spec&lt;/a&gt; and supports the &lt;a href=&#34;https://www.unicode.org/reports/tr51/tr51-21.html&#34;&gt;Emoji 14.0 spec&lt;/a&gt;. &lt;em&gt;We do not support custom emoji.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Twemoji library offers support for all Unicode-defined emoji which are recommended for general interchange (RGI).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;CDN Support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;del&gt;The folks over at &lt;a href=&#34;https://www.maxcdn.com&#34;&gt;MaxCDN&lt;/a&gt; have graciously provided CDN support.&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;MaxCDN is shut down right now, so in the meanwhile use a different CDN or download the assets. (See &lt;a href=&#34;https://github.com/twitter/twemoji/issues/580&#34;&gt;Maxcdn has shut down, cdn not working anymore. · Issue #580 · twitter/twemoji&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Use the following in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of your HTML document(s):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/twemoji@latest/dist/twemoji.min.js&#34; crossorigin=&#34;anonymous&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This guarantees that you will always use the latest version of the library.&lt;/p&gt; &#xA;&lt;p&gt;If, instead, you&#39;d like to include the latest version explicitly, you can add the following tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/twemoji@14.0.2/dist/twemoji.min.js&#34; integrity=&#34;sha384-ICOlZarapRIX6UjKPcWKEpubjg7lGADN7Y9fYP4DU9zm0aPFhgnP5ef+XFaPyKv+&#34; crossorigin=&#34;anonymous&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;If instead you want to download a specific version, please look at the &lt;code&gt;gh-pages&lt;/code&gt; branch, where you will find the built assets for both our latest and older versions.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Following are all the methods exposed in the &lt;code&gt;twemoji&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;h3&gt;twemoji.parse( ... ) V1&lt;/h3&gt; &#xA;&lt;p&gt;This is the main parsing utility and has 3 overloads per parsing type.&lt;/p&gt; &#xA;&lt;p&gt;Although there are two kinds of parsing supported by this utility, we recommend you use &lt;a href=&#34;https://github.com/twitter/twemoji#dom-parsing&#34;&gt;DOM parsing&lt;/a&gt;, explained below. Each type of parsing accepts a callback to generate an image source or an options object with parsing info.&lt;/p&gt; &#xA;&lt;p&gt;The second kind of parsing is string parsing, explained in the legacy documentation &lt;a href=&#34;https://github.com/twitter/twemoji/raw/master/LEGACY.md#string-parsing&#34;&gt;here&lt;/a&gt;. This is unrecommended because this method does not sanitize the string or otherwise prevent malicious code from being executed; such sanitization is out of scope.&lt;/p&gt; &#xA;&lt;h4&gt;DOM parsing&lt;/h4&gt; &#xA;&lt;p&gt;If the first argument to &lt;code&gt;twemoji.parse&lt;/code&gt; is an &lt;code&gt;HTMLElement&lt;/code&gt;, generated image tags will replace emoji that are &lt;strong&gt;inside &lt;code&gt;#text&lt;/code&gt; nodes only&lt;/strong&gt; without compromising surrounding nodes or listeners, and completely avoiding the usage of &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If security is a major concern, this parsing can be considered the safest option but with a slight performance penalty due to DOM operations that are inevitably &lt;em&gt;costly&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var div = document.createElement(&#39;div&#39;);&#xA;div.textContent = &#39;I \u2764\uFE0F emoji!&#39;;&#xA;document.body.appendChild(div);&#xA;&#xA;twemoji.parse(document.body);&#xA;&#xA;var img = div.querySelector(&#39;img&#39;);&#xA;&#xA;// note the div is preserved&#xA;img.parentNode === div; // true&#xA;&#xA;img.src;        // https://twemoji.maxcdn.com/v/latest/72x72/2764.png&#xA;img.alt;        // \u2764\uFE0F&#xA;img.className;  // emoji&#xA;img.draggable;  // false&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other overloads described for &lt;code&gt;string&lt;/code&gt; are available in exactly the same way for DOM parsing.&lt;/p&gt; &#xA;&lt;h3&gt;Object as parameter&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s the list of properties accepted by the optional object that can be passed to the &lt;code&gt;parse&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  {&#xA;    callback: Function,   // default the common replacer&#xA;    attributes: Function, // default returns {}&#xA;    base: string,         // default MaxCDN&#xA;    ext: string,          // default &#34;.png&#34;&#xA;    className: string,    // default &#34;emoji&#34;&#xA;    size: string|number,  // default &#34;72x72&#34;&#xA;    folder: string        // in case it&#39;s specified&#xA;                          // it replaces .size info, if any&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;callback&lt;/h4&gt; &#xA;&lt;p&gt;The function to invoke in order to generate image &lt;code&gt;src&lt;/code&gt;(s).&lt;/p&gt; &#xA;&lt;p&gt;By default it is a function like the following one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function imageSourceGenerator(icon, options) {&#xA;  return &#39;&#39;.concat(&#xA;    options.base, // by default Twitter Inc. CDN&#xA;    options.size, // by default &#34;72x72&#34; string&#xA;    &#39;/&#39;,&#xA;    icon,         // the found emoji as code point&#xA;    options.ext   // by default &#34;.png&#34;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;base&lt;/h4&gt; &#xA;&lt;p&gt;The default url is the same as &lt;code&gt;twemoji.base&lt;/code&gt;, so if you modify the former, it will reflect as default for all parsed strings or nodes.&lt;/p&gt; &#xA;&lt;h4&gt;ext&lt;/h4&gt; &#xA;&lt;p&gt;The default image extension is the same as &lt;code&gt;twemoji.ext&lt;/code&gt; which is &lt;code&gt;&#34;.png&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you modify the former, it will reflect as default for all parsed strings or nodes.&lt;/p&gt; &#xA;&lt;h4&gt;className&lt;/h4&gt; &#xA;&lt;p&gt;The default &lt;code&gt;class&lt;/code&gt; for each generated image is &lt;code&gt;emoji&lt;/code&gt;. It is possible to specify a different one through this property.&lt;/p&gt; &#xA;&lt;h5&gt;size&lt;/h5&gt; &#xA;&lt;p&gt;The default asset size is the same as &lt;code&gt;twemoji.size&lt;/code&gt; which is &lt;code&gt;&#34;72x72&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you modify the former, it will reflect as default for all parsed strings or nodes.&lt;/p&gt; &#xA;&lt;h4&gt;folder&lt;/h4&gt; &#xA;&lt;p&gt;In case you don&#39;t want to specify a size for the image. It is possible to choose a folder, as in the case of SVG emoji.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;twemoji.parse(genericNode, {&#xA;  folder: &#39;svg&#39;,&#xA;  ext: &#39;.svg&#39;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate urls such &lt;code&gt;https://twemoji.maxcdn.com/svg/2764.svg&lt;/code&gt; instead of using a specific size based image.&lt;/p&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;p&gt;Basic utilities / helpers to convert code points to JavaScript surrogates and vice versa.&lt;/p&gt; &#xA;&lt;h3&gt;twemoji.convert.fromCodePoint()&lt;/h3&gt; &#xA;&lt;p&gt;For a given HEX codepoint, returns UTF-16 surrogate pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;twemoji.convert.fromCodePoint(&#39;1f1e8&#39;);&#xA; // &#34;\ud83c\udde8&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;twemoji.convert.toCodePoint()&lt;/h3&gt; &#xA;&lt;p&gt;For given UTF-16 surrogate pairs, returns the equivalent HEX codepoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; twemoji.convert.toCodePoint(&#39;\ud83c\udde8\ud83c\uddf3&#39;);&#xA; // &#34;1f1e8-1f1f3&#34;&#xA;&#xA; twemoji.convert.toCodePoint(&#39;\ud83c\udde8\ud83c\uddf3&#39;, &#39;~&#39;);&#xA; // &#34;1f1e8~1f1f3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Inline Styles&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to size the emoji according to the surrounding text, you can add the following CSS to your stylesheet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img.emoji {&#xA;   height: 1em;&#xA;   width: 1em;&#xA;   margin: 0 .05em 0 .1em;&#xA;   vertical-align: -0.1em;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will make sure emoji derive their width and height from the &lt;code&gt;font-size&lt;/code&gt; of the text they&#39;re shown with. It also adds just a little bit of space before and after each emoji, and pulls them upwards a little bit for better optical alignment.&lt;/p&gt; &#xA;&lt;h3&gt;UTF-8 Character Set&lt;/h3&gt; &#xA;&lt;p&gt;To properly support emoji, the document character set must be set to UTF-8. This can be done by including the following meta tag in the document &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exclude Characters (V1)&lt;/h3&gt; &#xA;&lt;p&gt;To exclude certain characters from being replaced by twemoji.js, call twemoji.parse() with a callback, returning false for the specific unicode icon. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;twemoji.parse(document.body, {&#xA;    callback: function(icon, options, variant) {&#xA;        switch ( icon ) {&#xA;            case &#39;a9&#39;:      // © copyright&#xA;            case &#39;ae&#39;:      // ® registered trademark&#xA;            case &#39;2122&#39;:    // ™ trademark&#xA;                return false;&#xA;        }&#xA;        return &#39;&#39;.concat(options.base, options.size, &#39;/&#39;, icon, options.ext);&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Legacy API (V1)&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re still using our V1 API, you can read our legacy documentation &lt;a href=&#34;https://github.com/twitter/twemoji/tree/master/LEGACY.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The contributing documentation can be found &lt;a href=&#34;https://github.com/twitter/twemoji/tree/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Attribution Requirements&lt;/h2&gt; &#xA;&lt;p&gt;As an open source project, attribution is critical from a legal, practical and motivational perspective in our opinion. The graphics are licensed under the CC-BY 4.0 which has a pretty good guide on &lt;a href=&#34;https://wiki.creativecommons.org/Best_practices_for_attribution&#34;&gt;best practices for attribution&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, we consider the guide a bit onerous and as a project, will accept a mention in a project README or an &#39;About&#39; section or footer on a website. In mobile applications, a common place would be in the Settings/About section (for example, see the mobile Twitter application Settings-&amp;gt;About-&amp;gt;Legal section). We would consider a mention in the HTML/JS source sufficient also.&lt;/p&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twemoji-cheatsheet.vercel.app&#34;&gt;Twemoji Cheatsheet&lt;/a&gt; by &lt;a href=&#34;https://github.com/ShahriarKh&#34;&gt;@ShahriarKh&lt;/a&gt;: An easy-to-use cheatsheet for exploring, copying and downloading emojis!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SebastianAigner/twemoji-amazing&#34;&gt;Twemoji Amazing&lt;/a&gt; by &lt;a href=&#34;https://github.com/SebastianAigner&#34;&gt;@SebastianAigner&lt;/a&gt;: Use Twemoji using CSS classes (like &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jollygoodcode/twemoji&#34;&gt;Twemoji Ruby&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jollygoodcode&#34;&gt;@JollyGoodCode&lt;/a&gt;: Use Twemoji in Ruby.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gustavwilliam/twemoji-utils&#34;&gt;Twemoji Utils&lt;/a&gt; by &lt;a href=&#34;https://github.com/gustavwilliam&#34;&gt;@gustavwilliam&lt;/a&gt;: Utilities for finding and downloading Twemoji source files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nathanielw/Twemoji-for-Pencil&#34;&gt;Twemoji for Pencil&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/nathanielnw&#34;&gt;@Nathanielnw&lt;/a&gt;: Use Twemoji in Pencil.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.frenchw.net/FrwTwemoji/&#34;&gt;FrwTwemoji - Twemoji in dotnet&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/frenchw&#34;&gt;@FrenchW&lt;/a&gt;: Use Twemoji in any dotnet project (C#, asp.net ...).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datenstrom/yellow-extensions/tree/master/source/emojiawesome&#34;&gt;Emojiawesome - Twemoji for Yellow&lt;/a&gt; by &lt;a href=&#34;https://github.com/datenstrom/&#34;&gt;@datenstrom&lt;/a&gt;: Use Twemoji on your website.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danbovey/EmojiPanel&#34;&gt;EmojiPanel for Twitter&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/danielbovey/status/749580050274582528&#34;&gt;@danielbovey&lt;/a&gt;: Insert Twemoji into your tweets on twitter.com.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eosrei/twemoji-color-font&#34;&gt;Twitter Color Emoji font&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/bderickson&#34;&gt;@bderickson&lt;/a&gt;: Use Twemoji as your system default font on Linux &amp;amp; OS X.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xoudini/emojica&#34;&gt;Emojica&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/xoudini&#34;&gt;@xoudini&lt;/a&gt;: An iOS framework allowing you to replace all standard emoji in strings with Twemoji.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phpmonkeys-de/gwt-twemoji&#34;&gt;gwt-twemoji&lt;/a&gt; by &lt;a href=&#34;https://github.com/nbartels&#34;&gt;@nbartels&lt;/a&gt;: Use Twemoji in GWT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pavlobu/emoji-text-flow-javafx&#34;&gt;JavaFXEmojiTextFlow&lt;/a&gt; by &lt;a href=&#34;https://github.com/pavlobu&#34;&gt;@pavlobu&lt;/a&gt;: A JavaFX library allowing you to replace all standard emoji in extended EmojiTextFlow with Twemoji.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinfaguiar/vue-twemoji-picker&#34;&gt;Vue Twemoji Picker&lt;/a&gt; by &lt;a href=&#34;https://github.com/kevinfaguiar&#34;&gt;@kevinfaguiar&lt;/a&gt;: A fast plug-n-play Twemoji Picker (+textarea for Twemoji rendering) for Vue.&lt;/li&gt; &#xA; &lt;li&gt;[Unmaintained] &lt;a href=&#34;http://ellekasai.github.io/twemoji-awesome/&#34;&gt;Twemoji Awesome&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/ellekasai/&#34;&gt;@ellekasai&lt;/a&gt;: Use Twemoji using CSS classes (like &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KasperGam/EmojiOnRoku&#34;&gt;EmojiOnRoku&lt;/a&gt; by &lt;a href=&#34;https://github.com/KasperGam&#34;&gt;@KasperGam&lt;/a&gt;: Use Twemoji on Roku!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/rossel.jost/latex-twemojis&#34;&gt;LaTeX Twemoji&lt;/a&gt; by &lt;a href=&#34;https://gitlab.com/rossel.jost&#34;&gt;@rossel.jost&lt;/a&gt;: Use Twemoji in LaTeX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Astrotomic/php-twemoji&#34;&gt;PHP Twemoji&lt;/a&gt; by &lt;a href=&#34;https://github.com/Astrotomic&#34;&gt;@Astrotomic&lt;/a&gt;: Use twemoji within your PHP website project&#39;s by replacing standard Emoji with twemoji urls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Committers and Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Justine De Caires (Twitter)&lt;/li&gt; &#xA; &lt;li&gt;Jason Sofonia (Twitter)&lt;/li&gt; &#xA; &lt;li&gt;Bryan Haggerty (ex-Twitter)&lt;/li&gt; &#xA; &lt;li&gt;Nathan Downs (ex-Twitter)&lt;/li&gt; &#xA; &lt;li&gt;Tom Wuttke (ex-Twitter)&lt;/li&gt; &#xA; &lt;li&gt;Andrea Giammarchi (ex-Twitter)&lt;/li&gt; &#xA; &lt;li&gt;Joen Asmussen (WordPress)&lt;/li&gt; &#xA; &lt;li&gt;Marcus Kazmierczak (WordPress)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The goal of this project is to simply provide emoji for everyone. We definitely welcome improvements and fixes, but we may not merge every pull request suggested by the community due to the simple nature of the project.&lt;/p&gt; &#xA;&lt;p&gt;The rules for contributing are available in the &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to all of our &lt;a href=&#34;https://github.com/twitter/twemoji/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2019 Twitter, Inc and other contributors&lt;/p&gt; &#xA;&lt;p&gt;Code licensed under the MIT License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Graphics licensed under CC-BY 4.0: &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;https://creativecommons.org/licenses/by/4.0/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>