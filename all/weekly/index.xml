<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:50:35Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>a16z-infra/ai-getting-started</title>
    <updated>2023-07-02T01:50:35Z</updated>
    <id>tag:github.com,2023-07-02:/a16z-infra/ai-getting-started</id>
    <link href="https://github.com/a16z-infra/ai-getting-started" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Javascript AI getting started stack for weekend projects, including image/text models, vector stores, auth, and deployment configs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ai-getting-started.com/&#34;&gt;Live Demo (deployed on fly.io)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/PQUmTBTGmT&#34;&gt;Join our community Discord: AI Stack Devs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1305&#34; alt=&#34;Screen Shot 2023-06-20 at 1 30 56 PM&#34; src=&#34;https://github.com/a16z-infra/ai-getting-started/assets/3489963/bcc762d2-68f5-4c4e-8c49-14602bee4995&#34;&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auth: &lt;a href=&#34;https://clerk.com/&#34;&gt;Clerk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;App logic: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VectorDB: &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt; / &lt;a href=&#34;https://supabase.com/docs/guides/database/extensions/pgvector&#34;&gt;Supabase pgvector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LLM Orchestration: &lt;a href=&#34;https://js.langchain.com/docs/&#34;&gt;Langchain.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Image Model: &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text Model: &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Text streaming: &lt;a href=&#34;https://github.com/vercel-labs/ai&#34;&gt;ai sdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deployment: &lt;a href=&#34;https://fly.io/&#34;&gt;Fly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ðŸš€ &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-getting-started/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ðŸ’» &lt;a href=&#34;https://raw.githubusercontent.com/a16z-infra/ai-getting-started/main/#how-to-contribute-to-this-repo&#34;&gt;Contribute to this repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to try out this stack is to test it out locally and traverse through code files to understand how each component work. Here are the steps to get started.&lt;/p&gt; &#xA;&lt;h3&gt;1. Fork and Clone repo&lt;/h3&gt; &#xA;&lt;p&gt;Fork the repo to your Github account, then run the following command to clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:[YOUR_GITHUB_ACCOUNT_NAME]/ai-getting-started.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ai-getting-started&#xA;npm install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Fill out secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.local.example .env.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;a. &lt;strong&gt;Clerk Secrets&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://dashboard.clerk.com/&#34;&gt;https://dashboard.clerk.com/&lt;/a&gt; -&amp;gt; &#34;Add Application&#34; -&amp;gt; Fill in Application name/select how your users should sign in -&amp;gt; Create Application Now you should see both &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; on the screen &lt;img width=&#34;1011&#34; alt=&#34;clerk&#34; src=&#34;https://github.com/a16z-infra/ai-getting-started/assets/3489963/6ce72263-4e83-406d-838e-08a95ea79023&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;b. &lt;strong&gt;OpenAI API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;https://platform.openai.com/account/api-keys&lt;/a&gt; to get your OpenAI API key&lt;/p&gt; &#xA;&lt;p&gt;c. &lt;strong&gt;Replicate API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://replicate.com/account/api-tokens&#34;&gt;https://replicate.com/account/api-tokens&lt;/a&gt; to get your Replicate API key&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; By default, this template uses Pinecone as vector store, but you can turn on Supabase pgvector easily. This means you only need to fill out either Pinecone API key &lt;em&gt;or&lt;/em&gt; Supabase API key.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;d. &lt;strong&gt;Pinecone API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Pinecone index by visiting &lt;a href=&#34;https://app.pinecone.io/&#34;&gt;https://app.pinecone.io/&lt;/a&gt; and click on &#34;Create Index&#34;&lt;/li&gt; &#xA; &lt;li&gt;Give it an index name (this will be the environment variable &lt;code&gt;PINECONE_INDEX&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fill in Dimension as &lt;code&gt;1536&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once the index is successfully created, click on &#34;API Keys&#34; on the left side nav and create an API key: copy &#34;Environment&#34; value to &lt;code&gt;PINECONE_ENVIRONMENT&lt;/code&gt; variable, and &#34;Value&#34; to &lt;code&gt;PINECONE_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;e. &lt;strong&gt;Supabase API key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Supabase instance &lt;a href=&#34;https://supabase.com/dashboard/projects&#34;&gt;here&lt;/a&gt;; then go to Project Settings -&amp;gt; API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_URL&lt;/code&gt; is the URL value under &#34;Project URL&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_PRIVATE_KEY&lt;/code&gt; is the key starts with &lt;code&gt;ey&lt;/code&gt; under Project API Keys&lt;/li&gt; &#xA; &lt;li&gt;Now, you should enable pgvector on Supabase and create a schema. You can do this easily by clicking on &#34;SQL editor&#34; on the left hand side on supabase UI and then clicking on &#34;+New Query&#34;. Copy paste &lt;a href=&#34;https://github.com/a16z-infra/ai-getting-started/raw/main/pgvector.sql&#34;&gt;this code snippet&lt;/a&gt; in the SQL editor and click &#34;Run&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Generate embeddings&lt;/h3&gt; &#xA;&lt;p&gt;There are a few markdown files under &lt;code&gt;/blogs&lt;/code&gt; directory as examples so you can do Q&amp;amp;A on them. To generate embeddings and store them in the vector database for future queries, you can run the following command:&lt;/p&gt; &#xA;&lt;h4&gt;If using Pinecone&lt;/h4&gt; &#xA;&lt;p&gt;Run the following command to generate embeddings and store them in Pinecone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run generate-embeddings-pinecone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;If using Supabase pgvector&lt;/h4&gt; &#xA;&lt;p&gt;In &lt;code&gt;QAModel.tsx&lt;/code&gt;, replace &lt;code&gt;/api/qa-pinecone&lt;/code&gt; with &lt;code&gt;/api/qa-pg-vector&lt;/code&gt;. Then run the following command to generate embeddings and store them in Supabase pgvector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run generate-embeddings-supabase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Run app locally&lt;/h3&gt; &#xA;&lt;p&gt;Now you are ready to test out the app locally! To do this, simply run &lt;code&gt;npm run dev&lt;/code&gt; under the project root.&lt;/p&gt; &#xA;&lt;h3&gt;6. Deploy the app&lt;/h3&gt; &#xA;&lt;h4&gt;Deploy to fly.io&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register an account on fly.io and then &lt;a href=&#34;https://fly.io/docs/hands-on/install-flyctl/&#34;&gt;install flyctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;fly launch&lt;/code&gt; under project root -- this will generate a &lt;code&gt;fly.toml&lt;/code&gt; that includes all the configurations you will need&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;fly deploy --ha=false&lt;/code&gt; to deploy the app -- the --ha flag makes sure fly only spins up one instance, which is included in the free plan. You also want to run &lt;code&gt;fly scale memory 512&lt;/code&gt; to scale up the fly vm memory for this app.&lt;/li&gt; &#xA; &lt;li&gt;For any other non-localhost environment, the existing Clerk development instance should continue to work. You can upload the secrets to Fly by running &lt;code&gt;cat .env.local | fly secrets import&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you are ready to deploy to production, you should create a prod environment under the &lt;a href=&#34;https://dashboard.clerk.com/&#34;&gt;current Clerk instance&lt;/a&gt;. For more details on deploying a production app with Clerk, check out their documentation &lt;a href=&#34;https://clerk.com/docs/deployments/overview&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;Note that you will likely need to manage your own domain and do domain verification as part of the process.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new file &lt;code&gt;.env.prod&lt;/code&gt; locally and fill in all the production-environment secrets. Remember to update &lt;code&gt;NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;CLERK_SECRET_KEY&lt;/code&gt; by copying secrets from Clerk&#39;s production instance -&lt;code&gt;cat .env.prod | fly secrets import&lt;/code&gt; to upload secrets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other deployment options&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to contribute to this repo&lt;/h2&gt; &#xA;&lt;h3&gt;Code contribution workflow&lt;/h3&gt; &#xA;&lt;p&gt;You can fork this repo, make changes, and create a PR. Add &lt;strong&gt;@ykhli or @timqian&lt;/strong&gt; as reviewers.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to contributing on github, here is a step-by-step guide:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clcik on &lt;code&gt;Fork&lt;/code&gt; on the top right of this page&lt;/li&gt; &#xA; &lt;li&gt;Work on your change and push it to your forked repo. Now when you navigate to the forked repo&#39;s UI, you should see something like the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;904&#34; alt=&#34;pr-preview&#34; src=&#34;https://github.com/a16z-infra/ai-getting-started/assets/3489963/631e5f45-39ec-4b54-b9d1-b963e279dcc6&#34;&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Click on &#34;Contribute&#34; -&amp;gt; &#34;Open Pull Request&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Once you have a PR, you can add reviewers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other contributions&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to open feature requests, bug reports etc under Issues.&lt;/p&gt; &#xA;&lt;h2&gt;Refs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pinecone&#34;&gt;https://js.langchain.com/docs/modules/indexes/vector_stores/integrations/pinecone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/models/llms/integrations#replicate&#34;&gt;https://js.langchain.com/docs/modules/models/llms/integrations#replicate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://js.langchain.com/docs/modules/chains/index_related_chains/retrieval_qa&#34;&gt;https://js.langchain.com/docs/modules/chains/index_related_chains/retrieval_qa&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ykdojo/kaguya</title>
    <updated>2023-07-02T01:50:35Z</updated>
    <id>tag:github.com,2023-07-02:/ykdojo/kaguya</id>
    <link href="https://github.com/ykdojo/kaguya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ChatGPT plugin that allows you to load and edit your local files in a controlled way, as well as run any Python, JavaScript, and bash script.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kaguya&lt;/h1&gt; &#xA;&lt;p&gt;Kaguya is a ChatGPT plugin that allows you to load and edit your local files in a controlled way, as well as run any Python, JavaScript, and bash script. This makes it a powerful tool for developers, enabling them to interact with their file system and run scripts directly from ChatGPT.&lt;/p&gt; &#xA;&lt;h2&gt;API Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;The project provides several API endpoints that allow you to interact with the file system. The API is described in the &lt;code&gt;openapi.yaml&lt;/code&gt; file. Here is a brief overview:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/executeCommand&lt;/code&gt;: Execute a shell command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /api/listFilesInDirectory&lt;/code&gt;: List files and directories in the specified directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /api/readFile&lt;/code&gt;: Read the content of a file in the user&#39;s directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/update&lt;/code&gt;: Update a file in the user&#39;s directory by performing a search-and-replace operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/updateWholeFile&lt;/code&gt;: Replace the entire content of a file in the user&#39;s directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/createFile&lt;/code&gt;: Create a new file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/deleteFile&lt;/code&gt;: Delete a file in the user&#39;s directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/renameFile&lt;/code&gt;: Rename a file in the user&#39;s directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/appendToFile&lt;/code&gt;: Append content to the end of an existing file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/createDirectory&lt;/code&gt;: Create a new directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/deleteDirectory&lt;/code&gt;: Delete a directory and its contents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /api/readMultipleFiles&lt;/code&gt;: Read the content of multiple files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the Project&lt;/h2&gt; &#xA;&lt;p&gt;You can run the project using Docker. Simply execute the &lt;code&gt;docker.sh&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the script, you can interact with Kaguya through ChatGPT using the localhost port 3000.&lt;/p&gt; &#xA;&lt;h2&gt;More About Kaguya&lt;/h2&gt; &#xA;&lt;p&gt;You can check out a demo of Kaguya in action on Twitter: &lt;a href=&#34;https://twitter.com/ykdojo/status/1645846044843077635&#34;&gt;Demo Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can check out a second demo of Kaguya in action on Twitter: &lt;a href=&#34;https://twitter.com/ykdojo/status/1670848611532562433&#34;&gt;Second Demo Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;Join our Discord server &lt;a href=&#34;https://discord.com/invite/nNtVfKddDD&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license Â©2023.&lt;/p&gt; &#xA;&lt;p&gt;For the full license text, please see the &lt;a href=&#34;https://raw.githubusercontent.com/ykdojo/kaguya/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>techleadhd/chatgpt-retrieval</title>
    <updated>2023-07-02T01:50:35Z</updated>
    <id>tag:github.com,2023-07-02:/techleadhd/chatgpt-retrieval</id>
    <link href="https://github.com/techleadhd/chatgpt-retrieval" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chatgpt-retrieval&lt;/h1&gt; &#xA;&lt;p&gt;Simple script to use ChatGPT on your own files.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the &lt;a href=&#34;https://youtu.be/9AXP7tCI9PI&#34;&gt;YouTube Video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;Langchain&lt;/a&gt; and other required packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install langchain openai chromadb tiktoken unstructured&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;constants.py.default&lt;/code&gt; to use your own &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API key&lt;/a&gt;, and rename it to &lt;code&gt;constants.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Place your own data into &lt;code&gt;data/data.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;p&gt;Test reading &lt;code&gt;data/data.txt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; python chatgpt.py &#34;what is my dog&#39;s name&#34;&#xA;Your dog&#39;s name is Sunny.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test reading &lt;code&gt;data/cat.pdf&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; python chatgpt.py &#34;what is my cat&#39;s name&#34;&#xA;Your cat&#39;s name is Muffy.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>