<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-29T01:37:49Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coleam00/ottomator-agents</title>
    <updated>2025-06-29T01:37:49Z</updated>
    <id>tag:github.com,2025-06-29:/coleam00/ottomator-agents</id>
    <link href="https://github.com/coleam00/ottomator-agents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All the open source AI Agents hosted on the oTTomator Live Agent Studio platform!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is the Live Agent Studio?&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://studio.ottomator.ai&#34;&gt;Live Agent Studio&lt;/a&gt; is a community-driven platform developed by &lt;a href=&#34;https://ottomator.ai&#34;&gt;oTTomator&lt;/a&gt; for you to explore cutting-edge AI agents and learn how to implement them for yourself or your business! All agents on this platform are open source and, over time, will cover a very large variety of use cases.&lt;/p&gt; &#xA;&lt;p&gt;The goal with the studio is to build an educational platform for you to learn how to do incredible things with AI, while still providing practical value so that you’ll want to use the agents just for the sake of what they can do for you!&lt;/p&gt; &#xA;&lt;p&gt;This platform is still in beta – expect longer response times under load, a rapidly growing agent library over the coming months, and a lot more content on this platform soon on Cole Medin’s YouTube channel!&lt;/p&gt; &#xA;&lt;h1&gt;What is this Repository for?&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code/workflow JSON for all the agents on the Live Agent Studio! Every agent being added to the platform is currently be open sourced here so we can not only create a curated collection of cutting-edge agents together as a community, but also learn from one another!&lt;/p&gt; &#xA;&lt;h2&gt;Tokens&lt;/h2&gt; &#xA;&lt;p&gt;Most agents on the Live Agent Studio cost tokens to use, which are purchasable on the platform. However, when you first sign in you are given some tokens to start so you can use the agents free of charge! The biggest reason agents cost tokens is that we pay for the LLM usage since we host all the agents developed by you and the rest of the community!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://studio.ottomator.ai/pricing&#34;&gt;Purchase Tokens&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Future Plans&lt;/h2&gt; &#xA;&lt;p&gt;As the Live Agent Studio develops, it will become the go-to place to stay on top of what is possible with AI agents! Anytime there is a new AI technology, groundbreaking agent research, or a new tool/library to build agents with, it’ll be featured through agents on the platform. It’s a tall order, but we have big plans for the oTTomator community, and we’re confident we can grow to accomplish this!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;I want to build an agent to showcase in the Live Agent Studio! How do I do that?&lt;/h3&gt; &#xA;&lt;p&gt;Head on over here to learn how to build an agent for the platform:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://studio.ottomator.ai/guide&#34;&gt;Developer Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also check out &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ottomator-agents/main/~sample-n8n-agent~&#34;&gt;the sample n8n agent&lt;/a&gt; for a starting point of building an n8n agent for the Live Agent Studio, and &lt;a href=&#34;https://raw.githubusercontent.com/coleam00/ottomator-agents/main/~sample-python-agent~&#34;&gt;the sample Python agent&lt;/a&gt; for Python.&lt;/p&gt; &#xA;&lt;h3&gt;How many tokens does it cost to use an agent?&lt;/h3&gt; &#xA;&lt;p&gt;Each agent will charge tokens per prompt. The number of tokens depends on the agent, as some agents use larger LLMs, some call LLMs multiple times, and some use paid APIs.&lt;/p&gt; &#xA;&lt;h3&gt;Where can I go to talk about all these agents and get help implementing them myself?&lt;/h3&gt; &#xA;&lt;p&gt;Head on over to our Think Tank community and feel free to make a post!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thinktank.ottomator.ai&#34;&gt;Think Tank Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;© 2024 Live Agent Studio. All rights reserved.&lt;br&gt; Created by oTTomator&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>musistudio/claude-code-router</title>
    <updated>2025-06-29T01:37:49Z</updated>
    <id>tag:github.com,2025-06-29:/musistudio/claude-code-router</id>
    <link href="https://github.com/musistudio/claude-code-router" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Claude Code as the foundation for coding infrastructure, allowing you to decide how to interact with the model while enjoying updates from Anthropic.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Claude Code Router&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a tool for routing Claude Code requests to different models, and you can customize any request.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/screenshoots/claude-code.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Claude Code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g @anthropic-ai/claude-code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Claude Code Router&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g @musistudio/claude-code-router&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start Claude Code by claude-code-router&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ccr code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Configure routing[optional]&lt;br&gt; Set up your &lt;code&gt;~/.claude-code-router/config.json&lt;/code&gt; file like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;OPENAI_API_KEY&#34;: &#34;sk-xxx&#34;,&#xA;  &#34;OPENAI_BASE_URL&#34;: &#34;https://api.deepseek.com&#34;,&#xA;  &#34;OPENAI_MODEL&#34;: &#34;deepseek-chat&#34;,&#xA;  &#34;Providers&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;openrouter&#34;,&#xA;      &#34;api_base_url&#34;: &#34;https://openrouter.ai/api/v1&#34;,&#xA;      &#34;api_key&#34;: &#34;sk-xxx&#34;,&#xA;      &#34;models&#34;: [&#xA;        &#34;google/gemini-2.5-pro-preview&#34;,&#xA;        &#34;anthropic/claude-sonnet-4&#34;,&#xA;        &#34;anthropic/claude-3.5-sonnet&#34;,&#xA;        &#34;anthropic/claude-3.7-sonnet:thinking&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;deepseek&#34;,&#xA;      &#34;api_base_url&#34;: &#34;https://api.deepseek.com&#34;,&#xA;      &#34;api_key&#34;: &#34;sk-xxx&#34;,&#xA;      &#34;models&#34;: [&#34;deepseek-reasoner&#34;]&#xA;    },&#xA;    {&#xA;      &#34;name&#34;: &#34;ollama&#34;,&#xA;      &#34;api_base_url&#34;: &#34;http://localhost:11434/v1&#34;,&#xA;      &#34;api_key&#34;: &#34;ollama&#34;,&#xA;      &#34;models&#34;: [&#34;qwen2.5-coder:latest&#34;]&#xA;    }&#xA;  ],&#xA;  &#34;Router&#34;: {&#xA;    &#34;background&#34;: &#34;ollama,qwen2.5-coder:latest&#34;,&#xA;    &#34;think&#34;: &#34;deepseek,deepseek-reasoner&#34;,&#xA;    &#34;longContext&#34;: &#34;openrouter,google/gemini-2.5-pro-preview&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;background&lt;/code&gt;&lt;br&gt; This model will be used to handle some background tasks(&lt;a href=&#34;https://docs.anthropic.com/en/docs/claude-code/costs#background-token-usage&#34;&gt;background-token-usage&lt;/a&gt;). Based on my tests, it doesn’t require high intelligence. I’m using the qwen-coder-2.5:7b model running locally on my MacBook Pro M1 (32GB) via Ollama. If your computer can’t run Ollama, you can also use some free models, such as qwen-coder-2.5:3b.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;think&lt;/code&gt;&lt;br&gt; This model will be used when enabling Claude Code to perform reasoning. However, reasoning budget control has not yet been implemented (since the DeepSeek-R1 model does not support it), so there is currently no difference between using UltraThink and Think modes. It is worth noting that Plan Mode also use this model to achieve better planning results.&lt;br&gt; Note: The reasoning process via the official DeepSeek API may be very slow, so you may need to wait for an extended period of time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;longContext&lt;/code&gt;&lt;br&gt; This model will be used when the context length exceeds 32K (this value may be modified in the future). You can route the request to a model that performs well with long contexts (I’ve chosen google/gemini-2.5-pro-preview). This scenario has not been thoroughly tested yet, so if you encounter any issues, please submit an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;model command&lt;br&gt; You can also switch models within Claude Code by using the &lt;code&gt;/model&lt;/code&gt; command. The format is: &lt;code&gt;provider,model&lt;/code&gt;, like this:&lt;br&gt; &lt;code&gt;/model openrouter,anthropic/claude-3.5-sonnet&lt;/code&gt;&lt;br&gt; This will use the anthropic/claude-3.5-sonnet model provided by OpenRouter to handle all subsequent tasks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support change models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Github Actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More robust plugin support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More detailed logs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support web search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;You can modify or enhance Claude Code’s functionality by installing plugins. The mechanism works by using middleware to modify request parameters — this allows you to rewrite prompts or add/remove tools.&lt;/p&gt; &#xA;&lt;p&gt;To use a plugin, place it in the ~/.claude-code-router/plugins/ directory and specify the plugin name in config.js using the &lt;code&gt;usePlugins&lt;/code&gt; option.like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// ~/.claud-code-router/config.json&#xA;{&#xA;  ...,&#xA;  &#34;usePlugins&#34;: [&#34;notebook-tools-filter&#34;, &#34;toolcall-improvement&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, the following plugins are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;notebook-tools-filter&lt;/strong&gt;&lt;br&gt; This plugin filters out tool calls related to Jupyter notebooks (.ipynb files). You can use it if your work does not involve Jupyter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;toolcall-improvement&lt;/strong&gt;&lt;br&gt; If your LLM doesn’t handle tool usage well (for example, always returning code as plain text instead of modifying files — such as with deepseek-v3), you can use this plugin.&lt;br&gt; This plugin simply adds the following system prompt. If you have a better prompt, you can modify it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## **Important Instruction:**  &#xA;You must use tools as frequently and accurately as possible to help the user solve their problem.  &#xA;Prioritize tool usage whenever it can enhance accuracy, efficiency, or the quality of the response.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Github Actions&lt;/h2&gt; &#xA;&lt;p&gt;You just need to install &lt;code&gt;Claude Code Actions&lt;/code&gt; in your repository according to the &lt;a href=&#34;https://docs.anthropic.com/en/docs/claude-code/github-actions&#34;&gt;official documentation&lt;/a&gt;. For &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;, you can use any string. Then, modify your &lt;code&gt;.github/workflows/claude.yaml&lt;/code&gt; file to include claude-code-router, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Claude Code&#xA;&#xA;on:&#xA;  issue_comment:&#xA;    types: [created]&#xA;  pull_request_review_comment:&#xA;    types: [created]&#xA;  issues:&#xA;    types: [opened, assigned]&#xA;  pull_request_review:&#xA;    types: [submitted]&#xA;&#xA;jobs:&#xA;  claude:&#xA;    if: |&#xA;      (github.event_name == &#39;issue_comment&#39; &amp;amp;&amp;amp; contains(github.event.comment.body, &#39;@claude&#39;)) ||&#xA;      (github.event_name == &#39;pull_request_review_comment&#39; &amp;amp;&amp;amp; contains(github.event.comment.body, &#39;@claude&#39;)) ||&#xA;      (github.event_name == &#39;pull_request_review&#39; &amp;amp;&amp;amp; contains(github.event.review.body, &#39;@claude&#39;)) ||&#xA;      (github.event_name == &#39;issues&#39; &amp;amp;&amp;amp; (contains(github.event.issue.body, &#39;@claude&#39;) || contains(github.event.issue.title, &#39;@claude&#39;)))&#xA;    runs-on: ubuntu-latest&#xA;    permissions:&#xA;      contents: read&#xA;      pull-requests: read&#xA;      issues: read&#xA;      id-token: write&#xA;    steps:&#xA;      - name: Checkout repository&#xA;        uses: actions/checkout@v4&#xA;        with:&#xA;          fetch-depth: 1&#xA;      &#xA;      - name: Prepare Environment&#xA;        run: |&#xA;          curl -fsSL https://bun.sh/install | bash&#xA;          mkdir -p $HOME/.claude-code-router&#xA;          cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; $HOME/.claude-code-router/config.json&#xA;          {&#xA;            &#34;log&#34;: true,&#xA;            &#34;OPENAI_API_KEY&#34;: &#34;${{ secrets.OPENAI_API_KEY }}&#34;,&#xA;            &#34;OPENAI_BASE_URL&#34;: &#34;https://api.deepseek.com&#34;,&#xA;            &#34;OPENAI_MODEL&#34;: &#34;deepseek-chat&#34;&#xA;          }&#xA;          EOF&#xA;        shell: bash&#xA;        &#xA;      - name: Start Claude Code Router&#xA;        run: |&#xA;          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &amp;amp;&#xA;        shell: bash&#xA;&#xA;      - name: Run Claude Code&#xA;        id: claude&#xA;        uses: anthropics/claude-code-action@beta&#xA;        env:&#xA;          ANTHROPIC_BASE_URL: http://localhost:3456&#xA;        with:&#xA;          anthropic_api_key: &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify the contents of &lt;code&gt;$HOME/.claude-code-router/config.json&lt;/code&gt; as needed. GitHub Actions support allows you to trigger Claude Code at specific times, which opens up some interesting possibilities.&lt;/p&gt; &#xA;&lt;p&gt;For example, between 00:30 and 08:30 Beijing Time, using the official DeepSeek API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cost of the &lt;code&gt;deepseek-v3&lt;/code&gt; model is only 50% of the normal time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;deepseek-r1&lt;/code&gt; model is just 25% of the normal time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So maybe in the future, I’ll describe detailed tasks for Claude Code ahead of time and let it run during these discounted hours to reduce costs?&lt;/p&gt; &#xA;&lt;h2&gt;Some tips:&lt;/h2&gt; &#xA;&lt;p&gt;Now you can use deepseek-v3 models directly without using any plugins.&lt;/p&gt; &#xA;&lt;p&gt;If you’re using the DeepSeek API provided by the official website, you might encounter an “exceeding context” error after several rounds of conversation (since the official API only supports a 64K context window). In this case, you’ll need to discard the previous context and start fresh. Alternatively, you can use ByteDance’s DeepSeek API, which offers a 128K context window and supports KV cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/screenshoots/contexterror.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: claude code consumes a huge amount of tokens, but thanks to DeepSeek’s low cost, you can use claude code at a fraction of Claude’s price, and you don’t need to subscribe to the Claude Max plan.&lt;/p&gt; &#xA;&lt;p&gt;Some interesting points: Based on my testing, including a lot of context information can help narrow the performance gap between these LLM models. For instance, when I used Claude-4 in VSCode Copilot to handle a Flutter issue, it messed up the files in three rounds of conversation, and I had to roll everything back. However, when I used claude code with DeepSeek, after three or four rounds of conversation, I finally managed to complete my task—and the cost was less than 1 RMB!&lt;/p&gt; &#xA;&lt;h2&gt;Some articles:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/en/project-motivation-and-how-it-works.md&#34;&gt;Project Motivation and Principles&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/zh/%E9%A1%B9%E7%9B%AE%E5%88%9D%E8%A1%B7%E5%8F%8A%E5%8E%9F%E7%90%86.md&#34;&gt;中文版看这里&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Buy me a coffee&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project helpful, you can choose to sponsor the author with a cup of coffee. Please provide your GitHub information so I can add you to the sponsor list below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/F1F31GN2GM&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/alipay.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musistudio/claude-code-router/main/blog/images/wechat.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the following sponsors:&lt;/p&gt; &#xA;&lt;p&gt;@Simon Leischnig (If you see this, feel free to contact me and I can update it with your GitHub information)&lt;br&gt; &lt;a href=&#34;https://github.com/duanshuaimin&#34;&gt;@duanshuaimin&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/vrgitadmin&#34;&gt;@vrgitadmin&lt;/a&gt;&lt;br&gt; @*o (可通过主页邮箱联系我修改github用户名)&lt;br&gt; &lt;a href=&#34;https://github.com/ceilwoo&#34;&gt;@ceilwoo&lt;/a&gt;&lt;br&gt; @*说 (可通过主页邮箱联系我修改github用户名)&lt;br&gt; @&lt;em&gt;更 (可通过主页邮箱联系我修改github用户名)&lt;br&gt; @K&lt;/em&gt;g (可通过主页邮箱联系我修改github用户名)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typst/typst</title>
    <updated>2025-06-29T01:37:49Z</updated>
    <id>tag:github.com,2025-06-29:/typst/typst</id>
    <link href="https://github.com/typst/typst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new markup-based typesetting system that is powerful and easy to learn.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;Typst&#34; src=&#34;https://user-images.githubusercontent.com/17899797/226108480-722b770e-6313-40d7-84f2-26bebb55a281.png&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://typst.app/docs/&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=docs&amp;amp;up_color=007aff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app%2Fdocs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://typst.app/&#34;&gt; &lt;img alt=&#34;Typst App&#34; src=&#34;https://img.shields.io/website?down_message=offline&amp;amp;label=typst.app&amp;amp;up_color=239dad&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Ftypst.app&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/2uDybryKPe&#34;&gt; &lt;img alt=&#34;Discord Server&#34; src=&#34;https://img.shields.io/discord/1054443721975922748?color=5865F2&amp;amp;label=discord&amp;amp;labelColor=555&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/typst/typst/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;Apache-2 License&#34; src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://typst.app/jobs/&#34;&gt; &lt;img alt=&#34;Jobs at Typst&#34; src=&#34;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Ftypst.app%2Fassets%2Fdata%2Fshields.json&amp;amp;query=%24.jobs.text&amp;amp;label=jobs&amp;amp;color=%23A561FF&amp;amp;cacheSeconds=1800&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Typst is a new markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in markup for the most common formatting tasks&lt;/li&gt; &#xA; &lt;li&gt;Flexible functions for everything else&lt;/li&gt; &#xA; &lt;li&gt;A tightly integrated scripting system&lt;/li&gt; &#xA; &lt;li&gt;Math typesetting, bibliography management, and more&lt;/li&gt; &#xA; &lt;li&gt;Fast compile times thanks to incremental compilation&lt;/li&gt; &#xA; &lt;li&gt;Friendly error messages in case something goes wrong&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains the Typst compiler and its CLI, which is everything you need to compile Typst documents locally. For the best writing experience, consider signing up to our &lt;a href=&#34;https://typst.app/&#34;&gt;collaborative online editor&lt;/a&gt; for free.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://typst.app/docs/tutorial/&#34;&gt;gentle introduction&lt;/a&gt; to Typst is available in our documentation. However, if you want to see the power of Typst encapsulated in one image, here it is:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Example&#34; width=&#34;900&#34; src=&#34;https://user-images.githubusercontent.com/17899797/228031796-ced0e452-fcee-4ae9-92da-b9287764ff25.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s dissect what&#39;s going on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;em&gt;set rules&lt;/em&gt; to configure element properties like the size of pages or the numbering of headings. By setting the page height to &lt;code&gt;auto&lt;/code&gt;, it scales to fit the content. Set rules accommodate the most common configurations. If you need full control, you can also use &lt;a href=&#34;https://typst.app/docs/reference/styling/#show-rules&#34;&gt;show rules&lt;/a&gt; to completely redefine the appearance of an element.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We insert a heading with the &lt;code&gt;= Heading&lt;/code&gt; syntax. One equals sign creates a top level heading, two create a subheading and so on. Typst has more lightweight markup like this, see the &lt;a href=&#34;https://typst.app/docs/reference/syntax/&#34;&gt;syntax&lt;/a&gt; reference for a full list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://typst.app/docs/reference/math/&#34;&gt;Mathematical equations&lt;/a&gt; are enclosed in dollar signs. By adding extra spaces around the contents of an equation, we can put it into a separate block. Multi-letter identifiers are interpreted as Typst definitions and functions unless put into quotes. This way, we don&#39;t need backslashes for things like &lt;code&gt;floor&lt;/code&gt; and &lt;code&gt;sqrt&lt;/code&gt;. And &lt;code&gt;phi.alt&lt;/code&gt; applies the &lt;code&gt;alt&lt;/code&gt; modifier to the &lt;code&gt;phi&lt;/code&gt; to select a particular symbol variant.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, we get to some &lt;a href=&#34;https://typst.app/docs/reference/scripting/&#34;&gt;scripting&lt;/a&gt;. To input code into a Typst document, we can write a hash followed by an expression. We define two variables and a recursive function to compute the n-th fibonacci number. Then, we display the results in a center-aligned table. The table function takes its cells row-by-row. Therefore, we first pass the formulas &lt;code&gt;$F_1$&lt;/code&gt; to &lt;code&gt;$F_8$&lt;/code&gt; and then the computed fibonacci numbers. We apply the spreading operator (&lt;code&gt;..&lt;/code&gt;) to both because they are arrays and we want to pass the arrays&#39; items as individual arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Text version of the code example.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-typst&#34;&gt;#set page(width: 10cm, height: auto)&#xA;#set heading(numbering: &#34;1.&#34;)&#xA;&#xA;= Fibonacci sequence&#xA;The Fibonacci sequence is defined through the&#xA;recurrence relation $F_n = F_(n-1) + F_(n-2)$.&#xA;It can also be expressed in _closed form:_&#xA;&#xA;$ F_n = round(1 / sqrt(5) phi.alt^n), quad&#xA;  phi.alt = (1 + sqrt(5)) / 2 $&#xA;&#xA;#let count = 8&#xA;#let nums = range(1, count + 1)&#xA;#let fib(n) = (&#xA;  if n &amp;lt;= 2 { 1 }&#xA;  else { fib(n - 1) + fib(n - 2) }&#xA;)&#xA;&#xA;The first #count numbers of the sequence are:&#xA;&#xA;#align(center, table(&#xA;  columns: count,&#xA;  ..nums.map(n =&amp;gt; $F_#n$),&#xA;  ..nums.map(n =&amp;gt; str(fib(n))),&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Typst&#39;s CLI is available from different sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can get sources and pre-built binaries for the latest release of Typst from the &lt;a href=&#34;https://github.com/typst/typst/releases/&#34;&gt;releases page&lt;/a&gt;. Download the archive for your platform and place it in a directory that is in your &lt;code&gt;PATH&lt;/code&gt;. To stay up to date with future releases, you can simply run &lt;code&gt;typst update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can install Typst through different package managers. Note that the versions in the package managers might lag behind the latest release.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;View &lt;a href=&#34;https://repology.org/project/typst/versions&#34;&gt;Typst on Repology&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;View &lt;a href=&#34;https://snapcraft.io/typst&#34;&gt;Typst&#39;s Snap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;brew install typst&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;winget install --id Typst.Typst&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have a &lt;a href=&#34;https://rustup.rs/&#34;&gt;Rust&lt;/a&gt; toolchain installed, you can install&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the latest released Typst version with &lt;code&gt;cargo install --locked typst-cli&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;a development version with &lt;code&gt;cargo install --git https://github.com/typst/typst --locked typst-cli&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nix users can&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use the &lt;code&gt;typst&lt;/code&gt; package with &lt;code&gt;nix-shell -p typst&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;build and run a development version with &lt;code&gt;nix run github:typst/typst -- --version&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Docker users can run a prebuilt image with &lt;code&gt;docker run ghcr.io/typst/typst:latest --help&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed Typst, you can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Creates `file.pdf` in working directory.&#xA;typst compile file.typ&#xA;&#xA;# Creates PDF file at the desired path.&#xA;typst compile path/to/source.typ path/to/output.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also watch source files and automatically recompile on changes. This is faster than compiling from scratch each time because Typst has incremental compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Watches source files and recompiles on changes.&#xA;typst watch file.typ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typst further allows you to add custom font paths for your project and list all of the fonts it discovered:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Adds additional directories to search for fonts.&#xA;typst compile --font-path path/to/fonts file.typ&#xA;&#xA;# Lists all of the discovered fonts in the system and the given directory.&#xA;typst fonts --font-path path/to/fonts&#xA;&#xA;# Or via environment variable (Linux syntax).&#xA;TYPST_FONT_PATHS=path/to/fonts typst fonts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other CLI subcommands and options, see below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Prints available subcommands and options.&#xA;typst help&#xA;&#xA;# Prints detailed usage of a subcommand.&#xA;typst help watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer an integrated IDE-like experience with autocompletion and instant preview, you can also check out &lt;a href=&#34;https://typst.app/&#34;&gt;Typst&#39;s free web app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The main places where the community gathers are our &lt;a href=&#34;https://forum.typst.app/&#34;&gt;Forum&lt;/a&gt; and our &lt;a href=&#34;https://discord.gg/2uDybryKPe&#34;&gt;Discord server&lt;/a&gt;. The Forum is a great place to ask questions, help others, and share cool things you created with Typst. The Discord server is more suitable for quicker questions, discussions about contributing, or just to chat. We&#39;d be happy to see you there!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://typst.app/universe/&#34;&gt;Typst Universe&lt;/a&gt; is where the community shares templates and packages. If you want to share your own creations, you can submit them to our &lt;a href=&#34;https://github.com/typst/packages/&#34;&gt;package repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you had a bad experience in our community, please &lt;a href=&#34;https://typst.app/contact&#34;&gt;reach out to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love to see contributions from the community. If you experience bugs, feel free to open an issue. If you would like to implement a new feature or bug fix, please follow the steps outlined in the &lt;a href=&#34;https://github.com/typst/typst/raw/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build Typst yourself, first ensure that you have the &lt;a href=&#34;https://rustup.rs/&#34;&gt;latest stable Rust&lt;/a&gt; installed. Then, clone this repository and build the CLI with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/typst/typst&#xA;cd typst&#xA;cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optimized binary will be stored in &lt;code&gt;target/release/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another good way to contribute is by &lt;a href=&#34;https://github.com/typst/packages/&#34;&gt;sharing packages&lt;/a&gt; with the community.&lt;/p&gt; &#xA;&lt;h2&gt;Pronunciation and Spelling&lt;/h2&gt; &#xA;&lt;p&gt;IPA: /taɪpst/. &#34;Ty&#34; like in &lt;strong&gt;Ty&lt;/strong&gt;pesetting and &#34;pst&#34; like in Hi&lt;strong&gt;pst&lt;/strong&gt;er. When writing about Typst, capitalize its name as a proper noun, with a capital &#34;T&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Design Principles&lt;/h2&gt; &#xA;&lt;p&gt;All of Typst has been designed with three key goals in mind: Power, simplicity, and performance. We think it&#39;s time for a system that matches the power of LaTeX, is easy to learn and use, all while being fast enough to realize instant preview. To achieve these goals, we follow three core design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplicity through Consistency:&lt;/strong&gt; If you know how to do one thing in Typst, you should be able to transfer that knowledge to other things. If there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other. E.g. it&#39;s okay that &lt;code&gt;= Introduction&lt;/code&gt; and &lt;code&gt;#heading[Introduction]&lt;/code&gt; do the same thing because the former is just syntax sugar for the latter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Power through Composability:&lt;/strong&gt; There are two ways to make something flexible: Have a knob for everything or have a few knobs that you can combine in many ways. Typst is designed with the second way in mind. We provide systems that you can compose in ways we&#39;ve never even thought of. TeX is also in the second category, but it&#39;s a bit low-level and therefore people use LaTeX instead. But there, we don&#39;t really have that much composability. Instead, there&#39;s a package for everything (&lt;code&gt;\usepackage{knob}&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance through Incrementality:&lt;/strong&gt; All Typst language features must accommodate for incremental compilation. Luckily we have &lt;a href=&#34;https://github.com/typst/comemo/&#34;&gt;&lt;code&gt;comemo&lt;/code&gt;&lt;/a&gt;, a system for incremental compilation which does most of the hard work in the background.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>