<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-04T01:46:05Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>federico-busato/Modern-CPP-Programming</title>
    <updated>2024-02-04T01:46:05Z</updated>
    <id>tag:github.com,2024-02-04:/federico-busato/Modern-CPP-Programming</id>
    <link href="https://github.com/federico-busato/Modern-CPP-Programming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern C++ Programming Course (C++11/14/17/20/23)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modern C++ Programming&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/federico-busato/Modern-CPP-Programming/master/other/cpp_logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/releases&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a alt=&#34;Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/network/members&#34; alt=&#34;Forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/federico-busato/Modern-CPP-Programming?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/commits/master&#34; alt=&#34;Commits&#34;&gt; &lt;img src=&#34;https://badgen.net/github/commits/federico-busato/Modern-CPP-Programming?style=for-the-badge&amp;amp;scale=1.2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming-Material/issues&#34; alt=&#34;Issues&#34;&gt; &lt;img src=&#34;https://badgen.net/github/closed-issues/federico-busato/Modern-CPP-Programming?style=for-the-badge&amp;amp;scale=1.2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;C++11 / C++14 / C++17 / C++20 / (C++23)&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;em&gt;open-access&lt;/em&gt; course is directed at those who are already familiar with C and object-oriented programming towards a proficiency level of C++ programming. The course covers the basics of C++ programming and moves on to advanced C++ semantics and concepts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Free and frequently updated&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;22 lectures, ~1500 slides&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Include the &lt;em&gt;last language standard&lt;/em&gt; concepts and features&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Practical teaching&lt;/em&gt;: non-verbose, short structured descriptions associated with code&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Minimal code examples&lt;/em&gt; for showing just a specific feature or issue without digressing&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Complementary language aspects&lt;/em&gt;: tools, coding conventions, project organization, and code optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Experience-based&lt;/em&gt;: many aspects, examples, and problems come from real-world cases faced during my work as software engineer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you enjoy the course or you find it useful, please add a &lt;strong&gt;Star&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/federico-busato/Modern-CPP-Programming?style=social&#34; alt=&#34;stars - Modern-CPP-Programming&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CHAPTERS&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;#&lt;/th&gt; &#xA;   &lt;th&gt;TITLE&lt;/th&gt; &#xA;   &lt;th&gt;MAIN FOCUS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/01.Introduction.pdf&#34;&gt;Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;History of C/C++, Areas of Applications, Course introduction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/02.Basic_Concepts_I.pdf&#34;&gt;Basic Concepts I - Fundamental Types&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Types overview, operators, and conversion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/03.Basic_Concepts_II.pdf&#34;&gt;Basic Concepts II - Integral and Floating-point Types&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integral and floating-point types and their arithmetic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/04.Basic_Concepts_III.pdf&#34;&gt;Basic Concepts III - Entities and Control Flow&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enumerators, structures, control flow statements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/05.Basic_Concepts_IV.pdf&#34;&gt;Basic Concepts IV - Memory Management&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Heap, Stack, pointers, references, const properties, conversion operators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/06.Basic_Concepts_V.pdf&#34;&gt;Basic Concepts V - Functions and Preprocessing&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functions, lambda expressions, preprocessing directives&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/07.Object_Oriented_I.pdf&#34;&gt;Object Oriented Programming I&amp;nbsp;-&amp;nbsp;Class&amp;nbsp;Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Class hierarchy, constructor, destructor, class keywords&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/08.Object_Oriented_II.pdf&#34;&gt;Object Oriented Programming II&amp;nbsp;-&amp;nbsp;Polymorphism and Operator Overloading&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Polymorphism, operators overloading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/09.Templates_I.pdf&#34;&gt;Templates and Meta-programming I&amp;nbsp;-&amp;nbsp;Function Templates and Compile-Time Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function template, type traits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/10.Templates_II.pdf&#34;&gt;Templates and Meta-programming II&amp;nbsp;-&amp;nbsp;Class Templates and SFINAE&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Class template, SFINAE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/11.Translation_Units_I.pdf&#34;&gt;Translation Units&amp;nbsp;I&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linkage and One Definition Rule&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/12.Translation_Units_II.pdf&#34;&gt;Translation Units&amp;nbsp;II&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dealing with multiple translation units and files,&amp;nbsp;&amp;nbsp;&lt;code&gt;#include&lt;/code&gt;, and modules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;13&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/13.Code_Convention.pdf&#34;&gt;Code Conventions&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Project organization and main code conventions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;14&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/14.Ecosystem_I.pdf&#34;&gt;Ecosystem&amp;nbsp;I&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Debugging, and testing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/15.Ecosystem_II.pdf&#34;&gt;Ecosystem&amp;nbsp;II&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cmake,&amp;nbsp;documenting, and other Tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/16.Utilities.pdf&#34;&gt;Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main &lt;code&gt;std&lt;/code&gt; libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;17&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/17.Iterators_Containers_Alg.pdf&#34;&gt;Containers, Iterators, and Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Containers, iterators, algorithms, ranges&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;18&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/18.Advanced_Topics_I.pdf&#34;&gt;Advanced Topics&amp;nbsp;I&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move semantics, universal reference, type deduction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;19&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/19.Advanced_Topics_II.pdf&#34;&gt;Advanced Topics&amp;nbsp;II&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Error handling, C++ idioms, smart pointers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/20.Optimization_I.pdf&#34;&gt;Optimization I&amp;nbsp;-&amp;nbsp;Basic Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ahmdal Law, performance bounds, architecture concepts (ILP, SIMD, etc.), memory hierarchy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/21.Optimization_II.pdf&#34;&gt;Optimization II - Code Optimization&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arithmetic optimizations, memory optimizations, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/22.Optimization_III.pdf&#34;&gt;Optimization III -&amp;nbsp;Non-Coding Optimizations and Benchmarking&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compiler optimizations, profiling and benchmarking tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;ALL-IN-ONE BOOK&lt;/strong&gt;&lt;/em&gt;: &lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/modern-cpp.pdf&#34;&gt;modern-cpp.pdf&lt;/a&gt;&lt;/strong&gt; (could be a few commits behind)&lt;/p&gt; &#xA;&lt;h2&gt;TOPICS IN DETAILS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/01.Introduction.pdf&#34;&gt;1. Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Little History of C/C++ Programming Languages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Areas of Application and Popularity&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Philosophy&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Weakness&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Books and References&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Course&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/02.Basic_Concepts_I.pdf&#34;&gt;2. Basic Concepts I - Fundamental Types and Operations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preparation&lt;/strong&gt;: What compiler should I use?, What editor/IDE compiler should I use?, How to compile?&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hello World&lt;/strong&gt;: I/O Stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Fundamental Types Overview&lt;/strong&gt;: Arithmetic types, Non-standard arithmetic types, &lt;code&gt;void&lt;/code&gt; type, Pointer type and &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversion Rules&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;auto&lt;/code&gt; declaration&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Operators&lt;/strong&gt;: Operators precedence, Prefix/Postfix increment/decrement, Assignment, Compound , and Comma operators, Spaceship operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; , Safe Comparison Operators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/03.Basic_Concepts_II.pdf&#34;&gt;3. Basic Concepts II - Integral and Floating-point Types&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integral Data Types&lt;/strong&gt;: Fixed width integers, &lt;code&gt;size_t&lt;/code&gt; and&lt;code&gt;ptrdiff_t&lt;/code&gt;, Signed/Unsigned integer characteristics, Promotion, Truncation, Undefined behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating-point Types and Arithmetic&lt;/strong&gt;: IEEE Floating-point Standard and Other Representations, Normal/Denormal values, Infinity, Not a Number (&lt;code&gt;NaN&lt;/code&gt;), Machine Epsilon, Units at the Last Place (ULP), Cheatsheet, Summary, Arithmetic Properties, Detect Floating-point Errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating-point Issues&lt;/strong&gt;: Catastrophic cancellation, Floating-point comparison&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/04.Basic_Concepts_III.pdf&#34;&gt;4. Basic Concepts III - Entities and Control Flow&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declaration and Definition&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enumerators&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;struct&lt;/code&gt;, Bitfield, &lt;code&gt;union&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: &lt;code&gt;if&lt;/code&gt; Statement, &lt;code&gt;for&lt;/code&gt; Loop, Range-base &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;, Avoid unused variable warning &lt;code&gt;[[maybe unused]]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/05.Basic_Concepts_IV.pdf&#34;&gt;5. Basic Concepts IV - Memory Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Heap and Stack&lt;/strong&gt;: Stack Memory, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, Non-allocating placement allocation, Non-throwing allocation, Memory leak&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: Variable initialization, Uniform initialization, Fixed-size array initialization, Structure initialization, Dynamic memory initialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pointers and References&lt;/strong&gt;: Pointer Operations, Address-of operator &lt;code&gt;&amp;amp;&lt;/code&gt;, Reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Constant and Literals, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;constexpr&lt;/code&gt;, &lt;code&gt;consteval&lt;/code&gt;, &lt;code&gt;constinit&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;if constexpr&lt;/code&gt;, &lt;code&gt;std::is constant evaluated()&lt;/code&gt;, &lt;code&gt;if consteval&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;volatile&lt;/code&gt; keyword&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explicit Type Conversion&lt;/strong&gt;: &lt;code&gt;static_cast&lt;/code&gt;, &lt;code&gt;const_cast&lt;/code&gt;, &lt;code&gt;reinterpret_cast&lt;/code&gt;, Type punning&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sizeof&lt;/code&gt; Operator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/06.Basic_Concepts_V.pdf&#34;&gt;6. Basic Concepts V - Functions and Preprocessing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Pass by-value, Pass by-pointer, Pass by-reference, Function signature and Overloading, Overloading and &lt;code&gt;=delete&lt;/code&gt;, Default parameters, Attributes &lt;code&gt;[[attributes]]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function Pointer and Function Objects&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;: Capture list, Parameters, Composability, &lt;code&gt;constexpr/consteval&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, &lt;code&gt;mutable&lt;/code&gt;, &lt;code&gt;[[nodiscard]]&lt;/code&gt;, Capture list and classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;: Preprocessors, Common errors, Source location macros, Conditional compiling macros, Stringizing operator (&lt;code&gt;#&lt;/code&gt;), &lt;code&gt;#error&lt;/code&gt; and &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;#pragma&lt;/code&gt;, Token-Pasting Operator (&lt;code&gt;##&lt;/code&gt;), Variadic Macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/07.Object_Oriented_I.pdf&#34;&gt;7. Object-Oriented Programming I&amp;nbsp;-&amp;nbsp;Class&amp;nbsp;Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Classes&lt;/strong&gt;: RAII Idiom&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Hierarchy&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access specifiers&lt;/strong&gt;: Inheritance access specifiers, When use &lt;code&gt;public/protected/private&lt;/code&gt; for data members?&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Constructor&lt;/strong&gt;: Default constructor, Class initialization, Uniform initialization for objects, Delegate constructor, &lt;code&gt;explicit&lt;/code&gt; keyword, &lt;code&gt;[[nodiscard]]&lt;/code&gt; and classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Constructor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Destructor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Defaulted Constructors, Destructor, and Operators&lt;/strong&gt; (&lt;code&gt;= default&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Keywords&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;mutable&lt;/code&gt;, &lt;code&gt;using&lt;/code&gt;, &lt;code&gt;friend&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/08.Object_Oriented_II.pdf&#34;&gt;8. Object-Oriented Programming II&amp;nbsp;-&amp;nbsp;Polymorphism and Operator Overloading&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;: &lt;code&gt;virtual&lt;/code&gt; methods, Virtual table, &lt;code&gt;override&lt;/code&gt; keyword, &lt;code&gt;final&lt;/code&gt; keyword, Common errors, Pure virtual method, Abstract class and interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inheritance Casting and Run-time Type Identification&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;: Overview, Comparison operator &lt;code&gt;&amp;lt;&lt;/code&gt;, Spaceship operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, Subscript operator &lt;code&gt;[]&lt;/code&gt;, Multidimensional Subscript operator &lt;code&gt;[]&lt;/code&gt;, Function call operator &lt;code&gt;()&lt;/code&gt;, static operator &lt;code&gt;[]&lt;/code&gt; and operator &lt;code&gt;()&lt;/code&gt;, Conversion operator &lt;code&gt;T()&lt;/code&gt;, Return type overloading resolution, Increment and decrement operators &lt;code&gt;++&lt;/code&gt;/&lt;code&gt;--&lt;/code&gt;, Assignment operator &lt;code&gt;=&lt;/code&gt;, Stream operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, Operator Notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Special Objects&lt;/strong&gt;: Aggregate, Trivial class, Standard-layout class, Plain old data (POD), Hierarchy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/09.Templates_I.pdf&#34;&gt;9. Templates and Meta-programming I -&amp;nbsp;Function Templates and Compile-Time Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Function Template&lt;/strong&gt;: Overview, Template parameters, Template parameter - default value, Overloading, Specialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Variable&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Parameter Types&lt;/strong&gt;: Generic Type Notes, &lt;code&gt;auto&lt;/code&gt; Placeholder, Class template parameter type, Array and pointer types, Function type&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile-Time Utilities&lt;/strong&gt;: &lt;code&gt;static_assert&lt;/code&gt;, &lt;code&gt;decltype&lt;/code&gt; Keyword, &lt;code&gt;using&lt;/code&gt; Keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Traits&lt;/strong&gt;: Overview, Type traits library, Type manipulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/10.Templates_II.pdf&#34;&gt;10. Templates and Meta-programming II - &amp;nbsp;Class Templates and SFINAE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Template&lt;/strong&gt;: Class specialization, Class template constructor, Constructor template automatic deduction (CTAD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Template - Advanced Concepts&lt;/strong&gt;: Class + Function - Specialization, Dependent Names - &lt;code&gt;typename&lt;/code&gt; and &lt;code&gt;template&lt;/code&gt; Keywords, Class template hierarchy and &lt;code&gt;using&lt;/code&gt;, &lt;code&gt;friend&lt;/code&gt; Keyword, Template Template Arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Template Meta-Programming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SFINAE: Substitution Failure Is Not An Error&lt;/strong&gt;: Function SFINAE, Class SFINAE, Class + Function SFINAE&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variadic Template&lt;/strong&gt;: Folding Expression, Variadic class template&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Concepts&lt;/strong&gt;: Overview, &lt;code&gt;concept&lt;/code&gt; Keyword, &lt;code&gt;requires&lt;/code&gt; Clause, &lt;code&gt;requires&lt;/code&gt; Expression, &lt;code&gt;requires&lt;/code&gt; Expression + Clause, &lt;code&gt;requires&lt;/code&gt; Clause + Expression, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;, Nested &lt;code&gt;requires&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/11.Translation_Units_I.pdf&#34;&gt;11. Translation Units I - Linkage and One Definition Rule&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Concepts&lt;/strong&gt;: Translation unit, Local and global scope, Linkage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Storage Class and Duration&lt;/strong&gt;: Storage duration, Storage class, &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;extern&lt;/code&gt; keywords, Internal/External linkage examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkage of &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;&lt;/strong&gt;: Static Initialization Order Fiasco&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkage Summary&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dealing with Multiple Translation Units&lt;/strong&gt;: Class in multiple translation units&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One Definition Rule (ODR)&lt;/strong&gt;: Global variable issues, ODR - Point 3, &lt;code&gt;inline&lt;/code&gt; functions/variables, &lt;code&gt;constexpr&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR - Function Template&lt;/strong&gt;: Cases, &lt;code&gt;extern&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR - Class Template&lt;/strong&gt;: Cases, &lt;code&gt;extern&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ODR Undefined Behavior and Summary&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/12.Translation_Units_II.pdf&#34;&gt;12. Translation Units II - Include, Module, and Namespace&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;#include&lt;/code&gt; Issues&lt;/strong&gt;: Forward declaration, Include guard, Circular dependencies, Common linking errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Modules&lt;/strong&gt;: Overview, Terminology, Visibility and Reachability, Module unit types, Keywords, Global module fragment, Private module fragment, Header module unit, Module partitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;: Namespace functions vs. &lt;code&gt;static&lt;/code&gt; methods, Namespace alias, Anonymous namespace, &lt;code&gt;inline&lt;/code&gt; namespace, Attributes and namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiling Multiple Translation Units&lt;/strong&gt;: Fundamental compiler flags, Compile Methods, Deal with libraries, Build static/dynamic libraries, Find dynamic library dependencies, Analyze object/executable symbols&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/13.Code_Convention.pdf&#34;&gt;13. Code Conventions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Project Organization&lt;/strong&gt;: Project directories, Project files, “Common” Project Organization Notes, Alternative - “Canonical” project organization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coding Styles and Conventions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Macro and Preprocessing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variables and Arithmetic Types&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structs and Classes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern C++ Features&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Readability and Formatting&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Documentation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/14.Ecosystem_I.pdf&#34;&gt;14. Ecosystem I - Debugging&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Assertion&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution debugging&lt;/strong&gt;: Breakpoints, Watchpoints / Catchpoints, Control Flow, Stack and Info, Print, Disassemble&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Debugging&lt;/strong&gt;: &lt;code&gt;valgrind&lt;/code&gt;, Stack protection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sanitizers&lt;/strong&gt;: Address sanitizer, Leak sanitizer, Memory sanitizers, Undefined behavior sanitizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging Summary&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Warnings&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Testing&lt;/strong&gt;: Unit test, Test-Driven Development (TDD), Code coverage, Fuzz testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Quality&lt;/strong&gt;: &lt;code&gt;clang-tidy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/15.Ecosystem_II.pdf&#34;&gt;15. Ecosystem II - Cmake and Other Tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;: &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;ctest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Documentation&lt;/strong&gt;: &lt;code&gt;doxygen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Statistics&lt;/strong&gt;: Count lines of code, Cyclomatic complexity analyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other Tools&lt;/strong&gt;: Code formatting - &lt;code&gt;clang-format&lt;/code&gt;, &lt;code&gt;Compiler Explorer&lt;/code&gt;, Code transformation - &lt;code&gt;CppInsights&lt;/code&gt;, Code autocompletion - &lt;code&gt;GitHub Co-Pilot/TabNine/Kite&lt;/code&gt;, Local code search - &lt;code&gt;ripgrep&lt;/code&gt;, Code search engine - &lt;code&gt;searchcode/grep.app&lt;/code&gt;, Code benchmarking - &lt;code&gt;Quick-Bench&lt;/code&gt;, Font for Coding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/16.Utilities.pdf&#34;&gt;16. Utilities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I/O Stream&lt;/strong&gt;: Manipulator, &lt;code&gt;ofstream/ifstream&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt;: &lt;code&gt;std::string&lt;/code&gt;, Conversion from/to numeric values, &lt;code&gt;std::string_view&lt;/code&gt;, &lt;code&gt;std::format&lt;/code&gt;, &lt;code&gt;std::print&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math Libraries&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Random Number&lt;/strong&gt;: Basic Concepts, C++ &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;, Seed, PRNG period and quality, Distribution, Quasi-random&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time Measuring&lt;/strong&gt;: Wall-Clock time, User time, System time&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Std Class Templates&lt;/strong&gt;: &lt;code&gt;std::pair&lt;/code&gt;, &lt;code&gt;std::tuple&lt;/code&gt;, &lt;code&gt;std::variant&lt;/code&gt;, &lt;code&gt;std::optional&lt;/code&gt;, &lt;code&gt;std::any&lt;/code&gt;, &lt;code&gt;std::stacktrace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filesystem Library&lt;/strong&gt;: Query methods, Modify methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/17.Iterators_Containers_Alg.pdf&#34;&gt;17. Containers, Iterators, and Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Containers and Iterators&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sequence Containers&lt;/strong&gt;: &lt;code&gt;std::array&lt;/code&gt;, &lt;code&gt;std::vector&lt;/code&gt;, &lt;code&gt;std::list&lt;/code&gt;, &lt;code&gt;std::deque&lt;/code&gt;, &lt;code&gt;std::forward_list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Associative Containers&lt;/strong&gt;: &lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;, &lt;code&gt;std::multiset&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Adaptors&lt;/strong&gt;: &lt;code&gt;std::stack&lt;/code&gt;, &lt;code&gt;std::queue&lt;/code&gt;, &lt;code&gt;std::priority_queue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: &lt;code&gt;std::span&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implement a Custom Iterator&lt;/strong&gt;: Semantic, Implement a simple Iterator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Iterator Utility Methods&lt;/strong&gt;: &lt;code&gt;std::advance&lt;/code&gt;, &lt;code&gt;std::next&lt;/code&gt;, &lt;code&gt;std::prev&lt;/code&gt;, &lt;code&gt;std::distance&lt;/code&gt;, Container access methods, Iterator traits&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Algorithms Library&lt;/strong&gt;: &lt;code&gt;std::find_if&lt;/code&gt;, &lt;code&gt;std::sort&lt;/code&gt;, &lt;code&gt;std::accumulate&lt;/code&gt;, &lt;code&gt;std::generate&lt;/code&gt;, &lt;code&gt;std::remove_if&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++20 Ranges&lt;/strong&gt;: Key concepts, Range view, Range adaptor, Range factory, Range algorithms, Range actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/18.Advanced_Topics_I.pdf&#34;&gt;18. Advanced Topics I&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Move Semantic&lt;/strong&gt;: &lt;code&gt;lvalues&lt;/code&gt; and &lt;code&gt;rvalues&lt;/code&gt; references, Move semantic, &lt;code&gt;std::move&lt;/code&gt;, Class Declaration Semantic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Universal Reference and Perfect Forwarding&lt;/strong&gt;: Universal reference, Reference collapsing rules, Perfect forwarding&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Value Categories&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; Ref-qualifiers and &lt;code&gt;volatile&lt;/code&gt; Overloading&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Elision and RVO&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type Deduction&lt;/strong&gt;: Pass by-reference, Pass by-pointer, Pass by-value, &lt;code&gt;auto&lt;/code&gt; deduction&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt; Correctness&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/19.Advanced_Topics_II.pdf&#34;&gt;19. Advanced Topics II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Undefined Behavior:&lt;/strong&gt; Common cases, Detecting undefined behavior&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: C++ Exceptions, Defining custom exceptions, &lt;code&gt;noexcept&lt;/code&gt; keyword, Memory allocation issues, Alternative error handling approaches&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C++ Idioms&lt;/strong&gt;: Rule of zero/three/five, Singleton, PIMPL, CRTP, Template Virtual Functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart pointers&lt;/strong&gt;: &lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt;, &lt;code&gt;std::weak_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;: Thread Methods, Mutex, Atomic, Task-based parallelism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/20.Optimization_I.pdf&#34;&gt;20. Optimization I&amp;nbsp;-&amp;nbsp;Basic Concepts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Introduction&lt;/strong&gt;: Moore’s Law, Moore’s Law limitations, Reasons for Optimizing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Concepts&lt;/strong&gt;: Asymptotic complexity, Time-Memory Trade-off, Developing Cycle, Ahmdal&#39;s law, Throughput, Bandwidth, Latency, Performance bounds, Arithmetic intensity&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Architecture Concepts&lt;/strong&gt;: Instruction-level parallelism (ILP), Little’s law, Data-level parallelism (SIMD), Thread-level parallelism (TLP), Single Instruction Multiple Threads (SIMT), RISC, CISC Instruction sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Hierarchy&lt;/strong&gt;: Memory hierarchy concepts, Memory locality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/21.Optimization_II.pdf&#34;&gt;21. Optimization II&amp;nbsp;-&amp;nbsp;Code Optimization&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I/O Operations&lt;/strong&gt;: &lt;code&gt;printf&lt;/code&gt;, Memory mapped I/O, Speed up raw data loading&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory Optimizations&lt;/strong&gt;: Heap memory, Stack memory, Cache utilization, data alignment, Memory Prefetch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arithmetic&lt;/strong&gt;: Data types, Operations, Conversion, Floating-point, Compiler intrinsic functions, Value in a range, Lookup table&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;: Loop hoisting, Loop unrolling, Branch hints &lt;code&gt;[[likely/unlikely]]&lt;/code&gt;, Compiler hints &lt;code&gt;[[assume]]&lt;/code&gt;, Recursion&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;: Function call cost, Argument passing, Function optimizations, Function inlining, Pointers aliasing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Std Library and Other Language Aspects&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/federico-busato/Modern-CPP-Programming/raw/master/22.Optimization_III.pdf&#34;&gt;22. Optimization III -&amp;nbsp;Non-Coding Optimizations and Benchmarking&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Optimizations&lt;/strong&gt;: About the compiler, Compiler optimization flags, Linker optimization flags, Architecture flags, Help the Compiler to produce better code, Profile guided optimization (PGO), Post-Processing Binary Optimizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler Transformation Techniques&lt;/strong&gt;: Basic Transformations, Loop unswitching, Loop fusion, Loop fission, Loop interchange, Loop tiling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Libraries and Data Structures&lt;/strong&gt;: External libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Benchmarking&lt;/strong&gt;: What to test?, Workload/Dataset quality, Cache behavior, Stable CPU performance, Program, Multi-threads considerations, Program memory layout, Measurement overhead, Compiler optimizations, Metric evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Profiling&lt;/strong&gt;: &lt;code&gt;gprof&lt;/code&gt;, &lt;code&gt;uftrace&lt;/code&gt;, &lt;code&gt;callgrind&lt;/code&gt;, &lt;code&gt;cachegrind&lt;/code&gt;, &lt;code&gt;perf&lt;/code&gt; Linux profiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Computing&lt;/strong&gt;: Concurrency vs. Parallelism, Performance scaling, Gustafson’s Law, Parallel programming languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Software Design Chapter&lt;/li&gt; &#xA; &lt;li&gt;Build Aspects Chapter (e.g. reducing build time)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Essential Tool&lt;/h3&gt; &#xA;&lt;p&gt;Online compiler and execution: &lt;a href=&#34;https://godbolt.org/&#34;&gt;CompilerExplorer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for code execution: [Add new..] -&amp;gt; [execution only]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting bugs 🐛 and contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you find any typo, conceptual error, or section to improve, please report them by using the &lt;code&gt;issue&lt;/code&gt; panel.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Federico Busato&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/fedebusato&#34;&gt;twitter.com/fedebusato&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/federico-busato/&#34;&gt;www.linkedin.com/in/federico-busato/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rasbt/LLMs-from-scratch</title>
    <updated>2024-02-04T01:46:05Z</updated>
    <id>tag:github.com,2024-02-04:/rasbt/LLMs-from-scratch</id>
    <link href="https://github.com/rasbt/LLMs-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementing a ChatGPT-like LLM from scratch, step by step&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Build a Large Language Model (From Scratch)&lt;/h1&gt; &#xA;&lt;p&gt;(If you downloaded the code bundle from the Manning website, please consider visiting the official code repository on GitHub at &lt;a href=&#34;https://github.com/rasbt/LLMs-from-scratch&#34;&gt;https://github.com/rasbt/LLMs-from-scratch&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mng.bz/orYv&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/images/cover.jpg&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;http://mng.bz/orYv&#34;&gt;&lt;em&gt;Build a Large Language Model (from Scratch)&lt;/em&gt;&lt;/a&gt;, you&#39;ll discover how LLMs work from the inside out. In this book, I&#39;ll guide you step by step through creating your own LLM, explaining each stage with clear text, diagrams, and examples.&lt;/p&gt; &#xA;&lt;p&gt;The method described in this book for training and developing your own small-but-functional model for educational purposes mirrors the approach used in creating large-scale foundational models such as those behind ChatGPT.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Link to the official &lt;a href=&#34;https://github.com/rasbt/LLMs-from-scratch&#34;&gt;source code repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mng.bz/orYv&#34;&gt;Link to the early access version&lt;/a&gt; at Manning&lt;/li&gt; &#xA; &lt;li&gt;ISBN 9781633437166&lt;/li&gt; &#xA; &lt;li&gt;Publication in Early 2025 (estimated)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the &lt;code&gt;Readme.md&lt;/code&gt; file is a Markdown (&lt;code&gt;.md&lt;/code&gt;) file. If you have downloaded this code bundle from the Manning website and are viewing it on your local computer, I recommend using a Markdown editor or previewer for proper viewing. If you haven&#39;t installed a Markdown editor yet, &lt;a href=&#34;https://www.marktext.cc&#34;&gt;MarkText&lt;/a&gt; is a good free option.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can view this and other files on GitHub at &lt;a href=&#34;https://github.com/rasbt/LLMs-from-scratch&#34;&gt;https://github.com/rasbt/LLMs-from-scratch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Chapter Title&lt;/th&gt; &#xA;   &lt;th&gt;Main Code (for quick access)&lt;/th&gt; &#xA;   &lt;th&gt;All Code + Supplementary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 1: Understanding Large Language Models&lt;/td&gt; &#xA;   &lt;td&gt;No code&lt;/td&gt; &#xA;   &lt;td&gt;No code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 2: Working with Text Data&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch02/01_main-chapter-code/ch02.ipynb&#34;&gt;ch02.ipynb&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch02/01_main-chapter-code/dataloader.ipynb&#34;&gt;dataloader.ipynb&lt;/a&gt; (summary)&lt;br&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch02/01_main-chapter-code/exercise-solutions.ipynb&#34;&gt;exercise-solutions.ipynb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch02&#34;&gt;./ch02&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 3: Coding Attention Mechanisms&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch03/01_main-chapter-code/ch03.ipynb&#34;&gt;ch03.ipynb&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch03/01_main-chapter-code/multihead-attention.ipynb&#34;&gt;multihead-attention.ipynb&lt;/a&gt; (summary)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch03&#34;&gt;./ch03&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 4: Implementing a GPT Model from Scratch&lt;/td&gt; &#xA;   &lt;td&gt;coming soon&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 5: Pretraining on Unlabeled Data&lt;/td&gt; &#xA;   &lt;td&gt;Q1 2024&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 6: Finetuning for Text Classification&lt;/td&gt; &#xA;   &lt;td&gt;Q2 2024&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 7: Finetuning with Human Feedback&lt;/td&gt; &#xA;   &lt;td&gt;Q2 2024&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ch 8: Using Large Language Models in Practice&lt;/td&gt; &#xA;   &lt;td&gt;Q2/3 2024&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Appendix A: Introduction to PyTorch*&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A/03_main-chapter-code/code-part1.ipynb&#34;&gt;code-part1.ipynb&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A/03_main-chapter-code/code-part2.ipynb&#34;&gt;code-part2.ipynb&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A/03_main-chapter-code/DDP-script.py&#34;&gt;DDP-script.py&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A/03_main-chapter-code/exercise-solutions.ipynb&#34;&gt;exercise-solutions.ipynb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A&#34;&gt;./appendix-A&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(* Please see &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A/01_optional-python-setup-preferences&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/appendix-A/02_installing-python-libraries&#34;&gt;this&lt;/a&gt; folder if you need more guidance on installing Python and Python packages.)&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/images/mental-model.jpg&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;(A mental model summarizing the contents covered in this book.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zed-industries/zed</title>
    <updated>2024-02-04T01:46:05Z</updated>
    <id>tag:github.com,2024-02-04:/zed-industries/zed</id>
    <link href="https://github.com/zed-industries/zed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code at the speed of thought – Zed is a high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zed&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zed-industries/zed/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/zed-industries/zed/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to Zed, a high-performance, multiplayer code editor from the creators of &lt;a href=&#34;https://github.com/atom/atom&#34;&gt;Atom&lt;/a&gt; and &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Tree-sitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://zed.dev/download&#34;&gt;download&lt;/a&gt; Zed today for macOS (v10.15+).&lt;/p&gt; &#xA;&lt;p&gt;Support for additional platforms is on our &lt;a href=&#34;https://zed.dev/roadmap&#34;&gt;roadmap&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (&lt;a href=&#34;https://github.com/zed-industries/zed/issues/5395&#34;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Windows (&lt;a href=&#34;https://github.com/zed-industries/zed/issues/5394&#34;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Web (&lt;a href=&#34;https://github.com/zed-industries/zed/issues/5396&#34;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For macOS users, you can also install Zed from Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install zed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing Zed&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/developing_zed__building_zed.md&#34;&gt;Building Zed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zed-industries/zed/main/docs/src/developing_zed__local_collaboration.md&#34;&gt;Running Collaboration Locally&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/zed-industries/zed/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for ways you can contribute to Zed.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;License information for third party dependencies must be correctly provided for CI to pass.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/EmbarkStudios/cargo-about&#34;&gt;&lt;code&gt;cargo-about&lt;/code&gt;&lt;/a&gt; to automatically comply with open source licenses. If CI is failing, check the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is it showing a &lt;code&gt;no license specified&lt;/code&gt; error for a crate you&#39;ve created? If so, add &lt;code&gt;publish = false&lt;/code&gt; under &lt;code&gt;[package]&lt;/code&gt; in your crate&#39;s Cargo.toml.&lt;/li&gt; &#xA; &lt;li&gt;Is the error &lt;code&gt;failed to satisfy license requirements&lt;/code&gt; for a dependency? If so, first determine what license the project has and whether this system is sufficient to comply with this license&#39;s requirements. If you&#39;re unsure, ask a lawyer. Once you&#39;ve verified that this system is acceptable add the license&#39;s SPDX identifier to the &lt;code&gt;accepted&lt;/code&gt; array in &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Is &lt;code&gt;cargo-about&lt;/code&gt; unable to find the license for a dependency? If so, add a clarification field at the end of &lt;code&gt;script/licenses/zed-licenses.toml&lt;/code&gt;, as specified in the &lt;a href=&#34;https://embarkstudios.github.io/cargo-about/cli/generate/config.html#crate-configuration&#34;&gt;cargo-about book&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>