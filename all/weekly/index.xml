<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-25T01:37:15Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>colinhacks/zod</title>
    <updated>2025-05-25T01:37:15Z</updated>
    <id>tag:github.com,2025-05-25:/colinhacks/zod</id>
    <link href="https://github.com/colinhacks/zod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript-first schema validation with static type inference&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/colinhacks/zod/main/logo.svg?sanitize=true&#34; width=&#34;200px&#34; align=&#34;center&#34; alt=&#34;Zod logo&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Zod&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ✨ &lt;a href=&#34;https://zod.dev&#34;&gt;https://zod.dev&lt;/a&gt; ✨ &lt;br&gt; TypeScript-first schema validation with static type inference &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/colinhacks/zod/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/colinhacks/zod/actions/workflows/test.yml/badge.svg?event=push&amp;amp;branch=master&#34; alt=&#34;Zod CI status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/colinhacks&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/created%20by-@colinhacks-4BBAAB.svg?sanitize=true&#34; alt=&#34;Created by Colin McDonnell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/colinhacks/zod&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/zod&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/zod.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/zod&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/colinhacks/zod&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/KaSRdyX2vc&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/893487829802418277?label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;discord server&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://zod.dev&#34;&gt;Documentation&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://discord.gg/RcG33DQJdf&#34;&gt;Discord&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/zod&#34;&gt;npm&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://github.com/colinhacks/zod/issues/new&#34;&gt;Issues&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://twitter.com/colinhacks&#34;&gt;@colinhacks&lt;/a&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Featured sponsor: Jazz&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://jazz.tools/?utm_source=zod&#34;&gt; &#xA;  &lt;picture width=&#34;95%&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/garden-co/jazz/938f6767e46cdfded60e50d99bf3b533f4809c68/homepage/homepage/public/Zod%20sponsor%20message.png&#34;&gt; &#xA;   &lt;img alt=&#34;jazz logo&#34; src=&#34;https://raw.githubusercontent.com/garden-co/jazz/938f6767e46cdfded60e50d99bf3b533f4809c68/homepage/homepage/public/Zod%20sponsor%20message.png&#34; width=&#34;95%&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;sub&gt;Learn more about &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;mailto:sponsorship@colinhacks.com&#34;&gt;featured sponsorships&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://zod.dev&#34;&gt;Read the docs →&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;What is Zod?&lt;/h2&gt; &#xA;&lt;p&gt;Zod is a TypeScript-first validation library. Define a schema and parse some data with it. You&#39;ll get back a strongly typed, validated result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { z } from &#34;zod/v4&#34;;&#xA;&#xA;const User = z.object({&#xA;  name: z.string(),&#xA;});&#xA;&#xA;// some untrusted data...&#xA;const input = { /* stuff */ };&#xA;&#xA;// the parsed result is validated and type safe!&#xA;const data = User.parse(input);&#xA;&#xA;// so you can use it with confidence :)&#xA;console.log(data.name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zero external dependencies&lt;/li&gt; &#xA; &lt;li&gt;Works in Node.js and all modern browsers&lt;/li&gt; &#xA; &lt;li&gt;Tiny: &lt;code&gt;2kb&lt;/code&gt; core bundle (gzipped)&lt;/li&gt; &#xA; &lt;li&gt;Immutable API: methods return a new instance&lt;/li&gt; &#xA; &lt;li&gt;Concise interface&lt;/li&gt; &#xA; &lt;li&gt;Works with TypeScript and plain JS&lt;/li&gt; &#xA; &lt;li&gt;Built-in JSON Schema conversion&lt;/li&gt; &#xA; &lt;li&gt;Extensive ecosystem&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install zod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Before you can do anything else, you need to define a schema. For the purposes of this guide, we&#39;ll use a simple object schema.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import { z } from &#34;zod/v4&#34;; &#xA;&#xA;const Player = z.object({ &#xA;  username: z.string(),&#xA;  xp: z.number()&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing data&lt;/h3&gt; &#xA;&lt;p&gt;Given any Zod schema, use &lt;code&gt;.parse&lt;/code&gt; to validate an input. If it&#39;s valid, Zod returns a strongly-typed &lt;em&gt;deep clone&lt;/em&gt; of the input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;Player.parse({ username: &#34;billie&#34;, xp: 100 }); &#xA;// =&amp;gt; returns { username: &#34;billie&#34;, xp: 100 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; — If your schema uses certain asynchronous APIs like &lt;code&gt;async&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/colinhacks/zod/main/#refine&#34;&gt;refinements&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/colinhacks/zod/main/#transform&#34;&gt;transforms&lt;/a&gt;, you&#39;ll need to use the &lt;code&gt;.parseAsync()&lt;/code&gt; method instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const schema = z.string().refine(async (val) =&amp;gt; val.length &amp;lt;= 8);&#xA;&#xA;await schema.parseAsync(&#34;hello&#34;);&#xA;// =&amp;gt; &#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling errors&lt;/h3&gt; &#xA;&lt;p&gt;When validation fails, the &lt;code&gt;.parse()&lt;/code&gt; method will throw a &lt;code&gt;ZodError&lt;/code&gt; instance with granular information about the validation issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;try {&#xA;  Player.parse({ username: 42, xp: &#34;100&#34; });&#xA;} catch(err){&#xA;  if(error instanceof z.ZodError){&#xA;    err.issues; &#xA;    /* [&#xA;      {&#xA;        expected: &#39;string&#39;,&#xA;        code: &#39;invalid_type&#39;,&#xA;        path: [ &#39;username&#39; ],&#xA;        message: &#39;Invalid input: expected string&#39;&#xA;      },&#xA;      {&#xA;        expected: &#39;number&#39;,&#xA;        code: &#39;invalid_type&#39;,&#xA;        path: [ &#39;xp&#39; ],&#xA;        message: &#39;Invalid input: expected number&#39;&#xA;      }&#xA;    ] */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid a &lt;code&gt;try/catch&lt;/code&gt; block, you can use the &lt;code&gt;.safeParse()&lt;/code&gt; method to get back a plain result object containing either the successfully parsed data or a &lt;code&gt;ZodError&lt;/code&gt;. The result type is a &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions&#34;&gt;discriminated union&lt;/a&gt;, so you can handle both cases conveniently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const result = Player.safeParse({ username: 42, xp: &#34;100&#34; });&#xA;if (!result.success) {&#xA;  result.error;   // ZodError instance&#xA;} else {&#xA;  result.data;    // { username: string; xp: number }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; — If your schema uses certain asynchronous APIs like &lt;code&gt;async&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/colinhacks/zod/main/#refine&#34;&gt;refinements&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/colinhacks/zod/main/#transform&#34;&gt;transforms&lt;/a&gt;, you&#39;ll need to use the &lt;code&gt;.safeParseAsync()&lt;/code&gt; method instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const schema = z.string().refine(async (val) =&amp;gt; val.length &amp;lt;= 8);&#xA;&#xA;await schema.safeParseAsync(&#34;hello&#34;);&#xA;// =&amp;gt; { success: true; data: &#34;hello&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inferring types&lt;/h3&gt; &#xA;&lt;p&gt;Zod infers a static type from your schema definitions. You can extract this type with the &lt;code&gt;z.infer&amp;lt;&amp;gt;&lt;/code&gt; utility and use it however you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const Player = z.object({ &#xA;  username: z.string(),&#xA;  xp: z.number()&#xA;});&#xA;&#xA;// extract the inferred type&#xA;type Player = z.infer&amp;lt;typeof Player&amp;gt;;&#xA;&#xA;// use it in your code&#xA;const player: Player = { username: &#34;billie&#34;, xp: 100 };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases, the input &amp;amp; output types of a schema can diverge. For instance, the &lt;code&gt;.transform()&lt;/code&gt; API can convert the input from one type to another. In these cases, you can extract the input and output types independently:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const mySchema = z.string().transform((val) =&amp;gt; val.length);&#xA;&#xA;type MySchemaIn = z.input&amp;lt;typeof mySchema&amp;gt;;&#xA;// =&amp;gt; string&#xA;&#xA;type MySchemaOut = z.output&amp;lt;typeof mySchema&amp;gt;; // equivalent to z.infer&amp;lt;typeof mySchema&amp;gt;&#xA;// number&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>zen-browser/desktop</title>
    <updated>2025-05-25T01:37:15Z</updated>
    <id>tag:github.com,2025-05-25:/zen-browser/desktop</id>
    <link href="https://github.com/zen-browser/desktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Welcome to a calmer internet&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/docs/assets/zen-dark.svg?sanitize=true&#34; width=&#34;100px&#34; align=&#34;left&#34;&gt; &#xA;&lt;h3&gt;&lt;code&gt;Zen Browser&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zen-browser/desktop/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/zen-browser/desktop/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/zen-browser&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/zen-browser/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zen-browser/desktop/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/zen-browser/desktop/actions/workflows/build.yml/badge.svg?branch=stable&#34; alt=&#34;Zen Release builds&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✨ Experience tranquillity while browsing the internet with Zen! Our mission is to give you a balance between speed, privacy and productivity!&lt;/p&gt; &#xA;&lt;div flex=&#34;true&#34;&gt; &#xA; &lt;a href=&#34;https://zen-browser.app/download&#34;&gt; Download &lt;/a&gt; • &#xA; &lt;a href=&#34;https://zen-browser.app&#34;&gt; Website &lt;/a&gt; • &#xA; &lt;a href=&#34;https://docs.zen-browser.app&#34;&gt; Documentation &lt;/a&gt; • &#xA; &lt;a href=&#34;https://zen-browser.app/release-notes/latest&#34;&gt; Release Notes &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🖥️ Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Zen is currently built using Firefox version &lt;code&gt;138.0.4&lt;/code&gt;! 🚀&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zen-browser.app/download?twilight&#34;&gt;&lt;code&gt;Zen Twilight&lt;/code&gt;&lt;/a&gt; - Is currently built using Firefox version &lt;code&gt;RC 139.0&lt;/code&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Check out the latest &lt;a href=&#34;https://zen-browser.app/release-notes&#34;&gt;release notes&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Part of our mission is to keep Zen up-to-date with the latest version of Firefox, so you can enjoy the latest features and security updates!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤝 Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Zen is an open-source project, and we welcome contributions from the community! Please take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/docs/contribute.md&#34;&gt;contribution guidelines&lt;/a&gt; before getting started!&lt;/p&gt; &#xA;&lt;h3&gt;Issue metrics&lt;/h3&gt; &#xA;&lt;p&gt;We keep track of how many issues are closed at the end of the month in &lt;a href=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/docs/issue-metrics&#34;&gt;docs/issue-metrics&lt;/a&gt;. We use this to keep track of our issues and see our progress! 📈&lt;/p&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;Zen uses &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;, meaning versions are displayed as &lt;code&gt;a.b.cd&lt;/code&gt; where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt; is the major version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; is the minor version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; is the branch prefix&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt; is the patch version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;Zen is divided into 2 main branches. We use &lt;code&gt;dev&lt;/code&gt; for development and &lt;code&gt;stable&lt;/code&gt; for stable releases. The &lt;code&gt;dev&lt;/code&gt; branch is where all the new features are added and where &lt;code&gt;twilight&lt;/code&gt; builds are generated. The &lt;code&gt;stable&lt;/code&gt; branch is where the stable releases are generated.&lt;/p&gt; &#xA;&lt;p&gt;We divide into 2 branches in case there&#39;s any really important security update (for example) that needs to be released before the next stable release. This allows us to do patches without releasing unstable versions to the public.&lt;/p&gt; &#xA;&lt;h2&gt;📥 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Operating Systems&lt;/h3&gt; &#xA;&lt;p&gt;Zen is available for Linux, macOS, and Windows. You can download the latest version from the official website at &lt;a href=&#34;https://zen-browser.app/download&#34;&gt;zen-browser.app&lt;/a&gt;, or from the &lt;a href=&#34;https://github.com/zen-browser/desktop/releases&#34;&gt;GitHub Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t see your OS listed below, that&#39;s because we already have it in our &lt;a href=&#34;https://zen-browser.app/download&#34;&gt;downloads page&lt;/a&gt;! Make sure to check it out!&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;h5&gt;Winget&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps&#34;&gt;winget install --id Zen-Team.Zen-Browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires macOS 10.15 or later&lt;/li&gt; &#xA; &lt;li&gt;Available for ARM and Intel architectures&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also install Zen using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install zen-browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;h5&gt;Arch-based distributions&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S zen-browser-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Other Linux distributions (Tarball or AppImage)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Tarball&lt;/code&gt; install:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash &amp;lt;(curl -s https://updates.zen-browser.app/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AppImage&lt;/code&gt; install:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash &amp;lt;(curl https://updates.zen-browser.app/appimage.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AppImage install requires &lt;code&gt;zsync&lt;/code&gt; for the Update feature&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Again, if you don&#39;t see your OS listed above, that&#39;s because we already have it in our &lt;a href=&#34;https://zen-browser.app/download&#34;&gt;downloads page&lt;/a&gt;! 🔄&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To upgrade the browser to a newer version, use the embedded update functionality in &lt;code&gt;About Zen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;👨‍💻 Development and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Some components used by @zen-browser as an attempt to make Firefox forks a better place, and for other to enjoy the beauty of OSS. You can find them &lt;a href=&#34;https://github.com/zen-browser/desktop/tree/dev/src/zen&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Run Locally&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In order to download and run Zen locally, please follow &lt;a href=&#34;https://docs.zen-browser.app/guides/building&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Special Thanks&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Special thanks to... EVERYONE 🎉! Checkout the team and contributors page &lt;a href=&#34;https://zen-browser.app/about&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Third Party Code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Zen couldn&#39;t be in its current state without the help of these amazing projects! 🙏&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zen&#39;s default preferences are based on &lt;a href=&#34;https://github.com/yokoffing/Betterfox&#34;&gt;BetterFox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradient image extracted from &lt;a href=&#34;https://github.com/neurokitti/Arc_Palette&#34;&gt;Arc Palette&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;icons.css&lt;/code&gt; has been modified from &lt;a href=&#34;https://github.com/bmFtZQ/edge-frfox&#34;&gt;Edge Firefox&lt;/a&gt; (MIT licensed file).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🖥️ Comparison with other browsers&lt;/h3&gt; &#xA;&lt;p&gt;Thanks everyone for making Zen stand out among these giants!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#zen-browser/desktop&amp;amp;chromium/chromium&amp;amp;brave/brave-browser&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=zen-browser/desktop,chromium/chromium,brave/brave-browser&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;Zen browser is under the &lt;a href=&#34;https://raw.githubusercontent.com/zen-browser/desktop/dev/LICENSE&#34;&gt;MPL 2.0 LICENSE&lt;/a&gt;. All the code is open-source and free to use! Attribution is appreciated but not required.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>YaLTeR/niri</title>
    <updated>2025-05-25T01:37:15Z</updated>
    <id>tag:github.com,2025-05-25:/YaLTeR/niri</id>
    <link href="https://github.com/YaLTeR/niri" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;niri&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A scrollable-tiling Wayland compositor.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://matrix.to/#/%23niri:matrix.org&#34;&gt;&lt;img alt=&#34;Matrix&#34; src=&#34;https://img.shields.io/badge/matrix-%23niri-blue?logo=matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YaLTeR/niri/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;GitHub License&#34; src=&#34;https://img.shields.io/github/license/YaLTeR/niri&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/YaLTeR/niri/releases&#34;&gt;&lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/YaLTeR/niri?logo=github&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; | &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Configuration:-Overview&#34;&gt;Configuration&lt;/a&gt; | &lt;a href=&#34;https://github.com/YaLTeR/niri/discussions/325&#34;&gt;Setup&amp;nbsp;Showcase&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/535e6530-2f44-4b84-a883-1240a3eee6e9&#34; alt=&#34;niri with a few windows open&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Windows are arranged in columns on an infinite strip going to the right. Opening a new window never causes existing windows to resize.&lt;/p&gt; &#xA;&lt;p&gt;Every monitor has its own separate window strip. Windows can never &#34;overflow&#34; onto an adjacent monitor.&lt;/p&gt; &#xA;&lt;p&gt;Workspaces are dynamic and arranged vertically. Every monitor has an independent set of workspaces, and there&#39;s always one empty workspace present all the way down.&lt;/p&gt; &#xA;&lt;p&gt;The workspace arrangement is preserved across disconnecting and connecting monitors where it makes sense. When a monitor disconnects, its workspaces will move to another monitor, but upon reconnection they will move back to the original monitor.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built from the ground up for scrollable tiling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Workspaces&#34;&gt;Dynamic workspaces&lt;/a&gt; like in GNOME&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://github.com/user-attachments/assets/379a5d1f-acdb-4c11-b36c-e85fd91f0995&#34;&gt;Overview&lt;/a&gt; that zooms out workspaces and windows&lt;/li&gt; &#xA; &lt;li&gt;Built-in screenshot UI&lt;/li&gt; &#xA; &lt;li&gt;Monitor and window screencasting through xdg-desktop-portal-gnome &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules#block-out-from&#34;&gt;block out&lt;/a&gt; sensitive windows from screencasts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Screencasting#dynamic-screencast-target&#34;&gt;Dynamic cast target&lt;/a&gt; that can change what it shows on the go&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/assets/1794388/946a910e-9bec-4cd1-a923-4a9421707515&#34;&gt;Touchpad&lt;/a&gt; and &lt;a href=&#34;https://github.com/YaLTeR/niri/assets/1794388/8464e65d-4bf2-44fa-8c8e-5883355bd000&#34;&gt;mouse&lt;/a&gt; gestures&lt;/li&gt; &#xA; &lt;li&gt;Group windows into &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Tabs&#34;&gt;tabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configurable layout: gaps, borders, struts, window sizes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Configuration:-Layout#gradients&#34;&gt;Gradient borders&lt;/a&gt; with Oklab and Oklch support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/assets/1794388/ce178da2-af9e-4c51-876f-8709c241d95e&#34;&gt;Animations&lt;/a&gt; with support for &lt;a href=&#34;https://github.com/YaLTeR/niri/assets/1794388/27a238d6-0a22-4692-b794-30dc7a626fad&#34;&gt;custom shaders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Live-reloading config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Video Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&#34;&gt;https://github.com/YaLTeR/niri/assets/1794388/bce834b0-f205-434e-a027-b373495f9729&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Niri is stable for day-to-day use and does most things expected of a Wayland compositor. Many people are daily-driving niri, and are happy to help in our &lt;a href=&#34;https://matrix.to/#/%23niri:matrix.org&#34;&gt;Matrix channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Give it a try! Follow the instructions on the &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; wiki page. Have your &lt;a href=&#34;https://github.com/Alexays/Waybar&#34;&gt;waybar&lt;/a&gt;s and &lt;a href=&#34;https://codeberg.org/dnkl/fuzzel&#34;&gt;fuzzel&lt;/a&gt;s ready: niri is not a complete desktop environment.&lt;/p&gt; &#xA;&lt;p&gt;Here are some points you may have questions about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-monitor&lt;/strong&gt;: yes, a core part of the design from the very start. Mixed DPI works.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fractional scaling&lt;/strong&gt;: yes, plus all niri UI stays pixel-perfect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NVIDIA&lt;/strong&gt;: seems to work fine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Floating windows&lt;/strong&gt;: yes, starting from niri 25.01.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Input devices&lt;/strong&gt;: niri supports tablets, touchpads, and touchscreens. You can map the tablet to a specific monitor, or use &lt;a href=&#34;https://opentabletdriver.net/&#34;&gt;OpenTabletDriver&lt;/a&gt;. We have touchpad gestures, but no touchscreen gestures yet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wlr protocols&lt;/strong&gt;: yes, we have most of the important ones like layer-shell, gamma-control, screencopy. You can check on &lt;a href=&#34;https://wayland.app&#34;&gt;wayland.app&lt;/a&gt; at the bottom of each protocol&#39;s page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: while I run niri on beefy machines, I try to stay conscious of performance. I&#39;ve seen someone use it fine on an Eee&amp;nbsp;PC&amp;nbsp;900 from&amp;nbsp;2008, of all things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Xwayland&lt;/strong&gt;: no built-in support, but xwayland-satellite is &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Xwayland#using-xwayland-satellite&#34;&gt;easy to set up&lt;/a&gt; and works very well. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Steam and games, including Proton: work perfectly through xwayland-satellite.&lt;/li&gt; &#xA;   &lt;li&gt;JetBrains IDEs, Ghidra: work well through xwayland-satellite.&lt;/li&gt; &#xA;   &lt;li&gt;Discord and other Electron apps: work well through xwayland-satellite.&lt;/li&gt; &#xA;   &lt;li&gt;Chromium and VSCode: work perfectly natively on Wayland with the right flags.&lt;/li&gt; &#xA;   &lt;li&gt;X11 apps that want to position windows or bars at specific screen coordinates: won&#39;t work well; you can run them in a nested compositor like &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Xwayland#using-the-labwc-wayland-compositor&#34;&gt;labwc&lt;/a&gt; or &lt;a href=&#34;https://github.com/YaLTeR/niri/wiki/Xwayland#directly-running-xwayland-in-rootful-mode&#34;&gt;rootful Xwayland&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Display scaling (integer or fractional) keeps X11 apps crisp, but you need the latest xwayland-satellite. For games, you can run them in &lt;a href=&#34;https://github.com/ValveSoftware/gamescope&#34;&gt;gamescope&lt;/a&gt; at native resolution, even with display scaling.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;Niri is heavily inspired by &lt;a href=&#34;https://github.com/paperwm/PaperWM&#34;&gt;PaperWM&lt;/a&gt; which implements scrollable tiling on top of GNOME Shell.&lt;/p&gt; &#xA;&lt;p&gt;One of the reasons that prompted me to try writing my own compositor is being able to properly separate the monitors. Being a GNOME Shell extension, PaperWM has to work against Shell&#39;s global window coordinate space to prevent windows from overflowing.&lt;/p&gt; &#xA;&lt;h2&gt;Tile Scrollably Elsewhere&lt;/h2&gt; &#xA;&lt;p&gt;Here are some other projects which implement a similar workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paperwm/PaperWM&#34;&gt;PaperWM&lt;/a&gt;: scrollable tiling on top of GNOME Shell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterfajdiga/karousel&#34;&gt;karousel&lt;/a&gt;: scrollable tiling on top of KDE.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dawsers/scroll&#34;&gt;scroll&lt;/a&gt; and &lt;a href=&#34;https://spwhitton.name/tech/code/papersway/&#34;&gt;papersway&lt;/a&gt;: scrollable tiling on top of sway/i3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyprwm/hyprland-plugins/tree/main/hyprscrolling&#34;&gt;hyprscrolling&lt;/a&gt; and &lt;a href=&#34;https://gitlab.com/magus/hyprslidr&#34;&gt;hyprslidr&lt;/a&gt;: scrollable tiling on top of Hyprland.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mogenson/PaperWM.spoon&#34;&gt;PaperWM.spoon&lt;/a&gt;: scrollable tiling on top of macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/Kmz8ODolnDg?list=PLRdS-n5seLRqrmWDQY4KDqtRMfIwU0U3T&#34;&gt;niri: Making a Wayland compositor in Rust&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;My talk from the 2024 Moscow RustCon about niri, and how I do randomized property testing and profiling, and measure input latency. The talk is in Russian, but I prepared full English subtitles that you can find in YouTube&#39;s subtitle language selector.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;We have a Matrix chat, feel free to join and ask a question: &lt;a href=&#34;https://matrix.to/#/%23niri:matrix.org&#34;&gt;https://matrix.to/#/#niri:matrix.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>