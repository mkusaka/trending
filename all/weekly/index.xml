<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-25T01:38:05Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>toss/es-toolkit</title>
    <updated>2024-08-25T01:38:05Z</updated>
    <id>tag:github.com,2024-08-25:/toss/es-toolkit</id>
    <link href="https://github.com/toss/es-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern JavaScript utility library that&#39;s 2-3 times faster and up to 97% smaller—a major upgrade to lodash.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/toss/es-toolkit/main/docs/public/og.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;es-toolkit · &lt;a href=&#34;https://github.com/toss/slash/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/toss/es-toolkit&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/toss/es-toolkit/graph/badge.svg?token=8N5S3AR3C7&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/es-toolkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/es-toolkit?logo=npm&#34; alt=&#34;NPM badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jsr.io/@es-toolkit/es-toolkit&#34;&gt;&lt;img src=&#34;https://jsr.io/badges/@es-toolkit/es-toolkit&#34; alt=&#34;JSR badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/toss/es-toolkit/raw/main/README-ko_kr.md&#34;&gt;한국어&lt;/a&gt; | &lt;a href=&#34;https://github.com/toss/es-toolkit/raw/main/README-zh_hans.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/toss/es-toolkit/raw/main/README-ja_jp.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;es-toolkit is a state-of-the-art, high-performance JavaScript utility library with a small bundle size and strong type annotations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;es-toolkit offers a variety of everyday utility functions with modern implementations, such as &lt;a href=&#34;https://es-toolkit.slash.page/reference/function/debounce.html&#34;&gt;debounce&lt;/a&gt;, &lt;a href=&#34;https://es-toolkit.slash.page/reference/promise/delay.html&#34;&gt;delay&lt;/a&gt;, &lt;a href=&#34;https://es-toolkit.slash.page/reference/array/chunk.html&#34;&gt;chunk&lt;/a&gt;, &lt;a href=&#34;https://es-toolkit.slash.page/reference/math/sum.html&#34;&gt;sum&lt;/a&gt;, and &lt;a href=&#34;https://es-toolkit.slash.page/reference/object/pick.html&#34;&gt;pick&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Designed with performance in mind, es-toolkit achieves &lt;a href=&#34;https://es-toolkit.slash.page/performance.html&#34;&gt;2-3× better performance&lt;/a&gt; in modern JavaScript environments.&lt;/li&gt; &#xA; &lt;li&gt;es-toolkit supports tree shaking out of the box, and &lt;a href=&#34;https://es-toolkit.slash.page/bundle-size.html&#34;&gt;reduces JavaScript code by up to 97%&lt;/a&gt; compared to other libraries.&lt;/li&gt; &#xA; &lt;li&gt;es-toolkit includes built-in TypeScript support, with straightforward yet robust types. It also provides useful type guards such as &lt;a href=&#34;https://es-toolkit.slash.page/reference/predicate/isNotNil.html&#34;&gt;isNotNil&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;es-toolkit is battle-tested with 100% test coverage, ensuring reliability and robustness.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// import from &#39;@es-toolkit/es-toolkit&#39; in jsr.&#xA;import { debounce, chunk } from &#39;es-toolkit&#39;;&#xA;&#xA;const debouncedLog = debounce(message =&amp;gt; {&#xA;  console.log(message);&#xA;}, 300);&#xA;&#xA;// This call will be debounced&#xA;debouncedLog(&#39;Hello, world!&#39;);&#xA;&#xA;const array = [1, 2, 3, 4, 5, 6];&#xA;const chunkedArray = chunk(array, 2);&#xA;&#xA;console.log(chunkedArray);&#xA;// Output: [[1, 2], [3, 4], [5, 6]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contribution from everyone in the community. Read below for detailed contribution guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/toss/es-toolkit/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT © Viva Republica, Inc. See &lt;a href=&#34;https://raw.githubusercontent.com/toss/es-toolkit/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;a title=&#34;Toss&#34; href=&#34;https://toss.im&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://static.toss.im/logos/png/4x/logo-toss-reverse.png&#34;&gt; &#xA;  &lt;img alt=&#34;Toss&#34; src=&#34;https://static.toss.im/logos/png/4x/logo-toss.png&#34; width=&#34;100&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>nikitabobko/AeroSpace</title>
    <updated>2024-08-25T01:38:05Z</updated>
    <id>tag:github.com,2024-08-25:/nikitabobko/AeroSpace</id>
    <link href="https://github.com/nikitabobko/AeroSpace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/resources/Assets.xcassets/AppIcon.appiconset/icon.png&#34; width=&#34;40%&#34; height=&#34;40%&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;AeroSpace Beta &lt;a href=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt; &#xA;&lt;p&gt;Videos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UOl7ErqWbrk&#34;&gt;YouTube 91 sec Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-FoWClVHG5g&#34;&gt;YouTube Guide by Josean Martinez&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Docs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide&#34;&gt;AeroSpace Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/commands&#34;&gt;AeroSpace Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/goodness&#34;&gt;AeroSpace Goodness&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;Public Beta. AeroSpace can be used as a daily driver, but expect breaking changes until 1.0 is reached.&lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tiling window manager based on a &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#tree&#34;&gt;tree paradigm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://i3wm.org/&#34;&gt;i3&lt;/a&gt; inspired&lt;/li&gt; &#xA; &lt;li&gt;Fast workspaces switching without animations and without the necessity to disable SIP&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace employs its &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;own emulation of virtual workspaces&lt;/a&gt; instead of relying on native macOS Spaces due to &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;their considerable limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plain text configuration (dotfiles friendly). See: &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#default-config&#34;&gt;default-config.toml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLI first (manpages and shell completion included)&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t require disabling SIP (System Integrity Protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#multiple-monitors&#34;&gt;Proper multi-monitor support&lt;/a&gt; (i3-like paradigm)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to get autoupdates (Preferred)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask nikitabobko/tap/aerospace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; You might need to configure your shell to enable completion provided by homebrew packages: &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;https://docs.brew.sh/Shell-Completion&lt;/a&gt; AeroSpace provides bash, fish and zsh completions.&lt;/p&gt; &#xA;&lt;p&gt;In multi-monitor setup please make sure that monitors &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#proper-monitor-arrangement&#34;&gt;are properly arranged&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install specific previous versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask nikitabobko/tap/aerospace@0.12.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the list of all the versions available for installation via brew see: &lt;a href=&#34;https://github.com/nikitabobko/homebrew-tap/tree/main/Casks&#34;&gt;https://github.com/nikitabobko/homebrew-tap/tree/main/Casks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#manual-installation&#34;&gt;Manual installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] By using AeroSpace, you acknowledge that it&#39;s not &lt;a href=&#34;https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution&#34;&gt;notarized&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Notarization is a &#34;security&#34; feature by Apple. You send binaries to Apple, and they either approve the binaries or not. In reality, notarization is about building binaries the way Apple likes it.&lt;/p&gt; &#xA; &lt;p&gt;Let&#39;s be honest. Tiling window manager is not something Apple will be totally ok with. Even if they approve one version, it doesn&#39;t mean that they won&#39;t revoke it (yes, they can do it), or approve further versions.&lt;/p&gt; &#xA; &lt;p&gt;I don&#39;t have anything against notarization as a concept. I specifically don&#39;t like the way Apple does notarization. I don&#39;t have time to fight Apple.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/nikitabobko/homebrew-tap/raw/main/Casks/aerospace.rb&#34;&gt;Homebrew installation script&lt;/a&gt; is configured to automatically delete &lt;code&gt;com.apple.quarantine&lt;/code&gt; attribute, that&#39;s why the app should work out of the box, without any warnings that &#34;Apple cannot check AeroSpace for malicious software&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing, creating issues, submitting pull requests&lt;/h2&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;A notes on how to setup the project, build it, how to run the tests, etc. can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/dev-docs/development.md&#34;&gt;dev-docs/development.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Values of the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AeroSpace is targeted at advanced users and developers&lt;/li&gt; &#xA; &lt;li&gt;Keyboard centric&lt;/li&gt; &#xA; &lt;li&gt;Breaking changes (configuration files, CLI, behavior) are avoided as much as possible, but it must not let the software stagnate. Thus breaking changes can happen, but with careful considerations and helpful message. &lt;a href=&#34;https://semver.org/&#34;&gt;Semver&lt;/a&gt; major version is bumped in case of a breaking change (It&#39;s all guaranteed once AeroSpace reaches 1.0 version, until then breaking changes just happen)&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace doesn&#39;t use GUI, unless necessarily &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AeroSpace will never provide a GUI for configuration. For advanced users, it&#39;s easier to edit a configuration file in text editor rather than navigating through checkboxes in GUI.&lt;/li&gt; &#xA;   &lt;li&gt;Status menu icon is ok, because visual feedback is needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provide &lt;em&gt;practical&lt;/em&gt; features. Fancy appearance features are not &lt;em&gt;practical&lt;/em&gt; (e.g. window borders, transparency, etc)&lt;/li&gt; &#xA; &lt;li&gt;If &#34;dark magic&#34; (aka &#34;private APIs&#34;, &#34;code injections&#34;, etc) can be avoided, it must be avoided &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Right now, AeroSpace uses only a single private API to get window ID of accessibility object &lt;code&gt;_AXUIElementGetWindow&lt;/code&gt;. Everything else is &lt;a href=&#34;https://developer.apple.com/documentation/applicationservices/axuielement_h&#34;&gt;macOS public accessibility API&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai &lt;a href=&#34;https://github.com/koekeishiya/yabai/issues/1863&#34;&gt;requires you to disable SIP&lt;/a&gt; to use some of its features. AeroSpace will either find another way (such as &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;emulation of workspaces&lt;/a&gt;) or will not implement this feature at all (window transparency and window shadowing are not &lt;em&gt;practical&lt;/em&gt; features)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play nicely with existing macOS features. If limitations are imposed then AeroSpace won&#39;t play nicely with existing macOS features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. AeroSpace doesn&#39;t acknowledge the existence of macOS Spaces, and it uses &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;emulation of its own workspaces&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tip of the day&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write -g NSWindowShouldDragOnGesture -bool true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can move windows by holding &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;cmd&lt;/code&gt; and dragging any part of the window (not necessarily the window title)&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.reddit.com/r/MacOS/comments/k6hiwk/keyboard_modifier_to_simplify_click_drag_of/&#34;&gt;reddit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianyh/Amethyst&#34;&gt;Amethyst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koekeishiya/yabai&#34;&gt;yabai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ostris/ai-toolkit</title>
    <updated>2024-08-25T01:38:05Z</updated>
    <id>tag:github.com,2024-08-25:/ostris/ai-toolkit</id>
    <link href="https://github.com/ostris/ai-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Various AI scripts. Mostly Stable Diffusion stuff.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Toolkit by Ostris&lt;/h1&gt; &#xA;&lt;h2&gt;IMPORTANT NOTE - READ THIS&lt;/h2&gt; &#xA;&lt;p&gt;This is my research repo. I do a lot of experiments in it and it is possible that I will break things. If something breaks, checkout an earlier commit. This repo can train a lot of things, and it is hard to keep up with all of them.&lt;/p&gt; &#xA;&lt;h2&gt;Support my work&lt;/h2&gt; &#xA;&lt;a href=&#34;https://glif.app&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;glif.app&#34; src=&#34;https://raw.githubusercontent.com/ostris/ai-toolkit/main/assets/glif.svg?v=1&#34; width=&#34;256&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;My work on this project would not be possible without the amazing support of &lt;a href=&#34;https://glif.app/&#34;&gt;Glif&lt;/a&gt; and everyone on the team. If you want to support me, support Glif. &lt;a href=&#34;https://glif.app/&#34;&gt;Join the site&lt;/a&gt;, &lt;a href=&#34;https://discord.com/invite/nuR9zZ2nsh&#34;&gt;Join us on Discord&lt;/a&gt;, &lt;a href=&#34;https://x.com/heyglif&#34;&gt;follow us on Twitter&lt;/a&gt; and come make some cool stuff with us&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python &amp;gt;3.10&lt;/li&gt; &#xA; &lt;li&gt;Nvidia GPU with enough ram to do what you need&lt;/li&gt; &#xA; &lt;li&gt;python venv&lt;/li&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ostris/ai-toolkit.git&#xA;cd ai-toolkit&#xA;git submodule update --init --recursive&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;# .\venv\Scripts\activate on windows&#xA;# install torch first&#xA;pip3 install torch&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ostris/ai-toolkit.git&#xA;cd ai-toolkit&#xA;git submodule update --init --recursive&#xA;python -m venv venv&#xA;.\venv\Scripts\activate&#xA;pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FLUX.1 Training&lt;/h2&gt; &#xA;&lt;h3&gt;Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;To get started quickly, check out &lt;a href=&#34;https://x.com/araminta_k&#34;&gt;@araminta_k&lt;/a&gt; tutorial on &lt;a href=&#34;https://www.youtube.com/watch?v=HzGW_Kyermg&#34;&gt;Finetuning Flux Dev on a 3090&lt;/a&gt; with 24GB VRAM.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You currently need a GPU with &lt;strong&gt;at least 24GB of VRAM&lt;/strong&gt; to train FLUX.1. If you are using it as your GPU to control your monitors, you probably need to set the flag &lt;code&gt;low_vram: true&lt;/code&gt; in the config file under &lt;code&gt;model:&lt;/code&gt;. This will quantize the model on CPU and should allow it to train with monitors attached. Users have gotten it to work on Windows with WSL, but there are some reports of a bug when running on windows natively. I have only tested on linux for now. This is still extremely experimental and a lot of quantizing and tricks had to happen to get it to fit on 24GB at all.&lt;/p&gt; &#xA;&lt;h3&gt;FLUX.1-dev&lt;/h3&gt; &#xA;&lt;p&gt;FLUX.1-dev has a non-commercial license. Which means anything you train will inherit the non-commercial license. It is also a gated model, so you need to accept the license on HF before using it. Otherwise, this will fail. Here are the required steps to setup a license.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign into HF and accept the model access here &lt;a href=&#34;https://huggingface.co/black-forest-labs/FLUX.1-dev&#34;&gt;black-forest-labs/FLUX.1-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make a file named &lt;code&gt;.env&lt;/code&gt; in the root on this folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/settings/tokens/new?&#34;&gt;Get a READ key from huggingface&lt;/a&gt; and add it to the &lt;code&gt;.env&lt;/code&gt; file like so &lt;code&gt;HF_TOKEN=your_key_here&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;FLUX.1-schnell&lt;/h3&gt; &#xA;&lt;p&gt;FLUX.1-schnell is Apache 2.0. Anything trained on it can be licensed however you want and it does not require a HF_TOKEN to train. However, it does require a special adapter to train with it, &lt;a href=&#34;https://huggingface.co/ostris/FLUX.1-schnell-training-adapter&#34;&gt;ostris/FLUX.1-schnell-training-adapter&lt;/a&gt;. It is also highly experimental. For best overall quality, training on FLUX.1-dev is recommended.&lt;/p&gt; &#xA;&lt;p&gt;To use it, You just need to add the assistant to the &lt;code&gt;model&lt;/code&gt; section of your config file like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      model:&#xA;        name_or_path: &#34;black-forest-labs/FLUX.1-schnell&#34;&#xA;        assistant_lora_path: &#34;ostris/FLUX.1-schnell-training-adapter&#34;&#xA;        is_flux: true&#xA;        quantize: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to adjust your sample steps since schnell does not require as many&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      sample:&#xA;        guidance_scale: 1  # schnell does not do guidance&#xA;        sample_steps: 4  # 1 - 4 works well&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the example config file located at &lt;code&gt;config/examples/train_lora_flux_24gb.yaml&lt;/code&gt; (&lt;code&gt;config/examples/train_lora_flux_schnell_24gb.yaml&lt;/code&gt; for schnell) to the &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit the file following the comments in the file&lt;/li&gt; &#xA; &lt;li&gt;Run the file like so &lt;code&gt;python run.py config/whatever_you_want.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A folder with the name and the training folder from the config file will be created when you start. It will have all checkpoints and images in it. You can stop the training at any time using ctrl+c and when you resume, it will pick back up from the last checkpoint.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT. If you press crtl+c while it is saving, it will likely corrupt that checkpoint. So wait until it is done saving&lt;/p&gt; &#xA;&lt;h3&gt;Need help?&lt;/h3&gt; &#xA;&lt;p&gt;Please do not open a bug report unless it is a bug in the code. You are welcome to &lt;a href=&#34;https://discord.gg/VXmU2f5WEU&#34;&gt;Join my Discord&lt;/a&gt; and ask for help there. However, please refrain from PMing me directly with general question or support. Ask in the discord and I will answer when I can.&lt;/p&gt; &#xA;&lt;h2&gt;Training in RunPod&lt;/h2&gt; &#xA;&lt;p&gt;Example RunPod template: &lt;strong&gt;runpod/pytorch:2.2.0-py3.10-cuda12.1.1-devel-ubuntu22.04&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You need a minimum of 24GB VRAM, pick a GPU by your preference.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Example config ($0.5/hr):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1x A40 (48 GB VRAM)&lt;/li&gt; &#xA; &lt;li&gt;19 vCPU 100 GB RAM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom overrides (you need some storage to clone FLUX.1, store datasets, store trained models and samples):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;~120 GB Disk&lt;/li&gt; &#xA; &lt;li&gt;~120 GB Pod Volume&lt;/li&gt; &#xA; &lt;li&gt;Start Jupyter Notebook&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Setup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ostris/ai-toolkit.git&#xA;cd ai-toolkit&#xA;git submodule update --init --recursive&#xA;python -m venv venv&#xA;source venv/bin/activate&#xA;pip install torch&#xA;pip install -r requirements.txt&#xA;pip install --upgrade accelerate transformers diffusers huggingface_hub #Optional, run it if you run into issues&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Upload your dataset&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new folder in the root, name it &lt;code&gt;dataset&lt;/code&gt; or whatever you like.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop your .jpg, .jpeg, or .png images and .txt files inside the newly created dataset folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Login into Hugging Face with an Access Token&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get a READ token from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;here&lt;/a&gt; and request access to Flux.1-dev model from &lt;a href=&#34;https://huggingface.co/black-forest-labs/FLUX.1-dev&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;huggingface-cli login&lt;/code&gt; and paste your token.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Training&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy an example config file located at &lt;code&gt;config/examples&lt;/code&gt; to the config folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Edit the config following the comments in the file.&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;folder_path: &#34;/path/to/images/folder&#34;&lt;/code&gt; to your dataset path like &lt;code&gt;folder_path: &#34;/workspace/ai-toolkit/your-dataset&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the file: &lt;code&gt;python run.py config/whatever_you_want.yml&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Screenshot from RunPod&lt;/h3&gt; &#xA;&lt;img width=&#34;1728&#34; alt=&#34;RunPod Training Screenshot&#34; src=&#34;https://github.com/user-attachments/assets/53a1b8ef-92fa-4481-81a7-bde45a14a7b5&#34;&gt; &#xA;&lt;h2&gt;Training in Modal&lt;/h2&gt; &#xA;&lt;h3&gt;1. Setup&lt;/h3&gt; &#xA;&lt;h4&gt;ai-toolkit:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ostris/ai-toolkit.git&#xA;cd ai-toolkit&#xA;git submodule update --init --recursive&#xA;python -m venv venv&#xA;source venv/bin/activate&#xA;pip install torch&#xA;pip install -r requirements.txt&#xA;pip install --upgrade accelerate transformers diffusers huggingface_hub #Optional, run it if you run into issues&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Modal:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pip install modal&lt;/code&gt; to install the modal Python package.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;modal setup&lt;/code&gt; to authenticate (if this doesn’t work, try &lt;code&gt;python -m modal setup&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Hugging Face:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get a READ token from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;here&lt;/a&gt; and request access to Flux.1-dev model from &lt;a href=&#34;https://huggingface.co/black-forest-labs/FLUX.1-dev&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;huggingface-cli login&lt;/code&gt; and paste your token.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Upload your dataset&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag and drop your dataset folder containing the .jpg, .jpeg, or .png images and .txt files in &lt;code&gt;ai-toolkit&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Configs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy an example config file located at &lt;code&gt;config/examples/modal&lt;/code&gt; to the &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Edit the config following the comments in the file, &lt;strong&gt;&lt;ins&gt;be careful and follow the example &lt;code&gt;/root/ai-toolkit&lt;/code&gt; paths&lt;/ins&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Edit run_modal.py&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your entire local &lt;code&gt;ai-toolkit&lt;/code&gt; path at &lt;code&gt;code_mount = modal.Mount.from_local_dir&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;code_mount = modal.Mount.from_local_dir(&#34;/Users/username/ai-toolkit&#34;, remote_path=&#34;/root/ai-toolkit&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose a &lt;code&gt;GPU&lt;/code&gt; and &lt;code&gt;Timeout&lt;/code&gt; in &lt;code&gt;@app.function&lt;/code&gt; &lt;em&gt;(default is A100 40GB and 2 hour timeout)&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5. Training&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the config file in your terminal: &lt;code&gt;modal run run_modal.py --config-file-list-str=/root/ai-toolkit/config/whatever_you_want.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can monitor your training in your local terminal, or on &lt;a href=&#34;https://modal.com/&#34;&gt;modal.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Models, samples and optimizer will be stored in &lt;code&gt;Storage &amp;gt; flux-lora-models&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;6. Saving the model&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check contents of the volume by running &lt;code&gt;modal volume ls flux-lora-models&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the content by running &lt;code&gt;modal volume get flux-lora-models your-model-name&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Example: &lt;code&gt;modal volume get flux-lora-models my_first_flux_lora_v1&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Screenshot from Modal&lt;/h3&gt; &#xA;&lt;img width=&#34;1728&#34; alt=&#34;Modal Traning Screenshot&#34; src=&#34;https://github.com/user-attachments/assets/7497eb38-0090-49d6-8ad9-9c8ea7b5388b&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dataset Preparation&lt;/h2&gt; &#xA;&lt;p&gt;Datasets generally need to be a folder containing images and associated text files. Currently, the only supported formats are jpg, jpeg, and png. Webp currently has issues. The text files should be named the same as the images but with a &lt;code&gt;.txt&lt;/code&gt; extension. For example &lt;code&gt;image2.jpg&lt;/code&gt; and &lt;code&gt;image2.txt&lt;/code&gt;. The text file should contain only the caption. You can add the word &lt;code&gt;[trigger]&lt;/code&gt; in the caption file and if you have &lt;code&gt;trigger_word&lt;/code&gt; in your config, it will be automatically replaced.&lt;/p&gt; &#xA;&lt;p&gt;Images are never upscaled but they are downscaled and placed in buckets for batching. &lt;strong&gt;You do not need to crop/resize your images&lt;/strong&gt;. The loader will automatically resize them and can handle varying aspect ratios.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;EVERYTHING BELOW THIS LINE IS OUTDATED&lt;/h2&gt; &#xA;&lt;p&gt;It may still work like that, but I have not tested it in a while.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Batch Image Generation&lt;/h3&gt; &#xA;&lt;p&gt;A image generator that can take frompts from a config file or form a txt file and generate them to a folder. I mainly needed this for an SDXL test I am doing but added some polish to it so it can be used for generat batch image generation. It all runs off a config file, which you can find an example of in &lt;code&gt;config/examples/generate.example.yaml&lt;/code&gt;. Mere info is in the comments in the example&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LoRA (lierla), LoCON (LyCORIS) extractor&lt;/h3&gt; &#xA;&lt;p&gt;It is based on the extractor in the &lt;a href=&#34;https://github.com/KohakuBlueleaf/LyCORIS&#34;&gt;LyCORIS&lt;/a&gt; tool, but adding some QOL features and LoRA (lierla) support. It can do multiple types of extractions in one run. It all runs off a config file, which you can find an example of in &lt;code&gt;config/examples/extract.example.yml&lt;/code&gt;. Just copy that file, into the &lt;code&gt;config&lt;/code&gt; folder, and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. Then you can edit the file to your liking. and call it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/whatever_you_want.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also put a full path to a config file, if you want to keep it somewhere else.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py &#34;/home/user/whatever_you_want.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More notes on how it works are available in the example config file itself. LoRA and LoCON both support extractions of &#39;fixed&#39;, &#39;threshold&#39;, &#39;ratio&#39;, &#39;quantile&#39;. I&#39;ll update what these do and mean later. Most people used fixed, which is traditional fixed dimension extraction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;process&lt;/code&gt; is an array of different processes to run. You can add a few and mix and match. One LoRA, one LyCON, etc.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LoRA Rescale&lt;/h3&gt; &#xA;&lt;p&gt;Change &lt;code&gt;&amp;lt;lora:my_lora:4.6&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;lora:my_lora:1.0&amp;gt;&lt;/code&gt; or whatever you want with the same effect. A tool for rescaling a LoRA&#39;s weights. Should would with LoCON as well, but I have not tested it. It all runs off a config file, which you can find an example of in &lt;code&gt;config/examples/mod_lora_scale.yml&lt;/code&gt;. Just copy that file, into the &lt;code&gt;config&lt;/code&gt; folder, and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. Then you can edit the file to your liking. and call it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/whatever_you_want.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also put a full path to a config file, if you want to keep it somewhere else.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py &#34;/home/user/whatever_you_want.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More notes on how it works are available in the example config file itself. This is useful when making all LoRAs, as the ideal weight is rarely 1.0, but now you can fix that. For sliders, they can have weird scales form -2 to 2 or even -15 to 15. This will allow you to dile it in so they all have your desired scale&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LoRA Slider Trainer&lt;/h3&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://colab.research.google.com/github/ostris/ai-toolkit/blob/main/notebooks/SliderTraining.ipynb&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This is how I train most of the recent sliders I have on Civitai, you can check them out in my &lt;a href=&#34;https://civitai.com/user/Ostris/models&#34;&gt;Civitai profile&lt;/a&gt;. It is based off the work by &lt;a href=&#34;https://github.com/p1atdev/LECO&#34;&gt;p1atdev/LECO&lt;/a&gt; and &lt;a href=&#34;https://github.com/rohitgandikota/erasing&#34;&gt;rohitgandikota/erasing&lt;/a&gt; But has been heavily modified to create sliders rather than erasing concepts. I have a lot more plans on this, but it is very functional as is. It is also very easy to use. Just copy the example config file in &lt;code&gt;config/examples/train_slider.example.yml&lt;/code&gt; to the &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. Then you can edit the file to your liking. and call it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/whatever_you_want.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a lot more information in that example file. You can even run the example as is without any modifications to see how it works. It will create a slider that turns all animals into dogs(neg) or cats(pos). Just run it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/examples/train_slider.example.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you will be able to see how it works without configuring anything. No datasets are required for this method. I will post an better tutorial soon.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Extensions!!&lt;/h2&gt; &#xA;&lt;p&gt;You can now make and share custom extensions. That run within this framework and have all the inbuilt tools available to them. I will probably use this as the primary development method going forward so I dont keep adding and adding more and more features to this base repo. I will likely migrate a lot of the existing functionality as well to make everything modular. There is an example extension in the &lt;code&gt;extensions&lt;/code&gt; folder that shows how to make a model merger extension. All of the code is heavily documented which is hopefully enough to get you started. To make an extension, just copy that example and replace all the things you need to.&lt;/p&gt; &#xA;&lt;h3&gt;Model Merger - Example Extension&lt;/h3&gt; &#xA;&lt;p&gt;It is located in the &lt;code&gt;extensions&lt;/code&gt; folder. It is a fully finctional model merger that can merge as many models together as you want. It is a good example of how to make an extension, but is also a pretty useful feature as well since most mergers can only do one model at a time and this one will take as many as you want to feed it. There is an example config file in there, just copy that to your &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. and use it like any other config file.&lt;/p&gt; &#xA;&lt;h2&gt;WIP Tools&lt;/h2&gt; &#xA;&lt;h3&gt;VAE (Variational Auto Encoder) Trainer&lt;/h3&gt; &#xA;&lt;p&gt;This works, but is not ready for others to use and therefore does not have an example config. I am still working on it. I will update this when it is ready. I am adding a lot of features for criteria that I have used in my image enlargement work. A Critic (discriminator), content loss, style loss, and a few more. If you don&#39;t know, the VAE for stable diffusion (yes even the MSE one, and SDXL), are horrible at smaller faces and it holds SD back. I will fix this. I&#39;ll post more about this later with better examples later, but here is a quick test of a run through with various VAEs. Just went in and out. It is much worse on smaller faces than shown here.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ostris/ai-toolkit/main/assets/VAE_test1.jpg&#34; width=&#34;768&#34; height=&#34;auto&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add proper regs on sliders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add SDXL support (base model only for now)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add plain erasing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make Textual inversion network trainer (network that spits out TI embeddings)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;h4&gt;2023-08-05&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Huge memory rework and slider rework. Slider training is better thant ever with no more ram spikes. I also made it so all 4 parts of the slider algorythm run in one batch so they share gradient accumulation. This makes it much faster and more stable.&lt;/li&gt; &#xA; &lt;li&gt;Updated the example config to be something more practical and more updated to current methods. It is now a detail slide and shows how to train one without a subject. 512x512 slider training for 1.5 should work on 6GB gpu now. Will test soon to verify.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2021-10-20&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows support bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Extensions! Added functionality to make and share custom extensions for training, merging, whatever. check out the example in the &lt;code&gt;extensions&lt;/code&gt; folder. Read more about that above.&lt;/li&gt; &#xA; &lt;li&gt;Model Merging, provided via the example extension.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2023-08-03&lt;/h4&gt; &#xA;&lt;p&gt;Another big refactor to make SD more modular.&lt;/p&gt; &#xA;&lt;p&gt;Made batch image generation script&lt;/p&gt; &#xA;&lt;h4&gt;2023-08-01&lt;/h4&gt; &#xA;&lt;p&gt;Major changes and update. New LoRA rescale tool, look above for details. Added better metadata so Automatic1111 knows what the base model is. Added some experiments and a ton of updates. This thing is still unstable at the moment, so hopefully there are not breaking changes.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I am too lazy to write a proper changelog with all the changes.&lt;/p&gt; &#xA;&lt;p&gt;I added SDXL training to sliders... but.. it does not work properly. The slider training relies on a model&#39;s ability to understand that an unconditional (negative prompt) means you do not want that concept in the output. SDXL does not understand this for whatever reason, which makes separating out concepts within the model hard. I am sure the community will find a way to fix this over time, but for now, it is not going to work properly. And if any of you are thinking &#34;Could we maybe fix it by adding 1 or 2 more text encoders to the model as well as a few more entirely separate diffusion networks?&#34; No. God no. It just needs a little training without every experimental new paper added to it. The KISS principal.&lt;/p&gt; &#xA;&lt;h4&gt;2023-07-30&lt;/h4&gt; &#xA;&lt;p&gt;Added &#34;anchors&#34; to the slider trainer. This allows you to set a prompt that will be used as a regularizer. You can set the network multiplier to force spread consistency at high weights&lt;/p&gt;</summary>
  </entry>
</feed>