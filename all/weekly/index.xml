<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:42:17Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xinntao/Real-ESRGAN</title>
    <updated>2022-08-28T01:42:17Z</updated>
    <id>tag:github.com,2022-08-28:/xinntao/Real-ESRGAN</id>
    <link href="https://github.com/xinntao/Real-ESRGAN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-ESRGAN aims at developing Practical Algorithms for General Image/Video Restoration.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/assets/realesrgan_logo.png&#34; height=&#34;120&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&#xA; &lt;div align=&#34;center&#34;&gt;&#xA;  &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/README_CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/b&gt;&#xA; &lt;/div&gt;&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;üëÄ&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#-demos-videos&#34;&gt;&lt;strong&gt;Demos&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; üö©&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#-updates&#34;&gt;&lt;strong&gt;Updates&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; ‚ö°&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#-quick-inference&#34;&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; üè∞&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/model_zoo.md&#34;&gt;&lt;strong&gt;Model Zoo&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; üîß&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#-dependencies-and-installation&#34;&gt;Install&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; üíª&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/Training.md&#34;&gt;Train&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; ‚ùì&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt; &lt;strong&gt;|&lt;/strong&gt; üé®&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/CONTRIBUTING.md&#34;&gt;Contribution&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xinntao/Real-ESRGAN/total.svg?sanitize=true&#34; alt=&#34;download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/realesrgan/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/realesrgan&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/xinntao/Real-ESRGAN&#34; alt=&#34;Open issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/xinntao/Real-ESRGAN&#34; alt=&#34;Closed issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/xinntao/Real-ESRGAN.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/raw/master/.github/workflows/pylint.yml&#34;&gt;&lt;img src=&#34;https://github.com/xinntao/Real-ESRGAN/actions/workflows/pylint.yml/badge.svg?sanitize=true&#34; alt=&#34;python lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/raw/master/.github/workflows/publish-pip.yml&#34;&gt;&lt;img src=&#34;https://github.com/xinntao/Real-ESRGAN/actions/workflows/publish-pip.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish-pip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;üî• &lt;strong&gt;AnimeVideo-v3 model (Âä®Êº´ËßÜÈ¢ëÂ∞èÊ®°Âûã)&lt;/strong&gt;. Please see [&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_video_model.md&#34;&gt;&lt;em&gt;anime video models&lt;/em&gt;&lt;/a&gt;] and [&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_comparisons.md&#34;&gt;&lt;em&gt;comparisons&lt;/em&gt;&lt;/a&gt;]&lt;br&gt; üî• &lt;strong&gt;RealESRGAN_x4plus_anime_6B&lt;/strong&gt; for anime images &lt;strong&gt;(Âä®Êº´ÊèíÂõæÊ®°Âûã)&lt;/strong&gt;. Please see [&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_model.md&#34;&gt;&lt;em&gt;anime_model&lt;/em&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can try in our website: &lt;a href=&#34;https://arc.tencent.com/en/ai-demos/imgRestore&#34;&gt;ARC Demo&lt;/a&gt; (now only support RealESRGAN_x4plus_anime_6B)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1k2Zod6kSHEvraybHl50Lys0LerhyTMCo?usp=sharing&#34;&gt;Colab Demo&lt;/a&gt; for Real-ESRGAN &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1yNl9ORUxxlL4N0keJa2SEPB61imPQd1B?usp=sharing&#34;&gt;Colab Demo&lt;/a&gt; for Real-ESRGAN (&lt;strong&gt;anime videos&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portable &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesrgan-ncnn-vulkan-20220424-windows.zip&#34;&gt;Windows&lt;/a&gt; / &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesrgan-ncnn-vulkan-20220424-ubuntu.zip&#34;&gt;Linux&lt;/a&gt; / &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesrgan-ncnn-vulkan-20220424-macos.zip&#34;&gt;MacOS&lt;/a&gt; &lt;strong&gt;executable files for Intel/AMD/Nvidia GPU&lt;/strong&gt;. You can find more information &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#portable-executable-files-ncnn&#34;&gt;here&lt;/a&gt;. The ncnn implementation is in &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN-ncnn-vulkan&#34;&gt;Real-ESRGAN-ncnn-vulkan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can watch enhanced animations in &lt;a href=&#34;https://v.qq.com/s/topic/v_child/render/fC4iyCAM.html&#34;&gt;Tencent Video&lt;/a&gt;. Ê¨¢ËøéËßÇÁúã&lt;a href=&#34;https://v.qq.com/s/topic/v_child/render/fC4iyCAM.html&#34;&gt;ËÖæËÆØËßÜÈ¢ëÂä®Êº´‰øÆÂ§ç&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Real-ESRGAN aims at developing &lt;strong&gt;Practical Algorithms for General Image/Video Restoration&lt;/strong&gt;.&lt;br&gt; We extend the powerful ESRGAN to a practical restoration application (namely, Real-ESRGAN), which is trained with pure synthetic data.&lt;/p&gt; &#xA;&lt;p&gt;üåå Thanks for your valuable feedbacks/suggestions. All the feedbacks are updated in &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/feedback.md&#34;&gt;feedback.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If Real-ESRGAN is helpful, please help to ‚≠ê this repo or recommend it to your friends üòä &lt;br&gt; Other recommended projects:&lt;br&gt; ‚ñ∂Ô∏è &lt;a href=&#34;https://github.com/TencentARC/GFPGAN&#34;&gt;GFPGAN&lt;/a&gt;: A practical algorithm for real-world face restoration &lt;br&gt; ‚ñ∂Ô∏è &lt;a href=&#34;https://github.com/xinntao/BasicSR&#34;&gt;BasicSR&lt;/a&gt;: An open-source image and video restoration toolbox&lt;br&gt; ‚ñ∂Ô∏è &lt;a href=&#34;https://github.com/xinntao/facexlib&#34;&gt;facexlib&lt;/a&gt;: A collection that provides useful face-relation functions.&lt;br&gt; ‚ñ∂Ô∏è &lt;a href=&#34;https://github.com/xinntao/HandyView&#34;&gt;HandyView&lt;/a&gt;: A PyQt5-based image viewer that is handy for view and comparison &lt;br&gt; ‚ñ∂Ô∏è &lt;a href=&#34;https://github.com/xinntao/HandyFigure&#34;&gt;HandyFigure&lt;/a&gt;: Open source of paper figures &lt;br&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üìñ Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[&lt;a href=&#34;https://arxiv.org/abs/2107.10833&#34;&gt;Paper&lt;/a&gt;] ‚ÄÉ [&lt;a href=&#34;https://www.youtube.com/watch?v=fxHWoDSSvSc&#34;&gt;YouTube Video&lt;/a&gt;] ‚ÄÉ [&lt;a href=&#34;https://www.bilibili.com/video/BV1H34y1m7sS/&#34;&gt;BÁ´ôËÆ≤Ëß£&lt;/a&gt;] ‚ÄÉ [&lt;a href=&#34;https://xinntao.github.io/projects/RealESRGAN_src/RealESRGAN_poster.pdf&#34;&gt;Poster&lt;/a&gt;] ‚ÄÉ [&lt;a href=&#34;https://docs.google.com/presentation/d/1QtW6Iy8rm8rGLsJ0Ldti6kP-7Qyzy6XL/edit?usp=sharing&amp;amp;ouid=109799856763657548160&amp;amp;rtpof=true&amp;amp;sd=true&#34;&gt;PPT slides&lt;/a&gt;]&lt;br&gt; &lt;a href=&#34;https://xinntao.github.io/&#34;&gt;Xintao Wang&lt;/a&gt;, Liangbin Xie, &lt;a href=&#34;https://scholar.google.com.hk/citations?user=OSDCB0UAAAAJ&#34;&gt;Chao Dong&lt;/a&gt;, &lt;a href=&#34;https://scholar.google.com/citations?user=4oXBp9UAAAAJ&amp;amp;hl=en&#34;&gt;Ying Shan&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://arc.tencent.com/en/ai-demos/imgRestore&#34;&gt;Tencent ARC Lab&lt;/a&gt;; Shenzhen Institutes of Advanced Technology, Chinese Academy of Sciences&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/assets/teaser.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- Updates ---------------------------&gt; &#xA;&lt;h2&gt;üö© Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ Update the &lt;strong&gt;RealESRGAN AnimeVideo-v3&lt;/strong&gt; model. Please see &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_video_model.md&#34;&gt;anime video models&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_comparisons.md&#34;&gt;comparisons&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Add small models for anime videos. More details are in &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_video_model.md&#34;&gt;anime video models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Add the ncnn implementation &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN-ncnn-vulkan&#34;&gt;Real-ESRGAN-ncnn-vulkan&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Add &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth&#34;&gt;&lt;em&gt;RealESRGAN_x4plus_anime_6B.pth&lt;/em&gt;&lt;/a&gt;, which is optimized for &lt;strong&gt;anime&lt;/strong&gt; images with much smaller model size. More details and comparisons with &lt;a href=&#34;https://github.com/nihui/waifu2x-ncnn-vulkan&#34;&gt;waifu2x&lt;/a&gt; are in &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_model.md&#34;&gt;&lt;strong&gt;anime_model.md&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Support finetuning on your own data or paired data (&lt;em&gt;i.e.&lt;/em&gt;, finetuning ESRGAN). See &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/Training.md#Finetune-Real-ESRGAN-on-your-own-dataset&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Integrate &lt;a href=&#34;https://github.com/TencentARC/GFPGAN&#34;&gt;GFPGAN&lt;/a&gt; to support &lt;strong&gt;face enhancement&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Integrated to &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Huggingface Spaces&lt;/a&gt; with &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. See &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/Real-ESRGAN&#34;&gt;Gradio Web Demo&lt;/a&gt;. Thanks &lt;a href=&#34;https://github.com/AK391&#34;&gt;@AK391&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Support arbitrary scale with &lt;code&gt;--outscale&lt;/code&gt; (It actually further resizes outputs with &lt;code&gt;LANCZOS4&lt;/code&gt;). Add &lt;em&gt;RealESRGAN_x2plus.pth&lt;/em&gt; model.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/inference_realesrgan.py&#34;&gt;The inference code&lt;/a&gt; supports: 1) &lt;strong&gt;tile&lt;/strong&gt; options; 2) images with &lt;strong&gt;alpha channel&lt;/strong&gt;; 3) &lt;strong&gt;gray&lt;/strong&gt; images; 4) &lt;strong&gt;16-bit&lt;/strong&gt; images.&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ The training codes have been released. A detailed guide can be found in &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/Training.md&#34;&gt;Training.md&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- Demo videos ---------------------------&gt; &#xA;&lt;h2&gt;üëÄ Demos Videos&lt;/h2&gt; &#xA;&lt;h4&gt;Bilibili&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ja41117zb&#34;&gt;Â§ßÈóπÂ§©ÂÆ´ÁâáÊÆµ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1wY4y1L7hT/&#34;&gt;Anime dance cut Âä®Êº´È≠îÊÄßËàûËπà&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1i3411L7Gy/&#34;&gt;Êµ∑Ë¥ºÁéãÁâáÊÆµ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;YouTube&lt;/h4&gt; &#xA;&lt;h2&gt;üîß Dependencies and Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;= 3.7 (Recommend to use &lt;a href=&#34;https://www.anaconda.com/download/#linux&#34;&gt;Anaconda&lt;/a&gt; or &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;Miniconda&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch &amp;gt;= 1.7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/xinntao/Real-ESRGAN.git&#xA;cd Real-ESRGAN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependent packages&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install basicsr - https://github.com/xinntao/BasicSR&#xA;# We use BasicSR for both training and inference&#xA;pip install basicsr&#xA;# facexlib and gfpgan are for face enhancement&#xA;pip install facexlib&#xA;pip install gfpgan&#xA;pip install -r requirements.txt&#xA;python setup.py develop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ö° Quick Inference&lt;/h2&gt; &#xA;&lt;p&gt;There are usually three ways to inference Real-ESRGAN.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#online-inference&#34;&gt;Online inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#portable-executable-files-ncnn&#34;&gt;Portable executable files (NCNN)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/#python-script&#34;&gt;Python script&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Online inference&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can try in our website: &lt;a href=&#34;https://arc.tencent.com/en/ai-demos/imgRestore&#34;&gt;ARC Demo&lt;/a&gt; (now only support RealESRGAN_x4plus_anime_6B)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1k2Zod6kSHEvraybHl50Lys0LerhyTMCo?usp=sharing&#34;&gt;Colab Demo&lt;/a&gt; for Real-ESRGAN &lt;strong&gt;|&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1yNl9ORUxxlL4N0keJa2SEPB61imPQd1B?usp=sharing&#34;&gt;Colab Demo&lt;/a&gt; for Real-ESRGAN (&lt;strong&gt;anime videos&lt;/strong&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Portable executable files (NCNN)&lt;/h3&gt; &#xA;&lt;p&gt;You can download &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesrgan-ncnn-vulkan-20220424-windows.zip&#34;&gt;Windows&lt;/a&gt; / &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesrgan-ncnn-vulkan-20220424-ubuntu.zip&#34;&gt;Linux&lt;/a&gt; / &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesrgan-ncnn-vulkan-20220424-macos.zip&#34;&gt;MacOS&lt;/a&gt; &lt;strong&gt;executable files for Intel/AMD/Nvidia GPU&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This executable file is &lt;strong&gt;portable&lt;/strong&gt; and includes all the binaries and models required. No CUDA or PyTorch environment is needed.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can simply run the following command (the Windows example, more information is in the README.md of each executable files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./realesrgan-ncnn-vulkan.exe -i input.jpg -o output.png -n model_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have provided five models:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;realesrgan-x4plus (default)&lt;/li&gt; &#xA; &lt;li&gt;realesrnet-x4plus&lt;/li&gt; &#xA; &lt;li&gt;realesrgan-x4plus-anime (optimized for anime images, small model size)&lt;/li&gt; &#xA; &lt;li&gt;realesr-animevideov3 (animation video)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;-n&lt;/code&gt; argument for other models, for example, &lt;code&gt;./realesrgan-ncnn-vulkan.exe -i input.jpg -o output.png -n realesrnet-x4plus&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Usage of portable executable files&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please refer to &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN-ncnn-vulkan#computer-usages&#34;&gt;Real-ESRGAN-ncnn-vulkan&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;Note that it does not support all the functions (such as &lt;code&gt;outscale&lt;/code&gt;) as the python script &lt;code&gt;inference_realesrgan.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Usage: realesrgan-ncnn-vulkan.exe -i infile -o outfile [options]...&#xA;&#xA;  -h                   show this help&#xA;  -i input-path        input image path (jpg/png/webp) or directory&#xA;  -o output-path       output image path (jpg/png/webp) or directory&#xA;  -s scale             upscale ratio (can be 2, 3, 4. default=4)&#xA;  -t tile-size         tile size (&amp;gt;=32/0=auto, default=0) can be 0,0,0 for multi-gpu&#xA;  -m model-path        folder path to the pre-trained models. default=models&#xA;  -n model-name        model name (default=realesr-animevideov3, can be realesr-animevideov3 | realesrgan-x4plus | realesrgan-x4plus-anime | realesrnet-x4plus)&#xA;  -g gpu-id            gpu device to use (default=auto) can be 0,1,2 for multi-gpu&#xA;  -j load:proc:save    thread count for load/proc/save (default=1:2:2) can be 1:2,2,2:2 for multi-gpu&#xA;  -x                   enable tta mode&#34;&#xA;  -f format            output image format (jpg/png/webp, default=ext/png)&#xA;  -v                   verbose output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it may introduce block inconsistency (and also generate slightly different results from the PyTorch implementation), because this executable file first crops the input image into several tiles, and then processes them separately, finally stitches together.&lt;/p&gt; &#xA;&lt;h3&gt;Python script&lt;/h3&gt; &#xA;&lt;h4&gt;Usage of python script&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can use X4 model for &lt;strong&gt;arbitrary output size&lt;/strong&gt; with the argument &lt;code&gt;outscale&lt;/code&gt;. The program will further perform cheap resize operation after the Real-ESRGAN output.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Usage: python inference_realesrgan.py -n RealESRGAN_x4plus -i infile -o outfile [options]...&#xA;&#xA;A common command: python inference_realesrgan.py -n RealESRGAN_x4plus -i infile --outscale 3.5 --face_enhance&#xA;&#xA;  -h                   show this help&#xA;  -i --input           Input image or folder. Default: inputs&#xA;  -o --output          Output folder. Default: results&#xA;  -n --model_name      Model name. Default: RealESRGAN_x4plus&#xA;  -s, --outscale       The final upsampling scale of the image. Default: 4&#xA;  --suffix             Suffix of the restored image. Default: out&#xA;  -t, --tile           Tile size, 0 for no tile during testing. Default: 0&#xA;  --face_enhance       Whether to use GFPGAN to enhance face. Default: False&#xA;  --fp32               Use fp32 precision during inference. Default: fp16 (half precision).&#xA;  --ext                Image extension. Options: auto | jpg | png, auto means using the same extension as inputs. Default: auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Inference general images&lt;/h4&gt; &#xA;&lt;p&gt;Download pre-trained models: &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth&#34;&gt;RealESRGAN_x4plus.pth&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -P experiments/pretrained_models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inference!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python inference_realesrgan.py -n RealESRGAN_x4plus -i inputs --face_enhance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results are in the &lt;code&gt;results&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h4&gt;Inference anime images&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xinntao/public-figures/master/Real-ESRGAN/cmp_realesrgan_anime_1.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Pre-trained models: &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth&#34;&gt;RealESRGAN_x4plus_anime_6B&lt;/a&gt;&lt;br&gt; More details and comparisons with &lt;a href=&#34;https://github.com/nihui/waifu2x-ncnn-vulkan&#34;&gt;waifu2x&lt;/a&gt; are in &lt;a href=&#34;https://raw.githubusercontent.com/xinntao/Real-ESRGAN/master/docs/anime_model.md&#34;&gt;&lt;strong&gt;anime_model.md&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# download model&#xA;wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth -P experiments/pretrained_models&#xA;# inference&#xA;python inference_realesrgan.py -n RealESRGAN_x4plus_anime_6B -i inputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results are in the &lt;code&gt;results&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;BibTeX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@InProceedings{wang2021realesrgan,&#xA;    author    = {Xintao Wang and Liangbin Xie and Chao Dong and Ying Shan},&#xA;    title     = {Real-ESRGAN: Training Real-World Blind Super-Resolution with Pure Synthetic Data},&#xA;    booktitle = {International Conference on Computer Vision Workshops (ICCVW)},&#xA;    date      = {2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìß Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any question, please email &lt;code&gt;xintao.wang@outlook.com&lt;/code&gt; or &lt;code&gt;xintaowang@tencent.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- Projects that use Real-ESRGAN ---------------------------&gt; &#xA;&lt;h2&gt;üß© Projects that use Real-ESRGAN&lt;/h2&gt; &#xA;&lt;p&gt;If you develop/use Real-ESRGAN in your projects, welcome to let me know.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NCNN-Android: &lt;a href=&#34;https://github.com/tumuyan/RealSR-NCNN-Android&#34;&gt;RealSR-NCNN-Android&lt;/a&gt; by &lt;a href=&#34;https://github.com/tumuyan&#34;&gt;tumuyan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VapourSynth: &lt;a href=&#34;https://github.com/HolyWu/vs-realesrgan&#34;&gt;vs-realesrgan&lt;/a&gt; by &lt;a href=&#34;https://github.com/HolyWu&#34;&gt;HolyWu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NCNN: &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN-ncnn-vulkan&#34;&gt;Real-ESRGAN-ncnn-vulkan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;GUI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AaronFeng753/Waifu2x-Extension-GUI&#34;&gt;Waifu2x-Extension-GUI&lt;/a&gt; by &lt;a href=&#34;https://github.com/AaronFeng753&#34;&gt;AaronFeng753&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Justin62628/Squirrel-RIFE&#34;&gt;Squirrel-RIFE&lt;/a&gt; by &lt;a href=&#34;https://github.com/Justin62628&#34;&gt;Justin62628&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scifx/Real-GUI&#34;&gt;Real-GUI&lt;/a&gt; by &lt;a href=&#34;https://github.com/scifx&#34;&gt;scifx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/net2cn/Real-ESRGAN_GUI&#34;&gt;Real-ESRGAN_GUI&lt;/a&gt; by &lt;a href=&#34;https://github.com/net2cn&#34;&gt;net2cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WGzeyu/Real-ESRGAN-EGUI&#34;&gt;Real-ESRGAN-EGUI&lt;/a&gt; by &lt;a href=&#34;https://github.com/WGzeyu&#34;&gt;WGzeyu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shangar21/anime_upscaler&#34;&gt;anime_upscaler&lt;/a&gt; by &lt;a href=&#34;https://github.com/shangar21&#34;&gt;shangar21&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ó Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for all the contributors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AK391&#34;&gt;AK391&lt;/a&gt;: Integrate RealESRGAN to &lt;a href=&#34;https://huggingface.co/spaces&#34;&gt;Huggingface Spaces&lt;/a&gt; with &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. See &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/Real-ESRGAN&#34;&gt;Gradio Web Demo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Asiimoviet&#34;&gt;Asiimoviet&lt;/a&gt;: Translate the README.md to Chinese (‰∏≠Êñá).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/2ji3150&#34;&gt;2ji3150&lt;/a&gt;: Thanks for the &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN/issues/131&#34;&gt;detailed and valuable feedbacks/suggestions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jared-02&#34;&gt;Jared-02&lt;/a&gt;: Translate the Training.md to Chinese (‰∏≠Êñá).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/diffusers</title>
    <updated>2022-08-28T01:42:17Z</updated>
    <id>tag:github.com,2022-08-28:/huggingface/diffusers</id>
    <link href="https://github.com/huggingface/diffusers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü§ó Diffusers: State-of-the-art diffusion models for image and audio generation in PyTorch&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/diffusers/main/docs/source/imgs/diffusers_library.jpg&#34; width=&#34;400&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/huggingface/diffusers/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/huggingface/datasets.svg?color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huggingface/diffusers/releases&#34;&gt; &lt;img alt=&#34;GitHub release&#34; src=&#34;https://img.shields.io/github/release/huggingface/diffusers.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/huggingface/diffusers/main/CODE_OF_CONDUCT.md&#34;&gt; &lt;img alt=&#34;Contributor Covenant&#34; src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.0-4baaaa.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;ü§ó Diffusers provides pretrained diffusion models across multiple modalities, such as vision and audio, and serves as a modular toolbox for inference and training of diffusion models.&lt;/p&gt; &#xA;&lt;p&gt;More precisely, ü§ó Diffusers offers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;State-of-the-art diffusion pipelines that can be run in inference with just a couple of lines of code (see &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines&#34;&gt;src/diffusers/pipelines&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Various noise schedulers that can be used interchangeably for the prefered speed vs. quality trade-off in inference (see &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/src/diffusers/schedulers&#34;&gt;src/diffusers/schedulers&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Multiple types of models, such as UNet, can be used as building blocks in an end-to-end diffusion system (see &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/src/diffusers/models&#34;&gt;src/diffusers/models&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Training examples to show how to train the most popular diffusion models (see &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/examples/training&#34;&gt;examples/training&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Inference examples to show how to create custom pipelines for advanced tasks such as image2image, in-painting (see &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/examples/inference&#34;&gt;examples/inference&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;In order to get started, we recommend taking a look at two notebooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/diffusers_intro.ipynb&#34;&gt;Getting started with Diffusers&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/diffusers_intro.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; notebook, which showcases an end-to-end example of usage for diffusion models, schedulers and pipelines. Take a look at this notebook to learn how to use the pipeline abstraction, which takes care of everything (model, scheduler, noise handling) for you, and also to understand each independent building block in the library.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb&#34;&gt;Training a diffusers model&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; notebook summarizes diffuser model training methods. This notebook takes a step-by-step approach to training your diffuser model on an image dataset, with explanatory graphics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;New üé®üé®üé®&lt;/strong&gt; Stable Diffusion is now fully compatible with &lt;code&gt;diffusers&lt;/code&gt;!&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion is a text-to-image latent diffusion model created by the researchers and engineers from &lt;a href=&#34;https://github.com/CompVis&#34;&gt;CompVis&lt;/a&gt;, &lt;a href=&#34;https://stability.ai/&#34;&gt;Stability AI&lt;/a&gt; and &lt;a href=&#34;https://laion.ai/&#34;&gt;LAION&lt;/a&gt;. It&#39;s trained on 512x512 images from a subset of the &lt;a href=&#34;https://laion.ai/blog/laion-5b/&#34;&gt;LAION-5B&lt;/a&gt; database. This model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See the &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion&#34;&gt;model card&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You need to accept the model license before downloading or using the Stable Diffusion weights. Please, visit the &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v1-3&#34;&gt;model card&lt;/a&gt;, read the license and tick the checkbox if you agree. You have to be a registered user in ü§ó Hugging Face Hub, and you&#39;ll also need to use an access token for the code to work. For more information on access tokens, please refer to &lt;a href=&#34;https://huggingface.co/docs/hub/security-tokens&#34;&gt;this section&lt;/a&gt; of the documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# make sure you&#39;re logged in with `huggingface-cli login`&#xA;from torch import autocast&#xA;from diffusers import StableDiffusionPipeline, LMSDiscreteScheduler&#xA;&#xA;lms = LMSDiscreteScheduler(&#xA;    beta_start=0.00085, &#xA;    beta_end=0.012, &#xA;    beta_schedule=&#34;scaled_linear&#34;&#xA;)&#xA;&#xA;pipe = StableDiffusionPipeline.from_pretrained(&#xA;    &#34;CompVis/stable-diffusion-v1-3&#34;, &#xA;    scheduler=lms,&#xA;    use_auth_token=True&#xA;).to(&#34;cuda&#34;)&#xA;&#xA;prompt = &#34;a photo of an astronaut riding a horse on mars&#34;&#xA;with autocast(&#34;cuda&#34;):&#xA;    image = pipe(prompt)[&#34;sample&#34;][0]  &#xA;    &#xA;image.save(&#34;astronaut_rides_horse.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details, check out &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/stable_diffusion.ipynb&#34;&gt;the Stable Diffusion notebook&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/stable_diffusion.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; and have a look into the &lt;a href=&#34;https://github.com/huggingface/diffusers/releases/tag/v0.2.0&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to try running Diffusers! Here we outline code-focused tools (primarily using &lt;code&gt;DiffusionPipeline&lt;/code&gt;s and Google Colab) and interactive web-tools.&lt;/p&gt; &#xA;&lt;h3&gt;Running Code&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run the code yourself üíª, you can try out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/CompVis/ldm-text2im-large-256&#34;&gt;Text-to-Image Latent Diffusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# !pip install diffusers transformers&#xA;from diffusers import DiffusionPipeline&#xA;&#xA;model_id = &#34;CompVis/ldm-text2im-large-256&#34;&#xA;&#xA;# load model and scheduler&#xA;ldm = DiffusionPipeline.from_pretrained(model_id)&#xA;&#xA;# run pipeline in inference (sample random noise and denoise)&#xA;prompt = &#34;A painting of a squirrel eating a burger&#34;&#xA;images = ldm([prompt], num_inference_steps=50, eta=0.3, guidance_scale=6)[&#34;sample&#34;]&#xA;&#xA;# save images&#xA;for idx, image in enumerate(images):&#xA;    image.save(f&#34;squirrel-{idx}.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/google/ddpm-celebahq-256&#34;&gt;Unconditional Diffusion with discrete scheduler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# !pip install diffusers&#xA;from diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline&#xA;&#xA;model_id = &#34;google/ddpm-celebahq-256&#34;&#xA;&#xA;# load model and scheduler&#xA;ddpm = DDPMPipeline.from_pretrained(model_id)  # you can replace DDPMPipeline with DDIMPipeline or PNDMPipeline for faster inference&#xA;&#xA;# run pipeline in inference (sample random noise and denoise)&#xA;image = ddpm()[&#34;sample&#34;]&#xA;&#xA;# save image&#xA;image[0].save(&#34;ddpm_generated_image.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/CompVis/ldm-celebahq-256&#34;&gt;Unconditional Latent Diffusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/google/ncsnpp-ffhq-1024&#34;&gt;Unconditional Diffusion with continous scheduler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other Notebooks&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/patil-suraj/Notebooks/blob/master/image_2_image_using_diffusers.ipynb&#34;&gt;image-to-image generation with Stable Diffusion&lt;/a&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb&#34;&gt;tweak images via repeated Stable Diffusion seeds&lt;/a&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web Demos&lt;/h3&gt; &#xA;&lt;p&gt;If you just want to play around with some web demos, you can try out the following üöÄ Spaces:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Hugging Face Spaces&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-to-Image Latent Diffusion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/CompVis/text2img-latent-diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Faces generator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/CompVis/celeba-latent-diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DDPM with different schedulers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/fusing/celeba-diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Conditional generation from sketch (&lt;em&gt;SOON&lt;/em&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/huggingface/diffuse-the-rest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Composable diffusion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/spaces/Shuang59/Composable-Diffusion&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Definitions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Models&lt;/strong&gt;: Neural network that models $p_\theta(\mathbf{x}_{t-1}|\mathbf{x}_t)$ (see image below) and is trained end-to-end to &lt;em&gt;denoise&lt;/em&gt; a noisy input to an image. &lt;em&gt;Examples&lt;/em&gt;: UNet, Conditioned UNet, 3D UNet, Transformer UNet&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10695622/174349667-04e9e485-793b-429a-affe-096e8199ad5b.png&#34; width=&#34;800&#34;&gt; &lt;br&gt; &lt;em&gt; Figure from DDPM paper (https://arxiv.org/abs/2006.11239). &lt;/em&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Schedulers&lt;/strong&gt;: Algorithm class for both &lt;strong&gt;inference&lt;/strong&gt; and &lt;strong&gt;training&lt;/strong&gt;. The class provides functionality to compute previous image according to alpha, beta schedule as well as predict noise for training. &lt;em&gt;Examples&lt;/em&gt;: &lt;a href=&#34;https://arxiv.org/abs/2006.11239&#34;&gt;DDPM&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2010.02502&#34;&gt;DDIM&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2202.09778&#34;&gt;PNDM&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2204.13902&#34;&gt;DEIS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10695622/174349706-53d58acc-a4d1-4cda-b3e8-432d9dc7ad38.png&#34; width=&#34;800&#34;&gt; &lt;br&gt; &lt;em&gt; Sampling and training algorithms. Figure from DDPM paper (https://arxiv.org/abs/2006.11239). &lt;/em&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Diffusion Pipeline&lt;/strong&gt;: End-to-end pipeline that includes multiple diffusion models, possible text encoders, ... &lt;em&gt;Examples&lt;/em&gt;: Glide, Latent-Diffusion, Imagen, DALL-E 2&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10695622/174348898-481bd7c2-5457-4830-89bc-f0907756f64c.jpeg&#34; width=&#34;550&#34;&gt; &lt;br&gt; &lt;em&gt; Figure from ImageGen (https://imagen.research.google/). &lt;/em&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Readability and clarity is prefered over highly optimized code. A strong importance is put on providing readable, intuitive and elementary code design. &lt;em&gt;E.g.&lt;/em&gt;, the provided &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/src/diffusers/schedulers&#34;&gt;schedulers&lt;/a&gt; are separated from the provided &lt;a href=&#34;https://github.com/huggingface/diffusers/tree/main/src/diffusers/models&#34;&gt;models&lt;/a&gt; and provide well-commented code that can be read alongside the original paper.&lt;/li&gt; &#xA; &lt;li&gt;Diffusers is &lt;strong&gt;modality independent&lt;/strong&gt; and focuses on providing pretrained models and tools to build systems that generate &lt;strong&gt;continous outputs&lt;/strong&gt;, &lt;em&gt;e.g.&lt;/em&gt; vision and audio.&lt;/li&gt; &#xA; &lt;li&gt;Diffusion models and schedulers are provided as concise, elementary building blocks. In contrast, diffusion pipelines are a collection of end-to-end diffusion systems that can be used out-of-the-box, should stay as close as possible to their original implementation and can include components of another library, such as text-encoders. Examples for diffusion pipelines are &lt;a href=&#34;https://github.com/openai/glide-text2im&#34;&gt;Glide&lt;/a&gt; and &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;Latent Diffusion&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;pip&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade diffusers  # should install diffusers 0.2.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;code&gt;conda&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conda install -c conda-forge diffusers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;In the works&lt;/h2&gt; &#xA;&lt;p&gt;For the first release, ü§ó Diffusers focuses on text-to-image diffusion techniques. However, diffusers can be used for much more than that! Over the upcoming releases, we&#39;ll be focusing on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Diffusers for audio&lt;/li&gt; &#xA; &lt;li&gt;Diffusers for reinforcement learning (initial work happening in &lt;a href=&#34;https://github.com/huggingface/diffusers/pull/105&#34;&gt;https://github.com/huggingface/diffusers/pull/105&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Diffusers for video generation&lt;/li&gt; &#xA; &lt;li&gt;Diffusers for molecule generation (initial work happening in &lt;a href=&#34;https://github.com/huggingface/diffusers/pull/54&#34;&gt;https://github.com/huggingface/diffusers/pull/54&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A few pipeline components are already being worked on, namely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BDDMPipeline for spectrogram-to-sound vocoding&lt;/li&gt; &#xA; &lt;li&gt;GLIDEPipeline to support OpenAI&#39;s GLIDE model&lt;/li&gt; &#xA; &lt;li&gt;Grad-TTS for text to audio generation / conditional audio generation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We want diffusers to be a toolbox useful for diffusers models in general; if you find yourself limited in any way by the current API, or would like to see additional models, schedulers, or techniques, please open a &lt;a href=&#34;https://github.com/huggingface/diffusers/issues&#34;&gt;GitHub issue&lt;/a&gt; mentioning what you would like to see.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This library concretizes previous work by many different authors and would not have been possible without their great research and implementations. We&#39;d like to thank, in particular, the following implementations which have helped us in our development and without which the API could not have been as polished today:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@CompVis&#39; latent diffusion models library, available &lt;a href=&#34;https://github.com/CompVis/latent-diffusion&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@hojonathanho original DDPM implementation, available &lt;a href=&#34;https://github.com/hojonathanho/diffusion&#34;&gt;here&lt;/a&gt; as well as the extremely useful translation into PyTorch by @pesser, available &lt;a href=&#34;https://github.com/pesser/pytorch_diffusion&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@ermongroup&#39;s DDIM implementation, available &lt;a href=&#34;https://github.com/ermongroup/ddim&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;@yang-song&#39;s Score-VE and Score-VP implementations, available &lt;a href=&#34;https://github.com/yang-song/score_sde_pytorch&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also want to thank @heejkoo for the very helpful overview of papers, code and resources on diffusion models, available &lt;a href=&#34;https://github.com/heejkoo/Awesome-Diffusion-Models&#34;&gt;here&lt;/a&gt; as well as @crowsonkb and @rromb for useful discussions and insights.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blizzless/blizzless-diiis</title>
    <updated>2022-08-28T01:42:17Z</updated>
    <id>tag:github.com,2022-08-28:/blizzless/blizzless-diiis</id>
    <link href="https://github.com/blizzless/blizzless-diiis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully-functional open-source server implementation for Diablo 3&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/pictures/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DiIiS Project&lt;/h1&gt; &#xA;&lt;p&gt;DiIiS is a fully-functional open-source local server for &lt;a href=&#34;https://eu.diablo3.blizzard.com&#34;&gt;Diablo III: Reaper of Souls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implemented account creation system, authorization and lobby.&lt;/li&gt; &#xA; &lt;li&gt;Implemented Necromancer class mechanics.&lt;/li&gt; &#xA; &lt;li&gt;Fully implemented chat system and friends.&lt;/li&gt; &#xA; &lt;li&gt;Fully implemented clan system.&lt;/li&gt; &#xA; &lt;li&gt;Implemented basic DRLG (dungeon generator).&lt;/li&gt; &#xA; &lt;li&gt;Implemented item generator with in-game affixes.&lt;/li&gt; &#xA; &lt;li&gt;Implemented the basic mechanics of almost all active abilities for all classes.&lt;/li&gt; &#xA; &lt;li&gt;Implemented a system of set items.&lt;/li&gt; &#xA; &lt;li&gt;Implemented all main scripts for all story quests 5 acts.&lt;/li&gt; &#xA; &lt;li&gt;Implemented basic scripts and generator for &#34;Adventure Mode&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Implemented the basis for the &#34;Challenge Nephalem Rifts&#34; mode.&lt;/li&gt; &#xA; &lt;li&gt;Implemented artificial intelligence for 80% of minions.&lt;/li&gt; &#xA; &lt;li&gt;Implemented personal artificial intelligence for 40% of all monsters.&lt;/li&gt; &#xA; &lt;li&gt;Implemented personal artificial intelligence for half of the Bosses.&lt;/li&gt; &#xA; &lt;li&gt;Implemented LAN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Restrictions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Donate Store implementation is removed.&lt;/li&gt; &#xA; &lt;li&gt;NAT support is hidden, but possible ;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Supported Clients&lt;/h2&gt; &#xA;&lt;p&gt;Each version of the client includes changes to structures, opcodes and attributes.&lt;/p&gt; &#xA;&lt;p&gt;The currently supported version of the client: &lt;strong&gt;2.7.3.82785&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Server Deploying&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&#34;&gt;PostgreSQL 9.5.25&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create databases in PostgreSQL: &lt;code&gt;diiis&lt;/code&gt; and &lt;code&gt;worlds&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change you account and password in &lt;code&gt;database.Account.config&lt;/code&gt; and &lt;code&gt;database.Worlds.conifg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Restore &lt;code&gt;worlds.backup&lt;/code&gt; to &lt;code&gt;worlds&lt;/code&gt; database.&lt;/li&gt; &#xA; &lt;li&gt;Compile by &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;VS 2019/2022&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[Skip this stage for local game] Copy the &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/configs/config.ini&#34;&gt;config.ini&lt;/a&gt; file to the server folder (It overwrites the default settings): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Update the parameter entries with your IP record on the network: &lt;code&gt;BindIP&lt;/code&gt; and &lt;code&gt;PublicIP&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Launch wait until server start, it creates a hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;Create user account(s) using console: &lt;code&gt;!account add Login Password Tag&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Prepare Client&lt;/h2&gt; &#xA;&lt;p&gt;Do this for each client connecting to the server.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/#supported-clients&#34;&gt;supported client&lt;/a&gt; Diablo 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install certificate &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/src/DiIiS-NA/bnetserver.p12&#34;&gt;bnetserver.p12&lt;/a&gt;, password - &lt;code&gt;123&lt;/code&gt; (the game verifies the CA root certificates).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setting up redirects client to your server:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Method #1 - Hosts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add redirects to the &lt;code&gt;hosts&lt;/code&gt; file (&lt;code&gt;%WinDir%\System32\drivers\etc\hosts&lt;/code&gt;):&lt;br&gt; &lt;code&gt;127.0.0.1 us.actual.battle.net&lt;/code&gt;&lt;br&gt; &lt;code&gt;127.0.0.1 eu.actual.battle.net&lt;/code&gt;&lt;/p&gt; &lt;p&gt;!After the modification the official Battle.Net application will not be able to connect to the server!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Method #2 - Modify main executable file&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Find null-terminated string enum and rewrite with HexEditor to your IP server.&#xA;eu.actual.battle.net/&#xA;us.actual.battle.net/&#xA;cn.actual.battle.net/&#xA;kr.actual.battle.net/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch client (&lt;code&gt;x64&lt;/code&gt; or &lt;code&gt;x86&lt;/code&gt;) with arguments &lt;code&gt;&#34;Diablo III64.exe&#34; -launch&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to the game using your credentials.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Skip this stage for local game] After that, when creating a game (in client), indicate the creation of a public game. Other players, when connecting, must also indicate a public game, and at the start they will connect to you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;re in the game world!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using Docker&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker-compose up&lt;/code&gt; inside &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/db&#34;&gt;db&lt;/a&gt; folder and continue from the 5th step in section &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/#server-deploying&#34;&gt;server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Server Configuration&lt;/h1&gt; &#xA;&lt;h2&gt;Global configuration&lt;/h2&gt; &#xA;&lt;p&gt;Using the configuration file you can easily override the &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/docs/game-world-settings.md&#34;&gt;global world parameters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command system&lt;/h2&gt; &#xA;&lt;p&gt;The command system allows you to get control of the game world if you have rights. A list of commands is available &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/docs/commands-list.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Issues&lt;/h1&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/docs/report-form.md&#34;&gt;report form&lt;/a&gt; before submitting issue, this will help people save time!&lt;/p&gt; &#xA;&lt;h1&gt;System requirements&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Entry-level&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Mid-range&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;High-end&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CPU&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intel Core i5 or AMD Ryzen 5&lt;/td&gt; &#xA;   &lt;td&gt;Intel Core i7 or AMD Ryzen 7&lt;/td&gt; &#xA;   &lt;td&gt;Intel Core i9 or AMD Ryzen 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Memory&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;4 GB RAM&lt;/td&gt; &#xA;   &lt;td&gt;16 GB RAM&lt;/td&gt; &#xA;   &lt;td&gt;64 GB RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;500 MB&lt;/td&gt; &#xA;   &lt;td&gt;1 GB&lt;/td&gt; &#xA;   &lt;td&gt;1 GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;You can see more screenshots &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/SCREENSHOTS.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/pictures/ingame-screen-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>