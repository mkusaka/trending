<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:47:42Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>twitter/the-algorithm</title>
    <updated>2023-04-09T01:47:42Z</updated>
    <id>tag:github.com,2023-04-09:/twitter/the-algorithm</id>
    <link href="https://github.com/twitter/the-algorithm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for Twitter&#39;s Recommendation Algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Twitter&#39;s Recommendation Algorithm&lt;/h1&gt; &#xA;&lt;p&gt;Twitter&#39;s Recommendation Algorithm is a set of services and jobs that are responsible for constructing and serving the Home Timeline. For an introduction to how the algorithm works, please refer to our &lt;a href=&#34;https://blog.twitter.com/engineering/en_us/topics/open-source/2023/twitter-recommendation-algorithm&#34;&gt;engineering blog&lt;/a&gt;. The diagram below illustrates how major services and jobs interconnect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/docs/system-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;These are the main components of the Recommendation Algorithm included in this repository:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/simclusters_v2/README.md&#34;&gt;SimClusters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Community detection and sparse embeddings into those communities.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twitter/the-algorithm-ml/raw/main/projects/twhin/README.md&#34;&gt;TwHIN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dense knowledge graph embeddings for Users and Tweets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/trust_and_safety_models/README.md&#34;&gt;trust-and-safety-models&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Models for detecting NSFW or abusive content.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/interaction_graph/README.md&#34;&gt;real-graph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Model to predict the likelihood of a Twitter User interacting with another User.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/graph/batch/job/tweepcred/README&#34;&gt;tweepcred&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Page-Rank algorithm for calculating Twitter User reputation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/recos-injector/README.md&#34;&gt;recos-injector&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Streaming event processor for building input streams for &lt;a href=&#34;https://github.com/twitter/GraphJet&#34;&gt;GraphJet&lt;/a&gt; based services.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/graph-feature-service/README.md&#34;&gt;graph-feature-service&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Serves graph features for a directed pair of Users (e.g. how many of User A&#39;s following liked Tweets from User B).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Candidate Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/java/com/twitter/search/README.md&#34;&gt;search-index&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Find and rank In-Network Tweets. ~50% of Tweets come from this candidate source.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/cr-mixer/README.md&#34;&gt;cr-mixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Coordination layer for fetching Out-of-Network tweet candidates from underlying compute services.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/recos/user_tweet_entity_graph/README.md&#34;&gt;user-tweet-entity-graph&lt;/a&gt; (UTEG)&lt;/td&gt; &#xA;   &lt;td&gt;Maintains an in memory User to Tweet interaction graph, and finds candidates based on traversals of this graph. This is built on the &lt;a href=&#34;https://github.com/twitter/GraphJet&#34;&gt;GraphJet&lt;/a&gt; framework. Several other GraphJet based features and candidate sources are located &lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/recos&#34;&gt;here&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/follow-recommendations-service/README.md&#34;&gt;follow-recommendation-service&lt;/a&gt; (FRS)&lt;/td&gt; &#xA;   &lt;td&gt;Provides Users with recommendations for accounts to follow, and Tweets from those accounts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ranking&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/python/twitter/deepbird/projects/timelines/scripts/models/earlybird/README.md&#34;&gt;light-ranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Light Ranker model used by search index (Earlybird) to rank Tweets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twitter/the-algorithm-ml/raw/main/projects/home/recap/README.md&#34;&gt;heavy-ranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Neural network for ranking candidate tweets. One of the main signals used to select timeline Tweets post candidate sourcing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tweet mixing &amp;amp; filtering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/home-mixer/README.md&#34;&gt;home-mixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main service used to construct and serve the Home Timeline. Built on &lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/product-mixer/README.md&#34;&gt;product-mixer&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/visibilitylib/README.md&#34;&gt;visibility-filters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Responsible for filtering Twitter content to support legal compliance, improve product quality, increase user trust, protect revenue through the use of hard-filtering, visible product treatments, and coarse-grained downranking.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/timelineranker/README.md&#34;&gt;timelineranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Legacy service which provides relevance-scored tweets from the Earlybird Search Index and UTEG service.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Software framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/navi/README.md&#34;&gt;navi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;High performance, machine learning model serving written in Rust.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/product-mixer/README.md&#34;&gt;product-mixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Software framework for building feeds of content.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/twml/README.md&#34;&gt;twml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Legacy machine learning framework built on TensorFlow v1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We include Bazel BUILD files for most components, but not a top-level BUILD or WORKSPACE file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We invite the community to submit GitHub issues and pull requests for suggestions on improving the recommendation algorithm. We are working on tools to manage these suggestions and sync changes to our internal repository. Any security concerns or issues should be routed to our official &lt;a href=&#34;https://hackerone.com/twitter&#34;&gt;bug bounty program&lt;/a&gt; through HackerOne. We hope to benefit from the collective intelligence and expertise of the global community in helping us identify issues and suggest improvements, ultimately leading to a better Twitter.&lt;/p&gt; &#xA;&lt;p&gt;Read our blog on the open source initiative &lt;a href=&#34;https://blog.twitter.com/en_us/topics/company/2023/a-new-era-of-transparency-for-twitter&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binary-husky/chatgpt_academic</title>
    <updated>2023-04-09T01:47:42Z</updated>
    <id>tag:github.com,2023-04-09:/binary-husky/chatgpt_academic</id>
    <link href="https://github.com/binary-husky/chatgpt_academic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;科研工作专用ChatGPT拓展，特别优化学术Paper润色体验，支持自定义快捷按钮，支持自定义函数插件，支持markdown表格显示，Tex公式双显示，代码显示功能完善，新增本地Python/C++/Go项目树剖析功能/项目源代码自译解能力，新增PDF和Word文献批量总结功能/PDF论文全文翻译功能&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT 学术优化&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果喜欢这个项目，请给它一个Star；如果你发明了更好用的快捷键或函数插件，欢迎发issue或者pull requests（dev分支）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please give it a Star. If you&#39;ve come up with more useful academic shortcuts or functional plugins, feel free to open an issue or pull request （to &lt;code&gt;dev&lt;/code&gt; branch）.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;1.请注意只有“红颜色”标识的函数插件（按钮）才支持读取文件。目前对pdf/word格式文件的支持插件正在逐步完善中，需要更多developer的帮助。&lt;/p&gt; &#xA; &lt;p&gt;2.本项目中每个文件的功能都在自译解&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/wiki/chatgpt-academic%E9%A1%B9%E7%9B%AE%E8%87%AA%E8%AF%91%E8%A7%A3%E6%8A%A5%E5%91%8A&#34;&gt;&lt;code&gt;self_analysis.md&lt;/code&gt;&lt;/a&gt;详细说明。随着版本的迭代，您也可以随时自行点击相关函数插件，调用GPT重新生成项目的自我解析报告。常见问题汇总在&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;&lt;code&gt;wiki&lt;/code&gt;&lt;/a&gt;当中。&lt;/p&gt; &#xA; &lt;p&gt;3.如果您不太习惯部分中文命名的函数、注释或者界面，您可以随时点击相关函数插件，调用ChatGPT一键生成纯英文的项目源代码。&lt;/p&gt; &#xA; &lt;p&gt;4.项目使用OpenAI的gpt-3.5-turbo模型，期待gpt-4早点放宽门槛😂&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;功能&lt;/th&gt; &#xA;    &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;一键润色&lt;/td&gt; &#xA;    &lt;td&gt;支持一键润色、一键查找论文语法错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;一键中英互译&lt;/td&gt; &#xA;    &lt;td&gt;一键中英互译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;一键代码解释&lt;/td&gt; &#xA;    &lt;td&gt;可以正确显示代码、解释代码&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV14s4y1E7jN&#34;&gt;自定义快捷键&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;支持自定义快捷键&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1rc411W7Dr&#34;&gt;配置代理服务器&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;支持配置代理服务器&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;模块化设计&lt;/td&gt; &#xA;    &lt;td&gt;支持自定义高阶的实验性功能与[函数插件]，插件支持&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/wiki/%E5%87%BD%E6%95%B0%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97&#34;&gt;热更新&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1cj411A7VW&#34;&gt;自我程序剖析&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 一键读懂本项目的源代码&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1cj411A7VW&#34;&gt;程序剖析&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 一键可以剖析其他Python/C/C++/Java项目树&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;读论文&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 一键解读latex论文全文并生成摘要&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;批量注释生成&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 一键批量生成函数注释&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;chat分析报告生成&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 运行后自动生成总结汇报&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1LM4y1279X&#34;&gt;arxiv小助手&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 输入arxiv文章url即可一键翻译摘要+下载PDF&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1KT411x7Wn&#34;&gt;PDF论文全文翻译功能&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] PDF论文提取题目&amp;amp;摘要+翻译全文（多线程）&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV19L411U7ia&#34;&gt;谷歌学术统合小助手&lt;/a&gt; (Version&amp;gt;=2.45)&lt;/td&gt; &#xA;    &lt;td&gt;[函数插件] 给定任意谷歌学术搜索页面URL，让gpt帮你选择有趣的文章&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;公式显示&lt;/td&gt; &#xA;    &lt;td&gt;可以同时显示公式的tex形式和渲染形式&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;图片显示&lt;/td&gt; &#xA;    &lt;td&gt;可以在markdown中显示图片&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;多线程函数插件支持&lt;/td&gt; &#xA;    &lt;td&gt;支持多线调用chatgpt，一键处理海量文本或程序&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;支持GPT输出的markdown表格&lt;/td&gt; &#xA;    &lt;td&gt;可以输出支持GPT的markdown表格&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;启动暗色gradio&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/issues/173&#34;&gt;主题&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;在浏览器url后面添加&lt;code&gt;/?__dark-theme=true&lt;/code&gt;可以切换dark主题&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;huggingface免科学上网&lt;a href=&#34;https://huggingface.co/spaces/qingxu98/gpt-academic&#34;&gt;在线体验&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;登陆huggingface后复制&lt;a href=&#34;https://huggingface.co/spaces/qingxu98/gpt-academic&#34;&gt;此空间&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;……&lt;/td&gt; &#xA;    &lt;td&gt;……&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- - 新界面（左：master主分支, 右：dev开发前沿） --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新界面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/230361456-61078362-a966-4eb5-b49e-3c62ef18b860.gif&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;所有按钮都通过读取functional.py动态生成，可随意加自定义功能，解放粘贴板&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;img/公式.gif&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;润色/纠错&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;img/润色.gif&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持GPT输出的markdown表格&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/binary-husky/chatgpt_academic/master/img/demo2.jpg&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果输出包含公式，会同时以tex形式和渲染形式显示，方便复制和阅读&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/230598842-1d7fcddd-815d-40ee-af60-baf488a199df.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;懒得看项目代码？整个工程直接给chatgpt炫嘴里&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226935232-6b6a73ce-8900-4aee-93f9-733c7e6fef53.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;直接运行 (Windows, Linux or MacOS)&lt;/h2&gt; &#xA;&lt;h3&gt;1. 下载项目&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/binary-husky/chatgpt_academic.git&#xA;cd chatgpt_academic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. 配置API_KEY和代理设置&lt;/h3&gt; &#xA;&lt;p&gt;在&lt;code&gt;config.py&lt;/code&gt;中，配置 海外Proxy 和 OpenAI API KEY，说明如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. 如果你在国内，需要设置海外代理才能够顺利使用 OpenAI API，设置方法请仔细阅读config.py（1.修改其中的USE_PROXY为True; 2.按照说明修改其中的proxies）。&#xA;2. 配置 OpenAI API KEY。你需要在 OpenAI 官网上注册并获取 API KEY。一旦你拿到了 API KEY，在 config.py 文件里配置好即可。&#xA;3. 与代理网络有关的issue（网络超时、代理不起作用）汇总到 https://github.com/binary-husky/chatgpt_academic/issues/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;（P.S. 程序运行时会优先检查是否存在名为&lt;code&gt;config_private.py&lt;/code&gt;的私密配置文件，并用其中的配置覆盖&lt;code&gt;config.py&lt;/code&gt;的同名配置。因此，如果您能理解我们的配置读取逻辑，我们强烈建议您在&lt;code&gt;config.py&lt;/code&gt;旁边创建一个名为&lt;code&gt;config_private.py&lt;/code&gt;的新配置文件，并把&lt;code&gt;config.py&lt;/code&gt;中的配置转移（复制）到&lt;code&gt;config_private.py&lt;/code&gt;中。&lt;code&gt;config_private.py&lt;/code&gt;不受git管控，可以让您的隐私信息更加安全。）&lt;/p&gt; &#xA;&lt;h3&gt;3. 安装依赖&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# （选择一）推荐&#xA;python -m pip install -r requirements.txt   &#xA;&#xA;# （选择二）如果您使用anaconda，步骤也是类似的：&#xA;# （选择二.1）conda create -n gptac_venv python=3.11&#xA;# （选择二.2）conda activate gptac_venv&#xA;# （选择二.3）python -m pip install -r requirements.txt&#xA;&#xA;# 备注：使用官方pip源或者阿里pip源，其他pip源（如一些大学的pip）有可能出问题，临时换源方法： &#xA;# python -m pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. 运行&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. 测试实验性功能&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- 测试C++项目头文件分析&#xA;    input区域 输入 `./crazy_functions/test_project/cpp/libJPG` ， 然后点击 &#34;[实验] 解析整个C++项目（input输入项目根路径）&#34;&#xA;- 测试给Latex项目写摘要&#xA;    input区域 输入 `./crazy_functions/test_project/latex/attention` ， 然后点击 &#34;[实验] 读tex论文写摘要（input输入项目根路径）&#34;&#xA;- 测试Python项目分析&#xA;    input区域 输入 `./crazy_functions/test_project/python/dqn` ， 然后点击 &#34;[实验] 解析整个py项目（input输入项目根路径）&#34;&#xA;- 测试自我代码解读&#xA;    点击 &#34;[实验] 请解析并解构此项目本身&#34;&#xA;- 测试实验功能模板函数（要求gpt回答历史上的今天发生了什么），您可以根据此函数为模板，实现更复杂的功能&#xA;    点击 &#34;[实验] 实验功能函数模板&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用docker (Linux)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 下载项目&#xA;git clone https://github.com/binary-husky/chatgpt_academic.git&#xA;cd chatgpt_academic&#xA;# 配置 海外Proxy 和 OpenAI API KEY&#xA;用任意文本编辑器编辑 config.py&#xA;# 安装&#xA;docker build -t gpt-academic .&#xA;# 运行&#xA;docker run --rm -it --net=host gpt-academic&#xA;&#xA;# 测试实验性功能&#xA;## 测试自我代码解读&#xA;点击 &#34;[实验] 请解析并解构此项目本身&#34;&#xA;## 测试实验功能模板函数（要求gpt回答历史上的今天发生了什么），您可以根据此函数为模板，实现更复杂的功能&#xA;点击 &#34;[实验] 实验功能函数模板&#34;&#xA;##（请注意在docker中运行时，需要额外注意程序的文件访问权限问题）&#xA;## 测试C++项目头文件分析&#xA;input区域 输入 ./crazy_functions/test_project/cpp/libJPG ， 然后点击 &#34;[实验] 解析整个C++项目（input输入项目根路径）&#34;&#xA;## 测试给Latex项目写摘要&#xA;input区域 输入 ./crazy_functions/test_project/latex/attention ， 然后点击 &#34;[实验] 读tex论文写摘要（input输入项目根路径）&#34;&#xA;## 测试Python项目分析&#xA;input区域 输入 ./crazy_functions/test_project/python/dqn ， 然后点击 &#34;[实验] 解析整个py项目（input输入项目根路径）&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;其他部署方式&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;使用WSL2（Windows Subsystem for Linux 子系统） 请访问&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/wiki/%E4%BD%BF%E7%94%A8WSL2%EF%BC%88Windows-Subsystem-for-Linux-%E5%AD%90%E7%B3%BB%E7%BB%9F%EF%BC%89%E9%83%A8%E7%BD%B2&#34;&gt;部署wiki-1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;nginx远程部署 请访问&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/wiki/%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E7%9A%84%E6%8C%87%E5%AF%BC&#34;&gt;部署wiki-2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;自定义新的便捷按钮（学术快捷键自定义）&lt;/h2&gt; &#xA;&lt;p&gt;打开functional.py，添加条目如下，然后重启程序即可。（如果按钮已经添加成功并可见，那么前缀、后缀都支持热修改，无需重启程序即可生效。） 例如&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;超级英译中&#34;: {&#xA;&#xA;    # 前缀，会被加在你的输入之前。例如，用来描述你的要求，例如翻译、解释代码、润色等等&#xA;    &#34;Prefix&#34;: &#34;请翻译把下面一段内容成中文，然后用一个markdown表格逐一解释文中出现的专有名词：\n\n&#34;, &#xA;    &#xA;    # 后缀，会被加在你的输入之后。例如，配合前缀可以把你的输入内容用引号圈起来。&#xA;    &#34;Suffix&#34;: &#34;&#34;,&#xA;    &#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226899272-477c2134-ed71-4326-810c-29891fe4a508.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;如果你发明了更好用的学术快捷键，欢迎发issue或者pull requests！&lt;/p&gt; &#xA;&lt;h2&gt;配置代理&lt;/h2&gt; &#xA;&lt;h3&gt;方法一：常规方法&lt;/h3&gt; &#xA;&lt;p&gt;在&lt;code&gt;config.py&lt;/code&gt;中修改端口与代理软件对应&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226571294-37a47cd9-4d40-4c16-97a2-d360845406f7.png&#34; width=&#34;500&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226838985-e5c95956-69c2-4c23-a4dd-cd7944eeb451.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;配置完成后，你可以用以下命令测试代理是否工作，如果一切正常，下面的代码将输出你的代理服务器所在地：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python check_proxy.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;方法二：纯新手教程&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binary-husky/chatgpt_academic/wiki/%E4%BB%A3%E7%90%86%E8%BD%AF%E4%BB%B6%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B0%E6%89%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E6%96%B9%E6%B3%95%E5%8F%AA%E9%80%82%E7%94%A8%E4%BA%8E%E6%96%B0%E6%89%8B%EF%BC%89&#34;&gt;纯新手教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;兼容性测试&lt;/h2&gt; &#xA;&lt;h3&gt;图片显示：&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/228737599-bf0a9d9c-1808-4f43-ae15-dfcc7af0f295.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;如果一个程序能够读懂并剖析自己：&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226936850-c77d7183-0749-4c1c-9875-fd4891842d0c.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226936618-9b487e4b-ab5b-4b6e-84c6-16942102e917.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;其他任意Python/Cpp项目剖析：&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226935232-6b6a73ce-8900-4aee-93f9-733c7e6fef53.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226969067-968a27c1-1b9c-486b-8b81-ab2de8d3f88a.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Latex论文一键阅读理解与摘要生成&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504406-86ab97cd-f208-41c3-8e4a-7000e51cf980.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;自动报告生成&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227503770-fe29ce2c-53fd-47b0-b0ff-93805f0c2ff4.png&#34; height=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504617-7a497bb3-0a2a-4b50-9a8a-95ae60ea7afd.png&#34; height=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504005-efeaefe0-b687-49d0-bf95-2d7b7e66c348.png&#34; height=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;模块化功能设计&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/229288270-093643c1-0018-487a-81e6-1d7809b6e90f.png&#34; height=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504931-19955f78-45cd-4d1c-adac-e71e50957915.png&#34; height=&#34;400&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;源代码转译英文&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/229720562-fe6c3508-6142-4635-a83d-21eb3669baee.png&#34; height=&#34;400&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Todo 与 版本规划:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;version 3 (Todo):&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;支持gpt4和其他更多llm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;version 2.4+ (Todo):&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;总结大工程源代码时文本过长、token溢出的问题&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;实现项目打包部署&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;函数插件参数接口优化&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;自更新&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;version 2.4: (1)新增PDF全文翻译功能; (2)新增输入区切换位置的功能; (3)新增垂直布局选项; (4)多线程函数插件优化。&lt;/li&gt; &#xA; &lt;li&gt;version 2.3: 增强多线程交互性&lt;/li&gt; &#xA; &lt;li&gt;version 2.2: 函数插件支持热重载&lt;/li&gt; &#xA; &lt;li&gt;version 2.1: 可折叠式布局&lt;/li&gt; &#xA; &lt;li&gt;version 2.0: 引入模块化函数插件&lt;/li&gt; &#xA; &lt;li&gt;version 1.0: 基础功能&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考与学习&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;代码中参考了很多其他优秀项目中的设计，主要包括：&#xA;&#xA;# 借鉴项目1：借鉴了ChuanhuChatGPT中读取OpenAI json的方法、记录历史问询记录的方法以及gradio queue的使用技巧&#xA;https://github.com/GaiZhenbiao/ChuanhuChatGPT&#xA;&#xA;# 借鉴项目2：借鉴了mdtex2html中公式处理的方法&#xA;https://github.com/polarwinkel/mdtex2html&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>e2b-dev/e2b</title>
    <updated>2023-04-09T01:47:42Z</updated>
    <id>tag:github.com,2023-04-09:/e2b-dev/e2b</id>
    <link href="https://github.com/e2b-dev/e2b" rel="alternate"></link>
    <summary type="html">&lt;p&gt;e2b (english2bits) is an IDE powered by AI agents. Developers describe what they want to build by writing documentation. Then let AI agents with access to tools do the coding work.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/img/logoname-black.svg#gh-light-mode-only&#34; alt=&#34;e2b&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/img/logoname-white.svg#gh-dark-mode-only&#34; alt=&#34;e2b&#34;&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Open-source IDE powered by AI agents that do the work for you&lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://e2b.dev&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/U7KEcGErtQ&#34;&gt;Discord&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/e2b_dev&#34;&gt;Twitter&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/U7KEcGErtQ&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20Discord-blue&#34; alt=&#34;Discord community server&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/e2b_dev&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/infisical?label=Follow&#34; alt=&#34;e2b Twitter&#34;&gt; &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/img/e2b.png&#34; alt=&#34;e2b-editor&#34;&gt; &lt;em&gt;Example of AI agent building Stripe checkout. Left - technical specification written by human. Right - steps that the AI agent took and tools that it used to build the server route required by the specification.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is e2b and how does it work?&lt;/h2&gt; &#xA;&lt;p&gt;e2b or etob (&lt;em&gt;english2bits&lt;/em&gt;) is a new kind of development environment powered by AI. The main idea is that developers have access to AI agents that can use tools. The developer writes a short documentation or a technical spec in plain English and then lets the AI agent do the actual work. The AI agents have access to tools like writing to a file, running code, running commands, installing dependencies, deploying, etc. Agents operate in a secure sandboxed cloud environment that&#39;s powered by &lt;a href=&#34;https://github.com/firecracker-microvm/firecracker/&#34;&gt;Firecracker&lt;/a&gt;. This way, you for example describe what a server route should do and the agent codes it for you. Like &lt;a href=&#34;https://twitter.com/mlejva/status/1641072535163875330&#34;&gt;this example&lt;/a&gt; of an AI agent coding Stripe customer checkout based on a technical spec.&lt;/p&gt; &#xA;&lt;h2&gt;BYOM, BYOP, BYOT&lt;/h2&gt; &#xA;&lt;p&gt;While e2b will offer the &#34;batteries-included&#34; solution, our goal is to let users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BYOM&lt;/strong&gt; - Bring Your Own Model&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BYOP&lt;/strong&gt; - Bring Your Own Prompt&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BYOT&lt;/strong&gt; - Bring Your Own Tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We think the AI-powered IDE for the future should be open-sourced and allow anybody to bring their models, customize the prompts, and develop custom tools for the agents. But we also plan to offer a cloud version with some features behind subscription though.&lt;/p&gt; &#xA;&lt;h3&gt;Supported models&lt;/h3&gt; &#xA;&lt;p&gt;Right now we support only OpenAI GPT-4 and GPT-3.5 &lt;a href=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/state/store.ts#L16&#34;&gt;models&lt;/a&gt;. By default the IDE uses GPT-3.5 but you can change it from the &#34;Model&#34; tab in the right sidebar menu.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;If you want to to try the IDE locally the fastest way is doing the following steps which starts the app in Docker.&lt;/p&gt; &#xA;&lt;p&gt;You will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI API key (support for more and custom models coming soon)&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;Node.js &lt;em&gt;16+&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Free ports 3000, 49155, 54321, 54322&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The first start of the Dockerized app is slower because it downloads and builds all the necessary containers. On a 2CPU 4GB RAM machine it takes cca. 6 minutes and doesn&#39;t require any interaction. The subsequent starts are way faster.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Add env var&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;.env&lt;/code&gt; file by copying the &lt;a href=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and fill in the following variable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt; - your &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Start the app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the page on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;npm run start&lt;/code&gt; starts local Supabase in the background - to stop it you have to run &lt;code&gt;npm run stop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to run the project without using containers use the &lt;a href=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/#development&#34;&gt;steps here&lt;/a&gt;. This is useful if you want to leverage hot reloading and develop the project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Current state&lt;/h2&gt; &#xA;&lt;p&gt;e2b is a work in progress. The &lt;code&gt;developer &amp;lt;--&amp;gt; AI agent&lt;/code&gt; cooperation creates completely new paradigms. We&#39;re exploring how the ideal UX, UI, and cooperation with the agents should look like. The app will surely go through a lot of changes in the short and medium term.&lt;/p&gt; &#xA;&lt;p&gt;e2b currently support building only REST servers in Node.js. Specifically using the &lt;a href=&#34;https://expressjs.com/&#34;&gt;Express&lt;/a&gt; framework. We&#39;ll support more languages and frameworks with time. The goal for e2b is to eventually be able to handle any use-case.&lt;/p&gt; &#xA;&lt;h2&gt;How are we going to make money?&lt;/h2&gt; &#xA;&lt;p&gt;You will always be able to self-host e2b for free. We will also offer a cloud version. The current idea is to offer the base cloud version for free while having some features for individuals behind a subscription. We&#39;ll share more on pricing for companies and enterprises in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Early demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mlejva/status/1636103084802822151&#34;&gt;AI Agent using coding tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mlejva/status/1641151421830529042&#34;&gt;Build your custom &#34;Just-In-Time&#34; UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mlejva/status/1641072535163875330&#34;&gt;Agent coded a full Stripe customer checkout by following a technical spec provided by user&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Short-term goals, in no particular order.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;Come up with the name&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Clean up codebase and provide instructions on how to run it locally&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Set up a website&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch the initial version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For developing with hot reloading and contributing to the project you may want to run the app locally without Docker Compose (&lt;code&gt;npm run start&lt;/code&gt; command). Here are the steps for how to do it.&lt;/p&gt; &#xA;&lt;p&gt;You will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI API key (support for more and custom models coming soon)&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;Node.js &lt;em&gt;16+&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python &lt;em&gt;3.10+&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Poetry &lt;em&gt;1.3.2+&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Free ports 3000, 49155, 49160, 54321, 54322&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Install dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run install:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Start local Supabase&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run db:start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Local Supabase runs in the background - to stop it you have to run &lt;code&gt;npm run db:stop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3. Add env vars&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;.env&lt;/code&gt; file by copying the &lt;a href=&#34;https://raw.githubusercontent.com/e2b-dev/e2b/master/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and fill in the following variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt; - your &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUPABASE_SERVICE_ROLE_KEY&lt;/code&gt; - Supabase service role key you got in the previous step as &lt;code&gt;service_role key: eyJh......&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NEXT_PUBLIC_SUPABASE_ANON_KEY&lt;/code&gt; - Supabase anonymous key you got in the previous step as &lt;code&gt;anon key: eyJh......&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Start the app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the page on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and sign in with the testing credentials:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Email&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;admin@admin.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Password&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;admin@admin.com&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>