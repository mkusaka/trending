<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:49:55Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Vision-CAIR/MiniGPT-4</title>
    <updated>2023-04-30T01:49:55Z</updated>
    <id>tag:github.com,2023-04-30:/Vision-CAIR/MiniGPT-4</id>
    <link href="https://github.com/Vision-CAIR/MiniGPT-4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MiniGPT-4: Enhancing Vision-language Understanding with Advanced Large Language Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MiniGPT-4: Enhancing Vision-language Understanding with Advanced Large Language Models&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tsutikgiau.github.io/&#34;&gt;Deyao Zhu&lt;/a&gt;* (On Job Market!), &lt;a href=&#34;https://junchen14.github.io/&#34;&gt;Jun Chen&lt;/a&gt;* (On Job Market!), &lt;a href=&#34;https://xiaoqian-shen.github.io&#34;&gt;Xiaoqian Shen&lt;/a&gt;, &lt;a href=&#34;https://xiangli.ac.cn&#34;&gt;Xiang Li&lt;/a&gt;, and &lt;a href=&#34;https://www.mohamed-elhoseiny.com/&#34;&gt;Mohamed Elhoseiny&lt;/a&gt;. *Equal Contribution&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;King Abdullah University of Science and Technology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://minigpt-4.github.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Page-Green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2304.10592&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-Arxiv-red&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/Vision-CAIR/minigpt4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/Vision-CAIR/MiniGPT-4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Model-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1OK4kYsZphwt5DXchKkzMBjYF6jnkqh4R?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=__tftoxpBAw&amp;amp;feature=youtu.be&#34;&gt;&lt;img src=&#34;https://badges.aleen42.com/src/youtube.svg?sanitize=true&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;We now provide a pretrained MiniGPT-4 aligned with Vicuna-7B! The demo GPU memory consumption now can be as low as 12GB.&lt;/p&gt; &#xA;&lt;h2&gt;Online Demo&lt;/h2&gt; &#xA;&lt;p&gt;Click the image to chat with MiniGPT-4 around your images &lt;a href=&#34;https://minigpt-4.github.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/figs/online_demo.png&#34; alt=&#34;demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/figs/examples/wop_2.png&#34; alt=&#34;find wild&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/figs/examples/ad_2.png&#34; alt=&#34;write story&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/figs/examples/fix_1.png&#34; alt=&#34;solve problem&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/figs/examples/rhyme_1.png&#34; alt=&#34;write Poem&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;a href=&#34;https://minigpt-4.github.io&#34;&gt;project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MiniGPT-4 aligns a frozen visual encoder from BLIP-2 with a frozen LLM, Vicuna, using just one projection layer.&lt;/li&gt; &#xA; &lt;li&gt;We train MiniGPT-4 with two stages. The first traditional pretraining stage is trained using roughly 5 million aligned image-text pairs in 10 hours using 4 A100s. After the first stage, Vicuna is able to understand the image. But the generation ability of Vicuna is heavilly impacted.&lt;/li&gt; &#xA; &lt;li&gt;To address this issue and improve usability, we propose a novel way to create high-quality image-text pairs by the model itself and ChatGPT together. Based on this, we then create a small (3500 pairs in total) yet high-quality dataset.&lt;/li&gt; &#xA; &lt;li&gt;The second finetuning stage is trained on this dataset in a conversation template to significantly improve its generation reliability and overall usability. To our surprise, this stage is computationally efficient and takes only around 7 minutes with a single A100.&lt;/li&gt; &#xA; &lt;li&gt;MiniGPT-4 yields many emerging vision-language capabilities similar to those demonstrated in GPT-4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/figs/overview.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Prepare the code and the environment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Git clone our repository, creating a python environment and ativate it via the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Vision-CAIR/MiniGPT-4.git&#xA;cd MiniGPT-4&#xA;conda env create -f environment.yml&#xA;conda activate minigpt4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Prepare the pretrained Vicuna weights&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The current version of MiniGPT-4 is built on the v0 versoin of Vicuna-13B. Please refer to our instruction &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/PrepareVicuna.md&#34;&gt;here&lt;/a&gt; to prepare the Vicuna weights. The final weights would be in a single folder in a structure similar to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vicuna_weights&#xA;├── config.json&#xA;├── generation_config.json&#xA;├── pytorch_model.bin.index.json&#xA;├── pytorch_model-00001-of-00003.bin&#xA;...   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, set the path to the vicuna weight in the model config file &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/minigpt4/configs/models/minigpt4.yaml#L16&#34;&gt;here&lt;/a&gt; at Line 16.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Prepare the pretrained MiniGPT-4 checkpoint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download the pretrained checkpoints according to the Vicuna model you prepare.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Checkpoint Aligned with Vicuna 13B&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Checkpoint Aligned with Vicuna 7B&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/file/d/1a4zLvaiDBr-36pasffmgpvH5P7CKmpze/view?usp=share_link&#34;&gt;Downlad&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/file/d/1RY9jV0dyqLX-o38LrumkKRh6Jtaop58R/view?usp=sharing&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Then, set the path to the pretrained checkpoint in the evaluation config file in &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/eval_configs/minigpt4_eval.yaml#L10&#34;&gt;eval_configs/minigpt4_eval.yaml&lt;/a&gt; at Line 11.&lt;/p&gt; &#xA;&lt;h3&gt;Launching Demo Locally&lt;/h3&gt; &#xA;&lt;p&gt;Try out our demo &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/demo.py&#34;&gt;demo.py&lt;/a&gt; on your local machine by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python demo.py --cfg-path eval_configs/minigpt4_eval.yaml  --gpu-id 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To save GPU memory, Vicuna loads as 8 bit by default, with a beam search width of 1. This configuration requires about 23G GPU memory for Vicuna 13B and 11.5G GPU memory for Vicuna 7B. For more powerful GPUs, you can run the model in 16 bit by setting low_resource to False in the config file &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/eval_configs/minigpt4_eval.yaml&#34;&gt;minigpt4_eval.yaml&lt;/a&gt; and use a larger beam search width.&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/WangRongsheng&#34;&gt;@WangRongsheng&lt;/a&gt;, you can also run our code on &lt;a href=&#34;https://colab.research.google.com/drive/1OK4kYsZphwt5DXchKkzMBjYF6jnkqh4R?usp=sharing&#34;&gt;Colab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;The training of MiniGPT-4 contains two alignment stages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. First pretraining stage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the first pretrained stage, the model is trained using image-text pairs from Laion and CC datasets to align the vision and language model. To download and prepare the datasets, please check our &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/dataset/README_1_STAGE.md&#34;&gt;first stage dataset preparation instruction&lt;/a&gt;. After the first stage, the visual features are mapped and can be understood by the language model. To launch the first stage training, run the following command. In our experiments, we use 4 A100. You can change the save path in the config file &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/train_configs/minigpt4_stage1_pretrain.yaml&#34;&gt;train_configs/minigpt4_stage1_pretrain.yaml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc-per-node NUM_GPU train.py --cfg-path train_configs/minigpt4_stage1_pretrain.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A MiniGPT-4 checkpoint with only stage one training can be downloaded &lt;a href=&#34;https://drive.google.com/file/d/1u9FRRBB3VovP1HxCAlpD9Lw4t4P6-Yq8/view?usp=share_link&#34;&gt;here (13B)&lt;/a&gt; or &lt;a href=&#34;https://drive.google.com/file/d/1HihQtCEXUyBM1i9DQbaK934wW3TZi-h5/view?usp=share_link&#34;&gt;here (7B)&lt;/a&gt;. Compared to the model after stage two, this checkpoint generate incomplete and repeated sentences frequently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Second finetuning stage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the second stage, we use a small high quality image-text pair dataset created by ourselves and convert it to a conversation format to further align MiniGPT-4. To download and prepare our second stage dataset, please check our &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/dataset/README_2_STAGE.md&#34;&gt;second stage dataset preparation instruction&lt;/a&gt;. To launch the second stage alignment, first specify the path to the checkpoint file trained in stage 1 in &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/train_configs/minigpt4_stage2_finetune.yaml&#34;&gt;train_configs/minigpt4_stage1_pretrain.yaml&lt;/a&gt;. You can also specify the output path there. Then, run the following command. In our experiments, we use 1 A100.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc-per-node NUM_GPU train.py --cfg-path train_configs/minigpt4_stage2_finetune.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the second stage alignment, MiniGPT-4 is able to talk about the image coherently and user-friendly.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/blip-2&#34;&gt;BLIP2&lt;/a&gt; The model architecture of MiniGPT-4 follows BLIP-2. Don&#39;t forget to check this great open-source work if you don&#39;t know it before!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/salesforce/LAVIS&#34;&gt;Lavis&lt;/a&gt; This repository is built upon Lavis!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;Vicuna&lt;/a&gt; The fantastic language ability of Vicuna with only 13B parameters is just amazing. And it is open-source!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re using MiniGPT-4 in your research or applications, please cite using this BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{zhu2022minigpt4,&#xA;      title={MiniGPT-4: Enhancing Vision-language Understanding with Advanced Large Language Models}, &#xA;      author={Deyao Zhu and Jun Chen and Xiaoqian Shen and Xiang Li and Mohamed Elhoseiny},&#xA;      journal={arXiv preprint arXiv:2304.10592},&#xA;      year={2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is under &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/LICENSE.md&#34;&gt;BSD 3-Clause License&lt;/a&gt;. Many codes are based on &lt;a href=&#34;https://github.com/salesforce/LAVIS&#34;&gt;Lavis&lt;/a&gt; with BSD 3-Clause License &lt;a href=&#34;https://raw.githubusercontent.com/Vision-CAIR/MiniGPT-4/main/LICENSE_Lavis.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>geekyutao/Inpaint-Anything</title>
    <updated>2023-04-30T01:49:55Z</updated>
    <id>tag:github.com,2023-04-30:/geekyutao/Inpaint-Anything</id>
    <link href="https://github.com/geekyutao/Inpaint-Anything" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inpaint anything using Segment Anything and inpainting models.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/IAM.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Inpaint Anything: Segment Anything Meets Image Inpainting&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authors: Tao Yu, Runseng Feng, Ruoyu Feng, Jinming Liu, Xin Jin, Wenjun Zeng and Zhibo Chen.&lt;/li&gt; &#xA; &lt;li&gt;Institutes: University of Science and Technology of China; Eastern Institute for Advanced Study.&lt;/li&gt; &#xA; &lt;li&gt;[&lt;a href=&#34;https://arxiv.org/abs/2304.06790&#34;&gt;Paper&lt;/a&gt;] [&lt;a href=&#34;https://huggingface.co/spaces/InpaintAI/Inpaint-Anything&#34;&gt;Website&lt;/a&gt;] [&lt;a href=&#34;https://huggingface.co/InpaintAI&#34;&gt;Hugging Face Homepage&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/MainFramework.png&#34; width=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;TL; DR: Users can select any object in an image by clicking on it. With powerful vision models, e.g., &lt;a href=&#34;https://arxiv.org/abs/2304.02643&#34;&gt;SAM&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2109.07161&#34;&gt;LaMa&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2112.10752&#34;&gt;Stable Diffusion (SD)&lt;/a&gt;, &lt;strong&gt;Inpaint Anything&lt;/strong&gt; is able to remove the object smoothly (i.e., &lt;em&gt;Remove Anything&lt;/em&gt;). Further, prompted by user input text, Inpaint Anything can fill the object with any desired content (i.e., &lt;em&gt;Fill Anything&lt;/em&gt;) or replace the background of it arbitrarily (i.e., &lt;em&gt;Replace Anything&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;📜 News&lt;/h2&gt; &#xA;&lt;p&gt;[2023/4/24] &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/app&#34;&gt;Local web UI&lt;/a&gt; supported! You can run the demo website locally!&lt;br&gt; [2023/4/22] &lt;a href=&#34;https://huggingface.co/spaces/InpaintAI/Inpaint-Anything&#34;&gt;Website&lt;/a&gt; available! You can experience Inpaint Anything through the interface!&lt;br&gt; [2023/4/22] &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/#remove-anything-3d&#34;&gt;Remove Anything 3D&lt;/a&gt; available! You can remove any 3D object from a 3D scene!&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/#remove-anything&#34;&gt;&lt;strong&gt;Remove&lt;/strong&gt; Anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/#fill-anything&#34;&gt;&lt;strong&gt;Fill&lt;/strong&gt; Anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/#replace-anything&#34;&gt;&lt;strong&gt;Replace&lt;/strong&gt; Anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/#remove-anything-3d&#34;&gt;Remove Anything &lt;strong&gt;3D&lt;/strong&gt;&lt;/a&gt; (&lt;span style=&#34;color:red&#34;&gt;🔥NEW&lt;/span&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💡 Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Any aspect ratio supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2K resolution supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://arxiv.org/abs/2304.06790&#34;&gt;Technical report on arXiv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://huggingface.co/spaces/InpaintAI/Inpaint-Anything&#34;&gt;Website&lt;/a&gt; (&lt;span style=&#34;color:red&#34;&gt;🔥NEW&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/app&#34;&gt;Local web UI&lt;/a&gt; supported (&lt;span style=&#34;color:red&#34;&gt;🔥NEW&lt;/span&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ## Updates&#xA;| Date | News |&#xA;| ------ | --------&#xA;| 2023-04-12 | Release the Fill Anything feature | &#xA;| 2023-04-10 | Release the Remove Anything feature |&#xA;| 2023-04-10 | Release the first version of Inpaint Anything | --&gt; &#xA;&lt;h2&gt;&lt;span id=&#34;remove-anything&#34;&gt;📌 Remove Anything&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;!-- &lt;table&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;&lt;img src=&#34;./example/remove-anything/dog/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;    &lt;td&gt;&lt;img src=&#34;./example/remove-anything/dog/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;    &lt;td&gt;&lt;img src=&#34;./example/remove-anything/dog/inpainted_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&lt;/table&gt; --&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/GIF/Remove-dog.gif&#34; alt=&#34;image&#34; style=&#34;width:400px;&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Click&lt;/strong&gt; on an object in the image, and Inpainting Anything will &lt;strong&gt;remove&lt;/strong&gt; it instantly!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on an object;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://segment-anything.com/&#34;&gt;Segment Anything Model&lt;/a&gt; (SAM) segments the object out;&lt;/li&gt; &#xA; &lt;li&gt;Inpainting models (e.g., &lt;a href=&#34;https://advimman.github.io/lama-project/&#34;&gt;LaMa&lt;/a&gt;) fill the &#34;hole&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Requires &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install torch torchvision torchaudio&#xA;python -m pip install -e segment_anything&#xA;python -m pip install -r lama/requirements.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows system, we recommend to first install &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;miniconda&lt;/a&gt; and open &lt;code&gt;Anaconda Powershell Prompt (miniconda3)&lt;/code&gt; as administrator. Then pip install &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/lama_requirements_windows.txt&#34;&gt;./lama_requirements_windows.txt&lt;/a&gt; instead of &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/lama%2Frequirements.txt&#34;&gt;./lama/requirements.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Download the model checkpoints provided in &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/segment_anything/README.md&#34;&gt;segment_anything&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/lama/README.md&#34;&gt;lama&lt;/a&gt; (e.g. &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth&#34;&gt;sam_vit_h_4b8939.pth&lt;/a&gt; and &lt;a href=&#34;https://disk.yandex.ru/d/ouP6l8VJ0HpMZg&#34;&gt;big-lama&lt;/a&gt;), and put them into &lt;code&gt;./pretrained_models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Specify an image and a point, and Inpaint-Anything will remove the object at the point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python remove_anything.py \&#xA;    --input_img ./example/remove-anything/dog.jpg \&#xA;    --coords_type key_in \&#xA;    --point_coords 200 450 \&#xA;    --point_labels 1 \&#xA;    --dilate_kernel_size 15 \&#xA;    --output_dir ./results \&#xA;    --sam_model_type &#34;vit_h&#34; \&#xA;    --sam_ckpt ./pretrained_models/sam_vit_h_4b8939.pth \&#xA;    --lama_config ./lama/configs/prediction/default.yaml \&#xA;    --lama_ckpt ./pretrained_models/big-lama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change &lt;code&gt;--coords_type key_in&lt;/code&gt; to &lt;code&gt;--coords_type click&lt;/code&gt; if your machine has a display device. If &lt;code&gt;click&lt;/code&gt; is set, after running the above command, the image will be displayed. (1) Use &lt;em&gt;left-click&lt;/em&gt; to record the coordinates of the click. It supports modifying points, and only last point coordinates are recorded. (2) Use &lt;em&gt;right-click&lt;/em&gt; to finish the selection.&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/person/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/person/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/person/inpainted_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/bridge/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/bridge/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/bridge/inpainted_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/boat/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/boat/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/boat/inpainted_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/baseball/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/baseball/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything/baseball/inpainted_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;span id=&#34;fill-anything&#34;&gt;📌 Fill Anything&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;!-- &lt;table&gt;&#xA;  &lt;caption align=&#34;center&#34;&gt;Text prompt: &#34;a teddy bear on a bench&#34;&lt;/caption&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;&lt;img src=&#34;./example/fill-anything/sample1/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;      &lt;td&gt;&lt;img src=&#34;./example/fill-anything/sample1/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;      &lt;td&gt;&lt;img src=&#34;./example/fill-anything/sample1/filled_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/table&gt; --&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Text prompt: &#34;a teddy bear on a bench&#34;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/GIF/Fill-sample1.gif&#34; alt=&#34;image&#34; style=&#34;width:400px;&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Click&lt;/strong&gt; on an object, &lt;strong&gt;type&lt;/strong&gt; in what you want to fill, and Inpaint Anything will &lt;strong&gt;fill&lt;/strong&gt; it!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on an object;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://segment-anything.com/&#34;&gt;SAM&lt;/a&gt; segments the object out;&lt;/li&gt; &#xA; &lt;li&gt;Input a text prompt;&lt;/li&gt; &#xA; &lt;li&gt;Text-prompt-guided inpainting models (e.g., &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;) fill the &#34;hole&#34; according to the text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Requires &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install torch torchvision torchaudio&#xA;python -m pip install -e segment_anything&#xA;python -m pip install diffusers transformers accelerate scipy safetensors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Download the model checkpoints provided in &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/segment_anything/README.md&#34;&gt;segment_anything&lt;/a&gt; (e.g. &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth&#34;&gt;sam_vit_h_4b8939.pth&lt;/a&gt;). , and put them into &lt;code&gt;./pretrained_models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Specify an image, a point and text prompt, and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python fill_anything.py \&#xA;    --input_img ./example/fill-anything/sample1.png \&#xA;    --coords_type key_in \&#xA;    --point_coords 750 500 \&#xA;    --point_labels 1 \&#xA;    --text_prompt &#34;a teddy bear on a bench&#34; \&#xA;    --dilate_kernel_size 50 \&#xA;    --output_dir ./results \&#xA;    --sam_model_type &#34;vit_h&#34; \&#xA;    --sam_ckpt ./pretrained_models/sam_vit_h_4b8939.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;a camera lens in the hand&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample2/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample2/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample2/filled_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;a Picasso painting on the wall&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample5/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample5/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample5/filled_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;an aircraft carrier on the sea&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample3/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample3/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample3/filled_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;a sports car on a road&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample4/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample4/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/fill-anything/sample4/filled_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;span id=&#34;replace-anything&#34;&gt;📌 Replace Anything&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;!-- &lt;table&gt;&#xA;  &lt;caption align=&#34;center&#34;&gt;Text prompt: &#34;a man in office&#34;&lt;/caption&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;&lt;img src=&#34;./example/replace-anything/man/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;      &lt;td&gt;&lt;img src=&#34;./example/replace-anything/man/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;      &lt;td&gt;&lt;img src=&#34;./example/replace-anything/man/replaced_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/table&gt; --&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Text prompt: &#34;a man in office&#34;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/GIF/Replace-man.gif&#34; alt=&#34;image&#34; style=&#34;width:400px;&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Click&lt;/strong&gt; on an object, &lt;strong&gt;type&lt;/strong&gt; in what background you want to replace, and Inpaint Anything will &lt;strong&gt;replace&lt;/strong&gt; it!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on an object;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://segment-anything.com/&#34;&gt;SAM&lt;/a&gt; segments the object out;&lt;/li&gt; &#xA; &lt;li&gt;Input a text prompt;&lt;/li&gt; &#xA; &lt;li&gt;Text-prompt-guided inpainting models (e.g., &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;) replace the background according to the text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Requires &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install torch torchvision torchaudio&#xA;python -m pip install -e segment_anything&#xA;python -m pip install diffusers transformers accelerate scipy safetensors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Download the model checkpoints provided in &lt;a href=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/segment_anything/README.md&#34;&gt;segment_anything&lt;/a&gt; (e.g. &lt;a href=&#34;https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth&#34;&gt;sam_vit_h_4b8939.pth&lt;/a&gt;) , and put them into &lt;code&gt;./pretrained_models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Specify an image, a point and text prompt, and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python replace_anything.py \&#xA;    --input_img ./example/replace-anything/dog.png \&#xA;    --coords_type key_in \&#xA;    --point_coords 750 500 \&#xA;    --point_labels 1 \&#xA;    --text_prompt &#34;sit on the swing&#34; \&#xA;    --output_dir ./results \&#xA;    --sam_model_type &#34;vit_h&#34; \&#xA;    --sam_ckpt ./pretrained_models/sam_vit_h_4b8939.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;sit on the swing&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/dog/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/dog/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/dog/replaced_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;a bus, on the center of a country road, summer&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/bus/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/bus/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/bus/replaced_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;breakfast&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/000000029675/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/000000029675/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/000000029675/replaced_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;caption align=&#34;center&#34;&gt;&#xA;  Text prompt: &#34;crossroad in the city&#34;&#xA; &lt;/caption&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/000000000724/with_points.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/000000000724/with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/replace-anything/000000000724/replaced_with_mask.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;span id=&#34;remove-anything-3d&#34;&gt;📌 Remove Anything 3D&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Remove Anything 3D can remove any object from a 3D scene! We release some results below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything-3d/horns/org.gif&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything-3d/horns/mask.gif&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything-3d/horns/result.gif&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything-3d/room/org.gif&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything-3d/room/mask.gif&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/geekyutao/Inpaint-Anything/main/example/remove-anything-3d/room/result.gif&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;Segment Anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/advimman/lama&#34;&gt;LaMa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Interesting Repositories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VainF/Awesome-Anything&#34;&gt;Awesome Anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Adamdad/Awesome-ComposableAI&#34;&gt;Composable AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/Grounded-Segment-Anything&#34;&gt;Grounded SAM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this work useful for your research, please cite us:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{yu2023inpaint,&#xA;  title={Inpaint Anything: Segment Anything Meets Image Inpainting},&#xA;  author={Yu, Tao and Feng, Runseng and Feng, Ruoyu and Liu, Jinming and Jin, Xin and Zeng, Wenjun and Chen, Zhibo},&#xA;  journal={arXiv preprint arXiv:2304.06790},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://star-history.com/#geekyutao/Inpaint-Anything&amp;amp;Date&#34;&gt; &lt;img src=&#34;https://api.star-history.com/svg?repos=geekyutao/Inpaint-Anything&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>suno-ai/bark</title>
    <updated>2023-04-30T01:49:55Z</updated>
    <id>tag:github.com,2023-04-30:/suno-ai/bark</id>
    <link href="https://github.com/suno-ai/bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔊 Text-Prompted Generative Audio Model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐶 Bark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/OnusFM.svg?style=social&amp;amp;label=@OnusFM&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE?compact=true&amp;amp;style=flat&amp;amp;&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://suno-ai.notion.site/Bark-Examples-5edae8b02a604b54a42244ba45ebc2e2&#34;&gt;Examples&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/model-card.md&#34;&gt;Model Card&lt;/a&gt; | &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;Playground Waitlist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bark is a transformer-based text-to-audio model created by &lt;a href=&#34;https://suno.ai&#34;&gt;Suno&lt;/a&gt;. Bark can generate highly realistic, multilingual speech as well as other audio - including music, background noise and simple sound effects. The model can also produce nonverbal communications like laughing, sighing and crying. To support the research community, we are providing access to pretrained model checkpoints ready for inference.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5068315/230698495-cbb1ced9-c911-4c9a-941d-a1a4a1286ac6.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🔊 Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/suno/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Open%20In%20Spaces-blue.svg?sanitize=true&#34; alt=&#34;Open in Spaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤖 Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bark import SAMPLE_RATE, generate_audio, preload_models&#xA;from IPython.display import Audio&#xA;&#xA;# download and load all models&#xA;preload_models()&#xA;&#xA;# generate audio from text&#xA;text_prompt = &#34;&#34;&#34;&#xA;     Hello, my name is Suno. And, uh — and I like pizza. [laughs] &#xA;     But I also have other interests such as playing tic tac toe.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&#xA;# play text in notebook&#xA;Audio(audio_array, rate=SAMPLE_RATE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230490503-417e688d-5115-4eee-9550-b46a2b465ee3.webm&#34;&gt;pizza.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To save &lt;code&gt;audio_array&lt;/code&gt; as a WAV file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy.io.wavfile import write as write_wav&#xA;&#xA;write_wav(&#34;/path/to/audio.wav&#34;, SAMPLE_RATE, audio_array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🌎 Foreign Language&lt;/h3&gt; &#xA;&lt;p&gt;Bark supports various languages out-of-the-box and automatically determines language from input text. When prompted with code-switched text, Bark will attempt to employ the native accent for the respective languages. English quality is best for the time being, and we expect other languages to further improve with scaling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    Buenos días Miguel. Tu colega piensa que tu alemán es extremadamente malo. &#xA;    But I suppose your english isn&#39;t terrible.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684752-10baadfe-1e7c-46a2-8323-43282aef2c8c.webm&#34;&gt;miguel.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🎶 Music&lt;/h3&gt; &#xA;&lt;p&gt;Bark can generate all types of audio, and, in principle, doesn&#39;t see a difference between speech and music. Sometimes Bark chooses to generate text as music, but you can help it out by adding music notes around your lyrics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    ♪ In the jungle, the mighty jungle, the lion barks tonight ♪&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684766-97f5ea23-ad99-473c-924b-66b6fab24289.webm&#34;&gt;lion.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🎤 Voice Presets and Voice/Audio Cloning&lt;/h3&gt; &#xA;&lt;p&gt;Bark has the capability to fully clone voices - including tone, pitch, emotion and prosody. The model also attempts to preserve music, ambient noise, etc. from input audio. However, to mitigate misuse of this technology, we limit the audio history prompts to a limited set of Suno-provided, fully synthetic options to choose from for each language. Specify following the pattern: &lt;code&gt;{lang_code}_speaker_{0-9}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    I have a silky smooth voice, and today I will tell you about &#xA;    the exercise regimen of the common sloth.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt, history_prompt=&#34;en_speaker_1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684883-a344c619-a560-4ff5-8b99-b4463a34487b.webm&#34;&gt;sloth.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: since Bark recognizes languages automatically from input text, it is possible to use for example a german history prompt with english text. This usually leads to english audio with a german accent.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;👥 Speaker Prompts&lt;/h3&gt; &#xA;&lt;p&gt;You can provide certain speaker prompts such as NARRATOR, MAN, WOMAN, etc. Please note that these are not always respected, especially if a conflicting audio history prompt is given.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    WOMAN: I would like an oatmilk latte please.&#xA;    MAN: Wow, that&#39;s expensive!&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684864-12d101a1-a726-471d-9d56-d18b108efcb8.webm&#34;&gt;latte.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💻 Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/suno-ai/bark.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/suno-ai/bark&#xA;cd bark &amp;amp;&amp;amp; pip install . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🛠️ Hardware and Inference Speed&lt;/h2&gt; &#xA;&lt;p&gt;Bark has been tested and works on both CPU and GPU (&lt;code&gt;pytorch 2.0+&lt;/code&gt;, CUDA 11.7 and CUDA 12.0). Running Bark requires running &amp;gt;100M parameter transformer models. On modern GPUs and PyTorch nightly, Bark can generate audio in roughly realtime. On older GPUs, default colab, or CPU, inference time might be 10-100x slower.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have new hardware available or if you want to play with bigger versions of our models, you can also sign up for early access to our model playground &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Details&lt;/h2&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt; and some other amazing work in the field, Bark uses GPT-style models to generate audio from scratch. Different from Vall-E, the initial text prompt is embedded into high-level semantic tokens without the use of phonemes. It can therefore generalize to arbitrary instructions beyond speech that occur in the training data, such as music lyrics, sound effects or other non-speech sounds. A subsequent second model is used to convert the generated semantic tokens into audio codec tokens to generate the full waveform. To enable the community to use Bark via public code we used the fantastic &lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec codec&lt;/a&gt; from Facebook to act as an audio representation.&lt;/p&gt; &#xA;&lt;p&gt;Below is a list of some known non-speech sounds, but we are finding more every day. Please let us know if you find patterns that work particularly well on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughter]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[sighs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[music]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[gasps]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[clears throat]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;—&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt; for hesitations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;♪&lt;/code&gt; for song lyrics&lt;/li&gt; &#xA; &lt;li&gt;capitalization for emphasis of a word&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAN/WOMAN:&lt;/code&gt; for bias towards speaker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Languages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (en)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German (de)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish (es)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French (fr)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi (hi)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian (it)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese (ja)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean (ko)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish (pl)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese (pt)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian (ru)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish (tr)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese, simplified (zh)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arabic&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bengali&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Telugu&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🙏 Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karpathy/nanoGPT&#34;&gt;nanoGPT&lt;/a&gt; for a dead-simple and blazing fast implementation of GPT-style models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt; for a state-of-the-art implementation of a fantastic audio codec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains/audiolm-pytorch&#34;&gt;AudioLM&lt;/a&gt; for very related training and inference code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and many other ground-breaking papers that enabled the development of Bark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;© License&lt;/h2&gt; &#xA;&lt;p&gt;Bark is licensed under a non-commercial license: CC-BY 4.0 NC. The Suno models themselves may be used commercially. However, this version of Bark uses &lt;code&gt;EnCodec&lt;/code&gt; as a neural codec backend, which is licensed under a &lt;a href=&#34;https://github.com/facebookresearch/encodec/raw/main/LICENSE&#34;&gt;non-commercial license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please contact us at &lt;code&gt;bark@suno.ai&lt;/code&gt; if you need access to a larger version of the model and/or a version of the model you can use commercially.&lt;/p&gt; &#xA;&lt;h2&gt;📱&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎧&amp;nbsp;Suno Studio (Early Access)&lt;/h2&gt; &#xA;&lt;p&gt;We’re developing a playground for our models, including Bark.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested, you can sign up for early access &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How do I specify where models are downloaded and cached?&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;XDG_CACHE_HOME&lt;/code&gt; env variable to override where models are downloaded and cached (otherwise defaults to a subdirectory of &lt;code&gt;~/.cache&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Bark&#39;s generations sometimes differ from my prompts. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;p&gt;Bark is a GPT-style model. As such, it may take some creative liberties in its generations, resulting in higher-variance model outputs than traditional text-to-speech approaches.&lt;/p&gt;</summary>
  </entry>
</feed>