<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:39:41Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>invoke-ai/InvokeAI</title>
    <updated>2022-12-11T01:39:41Z</updated>
    <id>tag:github.com,2022-12-11:/invoke-ai/InvokeAI</id>
    <link href="https://github.com/invoke-ai/InvokeAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This version of Stable Diffusion features a slick WebGUI, an interactive command-line script that combines text2img and img2img functionality in a &#34;dream bot&#34; style interface, and multiple features and other enhancements. For more info, see the website link below.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/docs/assets/invoke_ai_banner.png&#34; alt=&#34;project logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;InvokeAI: A Stable Diffusion Toolkit&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/ZmtBAhwWhy&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/discord/members/ZmtBAhwWhy?icon=discord&#34; alt=&#34;discord badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/releases&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/release/invoke-ai/InvokeAI/development?icon=github&#34; alt=&#34;latest release badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/stargazers&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/stars/invoke-ai/InvokeAI?icon=github&#34; alt=&#34;github stars badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://useful-forks.github.io/?repo=invoke-ai%2FInvokeAI&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/forks/invoke-ai/InvokeAI?icon=github&#34; alt=&#34;github forks badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/actions/workflows/test-invoke-conda.yml&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/checks/invoke-ai/InvokeAI/main?label=CI%20status%20on%20main&amp;amp;cache=900&amp;amp;icon=github&#34; alt=&#34;CI checks on main badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/actions?query=branch%3Adevelopment&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/checks/invoke-ai/InvokeAI/development?label=CI%20status%20on%20dev&amp;amp;cache=900&amp;amp;icon=github&#34; alt=&#34;CI checks on dev badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/commits/development&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/last-commit/invoke-ai/InvokeAI/development?icon=github&amp;amp;color=yellow&amp;amp;label=last%20dev%20commit&amp;amp;cache=900&#34; alt=&#34;latest commit to dev badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/issues?q=is%3Aissue+is%3Aopen&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/open-issues/invoke-ai/InvokeAI?icon=github&#34; alt=&#34;github open issues badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/pulls?q=is%3Apr+is%3Aopen&#34;&gt;&lt;img src=&#34;https://flat.badgen.net/github/open-prs/invoke-ai/InvokeAI?icon=github&#34; alt=&#34;github open prs badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This is a fork of &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;CompVis/stable-diffusion&lt;/a&gt;, the open source text-to-image generator. It provides a streamlined process with various new features and options to aid the image generation process. It runs on Windows, macOS and Linux machines, with GPU cards with as little as 4 GB of RAM. It provides both a polished Web interface (see below), and an easy-to-use command-line interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick links&lt;/strong&gt;: [&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#installation&#34;&gt;How to Install&lt;/a&gt;] [&lt;a href=&#34;https://discord.gg/ZmtBAhwWhy&#34;&gt;Discord Server&lt;/a&gt;] [&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/&#34;&gt;Documentation and Tutorials&lt;/a&gt;] [&lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/&#34;&gt;Code and Downloads&lt;/a&gt;] [&lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/issues&#34;&gt;Bug Reports&lt;/a&gt;] [&lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/discussions&#34;&gt;Discussion, Ideas &amp;amp; Q&amp;amp;A&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: InvokeAI is rapidly evolving. Please use the &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/issues&#34;&gt;Issues&lt;/a&gt; tab to report bugs and make feature requests. Be sure to use the provided templates. They will help us diagnose issues faster.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started with InvokeAI&lt;/h1&gt; &#xA;&lt;p&gt;For full installation and upgrade instructions, please see: &lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/installation/&#34;&gt;InvokeAI Installation Overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the bottom of the &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/releases/tag/v2.2.3&#34;&gt;Latest Release Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the .zip file for your OS (Windows/macOS/Linux).&lt;/li&gt; &#xA; &lt;li&gt;Unzip the file.&lt;/li&gt; &#xA; &lt;li&gt;If you are on Windows, double-click on the &lt;code&gt;install.bat&lt;/code&gt; script. On macOS, open a Terminal window, drag the file &lt;code&gt;install.sh&lt;/code&gt; from Finder into the Terminal, and press return. On Linux, run &lt;code&gt;install.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Wait a while, until it is done.&lt;/li&gt; &#xA; &lt;li&gt;The folder where you ran the installer from will now be filled with lots of files. If you are on Windows, double-click on the &lt;code&gt;invoke.bat&lt;/code&gt; file. On macOS, open a Terminal window, drag &lt;code&gt;invoke.sh&lt;/code&gt; from the folder into the Terminal, and press return. On Linux, run &lt;code&gt;invoke.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Press 2 to open the &#34;browser-based UI&#34;, press enter/return, wait a minute or two for Stable Diffusion to start up, then open your browser and go to &lt;a href=&#34;http://localhost:9090&#34;&gt;http://localhost:9090&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;banana sushi&lt;/code&gt; in the box on the top left and click &lt;code&gt;Invoke&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/docs/assets/invoke-web-server-1.png&#34; width=&#34;640&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#hardware-requirements&#34;&gt;Hardware Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#latest-changes&#34;&gt;Latest Changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/invoke-ai/InvokeAI/main/#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;This fork is supported across Linux, Windows and Macintosh. Linux users can use either an Nvidia-based card (with CUDA support) or an AMD card (using the ROCm driver). For full installation and upgrade instructions, please see: &lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/installation/INSTALL_SOURCE/&#34;&gt;InvokeAI Installation Overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hardware Requirements&lt;/h3&gt; &#xA;&lt;p&gt;InvokeAI is supported across Linux, Windows and macOS. Linux users can use either an Nvidia-based card (with CUDA support) or an AMD card (using the ROCm driver).&lt;/p&gt; &#xA;&lt;h4&gt;System&lt;/h4&gt; &#xA;&lt;p&gt;You wil need one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An NVIDIA-based graphics card with 4 GB or more VRAM memory.&lt;/li&gt; &#xA; &lt;li&gt;An Apple computer with an M1 chip.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We do not recommend the GTX 1650 or 1660 series video cards. They are unable to run in half-precision mode and do not have sufficient VRAM to render 512x512 images.&lt;/p&gt; &#xA;&lt;h4&gt;Memory&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At least 12 GB Main Memory RAM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Disk&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At least 12 GB of free disk space for the machine learning model, Python, and all its dependencies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a Nvidia 10xx series card (e.g. the 1080ti), please run the dream script in full-precision mode as shown below.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, specify full-precision mode on Apple M1 hardware.&lt;/p&gt; &#xA;&lt;p&gt;Precision is auto configured based on the device. If however you encounter errors like &#39;expected type Float but found Half&#39; or &#39;not implemented for Half&#39; you can try starting &lt;code&gt;invoke.py&lt;/code&gt; with the &lt;code&gt;--precision=float32&lt;/code&gt; flag to your initialization command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(invokeai) ~/InvokeAI$ python scripts/invoke.py --precision=float32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by updating your InvokeAI configuration file with this argument.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;h4&gt;Major Features&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/WEB/&#34;&gt;Web Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/CLI/&#34;&gt;Interactive Command Line Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/IMG2IMG/&#34;&gt;Image To Image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/INPAINTING/&#34;&gt;Inpainting Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OUTPAINTING/&#34;&gt;Outpainting Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/POSTPROCESS/&#34;&gt;Upscaling, face-restoration and outpainting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/PROMPTS/#reading-prompts-from-a-file&#34;&gt;Reading Prompts From File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/PROMPTS/#prompt-blending&#34;&gt;Prompt Blending&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OTHER/#thresholding-and-perlin-noise-initialization-options&#34;&gt;Thresholding and Perlin Noise Initialization Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/PROMPTS/#negative-and-unconditioned-prompts&#34;&gt;Negative/Unconditioned Prompts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/VARIATIONS/&#34;&gt;Variations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/TEXTUAL_INVERSION/&#34;&gt;Personalizing Text-to-Image Generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OTHER/#simplified-api&#34;&gt;Simplified API for text to image generation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other Features&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OTHER/#google-colab&#34;&gt;Google Colab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OTHER/#seamless-tiling&#34;&gt;Seamless Tiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OTHER/#shortcuts-reusing-seeds&#34;&gt;Shortcut: Reusing Seeds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/features/OTHER/#preload-models&#34;&gt;Preload Models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Latest Changes&lt;/h3&gt; &#xA;&lt;p&gt;For our latest changes, view our &lt;a href=&#34;https://github.com/invoke-ai/InvokeAI/releases&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;Please check out our &lt;strong&gt;&lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/help/TROUBLESHOOT/#faq&#34;&gt;Q&amp;amp;A&lt;/a&gt;&lt;/strong&gt; to get solutions for common installation problems and other issues.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so.&lt;/p&gt; &#xA;&lt;p&gt;To join, just raise your hand on the InvokeAI Discord server (#dev-chat) or the GitHub discussion board.&lt;/p&gt; &#xA;&lt;p&gt;If you are unfamiliar with how to contribute to GitHub projects, here is a &lt;a href=&#34;https://opensource.com/article/19/7/create-pull-request-github&#34;&gt;Getting Started Guide&lt;/a&gt;. A full set of contribution guidelines, along with templates, are in progress, but for now the most important thing is to &lt;strong&gt;make your pull request against the &#34;development&#34; branch&lt;/strong&gt;, and not against &#34;main&#34;. This will help keep public breakage to a minimum and will allow you to propose more radical changes.&lt;/p&gt; &#xA;&lt;p&gt;We hope you enjoy using our software as much as we enjoy creating it, and we hope that some of those of you who are reading this will elect to become part of our community.&lt;/p&gt; &#xA;&lt;p&gt;Welcome to InvokeAI!&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This fork is a combined effort of various people from across the world. &lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/other/CONTRIBUTORS/&#34;&gt;Check out the list of all these amazing people&lt;/a&gt;. We thank them for their time, hard work and effort.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;For support, please use this repository&#39;s GitHub Issues tracking service. Feel free to send me an email if you use and like the script.&lt;/p&gt; &#xA;&lt;p&gt;Original portions of the software are Copyright (c) 2020 &lt;a href=&#34;https://github.com/lstein&#34;&gt;Lincoln D. Stein&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Further Reading&lt;/h3&gt; &#xA;&lt;p&gt;Please see the original README for more information on this software and underlying algorithm, located in the file &lt;a href=&#34;https://invoke-ai.github.io/InvokeAI/other/README-CompViz/&#34;&gt;README-CompViz.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ggerganov/whisper.cpp</title>
    <updated>2022-12-11T01:39:41Z</updated>
    <id>tag:github.com,2022-12-11:/ggerganov/whisper.cpp</id>
    <link href="https://github.com/ggerganov/whisper.cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Port of OpenAI&#39;s Whisper model in C/C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whisper.cpp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/actions&#34;&gt;&lt;img src=&#34;https://github.com/ggerganov/whisper.cpp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;High-performance inference of &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;OpenAI&#39;s Whisper&lt;/a&gt; automatic speech recognition (ASR) model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plain C/C++ implementation without dependencies&lt;/li&gt; &#xA; &lt;li&gt;Apple silicon first-class citizen - optimized via Arm Neon and Accelerate framework&lt;/li&gt; &#xA; &lt;li&gt;AVX intrinsics support for x86 architectures&lt;/li&gt; &#xA; &lt;li&gt;Mixed F16 / F32 precision&lt;/li&gt; &#xA; &lt;li&gt;Low memory usage (Flash Attention + Flash Forward)&lt;/li&gt; &#xA; &lt;li&gt;Zero memory allocations at runtime&lt;/li&gt; &#xA; &lt;li&gt;Runs on the CPU&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/raw/master/whisper.h&#34;&gt;C-style API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mac OS (Intel and Arm)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/whisper.objc&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/whisper.wasm&#34;&gt;WebAssembly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows (&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/raw/master/.github/workflows/build.yml#L117-L144&#34;&gt;MSVC&lt;/a&gt; and &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/issues/168&#34;&gt;MinGW&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/discussions/166&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/issues/30&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The entire implementation of the model is contained in 2 source files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tensor operations: &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/ggml.h&#34;&gt;ggml.h&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/ggml.c&#34;&gt;ggml.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Transformer inference: &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/whisper.h&#34;&gt;whisper.h&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Having such a lightweight implementation of the model allows to easily integrate it in different platforms and applications. As an example, here is a video of running the model on an iPhone 13 device - fully offline, on-device: &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/whisper.objc&#34;&gt;whisper.objc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/197385372-962a6dea-bca1-4d50-bf96-1d8c27b98c81.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/197385372-962a6dea-bca1-4d50-bf96-1d8c27b98c81.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also easily make your own offline voice assistant application: &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/command&#34;&gt;command&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/204038393-2f846eae-c255-4099-a76d-5735c25c49da.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/204038393-2f846eae-c255-4099-a76d-5735c25c49da.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can even run it straight in the browser: &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/talk.wasm&#34;&gt;talk.wasm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation details&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The core tensor operations are implemented in C (&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/ggml.h&#34;&gt;ggml.h&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/ggml.c&#34;&gt;ggml.c&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The transformer model and the high-level C-style API are implemented in C++ (&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/whisper.h&#34;&gt;whisper.h&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/whisper.cpp&#34;&gt;whisper.cpp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sample usage is demonstrated in &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/main&#34;&gt;main.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sample real-time audio transcription from the microphone is demonstrated in &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/stream&#34;&gt;stream.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Various other examples are available in the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples&#34;&gt;examples&lt;/a&gt; folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tensor operators are optimized heavily for Apple silicon CPUs. Depending on the computation size, Arm Neon SIMD instrisics or CBLAS Accelerate framework routines are used. The latter are especially effective for bigger sizes since the Accelerate framework utilizes the special-purpose AMX coprocessor available in modern Apple products.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;First, download one of the Whisper models converted in &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/models&#34;&gt;ggml format&lt;/a&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash ./models/download-ggml-model.sh base.en&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now build the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/main&#34;&gt;main&lt;/a&gt; example and transcribe an audio file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build the main example&#xA;make&#xA;&#xA;# transcribe an audio file&#xA;./main -f input.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For a quick demo, simply run &lt;code&gt;make base.en&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;$ make base.en&#xA;&#xA;cc  -I.              -O3 -std=c11   -pthread -DGGML_USE_ACCELERATE   -c ggml.c -o ggml.o&#xA;c++ -I. -I./examples -O3 -std=c++11 -pthread -c whisper.cpp -o whisper.o&#xA;c++ -I. -I./examples -O3 -std=c++11 -pthread examples/main/main.cpp whisper.o ggml.o -o main  -framework Accelerate&#xA;./main -h&#xA;&#xA;usage: ./main [options] file0.wav file1.wav ...&#xA;&#xA;options:&#xA;  -h,       --help          [default] show this help message and exit&#xA;  -t N,     --threads N     [4      ] number of threads to use during computation&#xA;  -p N,     --processors N  [1      ] number of processors to use during computation&#xA;  -ot N,    --offset-t N    [0      ] time offset in milliseconds&#xA;  -on N,    --offset-n N    [0      ] segment index offset&#xA;  -d  N,    --duration N    [0      ] duration of audio to process in milliseconds&#xA;  -mc N,    --max-context N [-1     ] maximum number of text context tokens to store&#xA;  -ml N,    --max-len N     [0      ] maximum segment length in characters&#xA;  -wt N,    --word-thold N  [0.01   ] word timestamp probability threshold&#xA;  -su,      --speed-up      [false  ] speed up audio by x2 (reduced accuracy)&#xA;  -tr,      --translate     [false  ] translate from source language to english&#xA;  -otxt,    --output-txt    [false  ] output result in a text file&#xA;  -ovtt,    --output-vtt    [false  ] output result in a vtt file&#xA;  -osrt,    --output-srt    [false  ] output result in a srt file&#xA;  -owts,    --output-words  [false  ] output script for generating karaoke video&#xA;  -ps,      --print-special [false  ] print special tokens&#xA;  -pc,      --print-colors  [false  ] print colors&#xA;  -nt,      --no-timestamps [true   ] do not print timestamps&#xA;  -l LANG,  --language LANG [en     ] spoken language&#xA;  -m FNAME, --model FNAME   [models/ggml-base.en.bin] model path&#xA;  -f FNAME, --file FNAME    [       ] input WAV file path&#xA;&#xA;bash ./models/download-ggml-model.sh base.en&#xA;Downloading ggml model base.en ...&#xA;ggml-base.en.bin               100%[========================&amp;gt;] 141.11M  6.34MB/s    in 24s&#xA;Done! Model &#39;base.en&#39; saved in &#39;models/ggml-base.en.bin&#39;&#xA;You can now use it like this:&#xA;&#xA;  $ ./main -m models/ggml-base.en.bin -f samples/jfk.wav&#xA;&#xA;&#xA;===============================================&#xA;Running base.en on all samples in ./samples ...&#xA;===============================================&#xA;&#xA;----------------------------------------------&#xA;[+] Running base.en on samples/jfk.wav ... (run &#39;ffplay samples/jfk.wav&#39; to listen)&#xA;----------------------------------------------&#xA;&#xA;whisper_model_load: loading model from &#39;models/ggml-base.en.bin&#39;&#xA;whisper_model_load: n_vocab       = 51864&#xA;whisper_model_load: n_audio_ctx   = 1500&#xA;whisper_model_load: n_audio_state = 512&#xA;whisper_model_load: n_audio_head  = 8&#xA;whisper_model_load: n_audio_layer = 6&#xA;whisper_model_load: n_text_ctx    = 448&#xA;whisper_model_load: n_text_state  = 512&#xA;whisper_model_load: n_text_head   = 8&#xA;whisper_model_load: n_text_layer  = 6&#xA;whisper_model_load: n_mels        = 80&#xA;whisper_model_load: f16           = 1&#xA;whisper_model_load: type          = 2&#xA;whisper_model_load: adding 1607 extra tokens&#xA;whisper_model_load: mem_required  =  506.00 MB&#xA;whisper_model_load: ggml ctx size =  140.60 MB&#xA;whisper_model_load: memory size   =   22.83 MB&#xA;whisper_model_load: model size    =  140.54 MB&#xA;&#xA;system_info: n_threads = 4 / 10 | AVX = 0 | AVX2 = 0 | AVX512 = 0 | NEON = 1 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 |&#xA;&#xA;main: processing &#39;samples/jfk.wav&#39; (176000 samples, 11.0 sec), 4 threads, 1 processors, lang = en, task = transcribe, timestamps = 1 ...&#xA;&#xA;&#xA;[00:00:00.000 --&amp;gt; 00:00:11.000]   And so my fellow Americans, ask not what your country can do for you, ask what you can do for your country.&#xA;&#xA;&#xA;whisper_print_timings:     load time =   105.91 ms&#xA;whisper_print_timings:      mel time =    24.62 ms&#xA;whisper_print_timings:   sample time =     3.63 ms&#xA;whisper_print_timings:   encode time =   324.71 ms / 54.12 ms per layer&#xA;whisper_print_timings:   decode time =    83.58 ms / 13.93 ms per layer&#xA;whisper_print_timings:    total time =   542.81 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command downloads the &lt;code&gt;base.en&lt;/code&gt; model converted to custom &lt;code&gt;ggml&lt;/code&gt; format and runs the inference on all &lt;code&gt;.wav&lt;/code&gt; samples in the folder &lt;code&gt;samples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For detailed usage instructions, run: &lt;code&gt;./main -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/main&#34;&gt;main&lt;/a&gt; example currently runs only with 16-bit WAV files, so make sure to convert your input before running the tool. For example, you can use &lt;code&gt;ffmpeg&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ffmpeg -i input.mp3 -ar 16000 -ac 1 -c:a pcm_s16le output.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More audio samples&lt;/h2&gt; &#xA;&lt;p&gt;If you want some extra audio samples to play with, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make samples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download a few more audio files from Wikipedia and convert them to 16-bit WAV format via &lt;code&gt;ffmpeg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can download and run the other models as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make tiny.en&#xA;make tiny&#xA;make base.en&#xA;make base&#xA;make small.en&#xA;make small&#xA;make medium.en&#xA;make medium&#xA;make large-v1&#xA;make large&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Disk&lt;/th&gt; &#xA;   &lt;th&gt;Mem&lt;/th&gt; &#xA;   &lt;th&gt;SHA&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tiny&lt;/td&gt; &#xA;   &lt;td&gt;75 MB&lt;/td&gt; &#xA;   &lt;td&gt;~390 MB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bd577a113a864445d4c299885e0cb97d4ba92b5f&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base&lt;/td&gt; &#xA;   &lt;td&gt;142 MB&lt;/td&gt; &#xA;   &lt;td&gt;~500 MB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;465707469ff3a37a2b9b8d8f89f2f99de7299dac&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;small&lt;/td&gt; &#xA;   &lt;td&gt;466 MB&lt;/td&gt; &#xA;   &lt;td&gt;~1.0 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;55356645c2b361a969dfd0ef2c5a50d530afd8d5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;medium&lt;/td&gt; &#xA;   &lt;td&gt;1.5 GB&lt;/td&gt; &#xA;   &lt;td&gt;~2.6 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fd9727b6e1217c2f614f9b698455c4ffd82463b4&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;large&lt;/td&gt; &#xA;   &lt;td&gt;2.9 GB&lt;/td&gt; &#xA;   &lt;td&gt;~4.7 GB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0f4c8e34f21cf1a914c59d8b3ce882345ad349d6&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Inference only&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No GPU support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Very basic greedy sampling scheme - always pick up the token with highest probability. This should be similar to the &lt;a href=&#34;https://github.com/openai/whisper/raw/main/whisper/decoding.py#L249-L274&#34;&gt;GreedyDecoder&lt;/a&gt; from the original python implementation, so in order to make a fair comparison between the 2 implementations, make sure to run the python code with the following parameters:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;whisper --best_of None --beam_size None ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the future, &lt;code&gt;whisper.cpp&lt;/code&gt; will support more sampling strategies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Another example&lt;/h2&gt; &#xA;&lt;p&gt;Here is another example of transcribing a &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/1/1f/George_W_Bush_Columbia_FINAL.ogg&#34;&gt;3:24 min speech&lt;/a&gt; in about half a minute on a MacBook M1 Pro, using &lt;code&gt;medium.en&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand to see the result&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;$ ./main -m models/ggml-medium.en.bin -f samples/gb1.wav -t 8&#xA;&#xA;whisper_model_load: loading model from &#39;models/ggml-medium.en.bin&#39;&#xA;whisper_model_load: n_vocab       = 51864&#xA;whisper_model_load: n_audio_ctx   = 1500&#xA;whisper_model_load: n_audio_state = 1024&#xA;whisper_model_load: n_audio_head  = 16&#xA;whisper_model_load: n_audio_layer = 24&#xA;whisper_model_load: n_text_ctx    = 448&#xA;whisper_model_load: n_text_state  = 1024&#xA;whisper_model_load: n_text_head   = 16&#xA;whisper_model_load: n_text_layer  = 24&#xA;whisper_model_load: n_mels        = 80&#xA;whisper_model_load: f16           = 1&#xA;whisper_model_load: type          = 4&#xA;whisper_model_load: mem_required  = 2610.00 MB&#xA;whisper_model_load: adding 1607 extra tokens&#xA;whisper_model_load: ggml ctx size = 1644.97 MB&#xA;whisper_model_load: memory size =   182.62 MB&#xA;whisper_model_load: model size  =  1462.12 MB&#xA;&#xA;main: processing &#39;samples/gb1.wav&#39; (3179750 samples, 198.7 sec), 8 threads, lang = en, task = transcribe, timestamps = 1 ...&#xA;&#xA;[00:00.000 --&amp;gt; 00:08.000]   My fellow Americans, this day has brought terrible news and great sadness to our country.&#xA;[00:08.000 --&amp;gt; 00:17.000]   At nine o&#39;clock this morning, Mission Control in Houston lost contact with our Space Shuttle Columbia.&#xA;[00:17.000 --&amp;gt; 00:23.000]   A short time later, debris was seen falling from the skies above Texas.&#xA;[00:23.000 --&amp;gt; 00:29.000]   The Columbia&#39;s lost. There are no survivors.&#xA;[00:29.000 --&amp;gt; 00:32.000]   On board was a crew of seven.&#xA;[00:32.000 --&amp;gt; 00:39.000]   Colonel Rick Husband, Lieutenant Colonel Michael Anderson, Commander Laurel Clark,&#xA;[00:39.000 --&amp;gt; 00:48.000]   Captain David Brown, Commander William McCool, Dr. Kultna Shavla, and Ilan Ramon,&#xA;[00:48.000 --&amp;gt; 00:52.000]   a colonel in the Israeli Air Force.&#xA;[00:52.000 --&amp;gt; 00:58.000]   These men and women assumed great risk in the service to all humanity.&#xA;[00:58.000 --&amp;gt; 01:03.000]   In an age when space flight has come to seem almost routine,&#xA;[01:03.000 --&amp;gt; 01:07.000]   it is easy to overlook the dangers of travel by rocket&#xA;[01:07.000 --&amp;gt; 01:12.000]   and the difficulties of navigating the fierce outer atmosphere of the Earth.&#xA;[01:12.000 --&amp;gt; 01:18.000]   These astronauts knew the dangers, and they faced them willingly,&#xA;[01:18.000 --&amp;gt; 01:23.000]   knowing they had a high and noble purpose in life.&#xA;[01:23.000 --&amp;gt; 01:31.000]   Because of their courage and daring and idealism, we will miss them all the more.&#xA;[01:31.000 --&amp;gt; 01:36.000]   All Americans today are thinking as well of the families of these men and women&#xA;[01:36.000 --&amp;gt; 01:40.000]   who have been given this sudden shock and grief.&#xA;[01:40.000 --&amp;gt; 01:45.000]   You&#39;re not alone. Our entire nation grieves with you,&#xA;[01:45.000 --&amp;gt; 01:52.000]   and those you love will always have the respect and gratitude of this country.&#xA;[01:52.000 --&amp;gt; 01:56.000]   The cause in which they died will continue.&#xA;[01:56.000 --&amp;gt; 02:04.000]   Mankind is led into the darkness beyond our world by the inspiration of discovery&#xA;[02:04.000 --&amp;gt; 02:11.000]   and the longing to understand. Our journey into space will go on.&#xA;[02:11.000 --&amp;gt; 02:16.000]   In the skies today, we saw destruction and tragedy.&#xA;[02:16.000 --&amp;gt; 02:22.000]   Yet farther than we can see, there is comfort and hope.&#xA;[02:22.000 --&amp;gt; 02:29.000]   In the words of the prophet Isaiah, &#34;Lift your eyes and look to the heavens&#xA;[02:29.000 --&amp;gt; 02:35.000]   who created all these. He who brings out the starry hosts one by one&#xA;[02:35.000 --&amp;gt; 02:39.000]   and calls them each by name.&#34;&#xA;[02:39.000 --&amp;gt; 02:46.000]   Because of His great power and mighty strength, not one of them is missing.&#xA;[02:46.000 --&amp;gt; 02:55.000]   The same Creator who names the stars also knows the names of the seven souls we mourn today.&#xA;[02:55.000 --&amp;gt; 03:01.000]   The crew of the shuttle Columbia did not return safely to earth,&#xA;[03:01.000 --&amp;gt; 03:05.000]   yet we can pray that all are safely home.&#xA;[03:05.000 --&amp;gt; 03:13.000]   May God bless the grieving families, and may God continue to bless America.&#xA;[03:13.000 --&amp;gt; 03:41.000]   Audio&#xA;&#xA;&#xA;whisper_print_timings:     load time =   575.92 ms&#xA;whisper_print_timings:      mel time =   230.60 ms&#xA;whisper_print_timings:   sample time =    73.19 ms&#xA;whisper_print_timings:   encode time = 19552.61 ms / 814.69 ms per layer&#xA;whisper_print_timings:   decode time = 13249.96 ms / 552.08 ms per layer&#xA;whisper_print_timings:    total time = 33686.27 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Real-time audio input example&lt;/h2&gt; &#xA;&lt;p&gt;This is a naive example of performing real-time inference on audio from your microphone. The &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/stream&#34;&gt;stream&lt;/a&gt; tool samples the audio every half a second and runs the transcription continously. More info is available in &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/issues/10&#34;&gt;issue #10&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;./stream -m ./models/ggml-base.en.bin -t 8 --step 500 --length 5000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/194935793-76afede7-cfa8-48d8-a80f-28ba83be7d09.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/194935793-76afede7-cfa8-48d8-a80f-28ba83be7d09.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Confidence color-coding&lt;/h2&gt; &#xA;&lt;p&gt;Adding the &lt;code&gt;--print-colors&lt;/code&gt; argument will print the transcribed text using an experimental color coding strategy to highlight words with high or low confidence:&lt;/p&gt; &#xA;&lt;img width=&#34;965&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1991296/197356445-311c8643-9397-4e5e-b46e-0b4b4daa2530.png&#34;&gt; &#xA;&lt;h2&gt;Controlling the length of the generated text segments (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;For example, to limit the line length to a maximum of 16 characters, simply add &lt;code&gt;-ml 16&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;./main -m ./models/ggml-base.en.bin -f ./samples/jfk.wav -ml 16&#xA;&#xA;whisper_model_load: loading model from &#39;./models/ggml-base.en.bin&#39;&#xA;...&#xA;system_info: n_threads = 4 / 10 | AVX2 = 0 | AVX512 = 0 | NEON = 1 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 | &#xA;&#xA;main: processing &#39;./samples/jfk.wav&#39; (176000 samples, 11.0 sec), 4 threads, 1 processors, lang = en, task = transcribe, timestamps = 1 ...&#xA;&#xA;[00:00:00.000 --&amp;gt; 00:00:00.850]   And so my&#xA;[00:00:00.850 --&amp;gt; 00:00:01.590]   fellow&#xA;[00:00:01.590 --&amp;gt; 00:00:04.140]   Americans, ask&#xA;[00:00:04.140 --&amp;gt; 00:00:05.660]   not what your&#xA;[00:00:05.660 --&amp;gt; 00:00:06.840]   country can do&#xA;[00:00:06.840 --&amp;gt; 00:00:08.430]   for you, ask&#xA;[00:00:08.430 --&amp;gt; 00:00:09.440]   what you can do&#xA;[00:00:09.440 --&amp;gt; 00:00:10.020]   for your&#xA;[00:00:10.020 --&amp;gt; 00:00:11.000]   country.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Word-level timestamp&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;--max-len&lt;/code&gt; argument can be used to obtain word-level timestamps. Simply use &lt;code&gt;-ml 1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;./main -m ./models/ggml-base.en.bin -f ./samples/jfk.wav -ml 1&#xA;&#xA;whisper_model_load: loading model from &#39;./models/ggml-base.en.bin&#39;&#xA;...&#xA;system_info: n_threads = 4 / 10 | AVX2 = 0 | AVX512 = 0 | NEON = 1 | FP16_VA = 1 | WASM_SIMD = 0 | BLAS = 1 | &#xA;&#xA;main: processing &#39;./samples/jfk.wav&#39; (176000 samples, 11.0 sec), 4 threads, 1 processors, lang = en, task = transcribe, timestamps = 1 ...&#xA;&#xA;[00:00:00.000 --&amp;gt; 00:00:00.320]  &#xA;[00:00:00.320 --&amp;gt; 00:00:00.370]   And&#xA;[00:00:00.370 --&amp;gt; 00:00:00.690]   so&#xA;[00:00:00.690 --&amp;gt; 00:00:00.850]   my&#xA;[00:00:00.850 --&amp;gt; 00:00:01.590]   fellow&#xA;[00:00:01.590 --&amp;gt; 00:00:02.850]   Americans&#xA;[00:00:02.850 --&amp;gt; 00:00:03.300]  ,&#xA;[00:00:03.300 --&amp;gt; 00:00:04.140]   ask&#xA;[00:00:04.140 --&amp;gt; 00:00:04.990]   not&#xA;[00:00:04.990 --&amp;gt; 00:00:05.410]   what&#xA;[00:00:05.410 --&amp;gt; 00:00:05.660]   your&#xA;[00:00:05.660 --&amp;gt; 00:00:06.260]   country&#xA;[00:00:06.260 --&amp;gt; 00:00:06.600]   can&#xA;[00:00:06.600 --&amp;gt; 00:00:06.840]   do&#xA;[00:00:06.840 --&amp;gt; 00:00:07.010]   for&#xA;[00:00:07.010 --&amp;gt; 00:00:08.170]   you&#xA;[00:00:08.170 --&amp;gt; 00:00:08.190]  ,&#xA;[00:00:08.190 --&amp;gt; 00:00:08.430]   ask&#xA;[00:00:08.430 --&amp;gt; 00:00:08.910]   what&#xA;[00:00:08.910 --&amp;gt; 00:00:09.040]   you&#xA;[00:00:09.040 --&amp;gt; 00:00:09.320]   can&#xA;[00:00:09.320 --&amp;gt; 00:00:09.440]   do&#xA;[00:00:09.440 --&amp;gt; 00:00:09.760]   for&#xA;[00:00:09.760 --&amp;gt; 00:00:10.020]   your&#xA;[00:00:10.020 --&amp;gt; 00:00:10.510]   country&#xA;[00:00:10.510 --&amp;gt; 00:00:11.000]  .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Karaoke-style movie generation (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/main&#34;&gt;main&lt;/a&gt; example provides support for output of karaoke-style movies, where the currently pronounced word is highlighted. Use the &lt;code&gt;-wts&lt;/code&gt; argument and run the generated bash script. This requires to have &lt;code&gt;ffmpeg&lt;/code&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few &lt;em&gt;&#34;typical&#34;&lt;/em&gt; examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;./main -m ./models/ggml-base.en.bin -f ./samples/jfk.wav -owts&#xA;source ./samples/jfk.wav.wts&#xA;ffplay ./samples/jfk.wav.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/199337465-dbee4b5e-9aeb-48a3-b1c6-323ac4db5b2c.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/199337465-dbee4b5e-9aeb-48a3-b1c6-323ac4db5b2c.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;./main -m ./models/ggml-base.en.bin -f ./samples/mm0.wav -owts&#xA;source ./samples/mm0.wav.wts&#xA;ffplay ./samples/mm0.wav.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/199337504-cc8fd233-0cb7-4920-95f9-4227de3570aa.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/199337504-cc8fd233-0cb7-4920-95f9-4227de3570aa.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;./main -m ./models/ggml-base.en.bin -f ./samples/gb0.wav -owts&#xA;source ./samples/gb0.wav.wts&#xA;ffplay ./samples/gb0.wav.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1991296/199337538-b7b0c7a3-2753-4a88-a0cd-f28a317987ba.mp4&#34;&gt;https://user-images.githubusercontent.com/1991296/199337538-b7b0c7a3-2753-4a88-a0cd-f28a317987ba.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;In order to have an objective comparison of the performance of the inference across different system configurations, use the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/bench&#34;&gt;bench&lt;/a&gt; tool. The tool simply runs the Encoder part of the model and prints how much time it took to execute it. The results are summarized in the following Github issue:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/issues/89&#34;&gt;Benchmark results&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ggml format&lt;/h2&gt; &#xA;&lt;p&gt;The original models are converted to a custom binary format. This allows to pack everything needed into a single file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;model parameters&lt;/li&gt; &#xA; &lt;li&gt;mel filters&lt;/li&gt; &#xA; &lt;li&gt;vocabulary&lt;/li&gt; &#xA; &lt;li&gt;weights&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can download the converted models using the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/models/download-ggml-model.sh&#34;&gt;models/download-ggml-model.sh&lt;/a&gt; script or manually from here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/ggerganov/whisper.cpp&#34;&gt;https://huggingface.co/datasets/ggerganov/whisper.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ggml.ggerganov.com&#34;&gt;https://ggml.ggerganov.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details, see the conversion script &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/models/convert-pt-to-ggml.py&#34;&gt;models/convert-pt-to-ggml.py&lt;/a&gt; or the README in &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/models&#34;&gt;models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rust: &lt;a href=&#34;https://github.com/tazz4843/whisper-rs&#34;&gt;tazz4843/whisper-rs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Objective-C / Swift: &lt;a href=&#34;https://github.com/ggerganov/whisper.spm&#34;&gt;ggerganov/whisper.spm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Python:&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Java:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;There are various examples of using the library for different projects in the &lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples&#34;&gt;examples&lt;/a&gt; folder. Some of the examples are even ported to run in the browser using WebAssembly. Check them out!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/main&#34;&gt;main&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/whisper.wasm&#34;&gt;whisper.wasm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tool for translating and transcribing audio using Whisper&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/bench&#34;&gt;bench&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Benchmark the performance of Whisper on your machine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/stream&#34;&gt;stream&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/stream.wasm&#34;&gt;stream.wasm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Real-time transcription of raw microphone capture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/command&#34;&gt;command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/command.wasm&#34;&gt;command.wasm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Basic voice assistant example for receiving voice commands from the mic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/talk&#34;&gt;talk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/talk.wasm&#34;&gt;talk.wasm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Talk with a GPT-2 bot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/whisper.objc&#34;&gt;whisper.objc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS mobile application using whisper.cpp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/whisper.nvim&#34;&gt;whisper.nvim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Speech-to-text plugin for Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/generate-karaoke.sh&#34;&gt;generate-karaoke.sh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Helper script to easily &lt;a href=&#34;https://youtu.be/uj7hVta4blM&#34;&gt;generate a karaoke video&lt;/a&gt; of raw audio capture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/livestream.sh&#34;&gt;livestream.sh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/issues/185&#34;&gt;Livestream audio transcription&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/examples/yt-wsp.sh&#34;&gt;yt-wsp.sh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Download + transcribe and/or translate any VOD &lt;a href=&#34;https://gist.github.com/DaniruKun/96f763ec1a037cc92fe1a059b643b818&#34;&gt;(original)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you have any kind of feedback about this project feel free to use the Discussions section and open a new topic. You can use the &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/discussions/categories/show-and-tell&#34;&gt;Show and tell&lt;/a&gt; category to share your own projects that use &lt;code&gt;whisper.cpp&lt;/code&gt;. If you have a question, make sure to check the &lt;a href=&#34;https://github.com/ggerganov/whisper.cpp/discussions/126&#34;&gt;Frequently asked questions (#126)&lt;/a&gt; discussion.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tw93/Pake</title>
    <updated>2022-12-11T01:39:41Z</updated>
    <id>tag:github.com,2022-12-11:/tw93/Pake</id>
    <link href="https://github.com/tw93/Pake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤱🏻 A simple way to make any web page a desktop application using Rust. 🤱🏻 很简单的用 Rust 打包网页生成很小的桌面 App&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;left&#34;&gt;&lt;strong&gt;中文&lt;/strong&gt; | &lt;a href=&#34;https://github.com/tw93/Pake/raw/master/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://gw.alipayobjects.com/zos/k/fa/logo-modified.png&#34; width=&#34;138/&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Pake&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://twitter.com/HiTw93&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;twitter&#34; src=&#34;https://img.shields.io/twitter/follow/Hitw93?color=%231D9BF0&amp;amp;label=Pake%20%F0%9F%93%A2%20&amp;amp;logo=Twitter&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://t.me/miaoyan&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;telegram&#34; src=&#34;https://img.shields.io/badge/chat-telegram-blueviolet?style=flat-square&amp;amp;logo=Telegram&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/tw93/Pake/releases&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;GitHub downloads&#34; src=&#34;https://img.shields.io/github/downloads/tw93/Pake/total.svg?style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/tw93/Pake/commits&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;GitHub commit&#34; src=&#34;https://img.shields.io/github/commit-activity/m/tw93/Pake?style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/tw93/Pake/issues?q=is%3Aissue+is%3Aclosed&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;GitHub closed issues&#34; src=&#34;https://img.shields.io/github/issues-closed/tw93/Pake.svg?style=flat-square&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;left&#34;&gt;&#xA; 很简单的用 Rust 打包网页生成很小的桌面 App，支持 Mac / Windows / Linux 系统，常用包下载、&#xA; &lt;a href=&#34;#命令行打包&#34;&gt;命令行一键打包&lt;/a&gt;、&#xA; &lt;a href=&#34;#开发&#34;&gt;定制开发&lt;/a&gt; 可见下面文档，也欢迎去 &#xA; &lt;a href=&#34;https://github.com/tw93/Pake/discussions&#34;&gt;讨论区&lt;/a&gt; 交流。&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特征&lt;/h2&gt; &#xA;&lt;p&gt;🏂 &lt;strong&gt;小&lt;/strong&gt;：相比传统的 Electron 套壳打包，要小将近 40 倍，不到 3M&lt;br&gt; 😂 &lt;strong&gt;快&lt;/strong&gt;：Pake 的底层使用的 Rust Tauri 框架，性能体验较 JS 框架要轻快不少，内存小很多&lt;br&gt; 🩴 &lt;strong&gt;特&lt;/strong&gt;：不是单纯打包，实现了快捷键的透传、沉浸式的窗口、拖动、样式改写、去广告、产品的极简风格定制&lt;br&gt; 🐶 &lt;strong&gt;玩&lt;/strong&gt;：只是一个很简单的小玩具，用 Rust 替代之前套壳网页打包的老思路，其实 PWA 也很好&lt;/p&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WeRead &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/WeRead.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/WeRead_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/WeRead_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Twitter &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Twitter.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Twitter_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Twitter_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/17dC9I.jpg&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/mc41xq.jpg&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGPT &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/ChatGPT.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/ChatGPT_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/ChatGPT_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Qwerty &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Qwerty.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Qwerty_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Qwerty_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/sfnTXf.png&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/CJjagn.jpg&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Code &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Code.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Code_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Code_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Reference &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Reference.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Reference_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Reference_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/EB1OYP.jpg&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/KFsZIY.png&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YouTube &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/YouTube.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/YouTube_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/YouTube_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Flomo &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Flomo.dmg&#34;&gt;Mac&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Flomo_amd64.deb&#34;&gt;Linux&lt;/a&gt; &lt;a href=&#34;https://github.com/tw93/Pake/releases/latest/download/Flomo_x64.msi&#34;&gt;Windows&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/Ea5ZRw.png&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cdn.fliggy.com/upic/jg9Eeu.jpg&#34; width=&#34;600/&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;命令行打包&lt;/h2&gt; &#xA;&lt;kbd&gt; &lt;img src=&#34;https://cdn.fliggy.com/upic/cOC1lF.gif&#34; width=&#34;100%&#34;&gt; &lt;/kbd&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pake 提供了命令行工具，可以更快捷方便地一键自定义打你需要的包，详细可见 &lt;a href=&#34;https://raw.githubusercontent.com/tw93/Pake/master/bin/README.md&#34;&gt;文档&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// 使用 npm 进行安装&#xA;npm install -g pake-cli&#xA;&#xA;// 命令使用&#xA;pake url [options]&#xA;&#xA;// 随便玩玩，首次由于安装环境会有些慢，后面就快了&#xA;pake https://weekly.tw93.fun --name Weekly --transparent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;假如你是不太会使用命令行的小白，使用 &lt;strong&gt;GitHub Actions 在线编译多系统版本&lt;/strong&gt; 也是一个不错的选择，可查看&lt;a href=&#34;https://raw.githubusercontent.com/tw93/Pake/master/.github/workflows/docs/README.md&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;快捷键&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mac&lt;/th&gt; &#xA;   &lt;th&gt;Windows/Linux&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;←&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;返回上一个页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;→&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;去下一个页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;↑&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;↑&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;自动滚动到页面顶部&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;↓&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;↓&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;自动滚动到页面底部&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;刷新页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;隐藏窗口，非退出&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;缩小页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;+&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;+&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;放大页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;放大页面&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;0&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;重置页面缩放&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;此外还支持双击头部进行全屏切换，拖拽头部进行移动窗口，还有其他需求，欢迎提过来。&lt;/p&gt; &#xA;&lt;h2&gt;开发&lt;/h2&gt; &#xA;&lt;p&gt;开始前参考 &lt;a href=&#34;https://tauri.app/v1/guides/getting-started/prerequisites&#34;&gt;Tauri&lt;/a&gt; 快速配置好环境。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;// 安装依赖&#xA;npm i&#xA;&#xA;// 调试&#xA;npm run dev&#xA;&#xA;// 打包应用&#xA;npm run build&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;打新包&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;修改 &lt;code&gt;src-tauri&lt;/code&gt; 目录下的 &lt;code&gt;tauri.conf.json&lt;/code&gt; 中的 &lt;code&gt;url、productName、icon、identifier&lt;/code&gt; 这 4 个字段，其中 icon 可以从 icons 目录选择一个，也可以去 &lt;a href=&#34;https://macosicons.com/#/&#34;&gt;macOSicons&lt;/a&gt; 下载符合产品名称的&lt;/li&gt; &#xA; &lt;li&gt;关于窗口属性设置，可以在 &lt;code&gt;tauri.conf.json&lt;/code&gt; 修改 &lt;code&gt;windows&lt;/code&gt; 属性对应的 &lt;code&gt;width/height&lt;/code&gt;，是否全屏 &lt;code&gt;fullscreen&lt;/code&gt;，是否可以调整大小 &lt;code&gt;resizable&lt;/code&gt;，假如想适配 Mac 沉浸式头部，可以将 &lt;code&gt;transparent&lt;/code&gt; 设置成 &lt;code&gt;true&lt;/code&gt;，找到 Header 元素加一个 &lt;code&gt;padding-top&lt;/code&gt; 样式即可，不想适配改成 &lt;code&gt;false&lt;/code&gt; 也行&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt; 本地调试看看效果，此外可以使用 &lt;code&gt;npm run dev:debug&lt;/code&gt; 进行容器调试&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt; 运行即可打生产包&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;高级用法&lt;/h2&gt; &#xA;&lt;h4&gt;1. 如何改写样式，如去掉原站广告、不想要的模块、甚至重新设计？&lt;/h4&gt; &#xA;&lt;p&gt;首先需要使用 &lt;code&gt;npm run dev:debug&lt;/code&gt; 打开 devtools 调试模式，找到你需要修改的样式名称，先在 devtools 里面验证效果；找到 &lt;code&gt;pake.js&lt;/code&gt; 中样式位置 &lt;code&gt;style.innerHTML&lt;/code&gt; ，将需要覆盖的样式加上即可，有一些案例你可以模仿。&lt;/p&gt; &#xA;&lt;h4&gt;2. 如何注入 JS 的逻辑，比如实现事件监听，比如说键盘快捷键？&lt;/h4&gt; &#xA;&lt;p&gt;参考 &lt;code&gt;pake.js&lt;/code&gt; 中事件监听 &lt;code&gt;document.addEventListener&lt;/code&gt;，直接编写即可，这里更多是基础前端的技术。&lt;/p&gt; &#xA;&lt;h4&gt;3. 如何进行容器内的事件和 Pake 通信，比如说 Web 的拖拽、滚动、特殊点击传递啥的？&lt;/h4&gt; &#xA;&lt;p&gt;参考 &lt;code&gt;pake.js&lt;/code&gt; 中通信代码 &lt;code&gt;postMessage&lt;/code&gt;，写好事件监听，然后用 &lt;code&gt;window.ipc.postMessage&lt;/code&gt; 将事件以及参数传递出来，然后参考容器接收事件 &lt;code&gt;window.drag_window&lt;/code&gt;，自己处理即可，更多可以参考 tauri 以及 wry 的官方文档。&lt;/p&gt; &#xA;&lt;h2&gt;开发者&lt;/h2&gt; &#xA;&lt;p&gt;Pake 的发展离不开这些 Hacker 们，一起贡献了大量能力，也欢迎关注他们 ❤️&lt;/p&gt; &#xA;&lt;!-- readme: contributors -start --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tw93&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/8736212?v=4&#34; width=&#34;90;&#34; alt=&#34;tw93&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Tw93&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Tlntin&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/28218658?v=4&#34; width=&#34;90;&#34; alt=&#34;Tlntin&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Tlntin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pan93412&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/28441561?v=4&#34; width=&#34;90;&#34; alt=&#34;pan93412&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Pan93412&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wanghanzhen&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/25301012?v=4&#34; width=&#34;90;&#34; alt=&#34;wanghanzhen&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Volare&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/essesoul&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/58624474?v=4&#34; width=&#34;90;&#34; alt=&#34;essesoul&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Essesoul&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/liby&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/38807139?v=4&#34; width=&#34;90;&#34; alt=&#34;liby&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Bryan Lee&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/m1911star&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/4948120?v=4&#34; width=&#34;90;&#34; alt=&#34;m1911star&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Horus&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/QingZ11&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/38887077?v=4&#34; width=&#34;90;&#34; alt=&#34;QingZ11&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Steam&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/2nthony&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/19513289?v=4&#34; width=&#34;90;&#34; alt=&#34;2nthony&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;2nthony&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/AielloChan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/7900765?v=4&#34; width=&#34;90;&#34; alt=&#34;AielloChan&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Aiello&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/nekomeowww&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/11081491?v=4&#34; width=&#34;90;&#34; alt=&#34;nekomeowww&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ayaka Neko&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/houhoz&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/19684376?v=4&#34; width=&#34;90;&#34; alt=&#34;houhoz&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Hyzhao&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/liusishan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/33129823?v=4&#34; width=&#34;90;&#34; alt=&#34;liusishan&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Liusishan&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/piaoyidage&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/5135405?v=4&#34; width=&#34;90;&#34; alt=&#34;piaoyidage&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Ranger&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- readme: contributors -end --&gt; &#xA;&lt;h2&gt;支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;我有两只猫，一只叫汤圆，一只叫可乐，假如觉得 Pake 让你生活更美好，可以给汤圆可乐 &lt;a href=&#34;https://miaoyan.app/cats.html?name=Pake&#34; target=&#34;_blank&#34;&gt;喂罐头 🥩🍤&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;如果你喜欢 Pake，可以在 Github Star，更欢迎 &lt;a href=&#34;https://twitter.com/intent/tweet?url=https://github.com/tw93/Pake&amp;amp;text=Pake%20%E4%B8%80%E4%B8%AA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%20Rust%20%E6%89%93%E5%8C%85%E7%BD%91%E9%A1%B5%E7%94%9F%E6%88%90%20Mac%20App%20%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9B%B8%E6%AF%94%E4%BC%A0%E7%BB%9F%E7%9A%84%20Electron%20%E5%A5%97%E5%A3%B3%E6%89%93%E5%8C%85%EF%BC%8C%E5%A4%A7%E5%B0%8F%E8%A6%81%E5%B0%8F%E5%B0%86%E8%BF%91%2040%20%E5%80%8D%EF%BC%8C%E4%B8%80%E8%88%AC%202M%20%E5%B7%A6%E5%8F%B3%EF%BC%8C%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8Tauri%20%EF%BC%8C%E6%80%A7%E8%83%BD%E4%BD%93%E9%AA%8C%E8%BE%83%20JS%20%E6%A1%86%E6%9E%B6%E8%A6%81%E8%BD%BB%E5%BF%AB%E4%B8%8D%E5%B0%91%EF%BC%8C%E5%86%85%E5%AD%98%E5%B0%8F%E5%BE%88%E5%A4%9A%EF%BC%8C%E6%94%AF%E6%8C%81%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E3%80%81Twitter%E3%80%81Youtube%E3%80%81RunCode%E3%80%81Flomo%E3%80%81%E8%AF%AD%E9%9B%80%E7%AD%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BE%88%E6%96%B9%E4%BE%BF%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91~&#34;&gt;推荐&lt;/a&gt; 给你志同道合的朋友使用。&lt;/li&gt; &#xA; &lt;li&gt;可以关注我的 &lt;a href=&#34;https://twitter.com/HiTw93&#34;&gt;Twitter&lt;/a&gt; 获取到最新的 Pake 更新消息，也欢迎加入 &lt;a href=&#34;https://t.me/miaoyan&#34;&gt;Telegram&lt;/a&gt; 聊天群。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;最后&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;希望大伙玩的过程中有一种学习新技术的喜悦感，如果有新点子欢迎告诉我&lt;/li&gt; &#xA; &lt;li&gt;假如你发现有很适合做成桌面 App 的网页也很欢迎告诉我，我给加到里面来&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>