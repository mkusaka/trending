<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-27T01:36:49Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DrKLO/Telegram</title>
    <updated>2024-10-27T01:36:49Z</updated>
    <id>tag:github.com,2024-10-27:/DrKLO/Telegram</id>
    <link href="https://github.com/DrKLO/Telegram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram for Android source&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Telegram messenger for Android&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://telegram.org&#34;&gt;Telegram&lt;/a&gt; is a messaging app with a focus on speed and security. It’s superfast, simple and free. This repo contains the official source code for &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.telegram.messenger&#34;&gt;Telegram App for Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Creating your Telegram Application&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all developers to use our API and source code to create applications on our platform. There are several things we require from &lt;strong&gt;all developers&lt;/strong&gt; for the moment.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;&lt;strong&gt;Obtain your own api_id&lt;/strong&gt;&lt;/a&gt; for your application.&lt;/li&gt; &#xA; &lt;li&gt;Please &lt;strong&gt;do not&lt;/strong&gt; use the name Telegram for your app — or make sure your users understand that it is unofficial.&lt;/li&gt; &#xA; &lt;li&gt;Kindly &lt;strong&gt;do not&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) as your app&#39;s logo.&lt;/li&gt; &#xA; &lt;li&gt;Please study our &lt;a href=&#34;https://core.telegram.org/mtproto/security_guidelines&#34;&gt;&lt;strong&gt;security guidelines&lt;/strong&gt;&lt;/a&gt; and take good care of your users&#39; data and privacy.&lt;/li&gt; &#xA; &lt;li&gt;Please remember to publish &lt;strong&gt;your&lt;/strong&gt; code too in order to comply with the licences.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;API, Protocol documentation&lt;/h3&gt; &#xA;&lt;p&gt;Telegram API manuals: &lt;a href=&#34;https://core.telegram.org/api&#34;&gt;https://core.telegram.org/api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MTproto protocol manuals: &lt;a href=&#34;https://core.telegram.org/mtproto&#34;&gt;https://core.telegram.org/mtproto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compilation Guide&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In order to support &lt;a href=&#34;https://core.telegram.org/reproducible-builds&#34;&gt;reproducible builds&lt;/a&gt;, this repo contains dummy release.keystore, google-services.json and filled variables inside BuildVars.java. Before publishing your own APKs please make sure to replace all these files with your own.&lt;/p&gt; &#xA;&lt;p&gt;You will require Android Studio 3.4, Android NDK rev. 20 and Android SDK 8.1&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the Telegram source code from &lt;a href=&#34;https://github.com/DrKLO/Telegram&#34;&gt;https://github.com/DrKLO/Telegram&lt;/a&gt; ( git clone &lt;a href=&#34;https://github.com/DrKLO/Telegram.git&#34;&gt;https://github.com/DrKLO/Telegram.git&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;Copy your release.keystore into TMessagesProj/config&lt;/li&gt; &#xA; &lt;li&gt;Fill out RELEASE_KEY_PASSWORD, RELEASE_KEY_ALIAS, RELEASE_STORE_PASSWORD in gradle.properties to access your release.keystore&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;https://console.firebase.google.com/&lt;/a&gt;, create two android apps with application IDs org.telegram.messenger and org.telegram.messenger.beta, turn on firebase messaging and download google-services.json, which should be copied to the same folder as TMessagesProj.&lt;/li&gt; &#xA; &lt;li&gt;Open the project in the Studio (note that it should be opened, NOT imported).&lt;/li&gt; &#xA; &lt;li&gt;Fill out values in TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java – there’s a link for each of the variables showing where and which data to obtain.&lt;/li&gt; &#xA; &lt;li&gt;You are ready to compile Telegram.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;We moved all translations to &lt;a href=&#34;https://translations.telegram.org/en/android/&#34;&gt;https://translations.telegram.org/en/android/&lt;/a&gt;. Please use it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BerriAI/litellm</title>
    <updated>2024-10-27T01:36:49Z</updated>
    <id>tag:github.com,2024-10-27:/BerriAI/litellm</id>
    <link href="https://github.com/BerriAI/litellm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python SDK, Proxy Server (LLM Gateway) to call 100+ LLM APIs in OpenAI format - [Bedrock, Azure, OpenAI, VertexAI, Cohere, Anthropic, Sagemaker, HuggingFace, Replicate, Groq]&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; 🚅 LiteLLM &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://render.com/deploy?repo=https://github.com/BerriAI/litellm&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://railway.app/template/HLP0Ub?referralCode=jch2ME&#34;&gt; &lt;img src=&#34;https://railway.app/button.svg?sanitize=true&#34; alt=&#34;Deploy on Railway&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Call all LLM APIs using the OpenAI format [Bedrock, Huggingface, VertexAI, TogetherAI, Azure, OpenAI, Groq etc.] &lt;br&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/simple_proxy&#34; target=&#34;_blank&#34;&gt;LiteLLM Proxy Server (LLM Gateway)&lt;/a&gt; | &lt;a href=&#34;https://docs.litellm.ai/docs/hosted&#34; target=&#34;_blank&#34;&gt; Hosted Proxy (Preview)&lt;/a&gt; | &lt;a href=&#34;https://docs.litellm.ai/docs/enterprise&#34; target=&#34;_blank&#34;&gt;Enterprise Tier&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/litellm/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/litellm.svg?sanitize=true&#34; alt=&#34;PyPI Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://dl.circleci.com/status-badge/redirect/gh/BerriAI/litellm/tree/main&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://dl.circleci.com/status-badge/img/gh/BerriAI/litellm/tree/main.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.ycombinator.com/companies/berriai&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Y%20Combinator-W23-orange?style=flat-square&#34; alt=&#34;Y Combinator W23&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://wa.link/huol9n&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Chat%20on&amp;amp;message=WhatsApp&amp;amp;color=success&amp;amp;logo=WhatsApp&amp;amp;style=flat-square&#34; alt=&#34;Whatsapp&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/wuPM9dRgDw&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Chat%20on&amp;amp;message=Discord&amp;amp;color=blue&amp;amp;logo=Discord&amp;amp;style=flat-square&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p&gt;LiteLLM manages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Translate inputs to provider&#39;s &lt;code&gt;completion&lt;/code&gt;, &lt;code&gt;embedding&lt;/code&gt;, and &lt;code&gt;image_generation&lt;/code&gt; endpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/completion/output&#34;&gt;Consistent output&lt;/a&gt;, text responses will always be available at &lt;code&gt;[&#39;choices&#39;][0][&#39;message&#39;][&#39;content&#39;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Retry/fallback logic across multiple deployments (e.g. Azure/OpenAI) - &lt;a href=&#34;https://docs.litellm.ai/docs/routing&#34;&gt;Router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set Budgets &amp;amp; Rate limits per project, api key, model &lt;a href=&#34;https://docs.litellm.ai/docs/simple_proxy&#34;&gt;LiteLLM Proxy Server (LLM Gateway)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BerriAI/litellm?tab=readme-ov-file#openai-proxy---docs&#34;&gt;&lt;strong&gt;Jump to LiteLLM Proxy (LLM Gateway) Docs&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/BerriAI/litellm?tab=readme-ov-file#supported-providers-docs&#34;&gt;&lt;strong&gt;Jump to Supported LLM Providers&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚨 &lt;strong&gt;Stable Release:&lt;/strong&gt; Use docker images with the &lt;code&gt;-stable&lt;/code&gt; tag. These have undergone 12 hour load tests, before being published.&lt;/p&gt; &#xA;&lt;p&gt;Support for more providers. Missing a provider or LLM Platform, raise a &lt;a href=&#34;https://github.com/BerriAI/litellm/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;projects=&amp;amp;template=feature_request.yml&amp;amp;title=%5BFeature%5D%3A+&#34;&gt;feature request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage (&lt;a href=&#34;https://docs.litellm.ai/docs/&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] LiteLLM v1.0.0 now requires &lt;code&gt;openai&amp;gt;=1.0.0&lt;/code&gt;. Migration guide &lt;a href=&#34;https://docs.litellm.ai/docs/migration&#34;&gt;here&lt;/a&gt;&lt;br&gt; LiteLLM v1.40.14+ now requires &lt;code&gt;pydantic&amp;gt;=2.0.0&lt;/code&gt;. No changes required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://colab.research.google.com/github/BerriAI/litellm/blob/main/cookbook/liteLLM_Getting_Started.ipynb&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt; &lt;/a&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install litellm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from litellm import completion&#xA;import os&#xA;&#xA;## set ENV variables&#xA;os.environ[&#34;OPENAI_API_KEY&#34;] = &#34;your-openai-key&#34;&#xA;os.environ[&#34;COHERE_API_KEY&#34;] = &#34;your-cohere-key&#34;&#xA;&#xA;messages = [{ &#34;content&#34;: &#34;Hello, how are you?&#34;,&#34;role&#34;: &#34;user&#34;}]&#xA;&#xA;# openai call&#xA;response = completion(model=&#34;gpt-3.5-turbo&#34;, messages=messages)&#xA;&#xA;# cohere call&#xA;response = completion(model=&#34;command-nightly&#34;, messages=messages)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call any model supported by a provider, with &lt;code&gt;model=&amp;lt;provider_name&amp;gt;/&amp;lt;model_name&amp;gt;&lt;/code&gt;. There might be provider-specific details here, so refer to &lt;a href=&#34;https://docs.litellm.ai/docs/providers&#34;&gt;provider docs for more information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Async (&lt;a href=&#34;https://docs.litellm.ai/docs/completion/stream#async-completion&#34;&gt;Docs&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from litellm import acompletion&#xA;import asyncio&#xA;&#xA;async def test_get_response():&#xA;    user_message = &#34;Hello, how are you?&#34;&#xA;    messages = [{&#34;content&#34;: user_message, &#34;role&#34;: &#34;user&#34;}]&#xA;    response = await acompletion(model=&#34;gpt-3.5-turbo&#34;, messages=messages)&#xA;    return response&#xA;&#xA;response = asyncio.run(test_get_response())&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Streaming (&lt;a href=&#34;https://docs.litellm.ai/docs/completion/stream&#34;&gt;Docs&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;liteLLM supports streaming the model response back, pass &lt;code&gt;stream=True&lt;/code&gt; to get a streaming iterator in response.&lt;br&gt; Streaming is supported for all models (Bedrock, Huggingface, TogetherAI, Azure, OpenAI, etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from litellm import completion&#xA;response = completion(model=&#34;gpt-3.5-turbo&#34;, messages=messages, stream=True)&#xA;for part in response:&#xA;    print(part.choices[0].delta.content or &#34;&#34;)&#xA;&#xA;# claude 2&#xA;response = completion(&#39;claude-2&#39;, messages, stream=True)&#xA;for part in response:&#xA;    print(part.choices[0].delta.content or &#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging Observability (&lt;a href=&#34;https://docs.litellm.ai/docs/observability/callbacks&#34;&gt;Docs&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;LiteLLM exposes pre defined callbacks to send data to Lunary, Langfuse, DynamoDB, s3 Buckets, Helicone, Promptlayer, Traceloop, Athina, Slack&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from litellm import completion&#xA;&#xA;## set env variables for logging tools&#xA;os.environ[&#34;LUNARY_PUBLIC_KEY&#34;] = &#34;your-lunary-public-key&#34;&#xA;os.environ[&#34;HELICONE_API_KEY&#34;] = &#34;your-helicone-auth-key&#34;&#xA;os.environ[&#34;LANGFUSE_PUBLIC_KEY&#34;] = &#34;&#34;&#xA;os.environ[&#34;LANGFUSE_SECRET_KEY&#34;] = &#34;&#34;&#xA;os.environ[&#34;ATHINA_API_KEY&#34;] = &#34;your-athina-api-key&#34;&#xA;&#xA;os.environ[&#34;OPENAI_API_KEY&#34;]&#xA;&#xA;# set callbacks&#xA;litellm.success_callback = [&#34;lunary&#34;, &#34;langfuse&#34;, &#34;athina&#34;, &#34;helicone&#34;] # log input/output to lunary, langfuse, supabase, athina, helicone etc&#xA;&#xA;#openai call&#xA;response = completion(model=&#34;gpt-3.5-turbo&#34;, messages=[{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hi 👋 - i&#39;m openai&#34;}])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;LiteLLM Proxy Server (LLM Gateway) - (&lt;a href=&#34;https://docs.litellm.ai/docs/simple_proxy&#34;&gt;Docs&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;Track spend + Load Balance across multiple projects&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/hosted&#34;&gt;Hosted Proxy (Preview)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The proxy provides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/proxy/virtual_keys#custom-auth&#34;&gt;Hooks for auth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/proxy/logging#step-1---create-your-custom-litellm-callback-class&#34;&gt;Hooks for logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/proxy/virtual_keys#tracking-spend&#34;&gt;Cost tracking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/proxy/users#set-rate-limits&#34;&gt;Rate Limiting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📖 Proxy Endpoints - &lt;a href=&#34;https://litellm-api.up.railway.app/&#34;&gt;Swagger Docs&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Quick Start Proxy - CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install &#39;litellm[proxy]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 1: Start litellm proxy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ litellm --model huggingface/bigcode/starcoder&#xA;&#xA;#INFO: Proxy running on http://0.0.0.0:4000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: Make ChatCompletions Request to Proxy&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] 💡 &lt;a href=&#34;https://docs.litellm.ai/docs/proxy/user_keys&#34;&gt;Use LiteLLM Proxy with Langchain (Python, JS), OpenAI SDK (Python, JS) Anthropic SDK, Mistral SDK, LlamaIndex, Instructor, Curl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import openai # openai v1.0.0+&#xA;client = openai.OpenAI(api_key=&#34;anything&#34;,base_url=&#34;http://0.0.0.0:4000&#34;) # set proxy to base_url&#xA;# request sent to model set on litellm proxy, `litellm --model`&#xA;response = client.chat.completions.create(model=&#34;gpt-3.5-turbo&#34;, messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;this is a test request, write a short poem&#34;&#xA;    }&#xA;])&#xA;&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Proxy Key Management (&lt;a href=&#34;https://docs.litellm.ai/docs/proxy/virtual_keys&#34;&gt;Docs&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Connect the proxy with a Postgres DB to create proxy keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get the code&#xA;git clone https://github.com/BerriAI/litellm&#xA;&#xA;# Go to folder&#xA;cd litellm&#xA;&#xA;# Add the master key - you can change this after setup&#xA;echo &#39;LITELLM_MASTER_KEY=&#34;sk-1234&#34;&#39; &amp;gt; .env&#xA;&#xA;# Add the litellm salt key - you cannot change this after adding a model&#xA;# It is used to encrypt / decrypt your LLM API Key credentials&#xA;# We recommned - https://1password.com/password-generator/ &#xA;# password generator to get a random hash for litellm salt key&#xA;echo &#39;LITELLM_SALT_KEY=&#34;sk-1234&#34;&#39; &amp;gt; .env&#xA;&#xA;source .env&#xA;&#xA;# Start&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UI on &lt;code&gt;/ui&lt;/code&gt; on your proxy server &lt;img src=&#34;https://github.com/BerriAI/litellm/assets/29436595/47c97d5e-b9be-4839-b28c-43d7f4f10033&#34; alt=&#34;ui_3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set budgets and rate limits across multiple projects &lt;code&gt;POST /key/generate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl &#39;http://0.0.0.0:4000/key/generate&#39; \&#xA;--header &#39;Authorization: Bearer sk-1234&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#34;models&#34;: [&#34;gpt-3.5-turbo&#34;, &#34;gpt-4&#34;, &#34;claude-2&#34;], &#34;duration&#34;: &#34;20m&#34;,&#34;metadata&#34;: {&#34;user&#34;: &#34;ishaan@berri.ai&#34;, &#34;team&#34;: &#34;core-infra&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expected Response&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{&#xA;    &#34;key&#34;: &#34;sk-kdEXbIqZRwEeEiHwdg7sFA&#34;, # Bearer token&#xA;    &#34;expires&#34;: &#34;2023-11-19T01:38:25.838000+00:00&#34; # datetime object&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Providers (&lt;a href=&#34;https://docs.litellm.ai/docs/providers&#34;&gt;Docs&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/#basic-usage&#34;&gt;Completion&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/completion/stream#streaming-responses&#34;&gt;Streaming&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/completion/stream#async-completion&#34;&gt;Async Completion&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/completion/stream#async-streaming&#34;&gt;Async Streaming&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/embedding/supported_embedding&#34;&gt;Async Embedding&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/image_generation&#34;&gt;Async Image Generation&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/openai&#34;&gt;openai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/azure&#34;&gt;azure&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/aws_sagemaker&#34;&gt;aws - sagemaker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/bedrock&#34;&gt;aws - bedrock&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/vertex&#34;&gt;google - vertex_ai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/palm&#34;&gt;google - palm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/gemini&#34;&gt;google AI Studio - gemini&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/mistral&#34;&gt;mistral ai api&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/cloudflare_workers&#34;&gt;cloudflare AI Workers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/cohere&#34;&gt;cohere&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/anthropic&#34;&gt;anthropic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/empower&#34;&gt;empower&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/huggingface&#34;&gt;huggingface&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/replicate&#34;&gt;replicate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/togetherai&#34;&gt;together_ai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/openrouter&#34;&gt;openrouter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/ai21&#34;&gt;ai21&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/baseten&#34;&gt;baseten&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/vllm&#34;&gt;vllm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/nlp_cloud&#34;&gt;nlp_cloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/aleph_alpha&#34;&gt;aleph alpha&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/petals&#34;&gt;petals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/ollama&#34;&gt;ollama&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/deepinfra&#34;&gt;deepinfra&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/perplexity&#34;&gt;perplexity-ai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/groq&#34;&gt;Groq AI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/deepseek&#34;&gt;Deepseek&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/anyscale&#34;&gt;anyscale&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/watsonx&#34;&gt;IBM - watsonx.ai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/voyage&#34;&gt;voyage ai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/xinference&#34;&gt;xinference [Xorbits Inference]&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/providers/friendliai&#34;&gt;FriendliAI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.litellm.ai/docs/&#34;&gt;&lt;strong&gt;Read the Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute: Clone the repo locally -&amp;gt; Make a change -&amp;gt; Submit a PR with the change.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to modify the repo locally: Step 1: Clone the repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/BerriAI/litellm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2: Navigate into the project, and install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd litellm&#xA;poetry install -E extra_proxy -E proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 3: Test your change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd litellm/tests # pwd: Documents/litellm/litellm/tests&#xA;poetry run flake8&#xA;poetry run pytest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 4: Submit a PR with your changes! 🚀&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;push your fork to your GitHub repo&lt;/li&gt; &#xA; &lt;li&gt;submit a PR from there&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Enterprise&lt;/h1&gt; &#xA;&lt;p&gt;For companies that need better security, user management and professional support&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://calendly.com/d/4mp-gd3-k5k/litellm-1-1-onboarding-chat&#34;&gt;Talk to founders&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This covers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;Features under the &lt;a href=&#34;https://docs.litellm.ai/docs/proxy/enterprise&#34;&gt;LiteLLM Commercial License&lt;/a&gt;:&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;Feature Prioritization&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;Custom Integrations&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;Professional Support - Dedicated discord + slack&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;Custom SLAs&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;Secure access with Single Sign-On&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support / talk with founders&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://calendly.com/d/4mp-gd3-k5k/berriai-1-1-onboarding-litellm-hosted-version&#34;&gt;Schedule Demo 👋&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/wuPM9dRgDw&#34;&gt;Community Discord 💭&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our numbers 📞 +1 (770) 8783-106 / ‭+1 (412) 618-6238‬&lt;/li&gt; &#xA; &lt;li&gt;Our emails ✉️ &lt;a href=&#34;mailto:ishaan@berri.ai&#34;&gt;ishaan@berri.ai&lt;/a&gt; / &lt;a href=&#34;mailto:krrish@berri.ai&#34;&gt;krrish@berri.ai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Why did we build this&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Need for simplicity&lt;/strong&gt;: Our code started to get extremely complicated managing &amp;amp; translating calls between Azure, OpenAI and Cohere.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;a href=&#34;https://github.com/BerriAI/litellm/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=BerriAI/litellm&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>VikParuchuri/surya</title>
    <updated>2024-10-27T01:36:49Z</updated>
    <id>tag:github.com,2024-10-27:/VikParuchuri/surya</id>
    <link href="https://github.com/VikParuchuri/surya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OCR, layout analysis, reading order, table recognition in 90+ languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Surya&lt;/h1&gt; &#xA;&lt;p&gt;Surya is a document OCR toolkit that does:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OCR in 90+ languages that benchmarks favorably vs cloud services&lt;/li&gt; &#xA; &lt;li&gt;Line-level text detection in any language&lt;/li&gt; &#xA; &lt;li&gt;Layout analysis (table, image, header, etc detection)&lt;/li&gt; &#xA; &lt;li&gt;Reading order detection&lt;/li&gt; &#xA; &lt;li&gt;Table recognition (detecting rows/columns)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works on a range of documents (see &lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/#usage&#34;&gt;usage&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/#benchmarks&#34;&gt;benchmarks&lt;/a&gt; for more details).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Detection&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OCR&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/excerpt.png&#34; width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/excerpt_text.png&#34; width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Layout&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reading Order&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/excerpt_layout.png&#34; width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/excerpt_reading.jpg&#34; width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Table Recognition&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned_tablerec.png&#34; width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Surya is named for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Surya&#34;&gt;Hindu sun god&lt;/a&gt;, who has universal vision.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg//KuZwXNGnfH&#34;&gt;Discord&lt;/a&gt; is where we discuss future development.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Detection&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;OCR&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Layout&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Order&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Table Rec&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/japanese.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/japanese_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/japanese_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/japanese_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/japanese_tablerec.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chinese.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chinese_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chinese_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chinese_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/hindi.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/hindi_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/hindi_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/hindi_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arabic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/arabic.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/arabic_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/arabic_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/arabic_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese + Hindi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chi_hind.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chi_hind_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chi_hind_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/chi_hind_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Presentation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/pres.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/pres_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/pres_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/pres_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/pres_tablerec.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scientific Paper&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/paper.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/paper_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/paper_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/paper_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/paper_tablerec.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scanned Document&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned_tablerec.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;New York Times&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/nyt.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/nyt_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/nyt_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/nyt_order.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scanned Form&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/funsd.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/funsd_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/funsd_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/funsd_reading.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/scanned_tablerec2.png&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Textbook&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/textbook.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/textbook_text.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/textbook_layout.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/textbook_order.jpg&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Hosted API&lt;/h1&gt; &#xA;&lt;p&gt;There is a hosted API for all surya models available &lt;a href=&#34;https://www.datalab.to/&#34;&gt;here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works with PDF, images, word docs, and powerpoints&lt;/li&gt; &#xA; &lt;li&gt;Consistent speed, with no latency spikes&lt;/li&gt; &#xA; &lt;li&gt;High reliability and uptime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Commercial usage&lt;/h1&gt; &#xA;&lt;p&gt;I want surya to be as widely accessible as possible, while still funding my development/training costs. Research and personal usage is always okay, but there are some restrictions on commercial usage.&lt;/p&gt; &#xA;&lt;p&gt;The weights for the models are licensed &lt;code&gt;cc-by-nc-sa-4.0&lt;/code&gt;, but I will waive that for any organization under $5M USD in gross revenue in the most recent 12-month period AND under $5M in lifetime VC/angel funding raised. You also must not be competitive with the &lt;a href=&#34;https://www.datalab.to/&#34;&gt;Datalab API&lt;/a&gt;. If you want to remove the GPL license requirements (dual-license) and/or use the weights commercially over the revenue limit, check out the options &lt;a href=&#34;https://www.datalab.to&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;ll need python 3.10+ and PyTorch. You may need to install the CPU version of torch first if you&#39;re not using a Mac or a GPU machine. See &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install surya-ocr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Model weights will automatically download the first time you run surya.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect the settings in &lt;code&gt;surya/settings.py&lt;/code&gt;. You can override any settings with environment variables.&lt;/li&gt; &#xA; &lt;li&gt;Your torch device will be automatically detected, but you can override this. For example, &lt;code&gt;TORCH_DEVICE=cuda&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interactive App&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve included a streamlit app that lets you interactively try Surya on images or PDF files. Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install streamlit&#xA;surya_gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OCR (text recognition)&lt;/h2&gt; &#xA;&lt;p&gt;This command will write out a json file with the detected text and bboxes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;surya_ocr DATA_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_PATH&lt;/code&gt; can be an image, pdf, or folder of images/pdfs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--langs&lt;/code&gt; is an optional (but recommended) argument that specifies the language(s) to use for OCR. You can comma separate multiple languages. Use the language name or two-letter ISO code from &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes&#34;&gt;here&lt;/a&gt;. Surya supports the 90+ languages found in &lt;code&gt;surya/languages.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--lang_file&lt;/code&gt; if you want to use a different language for different PDFs/images, you can optionally specify languages in a file. The format is a JSON dict with the keys being filenames and the values as a list, like &lt;code&gt;{&#34;file1.pdf&#34;: [&#34;en&#34;, &#34;hi&#34;], &#34;file2.pdf&#34;: [&#34;en&#34;]}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--images&lt;/code&gt; will save images of the pages and detected text lines (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; specifies the directory to save results to instead of the default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; specifies the maximum number of pages to process if you don&#39;t want to process everything&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--start_page&lt;/code&gt; specifies the page number to start processing from&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;results.json&lt;/code&gt; file will contain a json dictionary where the keys are the input filenames without extensions. Each value will be a list of dictionaries, one per page of the input document. Each page dictionary contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;text_lines&lt;/code&gt; - the detected text and bounding boxes for each line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;text&lt;/code&gt; - the text in the line&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;confidence&lt;/code&gt; - the confidence of the model in the detected text (0-1)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polygon&lt;/code&gt; - the polygon for the text line in (x1, y1), (x2, y2), (x3, y3), (x4, y4) format. The points are in clockwise order from the top left.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the axis-aligned rectangle for the text line in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;languages&lt;/code&gt; - the languages specified for the page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;page&lt;/code&gt; - the page number in the file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image_bbox&lt;/code&gt; - the bbox for the image in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner. All line bboxes will be contained within this bbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Performance tips&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;RECOGNITION_BATCH_SIZE&lt;/code&gt; env var properly will make a big difference when using a GPU. Each batch item will use &lt;code&gt;40MB&lt;/code&gt; of VRAM, so very high batch sizes are possible. The default is a batch size &lt;code&gt;512&lt;/code&gt;, which will use about 20GB of VRAM. Depending on your CPU core count, it may help, too - the default CPU batch size is &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import Image&#xA;from surya.ocr import run_ocr&#xA;from surya.model.detection.model import load_model as load_det_model, load_processor as load_det_processor&#xA;from surya.model.recognition.model import load_model as load_rec_model&#xA;from surya.model.recognition.processor import load_processor as load_rec_processor&#xA;&#xA;image = Image.open(IMAGE_PATH)&#xA;langs = [&#34;en&#34;] # Replace with your languages - optional but recommended&#xA;det_processor, det_model = load_det_processor(), load_det_model()&#xA;rec_model, rec_processor = load_rec_model(), load_rec_processor()&#xA;&#xA;predictions = run_ocr([image], [langs], det_model, det_processor, rec_model, rec_processor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compilation&lt;/h3&gt; &#xA;&lt;p&gt;The OCR model can be compiled to get an ~15% speedup in total inference time. The first run will be slow while it compiles, though. First set &lt;code&gt;RECOGNITION_STATIC_CACHE=true&lt;/code&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;&#xA;rec_model.decoder.model = torch.compile(rec_model.decoder.model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Text line detection&lt;/h2&gt; &#xA;&lt;p&gt;This command will write out a json file with the detected bboxes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;surya_detect DATA_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_PATH&lt;/code&gt; can be an image, pdf, or folder of images/pdfs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--images&lt;/code&gt; will save images of the pages and detected text lines (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; specifies the maximum number of pages to process if you don&#39;t want to process everything&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; specifies the directory to save results to instead of the default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;results.json&lt;/code&gt; file will contain a json dictionary where the keys are the input filenames without extensions. Each value will be a list of dictionaries, one per page of the input document. Each page dictionary contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bboxes&lt;/code&gt; - detected bounding boxes for text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the axis-aligned rectangle for the text line in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polygon&lt;/code&gt; - the polygon for the text line in (x1, y1), (x2, y2), (x3, y3), (x4, y4) format. The points are in clockwise order from the top left.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;confidence&lt;/code&gt; - the confidence of the model in the detected text (0-1)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vertical_lines&lt;/code&gt; - vertical lines detected in the document &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the axis-aligned line coordinates.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;page&lt;/code&gt; - the page number in the file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image_bbox&lt;/code&gt; - the bbox for the image in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner. All line bboxes will be contained within this bbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Performance tips&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;DETECTOR_BATCH_SIZE&lt;/code&gt; env var properly will make a big difference when using a GPU. Each batch item will use &lt;code&gt;440MB&lt;/code&gt; of VRAM, so very high batch sizes are possible. The default is a batch size &lt;code&gt;36&lt;/code&gt;, which will use about 16GB of VRAM. Depending on your CPU core count, it might help, too - the default CPU batch size is &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import Image&#xA;from surya.detection import batch_text_detection&#xA;from surya.model.detection.model import load_model, load_processor&#xA;&#xA;image = Image.open(IMAGE_PATH)&#xA;model, processor = load_model(), load_processor()&#xA;&#xA;# predictions is a list of dicts, one per image&#xA;predictions = batch_text_detection([image], model, processor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Layout analysis&lt;/h2&gt; &#xA;&lt;p&gt;This command will write out a json file with the detected layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;surya_layout DATA_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_PATH&lt;/code&gt; can be an image, pdf, or folder of images/pdfs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--images&lt;/code&gt; will save images of the pages and detected text lines (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; specifies the maximum number of pages to process if you don&#39;t want to process everything&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; specifies the directory to save results to instead of the default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;results.json&lt;/code&gt; file will contain a json dictionary where the keys are the input filenames without extensions. Each value will be a list of dictionaries, one per page of the input document. Each page dictionary contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bboxes&lt;/code&gt; - detected bounding boxes for text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the axis-aligned rectangle for the text line in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;polygon&lt;/code&gt; - the polygon for the text line in (x1, y1), (x2, y2), (x3, y3), (x4, y4) format. The points are in clockwise order from the top left.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;confidence&lt;/code&gt; - the confidence of the model in the detected text (0-1). This is currently not very reliable.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;label&lt;/code&gt; - the label for the bbox. One of &lt;code&gt;Caption&lt;/code&gt;, &lt;code&gt;Footnote&lt;/code&gt;, &lt;code&gt;Formula&lt;/code&gt;, &lt;code&gt;List-item&lt;/code&gt;, &lt;code&gt;Page-footer&lt;/code&gt;, &lt;code&gt;Page-header&lt;/code&gt;, &lt;code&gt;Picture&lt;/code&gt;, &lt;code&gt;Figure&lt;/code&gt;, &lt;code&gt;Section-header&lt;/code&gt;, &lt;code&gt;Table&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, &lt;code&gt;Title&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;page&lt;/code&gt; - the page number in the file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image_bbox&lt;/code&gt; - the bbox for the image in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner. All line bboxes will be contained within this bbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Performance tips&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;DETECTOR_BATCH_SIZE&lt;/code&gt; env var properly will make a big difference when using a GPU. Each batch item will use &lt;code&gt;400MB&lt;/code&gt; of VRAM, so very high batch sizes are possible. The default is a batch size &lt;code&gt;36&lt;/code&gt;, which will use about 16GB of VRAM. Depending on your CPU core count, it might help, too - the default CPU batch size is &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import Image&#xA;from surya.detection import batch_text_detection&#xA;from surya.layout import batch_layout_detection&#xA;from surya.model.detection.model import load_model, load_processor&#xA;from surya.settings import settings&#xA;&#xA;image = Image.open(IMAGE_PATH)&#xA;model = load_model(checkpoint=settings.LAYOUT_MODEL_CHECKPOINT)&#xA;processor = load_processor(checkpoint=settings.LAYOUT_MODEL_CHECKPOINT)&#xA;det_model = load_model()&#xA;det_processor = load_processor()&#xA;&#xA;# layout_predictions is a list of dicts, one per image&#xA;line_predictions = batch_text_detection([image], det_model, det_processor)&#xA;layout_predictions = batch_layout_detection([image], model, processor, line_predictions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading order&lt;/h2&gt; &#xA;&lt;p&gt;This command will write out a json file with the detected reading order and layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;surya_order DATA_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_PATH&lt;/code&gt; can be an image, pdf, or folder of images/pdfs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--images&lt;/code&gt; will save images of the pages and detected text lines (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; specifies the maximum number of pages to process if you don&#39;t want to process everything&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; specifies the directory to save results to instead of the default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;results.json&lt;/code&gt; file will contain a json dictionary where the keys are the input filenames without extensions. Each value will be a list of dictionaries, one per page of the input document. Each page dictionary contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bboxes&lt;/code&gt; - detected bounding boxes for text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the axis-aligned rectangle for the text line in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;position&lt;/code&gt; - the position in the reading order of the bbox, starting from 0.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;label&lt;/code&gt; - the label for the bbox. See the layout section of the documentation for a list of potential labels.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;page&lt;/code&gt; - the page number in the file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image_bbox&lt;/code&gt; - the bbox for the image in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner. All line bboxes will be contained within this bbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Performance tips&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;ORDER_BATCH_SIZE&lt;/code&gt; env var properly will make a big difference when using a GPU. Each batch item will use &lt;code&gt;360MB&lt;/code&gt; of VRAM, so very high batch sizes are possible. The default is a batch size &lt;code&gt;32&lt;/code&gt;, which will use about 11GB of VRAM. Depending on your CPU core count, it might help, too - the default CPU batch size is &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import Image&#xA;from surya.ordering import batch_ordering&#xA;from surya.model.ordering.processor import load_processor&#xA;from surya.model.ordering.model import load_model&#xA;&#xA;image = Image.open(IMAGE_PATH)&#xA;# bboxes should be a list of lists with layout bboxes for the image in [x1,y1,x2,y2] format&#xA;# You can get this from the layout model, see above for usage&#xA;bboxes = [bbox1, bbox2, ...]&#xA;&#xA;model = load_model()&#xA;processor = load_processor()&#xA;&#xA;# order_predictions will be a list of dicts, one per image&#xA;order_predictions = batch_ordering([image], [bboxes], model, processor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table Recognition&lt;/h2&gt; &#xA;&lt;p&gt;This command will write out a json file with the detected table cells and row/column ids, along with row/column bounding boxes. If you want to get a formatted markdown table, check out the &lt;a href=&#34;https://www.github.com/VikParuchuri/tabled&#34;&gt;tabled&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;surya_table DATA_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_PATH&lt;/code&gt; can be an image, pdf, or folder of images/pdfs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--images&lt;/code&gt; will save images of the pages and detected table cells + rows and columns (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; specifies the maximum number of pages to process if you don&#39;t want to process everything&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; specifies the directory to save results to instead of the default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--detect_boxes&lt;/code&gt; specifies if cells should be detected. By default, they&#39;re pulled out of the PDF, but this is not always possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--skip_table_detection&lt;/code&gt; tells table recognition not to detect tables first. Use this if your image is already cropped to a table.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;results.json&lt;/code&gt; file will contain a json dictionary where the keys are the input filenames without extensions. Each value will be a list of dictionaries, one per page of the input document. Each page dictionary contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rows&lt;/code&gt; - detected table rows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the bounding box of the table row&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;row_id&lt;/code&gt; - the id of the row&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cols&lt;/code&gt; - detected table columns &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the bounding box of the table column&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;col_id&lt;/code&gt;- the id of the column&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cells&lt;/code&gt; - detected table cells &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bbox&lt;/code&gt; - the axis-aligned rectangle for the text line in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;text&lt;/code&gt; - if text could be pulled out of the pdf, the text of this cell.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;page&lt;/code&gt; - the page number in the file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;table_idx&lt;/code&gt; - the index of the table on the page (sorted in vertical order)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image_bbox&lt;/code&gt; - the bbox for the image in (x1, y1, x2, y2) format. (x1, y1) is the top left corner, and (x2, y2) is the bottom right corner. All line bboxes will be contained within this bbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Performance tips&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;TABLE_REC_BATCH_SIZE&lt;/code&gt; env var properly will make a big difference when using a GPU. Each batch item will use &lt;code&gt;150MB&lt;/code&gt; of VRAM, so very high batch sizes are possible. The default is a batch size &lt;code&gt;64&lt;/code&gt;, which will use about 10GB of VRAM. Depending on your CPU core count, it might help, too - the default CPU batch size is &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Limitations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is specialized for document OCR. It will likely not work on photos or other images.&lt;/li&gt; &#xA; &lt;li&gt;It is for printed text, not handwriting (though it may work on some handwriting).&lt;/li&gt; &#xA; &lt;li&gt;The text detection model has trained itself to ignore advertisements.&lt;/li&gt; &#xA; &lt;li&gt;You can find language support for OCR in &lt;code&gt;surya/languages.py&lt;/code&gt;. Text detection, layout analysis, and reading order will work with any language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If OCR isn&#39;t working properly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try increasing resolution of the image so the text is bigger. If the resolution is already very high, try decreasing it to no more than a &lt;code&gt;2048px&lt;/code&gt; width.&lt;/li&gt; &#xA; &lt;li&gt;Preprocessing the image (binarizing, deskewing, etc) can help with very old/blurry images.&lt;/li&gt; &#xA; &lt;li&gt;You can adjust &lt;code&gt;DETECTOR_BLANK_THRESHOLD&lt;/code&gt; and &lt;code&gt;DETECTOR_TEXT_THRESHOLD&lt;/code&gt; if you don&#39;t get good results. &lt;code&gt;DETECTOR_BLANK_THRESHOLD&lt;/code&gt; controls the space between lines - any prediction below this number will be considered blank space. &lt;code&gt;DETECTOR_TEXT_THRESHOLD&lt;/code&gt; controls how text is joined - any number above this is considered text. &lt;code&gt;DETECTOR_TEXT_THRESHOLD&lt;/code&gt; should always be higher than &lt;code&gt;DETECTOR_BLANK_THRESHOLD&lt;/code&gt;, and both should be in the 0-1 range. Looking at the heatmap from the debug output of the detector can tell you how to adjust these (if you see faint things that look like boxes, lower the thresholds, and if you see bboxes being joined together, raise the thresholds).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Manual install&lt;/h1&gt; &#xA;&lt;p&gt;If you want to develop surya, you can install it manually:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/VikParuchuri/surya.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd surya&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;poetry install&lt;/code&gt; - installs main and dev dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;poetry shell&lt;/code&gt; - activates the virtual environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;h2&gt;OCR&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/benchmark_rec_chart.png&#34; alt=&#34;Benchmark chart tesseract&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Time per page (s)&lt;/th&gt; &#xA;   &lt;th&gt;Avg similarity (⬆)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;surya&lt;/td&gt; &#xA;   &lt;td&gt;.62&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tesseract&lt;/td&gt; &#xA;   &lt;td&gt;.45&lt;/td&gt; &#xA;   &lt;td&gt;0.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/rec_acc_table.png&#34;&gt;Full language results&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tesseract is CPU-based, and surya is CPU or GPU. I tried to cost-match the resources used, so I used a 1xA6000 (48GB VRAM) for surya, and 28 CPU cores for Tesseract (same price on Lambda Labs/DigitalOcean).&lt;/p&gt; &#xA;&lt;h3&gt;Google Cloud Vision&lt;/h3&gt; &#xA;&lt;p&gt;I benchmarked OCR against Google Cloud vision since it has similar language coverage to Surya.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/gcloud_rec_bench.png&#34; alt=&#34;Benchmark chart google cloud&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/gcloud_full_langs.png&#34;&gt;Full language results&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I measured normalized sentence similarity (0-1, higher is better) based on a set of real-world and synthetic pdfs. I sampled PDFs from common crawl, then filtered out the ones with bad OCR. I couldn&#39;t find PDFs for some languages, so I also generated simple synthetic PDFs for those.&lt;/p&gt; &#xA;&lt;p&gt;I used the reference line bboxes from the PDFs with both tesseract and surya, to just evaluate the OCR quality.&lt;/p&gt; &#xA;&lt;p&gt;For Google Cloud, I aligned the output from Google Cloud with the ground truth. I had to skip RTL languages since they didn&#39;t align well.&lt;/p&gt; &#xA;&lt;h2&gt;Text line detection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/benchmark_chart_small.png&#34; alt=&#34;Benchmark chart&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Time (s)&lt;/th&gt; &#xA;   &lt;th&gt;Time per page (s)&lt;/th&gt; &#xA;   &lt;th&gt;precision&lt;/th&gt; &#xA;   &lt;th&gt;recall&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;surya&lt;/td&gt; &#xA;   &lt;td&gt;50.2099&lt;/td&gt; &#xA;   &lt;td&gt;0.196133&lt;/td&gt; &#xA;   &lt;td&gt;0.821061&lt;/td&gt; &#xA;   &lt;td&gt;0.956556&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tesseract&lt;/td&gt; &#xA;   &lt;td&gt;74.4546&lt;/td&gt; &#xA;   &lt;td&gt;0.290838&lt;/td&gt; &#xA;   &lt;td&gt;0.631498&lt;/td&gt; &#xA;   &lt;td&gt;0.997694&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Tesseract is CPU-based, and surya is CPU or GPU. I ran the benchmarks on a system with an A10 GPU, and a 32 core CPU. This was the resource usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tesseract - 32 CPU cores, or 8 workers using 4 cores each&lt;/li&gt; &#xA; &lt;li&gt;surya - 36 batch size, for 16GB VRAM usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Surya predicts line-level bboxes, while tesseract and others predict word-level or character-level. It&#39;s hard to find 100% correct datasets with line-level annotations. Merging bboxes can be noisy, so I chose not to use IoU as the metric for evaluation.&lt;/p&gt; &#xA;&lt;p&gt;I instead used coverage, which calculates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Precision - how well the predicted bboxes cover ground truth bboxes&lt;/li&gt; &#xA; &lt;li&gt;Recall - how well ground truth bboxes cover predicted bboxes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;First calculate coverage for each bbox, then add a small penalty for double coverage, since we want the detection to have non-overlapping bboxes. Anything with a coverage of 0.5 or higher is considered a match.&lt;/p&gt; &#xA;&lt;p&gt;Then we calculate precision and recall for the whole dataset.&lt;/p&gt; &#xA;&lt;h2&gt;Layout analysis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VikParuchuri/surya/master/static/images/benchmark_layout_chart.png&#34; alt=&#34;Benchmark chart&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Layout Type&lt;/th&gt; &#xA;   &lt;th&gt;precision&lt;/th&gt; &#xA;   &lt;th&gt;recall&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;   &lt;td&gt;0.96&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Table&lt;/td&gt; &#xA;   &lt;td&gt;0.99&lt;/td&gt; &#xA;   &lt;td&gt;0.99&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;0.9&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Title&lt;/td&gt; &#xA;   &lt;td&gt;0.94&lt;/td&gt; &#xA;   &lt;td&gt;0.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Time per image - .4 seconds on GPU (A10).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I benchmarked the layout analysis on &lt;a href=&#34;https://github.com/ibm-aur-nlp/PubLayNet&#34;&gt;Publaynet&lt;/a&gt;, which was not in the training data. I had to align publaynet labels with the surya layout labels. I was then able to find coverage for each layout type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Precision - how well the predicted bboxes cover ground truth bboxes&lt;/li&gt; &#xA; &lt;li&gt;Recall - how well ground truth bboxes cover predicted bboxes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reading Order&lt;/h2&gt; &#xA;&lt;p&gt;75% mean accuracy, and .14 seconds per image on an A6000 GPU. See methodology for notes - this benchmark is not perfect measure of accuracy, and is more useful as a sanity check.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I benchmarked the reading order on the layout dataset from &lt;a href=&#34;https://www.icst.pku.edu.cn/cpdp/sjzy/&#34;&gt;here&lt;/a&gt;, which was not in the training data. Unfortunately, this dataset is fairly noisy, and not all the labels are correct. It was very hard to find a dataset annotated with reading order and also layout information. I wanted to avoid using a cloud service for the ground truth.&lt;/p&gt; &#xA;&lt;p&gt;The accuracy is computed by finding if each pair of layout boxes is in the correct order, then taking the % that are correct.&lt;/p&gt; &#xA;&lt;h2&gt;Table Recognition&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Row Intersection&lt;/th&gt; &#xA;   &lt;th&gt;Col Intersection&lt;/th&gt; &#xA;   &lt;th&gt;Time Per Image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Surya&lt;/td&gt; &#xA;   &lt;td&gt;0.97&lt;/td&gt; &#xA;   &lt;td&gt;0.93&lt;/td&gt; &#xA;   &lt;td&gt;0.03&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Table transformer&lt;/td&gt; &#xA;   &lt;td&gt;0.72&lt;/td&gt; &#xA;   &lt;td&gt;0.84&lt;/td&gt; &#xA;   &lt;td&gt;0.02&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Higher is better for intersection, which the percentage of the actual row/column overlapped by the predictions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The benchmark uses a subset of &lt;a href=&#34;https://developer.ibm.com/exchanges/data/all/fintabnet/&#34;&gt;Fintabnet&lt;/a&gt; from IBM. It has labeled rows and columns. After table recognition is run, the predicted rows and columns are compared to the ground truth. There is an additional penalty for predicting too many or too few rows/columns.&lt;/p&gt; &#xA;&lt;h2&gt;Running your own benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;You can benchmark the performance of surya on your machine.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the manual install instructions above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;poetry install --group dev&lt;/code&gt; - installs dev dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Text line detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will evaluate tesseract and surya for text line detection across a randomly sampled set of images from &lt;a href=&#34;https://huggingface.co/datasets/vikp/doclaynet_bench&#34;&gt;doclaynet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python benchmark/detection.py --max 256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; controls how many images to process for the benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--debug&lt;/code&gt; will render images and detected bboxes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--pdf_path&lt;/code&gt; will let you specify a pdf to benchmark instead of the default data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; will let you specify a directory to save results to instead of the default one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Text recognition&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will evaluate surya and optionally tesseract on multilingual pdfs from common crawl (with synthetic data for missing languages).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python benchmark/recognition.py --tesseract&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--max&lt;/code&gt; controls how many images to process for the benchmark&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--debug 2&lt;/code&gt; will render images with detected text&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--results_dir&lt;/code&gt; will let you specify a directory to save results to instead of the default one&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--tesseract&lt;/code&gt; will run the benchmark with tesseract. You have to run &lt;code&gt;sudo apt-get install tesseract-ocr-all&lt;/code&gt; to install all tesseract data, and set &lt;code&gt;TESSDATA_PREFIX&lt;/code&gt; to the path to the tesseract data folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;RECOGNITION_BATCH_SIZE=864&lt;/code&gt; to use the same batch size as the benchmark.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;RECOGNITION_BENCH_DATASET_NAME=vikp/rec_bench_hist&lt;/code&gt; to use the historical document data for benchmarking. This data comes from the &lt;a href=&#34;https://github.com/HTR-United/tapuscorpus&#34;&gt;tapuscorpus&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Layout analysis&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will evaluate surya on the publaynet dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python benchmark/layout.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; controls how many images to process for the benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--debug&lt;/code&gt; will render images with detected text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; will let you specify a directory to save results to instead of the default one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reading Order&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python benchmark/ordering.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; controls how many images to process for the benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--debug&lt;/code&gt; will render images with detected text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; will let you specify a directory to save results to instead of the default one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table Recognition&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python benchmark/table_recognition.py --max 1024 --tatr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--max&lt;/code&gt; controls how many images to process for the benchmark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--debug&lt;/code&gt; will render images with detected text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--results_dir&lt;/code&gt; will let you specify a directory to save results to instead of the default one&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--tatr&lt;/code&gt; specifies whether to also run table transformer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Training&lt;/h1&gt; &#xA;&lt;p&gt;Text detection was trained on 4x A6000s for 3 days. It used a diverse set of images as training data. It was trained from scratch using a modified efficientvit architecture for semantic segmentation.&lt;/p&gt; &#xA;&lt;p&gt;Text recognition was trained on 4x A6000s for 2 weeks. It was trained using a modified donut model (GQA, MoE layer, UTF-16 decoding, layer config changes).&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;p&gt;This work would not have been possible without amazing open source AI work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2105.15203.pdf&#34;&gt;Segformer&lt;/a&gt; from NVIDIA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mit-han-lab/efficientvit&#34;&gt;EfficientViT&lt;/a&gt; from MIT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/pytorch-image-models&#34;&gt;timm&lt;/a&gt; from Ross Wightman&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clovaai/donut&#34;&gt;Donut&lt;/a&gt; from Naver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;transformers&lt;/a&gt; from huggingface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clovaai/CRAFT-pytorch&#34;&gt;CRAFT&lt;/a&gt;, a great scene text detection model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you to everyone who makes open source AI possible.&lt;/p&gt;</summary>
  </entry>
</feed>