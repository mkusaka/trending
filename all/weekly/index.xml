<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:01:52Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sunym1993/flash-linux0.11-talk</title>
    <updated>2022-07-31T02:01:52Z</updated>
    <id>tag:github.com,2022-07-31:/sunym1993/flash-linux0.11-talk</id>
    <link href="https://github.com/sunym1993/flash-linux0.11-talk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;你管这破玩意叫操作系统源码 — 像小说一样品读 Linux 0.11 核心代码&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;品读 Linux 0.11 核心代码&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.github.com/sunym1993&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/作者-闪客sun-2277cc.svg?style=flat-square&amp;amp;logo=GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://user-images.githubusercontent.com/25787738/141248489-c7dc20c1-cc5d-4a2d-bb5d-b5d8f9182058.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/公众号-低并发编程-009977.svg?style=flat-square&amp;amp;logo=WeChat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：带大家把 Linux 0.11 核心代码与操作系统的设计思想啃下来&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;首发地址&lt;/strong&gt;：公众号 低并发编程&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25787738/141248489-c7dc20c1-cc5d-4a2d-bb5d-b5d8f9182058.jpg&#34; alt=&#34;qrcode_for_gh_711c6efc893a_258&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;发文时间&lt;/strong&gt;：每周一和每周四&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;互动方式&lt;/strong&gt;：微信群（关注公众号并回复“os”）&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;创作番外故事&lt;/strong&gt;：&lt;a href=&#34;https://mp.weixin.qq.com/s/NFUgJ4-hIyrs1sQr8AUCvA&#34;&gt;知识星球&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;开篇词&lt;/strong&gt;：&lt;a href=&#34;https://mp.weixin.qq.com/s/tvbkGLfhDq03xxM-FZ4zuA&#34;&gt;闪客新系列！你管这破玩意叫操作系统源码&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;一些非必须的资料&lt;/strong&gt;：&lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk/tree/main/%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%BF%85%E8%A6%81%E7%9A%84%E8%B5%84%E6%96%99&#34;&gt;资料包&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;一些共性的问题&lt;/strong&gt;：&lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk/tree/main/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;一些读者分享和见解&lt;/strong&gt;：&lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk/tree/main/%E8%AF%BB%E8%80%85%E5%88%86%E4%BA%AB&#34;&gt;读者分享&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;还有个有趣的事情大家可以共同参与进来&lt;/strong&gt;：&lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk/tree/main/Intel%20%E6%89%8B%E5%86%8C%E4%B8%AD%E6%96%87%E7%89%88&#34;&gt;Intel手册翻译计划&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;当然，欢迎大家一同维护这个项目，有关操作系统普及的各种信息，都可以发起 PR 提交&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;架构图&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25787738/163914291-4aba48d7-f49e-4557-a4c4-d9ff07a20894.png&#34; alt=&#34;架构图&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;已发布文章：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/tvbkGLfhDq03xxM-FZ4zuA&#34;&gt;开篇词&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;第一部分：进入内核前的苦力活&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/LIsqRX51W7d_yw-HN-s2DA&#34;&gt;第1回 最开始的两行代码&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/U-txDYt0YqLh5EeFOcB4NQ&#34;&gt;第2回 自己给自己挪个地儿&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/90QBJ-lP_-du2qQJxNF-Fw&#34;&gt;第3回 做好最最基础的准备工作&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/hStc-y-sabP-KwJUDUesTw&#34;&gt;第4回 把自己在硬盘里的其他部分也放到内存来&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/5s_nmrWRZbA_4mkNKOQ2Cg&#34;&gt;第5回 进入保护模式前的最后一次折腾内存&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/p1a6QxYZyMpJF__uBSE1Kg&#34;&gt;第6回 先解决段寄存器的历史包袱问题&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/S5zarr9BmLhUHAmdmeNypA&#34;&gt;第7回 六行代码就进入了保护模式&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ssQKFMehxZxWT9i6mdRtXg&#34;&gt;第8回 烦死了又要重新设置一遍 idt 和 gdt&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/q2wU9IbX54t_GAuc9V5r7A&#34;&gt;第9回 Intel 内存管理两板斧：分段与分页&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ISyaX5zPWRw_d-9zvZUPUg&#34;&gt;第10回 进入 main 函数前的最后一跃！&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/8bP3feeF_A13j7ysWur_JQ&#34;&gt;第一部分总结与回顾&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;第二部分：大战前期的初始化工作&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/kYBrMgHt7C9EmAcwJIPIxg&#34;&gt;第11回 整个操作系统就20几行代码&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/eoBFcgm0QrHOVi_WoS7PwA&#34;&gt;第12回 管理内存前先划分出三个边界值&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/_rTmjHIDCV9ADiJlfo5B3g&#34;&gt;第13回 主内存初始化 mem_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/sFp_388qRncB-jpJeRzCGQ&#34;&gt;第14回 中断初始化 trap_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/pIbVY1XPCktxGogc4lI1Bw&#34;&gt;第15回 块设备请求项初始化 blk_dev_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/yIrzEWUUuZC9OsiuU_lOaw&#34;&gt;第16回 控制台初始化 tty_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/y26MMfj8pP5PmbKDZBT5-A&#34;&gt;第17回 时间初始化 time_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/j4FYWUSX_2gpDb_h4vEFqQ&#34;&gt;第18回 进程调度初始化 sched_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/X8BSbf1qShS11_fzfyOhTg&#34;&gt;第19回 缓冲区初始化 buffer_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/803C9jHxIe42i9BrNzEvPA&#34;&gt;第20回 硬盘初始化 hd_init&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Hf9B1ww1wFxiUDkWb0obeQ&#34;&gt;第二部分总结与回顾&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;第三部分：一个新进程的诞生&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/H_OCZ2ZtGHWHge_rYKCkJw&#34;&gt;第21回 新进程诞生全局概述&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/AVl6R2N9d_sldkhfvC6aEw&#34;&gt;第22回 从内核态切换到用户态&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Sf9vV7RCnVDlBKXx5jXs1Q&#34;&gt;第23回 如果让你来设计进程调度&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/yFre8Qv_ZCtjRkTS49n6rw&#34;&gt;第24回 从一次定时器滴答来看进程调度&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rYBSH_AZDwgc8knSKDSSxA&#34;&gt;第25回 通过 fork 看一次系统调用流程&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/8cy-xX3ekeqHelrFcYFkvw&#34;&gt;第26回 fork 中进程基本信息的复制&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/d2pHFSbTLb-nv2C_RfKlVA&#34;&gt;第27回 fork 中进程内存规划的问题&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/V_Ryxox3iDCO994FzkSFfA&#34;&gt;第三部分总结与回顾&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/JzCy_4RPhy17_G6KbY3f2g&#34;&gt;第28回 番外篇 - 我居然会认为权威书籍写错了...&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/NFUgJ4-hIyrs1sQr8AUCvA&#34;&gt;第29回 番外篇 - 让我们一起来写本书？&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Pdnmys_hGoToZN193rfnoQ&#34;&gt;第30回 番外篇 - 写时复制就这么几行代码&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;第四部分：shell 程序的到来&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502161&amp;amp;idx=1&amp;amp;sn=219186a1e587f40308515852d293aaf4&amp;amp;chksm=c2c5b3fcf5b23aead170092d4042abd54b272694cbaac3f750eb3adea584ee29653c72ad2915&amp;amp;scene=21#wechat_redirect&#34;&gt;第31回 | 拿到硬盘信息&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502181&amp;amp;idx=1&amp;amp;sn=b6dcbd1d2cf930002852008a1c4e6a65&amp;amp;chksm=c2c5b3c8f5b23ade1532b725995dbc3b0138202555e44a6e308b84d668a2ef3041eb5cf77f86&amp;amp;scene=21#wechat_redirect&#34;&gt;第32回 | 加载根文件系统&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502230&amp;amp;idx=1&amp;amp;sn=44e023bf0b9b37261e35a6e3722bc57f&amp;amp;chksm=c2c5b33bf5b23a2d10a9dd36606c497f41a1c3dced57845ce7ef12741a348fab82beba462a8a&amp;amp;scene=21#wechat_redirect&#34;&gt;第33回 | 打开终端设备文件&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502269&amp;amp;idx=1&amp;amp;sn=19f6831de5bac0d8a588b80757dbb1f4&amp;amp;chksm=c2c5b310f5b23a0633df6a75e36f4dae515e9d9aee1fa046888573e3d60e62752612edae536a&amp;amp;scene=21#wechat_redirect&#34;&gt;第34回 | 进程2的创建&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502475&amp;amp;idx=1&amp;amp;sn=4fcdbaa03bf6a1ca04db4013309c6aa3&amp;amp;chksm=c2c5b026f5b2393049efca68c429df5038fa0f317eea79fbd9ec2c661c3ec12b47a0701376a7&amp;amp;scene=21#wechat_redirect&#34;&gt;第35回 | execve 加载并执行 shell 程序&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502511&amp;amp;idx=1&amp;amp;sn=eacddbb11dd2402c561a611f708ee045&amp;amp;chksm=c2c5b002f5b23914ccd645d94bdc59e0322776f71f41e6744fddeca2bfa027d12a25ec6bfc8a&amp;amp;scene=21#wechat_redirect&#34;&gt;第36回 | 缺页中断&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502581&amp;amp;idx=1&amp;amp;sn=df3f2c19ce511ac24145091892f47837&amp;amp;chksm=c2c5b058f5b2394ee095d679071b43c23853dc86d5cfd4cc961568643110ab734f635b899984&amp;amp;scene=21#wechat_redirect&#34;&gt;第37回 | shell 程序跑起来了&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502613&amp;amp;idx=1&amp;amp;sn=d7e85595323d3de138e5ac52bf8e61dd&amp;amp;chksm=c2c5b1b8f5b238ae8785f45bf83434839689e7e5a697026d9ebde5738f11a83c4379a16c349f&amp;amp;scene=21#wechat_redirect&#34;&gt;第38回 | 操作系统启动完毕&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502498&amp;amp;idx=1&amp;amp;sn=01cf816694f74ca8437374a9aa23ab64&amp;amp;chksm=c2c5b00ff5b23919c43ac96a38bc8b09f42ea17f92ea933157db3e7f0c77bb876bf7d0524afa&amp;amp;scene=21#wechat_redirect&#34;&gt;第39回 | 番外篇 - Linux 0.11 内核调试&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502517&amp;amp;idx=1&amp;amp;sn=d6a20fb6ad50da584ac32e60823a1834&amp;amp;chksm=c2c5b018f5b2390e690c465aa35d822d14a23a2b76587303e9374aca431a718e1b104569efe4&amp;amp;scene=21#wechat_redirect&#34;&gt;第40回 | 番外篇 - 为什么你怎么看也看不懂&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502650&amp;amp;idx=1&amp;amp;sn=ad947d70d372a1bc46741c459fd0ef9a&amp;amp;chksm=c2c5b197f5b23881a5e61c5581300beb4b3f1db8cab79eabec22fd847f1cdc0e11d3a713fd9f&amp;amp;scene=21#wechat_redirect&#34;&gt;第四部分总结与回顾&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;第五部分：从一个命令的执行看操作系统各模块的运作&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502821&amp;amp;idx=1&amp;amp;sn=0ffa47028dfa013ead148f06d90fbb33&amp;amp;chksm=c2c5b148f5b2385e7d3f213517eb387ff85a1d94977788a2558e31194c5dcd0afb003c98ecaf&amp;amp;scene=21#wechat_redirect&#34;&gt;第41回 | 番外篇 - 跳票是不可能的&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502876&amp;amp;idx=1&amp;amp;sn=2c34491abd6ea14c9c7ccc3d2d9827c1&amp;amp;chksm=c2c5b6b1f5b23fa7bdf9c3e2bf811b84da937d30a2c9825ceba8a57c2c3e8e157dedae0bfc8d&amp;amp;scene=21#wechat_redirect&#34;&gt;第42回 | 用键盘输入一条命令&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247502944&amp;amp;idx=1&amp;amp;sn=cf2601b43a4bc3f89d7a517cbf7fd588&amp;amp;chksm=c2c5b6cdf5b23fdb306af852e9293bb64df019bffa3c403e6fa59b856b7bddd77a42e5fc75eb&amp;amp;scene=21#wechat_redirect&#34;&gt;第43回 | shell 程序读取你的命令&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/HFQL5d-C24DKjQbYAQfl8g&#34;&gt;第44回 | 进程的阻塞与唤醒&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;第六部分：操作系统哲学与思想&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Asabeneh/30-Days-Of-Python</title>
    <updated>2022-07-31T02:01:52Z</updated>
    <id>tag:github.com,2022-07-31:/Asabeneh/30-Days-Of-Python</id>
    <link href="https://github.com/Asabeneh/30-Days-Of-Python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🐍 30 Days Of Python&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;# Day&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Topics&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/readme.md&#34;&gt;Introduction&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Variables, Built-in Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/03_Day_Operators/03_operators.md&#34;&gt;Operators&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/04_Day_Strings/04_strings.md&#34;&gt;Strings&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/05_Day_Lists/05_lists.md&#34;&gt;Lists&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/06_Day_Tuples/06_tuples.md&#34;&gt;Tuples&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/07_Day_Sets/07_sets.md&#34;&gt;Sets&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/08_Day_Dictionaries/08_dictionaries.md&#34;&gt;Dictionaries&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/09_Day_Conditionals/09_conditionals.md&#34;&gt;Conditionals&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/10_Day_Loops/10_loops.md&#34;&gt;Loops&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/11_Day_Functions/11_functions.md&#34;&gt;Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/12_Day_Modules/12_modules.md&#34;&gt;Modules&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/13_Day_List_comprehension/13_list_comprehension.md&#34;&gt;List Comprehension&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/14_Day_Higher_order_functions/14_higher_order_functions.md&#34;&gt;Higher Order Functions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/15_Day_Python_type_errors/15_python_type_errors.md&#34;&gt;Python Type Errors&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/16_Day_Python_date_time/16_python_datetime.md&#34;&gt;Python Date time&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/17_Day_Exception_handling/17_exception_handling.md&#34;&gt;Exception Handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/18_Day_Regular_expressions/18_regular_expressions.md&#34;&gt;Regular Expressions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/19_Day_File_handling/19_file_handling.md&#34;&gt;File Handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/20_Day_Python_package_manager/20_python_package_manager.md&#34;&gt;Python Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/21_Day_Classes_and_objects/21_classes_and_objects.md&#34;&gt;Classes and Objects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/22_Day_Web_scraping/22_web_scraping.md&#34;&gt;Web Scraping&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/23_Day_Virtual_environment/23_virtual_environment.md&#34;&gt;Virtual Environment&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/24_Day_Statistics/24_statistics.md&#34;&gt;Statistics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/25_Day_Pandas/25_pandas.md&#34;&gt;Pandas&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/26_Day_Python_web/26_python_web.md&#34;&gt;Python web&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/27_Day_Python_with_mongodb/27_python_with_mongodb.md&#34;&gt;Python with MongoDB&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/28_Day_API/28_API.md&#34;&gt;API&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/29_Day_Building_API/29_building_API.md&#34;&gt;Building API&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/30_Day_Conclusions/30_conclusions.md&#34;&gt;Conclusions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/asabeneh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/paypal_lg.png&#34; alt=&#34;Paypal Logo&#34; style=&#34;width:10%&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 30 Days Of Python: Day 1 - Introduction&lt;/h1&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://www.linkedin.com/in/asabeneh/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://twitter.com/Asabeneh&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/asabeneh?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&#34;https://www.linkedin.com/in/asabeneh/&#34; target=&#34;_blank&#34;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; Second Edition: July, 2021&lt;/small&gt; &lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/30DaysOfPython_banner3@2x.png&#34; alt=&#34;30DaysOfPython&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-30-days-of-python&#34;&gt;🐍 30 Days Of Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-day-1&#34;&gt;📘 Day 1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#welcome&#34;&gt;Welcome&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#why-python-&#34;&gt;Why Python ?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#environment-setup&#34;&gt;Environment Setup&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-python&#34;&gt;Installing Python&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-shell&#34;&gt;Python Shell&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#installing-visual-studio-code&#34;&gt;Installing Visual Studio Code&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#how-to-use-visual-studio-code&#34;&gt;How to use visual studio code&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#basic-python&#34;&gt;Basic Python&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-syntax&#34;&gt;Python Syntax&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-indentation&#34;&gt;Python Indentation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#data-types&#34;&gt;Data types&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#number&#34;&gt;Number&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#string&#34;&gt;String&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#booleans&#34;&gt;Booleans&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#list&#34;&gt;List&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#dictionary&#34;&gt;Dictionary&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#tuple&#34;&gt;Tuple&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#set&#34;&gt;Set&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#checking-data-types&#34;&gt;Checking Data types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#python-file&#34;&gt;Python File&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#-exercises---day-1&#34;&gt;💻 Exercises - Day 1&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-1&#34;&gt;Exercise: Level 1&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-2&#34;&gt;Exercise: Level 2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/#exercise-level-3&#34;&gt;Exercise: Level 3&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📘 Day 1&lt;/h1&gt; &#xA;&lt;h2&gt;Welcome&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; for deciding to participate in a &lt;em&gt;30 days of Python&lt;/em&gt; programming challenge . In this challenge you will learn everything you need to be a python programmer and the whole concept of programming. In the end of the challenge you will get a &lt;em&gt;30DaysOfPython&lt;/em&gt; programming challenge certificate.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to actively engage in the challenge, you may join the &lt;a href=&#34;https://t.me/ThirtyDaysOfPython&#34;&gt;30DaysOfPython challenge&lt;/a&gt; telegram group.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Python is a high-level programming language for general-purpose programming. It is an open source, interpreted, objected-oriented programming language. Python was created by a Dutch programmer, Guido van Rossum. The name of Python programming language was derived from a British sketch comedy series, &lt;em&gt;Month Python&#39;s Flying Circus&lt;/em&gt;. The first version was released on February 20, 1991. This 30 days of Python challenge will help you learn the latest version of Python, Python 3 step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples, many hands on exercises and projects.&lt;/p&gt; &#xA;&lt;p&gt;This challenge is designed for beginners and professionals who want to learn python programming language. It may take 30 to 100 days to complete the challenge, people who actively participate on the telegram group have a high probability of completing the challenge. If you are a visual learner or in favor of videos, you may get started with this &lt;a href=&#34;https://www.youtube.com/watch?v=11OYpBrhdyM&#34;&gt;Python for Absolute Beginners video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why Python ?&lt;/h2&gt; &#xA;&lt;p&gt;It is a programming language which is very close to human language and because of that it is easy to learn and use. Python is used by various industries and companies (including Google). It has been used to develop web applications, desktop applications, system adminstration, and machine learning libraries. Python is highly embraced language in the data science and machine learning community. I hope this is enough to convince you to start learning Python. Python is eating the world and you are killing it before it eats you.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Installing Python&lt;/h3&gt; &#xA;&lt;p&gt;To run a python script you need to install python. Let&#39;s &lt;a href=&#34;https://www.python.org/&#34;&gt;download&lt;/a&gt; python. If your are a windows user. Click the button encircled in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_windows.png&#34; alt=&#34;installing on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a macOS user. Click the button encircled in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/installing_on_macOS.png&#34; alt=&#34;installing on Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To check if python is installed write the following command on your device terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/python_versio.png&#34; alt=&#34;Python Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the terminal, I am using &lt;em&gt;Python 3.7.5&lt;/em&gt; version at the moment. Your version of Python might be different from mine by but it should be 3.6 or above. If you mange to see the python version, well done. Python has been installed on your machine. Continue to the next section.&lt;/p&gt; &#xA;&lt;h3&gt;Python Shell&lt;/h3&gt; &#xA;&lt;p&gt;Python is an interpreted scripting language, so it does not need to be compiled. It means it executes the code line by line. Python comes with a &lt;em&gt;Python Shell (Python Interactive Shell)&lt;/em&gt;. It is used to execute a single python command and get the result.&lt;/p&gt; &#xA;&lt;p&gt;Python Shell waits for the Python code from the user. When you enter the code, it interprets the code and shows the result in the next line. Open your terminal or command prompt(cmd) and write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png&#34; alt=&#34;Python Scripting Shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell is opened and it is waiting for you to write Python code(Python script). You will write your Python script next to this symbol &amp;gt;&amp;gt;&amp;gt; and then click Enter. Let us write our very first script on the Python scripting shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/adding_on_python_shell.png&#34; alt=&#34;Python script on Python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Well done, you wrote your first Python script on Python interactive shell. How do we close the Python interactive shell ? To close the shell, next to this symbol &amp;gt;&amp;gt; write &lt;strong&gt;exit()&lt;/strong&gt; command and press Enter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/exit_from_shell.png&#34; alt=&#34;Exit from python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now, you know how to open the Python interactive shell and how to exit from it.&lt;/p&gt; &#xA;&lt;p&gt;Python will give you results if you write scripts that Python understands, if not it returns errors. Let&#39;s make a deliberate mistake and see what Python will return.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/invalid_syntax_error.png&#34; alt=&#34;Invalid Syntax Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see from the returned error, Python is so clever that it knows the mistake we made and which was &lt;em&gt;Syntax Error: invalid syntax&lt;/em&gt;. Using x as multiplication in Python is a syntax error because (x) is not a valid syntax in Python. Instead of (&lt;strong&gt;x&lt;/strong&gt;) we use asterisk (*) for multiplication. The returned error clearly shows what to fix.&lt;/p&gt; &#xA;&lt;p&gt;The process of identifying and removing errors from a program is called &lt;em&gt;debugging&lt;/em&gt;. Let us debug it by putting * in place of &lt;strong&gt;x&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/fixing_syntax_error.png&#34; alt=&#34;Fixing Syntax Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our bug was fixed, the code ran and we got a result we were expecting. As a programmer you will see such kind of errors on daily basis. It is good to know how to debug. To be good at debugging you should understand what kind of errors you are facing. Some of the Python errors you may encounter are &lt;em&gt;SyntaxError&lt;/em&gt;, &lt;em&gt;IndexError&lt;/em&gt;, &lt;em&gt;NameError&lt;/em&gt;, &lt;em&gt;ModuleNotFoundError&lt;/em&gt;, &lt;em&gt;KeyError&lt;/em&gt;, &lt;em&gt;ImportError&lt;/em&gt;, &lt;em&gt;AttributeError&lt;/em&gt;, &lt;em&gt;TypeError&lt;/em&gt;, &lt;em&gt;ValueError&lt;/em&gt;, &lt;em&gt;ZeroDivisionError&lt;/em&gt; etc. We will see more about different Python &lt;strong&gt;&lt;em&gt;error types&lt;/em&gt;&lt;/strong&gt; in later sections.&lt;/p&gt; &#xA;&lt;p&gt;Let us practice more how to use Python interactive shell. Go to your terminal or command prompt and write the word &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_python_shell.png&#34; alt=&#34;Python Scripting Shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell is opened. Let us do some basic mathematical operations (addition, subtraction, multiplication, division, modulus, exponential).&lt;/p&gt; &#xA;&lt;p&gt;Let us do some maths first before we write any Python code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2 + 3 = 5&lt;/li&gt; &#xA; &lt;li&gt;3 - 2 = 1&lt;/li&gt; &#xA; &lt;li&gt;3 * 2 = 6&lt;/li&gt; &#xA; &lt;li&gt;3 / 2 = 1.5&lt;/li&gt; &#xA; &lt;li&gt;3 ^ 2 = 3 x 3 = 9&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In python we have the following additional operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3 % 2 = 1 =&amp;gt; which means finding the remainder&lt;/li&gt; &#xA; &lt;li&gt;3 // 2 = 1 =&amp;gt; which means removing the remainder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let us change the above mathematical expressions to Python code. The Python shell has been opened and let us write a comment at the very beginning of the shell.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;comment&lt;/em&gt; is a part of the code which is not executed by python. So we can leave some text in our code to make our code more readable. Python does not run the comment part. A comment in python starts with hash(#) symbol. This is how you write a comment in python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; # comment starts with hash&#xA; # this is a python comment, because it starts with a (#) symbol&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/maths_on_python_shell.png&#34; alt=&#34;Maths on python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before we move on to the next section, let us practice more on the Python interactive shell. Close the opened shell by writing &lt;em&gt;exit()&lt;/em&gt; on the shell and open it again and let us practice how to write text on the Python shell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/writing_string_on_shell.png&#34; alt=&#34;Writing String on python shell&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installing Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;The Python interactive shell is good to try and test small script codes but it will not be for a big project. In real work environment, developers use different code editors to write codes. In this 30 days of Python programming challenge we will use visual studio code. Visual studio code is a very popular open source text editor. I am a fan of vscode and I would recommend to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;download&lt;/a&gt; visual studio code, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode.png&#34; alt=&#34;Visual Studio Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed visual studio code, let us see how to use it. If you prefer a video, you can follow this Visual Studio Code for Python &lt;a href=&#34;https://www.youtube.com/watch?v=bn7Cx4z-vSo&#34;&gt;Video tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;How to use visual studio code&lt;/h4&gt; &#xA;&lt;p&gt;Open the visual studio code by double clicking the visual studio icon. When you open it you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/vscode_ui.png&#34; alt=&#34;Visual studio Code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a folder named 30DaysOfPython on your desktop. Then open it using visual studio code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/how_to_open_project_on_vscode.png&#34; alt=&#34;Opening Project on Visual studio&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/opening_project.png&#34; alt=&#34;Opening a project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After opening it you will see shortcuts for creating files and folders inside of 30DaysOfPython project&#39;s directory. As you can see below, I have created the very first file, helloworld.py. You can do the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/helloworld.png&#34; alt=&#34;Creating a python file&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After a long day of coding, you want to close your code editor, right? This is how you will close the opened project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/closing_opened_project.png&#34; alt=&#34;Closing project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Congratulations, you have finished setting up the development environment. Let us start coding.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Python&lt;/h2&gt; &#xA;&lt;h3&gt;Python Syntax&lt;/h3&gt; &#xA;&lt;p&gt;A Python script can be written in Python interactive shell or in the code editor. A Python file has an extension .py.&lt;/p&gt; &#xA;&lt;h3&gt;Python Indentation&lt;/h3&gt; &#xA;&lt;p&gt;An indentation is a white space in a text. Indentation in many languages is used to increase code readability, however Python uses indentation to create block of codes. In other programming languages curly brackets are used to create blocks of codes instead of indentation. One of the common bugs when writing python code is wrong indentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/indentation.png&#34; alt=&#34;Indentation Error&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;Comments are very important to make the code more readable and to leave remarks in our code. Python does not run comment parts of our code. Any text starting with hash(#) in Python is a comment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    # This is the first comment&#xA;    # This is the second comment&#xA;    # Python is eating the world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Triple quote can be used for multiline comment if it is not assigned to a variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;&#34;&#34;This is multiline comment&#xA;multiline comment takes multiple lines.&#xA;python is eating the world&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data types&lt;/h3&gt; &#xA;&lt;p&gt;In Python there are several types of data types. Let us get started with the most common ones. Different data types will be covered in detail in other sections. For the time being, let us just go through the different data types and get familiar with them. You do not have to have a clear understanding now.&lt;/p&gt; &#xA;&lt;h4&gt;Number&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integer: Integer(negative, zero and positive) numbers Example: ... -3, -2, -1, 0, 1, 2, 3 ...&lt;/li&gt; &#xA; &lt;li&gt;Float: Decimal number Example ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...&lt;/li&gt; &#xA; &lt;li&gt;Complex Example 1 + j, 2 + 4j&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;String&lt;/h4&gt; &#xA;&lt;p&gt;A collection of one or more characters under a single or double quote. If a string is more than one sentence then we use a triple quote.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&#39;Asabeneh&#39;&#xA;&#39;Finland&#39;&#xA;&#39;Python&#39;&#xA;&#39;I love teaching&#39;&#xA;&#39;I hope you are enjoying the first day of 30DaysOfPython Challenge&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Booleans&lt;/h4&gt; &#xA;&lt;p&gt;A boolean data type is either a True or False value. T and F should be always uppercase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    True  #  Is the light on? If it is on, then the value is True&#xA;    False # Is the light on? If it is off, then the value is False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;Python list is an ordered collection which allows to store different data type items. A list is similar to an array in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;[0, 1, 2, 3, 4, 5]  # all are the same data types - a list of numbers&#xA;[&#39;Banana&#39;, &#39;Orange&#39;, &#39;Mango&#39;, &#39;Avocado&#39;] # all the same data types - a list of strings (fruits)&#xA;[&#39;Finland&#39;,&#39;Estonia&#39;, &#39;Sweden&#39;,&#39;Norway&#39;] # all the same data types - a list of strings (countries)&#xA;[&#39;Banana&#39;, 10, False, 9.81] # different data types in the list - string, integer, boolean and float&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dictionary&lt;/h4&gt; &#xA;&lt;p&gt;A Python dictionary object is an unordered collection of data in a key value pair format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{&#xA;&#39;first_name&#39;:&#39;Asabeneh&#39;,&#xA;&#39;last_name&#39;:&#39;Yetayeh&#39;,&#xA;&#39;country&#39;:&#39;Finland&#39;, &#xA;&#39;age&#39;:250, &#xA;&#39;is_married&#39;:True,&#xA;&#39;skills&#39;:[&#39;JS&#39;, &#39;React&#39;, &#39;Node&#39;, &#39;Python&#39;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tuple&lt;/h4&gt; &#xA;&lt;p&gt;A tuple is an ordered collection of different data types like list but tuples can not be modified once they are created. They are immutable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Asabeneh&#39;, &#39;Pawel&#39;, &#39;Brook&#39;, &#39;Abraham&#39;, &#39;Lidiya&#39;) # Names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;(&#39;Earth&#39;, &#39;Jupiter&#39;, &#39;Neptune&#39;, &#39;Mars&#39;, &#39;Venus&#39;, &#39;Saturn&#39;, &#39;Uranus&#39;, &#39;Mercury&#39;) # planets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set&lt;/h4&gt; &#xA;&lt;p&gt;A set is a collection of data types similar to list and tuple. Unlike list and tuple, set is not an ordered collection of items. Like in Mathematics, set in Python stores only unique items.&lt;/p&gt; &#xA;&lt;p&gt;In later sections, we will go in detail about each and every Python data type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;{2, 4, 3, 5}&#xA;{3.14, 9.81, 2.7} # order is not important in set&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking Data types&lt;/h3&gt; &#xA;&lt;p&gt;To check the data type of certain data/variable we use the &lt;strong&gt;type&lt;/strong&gt; function. In the following terminal you will see different python data types:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/checking_data_types.png&#34; alt=&#34;Checking Data types&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python File&lt;/h3&gt; &#xA;&lt;p&gt;First open your project folder, 30DaysOfPython. If you don&#39;t have this folder, create a folder name called 30DaysOfPython. Inside this folder, create a file called helloworld.py. Now, let&#39;s do what we did on python interactive shell using visual studio code.&lt;/p&gt; &#xA;&lt;p&gt;The Python interactive shell was printing without using &lt;strong&gt;print&lt;/strong&gt; but on visual studio code to see our result we should use a built in function *print(). The &lt;em&gt;print()&lt;/em&gt; built-in function takes one or more arguments as follows &lt;em&gt;print(&#39;arument1&#39;, &#39;argument2&#39;, &#39;argument3&#39;)&lt;/em&gt;. See the examples below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file name is helloworld.py&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Day 1 - 30DaysOfPython Challenge&#xA;&#xA;print(2 + 3)             # addition(+)&#xA;print(3 - 1)             # subtraction(-)&#xA;print(2 * 3)             # multiplication(*)&#xA;print(3 / 2)             # division(/)&#xA;print(3 ** 2)            # exponential(**)&#xA;print(3 % 2)             # modulus(%)&#xA;print(3 // 2)            # Floor division operator(//)&#xA;&#xA;# Checking data types&#xA;print(type(10))          # Int&#xA;print(type(3.14))        # Float&#xA;print(type(1 + 3j))      # Complex number&#xA;print(type(&#39;Asabeneh&#39;))  # String&#xA;print(type([1, 2, 3]))   # List&#xA;print(type({&#39;name&#39;:&#39;Asabeneh&#39;})) # Dictionary&#xA;print(type({9.8, 3.14, 2.7}))    # Set&#xA;print(type((9.8, 3.14, 2.7)))    # Tuple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the python file check the image below. You can run the python file either by running the green button on Visual Studio Code or by typing &lt;em&gt;python helloworld.py&lt;/em&gt; in the terminal .&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/images/running_python_script.png&#34; alt=&#34;Running python script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🌕 You are amazing. You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscles.&lt;/p&gt; &#xA;&lt;h2&gt;💻 Exercises - Day 1&lt;/h2&gt; &#xA;&lt;h3&gt;Exercise: Level 1&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check the python version you are using&lt;/li&gt; &#xA; &lt;li&gt;Open the python interactive shell and do the following operations. The operands are 3 and 4. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;addition(+)&lt;/li&gt; &#xA;   &lt;li&gt;subtraction(-)&lt;/li&gt; &#xA;   &lt;li&gt;multiplication(*)&lt;/li&gt; &#xA;   &lt;li&gt;modulus(%)&lt;/li&gt; &#xA;   &lt;li&gt;division(/)&lt;/li&gt; &#xA;   &lt;li&gt;exponential(**)&lt;/li&gt; &#xA;   &lt;li&gt;floor division operator(//)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Write strings on the python interactive shell. The strings are the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your name&lt;/li&gt; &#xA;   &lt;li&gt;Your family name&lt;/li&gt; &#xA;   &lt;li&gt;Your country&lt;/li&gt; &#xA;   &lt;li&gt;I am enjoying 30 days of python&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check the data types of the following data: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;10&lt;/li&gt; &#xA;   &lt;li&gt;9.8&lt;/li&gt; &#xA;   &lt;li&gt;3.14&lt;/li&gt; &#xA;   &lt;li&gt;4 - 4j&lt;/li&gt; &#xA;   &lt;li&gt;[&#39;Asabeneh&#39;, &#39;Python&#39;, &#39;Finland&#39;]&lt;/li&gt; &#xA;   &lt;li&gt;Your name&lt;/li&gt; &#xA;   &lt;li&gt;Your family name&lt;/li&gt; &#xA;   &lt;li&gt;Your country&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Exercise: Level 2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a folder named day_1 inside 30DaysOfPython folder. Inside day_1 folder, create a python file helloworld.py and repeat questions 1, 2, 3 and 4. Remember to use &lt;em&gt;print()&lt;/em&gt; when you are working on a python file. Navigate to the directory where you have saved your file, and run it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Exercise: Level 3&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write an example for different Python data types such as Number(Integer, Float, Complex), String, Boolean, List, Tuple, Set and Dictionary.&lt;/li&gt; &#xA; &lt;li&gt;Find an &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_distance#:~:text=In%20mathematics%2C%20the%20Euclidean%20distance,being%20called%20the%20Pythagorean%20distance.&#34;&gt;Euclidian distance&lt;/a&gt; between (2, 3) and (10, 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-Python/master/02_Day_Variables_builtin_functions/02_variables_builtin_functions.md&#34;&gt;Day 2 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rui314/chibicc</title>
    <updated>2022-07-31T02:01:52Z</updated>
    <id>tag:github.com,2022-07-31:/rui314/chibicc</id>
    <link href="https://github.com/rui314/chibicc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small C compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chibicc: A Small C Compiler&lt;/h1&gt; &#xA;&lt;p&gt;(The old master has moved to &lt;a href=&#34;https://github.com/rui314/chibicc/tree/historical/old&#34;&gt;historical/old&lt;/a&gt; branch. This is a new one uploaded in September 2020.)&lt;/p&gt; &#xA;&lt;p&gt;chibicc is yet another small C compiler that implements most C11 features. Even though it still probably falls into the &#34;toy compilers&#34; category just like other small compilers do, chibicc can compile several real-world programs, including &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://sqlite.org&#34;&gt;SQLite&lt;/a&gt;, &lt;a href=&#34;http://www.libpng.org/pub/png/libpng.html&#34;&gt;libpng&lt;/a&gt; and chibicc itself, without making modifications to the compiled programs. Generated executables of these programs pass their corresponding test suites. So, chibicc actually supports a wide variety of C11 features and is able to compile hundreds of thousands of lines of real-world C code correctly.&lt;/p&gt; &#xA;&lt;p&gt;chibicc is developed as the reference implementation for a book I&#39;m currently writing about the C compiler and the low-level programming. The book covers the vast topic with an incremental approach; in the first chapter, readers will implement a &#34;compiler&#34; that accepts just a single number as a &#34;language&#34;, which will then gain one feature at a time in each section of the book until the language that the compiler accepts matches what the C11 spec specifies. I took this incremental approach from &lt;a href=&#34;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&#34;&gt;the paper&lt;/a&gt; by Abdulaziz Ghuloum.&lt;/p&gt; &#xA;&lt;p&gt;Each commit of this project corresponds to a section of the book. For this purpose, not only the final state of the project but each commit was carefully written with readability in mind. Readers should be able to learn how a C language feature can be implemented just by reading one or a few commits of this project. For example, this is how &lt;a href=&#34;https://github.com/rui314/chibicc/commit/773115ab2a9c4b96f804311b95b20e9771f0190a&#34;&gt;while&lt;/a&gt;, &lt;a href=&#34;https://github.com/rui314/chibicc/commit/75fbd3dd6efde12eac8225d8b5723093836170a5&#34;&gt;[]&lt;/a&gt;, &lt;a href=&#34;https://github.com/rui314/chibicc/commit/1d0e942fd567a35d296d0f10b7693e98b3dd037c&#34;&gt;?:&lt;/a&gt;, and &lt;a href=&#34;https://github.com/rui314/chibicc/commit/79644e54cc1805e54428cde68b20d6d493b76d34&#34;&gt;thread-local variable&lt;/a&gt; are implemented. If you have plenty of spare time, it might be fun to read it from the &lt;a href=&#34;https://github.com/rui314/chibicc/commit/0522e2d77e3ab82d3b80a5be8dbbdc8d4180561c&#34;&gt;first commit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please consider purchasing a copy of the book when it becomes available! 😀 I publish the source code here to give people early access to it, because I was planing to do that anyway with a permissive open-source license after publishing the book. If I don&#39;t charge for the source code, it doesn&#39;t make much sense to me to keep it private. I hope to publish the book in 2021. You can sign up &lt;a href=&#34;https://forms.gle/sgrMWHGeGjeeEJcX7&#34;&gt;here&lt;/a&gt; to receive a notification when a free chapter is available online or the book is published.&lt;/p&gt; &#xA;&lt;p&gt;I pronounce chibicc as &lt;em&gt;chee bee cee cee&lt;/em&gt;. &#34;chibi&#34; means &#34;mini&#34; or &#34;small&#34; in Japanese. &#34;cc&#34; stands for C compiler.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;chibicc supports almost all mandatory features and most optional features of C11 as well as a few GCC language extensions.&lt;/p&gt; &#xA;&lt;p&gt;Features that are often missing in a small compiler but supported by chibicc include (but not limited to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preprocessor&lt;/li&gt; &#xA; &lt;li&gt;float, double and long double (x87 80-bit floating point numbers)&lt;/li&gt; &#xA; &lt;li&gt;Bit-fields&lt;/li&gt; &#xA; &lt;li&gt;alloca()&lt;/li&gt; &#xA; &lt;li&gt;Variable-length arrays&lt;/li&gt; &#xA; &lt;li&gt;Compound literals&lt;/li&gt; &#xA; &lt;li&gt;Thread-local variables&lt;/li&gt; &#xA; &lt;li&gt;Atomic variables&lt;/li&gt; &#xA; &lt;li&gt;Common symbols&lt;/li&gt; &#xA; &lt;li&gt;Designated initializers&lt;/li&gt; &#xA; &lt;li&gt;L, u, U and u8 string literals&lt;/li&gt; &#xA; &lt;li&gt;Functions that take or return structs as values, as specified by the x86-64 SystemV ABI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;chibicc does not support complex numbers, K&amp;amp;R-style function prototypes and GCC-style inline assembly. Digraphs and trigraphs are intentionally left out.&lt;/p&gt; &#xA;&lt;p&gt;chibicc outputs a simple but nice error message when it finds an error in source code.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no optimization pass. chibicc emits terrible code which is probably twice or more slower than GCC&#39;s output. I have a plan to add an optimization pass once the frontend is done.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m using Ubuntu 20.04 for x86-64 as a development platform. I made a few small changes so that chibicc works on Ubuntu 18.04, Fedora 32 and Gentoo 2.6, but portability is not my goal at this moment. It may or may not work on systems other than Ubuntu 20.04.&lt;/p&gt; &#xA;&lt;h2&gt;Internals&lt;/h2&gt; &#xA;&lt;p&gt;chibicc consists of the following stages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokenize: A tokenizer takes a string as an input, breaks it into a list of tokens and returns them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Preprocess: A preprocessor takes as an input a list of tokens and output a new list of macro-expanded tokens. It interprets preprocessor directives while expanding macros.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Parse: A recursive descendent parser constructs abstract syntax trees from the output of the preprocessor. It also adds a type to each AST node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Codegen: A code generator emits an assembly text for given AST nodes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When I find a bug in this compiler, I go back to the original commit that introduced the bug and rewrite the commit history as if there were no such bug from the beginning. This is an unusual way of fixing bugs, but as a part of a book, it is important to keep every commit bug-free.&lt;/p&gt; &#xA;&lt;p&gt;Thus, I do not take pull requests in this repo. You can send me a pull request if you find a bug, but it is very likely that I will read your patch and then apply that to my previous commits by rewriting history. I&#39;ll credit your name somewhere, but your changes will be rewritten by me before submitted to this repository.&lt;/p&gt; &#xA;&lt;p&gt;Also, please assume that I will occasionally force-push my local repository to this public one to rewrite history. If you clone this project and make local commits on top of it, your changes will have to be rebased by hand when I force-push new commits.&lt;/p&gt; &#xA;&lt;h2&gt;Design principles&lt;/h2&gt; &#xA;&lt;p&gt;chibicc&#39;s core value is its simplicity and the reability of its source code. To achieve this goal, I was careful not to be too clever when writing code. Let me explain what that means.&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes, as you get used to the code base, you are tempted to &lt;em&gt;improve&lt;/em&gt; the code using more abstractions and clever tricks. But that kind of &lt;em&gt;improvements&lt;/em&gt; don&#39;t always improve readability for first-time readers and can actually hurts it. I tried to avoid the pitfall as much as possible. I wrote this code not for me but for first-time readers.&lt;/p&gt; &#xA;&lt;p&gt;If you take a look at the source code, you&#39;ll find a couple of dumb-looking pieces of code. These are written intentionally that way (but at some places I might be actually missing something, though). Here is a few notable examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The recursive descendent parser contains many similar-looking functions for similar-looking generative grammar rules. You might be tempted to &lt;em&gt;improve&lt;/em&gt; it to reduce the duplication using higher-order functions or macros, but I thought that that&#39;s too complicated. It&#39;s better to allow small duplications instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;chibicc doesn&#39;t try too hard to save memory. An entire input source file is read to memory first before the tokenizer kicks in, for example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Slow algorithms are fine if we know that n isn&#39;t too big. For example, we use a linked list as a set in the preprocessor, so the membership check takes O(n) where n is the size of the set. But that&#39;s fine because we know n is usually very small. And even if n can be very big, I stick with a simple slow algorithm until it is proved by benchmarks that that&#39;s a bottleneck.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each AST node type uses only a few members of the &lt;code&gt;Node&lt;/code&gt; struct members. Other unused &lt;code&gt;Node&lt;/code&gt; members are just a waste of memory at runtime. We could save memory using unions, but I decided to simply put everything in the same struct instead. I believe the inefficiency is negligible. Even if it matters, we can always change the code to use unions at any time. I wanted to avoid premature optimization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;chibicc always allocates heap memory using &lt;code&gt;calloc&lt;/code&gt;, which is a variant of &lt;code&gt;malloc&lt;/code&gt; that clears memory with zero. &lt;code&gt;calloc&lt;/code&gt; is slightly slower than &lt;code&gt;malloc&lt;/code&gt;, but that should be neligible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Last but not least, chibicc allocates memory using &lt;code&gt;calloc&lt;/code&gt; but never calls &lt;code&gt;free&lt;/code&gt;. Allocated heap memory is not freed until the process exits. I&#39;m sure that this memory management policy (or lack thereof) looks very odd, but it makes sense for short-lived programs such as compilers. DMD, a compiler for the D programming language, uses the same memory management scheme for the same reason, for example [1].&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About the Author&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m Rui Ueyama. I&#39;m the creator of &lt;a href=&#34;https://github.com/rui314/8cc&#34;&gt;8cc&lt;/a&gt;, which is a hobby C compiler, and also the original creator of the current version of &lt;a href=&#34;https://lld.llvm.org&#34;&gt;LLVM lld&lt;/a&gt; linker, which is a production-quality linker used by various operating systems and large-scale build systems.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bellard.org/tcc/&#34;&gt;tcc&lt;/a&gt;: A small C compiler written by Fabrice Bellard. I learned a lot from this compiler, but the design of tcc and chibicc are different. In particular, tcc is a one-pass compiler, while chibicc is a multi-pass one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/drh/lcc&#34;&gt;lcc&lt;/a&gt;: Another small C compiler. The creators wrote a &lt;a href=&#34;https://sites.google.com/site/lccretargetablecompiler/&#34;&gt;book&lt;/a&gt; about the internals of lcc, which I found a good resource to see how a compiler is implemented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&#34;&gt;An Incremental Approach to Compiler Construction&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://users.ece.utexas.edu/~adnan/pike.html&#34;&gt;Rob Pike&#39;s 5 Rules of Programming&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[1] &lt;a href=&#34;https://www.drdobbs.com/cpp/increasing-compiler-speed-by-over-75/240158941&#34;&gt;https://www.drdobbs.com/cpp/increasing-compiler-speed-by-over-75/240158941&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DMD does memory allocation in a bit of a sneaky way. Since compilers are short-lived programs, and speed is of the essence, DMD just mallocs away, and never frees.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>