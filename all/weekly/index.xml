<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T01:47:23Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>imartinez/privateGPT</title>
    <updated>2023-05-21T01:47:23Z</updated>
    <id>tag:github.com,2023-05-21:/imartinez/privateGPT</id>
    <link href="https://github.com/imartinez/privateGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interact privately with your documents using the power of GPT, 100% privately, no data leaks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;privateGPT&lt;/h1&gt; &#xA;&lt;p&gt;Ask questions to your documents without an internet connection, using the power of LLMs. 100% private, no data leaves your execution environment at any point. You can ingest documents and ask questions without an internet connection!&lt;/p&gt; &#xA;&lt;p&gt;Built with &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt;, &lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;GPT4All&lt;/a&gt;, &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;LlamaCpp&lt;/a&gt;, &lt;a href=&#34;https://www.trychroma.com/&#34;&gt;Chroma&lt;/a&gt; and &lt;a href=&#34;https://www.sbert.net/&#34;&gt;SentenceTransformers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;902&#34; alt=&#34;demo&#34; src=&#34;https://user-images.githubusercontent.com/721666/236942256-985801c9-25b9-48ef-80be-3acbb4575164.png&#34;&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;In order to set your environment up to run the code here, first install all requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, download the LLM model and place it in a directory of your choice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLM: default to &lt;a href=&#34;https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin&#34;&gt;ggml-gpt4all-j-v1.3-groovy.bin&lt;/a&gt;. If you prefer a different GPT4All-J compatible model, just download it and reference it in your &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rename &lt;code&gt;example.env&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and edit the variables appropriately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MODEL_TYPE: supports LlamaCpp or GPT4All&#xA;PERSIST_DIRECTORY: is the folder you want your vectorstore in&#xA;MODEL_PATH: Path to your GPT4All or LlamaCpp supported LLM&#xA;MODEL_N_CTX: Maximum token limit for the LLM model&#xA;EMBEDDINGS_MODEL_NAME: SentenceTransformers embeddings model name (see https://www.sbert.net/docs/pretrained_models.html)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: because of the way &lt;code&gt;langchain&lt;/code&gt; loads the &lt;code&gt;SentenceTransformers&lt;/code&gt; embeddings, the first time you run the script it will require internet connection to download the embeddings model itself.&lt;/p&gt; &#xA;&lt;h2&gt;Test dataset&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses a &lt;a href=&#34;https://github.com/imartinez/privateGPT/raw/main/source_documents/state_of_the_union.txt&#34;&gt;state of the union transcript&lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for ingesting your own dataset&lt;/h2&gt; &#xA;&lt;p&gt;Put any and all your files into the &lt;code&gt;source_documents&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;The supported extensions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.csv&lt;/code&gt;: CSV,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.docx&lt;/code&gt;: Word Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.doc&lt;/code&gt;: Word Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.enex&lt;/code&gt;: EverNote,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.eml&lt;/code&gt;: Email,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.epub&lt;/code&gt;: EPub,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.html&lt;/code&gt;: HTML File,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.md&lt;/code&gt;: Markdown,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.msg&lt;/code&gt;: Outlook Message,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.odt&lt;/code&gt;: Open Document Text,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.pdf&lt;/code&gt;: Portable Document Format (PDF),&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.pptx&lt;/code&gt; : PowerPoint Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ppt&lt;/code&gt; : PowerPoint Document,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.txt&lt;/code&gt;: Text file (UTF-8),&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run the following command to ingest all the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Creating new vectorstore&#xA;Loading documents from source_documents&#xA;Loading new documents: 100%|██████████████████████| 1/1 [00:01&amp;lt;00:00,  1.73s/it]&#xA;Loaded 1 new documents from source_documents&#xA;Split into 90 chunks of text (max. 500 tokens each)&#xA;Creating embeddings. May take some minutes...&#xA;Using embedded DuckDB with persistence: data will be stored in: db&#xA;Ingestion complete! You can now run privateGPT.py to query your documents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create a &lt;code&gt;db&lt;/code&gt; folder containing the local vectorstore. Will take 20-30 seconds per document, depending on the size of the document. You can ingest as many documents as you want, and all will be accumulated in the local embeddings database. If you want to start from an empty database, delete the &lt;code&gt;db&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Note: during the ingest process no data leaves your local environment. You could ingest without an internet connection, except for the first time you run the ingest script, when the embeddings model is downloaded.&lt;/p&gt; &#xA;&lt;h2&gt;Ask questions to your documents, locally!&lt;/h2&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python privateGPT.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And wait for the script to require your input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;&amp;gt; Enter a query:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hit enter. You&#39;ll need to wait 20-30 seconds (depending on your machine) while the LLM model consumes the prompt and prepares the answer. Once done, it will print the answer and the 4 sources it used as context from your documents; you can then ask another question without re-running the script, just wait for the prompt again.&lt;/p&gt; &#xA;&lt;p&gt;Note: you could turn off your internet connection, and the script inference would still work. No data gets out of your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to finish the script.&lt;/p&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;The script also supports optional command-line arguments to modify its behavior. You can see a full list of these arguments by running the command &lt;code&gt;python privateGPT.py --help&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Selecting the right local models and the power of &lt;code&gt;LangChain&lt;/code&gt; you can run the entire pipeline locally, without any data leaving your environment, and with reasonable performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ingest.py&lt;/code&gt; uses &lt;code&gt;LangChain&lt;/code&gt; tools to parse the document and create embeddings locally using &lt;code&gt;HuggingFaceEmbeddings&lt;/code&gt; (&lt;code&gt;SentenceTransformers&lt;/code&gt;). It then stores the result in a local vector database using &lt;code&gt;Chroma&lt;/code&gt; vector store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;privateGPT.py&lt;/code&gt; uses a local LLM based on &lt;code&gt;GPT4All-J&lt;/code&gt; or &lt;code&gt;LlamaCpp&lt;/code&gt; to understand questions and create answers. The context for the answers is extracted from the local vector store using a similarity search to locate the right piece of context from the docs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GPT4All-J&lt;/code&gt; wrapper was introduced in LangChain 0.0.162.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Python Version&lt;/h2&gt; &#xA;&lt;p&gt;To use this software, you must have Python 3.10 or later installed. Earlier versions of Python will not compile.&lt;/p&gt; &#xA;&lt;h2&gt;C++ Compiler&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter an error while building a wheel during the &lt;code&gt;pip install&lt;/code&gt; process, you may need to install a C++ compiler on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;For Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;To install a C++ compiler on Windows 10/11, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the following components are selected: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Universal Windows Platform development&lt;/li&gt; &#xA;   &lt;li&gt;C++ CMake tools for Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the MinGW installer from the &lt;a href=&#34;https://sourceforge.net/projects/mingw/&#34;&gt;MinGW website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer and select the &lt;code&gt;gcc&lt;/code&gt; component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Mac Running Intel&lt;/h2&gt; &#xA;&lt;p&gt;When running a Mac with Intel hardware (not M1), you may run into &lt;em&gt;clang: error: the clang compiler does not support &#39;-march=native&#39;&lt;/em&gt; during pip install.&lt;/p&gt; &#xA;&lt;p&gt;If so set your archflags during pip install. eg: &lt;em&gt;ARCHFLAGS=&#34;-arch x86_64&#34; pip3 install -r requirements.txt&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is a test project to validate the feasibility of a fully private solution for question answering using LLMs and Vector embeddings. It is not production ready, and it is not meant to be used in production. The models selection is not optimized for performance, but for privacy; but it is possible to use different models and vectorstores to improve performance.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gioman101/FlipperAmiibo</title>
    <updated>2023-05-21T01:47:23Z</updated>
    <id>tag:github.com,2023-05-21:/Gioman101/FlipperAmiibo</id>
    <link href="https://github.com/Gioman101/FlipperAmiibo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Made to be used with Flipper just drag the folder into NFC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlipperAmiibo&lt;/h1&gt; &#xA;&lt;p&gt;A collection of FlipperZero NFC files that emulate Amiibo&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gioman101/FlipperAmiibo/archive/refs/heads/main.zip&#34;&gt;Download&lt;/a&gt; this repository as an archive&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive into the &lt;code&gt;nfc&lt;/code&gt; directory on your Flipper&#39;s SD card.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>yuzu-emu/yuzu-mainline</title>
    <updated>2023-05-21T01:47:23Z</updated>
    <id>tag:github.com,2023-05-21:/yuzu-emu/yuzu-mainline</id>
    <link href="https://github.com/yuzu-emu/yuzu-mainline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-assets/master/icons/icon.png&#34; alt=&#34;yuzu&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;b&gt;yuzu&lt;/b&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;&lt;b&gt;yuzu&lt;/b&gt; is the world&#39;s most popular, open-source, Nintendo Switch emulator — started by the creators of &lt;a href=&#34;https://citra-emu.org&#34; target=&#34;_blank&#34;&gt;Citra&lt;/a&gt;. &lt;br&gt; It is written in C++ with portability in mind, and we actively maintain builds for Windows and Linux. &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dev.azure.com/yuzu-emu/yuzu/&#34;&gt; &lt;img src=&#34;https://dev.azure.com/yuzu-emu/yuzu/_apis/build/status/yuzu%20mainline?branchName=master&#34; alt=&#34;Azure Mainline CI Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/u77vRWY&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/398318088170242053?color=5865F2&amp;amp;label=yuzu&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-mainline/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-mainline/master/#development&#34;&gt;Development&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-mainline/master/#building&#34;&gt;Building&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-mainline/master/#download&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-mainline/master/#support&#34;&gt;Support&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/yuzu-emu/yuzu-mainline/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The emulator is capable of running most commercial games at full speed, provided you meet the &lt;a href=&#34;https://yuzu-emu.org/help/quickstart/#hardware-requirements&#34;&gt;necessary hardware requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a full list of games yuzu support, please visit our &lt;a href=&#34;https://yuzu-emu.org/game/&#34;&gt;Compatibility page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;website&lt;/a&gt; for the latest news on exciting features, monthly progress reports, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Most of the development happens on GitHub. It&#39;s also where &lt;a href=&#34;https://github.com/yuzu-emu/yuzu&#34;&gt;our central repository&lt;/a&gt; is hosted. For development discussion, please join us on &lt;a href=&#34;https://discord.com/invite/u77vRWY&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, please take a look at the &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Contributing&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Developer-Information&#34;&gt;Developer Information&lt;/a&gt;. You can also contact any of the developers on Discord in order to know about the current state of the emulator.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to the user interface translation project, please check out the &lt;a href=&#34;https://www.transifex.com/yuzu-emulator/yuzu&#34;&gt;yuzu project on transifex&lt;/a&gt;. We centralize translation work there, and periodically upstream translations.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Building-For-Windows&#34;&gt;Windows Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/wiki/Building-For-Linux&#34;&gt;Linux Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest releases automatically via the installer on our &lt;a href=&#34;https://yuzu-emu.org/downloads/&#34;&gt;downloads&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoy the project and want to support us financially, check out our Patreon!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.patreon.com/yuzuteam&#34;&gt; &lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button@2x.png&#34; width=&#34;160&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Any donations received will go towards things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch consoles to explore and reverse-engineer the hardware&lt;/li&gt; &#xA; &lt;li&gt;Switch games for testing, reverse-engineering, and implementing new features&lt;/li&gt; &#xA; &lt;li&gt;Web hosting and infrastructure setup&lt;/li&gt; &#xA; &lt;li&gt;Software licenses (e.g. Visual Studio, IDA Pro, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Additional hardware (e.g. GPUs as-needed to improve rendering support, other peripherals to add support for, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you wish to support us a different way, please join our &lt;a href=&#34;https://discord.gg/u77vRWY&#34;&gt;Discord&lt;/a&gt; and talk to bunnei. You may also contact: &lt;a href=&#34;mailto:donations@yuzu-emu.org&#34;&gt;donations@yuzu-emu.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;yuzu is licensed under the GPLv3 (or any later version). Refer to the &lt;a href=&#34;https://github.com/yuzu-emu/yuzu/raw/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>