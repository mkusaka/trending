<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:51:43Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AntonOsika/gpt-engineer</title>
    <updated>2023-06-25T01:51:43Z</updated>
    <id>tag:github.com,2023-06-25:/AntonOsika/gpt-engineer</id>
    <link href="https://github.com/AntonOsika/gpt-engineer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Specify what you want it to build, the AI asks for clarification, and then builds it.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPT Engineer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/4t5vXHhu&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/4t5vXHhu?style=flat&#34; alt=&#34;Discord Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AntonOsika/gpt-engineer&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/AntonOsika/gpt-engineer?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AntonOsika&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/antonosika?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Specify what you want it to build, the AI asks for clarification, and then builds it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GPT Engineer is made to be easy to adapt, extend, and make your agent learn how you want your code to look. It generates an entire codebase based on a prompt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/antonosika/status/1667641038104674306&#34;&gt;Demo&lt;/a&gt; ðŸ‘¶ðŸ¤–&lt;/p&gt; &#xA;&lt;h2&gt;Project philosophy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple to get value&lt;/li&gt; &#xA; &lt;li&gt;Flexible and easy to add new own &#34;AI steps&#34;. See &lt;code&gt;steps.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Incrementally build towards a user experience of: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;high level prompting&lt;/li&gt; &#xA;   &lt;li&gt;giving feedback to the AI that it will remember over time&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fast handovers back and forth between AI and human&lt;/li&gt; &#xA; &lt;li&gt;Simplicity, all computation is &#34;resumable&#34; and persisted to the filesystem&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Choose either &lt;strong&gt;stable&lt;/strong&gt; or &lt;strong&gt;development&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;stable&lt;/strong&gt; release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install gpt-engineer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;strong&gt;development&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone git@github.com:AntonOsika/gpt-engineer.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd gpt-engineer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install -e .&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(or: &lt;code&gt;make install &amp;amp;&amp;amp; source venv/bin/activate&lt;/code&gt; for a venv)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;With an api key that has GPT4 access run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;export OPENAI_API_KEY=[your api key]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an empty folder. If inside the repo, you can run: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cp -r projects/example/ projects/my-new-project&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fill in the &lt;code&gt;prompt&lt;/code&gt; file in your new folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gpt-engineer projects/my-new-project&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Note, &lt;code&gt;gpt-engineer --help&lt;/code&gt; lets you see all available options. For example &lt;code&gt;--steps use_feedback&lt;/code&gt; lets you improve/fix code in a project)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By running gpt-engineer you agree to our &lt;a href=&#34;https://github.com/AntonOsika/gpt-engineer/TERMS_OF_USE.md&#34;&gt;ToS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the generated files in &lt;code&gt;projects/my-new-project/workspace&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;You can specify the &#34;identity&#34; of the AI agent by editing the files in the &lt;code&gt;preprompts&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Editing the &lt;code&gt;preprompts&lt;/code&gt;, and evolving how you write the project prompt, is currently how you make the agent remember things between projects.&lt;/p&gt; &#xA;&lt;p&gt;Each step in &lt;code&gt;steps.py&lt;/code&gt; will have its communication history with GPT4 stored in the logs folder, and can be rerun with &lt;code&gt;scripts/rerun_edited_message_logs.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The gpt-engineer community is building the &lt;strong&gt;open platform for devs to tinker with and build their personal code-generation toolbox&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing to this, we would be interested in having you!&lt;/p&gt; &#xA;&lt;p&gt;You can check for good first issues &lt;a href=&#34;https://github.com/AntonOsika/gpt-engineer/issues&#34;&gt;here&lt;/a&gt;. Contributing document &lt;a href=&#34;https://raw.githubusercontent.com/AntonOsika/gpt-engineer/main/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are currently looking for more maintainers and community organisers. Email &lt;a href=&#34;mailto:anton.osika@gmail.com&#34;&gt;anton.osika@gmail.com&lt;/a&gt; if you are interested in an official role.&lt;/p&gt; &#xA;&lt;p&gt;If you want to see our broader ambitions, check out the &lt;a href=&#34;https://github.com/AntonOsika/gpt-engineer/raw/main/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt;, and join &lt;a href=&#34;https://discord.gg/4t5vXHhu&#34;&gt;discord &lt;/a&gt; to get input on how you can contribute to it.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AntonOsika/gpt-engineer/assets/4467025/6e362e45-4a94-4b0d-973d-393a31d92d9b&#34;&gt;https://github.com/AntonOsika/gpt-engineer/assets/4467025/6e362e45-4a94-4b0d-973d-393a31d92d9b&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nlpxucan/WizardLM</title>
    <updated>2023-06-25T01:51:43Z</updated>
    <id>tag:github.com,2023-06-25:/nlpxucan/WizardLM</id>
    <link href="https://github.com/nlpxucan/WizardLM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Family of instruction-following LLMs powered by Evol-Instruct: WizardLM, WizardCoder&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;WizardLM: An Instruction-following LLM Using Evol-Instruct&lt;/h2&gt; &#xA;&lt;p&gt;Empowering Large Pre-Trained Language Models to Follow Complex Instructions&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; width=&#34;100%&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nlpxucan/WizardLM/main/imgs/WizardLM.png&#34; alt=&#34;WizardLM&#34; style=&#34;width: 20%; min-width: 300px; display: block; margin: auto;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Code%20License-Apache_2.0-green.svg?sanitize=true&#34; alt=&#34;Code License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/DATA_LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Data%20License-CC%20By%20NC%204.0-red.svg?sanitize=true&#34; alt=&#34;Data License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-390/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.9+-blue.svg?sanitize=true&#34; alt=&#34;Python 3.9+&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;At present, our core contributors are preparing the &lt;strong&gt;65B&lt;/strong&gt; version and we expect to empower WizardLM with the ability to perform instruction evolution itself, aiming to evolve your specific data at a low cost.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ”¥ðŸ”¥ðŸ”¥ we released the latest optimized version of Evol-Instruct training data of WizardLM model. Please refer to &lt;a href=&#34;https://huggingface.co/datasets/WizardLM/WizardLM_evol_instruct_V2_196k&#34;&gt;this HuggingFace Repo&lt;/a&gt; to download.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ”¥ðŸ”¥ðŸ”¥ We released &lt;strong&gt;WizardCoder-15B-V1.0&lt;/strong&gt; (trained with &lt;strong&gt;78k&lt;/strong&gt; evolved code instructions), which surpasses &lt;strong&gt;Claude-Plus (+6.8)&lt;/strong&gt;, &lt;strong&gt;Bard (+15.3)&lt;/strong&gt; and &lt;strong&gt;InstructCodeT5+ (+22.3)&lt;/strong&gt; on the &lt;a href=&#34;https://github.com/openai/human-eval&#34;&gt;HumanEval Benchmarks&lt;/a&gt;. For more details (&lt;a href=&#34;https://arxiv.org/abs/2306.08568&#34;&gt;Paper&lt;/a&gt;, &lt;a href=&#34;https://fa6d89fdc546d594.gradio.app/&#34;&gt;Demo (Only support code-related English instructions now.)&lt;/a&gt;, &lt;a href=&#34;https://a7a1ac225062217b.gradio.app/&#34;&gt;Backup Demo1&lt;/a&gt;, &lt;a href=&#34;https://fc4e35bf3ef95f73.gradio.app/&#34;&gt;Backup Demo2&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/WizardLM/WizardCoder-15B-V1.0&#34;&gt;Model Weights&lt;/a&gt;), please refer to &lt;a href=&#34;https://github.com/nlpxucan/WizardLM/tree/main/WizardCoder&#34;&gt;WizardCoder&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ”¥ Our WizardLM-13B-V1.0 model achieves the 1st-rank of the opensource models on the &lt;a href=&#34;https://tatsu-lab.github.io/alpaca_eval/&#34;&gt;AlpacaEval Leaderboard&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ“£ Please refer to our Twitter account &lt;a href=&#34;https://twitter.com/WizardLM_AI&#34;&gt;https://twitter.com/WizardLM_AI&lt;/a&gt; and HuggingFace Repo &lt;a href=&#34;https://huggingface.co/WizardLM&#34;&gt;https://huggingface.co/WizardLM&lt;/a&gt; . We will use them to announce any new release at the 1st time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ”¥ We released &lt;strong&gt;WizardLM-30B-V1.0&lt;/strong&gt; (&lt;a href=&#34;https://f553adabc276a6f5.gradio.app&#34;&gt;Demo_30B&lt;/a&gt;) and &lt;strong&gt;WizardLM-13B-V1.0&lt;/strong&gt; (&lt;a href=&#34;https://cf3aa6271d218ae9.gradio.app&#34;&gt;Demo_13B&lt;/a&gt;) trained with &lt;strong&gt;250k&lt;/strong&gt; evolved instructions (from ShareGPT), and &lt;strong&gt;WizardLM-7B-V1.0&lt;/strong&gt; (&lt;a href=&#34;https://74ecfd89dccaaa08.gradio.app&#34;&gt;Demo_7B&lt;/a&gt;) trained with &lt;strong&gt;70k&lt;/strong&gt; evolved instructions (from Alpaca data). Please checkout the &lt;a href=&#34;https://huggingface.co/WizardLM&#34;&gt;Delta Weights&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2304.12244&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ“£ We are looking for highly motivated students to join us as interns to create more intelligent AI together. Please contact &lt;a href=&#34;mailto:caxu@microsoft.com&#34;&gt;caxu@microsoft.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Although on our **complexity-balanced test set**, **WizardLM-7B has more cases that are preferred by human labelers than ChatGPT** in the high-complexity instructions (difficulty level &gt;= 8), it still lags behind ChatGPT on the entire test set, and we also consider WizardLM to still be in a **baby state**. This repository will **continue to improve WizardLM**, train on larger scales, add more training data, and innovate more advanced large-model training methods. --&gt; &#xA;&lt;p&gt;&lt;b&gt;Note for 30B and 13B model usage:&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;To obtain results &lt;strong&gt;identical to our demo&lt;/strong&gt;, please strictly follow the prompts and invocation methods provided in the &lt;strong&gt;&#34;src/infer_wizardlm13b.py&#34;&lt;/strong&gt; to use our 13B model for inference. Unlike the 7B model, the 13B model adopts the prompt format from &lt;b&gt;Vicuna&lt;/b&gt; and supports &lt;strong&gt;multi-turn&lt;/strong&gt; conversation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;For WizardLM-13B-V1.0, WizardLM-30B-V1.0 &lt;/b&gt;, the Prompt should be as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user&#39;s questions. USER: hello, who are you? ASSISTANT: &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;For WizardLM-7B-V1.0 &lt;/b&gt;, the Prompt should be as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;{instruction}\n\n### Response:&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;For WizardCoder-15B-V1.0 &lt;/b&gt;, the Prompt should be as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n{instruction}\n\n### Response:&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GPT-4 automatic evaluation&lt;/h3&gt; &#xA;&lt;p&gt;We adopt the automatic evaluation framework based on GPT-4 proposed by FastChat to assess the performance of chatbot models. As shown in the following figure, WizardLM-30B achieved better results than Guanaco-65B.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; width=&#34;100%&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nlpxucan/WizardLM/main/imgs/WizarLM30b-GPT4.png&#34; alt=&#34;WizardLM&#34; style=&#34;width: 100%; min-width: 300px; display: block; margin: auto;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;WizardLM-30B performance on different skills.&lt;/h3&gt; &#xA;&lt;p&gt;The following figure compares WizardLM-30B and ChatGPTâ€™s skill on Evol-Instruct testset. The result indicates that WizardLM-30B achieves 97.8% of ChatGPTâ€™s performance on average, with almost 100% (or more than) capacity on 18 skills, and more than 90% capacity on 24 skills.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; width=&#34;100%&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nlpxucan/WizardLM/main/imgs/evol-testset_skills-30b.png&#34; alt=&#34;WizardLM&#34; style=&#34;width: 100%; min-width: 300px; display: block; margin: auto;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;WizardLM performance on NLP foundation tasks.&lt;/h3&gt; &#xA;&lt;p&gt;The following table provides a comparison of WizardLMs and other LLMs on NLP foundation tasks. The results indicate that WizardLMs consistently exhibit superior performance in comparison to the LLaMa models of the same size. Furthermore, our WizardLM-30B model showcases comparable performance to OpenAI&#39;s Text-davinci-003 on the MMLU and HellaSwag benchmarks.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;MMLU 5-shot&lt;/th&gt; &#xA;   &lt;th&gt;ARC 25-shot&lt;/th&gt; &#xA;   &lt;th&gt;TruthfulQA 0-shot&lt;/th&gt; &#xA;   &lt;th&gt;HellaSwag 10-shot&lt;/th&gt; &#xA;   &lt;th&gt;Average&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-davinci-003&lt;/td&gt; &#xA;   &lt;td&gt;&lt;u&gt;56.9&lt;u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;85.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;59.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;u&gt;82.2&lt;u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.9&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vicuna-13b 1.1&lt;/td&gt; &#xA;   &lt;td&gt;51.3&lt;/td&gt; &#xA;   &lt;td&gt;53.0&lt;/td&gt; &#xA;   &lt;td&gt;51.8&lt;/td&gt; &#xA;   &lt;td&gt;80.1&lt;/td&gt; &#xA;   &lt;td&gt;59.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guanaco 30B&lt;/td&gt; &#xA;   &lt;td&gt;57.6&lt;/td&gt; &#xA;   &lt;td&gt;63.7&lt;/td&gt; &#xA;   &lt;td&gt;50.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;85.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardLM-7B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;42.7&lt;/td&gt; &#xA;   &lt;td&gt;51.6&lt;/td&gt; &#xA;   &lt;td&gt;44.7&lt;/td&gt; &#xA;   &lt;td&gt;77.7&lt;/td&gt; &#xA;   &lt;td&gt;54.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardLM-13B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;52.3&lt;/td&gt; &#xA;   &lt;td&gt;57.2&lt;/td&gt; &#xA;   &lt;td&gt;50.5&lt;/td&gt; &#xA;   &lt;td&gt;81.0&lt;/td&gt; &#xA;   &lt;td&gt;60.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardLM-30B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;58.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;u&gt;62.5&lt;u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;u&gt;52.4&lt;u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/td&gt; &#xA;   &lt;td&gt;83.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;u&gt;64.2&lt;u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;WizardLM performance on code generation.&lt;/h3&gt; &#xA;&lt;p&gt;The following table provides a comprehensive comparison of WizardLMs and several other LLMs on the code generation task, namely HumanEval. The evaluation metric is pass@1. The results indicate that WizardLMs consistently exhibit superior performance in comparison to the LLaMa models of the same size. Furthermore, our WizardLM-30B model surpasses StarCoder and OpenAI&#39;s code-cushman-001. Moreover, our Code LLM, WizardCoder, demonstrates exceptional performance, achieving a pass@1 score of 57.3, surpassing the open-source SOTA by approximately 20 points.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;HumanEval Pass@1&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-7B&lt;/td&gt; &#xA;   &lt;td&gt;10.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-13B&lt;/td&gt; &#xA;   &lt;td&gt;15.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeGen-16B-Multi&lt;/td&gt; &#xA;   &lt;td&gt;18.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeGeeX&lt;/td&gt; &#xA;   &lt;td&gt;22.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-33B&lt;/td&gt; &#xA;   &lt;td&gt;21.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLaMA-65B&lt;/td&gt; &#xA;   &lt;td&gt;23.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PaLM-540B&lt;/td&gt; &#xA;   &lt;td&gt;26.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeGen-16B-Mono&lt;/td&gt; &#xA;   &lt;td&gt;29.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;code-cushman-001&lt;/td&gt; &#xA;   &lt;td&gt;33.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StarCoder&lt;/td&gt; &#xA;   &lt;td&gt;&lt;u&gt;33.6&lt;u&gt;&lt;/u&gt;&lt;/u&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardLM-7B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;19.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardLM-13B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;24.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardLM-30B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;37.8&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WizardCoder-15B 1.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57.3&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Call for Feedbacks&lt;/h2&gt; &#xA;&lt;p&gt;We welcome everyone to use your professional and difficult instructions to evaluate WizardLM, and show us examples of poor performance and your suggestions in the &lt;a href=&#34;https://github.com/nlpxucan/WizardLM/issues&#34;&gt;issue discussion&lt;/a&gt; area. We are focusing on improving the Evol-Instruct now and hope to relieve existing weaknesses and issues in the the next version of WizardLM. After that, we will open the code and pipeline of up-to-date Evol-Instruct algorithm and work with you together to improve it.&lt;/p&gt; &#xA;&lt;h2&gt;Unofficial Video Introductions&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the enthusiastic friends, their video introductions are more lively and interesting.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SaJ8wyKMBds&#34;&gt;GET WizardLM NOW! 7B LLM KING That Can Beat ChatGPT! I&#39;m IMPRESSED!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=I6sER-qivYk&#34;&gt;WizardLM: Enhancing Large Language Models to Follow Complex Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XjsyHrmd3Xo&#34;&gt;WizardCoder AI Is The NEW ChatGPT&#39;s Coding TWIN!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Overview of Evol-Instruct&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nlpxucan/evol-instruct&#34;&gt;Evol-Instruct&lt;/a&gt; is a novel method using LLMs instead of humans to automatically mass-produce open-domain instructions of various difficulty levels and skills range, to improve the performance of LLMs.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; width=&#34;100%&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nlpxucan/WizardLM/main/imgs/git_overall.png&#34; alt=&#34;WizardLM&#34; style=&#34;width: 86%; min-width: 300px; display: block; margin: auto;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; width=&#34;100%&#34;&gt; &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nlpxucan/WizardLM/main/imgs/git_running.png&#34; alt=&#34;WizardLM&#34; style=&#34;width: 86%; min-width: 300px; display: block; margin: auto;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Citation&lt;/h3&gt; &#xA;&lt;p&gt;Please cite the paper if you use the data or code from WizardLM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{xu2023wizardlm,&#xA;      title={WizardLM: Empowering Large Language Models to Follow Complex Instructions}, &#xA;      author={Can Xu and Qingfeng Sun and Kai Zheng and Xiubo Geng and Pu Zhao and Jiazhan Feng and Chongyang Tao and Daxin Jiang},&#xA;      year={2023},&#xA;      eprint={2304.12244},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please cite the paper if you use the data or code from WizardCoder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{luo2023wizardcoder,&#xA;      title={WizardCoder: Empowering Code Large Language Models with Evol-Instruct}, &#xA;      author={Ziyang Luo and Can Xu and Pu Zhao and Qingfeng Sun and Xiubo Geng and Wenxiang Hu and Chongyang Tao and Jing Ma and Qingwei Lin and Daxin Jiang},&#xA;      year={2023},&#xA;      eprint={2306.08568},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The resources, including code, data, and model weights, associated with this project are restricted for academic research purposes only and cannot be used for commercial purposes. The content produced by any version of WizardLM is influenced by uncontrollable variables such as randomness, and therefore, the accuracy of the output cannot be guaranteed by this project. This project does not accept any legal liability for the content of the model output, nor does it assume responsibility for any losses incurred due to the use of associated resources and output results.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hiyouga/LLaMA-Efficient-Tuning</title>
    <updated>2023-06-25T01:51:43Z</updated>
    <id>tag:github.com,2023-06-25:/hiyouga/LLaMA-Efficient-Tuning</id>
    <link href="https://github.com/hiyouga/LLaMA-Efficient-Tuning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fine-tuning LLaMA with PEFT (PT+SFT+RLHF with QLoRA)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLaMA Efficient Tuning&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/hiyouga/LLaMA-Efficient-Tuning?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hiyouga/LLaMA-Efficient-Tuning&#34; alt=&#34;GitHub Code License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/hiyouga/LLaMA-Efficient-Tuning&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-blue&#34; alt=&#34;GitHub pull request&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ðŸ‘‹ Join our &lt;a href=&#34;https://raw.githubusercontent.com/hiyouga/LLaMA-Efficient-Tuning/main/assets/wechat.jpg&#34;&gt;WeChat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;[23/06/22] Now we align the &lt;a href=&#34;https://raw.githubusercontent.com/hiyouga/LLaMA-Efficient-Tuning/main/src/api_demo.py&#34;&gt;demo API&lt;/a&gt; with the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;OpenAI&#39;s&lt;/a&gt; format where you can insert the fine-tuned model in arbitrary ChatGPT-based applications.&lt;/p&gt; &#xA;&lt;p&gt;[23/06/15] Now we support training the baichuan-7B model in this repo. Try &lt;code&gt;--model_name_or_path baichuan-inc/baichuan-7B&lt;/code&gt; and &lt;code&gt;--lora_target W_pack&lt;/code&gt; arguments to use the baichuan-7B model.&lt;/p&gt; &#xA;&lt;p&gt;[23/06/03] Now we support quantized training and inference (aka &lt;a href=&#34;https://github.com/artidoro/qlora&#34;&gt;QLoRA&lt;/a&gt;). Try &lt;code&gt;--quantization_bit 4/8&lt;/code&gt; argument to work with quantized model. (experimental feature)&lt;/p&gt; &#xA;&lt;p&gt;[23/05/31] Now we support training the BLOOM &amp;amp; BLOOMZ models in this repo. Try &lt;code&gt;--model_name_or_path bigscience/bloomz-7b1-mt&lt;/code&gt; and &lt;code&gt;--lora_target query_key_value&lt;/code&gt; arguments to use the BLOOMZ model.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Models&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;LLaMA&lt;/a&gt; (7B/13B/33B/65B)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/bigscience/bloom&#34;&gt;BLOOM&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://huggingface.co/bigscience/bloomz&#34;&gt;BLOOMZ&lt;/a&gt; (560M/1.1B/1.7B/3B/7.1B/176B)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/baichuan-inc/baichuan-7B&#34;&gt;baichuan&lt;/a&gt; (7B)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Training Approaches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf&#34;&gt;(Continually) pre-training&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Full-parameter tuning&lt;/li&gt; &#xA;   &lt;li&gt;Partial-parameter tuning&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2106.09685&#34;&gt;LoRA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.14314&#34;&gt;QLoRA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2109.01652&#34;&gt;Supervised fine-tuning&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Full-parameter tuning&lt;/li&gt; &#xA;   &lt;li&gt;Partial-parameter tuning&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2106.09685&#34;&gt;LoRA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.14314&#34;&gt;QLoRA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2203.02155&#34;&gt;RLHF&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2106.09685&#34;&gt;LoRA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.14314&#34;&gt;QLoRA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Provided Datasets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For pre-training: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hiyouga/LLaMA-Efficient-Tuning/main/data/wiki_demo.txt&#34;&gt;Wiki Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For supervised fine-tuning: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;Stanford Alpaca&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ymcui/Chinese-LLaMA-Alpaca&#34;&gt;Stanford Alpaca (Chinese)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Instruction-Tuning-with-GPT-4/GPT-4-LLM&#34;&gt;GPT-4 Generated Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/train_2M_CN&#34;&gt;BELLE 2M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/train_1M_CN&#34;&gt;BELLE 1M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/train_0.5M_CN&#34;&gt;BELLE 0.5M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/generated_chat_0.4M&#34;&gt;BELLE Dialogue 0.4M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/school_math_0.25M&#34;&gt;BELLE School Math 0.25M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/multiturn_chat_0.8M&#34;&gt;BELLE Multiturn Chat 0.8M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/JosephusCheung/GuanacoDataset&#34;&gt;Guanaco Dataset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/YeungNLP/firefly-train-1.1M&#34;&gt;Firefly 1.1M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/sahil2801/CodeAlpaca-20k&#34;&gt;CodeAlpaca 20k&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/QingyiSi/Alpaca-CoT&#34;&gt;Alpaca CoT&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/suolyer/webqa&#34;&gt;Web QA (Chinese)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/thunlp/UltraChat&#34;&gt;UltraChat&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For reward model training: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/Anthropic/hh-rlhf&#34;&gt;HH-RLHF&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Instruction-Tuning-with-GPT-4/GPT-4-LLM&#34;&gt;GPT-4 Generated Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Instruction-Tuning-with-GPT-4/GPT-4-LLM&#34;&gt;GPT-4 Generated Data (Chinese)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/hiyouga/LLaMA-Efficient-Tuning/main/data/README.md&#34;&gt;data/README.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Some datasets require confirmation before using them, so we recommend logging in with your HuggingFace account using these commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade huggingface_hub&#xA;huggingface-cli login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.8+ and PyTorch 1.13.1+&lt;/li&gt; &#xA; &lt;li&gt;ðŸ¤—Transformers, Datasets, Accelerate, PEFT and TRL&lt;/li&gt; &#xA; &lt;li&gt;jieba, rouge_chinese and nltk (used at evaluation)&lt;/li&gt; &#xA; &lt;li&gt;gradio and mdtex2html (used in web_demo.py)&lt;/li&gt; &#xA; &lt;li&gt;uvicorn and fastapi (used in api_demo.py)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And &lt;strong&gt;powerful GPUs&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Data Preparation (optional)&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;code&gt;data/example_dataset&lt;/code&gt; for checking the details about the format of dataset files. You can either use a single &lt;code&gt;.json&lt;/code&gt; file or a &lt;a href=&#34;https://huggingface.co/docs/datasets/dataset_script&#34;&gt;dataset loading script&lt;/a&gt; with multiple files to create a custom dataset.&lt;/p&gt; &#xA;&lt;p&gt;Note: please update &lt;code&gt;data/dataset_info.json&lt;/code&gt; to use your custom dataset. About the format of this file, please refer to &lt;code&gt;data/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dependence Installation (optional)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hiyouga/LLaMA-Efficient-Tuning.git&#xA;conda create -n llama_etuning python=3.10&#xA;conda activate llama_etuning&#xA;cd LLaMA-Efficient-Tuning&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LLaMA Weights Preparation (optional)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the weights of the LLaMA models.&lt;/li&gt; &#xA; &lt;li&gt;Convert them to HF format using the following command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m transformers.models.llama.convert_llama_weights_to_hf \&#xA;    --input_dir path_to_llama_weights --model_size 7B --output_dir path_to_llama_model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;(Continually) Pre-Training&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=0 python src/train_pt.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --do_train \&#xA;    --dataset wiki_demo \&#xA;    --finetuning_type lora \&#xA;    --output_dir path_to_pt_checkpoint \&#xA;    --overwrite_cache \&#xA;    --per_device_train_batch_size 4 \&#xA;    --gradient_accumulation_steps 4 \&#xA;    --lr_scheduler_type cosine \&#xA;    --logging_steps 10 \&#xA;    --save_steps 1000 \&#xA;    --learning_rate 5e-5 \&#xA;    --num_train_epochs 3.0 \&#xA;    --plot_loss \&#xA;    --fp16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supervised Fine-Tuning&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=0 python src/train_sft.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --do_train \&#xA;    --dataset alpaca_gpt4_en \&#xA;    --finetuning_type lora \&#xA;    --output_dir path_to_sft_checkpoint \&#xA;    --overwrite_cache \&#xA;    --per_device_train_batch_size 4 \&#xA;    --gradient_accumulation_steps 4 \&#xA;    --lr_scheduler_type cosine \&#xA;    --logging_steps 10 \&#xA;    --save_steps 1000 \&#xA;    --learning_rate 5e-5 \&#xA;    --num_train_epochs 3.0 \&#xA;    --plot_loss \&#xA;    --fp16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reward Model Training&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=0 python src/train_rm.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --do_train \&#xA;    --dataset comparison_gpt4_en \&#xA;    --finetuning_type lora \&#xA;    --output_dir path_to_rm_checkpoint \&#xA;    --per_device_train_batch_size 4 \&#xA;    --gradient_accumulation_steps 4 \&#xA;    --lr_scheduler_type cosine \&#xA;    --logging_steps 10 \&#xA;    --save_steps 1000 \&#xA;    --learning_rate 1e-5 \&#xA;    --num_train_epochs 1.0 \&#xA;    --plot_loss \&#xA;    --fp16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PPO Training (RLHF)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=0 python src/train_ppo.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --do_train \&#xA;    --dataset alpaca_gpt4_en \&#xA;    --finetuning_type lora \&#xA;    --checkpoint_dir path_to_sft_checkpoint \&#xA;    --reward_model path_to_rm_checkpoint \&#xA;    --output_dir path_to_ppo_checkpoint \&#xA;    --per_device_train_batch_size 2 \&#xA;    --gradient_accumulation_steps 4 \&#xA;    --lr_scheduler_type cosine \&#xA;    --logging_steps 10 \&#xA;    --save_steps 1000 \&#xA;    --learning_rate 1e-5 \&#xA;    --num_train_epochs 1.0 \&#xA;    --resume_lora_training False \&#xA;    --plot_loss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Distributed Training&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;accelerate config # configure the environment&#xA;accelerate launch src/train_XX.py # arguments (same as above)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluation (BLEU and ROUGE_CHINESE)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=0 python src/train_sft.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --do_eval \&#xA;    --dataset alpaca_gpt4_en \&#xA;    --checkpoint_dir path_to_checkpoint \&#xA;    --output_dir path_to_eval_result \&#xA;    --per_device_eval_batch_size 8 \&#xA;    --max_samples 50 \&#xA;    --predict_with_generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend using &lt;code&gt;--per_device_eval_batch_size=1&lt;/code&gt; and &lt;code&gt;--max_target_length 128&lt;/code&gt; at 4/8-bit evaluation.&lt;/p&gt; &#xA;&lt;h3&gt;API / CLI / Web Demo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python src/xxx_demo.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --checkpoint_dir path_to_checkpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Export model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python src/export_model.py \&#xA;    --model_name_or_path path_to_your_model \&#xA;    --checkpoint_dir path_to_checkpoint \&#xA;    --output_dir path_to_export&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/hiyouga/LLaMA-Efficient-Tuning/main/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://github.com/facebookresearch/llama/raw/main/MODEL_CARD.md&#34;&gt;Model Card&lt;/a&gt; to use the LLaMA models.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://huggingface.co/spaces/bigscience/license&#34;&gt;RAIL License&lt;/a&gt; to use the BLOOM &amp;amp; BLOOMZ models.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://huggingface.co/baichuan-inc/baichuan-7B/resolve/main/baichuan-7B%20%E6%A8%A1%E5%9E%8B%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE.pdf&#34;&gt;baichuan-7B License&lt;/a&gt; to use the baichuan-7B model.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If this work is helpful, please cite as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@Misc{llama-efficient-tuning,&#xA;  title = {LLaMA Efficient Tuning},&#xA;  author = {hiyouga},&#xA;  howpublished = {\url{https://github.com/hiyouga/LLaMA-Efficient-Tuning}},&#xA;  year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This repo is a sibling of &lt;a href=&#34;https://github.com/hiyouga/ChatGLM-Efficient-Tuning&#34;&gt;ChatGLM-Efficient-Tuning&lt;/a&gt;. They share a similar code structure of efficient tuning on large language models.&lt;/p&gt;</summary>
  </entry>
</feed>