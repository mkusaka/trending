<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-12-29T01:38:52Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Genesis-Embodied-AI/Genesis</title>
    <updated>2025-12-29T01:38:52Z</updated>
    <id>tag:github.com,2025-12-29:/Genesis-Embodied-AI/Genesis</id>
    <link href="https://github.com/Genesis-Embodied-AI/Genesis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A generative world for general-purpose robotics &amp; embodied AI learning.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/imgs/big_text.png&#34; alt=&#34;Genesis&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/imgs/teaser.png&#34; alt=&#34;Teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/genesis-world/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/genesis-world&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/genesis-world/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/genesis-world&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/Genesis/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Genesis-Embodied-AI/Genesis&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/Genesis/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/Genesis-Embodied-AI/Genesis&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/English-d9d9d9&#34; alt=&#34;README in English&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/README_FR.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Francais-d9d9d9&#34; alt=&#34;README en FranÃ§ais&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/README_CN.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-d9d9d9&#34; alt=&#34;ç®€ä½“ä¸­æ–‡ç‰ˆè‡ªè¿°æ–‡ä»¶&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/README_JA.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E6%97%A5%E6%9C%AC%E8%AA%9E-d9d9d9&#34; alt=&#34;æ—¥æœ¬èªžç‰ˆ README&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Genesis&lt;/h1&gt; &#xA;&lt;h2&gt;ðŸ”¥ News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2024-12-25] Added a &lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#docker&#34;&gt;docker&lt;/a&gt; including support for the ray-tracing renderer&lt;/li&gt; &#xA; &lt;li&gt;[2024-12-24] Added guidelines for &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/Genesis/raw/main/CONTRIBUTING.md&#34;&gt;contributing to Genesis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#what-is-genesis&#34;&gt;What is Genesis?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#quick-installation&#34;&gt;Quick Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#contributing-to-genesis&#34;&gt;Contributing to Genesis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#license-and-acknowledgments&#34;&gt;License and Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#associated-papers&#34;&gt;Associated Papers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genesis-Embodied-AI/Genesis/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What is Genesis?&lt;/h2&gt; &#xA;&lt;p&gt;Genesis is a physics platform designed for general-purpose &lt;em&gt;Robotics/Embodied AI/Physical AI&lt;/em&gt; applications. It is simultaneously multiple things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A &lt;strong&gt;universal physics engine&lt;/strong&gt; re-built from the ground up, capable of simulating a wide range of materials and physical phenomena.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;lightweight&lt;/strong&gt;, &lt;strong&gt;ultra-fast&lt;/strong&gt;, &lt;strong&gt;pythonic&lt;/strong&gt;, and &lt;strong&gt;user-friendly&lt;/strong&gt; robotics simulation platform.&lt;/li&gt; &#xA; &lt;li&gt;A powerful and fast &lt;strong&gt;photo-realistic rendering system&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;generative data engine&lt;/strong&gt; that transforms user-prompted natural language description into various modalities of data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Genesis aims to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lower the barrier&lt;/strong&gt; to using physics simulations, making robotics research accessible to everyone. See our &lt;a href=&#34;https://genesis-world.readthedocs.io/en/latest/user_guide/overview/mission.html&#34;&gt;mission statement&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unify diverse physics solvers&lt;/strong&gt; into a single framework to recreate the physical world with the highest fidelity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automate data generation&lt;/strong&gt;, reducing human effort and letting the data flywheel spin on its own.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Project Page: &lt;a href=&#34;https://genesis-embodied-ai.github.io/&#34;&gt;https://genesis-embodied-ai.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: Over 43 million FPS when simulating a Franka robotic arm with a single RTX 4090 (430,000 times faster than real-time).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;: Runs on Linux, macOS, Windows, and supports multiple compute backends (CPU, Nvidia/AMD GPUs, Apple Metal).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integration of diverse physics solvers&lt;/strong&gt;: Rigid body, MPM, SPH, FEM, PBD, Stable Fluid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wide range of material models&lt;/strong&gt;: Simulation and coupling of rigid bodies, liquids, gases, deformable objects, thin-shell objects, and granular materials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility with various robots&lt;/strong&gt;: Robotic arms, legged robots, drones, &lt;em&gt;soft robots&lt;/em&gt;, and support for loading &lt;code&gt;MJCF (.xml)&lt;/code&gt;, &lt;code&gt;URDF&lt;/code&gt;, &lt;code&gt;.obj&lt;/code&gt;, &lt;code&gt;.glb&lt;/code&gt;, &lt;code&gt;.ply&lt;/code&gt;, &lt;code&gt;.stl&lt;/code&gt;, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Photo-realistic rendering&lt;/strong&gt;: Native ray-tracing-based rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Differentiability&lt;/strong&gt;: Genesis is designed to be fully differentiable. Currently, our MPM solver and Tool Solver support differentiability, with other solvers planned for future versions (starting with rigid &amp;amp; articulated body solver).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Physics-based tactile simulation&lt;/strong&gt;: Differentiable &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/DiffTactile&#34;&gt;tactile sensor simulation&lt;/a&gt; coming soon (expected in version 0.3.0).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User-friendliness&lt;/strong&gt;: Designed for simplicity, with intuitive installation and APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Genesis is available via PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install genesis-world  # Requires Python &amp;gt;=3.9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to install &lt;strong&gt;PyTorch&lt;/strong&gt; following the &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;official instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the latest version, clone the repository and install locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Genesis-Embodied-AI/Genesis.git&#xA;cd Genesis&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Genesis from Docker, you can first build the Docker image as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t genesis -f docker/Dockerfile docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run the examples inside the docker image (mounted to &lt;code&gt;/workspace/examples&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xhost +local:root # Allow the container to access the display&#xA;&#xA;docker run --gpus all --rm -it \&#xA;-e DISPLAY=$DISPLAY \&#xA;-v /tmp/.X11-unix/:/tmp/.X11-unix \&#xA;-v $PWD:/workspace \&#xA;genesis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Comprehensive documentation is available in &lt;a href=&#34;https://genesis-world.readthedocs.io/en/latest/user_guide/index.html&#34;&gt;English&lt;/a&gt; and &lt;a href=&#34;https://genesis-world.readthedocs.io/zh-cn/latest/user_guide/index.html&#34;&gt;Chinese&lt;/a&gt;. This includes detailed installation steps, tutorials, and API references.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Genesis&lt;/h2&gt; &#xA;&lt;p&gt;The Genesis project is an open and collaborative effort. We welcome all forms of contributions from the community, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pull requests&lt;/strong&gt; for new features or bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bug reports&lt;/strong&gt; through GitHub Issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Suggestions&lt;/strong&gt; to improve Genesis&#39;s usability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to our &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/Genesis/raw/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs or request features via GitHub &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/Genesis/issues&#34;&gt;Issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Join discussions or ask questions on GitHub &lt;a href=&#34;https://github.com/Genesis-Embodied-AI/Genesis/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License and Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The Genesis source code is licensed under Apache 2.0.&lt;/p&gt; &#xA;&lt;p&gt;Genesis&#39;s development has been made possible thanks to these open-source projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taichi-dev/taichi&#34;&gt;Taichi&lt;/a&gt;: High-performance cross-platform compute backend. Kudos to the Taichi team for their technical support!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhouxian/FluidLab&#34;&gt;FluidLab&lt;/a&gt;: Reference MPM solver implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erizmr/SPH_Taichi&#34;&gt;SPH_Taichi&lt;/a&gt;: Reference SPH solver implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matthias-research.github.io/pages/tenMinutePhysics/index.html&#34;&gt;Ten Minute Physics&lt;/a&gt; and &lt;a href=&#34;https://github.com/WASD4959/PBF3D&#34;&gt;PBF3D&lt;/a&gt;: Reference PBD solver implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-deepmind/mujoco&#34;&gt;MuJoCo&lt;/a&gt;: Reference for rigid body dynamics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danfis/libccd&#34;&gt;libccd&lt;/a&gt;: Reference for collision detection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmatl/pyrender&#34;&gt;PyRender&lt;/a&gt;: Rasterization-based renderer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LuisaGroup/LuisaCompute&#34;&gt;LuisaCompute&lt;/a&gt; and &lt;a href=&#34;https://github.com/LuisaGroup/LuisaRender&#34;&gt;LuisaRender&lt;/a&gt;: Ray-tracing DSL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Associated Papers&lt;/h2&gt; &#xA;&lt;p&gt;Genesis is a large scale effort that integrates state-of-the-art technologies of various existing and on-going research work into a single system. Here we include a non-exhaustive list of all the papers that contributed to the Genesis project in one way or another:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xian, Zhou, et al. &#34;Fluidlab: A differentiable environment for benchmarking complex fluid manipulation.&#34; arXiv preprint arXiv:2303.02346 (2023).&lt;/li&gt; &#xA; &lt;li&gt;Xu, Zhenjia, et al. &#34;Roboninja: Learning an adaptive cutting policy for multi-material objects.&#34; arXiv preprint arXiv:2302.11553 (2023).&lt;/li&gt; &#xA; &lt;li&gt;Wang, Yufei, et al. &#34;Robogen: Towards unleashing infinite data for automated robot learning via generative simulation.&#34; arXiv preprint arXiv:2311.01455 (2023).&lt;/li&gt; &#xA; &lt;li&gt;Wang, Tsun-Hsuan, et al. &#34;Softzoo: A soft robot co-design benchmark for locomotion in diverse environments.&#34; arXiv preprint arXiv:2303.09555 (2023).&lt;/li&gt; &#xA; &lt;li&gt;Wang, Tsun-Hsuan Johnson, et al. &#34;Diffusebot: Breeding soft robots with physics-augmented generative diffusion models.&#34; Advances in Neural Information Processing Systems 36 (2023): 44398-44423.&lt;/li&gt; &#xA; &lt;li&gt;Katara, Pushkal, Zhou Xian, and Katerina Fragkiadaki. &#34;Gen2sim: Scaling up robot learning in simulation with generative models.&#34; 2024 IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2024.&lt;/li&gt; &#xA; &lt;li&gt;Si, Zilin, et al. &#34;DiffTactile: A Physics-based Differentiable Tactile Simulator for Contact-rich Robotic Manipulation.&#34; arXiv preprint arXiv:2403.08716 (2024).&lt;/li&gt; &#xA; &lt;li&gt;Wang, Yian, et al. &#34;Thin-Shell Object Manipulations With Differentiable Physics Simulations.&#34; arXiv preprint arXiv:2404.00451 (2024).&lt;/li&gt; &#xA; &lt;li&gt;Lin, Chunru, et al. &#34;UBSoft: A Simulation Platform for Robotic Skill Learning in Unbounded Soft Environments.&#34; arXiv preprint arXiv:2411.12711 (2024).&lt;/li&gt; &#xA; &lt;li&gt;Zhou, Wenyang, et al. &#34;EMDM: Efficient motion diffusion model for fast and high-quality motion generation.&#34; European Conference on Computer Vision. Springer, Cham, 2025.&lt;/li&gt; &#xA; &lt;li&gt;Qiao, Yi-Ling, Junbang Liang, Vladlen Koltun, and Ming C. Lin. &#34;Scalable differentiable physics for learning and control.&#34; International Conference on Machine Learning. PMLR, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Qiao, Yi-Ling, Junbang Liang, Vladlen Koltun, and Ming C. Lin. &#34;Efficient differentiable simulation of articulated bodies.&#34; In International Conference on Machine Learning, PMLR, 2021.&lt;/li&gt; &#xA; &lt;li&gt;Qiao, Yi-Ling, Junbang Liang, Vladlen Koltun, and Ming Lin. &#34;Differentiable simulation of soft multi-body systems.&#34; Advances in Neural Information Processing Systems 34 (2021).&lt;/li&gt; &#xA; &lt;li&gt;Wan, Weilin, et al. &#34;Tlcontrol: Trajectory and language control for human motion synthesis.&#34; arXiv preprint arXiv:2311.17135 (2023).&lt;/li&gt; &#xA; &lt;li&gt;Wang, Yian, et al. &#34;Architect: Generating Vivid and Interactive 3D Scenes with Hierarchical 2D Inpainting.&#34; arXiv preprint arXiv:2411.09823 (2024).&lt;/li&gt; &#xA; &lt;li&gt;Zheng, Shaokun, et al. &#34;LuisaRender: A high-performance rendering framework with layered and unified interfaces on stream architectures.&#34; ACM Transactions on Graphics (TOG) 41.6 (2022): 1-19.&lt;/li&gt; &#xA; &lt;li&gt;Fan, Yingruo, et al. &#34;Faceformer: Speech-driven 3d facial animation with transformers.&#34; Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. 2022.&lt;/li&gt; &#xA; &lt;li&gt;Wu, Sichun, Kazi Injamamul Haque, and Zerrin Yumak. &#34;ProbTalk3D: Non-Deterministic Emotion Controllable Speech-Driven 3D Facial Animation Synthesis Using VQ-VAE.&#34; Proceedings of the 17th ACM SIGGRAPH Conference on Motion, Interaction, and Games. 2024.&lt;/li&gt; &#xA; &lt;li&gt;Dou, Zhiyang, et al. &#34;CÂ· ase: Learning conditional adversarial skill embeddings for physics-based characters.&#34; SIGGRAPH Asia 2023 Conference Papers. 2023.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and many more on-going work.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use Genesis in your research, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@software{Genesis,&#xA;  author = {Genesis Authors},&#xA;  title = {Genesis: A Universal and Generative Physics Engine for Robotics and Beyond},&#xA;  month = {December},&#xA;  year = {2024},&#xA;  url = {https://github.com/Genesis-Embodied-AI/Genesis}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>bytedance/monolith</title>
    <updated>2025-12-29T01:38:52Z</updated>
    <id>tag:github.com,2025-12-29:/bytedance/monolith</id>
    <link href="https://github.com/bytedance/monolith" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Lightweight Recommendation System&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Monolith&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2209.07663&#34;&gt;Monolith&lt;/a&gt; is a deep learning framework for large scale recommendation modeling. It introduces two important features which are crucial for advanced recommendation system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;collisionless embedding tables guarantees unique represeantion for different id features&lt;/li&gt; &#xA; &lt;li&gt;real time training captures the latest hotspots and help users to discover new intersts rapidly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Monolith is built on the top of TensorFlow and supports batch/real-time training and serving.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion Group&lt;/h2&gt; &#xA;&lt;h3&gt;Join us at Discord&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/QYTDeKxGMX&#34;&gt;https://discord.gg/QYTDeKxGMX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Currently, we only support compilation on the Linux.&lt;/p&gt; &#xA;&lt;p&gt;First, download bazel 3.1.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/bazelbuild/bazel/releases/download/3.1.0/bazel-3.1.0-installer-linux-x86_64.sh &amp;amp;&amp;amp; \&#xA;  chmod +x bazel-3.1.0-installer-linux-x86_64.sh &amp;amp;&amp;amp; \&#xA;  ./bazel-3.1.0-installer-linux-x86_64.sh &amp;amp;&amp;amp; \&#xA;  rm bazel-3.1.0-installer-linux-x86_64.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, prepare a python environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U --user pip numpy wheel packaging requests opt_einsum&#xA;pip install -U --user keras_preprocessing --no-deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can build any target in the monolith. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel run //monolith/native_training:demo --output_filter=IGNORE_LOGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Demo and tutorials&lt;/h3&gt; &#xA;&lt;p&gt;There are a tutorial in &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/monolith/master/markdown/demo&#34;&gt;markdown/demo&lt;/a&gt; on how to run distributed async training, and few guides on how to use the &lt;code&gt;MonolithModel&lt;/code&gt; API &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/monolith/master/markdown&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2025-12-29T01:38:52Z</updated>
    <id>tag:github.com,2025-12-29:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; style=&#34;width:260px&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s especially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/5.5&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/raysan5?label=sponsors&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-r%2Fraylib-red?style=flat&amp;amp;logo=reddit&amp;amp;label=reddit&#34; alt=&#34;Reddit Static Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) using PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3, ES 2.0, ES 3.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, OTF, FNT, BDF, sprite fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM, M3D, glTF)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model shaders and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, QOA, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+140 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+70 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple package managers on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that the Wiki is open for edit, if you find some issues while building raylib for your target platform, feel free to edit the Wiki or open an issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, so please, if you find some issue with a template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in &lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib GitHub Wiki&lt;/a&gt;. Here are the relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/raysan5/raylib/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=raysan5/raylib&amp;amp;max=500&amp;amp;columns=20&amp;amp;anon=1&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different file formats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on &lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib Wiki&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>