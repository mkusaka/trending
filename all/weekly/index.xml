<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-15T01:39:11Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leerob/next-saas-starter</title>
    <updated>2024-12-15T01:39:11Z</updated>
    <id>tag:github.com,2024-12-15:/leerob/next-saas-starter</id>
    <link href="https://github.com/leerob/next-saas-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get started quickly with Next.js, Postgres, Stripe, and shadcn/ui.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Next.js SaaS Starter&lt;/h1&gt; &#xA;&lt;p&gt;This is a starter template for building a SaaS application using &lt;strong&gt;Next.js&lt;/strong&gt; with support for authentication, Stripe integration for payments, and a dashboard for logged-in users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo: &lt;a href=&#34;https://next-saas-start.vercel.app/&#34;&gt;https://next-saas-start.vercel.app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why did I make this?&lt;/summary&gt; &#xA; &lt;p&gt;In 2020, I made a course called &#34;React 2025&#34; which showed how to build a SaaS application with Next.js, Stripe, and other tools.&lt;/p&gt; &#xA; &lt;p&gt;Well, it&#39;s almost 2025 and React 19 has brought so many amazing new features I didn&#39;t predict! This repo is a demonstration of the latest React and Next.js patterns. These patterns can drastically simplify some common tasks in building your SaaS, like building forms, talking to your database, and more.&lt;/p&gt; &#xA; &lt;p&gt;For example, React now has built in hooks like &lt;code&gt;useActionState&lt;/code&gt; to handle inline form errors and pending states. React Server Actions can replace a lot of boilerplate code needed to call an API Route from the client-side. And finally, the React &lt;code&gt;use&lt;/code&gt; hook combined with Next.js makes it incredibly easy to build a powerful &lt;code&gt;useUser()&lt;/code&gt; hook.&lt;/p&gt; &#xA; &lt;p&gt;We&#39;re able to fetch the user from our Postgres database in the root layout, but &lt;em&gt;not&lt;/em&gt; await the &lt;code&gt;Promise&lt;/code&gt;. Instead, we forward the &lt;code&gt;Promise&lt;/code&gt; to a React context provider, where we can &#34;unwrap&#34; it and awaited the streamed in data. This means we can have the best of both worlds: easy code to fetch data from our database (e.g. &lt;code&gt;getUser()&lt;/code&gt;) and a React hook we can use in Client Components (e.g. &lt;code&gt;useUser()&lt;/code&gt;).&lt;/p&gt; &#xA; &lt;p&gt;Fun fact: the majority of the UI for this application was built with &lt;a href=&#34;https://v0.dev&#34;&gt;v0&lt;/a&gt; 🤯 &lt;a href=&#34;https://x.com/leeerob/status/1835777934361084316&#34;&gt;More details here&lt;/a&gt; if you want to learn about this repo.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marketing landing page (&lt;code&gt;/&lt;/code&gt;) with animated Terminal element&lt;/li&gt; &#xA; &lt;li&gt;Pricing page (&lt;code&gt;/pricing&lt;/code&gt;) which connects to Stripe Checkout&lt;/li&gt; &#xA; &lt;li&gt;Dashboard pages with CRUD operations on users/teams&lt;/li&gt; &#xA; &lt;li&gt;Basic RBAC with Owner and Member roles&lt;/li&gt; &#xA; &lt;li&gt;Subscription management with Stripe Customer Portal&lt;/li&gt; &#xA; &lt;li&gt;Email/password authentication with JWTs stored to cookies&lt;/li&gt; &#xA; &lt;li&gt;Global middleware to protect logged-in routes&lt;/li&gt; &#xA; &lt;li&gt;Local middleware to protect Server Actions or validate Zod schemas&lt;/li&gt; &#xA; &lt;li&gt;Activity logging system for any user events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;Postgres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ORM&lt;/strong&gt;: &lt;a href=&#34;https://orm.drizzle.team/&#34;&gt;Drizzle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payments&lt;/strong&gt;: &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UI Library&lt;/strong&gt;: &lt;a href=&#34;https://ui.shadcn.com/&#34;&gt;shadcn/ui&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/leerob/next-saas-starter&#xA;cd next-saas-starter&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;Use the included setup script to create your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm db:setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the database migrations and seed the database with a default user and team:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm db:migrate&#xA;pnpm db:seed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the following user and team:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User: &lt;code&gt;test@test.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: &lt;code&gt;admin123&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can, of course, create new users as well through &lt;code&gt;/sign-up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the Next.js development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser to see the app in action.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, you can listen for Stripe webhooks locally through their CLI to handle subscription change events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stripe listen --forward-to localhost:3000/api/stripe/webhook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing Payments&lt;/h2&gt; &#xA;&lt;p&gt;To test Stripe payments, use the following test card details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Card Number: &lt;code&gt;4242 4242 4242 4242&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Expiration: Any future date&lt;/li&gt; &#xA; &lt;li&gt;CVC: Any 3-digit number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Going to Production&lt;/h2&gt; &#xA;&lt;p&gt;When you&#39;re ready to deploy your SaaS application to production, follow these steps:&lt;/p&gt; &#xA;&lt;h3&gt;Set up a production Stripe webhook&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the Stripe Dashboard and create a new webhook for your production environment.&lt;/li&gt; &#xA; &lt;li&gt;Set the endpoint URL to your production API route (e.g., &lt;code&gt;https://yourdomain.com/api/stripe/webhook&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Select the events you want to listen for (e.g., &lt;code&gt;checkout.session.completed&lt;/code&gt;, &lt;code&gt;customer.subscription.updated&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Deploy to Vercel&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Push your code to a GitHub repository.&lt;/li&gt; &#xA; &lt;li&gt;Connect your repository to Vercel and deploy it.&lt;/li&gt; &#xA; &lt;li&gt;Follow the Vercel deployment process, which will guide you through setting up your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add environment variables&lt;/h3&gt; &#xA;&lt;p&gt;In your Vercel project settings (or during deployment), add all the necessary environment variables. Make sure to update the values for the production environment, including:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;BASE_URL&lt;/code&gt;: Set this to your production domain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STRIPE_SECRET_KEY&lt;/code&gt;: Use your Stripe secret key for the production environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STRIPE_WEBHOOK_SECRET&lt;/code&gt;: Use the webhook secret from the production webhook you created in step 1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POSTGRES_URL&lt;/code&gt;: Set this to your production database URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTH_SECRET&lt;/code&gt;: Set this to a random string. &lt;code&gt;openssl rand -base64 32&lt;/code&gt; will generate one.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other Templates&lt;/h2&gt; &#xA;&lt;p&gt;While this template is intentionally minimal and to be used as a learning resource, there are other paid versions in the community which are more full-featured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://achromatic.dev&#34;&gt;https://achromatic.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shipfa.st&#34;&gt;https://shipfa.st&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://makerkit.dev&#34;&gt;https://makerkit.dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ai16z/eliza</title>
    <updated>2024-12-15T01:39:11Z</updated>
    <id>tag:github.com,2024-12-15:/ai16z/eliza</id>
    <link href="https://github.com/ai16z/eliza" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Autonomous agents for everyone&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eliza 🤖&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/docs/static/img/eliza_banner.jpg&#34; alt=&#34;Eliza Banner&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;📖 &lt;a href=&#34;https://ai16z.github.io/eliza/&#34;&gt;Documentation&lt;/a&gt; | 🎯 &lt;a href=&#34;https://github.com/thejoven/awesome-eliza&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🌍 README Translations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_CN.md&#34;&gt;中文说明&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_JA.md&#34;&gt;日本語の説明&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_KOR.md&#34;&gt;한국어 설명&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_FR.md&#34;&gt;Français&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_PTBR.md&#34;&gt;Português&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_TR.md&#34;&gt;Türkçe&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_RU.md&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_ES.md&#34;&gt;Español&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_IT.md&#34;&gt;Italiano&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_TH.md&#34;&gt;ไทย&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai16z/eliza/main/README_DE.md&#34;&gt;Deutsch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🛠️ Full-featured Discord, Twitter and Telegram connectors&lt;/li&gt; &#xA; &lt;li&gt;🔗 Support for every model (Llama, Grok, OpenAI, Anthropic, etc.)&lt;/li&gt; &#xA; &lt;li&gt;👥 Multi-agent and room support&lt;/li&gt; &#xA; &lt;li&gt;📚 Easily ingest and interact with your documents&lt;/li&gt; &#xA; &lt;li&gt;💾 Retrievable memory and document store&lt;/li&gt; &#xA; &lt;li&gt;🚀 Highly extensible - create your own actions and clients&lt;/li&gt; &#xA; &lt;li&gt;☁️ Supports many models (local Llama, OpenAI, Anthropic, Groq, etc.)&lt;/li&gt; &#xA; &lt;li&gt;📦 Just works!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Video Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ArptLpQiKfI&amp;amp;list=PLx5pnFXdPTRzWla0RaOxALTSTnVq53fKL&#34;&gt;AI Agent Dev School&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎯 Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤖 Chatbots&lt;/li&gt; &#xA; &lt;li&gt;🕵️ Autonomous Agents&lt;/li&gt; &#xA; &lt;li&gt;📈 Business Process Handling&lt;/li&gt; &#xA; &lt;li&gt;🎮 Video Game NPCs&lt;/li&gt; &#xA; &lt;li&gt;🧠 Trading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 2.7+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;Node.js 23+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note for Windows Users:&lt;/strong&gt; &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install-manual&#34;&gt;WSL 2&lt;/a&gt; is required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Use the Starter (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ai16z/eliza-starter.git&#xA;&#xA;cp .env.example .env&#xA;&#xA;pnpm i &amp;amp;&amp;amp; pnpm build &amp;amp;&amp;amp; pnpm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then read the &lt;a href=&#34;https://ai16z.github.io/eliza/&#34;&gt;Documentation&lt;/a&gt; to learn how to customize your Eliza.&lt;/p&gt; &#xA;&lt;h3&gt;Manually Start Eliza (Only recommended if you know what you are doing)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repository&#xA;git clone https://github.com/ai16z/eliza.git&#xA;&#xA;# Checkout the latest release&#xA;# This project iterates fast, so we recommend checking out the latest release&#xA;git checkout $(git describe --tags --abbrev=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Eliza with Gitpod&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/ai16z/eliza/tree/main&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Edit the .env file&lt;/h3&gt; &#xA;&lt;p&gt;Copy .env.example to .env and fill in the appropriate values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: .env is optional. If your planning to run multiple distinct agents, you can pass secrets through the character JSON&lt;/p&gt; &#xA;&lt;h3&gt;Automatically Start Eliza&lt;/h3&gt; &#xA;&lt;p&gt;This will run everything to setup the project and start the bot with the default character.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh scripts/start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit the character file&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;packages/core/src/defaultCharacter.ts&lt;/code&gt; to modify the default character. Uncomment and edit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To load custom characters:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;pnpm start --characters=&#34;path/to/your/character.json&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Multiple character files can be loaded simultaneously&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect with X (Twitter)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;change &lt;code&gt;&#34;clients&#34;: []&lt;/code&gt; to &lt;code&gt;&#34;clients&#34;: [&#34;twitter&#34;]&lt;/code&gt; in the character file to connect with X&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manually Start Eliza&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm i&#xA;pnpm build&#xA;pnpm start&#xA;&#xA;# The project iterates fast, sometimes you need to clean the project if you are coming back to the project&#xA;pnpm clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Additional Requirements&lt;/h4&gt; &#xA;&lt;p&gt;You may need to install Sharp. If you see an error when starting up, try installing it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm install --include=optional sharp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Community &amp;amp; contact&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ai16z/eliza/issues&#34;&gt;GitHub Issues&lt;/a&gt;. Best for: bugs you encounter using Eliza, and feature proposals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ai16z&#34;&gt;Discord&lt;/a&gt;. Best for: sharing your applications and hanging out with the community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/ai16z/eliza/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=ai16z/eliza&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#ai16z/eliza&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=ai16z/eliza&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pydantic/pydantic-ai</title>
    <updated>2024-12-15T01:39:11Z</updated>
    <id>tag:github.com,2024-12-15:/pydantic/pydantic-ai</id>
    <link href="https://github.com/pydantic/pydantic-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Agent Framework / shim to use Pydantic with LLMs&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://ai.pydantic.dev/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://ai.pydantic.dev/img/pydantic-ai-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://ai.pydantic.dev/img/pydantic-ai-light.svg?sanitize=true&#34; alt=&#34;PydanticAI&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;em&gt;Agent Framework / shim to use Pydantic with LLMs&lt;/em&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml/badge.svg?event=push&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic-ai&#34;&gt;&lt;img src=&#34;https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic-ai.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://pypi.python.org/pypi/pydantic-ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pydantic-ai.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/pydantic/pydantic-ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/pydantic-ai.svg?sanitize=true&#34; alt=&#34;versions&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/pydantic/pydantic-ai/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pydantic/pydantic-ai.svg?v&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://ai.pydantic.dev/&#34;&gt;ai.pydantic.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;When I first found FastAPI, I got it immediately. I was excited to find something so innovative and ergonomic built on Pydantic.&lt;/p&gt; &#xA;&lt;p&gt;Virtually every Agent Framework and LLM library in Python uses Pydantic, but when we began to use LLMs in &lt;a href=&#34;https://pydantic.dev/logfire&#34;&gt;Pydantic Logfire&lt;/a&gt;, I couldn&#39;t find anything that gave me the same feeling.&lt;/p&gt; &#xA;&lt;p&gt;PydanticAI is a Python Agent Framework designed to make it less painful to build production grade applications with Generative AI.&lt;/p&gt; &#xA;&lt;h2&gt;Why use PydanticAI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built by the team behind Pydantic (the validation layer of the OpenAI SDK, the Anthropic SDK, LangChain, LlamaIndex, AutoGPT, Transformers, CrewAI, Instructor and many more)&lt;/li&gt; &#xA; &lt;li&gt;Model-agnostic — currently OpenAI, Gemini, Anthropic, Groq, and Mistral are supported. And there is a simple interface to implement support for other models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/agents/#static-type-checking&#34;&gt;Type-safe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Control flow and agent composition is done with vanilla Python, allowing you to make use of the same Python development best practices you&#39;d use in any other (non-AI) project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/results/#structured-result-validation&#34;&gt;Structured response&lt;/a&gt; validation with Pydantic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/results/#streamed-results&#34;&gt;Streamed responses&lt;/a&gt;, including validation of streamed &lt;em&gt;structured&lt;/em&gt; responses with Pydantic&lt;/li&gt; &#xA; &lt;li&gt;Novel, type-safe &lt;a href=&#34;https://ai.pydantic.dev/dependencies/&#34;&gt;dependency injection system&lt;/a&gt;, useful for testing and eval-driven iterative development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/logfire/&#34;&gt;Logfire integration&lt;/a&gt; for debugging and monitoring the performance and general behavior of your LLM-powered application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;In Beta!&lt;/h2&gt; &#xA;&lt;p&gt;PydanticAI is in early beta, the API is still subject to change and there&#39;s a lot more to do. &lt;a href=&#34;https://github.com/pydantic/pydantic-ai/issues&#34;&gt;Feedback&lt;/a&gt; is very welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Hello World Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a minimal example of PydanticAI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic_ai import Agent&#xA;&#xA;# Define a very simple agent including the model to use, you can also set the model when running the agent.&#xA;agent = Agent(&#xA;    &#39;gemini-1.5-flash&#39;,&#xA;    # Register a static system prompt using a keyword argument to the agent.&#xA;    # For more complex dynamically-generated system prompts, see the example below.&#xA;    system_prompt=&#39;Be concise, reply with one sentence.&#39;,&#xA;)&#xA;&#xA;# Run the agent synchronously, conducting a conversation with the LLM.&#xA;# Here the exchange should be very short: PydanticAI will send the system prompt and the user query to the LLM,&#xA;# the model will return a text response. See below for a more complex run.&#xA;result = agent.run_sync(&#39;Where does &#34;hello world&#34; come from?&#39;)&#xA;print(result.data)&#xA;&#34;&#34;&#34;&#xA;The first known use of &#34;hello, world&#34; was in a 1974 textbook about the C programming language.&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(This example is complete, it can be run &#34;as is&#34;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not very interesting yet, but we can easily add &#34;tools&#34;, dynamic system prompts, and structured responses to build more powerful agents.&lt;/p&gt; &#xA;&lt;h2&gt;Tools &amp;amp; Dependency Injection Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is a concise example using PydanticAI to build a support agent for a bank:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Better documented example &lt;a href=&#34;https://ai.pydantic.dev/#tools-dependency-injection-example&#34;&gt;in the docs&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass&#xA;&#xA;from pydantic import BaseModel, Field&#xA;from pydantic_ai import Agent, RunContext&#xA;&#xA;from bank_database import DatabaseConn&#xA;&#xA;&#xA;# SupportDependencies is used to pass data, connections, and logic into the model that will be needed when running&#xA;# system prompt and tool functions. Dependency injection provides a type-safe way to customise the behavior of your agents.&#xA;@dataclass&#xA;class SupportDependencies:&#xA;    customer_id: int&#xA;    db: DatabaseConn&#xA;&#xA;&#xA;# This pydantic model defines the structure of the result returned by the agent.&#xA;class SupportResult(BaseModel):&#xA;    support_advice: str = Field(description=&#39;Advice returned to the customer&#39;)&#xA;    block_card: bool = Field(description=&#34;Whether to block the customer&#39;s card&#34;)&#xA;    risk: int = Field(description=&#39;Risk level of query&#39;, ge=0, le=10)&#xA;&#xA;&#xA;# This agent will act as first-tier support in a bank.&#xA;# Agents are generic in the type of dependencies they accept and the type of result they return.&#xA;# In this case, the support agent has type `Agent[SupportDependencies, SupportResult]`.&#xA;support_agent = Agent(&#xA;    &#39;openai:gpt-4o&#39;,&#xA;    deps_type=SupportDependencies,&#xA;    # The response from the agent will, be guaranteed to be a SupportResult,&#xA;    # if validation fails the agent is prompted to try again.&#xA;    result_type=SupportResult,&#xA;    system_prompt=(&#xA;        &#39;You are a support agent in our bank, give the &#39;&#xA;        &#39;customer support and judge the risk level of their query.&#39;&#xA;    ),&#xA;)&#xA;&#xA;&#xA;# Dynamic system prompts can make use of dependency injection.&#xA;# Dependencies are carried via the `RunContext` argument, which is parameterized with the `deps_type` from above.&#xA;# If the type annotation here is wrong, static type checkers will catch it.&#xA;@support_agent.system_prompt&#xA;async def add_customer_name(ctx: RunContext[SupportDependencies]) -&amp;gt; str:&#xA;    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)&#xA;    return f&#34;The customer&#39;s name is {customer_name!r}&#34;&#xA;&#xA;&#xA;# `tool` let you register functions which the LLM may call while responding to a user.&#xA;# Again, dependencies are carried via `RunContext`, any other arguments become the tool schema passed to the LLM.&#xA;# Pydantic is used to validate these arguments, and errors are passed back to the LLM so it can retry.&#xA;@support_agent.tool&#xA;async def customer_balance(&#xA;    ctx: RunContext[SupportDependencies], include_pending: bool&#xA;) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Returns the customer&#39;s current account balance.&#34;&#34;&#34;&#xA;    # The docstring of a tool is also passed to the LLM as the description of the tool.&#xA;    # Parameter descriptions are extracted from the docstring and added to the parameter schema sent to the LLM.&#xA;    balance = await ctx.deps.db.customer_balance(&#xA;        id=ctx.deps.customer_id,&#xA;        include_pending=include_pending,&#xA;    )&#xA;    return balance&#xA;&#xA;&#xA;...  # In a real use case, you&#39;d add more tools and a longer system prompt&#xA;&#xA;&#xA;async def main():&#xA;    deps = SupportDependencies(customer_id=123, db=DatabaseConn())&#xA;    # Run the agent asynchronously, conducting a conversation with the LLM until a final response is reached.&#xA;    # Even in this fairly simple case, the agent will exchange multiple messages with the LLM as tools are called to retrieve a result.&#xA;    result = await support_agent.run(&#39;What is my balance?&#39;, deps=deps)&#xA;    # The result will be validated with Pydantic to guarantee it is a `SupportResult`, since the agent is generic,&#xA;    # it&#39;ll also be typed as a `SupportResult` to aid with static type checking.&#xA;    print(result.data)&#xA;    &#34;&#34;&#34;&#xA;    support_advice=&#39;Hello John, your current account balance, including pending transactions, is $123.45.&#39; block_card=False risk=1&#xA;    &#34;&#34;&#34;&#xA;&#xA;    result = await support_agent.run(&#39;I just lost my card!&#39;, deps=deps)&#xA;    print(result.data)&#xA;    &#34;&#34;&#34;&#xA;    support_advice=&#34;I&#39;m sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions.&#34; block_card=True risk=8&#xA;    &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;To try PydanticAI yourself, follow the instructions &lt;a href=&#34;https://ai.pydantic.dev/examples/&#34;&gt;in the examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://ai.pydantic.dev/agents/&#34;&gt;docs&lt;/a&gt; to learn more about building applications with PydanticAI.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://ai.pydantic.dev/api/agent/&#34;&gt;API Reference&lt;/a&gt; to understand PydanticAI&#39;s interface.&lt;/p&gt;</summary>
  </entry>
</feed>