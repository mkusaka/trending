<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:39:33Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PKUFlyingPig/cs-self-learning</title>
    <updated>2022-12-04T01:39:33Z</updated>
    <id>tag:github.com,2022-12-04:/PKUFlyingPig/cs-self-learning</id>
    <link href="https://github.com/PKUFlyingPig/cs-self-learning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;计算机自学指南&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/PKUFlyingPig/cs-self-learning/master/docs/images/title.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;CS 自学指南&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Everyone should enjoy CS if you have a good teacher to teach you a good course.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PKUFlyingPig/cs-self-learning/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/PKUFlyingPig/cs-self-learning&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PKUFlyingPig/cs-self-learning/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/PKUFlyingPig/cs-self-learning&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PKUFlyingPig/cs-self-learning&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/PKUFlyingPig/cs-self-learning&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;新冠肆虐，网课当道，CS 爆火，这一系列的事件都让自学计算机成为了一种潮流。&lt;/p&gt; &#xA;&lt;p&gt;随着欧美众多名校将质量极高的计算机课程全部开源，自学 CS 成了一件可操作性极强的事情。毫不夸张地说，只要你有毅力和兴趣，自学的成果完全不亚于你在国内任何一所大学受到的本科 CS 教育（当然，这里单指计算机专业领域，大学带给你的显然不止是专业知识）。&lt;/p&gt; &#xA;&lt;p&gt;我很庆幸在自己大一的时候就选择了自学 CS 这条路，它让我爱上了计算机这门学科，也无比丰富了我的视野。&lt;/p&gt; &#xA;&lt;p&gt;但同时，自学这条路也有很多困难和阻力：课程繁多不知如何选择，资料零散甚至残缺，作业难度不知深浅，课内任务还需要花时间应付······这些主客观因素叠加到一起，使得好课虽多，却只能在收藏夹里吃灰。&lt;/p&gt; &#xA;&lt;p&gt;在大学的第四个年头，我想把这一路自学走来的经验和教训，把那些让我受益终身的课程记录下来，分享给大家，形成了这本CS自学指南，以期能给所有想自学计算机的朋友一点帮助。&lt;/p&gt; &#xA;&lt;p&gt;我的目标是让一个刚刚接触计算机的小白，可以完全凭借这些开源社区的优质资源，少走弯路，在 2-3 年内成长为一个有扎实的数学功底和代码能力，经历过数十个千行代码量的 Project 的洗礼，掌握至少 C/C++/Java/JS/Python/Go/Rust 等主流语言，对算法、电路、体系、网络、操统、编译、人工智能、机器学习、计算机视觉、自然语言处理、强化学习、密码学、信息论、博弈论、数值分析、统计学、分布式、数据库、图形学、Web 开发、云服务、超算等等方面均有所涉猎的全能程序员。此后，无论是选择科研还是就业，我相信你都会有相当的竞争力。&lt;/p&gt; &#xA;&lt;p&gt;你可以&lt;a href=&#34;https://csdiy.wiki&#34;&gt;在线免费阅读这本书&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;英文版请移步&lt;a href=&#34;https://github.com/PKUFlyingPig/Self-learning-Computer-Science&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;如何成为贡献者&lt;/h2&gt; &#xA;&lt;p&gt;一个人的力量终究是有限的，对于书中任意章节你若有想要补充的内容，欢迎各位提出 &lt;a href=&#34;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork&#34;&gt;Pull Request&lt;/a&gt;。如果你想贡献一门新的课程，可以参考目前 repo 中的 &lt;a href=&#34;https://raw.githubusercontent.com/PKUFlyingPig/cs-self-learning/master/template.md&#34;&gt;template&lt;/a&gt; 文件作为模版，并在 &lt;a href=&#34;https://raw.githubusercontent.com/PKUFlyingPig/cs-self-learning/master/mkdocs.yml&#34;&gt;mkdocs.yml&lt;/a&gt; 文件中添加其navigation，当然你还可以在 &lt;a href=&#34;https://raw.githubusercontent.com/PKUFlyingPig/cs-self-learning/master/docs/CS%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92.md&#34;&gt;CS 学习规划&lt;/a&gt; 里的对应模块为其添加言简意赅的导语。如果你有想推荐的书籍，请参考 &lt;a href=&#34;https://raw.githubusercontent.com/PKUFlyingPig/cs-self-learning/master/docs/%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90.md&#34;&gt;好书推荐&lt;/a&gt; 模块上方的注释按相应格式添加内容。&lt;/p&gt; &#xA;&lt;p&gt;对于中英混合排版的要点规范，可以参考&lt;a href=&#34;https://github.com/sparanoid/chinese-copywriting-guidelines/raw/master/README.zh-Hans.md&#34;&gt;这个仓库&lt;/a&gt;，我们将会对您的 Pull Request 做相应的校对，具体原因参见这个 &lt;a href=&#34;https://github.com/PKUFlyingPig/cs-self-learning/issues/114&#34;&gt;issue&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;本书的英文版也正在翻译中，如果你想参与到翻译的队伍里，可以参考这个 &lt;a href=&#34;https://github.com/PKUFlyingPig/cs-self-learning/issues/222&#34;&gt;issue&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;同时由于个人水平有限，书中难免有笔误甚至概念错误之处，也请各位不吝赐教，在 issue 中提出来。&lt;/p&gt; &#xA;&lt;h2&gt;关于交流社区的建立&lt;/h2&gt; &#xA;&lt;p&gt;本书支持页面评论功能，因此如果你想自学某课程，可以自己建立群聊后（QQ 微信皆可）在对应的课程页面下方发表评论，注明你的学习目标以及加入交流群的途径。此外，过去已有不少朋友在 issue 里建立了类似群聊，可以自行选择直接加入。&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#PKUFlyingPig/cs-self-learning&amp;amp;Timeline&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=PKUFlyingPig/cs-self-learning&amp;amp;type=Timeline&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ 鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;特别感谢 @&lt;a href=&#34;https://github.com/AlfredThiel&#34;&gt;AlfredThiel&lt;/a&gt; 为项目制作了精美的 Logo。&lt;/p&gt; &#xA;&lt;!--  support by https://contrib.rocks --&gt; &#xA;&lt;a href=&#34;https://github.com/PKUFlyingPig/cs-self-learning/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=PKUFlyingPig/cs-self-learning&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;许可&lt;/h2&gt; &#xA;&lt;p&gt;项目贡献者编写的部分依照 &lt;a href=&#34;https://www.tawesoft.co.uk/kb/article/mit-license-faq&#34;&gt;MIT LICENSE&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;其余部分（包括但不限于书中提到的课程资源、开源书籍以及视频内容）遵循原作者规定的许可。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TomSchimansky/CustomTkinter</title>
    <updated>2022-12-04T01:39:33Z</updated>
    <id>tag:github.com,2022-12-04:/TomSchimansky/CustomTkinter</id>
    <link href="https://github.com/TomSchimansky/CustomTkinter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern and customizable python UI-library based on Tkinter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./documentation_images/CustomTkinter_logo_dark.png&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/CustomTkinter_logo_light.png&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/customtkinter&#34; alt=&#34;PyPI&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/customtkinter?color=green&amp;amp;label=downloads&#34; alt=&#34;PyPI - Downloads&#34;&gt; &lt;img src=&#34;https://static.pepy.tech/personalized-badge/customtkinter?period=total&amp;amp;units=international_system&amp;amp;left_color=grey&amp;amp;right_color=green&amp;amp;left_text=downloads&#34; alt=&#34;Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/l/customtkinter&#34; alt=&#34;PyPI - License&#34;&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github.com/tomschimansky/customtkinter?color=green&amp;amp;label=total%20lines&#34; alt=&#34;Total lines&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;CustomTkinter is a python UI-library based on Tkinter, which provides new, modern and fully customizable widgets. They are created and used like normal Tkinter widgets and can also be used in combination with normal Tkinter elements. The widgets and the window colors either adapt to the system appearance or the manually set mode (&#39;light&#39;, &#39;dark&#39;), and all CustomTkinter widgets and windows support HighDPI scaling (Windows, macOS). With CustomTkinter you&#39;ll get a consistent and modern look across all desktop platforms (Windows, macOS, Linux).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/complex_example_dark_Windows.png&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on Windows 11 with dark mode and &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/complex_example_light_macOS.png&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on macOS in light mode and standard &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the module with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install customtkinter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update existing installation:&lt;/strong&gt; &lt;code&gt;pip3 install customtkinter --upgrade&lt;/code&gt;&lt;br&gt; (update as often as possible because this library is under active development)&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;official&lt;/strong&gt; documentation can be found in the Wiki Tab here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;--&amp;gt; &lt;a href=&#34;https://github.com/TomSchimansky/CustomTkinter/wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example Program&lt;/h2&gt; &#xA;&lt;p&gt;To test customtkinter you can try this simple example with only a single button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tkinter&#xA;import customtkinter&#xA;&#xA;customtkinter.set_appearance_mode(&#34;System&#34;)  # Modes: system (default), light, dark&#xA;customtkinter.set_default_color_theme(&#34;blue&#34;)  # Themes: blue (default), dark-blue, green&#xA;&#xA;app = customtkinter.CTk()  # create CTk window like you do with the Tk window&#xA;app.geometry(&#34;400x240&#34;)&#xA;&#xA;def button_function():&#xA;    print(&#34;button pressed&#34;)&#xA;&#xA;# Use CTkButton instead of tkinter Button&#xA;button = customtkinter.CTkButton(master=app, text=&#34;CTkButton&#34;, command=button_function)&#xA;button.place(relx=0.5, rely=0.5, anchor=tkinter.CENTER)&#xA;&#xA;app.mainloop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which results in the following window on macOS:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/single_button_macOS.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/TomSchimansky/CustomTkinter/tree/master/examples&#34;&gt;examples folder&lt;/a&gt;, you can find more example programs and in the &lt;a href=&#34;https://github.com/TomSchimansky/CustomTkinter/wiki&#34;&gt;Documentation&lt;/a&gt; you can find further information on the appearance mode, scaling, themes and all widgets.&lt;/p&gt; &#xA;&lt;h2&gt;More Examples and Showcase&lt;/h2&gt; &#xA;&lt;h3&gt;Appearance mode change and scaling change&lt;/h3&gt; &#xA;&lt;p&gt;CustomTkinter can adapt to the Windows 10/11 light or dark mode:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/66446067/204672968-6584f360-4c52-434f-9c16-25761341368b.mp4&#34;&gt;https://user-images.githubusercontent.com/66446067/204672968-6584f360-4c52-434f-9c16-25761341368b.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;| &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on Windows 11 with system appearance mode change and standard &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On macOS you either need python3.10 or higher or the anaconda python version to get a dark window header (Tcl/Tk &amp;gt;= 8.6.9 required):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/66446067/204673854-b6cbcfda-d9a1-4425-92a3-5b57d7f2fd6b.mp4&#34;&gt;https://user-images.githubusercontent.com/66446067/204673854-b6cbcfda-d9a1-4425-92a3-5b57d7f2fd6b.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;| &lt;em&gt;&lt;code&gt;complex_example.py&lt;/code&gt; on macOS with system appearance mode change, user-scaling change and standard &#39;blue&#39; theme&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Button with images&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to put an image on a CTkButton. You just have to pass a PhotoImage object to the CTkButton with the &lt;code&gt;image&lt;/code&gt; argument. If you want no text at all you have to set &lt;code&gt;text=&#34;&#34;&lt;/code&gt; or you specify how to position the text and image at once with the &lt;code&gt;compound&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TomSchimansky/CustomTkinter/master/documentation_images/image_example_dark_Windows.png&#34; alt=&#34;&#34;&gt; | &lt;em&gt;&lt;code&gt;image_example.py&lt;/code&gt; on Windows 11&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Integration of TkinterMapView widget&lt;/h3&gt; &#xA;&lt;p&gt;In the following example I used a TkinterMapView which integrates well with a CustomTkinter program. It&#39;s a tile based map widget which displays OpenStreetMap or other tile based maps:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/66446067/204675835-1584a8da-5acc-4993-b4a9-e70f06fa14b0.mp4&#34;&gt;https://user-images.githubusercontent.com/66446067/204675835-1584a8da-5acc-4993-b4a9-e70f06fa14b0.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;| &lt;em&gt;&lt;code&gt;examples/map_with_customtkinter.py&lt;/code&gt; from TkinterMapView repository on Windows 11&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find the TkinterMapView library and example program here: &lt;a href=&#34;https://github.com/TomSchimansky/TkinterMapView&#34;&gt;https://github.com/TomSchimansky/TkinterMapView&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>davidfowl/TodoApi</title>
    <updated>2022-12-04T01:39:33Z</updated>
    <id>tag:github.com,2022-12-04:/davidfowl/TodoApi</id>
    <link href="https://github.com/davidfowl/TodoApi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Todo application with ASP.NET Core Blazor WASM, Minimal APIs and Authentication&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Todo application with ASP.NET Core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/davidfowl/TodoApi/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/davidfowl/TodoApi/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a Todo application that features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web&#34;&gt;&lt;strong&gt;Todo.Web&lt;/strong&gt;&lt;/a&gt; - An ASP.NET Core hosted Blazor WASM front end application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;&lt;strong&gt;TodoApi&lt;/strong&gt;&lt;/a&gt; - An ASP.NET Core REST API backend using minimal APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/95136/204161352-bc54ccb7-32cf-49ba-a6f7-f46d0f2d204f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It showcases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blazor WebAssembly&lt;/li&gt; &#xA; &lt;li&gt;Minimal APIs&lt;/li&gt; &#xA; &lt;li&gt;Using EntityFramework and SQLite for data access&lt;/li&gt; &#xA; &lt;li&gt;OpenAPI&lt;/li&gt; &#xA; &lt;li&gt;User management with ASP.NET Core Identity&lt;/li&gt; &#xA; &lt;li&gt;Cookie authentication&lt;/li&gt; &#xA; &lt;li&gt;JWT authentication&lt;/li&gt; &#xA; &lt;li&gt;Proxying requests from the front end application server using YARP&#39;s IHttpForwarder&lt;/li&gt; &#xA; &lt;li&gt;Rate Limiting&lt;/li&gt; &#xA; &lt;li&gt;Writing integration tests for your REST API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;.NET&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download&#34;&gt;Install .NET 7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;strong&gt;dotnet-ef&lt;/strong&gt; tool: &lt;code&gt;dotnet tool install dotnet-ef -g&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the &lt;code&gt;TodoApi&lt;/code&gt; folder. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;mkdir .db&lt;/code&gt; to create the local database folder.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;dotnet ef database update&lt;/code&gt; to create the database.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Learn more about &lt;a href=&#34;https://learn.microsoft.com/en-us/ef/core/cli/dotnet&#34;&gt;dotnet-ef&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;JWT&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To initialize the keys for JWT generation, run &lt;code&gt;dotnet user-jwts&lt;/code&gt; in to &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;TodoApi&lt;/a&gt; folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet user-jwts create&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the application&lt;/h3&gt; &#xA;&lt;p&gt;To run the application, run both the &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web/Server&#34;&gt;Todo.Web/Server&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;TodoApi&lt;/a&gt;. Below are different ways to run both applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; - Setup multiple startup projects by right clicking on the solution and selecting Properties. Select &lt;code&gt;TodoApi&lt;/code&gt; and &lt;code&gt;Todo.Web.Server&lt;/code&gt; as startup projects.&lt;/p&gt; &lt;img width=&#34;591&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/95136/204311327-479445c8-4f73-4845-b146-d56be8ceb9ab.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; - Open up 2 terminal windows, one in &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web/Server/&#34;&gt;Todo.Web.Server&lt;/a&gt; and the other in &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi/&#34;&gt;TodoApi&lt;/a&gt; run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet watch run -lp https&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will run both applications with the &lt;code&gt;https&lt;/code&gt; profile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tye&lt;/strong&gt; - Install the global tool using the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet tool install --global Microsoft.Tye --version 0.11.0-alpha.22111.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run &lt;code&gt;tye run&lt;/code&gt; in the repository root and navigate to the tye dashboard (usually &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;) to see both applications running.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; - Open your terminal, navigate to the root folder of this project and run the following commands:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Build a docker image for the &lt;code&gt;TodoApi&lt;/code&gt; directly from dotnet publish.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet publish ./TodoApi/TodoApi.csproj --os linux --arch x64 /t:PublishContainer -c Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Build a docker image for the &lt;code&gt;Todo.Web.Server&lt;/code&gt; directly from dotnet publish.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet publish ./Todo.Web/Server/Todo.Web.Server.csproj --os linux --arch x64 /t:PublishContainer -c Release --self-contained true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Generate certificate and configure local machine so we can start our apps with https support using docker compose.&lt;/p&gt; &lt;p&gt;Windows using Linux containers&lt;/p&gt; &lt;pre&gt;&lt;code&gt;set PASSWORD YourPasswordHere&#xA;dotnet dev-certs https -ep ${HOME}/.aspnet/https/todoapps.pfx -p $PASSWORD --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;macOS or Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export PASSWORD=YourPasswordHere&#xA;dotnet dev-certs https -ep ~/.aspnet/https/todoapps.pfx -p $PASSWORD --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Change these variables below in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to match your https certificate and password.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ASPNETCORE_Kestrel__Certificates__Default__Password&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ASPNETCORE_Kestrel__Certificates__Default__Path&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt; to spin up both apps todo-api and todo-web-server plus jaeger and prometheus.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Navigate to the Todo Web app &lt;a href=&#34;https://localhost:5003&#34;&gt;https://localhost:5003&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optional&lt;/h2&gt; &#xA;&lt;h3&gt;Using the API standalone&lt;/h3&gt; &#xA;&lt;p&gt;The Todo REST API can run standalone as well. You can run the &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;TodoApi&lt;/a&gt; project and make requests to various endpoints using the Swagger UI (or a client of your choice):&lt;/p&gt; &#xA;&lt;img width=&#34;1200&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/95136/204315486-86d25a5f-1164-467a-9891-827343b9f0e8.png&#34;&gt; &#xA;&lt;p&gt;Before executing any requests, you need to create a user and get an auth token.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To create a new user, run the application and POST a JSON payload to &lt;code&gt;/users&lt;/code&gt; endpoint:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;username&#34;: &#34;myuser&#34;,&#xA;  &#34;password&#34;: &#34;&amp;lt;put a password here&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get a token for the above user run &lt;code&gt;dotnet user-jwts&lt;/code&gt; to create a JWT token with the same user name specified above e.g:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet user-jwts create -n myuser&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should be able to use this token to make authenticated requests to the todo endpoints.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Learn more about &lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/security?view=aspnetcore-7.0#using-dotnet-user-jwts-to-improve-development-time-testing&#34;&gt;user-jwts&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Social authentication&lt;/h3&gt; &#xA;&lt;p&gt;In addition to username and password, social authentication providers can be configured to work with this todo application. By default it supports Github, Google, and Microsoft accounts.&lt;/p&gt; &#xA;&lt;p&gt;Instructions for setting up each of these providers can be found at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/developers/apps/building-oauth-apps&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/microsoft-logins&#34;&gt;Microsoft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/google-logins&#34;&gt;Google&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you obtain the client id and client secret, the configuration for these providers must be added with the following schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;Authentication&#34;: {&#xA;        &#34;Schemes&#34;: {&#xA;            &#34;&amp;lt;scheme&amp;gt;&#34;: {&#xA;                &#34;ClientId&#34;: &#34;xxx&#34;,&#xA;                &#34;ClientSecret&#34;: &#34;xxxx&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Authentication__Schemes__&amp;lt;scheme&amp;gt;__ClientId=xxx&#xA;Authentication__Schemes__&amp;lt;scheme&amp;gt;__ClientSecret=xxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other providers can be found &lt;a href=&#34;https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers#providers&#34;&gt;here&lt;/a&gt;. These must be added to &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web/Server/Authentication/AuthenticationExtensions.cs&#34;&gt;AuthenticationExtensions&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Don&#39;t store client secrets in configuration!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenTelemetry&lt;/h3&gt; &#xA;&lt;p&gt;TodoApi uses OpenTelemetry to collect logs, metrics and spans.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to view the collected telemetry, follow the steps below.&lt;/p&gt; &#xA;&lt;h4&gt;Metrics&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run Prometheus with Docker:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 9090:9090 --name prometheus -v $PWD/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:9090/&#34;&gt;Prometheus in your browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Query the collected metrics&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Spans&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure environment variable &lt;code&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt; with the right endpoint URL to enable &lt;code&gt;.AddOtlpExporter&lt;/code&gt; below &lt;code&gt;builder.Services.AddOpenTelemetryTracing&lt;/code&gt;, in the &lt;code&gt;TodoApi/OpenTelemetryExtensions.cs&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Run Jaeger with Docker:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d --name jaeger -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 -e COLLECTOR_OTLP_ENABLED=true -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 4317:4317 -p 4318:4318 -p 14250:14250 -p 14268:14268 -p 14269:14269 -p 9411:9411 jaegertracing/all-in-one:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:16686/&#34;&gt;Jaeger in your browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;View the collected spans&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Logs&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure environment variable &lt;code&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt; with the right endpoint URL to enable &lt;code&gt;.AddOtlpExporter&lt;/code&gt; below &lt;code&gt;builder.Logging.AddOpenTelemetry&lt;/code&gt;, in the &lt;code&gt;TodoApi/Extensions/OpenTelemetryExtensions.cs&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Find a Vendor that supports OpenTelemetry-based logging.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Vendor support for OpenTelemetry-based logging is currently very limited.&lt;/p&gt;</summary>
  </entry>
</feed>