<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-06T01:38:42Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jlowin/fastmcp</title>
    <updated>2025-04-06T01:38:42Z</updated>
    <id>tag:github.com,2025-04-06:/jlowin/fastmcp</id>
    <link href="https://github.com/jlowin/fastmcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fast, Pythonic way to build Model Context Protocol servers üöÄ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;üéâ FastMCP has been added to the official MCP SDK! üéâ&lt;/h3&gt; &#xA; &lt;p&gt;You can now find FastMCP as part of the official Model Context Protocol Python SDK:&lt;/p&gt; &#xA; &lt;p&gt;üëâ &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;github.com/modelcontextprotocol/python-sdk&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Please note: this repository is no longer maintained.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- omit in toc --&gt; &#xA; &lt;h1&gt;FastMCP üöÄ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;The fast, Pythonic way to build MCP servers.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/fastmcp&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/fastmcp.svg?sanitize=true&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jlowin/fastmcp.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; servers are a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers simple and intuitive. Create tools, expose resources, and define prompts with clean, Pythonic code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# demo.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;mcp = FastMCP(&#34;Demo üöÄ&#34;)&#xA;&#xA;&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Give Claude access to the server by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It&#39;s designed to be high-level and Pythonic - in most cases, decorating a function is all you need.&lt;/p&gt; &#xA;&lt;h3&gt;Key features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: High-level interface means less code and faster development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Build MCP servers with minimal boilerplate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic&lt;/strong&gt;: Feels natural to Python developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt;*: FastMCP aims to provide a full implementation of the core MCP specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*emphasis on &lt;em&gt;aims&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;üö® üöß üèóÔ∏è &lt;em&gt;FastMCP is under active development, as is the MCP specification itself. Core features are working but some advanced capabilities are still in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#running-your-server&#34;&gt;Running Your Server&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#development-mode-recommended-for-building--testing&#34;&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#claude-desktop-integration-for-regular-use&#34;&gt;Claude Desktop Integration (For Regular Use)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#direct-execution-for-advanced-use-cases&#34;&gt;Direct Execution (For Advanced Use Cases)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server-object-names&#34;&gt;Server Object Names&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#echo-server&#34;&gt;Echo Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#sqlite-explorer&#34;&gt;SQLite Explorer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#opening-a-pull-request&#34;&gt;Opening a Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We strongly recommend installing FastMCP with &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;, as it is required for deploying servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: on macOS, uv may need to be installed with Homebrew (&lt;code&gt;brew install uv&lt;/code&gt;) in order to make it available to the Claude Desktop app.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, to use the SDK without deploying, you may use pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;# Create an MCP server&#xA;mcp = FastMCP(&#34;Demo&#34;)&#xA;&#xA;&#xA;# Add an addition tool&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&#xA;&#xA;# Add a dynamic greeting resource&#xA;@mcp.resource(&#34;greeting://{name}&#34;)&#xA;def get_greeting(name: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Get a personalized greeting&#34;&#34;&#34;&#xA;    return f&#34;Hello, {name}!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install this server in &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop&lt;/a&gt; and interact with it right away by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can test it with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/docs/assets/demo-inspector.png&#34; alt=&#34;MCP Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is a low-level &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;Python SDK&lt;/a&gt; available for implementing the protocol directly, but FastMCP aims to make that easier by providing a high-level, Pythonic interface.&lt;/p&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The FastMCP server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;# Create a named server&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;# Specify dependencies for deployment and development&#xA;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;Resources are how you expose data to LLMs. They&#39;re similar to GET endpoints in a REST API - they provide data but shouldn&#39;t perform significant computation or have side effects. Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File contents&lt;/li&gt; &#xA; &lt;li&gt;Database schemas&lt;/li&gt; &#xA; &lt;li&gt;API responses&lt;/li&gt; &#xA; &lt;li&gt;System information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Resources can be static:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;config://app&#34;)&#xA;def get_config() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Static configuration data&#34;&#34;&#34;&#xA;    return &#34;App configuration here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or dynamic with parameters (FastMCP automatically handles these as MCP templates):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;users://{user_id}/profile&#34;)&#xA;def get_user_profile(user_id: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Dynamic user data&#34;&#34;&#34;&#xA;    return f&#34;Profile data for user {user_id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects. They&#39;re similar to POST endpoints in a REST API.&lt;/p&gt; &#xA;&lt;p&gt;Simple calculation example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.tool()&#xA;def calculate_bmi(weight_kg: float, height_m: float) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Calculate BMI given weight in kg and height in meters&#34;&#34;&#34;&#xA;    return weight_kg / (height_m ** 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP request example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import httpx&#xA;&#xA;@mcp.tool()&#xA;async def fetch_weather(city: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Fetch current weather for a city&#34;&#34;&#34;&#xA;    async with httpx.AsyncClient() as client:&#xA;        response = await client.get(&#xA;            f&#34;https://api.weather.com/{city}&#34;&#xA;        )&#xA;        return response.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complex input handling example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic import BaseModel, Field&#xA;from typing import Annotated&#xA;&#xA;class ShrimpTank(BaseModel):&#xA;    class Shrimp(BaseModel):&#xA;        name: Annotated[str, Field(max_length=10)]&#xA;&#xA;    shrimp: list[Shrimp]&#xA;&#xA;@mcp.tool()&#xA;def name_shrimp(&#xA;    tank: ShrimpTank,&#xA;    # You can use pydantic Field in function signatures for validation.&#xA;    extra_names: Annotated[list[str], Field(max_length=10)],&#xA;) -&amp;gt; list[str]:&#xA;    &#34;&#34;&#34;List all shrimp names in the tank&#34;&#34;&#34;&#xA;    return [shrimp.name for shrimp in tank.shrimp] + extra_names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively. They&#39;re like &#34;best practices&#34; encoded into your server. A prompt can be as simple as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.prompt()&#xA;def review_code(code: str) -&amp;gt; str:&#xA;    return f&#34;Please review this code:\n\n{code}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a more structured sequence of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp.prompts.base import UserMessage, AssistantMessage&#xA;&#xA;@mcp.prompt()&#xA;def debug_error(error: str) -&amp;gt; list[Message]:&#xA;    return [&#xA;        UserMessage(&#34;I&#39;m seeing this error:&#34;),&#xA;        UserMessage(error),&#xA;        AssistantMessage(&#34;I&#39;ll help debug that. What have you tried so far?&#34;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;FastMCP provides an &lt;code&gt;Image&lt;/code&gt; class that automatically handles image data in your server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Image&#xA;from PIL import Image as PILImage&#xA;&#xA;@mcp.tool()&#xA;def create_thumbnail(image_path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Create a thumbnail from an image&#34;&#34;&#34;&#xA;    img = PILImage.open(image_path)&#xA;    img.thumbnail((100, 100))&#xA;    &#xA;    # FastMCP automatically handles conversion and MIME types&#xA;    return Image(data=img.tobytes(), format=&#34;png&#34;)&#xA;&#xA;@mcp.tool()&#xA;def load_image(path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Load an image from disk&#34;&#34;&#34;&#xA;    # FastMCP handles reading and format detection&#xA;    return Image(path=path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Images can be used as the result of both tools and resources.&lt;/p&gt; &#xA;&lt;h3&gt;Context&lt;/h3&gt; &#xA;&lt;p&gt;The Context object gives your tools and resources access to MCP capabilities. To use it, add a parameter annotated with &lt;code&gt;fastmcp.Context&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Context&#xA;&#xA;@mcp.tool()&#xA;async def long_task(files: list[str], ctx: Context) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Process multiple files with progress tracking&#34;&#34;&#34;&#xA;    for i, file in enumerate(files):&#xA;        ctx.info(f&#34;Processing {file}&#34;)&#xA;        await ctx.report_progress(i, len(files))&#xA;        &#xA;        # Read another resource if needed&#xA;        data = await ctx.read_resource(f&#34;file://{file}&#34;)&#xA;        &#xA;    return &#34;Processing complete&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Context object provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress reporting through &lt;code&gt;report_progress()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logging via &lt;code&gt;debug()&lt;/code&gt;, &lt;code&gt;info()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, and &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resource access through &lt;code&gt;read_resource()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request metadata via &lt;code&gt;request_id&lt;/code&gt; and &lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Your Server&lt;/h2&gt; &#xA;&lt;p&gt;There are three main ways to use your FastMCP server, each suited for different stages of development:&lt;/p&gt; &#xA;&lt;h3&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to test and debug your server is with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This launches a web interface where you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your tools and resources interactively&lt;/li&gt; &#xA; &lt;li&gt;See detailed logs and error messages&lt;/li&gt; &#xA; &lt;li&gt;Monitor server performance&lt;/li&gt; &#xA; &lt;li&gt;Set environment variables for testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;During development, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add dependencies with &lt;code&gt;--with&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with pandas --with numpy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mount your local code for live updates: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with-editable .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Claude Desktop Integration (For Regular Use)&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is ready, install it in Claude Desktop to use it with Claude:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your server will run in an isolated environment with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic installation of dependencies specified in your FastMCP instance: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom naming via &lt;code&gt;--name&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py --name &#34;My Analytics Server&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variable management: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set variables individually&#xA;fastmcp install server.py -e API_KEY=abc123 -e DB_URL=postgres://...&#xA;&#xA;# Or load from a .env file&#xA;fastmcp install server.py -f .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Direct Execution (For Advanced Use Cases)&lt;/h3&gt; &#xA;&lt;p&gt;For advanced scenarios like custom deployments or running without Claude, you can execute your server directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    mcp.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using the FastMCP CLI&#xA;fastmcp run server.py&#xA;&#xA;# Or with Python/uv directly&#xA;python server.py&#xA;uv run python server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: When running directly, you are responsible for ensuring all dependencies are available in your environment. Any dependencies specified on the FastMCP instance are ignored.&lt;/p&gt; &#xA;&lt;p&gt;Choose this method when you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom deployment configurations&lt;/li&gt; &#xA; &lt;li&gt;Integration with other services&lt;/li&gt; &#xA; &lt;li&gt;Direct control over the server lifecycle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Server Object Names&lt;/h3&gt; &#xA;&lt;p&gt;All FastMCP commands will look for a server object called &lt;code&gt;mcp&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt;, or &lt;code&gt;server&lt;/code&gt; in your file. If you have a different object name or multiple servers in one file, use the syntax &lt;code&gt;server.py:my_server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using a standard name&#xA;fastmcp run server.py&#xA;&#xA;# Using a custom name&#xA;fastmcp run server.py:my_custom_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few examples of FastMCP servers. For more, see the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Echo Server&lt;/h3&gt; &#xA;&lt;p&gt;A simple server demonstrating resources, tools, and prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;Echo&#34;)&#xA;&#xA;@mcp.resource(&#34;echo://{message}&#34;)&#xA;def echo_resource(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a resource&#34;&#34;&#34;&#xA;    return f&#34;Resource echo: {message}&#34;&#xA;&#xA;@mcp.tool()&#xA;def echo_tool(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a tool&#34;&#34;&#34;&#xA;    return f&#34;Tool echo: {message}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def echo_prompt(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create an echo prompt&#34;&#34;&#34;&#xA;    return f&#34;Please process this message: {message}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite Explorer&lt;/h3&gt; &#xA;&lt;p&gt;A more complex example showing database integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;import sqlite3&#xA;&#xA;mcp = FastMCP(&#34;SQLite Explorer&#34;)&#xA;&#xA;@mcp.resource(&#34;schema://main&#34;)&#xA;def get_schema() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Provide the database schema as a resource&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    schema = conn.execute(&#xA;        &#34;SELECT sql FROM sqlite_master WHERE type=&#39;table&#39;&#34;&#xA;    ).fetchall()&#xA;    return &#34;\n&#34;.join(sql[0] for sql in schema if sql[0])&#xA;&#xA;@mcp.tool()&#xA;def query_data(sql: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Execute SQL queries safely&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    try:&#xA;        result = conn.execute(sql).fetchall()&#xA;        return &#34;\n&#34;.join(str(row) for row in result)&#xA;    except Exception as e:&#xA;        return f&#34;Error: {str(e)}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def analyze_table(table: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create a prompt template for analyzing tables&#34;&#34;&#34;&#xA;    return f&#34;&#34;&#34;Please analyze this database table:&#xA;Table: {table}&#xA;Schema: &#xA;{get_schema()}&#xA;&#xA;What insights can you provide about the structure and relationships?&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Open Developer Guide&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP requires Python 3.10+ and &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;p&gt;For development, we recommend installing FastMCP with development dependencies, which includes various utilities the maintainers find useful.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jlowin/fastmcp.git&#xA;cd fastmcp&#xA;uv sync --frozen --extra dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For running tests only (e.g., in CI), you only need the testing dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv sync --frozen --extra tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;p&gt;Please make sure to test any new functionality. Your tests should be simple and atomic and anticipate change rather than cement complex patterns.&lt;/p&gt; &#xA; &lt;p&gt;Run tests from the root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest -vv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Formatting&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP enforces a variety of required formats, which you can automatically enforce with pre-commit.&lt;/p&gt; &#xA; &lt;p&gt;Install the pre-commit hooks:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The hooks will now run on every commit (as well as on every PR). To run them manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Opening a Pull Request&lt;/h3&gt; &#xA; &lt;p&gt;Fork the repository and create a new branch:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make your changes and commit them:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;My changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Push your changes to your fork:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Feel free to reach out in a GitHub issue or discussion if you have any questions!&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>tulir/whatsmeow</title>
    <updated>2025-04-06T01:38:42Z</updated>
    <id>tag:github.com,2025-04-06:/tulir/whatsmeow</id>
    <link href="https://github.com/tulir/whatsmeow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go library for the WhatsApp web multidevice API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsmeow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/go.mau.fi/whatsmeow&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/go.mau.fi/whatsmeow.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;whatsmeow is a Go library for the WhatsApp web multidevice API.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Matrix room: &lt;a href=&#34;https://matrix.to/#/%23whatsmeow:maunium.net&#34;&gt;#whatsmeow:maunium.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For questions about the WhatsApp protocol (like how to send a specific type of message), you can also use the &lt;a href=&#34;https://github.com/tulir/whatsmeow/discussions/categories/whatsapp-protocol-q-a&#34;&gt;WhatsApp protocol Q&amp;amp;A&lt;/a&gt; section on GitHub discussions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/go.mau.fi/whatsmeow&#34;&gt;godoc&lt;/a&gt; includes docs for all methods and event types. There&#39;s also a &lt;a href=&#34;https://pkg.go.dev/go.mau.fi/whatsmeow#example-package&#34;&gt;simple example&lt;/a&gt; at the top.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Most core features are already present:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending messages to private chats and groups (both text and media)&lt;/li&gt; &#xA; &lt;li&gt;Receiving all messages&lt;/li&gt; &#xA; &lt;li&gt;Managing groups and receiving group change events&lt;/li&gt; &#xA; &lt;li&gt;Joining via invite messages, using and creating invite links&lt;/li&gt; &#xA; &lt;li&gt;Sending and receiving typing notifications&lt;/li&gt; &#xA; &lt;li&gt;Sending and receiving delivery and read receipts&lt;/li&gt; &#xA; &lt;li&gt;Reading and writing app state (contact list, chat pin/mute status, etc)&lt;/li&gt; &#xA; &lt;li&gt;Sending and handling retry receipts if message decryption fails&lt;/li&gt; &#xA; &lt;li&gt;Sending status messages (experimental, may not work for large contact lists)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Things that are not yet implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending broadcast list messages (this is not supported on WhatsApp web either)&lt;/li&gt; &#xA; &lt;li&gt;Calls&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ahmedkhaleel2004/gitdiagram</title>
    <updated>2025-04-06T01:38:42Z</updated>
    <id>tag:github.com,2025-04-06:/ahmedkhaleel2004/gitdiagram</id>
    <link href="https://github.com/ahmedkhaleel2004/gitdiagram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, simple, fast interactive diagrams for any GitHub repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitdiagram.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ahmedkhaleel2004/gitdiagram/main/docs/readme_img.png&#34; alt=&#34;Image&#34; title=&#34;GitDiagram Front Page&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://ko-fi.com/ahmedkhaleel2004&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Kofi-F16061.svg?logo=ko-fi&amp;amp;logoColor=white&#34; alt=&#34;Kofi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GitDiagram&lt;/h1&gt; &#xA;&lt;p&gt;Turn any GitHub repository into an interactive diagram for visualization in seconds.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace &lt;code&gt;hub&lt;/code&gt; with &lt;code&gt;diagram&lt;/code&gt; in any Github URL to access its diagram.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üëÄ &lt;strong&gt;Instant Visualization&lt;/strong&gt;: Convert any GitHub repository structure into a system design / architecture diagram&lt;/li&gt; &#xA; &lt;li&gt;üé® &lt;strong&gt;Interactivity&lt;/strong&gt;: Click on components to navigate directly to source files and relevant directories&lt;/li&gt; &#xA; &lt;li&gt;‚ö° &lt;strong&gt;Fast Generation&lt;/strong&gt;: Powered by Claude 3.5 Sonnet for quick and accurate diagrams&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Customization&lt;/strong&gt;: Modify and regenerate diagrams with custom instructions&lt;/li&gt; &#xA; &lt;li&gt;üåê &lt;strong&gt;API Access&lt;/strong&gt;: Public API available for integration (WIP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Tech Stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: Next.js, TypeScript, Tailwind CSS, ShadCN&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: FastAPI, Python, Server Actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: PostgreSQL (with Drizzle ORM)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI&lt;/strong&gt;: OpenAI o3-mini&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: Vercel (Frontend), EC2 (Backend)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CI/CD&lt;/strong&gt;: GitHub Actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analytics&lt;/strong&gt;: PostHog, Api-Analytics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§î About&lt;/h2&gt; &#xA;&lt;p&gt;I created this because I wanted to contribute to open-source projects but quickly realized their codebases are too massive for me to dig through manually, so this helps me get started - but it&#39;s definitely got many more use cases!&lt;/p&gt; &#xA;&lt;p&gt;Given any public (or private!) GitHub repository it generates diagrams in Mermaid.js with OpenAI&#39;s o3-mini! (Previously Claude 3.5 Sonnet)&lt;/p&gt; &#xA;&lt;p&gt;I extract information from the file tree and README for details and interactivity (you can click components to be taken to relevant files and directories)&lt;/p&gt; &#xA;&lt;p&gt;Most of what you might call the &#34;processing&#34; of this app is done with prompt engineering - see &lt;code&gt;/backend/app/prompts.py&lt;/code&gt;. This basically extracts and pipelines data and analysis for a larger action workflow, ending in the diagram code.&lt;/p&gt; &#xA;&lt;h2&gt;üîí How to diagram private repositories&lt;/h2&gt; &#xA;&lt;p&gt;You can simply click on &#34;Private Repos&#34; in the header and follow the instructions by providing a GitHub personal access token with the &lt;code&gt;repo&lt;/code&gt; scope.&lt;/p&gt; &#xA;&lt;p&gt;You can also self-host this app locally (backend separated as well!) with the steps below.&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Self-hosting / Local Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ahmedkhaleel2004/gitdiagram.git&#xA;cd gitdiagram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set up environment variables (create .env)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then edit the &lt;code&gt;.env&lt;/code&gt; file with your Anthropic API key and optional GitHub personal access token.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run backend&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Logs available at &lt;code&gt;docker-compose logs -f&lt;/code&gt; The FastAPI server will be available at &lt;code&gt;localhost:8000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Start local database&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x start-database.sh&#xA;./start-database.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When prompted to generate a random password, input yes. The Postgres database will start in a container at &lt;code&gt;localhost:5432&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Initialize the database schema&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm db:push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can view and interact with the database using &lt;code&gt;pnpm db:studio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Run Frontend&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now access the website at &lt;code&gt;localhost:3000&lt;/code&gt; and edit the rate limits defined in &lt;code&gt;backend/app/routers/generate.py&lt;/code&gt; in the generate function decorator.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Shoutout to &lt;a href=&#34;https://github.com/cyclotruc&#34;&gt;Romain Courtois&lt;/a&gt;&#39;s &lt;a href=&#34;https://gitingest.com/&#34;&gt;Gitingest&lt;/a&gt; for inspiration and styling&lt;/p&gt; &#xA;&lt;h2&gt;üìà Rate Limits&lt;/h2&gt; &#xA;&lt;p&gt;I am currently hosting it for free with no rate limits though this is somewhat likely to change in the future.&lt;/p&gt; &#xA;&lt;!-- If you would like to bypass these, self-hosting instructions are provided. I also plan on adding an input for your own Anthropic API key.&#xA;&#xA;Diagram generation:&#xA;&#xA;- 1 request per minute&#xA;- 5 requests per day --&gt; &#xA;&lt;h2&gt;ü§î Future Steps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement font-awesome icons in diagram&lt;/li&gt; &#xA; &lt;li&gt;Implement an embedded feature like star-history.com but for diagrams. The diagram could also be updated progressively as commits are made.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>