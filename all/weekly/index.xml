<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-21T01:38:44Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Dao-AILab/flash-attention</title>
    <updated>2024-07-21T01:38:44Z</updated>
    <id>tag:github.com,2024-07-21:/Dao-AILab/flash-attention</id>
    <link href="https://github.com/Dao-AILab/flash-attention" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and memory-efficient exact attention&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlashAttention&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides the official implementation of FlashAttention and FlashAttention-2 from the following papers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness&lt;/strong&gt;&lt;br&gt; Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, Christopher RÃ©&lt;br&gt; Paper: &lt;a href=&#34;https://arxiv.org/abs/2205.14135&#34;&gt;https://arxiv.org/abs/2205.14135&lt;/a&gt;&lt;br&gt; IEEE Spectrum &lt;a href=&#34;https://spectrum.ieee.org/mlperf-rankings-2022&#34;&gt;article&lt;/a&gt; about our submission to the MLPerf 2.0 benchmark using FlashAttention. &lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flashattn_banner.jpg&#34; alt=&#34;FlashAttention&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning&lt;/strong&gt;&lt;br&gt; Tri Dao&lt;/p&gt; &#xA;&lt;p&gt;Paper: &lt;a href=&#34;https://tridao.me/publications/flash2/flash2.pdf&#34;&gt;https://tridao.me/publications/flash2/flash2.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flashattention_logo.png&#34; alt=&#34;FlashAttention-2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve been very happy to see FlashAttention being widely adopted in such a short time after its release. This &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/usage.md&#34;&gt;page&lt;/a&gt; contains a partial list of places where FlashAttention is being used.&lt;/p&gt; &#xA;&lt;p&gt;FlashAttention and FlashAttention-2 are free to use and modify (see LICENSE). Please cite and credit FlashAttention if you use it.&lt;/p&gt; &#xA;&lt;h2&gt;FlashAttention-3 beta release&lt;/h2&gt; &#xA;&lt;p&gt;FlashAttention-3 is optimized for Hopper GPUs (e.g. H100).&lt;/p&gt; &#xA;&lt;p&gt;Blogpost: &lt;a href=&#34;https://tridao.me/blog/2024/flash3/&#34;&gt;https://tridao.me/blog/2024/flash3/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Paper: &lt;a href=&#34;https://tridao.me/publications/flash3/flash3.pdf&#34;&gt;https://tridao.me/publications/flash3/flash3.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flash3_fp16_fwd.png&#34; alt=&#34;FlashAttention-3 speedup on H100 80GB SXM5 with FP16&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a beta release for testing / benchmarking before we integrate that with the rest of the repo.&lt;/p&gt; &#xA;&lt;p&gt;Currently released:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FP16 forward and backward&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Coming soon in the next couple of days / next week:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BF16&lt;/li&gt; &#xA; &lt;li&gt;Variable length (FP16, BF16)&lt;/li&gt; &#xA; &lt;li&gt;FP8 forward.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Requirements: H100 / H800 GPU, CUDA &amp;gt;= 12.3.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd hopper&#xA;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PYTHONPATH=$PWD&#xA;pytest -q -s test_flash_attn.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and features&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CUDA 11.6 and above.&lt;/li&gt; &#xA; &lt;li&gt;PyTorch 1.12 and above.&lt;/li&gt; &#xA; &lt;li&gt;Linux. Might work for Windows starting v2.3.2 (we&#39;ve seen a few positive &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/issues/595&#34;&gt;reports&lt;/a&gt;) but Windows compilation still requires more testing. If you have ideas on how to set up prebuilt CUDA wheels for Windows, please reach out via Github issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend the &lt;a href=&#34;https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch&#34;&gt;Pytorch&lt;/a&gt; container from Nvidia, which has all the required tools to install FlashAttention.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that PyTorch is installed.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that &lt;code&gt;packaging&lt;/code&gt; is installed (&lt;code&gt;pip install packaging&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Make sure that &lt;code&gt;ninja&lt;/code&gt; is installed and that it works correctly (e.g. &lt;code&gt;ninja --version&lt;/code&gt; then &lt;code&gt;echo $?&lt;/code&gt; should return exit code 0). If not (sometimes &lt;code&gt;ninja --version&lt;/code&gt; then &lt;code&gt;echo $?&lt;/code&gt; returns a nonzero exit code), uninstall then reinstall &lt;code&gt;ninja&lt;/code&gt; (&lt;code&gt;pip uninstall -y ninja &amp;amp;&amp;amp; pip install ninja&lt;/code&gt;). Without &lt;code&gt;ninja&lt;/code&gt;, compiling can take a very long time (2h) since it does not use multiple CPU cores. With &lt;code&gt;ninja&lt;/code&gt; compiling takes 3-5 minutes on a 64-core machine.&lt;/li&gt; &#xA; &lt;li&gt;Then:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can compile from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your machine has less than 96GB of RAM and lots of CPU cores, &lt;code&gt;ninja&lt;/code&gt; might run too many parallel compilation jobs that could exhaust the amount of RAM. To limit the number of parallel compilation jobs, you can set the environment variable &lt;code&gt;MAX_JOBS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;MAX_JOBS=4 pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interface: &lt;code&gt;src/flash_attention_interface.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;FlashAttention-2 currently supports:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ampere, Ada, or Hopper GPUs (e.g., A100, RTX 3090, RTX 4090, H100). Support for Turing GPUs (T4, RTX 2080) is coming soon, please use FlashAttention 1.x for Turing GPUs for now.&lt;/li&gt; &#xA; &lt;li&gt;Datatype fp16 and bf16 (bf16 requires Ampere, Ada, or Hopper GPUs).&lt;/li&gt; &#xA; &lt;li&gt;All head dimensions up to 256. &lt;del&gt;Head dim &amp;gt; 192 backward requires A100/A800 or H100/H800&lt;/del&gt;. Head dim 256 backward now works on consumer GPUs (if there&#39;s no dropout) as of flash-attn 2.5.5.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to use FlashAttention&lt;/h2&gt; &#xA;&lt;p&gt;The main functions implement scaled dot product attention (softmax(Q @ K^T * softmax_scale) @ V):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flash_attn import flash_attn_qkvpacked_func, flash_attn_func&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_qkvpacked_func(qkv, dropout_p=0.0, softmax_scale=None, causal=False,&#xA;                          window_size=(-1, -1), alibi_slopes=None, deterministic=False):&#xA;&#34;&#34;&#34;dropout_p should be set to 0.0 during evaluation&#xA;If Q, K, V are already stacked into 1 tensor, this function will be faster than&#xA;calling flash_attn_func on Q, K, V since the backward pass avoids explicit concatenation&#xA;of the gradients of Q, K, V.&#xA;If window_size != (-1, -1), implements sliding window local attention. Query at position i&#xA;will only attend to keys between [i - window_size[0], i + window_size[1]] inclusive.&#xA;Arguments:&#xA;    qkv: (batch_size, seqlen, 3, nheads, headdim)&#xA;    dropout_p: float. Dropout probability.&#xA;    softmax_scale: float. The scaling of QK^T before applying softmax.&#xA;        Default to 1 / sqrt(headdim).&#xA;    causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).&#xA;    window_size: (left, right). If not (-1, -1), implements sliding window local attention.&#xA;    alibi_slopes: (nheads,) or (batch_size, nheads), fp32. A bias of (-alibi_slope * |i - j|) is added to&#xA;        the attention score of query i and key j.&#xA;    deterministic: bool. Whether to use the deterministic implementation of the backward pass,&#xA;        which is slightly slower and uses more memory. The forward pass is always deterministic.&#xA;Return:&#xA;    out: (batch_size, seqlen, nheads, headdim).&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_func(q, k, v, dropout_p=0.0, softmax_scale=None, causal=False,&#xA;                window_size=(-1, -1), alibi_slopes=None, deterministic=False):&#xA;&#34;&#34;&#34;dropout_p should be set to 0.0 during evaluation&#xA;Supports multi-query and grouped-query attention (MQA/GQA) by passing in KV with fewer heads&#xA;than Q. Note that the number of heads in Q must be divisible by the number of heads in KV.&#xA;For example, if Q has 6 heads and K, V have 2 heads, head 0, 1, 2 of Q will attention to head&#xA;0 of K, V, and head 3, 4, 5 of Q will attention to head 1 of K, V.&#xA;If window_size != (-1, -1), implements sliding window local attention. Query at position i&#xA;will only attend to keys between&#xA;[i + seqlen_k - seqlen_q - window_size[0], i + seqlen_k - seqlen_q + window_size[1]] inclusive.&#xA;&#xA;Arguments:&#xA;    q: (batch_size, seqlen, nheads, headdim)&#xA;    k: (batch_size, seqlen, nheads_k, headdim)&#xA;    v: (batch_size, seqlen, nheads_k, headdim)&#xA;    dropout_p: float. Dropout probability.&#xA;    softmax_scale: float. The scaling of QK^T before applying softmax.&#xA;        Default to 1 / sqrt(headdim).&#xA;    causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).&#xA;    window_size: (left, right). If not (-1, -1), implements sliding window local attention.&#xA;    alibi_slopes: (nheads,) or (batch_size, nheads), fp32. A bias of&#xA;        (-alibi_slope * |i + seqlen_k - seqlen_q - j|)&#xA;        is added to the attention score of query i and key j.&#xA;    deterministic: bool. Whether to use the deterministic implementation of the backward pass,&#xA;        which is slightly slower and uses more memory. The forward pass is always deterministic.&#xA;Return:&#xA;    out: (batch_size, seqlen, nheads, headdim).&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def flash_attn_with_kvcache(&#xA;    q,&#xA;    k_cache,&#xA;    v_cache,&#xA;    k=None,&#xA;    v=None,&#xA;    rotary_cos=None,&#xA;    rotary_sin=None,&#xA;    cache_seqlens: Optional[Union[(int, torch.Tensor)]] = None,&#xA;    cache_batch_idx: Optional[torch.Tensor] = None,&#xA;    block_table: Optional[torch.Tensor] = None,&#xA;    softmax_scale=None,&#xA;    causal=False,&#xA;    window_size=(-1, -1),  # -1 means infinite context window&#xA;    rotary_interleaved=True,&#xA;    alibi_slopes=None,&#xA;):&#xA;    &#34;&#34;&#34;&#xA;    If k and v are not None, k_cache and v_cache will be updated *inplace* with the new values from&#xA;    k and v. This is useful for incremental decoding: you can pass in the cached keys/values from&#xA;    the previous step, and update them with the new keys/values from the current step, and do&#xA;    attention with the updated cache, all in 1 kernel.&#xA;&#xA;    If you pass in k / v, you must make sure that the cache is large enough to hold the new values.&#xA;    For example, the KV cache could be pre-allocated with the max sequence length, and you can use&#xA;    cache_seqlens to keep track of the current sequence lengths of each sequence in the batch.&#xA;&#xA;    Also apply rotary embedding if rotary_cos and rotary_sin are passed in. The key @k will be&#xA;    rotated by rotary_cos and rotary_sin at indices cache_seqlens, cache_seqlens + 1, etc.&#xA;    If causal or local (i.e., window_size != (-1, -1)), the query @q will be rotated by rotary_cos&#xA;    and rotary_sin at indices cache_seqlens, cache_seqlens + 1, etc.&#xA;    If not causal and not local, the query @q will be rotated by rotary_cos and rotary_sin at&#xA;    indices cache_seqlens only (i.e. we consider all tokens in @q to be at position cache_seqlens).&#xA;&#xA;    See tests/test_flash_attn.py::test_flash_attn_kvcache for examples of how to use this function.&#xA;&#xA;    Supports multi-query and grouped-query attention (MQA/GQA) by passing in KV with fewer heads&#xA;    than Q. Note that the number of heads in Q must be divisible by the number of heads in KV.&#xA;    For example, if Q has 6 heads and K, V have 2 heads, head 0, 1, 2 of Q will attention to head&#xA;    0 of K, V, and head 3, 4, 5 of Q will attention to head 1 of K, V.&#xA;&#xA;    If causal=True, the causal mask is aligned to the bottom right corner of the attention matrix.&#xA;    For example, if seqlen_q = 2 and seqlen_k = 5, the causal mask (1 = keep, 0 = masked out) is:&#xA;        1 1 1 1 0&#xA;        1 1 1 1 1&#xA;    If seqlen_q = 5 and seqlen_k = 2, the causal mask is:&#xA;        0 0&#xA;        0 0&#xA;        0 0&#xA;        1 0&#xA;        1 1&#xA;    If the row of the mask is all zero, the output will be zero.&#xA;&#xA;    If window_size != (-1, -1), implements sliding window local attention. Query at position i&#xA;    will only attend to keys between&#xA;    [i + seqlen_k - seqlen_q - window_size[0], i + seqlen_k - seqlen_q + window_size[1]] inclusive.&#xA;&#xA;    Note: Does not support backward pass.&#xA;&#xA;    Arguments:&#xA;        q: (batch_size, seqlen, nheads, headdim)&#xA;        k_cache: (batch_size_cache, seqlen_cache, nheads_k, headdim) if there&#39;s no block_table,&#xA;            or (num_blocks, page_block_size, nheads_k, headdim) if there&#39;s a block_table (i.e. paged KV cache)&#xA;            page_block_size must be a multiple of 256.&#xA;        v_cache: (batch_size_cache, seqlen_cache, nheads_k, headdim) if there&#39;s no block_table,&#xA;            or (num_blocks, page_block_size, nheads_k, headdim) if there&#39;s a block_table (i.e. paged KV cache)&#xA;        k [optional]: (batch_size, seqlen_new, nheads_k, headdim). If not None, we concatenate&#xA;            k with k_cache, starting at the indices specified by cache_seqlens.&#xA;        v [optional]: (batch_size, seqlen_new, nheads_k, headdim). Similar to k.&#xA;        rotary_cos [optional]: (seqlen_ro, rotary_dim / 2). If not None, we apply rotary embedding&#xA;            to k and q. Only applicable if k and v are passed in. rotary_dim must be divisible by 16.&#xA;        rotary_sin [optional]: (seqlen_ro, rotary_dim / 2). Similar to rotary_cos.&#xA;        cache_seqlens: int, or (batch_size,), dtype torch.int32. The sequence lengths of the&#xA;            KV cache.&#xA;        block_table [optional]: (batch_size, max_num_blocks_per_seq), dtype torch.int32.&#xA;        cache_batch_idx: (batch_size,), dtype torch.int32. The indices used to index into the KV cache.&#xA;            If None, we assume that the batch indices are [0, 1, 2, ..., batch_size - 1].&#xA;            If the indices are not distinct, and k and v are provided, the values updated in the cache&#xA;                 might come from any of the duplicate indices.&#xA;        softmax_scale: float. The scaling of QK^T before applying softmax.&#xA;            Default to 1 / sqrt(headdim).&#xA;        causal: bool. Whether to apply causal attention mask (e.g., for auto-regressive modeling).&#xA;        window_size: (left, right). If not (-1, -1), implements sliding window local attention.&#xA;        rotary_interleaved: bool. Only applicable if rotary_cos and rotary_sin are passed in.&#xA;            If True, rotary embedding will combine dimensions 0 &amp;amp; 1, 2 &amp;amp; 3, etc. If False,&#xA;            rotary embedding will combine dimensions 0 &amp;amp; rotary_dim / 2, 1 &amp;amp; rotary_dim / 2 + 1&#xA;            (i.e. GPT-NeoX style).&#xA;        alibi_slopes: (nheads,) or (batch_size, nheads), fp32. A bias of&#xA;            (-alibi_slope * |i + seqlen_k - seqlen_q - j|)&#xA;            is added to the attention score of query i and key j.&#xA;&#xA;    Return:&#xA;        out: (batch_size, seqlen, nheads, headdim).&#xA;    &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see how these functions are used in a multi-head attention layer (which includes QKV projection, output projection), see the MHA &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/flash_attn/modules/mha.py&#34;&gt;implementation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;2.0: Complete rewrite, 2x faster&lt;/h3&gt; &#xA;&lt;p&gt;Upgrading from FlashAttention (1.x) to FlashAttention-2&lt;/p&gt; &#xA;&lt;p&gt;These functions have been renamed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flash_attn_unpadded_func&lt;/code&gt; -&amp;gt; &lt;code&gt;flash_attn_varlen_func&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flash_attn_unpadded_qkvpacked_func&lt;/code&gt; -&amp;gt; &lt;code&gt;flash_attn_varlen_qkvpacked_func&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flash_attn_unpadded_kvpacked_func&lt;/code&gt; -&amp;gt; &lt;code&gt;flash_attn_varlen_kvpacked_func&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the inputs have the same sequence lengths in the same batch, it is simpler and faster to use these functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_qkvpacked_func(qkv, dropout_p=0.0, softmax_scale=None, causal=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash_attn_func(q, k, v, dropout_p=0.0, softmax_scale=None, causal=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.1: Change behavior of causal flag&lt;/h3&gt; &#xA;&lt;p&gt;If seqlen_q != seqlen_k and causal=True, the causal mask is aligned to the bottom right corner of the attention matrix, instead of the top-left corner.&lt;/p&gt; &#xA;&lt;p&gt;For example, if seqlen_q = 2 and seqlen_k = 5, the causal mask (1 = keep, 0 = masked out) is:&lt;br&gt; v2.0:&lt;br&gt; 1 0 0 0 0&lt;br&gt; 1 1 0 0 0&lt;br&gt; v2.1:&lt;br&gt; 1 1 1 1 0&lt;br&gt; 1 1 1 1 1&lt;/p&gt; &#xA;&lt;p&gt;If seqlen_q = 5 and seqlen_k = 2, the causal mask is:&lt;br&gt; v2.0:&lt;br&gt; 1 0&lt;br&gt; 1 1&lt;br&gt; 1 1&lt;br&gt; 1 1&lt;br&gt; 1 1&lt;br&gt; v2.1:&lt;br&gt; 0 0&lt;br&gt; 0 0&lt;br&gt; 0 0&lt;br&gt; 1 0&lt;br&gt; 1 1&lt;br&gt; If the row of the mask is all zero, the output will be zero.&lt;/p&gt; &#xA;&lt;h3&gt;2.2: Optimize for inference&lt;/h3&gt; &#xA;&lt;p&gt;Optimize for inference (iterative decoding) when query has very small sequence length (e.g., query sequence length = 1). The bottleneck here is to load KV cache as fast as possible, and we split the loading across different thread blocks, with a separate kernel to combine results.&lt;/p&gt; &#xA;&lt;p&gt;See the function &lt;code&gt;flash_attn_with_kvcache&lt;/code&gt; with more features for inference (perform rotary embedding, updating KV cache inplace).&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the xformers team, and in particular Daniel Haziza, for this collaboration.&lt;/p&gt; &#xA;&lt;h3&gt;2.3: Local (i.e., sliding window) attention&lt;/h3&gt; &#xA;&lt;p&gt;Implement sliding window attention (i.e., local attention). Thanks to &lt;a href=&#34;https://mistral.ai/&#34;&gt;Mistral AI&lt;/a&gt; and in particular TimothÃ©e Lacroix for this contribution. Sliding window was used in the &lt;a href=&#34;https://mistral.ai/news/announcing-mistral-7b/&#34;&gt;Mistral 7B&lt;/a&gt; model.&lt;/p&gt; &#xA;&lt;h3&gt;2.4: ALiBi (attention with linear bias), deterministic backward pass.&lt;/h3&gt; &#xA;&lt;p&gt;Implement ALiBi (Press et al., 2021). Thanks to Sanghun Cho from Kakao Brain for this contribution.&lt;/p&gt; &#xA;&lt;p&gt;Implement deterministic backward pass. Thanks to engineers from &lt;a href=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/www.meituan.com&#34;&gt;Meituan&lt;/a&gt; for this contribution.&lt;/p&gt; &#xA;&lt;h3&gt;2.5: Paged KV cache.&lt;/h3&gt; &#xA;&lt;p&gt;Support paged KV cache (i.e., &lt;a href=&#34;https://arxiv.org/abs/2309.06180&#34;&gt;PagedAttention&lt;/a&gt;). Thanks to @beginlner for this contribution.&lt;/p&gt; &#xA;&lt;h3&gt;2.6: Softcapping.&lt;/h3&gt; &#xA;&lt;p&gt;Support attention with softcapping, as used in Gemma-2 and Grok models. Thanks to @Narsil for this contribution.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;We present expected speedup (combined forward + backward pass) and memory savings from using FlashAttention against PyTorch standard attention, depending on sequence length, on different GPUs (speedup depends on memory bandwidth - we see more speedup on slower GPU memory).&lt;/p&gt; &#xA;&lt;p&gt;We currently have benchmarks for these GPUs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/#a100&#34;&gt;A100&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/#h100&#34;&gt;H100&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- * [RTX 3090](#rtx-3090) --&gt; &#xA;&lt;!-- * [T4](#t4) --&gt; &#xA;&lt;h3&gt;A100&lt;/h3&gt; &#xA;&lt;p&gt;We display FlashAttention speedup using these parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Head dimension 64 or 128, hidden dimension 2048 (i.e. either 32 or 16 heads).&lt;/li&gt; &#xA; &lt;li&gt;Sequence length 512, 1k, 2k, 4k, 8k, 16k.&lt;/li&gt; &#xA; &lt;li&gt;Batch size set to 16k / seqlen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Speedup&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flash2_a100_fwd_bwd_benchmark.png&#34; alt=&#34;FlashAttention speedup on A100 80GB SXM5 with FP16/BF16&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Memory&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flashattn_memory.jpg&#34; alt=&#34;FlashAttention memory&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We show memory savings in this graph (note that memory footprint is the same no matter if you use dropout or masking). Memory savings are proportional to sequence length -- since standard attention has memory quadratic in sequence length, whereas FlashAttention has memory linear in sequence length. We see 10X memory savings at sequence length 2K, and 20X at 4K. As a result, FlashAttention can scale to much longer sequence lengths.&lt;/p&gt; &#xA;&lt;h3&gt;H100&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dao-AILab/flash-attention/main/assets/flash2_h100_fwd_bwd_benchmark.png&#34; alt=&#34;FlashAttention speedup on H100 SXM5 with FP16/BF16&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Full model code and training script&lt;/h2&gt; &#xA;&lt;p&gt;We have released the full GPT model &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/flash_attn/models/gpt.py&#34;&gt;implementation&lt;/a&gt;. We also provide optimized implementations of other layers (e.g., MLP, LayerNorm, cross-entropy loss, rotary embedding). Overall this speeds up training by 3-5x compared to the baseline implementation from Huggingface, reaching up to 225 TFLOPs/sec per A100, equivalent to 72% model FLOPs utilization (we don&#39;t need any activation checkpointing).&lt;/p&gt; &#xA;&lt;p&gt;We also include a training &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/tree/main/training&#34;&gt;script&lt;/a&gt; to train GPT2 on Openwebtext and GPT3 on The Pile.&lt;/p&gt; &#xA;&lt;h2&gt;Triton implementation of FlashAttention&lt;/h2&gt; &#xA;&lt;p&gt;Phil Tillet (OpenAI) has an experimental implementation of FlashAttention in Triton: &lt;a href=&#34;https://github.com/openai/triton/raw/master/python/tutorials/06-fused-attention.py&#34;&gt;https://github.com/openai/triton/blob/master/python/tutorials/06-fused-attention.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As Triton is a higher-level language than CUDA, it might be easier to understand and experiment with. The notations in the Triton implementation are also closer to what&#39;s used in our paper.&lt;/p&gt; &#xA;&lt;p&gt;We also have an experimental implementation in Triton that support attention bias (e.g. ALiBi): &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention/raw/main/flash_attn/flash_attn_triton.py&#34;&gt;https://github.com/Dao-AILab/flash-attention/blob/main/flash_attn/flash_attn_triton.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;We test that FlashAttention produces the same output and gradient as a reference implementation, up to some numerical tolerance. In particular, we check that the maximum numerical error of FlashAttention is at most twice the numerical error of a baseline implementation in Pytorch (for different head dimensions, input dtype, sequence length, causal / non-causal).&lt;/p&gt; &#xA;&lt;p&gt;To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pytest -q -s tests/test_flash_attn.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;When you encounter issues&lt;/h2&gt; &#xA;&lt;p&gt;This new release of FlashAttention-2 has been tested on several GPT-style models, mostly on A100 GPUs.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter bugs, please open a GitHub Issue!&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this codebase, or otherwise found our work valuable, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{dao2022flashattention,&#xA;  title={Flash{A}ttention: Fast and Memory-Efficient Exact Attention with {IO}-Awareness},&#xA;  author={Dao, Tri and Fu, Daniel Y. and Ermon, Stefano and Rudra, Atri and R{\&#39;e}, Christopher},&#xA;  booktitle={Advances in Neural Information Processing Systems (NeurIPS)},&#xA;  year={2022}&#xA;}&#xA;@inproceedings{dao2023flashattention2,&#xA;  title={Flash{A}ttention-2: Faster Attention with Better Parallelism and Work Partitioning},&#xA;  author={Dao, Tri},&#xA;  booktitle={International Conference on Learning Representations (ICLR)},&#xA;  year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ueberdosis/tiptap</title>
    <updated>2024-07-21T01:38:44Z</updated>
    <id>tag:github.com,2024-07-21:/ueberdosis/tiptap</id>
    <link href="https://github.com/ueberdosis/tiptap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The headless rich text editor framework for web artisans.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tiptap Editor&lt;/h1&gt; &#xA;&lt;p&gt;The Tiptap Editor is a headless, framework-agnostic rich text editor that&#39;s customizable and extendable through extensions. Its headless nature means it comes without a set user interface, offering full design freedom (for a jumpstart, see linked &lt;a href=&#34;https://raw.githubusercontent.com/ueberdosis/tiptap/develop/#examples-codesandbox-and-ui-templates&#34;&gt;UI templates&lt;/a&gt; below). Tiptap is based on the highly reliable &lt;a href=&#34;https://github.com/ProseMirror/prosemirror&#34;&gt;ProseMirror&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Tiptap Editor is complemented by the collaboration open-source backend &lt;a href=&#34;https://github.com/ueberdosis/hocuspocus&#34;&gt;Hocuspocus&lt;/a&gt;. Both the Editor and Hocuspocus form the foundation of the &lt;a href=&#34;https://tiptap.dev/&#34;&gt;Tiptap Suite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ueberdosis/tiptap/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ueberdosis/tiptap/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@tiptap/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@tiptap/core.svg?label=version&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmcharts.com/compare/@tiptap/core?minimal=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@tiptap/core.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@tiptap/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/@tiptap/core.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/WtJ49jGshW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/ueberdosis&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&#34; alt=&#34;Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How does the Tiptap Editor work?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Headless Framework:&lt;/strong&gt; Tiptap does not rely on a user interface. So there is no need for class overrides or code hacks. If you do need an example UI feel free to browse our &lt;a href=&#34;https://raw.githubusercontent.com/ueberdosis/tiptap/develop/#examples-codesandbox-and-ui-templates&#34;&gt;UI templates&lt;/a&gt; linked below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Framework-agnostic:&lt;/strong&gt; The Tiptap Editor is designed to work across different frontend frameworks. This means whether you&#39;re using Vue, React, or plain JavaScript, Tiptap integrates without compatibility issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extension based:&lt;/strong&gt; Extensions in Tiptap allow for a tailored editing experience, from simple text styling to advanced features like drag-and-drop block editing. You have the option to choose from over 100 extensions available in the &lt;a href=&#34;https://tiptap.dev/docs/editor/extensions&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://github.com/ueberdosis/awesome-tiptap/#community-extensions&#34;&gt;community&lt;/a&gt; to enhance your editor&#39;s functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customize your UX:&lt;/strong&gt; The editor was built to give you control to define your own &lt;a href=&#34;https://tiptap.dev/docs/editor/guide/custom-extensions&#34;&gt;extensions&lt;/a&gt; and &lt;a href=&#34;https://tiptap.dev/docs/editor/api/nodes&#34;&gt;nodes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Editor Pro Extensions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Pro Extensions&lt;/strong&gt; are a set of advanced functionalities that enhance the capabilities of the Tiptap Editor. They are additional features that can be integrated into the base editor to provide more sophisticated editing options.&lt;/p&gt; &#xA;&lt;p&gt;Key functionalities include collaborative editing, which allows multiple users to edit documents simultaneously, drag-and-drop file management for easier handling of documents and media, and unique node ID assignment. Review the docs right &lt;a href=&#34;https://tiptap.dev/docs/editor/extensions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pro Extensions are free with a &lt;a href=&#34;https://cloud.tiptap.dev/pro-extensions&#34;&gt;Tiptap account&lt;/a&gt;. Once signed up, review the guide in your account.&lt;/p&gt; &#xA;&lt;h3&gt;Make your editor collaborative&lt;/h3&gt; &#xA;&lt;p&gt;Interested in collaborative editing? Check out our open-source package &lt;a href=&#34;https://github.com/ueberdosis/hocuspocus&#34;&gt;Hocuspocus&lt;/a&gt; - a collaboration backend built around the CRDT power of &lt;a href=&#34;https://github.com/yjs/yjs&#34;&gt;Yjs&lt;/a&gt;. Hocuspocus serves as the backbone for the &lt;a href=&#34;https://tiptap.dev/&#34;&gt;Tiptap Suite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, make sure to check out our &lt;a href=&#34;https://tiptap.dev/docs/editor/installation&#34;&gt;documentation&lt;/a&gt;. If you encounter any problems or have suggestions for our system, please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Examples, CodeSandbox and UI Templates&lt;/h3&gt; &#xA;&lt;p&gt;Have a look at the &lt;a href=&#34;https://tiptap.dev/examples&#34;&gt;examples to see Tiptap in action&lt;/a&gt; or review and fork our codesandboxes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codesandbox.io/p/devbox/editor-9x9dkd?embed=1&amp;amp;file=%2Fsrc%2FApp.js&#34;&gt;Basic example of the Tiptap editor.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codesandbox.io/p/devbox/collaboration-4stk94&#34;&gt;Collaboration ready Tiptap CodeSandbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React notion-like block editor template: &lt;a href=&#34;https://templates.tiptap.dev/&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Tiptap&lt;/h2&gt; &#xA;&lt;p&gt;Tiptap is a collection of developer components based on open-source technology, forming the basis of our advanced, paid features. It includes the open-source editor component, collaboration features, Content AI, and Tiptap Cloud. We are developing open-source products that also shape our paid features. We&#39;re committed to improving both, ensuring quality and reliability in every update.&lt;/p&gt; &#xA;&lt;p&gt;For more details, visit the Tiptap &lt;a href=&#34;https://tiptap.dev/docs/editor/introduction&#34;&gt;documentation&lt;/a&gt; or &lt;a href=&#34;https://tiptap.dev/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;For help, discussion about best practices, or any other conversation that would benefit from being searchable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ueberdosis/tiptap/discussions&#34;&gt;Discuss Tiptap on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors ð&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.complish.app/&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/5fa93d27380666789a1cbbd3/5fae50824b4d2d06f3d2898f_Frame%20374.png&#34; width=&#34;25&#34;&gt;&lt;br&gt; &lt;strong&gt;Complish&lt;/strong&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.storyblok.com/&#34;&gt; &lt;img src=&#34;https://unavatar.io/github/storyblok&#34; width=&#34;25&#34;&gt;&lt;br&gt; &lt;strong&gt;Storyblok&lt;/strong&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://posthog.com/&#34;&gt; &lt;img src=&#34;https://unavatar.io/github/posthog&#34; width=&#34;25&#34;&gt;&lt;br&gt; &lt;strong&gt;PostHog&lt;/strong&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;100&#34;&gt; &lt;a href=&#34;https://reflect.app/&#34;&gt; &lt;img src=&#34;https://unavatar.io/reflect.app&#34; width=&#34;25&#34;&gt;&lt;br&gt; &lt;strong&gt;Reflect&lt;/strong&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;100&#34;&gt; &lt;a href=&#34;https://ziffmedia.com/&#34;&gt; &lt;img src=&#34;https://unavatar.io/github/ziffmedia&#34; width=&#34;25&#34;&gt;&lt;br&gt; &lt;strong&gt;Ziff Media&lt;/strong&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; width=&#34;100&#34;&gt; &lt;a href=&#34;https://www.basewell.com/&#34;&gt; &lt;img src=&#34;https://unavatar.io/github/Basewell&#34; width=&#34;25&#34;&gt;&lt;br&gt; &lt;strong&gt;Basewell&lt;/strong&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ifixit.com/&#34;&gt;iFixit&lt;/a&gt;, &lt;a href=&#34;https://apostrophecms.com/&#34;&gt;ApostropheCMS&lt;/a&gt;, &lt;a href=&#34;http://www.novadiscovery.com/&#34;&gt;Novadiscovery&lt;/a&gt;, &lt;a href=&#34;https://www.omicsautomation.com&#34;&gt;Omics Data Automation&lt;/a&gt;, &lt;a href=&#34;https://www.flowmobile.app/&#34;&gt;Flow Mobile&lt;/a&gt;, &lt;a href=&#34;https://www.dociq.io/&#34;&gt;DocIQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/ueberdosis&#34;&gt;hundreds of awesome inviduals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Feel like adding some magic of your own to Tiptap Editor Core? We welcome contributions! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/ueberdosis/tiptap/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guidelines for how to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/samwillis&#34;&gt;Sam Willis&lt;/a&gt;, &lt;a href=&#34;https://github.com/BrianHung&#34;&gt;Brian Hung&lt;/a&gt;, &lt;a href=&#34;https://github.com/holtwick&#34;&gt;Dirk Holtwick&lt;/a&gt;, &lt;a href=&#34;https://github.com/SamDuvall&#34;&gt;Sam Duvall&lt;/a&gt;, &lt;a href=&#34;https://github.com/Chrissi2812&#34;&gt;Christoph Flathmann&lt;/a&gt;, &lt;a href=&#34;https://github.com/erickwilder&#34;&gt;Erick Wilder&lt;/a&gt;, &lt;a href=&#34;https://github.com/mariux&#34;&gt;Marius Tolzmann&lt;/a&gt;, &lt;a href=&#34;https://github.com/jjangga0214&#34;&gt;jjangga0214&lt;/a&gt;, &lt;a href=&#34;https://github.com/mayacoda&#34;&gt;Maya Nedeljkovich&lt;/a&gt;, &lt;a href=&#34;https://github.com/ryanbliss&#34;&gt;Ryan Bliss&lt;/a&gt;, &lt;a href=&#34;https://github.com/gambolputty&#34;&gt;Gregor&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ueberdosis/contributors&#34;&gt;many more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/ueberdosis/tiptap/develop/LICENSE.md&#34;&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PCSX2/pcsx2</title>
    <updated>2024-07-21T01:38:44Z</updated>
    <id>tag:github.com,2024-07-21:/PCSX2/pcsx2</id>
    <link href="https://github.com/PCSX2/pcsx2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PCSX2 - The Playstation 2 Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PCSX2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PCSX2/pcsx2/windows_build_matrix.yml?label=%F0%9F%96%A5%EF%B8%8F%20Windows%20Builds&#34; alt=&#34;Windows Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PCSX2/pcsx2/linux_build_matrix.yml?label=%F0%9F%90%A7%20Linux%20Builds&#34; alt=&#34;Linux Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/PCSX2/pcsx2/macos_build_matrix.yml?label=%F0%9F%8D%8E%20MacOS%20Builds&#34; alt=&#34;MacOS Build Status&#34;&gt; &lt;a href=&#34;https://app.codacy.com/gh/PCSX2/pcsx2/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=PCSX2/pcsx2&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/1f7c0d75fec74d6daa6adb084e5b4f71&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/TCz3t9k&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/309643527816609793?color=%235CA8FA&amp;amp;label=PCSX2%20Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PCSX2 is a free and open-source PlayStation 2 (PS2) emulator. Its purpose is to emulate the PS2&#39;s hardware, using a combination of MIPS CPU &lt;a href=&#34;https://en.wikipedia.org/wiki/Interpreter_(computing)&#34;&gt;Interpreters&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_recompilation&#34;&gt;Recompilers&lt;/a&gt; and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_machine&#34;&gt;Virtual Machine&lt;/a&gt; which manages hardware states and PS2 system memory. This allows you to play PS2 games on your PC, with many additional features and benefits.&lt;/p&gt; &#xA;&lt;h2&gt;Project Details&lt;/h2&gt; &#xA;&lt;p&gt;PCSX2 has been in development for more than 20 years. Past versions could only run a few public domain game demos, but newer versions can run most games at full speed, including popular titles such as Final Fantasy X and Devil May Cry 3. Visit the &lt;a href=&#34;https://pcsx2.net/compat/&#34;&gt;PCSX2 compatibility list&lt;/a&gt; to check the latest compatibility status of games (with more than 2500 titles tested).&lt;/p&gt; &#xA;&lt;p&gt;Installers and binaries for both stable and nightly builds are available from &lt;a href=&#34;https://pcsx2.net/downloads/&#34;&gt;our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;PCSX2 supports Windows, Linux, and Mac platforms. Our &lt;a href=&#34;https://pcsx2.net/docs/setup/requirements&#34;&gt;setup documentation page&lt;/a&gt; contains additional details on software and hardware requirements.&lt;/p&gt; &#xA;&lt;p&gt;Please note that a BIOS dump from a legitimately-owned PS2 console is required to use the emulator. For more information, visit &lt;a href=&#34;https://pcsx2.net/docs/setup/bios/&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing / Building&lt;/h2&gt; &#xA;&lt;p&gt;PCSX2 supports translation into other languages using &lt;a href=&#34;https://crowdin.com/project/pcsx2-emulator&#34;&gt;Crowdin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/PCSX2/pcsx2/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; or visit the &lt;a href=&#34;https://github.com/PCSX2/pcsx2/wiki&#34;&gt;GitHub Wiki&lt;/a&gt; for more info on how to contribute.&lt;/p&gt;</summary>
  </entry>
</feed>