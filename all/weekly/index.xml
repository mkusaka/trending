<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub All Languages Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:40:05Z</updated>
  <subtitle>Weekly Trending of All Languages in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>excalidraw/excalidraw</title>
    <updated>2023-01-01T01:40:05Z</updated>
    <id>tag:github.com,2023-01-01:/excalidraw/excalidraw</id>
    <link href="https://github.com/excalidraw/excalidraw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual whiteboard for sketching hand-drawn like diagrams&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; style=&#34;display:flex;flex-direction:column;&#34;&gt; &#xA; &lt;a href=&#34;https://excalidraw.com&#34;&gt; &lt;img width=&#34;540&#34; src=&#34;https://raw.githubusercontent.com/excalidraw/excalidraw/master/public/og-image-sm.png&#34; alt=&#34;Excalidraw logo: Sketch handrawn like diagrams.&#34;&gt; &lt;/a&gt; &#xA; &lt;h3&gt;Virtual whiteboard for sketching hand-drawn like diagrams.&lt;br&gt;Collaborative and end-to-end encrypted.&lt;/h3&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://twitter.com/Excalidraw&#34;&gt; &lt;img alt=&#34;Follow Excalidraw on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/excalidraw.svg?label=follow+excalidraw&amp;amp;style=social&amp;amp;logo=twitter&#34;&gt; &lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://crowdin.com/project/excalidraw&#34;&gt; &lt;img src=&#34;https://badges.crowdin.net/excalidraw/localized.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt;Ask questions or hang out on our &lt;a target=&#34;_blank&#34; href=&#34;https://discord.gg/UexuTaE&#34;&gt;discord.gg/UexuTaE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Try it now&lt;/h2&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://excalidraw.com&#34;&gt;excalidraw.com&lt;/a&gt; to start sketching.&lt;/p&gt; &#xA;&lt;p&gt;Read the latest news and updates on our &lt;a href=&#34;https://blog.excalidraw.com&#34;&gt;blog&lt;/a&gt;. A good start is to see all the updates of &lt;a href=&#34;https://blog.excalidraw.com/one-year-of-excalidraw/&#34;&gt;One Year of Excalidraw&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Excalidraw&lt;/h2&gt; &#xA;&lt;p&gt;If you like the project, you can become a sponsor at &lt;a href=&#34;https://opencollective.com/excalidraw&#34;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/0/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/1/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/2/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/3/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/4/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/5/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/6/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/7/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/8/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/9/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/excalidraw/tiers/sponsors/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/sponsors/10/avatar.svg?avatarHeight=120&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/excalidraw#category-CONTRIBUTE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/excalidraw/tiers/backers.svg?avatarHeight=32&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Last but not least, we&#39;re thankful to these companies for offering their services for free:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/excalidraw/excalidraw/master/.github/assets/vercel.svg?sanitize=true&#34; alt=&#34;Vercel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sentry.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/excalidraw/excalidraw/master/.github/assets/sentry.svg?sanitize=true&#34; alt=&#34;Sentry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/excalidraw/excalidraw/master/.github/assets/crowdin.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s integrating Excalidraw&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://googlecloudcheatsheet.withgoogle.com/architecture&#34;&gt;Google Cloud&lt;/a&gt; • &lt;a href=&#34;https://meta.com/&#34;&gt;Meta&lt;/a&gt; • &lt;a href=&#34;https://codesandbox.io/&#34;&gt;CodeSandbox&lt;/a&gt; • &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin&#34;&gt;Obsidian Excalidraw&lt;/a&gt; • &lt;a href=&#34;https://replit.com/&#34;&gt;Replit&lt;/a&gt; • &lt;a href=&#34;https://slite.com/&#34;&gt;Slite&lt;/a&gt; • &lt;a href=&#34;https://notion.so/&#34;&gt;Notion&lt;/a&gt; • &lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;HackerRank&lt;/a&gt; •&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Shortcuts&lt;/h3&gt; &#xA;&lt;p&gt;You can almost do anything with shortcuts. Click on the help icon on the bottom right corner to see them all.&lt;/p&gt; &#xA;&lt;h3&gt;Curved lines and arrows&lt;/h3&gt; &#xA;&lt;p&gt;Choose line or arrow and click click click instead of drag.&lt;/p&gt; &#xA;&lt;h3&gt;Charts&lt;/h3&gt; &#xA;&lt;p&gt;You can easily create charts by copy pasting data from Excel or just plain comma separated text.&lt;/p&gt; &#xA;&lt;h3&gt;Translating&lt;/h3&gt; &#xA;&lt;p&gt;To translate Excalidraw into other languages, please visit &lt;a href=&#34;https://crowdin.com/project/excalidraw&#34;&gt;our Crowdin page&lt;/a&gt;. To add a new language, &lt;a href=&#34;https://github.com/excalidraw/excalidraw/issues/new&#34;&gt;open an issue&lt;/a&gt; so we can get things set up on our end first.&lt;/p&gt; &#xA;&lt;p&gt;Translations will be available on the app if they exceed a certain threshold of completion (currently 85%).&lt;/p&gt; &#xA;&lt;h3&gt;Create a collaboration session manually&lt;/h3&gt; &#xA;&lt;p&gt;In order to create a session manually, you just need to generate a link of this form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://excalidraw.com/#room=[0-9a-f]{20},[a-zA-Z0-9_-]{22}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://excalidraw.com/#room=91bd46ae3aa84dff9d20,pfLqgEoY1c2ioq8LmGwsFA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first set of digits is the room. This is visible from the server that’s going to dispatch messages to everyone that knows this number.&lt;/p&gt; &#xA;&lt;p&gt;The second set of digits is the encryption key. The Excalidraw server doesn’t know about it. This is what all the participants use to encrypt/decrypt the messages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Please ensure that the encryption key is 22 characters long.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Shape libraries&lt;/h2&gt; &#xA;&lt;p&gt;Find a growing list of libraries containing assets for your drawings at &lt;a href=&#34;https://libraries.excalidraw.com&#34;&gt;libraries.excalidraw.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Embedding Excalidraw in your App?&lt;/h2&gt; &#xA;&lt;p&gt;Try out &lt;a href=&#34;https://www.npmjs.com/package/@excalidraw/excalidraw&#34;&gt;&lt;code&gt;@excalidraw/excalidraw&lt;/code&gt;&lt;/a&gt;. This package allows you to easily embed Excalidraw as a React component into your apps.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Code Sandbox&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://codesandbox.io/p/github/excalidraw/excalidraw&#34;&gt;https://codesandbox.io/p/github/excalidraw/excalidraw&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may need to sign in with GitHub and reload the page&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can start coding instantly, and even send PRs from there!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Local Installation&lt;/h3&gt; &#xA;&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;/p&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/getting-started/install&#34;&gt;Yarn&lt;/a&gt; (v1 or v2.4.2+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Clone the repo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/excalidraw/excalidraw.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install the dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Start the server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and start coding in your favorite code editor.&lt;/p&gt; &#xA;&lt;h4&gt;Collaboration&lt;/h4&gt; &#xA;&lt;p&gt;For collaboration, you will need to set up &lt;a href=&#34;https://github.com/excalidraw/excalidraw-room&#34;&gt;collab server&lt;/a&gt; in local.&lt;/p&gt; &#xA;&lt;h4&gt;Commands&lt;/h4&gt; &#xA;&lt;h5&gt;Install the dependencies&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run the project&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Reformat all files with Prettier&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run tests&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Update test snapshots&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test:update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Test for formatting with Prettier&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn test:code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;You can use docker-compose to work on Excalidraw locally if you don&#39;t want to setup a Node.js env.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Self-hosting&lt;/h3&gt; &#xA;&lt;p&gt;We publish a Docker image with the Excalidraw client at &lt;a href=&#34;https://hub.docker.com/r/excalidraw/excalidraw&#34;&gt;excalidraw/excalidraw&lt;/a&gt;. You can use it to self-host your own client under your own domain, on Kubernetes, AWS ECS, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t excalidraw/excalidraw .&#xA;docker run --rm -dit --name excalidraw -p 5000:80 excalidraw/excalidraw:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Docker image is free of analytics and other tracking libraries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;At the moment, self-hosting your own instance doesn&#39;t support sharing or collaboration features.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We are working towards providing a full-fledged solution for self-hosting your own Excalidraw.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please &lt;a href=&#34;https://github.com/excalidraw/excalidraw/issues/new&#34;&gt;open an issue&lt;/a&gt; first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;h2&gt;Notable used tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;Create React App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://roughjs.com&#34;&gt;Rough.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vercel.com&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And the main source of inspiration for starting the project is the awesome &lt;a href=&#34;https://zwibbler.com/demo/&#34;&gt;Zwibbler&lt;/a&gt; app.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>folke/lazy.nvim</title>
    <updated>2023-01-01T01:40:05Z</updated>
    <id>tag:github.com,2023-01-01:/folke/lazy.nvim</id>
    <link href="https://github.com/folke/lazy.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💤 A modern plugin manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;💤 lazy.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; is a modern plugin manager for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📦 Manage all your Neovim plugins with a powerful UI&lt;/li&gt; &#xA; &lt;li&gt;🚀 Fast startup times thanks to automatic caching and bytecode compilation of lua modules&lt;/li&gt; &#xA; &lt;li&gt;💾 Partial clones instead of shallow clones&lt;/li&gt; &#xA; &lt;li&gt;🔌 Automatic lazy-loading of lua modules and lazy-loading on events, commands, filetypes, and key mappings&lt;/li&gt; &#xA; &lt;li&gt;⏳ Automatically install missing plugins before starting up Neovim, allowing you to start using it right away&lt;/li&gt; &#xA; &lt;li&gt;💪 Async execution for improved performance&lt;/li&gt; &#xA; &lt;li&gt;🛠️ No need to manually compile plugins&lt;/li&gt; &#xA; &lt;li&gt;🧪 Correct sequencing of dependencies&lt;/li&gt; &#xA; &lt;li&gt;📁 Configurable in multiple files&lt;/li&gt; &#xA; &lt;li&gt;📚 Generates helptags of the headings in &lt;code&gt;README.md&lt;/code&gt; files for plugins that don&#39;t have vimdocs&lt;/li&gt; &#xA; &lt;li&gt;💻 Dev options and patterns for using local plugins&lt;/li&gt; &#xA; &lt;li&gt;📊 Profiling tools to optimize performance&lt;/li&gt; &#xA; &lt;li&gt;🔒 Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt; to keep track of installed plugins&lt;/li&gt; &#xA; &lt;li&gt;🔎 Automatically check for updates&lt;/li&gt; &#xA; &lt;li&gt;📋 Commit, branch, tag, version, and full &lt;a href=&#34;https://devhints.io/semver&#34;&gt;Semver&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;📈 Statusline component to see the number of pending updates&lt;/li&gt; &#xA; &lt;li&gt;🎨 Automatically lazy-loads colorschemes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.8.0&lt;/strong&gt; (needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Git &amp;gt;= &lt;strong&gt;2.19.0&lt;/strong&gt; (for partial clones support)&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add the following Lua code to your &lt;code&gt;init.lua&lt;/code&gt; to bootstrap &lt;strong&gt;lazy.nvim&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- bootstrap:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazypath = vim.fn.stdpath(&#34;data&#34;) .. &#34;/lazy/lazy.nvim&#34;&#xA;if not vim.loop.fs_stat(lazypath) then&#xA;  vim.fn.system({&#xA;    &#34;git&#34;,&#xA;    &#34;clone&#34;,&#xA;    &#34;--filter=blob:none&#34;,&#xA;    &#34;https://github.com/folke/lazy.nvim.git&#34;,&#xA;    &#34;--branch=stable&#34;, -- latest stable release&#xA;    lazypath,&#xA;  })&#xA;end&#xA;vim.opt.rtp:prepend(lazypath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- bootstrap:end --&gt; &#xA;&lt;p&gt;Next step is to add &lt;strong&gt;lazy.nvim&lt;/strong&gt; to the top of your &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(plugins, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt;: this should be a &lt;code&gt;table&lt;/code&gt; or a &lt;code&gt;string&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: a list with your &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-plugin-spec&#34;&gt;Plugin Spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;string&lt;/code&gt;: a Lua module name that contains your &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-plugin-spec&#34;&gt;Plugin Spec&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#-structuring-your-plugins&#34;&gt;Structuring Your Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;opts&lt;/strong&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#%EF%B8%8F-configuration&#34;&gt;Configuration&lt;/a&gt; &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- example using a list of specs with the default options&#xA;vim.g.mapleader = &#34; &#34; -- make sure to set `mapleader` before lazy so your mappings are correct&#xA;&#xA;require(&#34;lazy&#34;).setup({&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  { &#34;folke/neoconf.nvim&#34;, cmd = &#34;Neoconf&#34; },&#xA;  &#34;folke/neodev.nvim&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ℹ️ It is recommended to run &lt;code&gt;:checkhealth lazy&lt;/code&gt; after installation&lt;/p&gt; &#xA;&lt;h2&gt;🔌 Plugin Spec&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[1]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Short plugin url. Will be expanded using &lt;code&gt;config.git.url_format&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dir&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A directory pointing to a local plugin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;url&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom git url where the plugin is hosted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A custom name for the plugin used for the local plugin directory and as the display name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dev&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, a local plugin directory will be used instead. See &lt;code&gt;config.dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, the plugin will only be loaded when needed. Lazy-loaded plugins are automatically loaded when their Lua modules are &lt;code&gt;required&lt;/code&gt;, or when one of the lazy-loading handlers triggers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;enabled&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt; or &lt;code&gt;fun():boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;false&lt;/code&gt;, or if the &lt;code&gt;function&lt;/code&gt; returns false, then this plugin will not be included in the spec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cond&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt; or &lt;code&gt;fun():boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;false&lt;/code&gt;, or if the &lt;code&gt;function&lt;/code&gt; returns false, then this plugin will not be loaded. Useful to disable some plugins in vscode, or firenvim for example.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;dependencies&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LazySpec[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of plugin names or plugin specs that should be loaded when the plugin loads. Dependencies are always lazy-loaded unless specified otherwise. When specifying a name, make sure the plugin spec has been defined somewhere else.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;init&lt;/code&gt; functions are always executed during startup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;config&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;config&lt;/code&gt; is executed when the plugin loads. You can also set to &lt;code&gt;true&lt;/code&gt; or pass a &lt;code&gt;table&lt;/code&gt;, that will be passed to &lt;code&gt;require(&#34;plugin&#34;).setup(opts)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;build&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(LazyPlugin)&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt; or a list of build commands&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;build&lt;/code&gt; is executed when a plugin is installed or updated. If it&#39;s a string it will be ran as a shell command. When prefixed with &lt;code&gt;:&lt;/code&gt; it is a Neovim command. You can also specify a list to executed multiple build commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;branch&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Branch of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;tag&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tag of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;commit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commit of the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version to use from the repository. Full &lt;a href=&#34;https://devhints.io/semver&#34;&gt;Semver&lt;/a&gt; ranges are supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;pin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt;, this plugin will not be included in updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;event&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on event. Events can be specified as &lt;code&gt;BufEnter&lt;/code&gt; or with a pattern like &lt;code&gt;BufEnter *.lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;cmd&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ft&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on filetype&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;keys&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;LazyKeys[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy-load on key mapping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;module&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do not automatically load this Lua module when it&#39;s required somewhere&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;priority&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Only useful for &lt;strong&gt;start&lt;/strong&gt; plugins (&lt;code&gt;lazy=false&lt;/code&gt;) to force loading certain plugins first. Default priority is &lt;code&gt;50&lt;/code&gt;. It&#39;s recommended to set this to a high number for colorschemes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lazy Loading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; automagically lazy-loads Lua modules, so it is not needed to specify &lt;code&gt;module=...&lt;/code&gt; everywhere in your plugin specification. This mean that if you have a plugin &lt;code&gt;A&lt;/code&gt; that is lazy-loaded and a plugin &lt;code&gt;B&lt;/code&gt; that requires a module of plugin &lt;code&gt;A&lt;/code&gt;, then plugin &lt;code&gt;A&lt;/code&gt; will be loaded on demand as expected.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want this behavior for a certain plugin, you can specify that with &lt;code&gt;module=false&lt;/code&gt;. You can then manually load the plugin with &lt;code&gt;:Lazy load foobar.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can configure &lt;strong&gt;lazy.nvim&lt;/strong&gt; to lazy-load all plugins by default with &lt;code&gt;config.defaults.lazy = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can also lazy-load on &lt;strong&gt;events&lt;/strong&gt;, &lt;strong&gt;commands&lt;/strong&gt;, &lt;strong&gt;file types&lt;/strong&gt; and &lt;strong&gt;key mappings&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugins will be lazy-loaded when one of the following is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the plugin only exists as a dependency in your spec&lt;/li&gt; &#xA; &lt;li&gt;it has an &lt;code&gt;event&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;ft&lt;/code&gt; or &lt;code&gt;keys&lt;/code&gt; key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.defaults.lazy == true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;🌈 Colorschemes&lt;/h4&gt; &#xA;&lt;p&gt;Colorscheme plugins can be configured with &lt;code&gt;lazy=true&lt;/code&gt;. The plugin will automagically load when doing &lt;code&gt;colorscheme foobar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; since &lt;strong&gt;start&lt;/strong&gt; plugins can possibly change existing highlight groups, it&#39;s important to make sure that your main &lt;strong&gt;colorscheme&lt;/strong&gt; is loaded first. To ensure this you can use the &lt;code&gt;priority=1000&lt;/code&gt; field. &lt;strong&gt;&lt;em&gt;(see the examples)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;⌨️ Lazy Key Mappings&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;keys&lt;/code&gt; property can be a &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt; for simple normal-mode mappings, or it can be a &lt;code&gt;LazyKeys&lt;/code&gt; table with the following key-value pairs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt;: (&lt;code&gt;string&lt;/code&gt;) lhs &lt;strong&gt;&lt;em&gt;(required)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt;: (&lt;code&gt;string|fun()&lt;/code&gt;) rhs &lt;strong&gt;&lt;em&gt;(optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: (&lt;code&gt;string|string[]&lt;/code&gt;) mode &lt;strong&gt;&lt;em&gt;(optional, defaults to &lt;code&gt;&#34;n&#34;&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;any other option valid for &lt;code&gt;vim.keymap.set&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Key mappings will load the plugin the first time they get executed.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;[2]&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, then the real mapping has to be created by the &lt;code&gt;config()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example for neo-tree.nvim&#xA;{&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;ft&#34;, &#34;&amp;lt;cmd&amp;gt;Neotree toggle&amp;lt;cr&amp;gt;&#34;, desc = &#34;NeoTree&#34; },&#xA;    },&#xA;    config = function()&#xA;      require(&#34;neo-tree&#34;).setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;p&gt;If you want to install a specific revision of a plugin, you can use &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; property supports &lt;a href=&#34;https://semver.org/&#34;&gt;Semver&lt;/a&gt; ranges.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see some examples&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;*&lt;/code&gt;: latest stable version (this excludes pre-release versions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;1.2.x&lt;/code&gt;: any version that starts with &lt;code&gt;1.2&lt;/code&gt;, such as &lt;code&gt;1.2.0&lt;/code&gt;, &lt;code&gt;1.2.3&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;^1.2.3&lt;/code&gt;: any version that is compatible with &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc., but not &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;~1.2.3&lt;/code&gt;: any version that is compatible with &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.4&lt;/code&gt;, &lt;code&gt;1.2.5&lt;/code&gt;, but not &lt;code&gt;1.3.0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;gt;1.2.3&lt;/code&gt;: any version that is greater than &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;gt;=1.2.3&lt;/code&gt;: any version that is greater than or equal to &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.3&lt;/code&gt;, &lt;code&gt;1.3.0&lt;/code&gt;, &lt;code&gt;1.4.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;lt;1.2.3&lt;/code&gt;: any version that is less than &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.1.0&lt;/code&gt;, &lt;code&gt;1.0.5&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;lt;=1.2.3&lt;/code&gt;: any version that is less than or equal to &lt;code&gt;1.2.3&lt;/code&gt;, such as &lt;code&gt;1.2.3&lt;/code&gt;, &lt;code&gt;1.1.0&lt;/code&gt;, &lt;code&gt;1.0.5&lt;/code&gt;, etc&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;config.defaults.version = &#34;*&#34;&lt;/code&gt; to install the latest stable version of plugins that support Semver.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;!-- spec:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  -- the colorscheme should be available when starting Neovim&#xA;  {&#xA;    &#34;folke/tokyonight.nvim&#34;,&#xA;    lazy = false, -- make sure we load this during startup if it is your main colorscheme&#xA;    priority = 1000, -- make sure to load this before all the other start plugins&#xA;    config = function()&#xA;      -- load the colorscheme here&#xA;      vim.cmd([[colorscheme tokyonight]])&#xA;    end,&#xA;  },&#xA;&#xA;  -- I have a separate config.mappings file where I require which-key.&#xA;  -- With lazy the plugin will be automatically loaded when it is required somewhere&#xA;  { &#34;folke/which-key.nvim&#34;, lazy = true },&#xA;&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    -- lazy-load on filetype&#xA;    ft = &#34;norg&#34;,&#xA;    -- custom config that will be executed when loading the plugin&#xA;    config = function()&#xA;      require(&#34;neorg&#34;).setup()&#xA;    end,&#xA;  },&#xA;&#xA;  -- the above could also be written as:&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    config = true, -- run require(&#34;neorg&#34;).setup()&#xA;  },&#xA;&#xA;  -- or set a custom config:&#xA;  {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    config = { foo = &#34;bar&#34; }, -- run require(&#34;neorg&#34;).setup({foo = &#34;bar&#34;})&#xA;  },&#xA;&#xA;  {&#xA;    &#34;dstein64/vim-startuptime&#34;,&#xA;    -- lazy-load on a command&#xA;    cmd = &#34;StartupTime&#34;,&#xA;  },&#xA;&#xA;  {&#xA;    &#34;hrsh7th/nvim-cmp&#34;,&#xA;    -- load cmp on InsertEnter&#xA;    event = &#34;InsertEnter&#34;,&#xA;    -- these dependencies will only be loaded when cmp loads&#xA;    -- dependencies are always lazy-loaded unless specified otherwise&#xA;    dependencies = {&#xA;      &#34;hrsh7th/cmp-nvim-lsp&#34;,&#xA;      &#34;hrsh7th/cmp-buffer&#34;,&#xA;    },&#xA;    config = function()&#xA;      -- ...&#xA;    end,&#xA;  },&#xA;&#xA;  -- you can use the VeryLazy event for things that can&#xA;  -- load later and are not important for the initial UI&#xA;  { &#34;stevearc/dressing.nvim&#34;, event = &#34;VeryLazy&#34; },&#xA;&#xA;  {&#xA;    &#34;cshuaimin/ssr.nvim&#34;,&#xA;    -- init is always executed during startup, but doesn&#39;t load the plugin yet.&#xA;    init = function()&#xA;      vim.keymap.set({ &#34;n&#34;, &#34;x&#34; }, &#34;&amp;lt;leader&amp;gt;cR&#34;, function()&#xA;        -- this require will automatically load the plugin&#xA;        require(&#34;ssr&#34;).open()&#xA;      end, { desc = &#34;Structural Replace&#34; })&#xA;    end,&#xA;  },&#xA;&#xA;  {&#xA;    &#34;monaqa/dial.nvim&#34;,&#xA;    -- lazy-load on keys&#xA;    -- mode is `n` by default. For more advanced options, check the section on key mappings&#xA;    keys = { &#34;&amp;lt;C-a&amp;gt;&#34;, { &#34;&amp;lt;C-x&amp;gt;&#34;, mode = &#34;n&#34; } },&#xA;  },&#xA;&#xA;  -- local plugins need to be explicitly configured with dir&#xA;  { dir = &#34;~/projects/secret.nvim&#34; },&#xA;&#xA;  -- you can use a custom url to fetch a plugin&#xA;  { url = &#34;git@github.com:folke/noice.nvim.git&#34; },&#xA;&#xA;  -- local plugins can also be configure with the dev option.&#xA;  -- This will use {config.dev.path}/noice.nvim/ instead of fetching it from Github&#xA;  -- With the dev option, you can easily switch between the local and installed version of a plugin&#xA;  { &#34;folke/noice.nvim&#34;, dev = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- spec:end --&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;!-- config:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  root = vim.fn.stdpath(&#34;data&#34;) .. &#34;/lazy&#34;, -- directory where plugins will be installed&#xA;  defaults = {&#xA;    lazy = false, -- should plugins be lazy-loaded?&#xA;    version = nil,&#xA;    -- version = &#34;*&#34;, -- enable this to try installing the latest stable versions of plugins&#xA;  },&#xA;  lockfile = vim.fn.stdpath(&#34;config&#34;) .. &#34;/lazy-lock.json&#34;, -- lockfile generated after running update.&#xA;  concurrency = nil, ---@type number limit the maximum amount of concurrent tasks&#xA;  git = {&#xA;    -- defaults for the `Lazy log` command&#xA;    -- log = { &#34;-10&#34; }, -- show the last 10 commits&#xA;    log = { &#34;--since=3 days ago&#34; }, -- show commits from the last 3 days&#xA;    timeout = 120, -- kill processes that take more than 2 minutes&#xA;    url_format = &#34;https://github.com/%s.git&#34;,&#xA;  },&#xA;  dev = {&#xA;    -- directory where you store your local plugin projects&#xA;    path = &#34;~/projects&#34;,&#xA;    ---@type string[] plugins that match these patterns will use your local versions instead of being fetched from GitHub&#xA;    patterns = {}, -- For example {&#34;folke&#34;}&#xA;  },&#xA;  install = {&#xA;    -- install missing plugins on startup. This doesn&#39;t increase startup time.&#xA;    missing = true,&#xA;    -- try to load one of these colorschemes when starting an installation during startup&#xA;    colorscheme = { &#34;habamax&#34; },&#xA;  },&#xA;  ui = {&#xA;    -- a number &amp;lt;1 is a percentage., &amp;gt;1 is a fixed size&#xA;    size = { width = 0.8, height = 0.8 },&#xA;    -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;    border = &#34;none&#34;,&#xA;    icons = {&#xA;      loaded = &#34;●&#34;,&#xA;      not_loaded = &#34;○&#34;,&#xA;      cmd = &#34; &#34;,&#xA;      config = &#34;&#34;,&#xA;      event = &#34;&#34;,&#xA;      ft = &#34; &#34;,&#xA;      init = &#34; &#34;,&#xA;      keys = &#34; &#34;,&#xA;      plugin = &#34; &#34;,&#xA;      runtime = &#34; &#34;,&#xA;      source = &#34; &#34;,&#xA;      start = &#34;&#34;,&#xA;      task = &#34;✔ &#34;,&#xA;      lazy = &#34;鈴 &#34;,&#xA;      list = {&#xA;        &#34;●&#34;,&#xA;        &#34;➜&#34;,&#xA;        &#34;★&#34;,&#xA;        &#34;‒&#34;,&#xA;      },&#xA;    },&#xA;    -- leave nil, to automatically select a browser depending on your OS.&#xA;    -- If you want to use a specific browser, you can define it here&#xA;    browser = nil, ---@type string?&#xA;    throttle = 20, -- how frequently should the ui process render events&#xA;    custom_keys = {&#xA;      -- you can define custom key maps here.&#xA;      -- To disable one of the defaults, set it to false&#xA;&#xA;      -- open lazygit log&#xA;      [&#34;&amp;lt;localleader&amp;gt;l&#34;] = function(plugin)&#xA;        require(&#34;lazy.util&#34;).open_cmd({ &#34;lazygit&#34;, &#34;log&#34; }, {&#xA;          cwd = plugin.dir,&#xA;          terminal = true,&#xA;          close_on_exit = true,&#xA;          enter = true,&#xA;        })&#xA;      end,&#xA;&#xA;      -- open a terminal for the plugin dir&#xA;      [&#34;&amp;lt;localleader&amp;gt;t&#34;] = function(plugin)&#xA;        require(&#34;lazy.util&#34;).open_cmd({ vim.go.shell }, {&#xA;          cwd = plugin.dir,&#xA;          terminal = true,&#xA;          close_on_exit = true,&#xA;          enter = true,&#xA;        })&#xA;      end,&#xA;    },&#xA;  },&#xA;  diff = {&#xA;    -- diff command &amp;lt;d&amp;gt; can be one of:&#xA;    -- * browser: opens the github compare view. Note that this is always mapped to &amp;lt;K&amp;gt; as well,&#xA;    --   so you can have a different command for diff &amp;lt;d&amp;gt;&#xA;    -- * git: will run git diff and open a buffer with filetype git&#xA;    -- * terminal_git: will open a pseudo terminal with git diff&#xA;    -- * diffview.nvim: will open Diffview to show the diff&#xA;    cmd = &#34;git&#34;,&#xA;  },&#xA;  checker = {&#xA;    -- automatically check for plugin updates&#xA;    enabled = false,&#xA;    concurrency = nil, ---@type number? set to 1 to check for updates very slowly&#xA;    notify = true, -- get a notification when new updates are found&#xA;    frequency = 3600, -- check for updates every hour&#xA;  },&#xA;  change_detection = {&#xA;    -- automatically check for config file changes and reload the ui&#xA;    enabled = true,&#xA;    notify = true, -- get a notification when changes are found&#xA;  },&#xA;  performance = {&#xA;    cache = {&#xA;      enabled = true,&#xA;      path = vim.fn.stdpath(&#34;cache&#34;) .. &#34;/lazy/cache&#34;,&#xA;      -- Once one of the following events triggers, caching will be disabled.&#xA;      -- To cache all modules, set this to `{}`, but that is not recommended.&#xA;      -- The default is to disable on:&#xA;      --  * VimEnter: not useful to cache anything else beyond startup&#xA;      --  * BufReadPre: this will be triggered early when opening a file from the command line directly&#xA;      disable_events = { &#34;VimEnter&#34;, &#34;BufReadPre&#34; },&#xA;      ttl = 3600 * 24 * 5, -- keep unused modules for up to 5 days&#xA;    },&#xA;    reset_packpath = true, -- reset the package path to improve startup time&#xA;    rtp = {&#xA;      reset = true, -- reset the runtime path to $VIMRUNTIME and your config directory&#xA;      ---@type string[]&#xA;      paths = {}, -- add any custom paths here that you want to indluce in the rtp&#xA;      ---@type string[] list any plugins you want to disable here&#xA;      disabled_plugins = {&#xA;        -- &#34;gzip&#34;,&#xA;        -- &#34;matchit&#34;,&#xA;        -- &#34;matchparen&#34;,&#xA;        -- &#34;netrwPlugin&#34;,&#xA;        -- &#34;tarPlugin&#34;,&#xA;        -- &#34;tohtml&#34;,&#xA;        -- &#34;tutor&#34;,&#xA;        -- &#34;zipPlugin&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;  -- lazy can generate helptags from the headings in markdown readme files,&#xA;  -- so :help works even for plugins that don&#39;t have vim docs.&#xA;  -- when the readme opens with :help it will be correctly displayed as markdown&#xA;  readme = {&#xA;    root = vim.fn.stdpath(&#34;state&#34;) .. &#34;/lazy/readme&#34;,&#xA;    files = { &#34;README.md&#34; },&#xA;    -- only generate markdown helptags for plugins that dont have docs&#xA;    skip_if_doc_exists = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- config:end --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;If you don&#39;t want to use a Nerd Font, you can replace the icons with Unicode symbols.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ui = {&#xA;    icons = {&#xA;      cmd = &#34;⌘&#34;,&#xA;      config = &#34;🛠&#34;,&#xA;      event = &#34;📅&#34;,&#xA;      ft = &#34;📂&#34;,&#xA;      init = &#34;⚙&#34;,&#xA;      keys = &#34;🗝&#34;,&#xA;      plugin = &#34;🔌&#34;,&#xA;      runtime = &#34;💻&#34;,&#xA;      source = &#34;📄&#34;,&#xA;      start = &#34;🚀&#34;,&#xA;      task = &#34;📌&#34;,&#xA;      lazy = &#34;💤 &#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Plugins are managed with the &lt;code&gt;:Lazy&lt;/code&gt; command. Open the help with &lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt; to see all the key mappings.&lt;/p&gt; &#xA;&lt;p&gt;You can press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on a plugin to show its details. Most properties can be hovered with &lt;code&gt;&amp;lt;K&amp;gt;&lt;/code&gt; to open links, help files, readmes, git commits and git issues.&lt;/p&gt; &#xA;&lt;p&gt;Lazy can automatically check for updates in the background. This feature can be enabled with &lt;code&gt;config.checker.enabled = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any operation can be started from the UI, with a sub command or an API function:&lt;/p&gt; &#xA;&lt;!-- commands:start --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Lua&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy check [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).check(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check for updates and show the log (git fetch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy clean [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).clean(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean plugins that are no longer needed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy clear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).clear()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear finished tasks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).debug()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show debug information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy health&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).health()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run &lt;code&gt;:checkhealth lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).help()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle this help page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy home&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).home()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go back to plugin list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy install [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).install(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install missing plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy load {plugins}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).load(opts)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Load a plugin that has not been loaded yet. Similar to &lt;code&gt;:packadd&lt;/code&gt;. Like &lt;code&gt;:Lazy load foo.nvim&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy log [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).log(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show recent updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy profile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).profile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show detailed profiling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy restore [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).restore(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Updates all plugins to the state in the lockfile. For a single plugin: restore it to the state in the lockfile or to a given commit under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy sync [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).sync(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run install, clean and update&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Lazy update [plugins]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;require(&#34;lazy&#34;).update(opts?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Update plugins. This will also update the lockfile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- commands:end --&gt; &#xA;&lt;p&gt;Any command can have a &lt;strong&gt;bang&lt;/strong&gt; to make the command wait till it finished. For example, if you want to sync lazy from the cmdline, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ nvim --headless &#34;+Lazy! sync&#34; +qa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;opts&lt;/code&gt; is a table with the following key-values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wait&lt;/strong&gt;: when true, then the call will wait till the operation completed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;show&lt;/strong&gt;: when false, the UI will not be shown&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt;: a list of plugin names to run the operation on&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;concurrency&lt;/strong&gt;: limit the &lt;code&gt;number&lt;/code&gt; of concurrently running tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Stats API (&lt;code&gt;require(&#34;lazy&#34;).stats()&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;!-- stats:start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- startuptime in milliseconds till UIEnter&#xA;  startuptime = 0,&#xA;  -- when true, startuptime is the accurate cputime for the Neovim process. (Linux &amp;amp; Macos)&#xA;  -- this is more accurate than `nvim --startuptime`, and as such will be slightly higher&#xA;  -- when false, startuptime is calculated based on a delta with a timestamp when lazy started.&#xA;  startuptime_cputime = false,&#xA;  count = 0, -- total number of plugins&#xA;  loaded = 0, -- number of loaded plugins&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- stats:end --&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; provides a statusline component that you can use to show the number of pending updates. Make sure to enable &lt;code&gt;config.checker.enabled = true&lt;/code&gt; to make this work.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of configuring &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = {&#xA;      {&#xA;        require(&#34;lazy.status&#34;).updates,&#xA;        cond = require(&#34;lazy.status&#34;).has_updates,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;📆 User Events&lt;/h3&gt; &#xA;&lt;p&gt;The following user events will be triggered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyDone&lt;/strong&gt;: when lazy has finished starting up and loaded your config&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazySync&lt;/strong&gt;: after running sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyInstall&lt;/strong&gt;: after an install&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyUpdate&lt;/strong&gt;: after an update&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyClean&lt;/strong&gt;: after a clean&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyCheck&lt;/strong&gt;: after checking for updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyLog&lt;/strong&gt;: after running log&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyReload&lt;/strong&gt;: triggered by change detection after reloading plugin specs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VeryLazy&lt;/strong&gt;: triggered after &lt;code&gt;LazyDone&lt;/code&gt; and processing &lt;code&gt;VimEnter&lt;/code&gt; auto commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LazyVimStarted&lt;/strong&gt;: triggered after &lt;code&gt;UIEnter&lt;/code&gt; when &lt;code&gt;require(&#34;lazy&#34;).stats().startuptime&lt;/code&gt; has been calculated. Useful to update the startuptime on your dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔒 Lockfile &lt;code&gt;lazy-lock.json&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;After every &lt;strong&gt;update&lt;/strong&gt;, the local lockfile is updated with the installed revisions. It is recommended to have this file under version control.&lt;/p&gt; &#xA;&lt;p&gt;If you use your Neovim config on multiple machines, using the lockfile, you can ensure that the same version of every plugin is installed.&lt;/p&gt; &#xA;&lt;p&gt;If you are on another machine, you can do &lt;code&gt;:Lazy restore&lt;/code&gt;, to update all your plugins to the version from the lockfile.&lt;/p&gt; &#xA;&lt;h2&gt;⚡ Performance&lt;/h2&gt; &#xA;&lt;p&gt;Great care has been taken to make the startup code (&lt;code&gt;lazy.core&lt;/code&gt;) as efficient as possible. During startup, all Lua files used before &lt;code&gt;VimEnter&lt;/code&gt; or &lt;code&gt;BufReadPre&lt;/code&gt; are byte-compiled and cached, similar to what &lt;a href=&#34;https://github.com/lewis6991/impatient.nvim&#34;&gt;impatient.nvim&lt;/a&gt; does.&lt;/p&gt; &#xA;&lt;p&gt;My config for example loads in about &lt;code&gt;11ms&lt;/code&gt; with &lt;code&gt;93&lt;/code&gt; plugins. I do a lot of lazy-loading though :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; comes with an advanced profiler &lt;code&gt;:Lazy profile&lt;/code&gt; to help you improve performance. The profiling view shows you why and how long it took to load your plugins.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301766-5c400561-83c3-4811-9667-1ec4bb3c43b8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🪲 Debug&lt;/h2&gt; &#xA;&lt;p&gt;See an overview of active lazy-loading handlers and what&#39;s in the module cache&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/208301790-7eedbfa5-d202-4e70-852e-de68aa47233b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;▶️ Startup Sequence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;/strong&gt; does &lt;strong&gt;NOT&lt;/strong&gt; use Neovim packages and even disables plugin loading completely (&lt;code&gt;vim.go.loadplugins = false&lt;/code&gt;). It takes over the complete startup sequence for more flexibility and better performance.&lt;/p&gt; &#xA;&lt;p&gt;In practice this means that step 10 of &lt;a href=&#34;https://neovim.io/doc/user/starting.html#initialization&#34;&gt;Neovim Initialization&lt;/a&gt; is done by Lazy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;all the plugins&#39; &lt;code&gt;init()&lt;/code&gt; functions are executed&lt;/li&gt; &#xA; &lt;li&gt;all plugins with &lt;code&gt;lazy=false&lt;/code&gt; are loaded. This includes sourcing &lt;code&gt;/plugin&lt;/code&gt; and &lt;code&gt;/ftdetect&lt;/code&gt; files. (&lt;code&gt;/after&lt;/code&gt; will not be sourced yet)&lt;/li&gt; &#xA; &lt;li&gt;all files from &lt;code&gt;/plugin&lt;/code&gt; and &lt;code&gt;/ftdetect&lt;/code&gt; directories in you rtp are sourced (excluding &lt;code&gt;/after&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;all &lt;code&gt;/after/plugin&lt;/code&gt; files are sourced (this inludes &lt;code&gt;/after&lt;/code&gt; from plugins)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Files from runtime directories are always sourced in alphabetical order.&lt;/p&gt; &#xA;&lt;h2&gt;📂 Structuring Your Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Some users may want to split their plugin specs in multiple files. Instead of passing a spec table to &lt;code&gt;setup()&lt;/code&gt;, you can use a Lua module. The specs from the &lt;strong&gt;module&lt;/strong&gt; and any top-level &lt;strong&gt;sub-modules&lt;/strong&gt; will be merged together in the final spec, so it is not needed to add &lt;code&gt;require&lt;/code&gt; calls in your main plugin file to the other files.&lt;/p&gt; &#xA;&lt;p&gt;The benefits of using this approach:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple to &lt;strong&gt;add&lt;/strong&gt; new plugin specs. Just create a new file in your plugins module.&lt;/li&gt; &#xA; &lt;li&gt;allows for &lt;strong&gt;caching&lt;/strong&gt; of all your plugin specs. This becomes important if you have a lot of smaller plugin specs.&lt;/li&gt; &#xA; &lt;li&gt;spec changes will automatically be &lt;strong&gt;reloaded&lt;/strong&gt; when they&#39;re updated, so the &lt;code&gt;:Lazy&lt;/code&gt; UI is always up to date&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lazy&#34;).setup(&#34;plugins&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/nvim/lua/plugins.lua&lt;/code&gt; or &lt;code&gt;~/.config/nvim/lua/plugins/init.lua&lt;/code&gt; &lt;strong&gt;&lt;em&gt;(this file is optional)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;folke/neodev.nvim&#34;,&#xA;    &#34;folke/which-key.nvim&#34;,&#xA;    { &#34;folke/neoconf.nvim&#34;, cmd = &#34;Neoconf&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;any lua file in &lt;code&gt;~/.config/nvim/lua/plugins/*.lua&lt;/code&gt; will be automatically merged in the main plugin spec&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a real-life example, you can check my personal dots:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/dot/raw/master/config/nvim/init.lua&#34;&gt;init.lua&lt;/a&gt; where I require &lt;code&gt;config.lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/dot/raw/master/config/nvim/lua/config/lazy.lua&#34;&gt;config.lazy&lt;/a&gt; where I bootstrap and setup &lt;strong&gt;lazy.nvim&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/dot/raw/master/config/nvim/lua/config/plugins/init.lua&#34;&gt;config.plugins&lt;/a&gt; is my main plugin config module&lt;/li&gt; &#xA; &lt;li&gt;Any submodule of &lt;a href=&#34;https://github.com/folke/dot/tree/master/config/nvim/lua/config/plugins&#34;&gt;config.plugins (submodules)&lt;/a&gt; will be automatically loaded as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Migration Guide&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;setup&lt;/code&gt; ➡️ &lt;code&gt;init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requires&lt;/code&gt; ➡️ &lt;code&gt;dependencies&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;as&lt;/code&gt; ➡️ &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt&lt;/code&gt; ➡️ &lt;code&gt;lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; ➡️ &lt;code&gt;build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lock&lt;/code&gt; ➡️ &lt;code&gt;pin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable=true&lt;/code&gt; ➡️ &lt;code&gt;enabled = false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&#39;*&#39;&lt;/code&gt; ➡️ &lt;code&gt;version=&#34;*&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after&lt;/code&gt; ℹ️ &lt;strong&gt;&lt;em&gt;not needed&lt;/em&gt;&lt;/strong&gt; for most use-cases. Use &lt;code&gt;dependencies&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wants&lt;/code&gt; ℹ️ &lt;strong&gt;&lt;em&gt;not needed&lt;/em&gt;&lt;/strong&gt; for most use-cases. Use &lt;code&gt;dependencies&lt;/code&gt; otherwise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; don&#39;t support string type, use &lt;code&gt;fun(LazyPlugin)&lt;/code&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;module&lt;/code&gt; is auto-loaded. No need to specify&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keys&lt;/code&gt; spec is &lt;a href=&#34;https://raw.githubusercontent.com/folke/lazy.nvim/main/#%EF%B8%8F-lazy-key-mappings&#34;&gt;different&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtp&lt;/code&gt; can be accomplished with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = function(plugin)&#xA;    vim.opt.rtp:append(plugin.dir .. &#34;/custom-rtp&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With packer &lt;code&gt;wants&lt;/code&gt;, &lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; can be used to manage dependencies. With lazy, this isn&#39;t needed for most of the lua dependencies. They can be installed just like normal plugins (even with &lt;code&gt;lazy=true&lt;/code&gt;) and will be loaded when other plugins need them. The &lt;code&gt;dependencies&lt;/code&gt; key can be used to group those required plugins with the one that requires them. The plugins which are added as &lt;code&gt;dependencies&lt;/code&gt; will always be lazy-loaded and loaded when the plugin is loaded.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;as&lt;/code&gt; ➡️ &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt&lt;/code&gt; ➡️ &lt;code&gt;lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; ➡️ &lt;code&gt;build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❌ Uninstalling&lt;/h2&gt; &#xA;&lt;p&gt;To uninstall &lt;strong&gt;lazy.nvim&lt;/strong&gt;, you need to remove the following files and directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &lt;code&gt;~/.local/share/nvim/lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;: &lt;code&gt;~/.local/state/nvim/lazy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lockfile&lt;/strong&gt;: &lt;code&gt;~/.config/nvim/lazy-lock.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;paths can differ if you changed &lt;code&gt;XDG&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🌈 Highlight Groups&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see all highlight groups&lt;/summary&gt; &#xA; &lt;!-- colors:start --&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Default Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyButton&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;CursorLine&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyButtonActive&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Visual&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyComment&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Comment&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommit&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@variable.builtin&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;commit ref&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommitIssue&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Number&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommitScope&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;conventional commit scope&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyCommitType&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Title&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;conventional commit type&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyDir&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@text.reference&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;directory&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyH1&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;IncSearch&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;home button&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyH2&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Bold&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;titles&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyNoCond&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;DiagnosticWarn&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;unloaded icon for a plugin where &lt;code&gt;cond()&lt;/code&gt; was false&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyNormal&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;NormalFloat&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyProgressDone&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Constant&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;progress bar done&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyProgressTodo&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;LineNr&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;progress bar todo&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyProp&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Conceal&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;property&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonCmd&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Operator&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonEvent&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Constant&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonFt&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Character&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonKeys&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Statement&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonPlugin&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Special&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonRuntime&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@macro&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonSource&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;Character&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyReasonStart&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@field&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazySpecial&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@punctuation.special&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyTaskError&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;ErrorMsg&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;task errors&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyTaskOutput&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;MsgArea&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;task output&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyUrl&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@text.reference&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;url&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;LazyValue&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;em&gt;@string&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;value of a property&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;!-- colors:end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;📦 Other Neovim Plugin Managers in Lua&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ii14/neopm&#34;&gt;neopm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chiyadev/dep&#34;&gt;dep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/notomo/optpack.nvim&#34;&gt;optpack.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rktjmp/pact.nvim&#34;&gt;pact.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sundowndev/phoneinfoga</title>
    <updated>2023-01-01T01:40:05Z</updated>
    <id>tag:github.com,2023-01-01:/sundowndev/phoneinfoga</id>
    <link href="https://github.com/sundowndev/phoneinfoga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Information gathering framework for phone numbers&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/docs/images/banner.png&#34; width=&#34;500&#34; alt=&#34;project logo&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/sundowndev/phoneinfoga/actions&#34;&gt; &lt;img src=&#34;https://github.com/sundowndev/phoneinfoga/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://goreportcard.com/report/github.com/sundowndev/phoneinfoga/v2&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/sundowndev/phoneinfoga/v2&#34; alt=&#34;go report&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://codeclimate.com/github/sundowndev/phoneinfoga/maintainability&#34;&gt; &lt;img src=&#34;https://api.codeclimate.com/v1/badges/3259feb1c68df1cd4f71/maintainability&#34; alt=&#34;code climate badge&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://coveralls.io/github/sundowndev/phoneinfoga&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/sundowndev/phoneinfoga/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/sundowndev/phoneinfoga/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/SundownDEV/phoneinfoga.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://hub.docker.com/r/sundowndev/phoneinfoga&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/sundowndev/phoneinfoga.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Information gathering framework for phone numbers&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sundowndev.github.io/phoneinfoga/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml&#34;&gt;API documentation&lt;/a&gt; • &lt;a href=&#34;https://demo.phoneinfoga.crvx.fr/&#34;&gt;Demo instance&lt;/a&gt; • &lt;a href=&#34;https://medium.com/@SundownDEV/phone-number-scanning-osint-recon-tool-6ad8f0cac27b&#34;&gt;Related blog post&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;PhoneInfoga is one of the most advanced tools to scan international phone numbers. It allows you to first gather basic information such as country, area, carrier and line type, then use various techniques to try to find the VoIP provider or identify the owner. It works with a collection of scanners that must be configured in order for the tool to be effective. PhoneInfoga doesn&#39;t automate everything, it&#39;s just there to help investigating on phone numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/docs/images/screenshot.png&#34; alt=&#34;web client screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;p&gt;This project is stable and production-ready.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;About demo instance&lt;/strong&gt;: This is a test service. Kittens will die if you abuse it.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check if phone number exists&lt;/li&gt; &#xA; &lt;li&gt;Gather basic information such as country, line type and carrier&lt;/li&gt; &#xA; &lt;li&gt;OSINT footprinting using external APIs, phone books &amp;amp; search engines&lt;/li&gt; &#xA; &lt;li&gt;Check for reputation reports, social media, disposable numbers and more&lt;/li&gt; &#xA; &lt;li&gt;Use the graphical user interface to run scans from the browser&lt;/li&gt; &#xA; &lt;li&gt;Programmatic usage with the &lt;a href=&#34;https://petstore.swagger.io/?url=https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/web/docs/swagger.yaml&#34;&gt;REST API&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/sundowndev/phoneinfoga/v2&#34;&gt;Go modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Anti-features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not claim to provide relevant or verified data, it&#39;s just a tool !&lt;/li&gt; &#xA; &lt;li&gt;Does not allow to &#34;track&#34; a phone or its owner in real time&lt;/li&gt; &#xA; &lt;li&gt;Does not allow to get the precise phone location&lt;/li&gt; &#xA; &lt;li&gt;Does not allow to hack a phone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fsundowndev%2FPhoneInfoga.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tool is licensed under the GNU General Public License v3.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flaticon.com/free-icon/fingerprint-search-symbol-of-secret-service-investigation_48838&#34;&gt;Icon&lt;/a&gt; made by &lt;a href=&#34;https://www.freepik.com/&#34; title=&#34;Freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34; title=&#34;Flaticon&#34;&gt;flaticon.com&lt;/a&gt; is licensed by &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34; target=&#34;_blank&#34;&gt;CC 3.0 BY&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/sundowndev/static/raw/main/sponsors.svg?v=c68eba9&#34; width=&#34;100%&#34; heigh=&#34;auto&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>