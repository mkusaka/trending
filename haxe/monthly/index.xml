<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:20:14Z</updated>
  <subtitle>Monthly Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jasononeil/hxrandom</title>
    <updated>2023-12-01T02:20:14Z</updated>
    <id>tag:github.com,2023-12-01:/jasononeil/hxrandom</id>
    <link href="https://github.com/jasononeil/hxrandom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extremely simple helper library to easy picking random numbers in Haxe.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Random (Haxe Library)&lt;/h1&gt; &#xA;&lt;p&gt;This &lt;em&gt;extremely&lt;/em&gt; simple library provides simple helpers to generate random numbers in Haxe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this just uses Haxe&#39;s build in Math.random() method, it does no seeding or custom Random Number Generation. If you want something more random than &lt;code&gt;Math.random&lt;/code&gt;, this is not the library you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haxelib install random&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And then in your project&#39;s hxml build file, add&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-lib random&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;import Random;&#xA;&#xA;class Main&#xA;{&#xA;&#x9;static function main()&#xA;&#x9;{&#xA;&#x9;&#x9;Random.int(1,3); // 1, 2, or 3&#xA;&#x9;&#x9;Random.float(0,5); // Any float between 0 and 5, inclusive&#xA;&#x9;&#x9;Random.bool(); // True or false&#xA;&#x9;&#x9;Random.string(5); // A 5 character string using letters A-Z, a-z and 0-9&#xA;&#x9;&#x9;Random.string(10, &#34;aeiou&#34;); // A 10 character string using only vowels&#xA;&#x9;&#x9;Random.date( Date.now, nextWeek ); // Generate a random date / time between now and next week&#xA;&#x9;&#x9;Random.fromArray([&#39;dog&#39;,&#39;cat&#39;,&#39;mouse&#39;]); // &#34;dog&#34;, &#34;cat&#34; or &#34;mouse&#34;&#xA;&#x9;&#x9;Random.enumConstructor( Color ); // The constructors of Color, eg: Red, Blue, Green&#xA;&#x9;&#x9;Random.shuffle([1,2,3,4,5]); // Return the same array, but with the items shuffled&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods it provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.bool()&lt;/code&gt;&lt;br&gt; Will return a random &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; boolean value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.int(from, to)&lt;/code&gt;&lt;br&gt; Will generate a random integer between &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;, inclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.float(from, to)&lt;/code&gt;&lt;br&gt; Will generate a random float between &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;, inclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.string(length:Int, ?charactersToUse:String)&lt;/code&gt;&lt;br&gt; Will return a random string using of a certain length, using characters from &#34;charactersToUse&#34; or else A-Za-z0-9&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.date(earliest:Date, latest:Date)&lt;/code&gt;&lt;br&gt; Will generate a random Date object (date &amp;amp; time) between &lt;code&gt;earliest&lt;/code&gt; and &lt;code&gt;latest&lt;/code&gt;, inclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.fromArray(arr)&lt;/code&gt;&lt;br&gt; Will return a random item from the set array, or Null if the array is empty / null.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.enumConstructor(enum)&lt;/code&gt;&lt;br&gt; Will return a random constructor from an enum, or Null if the enum has no constructors. Constructors that require parameters will be ignored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.shuffle(arr)&lt;/code&gt;&lt;br&gt; Will shuffle the items in the current array. This shuffles the current array, it does not return a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These use Haxe&#39;s Math.random(), so don&#39;t expect any fancy algorithms. It&#39;ll probably just use the platform default. It also uses &#39;inline&#39; on each of it&#39;s methods, to try and keep the performance hit to a minimum. If you&#39;re really worried, write them by hand - this is just a simple helper library.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;shuffle()&lt;/code&gt; method uses a variation of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher Yates Shuffle&lt;/a&gt; algorithm.&lt;/p&gt; &#xA;&lt;h2&gt;Future&lt;/h2&gt; &#xA;&lt;p&gt;If there&#39;s interest, I could add some things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Random.day() - returns a weekday (English)&lt;/li&gt; &#xA; &lt;li&gt;Random.month() - returns a month (English)&lt;/li&gt; &#xA; &lt;li&gt;Random.word() - returns a random word from Lorem Ipsum.&lt;/li&gt; &#xA; &lt;li&gt;Random.sentence() - returns a random sentence from Lorem Ipsum.&lt;/li&gt; &#xA; &lt;li&gt;Random.paragraph() - returns a random paragraph of Lorem Ipsum.&lt;/li&gt; &#xA; &lt;li&gt;Random.color() - returns a random colour.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see, these would all be pretty useless except perhaps in a rapid prototyping context. But if there&#39;s interest, I can do it.&lt;/p&gt; &#xA;&lt;h2&gt;Making Changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit src/Random.hx&lt;/li&gt; &#xA; &lt;li&gt;Add unit tests to test/RandomTest.hx&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;haxelib run munit t&lt;/code&gt; - run unit tests, check all are passing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;haxelib run mlib v&lt;/code&gt; - increment version number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;haxelib run mlib submit&lt;/code&gt; - submit to Haxelib&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>