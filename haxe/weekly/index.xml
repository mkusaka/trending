<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T02:11:57Z</updated>
  <subtitle>Weekly Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MerphiG/Impostor-V4-Fanmade</title>
    <updated>2022-07-03T02:11:57Z</updated>
    <id>tag:github.com,2022-07-03:/MerphiG/Impostor-V4-Fanmade</id>
    <link href="https://github.com/MerphiG/Impostor-V4-Fanmade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Just best Impostor v4 Fanmade.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>armory3d/armorpaint</title>
    <updated>2022-07-03T02:11:57Z</updated>
    <id>tag:github.com,2022-07-03:/armory3d/armorpaint</id>
    <link href="https://github.com/armory3d/armorpaint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;3D PBR Texture Painting Software&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://armorpaint.org/img/git.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;armorpaint&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://armorpaint.org&#34;&gt;ArmorPaint&lt;/a&gt; is a software for 3D PBR texture painting - check out the &lt;a href=&#34;https://armorpaint.org/manual&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note 1: This repository is aimed at developers and may not be stable. Distributed binaries are &lt;a href=&#34;https://armorpaint.org/download&#34;&gt;paid&lt;/a&gt; to help with the project funding. All of the development is happening here in order to make it accessible to everyone. Thank you for support!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note 2: If you are compiling git version of ArmorPaint, then you need to have a compiler (&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; - Windows, &lt;a href=&#34;https://clang.llvm.org/get_started.html&#34;&gt;clang&lt;/a&gt; + &lt;a href=&#34;https://github.com/armory3d/armorpaint/wiki/Linux-Dependencies&#34;&gt;deps&lt;/a&gt; - Linux, &lt;a href=&#34;https://developer.apple.com/xcode/resources/&#34;&gt;Xcode&lt;/a&gt; - macOS / iOS, &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; - Android) and &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt; installed.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/armory3d/armorpaint&#xA;cd armorpaint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unpack `armorcore\v8\libraries\win32\release\v8_monolith.7z` using 7-Zip - Extract Here (exceeds 100MB)&#xA;armorcore\Kinc\make --from armorcore -g direct3d11&#xA;# Open generated Visual Studio project at `build\ArmorPaint.sln`&#xA;# Build and run for x64 &amp;amp; release&#xA;# Copy build\x64\Release\ArmorPaint.exe to build\krom to run ArmorPaint.exe directly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;armorcore/Kinc/make --from armorcore -g opengl --compiler clang --compile&#xA;cd armorcore/Deployment&#xA;strip ArmorPaint&#xA;./ArmorPaint ../../build/krom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git apply armorcore/patch/metal_depth.diff --directory=armorcore/Kinc&#xA;armorcore/Kinc/make --from armorcore -g metal&#xA;cp -a build/krom/ armorcore/Deployment&#xA;# Open generated Xcode project at `build/ArmorPaint.xcodeproj`&#xA;# Build and run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git apply armorcore/patch/android_document_picker.diff --directory=armorcore/Kinc&#xA;armorcore/Kinc/make android --from armorcore -g opengl&#xA;cp -r build/krom/* build/ArmorPaint/app/src/main/assets/&#xA;# Manual tweaking is required for now:&#xA;# https://github.com/armory3d/armorcore/blob/master/kincfile.js#L68&#xA;# Open generated Android Studio project at `build/ArmorPaint`&#xA;# Build for device&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/armory3d/armorpaint_plugins armorcore/Libraries/plugins&#xA;git apply armorcore/patch/ios_document_picker.diff --directory=armorcore/Kinc&#xA;git apply armorcore/patch/metal_depth.diff --directory=armorcore/Kinc&#xA;armorcore/Kinc/make ios --from armorcore -g metal&#xA;cp -a build/krom/ armorcore/Deployment&#xA;# Open generated Xcode project `build/ArmorPaint.xcodeproj`&#xA;# Set iOS Deployment Target to 11.0&#xA;# Build for device in release mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows DXR&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unpack `armorcore\v8\libraries\win32\release\v8_monolith.7z` using 7-Zip - Extract Here (exceeds 100MB)&#xA;git apply armorcore/patch/d3d12_raytrace.diff --directory=armorcore/Kinc&#xA;armorcore\Kinc\make --from armorcore -g direct3d12&#xA;# Open generated Visual Studio project at `build\ArmorPaint.sln`&#xA;# Build and run for x64 &amp;amp; release&#xA;# Copy build\x64\Release\ArmorPaint.exe to build\krom to run ArmorPaint.exe directly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux VKRT&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/armory3d/glsl_to_spirv armorcore/Libraries/glsl_to_spirv&#xA;git apply armorcore/patch/vulkan_raytrace.diff --directory=armorcore/Kinc&#xA;armorcore/Kinc/make --from armorcore -g vulkan --compiler clang --compile&#xA;cd armorcore/Deployment&#xA;strip ArmorPaint&#xA;./ArmorPaint ../../build/krom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows VR&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unpack `armorcore\v8\libraries\win32\release\v8_monolith.7z` using 7-Zip - Extract Here (exceeds 100MB)&#xA;armorcore\Kinc\make --from armorcore -g direct3d11 --vr oculus&#xA;# Open generated Visual Studio project at `build\ArmorPaint.sln`&#xA;# Build and run for x64 &amp;amp; release&#xA;# Copy build\x64\Release\ArmorPaint.exe to build\krom to run ArmorPaint.exe directly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Updating cloned repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull origin main&#xA;git submodule update --init --recursive&#xA;# Delete `armorpaint/build` directory if present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generating a locale file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install typing_extensions -t Assets/locale/tools&#xA;python ./Assets/locale/tools/extract_locales.py &amp;lt;locale code&amp;gt;&#xA;# Generates an `Assets/locale/&amp;lt;locale code&amp;gt;.json` file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Release builds&lt;/strong&gt; &lt;em&gt;Optional, used for best performance&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Compile krom.js using the closure compiler&#xA;https://developers.google.com/closure/compiler&#xA;# Generate a v8 snapshot file&#xA;export ARM_SNAPSHOT=1&#xA;armorcore/Kinc/make --from armorcore -g api&#xA;./ArmorPaint . --snapshot&#xA;# Generates a `krom.bin` file from `krom.js` file&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>KadeDev/Hex-The-Weekend-Update</title>
    <updated>2022-07-03T02:11:57Z</updated>
    <id>tag:github.com,2022-07-03:/KadeDev/Hex-The-Weekend-Update</id>
    <link href="https://github.com/KadeDev/Hex-The-Weekend-Update" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Banging hex man&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HEX MOD&lt;/h1&gt; &#xA;&lt;h2&gt;SHIT&lt;/h2&gt; &#xA;&lt;h3&gt;I GET A CRASH RELATING TO CAMERAS???&lt;/h3&gt; &#xA;&lt;p&gt;thats cuz IM FUCKIN LAZY and I modified a source file on FLIXEL itself&lt;/p&gt; &#xA;&lt;p&gt;Please replace #HaxeToolKitFolder#/haxe/lib/flixel/#flixelver#/flixel/graphics/tile/FlxDrawQuadsItem.hx&lt;/p&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;package flixel.graphics.tile;&#xA;&#xA;#if FLX_DRAW_QUADS&#xA;import flixel.FlxCamera;&#xA;import flixel.graphics.frames.FlxFrame;&#xA;import flixel.graphics.tile.FlxDrawBaseItem.FlxDrawItemType;&#xA;import flixel.system.FlxAssets.FlxShader;&#xA;import flixel.math.FlxMatrix;&#xA;import openfl.geom.ColorTransform;&#xA;import openfl.display.ShaderParameter;&#xA;import openfl.Vector;&#xA;&#xA;class FlxDrawQuadsItem extends FlxDrawBaseItem&amp;lt;FlxDrawQuadsItem&amp;gt; {&#xA;&#x9;static inline var VERTICES_PER_QUAD = #if (openfl &amp;gt;= &#34;8.5.0&#34;) 4 #else 6 #end;&#xA;&#xA;&#x9;public var shader:FlxShader;&#xA;&#xA;&#x9;var rects:Vector&amp;lt;Float&amp;gt;;&#xA;&#x9;var transforms:Vector&amp;lt;Float&amp;gt;;&#xA;&#x9;var alphas:Array&amp;lt;Float&amp;gt;;&#xA;&#x9;var colorMultipliers:Array&amp;lt;Float&amp;gt;;&#xA;&#x9;var colorOffsets:Array&amp;lt;Float&amp;gt;;&#xA;&#xA;&#x9;public function new() {&#xA;&#x9;&#x9;super();&#xA;&#x9;&#x9;type = FlxDrawItemType.TILES;&#xA;&#x9;&#x9;rects = new Vector&amp;lt;Float&amp;gt;();&#xA;&#x9;&#x9;transforms = new Vector&amp;lt;Float&amp;gt;();&#xA;&#x9;&#x9;alphas = [];&#xA;&#x9;}&#xA;&#xA;&#x9;override public function reset():Void {&#xA;&#x9;&#x9;super.reset();&#xA;&#x9;&#x9;rects.length = 0;&#xA;&#x9;&#x9;transforms.length = 0;&#xA;&#x9;&#x9;alphas.splice(0, alphas.length);&#xA;&#x9;&#x9;if (colorMultipliers != null)&#xA;&#x9;&#x9;&#x9;colorMultipliers.splice(0, colorMultipliers.length);&#xA;&#x9;&#x9;if (colorOffsets != null)&#xA;&#x9;&#x9;&#x9;colorOffsets.splice(0, colorOffsets.length);&#xA;&#x9;}&#xA;&#xA;&#x9;override public function dispose():Void {&#xA;&#x9;&#x9;super.dispose();&#xA;&#x9;&#x9;rects = null;&#xA;&#x9;&#x9;transforms = null;&#xA;&#x9;&#x9;alphas = null;&#xA;&#x9;&#x9;colorMultipliers = null;&#xA;&#x9;&#x9;colorOffsets = null;&#xA;&#x9;}&#xA;&#xA;&#x9;override public function addQuad(frame:FlxFrame, matrix:FlxMatrix, ?transform:ColorTransform):Void {&#xA;&#x9;&#x9;var rect = frame.frame;&#xA;&#x9;&#x9;rects.push(rect.x);&#xA;&#x9;&#x9;rects.push(rect.y);&#xA;&#x9;&#x9;rects.push(rect.width);&#xA;&#x9;&#x9;rects.push(rect.height);&#xA;&#xA;&#x9;&#x9;transforms.push(matrix.a);&#xA;&#x9;&#x9;transforms.push(matrix.b);&#xA;&#x9;&#x9;transforms.push(matrix.c);&#xA;&#x9;&#x9;transforms.push(matrix.d);&#xA;&#x9;&#x9;transforms.push(matrix.tx);&#xA;&#x9;&#x9;transforms.push(matrix.ty);&#xA;&#xA;&#x9;&#x9;for (i in 0...VERTICES_PER_QUAD)&#xA;&#x9;&#x9;&#x9;alphas.push(transform != null ? transform.alphaMultiplier : 1.0);&#xA;&#xA;&#x9;&#x9;if (colored || hasColorOffsets) {&#xA;&#x9;&#x9;&#x9;if (colorMultipliers == null)&#xA;&#x9;&#x9;&#x9;&#x9;colorMultipliers = [];&#xA;&#xA;&#x9;&#x9;&#x9;if (colorOffsets == null)&#xA;&#x9;&#x9;&#x9;&#x9;colorOffsets = [];&#xA;&#xA;&#x9;&#x9;&#x9;for (i in 0...VERTICES_PER_QUAD) {&#xA;&#x9;&#x9;&#x9;&#x9;if (transform != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(transform.redMultiplier);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(transform.greenMultiplier);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(transform.blueMultiplier);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(transform.redOffset);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(transform.greenOffset);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(transform.blueOffset);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(transform.alphaOffset);&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(1);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;colorOffsets.push(0);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;colorMultipliers.push(1);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;#if !flash&#xA;&#x9;override public function render(camera:FlxCamera):Void {&#xA;&#x9;&#x9;if (rects.length == 0)&#xA;&#x9;&#x9;&#x9;return;&#xA;&#xA;&#x9;&#x9;var shader = shader != null ? shader : graphics.shader;&#xA;&#x9;&#x9;if (shader == null)&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;var bitmap = graphics.bitmap;&#xA;&#x9;&#x9;shader.bitmap.input = bitmap;&#xA;&#x9;&#x9;shader.bitmap.filter = (camera.antialiasing || antialiasing) ? LINEAR : NEAREST;&#xA;&#x9;&#x9;shader.alpha.value = alphas;&#xA;&#xA;&#x9;&#x9;if (colored || hasColorOffsets) {&#xA;&#x9;&#x9;&#x9;shader.colorMultiplier.value = colorMultipliers;&#xA;&#x9;&#x9;&#x9;shader.colorOffset.value = colorOffsets;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;setParameterValue(shader.hasTransform, true);&#xA;&#x9;&#x9;setParameterValue(shader.hasColorTransform, colored || hasColorOffsets);&#xA;&#xA;&#x9;&#x9;#if (openfl &amp;gt; &#34;8.7.0&#34;)&#xA;&#x9;&#x9;camera.canvas.graphics.overrideBlendMode(blend);&#xA;&#x9;&#x9;#end&#xA;&#x9;&#x9;camera.canvas.graphics.beginShaderFill(shader);&#xA;&#x9;&#x9;camera.canvas.graphics.drawQuads(rects, null, transforms);&#xA;&#x9;&#x9;super.render(camera);&#xA;&#x9;}&#xA;&#xA;&#x9;inline function setParameterValue(parameter:ShaderParameter&amp;lt;Bool&amp;gt;, value:Bool):Void {&#xA;&#x9;&#x9;if (parameter.value == null)&#xA;&#x9;&#x9;&#x9;parameter.value = [];&#xA;&#x9;&#x9;parameter.value[0] = value;&#xA;&#x9;}&#xA;&#x9;#end&#xA;}&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>