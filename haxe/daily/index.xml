<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-07T01:34:50Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheRetroSpecter/VsRetro-Psych-Public</title>
    <updated>2022-10-07T01:34:50Z</updated>
    <id>tag:github.com,2022-10-07:/TheRetroSpecter/VsRetro-Psych-Public</id>
    <link href="https://github.com/TheRetroSpecter/VsRetro-Psych-Public" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Friday Night Funkin&#39; - Psych Engine&lt;/h1&gt; &#xA;&lt;p&gt;Engine originally used on &lt;a href=&#34;https://gamebanana.com/mods/301107&#34;&gt;Mind Games Mod&lt;/a&gt;, intended to be a fix for the vanilla version&#39;s many issues while keeping the casual play aspect of it. Also aiming to be an easier alternative to newbie coders.&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://haxe.org/download/&#34;&gt;the most up-to-date version of Haxe&lt;/a&gt;, seriously, stop using 4.1.5, it misses some stuff.&lt;/p&gt; &#xA;&lt;p&gt;Follow a Friday Night Funkin&#39; source code compilation tutorial, after this you will need to install LuaJIT.&lt;/p&gt; &#xA;&lt;p&gt;To install LuaJIT do this: &lt;code&gt;haxelib git linc_luajit https://github.com/AndreiRudenko/linc_luajit &lt;/code&gt; on a Command prompt/PowerShell&lt;/p&gt; &#xA;&lt;p&gt;...Or if you don&#39;t want your mod to be able to run .lua scripts, delete the &#34;LUA_ALLOWED&#34; line on Project.xml&lt;/p&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shadow Mario - Coding&lt;/li&gt; &#xA; &lt;li&gt;RiverOaken - Arts and Animations&lt;/li&gt; &#xA; &lt;li&gt;bbpanzu - Assistant Coding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shubs - New Input System&lt;/li&gt; &#xA; &lt;li&gt;SqirraRNG - Chart Editor&#39;s Sound Waveform base code&lt;/li&gt; &#xA; &lt;li&gt;iFlicky - Delay/Combo Menu Song Composer + Dialogue Sounds&lt;/li&gt; &#xA; &lt;li&gt;PolybiusProxy - .MP4 Loader Extension&lt;/li&gt; &#xA; &lt;li&gt;Keoiki - Note Splash Animations&lt;/li&gt; &#xA; &lt;li&gt;Smokey - Spritemap Texture Atlas support&lt;/li&gt; &#xA; &lt;li&gt;Cary - OG Resolution code&lt;/li&gt; &#xA; &lt;li&gt;Nebula_Zorua - VCR Shader code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;Attractive animated dialogue boxes:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/127706669-71cd5cdb-5c2a-4ecc-871b-98a276ae8070.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mod Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Probably one of the main points of this engine, you can code in .lua files outside of the source code, making your own weeks without even messing with the source!&lt;/li&gt; &#xA; &lt;li&gt;Comes with a Mod Organizing/Disabling Menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Atleast one change to every week:&lt;/h2&gt; &#xA;&lt;h3&gt;Week 1:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New Dad Left sing sprite&lt;/li&gt; &#xA; &lt;li&gt;Unused stage lights are now used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 2:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both BF and Skid &amp;amp; Pump does &#34;Hey!&#34; animations&lt;/li&gt; &#xA; &lt;li&gt;Thunders does a quick light flash and zooms the camera in slightly&lt;/li&gt; &#xA; &lt;li&gt;Added a quick transition/cutscene to Monster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 3:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BF does &#34;Hey!&#34; during Philly Nice&lt;/li&gt; &#xA; &lt;li&gt;Blammed has a cool new colors flash during that sick part of the song&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 4:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better hair physics for Mom/Boyfriend (Maybe even slightly better than Week 7&#39;s &lt;span&gt;ðŸ‘€&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Henchmen die during all songs. Yeah :(&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 5:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bottom Boppers and GF does &#34;Hey!&#34; animations during Cocoa and Eggnog&lt;/li&gt; &#xA; &lt;li&gt;On Winter Horrorland, GF bops her head slower in some parts of the song.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 6:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Thorns, the HUD is hidden during the cutscene&lt;/li&gt; &#xA; &lt;li&gt;Also there&#39;s the Background girls being spooky during the &#34;Hey!&#34; parts of the Instrumental&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cool new Chart Editor changes and countless bug fixes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ShadowMario/FNF-PsychEngine/raw/main/docs/img/chart.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can now chart &#34;Event&#34; notes, which are bookmarks that trigger specific actions that usually were hardcoded on the vanilla version of the game.&lt;/li&gt; &#xA; &lt;li&gt;Your song&#39;s BPM can now have decimal values&lt;/li&gt; &#xA; &lt;li&gt;You can manually adjust a Note&#39;s strum time if you&#39;re really going for milisecond precision&lt;/li&gt; &#xA; &lt;li&gt;You can change a note&#39;s type on the Editor, it comes with two example types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alt Animation: Forces an alt animation to play, useful for songs like Ugh/Stress&lt;/li&gt; &#xA;   &lt;li&gt;Hey: Forces a &#34;Hey&#34; animation instead of the base Sing animation, if Boyfriend hits this note, Girlfriend will do a &#34;Hey!&#34; too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multiple editors to assist you in making your own Mod&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/144629914-1fe55999-2f18-4cc1-bc70-afe616d74ae5.png&#34; alt=&#34;Screenshot_3&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working both for Source code modding and Downloaded builds!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Story mode menu rework:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UB2EKpV.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added a different BG to every song (less Tutorial)&lt;/li&gt; &#xA; &lt;li&gt;All menu characters are now in individual spritesheets, makes modding it easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits menu&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/144632635-f263fb22-b879-4d6b-96d6-865e9562b907.png&#34; alt=&#34;Screenshot_1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add a head icon, name, description and a Redirect link for when the player presses Enter while the item is currently selected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Awards/Achievements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The engine comes with 16 example achievements that you can mess with and learn how it works (Check Achievements.hx and search for &#34;checkForAchievement&#34; on PlayState.hx)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options menu:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can change Note colors, Delay and Combo Offset, Controls and Preferences there.&lt;/li&gt; &#xA; &lt;li&gt;On Preferences you can toggle Downscroll, Middlescroll, Anti-Aliasing, Framerate, Low Quality, Note Splashes, Flashing Lights, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other gameplay features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the enemy hits a note, their strum note also glows.&lt;/li&gt; &#xA; &lt;li&gt;Lag doesn&#39;t impact the camera movement and player icon scaling anymore.&lt;/li&gt; &#xA; &lt;li&gt;Some stuff based on Week 7&#39;s changes has been put in (Background colors on Freeplay, Note splashes)&lt;/li&gt; &#xA; &lt;li&gt;You can reset your Score on Freeplay/Story Mode by pressing Reset button.&lt;/li&gt; &#xA; &lt;li&gt;You can listen to a song or adjust Scroll Speed/Damage taken/etc. on Freeplay by pressing Space.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jasononeil/hxrandom</title>
    <updated>2022-10-07T01:34:50Z</updated>
    <id>tag:github.com,2022-10-07:/jasononeil/hxrandom</id>
    <link href="https://github.com/jasononeil/hxrandom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extremely simple helper library to easy picking random numbers in Haxe.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Random (Haxe Library)&lt;/h1&gt; &#xA;&lt;p&gt;This &lt;em&gt;extremely&lt;/em&gt; simple library provides simple helpers to generate random numbers in Haxe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this just uses Haxe&#39;s build in Math.random() method, it does no seeding or custom Random Number Generation. If you want something more random than &lt;code&gt;Math.random&lt;/code&gt;, this is not the library you&#39;re looking for.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haxelib install random&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And then in your project&#39;s hxml build file, add&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-lib random&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;import Random;&#xA;&#xA;class Main&#xA;{&#xA;&#x9;static function main()&#xA;&#x9;{&#xA;&#x9;&#x9;Random.int(1,3); // 1, 2, or 3&#xA;&#x9;&#x9;Random.float(0,5); // Any float between 0 and 5, inclusive&#xA;&#x9;&#x9;Random.bool(); // True or false&#xA;&#x9;&#x9;Random.string(5); // A 5 character string using letters A-Z, a-z and 0-9&#xA;&#x9;&#x9;Random.string(10, &#34;aeiou&#34;); // A 10 character string using only vowels&#xA;&#x9;&#x9;Random.date( Date.now, nextWeek ); // Generate a random date / time between now and next week&#xA;&#x9;&#x9;Random.fromArray([&#39;dog&#39;,&#39;cat&#39;,&#39;mouse&#39;]); // &#34;dog&#34;, &#34;cat&#34; or &#34;mouse&#34;&#xA;&#x9;&#x9;Random.enumConstructor( Color ); // The constructors of Color, eg: Red, Blue, Green&#xA;&#x9;&#x9;Random.shuffle([1,2,3,4,5]); // Return the same array, but with the items shuffled&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods it provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.bool()&lt;/code&gt;&lt;br&gt; Will return a random &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; boolean value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.int(from, to)&lt;/code&gt;&lt;br&gt; Will generate a random integer between &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;, inclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.float(from, to)&lt;/code&gt;&lt;br&gt; Will generate a random float between &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;, inclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.string(length:Int, ?charactersToUse:String)&lt;/code&gt;&lt;br&gt; Will return a random string using of a certain length, using characters from &#34;charactersToUse&#34; or else A-Za-z0-9&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.date(earliest:Date, latest:Date)&lt;/code&gt;&lt;br&gt; Will generate a random Date object (date &amp;amp; time) between &lt;code&gt;earliest&lt;/code&gt; and &lt;code&gt;latest&lt;/code&gt;, inclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.fromArray(arr)&lt;/code&gt;&lt;br&gt; Will return a random item from the set array, or Null if the array is empty / null.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.enumConstructor(enum)&lt;/code&gt;&lt;br&gt; Will return a random constructor from an enum, or Null if the enum has no constructors. Constructors that require parameters will be ignored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Random.shuffle(arr)&lt;/code&gt;&lt;br&gt; Will shuffle the items in the current array. This shuffles the current array, it does not return a new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These use Haxe&#39;s Math.random(), so don&#39;t expect any fancy algorithms. It&#39;ll probably just use the platform default. It also uses &#39;inline&#39; on each of it&#39;s methods, to try and keep the performance hit to a minimum. If you&#39;re really worried, write them by hand - this is just a simple helper library.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;shuffle()&lt;/code&gt; method uses a variation of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher Yates Shuffle&lt;/a&gt; algorithm.&lt;/p&gt; &#xA;&lt;h2&gt;Future&lt;/h2&gt; &#xA;&lt;p&gt;If there&#39;s interest, I could add some things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Random.day() - returns a weekday (English)&lt;/li&gt; &#xA; &lt;li&gt;Random.month() - returns a month (English)&lt;/li&gt; &#xA; &lt;li&gt;Random.word() - returns a random word from Lorem Ipsum.&lt;/li&gt; &#xA; &lt;li&gt;Random.sentence() - returns a random sentence from Lorem Ipsum.&lt;/li&gt; &#xA; &lt;li&gt;Random.paragraph() - returns a random paragraph of Lorem Ipsum.&lt;/li&gt; &#xA; &lt;li&gt;Random.color() - returns a random colour.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see, these would all be pretty useless except perhaps in a rapid prototyping context. But if there&#39;s interest, I can do it.&lt;/p&gt; &#xA;&lt;h2&gt;Making Changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit src/Random.hx&lt;/li&gt; &#xA; &lt;li&gt;Add unit tests to test/RandomTest.hx&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;haxelib run munit t&lt;/code&gt; - run unit tests, check all are passing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;haxelib run mlib v&lt;/code&gt; - increment version number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;haxelib run mlib submit&lt;/code&gt; - submit to Haxelib&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>