<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-10T01:30:28Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SomeRanDev/modifaxe</title>
    <updated>2024-02-10T01:30:28Z</updated>
    <id>tag:github.com,2024-02-10:/SomeRanDev/modifaxe</id>
    <link href="https://github.com/SomeRanDev/modifaxe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Haxe library for modifying hardcoded values after compiling.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/SomeRanDev/modifaxe/raw/main/.github/logo.png&#34; alt=&#34;WOOO been a while since I made a logo.&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SomeRanDev/modifaxe/actions&#34;&gt;&lt;img src=&#34;https://github.com/SomeRanDev/modifaxe/actions/workflows/Test_DevEnv.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/channels/162395145352904705/1202862068961910794/&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/162395145352904705/widget.png?style=shield&#34; alt=&#34;Modifaxe Thread&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A tool for modifying hardcoded values in your post-build Haxe application.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change a value -&amp;gt; recompile -&amp;gt; test -&amp;gt; repeat. Every programmer has experienced this loop before; it&#39;s very tempting to &#34;guess and check&#34; when it comes to visually designing something with code. This library seeks to aliviate the tedious &#34;recompile&#34; step by allowing hardcoded values from your code to be modified AFTER compiling.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SomeRanDev/modifaxe/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How to install this library into your project.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SomeRanDev/modifaxe/main/#metadata-configuration&#34;&gt;Metadata Configuration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How to configure the metadata.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SomeRanDev/modifaxe/main/#defines&#34;&gt;Define Configuration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of defines to set the library preferences.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SomeRanDev/modifaxe/main/#modhx-format&#34;&gt;.modhx Format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An explanation of the &lt;code&gt;.modhx&lt;/code&gt; format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SomeRanDev/modifaxe/main/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How Modifaxe transforms your project to function.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First install Modifaxe using one of the commands below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hxml&#34;&gt;# install haxelib release (may not exist atm!!)&#xA;haxelib install modifaxe&#xA;&#xA;# install nightly (recommended!)&#xA;haxelib git modifaxe https://github.com/SomeRanDev/modifaxe.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next add the library to your .hxml or compile command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-lib modifaxe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;@:modifaxe&lt;/code&gt; metadata to a class or function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;@:modifaxe&#xA;function getWindowSize() {&#xA;&#x9;return 800;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;Modifaxe.load()&lt;/code&gt; at the start of your program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function main() {&#xA;&#x9;Modifaxe.load();&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile your Haxe project to a &lt;code&gt;sys&lt;/code&gt; target with file-system access.&lt;/p&gt; &#xA;&lt;p&gt;Modify the value(s) in the generated &lt;code&gt;values.modhx&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;[Main.getWindowSize]&#xA;i.return: 800&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Metadata Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;@:mod&lt;/code&gt; metadata can be placed on expressions to specify their name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;@:modifaxe&#xA;function getWindowSize() {&#xA;&#x9;return @:mod(&#34;my_num&#34;) 800;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;[Main.getWindowSize]&#xA;i.my_num: 800&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To only use constants that have the &lt;code&gt;@:mod&lt;/code&gt; metadata, the &lt;code&gt;ModOnly&lt;/code&gt; argument can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;@:modifaxe(ModOnly)&#xA;function getWindowSize() {&#xA;&#x9;return @:mod(&#34;my_num&#34;) 800 + 100;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;@:mod&lt;/code&gt; metadata must also be used to allow for enum configuration. Use the &lt;code&gt;Enum&lt;/code&gt; argument to set the path to the enum type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;enum Color {&#xA;&#x9;Red;&#xA;&#x9;Green;&#xA;&#x9;Blue;&#xA;}&#xA;&#xA;@:modifaxe&#xA;function colorWindow() {&#xA;&#x9;window.setColor(@:mod(Enum=Main.Color) Red);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;[Main.colorWindow]&#xA;i.Argument0: Red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;File&lt;/code&gt; argument can be used to specify the filename the entries under a metadata will be placed in. Multiple data files can be generated/loaded from this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;// Generates data1.modhx file containing one entry&#xA;@:modifaxe(File=&#34;data1&#34;)&#xA;function getWindowWidth() { return 800; }&#xA;&#xA;// Generates data2.modhx file that also contains this one entry&#xA;@:modifaxe(File=&#34;data2&#34;)&#xA;function getWindowHeight() { return 400; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Format&lt;/code&gt; argument can be used to set the format of the file entries are placed into. By default, Modifaxe only has one format supported, &lt;code&gt;modhx&lt;/code&gt;. However, it is possible for other libraries to add their own formats. Check out the &lt;a href=&#34;https://github.com/SomeRanDev/modifaxe.JSON&#34;&gt;Modifaxe/JSON&lt;/a&gt; library to see an example of this!&lt;/p&gt; &#xA;&lt;p&gt;If Modifaxe/JSON is installed, a &lt;code&gt;.json&lt;/code&gt; format can be used like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;// Generates and loads the data in a modifiable .json file&#xA;@:modifaxe(Format=Json)&#xA;function getWindowWidth() {&#xA;&#x9;return 800;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Defines&lt;/h2&gt; &#xA;&lt;p&gt;To specify a specific path this library works on (instead of using a global &lt;code&gt;@:build&lt;/code&gt; macro which could be slower), the &lt;code&gt;-D modifaxe_path_filter&lt;/code&gt; define can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hxml&#34;&gt;-D modifaxe_path_filter=my_package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set the default filename for the generated data file, the &lt;code&gt;-D modifaxe_default_file_path&lt;/code&gt; define can be used (the extension is added automatically):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hxml&#34;&gt;-D modifaxe_default_file_path=my_data_file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can view a list of all the &lt;code&gt;-D&lt;/code&gt; defines you can use to configure the library &lt;a href=&#34;https://github.com/SomeRanDev/modifaxe/raw/main/src/modifaxe/config/Define.hx&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;.modhx Format&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;.modhx&lt;/code&gt; is a text-based file format designed specifically for this project. It is designed to be both human-readable and easily parsable.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;Content after a pound sign (#) is a comment and is ignored during parsing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This is a comment.&#xA;&#x9;# This is also a comment.&#xA;Something # Comment after content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Sections and Values&lt;/h3&gt; &#xA;&lt;p&gt;Entries are separated into sections. A section is a unique identifier followed by a colon.&lt;/p&gt; &#xA;&lt;p&gt;A list of values should follow with the &lt;code&gt;&amp;lt;type&amp;gt;.&amp;lt;name&amp;gt;: &amp;lt;value&amp;gt;&lt;/code&gt; format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;[My.Unique.ID]&#xA;b.trueOrFalse=true&#xA;i.myNum=123&#xA;f.floatNum=6.9&#xA;s.string=&#34;Insert valid Haxe string here.&#xA;They can be multiline.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note the order of value entries MATTERS. The Haxe code for parsing the custom-made &lt;code&gt;.modhx&lt;/code&gt; is hardcoded to expect the values in their generated order. The section and value identifiers exist to help humans locate values to modify.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Value Declaration Options&lt;/h3&gt; &#xA;&lt;p&gt;There are four types supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; is a boolean.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;i&lt;/code&gt; is an integer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f&lt;/code&gt; is a float.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; is a string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; must be a valid Haxe variable name.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; must be a valid constant Haxe expression of the specified type.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;p&gt;Each class that uses &lt;code&gt;@:modifaxe&lt;/code&gt; is given a static function named &lt;code&gt;_modifaxe_loadData&lt;/code&gt; and a static var for each constant that can be modified.&lt;/p&gt; &#xA;&lt;p&gt;At the start of any function with a changeable constant, &lt;code&gt;_modifaxe_loadData&lt;/code&gt; checks its internal counter to see if it matches with the &lt;code&gt;Modifaxe&lt;/code&gt; counter. If it doesn&#39;t, it runs the procedrually-generated loading code for all the static variables. Otherwise, nothing happens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;// Before&#xA;@:modifaxe&#xA;class MyClass {&#xA;&#x9;public function doSomething() {&#xA;&#x9;&#x9;trace(123);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;// After&#xA;class MyClass {&#xA;&#x9;static var MyClass_doSomething_Argument0 = 123;&#xA;&#xA;&#x9;static function _modifaxe_loadData() {&#xA;&#x9;&#x9;static var count = 0;&#xA;&#x9;&#x9;if(count != Modifaxe.refreshCount) count = Modifaxe.refreshCount;&#xA;&#x9;&#x9;else return;&#xA;&#xA;&#x9;&#x9;final parser = modifaxe.runtime.ModParser.fromEntryCount(&#34;data.modhx&#34;, 0);&#xA;&#x9;&#x9;MyClass_doSomething_Argument0 = parser.nextInt(123);&#xA;&#x9;}&#xA;&#xA;&#x9;public function doSomething() {&#xA;&#x9;&#x9;_modifaxe_loadData();&#xA;&#x9;&#x9;trace(MyClass_doSomething_Argument0);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tjrhodes/ckeditor-externs</title>
    <updated>2024-02-10T01:30:28Z</updated>
    <id>tag:github.com,2024-02-10:/tjrhodes/ckeditor-externs</id>
    <link href="https://github.com/tjrhodes/ckeditor-externs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HaxeJS externs for CKEDITOR&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ckeditor-externs&lt;/h1&gt; &#xA;&lt;p&gt;HaxeJS externs for CKEDITOR&lt;/p&gt; &#xA;&lt;p&gt;These externs are NOT complete but they already work well enough to be usefull.&lt;/p&gt; &#xA;&lt;p&gt;Over time I want to improve the typing etc. (still afew too dynamics for my liking).&lt;/p&gt; &#xA;&lt;p&gt;Here are a couple of quick examples of usage.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Replace a textarea with the default editor...&lt;/p&gt; &lt;pre&gt;&lt;code&gt;         var contentBox = Lib.document.getElementById(&#34;contentBox&#34;);&#xA;         CKEDITOR.replace(contentBox);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a custom inline editor in a div called &#34;contentWrapper&#34; which has contenteditable=&#34;true&#34; as an attribute.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;         var mainConfig = cast( { } );&#xA;         mainConfig.format_tags = &#34;p;h4;h5&#34;;&#xA;         mainConfig.allowedContent =     {&#xA;                                                         &#34;p h4 h5 ol ul li em strong&#34;: {},&#xA;                                                         &#34;a&#34;: {&#xA;                                                                         attributes:&#34;!href&#34;&#xA;                                                         },&#xA;                                                         &#34;p&#34;: {&#xA;                                                                         classes:&#34;italic-quote&#34;&#xA;                                                         },&#xA;                                                         &#34;div&#34;: {&#xA;                                                                         classes:&#34;*&#34;,&#xA;                                                                         attributes:&#34;*&#34;&#xA;                                                         }&#xA;                                         };&#xA;         mainConfig.removeButtons = &#34;Styles&#34;;&#xA;         var mainEditorDOM = new Element(Lib.document.getElementById(&#34;contentWrapper&#34;));&#xA;         CKEDITOR.inlineEditor(mainEditorDOM, mainConfig);&#xA;         CKEDITOR.instances.contentWrapper.on(Editor.FOCUS, editorFocussed);&#xA;         CKEDITOR.instances.contentWrapper.on(Editor.BLUR, editorBlurred);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>ninjamuffin99/canabalt-hf</title>
    <updated>2024-02-10T01:30:28Z</updated>
    <id>tag:github.com,2024-02-10:/ninjamuffin99/canabalt-hf</id>
    <link href="https://github.com/ninjamuffin99/canabalt-hf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A HaxeFlixel port of classic flash game, canabalt!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Canabalt&lt;/h1&gt; &#xA;&lt;h3&gt;A HaxeFlixel port of CANABALT, by Adam &#39;Atomic&#39; Saltsman, ported by Cameron &#39;ninjamuffin99&#39; Taylor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.newgrounds.com/portal/view/510303&#34;&gt;&lt;img src=&#34;https://github.com/ninjamuffin99/canabalt-hf/assets/22229331/70e3b71a-9625-4c51-a335-3d4781aa7de3&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a port of classic flash game CANABALT, which was ported into HaxeFlixel (the descendant of Flixel, which was used in the original game). Now supports various cross platform goodness (HTML5, Windows, Mac, Linux), the Newgrounds API (&lt;a href=&#34;https://newgrounds.io&#34;&gt;via Newgrounds.io&lt;/a&gt;) for leaderboards, and touch + gamepad support!&lt;/p&gt; &#xA;&lt;p&gt;You can play the game on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.newgrounds.com/portal/view/510303&#34;&gt;Newgrounds.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://finji.itch.io/canabalt-classic&#34;&gt;Itch.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://canabalt.com/&#34;&gt;Canabalt.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Make sure when you clone, you clone the submodules to get the assets repo: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/ninjamuffin99/canabalt-hf.git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you accidentally cloned without the &lt;code&gt;assets&lt;/code&gt; submodule (aka didn&#39;t follow the step above), you can run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to get the assets in a foolproof way.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Haxe from &lt;a href=&#34;https://haxe.org&#34;&gt;Haxe.org&lt;/a&gt;, using 4.3.3 as of writing! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommend using &lt;a href=&#34;https://github.com/l0go/haxeget&#34;&gt;&lt;code&gt;haxeget&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;hmm&lt;/code&gt; (run &lt;code&gt;haxelib --global install hmm&lt;/code&gt; and then &lt;code&gt;haxelib --global run hmm setup&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install haxelibs by running &lt;code&gt;hmm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile via &lt;code&gt;lime test PLATFORM&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;html5&lt;/code&gt; and probably even &lt;code&gt;hl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How close to the original source is this 🤔&lt;/h2&gt; &#xA;&lt;p&gt;The haxe code is as close to the original source code as it could get, with minor tweaks for modern &#34;flixel&#34;, crossplatform controls support, and small bug fixes. If you look through the code, what you will look at is very close to what Adam Saltsman wrote for the original Actionscript 3 release of Canabalt, &lt;em&gt;hopefully&lt;/em&gt; resulting in 1:1 gameplay.&lt;/p&gt; &#xA;&lt;h2&gt;Made with&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haxe.org&#34;&gt;Haxe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haxeflixel.com&#34;&gt;HaxeFlixel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://newgrounds.io&#34;&gt;newgrounds.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Licensing info can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/ninjamuffin99/canabalt-hf/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the game&#39;s assets are covered by a separate licence. Please see the &lt;a href=&#34;https://github.com/ninjamuffin99/canabalt-assets/raw/main/LICENSE.md&#34;&gt;ninjamuffin99/canabalt-assets&lt;/a&gt; repository for clarifications.&lt;/p&gt;</summary>
  </entry>
</feed>