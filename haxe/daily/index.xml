<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:35:58Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TahirKarabekiroglu/SScript</title>
    <updated>2023-11-19T01:35:58Z</updated>
    <id>tag:github.com,2023-11-19:/TahirKarabekiroglu/SScript</id>
    <link href="https://github.com/TahirKarabekiroglu/SScript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy-to-use Haxe Script tool for all targets&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.hizliresim.com/3o2yt2d.png&#34; alt=&#34;TeaLogo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SScript&lt;/h1&gt; &#xA;&lt;p&gt;SScript is an easy to use Haxe script tool that aims to be simple while supporting all Haxe structures.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you have an issue with SScript or have a suggestion, you can always open an issue here. However, pull requests are NOT welcome and will be ignored.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haxelib install SScript&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter this command in command prompt to get the latest release from Haxe library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haxelib git SScript https://github.com/TahirKarabekiroglu/SScript.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter this command in command prompt to get the latest git release from Github. Git releases have the latest features but they are unstable and can cause problems.&lt;/p&gt; &#xA;&lt;p&gt;After installing SScript, don&#39;t forget to add it to your Haxe project.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;OpenFL projects&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;Project.xml&lt;/code&gt; to add SScript to your OpenFL project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;haxelib name=&#34;SScript&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haxe Projects&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;build.hxml&lt;/code&gt; to add SScript to your Haxe build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hxml&#34;&gt;-lib SScript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use SScript, you will need a file or a script. Using a file is recommended.&lt;/p&gt; &#xA;&lt;h3&gt;Using without a file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var script:tea.SScript = {}; // Create a new SScript class&#xA;script.doScript(&#34;&#xA;&#x9;function returnRandom():Float&#xA;&#x9;&#x9;return Math.random() * 100;&#xA;&#34;); // Implement the script&#xA;var call = script.call(&#39;returnRandom&#39;);&#xA;var randomNumber:Float = call.returnValue; // Access the returned value with returnValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using with a file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var script:tea.SScript = new tea.SScript(&#34;script.hx&#34;); // Has the same contents with the script above&#xA;var randomNumber:Float = script.call(&#39;returnRandom&#39;).returnValue;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Haxe 4.3.0 Syntaxes&lt;/h2&gt; &#xA;&lt;p&gt;SScript supports both &lt;code&gt;?.&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt; syntaxes including &lt;code&gt;??=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;import tea.SScript;&#xA;class Main &#xA;{&#xA;&#x9;static function main()&#xA;&#x9;{&#xA;&#x9;&#x9;var script:SScript = {};&#xA;&#x9;&#x9;script.doScript(&#34;&#xA;&#x9;&#x9;&#x9;var string:String = null;&#xA;&#x9;&#x9;&#x9;trace(string.length); // Throws an error&#xA;&#x9;&#x9;&#x9;trace(string?.length); // Doesn&#39;t throw an error and returns null&#xA;&#x9;&#x9;&#x9;trace(string ?? &#39;ss&#39;); // Returns &#39;ss&#39;;&#xA;&#x9;&#x9;&#x9;trace(string ??= &#39;ss&#39;); // Returns &#39;ss&#39; and assigns it to `string` variable&#xA;&#x9;&#x9;&#34;);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending SScript&lt;/h2&gt; &#xA;&lt;p&gt;You can create a class extending SScript to customize it better.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;class SScriptEx extends tea.SScript&#xA;{  &#xA;&#x9;override function preset():Void&#xA;&#x9;{&#xA;&#x9;&#x9;super.preset();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Only use &#39;set&#39;, &#39;setClass&#39; or &#39;setClassString&#39; in preset&#xA;&#x9;&#x9;// Macro classes are not allowed to be set&#xA;&#x9;&#x9;setClass(StringTools);&#xA;&#x9;&#x9;set(&#39;NaN&#39;, Math.NaN);&#xA;&#x9;&#x9;setClassString(&#39;sys.io.File&#39;);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extend other functions only if you know what you&#39;re doing.&lt;/p&gt; &#xA;&lt;h2&gt;Calling Methods from Tea&#39;s&lt;/h2&gt; &#xA;&lt;p&gt;You can call methods and receive their return value from Tea&#39;s using &lt;code&gt;call&lt;/code&gt; function. It needs one obligatory argument (function name) and one optional argument (function arguments array).&lt;/p&gt; &#xA;&lt;p&gt;using &lt;code&gt;call&lt;/code&gt; will return a structure that contains the return value, if calling has been successful, exceptions if it did not, called function name and script file name of the Tea.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var tea:tea.SScript = {};&#xA;tea.doScript(&#39;&#xA;&#x9;function method()&#xA;&#x9;{&#xA;&#x9;&#x9;return 2 + 2;&#xA;&#x9;}&#xA;&#39;);&#xA;var call = tea.call(&#39;method&#39;);&#xA;trace(call.returnValue); // 4&#xA;&#xA;tea.doScript(&#39;&#xA;&#x9;function method()&#xA;&#x9;{&#xA;&#x9;&#x9;var num:Int = 1.1;&#xA;&#x9;&#x9;return num;&#xA;&#x9;}&#xA;&#39;)&#xA;&#xA;var call = tea.call(&#39;method&#39;);&#xA;trace(call.returnValue, call.exceptions[0]); // null, Float should be Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global Variables&lt;/h2&gt; &#xA;&lt;p&gt;With SScript, you can set variables to all running Tea&#39;s. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var tea:tea.SScript = {};&#xA;tea.set(&#39;variable&#39;, 1);&#xA;tea.doScript(&#39;&#xA;&#x9;function returnVar()&#xA;&#x9;{&#xA;&#x9;&#x9;return variable + variable2;&#xA;&#x9;}&#xA;&#39;);&#xA;&#xA;tea.SScript.globalVariables.set(&#39;variable2&#39;, 2);&#xA;trace(tea.call(&#39;returnVar&#39;).returnValue); // 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special Object&lt;/h2&gt; &#xA;&lt;p&gt;Special object is an object that&#39;ll get checked if a variable is not found in a Tea. A special object cannot be a basic type like Int, Float, String, Array and Bool.&lt;/p&gt; &#xA;&lt;p&gt;Special objects are useful for OpenFL and Flixel states.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;import tea.SScript;&#xA;&#xA;class PlayState extends flixel.FlxState &#xA;{&#xA;&#x9;var sprite:flixel.FlxSprite;&#xA;&#x9;override function create()&#xA;&#x9;{&#xA;&#x9;&#x9;sprite = new flixel.FlxSprite();&#xA;&#xA;&#x9;&#x9;var newScript:SScript = new SScript();&#xA;&#x9;&#x9;newScript.setSpecialObject(this);&#xA;&#x9;&#x9;newScript.doScript(&#34;sprite.visible = false;&#34;);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>