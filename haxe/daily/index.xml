<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:36:40Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deepnight/ldtk-haxe-api</title>
    <updated>2023-01-08T01:36:40Z</updated>
    <id>tag:github.com,2023-01-08:/deepnight/ldtk-haxe-api</id>
    <link href="https://github.com/deepnight/ldtk-haxe-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LDtk level editor Haxe API (available on HaxeLib)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This is the Haxe API to load &lt;strong&gt;LDtk Project JSON&lt;/strong&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;LDtk is a modern and open-source 2D level editor.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deepnight/ldtk/issues&#34;&gt;Issue tracker (shared)&lt;/a&gt; | &lt;a href=&#34;https://ldtk.io/docs/game-dev/haxe-in-game-api/&#34;&gt;API documentation&lt;/a&gt; | &lt;a href=&#34;https://ldtk.io&#34;&gt;LDtk official page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deepnight/ldtk-haxe-api/actions/workflows/unitTests.yml&#34;&gt;&lt;img src=&#34;https://github.com/deepnight/ldtk-haxe-api/actions/workflows/unitTests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible with all Haxe based frameworks and engines.&lt;/li&gt; &#xA; &lt;li&gt;Dedicated API for the following frameworks: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Heaps.io&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://haxeflixel.com/&#34;&gt;HaxeFlixel&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completely typed at compilation&lt;/strong&gt;: if you rename any element in your project (ie. level, layer, entity, etc.), the corresponding references in your code will break accordingly, avoiding typical errors or mistypings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full completion in VScode&lt;/strong&gt;: if you have vs-haxe installed, you will get full completion while exploring your project file, based on its actual content, right from VScode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxelib install ldtk-haxe-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;strong&gt;full documentation and tutorials&lt;/strong&gt; here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deepnight.net/docs/ldtk/haxe-api/&#34;&gt;https://deepnight.net/docs/ldtk/haxe-api/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;You can check some examples in &lt;a href=&#34;https://raw.githubusercontent.com/deepnight/ldtk-haxe-api/master/samples&#34;&gt;samples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Samples are built to &lt;strong&gt;WebGL&lt;/strong&gt; (Javascript) and &lt;strong&gt;Hashlink&lt;/strong&gt; targets, but you can try them on other compatible platforms too.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You need a standard &lt;strong&gt;Haxe&lt;/strong&gt; install, and the following libraries installed: &lt;em&gt;heaps&lt;/em&gt; (from source), &lt;em&gt;deepnightLibs&lt;/em&gt; (from source), &lt;em&gt;hlsdl&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxelib git heaps https://github.com/HeapsIO/heaps.git&#xA;&#xA;haxelib git deepnightLibs https://github.com/deepnight/deepnightLibs.git&#xA;&#xA;haxelib install hlsdl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building samples&lt;/h3&gt; &#xA;&lt;p&gt;Open a folder in the &lt;code&gt;samples&lt;/code&gt; folder (eg. &lt;code&gt;samples\Generic - Generic - Read project&lt;/code&gt;) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxe build.hxml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build all samples in one go. Go in &lt;code&gt;samples&lt;/code&gt; folder and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxe buildAll.hxml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rebuild samples HXMLs&lt;/h3&gt; &#xA;&lt;p&gt;If you modify the API, you might need to rebuild samples &lt;code&gt;HXML&lt;/code&gt;s files themselves. In the root of the repo, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxe genSamples.hxml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit tests&lt;/h2&gt; &#xA;&lt;p&gt;You can build and run unit tests manually using the following commands &lt;strong&gt;from the repository root&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;JS/WebGL target&lt;/h3&gt; &#xA;&lt;p&gt;You will need Node interpreter to run the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxe tests\js.hxml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Neko target&lt;/h3&gt; &#xA;&lt;p&gt;You will need Neko VM interpreter to run the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxe tests\neko.hxml&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>