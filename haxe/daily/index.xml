<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-23T01:37:22Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>polygonal/ds</title>
    <updated>2023-06-23T01:37:22Z</updated>
    <id>tag:github.com,2023-06-23:/polygonal/ds</id>
    <link href="https://github.com/polygonal/ds" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Haxe library containing data structures for games.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data Structures For Games&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/polygonal/ds/master/logo.svg?sanitize=true&#34; alt=&#34;ds logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The library contains parametrized classes that allow programmers to easily implement standard data structures like linked lists, queues, stacks or multi-dimensional arrays. The result is somewhere in between the C++ STL (Standard Template Library) and the Java Collection framework.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API &lt;a href=&#34;http://polygonal.github.io/ds/polygonal/ds/index.html&#34;&gt;http://polygonal.github.io/ds/polygonal/ds/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slides &lt;a href=&#34;http://polygonal.github.io/ds/2012_01_11_introduction_to_ds.pdf&#34;&gt;Introduction to ds - Data Structures For Games&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cross-Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;ds supports the following Haxe compilation targets: &lt;strong&gt;-swf, -js, -neko, -python, -php, -cpp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;-hl&lt;/strong&gt;, &lt;strong&gt;-java&lt;/strong&gt;, &lt;strong&gt;-cs&lt;/strong&gt;, &lt;strong&gt;jvm&lt;/strong&gt; are experimental.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://haxe.org/download&#34;&gt;Haxe&lt;/a&gt; and run &lt;code&gt;$ haxelib install polygonal-ds&lt;/code&gt; from the console, then compile with &lt;code&gt;$ haxe ... -lib polygonal-ds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Conditional Compilation Flags&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;-D generic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables generic classes (adds @:generic meta). Nice performance boost for static typed platforms (-swf,-cpp only).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-D alchemy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enables fast virtual memory for FP10+ (&#34;alchemy memory&#34;). Extra performance for Flash.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;2.2.0 (wip)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;all: removed polygonal package structure&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.removeSingleArcs(), removeMutualArcs()&lt;/li&gt; &#xA; &lt;li&gt;modified: More conservative inlining (use selective inlining when actually needed)&lt;/li&gt; &#xA; &lt;li&gt;modified: Use implicit casting for Comparables&lt;/li&gt; &#xA; &lt;li&gt;added: Bitfield abstract&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayTools.pairwise length parameter&lt;/li&gt; &#xA; &lt;li&gt;modified: Added GraphNode.visible (quickly hide node from graph without disconnecting it)&lt;/li&gt; &#xA; &lt;li&gt;modified: Added Array2.flipHorizontal, Array2.flipVertical&lt;/li&gt; &#xA; &lt;li&gt;modified: Added ArrayTools.random()&lt;/li&gt; &#xA; &lt;li&gt;modified: Added Array2.shiftRowLeft, Array2.shiftRowRight&lt;/li&gt; &#xA; &lt;li&gt;modified: Added GraphNode.forEeachNeighbor()&lt;/li&gt; &#xA; &lt;li&gt;all: Small fixes and optimizations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.1.1 (released 2019-11-10)&lt;/h3&gt; &#xA;&lt;p&gt;Supports Haxe Compiler 4.0.1, hxcpp 4.0.64&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;modified: require Haxe 4.0.0 (Haxe 3.x no longer maintained)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;added: RadixSort helper class&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.bruteforce()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayTools.bruteforce()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.dlbfs(): incorrect GraphNode.parent pointer&lt;/li&gt; &#xA; &lt;li&gt;added: Bits.swap()&lt;/li&gt; &#xA; &lt;li&gt;modified: Graph.removeArc(): add optional mutual parameter&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayTools.forEach()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.addNativeArray()&lt;/li&gt; &#xA; &lt;li&gt;added: FreeList helper class (tools package)&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.pairwise()&lt;/li&gt; &#xA; &lt;li&gt;modified: removed var shadowing warnings (-D warn-var-shadowing)&lt;/li&gt; &#xA; &lt;li&gt;modified: moved mem package to tools package&lt;/li&gt; &#xA; &lt;li&gt;modified: Array2.countNeighbors(): add manhatten parameter&lt;/li&gt; &#xA; &lt;li&gt;added: TreeTools.ofIndentedList()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeTools.randomTree()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeTools.map()&lt;/li&gt; &#xA; &lt;li&gt;modified: trim package to polygonal.ds&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.resize()&lt;/li&gt; &#xA; &lt;li&gt;fixed: ArrayList.reverse()&lt;/li&gt; &#xA; &lt;li&gt;added: compile with &lt;code&gt;-D no-assert&lt;/code&gt; to remove assert statements even when compiling with &lt;code&gt;-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;added: compile with &lt;code&gt;-D runtime_assert&lt;/code&gt; to use non-macro asserts (faster)&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayTools.equals(): now passing equals function as argument&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.1 (released 2017-10-10)&lt;/h3&gt; &#xA;&lt;p&gt;Supports Haxe Compiler 3.4.4, hxcpp 3.4.188&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: HashKey: allow static initializers for non-static targets&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.Array2Cell.of()&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed M to MathTools&lt;/li&gt; &#xA; &lt;li&gt;modified: removed unused imports/vars&lt;/li&gt; &#xA; &lt;li&gt;added ArrayTools.pairwise()&lt;/li&gt; &#xA; &lt;li&gt;added Array2.countNeighbors()&lt;/li&gt; &#xA; &lt;li&gt;added wrap=true parameter to Array2.shift* methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.0 (released 2017-01-31)&lt;/h3&gt; &#xA;&lt;p&gt;Supports Haxe Compiler 3.4.0, hxcpp 3.4.49&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: Array2.copy()&lt;/li&gt; &#xA; &lt;li&gt;modified: optimized Array2.resize(): use fast blit when only changing #rows&lt;/li&gt; &#xA; &lt;li&gt;modified: optimized ArrayList.remove(): remove multiple values at once, use fast blit&lt;/li&gt; &#xA; &lt;li&gt;modified: added ArrayTools.swap()&lt;/li&gt; &#xA; &lt;li&gt;modified: added ArrayTools.getFront()&lt;/li&gt; &#xA; &lt;li&gt;modified: added ArrayTools.iter()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.addArray()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.getIndexAtCell()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Array2.clear(), Array3.clear()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.addArray()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayList.insertionSort()&lt;/li&gt; &#xA; &lt;li&gt;modified: allow more method chaining&lt;/li&gt; &#xA; &lt;li&gt;modified: Sll/Dll: popDown() =&amp;gt; tailToHead(), shiftUp() =&amp;gt; headToTail()&lt;/li&gt; &#xA; &lt;li&gt;added: tools.Shuffle for customizing Math.random() rng&lt;/li&gt; &#xA; &lt;li&gt;fixed: integer hash tables print all key,value pairs for duplicate keys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.0-rc1 (released 2016-11-05)&lt;/h3&gt; &#xA;&lt;p&gt;Supports Haxe Compiler 3.4.0-rc1, hxcpp 3.4.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: replaced GraphArc.cost with a more versatile GraphArc.userData field&lt;/li&gt; &#xA; &lt;li&gt;added: Graph.serialize() and Graph.unserialize()&lt;/li&gt; &#xA; &lt;li&gt;added: implemented iter(), fast alternative to iterator()&lt;/li&gt; &#xA; &lt;li&gt;modified: inline and optimize forEach()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.0.0-beta (released 2016-05-24)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: replaced pooling package with lightweight de.polygonal.ds.tools.ObjectPool class&lt;/li&gt; &#xA; &lt;li&gt;modified: removed some Bits methods (better suited for abstract), move Bits class to tools package&lt;/li&gt; &#xA; &lt;li&gt;modified: BitVector: use getters for size/capacity&lt;/li&gt; &#xA; &lt;li&gt;modified: better method naming: don&#39;t use abbreviations&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed Graph methods (DFS, BFS, DLBFS =&amp;gt; dfs, bfs, dlbfs)&lt;/li&gt; &#xA; &lt;li&gt;modified: added Set.unset() method&lt;/li&gt; &#xA; &lt;li&gt;modified: remove .swc files- no longer maintained (use tools/swc/run.bat to create swc libs on your own)&lt;/li&gt; &#xA; &lt;li&gt;added: List&amp;lt;T&amp;gt; interface (implemented by ArrayList, Sll, Dll)&lt;/li&gt; &#xA; &lt;li&gt;modified: replaced de.polygonal.ds.Vector typedef with NativeArray&amp;lt;T&amp;gt; type.&lt;/li&gt; &#xA; &lt;li&gt;added: NativeArrayTools: helper class for working with fast platform specific native arrays.&lt;/li&gt; &#xA; &lt;li&gt;modified: arrayed structures now use fast platform specific &#34;native arrays&#34; (vectors) for internal storage&lt;/li&gt; &#xA; &lt;li&gt;added: replaced Da structure with new ArrayList implementation (resizable native array)&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed swp() =&amp;gt; swap(), cpy() =&amp;gt; copy()&lt;/li&gt; &#xA; &lt;li&gt;modified: Map.clr() renamed to Map.unset() to distinguish from Collection.clear()&lt;/li&gt; &#xA; &lt;li&gt;modified: optimized toString()&lt;/li&gt; &#xA; &lt;li&gt;added: various growth rates for vector-based structures (see GrowthRate)&lt;/li&gt; &#xA; &lt;li&gt;modified: Array2/3: getW(), getH(), getD() is now a property: width, height, depth&lt;/li&gt; &#xA; &lt;li&gt;modified: removed ArrayConvert due to issues with -D generic, instead added ?source:Array&amp;lt;T&amp;gt; to constructor&lt;/li&gt; &#xA; &lt;li&gt;modified: removed toVector() method&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed ArrayUtil to ArrayTools: match Haxe naming style&lt;/li&gt; &#xA; &lt;li&gt;modified: iter() renamed to forEach() and implement for all structures&lt;/li&gt; &#xA; &lt;li&gt;modified: removed redundant assign() and fill() methods: use forEach() instead&lt;/li&gt; &#xA; &lt;li&gt;modified: size() is now a property: Collection.size&lt;/li&gt; &#xA; &lt;li&gt;fixed: haxelib package&lt;/li&gt; &#xA; &lt;li&gt;modified: greatly improved performance for static platforms when compiled with -D generic (-swf and -cpp only)&lt;/li&gt; &#xA; &lt;li&gt;modified: cpp target: increase performance by skipping bounds checking when accessing arrays internally&lt;/li&gt; &#xA; &lt;li&gt;fixed: always increment iterator state inside next()&lt;/li&gt; &#xA; &lt;li&gt;added: support python and php target&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.remove()&lt;/li&gt; &#xA; &lt;li&gt;modified: require flash10; drop support for fp 9.x&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable.hasPair() for checking if a {key, value} pair exists&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable.clrPair() for removing a {key, value} pair&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable.toKeyVector()&lt;/li&gt; &#xA; &lt;li&gt;added: Array.getRect() for extracting a rectangular region&lt;/li&gt; &#xA; &lt;li&gt;modified: use access control instead of friend sytax with typedef&lt;/li&gt; &#xA; &lt;li&gt;modified: less aggressive inlining&lt;/li&gt; &#xA; &lt;li&gt;modified: use plain array to pass random values to shuffle() instead of Da&lt;/li&gt; &#xA; &lt;li&gt;fixed: several bug fixes for neko/cpp&lt;/li&gt; &#xA; &lt;li&gt;modified: switched to dox for documentation&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed SLL to Sll, DLL to Dll, BST to Bst: match Haxe naming style&lt;/li&gt; &#xA; &lt;li&gt;modified: removed HashMap class (deprecated, Flash only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.4.1 (released 2013-07-08)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: removed &#34;polygonal-core&#34; haxelib dependency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.4.0 (released 2013-06-28; Haxe 3.0.0)&lt;/h3&gt; &#xA;&lt;p&gt;Supports Haxe Compiler 3.0.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: support Haxe 3 only (Haxe 2.x and Neko 1.x are no longer supported)&lt;/li&gt; &#xA; &lt;li&gt;modified: sacrifice Collection.toDA() for proper @:generic support&lt;/li&gt; &#xA; &lt;li&gt;modified: explicitly allocate elements in ArrayUtil.alloc() when targeting neko&lt;/li&gt; &#xA; &lt;li&gt;fixed: several fixes when compiling with -D generic&lt;/li&gt; &#xA; &lt;li&gt;modified: change BitVector to use the haxe.ds.Vector as data&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayUtil.shrink(): trim when targeting cpp&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayUtil.alloc(): explicitly allocate elements when targeting cpp&lt;/li&gt; &#xA; &lt;li&gt;modified: more conservative inlining&lt;/li&gt; &#xA; &lt;li&gt;modified: don&#39;t allocate stack arrays when doing iterative pre/post-order traversals&lt;/li&gt; &#xA; &lt;li&gt;modified: optimized TreeNode.contains()&lt;/li&gt; &#xA; &lt;li&gt;modified: optimize TreeNode.levelOrder by using an implicit queue&lt;/li&gt; &#xA; &lt;li&gt;modified: all: fill() method returns this for chaining&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.39 (released 2013-02-12)&lt;/h3&gt; &#xA;&lt;p&gt;Supports Haxe Compiler 2.10 &amp;amp; Haxe 3.00 r6189&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed: swc files: get rid of warnings for Flash Builder 4.7 + falcon compiler&lt;/li&gt; &#xA; &lt;li&gt;fixed: cpp + blackberry target&lt;/li&gt; &#xA; &lt;li&gt;fixed: some Haxe 3 fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.38 (released 2013-01-27)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: swc: moved Haxe classes to hx package&lt;/li&gt; &#xA; &lt;li&gt;added: serialization of TreeNode structures (de.polygonal.ds.Serialization)&lt;/li&gt; &#xA; &lt;li&gt;fixed: minor fixes for -D haxe3&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayUtil.equals()&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable, IntHashTable, HashTable.getAll()&lt;/li&gt; &#xA; &lt;li&gt;fixed: IntIntHashTable.remove()&lt;/li&gt; &#xA; &lt;li&gt;added: BitVector.getBucketAt(), getBuckets()&lt;/li&gt; &#xA; &lt;li&gt;modified: replaced DA.swapWithBack() with DA.swapPop()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayUtil.split()&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.removeChildren()&lt;/li&gt; &#xA; &lt;li&gt;added: unit tests&lt;/li&gt; &#xA; &lt;li&gt;added: support Neko 2.0 RC (compile with -D neko_v2)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.37 (released 2012-11-15)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: Graph: added Graph.borrowArc() and Graph.returnArc() to allow optional arc pooling&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.isAncestor(), TreeNode.isDescendant()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedObjectPool: object instantiation for non-flash targets&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayUtil.quickPerm(): counting quickperm algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.36 (released 2012-07-25)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: TreeNode.isAncestor()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.isDescendant()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.getChildIndex()&lt;/li&gt; &#xA; &lt;li&gt;modified: TreeNode.preorder, postorder: allow node removal during traversal&lt;/li&gt; &#xA; &lt;li&gt;fixed: PriorityQueue.toString(): now prints elements in sorted order&lt;/li&gt; &#xA; &lt;li&gt;modified: faster debugging with --no-inline through macro-based asserts&lt;/li&gt; &#xA; &lt;li&gt;fixed: DA.inRange()&lt;/li&gt; &#xA; &lt;li&gt;added: DLL.createNode(), DLL.appendNode(), DLL.prependNode()&lt;/li&gt; &#xA; &lt;li&gt;fixed: typo Bitflags.setiff() =&amp;gt; setfif()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.insertChildAt()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.removeChildAt()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.setChildIndex()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.swapChildren()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.swapChildrenAt()&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.insertAfterChild(), insertBeforeChild()&lt;/li&gt; &#xA; &lt;li&gt;modified: TreeNode.numChildren() is now O(1)&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.removeChildren()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.setStack()&lt;/li&gt; &#xA; &lt;li&gt;modified: TreeNode.getChildAtIndex() =&amp;gt; TreeNode.getChildAt()&lt;/li&gt; &#xA; &lt;li&gt;modified: cpp/nme target: now supporting MemoryManager&lt;/li&gt; &#xA; &lt;li&gt;added: XmlConvert.toTreeNode(): xml =&amp;gt; TreeNode conversion&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.copyCol(), Array2.swapCol()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.copyRow(), Array2.swapRow()&lt;/li&gt; &#xA; &lt;li&gt;fixed: support Haxe 2.10&lt;/li&gt; &#xA; &lt;li&gt;modified: also dump state with toString() in release mode&lt;/li&gt; &#xA; &lt;li&gt;fixed: DA.sort() out of bound access&lt;/li&gt; &#xA; &lt;li&gt;fixed: BitVector.ofBytes for neko&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.35 (released 2011-12-22)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: Collection.clone(): make assign parameter optional so clone() does a shallow copy per default&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.setNestedArray()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.getChildAtIndex()&lt;/li&gt; &#xA; &lt;li&gt;added: include Lambda class in swc files (&lt;a href=&#34;http://haxe.org/api/lambda&#34;&gt;http://haxe.org/api/lambda&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.childIterator()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Heap.remove(), PriorityQueue.remove()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Collection.toVector()&lt;/li&gt; &#xA; &lt;li&gt;modified: Heap.remove(), PriorityQueue.remove() is now O(1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.34 (released 2011-10-26)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: all: Collection.toVector() for FP10+&lt;/li&gt; &#xA; &lt;li&gt;modified: too many issues with -D swf-protected so revert back to prefixing private members with underscore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.33 (released 2011-10-21)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: disabled haxe.rtti.Generic optimization by default, enable with -D &#39;generic&#39; (replaces &#39;no_rtti&#39; flag)&lt;/li&gt; &#xA; &lt;li&gt;fixed: DynamicObjectPool: &#39;object x was returned twice to the pool&#39; assert&lt;/li&gt; &#xA; &lt;li&gt;added: DynamicObjectPool.used()&lt;/li&gt; &#xA; &lt;li&gt;added: Compare.lexiographic()&lt;/li&gt; &#xA; &lt;li&gt;added: Bits.unpackUI16Lo(), unpackUI16Hi()&lt;/li&gt; &#xA; &lt;li&gt;fixed: DLL.lastNodeOf()&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.levelOrder&lt;/li&gt; &#xA; &lt;li&gt;modified: ObjectPool: allow lazy allocation by using ObjectPool.allocate(true, ...)&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedDeque.indexOfFront(), indexOfBack()&lt;/li&gt; &#xA; &lt;li&gt;added: LinkedDeque.indexOfFront(), indexOfBack()&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashMap.toArray()&lt;/li&gt; &#xA; &lt;li&gt;added: BitVector.clrRange(), setRange()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.inRange(), Array3.inRange()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.getAt(), Array3.getAt()&lt;/li&gt; &#xA; &lt;li&gt;fixed: MemoryAccess.swp()&lt;/li&gt; &#xA; &lt;li&gt;fixed: PriorityQueue.reprioritze(): use float type for priority value&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashSet remove obsolete &amp;lt;K&amp;gt; type parameter&lt;/li&gt; &#xA; &lt;li&gt;added: all except TreeNode+BinaryTreeNode: added reuseIterator flag&lt;/li&gt; &#xA; &lt;li&gt;modified: by default alchemy memory optimization is now disabled, enable with -D alchemy (removed -D &#39;no_alchemy&#39;)&lt;/li&gt; &#xA; &lt;li&gt;added: support for Itr.remove()&lt;/li&gt; &#xA; &lt;li&gt;added: DynamicObjectPool.maxUsageCount()&lt;/li&gt; &#xA; &lt;li&gt;modified: swc: compiled with Haxe 2.08&lt;/li&gt; &#xA; &lt;li&gt;modified: swc: only show public API (all private fields marked with an underscore are now protected)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.32 (released 2011-07-17)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed: LinkedObjectPool.get()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.getAtIndex()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2.setAtIndex()&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashMap.remove(x): now removes all keys that map the value x&lt;/li&gt; &#xA; &lt;li&gt;fixed: BinaryTreeNode docs&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.DFS(), Graph.BFS(): include seed in traversal when preflight flag is set&lt;/li&gt; &#xA; &lt;li&gt;fixed: IntHashTable memory leak&lt;/li&gt; &#xA; &lt;li&gt;modified: added MemoryAccess.name for better debugging/profiling&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedQueue.remove() infinite loop in edge cases&lt;/li&gt; &#xA; &lt;li&gt;modified: IntHashSet, HashSet, IntIntHashTable, IntHashTable, HashTable.clear(): only shrink container if purge=true&lt;/li&gt; &#xA; &lt;li&gt;fixed MemoryManager OOM error when calling realloc&lt;/li&gt; &#xA; &lt;li&gt;added: BitMemory.get()&lt;/li&gt; &#xA; &lt;li&gt;fixed: ArrayedDeque.iterator()&lt;/li&gt; &#xA; &lt;li&gt;changed: Itr.next() now returns a reference to itself&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.unlink()&lt;/li&gt; &#xA; &lt;li&gt;modified: added Graph.removeNode()&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashMap.remap()&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashTable, IntHashTable, IntIntHashTable.toString()&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashSet, IntHashTable, IntHashTable.clear()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedStack.clear()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.remove(): update size when removing node&lt;/li&gt; &#xA; &lt;li&gt;added: DA.inRange(): check if given index is valid&lt;/li&gt; &#xA; &lt;li&gt;fixed: DA.sort() using quick sort&lt;/li&gt; &#xA; &lt;li&gt;modified: GraphNode: added traversal depth and parent pointer&lt;/li&gt; &#xA; &lt;li&gt;modified: Graph: cost is now optional (default is 1.0)&lt;/li&gt; &#xA; &lt;li&gt;modified: changed Graph.addNode() to allow sub-classing of GraphNode objects&lt;/li&gt; &#xA; &lt;li&gt;fixed: various fixes for the cpp target&lt;/li&gt; &#xA; &lt;li&gt;added: Graph.autoClearMarks&lt;/li&gt; &#xA; &lt;li&gt;modified: de.polygonal.ds.mem package now works with hxcpp+NME &#34;alchemy&#34; memory&lt;/li&gt; &#xA; &lt;li&gt;added: Graph.DLBFS(): depth-limited breadth-first search&lt;/li&gt; &#xA; &lt;li&gt;fixed: DLL.sort: merge sort produced invalid prev pointers&lt;/li&gt; &#xA; &lt;li&gt;modified: optimized TreeNode class&lt;/li&gt; &#xA; &lt;li&gt;modified: added support for circular singly linked lists&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.free(): infinite loop lockup&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.free(): also nullify parent and val field&lt;/li&gt; &#xA; &lt;li&gt;fixed: SLL.nodeOf(): always returned null&lt;/li&gt; &#xA; &lt;li&gt;modified: support circular singly linked lists&lt;/li&gt; &#xA; &lt;li&gt;fixed: DLL.free(), clear(): infinite loop lockup&lt;/li&gt; &#xA; &lt;li&gt;fixed: DLL.clone(): preserve circular property&lt;/li&gt; &#xA; &lt;li&gt;modified: PriorityQueue: use float type for storing priority value&lt;/li&gt; &#xA; &lt;li&gt;modified: DA.sort(): support range sorting&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayUtil.sortRange()&lt;/li&gt; &#xA; &lt;li&gt;modified: document complexity&lt;/li&gt; &#xA; &lt;li&gt;fixed: ArrayQueue.fill(), assign() for js target&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.31 (released 2011-04-11)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: better AS3/SWC support: removed some redundant classes, haxe.init(mc) is no longer required&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.sort()- sort children&lt;/li&gt; &#xA; &lt;li&gt;added: preflight flag for TreeNode.preorder- exclude subtree from traversal&lt;/li&gt; &#xA; &lt;li&gt;modified: improved TreeNode and BinaryTreeNode iterative traversal performance&lt;/li&gt; &#xA; &lt;li&gt;fixed PriorityQueue.clear(), dequeue(), remove()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Heap.remove()&lt;/li&gt; &#xA; &lt;li&gt;modified: improved Heap performance&lt;/li&gt; &#xA; &lt;li&gt;modified: Heap.enqueue(), dequeue(), front() renamed to Heap.add(), pop(), top()&lt;/li&gt; &#xA; &lt;li&gt;modified: added Heap.replace(), change(), sort(), bottom(), repair(), height()&lt;/li&gt; &#xA; &lt;li&gt;added: Heapable interface&lt;/li&gt; &#xA; &lt;li&gt;modified: PriorityQueue now implements Queue interface&lt;/li&gt; &#xA; &lt;li&gt;modified: added PriorityQueue.back()&lt;/li&gt; &#xA; &lt;li&gt;fixed: some neko compatibility fixes&lt;/li&gt; &#xA; &lt;li&gt;added: optional binary search for DA.indexOf()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayUtil.shrink()&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayUtil.bsearchInt/bsearchFloat/bsearchComparator: now returns insertion point instead of just -1&lt;/li&gt; &#xA; &lt;li&gt;added: Bits.next(): macro based bit flag generation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.30 (released 2011-03-03)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modified: GraphNode and GraphArc now implement Hashable&lt;/li&gt; &#xA; &lt;li&gt;fixed: DA.reverse()&lt;/li&gt; &#xA; &lt;li&gt;added: Graph.nodeIterator(), Graph.arcIterator()&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed GraphNodeIterator to NodeValIterator&lt;/li&gt; &#xA; &lt;li&gt;added: GraphNode.getArcCount()&lt;/li&gt; &#xA; &lt;li&gt;fixed: return value of Array.getRow(), getCol(), getPile()&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeBuilder.nextChild(),prevChild()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeBuilder.hasNextChild(), hasPrevChild()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Bits.ntz(): removed static initializer for swc compatibility&lt;/li&gt; &#xA; &lt;li&gt;fixed: Array3.setCol(), setPile()&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.getFirstChild(), TreeNode.setFirst(), TreeNode.setLast()&lt;/li&gt; &#xA; &lt;li&gt;fixed: renamed TreeNode.getChildIndex() to TreeNode.getSiblingIndex()&lt;/li&gt; &#xA; &lt;li&gt;fixed: BST: nullify tree if empty&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedQueue.pack()&lt;/li&gt; &#xA; &lt;li&gt;modified: HashMap: don&#39;t allow null keys and null values&lt;/li&gt; &#xA; &lt;li&gt;added: Deque&amp;lt;T&amp;gt; interface&lt;/li&gt; &#xA; &lt;li&gt;added: LinkedDeque&amp;lt;T&amp;gt;: linked deque implementation&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedDeque&amp;lt;T&amp;gt;: arrayed deque implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.23 (released 2011-01-30)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: DynamicObjectPool&lt;/li&gt; &#xA; &lt;li&gt;modified: moved Factory to de.polygonal.ds&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedStack/LinkedStack: dup(), exchange(), rotRight(), rotLeft()&lt;/li&gt; &#xA; &lt;li&gt;added: MemoryManager.size()&lt;/li&gt; &#xA; &lt;li&gt;modified: Collection.iterator() changed to Collection.itr() (unify AS3/Haxe)&lt;/li&gt; &#xA; &lt;li&gt;modified: Hashable.getKey() changed to Hashable.key for SWC also (unify AS3/Haxe)&lt;/li&gt; &#xA; &lt;li&gt;modified: removed various C++ workarounds that are no longer needed in Haxe 2.07&lt;/li&gt; &#xA; &lt;li&gt;fixed: incorrect maxSize value in release builds&lt;/li&gt; &#xA; &lt;li&gt;modified: IntHashTable/HashTable/HashSet/HashMap: removed nullValue, use Null&amp;lt;T&amp;gt; instead&lt;/li&gt; &#xA; &lt;li&gt;fixed: Bits.ntz() and Bits.setBits() for js target&lt;/li&gt; &#xA; &lt;li&gt;added: SLLNode/DLLNode.isHead(), isTail()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Flash AVM1 support&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayedQueue is now dynamic&lt;/li&gt; &#xA; &lt;li&gt;modified: SWC files compiled with Haxe 2.07&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.22 (released 2011-01-11)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: TreeNode levelorder traversal&lt;/li&gt; &#xA; &lt;li&gt;added: MemoryManager: automatically reclaim memory when MemoryAccess object is GCed&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayUtil.assign()&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable.extract()&lt;/li&gt; &#xA; &lt;li&gt;modified: Collection now implements Hashable&lt;/li&gt; &#xA; &lt;li&gt;fixed: Bits.flipDWORD()&lt;/li&gt; &#xA; &lt;li&gt;modified: allow ByteArray access from MemoryManager&lt;/li&gt; &#xA; &lt;li&gt;added: Da.getNext(), DA.getPrev()&lt;/li&gt; &#xA; &lt;li&gt;modified: refactoring of Assert statements&lt;/li&gt; &#xA; &lt;li&gt;modified: optimized MemoryAccess.fill()&lt;/li&gt; &#xA; &lt;li&gt;fixed: IntIntHashTable shrink segmentation fault&lt;/li&gt; &#xA; &lt;li&gt;fixed: IntIntHashTable set() return value&lt;/li&gt; &#xA; &lt;li&gt;modified: improved MemoryManager defrag performance&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed DA.move() to memmove() and improved performance&lt;/li&gt; &#xA; &lt;li&gt;modified: improved ArrayUtil.memmove()&lt;/li&gt; &#xA; &lt;li&gt;added: MemoryManager.memmove()&lt;/li&gt; &#xA; &lt;li&gt;modified: improved documentation&lt;/li&gt; &#xA; &lt;li&gt;modified: maxSize() is now a property&lt;/li&gt; &#xA; &lt;li&gt;added: ByteMemory.clone()&lt;/li&gt; &#xA; &lt;li&gt;fixed: MemoryManager issues when using SWC files- static getters are now static functions&lt;/li&gt; &#xA; &lt;li&gt;fixed: Bits.hasBitAt()&lt;/li&gt; &#xA; &lt;li&gt;modified: updated documentation&lt;/li&gt; &#xA; &lt;li&gt;modified: simplified ArrayConvert class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.21 (released 2010-12-12)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: HashTable.dispose()&lt;/li&gt; &#xA; &lt;li&gt;fixed: don&#39;t skip constructor call in assign() methods&lt;/li&gt; &#xA; &lt;li&gt;fixed: Bits class&lt;/li&gt; &#xA; &lt;li&gt;fixed: SLL/DLL node caching&lt;/li&gt; &#xA; &lt;li&gt;added: DA.swapWithBack()&lt;/li&gt; &#xA; &lt;li&gt;fixed: DA.join()&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable.count()&lt;/li&gt; &#xA; &lt;li&gt;fixed: IntIntHashTable infinite loop trap when resizing&lt;/li&gt; &#xA; &lt;li&gt;fixed: ObjectPool.iterator() for non-allocated pools&lt;/li&gt; &#xA; &lt;li&gt;modified: ObjectPool: improved performance, smaller memory footprint&lt;/li&gt; &#xA; &lt;li&gt;modified: IntIntHashTable/IntHashTable/HashTable/IntHashSet/HashSet: added resizable parameter to constructor (enforce fixed size)&lt;/li&gt; &#xA; &lt;li&gt;added: BitFlags helper class&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.20 (released 2010-11-01)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed: C++ and JavaScript compatibility&lt;/li&gt; &#xA; &lt;li&gt;added: IntIntHashTable: an array hash table implementation using 32-bit integers for keys and values&lt;/li&gt; &#xA; &lt;li&gt;added: IntHashTable&amp;lt;T&amp;gt;: a generic hash table using 32-bit integers for keys&lt;/li&gt; &#xA; &lt;li&gt;added: HashTable&amp;lt;K, T&amp;gt;: a generic hash table&lt;/li&gt; &#xA; &lt;li&gt;added: IntHashSet: a hash set for 32-bit integer values&lt;/li&gt; &#xA; &lt;li&gt;added: HashSet&amp;lt;T&amp;gt;: a generic hash set&lt;/li&gt; &#xA; &lt;li&gt;added: added Map interface&lt;/li&gt; &#xA; &lt;li&gt;added: added Set interface (Set replaced with ListSet)&lt;/li&gt; &#xA; &lt;li&gt;added: Hashable interface&lt;/li&gt; &#xA; &lt;li&gt;added: HashableItem abstract helper class&lt;/li&gt; &#xA; &lt;li&gt;added: HashKey class&lt;/li&gt; &#xA; &lt;li&gt;added: ListSet: simple replacement for the Set class which was using the flash.utils.Dictionary class.&lt;/li&gt; &#xA; &lt;li&gt;modified: Collection.toArray(?output:Array&amp;lt;T&amp;gt;):Array&amp;lt;T&amp;gt; changed to Collection.toArray():Array&amp;lt;T&amp;gt; (c++ compatibility)&lt;/li&gt; &#xA; &lt;li&gt;modified: Collection.toDA(?output:DA&amp;lt;T&amp;gt;):Array&amp;lt;T&amp;gt; changed to Collection.toDA():DA&amp;lt;T&amp;gt; (c++ compatibility)&lt;/li&gt; &#xA; &lt;li&gt;modified: HashMap refactoring; HashMap&amp;lt;K, V&amp;gt; now implements Map&amp;lt;K, T&amp;gt; instead of Collection&amp;lt;K&amp;gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.12 (released 2010-10-18)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed: ArrayedQueue.remove(),dispose()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedObjectPool.put()&lt;/li&gt; &#xA; &lt;li&gt;fixed: SLL.merge()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Graph.BFS()&lt;/li&gt; &#xA; &lt;li&gt;modified: SLL/DLL/LinkedStack/LinkedQueue: structures can be created with a reserved size (increases performance at the cost of memory usage through object pooling)&lt;/li&gt; &#xA; &lt;li&gt;fixed: revised dense array (DA)&lt;/li&gt; &#xA; &lt;li&gt;modified: added iterative Graph.DFS()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedQueue.clone()&lt;/li&gt; &#xA; &lt;li&gt;fixed: ArrayedQueue.isFull()&lt;/li&gt; &#xA; &lt;li&gt;fixed: PriorityQueue.toString()&lt;/li&gt; &#xA; &lt;li&gt;fixed: MemoryManager: remember existing 1024 bytes after initialization&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.postOrder()&lt;/li&gt; &#xA; &lt;li&gt;modified: split assign(x:Dynamic) into fill(x:T) and assign(x:Class&amp;lt;T&amp;gt;) because of type safety, performance and cross-platform compatibility&lt;/li&gt; &#xA; &lt;li&gt;some fixes for js/cpp target&lt;/li&gt; &#xA; &lt;li&gt;added: MemoryAccess.clone()&lt;/li&gt; &#xA; &lt;li&gt;added: MemoryAccess.fill()&lt;/li&gt; &#xA; &lt;li&gt;added: MemoryAccess.resize()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayTools class&lt;/li&gt; &#xA; &lt;li&gt;fixed: several cross-platform issues for de.polygonal.ds.mem when compiled with -D no_alchemy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.11 (released 2010-07-22)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: ObjectPool.isEmpty()&lt;/li&gt; &#xA; &lt;li&gt;added: Array2&amp;amp;3: getIndex(), cellToIndex(), indexToCell(), indexOf(), cellOf()&lt;/li&gt; &#xA; &lt;li&gt;added: Bits.flipWORD and Bits.flipDWORD&lt;/li&gt; &#xA; &lt;li&gt;modified: MemoryManager: default block size is now 64 KiB&lt;/li&gt; &#xA; &lt;li&gt;modified: Set is now cross-platform&lt;/li&gt; &#xA; &lt;li&gt;code style: SLL/DLL: head and tail are now properties&lt;/li&gt; &#xA; &lt;li&gt;modified: SLL/DLL/SLLNode/DLLNode: renamed remove() to unlink() since remove(x:T) is now part of the Collection interface&lt;/li&gt; &#xA; &lt;li&gt;modified: Graph: renamed removeNode() to unlink() since remove(x:T) is now part of the Collection interface&lt;/li&gt; &#xA; &lt;li&gt;modified: de.polygonal.ds.mem.*: added FP9 compatibility when using -D no_alchemy&lt;/li&gt; &#xA; &lt;li&gt;fixed: ShortMemory/IntMemory/FloatMemory/DoubleMemory ofByteArray() endianness&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode: unlink(), prependNode(), appendNode(), insertAfterChild(), insertBeforeChild(), numNextSiblings(), numPrevSiblings()&lt;/li&gt; &#xA; &lt;li&gt;added: BinaryTreeNode.unlink()&lt;/li&gt; &#xA; &lt;li&gt;modified: renamed Vector to DA (dense array) to avoid confusion with flash&#39;s built in Vector class. As a consequence, Collection.toVector() changed to Collection.toDA(), and HashMap.valuesToVector() changed to HashMap.valuesToDA()&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedStack/Heap/PrioriyQueue/DA.reserve(): If size is known in advance storage can be preallocated to increase performance/reduce memory usage. This is automatically done for fixed-size structures (&lt;a href=&#34;http://jpauclair.net/2009/12/05/tamarin-part-ii-more-on-array-and-vector/&#34;&gt;http://jpauclair.net/2009/12/05/tamarin-part-ii-more-on-array-and-vector/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;code style: compact() changed to pack() (prefer shorter names)&lt;/li&gt; &#xA; &lt;li&gt;added: Collection.free(): &#39;Deconstructor&#39; that nullifies all references (optimizes memory usage and results in faster garbage collection)&lt;/li&gt; &#xA; &lt;li&gt;added: Collection.remove(x:T): Removes all occurrences of x from a collection&lt;/li&gt; &#xA; &lt;li&gt;modified: Collection.clear() changed to Collection.clear(?purge = false)&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedStack.dispose(): Nullifies reference to popped element for GC&lt;/li&gt; &#xA; &lt;li&gt;modified: Set/HashMap: removed setIfAbsent() and removeIfExists() (merged into set() and remove())&lt;/li&gt; &#xA; &lt;li&gt;modified: improved Collection.toArray()/Collection.toDA()&lt;/li&gt; &#xA; &lt;li&gt;modified: swc files only: Collection.iterator():Object now typed to Collection.iterator():Itr&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.1 (released 2010-03-15)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: TreeNode.getChildIndex()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedStack.clear()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedStack.toArray()/toVector()&lt;/li&gt; &#xA; &lt;li&gt;added: Stack interface (implemented by ArrayedStack/LinkedStack)&lt;/li&gt; &#xA; &lt;li&gt;added: Queue interface (implemented by ArrayedQueue/LinkedQueue)&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeBuilder.removeChild()&lt;/li&gt; &#xA; &lt;li&gt;modified: removed superfluous type parameter from Visitable interface&lt;/li&gt; &#xA; &lt;li&gt;modified: enhanced Bits class (new methods + cross platform compatibility)&lt;/li&gt; &#xA; &lt;li&gt;modified: enhanced BitVector class (cross platform compatibility)&lt;/li&gt; &#xA; &lt;li&gt;added: new MemoryManager (&lt;a href=&#34;http://lab.polygonal.de/2010/03/04/memorymanager-revisited&#34;&gt;http://lab.polygonal.de/2010/03/04/memorymanager-revisited&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;added: ShortMemory for storing 16bit integers.&lt;/li&gt; &#xA; &lt;li&gt;fixed: BitVector.ofBytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.06 (released 2010-01-31)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added: ArrayConvert helper class&lt;/li&gt; &#xA; &lt;li&gt;added: ArrayedQueue, ArrayedStack, Vector: swp() and cpy() methods&lt;/li&gt; &#xA; &lt;li&gt;added: LinkedStack, LinkedQueue, SLL, DLL: size constraint when compiled with -debug&lt;/li&gt; &#xA; &lt;li&gt;modified: ArrayedQueue, ArrayedStack, Vector: renamed getAt()/setAt() to get()/set()&lt;/li&gt; &#xA; &lt;li&gt;modified: SLL.nodeOf(): from parameter is now optional (matches DLL.nodeOf())&lt;/li&gt; &#xA; &lt;li&gt;fixed: ArrayedStack.push(): maxSize() assert not fired&lt;/li&gt; &#xA; &lt;li&gt;fixed: Vector.pushBack, pushFront(), insertAt(): maxSize() assert not fired&lt;/li&gt; &#xA; &lt;li&gt;modified: SLL, DLL.remove(node): returns the next node in the list&lt;/li&gt; &#xA; &lt;li&gt;fixed: Vector.iterator()#reset()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Bits.hasAllBits()&lt;/li&gt; &#xA; &lt;li&gt;code style: type inference for optional parameters&lt;/li&gt; &#xA; &lt;li&gt;modified: small optimization in TreeNode.preorder and TreeNode.postorder&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode/Graph/BinaryTreeNode: invalid stack for iterative preorder/inorder/postorder traversals (called from within visit()/process())&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode/Graph/BinaryTreeNode: preorder/inorder/postorder: now accepts optional user data that is passed to every visited node&lt;/li&gt; &#xA; &lt;li&gt;modified: TreeWalker.appendChild(),prependChild(),insertBeforeChild(),insertAfterChild(): now returns the node object storing the child&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeWalker.new(): wrong vertical pointer&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.getRoot(): finds the root of the tree&lt;/li&gt; &#xA; &lt;li&gt;added: Graph.isMarked()&lt;/li&gt; &#xA; &lt;li&gt;added: BitMemory/DoubleMemory/FloatMemory/IntMemory: getIndex(i:Int): memory byte offset for value at index i&lt;/li&gt; &#xA; &lt;li&gt;code style: different &#39;friend&#39; syntax that ensures strict typing for improved performance (&lt;a href=&#34;http://www.weblob.net/2010/01/friend-types-are-slow-really&#34;&gt;http://www.weblob.net/2010/01/friend-types-are-slow-really&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;modified: Graph: added maxSize() constraint() for debugging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.05 (released 2009-12-24)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all: interfaces can be accessed in swc files&lt;/li&gt; &#xA; &lt;li&gt;all: parameter names are now available in swc files&lt;/li&gt; &#xA; &lt;li&gt;all: switched from flash.Vector to Array for now because a dynamic array (used in swc files) is faster than a dynamic vector and alchemy memory is much faster than typed number vectors.&lt;/li&gt; &#xA; &lt;li&gt;all: iterators now implement de.polygonal.ds.Itr&amp;lt;T&amp;gt; (to distinguish between the built-in Iterator typedef)&lt;/li&gt; &#xA; &lt;li&gt;all: iterators can be reused by calling iterator.reset() when typed to ResettableIterator&amp;lt;T&amp;gt; or Itr&amp;lt;T&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;all: enhanced assign(): collection can be filled entirely/partially with elements&lt;/li&gt; &#xA; &lt;li&gt;all: enhanced shuffle(): now accepts external random values so different RNG/PRNG can be used.&lt;/li&gt; &#xA; &lt;li&gt;all: enhanced Collection.toArray() and Collection.toVector()&lt;/li&gt; &#xA; &lt;li&gt;all: minor documentation improvements&lt;/li&gt; &#xA; &lt;li&gt;added: Vector collection (growable dense array) as a more advanced Array/Vector replacement (no performance degradation in Haxe).&lt;/li&gt; &#xA; &lt;li&gt;added: compact() method for growable collections that use an array (ArrayedStack, Heap, PriorityQueue, Vector)&lt;/li&gt; &#xA; &lt;li&gt;added: TreeNode.find()&lt;/li&gt; &#xA; &lt;li&gt;added: Bits.hx class (much nicer/faster with &#39;using&#39; syntax) as a replacement for BitField.hx&lt;/li&gt; &#xA; &lt;li&gt;added: -D no_rtti compiler flag (disables haxe.rtti.Generic)&lt;/li&gt; &#xA; &lt;li&gt;modified: Graph.size(), HashMap.size() and Set.size(): now O(c) instead of O(n)&lt;/li&gt; &#xA; &lt;li&gt;modified: removed size constraint from ArrayedStack, Heap and PriorityQueue (grows on demand)&lt;/li&gt; &#xA; &lt;li&gt;modified: removed obsolete isFull()/capacity() methods&lt;/li&gt; &#xA; &lt;li&gt;fixed: DLL insertionSort&lt;/li&gt; &#xA; &lt;li&gt;fixed: MemoryManager.defragment() + minor improvements&lt;/li&gt; &#xA; &lt;li&gt;fixed: graph.addSingleArc()&lt;/li&gt; &#xA; &lt;li&gt;fixed: Array3.walk()&lt;/li&gt; &#xA; &lt;li&gt;fixed: LinkedStack.iterator()&lt;/li&gt; &#xA; &lt;li&gt;fixed: HashMap.toString()&lt;/li&gt; &#xA; &lt;li&gt;fixed: ObjectPool.get()&lt;/li&gt; &#xA; &lt;li&gt;fixed: TreeNode.height()&lt;/li&gt; &#xA; &lt;li&gt;fixed: BST.height()&lt;/li&gt; &#xA; &lt;li&gt;fixed: BST.toString()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0 (released 2009-12-09)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significant performance improvements compared to as3ds thanks to the Haxe compiler :)&lt;/li&gt; &#xA; &lt;li&gt;Fixed most issues posted on the old as3ds google code projects page&lt;/li&gt; &#xA; &lt;li&gt;Enhanced documentation&lt;/li&gt; &#xA; &lt;li&gt;Supports &#34;alchemy memory&#34;&lt;/li&gt; &#xA; &lt;li&gt;Collections can be cloned (shallow&amp;amp;deep copy)&lt;/li&gt; &#xA; &lt;li&gt;Some collections can be shuffled&lt;/li&gt; &#xA; &lt;li&gt;Added support for circular doubly linked lists&lt;/li&gt; &#xA; &lt;li&gt;Added object pooling library&lt;/li&gt; &#xA; &lt;li&gt;Added iterative traversal algorithms&lt;/li&gt; &#xA; &lt;li&gt;Added linked graph structure&lt;/li&gt; &#xA; &lt;li&gt;Many small improvements I don&#39;t remember...&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>