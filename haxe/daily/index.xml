<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:34:24Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lemonking99/FNF-TOK-Psych-Engine-Port</title>
    <updated>2022-10-09T01:34:24Z</updated>
    <id>tag:github.com,2022-10-09:/lemonking99/FNF-TOK-Psych-Engine-Port</id>
    <link href="https://github.com/lemonking99/FNF-TOK-Psych-Engine-Port" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Friday Night Funkin&#39; - Psych Engine&lt;/h1&gt; &#xA;&lt;p&gt;Engine originally used on &lt;a href=&#34;https://gamebanana.com/mods/301107&#34;&gt;Mind Games Mod&lt;/a&gt;, intended to be a fix for the vanilla version&#39;s many issues while keeping the casual play aspect of it. Also aiming to be an easier alternative to newbie coders.&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://haxe.org/download/&#34;&gt;the most up-to-date version of Haxe&lt;/a&gt;, seriously, stop using 4.1.5, it misses some stuff.&lt;/p&gt; &#xA;&lt;p&gt;Follow a Friday Night Funkin&#39; source code compilation tutorial, after this you will need to install LuaJIT.&lt;/p&gt; &#xA;&lt;p&gt;To install LuaJIT do this: &lt;code&gt;haxelib git linc_luajit https://github.com/AndreiRudenko/linc_luajit &lt;/code&gt; on a Command prompt/PowerShell&lt;/p&gt; &#xA;&lt;p&gt;...Or if you don&#39;t want your mod to be able to run .lua scripts, delete the &#34;LUA_ALLOWED&#34; line on Project.xml&lt;/p&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shadow Mario - Coding&lt;/li&gt; &#xA; &lt;li&gt;RiverOaken - Arts and Animations&lt;/li&gt; &#xA; &lt;li&gt;bbpanzu - Assistant Coding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shubs - New Input System&lt;/li&gt; &#xA; &lt;li&gt;SqirraRNG - Chart Editor&#39;s Sound Waveform base code&lt;/li&gt; &#xA; &lt;li&gt;iFlicky - Delay/Combo Menu Song Composer + Dialogue Sounds&lt;/li&gt; &#xA; &lt;li&gt;PolybiusProxy - .MP4 Loader Extension&lt;/li&gt; &#xA; &lt;li&gt;Keoiki - Note Splash Animations&lt;/li&gt; &#xA; &lt;li&gt;Smokey - Spritemap Texture Atlas support&lt;/li&gt; &#xA; &lt;li&gt;Cary - OG Resolution code&lt;/li&gt; &#xA; &lt;li&gt;Nebula_Zorua - VCR Shader code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;Attractive animated dialogue boxes:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/127706669-71cd5cdb-5c2a-4ecc-871b-98a276ae8070.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mod Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Probably one of the main points of this engine, you can code in .lua files outside of the source code, making your own weeks without even messing with the source!&lt;/li&gt; &#xA; &lt;li&gt;Comes with a Mod Organizing/Disabling Menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Atleast one change to every week:&lt;/h2&gt; &#xA;&lt;h3&gt;Week 1:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New Dad Left sing sprite&lt;/li&gt; &#xA; &lt;li&gt;Unused stage lights are now used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 2:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both BF and Skid &amp;amp; Pump does &#34;Hey!&#34; animations&lt;/li&gt; &#xA; &lt;li&gt;Thunders does a quick light flash and zooms the camera in slightly&lt;/li&gt; &#xA; &lt;li&gt;Added a quick transition/cutscene to Monster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 3:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BF does &#34;Hey!&#34; during Philly Nice&lt;/li&gt; &#xA; &lt;li&gt;Blammed has a cool new colors flash during that sick part of the song&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 4:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better hair physics for Mom/Boyfriend (Maybe even slightly better than Week 7&#39;s &lt;span&gt;ðŸ‘€&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Henchmen die during all songs. Yeah :(&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 5:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bottom Boppers and GF does &#34;Hey!&#34; animations during Cocoa and Eggnog&lt;/li&gt; &#xA; &lt;li&gt;On Winter Horrorland, GF bops her head slower in some parts of the song.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 6:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Thorns, the HUD is hidden during the cutscene&lt;/li&gt; &#xA; &lt;li&gt;Also there&#39;s the Background girls being spooky during the &#34;Hey!&#34; parts of the Instrumental&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cool new Chart Editor changes and countless bug fixes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ShadowMario/FNF-PsychEngine/raw/main/docs/img/chart.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can now chart &#34;Event&#34; notes, which are bookmarks that trigger specific actions that usually were hardcoded on the vanilla version of the game.&lt;/li&gt; &#xA; &lt;li&gt;Your song&#39;s BPM can now have decimal values&lt;/li&gt; &#xA; &lt;li&gt;You can manually adjust a Note&#39;s strum time if you&#39;re really going for milisecond precision&lt;/li&gt; &#xA; &lt;li&gt;You can change a note&#39;s type on the Editor, it comes with two example types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alt Animation: Forces an alt animation to play, useful for songs like Ugh/Stress&lt;/li&gt; &#xA;   &lt;li&gt;Hey: Forces a &#34;Hey&#34; animation instead of the base Sing animation, if Boyfriend hits this note, Girlfriend will do a &#34;Hey!&#34; too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multiple editors to assist you in making your own Mod&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/144629914-1fe55999-2f18-4cc1-bc70-afe616d74ae5.png&#34; alt=&#34;Screenshot_3&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working both for Source code modding and Downloaded builds!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Story mode menu rework:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UB2EKpV.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added a different BG to every song (less Tutorial)&lt;/li&gt; &#xA; &lt;li&gt;All menu characters are now in individual spritesheets, makes modding it easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits menu&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/144632635-f263fb22-b879-4d6b-96d6-865e9562b907.png&#34; alt=&#34;Screenshot_1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add a head icon, name, description and a Redirect link for when the player presses Enter while the item is currently selected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Awards/Achievements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The engine comes with 16 example achievements that you can mess with and learn how it works (Check Achievements.hx and search for &#34;checkForAchievement&#34; on PlayState.hx)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options menu:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can change Note colors, Delay and Combo Offset, Controls and Preferences there.&lt;/li&gt; &#xA; &lt;li&gt;On Preferences you can toggle Downscroll, Middlescroll, Anti-Aliasing, Framerate, Low Quality, Note Splashes, Flashing Lights, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other gameplay features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the enemy hits a note, their strum note also glows.&lt;/li&gt; &#xA; &lt;li&gt;Lag doesn&#39;t impact the camera movement and player icon scaling anymore.&lt;/li&gt; &#xA; &lt;li&gt;Some stuff based on Week 7&#39;s changes has been put in (Background colors on Freeplay, Note splashes)&lt;/li&gt; &#xA; &lt;li&gt;You can reset your Score on Freeplay/Story Mode by pressing Reset button.&lt;/li&gt; &#xA; &lt;li&gt;You can listen to a song or adjust Scroll Speed/Damage taken/etc. on Freeplay by pressing Space.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Sirox228/Source-Engine</title>
    <updated>2022-10-09T01:34:24Z</updated>
    <id>tag:github.com,2022-10-09:/Sirox228/Source-Engine</id>
    <link href="https://github.com/Sirox228/Source-Engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Engine&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sirox228/Source-Engine/master/icon.png&#34; alt=&#34;wut&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;A game engine, written on haxe that uses hscript as the base, the engine is called &#39;source&#39; because whole game code is written in hscript file that is not part of the source code, so this engine allows you to code any game want without compiling source code.&lt;/h2&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h1&gt;Android&lt;/h1&gt; &#xA;&lt;p&gt;1.Open the engine and accept the permission request, there would be an error, because you didn&#39;t create game files for now.&lt;/p&gt; &#xA;&lt;p&gt;2.Go to your phone&#39;s storage, enable &#39;show hidden folders&#39;, there would be a folder called &lt;code&gt;.Source-Engine&lt;/code&gt;, inside that folder create a file called &lt;code&gt;current.txt&lt;/code&gt; and write in it your game&#39;s name, then, create a folder, with the same name, as you wrote in &lt;code&gt;current.txt&lt;/code&gt;, inside that folder, create file called &lt;code&gt;main.hx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;3.Open the engine, no errors would appear now, congratulations, you installed the engine&lt;/p&gt; &#xA;&lt;h1&gt;Windows&lt;/h1&gt; &#xA;&lt;p&gt;1.Inside folder with .exe file of the game, create &lt;code&gt;current.txt&lt;/code&gt; file and write in it your game&#39;s name, then, create a folder, with the same name, as you wrote in &lt;code&gt;current.txt&lt;/code&gt;, inside that folder, create file called &lt;code&gt;main.hx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;2.Open the engine, congratulations, you installed the engine&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage of the Engine&lt;/h2&gt; &#xA;&lt;h1&gt;Available Packages&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;hxvm-luajit and linc_luajit, you are able to make lua scripts from hscript file&lt;/li&gt; &#xA; &lt;li&gt;hxCodec, you are able to play videos in mp4 format&lt;/li&gt; &#xA; &lt;li&gt;spinehaxe (spine port to haxe), you are able to make spine sprites&lt;/li&gt; &#xA; &lt;li&gt;hscript, yoy can call another hscript (.hx) scripts from main.hx&lt;/li&gt; &#xA; &lt;li&gt;extension-androidtools, you are able to use some jni functions (available only in android version for obvious reasons)&lt;/li&gt; &#xA; &lt;li&gt;flixel, flixel-addons and flixel-ui, you can use flixel in it as you want&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Engine&#39;s hscript basic functions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;script&lt;/code&gt; - current instance of the HScript class that runs this file&lt;/p&gt; &#xA;&lt;p&gt;all of those are already in hscript and no need to import&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;import(&#39;package.class&#39;); // you need to write package and class/enum name of the class/enum you want to import, typedef is unsupported.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;HClass class&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;available functions and variable for script you&#39;re connecting to that HClass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var class:HClass = new HClass(&#34;path/to/hscript/file.hx&#34;, [arguements, for, functions]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; - current instance of the HClass object that launched this hscript file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function new(specify here all arguments, you wrote after path in new HClass) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned when creating HClass object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function create(specify here all arguments, you wrote after path in new HClass) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned instantly after call of the &lt;code&gt;new&lt;/code&gt; function is completed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;HObject class &lt;em&gt;&lt;strong&gt;!important!&lt;/strong&gt;&lt;/em&gt; this class is an extend of flixel.FlxSprite, so it&#39;s a child class of FlxSprite, that means, that you can do same things as with FlxSprite with HObject. (for example, set the frames for the sprite: &lt;code&gt;object.frames = FlxAtlasFrames....&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;available functions and variable for script you&#39;re connecting to that HObject:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var object:HObject = new HObject(x, y, &#34;path/to/hscript/file.hx&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;object&lt;/code&gt; - current instance of the HObject object that launched this hscript file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function new(x, y) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned when creating HClass object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function create(x, y) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned instantly after call of the &lt;code&gt;new&lt;/code&gt; function is completed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function update(elapsed) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned each frame&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function updatePost(elapsed) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;same as &lt;code&gt;update&lt;/code&gt; function, but this one runs after &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; call in the source code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;setOffset(animName, x, y)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that sets the offset for animation of the object into an array&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;updateOffset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that applying offsets that are set for current animation, if no offsets set to animation, offset is set to x - 0, y - 0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function destroy() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned when object is going to be destroyed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;other functions that don&#39;t need explanation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function draw() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;should &lt;code&gt;return true;&lt;/code&gt; to call &lt;code&gt;super&lt;/code&gt; and &lt;code&gt;return false;&lt;/code&gt; to not call &lt;code&gt;super&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function getGraphicMidpoint(?point:FlxPoint) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function getRotatedBounds(?newRect:FlxRect) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function getScreenBounds(?newRect:FlxRect, ?camera:FlxCamera) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function pixelsOverlapPoint(point:FlxPoint, Mask:Int = 0xFF, ?Camera:FlxCamera) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function loadGraphic(graphic:FlxGraphicAsset, animated:Bool = false, width:Int = 0, height:Int = 0, unique:Bool = false, ?Key:String) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;should &lt;code&gt;return true;&lt;/code&gt; to call &lt;code&gt;super&lt;/code&gt; and &lt;code&gt;return false;&lt;/code&gt; to not call &lt;code&gt;super&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function getScreenBounds(?newRect:FlxRect, ?camera:FlxCamera) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;HScript class&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;available functions and variable for script you&#39;re connecting to that HClass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var script:HScript = new HScript(&#34;path/to/hscript/file.hx&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function run() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that runs and parses the script, you can&#39;t set variables to script after calling this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function setVariable(name:String, val:Dynamic) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that sets &lt;code&gt;val&lt;/code&gt; class/variable as &lt;code&gt;name&lt;/code&gt; to script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function getVariable(name:String) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that returns a variable from script, specified by &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function executeFunc(funcName:String, ?args:Array&amp;lt;Any&amp;gt;) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that executes a function from script slecified by &lt;code&gt;funcName&lt;/code&gt; with &lt;code&gt;args&lt;/code&gt; arguments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;HState class &lt;em&gt;&lt;strong&gt;!important!&lt;/strong&gt;&lt;/em&gt; this class is an extend of flixel.FlxState, so it&#39;s a child class of FlxState, that means, that you can do same things as with FlxState with HState.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;available functions and variable for script you&#39;re connecting to that HClass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var state:HState = new HState(&#34;path/to/hscript/file.hx&#34;, [arguements, for, functions]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;state&lt;/code&gt; - current instance of the HState object that launched this hscript file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function insert(i:Int, obj:FlxBasic) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that adds an object &lt;code&gt;obj&lt;/code&gt; to layer &lt;code&gt;i&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function destroy() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned when object is going to be destroyed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function new(specify here all arguments, you wrote after path in new HState) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned when creating HState object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function create() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned instantly after call of the &lt;code&gt;new&lt;/code&gt; function is completed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function update(elapsed) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned each frame&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function updatePost(elapsed) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;same as &lt;code&gt;update&lt;/code&gt; function, but this one runs after &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; call in the source code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;other functions that don&#39;t need explanation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function add(obj:FlxBasic) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function remove(obj:FlxBasic) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function onFocus() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function onFocusLost() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function onResize(width:Int, height:Int) {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function draw() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;HSubState class&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;literally same as HState, but this one is child class of flixel.FlxSubState, new things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;substate&lt;/code&gt; - current instance of the HSubState object that launched this hscript file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;P.S. &lt;code&gt;state&lt;/code&gt; is unavailable in HSubState&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;function close() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function that is runned when substate is closing&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>