<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-14T01:32:26Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HaxeFoundation/hscript</title>
    <updated>2025-07-14T01:32:26Z</updated>
    <id>tag:github.com,2025-07-14:/HaxeFoundation/hscript</id>
    <link href="https://github.com/HaxeFoundation/hscript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parser and interpreter for Haxe expressions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hscript&lt;/h1&gt; &#xA;&lt;p&gt;Parse and evalutate Haxe expressions.&lt;/p&gt; &#xA;&lt;p&gt;In some projects it&#39;s sometimes useful to be able to interpret some code dynamically, without recompilation.&lt;/p&gt; &#xA;&lt;p&gt;Haxe script is a complete subset of the Haxe language.&lt;/p&gt; &#xA;&lt;p&gt;It is dynamically typed but allows all Haxe expressions apart from type (class,enum,typedef) declarations.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var expr = &#34;var x = 4; 1 + 2 * x&#34;;&#xA;var parser = new hscript.Parser();&#xA;var ast = parser.parseString(expr);&#xA;var interp = new hscript.Interp();&#xA;trace(interp.execute(ast));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of a parsing error an &lt;code&gt;hscript.Expr.Error&lt;/code&gt; is thrown. You can use &lt;code&gt;parser.line&lt;/code&gt; to check the line number.&lt;/p&gt; &#xA;&lt;p&gt;You can set some globaly accessible identifiers by using &lt;code&gt;interp.variables.set(&#34;name&#34;,value)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a small example of Haxe Script usage :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var script = &#34;&#xA;&#x9;var sum = 0;&#xA;&#x9;for( a in angles )&#xA;&#x9;&#x9;sum += Math.cos(a);&#xA;&#x9;sum; &#xA;&#34;;&#xA;var parser = new hscript.Parser();&#xA;var program = parser.parseString(script);&#xA;var interp = new hscript.Interp();&#xA;interp.variables.set(&#34;Math&#34;,Math); // share the Math class&#xA;interp.variables.set(&#34;angles&#34;,[0,1,2,3]); // set the angles list&#xA;trace( interp.execute(program) ); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will calculate the sum of the cosines of the angles given as input.&lt;/p&gt; &#xA;&lt;p&gt;Haxe Script has not been really optimized, and it&#39;s not meant to be very fast. But it&#39;s entirely crossplatform since it&#39;s pure Haxe code (it doesn&#39;t use any platform-specific API).&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;When compiled with &lt;code&gt;-D hscriptPos&lt;/code&gt; you will get fine error reporting at parsing time.&lt;/p&gt; &#xA;&lt;p&gt;You can subclass &lt;code&gt;hscript.Interp&lt;/code&gt; to override behaviors for &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;fcall&lt;/code&gt; and &lt;code&gt;cnew&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can add more binary and unary operations to the parser by setting &lt;code&gt;opPriority&lt;/code&gt;, &lt;code&gt;opRightAssoc&lt;/code&gt; and &lt;code&gt;unops&lt;/code&gt; content.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;parser.allowJSON&lt;/code&gt; to allow JSON data.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;parser.allowTypes&lt;/code&gt; to parse types for local vars, exceptions, function args and return types. Types are ignored by the interpreter.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;parser.allowMetadata&lt;/code&gt; to parse metadata before expressions on in anonymous types. Metadata are ignored by the interpreter.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;new hscript.Macro(pos).convert(ast)&lt;/code&gt; to convert an hscript AST to a Haxe macros one.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;hscript.Checker&lt;/code&gt; in order to type check and even get completion, using &lt;code&gt;haxe -xml&lt;/code&gt; output for type information.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Compared to Haxe, limitations are :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;switch&lt;/code&gt; construct is supported but not pattern matching (no variable capture, we use strict equality to compare &lt;code&gt;case&lt;/code&gt; values and &lt;code&gt;switch&lt;/code&gt; value)&lt;/li&gt; &#xA; &lt;li&gt;only one variable declaration is allowed in &lt;code&gt;var&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;the parser supports optional types for &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; if &lt;code&gt;allowTypes&lt;/code&gt; is set, but the interpreter ignores them&lt;/li&gt; &#xA; &lt;li&gt;you can enable per-expression position tracking by compiling with &lt;code&gt;-D hscriptPos&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;you can parse some type declarations (import, class, typedef, etc.) with parseModule&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;In order to install Haxe Script, use &lt;code&gt;haxelib install hscript&lt;/code&gt; and compile your program with &lt;code&gt;-lib hscript&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These are the main required files in hscript :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Expr&lt;/code&gt; : contains enums declarations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Parser&lt;/code&gt; : a small parser that turns a string into an expression structure (AST)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Interp&lt;/code&gt; : a small interpreter that execute the AST and returns the latest evaluated value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some other optional files :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Async&lt;/code&gt; : converts Expr into asynchronous version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Bytes&lt;/code&gt; : Expr serializer/unserializer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Checker&lt;/code&gt; : type checking and completion for hscript Expr&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Macro&lt;/code&gt; : convert Haxe macro into hscript Expr&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Printer&lt;/code&gt; : convert hscript Expr to String&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hscript.Tools&lt;/code&gt; : utility functions (map/iter)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>