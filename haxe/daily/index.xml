<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-19T01:36:55Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MasterEric/hxcpp-interop-testbench</title>
    <updated>2023-01-19T01:36:55Z</updated>
    <id>tag:github.com,2023-01-19:/MasterEric/hxcpp-interop-testbench</id>
    <link href="https://github.com/MasterEric/hxcpp-interop-testbench" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal working example projects to call C++ code from Haxe.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hxcpp-interop-testbench&lt;/h1&gt; &#xA;&lt;p&gt;This repository demonstrates using the various tools available to Haxe to directly interoperate with C++.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;strong&gt;native library&lt;/strong&gt; is one which is built as a &lt;code&gt;dll&lt;/code&gt; (on Windows), a &lt;code&gt;.so&lt;/code&gt; (on Linux), or &lt;code&gt;.dylib&lt;/code&gt; (on Mac) file, which contains machine language for the target architecture, which is then linked with the target application.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;foreign function interface&lt;/strong&gt; (FFI) is a set of code which allows for executing external code from within a given language. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Haxe&#39;s foreign function interfaces allow for executing code from native libraries, without recompiling the runtime itself.&lt;/li&gt; &#xA;   &lt;li&gt;This means that Haxe can access and execute code from a DLL in any language, however setup for this is very different between targets and only &lt;code&gt;hxcpp&lt;/code&gt; works with this out-of-the-box.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;target native library&lt;/strong&gt; is one which is built as a library for a specific programming language, and thus only work when building to that target. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use Haxe&#39;s &lt;code&gt;extern&lt;/code&gt; keyword to include these libraries in your project, and these are essential for operating on code outside of Haxe.&lt;/li&gt; &#xA;   &lt;li&gt;For example, when building for the Java target, &lt;code&gt;jar&lt;/code&gt; files can be used as a target native library, and when building for the NodeJS target, &lt;code&gt;js&lt;/code&gt; files from NPM packages can be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Each sample provides a minimum example project, providing a simple addition function to demonstrate how to allow the C++ code to receive and return values. The sample libraries are made for pure Haxe; they do not require any additional libraries (such as Lime) to properly build, but should be fully compatible with them.&lt;/p&gt; &#xA;&lt;p&gt;This library contains six examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Requires Separate DLL&lt;/th&gt; &#xA;   &lt;th&gt;Ease of Use†&lt;/th&gt; &#xA;   &lt;th&gt;Supports Other Targets&lt;/th&gt; &#xA;   &lt;th&gt;Supports Haxelibs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;1/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;extern-embedded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;4/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;function-code&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;4/5&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cffi-legacy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;2/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cffi-prime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;3/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ammer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;5/5&lt;/td&gt; &#xA;   &lt;td&gt;✅††&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;† This is metric is based on my personal opinion on the amount of effort required to work with each method.&lt;br&gt; †† The current version of &lt;code&gt;ammer&lt;/code&gt; is targeted at &lt;code&gt;hxcpp&lt;/code&gt; and &lt;code&gt;hashlink&lt;/code&gt;, with more targets in development.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;extern&lt;/code&gt;: C++ Extern Project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires the target application to use the &lt;code&gt;hxcpp&lt;/code&gt; target, and does not support other targets.&lt;/li&gt; &#xA;   &lt;li&gt;C++ code is placed into a separate folder from the Haxe code for organization.&lt;/li&gt; &#xA;   &lt;li&gt;Links with the source code at build time, and doesn&#39;t require a DLL or a separate compilation step. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project MAY run without any &lt;code&gt;testinterop.ndll&lt;/code&gt; file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Linked library cannot be updated without recompiling the executable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extern-embedded&lt;/code&gt;: C++ Embedded Externs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires the target application to use the &lt;code&gt;hxcpp&lt;/code&gt; target, and does not support other targets.&lt;/li&gt; &#xA;   &lt;li&gt;C++ code is embedded into the Haxe code. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Results in cleaner code on smaller projects but unmaintainable code on larger projects.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Embedded into source code at build time, and doesn&#39;t require a DLL or separate compilation step. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project MAY run without any &lt;code&gt;testinterop.ndll&lt;/code&gt; file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Linked library cannot be updated without recompiling the executable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function-code&lt;/code&gt;: functionCode annotation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Embeds the string directly into the compiled application, replacing any haxe expressions in the function&#39;s method body.&lt;/li&gt; &#xA;   &lt;li&gt;Easier to sort out functions than &lt;code&gt;extern-embedded&lt;/code&gt; but harder to make them call each other.&lt;/li&gt; &#xA;   &lt;li&gt;Works on &lt;code&gt;C++&lt;/code&gt; and &lt;code&gt;C#&lt;/code&gt; targets.&lt;/li&gt; &#xA;   &lt;li&gt;NOT working on &lt;code&gt;Python&lt;/code&gt; targets (the &lt;code&gt;functionCode&lt;/code&gt; annotation is ignored) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;It would be cool if you could use compiler defines to choose which language-specific code to use but guess not.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cffi-legacy&lt;/code&gt; CFFI Legacy &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Values must be boxed to be sent between C++ and Haxe, and functions are weakly typed (only checked at runtime).&lt;/li&gt; &#xA;   &lt;li&gt;Links with the built native library at runtime, thus the &lt;code&gt;ndll&lt;/code&gt; file must be included with the EXE when distributing. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project CANNOT run without the &lt;code&gt;testinterop.ndll&lt;/code&gt; file in a nearby directory.&lt;/li&gt; &#xA;     &lt;li&gt;NDLL file can be updated or replaced after building without modifying the executable.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Complex configuration required to use with other targets (&lt;code&gt;hashlink&lt;/code&gt;, &lt;code&gt;neko&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;lua&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cffi-prime&lt;/code&gt; CFFI Prime &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modern upgrade to Haxe CFFI.&lt;/li&gt; &#xA;   &lt;li&gt;Values do not need to be boxed and functions are strongly typed (checked at compilation time).&lt;/li&gt; &#xA;   &lt;li&gt;Links with the built native library at runtime, thus the &lt;code&gt;ndll&lt;/code&gt; file must be included with the EXE when distributing. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project CANNOT run without the &lt;code&gt;testinterop.ndll&lt;/code&gt; file in a nearby directory.&lt;/li&gt; &#xA;     &lt;li&gt;NDLL file can be updated or replaced after building without modifying the executable.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Complex configuration required to use with other targets (&lt;code&gt;hashlink&lt;/code&gt;, &lt;code&gt;neko&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;lua&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Aurel300/ammer&#34;&gt;ammer&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Utilizes a library by Aurel300&lt;/li&gt; &#xA;   &lt;li&gt;Vastly simplified linking process&lt;/li&gt; &#xA;   &lt;li&gt;No additional configuration needed to link against &lt;code&gt;hashlink&lt;/code&gt; and &lt;code&gt;lua&lt;/code&gt; (other targets in development)&lt;/li&gt; &#xA;   &lt;li&gt;Complex configuration required to use linked code as a haxelib (library packaging in development)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Useful Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snowkit/hxcpp-guide/issues/1&#34;&gt;https://github.com/snowkit/hxcpp-guide/issues/1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.haxe.org/t/some-questions-about-the-ammer-library-ffi-haxelib-externs/2271&#34;&gt;https://community.haxe.org/t/some-questions-about-the-ammer-library-ffi-haxelib-externs/2271&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Aurel300/ammer&#34;&gt;https://github.com/Aurel300/ammer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/larsiusprime/steamwrap&#34;&gt;https://github.com/larsiusprime/steamwrap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>