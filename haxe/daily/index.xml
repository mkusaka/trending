<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-21T01:36:46Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MAJigsaw-Entertainment/FNF-PsychEngine</title>
    <updated>2023-01-21T01:36:46Z</updated>
    <id>tag:github.com,2023-01-21:/MAJigsaw-Entertainment/FNF-PsychEngine</id>
    <link href="https://github.com/MAJigsaw-Entertainment/FNF-PsychEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;some people wanted it back so here it is!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Friday Night Funkin&#39; - Psych Engine With Android Support&lt;/h1&gt; &#xA;&lt;p&gt;Engine originally used on &lt;a href=&#34;https://gamebanana.com/mods/301107&#34;&gt;Mind Games Mod&lt;/a&gt;, intended to be a fix for the vanilla version&#39;s many issues while keeping the casual play aspect of it. Also aiming to be an easier alternative to newbie coders.&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://haxe.org/download/&#34;&gt;the most up-to-date version of Haxe&lt;/a&gt;, seriously, stop using 4.1.5, it misses some stuff.&lt;/p&gt; &#xA;&lt;p&gt;Follow a Friday Night Funkin&#39; source code compilation tutorial, after this you will need to install LuaJIT.&lt;/p&gt; &#xA;&lt;p&gt;To install LuaJIT do this: &lt;code&gt;haxelib git linc_luajit https://github.com/jigsaw-4277821/linc_luajit&lt;/code&gt; on a CMD/PowerShell window&lt;/p&gt; &#xA;&lt;p&gt;...Or if you don&#39;t want your mod to be able to run .lua scripts, delete the &#34;LUA_ALLOWED&#34; line on Project.xml&lt;/p&gt; &#xA;&lt;p&gt;If you get an error about StatePointer when using Lua, run &lt;code&gt;haxelib remove linc_luajit&lt;/code&gt; into CMD/PowerShell, then re-install linc_luajit.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Build Instructions For Android:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&#34;&gt;JDK&lt;/a&gt; - Download version &lt;code&gt;11&lt;/code&gt; of it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; - I recomend you to download the latest version&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/ndk/downloads/older_releases?hl=fi&#34;&gt;NDK&lt;/a&gt; - Download version &lt;code&gt;r21e&lt;/code&gt; (This is the version recomended by Lime)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Install JDK, Android Studio Unzip the NDK (the NDK does not need to be installed because its a zip archive)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We need to set up Android Studio for this go to android studio and find android sdk (in settings -&amp;gt; Appearance &amp;amp; Behavior -&amp;gt; system settings -&amp;gt; android sdk) &lt;img src=&#34;https://user-images.githubusercontent.com/59097731/104179652-44346000-541d-11eb-8ad1-1e4dfae304a8.PNG&#34; alt=&#34;andr&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59097731/104179943-a9885100-541d-11eb-8f69-7fb5a4bfdd37.PNG&#34; alt=&#34;andr2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You Need to install extension-androidtools&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To install &lt;code&gt;extension-androidtools&lt;/code&gt; run this: &lt;code&gt;haxelib git extension-androidtools https://github.com/jigsaw-4277821/extension-androidtools&lt;/code&gt; on a CMD/PowerShell window&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;And run command &lt;code&gt;lime setup android&lt;/code&gt; in CMD/PowerShell (You need to insert the program paths)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open project in CMD/PowerShell &lt;code&gt;cd (path to fnf source)&lt;/code&gt; And run command &lt;code&gt;lime build android -final&lt;/code&gt; The apk will be generated in this path (path to source)\export\release\android\bin\app\build\outputs\apk\debug&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want video support on your mod, simply run &lt;code&gt;haxelib install hxCodec&lt;/code&gt; on a CMD/PowerShell window&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, you can delete the &#34;VIDEOS_ALLOWED&#34; Line on Project.xml&lt;/p&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shadow Mario - Programmer&lt;/li&gt; &#xA; &lt;li&gt;RiverOaken - Artist&lt;/li&gt; &#xA; &lt;li&gt;Yoshubs - Assistant Programmer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bbpanzu - Ex-Programmer&lt;/li&gt; &#xA; &lt;li&gt;shubs - New Input System&lt;/li&gt; &#xA; &lt;li&gt;SqirraRNG - Crash Handler and Base code for Chart Editor&#39;s Waveform&lt;/li&gt; &#xA; &lt;li&gt;KadeDev - Fixed some cool stuff on Chart Editor and other PRs&lt;/li&gt; &#xA; &lt;li&gt;iFlicky - Composer of Psync and Tea Time, also made the Dialogue Sounds&lt;/li&gt; &#xA; &lt;li&gt;PolybiusProxy - .MP4 Video Loader Library (hxCodec)&lt;/li&gt; &#xA; &lt;li&gt;Keoiki - Note Splash Animations&lt;/li&gt; &#xA; &lt;li&gt;Smokey - Sprite Atlas Support&lt;/li&gt; &#xA; &lt;li&gt;Nebula the Zorua - LUA JIT Fork and some Lua reworks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Saw (M.A. Jigsaw) - All the things needed for this engine to support android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;Attractive animated dialogue boxes:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/127706669-71cd5cdb-5c2a-4ecc-871b-98a276ae8070.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mod Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Probably one of the main points of this engine, you can code in .lua files outside of the source code, making your own weeks without even messing with the source!&lt;/li&gt; &#xA; &lt;li&gt;Comes with a Mod Organizing/Disabling Menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Atleast one change to every week:&lt;/h2&gt; &#xA;&lt;h3&gt;Week 1:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New Dad Left sing sprite&lt;/li&gt; &#xA; &lt;li&gt;Unused stage lights are now used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 2:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Both BF and Skid &amp;amp; Pump does &#34;Hey!&#34; animations&lt;/li&gt; &#xA; &lt;li&gt;Thunders does a quick light flash and zooms the camera in slightly&lt;/li&gt; &#xA; &lt;li&gt;Added a quick transition/cutscene to Monster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 3:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BF does &#34;Hey!&#34; during Philly Nice&lt;/li&gt; &#xA; &lt;li&gt;Blammed has a cool new colors flash during that sick part of the song&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 4:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Better hair physics for Mom/Boyfriend (Maybe even slightly better than Week 7&#39;s &lt;span&gt;👀&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Henchmen die during all songs. Yeah :(&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 5:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bottom Boppers and GF does &#34;Hey!&#34; animations during Cocoa and Eggnog&lt;/li&gt; &#xA; &lt;li&gt;On Winter Horrorland, GF bops her head slower in some parts of the song.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Week 6:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Thorns, the HUD is hidden during the cutscene&lt;/li&gt; &#xA; &lt;li&gt;Also there&#39;s the Background girls being spooky during the &#34;Hey!&#34; parts of the Instrumental&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cool new Chart Editor changes and countless bug fixes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ShadowMario/FNF-PsychEngine/raw/main/docs/img/chart.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can now chart &#34;Event&#34; notes, which are bookmarks that trigger specific actions that usually were hardcoded on the vanilla version of the game.&lt;/li&gt; &#xA; &lt;li&gt;Your song&#39;s BPM can now have decimal values&lt;/li&gt; &#xA; &lt;li&gt;You can manually adjust a Note&#39;s strum time if you&#39;re really going for milisecond precision&lt;/li&gt; &#xA; &lt;li&gt;You can change a note&#39;s type on the Editor, it comes with two example types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alt Animation: Forces an alt animation to play, useful for songs like Ugh/Stress&lt;/li&gt; &#xA;   &lt;li&gt;Hey: Forces a &#34;Hey&#34; animation instead of the base Sing animation, if Boyfriend hits this note, Girlfriend will do a &#34;Hey!&#34; too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multiple editors to assist you in making your own Mod&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/144629914-1fe55999-2f18-4cc1-bc70-afe616d74ae5.png&#34; alt=&#34;Screenshot_3&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working both for Source code modding and Downloaded builds!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Story mode menu rework:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UB2EKpV.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added a different BG to every song (less Tutorial)&lt;/li&gt; &#xA; &lt;li&gt;All menu characters are now in individual spritesheets, makes modding it easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits menu&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/44785097/144632635-f263fb22-b879-4d6b-96d6-865e9562b907.png&#34; alt=&#34;Screenshot_1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add a head icon, name, description and a Redirect link for when the player presses Enter while the item is currently selected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Awards/Achievements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The engine comes with 16 example achievements that you can mess with and learn how it works (Check Achievements.hx and search for &#34;checkForAchievement&#34; on PlayState.hx)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options menu:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can change Note colors, Delay and Combo Offset, Controls and Preferences there.&lt;/li&gt; &#xA; &lt;li&gt;On Preferences you can toggle Downscroll, Middlescroll, Anti-Aliasing, Framerate, Low Quality, Note Splashes, Flashing Lights, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other gameplay features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the enemy hits a note, their strum note also glows.&lt;/li&gt; &#xA; &lt;li&gt;Lag doesn&#39;t impact the camera movement and player icon scaling anymore.&lt;/li&gt; &#xA; &lt;li&gt;Some stuff based on Week 7&#39;s changes has been put in (Background colors on Freeplay, Note splashes)&lt;/li&gt; &#xA; &lt;li&gt;You can reset your Score on Freeplay/Story Mode by pressing Reset button.&lt;/li&gt; &#xA; &lt;li&gt;You can listen to a song or adjust Scroll Speed/Damage taken/etc. on Freeplay by pressing Space.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>larsiusprime/polymod</title>
    <updated>2023-01-21T01:36:46Z</updated>
    <id>tag:github.com,2023-01-21:/larsiusprime/polymod</id>
    <link href="https://github.com/larsiusprime/polymod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Atomic modding framework for Haxe&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/larsiusprime/polymod/master/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Polymod&lt;/h1&gt; &#xA;&lt;p&gt;An atomic modding framework for Haxe games/apps.&lt;/p&gt; &#xA;&lt;p&gt;Polymod allows users of your application to easily and seamlessly replace assets in your application, and manage those asset replacements in a centralized way as mods. It also provides a scripting system powered by HScript, and integration with FireTongue to load assets conditionally based on the currently selected locale.&lt;/p&gt; &#xA;&lt;p&gt;Polymod supports the following Haxe frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;OpenFL&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HEAPS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NME&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lime (with or without OpenFL)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Custom (provide your own backend)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;KHA (Coming Soon)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Castle (Coming Soon)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ceramic (Coming Soon)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic sample:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/larsiusprime/polymod/master/preview.gif&#34; alt=&#34;A visual preview of the polymod OpenFL sample&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Polymod is now available via &lt;a href=&#34;https://lib.haxe.org/p/polymod/&#34;&gt;HaxeLib&lt;/a&gt;! If you have previously installed Polymod directly from git, please update your installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;haxelib install polymod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is Polymod?&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s say you have a game or app that you want to make moddable. The easiest way to do this is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make your game data-driven (expose as much of your content in the form of loose data files as possible)&lt;/li&gt; &#xA; &lt;li&gt;Let players provide their own data files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Easy enough. But what if you want players to be able to use multiple mods together? How do you manage that?&lt;/p&gt; &#xA;&lt;p&gt;Polymod solves both problems.&lt;/p&gt; &#xA;&lt;p&gt;First, it &lt;strong&gt;overrides your framework&#39;s asset system&lt;/strong&gt; with a custom one pointed at a mod folder (or folders) somewhere on the user&#39;s hard drive. Whenever you request an asset via &lt;code&gt;Assets.getBitmapData()&lt;/code&gt; or &lt;code&gt;Res.loader.load()&lt;/code&gt; call or whatever, the custom backend first checks if the mod has a modified version of this file. If it does, it returns the mod&#39;s modified version. If it doesn&#39;t, it falls through to the default asset system (the assets included with the game).&lt;/p&gt; &#xA;&lt;p&gt;Second, it &lt;strong&gt;combines mods atomically&lt;/strong&gt;. Instead of supplying one mod folder, you can provide several. Polymod will go through each folder in turn and apply the changes from each mod, automatically joining them into one combined mod at runtime. Note that this means that the order you load the mods in matters, in the case that they have overlapping changes.&lt;/p&gt; &#xA;&lt;p&gt;Polymod currently works with desktop* targets, and will eventually support other frameworks and targets.&lt;/p&gt; &#xA;&lt;p&gt;*&lt;em&gt;&lt;code&gt;sys&lt;/code&gt; target, technically. Any target with a File System.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Polymod supports the following kinds of operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace asset&lt;/li&gt; &#xA; &lt;li&gt;Append data to the end of existing asset (text only)&lt;/li&gt; &#xA; &lt;li&gt;Merge data at a specified location within an existing asset (text only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Replace logic works on any asset format. Append logic works only on text assets. Merge logic is currently supported for plaintext (TXT), CSV, TSV, and XML asset formats only. Support for JSON is planned.&lt;/p&gt; &#xA;&lt;p&gt;Samples for the OpenFL, Lime, NME, and HEAPS frameworks are provided.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Loading one mod:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;Polymod.init({&#xA;  modRoot:&#34;path/to/mods/&#34;,&#xA;  dirs:[&#34;mymod&#34;]&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading multiple mods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;Polymod.init({&#xA;  modRoot:&#34;path/to/mods/&#34;,&#xA;  dirs:[&#34;firstmod&#34;,&#34;secondmod&#34;,&#34;thirdmod&#34;,&#34;etc&#34;]&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: On Mac, the default application working directory is &lt;code&gt;&amp;lt;APPLICATION_NAME&amp;gt;.app/Contents/Resources&lt;/code&gt;, which differs from Windows and Linux. If you hard code the search path for your game&#39;s mod directory, be sure to account for this difference when targeting the Mac platform.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Be sure to call &lt;code&gt;Polymod.init()&lt;/code&gt; before you load any assets. Also note that calling &lt;code&gt;Polymod.init()&lt;/code&gt; will clear your Asset cache.&lt;/p&gt; &#xA;&lt;p&gt;After that, you just load your assets as normal:&lt;/p&gt; &#xA;&lt;p&gt;OpenFL / NME:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var myImage = Assets.getBitmapData(&#34;myImage.png&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var myImage = Assets.getImage(&#34;myImage.png&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HEAPS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var myImage = Res.loader.load(&#34;myImage.png&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return either the default asset, or a modified version if it&#39;s been replaced by a loaded mod.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For further documentation on how to configure and use Polymod in your application, please see the &lt;a href=&#34;http://larsiusprime.github.io/polymod/docs/&#34;&gt;Polymod website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.fortressofdoors.com/player-friendly-atomic-game-modding/&#34;&gt;https://www.fortressofdoors.com/player-friendly-atomic-game-modding/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EliteMasterEric/hxcpp-interop-testbench</title>
    <updated>2023-01-21T01:36:46Z</updated>
    <id>tag:github.com,2023-01-21:/EliteMasterEric/hxcpp-interop-testbench</id>
    <link href="https://github.com/EliteMasterEric/hxcpp-interop-testbench" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal working example projects to call C++ code from Haxe.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hxcpp-interop-testbench&lt;/h1&gt; &#xA;&lt;p&gt;This repository demonstrates using the various tools available to Haxe to directly interoperate with C++.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;strong&gt;native library&lt;/strong&gt; is one which is built as a &lt;code&gt;dll&lt;/code&gt; (on Windows), a &lt;code&gt;.so&lt;/code&gt; (on Linux), or &lt;code&gt;.dylib&lt;/code&gt; (on Mac) file, which contains machine language for the target architecture, which is then linked with the target application.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;foreign function interface&lt;/strong&gt; (FFI) is a set of code which allows for executing external code from within a given language. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Haxe&#39;s foreign function interfaces allow for executing code from native libraries, without recompiling the runtime itself.&lt;/li&gt; &#xA;   &lt;li&gt;This means that Haxe can access and execute code from a DLL in any language, however setup for this is very different between targets and only &lt;code&gt;hxcpp&lt;/code&gt; works with this out-of-the-box.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;target native library&lt;/strong&gt; is one which is built as a library for a specific programming language, and thus only work when building to that target. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use Haxe&#39;s &lt;code&gt;extern&lt;/code&gt; keyword to include these libraries in your project, and these are essential for operating on code outside of Haxe.&lt;/li&gt; &#xA;   &lt;li&gt;For example, when building for the Java target, &lt;code&gt;jar&lt;/code&gt; files can be used as a target native library, and when building for the NodeJS target, &lt;code&gt;js&lt;/code&gt; files from NPM packages can be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Each sample provides a minimum example project, providing a simple addition function to demonstrate how to allow the C++ code to receive and return values. The sample libraries are made for pure Haxe; they do not require any additional libraries (such as Lime) to properly build, but should be fully compatible with them.&lt;/p&gt; &#xA;&lt;p&gt;This library contains six examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Requires Separate DLL&lt;/th&gt; &#xA;   &lt;th&gt;Ease of Use†&lt;/th&gt; &#xA;   &lt;th&gt;Supports Other Targets&lt;/th&gt; &#xA;   &lt;th&gt;Supports Haxelibs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;1/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;extern-embedded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;4/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;function-code&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;4/5&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cffi-legacy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;2/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cffi-prime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;YES&lt;/td&gt; &#xA;   &lt;td&gt;3/5&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ammer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO&lt;/td&gt; &#xA;   &lt;td&gt;5/5&lt;/td&gt; &#xA;   &lt;td&gt;✅††&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;† This is metric is based on my personal opinion on the amount of effort required to work with each method.&lt;br&gt; †† The current version of &lt;code&gt;ammer&lt;/code&gt; is targeted at &lt;code&gt;hxcpp&lt;/code&gt; and &lt;code&gt;hashlink&lt;/code&gt;, with more targets in development.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;extern&lt;/code&gt;: C++ Extern Project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires the target application to use the &lt;code&gt;hxcpp&lt;/code&gt; target, and does not support other targets.&lt;/li&gt; &#xA;   &lt;li&gt;C++ code is placed into a separate folder from the Haxe code for organization.&lt;/li&gt; &#xA;   &lt;li&gt;Links with the source code at build time, and doesn&#39;t require a DLL or a separate compilation step. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project MAY run without any &lt;code&gt;testinterop.ndll&lt;/code&gt; file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Linked library cannot be updated without recompiling the executable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extern-embedded&lt;/code&gt;: C++ Embedded Externs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires the target application to use the &lt;code&gt;hxcpp&lt;/code&gt; target, and does not support other targets.&lt;/li&gt; &#xA;   &lt;li&gt;C++ code is embedded into the Haxe code. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Results in cleaner code on smaller projects but unmaintainable code on larger projects.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Embedded into source code at build time, and doesn&#39;t require a DLL or separate compilation step. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project MAY run without any &lt;code&gt;testinterop.ndll&lt;/code&gt; file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Linked library cannot be updated without recompiling the executable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function-code&lt;/code&gt;: functionCode annotation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Embeds the string directly into the compiled application, replacing any haxe expressions in the function&#39;s method body.&lt;/li&gt; &#xA;   &lt;li&gt;Easier to sort out functions than &lt;code&gt;extern-embedded&lt;/code&gt; but harder to make them call each other.&lt;/li&gt; &#xA;   &lt;li&gt;Works on &lt;code&gt;C++&lt;/code&gt; and &lt;code&gt;C#&lt;/code&gt; targets.&lt;/li&gt; &#xA;   &lt;li&gt;NOT working on &lt;code&gt;Python&lt;/code&gt; targets (the &lt;code&gt;functionCode&lt;/code&gt; annotation is ignored) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;It would be cool if you could use compiler defines to choose which language-specific code to use but guess not.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cffi-legacy&lt;/code&gt; CFFI Legacy &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Values must be boxed to be sent between C++ and Haxe, and functions are weakly typed (only checked at runtime).&lt;/li&gt; &#xA;   &lt;li&gt;Links with the built native library at runtime, thus the &lt;code&gt;ndll&lt;/code&gt; file must be included with the EXE when distributing. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project CANNOT run without the &lt;code&gt;testinterop.ndll&lt;/code&gt; file in a nearby directory.&lt;/li&gt; &#xA;     &lt;li&gt;NDLL file can be updated or replaced after building without modifying the executable.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Complex configuration required to use with other targets (&lt;code&gt;hashlink&lt;/code&gt;, &lt;code&gt;neko&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;lua&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cffi-prime&lt;/code&gt; CFFI Prime &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modern upgrade to Haxe CFFI.&lt;/li&gt; &#xA;   &lt;li&gt;Values do not need to be boxed and functions are strongly typed (checked at compilation time).&lt;/li&gt; &#xA;   &lt;li&gt;Links with the built native library at runtime, thus the &lt;code&gt;ndll&lt;/code&gt; file must be included with the EXE when distributing. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Compiled project CANNOT run without the &lt;code&gt;testinterop.ndll&lt;/code&gt; file in a nearby directory.&lt;/li&gt; &#xA;     &lt;li&gt;NDLL file can be updated or replaced after building without modifying the executable.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Complex configuration required to use with other targets (&lt;code&gt;hashlink&lt;/code&gt;, &lt;code&gt;neko&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;lua&lt;/code&gt;, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Aurel300/ammer&#34;&gt;ammer&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Utilizes a library by Aurel300&lt;/li&gt; &#xA;   &lt;li&gt;Vastly simplified linking process&lt;/li&gt; &#xA;   &lt;li&gt;No additional configuration needed to link against &lt;code&gt;hashlink&lt;/code&gt; and &lt;code&gt;lua&lt;/code&gt; (other targets in development)&lt;/li&gt; &#xA;   &lt;li&gt;Complex configuration required to use linked code as a haxelib (library packaging in development)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Useful Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snowkit/hxcpp-guide/issues/1&#34;&gt;https://github.com/snowkit/hxcpp-guide/issues/1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.haxe.org/t/some-questions-about-the-ammer-library-ffi-haxelib-externs/2271&#34;&gt;https://community.haxe.org/t/some-questions-about-the-ammer-library-ffi-haxelib-externs/2271&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Aurel300/ammer&#34;&gt;https://github.com/Aurel300/ammer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/larsiusprime/steamwrap&#34;&gt;https://github.com/larsiusprime/steamwrap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>