<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:36:04Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MAJigsaw77/FNF-Android-Porting</title>
    <updated>2022-08-28T01:36:04Z</updated>
    <id>tag:github.com,2022-08-28:/MAJigsaw77/FNF-Android-Porting</id>
    <link href="https://github.com/MAJigsaw77/FNF-Android-Porting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The things im using when i port a mod to android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FNF-Android-Porting:&lt;/h1&gt; &#xA;&lt;p&gt;The things im using when i port a mod to android&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This should be used for the FNF 0.2.8 update and engines that have this version of FNF&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PC compile instructions For Android:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&#34;&gt;JDK&lt;/a&gt; - Download version &lt;code&gt;11&lt;/code&gt; of it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; - I recomend you to download the latest version&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/ndk/downloads/older_releases?hl=fi&#34;&gt;NDK&lt;/a&gt; - Download version &lt;code&gt;r21e&lt;/code&gt; (This is the version recomended by Lime)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Install JDK, Android Studio Unzip the NDK (the NDK does not need to be installed because its a zip archive)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We need to set up Android Studio for this go to android studio and find android sdk (in settings -&amp;gt; Appearance &amp;amp; Behavior -&amp;gt; system settings -&amp;gt; android sdk) &lt;img src=&#34;https://user-images.githubusercontent.com/59097731/104179652-44346000-541d-11eb-8ad1-1e4dfae304a8.PNG&#34; alt=&#34;andr&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59097731/104179943-a9885100-541d-11eb-8f69-7fb5a4bfdd37.PNG&#34; alt=&#34;andr2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run command &lt;code&gt;lime setup android&lt;/code&gt; in CMD/PowerShell (You need to insert the program paths)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open project in CMD/PowerShell &lt;code&gt;cd (path to fnf source)&lt;/code&gt; And run command &lt;code&gt;lime build android -final&lt;/code&gt; The apk will be generated in this path (path to source)\export\release\android\bin\app\build\outputs\apk\debug&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Instructions:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You Need to install extension-androidtools&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To Install it You Need To Open Command prompt/PowerShell And Type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;haxelib git extension-androidtools https://github.com/jigsaw-4277821/extension-androidtools.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the repository code and paste it in your source code folder&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You Need to add these things in project.xml&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;On This Line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#x9;&amp;lt;!--Mobile-specific--&amp;gt;&#xA;&#x9;&amp;lt;window if=&#34;mobile&#34; orientation=&#34;landscape&#34; fullscreen=&#34;true&#34; width=&#34;0&#34; height=&#34;0&#34; resizable=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace It With&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#x9;&amp;lt;!--Mobile-specific--&amp;gt;&#xA;&#x9;&amp;lt;window if=&#34;mobile&#34; orientation=&#34;landscape&#34; fullscreen=&#34;true&#34; width=&#34;1280&#34; height=&#34;720&#34; resizable=&#34;false&#34; allow-shaders=&#34;true&#34; require-shaders=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#x9;&amp;lt;assets path=&#34;assets/android&#34; if=&#34;android&#34; /&amp;gt; &amp;lt;!-- to not have the android assets in another builds -saw --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, After the Libraries, or where the packeges are located add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#x9;&amp;lt;haxelib name=&#34;extension-androidtools&#34; if=&#34;android&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#x9;&amp;lt;!--Make&#39;s-the-Game-use-less-ram--&amp;gt;&#xA;&#x9;&amp;lt;haxedef name=&#34;HXCPP_GC_BIG_BLOCKS&#34; /&amp;gt;&#xA;&#xA;&#x9;&amp;lt;!--Always-enable-Null-Object-Reference-check--&amp;gt;&#xA;&#x9;&amp;lt;haxedef name=&#34;HXCPP_CHECK_POINTER&#34; if=&#34;release&#34; /&amp;gt;&#xA;&#x9;&amp;lt;haxedef name=&#34;HXCPP_STACK_LINE&#34; if=&#34;release&#34; /&amp;gt;&#xA;&#xA;&#x9;&amp;lt;!--Android-Internet-Connection--&amp;gt;&#xA;&#x9;&amp;lt;android permission=&#34;android.permission.ACCESS_NETWORK_STATE&#34; /&amp;gt;&#xA;&#x9;&amp;lt;android permission=&#34;android.permission.ACCESS_WIFI_STATE&#34; /&amp;gt;&#xA;&#x9;&amp;lt;android permission=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Setup Controls.hx&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;after these lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;import flixel.input.actions.FlxActionSet;&#xA;import flixel.input.keyboard.FlxKey;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android&#xA;import android.flixel.FlxButton;&#xA;import android.flixel.FlxHitbox;&#xA;import android.flixel.FlxVirtualPad;&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;before these lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;override function update()&#xA;{&#xA;&#x9;super.update();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;&#x9;#if android&#xA;&#x9;public var trackedinputsUI:Array&amp;lt;FlxActionInput&amp;gt; = [];&#xA;&#x9;public var trackedinputsNOTES:Array&amp;lt;FlxActionInput&amp;gt; = [];&#xA;&#xA;&#x9;public function addbuttonNOTES(action:FlxActionDigital, button:FlxButton, state:FlxInputState)&#xA;&#x9;{&#xA;&#x9;&#x9;var input:FlxActionInputDigitalIFlxInput = new FlxActionInputDigitalIFlxInput(button, state);&#xA;&#x9;&#x9;trackedinputsNOTES.push(input);&#xA;&#x9;&#x9;action.add(input);&#xA;&#x9;}&#xA;&#xA;&#x9;public function addbuttonUI(action:FlxActionDigital, button:FlxButton, state:FlxInputState)&#xA;&#x9;{&#xA;&#x9;&#x9;var input:FlxActionInputDigitalIFlxInput = new FlxActionInputDigitalIFlxInput(button, state);&#xA;&#x9;&#x9;trackedinputsUI.push(input);&#xA;&#x9;&#x9;action.add(input);&#xA;&#x9;}&#xA;&#xA;&#x9;public function setHitBox(Hitbox:FlxHitbox) &#xA;&#x9;{&#xA;&#x9;&#x9;inline forEachBound(Control.NOTE_UP, (action, state) -&amp;gt; addbuttonNOTES(action, Hitbox.buttonUp, state));&#xA;&#x9;&#x9;inline forEachBound(Control.NOTE_DOWN, (action, state) -&amp;gt; addbuttonNOTES(action, Hitbox.buttonDown, state));&#xA;&#x9;&#x9;inline forEachBound(Control.NOTE_LEFT, (action, state) -&amp;gt; addbuttonNOTES(action, Hitbox.buttonLeft, state));&#xA;&#x9;&#x9;inline forEachBound(Control.NOTE_RIGHT, (action, state) -&amp;gt; addbuttonNOTES(action, Hitbox.buttonRight, state));&#xA;&#x9;}&#xA;&#xA;&#x9;public function setVirtualPadUI(VirtualPad:FlxVirtualPad, DPad:FlxDPadMode, Action:FlxActionMode)&#xA;&#x9;{&#xA;&#x9;&#x9;switch (DPad)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case UP_DOWN:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_UP, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_DOWN, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonDown, state));&#xA;&#x9;&#x9;&#x9;case LEFT_RIGHT:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_LEFT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_RIGHT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;case UP_LEFT_RIGHT:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_UP, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_LEFT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_RIGHT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;case LEFT_FULL | RIGHT_FULL:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_UP, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_DOWN, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonDown, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_LEFT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_RIGHT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;case BOTH_FULL:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_UP, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_DOWN, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonDown, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_LEFT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_RIGHT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_UP, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonUp2, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_DOWN, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonDown2, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_LEFT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonLeft2, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.UI_RIGHT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonRight2, state));&#xA;&#x9;&#x9;&#x9;case NONE: // do nothing&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;switch (Action)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case A:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.ACCEPT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonA, state));&#xA;&#x9;&#x9;&#x9;case B:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.BACK, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonB, state));&#xA;&#x9;&#x9;&#x9;case A_B | A_B_C | A_B_E | A_B_X_Y | A_B_C_X_Y | A_B_C_X_Y_Z | A_B_C_D_V_X_Y_Z:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.ACCEPT, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonA, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.BACK, (action, state) -&amp;gt; addbuttonUI(action, VirtualPad.buttonB, state));&#xA;&#x9;&#x9;&#x9;case NONE: // do nothing&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public function setVirtualPadNOTES(VirtualPad:FlxVirtualPad, DPad:FlxDPadMode, Action:FlxActionMode) &#xA;&#x9;{&#xA;&#x9;&#x9;switch (DPad)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case UP_DOWN:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_UP, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_DOWN, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonDown, state));&#xA;&#x9;&#x9;&#x9;case LEFT_RIGHT:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_LEFT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_RIGHT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;case UP_LEFT_RIGHT:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_UP, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_LEFT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_RIGHT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;case LEFT_FULL | RIGHT_FULL:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_UP, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_DOWN, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonDown, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_LEFT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_RIGHT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;case BOTH_FULL:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_UP, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonUp, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_DOWN, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonDown, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_LEFT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonLeft, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_RIGHT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonRight, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_UP, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonUp2, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_DOWN, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonDown2, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_LEFT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonLeft2, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.NOTE_RIGHT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonRight2, state));&#xA;&#x9;&#x9;&#x9;case NONE: // do nothing&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;switch (Action)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case A:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.ACCEPT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonA, state));&#xA;&#x9;&#x9;&#x9;case B:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.BACK, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonB, state));&#xA;&#x9;&#x9;&#x9;case A_B | A_B_C | A_B_E | A_B_X_Y | A_B_C_X_Y | A_B_C_X_Y_Z | A_B_C_D_V_X_Y_Z:&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.ACCEPT, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonA, state));&#xA;&#x9;&#x9;&#x9;&#x9;inline forEachBound(Control.BACK, (action, state) -&amp;gt; addbuttonNOTES(action, VirtualPad.buttonB, state));&#xA;&#x9;&#x9;&#x9;case NONE: // do nothing&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public function removeAControlsInput(Tinputs:Array&amp;lt;FlxActionInput&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;for (action in this.digitalActions)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var i = action.inputs.length;&#xA;&#x9;&#x9;&#x9;while (i-- &amp;gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;var x = Tinputs.length;&#xA;&#x9;&#x9;&#x9;&#x9;while (x-- &amp;gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (Tinputs[x] == action.inputs[i])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;action.remove(action.inputs[i]);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and replace these lines (you can skip this, it&#39;s for psych engine)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;&#x9;public function bindKeys(control:Control, keys:Array&amp;lt;FlxKey&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;var copyKeys:Array&amp;lt;FlxKey&amp;gt; = keys.copy();&#xA;&#x9;&#x9;for (i in 0...copyKeys.length) {&#xA;&#x9;&#x9;&#x9;if(i == NONE) copyKeys.remove(i);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#if (haxe &amp;gt;= &#34;4.0.0&#34;)&#xA;&#x9;&#x9;inline forEachBound(control, (action, state) -&amp;gt; addKeys(action, copyKeys, state));&#xA;&#x9;&#x9;#else&#xA;&#x9;&#x9;forEachBound(control, function(action, state) addKeys(action, copyKeys, state));&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&#xA;&#x9;public function unbindKeys(control:Control, keys:Array&amp;lt;FlxKey&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;var copyKeys:Array&amp;lt;FlxKey&amp;gt; = keys.copy();&#xA;&#x9;&#x9;for (i in 0...copyKeys.length) {&#xA;&#x9;&#x9;&#x9;if(i == NONE) copyKeys.remove(i);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#if (haxe &amp;gt;= &#34;4.0.0&#34;)&#xA;&#x9;&#x9;inline forEachBound(control, (action, _) -&amp;gt; removeKeys(action, copyKeys));&#xA;&#x9;&#x9;#else&#xA;&#x9;&#x9;forEachBound(control, function(action, _) removeKeys(action, copyKeys));&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;&#x9;#if !android&#xA;&#x9;public function bindKeys(control:Control, keys:Array&amp;lt;FlxKey&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;var copyKeys:Array&amp;lt;FlxKey&amp;gt; = keys.copy();&#xA;&#x9;&#x9;for (i in 0...copyKeys.length)&#xA;&#x9;&#x9;&#x9;if(i == NONE)&#xA;&#x9;&#x9;&#x9;&#x9;copyKeys.remove(i);&#xA;&#xA;&#x9;&#x9;#if (haxe &amp;gt;= &#34;4.0.0&#34;)&#xA;&#x9;&#x9;inline forEachBound(control, (action, state) -&amp;gt; addKeys(action, copyKeys, state));&#xA;&#x9;&#x9;#else&#xA;&#x9;&#x9;forEachBound(control, function(action, state) addKeys(action, copyKeys, state));&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&#xA;&#x9;public function unbindKeys(control:Control, keys:Array&amp;lt;FlxKey&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;var copyKeys:Array&amp;lt;FlxKey&amp;gt; = keys.copy();&#xA;&#x9;&#x9;for (i in 0...copyKeys.length)&#xA;&#x9;&#x9;&#x9;if(i == NONE)&#xA;&#x9;&#x9;&#x9;&#x9;copyKeys.remove(i);&#xA;&#xA;&#x9;&#x9;#if (haxe &amp;gt;= &#34;4.0.0&#34;)&#xA;&#x9;&#x9;inline forEachBound(control, (action, _) -&amp;gt; removeKeys(action, copyKeys));&#xA;&#x9;&#x9;#else&#xA;&#x9;&#x9;forEachBound(control, function(action, _) removeKeys(action, copyKeys));&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&#x9;#else&#xA;&#x9;public function bindKeys(control:Control, keys:Array&amp;lt;FlxKey&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;#if (haxe &amp;gt;= &#34;4.0.0&#34;)&#xA;&#x9;&#x9;inline forEachBound(control, (action, state) -&amp;gt; addKeys(action, keys, state));&#xA;&#x9;&#x9;#else&#xA;&#x9;&#x9;forEachBound(control, function(action, state) addKeys(action, keys, state));&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&#xA;&#x9;public function unbindKeys(control:Control, keys:Array&amp;lt;FlxKey&amp;gt;)&#xA;&#x9;{&#xA;&#x9;&#x9;#if (haxe &amp;gt;= &#34;4.0.0&#34;)&#xA;&#x9;&#x9;inline forEachBound(control, (action, _) -&amp;gt; removeKeys(action, keys));&#xA;&#x9;&#x9;#else&#xA;&#x9;&#x9;forEachBound(control, function(action, _) removeKeys(action, keys));&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#x9;&#xA;&#x9;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Setup MusicBeatState.hx&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;in the lines you import things add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android&#xA;import android.AndroidControls;&#xA;import android.flixel.FlxVirtualPad;&#xA;import flixel.FlxCamera;&#xA;import flixel.input.actions.FlxActionInput;&#xA;import flixel.util.FlxDestroyUtil;&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;after these lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;inline function get_controls():Controls&#xA;&#x9;return PlayerSettings.player1.controls;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;&#x9;#if android&#xA;&#x9;var androidControls:AndroidControls;&#xA;&#x9;var virtualPad:FlxVirtualPad;&#xA;&#x9;var trackedinputsUI:Array&amp;lt;FlxActionInput&amp;gt; = [];&#xA;&#x9;var trackedinputsNOTES:Array&amp;lt;FlxActionInput&amp;gt; = [];&#xA;&#xA;&#x9;public function addVirtualPad(DPad:FlxDPadMode, Action:FlxActionMode)&#xA;&#x9;{&#xA;&#x9;&#x9;virtualPad = new FlxVirtualPad(DPad, Action);&#xA;&#x9;&#x9;add(virtualPad);&#xA;&#xA;&#x9;&#x9;controls.setVirtualPadUI(virtualPad, DPad, Action);&#xA;&#x9;&#x9;trackedinputsUI = controls.trackedinputsUI;&#xA;&#x9;&#x9;controls.trackedinputsUI = [];&#xA;&#x9;}&#xA;&#xA;&#x9;public function removeVirtualPad()&#xA;&#x9;{&#xA;&#x9;&#x9;if (trackedinputsUI != [])&#xA;&#x9;&#x9;&#x9;controls.removeAControlsInput(trackedinputsUI);&#xA;&#xA;&#x9;&#x9;if (virtualPad != null)&#xA;&#x9;&#x9;&#x9;remove(virtualPad);&#xA;&#x9;}&#xA;&#xA;&#x9;public function addAndroidControls()&#xA;&#x9;{&#xA;&#x9;&#x9;androidControls = new AndroidControls();&#xA;&#xA;&#x9;&#x9;switch (AndroidControls.getMode())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case &#39;Pad-Right&#39; | &#39;Pad-Left&#39; | &#39;Pad-Custom&#39;:&#xA;&#x9;&#x9;&#x9;&#x9;controls.setVirtualPadNOTES(androidControls.virtualPad, RIGHT_FULL, NONE);&#xA;&#x9;&#x9;&#x9;case &#39;Pad-Duo&#39;:&#xA;&#x9;&#x9;&#x9;&#x9;controls.setVirtualPadNOTES(androidControls.virtualPad, BOTH_FULL, NONE);&#xA;&#x9;&#x9;&#x9;case &#39;Hitbox&#39;:&#xA;&#x9;&#x9;&#x9;&#x9;controls.setHitBox(androidControls.hitbox);&#xA;&#x9;&#x9;&#x9;case &#39;Keyboard&#39;: // do nothing&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;trackedinputsNOTES = controls.trackedinputsNOTES;&#xA;&#x9;&#x9;controls.trackedinputsNOTES = [];&#xA;&#xA;&#x9;&#x9;var camControls:FlxCamera = new FlxCamera();&#xA;&#x9;&#x9;FlxG.cameras.add(camControls);&#xA;&#x9;&#x9;camControls.bgColor.alpha = 0;&#xA;&#xA;&#x9;&#x9;androidControls.cameras = [camControls];&#xA;&#x9;&#x9;androidControls.visible = false;&#xA;&#x9;&#x9;add(androidControls);&#xA;&#x9;}&#xA;&#xA;&#x9;public function removeAndroidControls()&#xA;&#x9;{&#xA;&#x9;&#x9;if (trackedinputsNOTES != [])&#xA;&#x9;&#x9;&#x9;controls.removeAControlsInput(trackedinputsNOTES);&#xA;&#xA;&#x9;&#x9;if (androidControls != null)&#xA;&#x9;&#x9;&#x9;remove(androidControls);&#xA;&#x9;}&#xA;&#xA;&#x9;public function addPadCamera()&#xA;&#x9;{&#xA;&#x9;&#x9;if (virtualPad != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var camControls:FlxCamera = new FlxCamera();&#xA;&#x9;&#x9;&#x9;FlxG.cameras.add(camControls);&#xA;&#x9;&#x9;&#x9;camControls.bgColor.alpha = 0;&#xA;&#x9;&#x9;&#x9;virtualPad.cameras = [camControls];&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;#end&#xA;&#xA;&#x9;override function destroy()&#xA;&#x9;{&#xA;&#x9;&#x9;#if android&#xA;&#x9;&#x9;if (trackedinputsNOTES != [])&#xA;&#x9;&#x9;&#x9;controls.removeAControlsInput(trackedinputsNOTES);&#xA;&#xA;&#x9;&#x9;if (trackedinputsUI != [])&#xA;&#x9;&#x9;&#x9;controls.removeAControlsInput(trackedinputsUI);&#xA;&#x9;&#x9;#end&#xA;&#xA;&#x9;&#x9;super.destroy();&#xA;&#xA;&#x9;&#x9;#if android&#xA;&#x9;&#x9;if (virtualPad != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;virtualPad = FlxDestroyUtil.destroy(virtualPad);&#xA;&#x9;&#x9;&#x9;virtualPad = null;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (androidControls != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;androidControls = FlxDestroyUtil.destroy(androidControls);&#xA;&#x9;&#x9;&#x9;androidControls = null;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Setup MusicBeatSubstate.hx&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;in the lines you import things add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android&#xA;import android.flixel.FlxVirtualPad;&#xA;import flixel.FlxCamera;&#xA;import flixel.input.actions.FlxActionInput;&#xA;import flixel.util.FlxDestroyUtil;&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;after these lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;inline function get_controls():Controls&#xA;&#x9;return PlayerSettings.player1.controls;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;&#x9;#if android&#xA;&#x9;var virtualPad:FlxVirtualPad;&#xA;&#x9;var trackedinputsUI:Array&amp;lt;FlxActionInput&amp;gt; = [];&#xA;&#xA;&#x9;public function addVirtualPad(DPad:FlxDPadMode, Action:FlxActionMode)&#xA;&#x9;{&#xA;&#x9;&#x9;virtualPad = new FlxVirtualPad(DPad, Action);&#xA;&#x9;&#x9;add(virtualPad);&#xA;&#xA;&#x9;&#x9;controls.setVirtualPadUI(virtualPad, DPad, Action);&#xA;&#x9;&#x9;trackedinputsUI = controls.trackedinputsUI;&#xA;&#x9;&#x9;controls.trackedinputsUI = [];&#xA;&#x9;}&#xA;&#xA;&#x9;public function removeVirtualPad()&#xA;&#x9;{&#xA;&#x9;&#x9;if (trackedinputsUI != [])&#xA;&#x9;&#x9;&#x9;controls.removeAControlsInput(trackedinputsUI);&#xA;&#xA;&#x9;&#x9;if (virtualPad != null)&#xA;&#x9;&#x9;&#x9;remove(virtualPad);&#xA;&#x9;}&#xA;&#xA;&#x9;public function addPadCamera()&#xA;&#x9;{&#xA;&#x9;&#x9;if (virtualPad != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var camControls:FlxCamera = new FlxCamera();&#xA;&#x9;&#x9;&#x9;FlxG.cameras.add(camControls);&#xA;&#x9;&#x9;&#x9;camControls.bgColor.alpha = 0;&#xA;&#x9;&#x9;&#x9;virtualPad.cameras = [camControls];&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;#end&#xA;&#xA;&#x9;override function destroy()&#xA;&#x9;{&#xA;&#x9;&#x9;#if android&#xA;&#x9;&#x9;if (trackedinputsUI != [])&#xA;&#x9;&#x9;&#x9;controls.removeAControlsInput(trackedinputsUI);&#xA;&#x9;&#x9;#end&#xA;&#xA;&#x9;&#x9;super.destroy();&#xA;&#xA;&#x9;&#x9;#if android&#xA;&#x9;&#x9;if (virtualPad != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;virtualPad = FlxDestroyUtil.destroy(virtualPad);&#xA;&#x9;&#x9;&#x9;virtualPad = null;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#end&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And somehow you finished adding the android controls to your psych engine copy&lt;/p&gt; &#xA;&lt;p&gt;now on every state/substate add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android&#xA;addVirtualPad(LEFT_FULL, A_B);&#xA;#end&#xA;&#xA;if you want to remove it at some moment use&#xA;#if android&#xA;removeVirtualPad();&#xA;#end&#xA;&#xA;//if you want it to have a camera&#xA;#if android&#xA;addPadCamera();&#xA;#end&#xA;&#xA;//in states, these need to be added before super.create();&#xA;//in substates, in fuction new at the last line add these&#xA;&#xA;//on Playstate.hx after all of the&#xA;//obj.cameras = [...];&#xA;//things, add&#xA;#if android&#xA;addAndroidControls();&#xA;#end&#xA;&#xA;if you want to remove it at some moment use&#xA;#if android&#xA;removeAndroidControls();&#xA;#end&#xA;&#xA;//to make the controls visible the code is&#xA;#if android&#xA;androidControls.visible = true;&#xA;#end&#xA;&#xA;//to make the controls invisible the code is&#xA;#if android&#xA;androidControls.visible = false;&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Prevent the Android BACK Button&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;in TitleState.hx&lt;/p&gt; &#xA;&lt;p&gt;after&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;override public function create():Void&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android&#xA;FlxG.android.preventDefaultKeys = [BACK];&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Set An action to the BACK Button&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;you can set one with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android || FlxG.android.justReleased.BACK #end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;On sys.FileSystem and sys.io.File for modding and polymod stuff&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;this is not working with app storage but on phone storage it will work with this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;SUtil.getPath() + &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will make the game use the phone storage but you will have to add one thing in Your source&lt;/p&gt; &#xA;&lt;p&gt;in Main.hx before&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;addChild(new FlxGame(gameWidth, gameHeight, initialState, zoom, framerate, framerate, skipSplash, startFullscreen));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;SUtil.check();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will check for android storage permisions and the assets/mods directories&lt;/p&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;On Crash Application Alert&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;on Main.hx after&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;public function new()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;SUtil.uncaughtErrorHandler();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt;File Saver&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This is a feature to save files with sys.io.File This is the code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;SUtil.saveContent(&#34;your file name&#34;, &#34;.txt&#34;, &#34;lololol&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;13&#34;&gt; &#xA; &lt;li&gt;Do an action when you press on the screen&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;#if android&#xA;var justTouched:Bool = false;&#xA;&#xA;for (touch in FlxG.touches.list)&#xA;&#x9;if (touch.justPressed)&#xA;&#x9;&#x9;justTouched = true;&#xA;&#xA;if (justTouched)&#xA;&#x9;//Your code&#xA;#end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Saw (M.A. JIGSAW) me - Doing the rest of the code, utils, pad buttons and other things&lt;/li&gt; &#xA; &lt;li&gt;luckydog7 - Original code for android controls and hitbox original design.&lt;/li&gt; &#xA; &lt;li&gt;Goldie - Pad designer.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>