<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:42:08Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>armory3d/armorlab</title>
    <updated>2022-07-26T01:42:08Z</updated>
    <id>tag:github.com,2022-07-26:/armory3d/armorlab</id>
    <link href="https://github.com/armory3d/armorlab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI-Powered Texture Authoring Software&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://armorlab.org/img/git.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;armorlab (wip - issue reporting opening soon)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://armorlab.org&#34;&gt;ArmorLab&lt;/a&gt; is a software for AI-powered texture authoring - check out the &lt;a href=&#34;https://armorlab.org/manual&#34;&gt;manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note 1: This repository is aimed at developers and may not be stable. Distributed binaries are &lt;a href=&#34;https://armorlab.org/download&#34;&gt;paid&lt;/a&gt; to help with the project funding. All of the development is happening here in order to make it accessible to everyone. Thank you for support!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note 2: If you are compiling git version of ArmorLab, then you need to have a compiler (&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; - Windows, &lt;a href=&#34;https://clang.llvm.org/get_started.html&#34;&gt;clang&lt;/a&gt; + &lt;a href=&#34;https://github.com/armory3d/armorpaint/wiki/Linux-Dependencies&#34;&gt;deps&lt;/a&gt; - Linux, &lt;a href=&#34;https://developer.apple.com/xcode/resources/&#34;&gt;Xcode&lt;/a&gt; - macOS / iOS, &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; - Android) and &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt; installed.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/armory3d/armorlab&#xA;cd armorlab&#xA;# Unpack `models.zip` from https://github.com/armory3d/armorlab_models/releases into `Assets/models` using 7-Zip - Extract Here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unpack `armorcore\v8\libraries\win32\release\v8_monolith.7z` using 7-Zip - Extract Here (exceeds 100MB)&#xA;armorcore\Kinc\make --from armorcore -g direct3d11&#xA;# Open generated Visual Studio project at `build\ArmorLab.sln`&#xA;# Build and run for x64 &amp;amp; release&#xA;# Copy build\x64\Release\ArmorLab.exe to build\krom to run ArmorLab.exe directly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows DXR&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unpack `armorcore\v8\libraries\win32\release\v8_monolith.7z` using 7-Zip - Extract Here (exceeds 100MB)&#xA;git apply armorcore/patch/d3d12_raytrace.diff --directory=armorcore/Kinc&#xA;armorcore\Kinc\make --from armorcore -g direct3d12&#xA;# Open generated Visual Studio project at `build\ArmorLab.sln`&#xA;# Build and run for x64 &amp;amp; release&#xA;# Copy build\x64\Release\ArmorLab.exe to build\krom to run ArmorLab.exe directly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux VKRT&lt;/strong&gt; &lt;em&gt;wip&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Updating cloned repository&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull origin main&#xA;git submodule update --init --recursive&#xA;# Delete `armorlab/build` directory if present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generating a locale file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install typing_extensions -t Assets/locale/tools&#xA;python ./Assets/locale/tools/extract_locales.py &amp;lt;locale code&amp;gt;&#xA;# Generates an `Assets/locale/&amp;lt;locale code&amp;gt;.json` file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Release builds&lt;/strong&gt; &lt;em&gt;Optional, used for best performance&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Compile krom.js using the closure compiler&#xA;https://developers.google.com/closure/compiler&#xA;# Generate a v8 snapshot file&#xA;export ARM_SNAPSHOT=1&#xA;armorcore/Kinc/make --from armorcore -g api&#xA;./ArmorLab . --snapshot&#xA;# Generates a `krom.bin` file from `krom.js` file&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>