<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haxe Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-18T01:34:40Z</updated>
  <subtitle>Daily Trending of Haxe in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ShaharMS/Vision</title>
    <updated>2022-10-18T01:34:40Z</updated>
    <id>tag:github.com,2022-10-18:/ShaharMS/Vision</id>
    <link href="https://github.com/ShaharMS/Vision" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross framework, cross platform computer vision for Haxe&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vision&lt;/h1&gt; &#xA;&lt;h3&gt;Cross framework, cross platform computer vision library for Haxe.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/raw/main/README.md#structure&#34;&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/raw/main/README.md#tutorials&#34;&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/raw/main/README.md#about&#34;&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/raw/main/ROADMAP.md&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/raw/main/CHANGELOG.md&#34;&gt;&lt;strong&gt;Changelog&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/raw/main/README.md#define-list&#34;&gt;&lt;strong&gt;Define List&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Structure&lt;/h1&gt; &#xA;&lt;p&gt;This Library is organized into 5 subfolders, and one important file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/tree/main/src/vision/ds&#34;&gt;&lt;strong&gt;&lt;code&gt;ds&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - contains Vision&#39;s data structures &amp;amp; types. Some functions &amp;amp; Features require different return types which aren&#39;t basic - such as lines, rays or points. Those can be found inside this folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/tree/main/src/vision/tools&#34;&gt;&lt;strong&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - contains classes that extend the functionality of certain aspects of the library. For example, &lt;code&gt;MathTools&lt;/code&gt; is a superset of the &lt;code&gt;Math&lt;/code&gt; class from the standard library, and also adds many features related to finding data related to lines, rays and points.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/tree/main/src/vision/algorithms&#34;&gt;&lt;strong&gt;&lt;code&gt;algorithms&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - contains every complex algorithm this library uses. They&#39;re all contained in one folder to help you learn from them :). &lt;strong&gt;If you feel like some algorithms are lacking/have unclear documentation, please open an issue about it&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/tree/main/src/vision/exceptions&#34;&gt;&lt;strong&gt;&lt;code&gt;exceptions&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - contains the errors usually thrown by Vision. &lt;strong&gt;Notice - those errors are present just to let you know if you did something unexpected. If you want to get rid of them, define &lt;code&gt;vision_quiet&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/tree/main/src/vision/helpers&#34;&gt;&lt;strong&gt;&lt;code&gt;helpers&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - contains some helper classes that may be used by Vision. Theres nothing preventing you from using them yourself though...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaharMS/Vision/tree/main/src/vision/Vision.hx&#34;&gt;&lt;strong&gt;&lt;code&gt;Vision.hx&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - contains all image manipulation/computer vision methods. After 1.0.0, this class should always remain backwards compatible. It is always recommended to use the methods from this class instead for using the ones in the algorithms class, since the ones in &lt;code&gt;Vision&lt;/code&gt; are less likely to break compatibility, and are usually more concise.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Tutorials&lt;/h1&gt; &#xA;&lt;p&gt;For more tutorials (or further details about the tutorials here) check out the links below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spacebubble.io/haxe/?name=Vision&#34;&gt;&lt;code&gt;Vision&lt;/code&gt; Tutorials On The Haxe Learning Center&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Creating an image&lt;/h3&gt; &#xA;&lt;p&gt;Create a blank image for drawing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var image = new Image(200, 300, Color.WHITE); //creates a new, 200x300 image with a white background&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Drawing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;image.setPixel(10, 35, 0xff3204);&#xA;image.drawLine(1,1, 34, 67, Color.LIME);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an image from a URL (right now, JS only):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;var image:Image;&#xA;ImageTools.loadFromFile(&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Valve_original_%281%29.PNG/300px-Valve_original_%281%29.PNG&#34;,&#xA;    data -&amp;gt; {&#xA;        image = data;&#xA;    }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add that image to the screen (available in platforms &amp;amp; libraries that support drawing on screen):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;using vision.tools.ImageTools;&#xA;&#xA;//...&#xA;&#xA;image.addToScreen(); //alternatively, you can do - ImageTools.addToScreen(image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Basic Image Manipulation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;Vision.grayscale(image);&#xA;Vision.sharpen(image);&#xA;Vision.convolve(image, BoxBlur);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;using vision.Vision;&#xA;&#xA;image.grayscale();&#xA;image.sharpen();&#xA;image.convolve(BoxBlur);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Implicit Conversions From/To Framework Specific Graphical Types&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;import openfl.display.BitmapData;&#xA;import vision.ds.Image;&#xA;&#xA;var future = BitmapData.loadFromFile(&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Valve_original_%281%29.PNG/300px-Valve_original_%281%29.PNG&#34;);&#xA;future.onComplete(bitmapData -&amp;gt; {&#xA;&#x9;var image:Image = bitmapData; // converts the given openfl.display.BitmapData to vision.ds.Image&#xA;   // The conversions are lossless, so you never lose data.&#xA;&#x9;addChild(new Bitmap(image)); //converts back to a BitmapData.&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;MathTools&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haxe&#34;&gt;import vision.tools.MathTools;&#xA;using vision.tools.MathTools;&#xA;&#xA;var ray = new Ray2D({x: 0, y: 0}, 1); //f(x) = x&#xA;trace(ray.distanceFromRayToPoint2D({1, 0}) /* function from MathTools */); // sqrt(2) / 2&#xA;trace(MathTools.median([[12, 123, 321, 4, 333], [12, 123, 145, 321, 4], [12, 123, 264, 321, 4], [12, 123, 234, 321, 4]].flatten())); //123;&#xA;//you can even chain calls&#xA;trace([[[[[1, 2, 3, 4], [5, 6, 7]]]]].flatten().flatten().flatten().flatten().median()); // 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vision&lt;/strong&gt; is a cross framework, cross platform Computer Vision &amp;amp; Image Manipulation library for &lt;a href=&#34;https://haxe.org/&#34;&gt;Haxe&lt;/a&gt;.&lt;br&gt; This library exists to provide CV &amp;amp; IM capabilities to Haxe projects, naturally:&lt;/p&gt; &#xA;&lt;h3&gt;What Does That Mean?&lt;/h3&gt; &#xA;&lt;p&gt;Basically, if you&#39;re using HaxeFlixel for example, you should be able to easily use an FlxSprite as an image to process, or if you&#39;re using OpenFL you should be able to use bitmaps and sprites to process.&lt;/p&gt; &#xA;&lt;h3&gt;Why Does This Library Exist?&lt;/h3&gt; &#xA;&lt;p&gt;One of the problems i have with Haxe is the lack of non-game utilities and libraries. my goal is to provide those utilities, and make app development in Haxe easier.&lt;/p&gt; &#xA;&lt;h3&gt;Contributions Are Welcomed.&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m not the best at &lt;em&gt;everything&lt;/em&gt; I do, especially in fields like computer vision, with which im not the most familiar. That means there are bound to be mistakes/bugs. Because of that, every issue, pull request or code review is welcomed. &lt;strong&gt;Help me make this library bigger and better for everyone :)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About Documentation&lt;/h3&gt; &#xA;&lt;p&gt;One of the things I can&#39;t stand with libraries similar to this one is the lack of docs, and unclear, obfuscated code.&lt;/p&gt; &#xA;&lt;p&gt;If you see some code that you think is not understandable, or some place that lacks documentation, or even inaccurate/unclear documentation, please open an issue about it, and I&#39;d try to resolve it asap ;).&lt;/p&gt; &#xA;&lt;h2&gt;Define List:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Define&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Versions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vision_disable_point_alloc_optimization&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enabling this makes every &lt;code&gt;IntPoint2D&lt;/code&gt; allocate two integers as a class instance instead of working as an abstract over a 64 bit integer. The allocation optimization is enabled by default to reduce allocations, but you can flip this flag if your&#39;e capped to 32bit integers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vision_better_grayscale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When enabled, grayscaling is done a bit differently to get an image that more closely resembles the original image. If you&#39;re noticing problems with grayscaling, turn this off.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vision_quiet&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When enabled, no errors are thrown from this library&#39;s components, and an effort is made to return the &#34;expected&#34; value. For example, gaussian kernal&#39;s size would be incremented if even, and a &lt;code&gt;getPixel&lt;/code&gt; call outside the bounds of the image should return the closest pixel to that point.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vision_allow_resize&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When enabled, you can resize an image by directly setting its width/height property. Bilinear interpolation is used by default. If you wish to change this, change &lt;code&gt;defaultResizeAlgorithm&lt;/code&gt; in &lt;code&gt;ImageTools&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vision_multithread&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attempts to use multithreaded versions of some algorithms - might boost performance. Available on both web &amp;amp; sys.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>MoldyGH/VsDave</title>
    <updated>2022-10-18T01:34:40Z</updated>
    <id>tag:github.com,2022-10-18:/MoldyGH/VsDave</id>
    <link href="https://github.com/MoldyGH/VsDave" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MoldyGH/VsDave/main/KadeEngineWitBackground.png&#34; width=&#34;600&#34; height=&#34;400&#34;&gt; &#xA;&lt;h1&gt;VS DAVE (DAVE ENGINE)&lt;/h1&gt; &#xA;&lt;p&gt;this is dave&lt;/p&gt; &#xA;&lt;img src=&#34;https://cdn.discordapp.com/attachments/892140166309892136/905267141299802152/dorve_reale.png&#34; width=&#34;211&#34; height=&#34;373&#34;&gt; &#xA;&lt;p&gt;say hi to dave please say hi to him&lt;/p&gt; &#xA;&lt;h2&gt;About the mod&lt;/h2&gt; &#xA;&lt;p&gt;Powered by a heavily modified version of Kade Engine, The mod includes lots of additional improvements such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL Shaders&lt;/li&gt; &#xA; &lt;li&gt;Character Selector&lt;/li&gt; &#xA; &lt;li&gt;Languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benjaminpants/Funkin-Strawberry&#34;&gt;Strawberry Input&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re looking to compile the mod/make your own modification, &lt;a href=&#34;https://raw.githubusercontent.com/MoldyGH/VsDave/main/Modding.md&#34;&gt;look here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doggy-dentures/3dsenpai</title>
    <updated>2022-10-18T01:34:40Z</updated>
    <id>tag:github.com,2022-10-18:/doggy-dentures/3dsenpai</id>
    <link href="https://github.com/doggy-dentures/3dsenpai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doggy-dentures/3dsenpai/main/art/readme/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Finally, it&#39;s open source.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Friday Night Funkin&#39; FPS Plus&lt;/h1&gt; &#xA;&lt;p&gt;Friday Night Funkin&#39; FPS Plus is a mod of Friday Night Funkin&#39; that aims to improve gameplay and add quality of life features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You can find the original game here:&lt;/em&gt; &lt;strong&gt;&lt;a href=&#34;https://www.newgrounds.com/portal/view/770371&#34;&gt;Newgrounds&lt;/a&gt; - &lt;a href=&#34;https://ninja-muffin24.itch.io/funkin&#34;&gt;itch.io&lt;/a&gt; - &lt;a href=&#34;https://github.com/ninjamuffin99/Funkin&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Increased FPS&lt;/h3&gt; &#xA;&lt;p&gt;The orignal purpose of FPS Plus. The game has an increased framerate over the base game and even an option for a completely uncapped framerate.&lt;/p&gt; &#xA;&lt;h3&gt;Better Input&lt;/h3&gt; &#xA;&lt;p&gt;Adjusts how the game handles input allowing you to hit notes more consistently.&lt;/p&gt; &#xA;&lt;p&gt;This also changes held notes so that they disappear if released to early.&lt;/p&gt; &#xA;&lt;h3&gt;Fully Rebindable Keys&lt;/h3&gt; &#xA;&lt;p&gt;So that you can use whatever wacky control scheme you come up with. Or you could just be boring and use DFJK. That works too...&lt;/p&gt; &#xA;&lt;h3&gt;Improved Chart Editor&lt;/h3&gt; &#xA;&lt;p&gt;FPS Plus contains a modified chart editor that has more utility features and is way more user friendly.&lt;/p&gt; &#xA;&lt;h3&gt;Improved Animation Debug&lt;/h3&gt; &#xA;&lt;p&gt;The animation debug has been adjusted to make editing offsets way easier and faster while requiring less guess work.&lt;/p&gt; &#xA;&lt;h3&gt;Downscroll&lt;/h3&gt; &#xA;&lt;p&gt;Notes appear from the top of the screen instead of the bottom. This make help some people read patterns more easily.&lt;/p&gt; &#xA;&lt;h3&gt;Improved Health Icons&lt;/h3&gt; &#xA;&lt;p&gt;Adjusted some of the health icons and adds winning icons.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For build intructions, follow the guide on the Funkin github page &lt;a href=&#34;https://github.com/ninjamuffin99/Funkin#build-instructions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You do not need to install polymod since FPS Plus doesn&#39;t use it.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can ignore the part about ignored files since FPS Plus removes them.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Friday Night Funkin&#39;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ninja_muffin99&#34;&gt;ninjamuffin99&lt;/a&gt; - Programmer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/phantomarcade3k&#34;&gt;PhantomArcade3K&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/evilsk8r&#34;&gt;Evilsk8r&lt;/a&gt; - Art&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/kawaisprite&#34;&gt;Kawaisprite&lt;/a&gt; - Musician&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FPS Plus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/helpme_thebigt&#34;&gt;Rozebud&lt;/a&gt; - &lt;em&gt;Everything&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shoutouts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/KadeDeveloper&#34;&gt;KadeDev&lt;/a&gt; - &lt;em&gt;Rival&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/polybiusproxy&#34;&gt;PolybiusProxy&lt;/a&gt; - Haxeflixel Desktop MP4 stuff.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/EthabTaxi&#34;&gt;Ethab Taxi&lt;/a&gt; - He&#39;s just sorta chillin&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>