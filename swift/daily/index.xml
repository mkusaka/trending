<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-24T01:37:35Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>krzyzanowskim/STTextView</title>
    <updated>2023-10-24T01:37:35Z</updated>
    <id>tag:github.com,2023-10-24:/krzyzanowskim/STTextView</id>
    <link href="https://github.com/krzyzanowskim/STTextView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Performant and reusable macOS text view component (TextKit2), with line numbers and more. NSTextView replacement.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;64&#34; src=&#34;https://user-images.githubusercontent.com/758033/235909140-3589bb7d-51a0-4df3-8d71-2dc30fcabc8c.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;STTextView&lt;/h1&gt; &#xA;&lt;p&gt;Performant &lt;a href=&#34;https://www.apple.com/macos&#34;&gt;macOS&lt;/a&gt; TextView with line numbers and much more. (NSTextView replacement)&lt;/p&gt; &#xA;&lt;p&gt;The goal of this project is to build &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nstextview&#34;&gt;NSTextView&lt;/a&gt; replacement component utilizing &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2021/10061/&#34;&gt;TextKit 2&lt;/a&gt; framework. &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/STTextView/main/#-textkit-2-bug-reports-list&#34;&gt;due to many good reasons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The component is developed to serve &lt;a href=&#34;https://swiftstudio.app&#34;&gt;Swift Studio&lt;/a&gt; needs as a &lt;strong&gt;source code editor&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; alt=&#34;Screenshot 2023-04-24 at 02 03 51&#34; src=&#34;https://user-images.githubusercontent.com/758033/233873957-3f94a73a-a401-4f54-9631-3002600ba6f8.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/758033/217397725-1e217c25-24ac-4d9b-9812-b3c7e324a1ca.mp4&#34;&gt;https://user-images.githubusercontent.com/758033/217397725-1e217c25-24ac-4d9b-9812-b3c7e324a1ca.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/forums/tags/wwdc21-10061&#34;&gt;TextKit 2&lt;/a&gt; was announced during &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2021/10061/&#34;&gt;WWDC 2021&lt;/a&gt; as a TextKit 1 replacement for text layout and whatnot. Apple announced that &lt;code&gt;NSTextView&lt;/code&gt;, the view component specialized for text editing, will adopt TextKit 2 and provide support along TextKit 1 bit. As I started to learn more about &lt;code&gt;NSTextView&lt;/code&gt; + TextKit2, I realized as of today (Feb 2022), neither &lt;code&gt;NSTextView&lt;/code&gt; is fully functional, nor TextKit 2 classes are fully functional. Along the way, I reported several bug reports to Apple requesting DTS (support tickets). Eventually, I got blocked by specific bugs that pushed me to start this project.&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS text system integration&lt;/li&gt; &#xA; &lt;li&gt;Performant Text editing&lt;/li&gt; &#xA; &lt;li&gt;Line numbers in a ruler view&lt;/li&gt; &#xA; &lt;li&gt;Ruler Markers support&lt;/li&gt; &#xA; &lt;li&gt;Customization of colors and fonts&lt;/li&gt; &#xA; &lt;li&gt;Toggle line wrapping on and off&lt;/li&gt; &#xA; &lt;li&gt;Adjust the height of lines&lt;/li&gt; &#xA; &lt;li&gt;Highlight/Select ranges in the text view&lt;/li&gt; &#xA; &lt;li&gt;Multi-cursor editing&lt;/li&gt; &#xA; &lt;li&gt;Search/Replace the text&lt;/li&gt; &#xA; &lt;li&gt;Spelling and Grammar&lt;/li&gt; &#xA; &lt;li&gt;Dictation&lt;/li&gt; &#xA; &lt;li&gt;Display Invisible Characters&lt;/li&gt; &#xA; &lt;li&gt;Customizable Completion support&lt;/li&gt; &#xA; &lt;li&gt;Smooth scrolling of long content&lt;/li&gt; &#xA; &lt;li&gt;LTR (Left To Right) / RTL (Right To Left) layout&lt;/li&gt; &#xA; &lt;li&gt;Undo/Redo&lt;/li&gt; &#xA; &lt;li&gt;Plugins&lt;/li&gt; &#xA; &lt;li&gt;Anchored annotations (via plugin)&lt;/li&gt; &#xA; &lt;li&gt;Source Code syntax highlighting (via plugin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Support &amp;amp; Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The financial sustainability of the project is possible thanks to the ongoing contributions from our &lt;a href=&#34;https://github.com/sponsors/krzyzanowskim&#34;&gt;GitHub Sponsors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Premium Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://judo.app&#34;&gt;Judo&lt;/a&gt; is a design and build tool for SwiftUI apps that writes production-ready code for you while you‚Äôre designing. Eliminate back-and-forth with developers and free them from unrewarding grunt work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://judo.app&#34;&gt;&lt;img alt=&#34;judo.app&#34; width=&#34;200&#34; src=&#34;https://github-production-user-asset-6210df.s3.amazonaws.com/758033/257891209-932464f9-d756-4ddb-9946-198901ace96f.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üóìÔ∏è Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;STTextView is already well-suited as a text editor component. However, it still needs improvements before the release of v1.0&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Suggest&lt;/strong&gt; or &lt;strong&gt;vote&lt;/strong&gt; for new features: &lt;a href=&#34;https://github.com/krzyzanowskim/STTextView/discussions/14&#34;&gt;Feature Requests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Known issues&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;undo/redo while typing needs fixes&lt;/li&gt; &#xA; &lt;li&gt;text dragging (partially implemented)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;STTextView&lt;/code&gt; is distributed using the &lt;a href=&#34;https://www.swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;. Install it in a project by adding it as a dependency in your &lt;code&gt;Package.swift&lt;/code&gt; manifest or through ‚ÄúPackage Dependencies‚Äù in Xcode project settings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/krzyzanowskim/STTextView&#34;, from: &#34;0.8.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo Application&lt;/h2&gt; &#xA;&lt;p&gt;The demo applications &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/STTextView/main/TextEdit&#34;&gt;TextEdit&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/STTextView/main/TextEdit.SwiftUI&#34;&gt;TextEdit.SwiftUI&lt;/a&gt; lets you explore the library.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Plugins in an STTextView component offer additional functionalities and customizations beyond the basic text display. They enhance the core capabilities of the text view by adding features such as syntax highlighting, word count tracking, and more. These plugins expand the STTextView&#39;s utility while maintaining a modular and adaptable software structure.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzyzanowskim/STTextView-Plugin-Neon&#34;&gt;Plugin-Neon&lt;/a&gt; Source Code Syntax Highlighting with &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;TreeSitter&lt;/a&gt; and &lt;a href=&#34;https://github.com/ChimeHQ/Neon&#34;&gt;Neon&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChimeHQ/STTextView-Plugin-TextFormation&#34;&gt;Plugin-TextFormation&lt;/a&gt; Typing completions with &lt;a href=&#34;https://github.com/ChimeHQ/TextFormation&#34;&gt;TextFormation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzyzanowskim/STTextView-Plugin-Annotations&#34;&gt;Plugin-Annotations&lt;/a&gt; Anchored annotations (eg. inlined error message)) plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzyzanowskim/STTextView-Plugin-Template&#34;&gt;Plugin-Template&lt;/a&gt; Dummy plugin template repository ready bo build new plugin.&lt;/li&gt; &#xA; &lt;li&gt;... add more plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;TextView&lt;/code&gt; is a &lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt; view that wraps the STTextView.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for rich text (attributed string)&lt;/li&gt; &#xA; &lt;li&gt;Faster than SwiftUI.TextEdit (&lt;a href=&#34;https://twitter.com/krzyzanowskim/status/1677628085217243137&#34;&gt;https://twitter.com/krzyzanowskim/status/1677628085217243137&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import STTextViewUI&#xA;&#xA;struct ContentView: View {&#xA;&#xA;    @State private var text = AttributedString(&#34;Hello World!&#34;)&#xA;    @State private var selection: NSRange?&#xA;&#xA;    var body: some View {&#xA;        STTextViewUI.TextView(&#xA;            text: $text,&#xA;            selection: $selection,&#xA;            options: [.wrapLines, .highlightSelectedLine],&#xA;            plugins: [plugin1(), plugin2()]&#xA;        )&#xA;        .textViewFont(.preferredFont(forTextStyle: .body))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a TextView&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;STTextView&lt;/code&gt; is an &lt;code&gt;NSView&lt;/code&gt; subclass and can be initialized like any other view. It has an API that is similar to the one of NSTextView.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import STTextView&#xA;&#xA;let textView = STTextView()&#xA;view.addSubView(textView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let textView = STTextView()&#xA;let scrollView = NSScrollView()&#xA;scrollView.documentView = textView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let scrollView = STTextView.scrollableTextView()&#xA;let textView = scrollView.documentView as! STTextView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize&lt;/h3&gt; &#xA;&lt;p&gt;The text view can be customized in a variety of ways.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let paragraph = NSParagraphStyle.default.mutableCopy() as! NSMutableParagraphStyle&#xA;// Set the line-height to 110%&#xA;paragraph.lineHeightMultiple = 1.1&#xA;paragraph.defaultTabInterval = 28&#xA;&#xA;// Default Paragraph style&#xA;textView.typingAttributes[.paragraphStyle] = paragraph&#xA;&#xA;// Set default font&#xA;textView.font = NSFont.monospacedSystemFont(ofSize: 14, weight: .regular)&#xA;&#xA;// Set default text color&#xA;textView.textColor = .textColor&#xA;&#xA;// Set text value&#xA;textView.string = &#34;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ornare lobortis sem a vulputate.&#34;&#xA;textView.addAttributes([.foregroundColor: NSColor.red], range: NSRange(location: 10, length: 5))&#xA;&#xA;// Wrap lines to editor width&#xA;textView.widthTracksTextView = true&#xA;&#xA;// Highlight the selected line.&#xA;textView.highlightSelectedLine = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add line numbers using specialized &lt;code&gt;STLineNumberRulerView&lt;/code&gt; (specialized subclass of &lt;code&gt;NSRulerView&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let textView = STTextView()&#xA;let scrollView = NSScrollView()&#xA;scrollView.documentView = textView&#xA;&#xA;// Line numbers&#xA;let rulerView = STLineNumberRulerView(textView: textView)&#xA;// Configure the ruler view&#xA;rulerView.highlightSelectedLine = true&#xA;// Allows to set markers.&#xA;// rulerView.allowsMarkers = true&#xA;&#xA;// Add to NSScrollView containing STTextView&#xA;scrollView.verticalRulerView = rulerView&#xA;scrollView.rulersVisible = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable an optional search-and-replace find interface inside a view, usually a scroll view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;textView.isIncrementalSearchingEnabled = true&#xA;textView.textFinder.incrementalSearchingShouldDimContentView = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üêõ TextKit 2 Bug Reports List&lt;/h2&gt; &#xA;&lt;p&gt;List of &lt;strong&gt;TextKit 2&lt;/strong&gt; issues and bugs related to NSTextView and the TextKit framework I reported to Apple so far:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FB9856587: TextKit2 unexpected additional line fragment for the last line&lt;/li&gt; &#xA; &lt;li&gt;FB9925766: NSTextSelectionNavigation.deletionRanges only works at the end of the word&lt;/li&gt; &#xA; &lt;li&gt;FB9925647: NSTextLayoutManager.replaceContents(in range: with attributedString:) is documented but is not part of the public API&lt;/li&gt; &#xA; &lt;li&gt;FB9907261: NSTextElementProvider.replaceContents(in:with:) does not replace content as documented&lt;/li&gt; &#xA; &lt;li&gt;FB9692714: Rendering attributes do not draw properly&lt;/li&gt; &#xA; &lt;li&gt;FB9886911: NSTextView can&#39;t properly layout and display long lines (this one is nasty since it causes the view to &#34;jump&#34; whenever text attribute updates)&lt;/li&gt; &#xA; &lt;li&gt;FB9713415: NSTextView drawInsertionPoint(in:color:turnedOn) is never called&lt;/li&gt; &#xA; &lt;li&gt;FB9971054: NSLayoutManager.enumerateCaretOffsetsInLineFragment ignores starting location&lt;/li&gt; &#xA; &lt;li&gt;FB9971054: NSTextView assert on selection when setup with TextKit2&lt;/li&gt; &#xA; &lt;li&gt;FB9743449, FB10019859: NSTextContentStorage.textElements(for:) returns no element, while enumerateTextElements does return elements&lt;/li&gt; &#xA; &lt;li&gt;FB11898356: textSelections(interactingAt:inContainerAt:anchors:modifiers:selecting:bounds:) produces wrong selections for certain locations&lt;/li&gt; &#xA; &lt;li&gt;FB12726775: Documentation to the NSTextParagraph.paragraphContentRange is incorrect&lt;/li&gt; &#xA; &lt;li&gt;FB13272586: NSTextContainer.size default value is not as documented&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/krzyzanowskim/7adc5ee66be68df2f76b9752476aadfb&#34;&gt;FB13290979&lt;/a&gt;: NSTextContainer.lineFragmentPadding does not affect end of the fragment usageBoundsForTextContainer rectangle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/krzyzanowskim/33a2478fa2281b77816acb7a7f6f77ac&#34;&gt;FB13291926&lt;/a&gt;: NSTextLayoutManager.usageBoundsForTextContainer observer is never trigerred&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... I&#39;m aware that the list of issues is not complete. I managed to workaround most of the problems in STTextView.&lt;/p&gt; &#xA;&lt;h2&gt;Why ST?&lt;/h2&gt; &#xA;&lt;p&gt;(&lt;strong&gt;ST&lt;/strong&gt; prefix stands for &#34;&lt;strong&gt;S&lt;/strong&gt;wift s&lt;strong&gt;T&lt;/strong&gt;udio&#34; because &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Schutzstaffel&#34;&gt;SS&lt;/a&gt;&lt;/strong&gt; is not good prefix since 1939)&lt;/p&gt; &#xA;&lt;h2&gt;Suggestions or Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Start a new &lt;a href=&#34;https://github.com/krzyzanowskim/STTextView/discussions&#34;&gt;discussion topic&lt;/a&gt; or a pull request.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d love to hear from you! Get in touch via X/Twitter &lt;a href=&#34;https://x.com/krzyzanowskim&#34;&gt;@krzyzanowskim&lt;/a&gt;, mastodon &lt;a href=&#34;https://mastodon.social/@krzyzanowskim&#34;&gt;@krzyzanowskim@mastodon.social&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;h3&gt;Open Source license&lt;/h3&gt; &#xA;&lt;p&gt;If you are creating an open-source application under a license compatible with the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GNU GPL license v3&lt;/a&gt;, you may use STTextView under the terms of the GPLv3.&lt;/p&gt; &#xA;&lt;h3&gt;Commercial license&lt;/h3&gt; &#xA;&lt;p&gt;Get one &lt;a href=&#34;https://krzyzanowskim.gumroad.com/l/sttextview&#34;&gt;starting from ‚Ç¨5&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use STTextView to develop non-open-sourced products and applications, the Commercial license is appropriate. With this option, your source code is kept proprietary. You won&#39;t have to change your whole application source code to an open-source license. &lt;a href=&#34;https://krzyzanowskim.gumroad.com/l/sttextview&#34;&gt;Purchase a STTextView Commercial License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pcccccc/SimpleLiveTVOS</title>
    <updated>2023-10-24T01:37:35Z</updated>
    <id>tag:github.com,2023-10-24:/pcccccc/SimpleLiveTVOS</id>
    <link href="https://github.com/pcccccc/SimpleLiveTVOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SimpleLiveTVOS&lt;/h1&gt; &#xA;&lt;h2&gt;‰∏ãËΩΩÂú∞ÂùÄÔºö&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://testflight.apple.com/join/2oZuwSHJ&#34;&gt;https://testflight.apple.com/join/2oZuwSHJ&lt;/a&gt; &lt;code&gt;TestflightÂÆâË£ÖÈìæÊé•&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üö® ÊèêÁ§∫Ôºö&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ËØ•È°πÁõÆÁõÆÂâçËôΩÁÑ∂Â∑≤ÁªèÂÆûÁé∞‰∏ªË¶ÅÂäüËÉΩÔºå‰ΩÜÂ∞öÊú™Á®≥ÂÆö„ÄÇ Á¨¨‰∏ÄÊ¨°‰ΩøÁî®SwiftUIÂÜôAppÔºå‰ª£Á†ÅËæÉÁÉÇËØ∑Â§ß‰Ω¨Â§öÂ§öÊåáÁÇπ„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Êà™ÂõæÔºö&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/pcccccc/SimpleLiveTVOS/main/ScreenShot/normal.png&#34; alt=&#34;ÊµÖËâ≤Ê®°Âºè&#34; style=&#34;zoom:30%;&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/pcccccc/SimpleLiveTVOS/main/ScreenShot/dark_mode.png&#34; alt=&#34;Ê∑±Ëâ≤Ê®°Âºè&#34; style=&#34;zoom:30%;&#34;&gt; &#xA;&lt;h2&gt;ËÉåÊôØÔºö&lt;/h2&gt; &#xA;&lt;p&gt;ÈÅáÂà∞‰∏Ä‰∏™ÈùûÂ∏∏Â•ΩÁöÑÈ°πÁõÆ: &lt;a href=&#34;https://github.com/xiaoyaocz/dart_simple_live/&#34;&gt;dart_simple_live&lt;/a&gt; &lt;code&gt;ÂéüÈ°πÁõÆ&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Áî±‰∫éÂéüÈ°πÁõÆÂü∫‰∫éFlutterÂà∂‰ΩúÔºå‰∏çÊîØÊåÅtvOSÁ´ØÔºå‰∫éÊòØ‰Ωú‰∏∫‰∏Ä‰∏™ÂéüÈ°πÁõÆÁöÑË°•ÂÖÖ„ÄÇÁõÆÂâçÂ∑≤ÁªèÂÆûÁé∞‰∫ÜÂü∫Êú¨ÁöÑÊí≠ÊîæÂäüËÉΩ„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÊîØÊåÅÂπ≥Âè∞Ôºö&lt;/h2&gt; &#xA;&lt;p&gt;tvOS 16+&lt;/p&gt; &#xA;&lt;h2&gt;TODOÔºö&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Ê∑ªÂä†loadingÂä®Áîª ÔºàÈáçË¶ÅÔºâ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Áªü‰∏ÄÊí≠ÊîæÂô®È°µÈù¢ÔºöÊîØÊåÅÊàøÈó¥ÂÜÖÂàáÊç¢ÂêåÈ¢ëÈÅìÊàñÂ∑≤Êî∂ËóèÁõ¥Êí≠Èó¥„ÄÅÊ∏ÖÊô∞Â∫¶ÂàáÊç¢ÔºàÈáçË¶ÅÔºâ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;ÊàøÈó¥ÊêúÁ¥¢&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;ÊîØÊåÅÂºπÂπïÂäüËÉΩ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÂèÇËÄÉÂèäÂºïÁî®Ôºö&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xiaoyaocz/dart_simple_live/&#34;&gt;dart_simple_live&lt;/a&gt; &lt;code&gt;ÂéüÈ°πÁõÆ&lt;/code&gt; &lt;a href=&#34;https://github.com/xiaoyaocz/AllLive&#34;&gt;AllLive&lt;/a&gt; &lt;code&gt;Âéü‰ΩúËÄÖÂºÄÂèëÁöÑC#ÁâàÊú¨&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iceking2nd/real-url&#34;&gt;iceking2nd/real-url&lt;/a&gt; &lt;code&gt;ËôéÁâôËß£ÊûêÂèÇËÄÉ&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher&#34;&gt;Kingfisher&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kingslay/KSPlayer&#34;&gt;KSPlayer&lt;/a&gt; &lt;code&gt;FLVÊ∫êÊí≠Êîæ&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xiaoyaocz/dart_tars_protocol.git&#34;&gt;dart_tars_protocol&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sanzaru/SimpleToast&#34;&gt;SimpleToast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbt5/real-url&#34;&gt;wbt5/real-url&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Â£∞ÊòéÔºö&lt;/h2&gt; &#xA;&lt;p&gt;Êú¨È°πÁõÆÁöÑÊâÄÊúâÂäüËÉΩÈÉΩÊòØÂü∫‰∫é‰∫íËÅîÁΩë‰∏äÂÖ¨ÂºÄÁöÑËµÑÊñôÂºÄÂèëÔºåÊó†‰ªª‰ΩïÁ†¥Ëß£„ÄÅÈÄÜÂêëÂ∑•Á®ãÁ≠âË°å‰∏∫„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êú¨È°πÁõÆ‰ªÖÁî®‰∫éÂ≠¶‰π†‰∫§ÊµÅÁºñÁ®ãÊäÄÊúØÔºå‰∏•Á¶ÅÂ∞ÜÊú¨È°πÁõÆÁî®‰∫éÂïÜ‰∏öÁõÆÁöÑ„ÄÇÂ¶ÇÊúâ‰ªª‰ΩïÂïÜ‰∏öË°å‰∏∫ÔºåÂùá‰∏éÊú¨È°πÁõÆÊó†ÂÖ≥„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊú¨È°πÁõÆÂ≠òÂú®‰æµÁäØÊÇ®ÁöÑÂêàÊ≥ïÊùÉÁõäÁöÑÊÉÖÂÜµÔºåËØ∑ÂèäÊó∂‰∏éÂºÄÂèëËÄÖËÅîÁ≥ªÔºåÂºÄÂèëËÄÖÂ∞Ü‰ºöÂèäÊó∂Âà†Èô§ÊúâÂÖ≥ÂÜÖÂÆπ„ÄÇ&lt;/p&gt;</summary>
  </entry>
</feed>