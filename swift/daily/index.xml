<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-29T01:45:48Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yichengchen/ATV-Bilibili-demo</title>
    <updated>2022-08-29T01:45:48Z</updated>
    <id>tag:github.com,2022-08-29:/yichengchen/ATV-Bilibili-demo</id>
    <link href="https://github.com/yichengchen/ATV-Bilibili-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BiliBili Live Client Demo for Apple TV (tvOS)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BiliBili tvOS 客户端 Demo&lt;/h1&gt; &#xA;&lt;h3&gt;支持功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;二维码登录&lt;/li&gt; &#xA; &lt;li&gt;直播与弹幕&lt;/li&gt; &#xA; &lt;li&gt;推荐Feed&lt;/li&gt; &#xA; &lt;li&gt;关注列表&lt;/li&gt; &#xA; &lt;li&gt;历史播放&lt;/li&gt; &#xA; &lt;li&gt;稍后再看&lt;/li&gt; &#xA; &lt;li&gt;系统播放器播放视频&lt;/li&gt; &#xA; &lt;li&gt;视频弹幕&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yichengchen/ATV-Bilibili-demo/main/imgs/1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yichengchen/ATV-Bilibili-demo/main/imgs/2.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yichengchen/ATV-Bilibili-demo/main/imgs/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;App Icon &lt;a href=&#34;https://www.bilibili.com/video/BV1AB4y1k7em&#34;&gt;【22娘×33娘】亲爱的UP主，你怎么还在咕咕咕？&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/thmatuza/MPEGDASHAVPlayerDemo&#34;&gt;thmatuza/MPEGDASHAVPlayerDemo&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>divkit/divkit</title>
    <updated>2022-08-29T01:45:48Z</updated>
    <id>tag:github.com,2022-08-29:/divkit/divkit</id>
    <link href="https://github.com/divkit/divkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DivKit is an open source Server-Driven UI (SDUI) framework. SDUI is a an emerging technique that leverage the server to build the user interfaces of their mobile app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DivKit &lt;img alt=&#34;Playground app&#34; src=&#34;https://raw.githubusercontent.com/divkit/divkit/main/client/android/app_screen.png&#34; width=&#34;30%&#34; align=&#34;right&#34; style=&#34;margin:20px;&#34;&gt;&lt;/h1&gt; &#xA;&lt;a href=&#34;https://github.com/divkit/divkit/stargazers&#34;&gt; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/divkit/divkit&#34;&gt;&lt;/a&gt; &#xA;&lt;p&gt;&lt;strong&gt;DivKit&lt;/strong&gt; 🐋 is an open source Server-Driven UI (SDUI) framework. It allows you to roll out server-sourced updates to different app versions. Also, it can be used for fast UI prototyping, allowing you to write a layout once and then ship it to iOS, Android, and Web platforms. DivKit is an excellent choice to start using server-driven UI in your project because it can be easily integrated as a simple view in any part of your app. At the starting point, you don’t need a server integration. You can include all JSON on the client-side to try it in a real-world application.&lt;/p&gt; &#xA;&lt;p&gt;Also, we’ve made a &lt;a href=&#34;https://divkit.tech/playground&#34;&gt;sandbox&lt;/a&gt; for you to experiment with. You can try different samples in the web editor and see the results on the web or in the Android &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.yandex.divkit.demo&#34;&gt;demo app&lt;/a&gt;, both of which are available on Google Play. We’ll publish the iOS demo app shortly. The UI in the demo can be updated live: the sandbox connects to the demo app via web sockets. You can use the &lt;a href=&#34;https://divkit.tech/en&#34;&gt;DivKit website&lt;/a&gt; to find a lot of handy samples and documentation, but feel free to ask us anything here in the comments or via the &lt;a href=&#34;https://t.me/divkit_community_en&#34;&gt;Telegram community chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://divkit.tech/doc&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://medium.com/p/cad519252f0f&#34;&gt;Medium tutorial&lt;/a&gt; | &lt;a href=&#34;https://habr.com/ru/company/yandex/blog/683886/&#34;&gt;Habr tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Telegram: &lt;a href=&#34;https://t.me/divkit_news&#34;&gt;News&lt;/a&gt; | &lt;a href=&#34;https://t.me/divkit_community_en&#34;&gt;English-speaking chat&lt;/a&gt; | &lt;a href=&#34;https://t.me/divkit_community_ru&#34;&gt;Чат на русском&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/DivKitFramework&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Demo App&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.yandex.divkit.demo&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/divkit/divkit/main/client/ios/app_badge_soon.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;Client side libraries for rendering UI on Android, iOS and Web.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/divkit/divkit/main/client/android/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/divkit/divkit/main/client/ios/&#34;&gt;iOS&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/divkit/divkit/main/client/web/divkit&#34;&gt;Web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Json-builder&lt;/h3&gt; &#xA;&lt;p&gt;Server side libraries for building JSON in DivKit format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/divkit/divkit/main/json-builder/typescript/&#34;&gt;TypeScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/divkit/divkit/main/json-builder/kotlin/&#34;&gt;Kotlin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Schema&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/divkit/divkit/main/schema&#34;&gt;JSON schema&lt;/a&gt; that describes DivKit data format.&lt;/p&gt; &#xA;&lt;h3&gt;Api Generator&lt;/h3&gt; &#xA;&lt;p&gt;Used for generating general Api for all platforms from Schema.&lt;/p&gt; &#xA;&lt;h3&gt;Test data&lt;/h3&gt; &#xA;&lt;p&gt;Samples and test data.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sindresorhus/KeyboardShortcuts</title>
    <updated>2022-08-29T01:45:48Z</updated>
    <id>tag:github.com,2022-08-29:/sindresorhus/KeyboardShortcuts</id>
    <link href="https://github.com/sindresorhus/KeyboardShortcuts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⌨️ Add user-customizable global keyboard shortcuts to your macOS app in minutes&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;900&#34; src=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/main/logo-light.png#gh-light-mode-only&#34; alt=&#34;KeyboardShortcuts&#34;&gt; &#xA; &lt;img width=&#34;900&#34; src=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/main/logo-dark.png#gh-dark-mode-only&#34; alt=&#34;KeyboardShortcuts&#34;&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This package lets you add support for user-customizable global keyboard shortcuts to your macOS app in minutes. It&#39;s fully sandbox and Mac App Store compatible. And it&#39;s used in production by &lt;a href=&#34;https://sindresorhus.com/dato&#34;&gt;Dato&lt;/a&gt;, &lt;a href=&#34;https://sindresorhus.com/jiffy&#34;&gt;Jiffy&lt;/a&gt;, &lt;a href=&#34;https://github.com/sindresorhus/Plash&#34;&gt;Plash&lt;/a&gt;, and &lt;a href=&#34;https://sindresorhus.com/lungo&#34;&gt;Lungo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m happy to accept more configurability and features. PR welcome! What you see here is just what I needed for my own apps.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/main/screenshot.png&#34; width=&#34;532&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt; &lt;sup&gt; &lt;a href=&#34;https://github.com/sponsors/sindresorhus&#34;&gt;Sindre&#39;s open source work is supported by the community&lt;/a&gt; &lt;/sup&gt; &lt;/p&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://keygen.sh&#34;&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://sindresorhus.com/assets/thanks/keygen-logo.svg?sanitize=true&#34; width=&#34;210&#34; alt=&#34;Keygen&#34;&gt; &#xA;  &lt;/div&gt; &lt;b&gt;A dead-simple software licensing and distribution API built for developers&lt;/b&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;macOS 10.11+&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;https://github.com/sindresorhus/KeyboardShortcuts&lt;/code&gt; in the &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;“Swift Package Manager” tab in Xcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, register a name for the keyboard shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Constants.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardShortcuts&#xA;&#xA;extension KeyboardShortcuts.Name {&#xA;&#x9;static let toggleUnicornMode = Self(&#34;toggleUnicornMode&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then refer to this strongly-typed name in other places.&lt;/p&gt; &#xA;&lt;p&gt;You will want to make a view where the user can choose a keyboard shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SettingsScreen.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import KeyboardShortcuts&#xA;&#xA;struct SettingsScreen: View {&#xA;&#x9;var body: some View {&#xA;&#x9;&#x9;Form {&#xA;&#x9;&#x9;&#x9;KeyboardShortcuts.Recorder(&#34;Toggle Unicorn Mode:&#34;, name: .toggleUnicornMode)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;There&#39;s also &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/KeyboardShortcuts/main/#cocoa&#34;&gt;support for Cocoa&lt;/a&gt; instead of SwiftUI.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;KeyboardShortcuts.Recorder&lt;/code&gt; takes care of storing the keyboard shortcut in &lt;code&gt;UserDefaults&lt;/code&gt; and also warning the user if the chosen keyboard shortcut is already used by the system or the app&#39;s main menu.&lt;/p&gt; &#xA;&lt;p&gt;Add a listener for when the user presses their chosen keyboard shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;App.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import KeyboardShortcuts&#xA;&#xA;@main&#xA;struct YourApp: App {&#xA;&#x9;@StateObject private var appState = AppState()&#xA;&#xA;&#x9;var body: some Scene {&#xA;&#x9;&#x9;WindowGroup {&#xA;&#x9;&#x9;&#x9;// …&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;Settings {&#xA;&#x9;&#x9;&#x9;SettingsScreen()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;@MainActor&#xA;final class AppState: ObservableObject {&#xA;&#x9;init() {&#xA;&#x9;&#x9;KeyboardShortcuts.onKeyUp(for: .toggleUnicornMode) { [self] in&#xA;&#x9;&#x9;&#x9;isUnicornMode.toggle()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;You can also listen to key down with &lt;code&gt;.onKeyDown()&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s all! ✨&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find a complete example in the “Example” directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also find a &lt;a href=&#34;https://github.com/sindresorhus/Plash/raw/b348a62645a873abba8dc11ff0fb8fe423419411/Plash/PreferencesView.swift#L121-L130&#34;&gt;real-world example&lt;/a&gt; in my Plash app.&lt;/p&gt; &#xA;&lt;h4&gt;Cocoa&lt;/h4&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/KeyboardShortcuts/main/Sources/KeyboardShortcuts/RecorderCocoa.swift&#34;&gt;&lt;code&gt;KeyboardShortcuts.RecorderCocoa&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;KeyboardShortcuts.Recorder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Cocoa&#xA;import KeyboardShortcuts&#xA;&#xA;final class PreferencesViewController: NSViewController {&#xA;&#x9;override func loadView() {&#xA;&#x9;&#x9;view = NSView()&#xA;&#xA;&#x9;&#x9;let recorder = KeyboardShortcuts.RecorderCocoa(for: .toggleUnicornMode)&#xA;&#x9;&#x9;view.addSubview(recorder)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;This package supports &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/KeyboardShortcuts/main/Sources/KeyboardShortcuts/Localization&#34;&gt;localizations&lt;/a&gt;. PR welcome for more!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo.&lt;/li&gt; &#xA; &lt;li&gt;Create a directory that has a name that uses an &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1&lt;/a&gt; language code and optional designators, followed by the &lt;code&gt;.lproj&lt;/code&gt; suffix. &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/localizing_package_resources&#34;&gt;More here.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a file named &lt;code&gt;Localizable.strings&lt;/code&gt; under the new language directory and then copy the contents of &lt;code&gt;KeyboardShortcuts/Localization/en.lproj/Localizable.strings&lt;/code&gt; to the new file that you just created.&lt;/li&gt; &#xA; &lt;li&gt;Localize and make sure to review your localization multiple times. Check for typos.&lt;/li&gt; &#xA; &lt;li&gt;Try to find someone that speaks your language to review the translation.&lt;/li&gt; &#xA; &lt;li&gt;Submit a PR.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/sindresorhus/KeyboardShortcuts/main/documentation/keyboardshortcuts/keyboardshortcuts&#34;&gt;See the API docs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h4&gt;Show a recorded keyboard shortcut in an &lt;code&gt;NSMenuItem&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;!-- TODO: Link to the docs instead when DocC supports showing type extensions. --&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/0dcedd56994d871f243f3d9c76590bfd9f8aba69/Sources/KeyboardShortcuts/NSMenuItem%2B%2B.swift#L14-L41&#34;&gt;&lt;code&gt;NSMenuItem#setShortcut&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dynamic keyboard shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;Your app might need to support keyboard shortcuts for user-defined actions. Normally, you would statically register the keyboard shortcuts upfront in &lt;code&gt;extension KeyboardShortcuts.Name {}&lt;/code&gt;. However, this is not a requirement. It&#39;s only for convenience so that you can use dot-syntax when calling various APIs (for example, &lt;code&gt;.onKeyDown(.unicornMode) {}&lt;/code&gt;). You can create &lt;code&gt;KeyboardShortcut.Name&lt;/code&gt;&#39;s dynamically and store them yourself. You can see this in action in the example project.&lt;/p&gt; &#xA;&lt;h4&gt;Default keyboard shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;Setting a default keyboard shortcut can be useful if you&#39;re migrating from a different package or just making something for yourself. However, please do not set this for a publicly distributed app. Users find it annoying when random apps steal their existing keyboard shortcuts. It’s generally better to show a welcome screen on the first app launch that lets the user set the shortcut.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardShortcuts&#xA;&#xA;extension KeyboardShortcuts.Name {&#xA;&#x9;static let toggleUnicornMode = Self(&#34;toggleUnicornMode&#34;, default: .init(.k, modifiers: [.command, .option]))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get all keyboard shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;To get all the keyboard shortcut &lt;code&gt;Name&lt;/code&gt;&#39;s, conform &lt;code&gt;KeyboardShortcuts.Name&lt;/code&gt; to &lt;code&gt;CaseIterable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardShortcuts&#xA;&#xA;extension KeyboardShortcuts.Name {&#xA;&#x9;static let foo = Self(&#34;foo&#34;)&#xA;&#x9;static let bar = Self(&#34;bar&#34;)&#xA;}&#xA;&#xA;extension KeyboardShortcuts.Name: CaseIterable {&#xA;&#x9;public static let allCases: [Self] = [&#xA;&#x9;&#x9;.foo,&#xA;&#x9;&#x9;.bar&#xA;&#x9;]&#xA;}&#xA;&#xA;// …&#xA;&#xA;print(KeyboardShortcuts.Name.allCases)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to get all the &lt;code&gt;Name&lt;/code&gt;&#39;s with a set keyboard shortcut:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(KeyboardShortcuts.Name.allCases.filter { $0.shortcut != nil })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How is it different from &lt;a href=&#34;https://github.com/shpakovski/MASShortcut&#34;&gt;&lt;code&gt;MASShortcut&lt;/code&gt;&lt;/a&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;This package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in Swift with a swifty API.&lt;/li&gt; &#xA; &lt;li&gt;More native-looking UI component.&lt;/li&gt; &#xA; &lt;li&gt;SwiftUI component included.&lt;/li&gt; &#xA; &lt;li&gt;Support for listening to key down, not just key up.&lt;/li&gt; &#xA; &lt;li&gt;Swift Package Manager support.&lt;/li&gt; &#xA; &lt;li&gt;Connect a shortcut to an &lt;code&gt;NSMenuItem&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;MASShortcut&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More mature.&lt;/li&gt; &#xA; &lt;li&gt;More localizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How is it different from &lt;a href=&#34;https://github.com/soffes/HotKey&#34;&gt;&lt;code&gt;HotKey&lt;/code&gt;&lt;/a&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;HotKey&lt;/code&gt; is good for adding hard-coded keyboard shortcuts, but it doesn&#39;t provide any UI component for the user to choose their own keyboard shortcuts.&lt;/p&gt; &#xA;&lt;h4&gt;Why is this package importing &lt;code&gt;Carbon&lt;/code&gt;? Isn&#39;t that deprecated?&lt;/h4&gt; &#xA;&lt;p&gt;Most of the Carbon APIs were deprecated years ago, but there are some left that Apple never shipped modern replacements for. This includes registering global keyboard shortcuts. However, you should not need to worry about this. Apple will for sure ship new APIs before deprecating the Carbon APIs used here.&lt;/p&gt; &#xA;&lt;h4&gt;Does this package cause any permission dialogs?&lt;/h4&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h4&gt;How can I add an app-specific keyboard shortcut that is only active when the app is?&lt;/h4&gt; &#xA;&lt;p&gt;That is outside the scope of this package. You can either use &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsevent/1534971-addlocalmonitorforevents&#34;&gt;&lt;code&gt;NSEvent.addLocalMonitorForEvents&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsmenuitem/2880316-allowskeyequivalentwhenhidden&#34;&gt;&lt;code&gt;NSMenuItem&lt;/code&gt; with keyboard shortcut&lt;/a&gt; (it can even be hidden), or SwiftUI&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/form/keyboardshortcut(_:)&#34;&gt;&lt;code&gt;View#keyboardShortcut()&lt;/code&gt; modifier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Does it support media keys?&lt;/h4&gt; &#xA;&lt;p&gt;No, since it would not work for sandboxed apps. If your app is not sandboxed, you can use &lt;a href=&#34;https://github.com/nhurden/MediaKeyTap&#34;&gt;&lt;code&gt;MediaKeyTap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Can you support CocoaPods or Carthage?&lt;/h4&gt; &#xA;&lt;p&gt;No. However, there is nothing stopping you from using Swift Package Manager for just this package even if you normally use CocoaPods or Carthage.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Defaults&#34;&gt;Defaults&lt;/a&gt; - Swifty and modern UserDefaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Regex&#34;&gt;Regex&lt;/a&gt; - Swifty regular expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Preferences&#34;&gt;Preferences&lt;/a&gt; - Add a preferences window to your macOS app in minutes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/LaunchAtLogin&#34;&gt;LaunchAtLogin&lt;/a&gt; - Add &#34;Launch at Login&#34; functionality to your macOS app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=user%3Asindresorhus+language%3Aswift&#34;&gt;More…&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>