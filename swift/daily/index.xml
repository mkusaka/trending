<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:39:04Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pubnub/swift</title>
    <updated>2024-02-25T01:39:04Z</updated>
    <id>tag:github.com,2024-02-25:/pubnub/swift</id>
    <link href="https://github.com/pubnub/swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PubNub native Swift SDK for iOS, MacOS, WatchOS, TvOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PubNub Swift SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/cocoapods/p/PubNubSwift.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/PubNubSwift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/PubNubSwift.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/PubNubSwift.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/pubnub/swift&#34;&gt;&lt;img src=&#34;https://travis-ci.org/pubnub/swift.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=pubnub/swift&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/d6dbd8cad97d42bbb72c47137e94d6f5&#34; alt=&#34;Codacy Coverage Grade Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the official PubNub Swift SDK repository.&lt;/p&gt; &#xA;&lt;p&gt;PubNub takes care of the infrastructure and APIs needed for the realtime communication layer of your application. Work on your app&#39;s logic and let PubNub handle sending and receiving data across the world in less than 100ms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#get-keys&#34;&gt;Get keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#set-up-your-project&#34;&gt;Set up your project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#configure-pubnub&#34;&gt;Configure PubNub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#add-event-listeners&#34;&gt;Add event listeners&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#publish-and-subscribe&#34;&gt;Publish and subscribe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0+ / macOS 10.11+ / Mac Catalyst 13.0+ / tvOS 9.0+ / watchOS 2.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 11+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The PubNub Swift SDK doesn&#39;t contain any external dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Get keys&lt;/h2&gt; &#xA;&lt;p&gt;You will need the publish and subscribe keys to authenticate your app. Get your keys from the &lt;a href=&#34;https://dashboard.pubnub.com/&#34;&gt;Admin Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Set up your project&lt;/h2&gt; &#xA;&lt;p&gt;You have several options to set up your project. We provide instructions here for &lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/pubnub/swift/master/#carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create or open your project inside of Xcode&lt;/li&gt; &#xA; &lt;li&gt;Navigate to File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; &#xA; &lt;li&gt;Search for PubNub and select the swift package owned by pubnub, and hit the Next button&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;Up to Next Major Version&lt;/code&gt; rule spanning from &lt;code&gt;4.0.0&lt;/code&gt; &amp;lt; &lt;code&gt;5.0.0&lt;/code&gt;, and hit the Next button&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information see Apple&#39;s guide on &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Adding Package Dependencies to Your App&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Podfile&#xA;use_frameworks!&#xA;&#xA;target &#39;YOUR_TARGET_NAME&#39; do&#xA;  pod &#39;PubNubSwift&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; with your target&#39;s name.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In the directory containing your &lt;code&gt;Podfile&lt;/code&gt;. execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Officially supported: Carthage 0.33 and up.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;pubnub/swift&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in the directory containing your &lt;code&gt;Cartfile&lt;/code&gt;, execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure PubNub&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the module named &lt;code&gt;PubNub&lt;/code&gt; inside your AppDelegate:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import PubNub // &amp;lt;- Here is our PubNub module import.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create and configure a PubNub object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = PubNubConfiguration(&#xA;  publishKey: &#34;myPublishKey&#34;,&#xA;  subscribeKey: &#34;mySubscribeKey&#34;,&#xA;  uuid: &#34;myUniqueUUID&#34;&#xA;)&#xA;let pubnub = PubNub(configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add event listeners&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a new listener instance&#xA;let listener = SubscriptionListener()&#xA;&#xA;// Add listener event callbacks&#xA;listener.didReceiveSubscription = { event in&#xA;  switch event {&#xA;  case let .messageReceived(message):&#xA;    print(&#34;Message Received: \(message) Publisher: \(message.publisher ?? &#34;defaultUUID&#34;)&#34;)&#xA;  case let .connectionStatusChanged(status):&#xA;    print(&#34;Status Received: \(status)&#34;)&#xA;  case let .presenceChanged(presence):&#xA;    print(&#34;Presence Received: \(presence)&#34;)&#xA;  case let .subscribeError(error):&#xA;    print(&#34;Subscription Error \(error)&#34;)&#xA;  default:&#xA;    break&#xA;  }&#xA;}&#xA;&#xA;// Start receiving subscription events&#xA;pubnub.add(listener)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: You can check the UUID of the publisher of a particular message by checking the &lt;code&gt;message.publisher&lt;/code&gt; property in the subscription listener. You must also provide a default value for &lt;code&gt;publisher&lt;/code&gt;, as the &lt;code&gt;UUID&lt;/code&gt; parameter is optional.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Publish and subscribe&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pubnub.publish(channel: &#34;my_channel&#34;, message: &#34;Test Message!&#34;) { result in&#xA;  switch result {&#xA;  case let .success(timetoken):&#xA;    print(&#34;The message was successfully published at: \(timetoken)&#34;)&#xA;  case let .failure(error):&#xA;    print(&#34;Handle response error: \(error.localizedDescription)&#34;)&#xA;  }&#xA;}&#xA;&#xA;pubnub.subscribe(to: [&#34;my_channel&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pubnub.com/docs/platform/quickstarts/swift&#34;&gt;Build your first realtime Swift app with PubNub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pubnub.com/docs/swift-native/pubnub-swift-sdk&#34;&gt;API reference for Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pubnub/swift/raw/master/Documentation/PubNub_3_0_Migration_Guide.md&#34;&gt;PubNub Swift SDK 3.x Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you &lt;strong&gt;need help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;, contact &lt;a href=&#34;mailto:support@pubnub.com&#34;&gt;support@pubnub.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The PubNub Swift SDK is released under the &lt;code&gt;PubNub Software Development Kit License&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pubnub/swift/raw/master/LICENSE&#34;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yannickl/DynamicColor</title>
    <updated>2024-02-25T01:39:04Z</updated>
    <id>tag:github.com,2024-02-25:/yannickl/DynamicColor</id>
    <link href="https://github.com/yannickl/DynamicColor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet another extension to manipulate colors easily in Swift and SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-header.png&#34; alt=&#34;DynamicColor&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DynamicColor/&#34;&gt;&lt;img alt=&#34;Supported Platforms&#34; src=&#34;https://cocoapod-badges.herokuapp.com/p/DynamicColor/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DynamicColor/&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://cocoapod-badges.herokuapp.com/v/DynamicColor/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img alt=&#34;Carthage compatible&#34; src=&#34;https://img.shields.io/badge/Carthage-%E2%9C%93-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img alt=&#34;Swift Package Manager compatible&#34; src=&#34;https://img.shields.io/badge/SPM-%E2%9C%93-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/yannickl/DynamicColor&#34;&gt;&lt;img alt=&#34;Build status&#34; src=&#34;https://travis-ci.org/yannickl/DynamicColor.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/yannickl/DynamicColor&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/yannickl/DynamicColor/branch/master/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DynamicColor&lt;/strong&gt; provides powerful methods to manipulate colors in an easy way in Swift and SwiftUI.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-sample-screenshot.png&#34; alt=&#34;example screenshot&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamicgradient-sample-screenshot.png&#34; alt=&#34;example screenshot&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/DynamicColor/master/#requirements&#34;&gt;Requirements&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/DynamicColor/master/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/DynamicColor/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/DynamicColor/master/#contribution&#34;&gt;Contribution&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/DynamicColor/master/#contact&#34;&gt;Contact&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/yannickl/DynamicColor/master/#license-mit&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 11.0+ / Mac OS X 10.11+ / tvOS 11.0+ / watchOS 4.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.2+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Creation (Hex String)&lt;/h4&gt; &#xA;&lt;p&gt;Firstly, DynamicColor provides useful initializers to create colors using hex strings or values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let color = UIColor(hexString: &#34;#3498db&#34;)&#xA;// equivalent to&#xA;// color = UIColor(hex: 0x3498db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To be platform independent, the typealias &lt;code&gt;DynamicColor&lt;/code&gt; can also be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let color = DynamicColor(hex: 0x3498db)&#xA;// On iOS, WatchOS or tvOS, equivalent to&#xA;// color = UIColor(hex: 0x3498db)&#xA;// On OSX, equivalent to&#xA;// color = NSColor(hex: 0x3498db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve the RGBA value and components very easily using multiple methods like &lt;code&gt;toHexString&lt;/code&gt;, &lt;code&gt;toHex&lt;/code&gt;, &lt;code&gt;toRGBA&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h5&gt;SwiftUI&lt;/h5&gt; &#xA;&lt;p&gt;From the v5, DynamicColor also support basic methods to create and manipulate colors with SwiftUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let color = Color(hex: 0x3498db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Darken &amp;amp; Lighten&lt;/h4&gt; &#xA;&lt;p&gt;These two create a new color by adjusting the lightness of the receiver. You have to use a value between 0 and 1.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-darkenlighten.png&#34; alt=&#34;lighten and darken color&#34; width=&#34;280&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let originalColor = DynamicColor(hexString: &#34;#c0392b&#34;)&#xA;&#xA;let lighterColor = originalColor.lighter()&#xA;// equivalent to&#xA;// lighterColor = originalColor.lighter(amount: 0.2)&#xA;&#xA;let darkerColor = originalColor.darkened()&#xA;// equivalent to&#xA;// darkerColor = originalColor.darkened(amount: 0.2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Saturate, Desaturate &amp;amp; Grayscale&lt;/h4&gt; &#xA;&lt;p&gt;These will adjust the saturation of the color object, much like &lt;code&gt;darkened&lt;/code&gt; and &lt;code&gt;lighter&lt;/code&gt; adjusted the lightness. Again, you need to use a value between 0 and 1.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-saturateddesaturatedgrayscale.png&#34; alt=&#34;saturate, desaturate and grayscale color&#34; width=&#34;373&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let originalColor = DynamicColor(hexString: &#34;#c0392b&#34;)&#xA;&#xA;let saturatedColor = originalColor.saturated()&#xA;// equivalent to&#xA;// saturatedColor = originalColor.saturated(amount: 0.2)&#xA;&#xA;let desaturatedColor = originalColor.desaturated()&#xA;// equivalent to&#xA;// desaturatedColor = originalColor.desaturated(amount: 0.2)&#xA;&#xA;// equivalent to&#xA;// let grayscaledColor = originalColor.grayscaled(mode: .luminance)&#xA;let grayscaledColor = originalColor.grayscaled()&#xA;&#xA;let grayscaledColorLuminance = originalColor.grayscaled(mode: .luminance)&#xA;let grayscaledColorLightness = originalColor.grayscaled(mode: .lightness)&#xA;let grayscaledColorAverage = originalColor.grayscaled(mode: .average)&#xA;let grayscaledColorValue = originalColor.grayscaled(mode: .value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adjust-hue &amp;amp; Complement&lt;/h4&gt; &#xA;&lt;p&gt;These adjust the hue value of the color in the same way like the others do. Again, it takes a value between 0 and 1 to update the value.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-adjustedhuecomplement.png&#34; alt=&#34;ajusted-hue and complement color&#34; width=&#34;280&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let originalColor = DynamicColor(hex: 0xc0392b)&#xA;&#xA;// Hue values are in degrees&#xA;let adjustHueColor = originalColor.adjustedHue(amount: 45)&#xA;&#xA;let complementedColor = originalColor.complemented()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tint &amp;amp; Shade&lt;/h4&gt; &#xA;&lt;p&gt;A tint is the mixture of a color with white and a shade is the mixture of a color with black. Again, it takes a value between 0 and 1 to update the value.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-tintshadecolor.png&#34; alt=&#34;tint and shade color&#34; width=&#34;280&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let originalColor = DynamicColor(hexString: &#34;#c0392b&#34;)&#xA;&#xA;let tintedColor = originalColor.tinted()&#xA;// equivalent to&#xA;// tintedColor = originalColor.tinted(amount: 0.2)&#xA;&#xA;let shadedColor = originalColor.shaded()&#xA;// equivalent to&#xA;// shadedColor = originalColor.shaded(amount: 0.2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Invert&lt;/h4&gt; &#xA;&lt;p&gt;This can invert the color object. The red, green, and blue values are inverted, while the opacity is left alone.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-invert.png&#34; alt=&#34;invert color&#34; width=&#34;187&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let originalColor = DynamicColor(hexString: &#34;#c0392b&#34;)&#xA;&#xA;let invertedColor = originalColor.inverted()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mix&lt;/h4&gt; &#xA;&lt;p&gt;This can mix a given color with the receiver. It takes the average of each of the RGB components, optionally weighted by the given percentage (value between 0 and 1).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamiccolor-mixcolor.png&#34; alt=&#34;mix color&#34; width=&#34;373&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let originalColor = DynamicColor(hexString: &#34;#c0392b&#34;)&#xA;&#xA;let mixedColor = originalColor.mixed(withColor: .blue)&#xA;// equivalent to&#xA;// mixedColor = originalColor.mixed(withColor: .blue, weight: 0.5)&#xA;// or&#xA;// mixedColor = originalColor.mixed(withColor: .blue, weight: 0.5, inColorSpace: .rgb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Gradients&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;DynamicColor&lt;/strong&gt; provides an useful object to work with gradients: &lt;strong&gt;DynamicGradient&lt;/strong&gt;. It&#39;ll allow you to pick color from gradients, or to build a palette using different color spaces (.e.g.: &lt;em&gt;RGB&lt;/em&gt;, &lt;em&gt;HSL&lt;/em&gt;, &lt;em&gt;HSB&lt;/em&gt;, &lt;em&gt;Cie L*a*b*&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s define our reference colors and the gradient object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let blue   = UIColor(hexString: &#34;#3498db&#34;)&#xA;let red    = UIColor(hexString: &#34;#e74c3c&#34;)&#xA;let yellow = UIColor(hexString: &#34;#f1c40f&#34;)&#xA;&#xA;let gradient = DynamicGradient(colors: [blue, red, yellow])&#xA;// equivalent to&#xA;// let gradient = [blue, red, yellow].gradient&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;RGB&lt;/h5&gt; &#xA;&lt;p&gt;Let&#39;s build the RGB palette (the default color space) with 8 colors:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamicgradient-rgb&#34; alt=&#34;RGB gradient&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rgbPalette = gradient.colorPalette(amount: 8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;HSL&lt;/h5&gt; &#xA;&lt;p&gt;Now if you want to change the gradient color space to have a different effect, just write the following lines:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamicgradient-hsl&#34; alt=&#34;HSL gradient&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hslPalette = gradient.colorPalette(amount: 8, inColorSpace: .hsl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Cie L*a*b*&lt;/h5&gt; &#xA;&lt;p&gt;Or if you prefer to work directly with array of colors, you can:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://yannickloriot.com/resources/dynamicgradient-lab&#34; alt=&#34;Cie L*a*b* gradient&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let labPalette = [blue, red, yellow].gradient.colorPalette(amount: 8, inColorSpace: .lab)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;And many more...&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;DynamicColor&lt;/code&gt; also provides many another useful methods to manipulate the colors like hex strings, color components, color spaces, etc. To go further, take a look at the example project.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Install CocoaPods if not already available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ [sudo] gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to the directory of your Xcode project, and Create and Edit your &lt;em&gt;Podfile&lt;/em&gt; and add &lt;em&gt;DynamicColor&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /path/to/MyProject&#xA;$ touch Podfile&#xA;$ edit Podfile&#xA;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;8.0&#39;&#xA;&#xA;use_frameworks!&#xA;pod &#39;DynamicColor&#39;, &#39;~&amp;gt; 5.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install into your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project in Xcode from the .xcworkspace file (not the usual project file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open MyProject.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now &lt;code&gt;import DynamicColor&lt;/code&gt; framework into your files.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;DynamicColor&lt;/code&gt; into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;yannickl/DynamicColor&#34; &amp;gt;= 5.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;The Swift Package Manager&lt;/a&gt; to install &lt;code&gt;DynamicColor&lt;/code&gt; by adding the proper description to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    targets: [],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/yannickl/DynamicColor.git&#34;, from: &#34;5.0.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; is still in early design and development, for more information checkout its &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;GitHub Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Manually&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YannickL/DynamicColor/archive/master.zip&#34;&gt;Download&lt;/a&gt; the project and copy the &lt;code&gt;DynamicColor&lt;/code&gt; folder into your project to use it in.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed and encouraged &lt;em&gt;♡&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Yannick Loriot&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://21.co/yannickl/&#34;&gt;https://21.co/yannickl/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/yannickloriot&#34;&gt;https://twitter.com/yannickloriot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License (MIT)&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2015-present - Yannick Loriot&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>