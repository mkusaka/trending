<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-15T01:55:29Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peripheryapp/periphery</title>
    <updated>2022-07-15T01:55:29Z</updated>
    <id>tag:github.com,2022-07-15:/peripheryapp/periphery</id>
    <link href="https://github.com/peripheryapp/periphery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to identify unused code in Swift projects.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/assets/logo.png&#34; alt=&#34;Periphery&#34; height=&#34;60&#34;&gt; &lt;br&gt; Periphery &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;A tool to identify unused code in Swift projects.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;q&gt;&lt;i&gt;Now I am become Delete, the destroyer of codes.&lt;/i&gt;&lt;/q&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/peripheryapp/periphery/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/peripheryapp/periphery.svg?color=008DFF&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-macOS%20|%20Linux-008DFF&#34;&gt; &lt;a href=&#34;https://github.com/peripheryapp/periphery/actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/peripheryapp/periphery/Test/master&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#how-to-use&#34;&gt;How To Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#how-it-works&#34;&gt;How It Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#analysis&#34;&gt;Analysis&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#function-parameters&#34;&gt;Function Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#protocols-1&#34;&gt;Protocols&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#enumerations&#34;&gt;Enumerations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#assign-only-properties&#34;&gt;Assign-only Properties&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#redundant-public-accessibility&#34;&gt;Redundant Public Accessibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#objective-c&#34;&gt;Objective-C&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#encodable&#34;&gt;Encodable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#comment-commands&#34;&gt;Comment Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#xcode-integration&#34;&gt;Xcode Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#excluding-files&#34;&gt;Excluding Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#platforms&#34;&gt;Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#known-bugs&#34;&gt;Known Bugs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (macOS only)&lt;/h3&gt; &#xA;&lt;p&gt;Install Homebrew:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can skip this step if you already have Homebrew installed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now install Periphery itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install peripheryapp/periphery/periphery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add Periphery to your &lt;code&gt;Package.swift&lt;/code&gt; dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/peripheryapp/periphery&#34;, from: &#34;2.0.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run periphery via Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swift run periphery scan ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;SwiftPM does not yet support prebuilt binaries, therefore be aware that Periphery will be built from source. This also means that Periphery will be built using the same build configuration you specify to build your entire project (the default is &#39;debug&#39;). Debug builds of Periphery are significantly slower than release builds.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; (macOS only)&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;Periphery&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run &lt;code&gt;pod install&lt;/code&gt;, the Periphery executable will be downloaded and placed at &lt;code&gt;Pods/Periphery/periphery&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;scan&lt;/code&gt; Command&lt;/h3&gt; &#xA;&lt;p&gt;The scan command is Periphery&#39;s primary function. To begin a guided setup, simply change to your project directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;periphery scan --setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After answering a few questions, Periphery will print out the full scan command and execute it.&lt;/p&gt; &#xA;&lt;p&gt;The guided setup is only intended for introductory purposes, once you are familiar with Periphery you can try some more advanced options, all of which can be seen with &lt;code&gt;periphery help scan&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get coherent results from Periphery, it&#39;s crucial to understand the implications of the build targets you choose to analyze. For example, imagine a project consisting of three targets: App, Lib and Tests. The App target imports Lib, and the Tests targets imports both App and Lib. If you were to provide all three to the &lt;code&gt;--targets&lt;/code&gt; option then Periphery will be able to analyze your project as a whole. However, if you only choose to analyze App and Lib, but not Tests, Periphery may report some instances of unused code that are &lt;em&gt;only&lt;/em&gt; referenced by Tests. Therefore when you suspect Periphery has provided an incorrect result, it&#39;s important to consider the targets that you have chosen to analyze.&lt;/p&gt; &#xA;&lt;p&gt;If your project consists of one or more standalone frameworks that do not also contain some kind of application that consume their interfaces, then you&#39;ll need to tell Periphery to assume that all public declarations are in fact used by including the &lt;code&gt;--retain-public&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;For projects that are mixed Objective-C &amp;amp; Swift, it&#39;s highly recommend you &lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#objective-c&#34;&gt;read about the implications&lt;/a&gt; this can have on your results.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve settled upon the appropriate options for your project, you may wish to persist them in a YAML configuration file. The simplest way to achieve this is to run Periphery with the &lt;code&gt;--verbose&lt;/code&gt; option. Near the beginning of the output you will see the &lt;code&gt;[configuration:begin]&lt;/code&gt; section with your configuration formatted as YAML below. Copy &amp;amp; paste the configuration into &lt;code&gt;.periphery.yml&lt;/code&gt; in the root of your project folder. You can now simply run &lt;code&gt;periphery scan&lt;/code&gt; and the YAML configuration will be used.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Periphery first builds your project. For Xcode projects the schemes provided via the &lt;code&gt;--schemes&lt;/code&gt; option are built using &lt;code&gt;xcodebuild&lt;/code&gt;. For Swift Package Manager projects, the individual targets provided via the &lt;code&gt;--targets&lt;/code&gt; option are built using &lt;code&gt;swift build&lt;/code&gt;. The Swift compiler employs a technique called index-while-building to populate an index store that contains information about the structure of your project&#39;s source code.&lt;/p&gt; &#xA;&lt;p&gt;After your project is built, Periphery performs an indexing phase. For every source file that is a member of the targets provided via the &lt;code&gt;--targets&lt;/code&gt; option, Periphery obtains its structural information from the index store and builds its own internal graph representation of your project. Periphery also analyzes each file&#39;s abstract syntax tree (AST) to fill in some details not provided by the index store.&lt;/p&gt; &#xA;&lt;p&gt;Once indexing is complete, Periphery analyzes the graph to identify unused code. This phase consists of a number of steps that mutate the graph to make it easier to identify specific scenarios of unused code. The final step walks the graph from its roots to identify declarations that are no longer referenced.&lt;/p&gt; &#xA;&lt;h2&gt;Analysis&lt;/h2&gt; &#xA;&lt;p&gt;The goal of Periphery is to report instances of unused &lt;em&gt;declarations&lt;/em&gt;. A declaration is a &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;property&lt;/code&gt;, &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;typealias&lt;/code&gt;, &lt;code&gt;associatedtype&lt;/code&gt;, etc. As you&#39;d expect, Periphery is able to identify simple unreferenced declarations, e.g a &lt;code&gt;class&lt;/code&gt; that is no longer used anywhere in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;Periphery can also identify more advanced instances of unused code. The following section explains these in detail.&lt;/p&gt; &#xA;&lt;h3&gt;Function Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Periphery can identify unused function parameters. Instances of unused parameters can also be identified in protocols and their conforming declarations, as well as parameters in overridden methods. Both of these scenarios are explained further below.&lt;/p&gt; &#xA;&lt;h4&gt;Protocols&lt;/h4&gt; &#xA;&lt;p&gt;An unused parameter of a protocol function will only be reported as unused if the parameter is also unused in all implementations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Greeter {&#xA;    func greet(name: String)&#xA;    func farewell(name: String) // &#39;name&#39; is unused&#xA;}&#xA;&#xA;class InformalGreeter: Greeter {&#xA;    func greet(name: String) {&#xA;        print(&#34;Sup &#34; + name + &#34;.&#34;)&#xA;    }&#xA;&#xA;    func farewell(name: String) { // &#39;name&#39; is unused&#xA;      print(&#34;Cya.&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;You can ignore all unused parameters from protocols and conforming functions with the &lt;code&gt;--retain-unused-protocol-func-params&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Overrides&lt;/h4&gt; &#xA;&lt;p&gt;Similar to protocols, parameters of overridden functions are only reported as unused if they&#39;re also unused in the base function and all overriding functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class BaseGreeter {&#xA;    func greet(name: String) {&#xA;        print(&#34;Hello.&#34;)&#xA;    }&#xA;&#xA;    func farewell(name: String) { // &#39;name&#39; is unused&#xA;        print(&#34;Goodbye.&#34;)&#xA;    }&#xA;}&#xA;&#xA;class InformalGreeter: BaseGreeter {&#xA;    override func greet(name: String) {&#xA;        print(&#34;Sup &#34; + name + &#34;.&#34;)&#xA;    }&#xA;&#xA;    override func farewell(name: String) { // &#39;name&#39; is unused&#xA;        print(&#34;Cya.&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Foreign Protocols &amp;amp; Classes&lt;/h4&gt; &#xA;&lt;p&gt;Unused parameters of protocols or classes defined in foreign modules (e.g Foundation) are always ignored, since you do not have access to modify the base function declaration.&lt;/p&gt; &#xA;&lt;h4&gt;fatalError Functions&lt;/h4&gt; &#xA;&lt;p&gt;Unused parameters of functions that simply call &lt;code&gt;fatalError&lt;/code&gt; are also ignored. Such functions are often unimplemented required initializers in subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Base {&#xA;    let param: String&#xA;&#xA;    required init(param: String) {&#xA;        self.param = param&#xA;    }&#xA;}&#xA;&#xA;class Subclass: Base {&#xA;    init(custom: String) {&#xA;        super.init(param: custom)&#xA;    }&#xA;&#xA;    required init(param: String) {&#xA;        fatalError(&#34;init(param:) has not been implemented&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Protocols&lt;/h3&gt; &#xA;&lt;p&gt;A protocol which is conformed to by an object is not truly used unless it&#39;s also used as an existential type, or to specialize a generic method/class. Periphery is able to identify such redundant protocols whether they are conformed to by one, or even multiple objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MyProtocol { // &#39;MyProtocol&#39; is redundant&#xA;    func someMethod()&#xA;}&#xA;&#xA;class MyClass1: MyProtocol { // &#39;MyProtocol&#39; conformance is redundant&#xA;    func someMethod() {&#xA;        print(&#34;Hello from MyClass1!&#34;)&#xA;    }&#xA;}&#xA;&#xA;class MyClass2: MyProtocol { // &#39;MyProtocol&#39; conformance is redundant&#xA;    func someMethod() {&#xA;        print(&#34;Hello from MyClass2!&#34;)&#xA;    }&#xA;}&#xA;&#xA;let myClass1 = MyClass1()&#xA;myClass1.someMethod()&#xA;&#xA;let myClass2 = MyClass2()&#xA;myClass2.someMethod()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we can see that despite both implementations of &lt;code&gt;someMethod&lt;/code&gt; are called, at no point does an object take on the type of &lt;code&gt;MyProtocol&lt;/code&gt;. Therefore the protocol itself is redundant, and there&#39;s no benefit from &lt;code&gt;MyClass1&lt;/code&gt; or &lt;code&gt;MyClass2&lt;/code&gt; conforming to it. We can remove &lt;code&gt;MyProtocol&lt;/code&gt; along with each redundant conformance, and just keep &lt;code&gt;someMethod&lt;/code&gt; in each class.&lt;/p&gt; &#xA;&lt;p&gt;Just like a normal method or property of a object, individual properties and methods declared by your protocol can also be identified as unused.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MyProtocol {&#xA;    var usedProperty: String { get }&#xA;    var unusedProperty: String { get } // &#39;unusedProperty&#39; is unused&#xA;}&#xA;&#xA;class MyConformingClass: MyProtocol {&#xA;    var usedProperty: String = &#34;used&#34;&#xA;    var unusedProperty: String = &#34;unused&#34; // &#39;unusedProperty&#39; is unused&#xA;}&#xA;&#xA;class MyClass {&#xA;    let conformingClass: MyProtocol&#xA;&#xA;    init() {&#xA;        conformingClass = MyConformingClass()&#xA;    }&#xA;&#xA;    func perform() {&#xA;        print(conformingClass.usedProperty)&#xA;    }&#xA;}&#xA;&#xA;let myClass = MyClass()&#xA;myClass.perform()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we can see that &lt;code&gt;MyProtocol&lt;/code&gt; is itself used, and cannot be removed. However, since &lt;code&gt;unusedProperty&lt;/code&gt; is never called on &lt;code&gt;MyConformingClass&lt;/code&gt;, Periphery is able to identify that the declaration of &lt;code&gt;unusedProperty&lt;/code&gt; in &lt;code&gt;MyProtocol&lt;/code&gt; is also unused and can be removed along with the unused implementation of &lt;code&gt;unusedProperty&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Enumerations&lt;/h3&gt; &#xA;&lt;p&gt;Along with being able to identify unused enumerations, Periphery can also identify individual unused enum cases. Plain enums that are not raw representable, i.e that &lt;em&gt;don&#39;t&lt;/em&gt; have a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt; or floating-point value type can be reliably identified. However, enumerations that &lt;em&gt;do&lt;/em&gt; have a raw value type can be dynamic in nature, and therefore must be assumed to be used.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s clear this up with a quick example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum MyEnum: String {&#xA;    case myCase&#xA;}&#xA;&#xA;func someFunction(value: String) {&#xA;    if let myEnum = MyEnum(rawValue: value) {&#xA;        somethingImportant(myEnum)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s no direct reference to the &lt;code&gt;myCase&lt;/code&gt; case, so it&#39;s reasonable to expect it &lt;em&gt;might&lt;/em&gt; no longer be needed, however if it were removed we can see that &lt;code&gt;somethingImportant&lt;/code&gt; would never be called if &lt;code&gt;someFunction&lt;/code&gt; were passed the value of &lt;code&gt;&#34;myCase&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Assign-only Properties&lt;/h3&gt; &#xA;&lt;p&gt;Properties that are assigned but never used are identified as such, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyClass {&#xA;    var assignOnlyProperty: String // &#39;assignOnlyProperty&#39; is assigned, but never used&#xA;&#xA;    init(value: String) {&#xA;        self.assignOnlyProperty = value&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases this may be the intended behavior, therefore you have a few options available to silence such results:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retain individual properties using &lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#comment-commands&#34;&gt;Comment Commands&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Retain all assign-only properties by their type with &lt;code&gt;--retain-assign-only-property-types&lt;/code&gt;. Given types must match their exact usage in the property declaration (sans optional question mark), e.g &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;[String]&lt;/code&gt;, &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt;. Periphery is unable to resolve inferred property types, therefore in some instances you may need to add explicit type annotations to your properties.&lt;/li&gt; &#xA; &lt;li&gt;Disable assign-only property analysis entirely with &lt;code&gt;--retain-assign-only-properties&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Redundant Public Accessibility&lt;/h3&gt; &#xA;&lt;p&gt;Declarations that are marked &lt;code&gt;public&lt;/code&gt; yet are not referenced from outside their home module, are identified as having redundant public accessibility. In this scenario, the &lt;code&gt;public&lt;/code&gt; annotation can be removed from the declaration. Removing redundant public accessibility has a couple of benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It helps reduce the public surface area of your modules.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;a href=&#34;https://github.com/apple/swift/raw/main/docs/OptimizationTips.rst#whole-module-optimizations-wmo&#34;&gt;Whole Module Compilation&lt;/a&gt; mode, Swift can infer &lt;code&gt;final&lt;/code&gt; by &lt;a href=&#34;https://github.com/apple/swift/raw/main/docs/OptimizationTips.rst#advice-if-wmo-is-enabled-use-internal-when-a-declaration-does-not-need-to-be-accessed-outside-of-module&#34;&gt;automatically discovering&lt;/a&gt; all potentially overriding declarations. &lt;code&gt;final&lt;/code&gt; classes are &lt;a href=&#34;https://github.com/apple/swift/raw/main/docs/OptimizationTips.rst#advice-use-final-when-you-know-the-declaration-does-not-need-to-be-overridden&#34;&gt;better optimized&lt;/a&gt; by the compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This analysis can be disabled with &lt;code&gt;--disable-redundant-public-analysis&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;p&gt;Periphery cannot analyze Objective-C code since types may be dynamically typed.&lt;/p&gt; &#xA;&lt;p&gt;By default Periphery does not assume that declarations accessible by the Objective-C runtime are in use. If your project is a mix of Swift &amp;amp; Objective-C, you can enable this behavior with the &lt;code&gt;--retain-objc-accessible&lt;/code&gt; option. Swift declarations that are accessible by the Objective-C runtime are those that are explicitly attributed with &lt;code&gt;@objc&lt;/code&gt; or &lt;code&gt;@objcMembers&lt;/code&gt;, and classes that inherit &lt;code&gt;NSObject&lt;/code&gt; either directly or indirectly via another class.&lt;/p&gt; &#xA;&lt;h3&gt;Encodable&lt;/h3&gt; &#xA;&lt;p&gt;Conformance to &lt;code&gt;Encodable&lt;/code&gt; (inc. implicitly via &lt;code&gt;Codable&lt;/code&gt;) causes synthesis of additional code not visible to Periphery, and thus Periphery is unable to determine if the properties of conforming types are referenced from synthesized code. Therefore, all such properties must be retained in order to avoid false-positive results in the situation where the properties are only referenced via the initializer. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct SomeStruct: Encodable {&#xA;    let someProperty: String // Not unused, automatically retained.&#xA;}&#xA;let data = try JSONEncoder().encode(SomeStruct(someProperty: &#34;value&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This property retention behavior is automatic, even when &lt;code&gt;Encodable&lt;/code&gt; conformance is inherited via another protocol. However, if a protocol that inherits &lt;code&gt;Encodable&lt;/code&gt; is declared in an external module that Periphery has not analyzed, it cannot detect the inheritance of &lt;code&gt;Encodable&lt;/code&gt;. In this situation you can use the &lt;code&gt;--external-encodable-protocols&lt;/code&gt; option enable this behavior for the given protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Comment Commands&lt;/h2&gt; &#xA;&lt;p&gt;For whatever reason, you may want to keep some unused code. Source code comment commands can be used to ignore specific declarations, and exclude them from the results.&lt;/p&gt; &#xA;&lt;p&gt;An ignore comment command can be placed directly on the line above any declaration to ignore it, and all descendent declarations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// periphery:ignore&#xA;class MyClass {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also ignore specific unused function parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// periphery:ignore:parameters unusedOne,unusedTwo&#xA;func someFunc(used: String, unusedOne: String, unusedTwo: String) {&#xA;    print(used)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;// periphery:ignore:all&lt;/code&gt; command can be placed at the top of the source file to ignore the entire contents of the file. Note that the comment must be placed above any code, including import statements.&lt;/p&gt; &#xA;&lt;h2&gt;Xcode Integration&lt;/h2&gt; &#xA;&lt;p&gt;Before setting up Xcode integration, we highly recommend you first get Periphery working in a terminal, as you will be using the exact same command via Xcode.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: Create an Aggregate Target&lt;/h3&gt; &#xA;&lt;p&gt;Select your project in the Project Navigator and click the + button at the bottom left of the Targets section. Select &lt;strong&gt;Cross-platform&lt;/strong&gt; and choose &lt;strong&gt;Aggregate&lt;/strong&gt;. Hit Next.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/assets/xcode-integration/1.png&#34; alt=&#34;Step 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Choose a name for the new target, e.g &#34;Periphery&#34; or &#34;Unused Code&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/assets/xcode-integration/2.png&#34; alt=&#34;Step 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Add a Run Script Build Phase&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;Build Phases&lt;/strong&gt; section click the + button to add a new Run Script phase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/assets/xcode-integration/3.png&#34; alt=&#34;Step 3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the shell script window enter the Periphery command. Be sure to include the &lt;code&gt;--format xcode&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/assets/xcode-integration/4.png&#34; alt=&#34;Step 4&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Select &amp;amp; Run&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;re ready to roll. You should now see the new scheme in the dropdown. Select it and hit run.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;d like others on your team to be able to use the scheme, you&#39;ll need to mark it as &lt;em&gt;Shared&lt;/em&gt;. This can be done by selecting &lt;em&gt;Manage Schemes...&lt;/em&gt; and selecting the &lt;em&gt;Shared&lt;/em&gt; checkbox next to the new scheme. The scheme definition can now be checked into source control.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/assets/xcode-integration/5.png&#34; alt=&#34;Step 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Excluding Files&lt;/h2&gt; &#xA;&lt;p&gt;Both exclusion options described below accept a Bash v4 style path glob, either absolute or relative to your project directory. You may specify multiple globs by separating them with a pipe character, e.g &lt;code&gt;&#34;Sources/Single.swift|**/Generated/*.swift|**/*.{xib,storyboard}&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Excluding Results&lt;/h3&gt; &#xA;&lt;p&gt;To exclude the results from certain files, pass the &lt;code&gt;--report-exclude &amp;lt;globs&amp;gt;&lt;/code&gt; option to the &lt;code&gt;scan&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Excluding Indexed Files&lt;/h3&gt; &#xA;&lt;p&gt;To exclude files from being indexed, pass the &lt;code&gt;--index-exclude &amp;lt;globs&amp;gt;&lt;/code&gt; option to the &lt;code&gt;scan&lt;/code&gt; command. Excluding files from the index phase means that any declarations and references contained within the files will not be seen by Periphery. Periphery will be behave as if the files do not exist. For example, this option can be used to exclude generated code that holds references to non-generated code, or exclude all &lt;code&gt;.xib&lt;/code&gt; and &lt;code&gt;.storyboard&lt;/code&gt; files that hold references to code.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;When integrating Periphery into a CI pipeline, you can potentially skip the build phase if your pipeline has already done so, e.g to run tests. This can be achieved using the &lt;code&gt;--skip-build&lt;/code&gt; option. However, you also need to tell Periphery the location of the index store using &lt;code&gt;--index-store-path&lt;/code&gt;. This location is dependent on your project type.&lt;/p&gt; &#xA;&lt;p&gt;Note that when using &lt;code&gt;--skip-build&lt;/code&gt; and &lt;code&gt;--index-store-path&lt;/code&gt; it&#39;s vital that the index store contains data for all of the targets you specify via &lt;code&gt;--targets&lt;/code&gt;. For example, if your pipeline previously built the targets &#39;App&#39; and &#39;Lib&#39;, the index store will only contain data for the files in those targets. You cannot then instruct Periphery to scan additional targets, e.g &#39;Extension&#39;, or &#39;UnitTests&#39;.&lt;/p&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;p&gt;The index store generated by &lt;code&gt;xcodebuild&lt;/code&gt; exists in DerivedData at a location dependent on your project, e.g &lt;code&gt;~/Library/Developer/Xcode/DerivedData/YourProject-abc123/Index/DataStore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftPM&lt;/h3&gt; &#xA;&lt;p&gt;By default Periphery, looks for the index store at &lt;code&gt;.build/debug/index/store&lt;/code&gt;. Therefore, if you intend to run Periphery directly after calling &lt;code&gt;swift test&lt;/code&gt;, you can omit the &lt;code&gt;--index-store-path&lt;/code&gt; option, and Periphery will use the index store created when the project was built for testing. However if this isn&#39;t the case, then you must provide Periphery the location of the index store with &lt;code&gt;--index-store-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Periphery supports both macOS and Linux. macOS supports both Xcode and Swift Package Manager (SPM) projects, whereas only SPM projects are supported on Linux.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Erroneous results in one or more files, such as false-positives and incorrect source file locations&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible for the index store to become corrupt, or out of sync with the source file. This can happen, for example, if you forcefully terminate (^C) a scan. To rectify this, you can pass the &lt;code&gt;--clean-build&lt;/code&gt; flag to the scan command to force removal of existing build artifacts.&lt;/p&gt; &#xA;&lt;h3&gt;Code referenced within preprocessor macro conditional branch is unused&lt;/h3&gt; &#xA;&lt;p&gt;When Periphery builds your project it uses the default build configuration, which is typically &#39;debug&#39;. If you use preprocessor macros to conditionally compile code, Periphery will only have visibility into the branches that are compiled. In the example below, &lt;code&gt;releaseName&lt;/code&gt; will be reported as unused as it is only referenced within the non-debug branch of the macro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BuildInfo {&#xA;    let debugName = &#34;debug&#34;&#xA;    let releaseName = &#34;release&#34; // &#39;releaseName&#39; is unused&#xA;&#xA;    var name: String {&#xA;        #if DEBUG&#xA;        debugName&#xA;        #else&#xA;        releaseName&#xA;        #endif&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ve a few options to workaround this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/peripheryapp/periphery/master/#comment-commands&#34;&gt;Comment Commands&lt;/a&gt; to explicitly ignore &lt;code&gt;releaseName&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Filter the results to remove known instances.&lt;/li&gt; &#xA; &lt;li&gt;Run Periphery once for each build configuration and merge the results. You can pass arguments to the underlying build by specifying them after &lt;code&gt;--&lt;/code&gt;, e.g &lt;code&gt;periphery scan ... -- -configuration release&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Due to some underlying bugs in Swift, Periphery may in some instances report incorrect results. You can encourage Apple to fix these issues by voting for them on the Swift JIRA.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Fixed in Swift 5.6&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-13766&#34;&gt;SR-13766&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store does not correctly relate variable type&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-14181&#34;&gt;SR-14181&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store does not relate constructor referenced via Self&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-14162&#34;&gt;SR-14162&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store does not relate static property getter used as subscript key&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-13930&#34;&gt;SR-13930&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store does not relate objc optional protocol method implemented in subclass&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-13792&#34;&gt;SR-13792&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store should relate appendInterpolation from string literals&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-13768&#34;&gt;SR-13768&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store does not relate constructor via literal notation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-13767&#34;&gt;SR-13767&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index store reference occurrence incorrectly related for lazy variable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://bugs.swift.org/browse/SR-7093&#34;&gt;SR-7093&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Index does not include reference to constructor of class/struct with generic types&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-package-manager</title>
    <updated>2022-07-15T01:55:29Z</updated>
    <id>tag:github.com,2022-07-15:/apple/swift-package-manager</id>
    <link href="https://github.com/apple/swift-package-manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Package Manager for the Swift Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Package Manager Project&lt;/h1&gt; &#xA;&lt;p&gt;The Swift Package Manager is a tool for managing distribution of source code, aimed at making it easy to share your code and reuse others’ code. The tool directly addresses the challenges of compiling and linking Swift packages, managing dependencies, versioning, and supporting flexible distribution and collaboration models.&lt;/p&gt; &#xA;&lt;p&gt;We’ve designed the system to make it easy to share packages on services like GitHub, but packages are also great for private personal development, sharing code within a team, or at any other granularity.&lt;/p&gt; &#xA;&lt;p&gt;Swift Package Manager includes a build system that can build for macOS and Linux. Starting with Xcode 11, Xcode integrates with SwiftPM to provide support for including packages in iOS, macOS, watchOS, and tvOS applications.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/apple/sourcekit-lsp&#34;&gt;SourceKit-LSP&lt;/a&gt; project leverages libSwiftPM and provides &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Server Protocol&lt;/a&gt; implementation for editors that support LSP.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#system-requirements&#34;&gt;System Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#reporting-issues&#34;&gt;Reporting issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;https://swift.org/getting-started/#using-the-package-manager&#34;&gt;this guide&lt;/a&gt; for learning package manager basics.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For Quick Help use the &lt;code&gt;swift package --help&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;For documentation on using Swift Package Manager, creating packages, and more, see the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/Documentation&#34;&gt;documentation directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For documentation on developing the Swift Package Manager itself, see the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For detailed documentation on the package manifest API, see &lt;a href=&#34;https://docs.swift.org/package-manager/PackageDescription/index.html&#34;&gt;PackageDescription API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For release notes with information about changes between versions, see the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/Documentation/ReleaseNotes&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The package manager’s system requirements are the same as &lt;a href=&#34;https://github.com/apple/swift#system-requirements&#34;&gt;those for Swift&lt;/a&gt; with the caveat that the package manager requires Git at runtime as well as build-time.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The package manager is available as part the Swift toolchains available on &lt;a href=&#34;https://swift.org/download/&#34;&gt;Swift.org&lt;/a&gt;) including snapshots for the latest versions built from &lt;code&gt;main&lt;/code&gt; branch. For installation instructions for downloaded snapshots, please see the &lt;a href=&#34;https://swift.org/getting-started/#installing-swift&#34;&gt;Getting Started&lt;/a&gt; section of &lt;a href=&#34;https://swift.org&#34;&gt;Swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Swift Package Manager is also included in Xcode 8.0 and all subsequent releases.&lt;/p&gt; &#xA;&lt;p&gt;You can verify your installation by typing &lt;code&gt;swift package --version&lt;/code&gt; in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ swift package --version&#xA;Apple Swift Package Manager - ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to contribute to Swift Package Manager. To learn about the policies, best practices that govern contributions to the Swift project and instructions for setting up the development environment please read the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/CONTRIBUTING.md&#34;&gt;Contributor Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Swift package manager uses &lt;a href=&#34;https://github.com/apple/swift-llbuild&#34;&gt;llbuild&lt;/a&gt; as the underlying build system for compiling source files. It is also open source and part of the Swift project.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;If you have any trouble with the package manager, help is available. We recommend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://forums.swift.org/c/development/swiftpm/&#34;&gt;Swift Forums&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Swift&#39;s &lt;a href=&#34;https://bugs.swift.org&#34;&gt;bug tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When reporting an issue please follow the bug reporting guidelines, they can be found in &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/CONTRIBUTING.md#reporting-issues&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you’re not comfortable sharing your question with the list, contact details for the code owners can be found in &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-package-manager/main/CODEOWNERS&#34;&gt;CODEOWNERS&lt;/a&gt;; however, the mailing list is usually the best place to go for help.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2015 - 2022 Apple Inc. and the Swift project authors. Licensed under Apache License v2.0 with Runtime Library Exception.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://swift.org/LICENSE.txt&#34;&gt;https://swift.org/LICENSE.txt&lt;/a&gt; for license information.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://swift.org/CONTRIBUTORS.txt&#34;&gt;https://swift.org/CONTRIBUTORS.txt&lt;/a&gt; for Swift project authors.&lt;/p&gt;</summary>
  </entry>
</feed>