<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-10T01:49:06Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IsaacMarovitz/Whisky</title>
    <updated>2023-06-10T01:49:06Z</updated>
    <id>tag:github.com,2023-06-10:/IsaacMarovitz/Whisky</id>
    <link href="https://github.com/IsaacMarovitz/Whisky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern Wine wrapper for macOS built with SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Whisky ü•É&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;Wine but a bit stronger&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IsaacMarovitz/Whisky/SwiftLint.yml?style=for-the-badge&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://discord.gg/CsqAfs9CnM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1115955071549702235?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;650&#34; alt=&#34;Screenshot 2023-03-31 at 17 14 00&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229232488-dbad85f4-cecb-45e1-a182-f737fe9d2b1f.png&#34;&gt; &#xA;&lt;p&gt;Familiar UI that integrates seamlessly with macOS&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;img width=&#34;650&#34; alt=&#34;Screenshot 2023-03-31 at 17 14 22&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229232557-07f78a79-f695-45f6-be45-15a5b2f3c053.png&#34;&gt; &#xA; &lt;p&gt;One-click bottle creation and management&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;650&#34; alt=&#34;debug&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229176642-57b80801-d29b-4123-b1c2-f3b31408ffc6.png&#34;&gt; &#xA;&lt;p&gt;Debug and profile with ease&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Whisky provides a clean and easy to use graphical wrapper for Wine built in native SwiftUI. You can make and manage bottles, install and run Windows apps and games, and unlock the full potential of your Mac with no technical knowledge required. Whisky is built on top of CrossOver 22.1.1, and Apple&#39;s own &lt;code&gt;Game Porting Toolkit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/Gcenx&#34;&gt;Gcenx&lt;/a&gt;, without your amazing work Whisky wouldn&#39;t be possible.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h3&gt;The direct download link for the toolkit doesn&#39;t work&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you&#39;re logged in to the Apple Developer website. If it still won&#39;t work use an &lt;a href=&#34;https://developer.apple.com/download/all/?q=porting&#34;&gt;indirect link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Do I need to follow the steps in the toolkit&#39;s README?&lt;/h3&gt; &#xA;&lt;p&gt;No, you don&#39;t, in fact you shouldn&#39;t follow them.&lt;/p&gt; &#xA;&lt;h3&gt;Steam isn&#39;t displaying anything&lt;/h3&gt; &#xA;&lt;p&gt;Known issue, please see this &lt;a href=&#34;https://github.com/IsaacMarovitz/Whisky/issues/41&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/sample-backyard-birds</title>
    <updated>2023-06-10T01:49:06Z</updated>
    <id>tag:github.com,2023-06-10:/apple/sample-backyard-birds</id>
    <link href="https://github.com/apple/sample-backyard-birds" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Backyard Birds: Building an app with SwiftData and widgets&lt;/h1&gt; &#xA;&lt;p&gt;Create an app with persistent data, interactive widgets, and an all new in-app purchase experience.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Backyard Birds offers a rich environment in which you can watch the birds that visit your backyard garden. You can monitor their water and food supply to ensure they always have fresh water and plenty to eat, or upgrade the game using an in-app purchase to provide tastier food for the birds to eat.&lt;/p&gt; &#xA;&lt;p&gt;The sample implements its data model using &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata&#34;&gt;SwiftData&lt;/a&gt; for persistence, and integrates seamlessly with SwiftUI using the &lt;a href=&#34;https://developer.apple.com/documentation/observation&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; protocol. The game&#39;s widgets implement &lt;a href=&#34;https://developer.apple.com/documentation/AppIntents&#34;&gt;App Intents&lt;/a&gt; for interactive and configurable widgets. The in-app purchase experience uses the &lt;a href=&#34;https://developer.apple.com/documentation/storekit/productview&#34;&gt;&lt;code&gt;ProductView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/storekit/subscriptionstoreview&#34;&gt;&lt;code&gt;SubscriptionStoreView&lt;/code&gt;&lt;/a&gt; from StoreKit.&lt;/p&gt; &#xA;&lt;p&gt;You can access the source code for this sample on &lt;a href=&#34;https://github.com/apple/sample-backyard-birds&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note: This sample code project is associated with WWDC23 session 102: &lt;a href=&#34;https://developer.apple.com/wwdc23/102/&#34;&gt;State of the Union&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configure the sample code project&lt;/h2&gt; &#xA;&lt;p&gt;To configure the Backyard Birds app to run on your devices, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the project in Xcode 15 or later.&lt;/li&gt; &#xA; &lt;li&gt;Edit the multiplatform target&#39;s scheme, and on the Options tab, choose the &lt;code&gt;Store.storekit&lt;/code&gt; file for StoreKit configuration.&lt;/li&gt; &#xA; &lt;li&gt;Repeat the previous step for the watchOS target&#39;s scheme.&lt;/li&gt; &#xA; &lt;li&gt;Select the top-level Backyard Birds project.&lt;/li&gt; &#xA; &lt;li&gt;For all targets, choose your team from the Team menu in the Signing &amp;amp; Capabilities pane so Xcode can automatically manage your provisioning profile.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Create a data-driven app&lt;/h2&gt; &#xA;&lt;p&gt;The app defines its data model by conforming the model objects to &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata/persistentmodel&#34;&gt;&lt;code&gt;PersistentModel&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata/model&#34;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; macro. Using the &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata/attribute(_:renamingidentifier:hashmodifier:)&#34;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; macro with the &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata/propertyoptions/unique&#34;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; option ensures that the &lt;code&gt;id&lt;/code&gt; property is unique.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Model public class BirdSpecies {&#xA;    @Attribute(.unique) public var id: String&#xA;    public var naturalScale: Double = 1&#xA;    public var isEarlyAccess: Bool&#xA;    public var parts: [BirdPart]&#xA;    &#xA;    @Relationship(.cascade, inverse: \Bird.species)&#xA;    public var birds: [Bird]&#xA;    &#xA;    @Transient&#xA;    public var info: BirdSpeciesInfo { BirdSpeciesInfo(rawValue: id) }&#xA;    &#xA;    public init(info: BirdSpeciesInfo, naturalScale: Double = 1, isEarlyAccess: Bool = false, parts: [BirdPart]) {&#xA;        self.id = info.rawValue&#xA;        self.naturalScale = naturalScale&#xA;        self.isEarlyAccess = isEarlyAccess&#xA;        self.parts = parts&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Construct interactive widgets&lt;/h2&gt; &#xA;&lt;p&gt;Backyard Birds displays interactive widgets by presenting a &lt;code&gt;Button&lt;/code&gt; to refill a backyard&#39;s supplies when the water and food are running low. The app does this by placing a &lt;code&gt;Button&lt;/code&gt; in the widget&#39;s view, and passing a &lt;code&gt;ResupplyBackyardIntent&lt;/code&gt; instance to the &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/button/init(intent&lt;span&gt;üè∑&lt;/span&gt;)&#34;&gt;&lt;code&gt;init(intent&lt;span&gt;üè∑&lt;/span&gt;)&lt;/code&gt;&lt;/a&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button(intent: ResupplyBackyardIntent(backyard: BackyardEntity(from: snapshot.backyard))) {&#xA;    Label(&#34;Refill Water&#34;, systemImage: &#34;arrow.clockwise&#34;)&#xA;        .foregroundStyle(.secondary)&#xA;        .frame(maxWidth: .infinity)&#xA;        .padding(.vertical, 8)&#xA;        .padding(.horizontal, 12)&#xA;        .background(.quaternary, in: .containerRelative)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The app allows for configuration of the widget by implementing the &lt;a href=&#34;https://developer.apple.com/documentation/appintents/widgetconfigurationintent&#34;&gt;&lt;code&gt;WidgetConfigurationIntent&lt;/code&gt;&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BackyardWidgetIntent: WidgetConfigurationIntent {&#xA;    static let title: LocalizedStringResource = &#34;Backyard&#34;&#xA;    static let description = IntentDescription(&#34;Keep track of your backyards.&#34;)&#xA;    &#xA;    @Parameter(title: &#34;Backyards&#34;, default: BackyardWidgetContent.all)&#xA;    var backyards: BackyardWidgetContent&#xA;    &#xA;    @Parameter(title: &#34;Backyard&#34;)&#xA;    var specificBackyard: BackyardEntity?&#xA;    &#xA;    init(backyards: BackyardWidgetContent = .all, specificBackyard: BackyardEntity? = nil) {&#xA;        self.backyards = backyards&#xA;        self.specificBackyard = specificBackyard&#xA;    }&#xA;    &#xA;    init() {&#xA;    }&#xA;    &#xA;    static var parameterSummary: some ParameterSummary {&#xA;        When(\.$backyards, .equalTo, BackyardWidgetContent.specific) {&#xA;            Summary {&#xA;                \.$backyards&#xA;                \.$specificBackyard&#xA;            }&#xA;        } otherwise: {&#xA;            Summary {&#xA;                \.$backyards&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Provide a new in-app purchase experience&lt;/h2&gt; &#xA;&lt;p&gt;The sample app uses &lt;a href=&#34;https://developer.apple.com/documentation/storekit/productview&#34;&gt;&lt;code&gt;ProductView&lt;/code&gt;&lt;/a&gt; to display several different bird food upgrades available for purchase on a store shelf. To prominently feature an in-app purchase item, the app uses the &lt;a href=&#34;https://developer.apple.com/documentation/storekit/productview/4202371-productviewstyle&#34;&gt;&lt;code&gt;.productViewStyle(.large)&lt;/code&gt;&lt;/a&gt; modifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ProductView(id: product.id) {&#xA;    BirdFoodProductIcon(birdFood: birdFood, quantity: product.quantity)&#xA;        .bestBirdFoodValueBadge()&#xA;}&#xA;.padding(.vertical)&#xA;.background(.background.secondary, in: .rect(cornerRadius: 20))&#xA;.productViewStyle(.large)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Backyard Birds Pass page displays renewable subscriptions using the &lt;a href=&#34;https://developer.apple.com/documentation/storekit/subscriptionstoreview&#34;&gt;&lt;code&gt;SubscriptionStoreView&lt;/code&gt;&lt;/a&gt; view. The app uses the &lt;code&gt;PassMarketingContent&lt;/code&gt; view as the content of the &lt;code&gt;SubscriptionStoreView&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SubscriptionStoreView(&#xA;    groupID: passGroupID,&#xA;    visibleRelationships: showPremiumUpgrade ? .upgrade : .all&#xA;) {&#xA;    PassMarketingContent(showPremiumUpgrade: showPremiumUpgrade)&#xA;        #if !os(watchOS)&#xA;        .containerBackground(for: .subscriptionStoreFullHeight) {&#xA;            SkyBackground()&#xA;        }&#xA;        #endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>