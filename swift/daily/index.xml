<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-25T01:45:27Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mijick/PopupView</title>
    <updated>2023-05-25T01:45:27Z</updated>
    <id>tag:github.com,2023-05-25:/Mijick/PopupView</id>
    <link href="https://github.com/Mijick/PopupView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Popups and alerts with SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/23524947/229163179-2033f875-f9cc-46ea-8d27-3a8a04007824.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://user-images.githubusercontent.com/23524947/229172729-dd4fec15-8f90-4ca8-b59c-7ee109da7370.svg&#34;&gt; &#xA;  &lt;img alt=&#34;PopupView Logo&#34; src=&#34;https://user-images.githubusercontent.com/23524947/229163179-2033f875-f9cc-46ea-8d27-3a8a04007824.svg?sanitize=true&#34; width=&#34;88%&#34; &#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h3 style=&#34;font-size: 5em&#34; align=&#34;center&#34;&gt; Popups presentation made simple &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Create beautiful and fully customisable popups in no time. Keep your code clean &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Mijick/PopupView-Example&#34; rel=&#34;nofollow&#34;&gt;Try demo we prepared&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;SwiftUI logo&#34; src=&#34;https://user-images.githubusercontent.com/23524947/228844494-9be6d187-b4f5-4a95-93fa-9c430b2bc043.svg?sanitize=true&#34;&gt; &lt;img alt=&#34;Platforms: iOS, iPadOS&#34; src=&#34;https://user-images.githubusercontent.com/23524947/228702908-490eaa2f-d028-49a3-8959-cc7d64261de3.svg?sanitize=true&#34;&gt; &lt;img alt=&#34;Release: 1.5&#34; src=&#34;https://github.com/Mijick/PopupView/assets/23524947/d17616d6-7a37-489a-96af-320d793f2ed0&#34;&gt; &lt;a href=&#34;https://www.swift.org/package-manager&#34;&gt; &lt;img alt=&#34;Swift Package Manager: Compatible&#34; src=&#34;https://user-images.githubusercontent.com/23524947/228702912-50878cca-0902-4ec9-b042-c7762359137b.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;img alt=&#34;License: MIT&#34; src=&#34;https://user-images.githubusercontent.com/23524947/228702907-8388add4-b92f-46be-84e2-1526ff34ab72.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Mijick/PopupView/stargazers&#34;&gt; &lt;img alt=&#34;Stars&#34; src=&#34;https://github.com/Mijick/PopupView/assets/23524947/b6c871b5-7da1-4b1b-a802-5387ea7b0d82&#34;&gt; &lt;/a&gt; &lt;img alt=&#34;Made in Kraków&#34; src=&#34;https://github.com/Mijick/PopupView/assets/23524947/87dc9080-c9be-403a-9838-0714ff33375c&#34;&gt; &lt;a href=&#34;https://twitter.com/tkurylik&#34;&gt; &lt;img alt=&#34;Follow us on Twitter&#34; src=&#34;https://user-images.githubusercontent.com/23524947/228844665-d8cf7db8-e692-4c17-9b41-1b0471b552aa.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;mailto:team@mijick.com?subject=Hello&#34;&gt; &lt;img alt=&#34;Let&#39;s work together&#34; src=&#34;https://user-images.githubusercontent.com/23524947/228844684-e8f87e2c-c85c-4cad-9bd1-f2e12a4627b8.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Popup Examples&#34; src=&#34;https://github.com/Mijick/PopupView/assets/23524947/32a8afc2-9c7e-4121-85ff-030bb8dad11a&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;PopupView is a free and open-source library dedicated for SwiftUI that makes the process of presenting popups easier and much cleaner.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Improves code quality.&lt;/strong&gt; Show your popup using the &lt;code&gt;showAndStack()&lt;/code&gt; or &lt;code&gt;showAndReplace()&lt;/code&gt; method.&lt;br&gt; Hide the selected one with &lt;code&gt;dismiss()&lt;/code&gt;. Simple as never.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create any popup.&lt;/strong&gt; We know how important customisation is; that&#39;s why we give you the opportunity to design your popup in any way you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Designed for SwiftUI.&lt;/strong&gt; While developing the library, we have used the power of SwiftUI to give you powerful tool to speed up your implementation process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;✋ Requirements&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Platforms&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Minimum Swift Version&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iOS 15+, iPadOS 15+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;⏳ Installation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.swift.org/package-manager&#34;&gt;Swift package manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding PopupView as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/Mijick/PopupView.git&#34;, branch(“main”))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;1. Setup library&lt;/h3&gt; &#xA;&lt;p&gt;Inside your &lt;code&gt;@main&lt;/code&gt; structure call the &lt;code&gt;implementPopupView&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;  var body: some Scene {&#xA;        WindowGroup(content: ContentView().implementPopupView)&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Declare a structure of your popup&lt;/h3&gt; &#xA;&lt;p&gt;The library provides an ability to present your custom view in three predefinied places - &lt;strong&gt;Top&lt;/strong&gt;, &lt;strong&gt;Centre&lt;/strong&gt; and &lt;strong&gt;Bottom&lt;/strong&gt;.&lt;br&gt; In order to present it, it is necessary to confirm to one of the protocols during your view declaration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TopPopup&lt;/code&gt; - presents popup view from the top&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CentrePopup&lt;/code&gt; - presents popup view from the center&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BottomPopup&lt;/code&gt; - presents popup view from the bottom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So that an example view you want to present will have the following declaration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;struct BottomCustomPopup: BottomPopup {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Implement &lt;code&gt;createContent()&lt;/code&gt; method&lt;/h3&gt; &#xA;&lt;p&gt;The function above is used instead of the body property, and declares the design of the popup view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;struct BottomCustomPopup: BottomPopup {    &#xA;    func createContent() -&amp;gt; some View {&#xA;        HStack(spacing: 0) {&#xA;            Text(&#34;Witaj okrutny świecie&#34;)&#xA;            Spacer()&#xA;            Button(action: dismiss) { Text(&#34;Dismiss&#34;) } &#xA;        }&#xA;        .padding(.vertical, 20)&#xA;        .padding(.leading, 24)&#xA;        .padding(.trailing, 16)&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Implement &lt;code&gt;configurePopup(popup: Config) -&amp;gt; Config&lt;/code&gt; method&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Declaring this step is optional - if you wish, you can skip this step and leave the UI configuration to us.&lt;/em&gt;&lt;br&gt; Each protocol has its own set of methods that can be used to create a unique appearance for every popup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;struct BottomCustomPopup: BottomPopup {    &#xA;    func createContent() -&amp;gt; some View {&#xA;        HStack(spacing: 0) {&#xA;            Text(&#34;Witaj okrutny świecie&#34;)&#xA;            Spacer()&#xA;            Button(action: dismiss) { Text(&#34;Dismiss&#34;) } &#xA;        }&#xA;        .padding(.vertical, 20)&#xA;        .padding(.leading, 24)&#xA;        .padding(.trailing, 16)&#xA;    }&#xA;    func configurePopup(popup: BottomPopupConfig) -&amp;gt; BottomPopupConfig {&#xA;        popup&#xA;            .horizontalPadding(20)&#xA;            .bottomPadding(42)&#xA;            .activePopupCornerRadius(16)&#xA;            .stackCornerRadius(4)&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Present your popup from any place you want!&lt;/h3&gt; &#xA;&lt;p&gt;Just call &lt;code&gt;BottomCustomPopup().showAndStack()&lt;/code&gt; from the selected place&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;struct SettingsViewModel {&#xA;    ...&#xA;    func saveSettings() {&#xA;        ...&#xA;        BottomCustomPopup().showAndStack()&#xA;        ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6. Closing popups&lt;/h3&gt; &#xA;&lt;p&gt;There are two methods to do so:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By calling one of the methods &lt;code&gt;dismiss&lt;/code&gt;, &lt;code&gt;dismiss(_ popup: Popup.Type)&lt;/code&gt;, &lt;code&gt;dismissAll&lt;/code&gt; inside the popup you created&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;struct BottomCustomPopup: BottomPopup {&#xA;    ...&#xA;    func createButton() -&amp;gt; some View {&#xA;        Button(action: dismiss) { Text(&#34;Tap to close&#34;) } &#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By calling one of three static methods of PopupManager: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PopupManager.dismiss()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PopupManager.dismiss(id: &#34;some_id&#34;)&lt;/code&gt; where id is the identifier of the popup you want to close&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PopupManager.dismiss(_ popup: Popup.Type)&lt;/code&gt; where popup is the popup you want to close&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PopupManager.dismissAll()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Try our demo&lt;/h1&gt; &#xA;&lt;p&gt;See for yourself how does it work by cloning &lt;a href=&#34;https://github.com/Mijick/PopupView-Example&#34;&gt;project&lt;/a&gt; we created&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;PopupView is released under the MIT license. See &lt;a href=&#34;https://github.com/Mijick/PopupView/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>