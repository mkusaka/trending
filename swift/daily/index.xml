<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-03T01:42:56Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pointfreeco/swift-custom-dump</title>
    <updated>2022-10-03T01:42:56Z</updated>
    <id>tag:github.com,2022-10-03:/pointfreeco/swift-custom-dump</id>
    <link href="https://github.com/pointfreeco/swift-custom-dump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of tools for debugging, diffing, and testing your application&#39;s data structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Custom Dump&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-custom-dump/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-custom-dump/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-custom-dump&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-custom-dump%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-custom-dump&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-custom-dump%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A collection of tools for debugging, diffing, and testing your application&#39;s data structures.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#motivation&#34;&gt;Motivation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#customdump&#34;&gt;&lt;code&gt;customDump&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#diff&#34;&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#xctassertnodifference&#34;&gt;&lt;code&gt;XCTAssertNoDifference&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#customization&#34;&gt;Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#customdumpstringconvertible&#34;&gt;&lt;code&gt;CustomDumpStringConvertible&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#customdumpreflectable&#34;&gt;&lt;code&gt;CustomDumpReflectable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#customdumprepresentable&#34;&gt;&lt;code&gt;CustomDumpRepresentable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#other-libraries&#34;&gt;Other Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Swift comes with a wonderful tool for dumping the contents of any value to a string, and it&#39;s called &lt;code&gt;dump&lt;/code&gt;. It prints all the fields and sub-fields of a value into a tree-like description:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {&#xA;  var favoriteNumbers: [Int]&#xA;  var id: Int&#xA;  var name: String&#xA;}&#xA;&#xA;let user = User(&#xA;  favoriteNumbers: [42, 1729],&#xA;  id: 2,&#xA;  name: &#34;Blob&#34;&#xA;)&#xA;&#xA;dump(user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;▿ User&#xA;  ▿ favoriteNumbers: 2 elements&#xA;    - 42&#xA;    - 1729&#xA;  - id: 2&#xA;  - name: &#34;Blob&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is really useful, and can be great for building debug tools that visualize the data held in runtime values of our applications, but sometimes its output is not ideal.&lt;/p&gt; &#xA;&lt;p&gt;For example, dumping dictionaries leads to a verbose output that can be hard to read (also note that the keys are unordered):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dump([1: &#34;one&#34;, 2: &#34;two&#34;, 3: &#34;three&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;▿ 3 key/value pairs&#xA;  ▿ (2 elements)&#xA;    - key: 2&#xA;    - value: &#34;two&#34;&#xA;  ▿ (2 elements)&#xA;    - key: 3&#xA;    - value: &#34;three&#34;&#xA;  ▿ (2 elements)&#xA;    - key: 1&#xA;    - value: &#34;one&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly enums have a very verbose output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dump(Result&amp;lt;Int, Error&amp;gt;.success(42))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;▿ Swift.Result&amp;lt;Swift.Int, Swift.Error&amp;gt;.success&#xA;  - success: 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It gets even harder to read when dealing with deeply nested structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dump([1: Result&amp;lt;User, Error&amp;gt;.success(user)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;▿ 1 key/value pair&#xA;  ▿ (2 elements)&#xA;    - key: 1&#xA;    ▿ value: Swift.Result&amp;lt;User, Swift.Error&amp;gt;.success&#xA;      ▿ success: User&#xA;        ▿ favoriteNumbers: 2 elements&#xA;          - 42&#xA;          - 1729&#xA;        - id: 2&#xA;        - name: &#34;Blob&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also times that &lt;code&gt;dump&lt;/code&gt; simply does not print useful information, such as enums imported from Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UserNotifications&#xA;&#xA;dump(UNNotificationSetting.disabled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- __C.UNNotificationSetting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, while the &lt;code&gt;dump&lt;/code&gt; function can be handy, it is often too crude of a tool to use. This is the motivation for the &lt;code&gt;customDump&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;customDump&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;customDump&lt;/code&gt; function emulates the behavior of &lt;code&gt;dump&lt;/code&gt;, but provides a more refined output of nested structures, optimizing for readability. For example, structs are dumped in a format that more closely mimics the struct syntax in Swift, and arrays are dumped with the indices of each element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CustomDump&#xA;&#xA;customDump(user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;User(&#xA;  favoriteNumbers: [&#xA;    [0]: 42,&#xA;    [1]: 1729&#xA;  ],&#xA;  id: 2,&#xA;  name: &#34;Blob&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dictionaries are dumped in a more compact format that mimics Swift&#39;s syntax, and automatically orders the keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;customDump([1: &#34;one&#34;, 2: &#34;two&#34;, 3: &#34;three&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[&#xA;  1: &#34;one&#34;,&#xA;  2: &#34;two&#34;,&#xA;  3: &#34;three&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, enums also dump in a more compact, readable format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;customDump(Result&amp;lt;Int, Error&amp;gt;.success(42))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Result.success(42)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And deeply nested structures have a simplified tree-structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;customDump([1: Result&amp;lt;User, Error&amp;gt;.success(user)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[&#xA;  1: Result.success(&#xA;    User(&#xA;      favoriteNumbers: [&#xA;        [0]: 42,&#xA;        [1]: 1729&#xA;      ],&#xA;      id: 2,&#xA;      name: &#34;Blob&#34;&#xA;    )&#xA;  )&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Using the output of the &lt;code&gt;customDump&lt;/code&gt; function we can build a very lightweight way to textually diff any two values in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var other = user&#xA;other.favoriteNumbers[1] = 91&#xA;&#xA;print(diff(user, other)!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  User(&#xA;    favoriteNumbers: [&#xA;      [0]: 42,&#xA;-     [1]: 1729&#xA;+     [1]: 91&#xA;    ],&#xA;    id: 2,&#xA;    name: &#34;Blob&#34;&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further, extra work is done to minimize the size of the diff when parts of the structure haven&#39;t changed, such as a single element changing in a large collection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let users = (1...5).map {&#xA;  User(&#xA;    favoriteNumbers: [$0],&#xA;    id: $0,&#xA;    name: &#34;Blob \($0)&#34;&#xA;  )&#xA;}&#xA;&#xA;var other = users&#xA;other.append(&#xA;  .init(&#xA;    favoriteNumbers: [42, 1729],&#xA;    id: 100,&#xA;    name: &#34;Blob Sr.&#34;&#xA;  )&#xA;)&#xA;&#xA;print(diff(users, other)!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  [&#xA;    … (4 unchanged),&#xA;+   [4]: User(&#xA;+     favoriteNumbers: [&#xA;+       [0]: 42,&#xA;+       [1]: 1729&#xA;+     ],&#xA;+     id: 100,&#xA;+     name: &#34;Blob Sr.&#34;&#xA;+   )&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a real world use case we modified Apple&#39;s &lt;a href=&#34;https://developer.apple.com/tutorials/swiftui/working-with-ui-controls&#34;&gt;Landmarks&lt;/a&gt; tutorial application to print the before and after state when favoriting a landmark:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  [&#xA;    [0]: Landmark(&#xA;      id: 1001,&#xA;      name: &#34;Turtle Rock&#34;,&#xA;      park: &#34;Joshua Tree National Park&#34;,&#xA;      state: &#34;California&#34;,&#xA;      description: &#34;This very large formation lies south of the large Real Hidden Valley parking lot and immediately adjacent to (south of) the picnic areas.&#34;,&#xA;-     isFavorite: true,&#xA;+     isFavorite: false,&#xA;      isFeatured: true,&#xA;      category: Category.rivers,&#xA;      imageName: &#34;turtlerock&#34;,&#xA;      coordinates: Coordinates(…)&#xA;    ),&#xA;    …&amp;nbsp;(11 unchanged)&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;XCTAssertNoDifference&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;XCTAssertEqual&lt;/code&gt; function from &lt;code&gt;XCTest&lt;/code&gt; allows you to assert that two values are equal, and if they are not the test suite will fail with a message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var other = user&#xA;other.name += &#34;!&#34;&#xA;&#xA;XCTAssertEqual(user, other)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;XCTAssertEqual failed: (&#34;User(favoriteNumbers: [42, 1729], id: 2, name: &#34;Blob&#34;)&#34;) is not equal to (&#34;User(favoriteNumbers: [42, 1729], id: 2, name: &#34;Blob!&#34;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unfortunately this failure message is quite difficult to visually parse and understand. It takes a few moments of hunting through the message to see that the only difference is the exclamation mark at the end of the name. The problem gets worse if the type is more complex, consisting of nested structures and large collections.&lt;/p&gt; &#xA;&lt;p&gt;This library also ships with an &lt;code&gt;XCTAssertNoDifference&lt;/code&gt; function to mitigate these problems. It works like &lt;code&gt;XCTAssertEqual&lt;/code&gt; except the failure message uses a nicely formatted diff to show exactly what is different between the two values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;XCTAssertNoDifference(user, other)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;XCTAssertNoDifference failed: …&#xA;&#xA;    User(&#xA;      favoriteNumbers: […],&#xA;      id: 2,&#xA;  −   name: &#34;Blob&#34;&#xA;  +   name: &#34;Blob!&#34;&#xA;    )&#xA;&#xA;(First: −, Second: +)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Custom Dump provides a few important ways to customize how a data type is dumped: &lt;code&gt;CustomDumpStringConvertible&lt;/code&gt;, &lt;code&gt;CustomDumpReflectable&lt;/code&gt;, and &lt;code&gt;CustomDumpRepresentable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;CustomDumpStringConvertible&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;CustomDumpStringConvertible&lt;/code&gt; protocol provides a simple way of converting a type to a raw string for the purpose of dumping. It is most appropriate for types that have a simple, un-nested internal representation, and typically its output fits on a single line, for example dates, UUIDs, URLs, etc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension URL: CustomDumpStringConvertible {&#xA;  public var customDumpDescription: String {&#xA;    &#34;URL(\(self.absoluteString))&#34;&#xA;  }&#xA;}&#xA;&#xA;customDump(URL(string: &#34;https://www.pointfree.co/&#34;)!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;URL(https://www.pointfree.co/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom Dump also uses this protocol internally to provide more useful output for enums imported from Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UserNotifications&#xA;&#xA;print(&#34;dump:&#34;)&#xA;dump(UNNotificationSetting.disabled)&#xA;print(&#34;customDump:&#34;)&#xA;customDump(UNNotificationSetting.disabled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dump:&#xA;- __C.UNNotificationSetting&#xA;customDump:&#xA;UNNotificationSettings.disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encounter an Objective-C enum that doesn&#39;t print nicely? See the &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/#contributing&#34;&gt;contributing&lt;/a&gt; section of this README to help submit a fix.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;CustomDumpReflectable&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;CustomDumpReflectable&lt;/code&gt; protocol provides a more comprehensive way of dumping a type into a more structured output. It allows you to construct a custom mirror that describes the structure that should be dumped. You can omit, add, and replace fields, or even change the &#34;display style&#34; of how the structure is dumped.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s say you have a struct representing state that holds a secure token in memory that should never be written to your logs. You can omit the token from &lt;code&gt;customDump&lt;/code&gt; by providing a mirror that omits this field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct LoginState: CustomDumpReflectable {&#xA;  var username: String&#xA;  var token: String&#xA;&#xA;  var customDumpMirror: Mirror {&#xA;    .init(&#xA;      self,&#xA;      children: [&#xA;        &#34;username&#34;: self.username,&#xA;        // omit token from logs&#xA;      ],&#xA;      displayStyle: .struct&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;customDump(&#xA;  LoginState(&#xA;    username: &#34;blob&#34;,&#xA;    token: &#34;secret&#34;&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;LoginState(username: &#34;blob&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And just like that, no token data will be written to the dump.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;CustomDumpRepresentable&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;CustomDumpRepresentable&lt;/code&gt; protocol allows you to return &lt;em&gt;any&lt;/em&gt; value for the purpose of dumping. This can be useful to flatten the dump representation of wrapper types. For example, a type-safe identifier may want to dump its raw value directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ID: RawRepresentable {&#xA;  var rawValue: String&#xA;}&#xA;&#xA;extension ID: CustomDumpRepresentable {&#xA;  var customDumpValue: Any {&#xA;    self.rawValue&#xA;  }&#xA;}&#xA;&#xA;customDump(ID(rawValue: &#34;deadbeef&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#34;deadbeef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are many types in Apple&#39;s ecosystem that do not dump to a nicely formatted string. In particular, all enums that are imported from Objective-C dump to strings that are not very helpful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UserNotifications&#xA;&#xA;dump(UNNotificationSetting.disabled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- __C.UNNotificationSetting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this reason we have conformed a &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/Sources/CustomDump/Conformances&#34;&gt;bunch&lt;/a&gt; of Apple&#39;s types to the &lt;code&gt;CustomDumpStringConvertible&lt;/code&gt; protocol so that they print out more reasonable descriptions. If you come across types that do not print useful information then we would happily accept a PR to conform those types to &lt;code&gt;CustomDumpStringConvertible&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add Custom Dump to an Xcode project by adding it as a package dependency.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-custom-dump&#34;&gt;https://github.com/pointfreeco/swift-custom-dump&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to use Custom Dump in a &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt; project, it&#39;s as simple as adding it to a &lt;code&gt;dependencies&lt;/code&gt; clause in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/pointfreeco/swift-custom-dump&#34;, from: &#34;0.3.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The latest documentation for the Custom Dump APIs is available &lt;a href=&#34;https://pointfreeco.github.io/swift-custom-dump/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Difference&#34;&gt;Difference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kuniwak/MirrorDiffKit&#34;&gt;MirrorDiffKit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-custom-dump/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>