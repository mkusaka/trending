<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-02T01:54:54Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nettlep/magic</title>
    <updated>2022-07-02T01:54:54Z</updated>
    <id>tag:github.com,2022-07-02:/nettlep/magic</id>
    <link href="https://github.com/nettlep/magic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scanner for decks of cards with bar codes printed on card edges&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Nettle Magic Project&lt;/h1&gt; &#xA;&lt;p&gt;This deck of cards has a bar code printed on the edge of each card. Scanning these bar codes would reveal where every card is (or isn&#39;t - if cards are missing.)&lt;/p&gt; &#xA;&lt;p&gt;Think card magic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/stamped-deck.jpg&#34; alt=&#34;A deck of cards with digital marks printed on the edge of each card.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This wouldn&#39;t be a very good magic trick if you could see the marks. We need invisible marks.&lt;/p&gt; &#xA;&lt;p&gt;One of these decks is unmarked, the other is marked with this special ink that is only visible under specific IR conditions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/ink_comparison.jpg&#34; alt=&#34;Two decks of cards - each viewed from the same end. Both decks appear normal.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This device (a Raspberry Pi Zero W with a NoIR camera) can see these marks. The shiny circle is a special IR filter.&lt;/p&gt; &#xA;&lt;p&gt;A scanning server runs on this small device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/device.png&#34; alt=&#34;A small computer module, about the size of a thumb. It has a small camera attached. The lens of the camera is covered with what looks like s small round mirror.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is Abra, the iOS client application running on my iPad. It shows what the server&#39;s camera sees along with the decoded deck. As you can see, the IR marks are quite visible to the camera.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/abra_ipad.png&#34; alt=&#34;A screenshot of an app containing an array of playing cards in suit and numerical order, with a black-and-white image of a deck of playing cards with edge-marks clearly visible.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your iDevices can also be a server, but they can&#39;t see those infrared marks, even with special filters. However, they can see black ink marks and marks made using a different type of invisible ink - ultraviolet fluorescing ink.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/uv-ink.jpg&#34; alt=&#34;A deck of cards with marks on the edges of cards that are glowing brightly under the light of a UV pen light. Next to the deck is an iPad showing the deck from it&#39;s camera&#39;s perspective.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For hard core developers, I&#39;ve included the testbed, which has a bunch of visualization tools to understand how things work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/steve.png&#34; alt=&#34;A screenshot of an app that shows a deck of cards in a viewport with marks outlined digitally, and various statistics listed below.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The testbed only runs on Mac. However, the server app is a generic Linux console app and it includes a text-based GUI mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nettlep/magic/main/docs/img/whisper.png&#34; alt=&#34;A text-based console app with an image of a deck of cards printed using alphanumeric characters. Statistics appear below this text-based viewport.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Performance is critical.&lt;/p&gt; &#xA;&lt;p&gt;The statistical model requires a full 30Hz of data. Also, this can be strapped to a person&#39;s body during a performance. Efficiency means longer battery, less heat.&lt;/p&gt; &#xA;&lt;p&gt;It can scan/decode a 1080p image to an ordered deck in as little as 4ms. On a rPI.&lt;/p&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;p&gt;Full documentation is available &lt;a href=&#34;https://nettlep.github.io/magic/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-argument-parser</title>
    <updated>2022-07-02T01:54:54Z</updated>
    <id>tag:github.com,2022-07-02:/apple/swift-argument-parser</id>
    <link href="https://github.com/apple/swift-argument-parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Straightforward, type-safe argument parsing for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Argument Parser&lt;/h1&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Begin by declaring a type that defines the information that you need to collect from the command line. Decorate each stored property with one of &lt;code&gt;ArgumentParser&lt;/code&gt;&#39;s property wrappers, and then declare conformance to &lt;code&gt;ParsableCommand&lt;/code&gt; and add the &lt;code&gt;@main&lt;/code&gt; attribute. Finally, implement your command&#39;s logic in the &lt;code&gt;run()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ArgumentParser&#xA;&#xA;@main&#xA;struct Repeat: ParsableCommand {&#xA;    @Flag(help: &#34;Include a counter with each repetition.&#34;)&#xA;    var includeCounter = false&#xA;&#xA;    @Option(name: .shortAndLong, help: &#34;The number of times to repeat &#39;phrase&#39;.&#34;)&#xA;    var count: Int?&#xA;&#xA;    @Argument(help: &#34;The phrase to repeat.&#34;)&#xA;    var phrase: String&#xA;&#xA;    mutating func run() throws {&#xA;        let repeatCount = count ?? 2&#xA;&#xA;        for i in 1...repeatCount {&#xA;            if includeCounter {&#xA;                print(&#34;\(i): \(phrase)&#34;)&#xA;            } else {&#xA;                print(phrase)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ArgumentParser&lt;/code&gt; library parses the command-line arguments, instantiates your command type, and then either executes your &lt;code&gt;run()&lt;/code&gt; method or exits with a useful message.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ArgumentParser&lt;/code&gt; uses your properties&#39; names and type information, along with the details you provide using property wrappers, to supply useful error messages and detailed help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ repeat hello --count 3&#xA;hello&#xA;hello&#xA;hello&#xA;$ repeat --count 3&#xA;Error: Missing expected argument &#39;phrase&#39;.&#xA;Help:  &amp;lt;phrase&amp;gt;  The phrase to repeat.&#xA;Usage: repeat [--count &amp;lt;count&amp;gt;] [--include-counter] &amp;lt;phrase&amp;gt;&#xA;  See &#39;repeat --help&#39; for more information.&#xA;$ repeat --help&#xA;USAGE: repeat [--count &amp;lt;count&amp;gt;] [--include-counter] &amp;lt;phrase&amp;gt;&#xA;&#xA;ARGUMENTS:&#xA;  &amp;lt;phrase&amp;gt;                The phrase to repeat.&#xA;&#xA;OPTIONS:&#xA;  --include-counter       Include a counter with each repetition.&#xA;  -c, --count &amp;lt;count&amp;gt;     The number of times to repeat &#39;phrase&#39;.&#xA;  -h, --help              Show help for this command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For guides, articles, and API documentation see the &lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/&#34;&gt;library&#39;s documentation on the Web&lt;/a&gt; or in Xcode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/&#34;&gt;ArgumentParser documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted&#34;&gt;Getting Started with ArgumentParser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/parsablecommand&#34;&gt;&lt;code&gt;ParsableCommand&lt;/code&gt; documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;This repository includes a few examples of using the library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/repeat/Repeat.swift&#34;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt; is the example shown above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/roll/main.swift&#34;&gt;&lt;code&gt;roll&lt;/code&gt;&lt;/a&gt; is a simple utility implemented as a straight-line script.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/math/Math.swift&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; is an annotated example of using nested commands and subcommands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/count-lines/CountLines.swift&#34;&gt;&lt;code&gt;count-lines&lt;/code&gt;&lt;/a&gt; uses &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; code in its implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also see examples of &lt;code&gt;ArgumentParser&lt;/code&gt; adoption among Swift project tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-format/&#34;&gt;&lt;code&gt;swift-format&lt;/code&gt;&lt;/a&gt; uses some advanced features, like custom option values and hidden flags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager/&#34;&gt;&lt;code&gt;swift-package-manager&lt;/code&gt;&lt;/a&gt; includes a deep command hierarchy and extensive use of option groups.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Argument Parser package is source stable; version numbers follow semantic versioning. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-argument-parser&lt;/code&gt; package consists of non-underscored declarations that are marked public in the &lt;code&gt;ArgumentParser&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including the exact wording and formatting of the autogenerated help and error messages, as well as the package’s examples, tests, utilities, and documentation.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt; &#xA;&lt;h2&gt;Adding &lt;code&gt;ArgumentParser&lt;/code&gt; as a Dependency&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;ArgumentParser&lt;/code&gt; library in a SwiftPM project, add it to the dependencies for your package and your command-line executable target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    // name, platforms, products, etc.&#xA;    dependencies: [&#xA;        // other dependencies&#xA;        .package(url: &#34;https://github.com/apple/swift-argument-parser&#34;, from: &#34;1.0.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .executableTarget(name: &#34;&amp;lt;command-line-tool&amp;gt;&#34;, dependencies: [&#xA;            // other dependencies&#xA;            .product(name: &#34;ArgumentParser&#34;, package: &#34;swift-argument-parser&#34;),&#xA;        ]),&#xA;        // other targets&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mapbox/mapbox-navigation-ios</title>
    <updated>2022-07-02T01:54:54Z</updated>
    <id>tag:github.com,2022-07-02:/mapbox/mapbox-navigation-ios</id>
    <link href="https://github.com/mapbox/mapbox-navigation-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn-by-turn navigation logic and UI in Swift on iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://docs.mapbox.com/ios/navigation/&#34;&gt;Mapbox Navigation SDK for iOS&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/mapbox/mapbox-navigation-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/mapbox/mapbox-navigation-ios.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mapbox/mapbox-navigation-ios&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mapbox/mapbox-navigation-ios/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-4BC51D.svg?style=flat&#34; alt=&#34;SPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/MapboxNavigation/&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/MapboxNavigation.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;Mapbox Navigation SDK&#34; src=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-ios/main/docs/img/navigation.png&#34; width=&#34;258&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Mapbox Navigation gives you all the tools you need to add turn-by-turn navigation to your iOS application.&lt;/p&gt; &#xA;&lt;p&gt;Get up and running in a few minutes with our drop-in turn-by-turn navigation &lt;code&gt;NavigationViewController&lt;/code&gt;, or build a completely custom turn-by-turn navigation app with our core components for routing and navigation.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A full-fledged turn-by-turn navigation UI for iPhone, iPad, and CarPlay that’s ready to drop into your application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mapbox.com/maps/&#34;&gt;Professionally designed map styles&lt;/a&gt; for daytime and nighttime driving&lt;/li&gt; &#xA; &lt;li&gt;Worldwide driving, cycling, and walking directions powered by &lt;a href=&#34;https://www.mapbox.com/about/open/&#34;&gt;open data&lt;/a&gt; and user feedback&lt;/li&gt; &#xA; &lt;li&gt;Traffic avoidance and proactive rerouting based on current conditions in &lt;a href=&#34;https://docs.mapbox.com/help/how-mapbox-works/directions/#traffic-data&#34;&gt;over 55 countries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Natural-sounding turn instructions powered by &lt;a href=&#34;https://aws.amazon.com/polly/&#34;&gt;Amazon Polly&lt;/a&gt; (no configuration needed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.mapbox.com/ios/navigation/overview/localization-and-internationalization/&#34;&gt;Support for over two dozen languages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.mapbox.com/ios/api/navigation/&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Mapbox Navigation SDK and Core Navigation are compatible with applications written in Swift 5 in Xcode 12.4 and above. The Mapbox Navigation and Mapbox Core Navigation frameworks run on iOS 11.0 and above.&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Navigation SDK is also available &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-android/&#34;&gt;for Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To install the MapboxNavigation framework in an application using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to your &lt;a href=&#34;https://account.mapbox.com/&#34;&gt;Mapbox account dashboard&lt;/a&gt; and create an access token that has the &lt;code&gt;DOWNLOADS:READ&lt;/code&gt; scope. &lt;strong&gt;PLEASE NOTE: This is not the same as your production Mapbox API token. Make sure to keep it private and do not insert it into any Info.plist file.&lt;/strong&gt; Create a file named &lt;code&gt;.netrc&lt;/code&gt; in your home directory if it doesn’t already exist, then add the following lines to the end of the file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;machine api.mapbox.com&#xA;  login mapbox&#xA;  password PRIVATE_MAPBOX_API_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &lt;em&gt;PRIVATE_MAPBOX_API_TOKEN&lt;/em&gt; is your Mapbox API token with the &lt;code&gt;DOWNLOADS:READ&lt;/code&gt; scope.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Xcode, go to File ‣ Swift Packages ‣ Add Package Dependency.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter &lt;code&gt;https://github.com/mapbox/mapbox-navigation-ios.git&lt;/code&gt; as the package repository and click Next.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set Rules to Version, Up to Next Major, and enter &lt;code&gt;2.5.0&lt;/code&gt; as the minimum version requirement. Click Next.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To install the MapboxNavigation framework in another package rather than an application, run &lt;code&gt;swift package init&lt;/code&gt; to create a Package.swift, then add the following dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Latest stable release&#xA;.package(name: &#34;MapboxNavigation&#34;, url: &#34;https://github.com/mapbox/mapbox-navigation-ios.git&#34;, from: &#34;2.5.0&#34;)&#xA;// Latest prerelease&#xA;.package(name: &#34;MapboxNavigation&#34;, url: &#34;https://github.com/mapbox/mapbox-navigation-ios.git&#34;, .exact(&#34;2.6.0-rc.2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To install the MapboxNavigation framework using &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to your &lt;a href=&#34;https://account.mapbox.com/&#34;&gt;Mapbox account dashboard&lt;/a&gt; and create an access token that has the &lt;code&gt;DOWNLOADS:READ&lt;/code&gt; scope. &lt;strong&gt;PLEASE NOTE: This is not the same as your production Mapbox API token. Make sure to keep it private and do not insert it into any Info.plist file.&lt;/strong&gt; Create a file named &lt;code&gt;.netrc&lt;/code&gt; in your home directory if it doesn’t already exist, then add the following lines to the end of the file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;machine api.mapbox.com&#xA;  login mapbox&#xA;  password PRIVATE_MAPBOX_API_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &lt;em&gt;PRIVATE_MAPBOX_API_TOKEN&lt;/em&gt; is your Mapbox API token with the &lt;code&gt;DOWNLOADS:READ&lt;/code&gt; scope.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://guides.cocoapods.org/syntax/podfile.html&#34;&gt;Podfile&lt;/a&gt; with the following specification:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Latest stable release&#xA;pod &#39;MapboxCoreNavigation&#39;, &#39;~&amp;gt; 2.5&#39;&#xA;pod &#39;MapboxNavigation&#39;, &#39;~&amp;gt; 2.5&#39;&#xA;# Latest prerelease&#xA;pod &#39;MapboxCoreNavigation&#39;, :git =&amp;gt; &#39;https://github.com/mapbox/mapbox-navigation-ios.git&#39;, :tag =&amp;gt; &#39;v2.6.0-rc.2&#39;&#xA;pod &#39;MapboxNavigation&#39;, :git =&amp;gt; &#39;https://github.com/mapbox/mapbox-navigation-ios.git&#39;, :tag =&amp;gt; &#39;v2.6.0-rc.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod repo update &amp;amp;&amp;amp; pod install&lt;/code&gt; and open the resulting Xcode workspace.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install the MapboxNavigation framework using &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;Carthage&lt;/a&gt; v0.38 or above:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to your &lt;a href=&#34;https://account.mapbox.com/&#34;&gt;Mapbox account dashboard&lt;/a&gt; and create an access token that has the &lt;code&gt;DOWNLOADS:READ&lt;/code&gt; scope. &lt;strong&gt;PLEASE NOTE: This is not the same as your production Mapbox API token. Make sure to keep it private and do not insert it into any Info.plist file.&lt;/strong&gt; Create a file named &lt;code&gt;.netrc&lt;/code&gt; in your home directory if it doesn’t already exist, then add the following lines to the end of the file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;machine api.mapbox.com&#xA;  login mapbox&#xA;  password PRIVATE_MAPBOX_API_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &lt;em&gt;PRIVATE_MAPBOX_API_TOKEN&lt;/em&gt; is your Mapbox API token with the &lt;code&gt;DOWNLOADS:READ&lt;/code&gt; scope.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Clear your Carthage caches:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ~/Library/Caches/carthage/ ~/Library/Caches/org.carthage.CarthageKit/binaries/{MapboxCommon-ios,MapboxNavigationNative,mapbox-ios-sdk-dynamic}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Artifacts.md#github-repositories&#34;&gt;Cartfile&lt;/a&gt; with the following dependency:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cartfile&#34;&gt;# Latest stable release&#xA;github &#34;mapbox/mapbox-navigation-ios&#34; ~&amp;gt; 2.5&#xA;# Latest prerelease&#xA;github &#34;mapbox/mapbox-navigation-ios&#34; &#34;v2.6.0-rc.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage bootstrap --platform iOS --use-xcframeworks --cache-builds --use-netrc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the rest of &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;Carthage’s iOS integration instructions&lt;/a&gt;. Your application target’s Embed Frameworks build phase should include &lt;code&gt;MapboxCoreNavigation.xcframework&lt;/code&gt;, &lt;code&gt;MapboxNavigationNative.xcframework&lt;/code&gt;, and &lt;code&gt;MapboxCommon.xcframework&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;MapboxNavigation no longer supports Carthage as of v2.0.0-alpha.1. However, if you are building a user interface from scratch, you can &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-ios/main/custom-navigation.md#using-carthage&#34;&gt;install just the MapboxCoreNavigation framework using Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Mapbox APIs and vector tiles require a Mapbox account and API access token. In the project editor, select the application target, then go to the Info tab. Under the “Custom iOS Target Properties” section, set &lt;code&gt;MBXAccessToken&lt;/code&gt; to your access token. You can obtain an access token from the &lt;a href=&#34;https://account.mapbox.com/access-tokens/&#34;&gt;Mapbox account page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In order for the SDK to track the user’s location as they move along the route, set &lt;code&gt;NSLocationWhenInUseUsageDescription&lt;/code&gt; to:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Shows your location on the map and helps improve the map.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Users expect the SDK to continue to track the user’s location and deliver audible instructions even while a different application is visible or the device is locked. Go to the Signing &amp;amp; Capabilities tab. Under the Background Modes section, enable “Audio, AirPlay, and Picture in Picture” and “Location updates”. (Alternatively, add the &lt;code&gt;audio&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt; values to the &lt;code&gt;UIBackgroundModes&lt;/code&gt; array in the Info tab.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now import the relevant modules and present a new &lt;code&gt;NavigationViewController&lt;/code&gt;. You can also &lt;a href=&#34;https://docs.mapbox.com/ios/navigation/overview/storyboards/&#34;&gt;push to a navigation view controller from within a storyboard&lt;/a&gt; if your application’s UI is laid out in Interface Builder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import MapboxDirections&#xA;import MapboxCoreNavigation&#xA;import MapboxNavigation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define two waypoints to travel between&#xA;let origin = Waypoint(coordinate: CLLocationCoordinate2D(latitude: 38.9131752, longitude: -77.0324047), name: &#34;Mapbox&#34;)&#xA;let destination = Waypoint(coordinate: CLLocationCoordinate2D(latitude: 38.8977, longitude: -77.0365), name: &#34;White House&#34;)&#xA;&#xA;// Set options&#xA;let routeOptions = NavigationRouteOptions(waypoints: [origin, destination])&#xA;&#xA;// Request a route using MapboxDirections&#xA;Directions.shared.calculate(routeOptions) { [weak self] (session, result) in&#xA;    switch result {&#xA;    case .failure(let error):&#xA;        print(error.localizedDescription)&#xA;    case .success(let response):&#xA;        guard let strongSelf = self else {&#xA;            return&#xA;        }&#xA;        // Pass the generated route response to the the NavigationViewController&#xA;        let viewController = NavigationViewController(for: response, routeIndex: 0, routeOptions: routeOptions)&#xA;        viewController.modalPresentationStyle = .fullScreen&#xA;        strongSelf.present(viewController, animated: true, completion: nil)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult the &lt;a href=&#34;https://docs.mapbox.com/ios/api/navigation/&#34;&gt;API reference&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.mapbox.com/ios/api/navigation/&#34;&gt;API reference&lt;/a&gt; includes example code for accomplishing common tasks. You can run these examples as part of the &lt;a href=&#34;https://github.com/mapbox/navigation-ios-examples&#34;&gt;navigation-ios-examples&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;This repository also contains &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-ios/tree/main/Example&#34;&gt;a testbed application&lt;/a&gt; that exercises a variety of navigation SDK features. See the &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-ios/main/CONTRIBUTING.md#using-carthage&#34;&gt;contributing guide&lt;/a&gt; for instructions on installing and running this application.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Styling&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the appearance in order to blend in with the rest of your app. Checkout &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-ios/raw/main/MapboxNavigation/DayStyle.swift&#34;&gt;&lt;code&gt;DayStyle.swift&lt;/code&gt;&lt;/a&gt; for all styleable elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CustomStyle: DayStyle {&#xA;    required init() {&#xA;        super.init()&#xA;        mapStyleURL = URL(string: &#34;mapbox://styles/mapbox/satellite-streets-v9&#34;)!&#xA;        styleType = .nightStyle&#xA;    }&#xA;&#xA;    override func apply() {&#xA;        super.apply()&#xA;        BottomBannerView.appearance().backgroundColor = .orange&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then initialize &lt;code&gt;NavigationViewController&lt;/code&gt; with your style or styles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let navigationOptions = NavigationOptions(styles: [CustomStyle()])&#xA;NavigationViewController(for: routeResponse, routeIndex: routeIndex, routeOptions: routeOptions, navigationOptions: navigationOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Starting from scratch&lt;/h3&gt; &#xA;&lt;p&gt;If your application needs something totally custom, such as a voice-only experience or an unconventional user interface, consult the &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-ios/main/custom-navigation.md&#34;&gt;Core Navigation installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome feedback and code contributions! Please see &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-ios/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Mapbox Navigation SDK for iOS is released under the Mapbox Terms of Service. See &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-ios/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>