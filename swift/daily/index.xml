<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-07T01:40:14Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cashapp/AccessibilitySnapshot</title>
    <updated>2024-02-07T01:40:14Z</updated>
    <id>tag:github.com,2024-02-07:/cashapp/AccessibilitySnapshot</id>
    <link href="https://github.com/cashapp/AccessibilitySnapshot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy regression testing for iOS accessibility&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AccessibilitySnapshot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CashApp/AccessibilitySnapshot/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/CashApp/AccessibilitySnapshot/ci.yml?branch=master&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AccessibilitySnapshot&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/AccessibilitySnapshot.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AccessibilitySnapshot&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/AccessibilitySnapshot.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/AccessibilitySnapshot&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/AccessibilitySnapshot.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AccessibilitySnapshot makes it simple to add regression tests for accessibility in iOS apps. The framework builds on the idea of snapshot testing to provide snapshots of the accessibility hierarchy.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cashapp/AccessibilitySnapshot/master/Documentation/Assets/HeroSample.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;By default, AccessibilitySnapshot uses &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;&gt;SnapshotTesting&lt;/a&gt; to record snapshots and perform comparisons. The framework also includes support for using &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case&#34;&gt;iOSSnapshotTestCase&lt;/a&gt; as the snapshotting engine instead. Before setting up accessibility snapshot tests, make sure your project is set up for standard snapshot testing. Accessibility snapshot tests require that the test target has a host application. See the &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/AccessibilitySnapshot/master/#extensions&#34;&gt;Extensions&lt;/a&gt; section below for a list of other available snapshotting options.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;CocoaPods&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Install with &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; by adding the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AccessibilitySnapshot&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To use only the core accessibility parser, add a dependency on the Core subspec alone:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AccessibilitySnapshot/Core&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternatively, if you wish to use &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case&#34;&gt;iOSSnapshotTestCase&lt;/a&gt; to perform image comparisons, you can add a dependency on the &lt;code&gt;iOSSnapshotTestCase&lt;/code&gt; subspec instead (or in addition - you can use both in the same project):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AccessibilitySnapshot/iOSSnapshotTestCase&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Swift Package Manager&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Install with &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; by adding the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(name: &#34;AccessibilitySnapshot&#34;, url: &#34;https://github.com/cashapp/AccessibilitySnapshot.git&#34;, from: &#34;0.4.1&#34;),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Next, add AccessibilitySnapshot as a dependency to your test target:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;targets: [&#xA;    .target(name: &#34;MyApp&#34;),&#xA;    .testTarget(name: &#34;MyAppTests&#34;, dependencies: [&#34;MyApp&#34;, &#34;AccessibilitySnapshot&#34;])&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To use only the core accessibility parser, add a dependency on the Core library alone:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;targets: [&#xA;    .target(name: &#34;MyApp&#34;),&#xA;    .testTarget(name: &#34;MyAppTests&#34;, dependencies: [&#34;MyApp&#34;, &#34;AccessibilitySnapshotCore&#34;])&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To use &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case&#34;&gt;iOSSnapshotTestCase&lt;/a&gt; to perform image comparisons, add a dependency on &lt;code&gt;FBSnapshotTestCase+Accessibility&lt;/code&gt; for Swift testing or &lt;code&gt;FBSnapshotTestCase+Accessibility-ObjC&lt;/code&gt; for Objective-C.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;targets: [&#xA;    .target(name: &#34;MyApp&#34;),&#xA;    .testTarget(name: &#34;MyAppTests&#34;, dependencies: [&#34;MyApp&#34;, &#34;FBSnapshotTestCase+Accessibility&#34;])&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Carthage&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Only the core accessibility parser (not the snapshot integration layers) can be installed via Carthage. To install AccessibilitySnapshotCore via &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;cashapp/AccessibilitySnapshot&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;AccessibilitySnapshot builds on top of existing snapshot frameworks to add support for snapshotting your app&#39;s accessibility. By default it uses the &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;&gt;SnapshotTesting&lt;/a&gt; framework for snapshotting, but can be switched over to &lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case&#34;&gt;iOSSnapshotTestCase&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started with SnapshotTesting&lt;/h3&gt; &#xA;&lt;p&gt;AccessibilitySnapshot provides an &lt;code&gt;.accessibilityImage&lt;/code&gt; snapshotting strategy that can be used with SnapshotTesting&#39;s snapshot assertions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testAccessibility() {&#xA;    let view = MyView()&#xA;    // Configure the view...&#xA;&#xA;    assertSnapshot(matching: view, as: .accessibilityImage)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshots can also be customized in a few ways, for example controlling when to include indicators for the accessibility activation point of each element. By default, these indicators are shown when the activation point is different than the default activation point for that view. You can override this behavior for each snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testAccessibility() {&#xA;    let view = MyView()&#xA;    // Configure the view...&#xA;&#xA;    // Show indicators for every element.&#xA;    assertSnapshot(matching: view, as: .accessibilityImage(showActivationPoints: .always))&#xA;&#xA;    // Don&#39;t show any indicators.&#xA;    assertSnapshot(matching: view, as: .accessibilityImage(showActivationPoints: .never))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting Started with iOSSnapshotTestCase&lt;/h3&gt; &#xA;&lt;p&gt;To run a snapshot test, simply call the &lt;code&gt;SnapshotVerifyAccessibility&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testAccessibility() {&#xA;    let view = MyView()&#xA;    // Configure the view...&#xA;&#xA;    SnapshotVerifyAccessibility(view)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since AccessibilitySnapshot is built on top of iOSSnapshotTestCase, it uses the same mechanism to record snapshots (setting the &lt;code&gt;self.recordMode&lt;/code&gt; property) and supports many of the same features like device agnostic file names and specifying identifiers for each snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testAccessibility() {&#xA;    let view = MyView()&#xA;    // Configure the view...&#xA;&#xA;    SnapshotVerifyAccessibility(view, identifier: &#34;identifier&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshots can also optionally include indicators for the accessibility activation point of each element. By default, these indicators are shown when the activation point is different than the default activation point for that view. You can override this behavior for each snapshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testAccessibility() {&#xA;    let view = MyView()&#xA;    // Configure the view...&#xA;&#xA;    // Show indicators for every element.&#xA;    SnapshotVerifyAccessibility(view, showActivationPoints: .always)&#xA;&#xA;    // Don&#39;t show any indicators.&#xA;    SnapshotVerifyAccessibility(view, showActivationPoints: .never)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run accessibility snapshot tests from Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)testAccessibility;&#xA;{&#xA;    UIView *view = [UIView new];&#xA;    // Configure the view...&#xA;&#xA;    SnapshotVerifyAccessibility(view, @&#34;identifier&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 13.2.1 or later&lt;/li&gt; &#xA; &lt;li&gt;iOS 13.0 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love our &lt;a href=&#34;https://github.com/CashApp/AccessibilitySnapshot/graphs/contributors&#34;&gt;contributors&lt;/a&gt;! Please read our &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/AccessibilitySnapshot/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; prior to submitting a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Have you written your own extension? &lt;a href=&#34;https://github.com/cashapp/AccessibilitySnapshot/edit/master/README.md&#34;&gt;Add it here&lt;/a&gt; and submit a pull request!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/playbook-ui/accessibility-snapshot-ios&#34;&gt;PlaybookAccessibilitySnapshot&lt;/a&gt; brings accessibility snapshot testing support to &lt;a href=&#34;https://github.com/playbook-ui/playbook-ios&#34;&gt;Playbook&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020 Square Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apple/pkl-swift</title>
    <updated>2024-02-07T01:40:14Z</updated>
    <id>tag:github.com,2024-02-07:/apple/pkl-swift</id>
    <link href="https://github.com/apple/pkl-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pkl bindings for the Swift programming language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pkl-swift&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;This library exposes Swift bindings for the Pkl configuration language.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;It allows you to embed Pkl into your Swift application, complete with code generation for full type safety and ease of use.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;The full documentation for this library can be found on our &lt;a href=&#34;https://pkl-lang.org/swift/current/index.html&#34;&gt;documentation site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;To get up and going, reference the &lt;a href=&#34;https://pkl-lang.org/swift/current/quickstart.html&#34;&gt;quick start guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;When upgrading pkl-swift, reference the &lt;a href=&#34;https://pkl-lang.org/pkl/swift/current/CHANGELOG.html&#34;&gt;changelog&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>