<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-29T01:45:51Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pkluz/PKHUD</title>
    <updated>2023-05-29T01:45:51Z</updated>
    <id>tag:github.com,2023-05-29:/pkluz/PKHUD</id>
    <link href="https://github.com/pkluz/PKHUD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift based reimplementation of the Apple HUD (Volume, Ringer, Rotation,…) for iOS 8.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/pkluz/PKHUD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/pkluz/PKHUD.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/PKHUD&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/PKHUD.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/PKHUD/3.2.1/&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/PKHUD.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/PKHUD&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/PKHUD.svg?style=flat&#34; alt=&#34;CocoaPod&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-4BC51D.svg?style=flat&#34; alt=&#34;SPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pkluz/PKHUD/master/README_hero.png&#34; alt=&#34;PKHUD - Swift and easy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;Swift&lt;/strong&gt; based reimplementation of the Apple HUD (Volume, Ringer, Rotation,…) &lt;strong&gt;for iOS 8&lt;/strong&gt; and up.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official iOS 8 blur effect via &lt;strong&gt;UIVisualEffectsView&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Proper &lt;strong&gt;rotation support&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Size / &lt;strong&gt;Device agnostic&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Works on top of presented view controllers, alerts,...&lt;/li&gt; &#xA; &lt;li&gt;Comes with several &lt;em&gt;free&lt;/em&gt; resources - Checkmark, Cross, Progress Indicator,…&lt;/li&gt; &#xA; &lt;li&gt;…as well as &lt;strong&gt;animated&lt;/strong&gt; ones.&lt;/li&gt; &#xA; &lt;li&gt;Builds as an &lt;strong&gt;iOS 8 framework&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1275218/10124182/09f4c406-654f-11e5-9cab-0f2e6f470887.gif&#34; alt=&#34;PKHUD.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The recommended way is to use CocoaPods.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To install PKHUD for Swift 2 using CocoaPods, include the following in your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PKHUD&#39;, &#39;~&amp;gt; 3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install PKHUD for Swift 3.x using CocoaPods, include the following in your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PKHUD&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install PKHUD for Swift 4.x, include the following in your Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PKHUD&#39;, &#39;~&amp;gt; 5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate PKHUD into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;pkluz/PKHUD&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;PKHUD.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To install using Swift Package Manager, add this to the &lt;code&gt;dependencies:&lt;/code&gt; section in your Package.swift file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/pkluz/PKHUD.git&#34;, .upToNextMinor(from: &#34;5.4.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How To&lt;/h2&gt; &#xA;&lt;p&gt;After adding the framework to your project, you need to import the module&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PKHUD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can proceed to show an arbitrary HUD (and have it automatically disappear a second later) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;HUD.flash(.success, delay: 1.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;or&lt;/em&gt; with a completion handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;HUD.flash(.success, delay: 1.0) { finished in &#xA;    // Completion Handler&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;alternatively, you can use the more verbose and flexible “plumbing” API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;PKHUD.sharedHUD.contentView = PKHUDSuccessView()&#xA;PKHUD.sharedHUD.show()&#xA;PKHUD.sharedHUD.hide(afterDelay: 1.0) { success in &#xA;    // Completion Handler&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also hot-swap content views - this can prove useful if you want to display a progress HUD first and transform it into a success or error HUD after an asynchronous operation has finished.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;HUD.show(.progress)&#xA;        &#xA;// Now some long running task starts...&#xA;DispatchQueue.main.asyncAfter(deadline: .now() + 2) {&#xA;    // ...and once it finishes we flash the HUD for a second.&#xA;   HUD.flash(.success, delay: 1.0)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that there are &lt;em&gt;multiple&lt;/em&gt; types of content views that ship with PKHUD. You can find them as separate files in the project folder as well as in the &lt;code&gt;ContentViews&lt;/code&gt; group in Xcode.&lt;/p&gt; &#xA;&lt;h2&gt;Communication &lt;em&gt;(Hat Tip AlamoFire)&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/pkhud&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;pkhud&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/pkhud&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;There are two properties at your disposal to customize general behavior.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PKHUD.sharedHUD.dimsBackground: Bool&lt;/code&gt; defines whether the background is slightly dimmed when the HUD is shown.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PKHUD.sharedHUD.userInteractionOnUnderlyingViewsEnabled: Bool&lt;/code&gt; defines whether the underlying views respond to touches while the HUD is shown.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally you are free to create you own custom content views. They can descend from any &lt;code&gt;UIView&lt;/code&gt; type or the predefined base classes &lt;code&gt;PKHUDSquareBaseView&lt;/code&gt; and &lt;code&gt;PKHUDWideBaseView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It&#39;s neither possible to customize the general look and feel, nor do I plan to add that feature. You are free to provide any content views you wish but the blurring, corner radius and shading will remain the same.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;PKHUD is owned and maintained by Philip Kluz. Other mantainers are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Piergiuseppe Longo &lt;a href=&#34;https://twitter.com/pglongo&#34;&gt;twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Xamarin&lt;/h2&gt; &#xA;&lt;p&gt;If you are Xamarin developer you can use this &lt;a href=&#34;https://github.com/Prin53/Xamarin.iOS.PKHUD&#34;&gt;port&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2015 Philip Kluz (&lt;a href=&#34;mailto:Philip.Kluz@gmail.com&#34;&gt;Philip.Kluz@gmail.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vapor/multipart-kit</title>
    <updated>2023-05-29T01:45:51Z</updated>
    <id>tag:github.com,2023-05-29:/vapor/multipart-kit</id>
    <link href="https://github.com/vapor/multipart-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🏞 Parses and serializes multipart-encoded data with Codable support.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1049951/105351980-94fe4280-5bed-11eb-876e-ae60df0f41f0.png&#34; height=&#34;64&#34; alt=&#34;Multipart&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://docs.vapor.codes/4.0/&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/read_the-docs-2196f3.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/vapor&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/431917998102675485.svg?sanitize=true&#34; alt=&#34;Team Chat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vapor/multipart-kit/main/LICENSE&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/vapor/multipart-kit/actions&#34;&gt; &lt;img src=&#34;https://github.com/vapor/multipart-kit/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/swift-5.2-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift 5.2&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/codevapor&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-codevapor-5AA9E7.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;🏞 Multipart parser and serializer with &lt;code&gt;Codable&lt;/code&gt; support for Multipart Form Data.&lt;/p&gt; &#xA;&lt;h3&gt;Major Releases&lt;/h3&gt; &#xA;&lt;p&gt;The table below shows a list of MultipartKit major releases alongside their compatible NIO and Swift versions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;NIO&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;SPM&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0&lt;/td&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;5.2+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;4.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;   &lt;td&gt;4.0+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;3.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;3.1+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;2.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;3.1+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;1.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Use the SPM string to easily include the dependency in your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/vapor/multipart-kit.git&#34;, from: ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;p&gt;MultipartKit supports the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 18.04+&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.15+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;MultipartKit is a multipart parsing and serializing library. It provides &lt;code&gt;Codable&lt;/code&gt; support for the special case of the &lt;code&gt;multipart/form-data&lt;/code&gt; media type through a &lt;code&gt;FormDataEncoder&lt;/code&gt; and &lt;code&gt;FormDataDecoder&lt;/code&gt;. The parser delivers its output as it is parsed through callbacks suitable for streaming.&lt;/p&gt; &#xA;&lt;h3&gt;Multipart Form Data&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s define a &lt;code&gt;Codable&lt;/code&gt; type and a choose a boundary used to separate the multipart parts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User: Codable {&#xA;    let name: String&#xA;    let email: String&#xA;}&#xA;let user = User(name: &#34;Ed&#34;, email: &#34;ed@example.com&#34;)&#xA;let boundary = &#34;abc123&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can encode this instance of a our type using a &lt;code&gt;FormDataEncoder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encoded = try FormDataEncoder().encode(foo, boundary: boundary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output looks then looks like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--abc123&#xA;Content-Disposition: form-data; name=&#34;name&#34;&#xA;&#xA;Ed&#xA;--abc123&#xA;Content-Disposition: form-data; name=&#34;email&#34;&#xA;&#xA;ed@example.com&#xA;--abc123--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to &lt;em&gt;decode&lt;/em&gt; this message we feed this output and the same boundary to a &lt;code&gt;FormDataDecoder&lt;/code&gt; and we get back an identical instance to the one we started with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let decoded = try FormDataDecoder().decode(User.self, from: encoded, boundary: boundary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A note on &lt;code&gt;null&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;As there is no standard defined for how to represent &lt;code&gt;null&lt;/code&gt; in Multipart (unlike, for instance, JSON), FormDataEncoder and FormDataDecoder do not support encoding or decoding &lt;code&gt;null&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Nesting and Collections&lt;/h3&gt; &#xA;&lt;p&gt;Nested structures can be represented by naming the parts such that they describe a path using square brackets to denote contained properties or elements in a collection. The following example shows what that looks like in practice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Nested: Encodable {&#xA;    let tag: String&#xA;    let flag: Bool&#xA;    let nested: [Nested]&#xA;}&#xA;let boundary = &#34;abc123&#34;&#xA;let nested = Nested(tag: &#34;a&#34;, flag: true, nested: [Nested(tag: &#34;b&#34;, flag: false, nested: [])])&#xA;let encoded = try FormDataEncoder().encode(nested, boundary: boundary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This results in the content below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--abc123&#xA;Content-Disposition: form-data; name=&#34;tag&#34;&#xA;&#xA;a&#xA;--abc123&#xA;Content-Disposition: form-data; name=&#34;flag&#34;&#xA;&#xA;true&#xA;--abc123&#xA;Content-Disposition: form-data; name=&#34;nested[0][tag]&#34;&#xA;&#xA;b&#xA;--abc123&#xA;Content-Disposition: form-data; name=&#34;nested[0][flag]&#34;&#xA;&#xA;false&#xA;--abc123--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the array elements always include the index (as opposed to just &lt;code&gt;[]&lt;/code&gt;) in order to support complex nesting.&lt;/p&gt;</summary>
  </entry>
</feed>