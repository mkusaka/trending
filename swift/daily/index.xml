<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:56:40Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AudioKit/AudioKit</title>
    <updated>2022-06-26T01:56:40Z</updated>
    <id>tag:github.com,2022-06-26:/AudioKit/AudioKit</id>
    <link href="https://github.com/AudioKit/AudioKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift audio synthesis, processing, &amp; analysis platform for iOS, macOS and tvOS&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/AudioKit/Cookbook/raw/main/Cookbook/Cookbook/Assets.xcassets/audiokit-icon.imageset/audiokit-icon.png&#34; width=&#34;20%&#34;&gt; &#xA; &lt;h1&gt;AudioKit&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/AudioKit/AudioKit/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/AudioKit/AudioKit/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AudioKit/AudioKit/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/AudioKit&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AudioKit/AudioKit/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/AudioKit&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AudioKitPro&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/AudioKitPro.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;AudioKit is an audio synthesis, processing, and analysis platform for iOS, macOS (including Catalyst), and tvOS.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;In Xcode 13:&lt;/h3&gt; &#xA;&lt;p&gt;You can add AudioKit and any of the other AudioKit libraries using Collections&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select File -&amp;gt; Add Packages...&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; icon on the bottom left of the Collections sidebar on the left.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;Add Swift Package Collection&lt;/code&gt; from the pop-up menu.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;Add Package Collection&lt;/code&gt; dialog box, enter &lt;code&gt;https://swiftpackageindex.com/AudioKit/collection.json&lt;/code&gt; as the URL and click the &#34;Load&#34; button.&lt;/li&gt; &#xA; &lt;li&gt;It will warn you that the collection is not signed, but it is fine, click &#34;Add Unsigned Collection&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Now you can add any of the AudioKit Swift Packages you need and read about what they do, right from within Xcode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;In Xcode 11 &amp;amp; 12:&lt;/h3&gt; &#xA;&lt;p&gt;To add AudioKit to your Xcode project&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency.&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;https://github.com/AudioKit/AudioKit&lt;/code&gt; for the URL. You can define which version range you want, or which branch to use, or even which exact commit you would like use.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can generate the documentation in XCode13+ by pulling down the Product menu and choosing &#34;Build Documentation&#34;. It also appears on the &lt;a href=&#34;https://audiokit.io/&#34;&gt;AudioKit.io Web Site&lt;/a&gt; and the &lt;a href=&#34;https://github.com/AudioKit/AudioKit/wiki&#34;&gt;Github wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/AudioKit/Cookbook&#34;&gt;AudioKit Cookbook&lt;/a&gt; contains many recipes for simple uses for AudioKit components.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Post your problem to &lt;a href=&#34;https://stackoverflow.com/questions/tagged/audiokit&#34;&gt;StackOverflow with the #AudioKit hashtag&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you are sure the problem is not in your implementation, but in AudioKit itself, you can open a &lt;a href=&#34;https://github.com/audiokit/AudioKit/issues&#34;&gt;Github Issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you, your team or your company is using AudioKit, please consider &lt;a href=&#34;https://github.com/sponsors/aure&#34;&gt;sponsoring Aure on Github Sponsors&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>scinfu/SwiftSoup</title>
    <updated>2022-06-26T01:56:40Z</updated>
    <id>tag:github.com,2022-06-26:/scinfu/SwiftSoup</id>
    <link href="https://github.com/scinfu/SwiftSoup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftSoup: Pure Swift HTML Parser, with best of DOM, CSS, and jquery (Supports Linux, iOS, Mac, tvOS, watchOS)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/scinfu/SwiftSoup/master/swiftsoup.png&#34; alt=&#34;SwiftSoup&#34; title=&#34;SwiftSoup&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Linux%20%7C%20OS%20X%20%7C%20iOS%20%7C%20tvOS%20%7C%20watchOS-orange.svg?sanitize=true&#34; alt=&#34;Platform OS X | iOS | tvOS | watchOS | Linux&#34;&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-4BC51D.svg?style=flat&#34; alt=&#34;SPM compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/%F0%9F%90%A7%20linux-ready-red.svg?sanitize=true&#34; alt=&#34;üêß linux: ready&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt; &lt;a href=&#34;https://travis-ci.org/scinfu/SwiftSoup&#34;&gt;&lt;img src=&#34;https://travis-ci.org/scinfu/SwiftSoup.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/SwiftSoup&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftSoup.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/SwiftSoup&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SwiftSoup.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://twitter.com/scinfu&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@scinfu-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SwiftSoup&lt;/code&gt; is a pure Swift library, cross-platform (macOS, iOS, tvOS, watchOS and Linux!), for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jQuery-like methods. &lt;code&gt;SwiftSoup&lt;/code&gt; implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scrape and parse HTML from a URL, file, or string&lt;/li&gt; &#xA; &lt;li&gt;Find and extract data, using DOM traversal or CSS selectors&lt;/li&gt; &#xA; &lt;li&gt;Manipulate the HTML elements, attributes, and text&lt;/li&gt; &#xA; &lt;li&gt;Clean user-submitted content against a safe white-list, to prevent XSS attacks&lt;/li&gt; &#xA; &lt;li&gt;Output tidy HTML &lt;code&gt;SwiftSoup&lt;/code&gt; is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; &lt;code&gt;SwiftSoup&lt;/code&gt; will create a sensible parse tree.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;p&gt;Swift 5 &lt;code&gt;&amp;gt;=2.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swift 4.2 &lt;code&gt;1.7.4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;SwiftSoup is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftSoup&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;SwiftSoup is also available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. To install it, simply add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;scinfu/SwiftSoup&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;SwiftSoup is also available through &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;. To install it, simply add the dependency to your Package.Swift file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;...&#xA;dependencies: [&#xA;    .package(url: &#34;https://github.com/scinfu/SwiftSoup.git&#34;, from: &#34;2.4.3&#34;),&#xA;],&#xA;targets: [&#xA;    .target( name: &#34;YourTarget&#34;, dependencies: [&#34;SwiftSoup&#34;]),&#xA;]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Try&lt;/h2&gt; &#xA;&lt;h3&gt;Try out the simple online CSS selectors site:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftsoup.herokuapp.com/&#34;&gt;SwiftSoup Test Site&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Try out the example project opening Terminal and type:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pod try SwiftSoup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/scinfu/SwiftSoup/master/Example/img1.png&#34; alt=&#34;SwiftSoup&#34; title=&#34;SwiftSoup&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/scinfu/SwiftSoup/master/Example/img2.png&#34; alt=&#34;SwiftSoup&#34; title=&#34;SwiftSoup&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;To parse an HTML document:&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;   let html = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;First parse&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&#34;&#xA;       + &#34;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;Parsed HTML into a doc.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;   let doc: Document = try SwiftSoup.parse(html)&#xA;   return try doc.text()&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unclosed tags (e.g. &lt;code&gt;&amp;lt;p&amp;gt;Lorem &amp;lt;p&amp;gt;Ipsum&lt;/code&gt; parses to &lt;code&gt;&amp;lt;p&amp;gt;Lorem&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Ipsum&amp;lt;/p&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Implicit tags (e.g. a naked &lt;code&gt;&amp;lt;td&amp;gt;Table data&amp;lt;/td&amp;gt;&lt;/code&gt; is wrapped into a &lt;code&gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;...&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Reliably creating the document structure (&lt;code&gt;html&lt;/code&gt; containing a &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;, and only appropriate elements within the head)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The object model of a document&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documents consist of Elements and TextNodes&lt;/li&gt; &#xA; &lt;li&gt;The inheritance chain is: &lt;code&gt;Document&lt;/code&gt; extends &lt;code&gt;Element&lt;/code&gt; extends &lt;code&gt;Node.TextNode&lt;/code&gt; extends &lt;code&gt;Node&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;An Element contains a list of children Nodes, and has one parent Element. They also have provide a filtered list of child Elements only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Extract attributes, text, and HTML from elements&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;After parsing a document, and finding some elements, you&#39;ll want to get at the data inside those elements.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To get the value of an attribute, use the &lt;code&gt;Node.attr(_ String key)&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;For the text on an element (and its combined children), use &lt;code&gt;Element.text()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For HTML, use &lt;code&gt;Element.html()&lt;/code&gt;, or &lt;code&gt;Node.outerHtml()&lt;/code&gt; as appropriate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let html: String = &#34;&amp;lt;p&amp;gt;An &amp;lt;a href=&#39;http://example.com/&#39;&amp;gt;&amp;lt;b&amp;gt;example&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt; link.&amp;lt;/p&amp;gt;&#34;;&#xA;    let doc: Document = try SwiftSoup.parse(html)&#xA;    let link: Element = try doc.select(&#34;a&#34;).first()!&#xA;    &#xA;    let text: String = try doc.body()!.text(); // &#34;An example link&#34;&#xA;    let linkHref: String = try link.attr(&#34;href&#34;); // &#34;http://example.com/&#34;&#xA;    let linkText: String = try link.text(); // &#34;example&#34;&#34;&#xA;    &#xA;    let linkOuterH: String = try link.outerHtml(); // &#34;&amp;lt;a href=&#34;http://example.com&#34;&amp;gt;&amp;lt;b&amp;gt;example&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt;&#34;&#xA;    let linkInnerH: String = try link.html(); // &#34;&amp;lt;b&amp;gt;example&amp;lt;/b&amp;gt;&#34;&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;The methods above are the core of the element data access methods. There are additional others:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.id()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.tagName()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.className()&lt;/code&gt; and &lt;code&gt;Element.hasClass(_ String className)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these accessor methods have corresponding setter methods to change the data.&lt;/p&gt; &#xA;&lt;h1&gt;Parse a document from a String&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You have HTML in a Swift String, and you want to parse that HTML to get at its contents, or to make sure it&#39;s well formed, or to modify it. The String may have come from user input, a file, or from the web.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the static &lt;code&gt;SwiftSoup.parse(_ html: String)&lt;/code&gt; method, or &lt;code&gt;SwiftSoup.parse(_ html: String, _ baseUri: String)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let html = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;First parse&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&#34;&#xA;        + &#34;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;Parsed HTML into a doc.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;    let doc: Document = try SwiftSoup.parse(html)&#xA;    return try doc.text()&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(&#34;&#34;)&#xA;} catch {&#xA;    print(&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;parse(_ html: String, _ baseUri: String)&lt;/code&gt; method parses the input HTML into a new &lt;code&gt;Document&lt;/code&gt;. The base URI argument is used to resolve relative URLs into absolute URLs, and should be set to the URL where the document was fetched from. If that&#39;s not applicable, or if you know the HTML has a base element, you can use the &lt;code&gt;parse(_ html: String)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;As long as you pass in a non-null string, you&#39;re guaranteed to have a successful, sensible parse, with a Document containing (at least) a &lt;code&gt;head&lt;/code&gt; and a &lt;code&gt;body&lt;/code&gt; element.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a &lt;code&gt;Document&lt;/code&gt;, you can get at the data using the appropriate methods in &lt;code&gt;Document&lt;/code&gt; and its supers &lt;code&gt;Element&lt;/code&gt; and &lt;code&gt;Node&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Parsing a body fragment&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You have a fragment of body HTML (e.g. &lt;code&gt;div&lt;/code&gt; containing a couple of p tags; as opposed to a full HTML document) that you want to parse. Perhaps it was provided by a user submitting a comment, or editing the body of a page in a CMS.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;SwiftSoup.parseBodyFragment(_ html: String)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let html: String = &#34;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Lorem ipsum.&amp;lt;/p&amp;gt;&#34;&#xA;    let doc: Document = try SwiftSoup.parseBodyFragment(html)&#xA;    let body: Element? = doc.body()&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;parseBodyFragment&lt;/code&gt; method creates an empty shell document, and inserts the parsed HTML into the &lt;code&gt;body&lt;/code&gt; element. If you used the normal &lt;code&gt;SwiftSoup(_ html: String)&lt;/code&gt; method, you would generally get the same result, but explicitly treating the input as a body fragment ensures that any bozo HTML provided by the user is parsed into the &lt;code&gt;body&lt;/code&gt; element.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Document.body()&lt;/code&gt; method retrieves the element children of the document&#39;s &lt;code&gt;body&lt;/code&gt; element; it is equivalent to &lt;code&gt;doc.getElementsByTag(&#34;body&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stay safe&lt;/h3&gt; &#xA;&lt;p&gt;If you are going to accept HTML input from a user, you need to be careful to avoid cross-site scripting attacks. See the documentation for the &lt;code&gt;Whitelist&lt;/code&gt; based cleaner, and clean the input with &lt;code&gt;clean(String bodyHtml, Whitelist whitelist)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Sanitize untrusted HTML (to prevent XSS)&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You want to allow untrusted users to supply HTML for output on your website (e.g. as comment submission). You need to clean this HTML to avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;cross-site scripting&lt;/a&gt; (XSS) attacks.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the SwiftSoup HTML &lt;code&gt;Cleaner&lt;/code&gt; with a configuration specified by a &lt;code&gt;Whitelist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let unsafe: String = &#34;&amp;lt;p&amp;gt;&amp;lt;a href=&#39;http://example.com/&#39; onclick=&#39;stealCookies()&#39;&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#34;&#xA;    let safe: String = try SwiftSoup.clean(unsafe, Whitelist.basic())!&#xA;    // now: &amp;lt;p&amp;gt;&amp;lt;a href=&#34;http://example.com/&#34; rel=&#34;nofollow&#34;&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discussion&lt;/h3&gt; &#xA;&lt;p&gt;A cross-site scripting attack against your site can really ruin your day, not to mention your users&#39;. Many sites avoid XSS attacks by not allowing HTML in user submitted content: they enforce plain text only, or use an alternative markup syntax like wiki-text or Markdown. These are seldom optimal solutions for the user, as they lower expressiveness, and force the user to learn a new syntax.&lt;/p&gt; &#xA;&lt;p&gt;A better solution may be to use a rich text WYSIWYG editor (like &lt;a href=&#34;http://ckeditor.com&#34;&gt;CKEditor&lt;/a&gt; or &lt;a href=&#34;https://www.tinymce.com&#34;&gt;TinyMCE&lt;/a&gt;). These output HTML, and allow the user to work visually. However, their validation is done on the client side: you need to apply a server-side validation to clean up the input and ensure the HTML is safe to place on your site. Otherwise, an attacker can avoid the client-side Javascript validation and inject unsafe HMTL directly into your site&lt;/p&gt; &#xA;&lt;p&gt;The SwiftSoup whitelist sanitizer works by parsing the input HTML (in a safe, sand-boxed environment), and then iterating through the parse tree and only allowing known-safe tags and attributes (and values) through into the cleaned output.&lt;/p&gt; &#xA;&lt;p&gt;It does not use regular expressions, which are inappropriate for this task.&lt;/p&gt; &#xA;&lt;p&gt;SwiftSoup provides a range of &lt;code&gt;Whitelist&lt;/code&gt; configurations to suit most requirements; they can be modified if necessary, but take care.&lt;/p&gt; &#xA;&lt;p&gt;The cleaner is useful not only for avoiding XSS, but also in limiting the range of elements the user can provide: you may be OK with textual &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt; elements, but not structural &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;table&lt;/code&gt; elements.&lt;/p&gt; &#xA;&lt;h3&gt;See also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;http://ha.ckers.org/xss.html&#34;&gt;XSS cheat sheet&lt;/a&gt; and filter evasion guide, as an example of how regular-expression filters don&#39;t work, and why a safe whitelist parser-based sanitizer is the correct approach.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;code&gt;Cleaner&lt;/code&gt; reference if you want to get a &lt;code&gt;Document&lt;/code&gt; instead of a String return&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;code&gt;Whitelist&lt;/code&gt; reference for the different canned options, and to create a custom whitelist&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Nofollow&#34;&gt;nofollow&lt;/a&gt; link attribute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Set attribute values&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You have a parsed document that you would like to update attribute values on, before saving it out to disk, or sending it on as a HTTP response.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the attribute setter methods &lt;code&gt;Element.attr(_ key: String, _ value: String)&lt;/code&gt;, and &lt;code&gt;Elements.attr(_ key: String, _ value: String)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to modify the class attribute of an element, use the &lt;code&gt;Element.addClass(_ className: String)&lt;/code&gt; and &lt;code&gt;Element.removeClass(_ className: String)&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Elements&lt;/code&gt; collection has bulk attribute and class methods. For example, to add a &lt;code&gt;rel=&#34;nofollow&#34;&lt;/code&gt; attribute to every &lt;code&gt;a&lt;/code&gt; element inside a div:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try doc.select(&#34;div.comments a&#34;).attr(&#34;rel&#34;, &#34;nofollow&#34;)&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;Like the other methods in &lt;code&gt;Element&lt;/code&gt;, the attr methods return the current &lt;code&gt;Element&lt;/code&gt; (or &lt;code&gt;Elements&lt;/code&gt; when working on a collection from a select). This allows convenient method chaining:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try doc.select(&#34;div.masthead&#34;).attr(&#34;title&#34;, &#34;swiftsoup&#34;).addClass(&#34;round-box&#34;);&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Set the HTML of an element&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You need to modify the HTML of an element.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the HTML setter methods in &lt;code&gt;Element&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let doc: Document = try SwiftSoup.parse(&#34;&amp;lt;div&amp;gt;One&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;One&amp;lt;/span&amp;gt;&#34;)&#xA;    let div: Element = try doc.select(&#34;div&#34;).first()! // &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#xA;    try div.html(&#34;&amp;lt;p&amp;gt;lorem ipsum&amp;lt;/p&amp;gt;&#34;) // &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;lorem ipsum&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&#xA;    try div.prepend(&#34;&amp;lt;p&amp;gt;First&amp;lt;/p&amp;gt;&#34;)&#xA;    try div.append(&#34;&amp;lt;p&amp;gt;Last&amp;lt;/p&amp;gt;&#34;)&#xA;    print(div)&#xA;    // now div is: &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;First&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;lorem ipsum&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Last&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&#xA;    &#xA;    let span: Element = try doc.select(&#34;span&#34;).first()! // &amp;lt;span&amp;gt;One&amp;lt;/span&amp;gt;&#xA;    try span.wrap(&#34;&amp;lt;li&amp;gt;&amp;lt;a href=&#39;http://example.com/&#39;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#34;)&#xA;    print(doc)&#xA;    // now: &amp;lt;li&amp;gt;&amp;lt;a href=&#34;http://example.com/&#34;&amp;gt;&amp;lt;span&amp;gt;One&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discussion&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.html(_ html: String)&lt;/code&gt; clears any existing inner HTML in an element, and replaces it with parsed HTML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.prepend(_ first: String)&lt;/code&gt; and &lt;code&gt;Element.append(_ last: String)&lt;/code&gt; add HTML to the start or end of an element&#39;s inner HTML, respectively&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.wrap(_ around: String)&lt;/code&gt; wraps HTML around the outer HTML of an element.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See also&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;Element.prependElement(_ tag: String)&lt;/code&gt; and &lt;code&gt;Element.appendElement(_ tag: String)&lt;/code&gt; methods to create new elements and insert them into the document flow as a child element.&lt;/p&gt; &#xA;&lt;h1&gt;Setting the text content of elements&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You need to modify the text content of an HTML document.&lt;/p&gt; &#xA;&lt;h1&gt;Solution&lt;/h1&gt; &#xA;&lt;p&gt;Use the text setter methods of &lt;code&gt;Element&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let doc: Document = try SwiftSoup.parse(&#34;&#34;)&#xA;    let div: Element = try doc.select(&#34;div&#34;).first()! // &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#xA;    try div.text(&#34;five &amp;gt; four&#34;) // &amp;lt;div&amp;gt;five &amp;amp;gt; four&amp;lt;/div&amp;gt;&#xA;    try div.prepend(&#34;First &#34;)&#xA;    try div.append(&#34; Last&#34;)&#xA;    // now: &amp;lt;div&amp;gt;First five &amp;amp;gt; four Last&amp;lt;/div&amp;gt;&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discussion&lt;/h3&gt; &#xA;&lt;p&gt;The text setter methods mirror the [[HTML setter|Set the HTML of an element]] methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.text(_ text: String)&lt;/code&gt; clears any existing inner HTML in an element, and replaces it with the supplied text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Element.prepend(_ first: String)&lt;/code&gt; and &lt;code&gt;Element.append(_ last: String)&lt;/code&gt; add text nodes to the start or end of an element&#39;s inner HTML, respectively The text should be supplied unencoded: characters like &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; etc will be treated as literals, not HTML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Use DOM methods to navigate a document&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You have a HTML document that you want to extract data from. You know generally the structure of the HTML document.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the DOM-like methods available after parsing HTML into a &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let html: String = &#34;&amp;lt;a id=1 href=&#39;?foo=bar&amp;amp;mid&amp;amp;lt=true&#39;&amp;gt;One&amp;lt;/a&amp;gt; &amp;lt;a id=2 href=&#39;?foo=bar&amp;amp;lt;qux&amp;amp;lg=1&#39;&amp;gt;Two&amp;lt;/a&amp;gt;&#34;&#xA;    let els: Elements = try SwiftSoup.parse(html).select(&#34;a&#34;)&#xA;    for link: Element in els.array() {&#xA;        let linkHref: String = try link.attr(&#34;href&#34;)&#xA;        let linkText: String = try link.text()&#xA;    }&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;Elements provide a range of DOM-like methods to find elements, and extract and manipulate their data. The DOM getters are contextual: called on a parent Document they find matching elements under the document; called on a child element they find elements under that child. In this way you can window in on the data you want.&lt;/p&gt; &#xA;&lt;h3&gt;Finding elements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;getElementById(_ id: String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getElementsByTag(_ tag:String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getElementsByClass(_ className: String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getElementsByAttribute(_ key: String)&lt;/code&gt; (and related methods)&lt;/li&gt; &#xA; &lt;li&gt;Element siblings: &lt;code&gt;siblingElements()&lt;/code&gt;, &lt;code&gt;firstElementSibling()&lt;/code&gt;, &lt;code&gt;lastElementSibling()&lt;/code&gt;, &lt;code&gt;nextElementSibling()&lt;/code&gt;, &lt;code&gt;previousElementSibling()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Graph: &lt;code&gt;parent()&lt;/code&gt;, &lt;code&gt;children()&lt;/code&gt;, &lt;code&gt;child(_ index: Int)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Element data&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;attr(_ key: Strin)&lt;/code&gt; to get and &lt;code&gt;attr(_ key: String, _ value: String)&lt;/code&gt; to set attributes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attributes()&lt;/code&gt; to get all attributes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;id()&lt;/code&gt;, &lt;code&gt;className()&lt;/code&gt; and &lt;code&gt;classNames()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text()&lt;/code&gt; to get and &lt;code&gt;text(_ value: String)&lt;/code&gt; to set the text content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;html()&lt;/code&gt; to get and &lt;code&gt;html(_ value: String)&lt;/code&gt; to set the inner HTML content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;outerHtml()&lt;/code&gt; to get the outer HTML value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data()&lt;/code&gt; to get data content (e.g. of script and style tags)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag()&lt;/code&gt; and &lt;code&gt;tagName()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manipulating HTML and text&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;append(_ html: String)&lt;/code&gt;, &lt;code&gt;prepend(html: String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appendText(text: String)&lt;/code&gt;, &lt;code&gt;prependText(text: String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appendElement(tagName: String)&lt;/code&gt;, &lt;code&gt;prependElement(tagName: String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;html(_ value: String)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Use selector syntax to find elements&lt;/h1&gt; &#xA;&lt;h3&gt;Problem&lt;/h3&gt; &#xA;&lt;p&gt;You want to find or manipulate elements using a CSS or jQuery-like selector syntax.&lt;/p&gt; &#xA;&lt;h3&gt;Solution&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Element.select(_ selector: String)&lt;/code&gt; and &lt;code&gt;Elements.select(_ selector: String)&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let doc: Document = try SwiftSoup.parse(&#34;...&#34;)&#xA;    let links: Elements = try doc.select(&#34;a[href]&#34;) // a with href&#xA;    let pngs: Elements = try doc.select(&#34;img[src$=.png]&#34;)&#xA;    // img with src ending .png&#xA;    let masthead: Element? = try doc.select(&#34;div.masthead&#34;).first()&#xA;    // div with class=masthead&#xA;    let resultLinks: Elements? = try doc.select(&#34;h3.r &amp;gt; a&#34;) // direct a after h3&#xA;} catch Exception.Error(let type, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;SwiftSoup elements support a &lt;a href=&#34;https://www.w3.org/TR/2009/PR-css3-selectors-20091215/&#34;&gt;CSS&lt;/a&gt; (or &lt;a href=&#34;http://jquery.com&#34;&gt;jQuery&lt;/a&gt;) like selector syntax to find matching elements, that allows very powerful and robust queries.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; method is available in a &lt;code&gt;Document&lt;/code&gt;, &lt;code&gt;Element&lt;/code&gt;, or in &lt;code&gt;Elements&lt;/code&gt;. It is contextual, so you can filter by selecting from a specific element, or by chaining select calls.&lt;/p&gt; &#xA;&lt;p&gt;Select returns a list of &lt;code&gt;Elements&lt;/code&gt; (as &lt;code&gt;Elements&lt;/code&gt;), which provides a range of methods to extract and manipulate the results.&lt;/p&gt; &#xA;&lt;h3&gt;Selector overview&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tagname&lt;/code&gt;: find elements by tag, e.g. &lt;code&gt;a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ns|tag&lt;/code&gt;: find elements by tag in a namespace, e.g. &lt;code&gt;fb|name&lt;/code&gt; finds &lt;code&gt;&amp;lt;fb:name&amp;gt;&lt;/code&gt; elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#id&lt;/code&gt;: find elements by ID, e.g. &lt;code&gt;#logo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.class&lt;/code&gt;: find elements by class name, e.g. &lt;code&gt;.masthead&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[attribute]&lt;/code&gt;: elements with attribute, e.g. &lt;code&gt;[href]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[^attr]&lt;/code&gt;: elements with an attribute name prefix, e.g. &lt;code&gt;[^data-]&lt;/code&gt; finds elements with HTML5 dataset attributes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[attr=value]&lt;/code&gt;: elements with attribute value, e.g. &lt;code&gt;[width=500]&lt;/code&gt; (also quotable, like &lt;code&gt;[data-name=&#39;launch sequence&#39;]&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[attr^=value]&lt;/code&gt;, &lt;code&gt;[attr$=value]&lt;/code&gt;, &lt;code&gt;[attr*=value]&lt;/code&gt;: elements with attributes that start with, end with, or contain the value, e.g. &lt;code&gt;[href*=/path/]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[attr~=regex]&lt;/code&gt;: elements with attribute values that match the regular expression; e.g. &lt;code&gt;img[src~=(?i)\.(png|jpe?g)]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*&lt;/code&gt;: all elements, e.g. &lt;code&gt;*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Selector combinations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;el#id&lt;/code&gt;: elements with ID, e.g. &lt;code&gt;div#logo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;el.class&lt;/code&gt;: elements with class, e.g. &lt;code&gt;div.masthead&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;el[attr]&lt;/code&gt;: elements with attribute, e.g. &lt;code&gt;a[href]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any combination, e.g. &lt;code&gt;a[href].highlight&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ancestor &lt;code&gt;child&lt;/code&gt;: child elements that descend from ancestor, e.g. &lt;code&gt;.body p&lt;/code&gt; finds &lt;code&gt;p&lt;/code&gt; elements anywhere under a block with class &#34;body&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parent &amp;gt; child&lt;/code&gt;: child elements that descend directly from parent, e.g. &lt;code&gt;div.content &amp;gt; p&lt;/code&gt; finds p elements; and &lt;code&gt;body &amp;gt; *&lt;/code&gt; finds the direct children of the body tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;siblingA + siblingB&lt;/code&gt;: finds sibling B element immediately preceded by sibling A, e.g. &lt;code&gt;div.head + div&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;siblingA ~ siblingX&lt;/code&gt;: finds sibling X element preceded by sibling A, e.g. &lt;code&gt;h1 ~ p&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;el&lt;/code&gt;, &lt;code&gt;el&lt;/code&gt;, &lt;code&gt;el&lt;/code&gt;: group multiple selectors, find unique elements that match any of the selectors; e.g. &lt;code&gt;div.masthead&lt;/code&gt;, &lt;code&gt;div.logo&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pseudo selectors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:lt(n)&lt;/code&gt;: find elements whose sibling index (i.e. its position in the DOM tree relative to its parent) is less than n; e.g. &lt;code&gt;td:lt(3)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:gt(n)&lt;/code&gt;: find elements whose sibling index is greater than n; e.g. &lt;code&gt;div p:gt(2)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:eq(n)&lt;/code&gt;: find elements whose sibling index is equal to n; e.g. &lt;code&gt;form input:eq(1)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:has(seletor)&lt;/code&gt;: find elements that contain elements matching the selector; e.g. &lt;code&gt;div:has(p)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:not(selector)&lt;/code&gt;: find elements that do not match the selector; e.g. &lt;code&gt;div:not(.logo)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:contains(text)&lt;/code&gt;: find elements that contain the given text. The search is case-insensitive; e.g. &lt;code&gt;p:contains(swiftsoup)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:containsOwn(text)&lt;/code&gt;: find elements that directly contain the given text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:matches(regex)&lt;/code&gt;: find elements whose text matches the specified regular expression; e.g. &lt;code&gt;div:matches((?i)login)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:matchesOwn(regex)&lt;/code&gt;: find elements whose own text matches the specified regular expression&lt;/li&gt; &#xA; &lt;li&gt;Note that the above indexed pseudo-selectors are 0-based, that is, the first element is at index 0, the second at 1, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;h2&gt;To parse an HTML document from String:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let html = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;First parse&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;Parsed HTML into a doc.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;guard let doc: Document = try? SwiftSoup.parse(html) else { return }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get all text nodes:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let elements = try? doc.getAllElements() else { return html }&#xA;for element in elements {&#xA;    for textNode in element.textNodes() {&#xA;        [...]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set CSS using SwiftSoup:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try doc.head()?.append(&#34;&amp;lt;style&amp;gt;html {font-size: 2em}&amp;lt;/style&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get HTML value&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let html = &#34;&amp;lt;div class=\&#34;container-fluid\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;div class=\&#34;panel panel-default \&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;div class=\&#34;panel-body\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;form id=\&#34;coupon_checkout\&#34; action=\&#34;http://uat.all.com.my/checkout/couponcode\&#34; method=\&#34;post\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;input type=\&#34;hidden\&#34; name=\&#34;transaction_id\&#34; value=\&#34;4245\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;input type=\&#34;hidden\&#34; name=\&#34;lang\&#34; value=\&#34;EN\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;input type=\&#34;hidden\&#34; name=\&#34;devicetype\&#34; value=\&#34;\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;div class=\&#34;input-group\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;input type=\&#34;text\&#34; class=\&#34;form-control\&#34; id=\&#34;coupon_code\&#34; name=\&#34;coupon\&#34; placeholder=\&#34;Coupon Code\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;span class=\&#34;input-group-btn\&#34;&amp;gt;&#34;&#xA;    + &#34;&amp;lt;button class=\&#34;btn btn-primary\&#34; type=\&#34;submit\&#34;&amp;gt;Enter Code&amp;lt;/button&amp;gt;&#34;&#xA;    + &#34;&amp;lt;/span&amp;gt;&#34;&#xA;    + &#34;&amp;lt;/div&amp;gt;&#34;&#xA;    + &#34;&amp;lt;/form&amp;gt;&#34;&#xA;    + &#34;&amp;lt;/div&amp;gt;&#34;&#xA;    + &#34;&amp;lt;/div&amp;gt;&#34;&#xA;guard let doc: Document = try? SwiftSoup.parse(html) else { return } // parse html&#xA;let elements = try doc.select(&#34;[name=transaction_id]&#34;) // query&#xA;let transaction_id = try elements.get(0) // select first element&#xA;let value = try transaction_id.val() // get value&#xA;print(value) // 4245&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to remove all the html from a string&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let doc: Document = try? SwiftSoup.parse(html) else { return } // parse html&#xA;guard let txt = try? doc.text() else { return }&#xA;print(txt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to get and update XML values&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let xml = &#34;&amp;lt;?xml version=&#39;1&#39; encoding=&#39;UTF-8&#39; something=&#39;else&#39;?&amp;gt;&amp;lt;val&amp;gt;One&amp;lt;/val&amp;gt;&#34;&#xA;guard let doc = try? SwiftSoup.parse(xml, &#34;&#34;, Parser.xmlParser()) else { return }&#xA;guard let element = try? doc.getElementsByTag(&#34;val&#34;).first() // Find first element&#xA;element.text(&#34;NewValue&#34;) // Edit Value&#xA;let valueString = element.text() // &#34;NewValue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to get all &lt;code&gt;&amp;lt;img src&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let doc: Document = try SwiftSoup.parse(html)&#xA;    let srcs: Elements = try doc.select(&#34;img[src]&#34;)&#xA;    let srcsStringArray: [String?] = srcs.array().map { try? $0.attr(&#34;src&#34;).description }&#xA;    // do something with srcsStringArray&#xA;} catch Exception.Error(_, let message) {&#xA;    print(message)&#xA;} catch {&#xA;    print(&#34;error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get all &lt;code&gt;href&lt;/code&gt; of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let html = &#34;&amp;lt;a id=1 href=&#39;?foo=bar&amp;amp;mid&amp;amp;lt=true&#39;&amp;gt;One&amp;lt;/a&amp;gt; &amp;lt;a id=2 href=&#39;?foo=bar&amp;amp;lt;qux&amp;amp;lg=1&#39;&amp;gt;Two&amp;lt;/a&amp;gt;&#34;&#xA;guard let els: Elements = try? SwiftSoup.parse(html).select(&#34;a&#34;) else { return }&#xA;for element: Element in els.array() {&#xA;    print(try? element.attr(&#34;href&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;?foo=bar&amp;amp;mid&amp;amp;lt=true&#34;&#xA;&#34;?foo=bar&amp;lt;qux&amp;amp;lg=1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Escape and Unescape&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let text = &#34;Hello &amp;amp;&amp;lt;&amp;gt; √Ö √• œÄ Êñ∞ there ¬æ ¬© ¬ª&#34;&#xA;&#xA;print(Entities.escape(text))&#xA;print(Entities.unescape(text))&#xA;&#xA;&#xA;print(Entities.escape(text, OutputSettings().encoder(String.Encoding.ascii).escapeMode(Entities.EscapeMode.base)))&#xA;print(Entities.escape(text, OutputSettings().charset(String.Encoding.ascii).escapeMode(Entities.EscapeMode.extended)))&#xA;print(Entities.escape(text, OutputSettings().charset(String.Encoding.ascii).escapeMode(Entities.EscapeMode.xhtml)))&#xA;print(Entities.escape(text, OutputSettings().charset(String.Encoding.utf8).escapeMode(Entities.EscapeMode.extended)))&#xA;print(Entities.escape(text, OutputSettings().charset(String.Encoding.utf8).escapeMode(Entities.EscapeMode.xhtml)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Hello &amp;amp;amp;&amp;amp;lt;&amp;amp;gt; √Ö √• œÄ Êñ∞ there ¬æ ¬© ¬ª&#34;&#xA;&#34;Hello &amp;amp;&amp;lt;&amp;gt; √Ö √• œÄ Êñ∞ there ¬æ ¬© ¬ª&#34;&#xA;&#xA;&#xA;&#34;Hello &amp;amp;amp;&amp;amp;lt;&amp;amp;gt; &amp;amp;Aring; &amp;amp;aring; &amp;amp;#x3c0; &amp;amp;#x65b0; there &amp;amp;frac34; &amp;amp;copy; &amp;amp;raquo;&#34;&#xA;&#34;Hello &amp;amp;amp;&amp;amp;lt;&amp;amp;gt; &amp;amp;angst; &amp;amp;aring; &amp;amp;pi; &amp;amp;#x65b0; there &amp;amp;frac34; &amp;amp;copy; &amp;amp;raquo;&#34;&#xA;&#34;Hello &amp;amp;amp;&amp;amp;lt;&amp;amp;gt; &amp;amp;#xc5; &amp;amp;#xe5; &amp;amp;#x3c0; &amp;amp;#x65b0; there &amp;amp;#xbe; &amp;amp;#xa9; &amp;amp;#xbb;&#34;&#xA;&#34;Hello &amp;amp;amp;&amp;amp;lt;&amp;amp;gt; √Ö √• œÄ Êñ∞ there ¬æ ¬© ¬ª&#34;&#xA;&#34;Hello &amp;amp;amp;&amp;amp;lt;&amp;amp;gt; √Ö √• œÄ Êñ∞ there ¬æ ¬© ¬ª&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Nabil Chatbi, &lt;a href=&#34;mailto:scinfu@gmail.com&#34;&gt;scinfu@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;SwiftSoup was ported to Swift from Java &lt;a href=&#34;https://jsoup.org/&#34;&gt;Jsoup&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SwiftSoup is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jrasmusson/ios-starter-kit</title>
    <updated>2022-06-26T01:56:40Z</updated>
    <id>tag:github.com,2022-06-26:/jrasmusson/ios-starter-kit</id>
    <link href="https://github.com/jrasmusson/ios-starter-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A starter kit for those interested in iOS programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ios-starter-kit&lt;/h1&gt; &#xA;&lt;p&gt;A starter kit for those interested in iOS programming&lt;/p&gt; &#xA;&lt;h2&gt;Swift&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/Array/README.md&#34;&gt;Arrays&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/DictionaryGrouping/README.md&#34;&gt;Dictionary Grouping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/Enums/README.md&#34;&gt;Enums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Computed-Properties.md&#34;&gt;Computed Properties&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/swift/DateFormatter.md&#34;&gt;DateFormatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Protocols.md&#34;&gt;Protocols&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Protocol-oriented-programming.md&#34;&gt;Protocol Oriented Programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Protocol-based-inheritance.md&#34;&gt;Protocol based inheritance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Protocols-and-Delegates.md&#34;&gt;Protocols &amp;amp; Delegates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Protocols-and-Generics.md&#34;&gt;Protocols &amp;amp; Generics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Protocols-and-Unit-Testing.md&#34;&gt;Protocols &amp;amp; Unit Testing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Closures.md&#34;&gt;Closures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Completion%20Blocks.md&#34;&gt;Completion Blocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Generics.md&#34;&gt;Generics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Extensions-And-Protocols.md&#34;&gt;Extensions &amp;amp; Protocols&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/EnumsStructsClasses.md&#34;&gt;Structs, Enums, and Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Properties.md&#34;&gt;Properties&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Optionals.md&#34;&gt;Optionals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Numbers.md&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Tuples.md&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/If-vs-Guard.md&#34;&gt;If vs Guard Clauses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Error-handling.md&#34;&gt;Error handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Structs-vs-Classes.md&#34;&gt;Structs-vs-Clases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/API-Design.md&#34;&gt;API Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Markdown.md&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Defer.md&#34;&gt;Defer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Singletons.md&#34;&gt;Singletons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/ARC.md&#34;&gt;Automatic Reference Counting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Access-Control.md&#34;&gt;Access Control&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Private-Typed-Class.md&#34;&gt;Private typed Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Initializers.md&#34;&gt;Initializers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Map-Filter-Reduce.md&#34;&gt;Map, filter, reduce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/ARC.md&#34;&gt;ARC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Inheritance.md&#34;&gt;Inheritance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/NotificationCenter.md&#34;&gt;NotificationCenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Strings.md&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Idioms.md&#34;&gt;Idioms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/DynamicCallable.md&#34;&gt;DynamicCallable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/swift/Result.md&#34;&gt;Result&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/SFSymbols/README.md&#34;&gt;SFSymbols&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/RadioButton/README.md&#34;&gt;Radio Button&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/Nibs/README.md&#34;&gt;Nibs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/Animation/README.md&#34;&gt;Animations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIViewController/README.md&#34;&gt;UIViewController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UISheetPresentationController/README.md&#34;&gt;UISheetPresentationController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UISheetPresentationController/README2.md&#34;&gt;UISheetPresentationController - Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/DynamicFont&#34;&gt;DynamicFont&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/Color/README.md&#34;&gt;Color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/CoreGraphics/README.md&#34;&gt;CoreGraphics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/Networking/README.md&#34;&gt;Networking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/Shadows/README.md&#34;&gt;Shadows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIStackView/Basics/README.md&#34;&gt;UIStackView&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIStackView/Distribution-Alignment.md&#34;&gt;Distribution &amp;amp; Alignment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIStackView/Layout-Patterns.md&#34;&gt;Layout Patterns&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/UILabel/README.md&#34;&gt;UILabel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIImageView/README.md&#34;&gt;UIImageView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIImage/README.md&#34;&gt;UIImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIImagePicker/README.md&#34;&gt;UIImagePicker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UITextField/UITextField.md&#34;&gt;UITextField&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIAlertController/UIAlertController.md&#34;&gt;UIAlertController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIProgressView/README.md&#34;&gt;UIProgressView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UISegmentedControl/README.md&#34;&gt;UISegmentedControl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIScrollView/UIScrollView.md&#34;&gt;UIScrollView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/UINavigationController&#34;&gt;UINavigationController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/NSUserDefaults/NSUserDefaults.md&#34;&gt;NSUserDefaults&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/NSCoder/NSCoder.md&#34;&gt;NSCoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UICollectionView/README.md&#34;&gt;UICollectionView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIPageViewController/README.md&#34;&gt;UIPageViewController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UITextView/README.md&#34;&gt;UITextView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIButton/README.md&#34;&gt;UIButton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UISwitch/README.md&#34;&gt;UISwitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIModal/README.md&#34;&gt;UIModal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UITapGestureRecognizer/README.md&#34;&gt;UITapGestureRecognizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIPanGestureRecognizer/README.md&#34;&gt;UIPanGestureRecognizer - Moving Block&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/UIStatusBar&#34;&gt;UIStatusBar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIRefreshControl/README.md&#34;&gt;UIRefreshControl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/Margins/README.md&#34;&gt;Margins &amp;amp; Layout Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/FactoryMethodsUIElements.md&#34;&gt;Factory UI Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/WebViews/README.md&#34;&gt;WebViews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIView/README.md&#34;&gt;UIView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/UIVisualEffectView&#34;&gt;UIVisualEffectView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UIPickerView/README.md&#34;&gt;UIPickerView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/SwipeGesture/README.md&#34;&gt;Swipe Gestures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UITabBarViewController/README.md&#34;&gt;UITabBarViewController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/FramesVsBounds/README.md&#34;&gt;Frame vs Bounds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/basics/CoreData&#34;&gt;CoreData&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/Xibs/README.md&#34;&gt;Xibs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/NSAttributedString/README.md&#34;&gt;NSAttributedString&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/ContextMenu/README.md&#34;&gt;ContextMenus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/HigherOrderFunctions/README.md&#34;&gt;Higher Order Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/&#34;&gt;PDFs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UITableView&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UITableView/UITableView.md&#34;&gt;UITableView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UITableViewHeaderFooterInSection/README.md&#34;&gt;UITableView Full Header Footer In Section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UITableViewCell/UITableViewCell.md&#34;&gt;UITableViewCell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UITableView/UITableCellsAndTypes.md&#34;&gt;UITableViewCellsAndTypes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/basics/UITableView/DragAndDrop/README.md&#34;&gt;Drag and Drop&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SpriteKit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/spritekit/README.md&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/Views-vs-ViewControllers.md&#34;&gt;Views vs ViewControllers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/MVVM/MVVM.md&#34;&gt;MVVM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/MVP/README.md&#34;&gt;MVP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/Guiding-Principles.md&#34;&gt;Guiding Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/DataSource-Pattern.md&#34;&gt;Datasource Pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/OO.md&#34;&gt;Object Oriented&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/Compression-Resistance.md&#34;&gt;CHCR Content Hugging and Compression Resistance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/Responder-Chain.md&#34;&gt;Responder Chain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/advanced/Performance.md&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/advanced/DispatchGroup/DispatchGroup.md&#34;&gt;DispatchGroup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Autolayout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/CheatSheet.md&#34;&gt;Cheat Sheat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/basics/Basics.md&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/add-identifier-tag-to-view.md&#34;&gt;How to set identifier on view&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/stackview/ImageLabelStackView/README.md&#34;&gt;Image label in a stackview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/Centering-and-alignment.md&#34;&gt;Centering and alignment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/intrinsicContentSize.md&#34;&gt;IntrinsicContentSize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/breakable-constraints.md&#34;&gt;Breakable Constraints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/autolayout/how-to-resize-image.md&#34;&gt;How to resize image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/testing/unit-testing.md&#34;&gt;Unit testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/handyOverrides.md&#34;&gt;Misc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/mocking-shared-service.md&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/protocols/protocols.md&#34;&gt;Protocols and parameterization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/how-to-test-notifications.md&#34;&gt;How to test notifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/how-to-test-errors.md&#34;&gt;How to test for specific error&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/testing-with-callbacks.md&#34;&gt;How to test via callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/viewControllers.md&#34;&gt;How to test ViewControllers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/testing/how-to-test-responder-chain.md&#34;&gt;How to test Responder Chain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/testing/how-to-load-json-test.md&#34;&gt;How to load JSON test file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/testing/XCUITest/README.md&#34;&gt;XCUITest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Animations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/animations/CoreAnimation/README.md&#34;&gt;Core Animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/ButtonSlider/READEME.md&#34;&gt;ButtonSlider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/BasicAnimation/BasicAnimation.md&#34;&gt;Basic Animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/ChainedAnimations/ChainedAnimations.md&#34;&gt;Chained Animations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/BasicAnimationCurves/README.md&#34;&gt;Basic Animation Curves&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/HowTos/README.md&#34;&gt;How tos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/InteractiveAnimations.md&#34;&gt;Interactive Animations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/UIViewControllerTransitioningDelegate/README.md&#34;&gt;UIViewControllerTransitioningDelegate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/LeftRightSwipe1/README.md&#34;&gt;Left/Right Swipe Add/Remove ViewController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/LeftRightSwipePageController/README.md&#34;&gt;Left/Right Swipe with PageController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/animations/Links.md&#34;&gt;Useful links&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How tos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/howtos/sinatra.md&#34;&gt;Sinatra&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/howtos/load-json-from-project.md&#34;&gt;How to load JSON from bundle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/howtos/app-time-out-inactivity.md&#34;&gt;How to app time inactivity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/howtos/add-uikit-preview-swiftui.md&#34;&gt;Add SwiftUI Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/aaHow-To.md&#34;&gt;Generic How Tos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/key-value-observe.md&#34;&gt;Key-Value Observing (KVO) / Key-Value Coding (KVC)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jrasmusson/ios-starter-kit/master/howtos/no-storyboards/README.md&#34;&gt;No storyboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/common-code.md&#34;&gt;Commonly used code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/SingleTouchSimulator/SingleTouchSimulator.md&#34;&gt;Enable single touch in Xcode simulator for recording animated gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/howto-charles.md&#34;&gt;Setup Charles proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/howto-devicelogs.md&#34;&gt;See device logs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/howto-delete-provisioning-profiles.md&#34;&gt;Delete provisioning files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://uicolor.xyz/#/rgb-to-ui&#34;&gt;Hex RGB Conversion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/computed-properties.md&#34;&gt;Refactor computed properties&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/HyperlinkModal/HyperlinkModal.md&#34;&gt;Hyperlink text opening a modal ViewController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/LoadingPage/LoadingPage.md&#34;&gt;Loading Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/SpacerViews/README.md&#34;&gt;Spacer Views&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/link-conditioner.md&#34;&gt;LinkConditioner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/ios11version.md&#34;&gt;iOS11 version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/pretty-print-json.md&#34;&gt;Pretty print json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/get-back-on-main-thread.md&#34;&gt;Get back on the main thread&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/how-to-initializer.md&#34;&gt;Create init constructor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/change-xcode-simulator-runtime.md&#34;&gt;How to change Xcode simulator runtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/clear-derived-data.md&#34;&gt;Clear derived data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/view-crash-logs.md&#34;&gt;How to view crash logs for devices in production&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/round-corners-imageView.md&#34;&gt;Round corners on an UIImageView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/style-button-with-image-and-text.md&#34;&gt;Style button with image and text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/alamofire-json.md&#34;&gt;Alamofire JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/basics/UITextField/UITextField.md#how-to-adjust-view-when-keyboard-present&#34;&gt;How to adjust view when keyboard present&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/turn-off-debug-console.md&#34;&gt;How to turn off debug console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/dispatch-main-queue.md&#34;&gt;How to dispatch main queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/vapor-setup.md&#34;&gt;How to setup Vapor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/rails-ios.md&#34;&gt;How to Rails iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/add-identifier-tag-to-view.md&#34;&gt;How to add identifer to tag or view&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/work-with-pdfs.md&#34;&gt;How to work with pdfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/add-circle-uiview.md&#34;&gt;How to add a circle to a UIView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/howto-feature-flag.md&#34;&gt;How to setup a feature flag via environment variable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/how-to-curl-alamofire.md&#34;&gt;How to curl alamofire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/height-of-label.md&#34;&gt;How to calculate height of label&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/corner-and-shadow.md&#34;&gt;Add corner and shadow to view&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/xcode-command-line.md&#34;&gt;How to Xcode command line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/howto-TPKeyboardAvoiding.md&#34;&gt;TPKeyboardAvoiding&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trouble Shooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/troubleshooting/app-installation/app-installation.md&#34;&gt;App installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cocoapods / Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/raw/master/howtos/setup-cocoapods.md&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoapods.org/pods/ChameleonFramework&#34;&gt;Chameleon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;AlamoFire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SwiftyJSON/SwiftyJSON&#34;&gt;SwiftJSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rs/SDWebImage&#34;&gt;SDWebImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrasmusson/ios-starter-kit/tree/master/cocoapods/lottie/README.md&#34;&gt;Lottie animations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Handy links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osstatus.com&#34;&gt;OSStatus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/swift/#type-variable-and-function-declarations&#34;&gt;Google Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dashvlas/awesome-ios-interview/raw/master/Resources/English.md&#34;&gt;Interview Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/download/more/&#34;&gt;Xcode download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;Good git commit guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nshipster.com/xcconfig&#34;&gt;Xcode build configuration files&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>